{
  "address": "0x45a386507ddd8021bbd41996e6148f735812fe0e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TournamentTicketSale",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-29\n*/\n\npragma solidity >=0.4.22 <0.6.0;\n\n// * Gods Unchained Ticket Sale\n//\n// * Version 1.0\n//\n// * A dedicated contract selling tickets for the Gods Unchained tournament.\n//\n// * https://gu.cards\n\ncontract ERC20Interface {\n    function totalSupply() public view returns (uint);\n    function balanceOf(address tokenOwner) public view returns (uint balance);\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\ncontract TournamentTicket is ERC20Interface {}\n\ncontract TournamentTicketSale {\n\n    //////// V A R I A B L E S\n    //\n    // Current address of the ticket contract (tickets).\n    //\n    address public ticketContract;\n    //\n    // Address that owns the tickets.\n    //\n    address payable public ticketOwner;\n    //\n    // In case the sale is paused.\n    //\n    bool public paused;\n    //\n    // Price per ticket.\n    //\n    uint public pricePerTicket;\n    //\n    // Standard contract ownership.\n    //\n    address payable public owner;\n    address payable private nextOwner;\n\n    //////// M O D I F I E R S\n    //\n    // Invokable only by contract owner.\n    //\n    modifier onlyContractOwner {\n        require(msg.sender == owner, \"Function called by non-owner.\");\n        _;\n    }\n    //\n    // Invokable only by owner of the tickets.\n    //\n    modifier onlyTicketOwner {\n        require(msg.sender == ticketOwner, \"Function called by non-ticket-owner.\");\n        _;\n    }\n    //\n    // Invokable only if exchange is not paused.\n    //\n    modifier onlyUnpaused {\n        require(paused == false, \"Exchange is paused.\");\n        _;\n    }\n\n    //////// C O N S T R U C T O R\n    //\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    //////// F U N C T I O N S\n    //\n    // Buy a single ticket.\n    //\n    function buyOne() onlyUnpaused payable external {\n        TournamentTicket ticket = getTicketContract();\n\n        require(ticket.balanceOf(msg.sender) == 0, \"You already have a ticket, and you only need one to participate!\");\n        require(pricePerTicket > 0, \"The price per ticket needs to be more than 0!\");\n        require(msg.value == pricePerTicket, \"The amout sent is not corresponding with the ticket price!\");\n        \n        require(\n            ticket.transferFrom(getTicketOwnerAddress(), msg.sender, 1000000000000000000),\n            \"Ticket transfer failed!\"\n        );\n        \n        getTicketOwnerAddress().transfer(msg.value);\n    }\n    //\n    // Sets current ticket price.\n    //\n    function setTicketPrice(uint price) external onlyTicketOwner {\n        pricePerTicket = price;\n    }\n    //\n    // Sets current ticket token contract address.\n    //\n    function setTicketContract(address value) external onlyContractOwner {\n        ticketContract = value;\n    }\n    //\n    // Get current ticket token contract instance.\n    //\n    function getTicketContract() internal view returns(TournamentTicket) {\n        return(TournamentTicket(ticketContract));\n    }\n    //\n    // Sets current ticket token contract address.\n    //\n    function setTicketOwnerAddress(address payable value) external onlyContractOwner {\n        ticketOwner = value;\n    }\n    //\n    // Get current ticket token contract instance.\n    //\n    function getTicketOwnerAddress() internal view returns(address payable) {\n        return(ticketOwner);\n    }\n    //\n    // Set paused\n    //\n    function setPaused(bool value) external onlyContractOwner {\n        paused = value;\n    }\n    //\n    // Standard contract ownership transfer.\n    //\n    function approveNextOwner(address payable _nextOwner) external onlyContractOwner {\n        require(_nextOwner != owner, \"Cannot approve current owner.\");\n        nextOwner = _nextOwner;\n    }\n    //\n    // Accept the next getGodsTokenContract owner.\n    //\n    function acceptNextOwner() external {\n        require(msg.sender == nextOwner, \"The new owner has to accept the previously set new owner.\");\n        owner = nextOwner;\n    }\n    //\n    // Fallback function deliberately left empty. It's primary use case\n    // is to top up the exchange.\n    //\n    function () external payable {}\n    \n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"ticketOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setTicketPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyOne\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setTicketOwnerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setTicketContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptNextOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nextOwner\",\"type\":\"address\"}],\"name\":\"approveNextOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pricePerTicket\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]",
  "bytecode": "608060405234801561001057600080fd5b5033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611035806100616000396000f3fe6080604052600436106100a65760003560e01c80638da5cb5b116100645780638da5cb5b14610207578063a9bd26e41461025e578063c0caa772146102af578063d06c54fb14610300578063d579fd4414610317578063e987410614610368576100a6565b8062641e8b146100a857806315981650146100ff57806316c38b3c1461013a57806358a86e1d146101775780635c975abb146101ce5780636b5e2896146101fd575b005b3480156100b457600080fd5b506100bd610393565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561010b57600080fd5b506101386004803603602081101561012257600080fd5b81019080803590602001909291905050506103b9565b005b34801561014657600080fd5b506101756004803603602081101561015d57600080fd5b81019080803515159060200190929190505050610469565b005b34801561018357600080fd5b5061018c610549565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101da57600080fd5b506101e361056e565b604051808215151515815260200191505060405180910390f35b610205610581565b005b34801561021357600080fd5b5061021c6109a3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561026a57600080fd5b506102ad6004803603602081101561028157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506109c9565b005b3480156102bb57600080fd5b506102fe600480360360208110156102d257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ad0565b005b34801561030c57600080fd5b50610315610bd6565b005b34801561032357600080fd5b506103666004803603602081101561033a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ce1565b005b34801561037457600080fd5b5061037d610eac565b6040518082815260200191505060405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461045f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180610fe66024913960400191505060405180910390fd5b8060028190555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461052c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f46756e6374696f6e2063616c6c6564206279206e6f6e2d6f776e65722e00000081525060200191505060405180910390fd5b80600160146101000a81548160ff02191690831515021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160149054906101000a900460ff1681565b60001515600160149054906101000a900460ff1615151461060a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f45786368616e6765206973207061757365642e0000000000000000000000000081525060200191505060405180910390fd5b6000610614610eb2565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561069557600080fd5b505afa1580156106a9573d6000803e3d6000fd5b505050506040513d60208110156106bf57600080fd5b810190808051906020019092919050505014610726576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526040815260200180610f066040913960400191505060405180910390fd5b600060025411610781576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d815260200180610f7f602d913960400191505060405180910390fd5b60025434146107db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603a815260200180610fac603a913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd6107ff610edb565b33670de0b6b3a76400006040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156108a557600080fd5b505af11580156108b9573d6000803e3d6000fd5b505050506040513d60208110156108cf57600080fd5b8101908080519060200190929190505050610952576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f5469636b6574207472616e73666572206661696c65642100000000000000000081525060200191505060405180910390fd5b61095a610edb565b73ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f1935050505015801561099f573d6000803e3d6000fd5b5050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a8c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f46756e6374696f6e2063616c6c6564206279206e6f6e2d6f776e65722e00000081525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b93576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f46756e6374696f6e2063616c6c6564206279206e6f6e2d6f776e65722e00000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526039815260200180610f466039913960400191505060405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610da4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f46756e6374696f6e2063616c6c6564206279206e6f6e2d6f776e65722e00000081525060200191505060405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610e68576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f43616e6e6f7420617070726f76652063757272656e74206f776e65722e00000081525060200191505060405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60025481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690509056fe596f7520616c726561647920686176652061207469636b65742c20616e6420796f75206f6e6c79206e656564206f6e6520746f20706172746963697061746521546865206e6577206f776e65722068617320746f20616363657074207468652070726576696f75736c7920736574206e6577206f776e65722e54686520707269636520706572207469636b6574206e6565647320746f206265206d6f7265207468616e20302154686520616d6f75742073656e74206973206e6f7420636f72726573706f6e64696e67207769746820746865207469636b65742070726963652146756e6374696f6e2063616c6c6564206279206e6f6e2d7469636b65742d6f776e65722ea165627a7a72305820ed7d9f2403d8c2c405027bd0d57eecba31cc678e281472bd21aa6400773ec3e20029"
}