{
  "address": "0x45e6ff0885ebf5d616e460d14855455d92d6cc04",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "VestingERC20",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-25\n*/\n\npragma solidity 0.4.18;\n\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath64 {\n  function mul(uint64 a, uint64 b) internal constant returns (uint64) {\n    uint64 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint64 a, uint64 b) internal constant returns (uint64) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint64 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint64 a, uint64 b) internal constant returns (uint64) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint64 a, uint64 b) internal constant returns (uint64) {\n    uint64 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title VestingERC20\n * @dev VestingERC20 is a contract for managing vesting of ERC20 Token.\n * @dev The tokens are unlocked continuously to the vester.\n * @dev The contract host the tokens that are locked for the vester.\n */\ncontract VestingERC20 {\n    using SafeMath for uint256;\n    using SafeMath64 for uint64;\n\n    struct Grant {\n        uint256 vestedAmount;\n        uint64 startTime;\n        uint64 cliffTime;\n        uint64 endTime;\n        uint256 withdrawnAmount;\n    }\n\n    // list of the grants (token => granter => vester => Grant).\n    mapping(address => mapping(address => mapping(address => Grant))) public grantPerTokenGranterVester;\n\n    // Ledger of the tokens hodled (this not a typo ;) ) in this contract (token => user => balance).\n    mapping(address => mapping(address => uint256)) private balancePerPersonPerToken;\n\n\n    event NewGrant(address granter, address vester, address token, uint256 vestedAmount, uint64 startTime, uint64 cliffTime, uint64 endTime);\n    event GrantRevoked(address granter, address vester, address token);\n    event Deposit(address token, address granter, uint amount, uint balance);\n    event TokenReleased(address token, address granter, address vester, uint amount);\n    event Withdraw(address token, address user, uint amount);\n\n    /**\n     * @dev Create a vesting to an ethereum address.\n     *\n     * If there is not enough tokens available on the contract, an exception is thrown.\n     *\n     * @param _token The ERC20 token contract address.\n     * @param _vester The address where the token will be sent.\n     * @param _vestedAmount The amount of tokens to be sent during the vesting period.\n     * @param _startTime The time when the vesting starts.\n     * @param _grantPeriod The period of the grant in sec.\n     * @param _cliffPeriod The period in sec during which time the tokens cannot be withraw.\n     */\n    function createVesting(\n        address _token, \n        address _vester,  \n        uint256 _vestedAmount,\n        uint64 _startTime,\n        uint64 _grantPeriod,\n        uint64 _cliffPeriod) \n        external\n    {\n        require(_token != 0);\n        require(_vester != 0);\n        require(_cliffPeriod <= _grantPeriod);\n        require(_vestedAmount != 0);\n        require(_grantPeriod==0 || _vestedAmount * _grantPeriod >= _vestedAmount); // no overflow allow here! (to make getBalanceVestingInternal safe).\n\n        // verify that there is not already a grant between the addresses for this specific contract.\n        require(grantPerTokenGranterVester[_token][msg.sender][_vester].vestedAmount==0);\n\n        var cliffTime = _startTime.add(_cliffPeriod);\n        var endTime = _startTime.add(_grantPeriod);\n\n        grantPerTokenGranterVester[_token][msg.sender][_vester] = Grant(_vestedAmount, _startTime, cliffTime, endTime, 0);\n\n        // update the balance\n        balancePerPersonPerToken[_token][msg.sender] = balancePerPersonPerToken[_token][msg.sender].sub(_vestedAmount);\n\n        NewGrant(msg.sender, _vester, _token, _vestedAmount, _startTime, cliffTime, endTime);\n    }\n\n    /**\n     * @dev Revoke a vesting\n     *\n     * The vesting is deleted and the tokens already released are sent to the vester.\n     *\n     * @param _token The address of the token.\n     * @param _vester The address of the vester.\n     */\n    function revokeVesting(address _token, address _vester) \n        external\n    {\n        require(_token != 0);\n        require(_vester != 0);\n\n        Grant storage _grant = grantPerTokenGranterVester[_token][msg.sender][_vester];\n\n        // verify if the grant exists\n        require(_grant.vestedAmount!=0);\n\n        // send token available\n        sendTokenReleasedToBalanceInternal(_token, msg.sender, _vester);\n\n        // unlock the tokens reserved for this grant\n        balancePerPersonPerToken[_token][msg.sender] = \n            balancePerPersonPerToken[_token][msg.sender].add(\n                _grant.vestedAmount.sub(_grant.withdrawnAmount)\n            );\n\n        // delete the grants\n        delete grantPerTokenGranterVester[_token][msg.sender][_vester];\n\n        GrantRevoked(msg.sender, _vester, _token);\n    }\n\n    /**\n     * @dev Send the released token to the user balance and eventually withdraw\n     *\n     * Put the tokens released to the user balance.\n     * If _doWithdraw is true, send the whole balance to the user.\n\n     * @param _token The address of the token.\n     * @param _granter The address of the granter.\n     * @param _doWithdraw bool, true to withdraw in the same time.\n     */\n    function releaseGrant(address _token, address _granter, bool _doWithdraw) \n        external\n    {\n        // send token to the vester\n        sendTokenReleasedToBalanceInternal(_token, _granter, msg.sender);\n\n        if(_doWithdraw) {\n            withdraw(_token);           \n        }\n\n        // delete grant if fully withdrawn\n        Grant storage _grant = grantPerTokenGranterVester[_token][_granter][msg.sender];\n        if(_grant.vestedAmount == _grant.withdrawnAmount) \n        {\n            delete grantPerTokenGranterVester[_token][_granter][msg.sender];\n        }\n    }\n\n    /**\n     * @dev Withdraw tokens avaibable\n     *\n     * The tokens are sent to msg.sender and his balancePerPersonPerToken is updated to zero.\n     * If there is the token transfer fail, the transaction is revert.\n     *\n     * @param _token The address of the token.\n     */\n    function withdraw(address _token) \n        public\n    {\n        uint amountToSend = balancePerPersonPerToken[_token][msg.sender];\n        balancePerPersonPerToken[_token][msg.sender] = 0;\n        Withdraw(_token, msg.sender, amountToSend);\n        require(ERC20(_token).transfer(msg.sender, amountToSend));\n    }\n\n    /**\n     * @dev Send the token released to the balance address\n     *\n     * The token released for the address are sent and his withdrawnAmount are updated.\n     * If there is nothing the send, return false.\n     * \n     * @param _token The address of the token.\n     * @param _granter The address of the granter.\n     * @param _vester The address of the vester.\n     * @return true if tokens have been sent.\n     */\n    function sendTokenReleasedToBalanceInternal(address _token, address _granter, address _vester) \n        internal\n    {\n        Grant storage _grant = grantPerTokenGranterVester[_token][_granter][_vester];\n        uint256 amountToSend = getBalanceVestingInternal(_grant);\n\n        // update withdrawnAmount\n        _grant.withdrawnAmount = _grant.withdrawnAmount.add(amountToSend);\n\n        TokenReleased(_token, _granter, _vester, amountToSend);\n\n        // send tokens to the vester's balance\n        balancePerPersonPerToken[_token][_vester] = balancePerPersonPerToken[_token][_vester].add(amountToSend); \n    }\n\n    /**\n     * @dev Calculate the amount of tokens released for a grant\n     * \n     * @param _grant Grant information.\n     * @return the number of tokens released.\n     */\n    function getBalanceVestingInternal(Grant _grant)\n        internal\n        constant\n        returns(uint256)\n    {\n        if(now < _grant.cliffTime) \n        {\n            // the grant didn't start \n            return 0;\n        }\n        else if(now >= _grant.endTime)\n        {\n            // after the end of the grant release everything\n            return _grant.vestedAmount.sub(_grant.withdrawnAmount);\n        }\n        else\n        {\n            //  token available = vestedAmount * (now - startTime) / (endTime - startTime)  - withdrawnAmount\n            //  => in other words : (number_of_token_granted_per_second * second_since_grant_started) - amount_already_withdraw\n            return _grant.vestedAmount.mul( \n                        now.sub(_grant.startTime)\n                    ).div(\n                        _grant.endTime.sub(_grant.startTime) \n                    ).sub(_grant.withdrawnAmount);\n        }\n    }\n\n    /**\n     * @dev Get the amount of tokens released for a vesting\n     * \n     * @param _token The address of the token.\n     * @param _granter The address of the granter.\n     * @param _vester The address of the vester.\n     * @return the number of tokens available.\n     */\n    function getVestingBalance(address _token, address _granter, address _vester) \n        external\n        constant \n        returns(uint256) \n    {\n        Grant memory _grant = grantPerTokenGranterVester[_token][_granter][_vester];\n        return getBalanceVestingInternal(_grant);\n    }\n\n    /**\n     * @dev Get the token balance of the contract\n     * \n     * @param _token The address of the token.\n     * @param _user The address of the user.\n     * @return the balance of tokens on the contract for _user.\n     */\n    function getContractBalance(address _token, address _user) \n        external\n        constant \n        returns(uint256) \n    {\n        return balancePerPersonPerToken[_token][_user];\n    }\n\n    /**\n     * @dev Make a deposit of tokens on the contract\n     *\n     * Before using this function the user needs to do a token allowance from the user to the contract.\n     *\n     * @param _token The address of the token.\n     * @param _amount Amount of token to deposit.\n     * \n     * @return the balance of tokens on the contract for msg.sender.\n     */\n    function deposit(address _token, uint256 _amount) \n        external\n        returns(uint256) \n    {\n        require(_token!=0);\n        require(ERC20(_token).transferFrom(msg.sender, this, _amount));\n        balancePerPersonPerToken[_token][msg.sender] = balancePerPersonPerToken[_token][msg.sender].add(_amount);\n        Deposit(_token, msg.sender, _amount, balancePerPersonPerToken[_token][msg.sender]);\n\n        return balancePerPersonPerToken[_token][msg.sender];\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b611f008061001e6000396000f30060606040526004361061008e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630ac10c0d146100935780631c20be7e1461012d578063341f115c146101b85780633613b7811461029b57806347e7ef24146102f357806351cff8d9146103495780636a8ae1361461038257806373582884146103ee575b600080fd5b341561009e57600080fd5b61012b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803567ffffffffffffffff1690602001909190803567ffffffffffffffff1690602001909190803567ffffffffffffffff16906020019091905050610451565b005b341561013857600080fd5b6101a2600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506109ee565b6040518082815260200191505060405180910390f35b34156101c357600080fd5b61022d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610b7b565b604051808681526020018567ffffffffffffffff1667ffffffffffffffff1681526020018467ffffffffffffffff1667ffffffffffffffff1681526020018367ffffffffffffffff1667ffffffffffffffff1681526020018281526020019550505050505060405180910390f35b34156102a657600080fd5b6102f1600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c07565b005b34156102fe57600080fd5b610333600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611042565b6040518082815260200191505060405180910390f35b341561035457600080fd5b610380600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611425565b005b341561038d57600080fd5b6103d8600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061169c565b6040518082815260200191505060405180910390f35b34156103f957600080fd5b61044f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080351515906020019091905050611723565b005b60008060008873ffffffffffffffffffffffffffffffffffffffff161415151561047a57600080fd5b60008773ffffffffffffffffffffffffffffffffffffffff16141515156104a057600080fd5b8367ffffffffffffffff168367ffffffffffffffff16111515156104c357600080fd5b600086141515156104d357600080fd5b60008467ffffffffffffffff1614806104f85750858467ffffffffffffffff16870210155b151561050357600080fd5b60008060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541415156105cd57600080fd5b6105ea838667ffffffffffffffff1661192d90919063ffffffff16565b9150610609848667ffffffffffffffff1661192d90919063ffffffff16565b905060a0604051908101604052808781526020018667ffffffffffffffff1681526020018367ffffffffffffffff1681526020018267ffffffffffffffff16815260200160008152506000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160010160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060608201518160010160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506080820151816002015590505061083d86600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461195f90919063ffffffff16565b600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f12b95d2f99d5fc2b9b56572a50adafae25a54fee212a5f365397dea9963b54fa33888a89898787604051808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018467ffffffffffffffff1667ffffffffffffffff1681526020018367ffffffffffffffff1667ffffffffffffffff1681526020018267ffffffffffffffff1667ffffffffffffffff16815260200197505050505050505060405180910390a15050505050505050565b60006109f8611e86565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a06040519081016040529081600082015481526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016002820154815250509050610b7181611978565b9150509392505050565b600060205282600052604060002060205281600052604060002060205280600052604060002060009250925050508060000154908060010160009054906101000a900467ffffffffffffffff16908060010160089054906101000a900467ffffffffffffffff16908060010160109054906101000a900467ffffffffffffffff16908060020154905085565b6000808373ffffffffffffffffffffffffffffffffffffffff1614151515610c2e57600080fd5b60008273ffffffffffffffffffffffffffffffffffffffff1614151515610c5457600080fd5b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015414151515610d2257600080fd5b610d2d833384611a67565b610dd6610d4b8260020154836000015461195f90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611ded90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600090556001820160006101000a81549067ffffffffffffffff02191690556001820160086101000a81549067ffffffffffffffff02191690556001820160106101000a81549067ffffffffffffffff0219169055600282016000905550507f95acf6574c905c09a5459c4ebd51d190525d79c5f6a58b4ad03d15261c0e9412338385604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a1505050565b6000808373ffffffffffffffffffffffffffffffffffffffff161415151561106957600080fd5b8273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856000604051602001526040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b151561114857600080fd5b6102c65a03f1151561115957600080fd5b50505060405180519050151561116e57600080fd5b6111fd82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611ded90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7833384600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390a1600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb823383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a18173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561167257600080fd5b6102c65a03f1151561168357600080fd5b50505060405180519050151561169857600080fd5b5050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000611730848433611a67565b81156117405761173f84611425565b5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050806002015481600001541415611927576000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600090556001820160006101000a81549067ffffffffffffffff02191690556001820160086101000a81549067ffffffffffffffff02191690556001820160106101000a81549067ffffffffffffffff0219169055600282016000905550505b50505050565b60008082840190508367ffffffffffffffff168167ffffffffffffffff161015151561195557fe5b8091505092915050565b600082821115151561196d57fe5b818303905092915050565b6000816040015167ffffffffffffffff164210156119995760009050611a62565b816060015167ffffffffffffffff16421015156119d2576119cb8260800151836000015161195f90919063ffffffff16565b9050611a62565b611a5f8260800151611a51611a028560200151866060015167ffffffffffffffff16611e0b90919063ffffffff16565b67ffffffffffffffff16611a43611a30876020015167ffffffffffffffff164261195f90919063ffffffff16565b8760000151611e3890919063ffffffff16565b611e6b90919063ffffffff16565b61195f90919063ffffffff16565b90505b919050565b6000806000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209150611be38260a06040519081016040529081600082015481526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152602001600282015481525050611978565b9050611bfc818360020154611ded90919063ffffffff16565b82600201819055507f91380886b3dc3bdb2a18ebf38a52b446b7dcb635a27b3da3108cfa439859f6a185858584604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200194505050505060405180910390a1611d6681600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611ded90919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050505050565b6000808284019050838110151515611e0157fe5b8091505092915050565b60008267ffffffffffffffff168267ffffffffffffffff1611151515611e2d57fe5b818303905092915050565b60008082840290506000841480611e595750828482811515611e5657fe5b04145b1515611e6157fe5b8091505092915050565b6000808284811515611e7957fe5b0490508091505092915050565b60a06040519081016040528060008152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff1681526020016000815250905600a165627a7a72305820e4390e1d40e4a063b5f28d565ac0886c8660b755fdfd76c2c02bcbbf486cd8170029"
}