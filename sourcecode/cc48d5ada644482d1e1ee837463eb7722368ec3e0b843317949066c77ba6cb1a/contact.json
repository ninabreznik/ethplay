{
  "address": "0xcc8fa5c8833f65fa9d2ebd3fad80dc69bbdf65bb",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WrapFeeBurner",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-25\n*/\n\npragma solidity 0.4.18;\n\n// File: contracts/FeeBurnerInterface.sol\n\ninterface FeeBurnerInterface {\n    function handleFees (uint tradeWeiAmount, address reserve, address wallet) public returns(bool);\n}\n\n// File: contracts/ERC20Interface.sol\n\n// https://github.com/ethereum/EIPs/issues/20\ninterface ERC20 {\n    function totalSupply() public view returns (uint supply);\n    function balanceOf(address _owner) public view returns (uint balance);\n    function transfer(address _to, uint _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n    function approve(address _spender, uint _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public view returns (uint remaining);\n    function decimals() public view returns(uint digits);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\n// File: contracts/Utils.sol\n\n/// @title Kyber constants contract\ncontract Utils {\n\n    ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\n    uint  constant internal PRECISION = (10**18);\n    uint  constant internal MAX_QTY   = (10**28); // 10B tokens\n    uint  constant internal MAX_RATE  = (PRECISION * 10**6); // up to 1M tokens per ETH\n    uint  constant internal MAX_DECIMALS = 18;\n    uint  constant internal ETH_DECIMALS = 18;\n    mapping(address=>uint) internal decimals;\n\n    function setDecimals(ERC20 token) internal {\n        if (token == ETH_TOKEN_ADDRESS) decimals[token] = ETH_DECIMALS;\n        else decimals[token] = token.decimals();\n    }\n\n    function getDecimals(ERC20 token) internal view returns(uint) {\n        if (token == ETH_TOKEN_ADDRESS) return ETH_DECIMALS; // save storage access\n        uint tokenDecimals = decimals[token];\n        // technically, there might be token with decimals 0\n        // moreover, very possible that old tokens have decimals 0\n        // these tokens will just have higher gas fees.\n        if(tokenDecimals == 0) return token.decimals();\n\n        return tokenDecimals;\n    }\n\n    function calcDstQty(uint srcQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n        require(srcQty <= MAX_QTY);\n        require(rate <= MAX_RATE);\n\n        if (dstDecimals >= srcDecimals) {\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n            return (srcQty * rate * (10**(dstDecimals - srcDecimals))) / PRECISION;\n        } else {\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n            return (srcQty * rate) / (PRECISION * (10**(srcDecimals - dstDecimals)));\n        }\n    }\n\n    function calcSrcQty(uint dstQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n        require(dstQty <= MAX_QTY);\n        require(rate <= MAX_RATE);\n        \n        //source quantity is rounded up. to avoid dest quantity being too low.\n        uint numerator;\n        uint denominator;\n        if (srcDecimals >= dstDecimals) {\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n            numerator = (PRECISION * dstQty * (10**(srcDecimals - dstDecimals)));\n            denominator = rate;\n        } else {\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n            numerator = (PRECISION * dstQty);\n            denominator = (rate * (10**(dstDecimals - srcDecimals)));\n        }\n        return (numerator + denominator - 1) / denominator; //avoid rounding down errors\n    }\n}\n\n// File: contracts/PermissionGroups.sol\n\ncontract PermissionGroups {\n\n    address public admin;\n    address public pendingAdmin;\n    mapping(address=>bool) internal operators;\n    mapping(address=>bool) internal alerters;\n    address[] internal operatorsGroup;\n    address[] internal alertersGroup;\n    uint constant internal MAX_GROUP_SIZE = 50;\n\n    function PermissionGroups() public {\n        admin = msg.sender;\n    }\n\n    modifier onlyAdmin() {\n        require(msg.sender == admin);\n        _;\n    }\n\n    modifier onlyOperator() {\n        require(operators[msg.sender]);\n        _;\n    }\n\n    modifier onlyAlerter() {\n        require(alerters[msg.sender]);\n        _;\n    }\n\n    function getOperators () external view returns(address[]) {\n        return operatorsGroup;\n    }\n\n    function getAlerters () external view returns(address[]) {\n        return alertersGroup;\n    }\n\n    event TransferAdminPending(address pendingAdmin);\n\n    /**\n     * @dev Allows the current admin to set the pendingAdmin address.\n     * @param newAdmin The address to transfer ownership to.\n     */\n    function transferAdmin(address newAdmin) public onlyAdmin {\n        require(newAdmin != address(0));\n        TransferAdminPending(pendingAdmin);\n        pendingAdmin = newAdmin;\n    }\n\n    /**\n     * @dev Allows the current admin to set the admin in one tx. Useful initial deployment.\n     * @param newAdmin The address to transfer ownership to.\n     */\n    function transferAdminQuickly(address newAdmin) public onlyAdmin {\n        require(newAdmin != address(0));\n        TransferAdminPending(newAdmin);\n        AdminClaimed(newAdmin, admin);\n        admin = newAdmin;\n    }\n\n    event AdminClaimed( address newAdmin, address previousAdmin);\n\n    /**\n     * @dev Allows the pendingAdmin address to finalize the change admin process.\n     */\n    function claimAdmin() public {\n        require(pendingAdmin == msg.sender);\n        AdminClaimed(pendingAdmin, admin);\n        admin = pendingAdmin;\n        pendingAdmin = address(0);\n    }\n\n    event AlerterAdded (address newAlerter, bool isAdd);\n\n    function addAlerter(address newAlerter) public onlyAdmin {\n        require(!alerters[newAlerter]); // prevent duplicates.\n        require(alertersGroup.length < MAX_GROUP_SIZE);\n\n        AlerterAdded(newAlerter, true);\n        alerters[newAlerter] = true;\n        alertersGroup.push(newAlerter);\n    }\n\n    function removeAlerter (address alerter) public onlyAdmin {\n        require(alerters[alerter]);\n        alerters[alerter] = false;\n\n        for (uint i = 0; i < alertersGroup.length; ++i) {\n            if (alertersGroup[i] == alerter) {\n                alertersGroup[i] = alertersGroup[alertersGroup.length - 1];\n                alertersGroup.length--;\n                AlerterAdded(alerter, false);\n                break;\n            }\n        }\n    }\n\n    event OperatorAdded(address newOperator, bool isAdd);\n\n    function addOperator(address newOperator) public onlyAdmin {\n        require(!operators[newOperator]); // prevent duplicates.\n        require(operatorsGroup.length < MAX_GROUP_SIZE);\n\n        OperatorAdded(newOperator, true);\n        operators[newOperator] = true;\n        operatorsGroup.push(newOperator);\n    }\n\n    function removeOperator (address operator) public onlyAdmin {\n        require(operators[operator]);\n        operators[operator] = false;\n\n        for (uint i = 0; i < operatorsGroup.length; ++i) {\n            if (operatorsGroup[i] == operator) {\n                operatorsGroup[i] = operatorsGroup[operatorsGroup.length - 1];\n                operatorsGroup.length -= 1;\n                OperatorAdded(operator, false);\n                break;\n            }\n        }\n    }\n}\n\n// File: contracts/Withdrawable.sol\n\n/**\n * @title Contracts that should be able to recover tokens or ethers\n * @author Ilan Doron\n * @dev This allows to recover any tokens or Ethers received in a contract.\n * This will prevent any accidental loss of tokens.\n */\ncontract Withdrawable is PermissionGroups {\n\n    event TokenWithdraw(ERC20 token, uint amount, address sendTo);\n\n    /**\n     * @dev Withdraw all ERC20 compatible tokens\n     * @param token ERC20 The address of the token contract\n     */\n    function withdrawToken(ERC20 token, uint amount, address sendTo) external onlyAdmin {\n        require(token.transfer(sendTo, amount));\n        TokenWithdraw(token, amount, sendTo);\n    }\n\n    event EtherWithdraw(uint amount, address sendTo);\n\n    /**\n     * @dev Withdraw Ethers\n     */\n    function withdrawEther(uint amount, address sendTo) external onlyAdmin {\n        sendTo.transfer(amount);\n        EtherWithdraw(amount, sendTo);\n    }\n}\n\n// File: contracts/FeeBurner.sol\n\ninterface BurnableToken {\n    function transferFrom(address _from, address _to, uint _value) public returns (bool);\n    function burnFrom(address _from, uint256 _value) public returns (bool);\n}\n\n\ncontract FeeBurner is Withdrawable, FeeBurnerInterface, Utils {\n\n    mapping(address=>uint) public reserveFeesInBps;\n    mapping(address=>address) public reserveKNCWallet; //wallet holding knc per reserve. from here burn and send fees.\n    mapping(address=>uint) public walletFeesInBps; // wallet that is the source of tx is entitled so some fees.\n    mapping(address=>uint) public reserveFeeToBurn;\n    mapping(address=>uint) public feePayedPerReserve; // track burned fees and sent wallet fees per reserve.\n    mapping(address=>mapping(address=>uint)) public reserveFeeToWallet;\n    address public taxWallet;\n    uint public taxFeeBps = 0; // burned fees are taxed. % out of burned fees.\n\n    BurnableToken public knc;\n    address public kyberNetwork;\n    uint public kncPerETHRate = 300;\n\n    function FeeBurner(address _admin, BurnableToken kncToken, address _kyberNetwork) public {\n        require(_admin != address(0));\n        require(kncToken != address(0));\n        require(_kyberNetwork != address(0));\n        kyberNetwork = _kyberNetwork;\n        admin = _admin;\n        knc = kncToken;\n    }\n\n    event ReserveDataSet(address reserve, uint feeInBps, address kncWallet);\n    function setReserveData(address reserve, uint feesInBps, address kncWallet) public onlyAdmin {\n        require(feesInBps < 100); // make sure it is always < 1%\n        require(kncWallet != address(0));\n        reserveFeesInBps[reserve] = feesInBps;\n        reserveKNCWallet[reserve] = kncWallet;\n        ReserveDataSet(reserve, feesInBps, kncWallet);\n    }\n\n    event WalletFeesSet(address wallet, uint feesInBps);\n    function setWalletFees(address wallet, uint feesInBps) public onlyAdmin {\n        require(feesInBps < 10000); // under 100%\n        walletFeesInBps[wallet] = feesInBps;\n        WalletFeesSet(wallet, feesInBps);\n    }\n\n    event TaxFeesSet(uint feesInBps);\n    function setTaxInBps(uint _taxFeeBps) public onlyAdmin {\n        require(_taxFeeBps < 10000); // under 100%\n        taxFeeBps = _taxFeeBps;\n        TaxFeesSet(_taxFeeBps);\n    }\n\n    event TaxWalletSet(address taxWallet);\n    function setTaxWallet(address _taxWallet) public onlyAdmin {\n        require(_taxWallet != address(0));\n        taxWallet = _taxWallet;\n        TaxWalletSet(_taxWallet);\n    }\n\n    function setKNCRate(uint rate) public onlyAdmin {\n        require(rate <= MAX_RATE);\n        kncPerETHRate = rate;\n    }\n\n    event AssignFeeToWallet(address reserve, address wallet, uint walletFee);\n    event AssignBurnFees(address reserve, uint burnFee);\n\n    function handleFees(uint tradeWeiAmount, address reserve, address wallet) public returns(bool) {\n        require(msg.sender == kyberNetwork);\n        require(tradeWeiAmount <= MAX_QTY);\n        require(kncPerETHRate <= MAX_RATE);\n\n        uint kncAmount = tradeWeiAmount * kncPerETHRate;\n        uint fee = kncAmount * reserveFeesInBps[reserve] / 10000;\n\n        uint walletFee = fee * walletFeesInBps[wallet] / 10000;\n        require(fee >= walletFee);\n        uint feeToBurn = fee - walletFee;\n\n        if (walletFee > 0) {\n            reserveFeeToWallet[reserve][wallet] += walletFee;\n            AssignFeeToWallet(reserve, wallet, walletFee);\n        }\n\n        if (feeToBurn > 0) {\n            AssignBurnFees(reserve, feeToBurn);\n            reserveFeeToBurn[reserve] += feeToBurn;\n        }\n\n        return true;\n    }\n\n    event BurnAssignedFees(address indexed reserve, address sender, uint quantity);\n\n    event SendTaxFee(address indexed reserve, address sender, address taxWallet, uint quantity);\n\n    // this function is callable by anyone\n    function burnReserveFees(address reserve) public {\n        uint burnAmount = reserveFeeToBurn[reserve];\n        uint taxToSend = 0;\n        require(burnAmount > 2);\n        reserveFeeToBurn[reserve] = 1; // leave 1 twei to avoid spikes in gas fee\n        if (taxWallet != address(0) && taxFeeBps != 0) {\n            taxToSend = (burnAmount - 1) * taxFeeBps / 10000;\n            require(burnAmount - 1 > taxToSend);\n            burnAmount -= taxToSend;\n            if (taxToSend > 0) {\n                require(knc.transferFrom(reserveKNCWallet[reserve], taxWallet, taxToSend));\n                SendTaxFee(reserve, msg.sender, taxWallet, taxToSend);\n            }\n        }\n        require(knc.burnFrom(reserveKNCWallet[reserve], burnAmount - 1));\n\n        //update reserve \"payments\" so far\n        feePayedPerReserve[reserve] += (taxToSend + burnAmount - 1);\n\n        BurnAssignedFees(reserve, msg.sender, (burnAmount - 1));\n    }\n\n    event SendWalletFees(address indexed wallet, address reserve, address sender);\n\n    // this function is callable by anyone\n    function sendFeeToWallet(address wallet, address reserve) public {\n        uint feeAmount = reserveFeeToWallet[reserve][wallet];\n        require(feeAmount > 1);\n        reserveFeeToWallet[reserve][wallet] = 1; // leave 1 twei to avoid spikes in gas fee\n        require(knc.transferFrom(reserveKNCWallet[reserve], wallet, feeAmount - 1));\n\n        feePayedPerReserve[reserve] += (feeAmount - 1);\n        SendWalletFees(wallet, reserve, msg.sender);\n    }\n}\n\n// File: contracts/wrapperContracts/WrapperBase.sol\n\ncontract WrapperBase is Withdrawable {\n\n    PermissionGroups public wrappedContract;\n\n    struct DataTracker {\n        address [] approveSignatureArray;\n        uint lastSetNonce;\n    }\n\n    DataTracker[] internal dataInstances;\n\n    function WrapperBase(PermissionGroups _wrappedContract, address _admin, uint _numDataInstances) public {\n        require(_wrappedContract != address(0));\n        require(_admin != address(0));\n        wrappedContract = _wrappedContract;\n        admin = _admin;\n\n        for (uint i = 0; i < _numDataInstances; i++){\n            addDataInstance();\n        }\n    }\n\n    function claimWrappedContractAdmin() public onlyOperator {\n        wrappedContract.claimAdmin();\n    }\n\n    function transferWrappedContractAdmin (address newAdmin) public onlyAdmin {\n        wrappedContract.transferAdmin(newAdmin);\n    }\n\n    function addDataInstance() internal {\n        address[] memory add = new address[](0);\n        dataInstances.push(DataTracker(add, 0));\n    }\n\n    function setNewData(uint dataIndex) internal {\n        require(dataIndex < dataInstances.length);\n        dataInstances[dataIndex].lastSetNonce++;\n        dataInstances[dataIndex].approveSignatureArray.length = 0;\n    }\n\n    function addSignature(uint dataIndex, uint signedNonce, address signer) internal returns(bool allSigned) {\n        require(dataIndex < dataInstances.length);\n        require(dataInstances[dataIndex].lastSetNonce == signedNonce);\n\n        for(uint i = 0; i < dataInstances[dataIndex].approveSignatureArray.length; i++) {\n            if (signer == dataInstances[dataIndex].approveSignatureArray[i]) revert();\n        }\n        dataInstances[dataIndex].approveSignatureArray.push(signer);\n\n        if (dataInstances[dataIndex].approveSignatureArray.length == operatorsGroup.length) {\n            allSigned = true;\n        } else {\n            allSigned = false;\n        }\n    }\n\n    function getDataTrackingParameters(uint index) internal view returns (address[], uint) {\n        require(index < dataInstances.length);\n        return(dataInstances[index].approveSignatureArray, dataInstances[index].lastSetNonce);\n    }\n}\n\n// File: contracts/wrapperContracts/WrapFeeBurner.sol\n\ncontract WrapFeeBurner is WrapperBase {\n\n    FeeBurner public feeBurnerContract;\n    address[] internal feeSharingWallets;\n    uint public feeSharingBps = 3000; // out of 10000 = 30%\n\n    //knc rate range\n    struct KncPerEth {\n        uint minRate;\n        uint maxRate;\n        uint pendingMinRate;\n        uint pendingMaxRate;\n    }\n\n    KncPerEth internal kncPerEth;\n\n    //add reserve pending data\n    struct AddReserveData {\n        address reserve;\n        uint    feeBps;\n        address kncWallet;\n    }\n\n    AddReserveData internal addReserve;\n\n    //wallet fee pending parameters\n    struct WalletFee {\n        address walletAddress;\n        uint    feeBps;\n    }\n\n    WalletFee internal walletFee;\n\n    //tax pending parameters\n    struct TaxData {\n        address wallet;\n        uint    feeBps;\n    }\n\n    TaxData internal taxData;\n    \n    //data indexes\n    uint internal constant KNC_RATE_RANGE_INDEX = 0;\n    uint internal constant ADD_RESERVE_INDEX = 1;\n    uint internal constant WALLET_FEE_INDEX = 2;\n    uint internal constant TAX_DATA_INDEX = 3;\n    uint internal constant LAST_DATA_INDEX = 4;\n\n    //general functions\n    function WrapFeeBurner(FeeBurner feeBurner, address _admin) public\n        WrapperBase(PermissionGroups(address(feeBurner)), _admin, LAST_DATA_INDEX)\n    {\n        require(feeBurner != address(0));\n        feeBurnerContract = feeBurner;\n    }\n\n    //register wallets for fee sharing\n    /////////////////////////////////\n    function setFeeSharingValue(uint feeBps) public onlyAdmin {\n        require(feeBps < 10000);\n        feeSharingBps = feeBps;\n    }\n\n    function getFeeSharingWallets() public view returns(address[]) {\n        return feeSharingWallets;\n    }\n\n    event WalletRegisteredForFeeSharing(address sender, address walletAddress);\n    function registerWalletForFeeSharing(address walletAddress) public {\n        require(feeBurnerContract.walletFeesInBps(walletAddress) == 0);\n\n        // if fee sharing value is 0. means the wallet wasn't added.\n        feeBurnerContract.setWalletFees(walletAddress, feeSharingBps);\n        feeSharingWallets.push(walletAddress);\n        WalletRegisteredForFeeSharing(msg.sender, walletAddress);\n    }\n\n    // knc rate handling\n    //////////////////////\n    function setPendingKNCRateRange(uint minRate, uint maxRate) public onlyOperator {\n        require(minRate < maxRate);\n        require(minRate > 0);\n\n        //update data tracking\n        setNewData(KNC_RATE_RANGE_INDEX);\n\n        kncPerEth.pendingMinRate = minRate;\n        kncPerEth.pendingMaxRate = maxRate;\n    }\n\n    function getPendingKNCRateRange() public view returns(uint minRate, uint maxRate, uint nonce) {\n        address[] memory signatures;\n        minRate = kncPerEth.pendingMinRate;\n        maxRate = kncPerEth.pendingMaxRate;\n        (signatures, nonce) = getDataTrackingParameters(KNC_RATE_RANGE_INDEX);\n\n        return(minRate, maxRate, nonce);\n    }\n\n    function getKNCRateRangeSignatures() public view returns (address[] signatures) {\n        uint nonce;\n        (signatures, nonce) = getDataTrackingParameters(KNC_RATE_RANGE_INDEX);\n        return(signatures);\n    }\n\n    function approveKNCRateRange(uint nonce) public onlyOperator {\n        if (addSignature(KNC_RATE_RANGE_INDEX, nonce, msg.sender)) {\n            // can perform operation.\n            kncPerEth.minRate = kncPerEth.pendingMinRate;\n            kncPerEth.maxRate = kncPerEth.pendingMaxRate;\n        }\n    }\n\n    function getKNCRateRange() public view returns(uint minRate, uint maxRate) {\n        minRate = kncPerEth.minRate;\n        maxRate = kncPerEth.maxRate;\n        return(minRate, maxRate);\n    }\n\n    ///@dev here the operator can set rate without other operators validation. It has to be inside range.\n    function setKNCPerEthRate(uint kncPerEther) public onlyOperator {\n        require(kncPerEther >= kncPerEth.minRate);\n        require(kncPerEther <= kncPerEth.maxRate);\n        feeBurnerContract.setKNCRate(kncPerEther);\n    }\n\n    //set reserve data\n    //////////////////\n    function setPendingReserveData(address reserve, uint feeBps, address kncWallet) public onlyOperator {\n        require(reserve != address(0));\n        require(kncWallet != address(0));\n        require(feeBps > 0);\n        require(feeBps < 10000);\n\n        addReserve.reserve = reserve;\n        addReserve.feeBps = feeBps;\n        addReserve.kncWallet = kncWallet;\n        setNewData(ADD_RESERVE_INDEX);\n    }\n\n    function getPendingAddReserveData() public view\n        returns(address reserve, uint feeBps, address kncWallet, uint nonce)\n    {\n        address[] memory signatures;\n        (signatures, nonce) = getDataTrackingParameters(ADD_RESERVE_INDEX);\n        return(addReserve.reserve, addReserve.feeBps, addReserve.kncWallet, nonce);\n    }\n\n    function getAddReserveSignatures() public view returns (address[] signatures) {\n        uint nonce;\n        (signatures, nonce) = getDataTrackingParameters(ADD_RESERVE_INDEX);\n        return(signatures);\n    }\n\n    function approveAddReserveData(uint nonce) public onlyOperator {\n        if (addSignature(ADD_RESERVE_INDEX, nonce, msg.sender)) {\n            // can perform operation.\n            feeBurnerContract.setReserveData(addReserve.reserve, addReserve.feeBps, addReserve.kncWallet);\n        }\n    }\n\n    //wallet fee\n    /////////////\n    function setPendingWalletFee(address wallet, uint feeBps) public onlyOperator {\n        require(wallet != address(0));\n        require(feeBps > 0);\n        require(feeBps < 10000);\n\n        walletFee.walletAddress = wallet;\n        walletFee.feeBps = feeBps;\n        setNewData(WALLET_FEE_INDEX);\n    }\n\n    function getPendingWalletFeeData() public view returns(address wallet, uint feeBps, uint nonce) {\n        address[] memory signatures;\n        (signatures, nonce) = getDataTrackingParameters(WALLET_FEE_INDEX);\n        return(walletFee.walletAddress, walletFee.feeBps, nonce);\n    }\n\n    function getWalletFeeSignatures() public view returns (address[] signatures) {\n        uint nonce;\n        (signatures, nonce) = getDataTrackingParameters(WALLET_FEE_INDEX);\n        return(signatures);\n    }\n\n    function approveWalletFeeData(uint nonce) public onlyOperator {\n        if (addSignature(WALLET_FEE_INDEX, nonce, msg.sender)) {\n            // can perform operation.\n            feeBurnerContract.setWalletFees(walletFee.walletAddress, walletFee.feeBps);\n        }\n    }\n\n    //tax parameters\n    ////////////////\n    function setPendingTaxParameters(address taxWallet, uint feeBps) public onlyOperator {\n        require(taxWallet != address(0));\n        require(feeBps > 0);\n        require(feeBps < 10000);\n\n        taxData.wallet = taxWallet;\n        taxData.feeBps = feeBps;\n        setNewData(TAX_DATA_INDEX);\n    }\n\n    function getPendingTaxData() public view returns(address wallet, uint feeBps, uint nonce) {\n        address[] memory signatures;\n        (signatures, nonce) = getDataTrackingParameters(TAX_DATA_INDEX);\n        return(taxData.wallet, taxData.feeBps, nonce);\n    }\n\n    function getTaxDataSignatures() public view returns (address[] signatures) {\n        uint nonce;\n        (signatures, nonce) = getDataTrackingParameters(TAX_DATA_INDEX);\n        return(signatures);\n    }\n\n    function approveTaxData(uint nonce) public onlyOperator {\n        if (addSignature(TAX_DATA_INDEX, nonce, msg.sender)) {\n            // can perform operation.\n            feeBurnerContract.setTaxInBps(taxData.feeBps);\n            feeBurnerContract.setTaxWallet(taxData.wallet);\n        }\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"claimWrappedContractAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"alerter\",\"type\":\"address\"}],\"name\":\"removeAlerter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOperators\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"approveTaxData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAlerter\",\"type\":\"address\"}],\"name\":\"addAlerter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getKNCRateRangeSignatures\",\"outputs\":[{\"name\":\"signatures\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeBurnerContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPendingAddReserveData\",\"outputs\":[{\"name\":\"reserve\",\"type\":\"address\"},{\"name\":\"feeBps\",\"type\":\"uint256\"},{\"name\":\"kncWallet\",\"type\":\"address\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPendingKNCRateRange\",\"outputs\":[{\"name\":\"minRate\",\"type\":\"uint256\"},{\"name\":\"maxRate\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"registerWalletForFeeSharing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"approveWalletFeeData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minRate\",\"type\":\"uint256\"},{\"name\":\"maxRate\",\"type\":\"uint256\"}],\"name\":\"setPendingKNCRateRange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdminQuickly\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAlerters\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"taxWallet\",\"type\":\"address\"},{\"name\":\"feeBps\",\"type\":\"uint256\"}],\"name\":\"setPendingTaxParameters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFeeSharingWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferWrappedContractAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPendingWalletFeeData\",\"outputs\":[{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"feeBps\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAddReserveSignatures\",\"outputs\":[{\"name\":\"signatures\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getKNCRateRange\",\"outputs\":[{\"name\":\"minRate\",\"type\":\"uint256\"},{\"name\":\"maxRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"feeBps\",\"type\":\"uint256\"}],\"name\":\"setFeeSharingValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"reserve\",\"type\":\"address\"},{\"name\":\"feeBps\",\"type\":\"uint256\"},{\"name\":\"kncWallet\",\"type\":\"address\"}],\"name\":\"setPendingReserveData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"feeBps\",\"type\":\"uint256\"}],\"name\":\"setPendingWalletFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"kncPerEther\",\"type\":\"uint256\"}],\"name\":\"setKNCPerEthRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"approveAddReserveData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWalletFeeSignatures\",\"outputs\":[{\"name\":\"signatures\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTaxDataSignatures\",\"outputs\":[{\"name\":\"signatures\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPendingTaxData\",\"outputs\":[{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"feeBps\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeSharingBps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wrappedContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"approveKNCRateRange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"feeBurner\",\"type\":\"address\"},{\"name\":\"_admin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"WalletRegisteredForFeeSharing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"TokenWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"EtherWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pendingAdmin\",\"type\":\"address\"}],\"name\":\"TransferAdminPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"previousAdmin\",\"type\":\"address\"}],\"name\":\"AdminClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAlerter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isAdd\",\"type\":\"bool\"}],\"name\":\"AlerterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOperator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isAdd\",\"type\":\"bool\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"}]",
  "bytecode": "6060604052610bb8600a5534156200001657600080fd5b604051604080620020c3833981016040528080519190602001805160008054600160a060020a03191633600160a060020a03908116919091178255919350849250839160049190841615156200006b57600080fd5b600160a060020a03831615156200008157600080fd5b5060068054600160a060020a03808616600160a060020a03199283161790925560008054928516929091169190911781555b81811015620000dd57620000d464010000000062001c086200011e82021704565b600101620000b3565b50505050600160a060020a0382161515620000f757600080fd5b5060088054600160a060020a031916600160a060020a0392909216919091179055620002fa565b62000128620001af565b6000604051805910620001385750595b9080825280602002602001820160405250905060078054806001018281620001619190620001c1565b9160005260206000209060020201600060408051908101604052848152600060208201529190508151819080516200019e929160200190620001f5565b506020820151816001015550505050565b60206040519081016040526000815290565b815481835581811511620001f057600202816002028360005260206000209182019101620001f0919062000261565b505050565b8280548282559060005260206000209081019282156200024f579160200282015b828111156200024f5782518254600160a060020a031916600160a060020a03919091161782556020929092019160019091019062000216565b506200025d92915062000293565b5090565b6200029091905b808211156200025d5760006200027f8282620002ba565b506000600182015560020162000268565b90565b6200029091905b808211156200025d578054600160a060020a03191681556001016200029a565b5080546000825590600052602060002090810190620002da9190620002dd565b50565b6200029091905b808211156200025d5760008155600101620002e4565b611db9806200030a6000396000f3006060604052600436106101c95763ffffffff60e060020a600035041663010afc2081146101ce57806301a12fd3146101e3578063267822471461020257806327a099d8146102315780633ccdbb28146102975780633ce6d89b146102c0578063408ee7fe146102d6578063507b3450146102f5578063579425b71461030857806361a121601461031b57806363929d3e14610364578063688057fc1461039b5780636e974fd6146103ba578063725a731d146103d057806375829def146103e957806377f50f97146104085780637acc86781461041b5780637c423f541461043a57806386d017271461044d578063880468181461046f5780638d7cffb7146104825780639104b6f4146104a157806392c00590146104ea5780639870d7fe146104fd5780639ad1b3481461051c5780639e05de6214610547578063a01e1a211461055d578063ac8a584a14610586578063acda01f6146105a5578063bb912454146105c7578063c567f304146105dd578063ce56c454146105f3578063db2becb014610615578063dd95208914610628578063e2f8fa161461063b578063edafe5881461064e578063f7f9cb1c14610673578063f851a44014610686578063fa1cee5714610699575b600080fd5b34156101d957600080fd5b6101e16106af565b005b34156101ee57600080fd5b6101e1600160a060020a036004351661072b565b341561020d57600080fd5b61021561089b565b604051600160a060020a03909116815260200160405180910390f35b341561023c57600080fd5b6102446108aa565b60405160208082528190810183818151815260200191508051906020019060200280838360005b8381101561028357808201518382015260200161026b565b505050509050019250505060405180910390f35b34156102a257600080fd5b6101e1600160a060020a036004358116906024359060443516610913565b34156102cb57600080fd5b6101e1600435610a0a565b34156102e157600080fd5b6101e1600160a060020a0360043516610b13565b341561030057600080fd5b610244610c0f565b341561031357600080fd5b610215610c2d565b341561032657600080fd5b61032e610c3c565b604051600160a060020a039485168152602081019390935292166040808301919091526060820192909252608001905180910390f35b341561036f57600080fd5b610377610c7b565b60405180848152602001838152602001828152602001935050505060405180910390f35b34156103a657600080fd5b6101e1600160a060020a0360043516610ca7565b34156103c557600080fd5b6101e1600435610e18565b34156103db57600080fd5b6101e1600435602435610eb0565b34156103f457600080fd5b6101e1600160a060020a0360043516610f05565b341561041357600080fd5b6101e1610fa0565b341561042657600080fd5b6101e1600160a060020a036004351661103a565b341561044557600080fd5b61024461111c565b341561045857600080fd5b6101e1600160a060020a0360043516602435611182565b341561047a57600080fd5b610244611203565b341561048d57600080fd5b6101e1600160a060020a0360043516611269565b34156104ac57600080fd5b6104b46112d4565b6040518084600160a060020a0316600160a060020a03168152602001838152602001828152602001935050505060405180910390f35b34156104f557600080fd5b610244611309565b341561050857600080fd5b6101e1600160a060020a036004351661131d565b341561052757600080fd5b61052f6113ed565b60405191825260208201526040908101905180910390f35b341561055257600080fd5b6101e16004356113f7565b341561056857600080fd5b6101e1600160a060020a036004358116906024359060443516611425565b341561059157600080fd5b6101e1600160a060020a03600435166114d0565b34156105b057600080fd5b6101e1600160a060020a036004351660243561163c565b34156105d257600080fd5b6101e16004356116bd565b34156105e857600080fd5b6101e160043561174a565b34156105fe57600080fd5b6101e1600435600160a060020a03602435166117f3565b341561062057600080fd5b610244611886565b341561063357600080fd5b61024461189a565b341561064657600080fd5b6104b46118ae565b341561065957600080fd5b6106616118e3565b60405190815260200160405180910390f35b341561067e57600080fd5b6102156118e9565b341561069157600080fd5b6102156118f8565b34156106a457600080fd5b6101e1600435611907565b600160a060020a03331660009081526002602052604090205460ff1615156106d657600080fd5b600654600160a060020a03166377f50f976040518163ffffffff1660e060020a028152600401600060405180830381600087803b151561071557600080fd5b6102c65a03f1151561072657600080fd5b505050565b6000805433600160a060020a0390811691161461074757600080fd5b600160a060020a03821660009081526003602052604090205460ff16151561076e57600080fd5b50600160a060020a0381166000908152600360205260408120805460ff191690555b6005548110156108975781600160a060020a03166005828154811015156107b357fe5b600091825260209091200154600160a060020a0316141561088f576005805460001981019081106107e057fe5b60009182526020909120015460058054600160a060020a03909216918390811061080657fe5b60009182526020909120018054600160a060020a031916600160a060020a03929092169190911790556005805490610842906000198301611bb8565b507f5611bf3e417d124f97bf2c788843ea8bb502b66079fbee02158ef30b172cb762826000604051600160a060020a039092168252151560208201526040908101905180910390a1610897565b600101610790565b5050565b600154600160a060020a031681565b6108b2611bdc565b600480548060200260200160405190810160405280929190818152602001828054801561090857602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116108ea575b505050505090505b90565b60005433600160a060020a0390811691161461092e57600080fd5b82600160a060020a031663a9059cbb828460006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561098b57600080fd5b6102c65a03f1151561099c57600080fd5b5050506040518051905015156109b157600080fd5b7f72cb8a894ddb372ceec3d2a7648d86f17d5a15caae0e986c53109b8a9a9385e6838383604051600160a060020a03938416815260208101929092529091166040808301919091526060909101905180910390a1505050565b600160a060020a03331660009081526002602052604090205460ff161515610a3157600080fd5b610a3d6003823361194e565b15610b1057600854601554600160a060020a0390911690639fad2dcb9060405160e060020a63ffffffff84160281526004810191909152602401600060405180830381600087803b1515610a9057600080fd5b6102c65a03f11515610aa157600080fd5b5050600854601454600160a060020a03918216925063ea414b28911660405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b1515610afb57600080fd5b6102c65a03f11515610b0c57600080fd5b5050505b50565b60005433600160a060020a03908116911614610b2e57600080fd5b600160a060020a03811660009081526003602052604090205460ff1615610b5457600080fd5b60055460329010610b6457600080fd5b7f5611bf3e417d124f97bf2c788843ea8bb502b66079fbee02158ef30b172cb762816001604051600160a060020a039092168252151560208201526040908101905180910390a1600160a060020a0381166000908152600360205260409020805460ff191660019081179091556005805490918101610be38382611bb8565b5060009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055565b610c17611bdc565b6000610c236000611aa2565b90925090505b5090565b600854600160a060020a031681565b600080600080610c4a611bdc565b610c546001611aa2565b600f54601054601154600160a060020a039283169950909750169450925090505090919293565b6000806000610c88611bdc565b600d54600e549094509250610c9d6000611aa2565b9250905050909192565b600854600160a060020a03166345ab63b98260006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610d0057600080fd5b6102c65a03f11515610d1157600080fd5b5050506040518051159050610d2557600080fd5b600854600a54600160a060020a03909116906365dfc20f90839060405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b1515610d8257600080fd5b6102c65a03f11515610d9357600080fd5b50505060098054806001018281610daa9190611bb8565b5060009182526020909120018054600160a060020a031916600160a060020a0383161790557f677677567f06918e0049494af469ee4aac721c42c4ed80fd126dccb0434a98a03382604051600160a060020a039283168152911660208201526040908101905180910390a150565b600160a060020a03331660009081526002602052604090205460ff161515610e3f57600080fd5b610e4b6002823361194e565b15610b1057600854601254601354600160a060020a03928316926365dfc20f92169060405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b1515610afb57600080fd5b600160a060020a03331660009081526002602052604090205460ff161515610ed757600080fd5b808210610ee357600080fd5b60008211610ef057600080fd5b610efa6000611b60565b600d91909155600e55565b60005433600160a060020a03908116911614610f2057600080fd5b600160a060020a0381161515610f3557600080fd5b6001547f3b81caf78fa51ecbc8acb482fd7012a277b428d9b80f9d156e8a54107496cc4090600160a060020a0316604051600160a060020a03909116815260200160405180910390a160018054600160a060020a031916600160a060020a0392909216919091179055565b60015433600160a060020a03908116911614610fbb57600080fd5b6001546000547f65da1cfc2c2e81576ad96afb24a581f8e109b7a403b35cbd3243a1c99efdb9ed91600160a060020a039081169116604051600160a060020a039283168152911660208201526040908101905180910390a16001805460008054600160a060020a0319908116600160a060020a03841617909155169055565b60005433600160a060020a0390811691161461105557600080fd5b600160a060020a038116151561106a57600080fd5b7f3b81caf78fa51ecbc8acb482fd7012a277b428d9b80f9d156e8a54107496cc4081604051600160a060020a03909116815260200160405180910390a16000547f65da1cfc2c2e81576ad96afb24a581f8e109b7a403b35cbd3243a1c99efdb9ed908290600160a060020a0316604051600160a060020a039283168152911660208201526040908101905180910390a160008054600160a060020a031916600160a060020a0392909216919091179055565b611124611bdc565b600580548060200260200160405190810160405280929190818152602001828054801561090857602002820191906000526020600020908154600160a060020a031681526001909101906020018083116108ea575050505050905090565b600160a060020a03331660009081526002602052604090205460ff1615156111a957600080fd5b600160a060020a03821615156111be57600080fd5b600081116111cb57600080fd5b61271081106111d957600080fd5b60148054600160a060020a031916600160a060020a03841617905560158190556108976003611b60565b61120b611bdc565b600980548060200260200160405190810160405280929190818152602001828054801561090857602002820191906000526020600020908154600160a060020a031681526001909101906020018083116108ea575050505050905090565b60005433600160a060020a0390811691161461128457600080fd5b600654600160a060020a03166375829def8260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b1515610afb57600080fd5b60008060006112e1611bdc565b6112eb6002611aa2565b601254601354600160a060020a039091169790965090945092505050565b611311611bdc565b6000610c236001611aa2565b60005433600160a060020a0390811691161461133857600080fd5b600160a060020a03811660009081526002602052604090205460ff161561135e57600080fd5b6004546032901061136e57600080fd5b7f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b816001604051600160a060020a039092168252151560208201526040908101905180910390a1600160a060020a0381166000908152600260205260409020805460ff191660019081179091556004805490918101610be38382611bb8565b600b54600c549091565b60005433600160a060020a0390811691161461141257600080fd5b612710811061142057600080fd5b600a55565b600160a060020a03331660009081526002602052604090205460ff16151561144c57600080fd5b600160a060020a038316151561146157600080fd5b600160a060020a038116151561147657600080fd5b6000821161148357600080fd5b612710821061149157600080fd5b600f8054600160a060020a03808616600160a060020a031992831617909255601084905560118054928416929091169190911790556107266001611b60565b6000805433600160a060020a039081169116146114ec57600080fd5b600160a060020a03821660009081526002602052604090205460ff16151561151357600080fd5b50600160a060020a0381166000908152600260205260408120805460ff191690555b6004548110156108975781600160a060020a031660048281548110151561155857fe5b600091825260209091200154600160a060020a031614156116345760048054600019810190811061158557fe5b60009182526020909120015460048054600160a060020a0390921691839081106115ab57fe5b60009182526020909120018054600160a060020a031916600160a060020a03929092169190911790556004805460001901906115e79082611bb8565b507f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b826000604051600160a060020a039092168252151560208201526040908101905180910390a1610897565b600101611535565b600160a060020a03331660009081526002602052604090205460ff16151561166357600080fd5b600160a060020a038216151561167857600080fd5b6000811161168557600080fd5b612710811061169357600080fd5b60128054600160a060020a031916600160a060020a03841617905560138190556108976002611b60565b600160a060020a03331660009081526002602052604090205460ff1615156116e457600080fd5b600b548110156116f357600080fd5b600c5481111561170257600080fd5b600854600160a060020a0316631e4b56528260405160e060020a63ffffffff84160281526004810191909152602401600060405180830381600087803b1515610afb57600080fd5b600160a060020a03331660009081526002602052604090205460ff16151561177157600080fd5b61177d6001823361194e565b15610b1057600854600f54601054601154600160a060020a03938416936346b8c49e93811692911660405160e060020a63ffffffff8616028152600160a060020a03938416600482015260248101929092529091166044820152606401600060405180830381600087803b1515610afb57600080fd5b60005433600160a060020a0390811691161461180e57600080fd5b600160a060020a03811682156108fc0283604051600060405180830381858888f19350505050151561183f57600080fd5b7fec47e7ed86c86774d1a72c19f35c639911393fe7c1a34031fdbd260890da90de8282604051918252600160a060020a031660208201526040908101905180910390a15050565b61188e611bdc565b6000610c236002611aa2565b6118a2611bdc565b6000610c236003611aa2565b60008060006118bb611bdc565b6118c56003611aa2565b601454601554600160a060020a039091169790965090945092505050565b600a5481565b600654600160a060020a031681565b600054600160a060020a031681565b600160a060020a03331660009081526002602052604090205460ff16151561192e57600080fd5b61193a6000823361194e565b15610b1057600d54600b55600e54600c5550565b6007546000908190851061196157600080fd5b8360078681548110151561197157fe5b90600052602060002090600202016001015414151561198f57600080fd5b5060005b60078054869081106119a157fe5b6000918252602090912060029091020154811015611a115760078054869081106119c757fe5b9060005260206000209060020201600001818154811015156119e557fe5b600091825260209091200154600160a060020a0384811691161415611a0957600080fd5b600101611993565b6007805486908110611a1f57fe5b60009182526020909120600290910201805460018101611a3f8382611bb8565b5060009182526020909120018054600160a060020a031916600160a060020a0385161790556004546007805487908110611a7557fe5b60009182526020909120600290910201541415611a955760019150611a9a565b600091505b509392505050565b611aaa611bdc565b6007546000908310611abb57600080fd5b6007805484908110611ac957fe5b9060005260206000209060020201600001600784815481101515611ae957fe5b90600052602060002090600202016001015481805480602002602001604051908101604052809291908181526020018280548015611b5057602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611b32575b5050505050915091509150915091565b6007548110611b6e57600080fd5b6007805482908110611b7c57fe5b60009182526020822060016002909202018101805490910190556007805483908110611ba457fe5b600091825260209091206108979160020201825b81548183558181151161072657600083815260209020610726918101908301611bee565b60206040519081016040526000815290565b61091091905b80821115610c295760008155600101611bf4565b611c10611bdc565b6000604051805910611c1f5750595b9080825280602002602001820160405250905060078054806001018281611c469190611c92565b916000526020600020906002020160006040805190810160405284815260006020820152919050815181908051611c81929160200190611cbe565b506020820151816001015550505050565b815481835581811511610726576002028160020283600052602060002091820191016107269190611d21565b828054828255906000526020600020908101928215611d15579160200282015b82811115611d155782518254600160a060020a031916600160a060020a039190911617825560209290920191600190910190611cde565b50610c29929150611d4b565b61091091905b80821115610c29576000611d3b8282611d6f565b5060006001820155600201611d27565b61091091905b80821115610c29578054600160a060020a0319168155600101611d51565b5080546000825590600052602060002090810190610b109190611bee5600a165627a7a723058202b8fddae040169c7bf412b3bd84a8eba413e84e9e0423fb2ac7c658de8be8d8d0029000000000000000000000000d6703974dc30155d768c058189a2936cf7c62da60000000000000000000000004ba7c0774a22ca0dad3dc8d676cc414ab3d4d3eb",
  "constructorArguments": "000000000000000000000000d6703974dc30155d768c058189a2936cf7c62da60000000000000000000000004ba7c0774a22ca0dad3dc8d676cc414ab3d4d3eb"
}