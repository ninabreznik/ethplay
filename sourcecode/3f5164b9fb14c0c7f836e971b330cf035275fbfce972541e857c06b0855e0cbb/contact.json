{
  "address": "0x95040fb9e6F17AAf98e20ae36DC4BBe495Fc540c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MainToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-12\n*/\n\n/*\n* This file was generated by MyWish Platform (https://mywish.io/)\n* The complete code could be found at https://github.com/MyWishPlatform/\n* Copyright (C) 2018 MyWish\n*\n* This program is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\npragma solidity ^0.4.23;\n\n\n/**\n* @title ERC20Basic\n* @dev Simpler version of ERC20 interface\n* @dev see https://github.com/ethereum/EIPs/issues/179\n*/\ncontract ERC20Basic {\nfunction totalSupply() public view returns (uint256);\nfunction balanceOf(address who) public view returns (uint256);\nfunction transfer(address to, uint256 value) public returns (bool);\nevent Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n\n/**\n* @title SafeMath\n* @dev Math operations with safety checks that throw on error\n*/\nlibrary SafeMath {\n\n/**\n* @dev Multiplies two numbers, throws on overflow.\n*/\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n// Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n// benefit is lost if 'b' is also tested.\n// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\nif (a == 0) {\nreturn 0;\n}\n\nc = a * b;\nassert(c / a == b);\nreturn c;\n}\n\n/**\n* @dev Integer division of two numbers, truncating the quotient.\n*/\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n// assert(b > 0); // Solidity automatically throws when dividing by 0\n// uint256 c = a / b;\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\nreturn a / b;\n}\n\n/**\n* @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n*/\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\nassert(b <= a);\nreturn a - b;\n}\n\n/**\n* @dev Adds two numbers, throws on overflow.\n*/\nfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\nc = a + b;\nassert(c >= a);\nreturn c;\n}\n}\n\n\n\n/**\n* @title Basic token\n* @dev Basic version of StandardToken, with no allowances.\n*/\ncontract BasicToken is ERC20Basic {\nusing SafeMath for uint256;\n\nmapping(address => uint256) balances;\n\nuint256 totalSupply_;\n\n/**\n* @dev total number of tokens in existence\n*/\nfunction totalSupply() public view returns (uint256) {\nreturn totalSupply_;\n}\n\n/**\n* @dev transfer token for a specified address\n* @param _to The address to transfer to.\n* @param _value The amount to be transferred.\n*/\nfunction transfer(address _to, uint256 _value) public returns (bool) {\nrequire(_to != address(0));\nrequire(_value <= balances[msg.sender]);\n\nbalances[msg.sender] = balances[msg.sender].sub(_value);\nbalances[_to] = balances[_to].add(_value);\nemit Transfer(msg.sender, _to, _value);\nreturn true;\n}\n\n/**\n* @dev Gets the balance of the specified address.\n* @param _owner The address to query the the balance of.\n* @return An uint256 representing the amount owned by the passed address.\n*/\nfunction balanceOf(address _owner) public view returns (uint256) {\nreturn balances[_owner];\n}\n\n}\n\n\n/**\n* @title ERC20 interface\n* @dev see https://github.com/ethereum/EIPs/issues/20\n*/\ncontract ERC20 is ERC20Basic {\nfunction allowance(address owner, address spender)\npublic view returns (uint256);\n\nfunction transferFrom(address from, address to, uint256 value)\npublic returns (bool);\n\nfunction approve(address spender, uint256 value) public returns (bool);\nevent Approval(\naddress indexed owner,\naddress indexed spender,\nuint256 value\n);\n}\n\n\n/**\n* @title Standard ERC20 token\n*\n* @dev Implementation of the basic standard token.\n* @dev https://github.com/ethereum/EIPs/issues/20\n* @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n*/\ncontract StandardToken is ERC20, BasicToken {\n\nmapping (address => mapping (address => uint256)) internal allowed;\n\n\n/**\n* @dev Transfer tokens from one address to another\n* @param _from address The address which you want to send tokens from\n* @param _to address The address which you want to transfer to\n* @param _value uint256 the amount of tokens to be transferred\n*/\nfunction transferFrom(\naddress _from,\naddress _to,\nuint256 _value\n)\npublic\nreturns (bool)\n{\nrequire(_to != address(0));\nrequire(_value <= balances[_from]);\nrequire(_value <= allowed[_from][msg.sender]);\n\nbalances[_from] = balances[_from].sub(_value);\nbalances[_to] = balances[_to].add(_value);\nallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\nemit Transfer(_from, _to, _value);\nreturn true;\n}\n\n/**\n* @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n*\n* Beware that changing an allowance with this method brings the risk that someone may use both the old\n* and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n* race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n* @param _spender The address which will spend the funds.\n* @param _value The amount of tokens to be spent.\n*/\nfunction approve(address _spender, uint256 _value) public returns (bool) {\nallowed[msg.sender][_spender] = _value;\nemit Approval(msg.sender, _spender, _value);\nreturn true;\n}\n\n/**\n* @dev Function to check the amount of tokens that an owner allowed to a spender.\n* @param _owner address The address which owns the funds.\n* @param _spender address The address which will spend the funds.\n* @return A uint256 specifying the amount of tokens still available for the spender.\n*/\nfunction allowance(\naddress _owner,\naddress _spender\n)\npublic\nview\nreturns (uint256)\n{\nreturn allowed[_owner][_spender];\n}\n\n/**\n* @dev Increase the amount of tokens that an owner allowed to a spender.\n*\n* approve should be called when allowed[_spender] == 0. To increment\n* allowed value is better to use this function to avoid 2 calls (and wait until\n* the first transaction is mined)\n* From MonolithDAO Token.sol\n* @param _spender The address which will spend the funds.\n* @param _addedValue The amount of tokens to increase the allowance by.\n*/\nfunction increaseApproval(\naddress _spender,\nuint _addedValue\n)\npublic\nreturns (bool)\n{\nallowed[msg.sender][_spender] = (\nallowed[msg.sender][_spender].add(_addedValue));\nemit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\nreturn true;\n}\n\n/**\n* @dev Decrease the amount of tokens that an owner allowed to a spender.\n*\n* approve should be called when allowed[_spender] == 0. To decrement\n* allowed value is better to use this function to avoid 2 calls (and wait until\n* the first transaction is mined)\n* From MonolithDAO Token.sol\n* @param _spender The address which will spend the funds.\n* @param _subtractedValue The amount of tokens to decrease the allowance by.\n*/\nfunction decreaseApproval(\naddress _spender,\nuint _subtractedValue\n)\npublic\nreturns (bool)\n{\nuint oldValue = allowed[msg.sender][_spender];\nif (_subtractedValue > oldValue) {\nallowed[msg.sender][_spender] = 0;\n} else {\nallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n}\nemit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\nreturn true;\n}\n\n}\n\n\n\n/**\n* @title Ownable\n* @dev The Ownable contract has an owner address, and provides basic authorization control\n* functions, this simplifies the implementation of \"user permissions\".\n*/\ncontract Ownable {\naddress public owner;\n\n\nevent OwnershipRenounced(address indexed previousOwner);\nevent OwnershipTransferred(\naddress indexed previousOwner,\naddress indexed newOwner\n);\n\n\n/**\n* @dev The Ownable constructor sets the original `owner` of the contract to the sender\n* account.\n*/\nconstructor() public {\nowner = msg.sender;\n}\n\n/**\n* @dev Throws if called by any account other than the owner.\n*/\nmodifier onlyOwner() {\nrequire(msg.sender == owner);\n_;\n}\n\n/**\n* @dev Allows the current owner to relinquish control of the contract.\n*/\nfunction renounceOwnership() public onlyOwner {\nemit OwnershipRenounced(owner);\nowner = address(0);\n}\n\n/**\n* @dev Allows the current owner to transfer control of the contract to a newOwner.\n* @param _newOwner The address to transfer ownership to.\n*/\nfunction transferOwnership(address _newOwner) public onlyOwner {\n_transferOwnership(_newOwner);\n}\n\n/**\n* @dev Transfers control of the contract to a newOwner.\n* @param _newOwner The address to transfer ownership to.\n*/\nfunction _transferOwnership(address _newOwner) internal {\nrequire(_newOwner != address(0));\nemit OwnershipTransferred(owner, _newOwner);\nowner = _newOwner;\n}\n}\n\n\n/**\n* @title Mintable token\n* @dev Simple ERC20 Token example, with mintable token creation\n* @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n* Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n*/\ncontract MintableToken is StandardToken, Ownable {\nevent Mint(address indexed to, uint256 amount);\nevent MintFinished();\n\nbool public mintingFinished = false;\n\n\nmodifier canMint() {\nrequire(!mintingFinished);\n_;\n}\n\nmodifier hasMintPermission() {\nrequire(msg.sender == owner);\n_;\n}\n\n/**\n* @dev Function to mint tokens\n* @param _to The address that will receive the minted tokens.\n* @param _amount The amount of tokens to mint.\n* @return A boolean that indicates if the operation was successful.\n*/\nfunction mint(\naddress _to,\nuint256 _amount\n)\nhasMintPermission\ncanMint\npublic\nreturns (bool)\n{\ntotalSupply_ = totalSupply_.add(_amount);\nbalances[_to] = balances[_to].add(_amount);\nemit Mint(_to, _amount);\nemit Transfer(address(0), _to, _amount);\nreturn true;\n}\n\n/**\n* @dev Function to stop minting new tokens.\n* @return True if the operation was successful.\n*/\nfunction finishMinting() onlyOwner canMint public returns (bool) {\nmintingFinished = true;\nemit MintFinished();\nreturn true;\n}\n}\n\n\ncontract FreezableToken is StandardToken {\n// freezing chains\nmapping (bytes32 => uint64) internal chains;\n// freezing amounts for each chain\nmapping (bytes32 => uint) internal freezings;\n// total freezing balance per address\nmapping (address => uint) internal freezingBalance;\n\nevent Freezed(address indexed to, uint64 release, uint amount);\nevent Released(address indexed owner, uint amount);\n\n/**\n* @dev Gets the balance of the specified address include freezing tokens.\n* @param _owner The address to query the the balance of.\n* @return An uint256 representing the amount owned by the passed address.\n*/\nfunction balanceOf(address _owner) public view returns (uint256 balance) {\nreturn super.balanceOf(_owner) + freezingBalance[_owner];\n}\n\n/**\n* @dev Gets the balance of the specified address without freezing tokens.\n* @param _owner The address to query the the balance of.\n* @return An uint256 representing the amount owned by the passed address.\n*/\nfunction actualBalanceOf(address _owner) public view returns (uint256 balance) {\nreturn super.balanceOf(_owner);\n}\n\nfunction freezingBalanceOf(address _owner) public view returns (uint256 balance) {\nreturn freezingBalance[_owner];\n}\n\n/**\n* @dev gets freezing count\n* @param _addr Address of freeze tokens owner.\n*/\nfunction freezingCount(address _addr) public view returns (uint count) {\nuint64 release = chains[toKey(_addr, 0)];\nwhile (release != 0) {\ncount++;\nrelease = chains[toKey(_addr, release)];\n}\n}\n\n/**\n* @dev gets freezing end date and freezing balance for the freezing portion specified by index.\n* @param _addr Address of freeze tokens owner.\n* @param _index Freezing portion index. It ordered by release date descending.\n*/\nfunction getFreezing(address _addr, uint _index) public view returns (uint64 _release, uint _balance) {\nfor (uint i = 0; i < _index + 1; i++) {\n_release = chains[toKey(_addr, _release)];\nif (_release == 0) {\nreturn;\n}\n}\n_balance = freezings[toKey(_addr, _release)];\n}\n\n/**\n* @dev freeze your tokens to the specified address.\n* Be careful, gas usage is not deterministic,\n* and depends on how many freezes _to address already has.\n* @param _to Address to which token will be freeze.\n* @param _amount Amount of token to freeze.\n* @param _until Release date, must be in future.\n*/\nfunction freezeTo(address _to, uint _amount, uint64 _until) public {\nrequire(_to != address(0));\nrequire(_amount <= balances[msg.sender]);\n\nbalances[msg.sender] = balances[msg.sender].sub(_amount);\n\nbytes32 currentKey = toKey(_to, _until);\nfreezings[currentKey] = freezings[currentKey].add(_amount);\nfreezingBalance[_to] = freezingBalance[_to].add(_amount);\n\nfreeze(_to, _until);\nemit Transfer(msg.sender, _to, _amount);\nemit Freezed(_to, _until, _amount);\n}\n\n/**\n* @dev release first available freezing tokens.\n*/\nfunction releaseOnce() public {\nbytes32 headKey = toKey(msg.sender, 0);\nuint64 head = chains[headKey];\nrequire(head != 0);\nrequire(uint64(block.timestamp) > head);\nbytes32 currentKey = toKey(msg.sender, head);\n\nuint64 next = chains[currentKey];\n\nuint amount = freezings[currentKey];\ndelete freezings[currentKey];\n\nbalances[msg.sender] = balances[msg.sender].add(amount);\nfreezingBalance[msg.sender] = freezingBalance[msg.sender].sub(amount);\n\nif (next == 0) {\ndelete chains[headKey];\n} else {\nchains[headKey] = next;\ndelete chains[currentKey];\n}\nemit Released(msg.sender, amount);\n}\n\n/**\n* @dev release all available for release freezing tokens. Gas usage is not deterministic!\n* @return how many tokens was released\n*/\nfunction releaseAll() public returns (uint tokens) {\nuint release;\nuint balance;\n(release, balance) = getFreezing(msg.sender, 0);\nwhile (release != 0 && block.timestamp > release) {\nreleaseOnce();\ntokens += balance;\n(release, balance) = getFreezing(msg.sender, 0);\n}\n}\n\nfunction toKey(address _addr, uint _release) internal pure returns (bytes32 result) {\n// WISH masc to increase entropy\nresult = 0x5749534800000000000000000000000000000000000000000000000000000000;\nassembly {\nresult := or(result, mul(_addr, 0x10000000000000000))\nresult := or(result, _release)\n}\n}\n\nfunction freeze(address _to, uint64 _until) internal {\nrequire(_until > block.timestamp);\nbytes32 key = toKey(_to, _until);\nbytes32 parentKey = toKey(_to, uint64(0));\nuint64 next = chains[parentKey];\n\nif (next == 0) {\nchains[parentKey] = _until;\nreturn;\n}\n\nbytes32 nextKey = toKey(_to, next);\nuint parent;\n\nwhile (next != 0 && _until > next) {\nparent = next;\nparentKey = nextKey;\n\nnext = chains[nextKey];\nnextKey = toKey(_to, next);\n}\n\nif (_until == next) {\nreturn;\n}\n\nif (next != 0) {\nchains[key] = next;\n}\n\nchains[parentKey] = _until;\n}\n}\n\n\n/**\n* @title Burnable Token\n* @dev Token that can be irreversibly burned (destroyed).\n*/\ncontract BurnableToken is BasicToken {\n\nevent Burn(address indexed burner, uint256 value);\n\n/**\n* @dev Burns a specific amount of tokens.\n* @param _value The amount of token to be burned.\n*/\nfunction burn(uint256 _value) public {\n_burn(msg.sender, _value);\n}\n\nfunction _burn(address _who, uint256 _value) internal {\nrequire(_value <= balances[_who]);\n// no need to require value <= totalSupply, since that would imply the\n// sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\nbalances[_who] = balances[_who].sub(_value);\ntotalSupply_ = totalSupply_.sub(_value);\nemit Burn(_who, _value);\nemit Transfer(_who, address(0), _value);\n}\n}\n\n\n\n/**\n* @title Pausable\n* @dev Base contract which allows children to implement an emergency stop mechanism.\n*/\ncontract Pausable is Ownable {\nevent Pause();\nevent Unpause();\n\nbool public paused = false;\n\n\n/**\n* @dev Modifier to make a function callable only when the contract is not paused.\n*/\nmodifier whenNotPaused() {\nrequire(!paused);\n_;\n}\n\n/**\n* @dev Modifier to make a function callable only when the contract is paused.\n*/\nmodifier whenPaused() {\nrequire(paused);\n_;\n}\n\n/**\n* @dev called by the owner to pause, triggers stopped state\n*/\nfunction pause() onlyOwner whenNotPaused public {\npaused = true;\nemit Pause();\n}\n\n/**\n* @dev called by the owner to unpause, returns to normal state\n*/\nfunction unpause() onlyOwner whenPaused public {\npaused = false;\nemit Unpause();\n}\n}\n\n\ncontract FreezableMintableToken is FreezableToken, MintableToken {\n/**\n* @dev Mint the specified amount of token to the specified address and freeze it until the specified date.\n* Be careful, gas usage is not deterministic,\n* and depends on how many freezes _to address already has.\n* @param _to Address to which token will be freeze.\n* @param _amount Amount of token to mint and freeze.\n* @param _until Release date, must be in future.\n* @return A boolean that indicates if the operation was successful.\n*/\nfunction mintAndFreeze(address _to, uint _amount, uint64 _until) public onlyOwner canMint returns (bool) {\ntotalSupply_ = totalSupply_.add(_amount);\n\nbytes32 currentKey = toKey(_to, _until);\nfreezings[currentKey] = freezings[currentKey].add(_amount);\nfreezingBalance[_to] = freezingBalance[_to].add(_amount);\n\nfreeze(_to, _until);\nemit Mint(_to, _amount);\nemit Freezed(_to, _until, _amount);\nemit Transfer(msg.sender, _to, _amount);\nreturn true;\n}\n}\n\n\n\ncontract Consts {\nuint public constant TOKEN_DECIMALS = 18;\nuint8 public constant TOKEN_DECIMALS_UINT8 = 18;\nuint public constant TOKEN_DECIMAL_MULTIPLIER = 10 ** TOKEN_DECIMALS;\n\nstring public constant TOKEN_NAME = \"ONE\";\nstring public constant TOKEN_SYMBOL = \"ONE\";\nbool public constant PAUSED = false;\naddress public constant TARGET_USER = 0x4bDDFdA7d247DD0ce754BB1b728E68e00a9eac69;\n\nbool public constant CONTINUE_MINTING = true;\n}\n\n\n\n\ncontract MainToken is Consts, FreezableMintableToken, BurnableToken, Pausable\n\n{\n\nevent Initialized();\nbool public initialized = false;\n\nconstructor() public {\ninit();\ntransferOwnership(TARGET_USER);\n}\n\n\nfunction name() public pure returns (string _name) {\nreturn TOKEN_NAME;\n}\n\nfunction symbol() public pure returns (string _symbol) {\nreturn TOKEN_SYMBOL;\n}\n\nfunction decimals() public pure returns (uint8 _decimals) {\nreturn TOKEN_DECIMALS_UINT8;\n}\n\nfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool _success) {\nrequire(!paused);\nreturn super.transferFrom(_from, _to, _value);\n}\n\nfunction transfer(address _to, uint256 _value) public returns (bool _success) {\nrequire(!paused);\nreturn super.transfer(_to, _value);\n}\n\n\nfunction init() private {\nrequire(!initialized);\ninitialized = true;\n\nif (PAUSED) {\npause();\n}\n\n\naddress[1] memory addresses = [address(0x4bddfda7d247dd0ce754bb1b728e68e00a9eac69)];\nuint[1] memory amounts = [uint(99999999999990000000000000000000000000000000)];\nuint64[1] memory freezes = [uint64(0)];\n\nfor (uint i = 0; i < addresses.length; i++) {\nif (freezes[i] == 0) {\nmint(addresses[i], amounts[i]);\n} else {\nmintAndFreeze(addresses[i], amounts[i], freezes[i]);\n}\n}\n\n\nif (!CONTINUE_MINTING) {\nfinishMinting();\n}\n\nemit Initialized();\n}\n\n}",
  "bytecode": "60806040526006805460a060020a62ffffff02191690553480156200002357600080fd5b5060068054600160a060020a031916331790556200004964010000000062000077810204565b62000071734bddfda7d247dd0ce754bb1b728e68e00a9eac696401000000006200022e810204565b620007d6565b62000081620007b7565b6200008b620007b7565b62000095620007b7565b600654600090760100000000000000000000000000000000000000000000900460ff1615620000c357600080fd5b6006805460b060020a60ff02191676010000000000000000000000000000000000000000000017905550506040805160208181018352734bddfda7d247dd0ce754bb1b728e68e00a9eac6982528251808201845272047bf19673ded4abc103ed408bc4d9800000008152835191820190935260008082529194509192505b6001811015620001ff578181600181106200015857fe5b60200201516001604060020a03161515620001ab57620001a48482600181106200017e57fe5b60200201518483600181106200019057fe5b60200201516401000000006200025d810204565b50620001f6565b620001f4848260018110620001bc57fe5b6020020151848360018110620001ce57fe5b6020020151848460018110620001e057fe5b60200201516401000000006200036c810204565b505b60010162000141565b6040517f5daa87a0e9463431830481fd4b6e3403442dfb9a12b9c07597e9f61d50b633c890600090a150505050565b600654600160a060020a031633146200024657600080fd5b6200025a816401000000006200053f810204565b50565b600654600090600160a060020a031633146200027857600080fd5b60065474010000000000000000000000000000000000000000900460ff1615620002a157600080fd5b600154620002be9083640100000000620013ee620005b182021704565b600155600160a060020a038316600090815260208190526040902054620002f49083640100000000620013ee620005b182021704565b600160a060020a0384166000818152602081815260409182902093909355805185815290519192600080516020620021b583398151915292918290030190a2604080518381529051600160a060020a03851691600091600080516020620021958339815191529181900360200190a350600192915050565b6006546000908190600160a060020a031633146200038957600080fd5b60065474010000000000000000000000000000000000000000900460ff1615620003b257600080fd5b600154620003cf9085640100000000620013ee620005b182021704565b600155620003f0856001604060020a038516640100000000620005c5810204565b6000818152600460205260409020549091506200041c9085640100000000620013ee620005b182021704565b600082815260046020908152604080832093909355600160a060020a03881682526005905220546200045d9085640100000000620013ee620005b182021704565b600160a060020a0386166000908152600560205260409020556200048b8584640100000000620005f9810204565b604080518581529051600160a060020a03871691600080516020620021b5833981519152919081900360200190a2604080516001604060020a0385168152602081018690528151600160a060020a038816927f2ecd071e4d10ed2221b04636ed0724cce66a873aa98c1a31b4bb0e6846d3aab4928290030190a2604080518581529051600160a060020a038716913391600080516020620021958339815191529181900360200190a3506001949350505050565b600160a060020a03811615156200055557600080fd5b600654604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360068054600160a060020a031916600160a060020a0392909216919091179055565b81810182811015620005bf57fe5b92915050565b6801000000000000000091909102177f57495348000000000000000000000000000000000000000000000000000000001790565b600080808080426001604060020a038716116200061557600080fd5b62000633876001604060020a038816640100000000620005c5810204565b94506200064b876000640100000000620005c5810204565b6000818152600360205260409020549094506001604060020a031692508215156200069d57600084815260036020526040902080546001604060020a0319166001604060020a038816179055620007ae565b620006bb876001604060020a038516640100000000620005c5810204565b91505b6001604060020a03831615801590620006e85750826001604060020a0316866001604060020a0316115b156200072d57506000818152600360205260409020549092506001604060020a0390811691839116620007258784640100000000620005c5810204565b9150620006be565b826001604060020a0316866001604060020a031614156200074e57620007ae565b6001604060020a038316156200078657600085815260036020526040902080546001604060020a0319166001604060020a0385161790555b600084815260036020526040902080546001604060020a0319166001604060020a0388161790555b50505050505050565b6020604051908101604052806001906020820280388339509192915050565b6119af80620007e66000396000f3006080604052600436106101d65763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416623fd35a81146101db57806302d6f7301461020457806305d2035b1461024c57806306fdde0314610261578063095ea7b3146102eb5780630bb2cd6b1461030f578063158ef93e1461034057806317a950ac1461035557806318160ddd14610388578063188214001461039d57806323b872dd146103b25780632a9053181461039d578063313ce567146103dc5780633be1e952146104075780633f4ba83a1461043a57806340c10f191461044f57806342966c6814610473578063567800851461048b5780635b7f415c146104a05780635be7fde8146104b55780635c975abb146104ca57806366188463146104df57806366a92cda1461050357806370a0823114610518578063715018a614610539578063726a431a1461054e5780637d64bcb41461057f5780638456cb59146105945780638da5cb5b146105a957806395d89b4114610261578063a9059cbb146105be578063a9aad58c146105e2578063ca63b5b8146105f7578063cf3b196714610618578063d73dd6231461062d578063d8aeedf514610651578063dd62ed3e14610672578063f2fde38b14610699575b600080fd5b3480156101e757600080fd5b506101f06106ba565b604080519115158252519081900360200190f35b34801561021057600080fd5b50610228600160a060020a03600435166024356106bf565b6040805167ffffffffffffffff909316835260208301919091528051918290030190f35b34801561025857600080fd5b506101f061074c565b34801561026d57600080fd5b5061027661075c565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102b0578181015183820152602001610298565b50505050905090810190601f1680156102dd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102f757600080fd5b506101f0600160a060020a0360043516602435610793565b34801561031b57600080fd5b506101f0600160a060020a036004351660243567ffffffffffffffff604435166107f9565b34801561034c57600080fd5b506101f0610997565b34801561036157600080fd5b50610376600160a060020a03600435166109ba565b60408051918252519081900360200190f35b34801561039457600080fd5b506103766109cb565b3480156103a957600080fd5b506102766109d1565b3480156103be57600080fd5b506101f0600160a060020a0360043581169060243516604435610a08565b3480156103e857600080fd5b506103f1610a35565b6040805160ff9092168252519081900360200190f35b34801561041357600080fd5b50610438600160a060020a036004351660243567ffffffffffffffff60443516610a3a565b005b34801561044657600080fd5b50610438610bae565b34801561045b57600080fd5b506101f0600160a060020a0360043516602435610c27565b34801561047f57600080fd5b50610438600435610d1f565b34801561049757600080fd5b50610376610d2c565b3480156104ac57600080fd5b50610376610d38565b3480156104c157600080fd5b50610376610d3d565b3480156104d657600080fd5b506101f0610da2565b3480156104eb57600080fd5b506101f0600160a060020a0360043516602435610db2565b34801561050f57600080fd5b50610438610ea2565b34801561052457600080fd5b50610376600160a060020a0360043516611045565b34801561054557600080fd5b5061043861106e565b34801561055a57600080fd5b506105636110dc565b60408051600160a060020a039092168252519081900360200190f35b34801561058b57600080fd5b506101f06110f4565b3480156105a057600080fd5b50610438611178565b3480156105b557600080fd5b506105636111f6565b3480156105ca57600080fd5b506101f0600160a060020a0360043516602435611205565b3480156105ee57600080fd5b506101f0611230565b34801561060357600080fd5b50610376600160a060020a0360043516611235565b34801561062457600080fd5b506103f1610d38565b34801561063957600080fd5b506101f0600160a060020a03600435166024356112bb565b34801561065d57600080fd5b50610376600160a060020a0360043516611354565b34801561067e57600080fd5b50610376600160a060020a036004358116906024351661136f565b3480156106a557600080fd5b50610438600160a060020a036004351661139a565b600181565b600080805b8360010181101561071857600360006106e7878667ffffffffffffffff166113ba565b815260208101919091526040016000205467ffffffffffffffff16925082151561071057610744565b6001016106c4565b60046000610730878667ffffffffffffffff166113ba565b815260208101919091526040016000205491505b509250929050565b60065460a060020a900460ff1681565b60408051808201909152600381527f4f4e450000000000000000000000000000000000000000000000000000000000602082015290565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b6006546000908190600160a060020a0316331461081557600080fd5b60065460a060020a900460ff161561082c57600080fd5b60015461083f908563ffffffff6113ee16565b6001556108568567ffffffffffffffff85166113ba565b600081815260046020526040902054909150610878908563ffffffff6113ee16565b600082815260046020908152604080832093909355600160a060020a03881682526005905220546108af908563ffffffff6113ee16565b600160a060020a0386166000908152600560205260409020556108d285846113fb565b604080518581529051600160a060020a038716917f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885919081900360200190a26040805167ffffffffffffffff85168152602081018690528151600160a060020a038816927f2ecd071e4d10ed2221b04636ed0724cce66a873aa98c1a31b4bb0e6846d3aab4928290030190a2604080518581529051600160a060020a0387169133916000805160206119648339815191529181900360200190a3506001949350505050565b600654760100000000000000000000000000000000000000000000900460ff1681565b60006109c582611595565b92915050565b60015490565b60408051808201909152600381527f4f4e450000000000000000000000000000000000000000000000000000000000602082015281565b60065460009060a860020a900460ff1615610a2257600080fd5b610a2d8484846115b0565b949350505050565b601290565b6000600160a060020a0384161515610a5157600080fd5b33600090815260208190526040902054831115610a6d57600080fd5b33600090815260208190526040902054610a8d908463ffffffff61171516565b33600090815260208190526040902055610ab18467ffffffffffffffff84166113ba565b600081815260046020526040902054909150610ad3908463ffffffff6113ee16565b600082815260046020908152604080832093909355600160a060020a0387168252600590522054610b0a908463ffffffff6113ee16565b600160a060020a038516600090815260056020526040902055610b2d84836113fb565b604080518481529051600160a060020a0386169133916000805160206119648339815191529181900360200190a36040805167ffffffffffffffff84168152602081018590528151600160a060020a038716927f2ecd071e4d10ed2221b04636ed0724cce66a873aa98c1a31b4bb0e6846d3aab4928290030190a250505050565b600654600160a060020a03163314610bc557600080fd5b60065460a860020a900460ff161515610bdd57600080fd5b6006805475ff000000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b600654600090600160a060020a03163314610c4157600080fd5b60065460a060020a900460ff1615610c5857600080fd5b600154610c6b908363ffffffff6113ee16565b600155600160a060020a038316600090815260208190526040902054610c97908363ffffffff6113ee16565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000916000805160206119648339815191529181900360200190a350600192915050565b610d293382611727565b50565b670de0b6b3a764000081565b601281565b6000806000610d4d3360006106bf565b67ffffffffffffffff909116925090505b8115801590610d6c57508142115b15610d9d57610d79610ea2565b91820191610d883360006106bf565b67ffffffffffffffff90911692509050610d5e565b505090565b60065460a860020a900460ff1681565b336000908152600260209081526040808320600160a060020a038616845290915281205480831115610e0757336000908152600260209081526040808320600160a060020a0388168452909152812055610e3c565b610e17818463ffffffff61171516565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b6000806000806000610eb53360006113ba565b60008181526003602052604090205490955067ffffffffffffffff169350831515610edf57600080fd5b8367ffffffffffffffff164267ffffffffffffffff16111515610f0157600080fd5b610f15338567ffffffffffffffff166113ba565b600081815260036020908152604080832054600483528184208054908590553385529284905292205492955067ffffffffffffffff90911693509150610f61908263ffffffff6113ee16565b3360009081526020818152604080832093909355600590522054610f8b908263ffffffff61171516565b3360009081526005602052604090205567ffffffffffffffff82161515610fce576000858152600360205260409020805467ffffffffffffffff19169055611008565b600085815260036020526040808220805467ffffffffffffffff861667ffffffffffffffff19918216179091558583529120805490911690555b60408051828152905133917fb21fb52d5749b80f3182f8c6992236b5e5576681880914484d7f4c9b062e619e919081900360200190a25050505050565b600160a060020a03811660009081526005602052604081205461106783611595565b0192915050565b600654600160a060020a0316331461108557600080fd5b600654604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26006805473ffffffffffffffffffffffffffffffffffffffff19169055565b734bddfda7d247dd0ce754bb1b728e68e00a9eac6981565b600654600090600160a060020a0316331461110e57600080fd5b60065460a060020a900460ff161561112557600080fd5b6006805474ff0000000000000000000000000000000000000000191660a060020a1790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600654600160a060020a0316331461118f57600080fd5b60065460a860020a900460ff16156111a657600080fd5b6006805475ff000000000000000000000000000000000000000000191660a860020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600654600160a060020a031681565b60065460009060a860020a900460ff161561121f57600080fd5b6112298383611816565b9392505050565b600081565b600080600360006112478560006113ba565b815260208101919091526040016000205467ffffffffffffffff1690505b67ffffffffffffffff8116156112b557600190910190600360006112938567ffffffffffffffff85166113ba565b815260208101919091526040016000205467ffffffffffffffff169050611265565b50919050565b336000908152600260209081526040808320600160a060020a03861684529091528120546112ef908363ffffffff6113ee16565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a031660009081526005602052604090205490565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600654600160a060020a031633146113b157600080fd5b610d29816118e5565b6801000000000000000091909102177f57495348000000000000000000000000000000000000000000000000000000001790565b818101828110156109c557fe5b6000808080804267ffffffffffffffff87161161141757600080fd5b61142b878767ffffffffffffffff166113ba565b94506114388760006113ba565b60008181526003602052604090205490945067ffffffffffffffff16925082151561148b576000848152600360205260409020805467ffffffffffffffff191667ffffffffffffffff881617905561158c565b61149f878467ffffffffffffffff166113ba565b91505b67ffffffffffffffff8316158015906114ce57508267ffffffffffffffff168667ffffffffffffffff16115b15611507575060008181526003602052604090205490925067ffffffffffffffff9081169183911661150087846113ba565b91506114a2565b8267ffffffffffffffff168667ffffffffffffffff1614156115285761158c565b67ffffffffffffffff831615611562576000858152600360205260409020805467ffffffffffffffff191667ffffffffffffffff85161790555b6000848152600360205260409020805467ffffffffffffffff191667ffffffffffffffff88161790555b50505050505050565b600160a060020a031660009081526020819052604090205490565b6000600160a060020a03831615156115c757600080fd5b600160a060020a0384166000908152602081905260409020548211156115ec57600080fd5b600160a060020a038416600090815260026020908152604080832033845290915290205482111561161c57600080fd5b600160a060020a038416600090815260208190526040902054611645908363ffffffff61171516565b600160a060020a03808616600090815260208190526040808220939093559085168152205461167a908363ffffffff6113ee16565b600160a060020a038085166000908152602081815260408083209490945591871681526002825282812033825290915220546116bc908363ffffffff61171516565b600160a060020a0380861660008181526002602090815260408083203384528252918290209490945580518681529051928716939192600080516020611964833981519152929181900390910190a35060019392505050565b60008282111561172157fe5b50900390565b600160a060020a03821660009081526020819052604090205481111561174c57600080fd5b600160a060020a038216600090815260208190526040902054611775908263ffffffff61171516565b600160a060020a0383166000908152602081905260409020556001546117a1908263ffffffff61171516565b600155604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a038516916000805160206119648339815191529181900360200190a35050565b6000600160a060020a038316151561182d57600080fd5b3360009081526020819052604090205482111561184957600080fd5b33600090815260208190526040902054611869908363ffffffff61171516565b3360009081526020819052604080822092909255600160a060020a0385168152205461189b908363ffffffff6113ee16565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233926000805160206119648339815191529281900390910190a350600192915050565b600160a060020a03811615156118fa57600080fd5b600654604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058203faa84ca36535ea4274eb76b7c6c5d871f70c38cb75b7ed1909a214be058914a0029ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885",
  "constructorArguments": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885"
}