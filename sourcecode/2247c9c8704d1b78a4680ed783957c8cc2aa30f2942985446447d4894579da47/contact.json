{
  "address": "0xe62643c89462601b92901b0f270e15abe462c77c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BEING",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-04\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    if (_a == 0) {\n      return 0;\n    }\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender) public view returns (uint256);\n  function transferFrom(address _from, address _to, uint256 _value)  public returns (bool);\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(address indexed owner,address indexed spender,uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n  mapping(address => uint256) internal balances;\n  uint256 internal totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n \n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// ERC20 standard token\ncontract BEING is StandardToken {\n    address public admin;\n    string public name = \"BEING\";\n    string public symbol = \"BEING\"; \n    uint8 public decimals = 18; \n    uint256 public INITIAL_SUPPLY = 10000000000000000000000000000;\n    \n    mapping (address => uint256) public frozenTimestamp; \n\n    bool public exchangeFlag = true; \n   \n    uint256 public minWei = 1;  // 1 wei  1eth = 1*10^18 wei\n    uint256 public maxWei = 20000000000000000000000; // 20000 eth\n    uint256 public maxRaiseAmount = 500000000000000000000000; //  500000 eth\n    uint256 public raisedAmount = 0; //  0 eth\n    uint256 public raiseRatio = 50000; //  1eth = 50000token\n\n    constructor() public {\n        totalSupply_ = INITIAL_SUPPLY;\n        admin = msg.sender;\n        balances[msg.sender] = INITIAL_SUPPLY;\n    }\n\n    function()\n    public payable {\n        require(msg.value > 0);\n        if (exchangeFlag) {\n            if (msg.value >= minWei && msg.value <= maxWei){\n                if (raisedAmount < maxRaiseAmount) {\n                    uint256 valueNeed = msg.value;\n                    raisedAmount = raisedAmount.add(msg.value);\n                    if (raisedAmount > maxRaiseAmount) {\n                        uint256 valueLeft = raisedAmount.sub(maxRaiseAmount);\n                        valueNeed = msg.value.sub(valueLeft);\n                        msg.sender.transfer(valueLeft);\n                        raisedAmount = maxRaiseAmount;\n                    }\n                    if (raisedAmount >= maxRaiseAmount) {\n                        exchangeFlag = false;\n                    }\n                   \n                    uint256 _value = valueNeed.mul(raiseRatio);\n\n                    require(_value <= balances[admin]);\n                    balances[admin] = balances[admin].sub(_value);\n                    balances[msg.sender] = balances[msg.sender].add(_value);\n\n                    emit Transfer(admin, msg.sender, _value);\n\n                }\n            } else {\n                msg.sender.transfer(msg.value);\n            }\n        } else {\n            msg.sender.transfer(msg.value);\n        }\n    }\n\n    /**\n    * admin\n    */\n    function changeAdmin(\n        address _newAdmin\n    )\n    public\n    returns (bool)  {\n        require(msg.sender == admin);\n        require(_newAdmin != address(0));\n        balances[_newAdmin] = balances[_newAdmin].add(balances[admin]);\n        balances[admin] = 0;\n        admin = _newAdmin;\n        return true;\n    }\n\n    // withdraw admin\n    function withdraw (\n        uint256 _amount\n    )\n    public\n    returns (bool) {\n        require(msg.sender == admin);\n        msg.sender.transfer(_amount);\n        return true;\n    }\n\n    /**\n    * \n    */\n    function freezeWithTimestamp(\n        address _target,\n        uint256 _timestamp\n    )\n    public\n    returns (bool) {\n        require(msg.sender == admin);\n        require(_target != address(0));\n        frozenTimestamp[_target] = _timestamp;\n        return true;\n    }\n\n    \n    /**\n    * \n    */\n    function transfer(\n        address _to,\n        uint256 _value\n    )\n    public\n    returns (bool) {\n        // require(!frozenAccount[msg.sender]);\n        require(now > frozenTimestamp[msg.sender]);\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n    \n    //********************************************************************************\n    //\n    function getFrozenTimestamp(\n        address _target\n    )\n    public view\n    returns (uint256) {\n        require(_target != address(0));\n        return frozenTimestamp[_target];\n    }\n  \n    //\n    function getBalance()\n    public view\n    returns (uint256) {\n        return address(this).balance;\n    }\n    \n\n    // change flag\n    function setExchangeFlag (\n        bool _flag\n    )\n    public\n    returns (bool) {\n        require(msg.sender == admin);\n        exchangeFlag = _flag;\n        return true;\n\n    }\n\n    // change ratio\n    function setRaiseRatio (\n        uint256 _value\n    )\n    public\n    returns (bool) {\n        require(msg.sender == admin);\n        raiseRatio = _value;\n        return true;\n    }\n\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"maxWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxRaiseAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setExchangeFlag\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeFlag\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raiseRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raisedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"freezeWithTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setRaiseRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"getFrozenTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60c0604052600560808190527f4245494e4700000000000000000000000000000000000000000000000000000060a09081526200004091600491906200011f565b506040805180820190915260058082527f4245494e4700000000000000000000000000000000000000000000000000000060209092019182526200008591816200011f565b506006805460ff199081166012179091556b204fce5e3e25026110000000600755600980549091166001908117909155600a5569043c33c1937564800000600b556969e10de76676d0800000600c556000600d5561c350600e55348015620000ec57600080fd5b50600754600181905560038054600160a060020a03191633908117909155600090815260208190526040902055620001c4565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200016257805160ff191683800117855562000192565b8280016001018555821562000192579182015b828111156200019257825182559160200191906001019062000175565b50620001a0929150620001a4565b5090565b620001c191905b80821115620001a05760008155600101620001ab565b90565b610f8c80620001d46000396000f30060806040526004361061015e5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663068b7310811461039757806306fdde03146103be578063095ea7b31461044857806312065fe01461048057806318160ddd1461049557806323b872dd146104aa5780632e1a7d4d146104d45780632ff2e9dc146104ec578063313ce567146105015780635b22bbd21461052c578063661884631461054157806370a082311461056557806376db7fd4146105865780638f283970146105a057806395d89b41146105c15780639a70855e146105d6578063a899e615146105eb578063a9059cbb14610600578063addd702014610624578063c59ee1dc14610639578063c8d90df81461064e578063d70907b01461066f578063d73dd62314610693578063dd62ed3e146106b7578063e4b50ee8146106de578063e6ad5bc7146106f6578063f851a44014610717575b6000808034811061016e57600080fd5b60095460ff161561036457600a54341015801561018d5750600b543411155b1561033157600c54600d54101561032c57600d543493506101b4908463ffffffff61074816565b600d819055600c54101561022157600c54600d546101d79163ffffffff61075b16565b91506101e9348363ffffffff61075b16565b604051909350339083156108fc029084906000818181858888f19350505050158015610219573d6000803e3d6000fd5b50600c54600d555b600c54600d5410610237576009805460ff191690555b600e5461024b90849063ffffffff61076d16565b600354600160a060020a031660009081526020819052604090205490915081111561027557600080fd5b600354600160a060020a03166000908152602081905260409020546102a0908263ffffffff61075b16565b600354600160a060020a03166000908152602081905260408082209290925533815220546102d4908263ffffffff61074816565b336000818152602081815260409182902093909355600354815185815291519293600160a060020a03909116927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35b61035f565b60405133903480156108fc02916000818181858888f1935050505015801561035d573d6000803e3d6000fd5b505b610392565b60405133903480156108fc02916000818181858888f19350505050158015610390573d6000803e3d6000fd5b505b505050005b3480156103a357600080fd5b506103ac610796565b60408051918252519081900360200190f35b3480156103ca57600080fd5b506103d361079c565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561040d5781810151838201526020016103f5565b50505050905090810190601f16801561043a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561045457600080fd5b5061046c600160a060020a036004351660243561082a565b604080519115158252519081900360200190f35b34801561048c57600080fd5b506103ac610890565b3480156104a157600080fd5b506103ac610895565b3480156104b657600080fd5b5061046c600160a060020a036004358116906024351660443561089b565b3480156104e057600080fd5b5061046c600435610a10565b3480156104f857600080fd5b506103ac610a60565b34801561050d57600080fd5b50610516610a66565b6040805160ff9092168252519081900360200190f35b34801561053857600080fd5b506103ac610a6f565b34801561054d57600080fd5b5061046c600160a060020a0360043516602435610a75565b34801561057157600080fd5b506103ac600160a060020a0360043516610b64565b34801561059257600080fd5b5061046c6004351515610b7f565b3480156105ac57600080fd5b5061046c600160a060020a0360043516610bb0565b3480156105cd57600080fd5b506103d3610c65565b3480156105e257600080fd5b5061046c610cc0565b3480156105f757600080fd5b506103ac610cc9565b34801561060c57600080fd5b5061046c600160a060020a0360043516602435610ccf565b34801561063057600080fd5b506103ac610dc9565b34801561064557600080fd5b506103ac610dcf565b34801561065a57600080fd5b506103ac600160a060020a0360043516610dd5565b34801561067b57600080fd5b5061046c600160a060020a0360043516602435610de7565b34801561069f57600080fd5b5061046c600160a060020a0360043516602435610e37565b3480156106c357600080fd5b506103ac600160a060020a0360043581169060243516610ed0565b3480156106ea57600080fd5b5061046c600435610efb565b34801561070257600080fd5b506103ac600160a060020a0360043516610f1e565b34801561072357600080fd5b5061072c610f51565b60408051600160a060020a039092168252519081900360200190f35b8181018281101561075557fe5b92915050565b60008282111561076757fe5b50900390565b600082151561077e57506000610755565b5081810281838281151561078e57fe5b041461075557fe5b600b5481565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156108225780601f106107f757610100808354040283529160200191610822565b820191906000526020600020905b81548152906001019060200180831161080557829003601f168201915b505050505081565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b303190565b60015490565b600160a060020a0383166000908152602081905260408120548211156108c057600080fd5b600160a060020a03841660009081526002602090815260408083203384529091529020548211156108f057600080fd5b600160a060020a038316151561090557600080fd5b600160a060020a03841660009081526020819052604090205461092e908363ffffffff61075b16565b600160a060020a038086166000908152602081905260408082209390935590851681522054610963908363ffffffff61074816565b600160a060020a038085166000908152602081815260408083209490945591871681526002825282812033825290915220546109a5908363ffffffff61075b16565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b600354600090600160a060020a03163314610a2a57600080fd5b604051339083156108fc029084906000818181858888f19350505050158015610a57573d6000803e3d6000fd5b50600192915050565b60075481565b60065460ff1681565b600c5481565b336000908152600260209081526040808320600160a060020a0386168452909152812054808310610ac957336000908152600260209081526040808320600160a060020a0388168452909152812055610afe565b610ad9818463ffffffff61075b16565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526020819052604090205490565b600354600090600160a060020a03163314610b9957600080fd5b506009805460ff1916911515919091179055600190565b600354600090600160a060020a03163314610bca57600080fd5b600160a060020a0382161515610bdf57600080fd5b600354600160a060020a03908116600090815260208190526040808220549285168252902054610c149163ffffffff61074816565b600160a060020a039283166000818152602081905260408082209390935560038054909516815291822091909155825473ffffffffffffffffffffffffffffffffffffffff19161790915550600190565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156108225780601f106107f757610100808354040283529160200191610822565b60095460ff1681565b600e5481565b336000908152600860205260408120544211610cea57600080fd5b600160a060020a0383161515610cff57600080fd5b33600090815260208190526040902054821115610d1b57600080fd5b33600090815260208190526040902054610d3b908363ffffffff61075b16565b3360009081526020819052604080822092909255600160a060020a03851681522054610d6d908363ffffffff61074816565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600a5481565b600d5481565b60086020526000908152604090205481565b600354600090600160a060020a03163314610e0157600080fd5b600160a060020a0383161515610e1657600080fd5b50600160a060020a0391909116600090815260086020526040902055600190565b336000908152600260209081526040808320600160a060020a0386168452909152812054610e6b908363ffffffff61074816565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600090600160a060020a03163314610f1557600080fd5b50600e55600190565b6000600160a060020a0382161515610f3557600080fd5b50600160a060020a031660009081526008602052604090205490565b600354600160a060020a0316815600a165627a7a72305820ed1c8c1184354d4892594343865cecad4957cfbef9725ba7e89e8594f18708990029"
}