{
  "address": "0x56bfead31c2c6a3bdeb0891fab022c0b90ea43f1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "X2invest",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-07\n*/\n\npragma solidity 0.4 .25;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n}\n\n/**\nThe development of the contract is entirely owned by the X2invest campaign, any copying of the source code is not legal.\n*/\ncontract X2invest {\n    //use of library of safe mathematical operations    \n    using SafeMath\n    for uint;\n    // array containing information about beneficiaries\n    mapping(address => uint) public userDeposit;\n    //array containing information about the time of payment\n    mapping(address => uint) public userTime;\n    //array containing information on interest paid\n    mapping(address => uint) public persentWithdraw;\n    //fund fo transfer percent\n    address public projectFund = 0x15e3aAD84394012f450d7A6965f2f4C59Ca7071a;\n    //wallet for a charitable foundation\n    address public charityFund = 0x6c3607D37A000d7879F02b98c59376c7DAc91151;\n    //percentage deducted to the advertising fund\n    uint projectPercent = 8;\n    //percent for a charitable foundation\n    uint public charityPercent = 1;\n    //time through which you can take dividends\n    uint public chargingTime = 1 hours;\n    //start persent 0.25% per hour\n    uint public startPercent = 250;\n    uint public lowPersent = 300;\n    uint public middlePersent = 350;\n    uint public highPersent = 375;\n    //interest rate increase steps\n    uint public stepLow = 1000 ether;\n    uint public stepMiddle = 2500 ether;\n    uint public stepHigh = 5000 ether;\n    uint public countOfInvestors = 0;\n    uint public countOfCharity = 0;\n\n    modifier isIssetUser() {\n        require(userDeposit[msg.sender] > 0, \"Deposit not found\");\n        _;\n    }\n\n    modifier timePayment() {\n        require(now >= userTime[msg.sender].add(chargingTime), \"Too fast payout request\");\n        _;\n    }\n\n    //return of interest on the deposit\n    function collectPercent() isIssetUser timePayment internal {\n        //if the user received 200% or more of his contribution, delete the user\n        if ((userDeposit[msg.sender].mul(2)) <= persentWithdraw[msg.sender]) {\n            userDeposit[msg.sender] = 0;\n            userTime[msg.sender] = 0;\n            persentWithdraw[msg.sender] = 0;\n        } else {\n            uint payout = payoutAmount();\n            userTime[msg.sender] = now;\n            persentWithdraw[msg.sender] += payout;\n            msg.sender.transfer(payout);\n        }\n    }\n\n    //calculation of the current interest rate on the deposit\n    function persentRate() public view returns(uint) {\n        //get contract balance\n        uint balance = address(this).balance;\n        //calculate persent rate\n        if (balance < stepLow) {\n            return (startPercent);\n        }\n        if (balance >= stepLow && balance < stepMiddle) {\n            return (lowPersent);\n        }\n        if (balance >= stepMiddle && balance < stepHigh) {\n            return (middlePersent);\n        }\n        if (balance >= stepHigh) {\n            return (highPersent);\n        }\n    }\n\n    //refund of the amount available for withdrawal on deposit\n    function payoutAmount() public view returns(uint) {\n        uint persent = persentRate();\n        uint rate = userDeposit[msg.sender].mul(persent).div(100000);\n        uint interestRate = now.sub(userTime[msg.sender]).div(chargingTime);\n        uint withdrawalAmount = rate.mul(interestRate);\n        return (withdrawalAmount);\n    }\n\n    //make a contribution to the system\n    function makeDeposit() private {\n        if (msg.value > 0) {\n            if (userDeposit[msg.sender] == 0) {\n                countOfInvestors += 1;\n            }\n            if (userDeposit[msg.sender] > 0 && now > userTime[msg.sender].add(chargingTime)) {\n                collectPercent();\n            }\n            userDeposit[msg.sender] = userDeposit[msg.sender].add(msg.value);\n            userTime[msg.sender] = now;\n            //sending money for advertising\n            projectFund.transfer(msg.value.mul(projectPercent).div(100));\n            //sending money to charity\n            uint charityMoney = msg.value.mul(charityPercent).div(100);\n            countOfCharity+=charityMoney;\n            charityFund.transfer(charityMoney);\n        } else {\n            collectPercent();\n        }\n    }\n\n    //return of deposit balance\n    function returnDeposit() isIssetUser private {\n        //userDeposit-persentWithdraw-(userDeposit*8/100)\n        uint withdrawalAmount = userDeposit[msg.sender].sub(persentWithdraw[msg.sender]).sub(userDeposit[msg.sender].mul(projectPercent).div(100));\n        //check that the user's balance is greater than the interest paid\n        require(userDeposit[msg.sender] > withdrawalAmount, 'You have already repaid your deposit');\n        //delete user record\n        userDeposit[msg.sender] = 0;\n        userTime[msg.sender] = 0;\n        persentWithdraw[msg.sender] = 0;\n        msg.sender.transfer(withdrawalAmount);\n    }\n\n    function() external payable {\n        //refund of remaining funds when transferring to a contract 0.00000112 ether\n        if (msg.value == 0.00000112 ether) {\n            returnDeposit();\n        } else {\n            makeDeposit();\n        }\n    }\n}",
  "bytecode": "608060405260038054600160a060020a03199081167315e3aad84394012f450d7a6965f2f4c59ca7071a1790915560048054909116736c3607d37a000d7879f02b98c59376c7dac91151179055600860058190556001600655610e1060075560fa905561012c60095561015e600a55610177600b55683635c9adc5dea00000600c5568878678326eac900000600d5569010f0cf064dd59200000600e556000600f8190556010553480156100b257600080fd5b506109bb806100c26000396000f3006080604052600436106100fb5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663297d669c81146101205780632a804efe1461014757806335b903a81461015c5780634a8cbae114610171578063556c1a71146101865780636b46c8c3146101b75780636b5b625a146101cc57806377e1a9fc146101e1578063957ad393146101f6578063a36ce52d1461020b578063aa66bfb914610220578063b67ee4df14610241578063c1b0549014610256578063c72b5e4f1461026b578063d1260edd14610280578063d145b198146102a1578063f3f7d633146102b6578063f68c3c94146102cb575b34650104c533c0001415610116576101116102ec565b61011e565b61011e6104a4565b005b34801561012c57600080fd5b50610135610613565b60408051918252519081900360200190f35b34801561015357600080fd5b50610135610619565b34801561016857600080fd5b5061013561061f565b34801561017d57600080fd5b50610135610625565b34801561019257600080fd5b5061019b61062b565b60408051600160a060020a039092168252519081900360200190f35b3480156101c357600080fd5b5061013561063a565b3480156101d857600080fd5b506101356106bc565b3480156101ed57600080fd5b5061019b6106c2565b34801561020257600080fd5b506101356106d1565b34801561021757600080fd5b506101356106d7565b34801561022c57600080fd5b50610135600160a060020a03600435166106dd565b34801561024d57600080fd5b506101356106ef565b34801561026257600080fd5b506101356106f5565b34801561027757600080fd5b506101356106fb565b34801561028c57600080fd5b50610135600160a060020a036004351661076c565b3480156102ad57600080fd5b5061013561077e565b3480156102c257600080fd5b50610135610784565b3480156102d757600080fd5b50610135600160a060020a036004351661078a565b336000908152602081905260408120548110610352576040805160e560020a62461bcd02815260206004820152601160248201527f4465706f736974206e6f7420666f756e64000000000000000000000000000000604482015290519081900360640190fd5b600554336000908152602081905260409020546103c29161038c91606491610380919063ffffffff61079c16565b9063ffffffff6107c716565b3360009081526002602090815260408083205491839052909120546103b69163ffffffff6107de16565b9063ffffffff6107de16565b336000908152602081905260409020549091508110610450576040805160e560020a62461bcd028152602060048201526024808201527f596f75206861766520616c72656164792072657061696420796f75722064657060448201527f6f73697400000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b336000818152602081815260408083208390556001825280832083905560029091528082208290555183156108fc0291849190818181858888f193505050501580156104a0573d6000803e3d6000fd5b5050565b600080341115610608573360009081526020819052604090205415156104ce57600f805460010190555b3360009081526020819052604081205411801561050b5750600754336000908152600160205260409020546105089163ffffffff6107f016565b42115b15610518576105186107ff565b33600090815260208190526040902054610538903463ffffffff6107f016565b33600090815260208181526040808320939093556001905220429055600354600554600160a060020a03909116906108fc9061057c9060649061038090349061079c565b6040518115909202916000818181858888f193505050501580156105a4573d6000803e3d6000fd5b506105bf60646103806006543461079c90919063ffffffff16565b6010805482019055600454604051919250600160a060020a03169082156108fc029083906000818181858888f19350505050158015610602573d6000803e3d6000fd5b50610610565b6106106107ff565b50565b60095481565b60085481565b600e5481565b60065481565b600354600160a060020a031681565b600080600080600061064a6106fb565b3360009081526020819052604090205490945061067690620186a090610380908763ffffffff61079c16565b600754336000908152600160205260409020549194506106a19161038090429063ffffffff6107de16565b91506106b3838363ffffffff61079c16565b95945050505050565b60075481565b600454600160a060020a031681565b600c5481565b60105481565b60016020526000908152604090205481565b600d5481565b600b5481565b600c54600090303190811015610715576008549150610768565b600c5481101580156107285750600d5481105b15610737576009549150610768565b600d54811015801561074a5750600e5481105b1561075957600a549150610768565b600e54811061076857600b5491505b5090565b60006020819052908152604090205481565b600a5481565b600f5481565b60026020526000908152604090205481565b60008282028315806107b857508284828115156107b557fe5b04145b15156107c057fe5b9392505050565b60008082848115156107d557fe5b04949350505050565b6000828211156107ea57fe5b50900390565b6000828201838110156107c057fe5b336000908152602081905260408120548110610865576040805160e560020a62461bcd02815260206004820152601160248201527f4465706f736974206e6f7420666f756e64000000000000000000000000000000604482015290519081900360640190fd5b600754336000908152600160205260409020546108879163ffffffff6107f016565b4210156108de576040805160e560020a62461bcd02815260206004820152601760248201527f546f6f2066617374207061796f75742072657175657374000000000000000000604482015290519081900360640190fd5b3360009081526002602081815260408084205491849052909220546109089163ffffffff61079c16565b116109375733600090815260208181526040808320839055600182528083208390556002909152812055610610565b61093f61063a565b336000818152600160209081526040808320429055600290915280822080548501905551929350909183156108fc0291849190818181858888f193505050501580156104a0573d6000803e3d6000fd00a165627a7a7230582078f3078e1cff3948f98d3c24645a61fa4004a3701f77578ebe8bad7237f5415d0029"
}