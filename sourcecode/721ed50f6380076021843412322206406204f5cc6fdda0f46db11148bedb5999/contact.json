{
  "address": "0xc3ee57fa8ed253e3f214048879977265967ae745",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EmaToken",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-04\n*/\n\npragma solidity ^0.4.23;\n    /**\n    * @title ERC20Basic\n    * @dev Simpler version of ERC20 interface\n    * @dev see https://github.com/ethereum/EIPs/issues/179\n    */\n    contract ERC20Basic {\n     function totalSupply() public view returns (uint256);\n     function balanceOf(address who) public view returns (uint256);\n     function transfer(address to, uint256 value) public returns (bool);\n     event Transfer(address indexed from, address indexed to, uint256 value);\n   }\n    /**\n    * @title Ownable\n    * @dev The Ownable contract has an owner address, and provides basic authorization control\n    * functions, this simplifies the implementation of \"user permissions\".\n    */\n    contract Ownable {\n     address public owner;\n     event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n     /**\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n      * account.\n      */\n      constructor() public {\n       owner = msg.sender;\n     }\n     /**\n      * @dev Throws if called by any account other than the owner.\n      */\n      modifier onlyOwner() {\n       require(msg.sender == owner);\n       _;\n     }\n     /**\n      * @dev Allows the current owner to transfer control of the contract to a newOwner.\n      * @param newOwner The address to transfer ownership to.\n      */\n      function transferOwnership(address newOwner) public onlyOwner {\n       require(newOwner != address(0));\n       emit OwnershipTransferred(owner, newOwner);\n       owner = newOwner;\n     }\n   }\n\n\n\n    /**\n    * @title Pausable\n    * @dev Base contract which allows children to implement an emergency stop mechanism.\n    */\n    contract Pausable is Ownable {\n     event Pause();\n     event Unpause();\n\n     bool public paused = false;\n\n\n     /**\n      * @dev Modifier to make a function callable only when the contract is not paused.\n      */\n      modifier whenNotPaused() {\n       require(!paused);\n       _;\n     }\n\n     /**\n      * @dev Modifier to make a function callable only when the contract is paused.\n      */\n      modifier whenPaused() {\n       require(paused);\n       _;\n     }\n\n     /**\n      * @dev called by the owner to pause, triggers stopped state\n      */\n      function pause() onlyOwner whenNotPaused public {\n       paused = true;\n       emit Pause();\n     }\n\n     /**\n      * @dev called by the owner to unpause, returns to normal state\n      */\n      function unpause() onlyOwner whenPaused public {\n       paused = false;\n       emit Unpause();\n     }\n   }\n\n    /**\n    * @title Whitelist\n    * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\n    * @dev This simplifies the implementation of \"user permissions\".\n    */\n    contract Whitelist is Pausable {\n     mapping(address => bool) public whitelist;\n\n     event WhitelistedAddressAdded(address addr);\n     event WhitelistedAddressRemoved(address addr);\n     /**\n      * @dev Throws if called by any account that's not whitelisted.\n      */\n      modifier onlyWhitelisted() {\n       require(whitelist[msg.sender]);\n       _;\n     }\n     /**\n      * @dev add an address to the whitelist\n      * @param addr address\n      * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n      */\n      function addAddressToWhitelist(address addr) onlyOwner public returns(bool success) {\n       if (!whitelist[addr]) {\n         whitelist[addr] = true;\n         emit WhitelistedAddressAdded(addr);\n         success = true;\n       }\n     }\n     /**\n      * @dev add addresses to the whitelist\n      * @param addrs addresses\n      * @return true if at least one address was added to the whitelist,\n      * false if all addresses were already in the whitelist\n      */\n      function addAddressesToWhitelist(address[] addrs) onlyOwner public returns(bool success) {\n       for (uint256 i = 0; i < addrs.length; i++) {\n         if (addAddressToWhitelist(addrs[i])) {\n           success = true;\n         }\n       }\n     }\n     /**\n      * @dev remove an address from the whitelist\n      * @param addr address\n      * @return true if the address was removed from the whitelist,\n      * false if the address wasn't in the whitelist in the first place\n      */\n      function removeAddressFromWhitelist(address addr) onlyOwner public returns(bool success) {\n       if (whitelist[addr]) {\n         whitelist[addr] = false;\n         emit WhitelistedAddressRemoved(addr);\n         success = true;\n       }\n     }\n     /**\n      * @dev remove addresses from the whitelist\n      * @param addrs addresses\n      * @return true if at least one address was removed from the whitelist,\n      * false if all addresses weren't in the whitelist in the first place\n      */\n      function removeAddressesFromWhitelist(address[] addrs) onlyOwner public returns(bool success) {\n       for (uint256 i = 0; i < addrs.length; i++) {\n         if (removeAddressFromWhitelist(addrs[i])) {\n           success = true;\n         }\n       }\n     }\n   }\n    /**\n    * @title ERC20 interface\n    * @dev see https://github.com/ethereum/EIPs/issues/20\n    */\n    contract ERC20 is ERC20Basic {\n     function allowance(address owner, address spender) public view returns (uint256);\n     function transferFrom(address from, address to, uint256 value) public returns (bool);\n     function approve(address spender, uint256 value) public returns (bool);\n     event Approval(address indexed owner, address indexed spender, uint256 value);\n   }\n    /**\n    * @title SafeMath\n    * @dev Math operations with safety checks that throw on error\n    */\n    library SafeMath {\n     /**\n     * @dev Multiplies two numbers, throws on overflow.\n     */\n     function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n       if (a == 0) {\n         return 0;\n       }\n       uint256 c = a * b;\n       assert(c / a == b);\n       return c;\n     }\n     /**\n     * @dev Integer division of two numbers, truncating the quotient.\n     */\n     function div(uint256 a, uint256 b) internal pure returns (uint256) {\n       // assert(b > 0); // Solidity automatically throws when dividing by 0\n       uint256 c = a / b;\n       // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n       return c;\n     }\n     /**\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n     */\n     function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n       assert(b <= a);\n       return a - b;\n     }\n     /**\n     * @dev Adds two numbers, throws on overflow.\n     */\n     function add(uint256 a, uint256 b) internal pure returns (uint256) {\n       uint256 c = a + b;\n       assert(c >= a);\n       return c;\n     }\n   }\n    /**\n    * @title Crowdsale\n    * @dev Crowdsale is a base contract for managing a token crowdsale,\n    * allowing investors to purchase tokens with ether. This contract implements\n    * such functionality in its most fundamental form and can be extended to provide additional\n    * functionality and/or custom behavior.\n    * The external interface represents the basic interface for purchasing tokens, and conform\n    * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n    * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n    * the methods to add functionality. Consider using 'super' where appropiate to concatenate\n    * behavior.\n    */\n    contract Crowdsale is Whitelist{\n     using SafeMath for uint256;\n     // The token being sold\n     MiniMeToken public token;\n     // Address where funds are collected\n     address public wallet;\n     // How many token units a buyer gets per wei\n     uint256 public rate = 6120;\n     // Amount of tokens sold\n     uint256 public tokensSold;\n    //Star of the crowdsale\n     uint256 startTime;\n\n\n\n     /**\n      * Event for token purchase logging\n      * @param purchaser who paid for the tokens\n      * @param beneficiary who got the tokens\n      * @param value weis paid for purchase\n      * @param amount amount of tokens purchased\n      */\n      event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n      event buyx(address buyer, address contractAddr, uint256 amount);\n\n      constructor(address _wallet, MiniMeToken _token, uint256 starttime) public{\n\n       require(_wallet != address(0));\n       require(_token != address(0));\n\n       wallet = _wallet;\n       token = _token;\n       startTime = starttime;\n     }\n     function setCrowdsale(address _wallet, MiniMeToken _token, uint256 starttime) public{\n\n\n       require(_wallet != address(0));\n       require(_token != address(0));\n\n       wallet = _wallet;\n       token = _token;\n       startTime = starttime;\n     }\n\n\n\n     // -----------------------------------------\n     // Crowdsale external interface\n     // -----------------------------------------\n     /**\n      *  fallback function ***DO NOT OVERRIDE***\n      */\n      function () external whenNotPaused payable {\n        emit buyx(msg.sender, this, _getTokenAmount(msg.value));\n        buyTokens(msg.sender);\n      }\n     /**\n      * @dev low level token purchase ***DO NOT OVERRIDE***\n      * @param _beneficiary Address performing the token purchase\n      */\n     function buyTokens(address _beneficiary) public whenNotPaused payable {\n      \n       if ((tokensSold > 20884500000000000000000000 ) && (tokensSold <= 30791250000000000000000000)) {\n         rate = 5967;\n       }\n       else if ((tokensSold > 30791250000000000000000000) && (tokensSold <= 39270000000000000000000000)) {\n        rate = 5865;\n       }\n       else if ((tokensSold > 39270000000000000000000000) && (tokensSold <= 46856250000000000000000000)) {\n        rate = 5610;\n       }\n       else if ((tokensSold > 46856250000000000000000000) && (tokensSold <= 35700000000000000000000000)) {\n        rate = 5355;\n       }\n       else if (tokensSold > 35700000000000000000000000) {\n        rate = 5100;\n       }\n\n\n      uint256 weiAmount = msg.value;\n      uint256 tokens = _getTokenAmount(weiAmount);\n      tokensSold = tokensSold.add(tokens);\n      _processPurchase(_beneficiary, tokens);\n      emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n      _updatePurchasingState(_beneficiary, weiAmount);\n      _forwardFunds();\n      _postValidatePurchase(_beneficiary, weiAmount);\n    }\n\n    // -----------------------------------------\n    // Internal interface (extensible)\n    // -----------------------------------------\n\n\n\n     /**\n      * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n      * @param _beneficiary Address performing the token purchase\n      * @param _weiAmount Value in wei involved in the purchase\n      */\n      function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n       require(_beneficiary != address(0));\n       require(_weiAmount != 0);\n     }\n     /**\n      * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n      * @param _beneficiary Address performing the token purchase\n      * @param _weiAmount Value in wei involved in the purchase\n      */\n      function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n       // optional override\n     }\n     /**\n      * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n      * @param _beneficiary Address performing the token purchase\n      * @param _tokenAmount Number of tokens to be emitted\n      */\n      function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n       token.transfer(_beneficiary, _tokenAmount);\n     }\n     /**\n      * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n      * @param _beneficiary Address receiving the tokens\n      * @param _tokenAmount Number of tokens to be purchased\n      */\n      function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n       _deliverTokens(_beneficiary, _tokenAmount);\n     }\n     /**\n      * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n      * @param _beneficiary Address receiving the tokens\n      * @param _weiAmount Value in wei involved in the purchase\n      */\n      function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n       // optional override\n     }\n     /**\n      * @dev Override to extend the way in which ether is converted to tokens.\n      * @param _weiAmount Value in wei to be converted into tokens\n      * @return Number of tokens that can be purchased with the specified _weiAmount\n      */\n      function _getTokenAmount(uint256 _weiAmount) internal  returns (uint256) {\n\n       return _weiAmount.mul(rate);\n     }\n\n     /**\n      * @dev Determines how ETH is stored/forwarded on purchases.\n      */\n      function _forwardFunds() internal {\n       wallet.transfer(msg.value);\n     }\n\n   }\n\n\n\n   contract EmaCrowdSale is Crowdsale {\n    uint256 public hardcap;\n    uint256 public starttime;\n    Crowdsale public csale;\n    using SafeMath for uint256; \n    constructor(address wallet, MiniMeToken token, uint256 startTime, uint256 cap) Crowdsale(wallet, token, starttime) public onlyOwner\n    {\n\n      hardcap = cap;\n      starttime = startTime;\n      setCrowdsale(wallet, token, startTime);\n    }\n\nfunction tranferPresaleTokens(address investor, uint256 ammount)public onlyOwner{\n    tokensSold = tokensSold.add(ammount); \n    token.transferFrom(this, investor, ammount); \n}\n\n    function setTokenTransferState(bool state) public onlyOwner {\n     token.changeController(this);\n     token.enableTransfers(state);\n   }\n\n   function claim(address claimToken) public onlyOwner {\n     token.changeController(this);\n     token.claimTokens(claimToken);\n   }\n\n   function () external payable onlyWhitelisted whenNotPaused{\n\n    emit buyx(msg.sender, this, _getTokenAmount(msg.value));\n\n    buyTokens(msg.sender);\n  }\n\n\n}\n\n\n\n\n\n\ncontract Controlled is Pausable {\n /// @notice The address of the controller is the only address that can call\n ///  a function with this modifier\n modifier onlyController { require(msg.sender == controller); _; }\n modifier onlyControllerorOwner { require((msg.sender == controller) || (msg.sender == owner)); _; }\n address public controller;\n constructor() public { controller = msg.sender;}\n /// @notice Changes the controller of the contract\n /// @param _newController The new controller of the contract\n function changeController(address _newController) public onlyControllerorOwner {\n   controller = _newController;\n }\n}\n/// @dev The token controller contract must implement these functions\ncontract TokenController {\n /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n /// @param _owner The address that sent the ether to create tokens\n /// @return True if the ether is accepted, false if it throws\n function proxyPayment(address _owner) public payable returns(bool);\n /// @notice Notifies the controller about a token transfer allowing the\n ///  controller to react if desired\n /// @param _from The origin of the transfer\n /// @param _to The destination of the transfer\n /// @param _amount The amount of the transfer\n /// @return False if the controller does not authorize the transfer\n function onTransfer(address _from, address _to, uint _amount) public returns(bool);\n /// @notice Notifies the controller about an approval allowing the\n ///  controller to react if desired\n /// @param _owner The address that calls `approve()`\n /// @param _spender The spender in the `approve()` call\n /// @param _amount The amount in the `approve()` call\n /// @return False if the controller does not authorize the approval\n function onApprove(address _owner, address _spender, uint _amount) public\n returns(bool);\n}\n    /*\n       Copyright 2016, Jordi Baylina\n       This program is free software: you can redistribute it and/or modify\n       it under the terms of the GNU General Public License as published by\n       the Free Software Foundation, either version 3 of the License, or\n       (at your option) any later version.\n       This program is distributed in the hope that it will be useful,\n       but WITHOUT ANY WARRANTY; without even the implied warranty of\n       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n       GNU General Public License for more details.\n       You should have received a copy of the GNU General Public License\n       along with this program.  If not, see <http://www.gnu.org/licenses/>.\n       */\n       /// @title MiniMeToken Contract\n       /// @author Jordi Baylina\n       /// @dev This token contract's goal is to make it easy for anyone to clone this\n       ///  token using the token distribution at a given block, this will allow DAO's\n       ///  and DApps to upgrade their features in a decentralized manner without\n       ///  affecting the original token\n       /// @dev It is ERC20 compliant, but still needs to under go further testing.\n       contract ApproveAndCallFallBack {\n         function receiveApproval(address from, uint256 _amount, address _token, bytes _data) public;\n       }\n       /// @dev The actual token contract, the default controller is the msg.sender\n       ///  that deploys the contract, so usually this token will be deployed by a\n       ///  token controller contract, which Giveth will call a \"Campaign\"\n       contract MiniMeToken is Controlled\n       {\n         using SafeMath for uint256;\n         string public name;                //The Token's name: e.g. DigixDAO Tokens\n         uint8 public decimals;             //Number of decimals of the smallest unit\n         string public symbol;              //An identifier: e.g. REP\n         string public version = 'V 1.0'; //An arbitrary versioning scheme\n         /// @dev `Checkpoint` is the structure that attaches a block number to a\n         ///  given value, the block number attached is the one that last changed the\n         ///  value\n         struct  Checkpoint {\n           // `fromBlock` is the block number that the value was generated from\n           uint128 fromBlock;\n           // `value` is the amount of tokens at a specific block number\n           uint128 value;\n         }\n         // `parentToken` is the Token address that was cloned to produce this token;\n         //  it will be 0x0 for a token that was not cloned\n         MiniMeToken public parentToken;\n         // `parentSnapShotBlock` is the block number from the Parent Token that was\n         //  used to determine the initial distribution of the Clone Token\n         uint public parentSnapShotBlock;\n         // `creationBlock` is the block number that the Clone Token was created\n         uint public creationBlock;\n         // `balances` is the map that tracks the balance of each address, in this\n         //  contract when the balance changes the block number that the change\n         //  occurred is also included in the map\n         mapping (address => Checkpoint[]) balances;\n         // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n         mapping (address => mapping (address => uint256)) allowed;\n         // Tracks the history of the `totalSupply` of the token\n         Checkpoint[] totalSupplyHistory;\n         // Flag that determines if the token is transferable or not.\n         bool public transfersEnabled;\n         // The factory used to create new clone tokens\n         MiniMeTokenFactory public tokenFactory;\n         ////////////////\n         // Constructor\n         ////////////////\n         /// @notice Constructor to create a MiniMeToken\n         /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\n         ///  will create the Clone token contracts, the token factory needs to be\n         ///  deployed first\n         /// @param _parentToken Address of the parent token, set to 0x0 if it is a\n         ///  new token\n         /// @param _parentSnapShotBlock Block of the parent token that will\n         ///  determine the initial distribution of the clone token, set to 0 if it\n         ///  is a new token\n         /// @param _tokenName Name of the new token\n         /// @param _decimalUnits Number of decimals of the new token\n         /// @param _tokenSymbol Token Symbol for the new token\n         /// @param _transfersEnabled If true, tokens will be able to be transferred\n         constructor(\n           address _tokenFactory,\n           address _parentToken,\n           uint _parentSnapShotBlock,\n           string _tokenName,\n           uint8 _decimalUnits,\n           string _tokenSymbol,\n           bool _transfersEnabled\n           ) public {\n           tokenFactory = MiniMeTokenFactory(_tokenFactory);\n           name = _tokenName;                                 // Set the name\n           decimals = _decimalUnits;                          // Set the decimals\n           symbol = _tokenSymbol;                             // Set the symbol\n           parentToken = MiniMeToken(_parentToken);\n           parentSnapShotBlock = _parentSnapShotBlock;\n           transfersEnabled = _transfersEnabled;\n           creationBlock = block.number;\n         }\n         ///////////////////\n         // ERC20 Methods\n         ///////////////////\n         /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n         /// @param _to The address of the recipient\n         /// @param _amount The amount of tokens to be transferred\n         /// @return Whether the transfer was successful or not\n         function transfer(address _to, uint256 _amount) public returns (bool success)  {\n           require(transfersEnabled);\n           doTransfer(msg.sender, _to, _amount);\n           return true;\n         }\n         /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n         ///  is approved by `_from`\n         /// @param _from The address holding the tokens being transferred\n         /// @param _to The address of the recipient\n         /// @param _amount The amount of tokens to be transferred\n         /// @return True if the transfer was successful\n         function transferFrom(address _from, address _to, uint256 _amount\n           ) public  returns (bool success) {\n           // The controller of this contract can move tokens around at will,\n           //  this is important to recognize! Confirm that you trust the\n           //  controller of this contract, which in most situations should be\n           //  another open source smart contract or 0x0\n           if (msg.sender != controller) {\n             require(transfersEnabled);\n             // The standard ERC 20 transferFrom functionality\n             require(allowed[_from][msg.sender] >= _amount);\n             allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n           }\n           doTransfer(_from, _to, _amount);\n           return true;\n         }\n\n         /// @dev This is the actual transfer function in the token contract, it can\n         ///  only be called by other functions in this contract.\n         /// @param _from The address holding the tokens being transferred\n         /// @param _to The address of the recipient\n         /// @param _amount The amount of tokens to be transferred\n         /// @return True if the transfer was successful\n         function doTransfer(address _from, address _to, uint _amount\n           ) internal {\n          if (_amount == 0) {\n            emit Transfer(_from, _to, _amount);    // Follow the spec to louch the event when transfer 0\n            return;\n          }\n\n          // Do not allow transfer to 0x0 or the token contract itself\n          require((_to != 0) && (_to != address(this)));\n          // If the amount being transfered is more than the balance of the\n          //  account the transfer throws\n          uint256 previousBalanceFrom = balanceOfAt(_from, block.number);\n          require(previousBalanceFrom >= _amount);\n          //  sending the tokens\n          updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n          // Then update the balance array with the new value for the address\n          //  receiving the tokens\n          uint256 previousBalanceTo = balanceOfAt(_to, block.number);\n          require(previousBalanceTo.add(_amount) >= previousBalanceTo); // Check for overflow\n          updateValueAtNow(balances[_to], previousBalanceTo.add(_amount));\n          // An event to make the transfer easy to find on the blockchain\n          emit Transfer(_from, _to, _amount);\n        }\n        /// @param _owner The address that's balance is being requested\n        /// @return The balance of `_owner` at the current block\n        function balanceOf(address _owner) public constant returns (uint256 balance) {\n         return balanceOfAt(_owner, block.number);\n       }\n       /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n       ///  its behalf. This is a modified version of the ERC20 approve function\n       ///  to be a little bit safer\n       /// @param _spender The address of the account able to transfer the tokens\n       /// @param _amount The amount of tokens to be approved for transfer\n       /// @return True if the approval was successful\n       function approve(address _spender, uint256 _amount) public returns (bool success) {\n        require(transfersEnabled);\n        // To change the approve amount you first have to reduce the addresses`\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n        //  Alerts the token controller of the approve function call\n        if (isContract(controller)) {\n         require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\n       }\n       allowed[msg.sender][_spender] = _amount;\n       emit Approval(msg.sender, _spender, _amount);\n       return true;\n     }\n     /// @dev This function makes it easy to read the `allowed[]` map\n     /// @param _owner The address of the account that owns the token\n     /// @param _spender The address of the account able to transfer the tokens\n     /// @return Amount of remaining tokens of _owner that _spender is allowed\n     ///  to spend\n     function allowance(address _owner, address _spender\n       ) public constant returns (uint256 remaining) {\n       return allowed[_owner][_spender];\n     }\n     /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n     ///  its behalf, and then a function is triggered in the contract that is\n     ///  being approved, `_spender`. This allows users to use their tokens to\n     ///  interact with contracts in one function call instead of two\n     /// @param _spender The address of the contract able to transfer the tokens\n     /// @param _amount The amount of tokens to be approved for transfer\n     /// @return True if the function call was successful\n     function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n       ) public returns (bool success) {\n       require(approve(_spender, _amount));\n       ApproveAndCallFallBack(_spender).receiveApproval(\n         msg.sender,\n         _amount,\n         this,\n         _extraData\n         );\n       return true;\n     }\n     /// @dev This function makes it easy to get the total number of tokens\n     /// @return The total number of tokens\n     function totalSupply() public constant returns (uint) {\n       return totalSupplyAt(block.number);\n     }\n     ////////////////\n     // Query balance and totalSupply in History\n     ////////////////\n     /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n     /// @param _owner The address from which the balance will be retrieved\n     /// @param _blockNumber The block number when the balance is queried\n     /// @return The balance at `_blockNumber`\n     function balanceOfAt(address _owner, uint _blockNumber) public constant\n     returns (uint) {\n       // These next few lines are used when the balance of the token is\n       //  requested before a check point was ever created for this token, it\n       //  requires that the `parentToken.balanceOfAt` be queried at the\n       //  genesis block for that token as this contains initial balance of\n       //  this token\n       if ((balances[_owner].length == 0)\n         || (balances[_owner][0].fromBlock > _blockNumber)) {\n         if (address(parentToken) != 0) {\n           return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\n           } else {\n             // Has no parent\n             return 0;\n           }\n           // This will return the expected balance during normal situations\n           } else {\n             return getValueAt(balances[_owner], _blockNumber);\n           }\n         }\n         /// @notice Total amount of tokens at a specific `_blockNumber`.\n         /// @param _blockNumber The block number when the totalSupply is queried\n         /// @return The total amount of tokens at `_blockNumber`\n         function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\n           // These next few lines are used when the totalSupply of the token is\n           //  requested before a check point was ever created for this token, it\n           //  requires that the `parentToken.totalSupplyAt` be queried at the\n           //  genesis block for this token as that contains totalSupply of this\n           //  token at this block number.\n           if ((totalSupplyHistory.length == 0)\n             || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n             if (address(parentToken) != 0) {\n               return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\n               } else {\n                 return 0;\n               }\n               // This will return the expected totalSupply during normal situations\n               } else {\n                 return getValueAt(totalSupplyHistory, _blockNumber);\n               }\n             }\n             \n             ////////////////\n             // Generate and destroy tokens\n             ////////////////\n             /// @notice Generates `_amount` tokens that are assigned to `_owner`\n             /// @param _owner The address that will be assigned the new tokens\n             /// @param _amount The quantity of tokens generated\n             /// @return True if the tokens are generated correctly\n             function generateTokens(address _owner, uint _amount\n               ) public onlyControllerorOwner whenNotPaused  returns (bool) {\n               uint curTotalSupply = totalSupply();\n               require(curTotalSupply.add(_amount) >= curTotalSupply); // Check for overflow\n               uint previousBalanceTo = balanceOf(_owner);\n               require(previousBalanceTo.add(_amount) >= previousBalanceTo); // Check for overflow\n               updateValueAtNow(totalSupplyHistory, curTotalSupply.add(_amount));\n               updateValueAtNow(balances[_owner], previousBalanceTo.add(_amount));\n               emit Transfer(0, _owner, _amount);\n               return true;\n             }\n             /// @notice Burns `_amount` tokens from `_owner`\n             /// @param _owner The address that will lose the tokens\n             /// @param _amount The quantity of tokens to burn\n             /// @return True if the tokens are burned correctly\n             function destroyTokens(address _owner, uint _amount\n               ) onlyControllerorOwner public returns (bool) {\n               uint curTotalSupply = totalSupply();\n               require(curTotalSupply >= _amount);\n               uint previousBalanceFrom = balanceOf(_owner);\n               require(previousBalanceFrom >= _amount);\n               updateValueAtNow(totalSupplyHistory, curTotalSupply.sub(_amount));\n               updateValueAtNow(balances[_owner], previousBalanceFrom.sub(_amount));\n               emit Transfer(_owner, 0, _amount);\n               return true;\n             }\n             ////////////////\n             // Enable tokens transfers\n             ////////////////\n             /// @notice Enables token holders to transfer their tokens freely if true\n             /// @param _transfersEnabled True if transfers are allowed in the clone\n             function enableTransfers(bool _transfersEnabled) public onlyControllerorOwner {\n               transfersEnabled = _transfersEnabled;\n             }\n             ////////////////\n             // Internal helper functions to query and set a value in a snapshot array\n             ////////////////\n             /// @dev `getValueAt` retrieves the number of tokens at a given block number\n             /// @param checkpoints The history of values being queried\n             /// @param _block The block number to retrieve the value at\n             /// @return The number of tokens being queried\n             function getValueAt(Checkpoint[] storage checkpoints, uint _block\n               ) constant internal returns (uint) {\n               if (checkpoints.length == 0) return 0;\n               // Shortcut for the actual value\n               if (_block >= checkpoints[checkpoints.length.sub(1)].fromBlock)\n               return checkpoints[checkpoints.length.sub(1)].value;\n               if (_block < checkpoints[0].fromBlock) return 0;\n               // Binary search of the value in the array\n               uint min = 0;\n               uint max = checkpoints.length.sub(1);\n               while (max > min) {\n                 uint mid = (max.add(min).add(1)).div(2);\n                 if (checkpoints[mid].fromBlock<=_block) {\n                   min = mid;\n                   } else {\n                     max = mid.sub(1);\n                   }\n                 }\n                 return checkpoints[min].value;\n               }\n               /// @dev `updateValueAtNow` used to update the `balances` map and the\n               ///  `totalSupplyHistory`\n               /// @param checkpoints The history of data being updated\n               /// @param _value The new number of tokens\n               function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n                 ) internal  {\n                 if ((checkpoints.length == 0)\n                   || (checkpoints[checkpoints.length.sub(1)].fromBlock < block.number)) {\n                  Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n                  newCheckPoint.fromBlock =  uint128(block.number);\n                  newCheckPoint.value = uint128(_value);\n                  } else {\n                    Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length.sub(1)];\n                    oldCheckPoint.value = uint128(_value);\n                  }\n                }\n                /// @dev Internal function to determine if an address is a contract\n                /// @param _addr The address being queried\n                /// @return True if `_addr` is a contract\n                function isContract(address _addr) constant internal returns(bool) {\n                 uint size;\n                 if (_addr == 0) return false;\n                 assembly {\n                   size := extcodesize(_addr)\n                 }\n                 return size>0;\n               }\n               /// @dev Helper function to return a min betwen the two uints\n               function min(uint a, uint b) pure internal returns (uint) {\n                 return a < b ? a : b;\n               }\n               /// @notice The fallback function: If the contract's controller has not been\n               ///  set to 0, then the `proxyPayment` method is called which relays the\n               ///  ether and creates tokens as described in the token controller contract\n               function () public payable {\n           /*require(isContract(controller));\n           require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));*/\n           revert();\n         }\n         //////////\n         // Safety Methods\n         //////////\n         /// @notice This method can be used by the controller to extract mistakenly\n         ///  sent tokens to this contract.\n         /// @param _token The address of the token contract that you want to recover\n         ///  set to 0 in case you want to extract ether.\n         function claimTokens(address _token) public onlyControllerorOwner {\n           if (_token == 0x0) {\n             controller.transfer(address(this).balance);\n             return;\n           }\n           MiniMeToken token = MiniMeToken(_token);\n           uint balance = token.balanceOf(this);\n           token.transfer(controller, balance);\n           emit ClaimedTokens(_token, controller, balance);\n         }\n         ////////////////\n         // Events\n         ////////////////\n         event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n         event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n         event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\n         event Approval(\n           address indexed _owner,\n           address indexed _spender,\n           uint256 _amount\n           );\n       }\n       ////////////////\n       // MiniMeTokenFactory\n       ////////////////\n       /// @dev This contract is used to generate clone contracts from a contract.\n       ///  In solidity this is the way to create a contract from a contract of the\n       ///  same class\n       contract MiniMeTokenFactory {\n         /// @notice Update the DApp by creating a new token with new functionalities\n         ///  the msg.sender becomes the controller of this clone token\n         /// @param _parentToken Address of the token being cloned\n         /// @param _snapshotBlock Block of the parent token that will\n         ///  determine the initial distribution of the clone token\n         /// @param _tokenName Name of the new token\n         /// @param _decimalUnits Number of decimals of the new token\n         /// @param _tokenSymbol Token Symbol for the new token\n         /// @param _transfersEnabled If true, tokens will be able to be transferred\n         /// @return The address of the new token contract\n         function createCloneToken(\n           address _parentToken,\n           uint _snapshotBlock,\n           string _tokenName,\n           uint8 _decimalUnits,\n           string _tokenSymbol,\n           bool _transfersEnabled\n           ) public returns (MiniMeToken) {\n           MiniMeToken newToken = new MiniMeToken(\n             this,\n             _parentToken,\n             _snapshotBlock,\n             _tokenName,\n             _decimalUnits,\n             _tokenSymbol,\n             _transfersEnabled\n             );\n           newToken.changeController(msg.sender);\n           return newToken;\n         }\n       }\n\n       contract EmaToken is MiniMeToken {\n        constructor(address tokenfactory, address parenttoken, uint parentsnapshot, string tokenname, uint8 dec, string tokensymbol, bool transfersenabled)\n        MiniMeToken(tokenfactory, parenttoken, parentsnapshot, tokenname, dec, tokensymbol, transfersenabled) public{\n        }\n      }\n      contract Configurator is Ownable {\n        EmaToken public token = EmaToken(0xC3EE57Fa8eD253E3F214048879977265967AE745);\n        EmaCrowdSale public crowdsale = EmaCrowdSale(0xAd97aF045F815d91621040809F863a5fb070B52d);\n        address ownerWallet = 0x3046751e1d843748b4983D7bca58ECF6Ef1e5c77;\n        address tokenfactory = 0xB74AA356913316ce49626527AE8543FFf23bB672;\n        address fundsWallet = 0x3046751e1d843748b4983D7bca58ECF6Ef1e5c77;\n        address incetivesPool = 0x95eac65414a6a650E2c71e3480AeEF0cF76392FA;\n        address FoundersAndTeam = 0x88C952c4A8fc156b883318CdA8b4a5279d989391;\n        address FuturePartners = 0x5B0333399E0D8F3eF1e5202b4eA4ffDdFD7a0382;\n        address Contributors = 0xa02dfB73de485Ebd9d37CbA4583e916F3bA94CeE;\n        address BountiesWal = 0xaB662f89A2c6e71BD8c7f754905cAaEC326BcdE7;\n        uint256 public crowdSaleStart;\n\n\n        function deploy() onlyOwner public{\n \t    owner = msg.sender; \n\t    \n\t  \n\t//\tcrowdsale.transferOwnership(ownerWallet);\n\t//\ttoken.transferOwnership(ownerWallet);\n\t//\ttoken.changeController(this);\n\t\ttoken.generateTokens(crowdsale, 255000000000000000000000000); // Generate CrowdSale tokens\n\t\ttoken.generateTokens(incetivesPool, 115000000000000000000000000); //generate Incentives pool tokens\n\t\ttoken.generateTokens(FoundersAndTeam, 85000000000000000000000000); //generate Founders and team tokens\n\t\ttoken.generateTokens(FuturePartners, 40000000000000000000000000); //generate future partners tokens and contributors\n\t\ttoken.generateTokens(BountiesWal, 5000000000000000000000000); //generate contributors tokens\n\t\ttoken.changeController(EmaCrowdSale(crowdsale));\n\t\t\ttoken.transferOwnership(ownerWallet);\n\t\t\tcrowdsale.transferOwnership(ownerWallet);\n        }\n      }",
  "bytecode": "608060405260008060146101000a81548160ff0219169083151502179055506040805190810160405280600581526020017f5620312e30000000000000000000000000000000000000000000000000000000815250600590805190602001906200006b92919062000270565b503480156200007957600080fd5b5060405162003047380380620030478339810180604052810190808051906020019092919080519060200190929190805190602001909291908051820192919060200180519060200190929190805182019291906020018051906020019092919050505086868686868686336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600c60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360029080519060200190620001be92919062000270565b5082600360006101000a81548160ff021916908360ff1602179055508160049080519060200190620001f292919062000270565b5085600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508460078190555080600c60006101000a81548160ff0219169083151502179055504360088190555050505050505050505050505050506200031f565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002b357805160ff1916838001178555620002e4565b82800160010185558215620002e4579182015b82811115620002e3578251825591602001919060010190620002c6565b5b509050620002f39190620002f7565b5090565b6200031c91905b8082111562000318576000816000905550600101620002fe565b5090565b90565b612d18806200032f6000396000f300608060405260043610610175576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461017a578063095ea7b31461020a578063176345141461026f57806318160ddd1461029a57806323b872dd146102c5578063313ce5671461034a5780633cebb8231461037b5780633f4ba83a146103be5780634ee2cd7e146103d557806354fd4d50146104365780635c975abb146104c657806370a08231146104f557806380a540011461054c578063827f32c0146105a35780638456cb59146106085780638da5cb5b1461061f57806395d89b4114610676578063981b24d014610706578063a9059cbb14610747578063bef97c87146107ac578063c5bcc4f1146107db578063cae9ca5114610806578063d3ce77fe146108b1578063dd62ed3e14610916578063df8de3e71461098d578063e77772fe146109d0578063f2fde38b14610a27578063f41e60c514610a6a578063f77c479114610a99575b600080fd5b34801561018657600080fd5b5061018f610af0565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101cf5780820151818401526020810190506101b4565b50505050905090810190601f1680156101fc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561021657600080fd5b50610255600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b8e565b604051808215151515815260200191505060405180910390f35b34801561027b57600080fd5b50610284610ea1565b6040518082815260200191505060405180910390f35b3480156102a657600080fd5b506102af610ea7565b6040518082815260200191505060405180910390f35b3480156102d157600080fd5b50610330600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610eb7565b604051808215151515815260200191505060405180910390f35b34801561035657600080fd5b5061035f6110dc565b604051808260ff1660ff16815260200191505060405180910390f35b34801561038757600080fd5b506103bc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110ef565b005b3480156103ca57600080fd5b506103d36111e6565b005b3480156103e157600080fd5b50610420600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506112a4565b6040518082815260200191505060405180910390f35b34801561044257600080fd5b5061044b611530565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561048b578082015181840152602081019050610470565b50505050905090810190601f1680156104b85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104d257600080fd5b506104db6115ce565b604051808215151515815260200191505060405180910390f35b34801561050157600080fd5b50610536600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115e1565b6040518082815260200191505060405180910390f35b34801561055857600080fd5b506105616115f4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105af57600080fd5b506105ee600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061161a565b604051808215151515815260200191505060405180910390f35b34801561061457600080fd5b5061061d611818565b005b34801561062b57600080fd5b506106346118d8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561068257600080fd5b5061068b6118fd565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106cb5780820151818401526020810190506106b0565b50505050905090810190601f1680156106f85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561071257600080fd5b506107316004803603810190808035906020019092919050505061199b565b6040518082815260200191505060405180910390f35b34801561075357600080fd5b50610792600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611b3b565b604051808215151515815260200191505060405180910390f35b3480156107b857600080fd5b506107c1611b6d565b604051808215151515815260200191505060405180910390f35b3480156107e757600080fd5b506107f0611b80565b6040518082815260200191505060405180910390f35b34801561081257600080fd5b50610897600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611b86565b604051808215151515815260200191505060405180910390f35b3480156108bd57600080fd5b506108fc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611d04565b604051808215151515815260200191505060405180910390f35b34801561092257600080fd5b50610977600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ec2565b6040518082815260200191505060405180910390f35b34801561099957600080fd5b506109ce600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f49565b005b3480156109dc57600080fd5b506109e561230c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610a3357600080fd5b50610a68600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612332565b005b348015610a7657600080fd5b50610a97600480360381019080803515159060200190929190505050612487565b005b348015610aa557600080fd5b50610aae612557565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b865780601f10610b5b57610100808354040283529160200191610b86565b820191906000526020600020905b815481529060010190602001808311610b6957829003601f168201915b505050505081565b6000600c60009054906101000a900460ff161515610bab57600080fd5b6000821480610c3657506000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b1515610c4157600080fd5b610c6c600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661257d565b15610db157600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663da682aeb3385856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015610d6a57600080fd5b505af1158015610d7e573d6000803e3d6000fd5b505050506040513d6020811015610d9457600080fd5b81019080805190602001909291905050501515610db057600080fd5b5b81600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60085481565b6000610eb24361199b565b905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110c657600c60009054906101000a900460ff161515610f2b57600080fd5b81600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610fb657600080fd5b61104582600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546125b990919063ffffffff16565b600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6110d18484846125d2565b600190509392505050565b600360009054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061119757506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156111a257600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561124157600080fd5b600060149054906101000a900460ff16151561125c57600080fd5b60008060146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b600080600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050148061137d575081600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548110151561133f57fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16115b156114df576000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156114d657600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634ee2cd7e8461140f856007546127ff565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561149457600080fd5b505af11580156114a8573d6000803e3d6000fd5b505050506040513d60208110156114be57600080fd5b8101908080519060200190929190505050905061152a565b6000905061152a565b611527600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083612818565b90505b92915050565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115c65780601f1061159b576101008083540402835291602001916115c6565b820191906000526020600020905b8154815290600101906020018083116115a957829003601f168201915b505050505081565b600060149054906101000a900460ff1681565b60006115ed82436112a4565b9050919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806116c757506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156116d257600080fd5b600060149054906101000a900460ff161515156116ee57600080fd5b6116f6610ea7565b91508161170c8584612a8e90919063ffffffff16565b1015151561171957600080fd5b611722856115e1565b9050806117388583612a8e90919063ffffffff16565b1015151561174557600080fd5b611762600b61175d8685612a8e90919063ffffffff16565b612aac565b6117bc600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206117b78684612a8e90919063ffffffff16565b612aac565b8473ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019250505092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561187357600080fd5b600060149054906101000a900460ff1615151561188f57600080fd5b6001600060146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119935780601f1061196857610100808354040283529160200191611993565b820191906000526020600020905b81548152906001019060200180831161197657829003601f168201915b505050505081565b600080600b8054905014806119fa575081600b60008154811015156119bc57fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16115b15611b28576000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611b1f57600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663981b24d0611a8b846007546127ff565b6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015611add57600080fd5b505af1158015611af1573d6000803e3d6000fd5b505050506040513d6020811015611b0757600080fd5b81019080805190602001909291905050509050611b36565b60009050611b36565b611b33600b83612818565b90505b919050565b6000600c60009054906101000a900460ff161515611b5857600080fd5b611b633384846125d2565b6001905092915050565b600c60009054906101000a900460ff1681565b60075481565b6000611b928484610b8e565b1515611b9d57600080fd5b8373ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338530866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611c92578082015181840152602081019050611c77565b50505050905090810190601f168015611cbf5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015611ce157600080fd5b505af1158015611cf5573d6000803e3d6000fd5b50505050600190509392505050565b6000806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611db157506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515611dbc57600080fd5b611dc4610ea7565b9150838210151515611dd557600080fd5b611dde856115e1565b9050838110151515611def57600080fd5b611e0c600b611e0786856125b990919063ffffffff16565b612aac565b611e66600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611e6186846125b990919063ffffffff16565b612aac565b60008573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019250505092915050565b6000600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611ff457506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515611fff57600080fd5b60008373ffffffffffffffffffffffffffffffffffffffff1614156120a357600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f1935050505015801561209d573d6000803e3d6000fd5b50612307565b8291508173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561214157600080fd5b505af1158015612155573d6000803e3d6000fd5b505050506040513d602081101561216b57600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561224357600080fd5b505af1158015612257573d6000803e3d6000fd5b505050506040513d602081101561226d57600080fd5b810190808051906020019092919050505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167ff931edb47c50b4b4104c187b5814a9aef5f709e17e2ecf9617e860cacade929c836040518082815260200191505060405180910390a35b505050565b600c60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561238d57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156123c957600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061252f57506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561253a57600080fd5b80600c60006101000a81548160ff02191690831515021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008373ffffffffffffffffffffffffffffffffffffffff1614156125a857600091506125b3565b823b90506000811191505b50919050565b60008282111515156125c757fe5b818303905092915050565b6000806000831415612648578373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a36127f8565b60008473ffffffffffffffffffffffffffffffffffffffff161415801561269b57503073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614155b15156126a657600080fd5b6126b085436112a4565b91508282101515156126c157600080fd5b61270b600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020848403612aac565b61271584436112a4565b90508061272b8483612a8e90919063ffffffff16565b1015151561273857600080fd5b612792600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061278d8584612a8e90919063ffffffff16565b612aac565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a35b5050505050565b600081831061280e5781612810565b825b905092915050565b6000806000806000868054905014156128345760009350612a85565b8561284d600188805490506125b990919063ffffffff16565b81548110151561285957fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168510151561290557856128b6600188805490506125b990919063ffffffff16565b8154811015156128c257fe5b9060005260206000200160000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff169350612a85565b85600081548110151561291457fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168510156129605760009350612a85565b6000925061297c600187805490506125b990919063ffffffff16565b91505b82821115612a38576129c060026129b260016129a48787612a8e90919063ffffffff16565b612a8e90919063ffffffff16565b612c4090919063ffffffff16565b90508486828154811015156129d157fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16111515612a1c57809250612a33565b612a306001826125b990919063ffffffff16565b91505b61297f565b8583815481101515612a4657fe5b9060005260206000200160000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1693505b50505092915050565b6000808284019050838110151515612aa257fe5b8091505092915050565b600080600084805490501480612b2157504384612ad7600187805490506125b990919063ffffffff16565b815481101515612ae357fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16105b15612bcd5783848054809190600101612b3a9190612c5b565b815481101515612b4657fe5b906000526020600020019150438260000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550828260000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550612c3a565b83612be6600186805490506125b990919063ffffffff16565b815481101515612bf257fe5b906000526020600020019050828160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b50505050565b6000808284811515612c4e57fe5b0490508091505092915050565b815481835581811115612c8257818360005260206000209182019101612c819190612c87565b5b505050565b612ce991905b80821115612ce557600080820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556000820160106101000a8154906fffffffffffffffffffffffffffffffff021916905550600101612c8d565b5090565b905600a165627a7a723058209a100197830bdfd7d104c1821c112f11725954c937fc60d361e063c6d1df3f540029000000000000000000000000b74aa356913316ce49626527ae8543fff23bb6720000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000009456d6120546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003454d410000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000b74aa356913316ce49626527ae8543fff23bb6720000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000009456d6120546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003454d410000000000000000000000000000000000000000000000000000000000"
}