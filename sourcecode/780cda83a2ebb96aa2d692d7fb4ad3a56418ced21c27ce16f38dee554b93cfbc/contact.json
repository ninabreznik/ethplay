{
  "address": "0x645170008170d601ff71b7dfc8cf871b4f7c2bbe",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Exchanger",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-24\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n \n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n \n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n \n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20Interface {\n    function balanceOf(address _owner) public constant returns (uint balance) {}\n    function transfer(address _to, uint _value) public returns (bool success) {}\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {}\n}\n\ncontract Exchanger {\n    using SafeMath for uint;\n  // Decimals 18\n  ERC20Interface dai = ERC20Interface(0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359);\n  // Decimals 6\n  ERC20Interface usdt = ERC20Interface(0xdac17f958d2ee523a2206206994597c13d831ec7);\n\n  address creator = 0x34f1e87e890b5683ef7b011b16055113c7194c35;\n  uint feeDAI = 5000000000000000;\n  uint feeUSDT = 5000;\n\n  function getDAI(uint _amountInDollars) public returns (bool) {\n    // Must first call approve for the usdt contract\n    usdt.transferFrom(msg.sender, this, _amountInDollars * (10 ** 6));\n    dai.transfer(msg.sender, _amountInDollars.mul(((10 ** 18) - feeDAI)));\n    return true;\n  }\n\n  function getUSDT(uint _amountInDollars) public returns (bool) {\n    // Must first call approve for the dai contract\n    dai.transferFrom(msg.sender, this, _amountInDollars * (10 ** 18));\n    usdt.transfer(msg.sender, _amountInDollars.mul(((10 ** 6) - feeUSDT)));\n    return true;\n  }\n\n  function withdrawEquity(uint _amountInDollars, bool isUSDT) public returns (bool) {\n    require(msg.sender == creator);\n    if(isUSDT) {\n      usdt.transfer(creator, _amountInDollars * (10 ** 6));\n    } else {\n      dai.transfer(creator, _amountInDollars * (10 ** 18));\n    }\n    return true;\n  }\n}",
  "bytecode": "606060405260008054600160a060020a03199081167389d24a6b4ccb1b6faa2625fe562bdd9a232603591790915560018054821673dac17f958d2ee523a2206206994597c13d831ec7179055600280549091167334f1e87e890b5683ef7b011b16055113c7194c351790556611c37937e08000600355611388600455341561008657600080fd5b61042f806100956000396000f30060606040526004361061003d5763ffffffff60e060020a6000350416631aa5c70e811461004257806351b07a961461006c5780637d0b4c8b14610082575b600080fd5b341561004d57600080fd5b61005860043561009d565b604051901515815260200160405180910390f35b341561007757600080fd5b6100586004356101cf565b341561008d57600080fd5b6100586004356024351515610290565b600154600090600160a060020a03166323b872dd3330620f42408602856040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561011057600080fd5b6102c65a03f1151561012157600080fd5b50505060405180515050600054600354600160a060020a039091169063a9059cbb903390610160908690670de0b6b3a76400000363ffffffff6103d816565b60006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156101ac57600080fd5b6102c65a03f115156101bd57600080fd5b50505060405180515060019392505050565b60008054600160a060020a03166323b872dd3330670de0b6b3a76400008602856040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561024557600080fd5b6102c65a03f1151561025657600080fd5b50505060405180515050600154600454600160a060020a039091169063a9059cbb903390610160908690620f42400363ffffffff6103d816565b60025460009033600160a060020a039081169116146102ae57600080fd5b811561034057600154600254600160a060020a039182169163a9059cbb9116620f4240860260006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561031f57600080fd5b6102c65a03f1151561033057600080fd5b50505060405180519050506103cf565b60008054600254600160a060020a039182169263a9059cbb9290911690670de0b6b3a76400008702906040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156103b357600080fd5b6102c65a03f115156103c457600080fd5b505050604051805150505b50600192915050565b60008282028315806103f457508284828115156103f157fe5b04145b15156103fc57fe5b93925050505600a165627a7a72305820957c733b74dc56c91c8856b24c9349d6e6f5354402098a9845c7df996904aaaf0029"
}