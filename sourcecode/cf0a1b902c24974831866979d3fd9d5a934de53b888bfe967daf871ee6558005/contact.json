{
  "address": "0xdde12a12a6f67156e0da672be05c374e1b0a3e57",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Joyso: Joy Token",
  "contractName": "JoyToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-19\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract JoyToken is StandardToken, Ownable {\n    string constant public name = \"JOYSO\";\n    string constant public symbol = \"JOY\";\n    uint8 constant public decimals = 6;\n    bool public isLocked = true;\n\n    function JoyToken(address joysoWallet) public {\n        totalSupply = 2 * 10 ** (8+6);\n        balances[joysoWallet] = totalSupply;\n    }\n\n    modifier illegalWhenLocked() {\n        require(!isLocked || msg.sender == owner);\n        _;\n    }\n\n    // should be called by JoysoCrowdSale when crowdSale is finished\n    function unlock() onlyOwner {\n        isLocked = false;\n    }\n\n    function transfer(address _to, uint256 _value) illegalWhenLocked public returns (bool) {\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) illegalWhenLocked public returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n}",
  "bytecode": "60606040526003805460a060020a60ff02191674010000000000000000000000000000000000000000179055341561003657600080fd5b604051602080610b298339810160405280805160038054600160a060020a03338116600160a060020a03199092169190911790915565b5e620f480006000818155919092168152600160205260409020555050610a91806100986000396000f3006060604052600436106100da5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100df578063095ea7b31461016957806318160ddd1461019f57806323b872dd146101c4578063313ce567146101ec578063661884631461021557806370a08231146102375780638da5cb5b1461025657806395d89b4114610285578063a4e2d63414610298578063a69df4b5146102ab578063a9059cbb146102c0578063d73dd623146102e2578063dd62ed3e14610304578063f2fde38b14610329575b600080fd5b34156100ea57600080fd5b6100f2610348565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561012e578082015183820152602001610116565b50505050905090810190601f16801561015b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017457600080fd5b61018b600160a060020a036004351660243561037f565b604051901515815260200160405180910390f35b34156101aa57600080fd5b6101b26103eb565b60405190815260200160405180910390f35b34156101cf57600080fd5b61018b600160a060020a03600435811690602435166044356103f1565b34156101f757600080fd5b6101ff61044a565b60405160ff909116815260200160405180910390f35b341561022057600080fd5b61018b600160a060020a036004351660243561044f565b341561024257600080fd5b6101b2600160a060020a0360043516610549565b341561026157600080fd5b610269610564565b604051600160a060020a03909116815260200160405180910390f35b341561029057600080fd5b6100f2610573565b34156102a357600080fd5b61018b6105aa565b34156102b657600080fd5b6102be6105cb565b005b34156102cb57600080fd5b61018b600160a060020a0360043516602435610606565b34156102ed57600080fd5b61018b600160a060020a036004351660243561065d565b341561030f57600080fd5b6101b2600160a060020a0360043581169060243516610701565b341561033457600080fd5b6102be600160a060020a036004351661072c565b60408051908101604052600581527f4a4f59534f000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005481565b60035460009074010000000000000000000000000000000000000000900460ff16158061042c575060035433600160a060020a039081169116145b151561043757600080fd5b6104428484846107c7565b949350505050565b600681565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054808311156104ac57600160a060020a0333811660009081526002602090815260408083209388168352929052908120556104e3565b6104bc818463ffffffff61094916565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526001602052604090205490565b600354600160a060020a031681565b60408051908101604052600381527f4a4f590000000000000000000000000000000000000000000000000000000000602082015281565b60035474010000000000000000000000000000000000000000900460ff1681565b60035433600160a060020a039081169116146105e657600080fd5b6003805474ff000000000000000000000000000000000000000019169055565b60035460009074010000000000000000000000000000000000000000900460ff161580610641575060035433600160a060020a039081169116145b151561064c57600080fd5b610656838361095b565b9392505050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610695908363ffffffff610a5616565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a0390811691161461074757600080fd5b600160a060020a038116151561075c57600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000600160a060020a03831615156107de57600080fd5b600160a060020a03841660009081526001602052604090205482111561080357600080fd5b600160a060020a038085166000908152600260209081526040808320339094168352929052205482111561083657600080fd5b600160a060020a03841660009081526001602052604090205461085f908363ffffffff61094916565b600160a060020a038086166000908152600160205260408082209390935590851681522054610894908363ffffffff610a5616565b600160a060020a038085166000908152600160209081526040808320949094558783168252600281528382203390931682529190915220546108dc908363ffffffff61094916565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b60008282111561095557fe5b50900390565b6000600160a060020a038316151561097257600080fd5b600160a060020a03331660009081526001602052604090205482111561099757600080fd5b600160a060020a0333166000908152600160205260409020546109c0908363ffffffff61094916565b600160a060020a0333811660009081526001602052604080822093909355908516815220546109f5908363ffffffff610a5616565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b60008282018381101561065657fe00a165627a7a72305820562199ec0ca13b3150a82964741a42c16097ee4e031d379cfb5b57df206286a30029000000000000000000000000c640b901a529c58fb6f6c53665768e2d5c835421",
  "constructorArguments": "000000000000000000000000c640b901a529c58fb6f6c53665768e2d5c835421"
}