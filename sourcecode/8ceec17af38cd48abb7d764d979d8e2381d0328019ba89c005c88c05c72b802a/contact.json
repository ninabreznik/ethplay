{
  "address": "0x57cdee8a9658f364553fe89ba200252b00ad05d9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HashKingsPlanet",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-27\n*/\n\npragma solidity ^0.4.25;\n\n/* \n\t********************\n\t- HashKings Planet -\n\t********************\n\tv1.0\n\t\n\tDaniel Pittman - Qwoyn.io\n\t\n\t*Note:\n\t*\n\t*Holds all the plots from HashKings\n\t***********************************\n\t\n*/\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\t// Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n\t// benefit is lost if 'b' is also tested.\n\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n\tif (a == 0) {\n\t  return 0;\n\t}\n\n\tc = a * b;\n\tassert(c / a == b);\n\treturn c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n\t// uint256 c = a / b;\n\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\treturn a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\tassert(b <= a);\n\treturn a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\tc = a + b;\n\tassert(c >= a);\n\treturn c;\n  }\n}\n\n/**\n* @title Helps contracts guard against reentrancy attacks.\n* @author Remco Bloemen <[email protected]π.com>, Eenae <[email protected]>\n* @dev If you mark a function `nonReentrant`, you should also\n* mark it `external`.\n*/\ncontract ReentrancyGuard {\n\n/// @dev counter to allow mutex lock with only one SSTORE operation\nuint256 private guardCounter = 1;\n\n/**\n* @dev Prevents a contract from calling itself, directly or indirectly.\n* If you mark a function `nonReentrant`, you should also\n* mark it `external`. Calling one `nonReentrant` function from\n* another is not supported. Instead, you can implement a\n* `private` function doing the actual work, and an `external`\n* wrapper marked as `nonReentrant`.\n*/\n\tmodifier nonReentrant() {\n\t\tguardCounter += 1;\n\t\tuint256 localCounter = guardCounter;\n\t\t_;\n\t\trequire(localCounter == guardCounter);\n\t}\n}\n\n/**\n * @title ERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface ERC165 {\n\n  /**\n   * @notice Query if a contract implements an interface\n   * @param _interfaceId The interface identifier, as specified in ERC-165\n   * @dev Interface identification is specified in ERC-165. This function\n   * uses less than 30,000 gas.\n   */\n  function supportsInterface(bytes4 _interfaceId)\n\texternal\n\tview\n\treturns (bool);\n}\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ncontract ERC721Receiver {\n  /**\n   * @dev Magic value to be returned upon successful reception of an NFT\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n   */\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\n\n  /**\n   * @notice Handle the receipt of an NFT\n   * @dev The ERC721 smart contract calls this function on the recipient\n   * after a `safetransfer`. This function MAY throw to revert and reject the\n   * transfer. Return of other than the magic value MUST result in the \n   * transaction being reverted.\n   * Note: the contract address is always the message sender.\n   * @param _operator The address which called `safeTransferFrom` function\n   * @param _from The address which previously owned the token\n   * @param _tokenId The NFT identifier which is being transfered\n   * @param _data Additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n   */\n  function onERC721Received(\n\taddress _operator,\n\taddress _from,\n\tuint256 _tokenId,\n\tbytes _data\n  )\n\tpublic\n\treturns(bytes4);\n}\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary AddressUtils {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   * as the code is not actually created until after the constructor finishes.\n   * @param addr address to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address addr) internal view returns (bool) {\n\tuint256 size;\n\t// XXX Currently there is no better way to check if there is a contract in an address\n\t// than to check the size of the code at that address.\n\t// See https://ethereum.stackexchange.com/a/14016/36603\n\t// for more details about how this works.\n\t// TODO Check this again before the Serenity release, because all addresses will be\n\t// contracts then.\n\t// solium-disable-next-line security/no-inline-assembly\n\tassembly { size := extcodesize(addr) }\n\treturn size > 0;\n  }\n\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\". \n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n\taddress indexed previousOwner,\n\taddress indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n\towner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n\trequire(msg.sender == owner);\n\t_;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n\temit OwnershipRenounced(owner);\n\towner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n\t_transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal onlyOwner {\n\trequire(_newOwner != address(0));\n\temit OwnershipTransferred(owner, _newOwner);\n\towner = _newOwner;\n  }\n}\n\ncontract Fallback is Ownable {\n\n  function withdraw() public onlyOwner {\n\towner.transfer(address(this).balance);\n  }\n}\n\n/**\n * @title SupportsInterfaceWithLookup\n * @author Matt Condon (@shrugs)\n * @dev Implements ERC165 using a lookup table.\n */\ncontract SupportsInterfaceWithLookup is ERC165 {\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\n  /**\n   * 0x01ffc9a7 ===\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\n   */\n\n  /**\n   * @dev a mapping of interface id to whether or not it's supported\n   */\n  mapping(bytes4 => bool) internal supportedInterfaces;\n\n  /**\n   * @dev A contract implementing SupportsInterfaceWithLookup\n   * implement ERC165 itself\n   */\n  constructor()\n\tpublic\n  {\n\t_registerInterface(InterfaceId_ERC165);\n  }\n\n  /**\n   * @dev implement supportsInterface(bytes4) using a lookup table\n   */\n  function supportsInterface(bytes4 _interfaceId)\n\texternal\n\tview\n\treturns (bool)\n  {\n\treturn supportedInterfaces[_interfaceId];\n  }\n\n  /**\n   * @dev private method for registering an interface\n   */\n  function _registerInterface(bytes4 _interfaceId)\n\tinternal\n  {\n\trequire(_interfaceId != 0xffffffff);\n\tsupportedInterfaces[_interfaceId] = true;\n  }\n}\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Basic is ERC165 {\n  event Transfer(\n\taddress indexed _from,\n\taddress indexed _to,\n\tuint256 indexed _tokenId\n  );\n  event Approval(\n\taddress indexed _owner,\n\taddress indexed _approved,\n\tuint256 indexed _tokenId\n  );\n  event ApprovalForAll(\n\taddress indexed _owner,\n\taddress indexed _operator,\n\tbool _approved\n  );\n\n  function balanceOf(address _owner) public view returns (uint256 _balance);\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n  function exists(uint256 _tokenId) public view returns (bool _exists);\n\n  function approve(address _to, uint256 _tokenId) public;\n  function getApproved(uint256 _tokenId)\n\tpublic view returns (address _operator);\n\n  function setApprovalForAll(address _operator, bool _approved) public;\n  function isApprovedForAll(address _owner, address _operator)\n\tpublic view returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\n\tpublic;\n\n  function safeTransferFrom(\n\taddress _from,\n\taddress _to,\n\tuint256 _tokenId,\n\tbytes _data\n  )\n\tpublic;\n}\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Enumerable is ERC721Basic {\n  function totalSupply() public view returns (uint256);\n  function tokenOfOwnerByIndex(\n\taddress _owner,\n\tuint256 _index\n  )\n\tpublic\n\tview\n\treturns (uint256 _tokenId);\n\n  function tokenByIndex(uint256 _index) public view returns (uint256);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Metadata is ERC721Basic {\n  function name() external view returns (string _name);\n  function symbol() external view returns (string _symbol);\n  function tokenURI(uint256 _tokenId) public view returns (string);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n}\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\n\n  bytes4 private constant InterfaceId_ERC721 = 0x80ac58cd;\n  /*\n   * 0x80ac58cd ===\n   *   bytes4(keccak256('balanceOf(address)')) ^\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\n   *   bytes4(keccak256('approve(address,uint256)')) ^\n   *   bytes4(keccak256('getApproved(uint256)')) ^\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n   */\n\n  bytes4 private constant InterfaceId_ERC721Exists = 0x4f558e79;\n  /*\n   * 0x4f558e79 ===\n   *   bytes4(keccak256('exists(uint256)'))\n   */\n\n  using SafeMath for uint256;\n  using AddressUtils for address;\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n\n  // Mapping from token ID to owner\n  mapping (uint256 => address) internal tokenOwner;\n\n  // Mapping from token ID to approved address\n  mapping (uint256 => address) internal tokenApprovals;\n\n  // Mapping from owner to number of owned token\n  mapping (address => uint256) internal ownedTokensCount;\n\n  // Mapping from owner to operator approvals\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\n\n  /**\n   * @dev Guarantees msg.sender is owner of the given token\n   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n   */\n  modifier onlyOwnerOf(uint256 _tokenId) {\n\trequire(ownerOf(_tokenId) == msg.sender);\n\t_;\n  }\n\n  /**\n   * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\n   * @param _tokenId uint256 ID of the token to validate\n   */\n  modifier canTransfer(uint256 _tokenId) {\n\trequire(isApprovedOrOwner(msg.sender, _tokenId));\n\t_;\n  }\n\n  constructor()\n\tpublic\n  {\n\t// register the supported interfaces to conform to ERC721 via ERC165\n\t_registerInterface(InterfaceId_ERC721);\n\t_registerInterface(InterfaceId_ERC721Exists);\n  }\n\n  /**\n   * @dev Gets the balance of the specified address\n   * @param _owner address to query the balance of\n   * @return uint256 representing the amount owned by the passed address\n   */\n  function balanceOf(address _owner) public view returns (uint256) {\n\trequire(_owner != address(0));\n\treturn ownedTokensCount[_owner];\n  }\n\n  /**\n   * @dev Gets the owner of the specified token ID\n   * @param _tokenId uint256 ID of the token to query the owner of\n   * @return owner address currently marked as the owner of the given token ID\n   */\n  function ownerOf(uint256 _tokenId) public view returns (address) {\n\taddress owner = tokenOwner[_tokenId];\n\trequire(owner != address(0));\n\treturn owner;\n  }\n\n  /**\n   * @dev Returns whether the specified token exists\n   * @param _tokenId uint256 ID of the token to query the existence of\n   * @return whether the token exists\n   */\n  function exists(uint256 _tokenId) public view returns (bool) {\n\taddress owner = tokenOwner[_tokenId];\n\treturn owner != address(0);\n  }\n\n  /**\n   * @dev Approves another address to transfer the given token ID\n   * The zero address indicates there is no approved address.\n   * There can only be one approved address per token at a given time.\n   * Can only be called by the token owner or an approved operator.\n   * @param _to address to be approved for the given token ID\n   * @param _tokenId uint256 ID of the token to be approved\n   */\n  function approve(address _to, uint256 _tokenId) public {\n\taddress owner = ownerOf(_tokenId);\n\trequire(_to != owner);\n\trequire(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n\ttokenApprovals[_tokenId] = _to;\n\temit Approval(owner, _to, _tokenId);\n  }\n\n  /**\n   * @dev Gets the approved address for a token ID, or zero if no address set\n   * @param _tokenId uint256 ID of the token to query the approval of\n   * @return address currently approved for the given token ID\n   */\n  function getApproved(uint256 _tokenId) public view returns (address) {\n\treturn tokenApprovals[_tokenId];\n  }\n\n  /**\n   * @dev Sets or unsets the approval of a given operator\n   * An operator is allowed to transfer all tokens of the sender on their behalf\n   * @param _to operator address to set the approval\n   * @param _approved representing the status of the approval to be set\n   */\n  function setApprovalForAll(address _to, bool _approved) public {\n\trequire(_to != msg.sender);\n\toperatorApprovals[msg.sender][_to] = _approved;\n\temit ApprovalForAll(msg.sender, _to, _approved);\n  }\n\n  /**\n   * @dev Tells whether an operator is approved by a given owner\n   * @param _owner owner address which you want to query the approval of\n   * @param _operator operator address which you want to query the approval of\n   * @return bool whether the given operator is approved by the given owner\n   */\n  function isApprovedForAll(\n\taddress _owner,\n\taddress _operator\n  )\n\tpublic\n\tview\n\treturns (bool)\n  {\n\treturn operatorApprovals[_owner][_operator];\n  }\n\n  /**\n   * @dev Transfers the ownership of a given token ID to another address\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function transferFrom(\n\taddress _from,\n\taddress _to,\n\tuint256 _tokenId\n  )\n\tpublic\n\tcanTransfer(_tokenId)\n  {\n\trequire(_from != address(0));\n\trequire(_to != address(0));\n\n\tclearApproval(_from, _tokenId);\n\tremoveTokenFrom(_from, _tokenId);\n\taddTokenTo(_to, _tokenId);\n\n\temit Transfer(_from, _to, _tokenId);\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   *\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function safeTransferFrom(\n\taddress _from,\n\taddress _to,\n\tuint256 _tokenId\n  )\n\tpublic\n\tcanTransfer(_tokenId)\n  {\n\t// solium-disable-next-line arg-overflow\n\tsafeTransferFrom(_from, _to, _tokenId, \"\");\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes data to send along with a safe transfer check\n   */\n  function safeTransferFrom(\n\taddress _from,\n\taddress _to,\n\tuint256 _tokenId,\n\tbytes _data\n  )\n\tpublic\n\tcanTransfer(_tokenId)\n  {\n\ttransferFrom(_from, _to, _tokenId);\n\t// solium-disable-next-line arg-overflow\n\trequire(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n  }\n\n  /**\n   * @dev Returns whether the given spender can transfer a given token ID\n   * @param _spender address of the spender to query\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @return bool whether the msg.sender is approved for the given token ID,\n   *  is an operator of the owner, or is the owner of the token\n   */\n  function isApprovedOrOwner(\n\taddress _spender,\n\tuint256 _tokenId\n  )\n\tinternal\n\tview\n\treturns (bool)\n  {\n\taddress owner = ownerOf(_tokenId);\n\t// Disable solium check because of\n\t// https://github.com/duaraghav8/Solium/issues/175\n\t// solium-disable-next-line operator-whitespace\n\treturn (\n\t  _spender == owner ||\n\t  getApproved(_tokenId) == _spender ||\n\t  isApprovedForAll(owner, _spender)\n\t);\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param _to The address that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n\trequire(_to != address(0));\n\taddTokenTo(_to, _tokenId);\n\temit Transfer(address(0), _to, _tokenId);\n  }\n\n  /**\n   * @dev Internal function to clear current approval of a given token ID\n   * Reverts if the given address is not indeed the owner of the token\n   * @param _owner owner of the token\n   * @param _tokenId uint256 ID of the token to be transferred\n   */\n  function clearApproval(address _owner, uint256 _tokenId) internal {\n\trequire(ownerOf(_tokenId) == _owner);\n\tif (tokenApprovals[_tokenId] != address(0)) {\n\t  tokenApprovals[_tokenId] = address(0);\n\t}\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n\trequire(tokenOwner[_tokenId] == address(0));\n\ttokenOwner[_tokenId] = _to;\n\townedTokensCount[_to] = ownedTokensCount[_to].add(1);\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n\trequire(ownerOf(_tokenId) == _from);\n\townedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n\ttokenOwner[_tokenId] = address(0);\n  }\n\n  /**\n   * @dev Internal function to invoke `onERC721Received` on a target address\n   * The call is not executed if the target address is not a contract\n   * @param _from address representing the previous owner of the given token ID\n   * @param _to target address that will receive the tokens\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes optional data to send along with the call\n   * @return whether the call correctly returned the expected magic value\n   */\n  function checkAndCallSafeTransfer(\n\taddress _from,\n\taddress _to,\n\tuint256 _tokenId,\n\tbytes _data\n  )\n\tinternal\n\treturns (bool)\n  {\n\tif (!_to.isContract()) {\n\t  return true;\n\t}\n\tbytes4 retval = ERC721Receiver(_to).onERC721Received(\n\t  msg.sender, _from, _tokenId, _data);\n\treturn (retval == ERC721_RECEIVED);\n  }\n}\n\n/**\n * @title Full ERC721 Token\n * This implementation includes all the required and some optional functionality of the ERC721 standard\n * Moreover, it includes approve all functionality using operator terminology\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract HashKingsPlanet is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721, Ownable, Fallback {\n\n  /*** EVENTS ***/\n  /// The event emitted (useable by web3) when a token is purchased\n  event BoughtToken(address indexed buyer, uint256 tokenId);\n\n  /*** CONSTANTS ***/\n  string public constant company = \"Qwoyn, LLC \";\n  string public constant contact = \"https://qwoyn.io\";\n  string public constant author  = \"Daniel Pittman\";\n\n  \n  uint8 constant TITLE_MAX_LENGTH = 64;\n  uint256 constant DESCRIPTION_MAX_LENGTH = 100000;\n\n  /*** DATA TYPES ***/\n\n  /// Price set by contract owner for each token in Wei\n  /// @dev If you'd like a different price for each token type, you will\n  ///   need to use a mapping like: `mapping(uint256 => uint256) tokenTypePrices;`\n  uint256 currentPrice = 0;\n  \n  mapping(uint256 => string)  tokenTitles;\t  \n  mapping(uint256 => string)  tokenDescriptions;\n  \n\n  constructor(string _name, string _symbol) public {\n\tname_ = _name;\n\tsymbol_ = _symbol;\n\n\t// register the supported interfaces to conform to ERC721 via ERC165\n\t_registerInterface(InterfaceId_ERC721Enumerable);\n\t_registerInterface(InterfaceId_ERC721Metadata);\n  }\n\n  /// Requires the amount of Ether be at least or more of the currentPrice\n  /// @dev Creates an instance of an token and mints it to the purchaser\n  /// @param _type The token type as an integer, dappCap and slammers noted here.\n  /// @param _title The short title of the token\n  /// @param _description Description of the token\n  function buyToken (\n\tstring  _title,\n\tstring  _description\n  ) public onlyOwner {\n\tbytes memory _titleBytes = bytes(_title);\n\trequire(_titleBytes.length <= TITLE_MAX_LENGTH, \"Desription is too long\");\n\t\n\tbytes memory _descriptionBytes = bytes(_description);\n\trequire(_descriptionBytes.length <= DESCRIPTION_MAX_LENGTH, \"Description is too long\");\n\trequire(msg.value >= currentPrice, \"Amount of Ether sent too small\");\n\n\tuint256 index = allTokens.length + 1;\n\n\t_mint(msg.sender, index);\n\n\ttokenTitles[index]       = _title;\n\ttokenDescriptions[index] = _description;\n\n\temit BoughtToken(msg.sender, index);\n  }\n\n  /**\n   * @dev Returns all of the tokens that the user owns\n   * @return An array of token indices\n   */\n  function myTokens()\n\texternal\n\tview\n\treturns (\n\t  uint256[]\n\t)\n  {\n\treturn ownedTokens[msg.sender];\n  }\n\n  /// @notice Returns all the relevant information about a specific token\n  /// @param _tokenId The ID of the token of interest\n  function viewTokenMeta(uint256 _tokenId)\n\texternal\n\tview\n\treturns (\n\t  string  tokenTitle_,\n\t  string  tokenDescription_\n  ) {\n\t  tokenTitle_       = tokenTitles[_tokenId];\n\t  tokenDescription_ = tokenDescriptions[_tokenId];\n  }\n\n  /// @notice Allows the owner of this contract to set the currentPrice for each token\n  function setCurrentPrice(uint256 newPrice)\n\tpublic\n\tonlyOwner\n  {\n\t  currentPrice = newPrice;\n  }\n\n  /// @notice Returns the currentPrice for each token\n  function getCurrentPrice()\n\texternal\n\tview\n\treturns (\n\tuint256 price\n  ) {\n\t  price = currentPrice;\n  }\n  \n  bytes4 private constant InterfaceId_ERC721Enumerable = 0x780e9d63;\n  /**\n   * 0x780e9d63 ===\n   *   bytes4(keccak256('totalSupply()')) ^\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\n   */\n\n  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n  /**\n   * 0x5b5e139f ===\n   *   bytes4(keccak256('name()')) ^\n   *   bytes4(keccak256('symbol()')) ^\n   *   bytes4(keccak256('tokenURI(uint256)'))\n   */\n\n  // Token name\n  string internal name_;\n\n  // Token symbol\n  string internal symbol_;\n\n  // Mapping from owner to list of owned token IDs\n  mapping(address => uint256[]) internal ownedTokens;\n\n  // Mapping from token ID to index of the owner tokens list\n  mapping(uint256 => uint256) internal ownedTokensIndex;\n\n  // Array with all token ids, used for enumeration\n  uint256[] internal allTokens;\n\n  // Mapping from token id to position in the allTokens array\n  mapping(uint256 => uint256) internal allTokensIndex;\n\n  // Optional mapping for token URIs\n  mapping(uint256 => string) internal tokenURIs;\n\n  /**\n   * @dev Gets the token name\n   * @return string representing the token name\n   */\n  function name() external view returns (string) {\n\treturn name_;\n  }\n\n  /**\n   * @dev Gets the token symbol\n   * @return string representing the token symbol\n   */\n  function symbol() external view returns (string) {\n\treturn symbol_;\n  }\n\n  /**\n   * @dev Returns an URI for a given token ID\n   * Throws if the token ID does not exist. May return an empty string.\n   * @param _tokenId uint256 ID of the token to query\n   */\n  function tokenURI(uint256 _tokenId) public view returns (string) {\n\trequire(exists(_tokenId));\n\treturn tokenURIs[_tokenId];\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n   * @param _owner address owning the tokens list to be accessed\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n   */\n  function tokenOfOwnerByIndex(\n\taddress _owner,\n\tuint256 _index\n  )\n\tpublic\n\tview\n\treturns (uint256)\n  {\n\trequire(_index < balanceOf(_owner));\n\treturn ownedTokens[_owner][_index];\n  }\n\n  /**\n   * @dev Gets the total amount of tokens stored by the contract\n   * @return uint256 representing the total amount of tokens\n   */\n  function totalSupply() public view returns (uint256) {\n\treturn allTokens.length;\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of all the tokens in this contract\n   * Reverts if the index is greater or equal to the total number of tokens\n   * @param _index uint256 representing the index to be accessed of the tokens list\n   * @return uint256 token ID at the given index of the tokens list\n   */\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\n\trequire(_index < totalSupply());\n\treturn allTokens[_index];\n  }\n\n  /**\n   * @dev Internal function to set the token URI for a given token\n   * Reverts if the token ID does not exist\n   * @param _tokenId uint256 ID of the token to set its URI\n   * @param _uri string URI to assign\n   */\n  function _setTokenURI(uint256 _tokenId, string _uri) public onlyOwner {\n\trequire(exists(_tokenId));\n\ttokenURIs[_tokenId] = _uri;\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n\tsuper.addTokenTo(_to, _tokenId);\n\tuint256 length = ownedTokens[_to].length;\n\townedTokens[_to].push(_tokenId);\n\townedTokensIndex[_tokenId] = length;\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n\tsuper.removeTokenFrom(_from, _tokenId);\n\n\tuint256 tokenIndex = ownedTokensIndex[_tokenId];\n\tuint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n\tuint256 lastToken = ownedTokens[_from][lastTokenIndex];\n\n\townedTokens[_from][tokenIndex] = lastToken;\n\townedTokens[_from][lastTokenIndex] = 0;\n\t// Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n\t// be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n\t// the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n\townedTokens[_from].length--;\n\townedTokensIndex[_tokenId] = 0;\n\townedTokensIndex[lastToken] = tokenIndex;\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param _to address the beneficiary that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n\tsuper._mint(_to, _tokenId);\n\n\tallTokensIndex[_tokenId] = allTokens.length;\n\tallTokens.push(_tokenId);\n  }\n}",
  "bytecode": "608060405260006006553480156200001657600080fd5b5060405162001cfa38038062001cfa833981016040528051602082015190820191016200006c7f01ffc9a70000000000000000000000000000000000000000000000000000000064010000000062000182810204565b620000a07f80ac58cd0000000000000000000000000000000000000000000000000000000064010000000062000182810204565b620000d47f4f558e790000000000000000000000000000000000000000000000000000000064010000000062000182810204565b60058054600160a060020a031916331790558151620000fb906009906020850190620001ef565b5080516200011190600a906020840190620001ef565b50620001467f780e9d630000000000000000000000000000000000000000000000000000000064010000000062000182810204565b6200017a7f5b5e139f0000000000000000000000000000000000000000000000000000000064010000000062000182810204565b505062000294565b7fffffffff000000000000000000000000000000000000000000000000000000008082161415620001b257600080fd5b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152602081905260409020805460ff19166001179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200023257805160ff191683800117855562000262565b8280016001018555821562000262579182015b828111156200026257825182559160200191906001019062000245565b506200027092915062000274565b5090565b6200029191905b808211156200027057600081556001016200027b565b90565b611a5680620002a46000396000f30060806040526004361061018a5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301538868811461018f57806301ffc9a7146101ef57806306fdde0314610225578063081812fc146102af578063095ea7b3146102e357806318160ddd1461030757806318b200711461032e57806319fa8f501461034657806323b872dd146103785780632f745c59146103a257806333a8c45a146103c65780633ccfd60b146103db57806342842e0e146103f05780634f558e791461041a5780634f6ccce7146104325780636352211e1461044a5780636904c94d1461046257806370a0823114610477578063715018a6146104985780637dd7d32d146104ad5780638da5cb5b146105a3578063949e8acd146105b857806395d89b411461061d578063a22cb46514610632578063a6c3e6b914610658578063ad8b9edc1461066d578063b88d4fde14610704578063c87b56dd14610773578063e985e9c51461078b578063eb91d37e146107b2578063f2fde38b146107c7575b600080fd5b34801561019b57600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526101ed9583359536956044949193909101919081908401838280828437509497506107e89650505050505050565b005b3480156101fb57600080fd5b50610211600160e060020a031960043516610837565b604080519115158252519081900360200190f35b34801561023157600080fd5b5061023a610856565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561027457818101518382015260200161025c565b50505050905090810190601f1680156102a15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102bb57600080fd5b506102c76004356108ed565b60408051600160a060020a039092168252519081900360200190f35b3480156102ef57600080fd5b506101ed600160a060020a0360043516602435610908565b34801561031357600080fd5b5061031c6109be565b60408051918252519081900360200190f35b34801561033a57600080fd5b506101ed6004356109c4565b34801561035257600080fd5b5061035b6109e0565b60408051600160e060020a03199092168252519081900360200190f35b34801561038457600080fd5b506101ed600160a060020a0360043581169060243516604435610a04565b3480156103ae57600080fd5b5061031c600160a060020a0360043516602435610aa9565b3480156103d257600080fd5b5061023a610af6565b3480156103e757600080fd5b506101ed610b2d565b3480156103fc57600080fd5b506101ed600160a060020a0360043581169060243516604435610b81565b34801561042657600080fd5b50610211600435610bb9565b34801561043e57600080fd5b5061031c600435610bd6565b34801561045657600080fd5b506102c7600435610c0b565b34801561046e57600080fd5b5061023a610c35565b34801561048357600080fd5b5061031c600160a060020a0360043516610c6c565b3480156104a457600080fd5b506101ed610c9f565b3480156104b957600080fd5b506104c5600435610d0d565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b838110156105065781810151838201526020016104ee565b50505050905090810190601f1680156105335780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561056657818101518382015260200161054e565b50505050905090810190601f1680156105935780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b3480156105af57600080fd5b506102c7610e4c565b3480156105c457600080fd5b506105cd610e5b565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156106095781810151838201526020016105f1565b505050509050019250505060405180910390f35b34801561062957600080fd5b5061023a610ebb565b34801561063e57600080fd5b506101ed600160a060020a03600435166024351515610f1c565b34801561066457600080fd5b5061023a610fa0565b34801561067957600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101ed94369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750610fd79650505050505050565b34801561071057600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526101ed94600160a060020a0381358116956024803590921695604435953695608494019181908401838280828437509497506111df9650505050505050565b34801561077f57600080fd5b5061023a60043561121e565b34801561079757600080fd5b50610211600160a060020a03600435811690602435166112d3565b3480156107be57600080fd5b5061031c611301565b3480156107d357600080fd5b506101ed600160a060020a0360043516611307565b600554600160a060020a031633146107ff57600080fd5b61080882610bb9565b151561081357600080fd5b6000828152600f60209081526040909120825161083292840190611972565b505050565b600160e060020a03191660009081526020819052604090205460ff1690565b60098054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108e25780601f106108b7576101008083540402835291602001916108e2565b820191906000526020600020905b8154815290600101906020018083116108c557829003601f168201915b505050505090505b90565b600090815260026020526040902054600160a060020a031690565b600061091382610c0b565b9050600160a060020a03838116908216141561092e57600080fd5b33600160a060020a038216148061094a575061094a81336112d3565b151561095557600080fd5b600082815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600d5490565b600554600160a060020a031633146109db57600080fd5b600655565b7f01ffc9a70000000000000000000000000000000000000000000000000000000081565b80610a0f3382611327565b1515610a1a57600080fd5b600160a060020a0384161515610a2f57600080fd5b600160a060020a0383161515610a4457600080fd5b610a4e8483611386565b610a5884836113f7565b610a628383611530565b8183600160a060020a031685600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b6000610ab483610c6c565b8210610abf57600080fd5b600160a060020a0383166000908152600b60205260409020805483908110610ae357fe5b9060005260206000200154905092915050565b60408051808201909152601081527f68747470733a2f2f71776f796e2e696f00000000000000000000000000000000602082015281565b600554600160a060020a03163314610b4457600080fd5b600554604051600160a060020a0390911690303180156108fc02916000818181858888f19350505050158015610b7e573d6000803e3d6000fd5b50565b80610b8c3382611327565b1515610b9757600080fd5b610bb384848460206040519081016040528060008152506111df565b50505050565b600090815260016020526040902054600160a060020a0316151590565b6000610be06109be565b8210610beb57600080fd5b600d805483908110610bf957fe5b90600052602060002001549050919050565b600081815260016020526040812054600160a060020a0316801515610c2f57600080fd5b92915050565b60408051808201909152600b81527f51776f796e2c204c4c4320000000000000000000000000000000000000000000602082015281565b6000600160a060020a0382161515610c8357600080fd5b50600160a060020a031660009081526003602052604090205490565b600554600160a060020a03163314610cb657600080fd5b600554604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26005805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000818152600760209081526040918290208054835160026001831615610100026000190190921691909104601f81018490048402820184019094528381526060938493919291830182828015610da55780601f10610d7a57610100808354040283529160200191610da5565b820191906000526020600020905b815481529060010190602001808311610d8857829003601f168201915b5050506000868152600860209081526040918290208054835160026001831615610100026000190190921691909104601f81018490048402820184019094528381529597509350909150830182828015610e405780601f10610e1557610100808354040283529160200191610e40565b820191906000526020600020905b815481529060010190602001808311610e2357829003601f168201915b50505050509050915091565b600554600160a060020a031681565b336000908152600b60209081526040918290208054835181840281018401909452808452606093928301828280156108e257602002820191906000526020600020905b815481526020019060010190808311610e9e575050505050905090565b600a8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108e25780601f106108b7576101008083540402835291602001916108e2565b600160a060020a038216331415610f3257600080fd5b336000818152600460209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b60408051808201909152600e81527f44616e69656c20506974746d616e000000000000000000000000000000000000602082015281565b6005546060908190600090600160a060020a03163314610ff657600080fd5b84518593506040101561106a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f44657372697074696f6e20697320746f6f206c6f6e6700000000000000000000604482015290519081900360640190fd5b8351849250620186a010156110e057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4465736372697074696f6e20697320746f6f206c6f6e67000000000000000000604482015290519081900360640190fd5b60065434101561115157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f416d6f756e74206f662045746865722073656e7420746f6f20736d616c6c0000604482015290519081900360640190fd5b50600d546001016111623382611579565b6000818152600760209081526040909120865161118192880190611972565b50600081815260086020908152604090912085516111a192870190611972565b5060408051828152905133917f75424253909c2f4460f8a59099700e980f5b484608c4fdd79f600f5162ac88a5919081900360200190a25050505050565b816111ea3382611327565b15156111f557600080fd5b611200858585610a04565b61120c858585856115c8565b151561121757600080fd5b5050505050565b606061122982610bb9565b151561123457600080fd5b6000828152600f602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156112c75780601f1061129c576101008083540402835291602001916112c7565b820191906000526020600020905b8154815290600101906020018083116112aa57829003601f168201915b50505050509050919050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205460ff1690565b60065490565b600554600160a060020a0316331461131e57600080fd5b610b7e81611735565b60008061133383610c0b565b905080600160a060020a031684600160a060020a0316148061136e575083600160a060020a0316611363846108ed565b600160a060020a0316145b8061137e575061137e81856112d3565b949350505050565b81600160a060020a031661139982610c0b565b600160a060020a0316146113ac57600080fd5b600081815260026020526040902054600160a060020a0316156113f3576000818152600260205260409020805473ffffffffffffffffffffffffffffffffffffffff191690555b5050565b600080600061140685856117ca565b6000848152600c6020908152604080832054600160a060020a0389168452600b9092529091205490935061144190600163ffffffff61186016565b600160a060020a0386166000908152600b602052604090208054919350908390811061146957fe5b9060005260206000200154905080600b600087600160a060020a0316600160a060020a03168152602001908152602001600020848154811015156114a957fe5b6000918252602080832090910192909255600160a060020a0387168152600b909152604081208054849081106114db57fe5b6000918252602080832090910192909255600160a060020a0387168152600b909152604090208054906115129060001983016119f0565b506000938452600c6020526040808520859055908452909220555050565b600061153c8383611872565b50600160a060020a039091166000908152600b6020908152604080832080546001810182559084528284208101859055938352600c909152902055565b6115838282611902565b600d80546000838152600e60205260408120829055600182018355919091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5015550565b6000806115dd85600160a060020a031661195d565b15156115ec576001915061172c565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03898116602485015260448401889052608060648501908152875160848601528751918a169463150b7a0294938c938b938b93909160a490910190602085019080838360005b8381101561167f578181015183820152602001611667565b50505050905090810190601f1680156116ac5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156116ce57600080fd5b505af11580156116e2573d6000803e3d6000fd5b505050506040513d60208110156116f857600080fd5b5051600160e060020a031981167f150b7a020000000000000000000000000000000000000000000000000000000014925090505b50949350505050565b600554600160a060020a0316331461174c57600080fd5b600160a060020a038116151561176157600080fd5b600554604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b81600160a060020a03166117dd82610c0b565b600160a060020a0316146117f057600080fd5b600160a060020a03821660009081526003602052604090205461181a90600163ffffffff61186016565b600160a060020a03909216600090815260036020908152604080832094909455918152600190915220805473ffffffffffffffffffffffffffffffffffffffff19169055565b60008282111561186c57fe5b50900390565b600081815260016020526040902054600160a060020a03161561189457600080fd5b6000818152600160208181526040808420805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03881690811790915584526003909152909120546118e291611965565b600160a060020a0390921660009081526003602052604090209190915550565b600160a060020a038216151561191757600080fd5b6119218282611530565b6040518190600160a060020a038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000903b1190565b81810182811015610c2f57fe5b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106119b357805160ff19168380011785556119e0565b828001600101855582156119e0579182015b828111156119e05782518255916020019190600101906119c5565b506119ec929150611a10565b5090565b815481835581811115610832576000838152602090206108329181019083015b6108ea91905b808211156119ec5760008155600101611a165600a165627a7a72305820ccd7e5dada4ca1c160d10bb150febeaad0bd231ec6801bf716d4ccead2dc926e002900000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000f486173684b696e6773506c616e657400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003484b500000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000f486173684b696e6773506c616e657400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003484b500000000000000000000000000000000000000000000000000000000000"
}