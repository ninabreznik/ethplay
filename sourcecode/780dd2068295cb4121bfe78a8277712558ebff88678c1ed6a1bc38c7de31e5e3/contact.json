{
  "address": "0xc96f23a166c2cb107230a85371abf28c144aa793",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RubiixToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-03\n*/\n\npragma solidity ^0.4.24;\n\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: zeppelin-solidity/contracts/lifecycle/Destructible.sol\n\n/**\n * @title Destructible\n * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\n */\ncontract Destructible is Ownable {\n\n  constructor() public payable { }\n\n  /**\n   * @dev Transfers the current balance to the owner and terminates the contract.\n   */\n  function destroy() onlyOwner public {\n    selfdestruct(owner);\n  }\n\n  function destroyAndSend(address _recipient) onlyOwner public {\n    selfdestruct(_recipient);\n  }\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: contracts/token/ERC223/ERC223Basic.sol\n\n/**\n * @title ERC223Basic extends ERC20 interface and supports ERC223\n */\ncontract ERC223Basic is ERC20Basic {\n  function transfer(address _to, uint256 _value, bytes _data) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\n}\n\n// File: contracts/token/ERC223/ERC223ReceivingContract.sol\n\n/**\n * @title ERC223ReceivingContract contract that will work with ERC223 tokens.\n */\ncontract ERC223ReceivingContract {\n  /**\n  * @dev Standard ERC223 function that will handle incoming token transfers.\n  *\n  * @param _from  Token sender address.\n  * @param _value Amount of tokens.\n  * @param _data  Transaction metadata.\n  */\n  function tokenFallback(address _from, uint256 _value, bytes _data) public returns (bool);\n}\n\n// File: contracts/Adminable.sol\n\n/**\n * @title Adminable\n * @dev The Adminable contract has the simple protection logic, and provides admin based access control\n */\ncontract Adminable is Ownable {\n\taddress public admin;\n\tevent AdminDesignated(address indexed previousAdmin, address indexed newAdmin);\n\n  /**\n    * @dev Throws if called the non admin.\n    */\n\tmodifier onlyAdmin() {\n\t\trequire(msg.sender == admin);\n\t\t_;\n\t}\n\n  /**\n    * @dev Throws if called the non owner and non admin.\n    */\n  modifier onlyOwnerOrAdmin() {\n\t\trequire(msg.sender == owner || msg.sender == admin);\n\t\t_;\n\t}\n\n  /**\n    * @dev Designate new admin for the address\n    * @param _address address The address you want to be a new admin\n    */\n\tfunction designateAdmin(address _address) public onlyOwner {\n\t\trequire(_address != address(0) && _address != owner);\n\t\temit AdminDesignated(admin, _address);\n\t\tadmin = _address;\n\t}\n}\n\n// File: contracts/Lockable.sol\n\n/**\n * @title Lockable\n * @dev The Lockable contract has an locks address map, and provides lockable control\n * functions, this simplifies the implementation of \"lock transfers\".\n *\n * The contents of this Smart Contract and all associated code is owned and operated by Rubiix, a Gibraltar company in formation.\n */\ncontract Lockable is Adminable, ERC20Basic {\n  using SafeMath for uint256;\n  // EPOCH TIMESTAMP OF \"Tue Jul 02 2019 00:00:00 GMT+0000\"\n  // @see https://www.unixtimestamp.com/index.php\n  uint public globalUnlockTime = 1562025600;\n  uint public constant decimals = 18;\n\n  event UnLock(address indexed unlocked);\n  event Lock(address indexed locked, uint until, uint256 value, uint count);\n  event UpdateGlobalUnlockTime(uint256 epoch);\n\n  struct LockMeta {\n    uint256 value;\n    uint until;\n  }\n\n  mapping(address => LockMeta[]) internal locksMeta;\n  mapping(address => bool) locks;\n\n  /**\n    * @dev Lock tokens for the address\n    * @param _address address The address you want to lock tokens\n    * @param _days uint The days count you want to lock untill from now\n    * @param _value uint256 the amount of tokens to be locked\n    */\n  function lock(address _address, uint _days, uint256 _value) onlyOwnerOrAdmin public {\n    _value = _value*(10**decimals);\n    require(_value > 0);\n    require(_days > 0);\n    require(_address != owner);\n    require(_address != admin);\n\n    uint untilTime = block.timestamp + _days * 1 days;\n    locks[_address] = true;\n    // check if we have locks\n    locksMeta[_address].push(LockMeta(_value, untilTime));\n    // fire lock event\n    emit Lock(_address, untilTime, _value, locksMeta[_address].length);\n  }\n\n  /**\n    * @dev Unlock tokens for the address\n    * @param _address address The address you want to unlock tokens\n    */\n  function unlock(address _address) onlyOwnerOrAdmin public {\n    locks[_address] = false;\n    delete locksMeta[_address];\n    emit UnLock(_address);\n  }\n\n  /**\n    * @dev Gets the locked balance of the specified address and time\n    * @param _owner The address to query the locked balance of.\n    * @param _time The timestamp seconds to query the locked balance of.\n    * @return An uint256 representing the locked amount owned by the passed address.\n    */\n  function lockedBalanceOf(address _owner, uint _time) public view returns (uint256) {\n    LockMeta[] memory locked = locksMeta[_owner];\n    uint length = locked.length;\n    // if no locks or even not created (takes bdefault) return 0\n    if (length == 0) {\n      return 0;\n    }\n    // sum all available locks\n    uint256 _result = 0;\n    for (uint i = 0; i < length; i++) {\n      if (_time <= locked[i].until) {\n        _result = _result.add(locked[i].value);\n      }\n    }\n    return _result;\n  }\n\n  /**\n    * @dev Gets the locked balance of the specified address of the current time\n    * @param _owner The address to query the locked balance of.\n    * @return An uint256 representing the locked amount owned by the passed address.\n    */\n  function lockedNowBalanceOf(address _owner) public view returns (uint256) {\n    return this.lockedBalanceOf(_owner, block.timestamp);\n  }\n\n  /**\n    * @dev Gets the unlocked balance of the specified address and time\n    * @param _owner The address to query the unlocked balance of.\n    * @param _time The timestamp seconds to query the unlocked balance of.\n    * @return An uint256 representing the unlocked amount owned by the passed address.\n    */\n  function unlockedBalanceOf(address _owner, uint _time) public view returns (uint256) {\n    return this.balanceOf(_owner).sub(lockedBalanceOf(_owner, _time));\n  }\n\n  /**\n    * @dev Gets the unlocked balance of the specified address of the current time\n    * @param _owner The address to query the unlocked balance of.\n    * @return An uint256 representing the unlocked amount owned by the passed address.\n    */\n  function unlockedNowBalanceOf(address _owner) public view returns (uint256) {\n    return this.unlockedBalanceOf(_owner, block.timestamp);\n  }\n\n  function updateGlobalUnlockTime(uint256 _epoch) public onlyOwnerOrAdmin returns (bool) {\n    require(_epoch >= 0);\n    globalUnlockTime = _epoch;\n    emit UpdateGlobalUnlockTime(_epoch);\n    // Gives owner the ability to update lockup period for all wallets.\n    // Owner can pass an epoch timecode into the function to:\n    // 1. Extend lockup period,\n    // 2. Unlock all wallets by passing '0' into the function\n  }\n\n  /**\n    * @dev Throws if the value less than the current unlocked balance of.\n    */\n  modifier onlyUnlocked(uint256 _value) {\n    if(block.timestamp > globalUnlockTime) {\n      _;\n    } else {\n      if (locks[msg.sender] == true) {\n        require(this.unlockedNowBalanceOf(msg.sender) >= _value);\n      }\n      _;\n    }\n  }\n\n  /**\n    * @dev Throws if the value less than the current unlocked balance of the given address.\n    */\n  modifier onlyUnlockedOf(address _address, uint256 _value) {\n    if(block.timestamp > globalUnlockTime) {\n      _;\n    } else {\n      if (locks[_address] == true) {\n        require(this.unlockedNowBalanceOf(_address) >= _value);\n      } else {\n\n      }\n      _;\n    }\n  }\n}\n\n// File: contracts/StandardLockableToken.sol\n\n/**\n * @title StandardLockableToken\n *\n * The contents of this Smart Contract and all associated code is owned and operated by Rubiix, a Gibraltar company in formation.\n */\ncontract StandardLockableToken is Lockable, /**/ERC223Basic, /*ERC20*/StandardToken {\n\n  /**\n    * @dev Check address is to be a contract based on extcodesize (must be nonzero to be a contract)\n    * @param _address The address to check.\n    */\n  function isContract(address _address) private constant returns (bool) {\n    uint256 codeLength;\n    assembly {\n      codeLength := extcodesize(_address)\n    }\n    return codeLength > 0;\n  }\n\n  /**\n    * @dev Transfer token for a specified address\n    * ERC20 support\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n  function transfer(address _to, uint256 _value) onlyUnlocked(_value) public returns (bool) {\n    bytes memory empty;\n    return _transfer(_to, _value, empty);\n  }\n\n  /**\n    * @dev Transfer token for a specified address\n    * ERC223 support\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    * @param _data The additional data.\n    */\n  function transfer(address _to, uint256 _value, bytes _data) onlyUnlocked(_value) public returns (bool) {\n    return _transfer(_to, _value, _data);\n  }\n\n  /**\n    * @dev Transfer token for a specified address\n    * ERC223 support\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    * @param _data The additional data.\n    */\n  function _transfer(address _to, uint256 _value, bytes _data) internal returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n    require(_value > 0);\n    // catch overflow loosing tokens\n    // require(balances[_to] + _value > balances[_to]);\n\n    // safety update balances\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n\n    // determine if the contract given\n    if (isContract(_to)) {\n      ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n      receiver.tokenFallback(msg.sender, _value, _data);\n    }\n\n    // emit ERC20 transfer event\n    emit Transfer(msg.sender, _to, _value);\n    // emit ERC223 transfer event\n    emit Transfer(msg.sender, _to, _value, _data);\n    return true;\n  }\n\n  /**\n    * @dev Transfer tokens from one address to another\n    * @param _from address The address which you want to send tokens from\n    * @param _to address The address which you want to transfer to\n    * @param _value uint256 the amount of tokens to be transferred\n    */\n  function transferFrom(address _from, address _to, uint256 _value) onlyUnlockedOf(_from, _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_value > 0);\n\n    // make balances manipulations first\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n    bytes memory empty;\n    if (isContract(_to)) {\n      ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n      receiver.tokenFallback(msg.sender, _value, empty);\n    }\n\n    // emit ERC20 transfer event\n    emit Transfer(_from, _to, _value);\n    // emit ERC223 transfer event\n    emit Transfer(_from, _to, _value, empty);\n    return true;\n  }\n}\n\n// File: contracts/StandardBurnableLockableToken.sol\n\n/**\n * @title StandardBurnableLockableToken\n *\n * The contents of this Smart Contract and all associated code is owned and operated by Rubiix, a Gibraltar company in formation.\n */\ncontract StandardBurnableLockableToken is StandardLockableToken, BurnableToken {\n  /**\n    * @dev Burns a specific amount of tokens from the target address and decrements allowance\n    * @param _from address The address which you want to send tokens from\n    * @param _value uint256 The amount of token to be burned\n    */\n  function burnFrom(address _from, uint256 _value) onlyOwner onlyUnlockedOf(_from, _value) public {\n    require(_value <= allowed[_from][msg.sender]);\n    require(_value > 0);\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n    _burn(_from, _value);\n\n    bytes memory empty;\n    // emit ERC223 transfer event also\n    emit Transfer(msg.sender, address(0), _value, empty);\n  }\n\n  /**\n    * @dev Burns a specific amount of tokens.\n    * @param _value The amount of token to be burned.\n    */\n  function burn(uint256 _value) onlyOwner onlyUnlocked(_value) public {\n    require(_value > 0);\n    _burn(msg.sender, _value);\n\n    bytes memory empty;\n      // emit ERC223 transfer event also\n    emit Transfer(msg.sender, address(0), _value, empty);\n  }\n}\n\n// File: contracts/RubiixToken.sol\n\n/**\n * @title RubiixToken\n * @dev The RubiixToken contract is an Standard ERC20 and ERC223 Lockable smart contract\n * uses as a coin\n *\n * The contents of this Smart Contract and all associated code is owned and operated by Rubiix, a Gibraltar company in formation.\n */\ncontract RubiixToken is StandardBurnableLockableToken, Destructible {\n  string public constant name = \"Rubiix Token\";\n\tuint public constant decimals = 18;\n\tstring public constant symbol = \"RBX\";\n\n  /**\n    * @dev Inits an owner, totalSupply and assigns tokens for the reserved addresses.\n    * Owner = 55%\n    * Team = 20%\n    * Company = 23%\n    * Wallet = 2%\n    * Fires ERC20 & ERC223 transfer events\n    */\n  constructor() public {\n    // set the owner\n    owner = msg.sender;\n    admin = 0xfb36E83F6bE7C0E9ba9FF403389001f2312121aF;\n\n    uint256 INITIAL_SUPPLY = 223684211 * (10**decimals);\n\n    // init totalSupply\n    totalSupply_ = INITIAL_SUPPLY;\n\n    // TODO: use info instead of empty. for example: team reserved\n    bytes memory empty;\n\n    // Owner = 55%\n    uint256 ownerSupply =  12302631605 * (10**(decimals-2));\n    balances[msg.sender] = ownerSupply;\n    emit Transfer(address(0), msg.sender, ownerSupply);\n    emit Transfer(address(0), msg.sender, ownerSupply, empty);\n\n    // Team = 20%\n    address teamAddress = 0x7B1Af4A3b427C8eED8aA36a9f997b056853d0e36;\n    uint256 teamSupply = 447368422 * (10**(decimals - 1));\n    balances[teamAddress] = teamSupply;\n    emit Transfer(address(0), teamAddress, teamSupply);\n    emit Transfer(address(0), teamAddress, teamSupply, empty);\n\n    // Company = 23%\n    address companyAddress = 0x3AFb62d009fEe4DD66A405f191B25e77f1d64126;\n    uint256 companySupply = 5144736853 * (10**(decimals-2));\n    balances[companyAddress] = companySupply;\n    emit Transfer(address(0), companyAddress, companySupply);\n    emit Transfer(address(0), companyAddress, companySupply, empty);\n\n    // Wallet = 2%\n    address walletAddress = 0x4E44743330b950a8c624C457178AaC1355c4f6b2;\n    uint256 walletSupply = 447368422 * (10**(decimals-2));\n    balances[walletAddress] = walletSupply;\n    emit Transfer(address(0), walletAddress, walletSupply);\n    emit Transfer(address(0), walletAddress, walletSupply, empty);\n  }\n}",
  "bytecode": "6080604052635d1a9e806002553480156200001957600080fd5b5060008054600160a060020a0319908116339081178216811783556001805490921673fb36e83f6be7c0e9ba9ff403389001f2312121af179091556ab906f9603765c109ec000060068190558183526005602090815260408085206a65c3d5f4eb44c3c575000090819055815181815291519395606095919490938493849384938493849384926000805160206200278c833981519152929181900390910190a333600160a060020a03166000600160a060020a03166000805160206200276c833981519152898b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015620001265781810151838201526020016200010c565b50505050905090810190601f168015620001545780820380516001836020036101000a031916815260200191505b50935050505060405180910390a3737b1af4a3b427c8eed8aa36a9f997b056853d0e366000818152600560209081526a250165133e478d01fc00007f904316c375c444a86a1e235606db23fe6d48253b95438421543b45c7a5d2b752819055604080518281529051949a5090985089936000805160206200278c833981519152929181900390910190a385600160a060020a03166000600160a060020a03166000805160206200276c833981519152878b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156200024a57818101518382015260200162000230565b50505050905090810190601f168015620002785780820380516001836020036101000a031916815260200191505b50935050505060405180910390a3733afb62d009fee4dd66a405f191b25e77f1d641266000818152600560209081526a2a8e676fbad2488f1500007fd206796685d5ce875b2ef2968782f02d332c9b792897874a132293cd103729cd81905560408051828152905194985090965087936000805160206200278c833981519152929181900390910190a383600160a060020a03166000600160a060020a03166000805160206200276c833981519152858b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156200036e57818101518382015260200162000354565b50505050905090810190601f1680156200039c5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a35050734e44743330b950a8c624c457178aac1355c4f6b26000818152600560209081526a03b356e8530727b36600007f1bbc26df53ee5ab188a3113ca8d4440641301871ca0b9a286a732e23c5bbc8098190556040805182815290519193859390926000805160206200278c8339815191529281900390910190a381600160a060020a03166000600160a060020a03166000805160206200276c833981519152838b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156200049157818101518382015260200162000477565b50505050905090810190601f168015620004bf5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a350505050505050505061228680620004e66000396000f30060806040526004361061015b5763ffffffff60e060020a60003504166306fdde03811461016057806307609873146101ea578063095ea7b31461020d57806318160ddd146102455780631cb3bbc01461026c5780631de54fcd1461028457806323b872dd146102a55780632f6c493c146102cf578063313ce567146102f057806342966c6814610305578063468b3b331461031d578063661884631461034157806370a0823114610365578063715018a61461038657806379cc67901461039b57806383197ef0146103bf5780638da5cb5b146103d45780638ef4c8071461040557806395d89b4114610429578063a9059cbb1461043e578063bae944ba14610462578063be45fd6214610477578063d73dd623146104e0578063dd62ed3e14610504578063e2ab691d1461052b578063f2fde38b14610552578063f339690514610573578063f5074f4114610594578063f851a440146105b5575b600080fd5b34801561016c57600080fd5b506101756105ca565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101af578181015183820152602001610197565b50505050905090810190601f1680156101dc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101f657600080fd5b5061020b600160a060020a0360043516610601565b005b34801561021957600080fd5b50610231600160a060020a03600435166024356106b2565b604080519115158252519081900360200190f35b34801561025157600080fd5b5061025a610718565b60408051918252519081900360200190f35b34801561027857600080fd5b5061023160043561071f565b34801561029057600080fd5b5061025a600160a060020a0360043516610799565b3480156102b157600080fd5b50610231600160a060020a0360043581169060243516604435610835565b3480156102db57600080fd5b5061020b600160a060020a0360043516610f53565b3480156102fc57600080fd5b5061025a610feb565b34801561031157600080fd5b5061020b600435610ff0565b34801561032957600080fd5b5061025a600160a060020a036004351660243561122f565b34801561034d57600080fd5b50610231600160a060020a03600435166024356112de565b34801561037157600080fd5b5061025a600160a060020a03600435166113ce565b34801561039257600080fd5b5061020b6113e9565b3480156103a757600080fd5b5061020b600160a060020a0360043516602435611455565b3480156103cb57600080fd5b5061020b6117b9565b3480156103e057600080fd5b506103e96117de565b60408051600160a060020a039092168252519081900360200190f35b34801561041157600080fd5b5061025a600160a060020a03600435166024356117ed565b34801561043557600080fd5b50610175611908565b34801561044a57600080fd5b50610231600160a060020a036004351660243561193f565b34801561046e57600080fd5b5061025a611a0f565b34801561048357600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610231948235600160a060020a0316946024803595369594606494920191908190840183828082843750949750611a159650505050505050565b3480156104ec57600080fd5b50610231600160a060020a0360043516602435611ae3565b34801561051057600080fd5b5061025a600160a060020a0360043581169060243516611b7c565b34801561053757600080fd5b5061020b600160a060020a0360043516602435604435611ba7565b34801561055e57600080fd5b5061020b600160a060020a0360043516611ce9565b34801561057f57600080fd5b5061025a600160a060020a0360043516611d0c565b3480156105a057600080fd5b5061020b600160a060020a0360043516611d76565b3480156105c157600080fd5b506103e9611d99565b60408051808201909152600c81527f52756269697820546f6b656e0000000000000000000000000000000000000000602082015281565b600054600160a060020a0316331461061857600080fd5b600160a060020a0381161580159061063e5750600054600160a060020a03828116911614155b151561064957600080fd5b600154604051600160a060020a038084169216907f9eaf9e841579f88a8d3d4ec0b4af57f34599d4141259e5888af1bd4e5b41b0b190600090a36001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b336000818152600760209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b6006545b90565b60008054600160a060020a03163314806107435750600154600160a060020a031633145b151561074e57600080fd5b600082101561075c57600080fd5b60028290556040805183815290517f73ffc732c3754a1708836069f52b214dcbad1e3297517eef5a2ec6aedb2e10f09181900360200190a1919050565b604080517f468b3b33000000000000000000000000000000000000000000000000000000008152600160a060020a03831660048201524260248201529051600091309163468b3b339160448082019260209290919082900301818787803b15801561080357600080fd5b505af1158015610817573d6000803e3d6000fd5b505050506040513d602081101561082d57600080fd5b505192915050565b6000606060008584600254421115610b7457600160a060020a038716151561085c57600080fd5b600160a060020a03881660009081526005602052604090205486111561088157600080fd5b600160a060020a03881660009081526007602090815260408083203384529091529020548611156108b157600080fd5b600086116108be57600080fd5b600160a060020a0388166000908152600560205260409020546108e7908763ffffffff611da816565b600160a060020a03808a16600090815260056020526040808220939093559089168152205461091c908763ffffffff611dba16565b600160a060020a03808916600090815260056020908152604080832094909455918b168152600782528281203382529091522054610960908763ffffffff611da816565b600160a060020a038916600090815260076020908152604080832033845290915290205561098d87611dcd565b15610a8f5786925082600160a060020a031663c0ee0b8a3388876040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610a145781810151838201526020016109fc565b50505050905090810190601f168015610a415780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015610a6257600080fd5b505af1158015610a76573d6000803e3d6000fd5b505050506040513d6020811015610a8c57600080fd5b50505b86600160a060020a031688600160a060020a031660008051602061223b833981519152886040518082815260200191505060405180910390a386600160a060020a031688600160a060020a031660008051602061221b83398151915288876040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610b30578181015183820152602001610b18565b50505050905090810190601f168015610b5d5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a360019450610f48565b600160a060020a03821660009081526004602052604090205460ff16151560011415610c1f576040805160e060020a631de54fcd028152600160a060020a0384166004820152905182913091631de54fcd916024808201926020929091908290030181600087803b158015610be857600080fd5b505af1158015610bfc573d6000803e3d6000fd5b505050506040513d6020811015610c1257600080fd5b50511015610c1f57600080fd5b600160a060020a0387161515610c3457600080fd5b600160a060020a038816600090815260056020526040902054861115610c5957600080fd5b600160a060020a0388166000908152600760209081526040808320338452909152902054861115610c8957600080fd5b60008611610c9657600080fd5b600160a060020a038816600090815260056020526040902054610cbf908763ffffffff611da816565b600160a060020a03808a166000908152600560205260408082209390935590891681522054610cf4908763ffffffff611dba16565b600160a060020a03808916600090815260056020908152604080832094909455918b168152600782528281203382529091522054610d38908763ffffffff611da816565b600160a060020a0389166000908152600760209081526040808320338452909152902055610d6587611dcd565b15610e675786925082600160a060020a031663c0ee0b8a3388876040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610dec578181015183820152602001610dd4565b50505050905090810190601f168015610e195780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015610e3a57600080fd5b505af1158015610e4e573d6000803e3d6000fd5b505050506040513d6020811015610e6457600080fd5b50505b86600160a060020a031688600160a060020a031660008051602061223b833981519152886040518082815260200191505060405180910390a386600160a060020a031688600160a060020a031660008051602061221b83398151915288876040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610f08578181015183820152602001610ef0565b50505050905090810190601f168015610f355780820380516001836020036101000a031916815260200191505b50935050505060405180910390a3600194505b505050509392505050565b600054600160a060020a0316331480610f765750600154600160a060020a031633145b1515610f8157600080fd5b600160a060020a0381166000908152600460209081526040808320805460ff1916905560039091528120610fb4916121da565b604051600160a060020a038216907f9e4b5873dcdfeaf6bf534d422fe7d4748b91bc3fc2ea0e5e4c67f74dd8a13c5490600090a250565b601281565b600054606090600160a060020a0316331461100a57600080fd5b816002544211156110d5576000831161102257600080fd5b61102c3384611dd5565b6000600160a060020a031633600160a060020a031660008051602061221b83398151915285856040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561109557818101518382015260200161107d565b50505050905090810190601f1680156110c25780820380516001836020036101000a031916815260200191505b50935050505060405180910390a361122a565b3360009081526004602052604090205460ff1615156001141561116e576040805160e060020a631de54fcd028152336004820152905182913091631de54fcd916024808201926020929091908290030181600087803b15801561113757600080fd5b505af115801561114b573d6000803e3d6000fd5b505050506040513d602081101561116157600080fd5b5051101561116e57600080fd5b6000831161117b57600080fd5b6111853384611dd5565b6000600160a060020a031633600160a060020a031660008051602061221b83398151915285856040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156111ee5781810151838201526020016111d6565b50505050905090810190601f16801561121b5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a35b505050565b60006112d761123e84846117ed565b604080517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a0387166004820152905130916370a082319160248083019260209291908290030181600087803b15801561129f57600080fd5b505af11580156112b3573d6000803e3d6000fd5b505050506040513d60208110156112c957600080fd5b50519063ffffffff611da816565b9392505050565b336000908152600760209081526040808320600160a060020a03861684529091528120548083111561133357336000908152600760209081526040808320600160a060020a0388168452909152812055611368565b611343818463ffffffff611da816565b336000908152600760209081526040808320600160a060020a03891684529091529020555b336000818152600760209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526005602052604090205490565b600054600160a060020a0316331461140057600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054606090600160a060020a0316331461146f57600080fd5b82826002544211156115c357600160a060020a03851660009081526007602090815260408083203384529091529020548411156114ab57600080fd5b600084116114b857600080fd5b600160a060020a03851660009081526007602090815260408083203384529091529020546114ec908563ffffffff611da816565b600160a060020a038616600090815260076020908152604080832033845290915290205561151a8585611dd5565b6000600160a060020a031633600160a060020a031660008051602061221b83398151915286866040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561158357818101518382015260200161156b565b50505050905090810190601f1680156115b05780820380516001836020036101000a031916815260200191505b50935050505060405180910390a36117b2565b600160a060020a03821660009081526004602052604090205460ff1615156001141561166e576040805160e060020a631de54fcd028152600160a060020a0384166004820152905182913091631de54fcd916024808201926020929091908290030181600087803b15801561163757600080fd5b505af115801561164b573d6000803e3d6000fd5b505050506040513d602081101561166157600080fd5b5051101561166e57600080fd5b600160a060020a038516600090815260076020908152604080832033845290915290205484111561169e57600080fd5b600084116116ab57600080fd5b600160a060020a03851660009081526007602090815260408083203384529091529020546116df908563ffffffff611da816565b600160a060020a038616600090815260076020908152604080832033845290915290205561170d8585611dd5565b6000600160a060020a031633600160a060020a031660008051602061221b83398151915286866040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561177657818101518382015260200161175e565b50505050905090810190601f1680156117a35780820380516001836020036101000a031916815260200191505b50935050505060405180910390a35b5050505050565b600054600160a060020a031633146117d057600080fd5b600054600160a060020a0316ff5b600054600160a060020a031681565b6000606060008060006003600088600160a060020a0316600160a060020a03168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561187a57600084815260209081902060408051808201909152600285029091018054825260019081015482840152908352909201910161183b565b50505050935083519250826000141561189657600094506118fe565b5060009050805b828110156118fa5783818151811015156118b357fe5b6020908102909101810151015186116118f2576118ef84828151811015156118d757fe5b6020908102909101015151839063ffffffff611dba16565b91505b60010161189d565b8194505b5050505092915050565b60408051808201909152600381527f5242580000000000000000000000000000000000000000000000000000000000602082015281565b600060608260025442111561196057611959858584611ec4565b9250611a07565b3360009081526004602052604090205460ff161515600114156119f9576040805160e060020a631de54fcd028152336004820152905182913091631de54fcd916024808201926020929091908290030181600087803b1580156119c257600080fd5b505af11580156119d6573d6000803e3d6000fd5b505050506040513d60208110156119ec57600080fd5b505110156119f957600080fd5b611a04858584611ec4565b92505b505092915050565b60025481565b600082600254421115611a3457611a2d858585611ec4565b9150611adb565b3360009081526004602052604090205460ff16151560011415611acd576040805160e060020a631de54fcd028152336004820152905182913091631de54fcd916024808201926020929091908290030181600087803b158015611a9657600080fd5b505af1158015611aaa573d6000803e3d6000fd5b505050506040513d6020811015611ac057600080fd5b50511015611acd57600080fd5b611ad8858585611ec4565b91505b509392505050565b336000908152600760209081526040808320600160a060020a0386168452909152812054611b17908363ffffffff611dba16565b336000818152600760209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260076020908152604080832093909416825291909152205490565b60008054600160a060020a0316331480611bcb5750600154600160a060020a031633145b1515611bd657600080fd5b670de0b6b3a7640000919091029060008211611bf157600080fd5b60008311611bfe57600080fd5b600054600160a060020a0385811691161415611c1957600080fd5b600154600160a060020a0385811691161415611c3457600080fd5b50600160a060020a0383166000818152600460209081526040808320805460ff1916600190811790915560038084528285208351808501855288815242620151808b020181870181815283548087018555848a52888a20935160029091029093019283555191909401559486905283529254815184815292830186905282820152519192917f0e31f07bae79135368ff475cf6c7f6abb31e0fd731e03c18ad425bd9406cf0c09181900360600190a250505050565b600054600160a060020a03163314611d0057600080fd5b611d098161215d565b50565b604080517f8ef4c807000000000000000000000000000000000000000000000000000000008152600160a060020a038316600482015242602482015290516000913091638ef4c8079160448082019260209290919082900301818787803b15801561080357600080fd5b600054600160a060020a03163314611d8d57600080fd5b80600160a060020a0316ff5b600154600160a060020a031681565b600082821115611db457fe5b50900390565b81810182811015611dc757fe5b92915050565b6000903b1190565b600160a060020a038216600090815260056020526040902054811115611dfa57600080fd5b600160a060020a038216600090815260056020526040902054611e23908263ffffffff611da816565b600160a060020a038316600090815260056020526040902055600654611e4f908263ffffffff611da816565b600655604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a0385169160008051602061223b8339815191529181900360200190a35050565b600080600160a060020a0385161515611edc57600080fd5b33600090815260056020526040902054841115611ef857600080fd5b60008411611f0557600080fd5b33600090815260056020526040902054611f25908563ffffffff611da816565b3360009081526005602052604080822092909255600160a060020a03871681522054611f57908563ffffffff611dba16565b600160a060020a038616600090815260056020526040902055611f7985611dcd565b1561208157506040517fc0ee0b8a0000000000000000000000000000000000000000000000000000000081523360048201818152602483018690526060604484019081528551606485015285518894600160a060020a0386169463c0ee0b8a9490938a938a9360840190602085019080838360005b83811015612006578181015183820152602001611fee565b50505050905090810190601f1680156120335780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561205457600080fd5b505af1158015612068573d6000803e3d6000fd5b505050506040513d602081101561207e57600080fd5b50505b604080518581529051600160a060020a03871691339160008051602061223b8339815191529181900360200190a384600160a060020a031633600160a060020a031660008051602061221b83398151915286866040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156121175781810151838201526020016120ff565b50505050905090810190601f1680156121445780820380516001836020036101000a031916815260200191505b50935050505060405180910390a3506001949350505050565b600160a060020a038116151561217257600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b5080546000825560020290600052602060002090810190611d09919061071c91905b8082111561221657600080825560018201556002016121fc565b50905600e19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820f6b12126809fdd370a4c8b3b3d2b9e093dd4beee02eed8121801031bceb1f91c0029e19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
  "constructorArguments": "e19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
}