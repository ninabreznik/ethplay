{
  "address": "0x0eeabfd5c67c4b9817f3259680013691b50ac08b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DELFINIUMToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-27\n*/\n\npragma solidity 0.4.25;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a && c>=b);\n    return c;\n  }\n}\n\n\n /**\n  * @dev Error messages:\n\t\t1: Sender is not the owner\n\t\t2. Account is freezed\n\t\t3. Emergency freeze is applied\n\t\t4. Zero address not allowed\n\t\t5. Sender does not have sufficient balance\n\t\t6. Approval limit exceeds\n  */\n\n\n// source : https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\ncontract ERC20Interface {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\n\ncontract DELFINIUMToken is ERC20Interface {\n\tusing SafeMath for uint;\n\n\t// State variables\n\tstring public symbol = 'DELFINIUM';\n\tstring public name = 'DLF';\n\tuint public decimals = 18;\n\taddress public owner;\n\tuint public totalSupply = 210000000 * (10 ** 18);\n\tbool public emergencyFreeze;\n\t\n\t// mappings\n\tmapping (address => uint) balances;\n\tmapping (address => mapping (address => uint) ) allowed;\n\tmapping (address => bool) frozen;\n  \n\n\t// constructor\n\tconstructor() public {\n\t\towner = msg.sender;\n\t\tbalances[owner] = totalSupply;\n\t\temit Transfer(address(0x0), msg.sender, totalSupply);\n\t}\n\n\t// events\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\tevent Freezed(address targetAddress, bool frozen);\n\tevent EmerygencyFreezed(bool emergencyFreezeStatus);\t\n  \n\n\n\t// Modifiers\n\tmodifier onlyOwner {\n\t\trequire(msg.sender == owner, '1');\n\t\t_;\n\t}\n\n\tmodifier unfreezed(address _account) { \n\t\trequire(!frozen[_account], '2');\n\t\t_;  \n\t}\n\t\n\tmodifier noEmergencyFreeze() { \n\t\trequire(!emergencyFreeze, '3');\n\t\t_; \n\t}\n  \n\n\n\t// functions\n\n\t// ------------------------------------------------------------------------\n\t// Transfer Token\n\t// ------------------------------------------------------------------------\n\tfunction transfer(address _to, uint _value)\n\t\tunfreezed(_to) \n\t\tunfreezed(msg.sender) \n\t\tnoEmergencyFreeze() \n\t\tpublic returns (bool success) \n\t{\n\t\trequire(_to != address(0x0), '4');\n\t\trequire(balances[msg.sender] >= _value, '5');\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\temit Transfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\n\t// ------------------------------------------------------------------------\n\t// Approve others to spend on your behalf\n\t// ------------------------------------------------------------------------\n\t/* \n\t\tWhile changing approval, the allowed must be changed to 0 than then to updated value\n\t\tThe smart contract doesn't enforces this due to backward competibility but requires frontend to do the validations\n\t*/\n\tfunction approve(address _spender, uint _value)\n\t\tunfreezed(_spender) \n\t\tunfreezed(msg.sender) \n\t\tnoEmergencyFreeze() \n\t\tpublic returns (bool success) \n\t{\n\t\tallowed[msg.sender][_spender] = _value;\n\t\temit Approval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\n\tfunction increaseApproval(address _spender, uint256 _addedValue)\n\t\tunfreezed(_spender)\n\t\tunfreezed(msg.sender)\n\t\tnoEmergencyFreeze()\n\t\tpublic returns (bool)\n\t{\n\t\tallowed[msg.sender][_spender] = (\n\t\tallowed[msg.sender][_spender].add(_addedValue));\n\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\t\treturn true;\n\t}\n\n\tfunction decreaseApproval (address _spender, uint256 _subtractedValue )\n\t\tunfreezed(_spender)\n\t\tunfreezed(msg.sender)\n\t\tnoEmergencyFreeze()\n\t\tpublic returns (bool)\n\t{\n\t\tuint256 oldValue = allowed[msg.sender][_spender];\n\t\tif (_subtractedValue > oldValue) {\n\t\t\tallowed[msg.sender][_spender] = 0;\n\t\t} else {\n\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\t\t}\n\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\t\treturn true;\n\t}\n\n  \t// ------------------------------------------------------------------------\n  \t// Approve and call : If approve returns true, it calls receiveApproval method of contract\n\t\t// ------------------------------------------------------------------------\n  \tfunction approveAndCall(address _spender, uint256 _value, bytes _extraData)\n\t\tunfreezed(_spender) \n\t\tunfreezed(msg.sender) \n\t\tnoEmergencyFreeze() \n\t\tpublic returns (bool success) \n\t{\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n\t// ------------------------------------------------------------------------\n\t// Transferred approved amount from other's account\n\t// ------------------------------------------------------------------------\n\tfunction transferFrom(address _from, address _to, uint _value)\n\t\tunfreezed(_to) \n\t\tunfreezed(_from) \n\t\tunfreezed(msg.sender) \n\t\tnoEmergencyFreeze() \n\t\tpublic returns (bool success) \n\t{\n\t\trequire(_value <= allowed[_from][msg.sender], '6');\n\t\trequire (balances[_from]>= _value, '5');\n\t\tbalances[_from] = balances[_from].sub(_value);\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\temit Transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\n\t// ------------------------------------------------------------------------\n\t//               ONLYOWNER METHODS                             \n\t// ------------------------------------------------------------------------\n\n\n\t// ------------------------------------------------------------------------\n\t// Transfer Ownership\n\t// ------------------------------------------------------------------------\n\tfunction transferOwnership(address _newOwner)\n\t\tonlyOwner\n\t\tpublic \n\t{\n\t\trequire(_newOwner != address(0), '4');\n\t\towner = _newOwner;\n\t\temit OwnershipTransferred(owner, _newOwner);\n\t}\n\n\n\t// ------------------------------------------------------------------------\n\t// Freeze account - onlyOwner\n\t// ------------------------------------------------------------------------\n\tfunction freezeAccount (address _target, bool _freeze) public onlyOwner returns(bool res) {\n\t\trequire(_target != address(0x0), '4');\n\t\tfrozen[_target] = _freeze;\n\t\temit Freezed(_target, _freeze);\n\t\treturn true;\n\t}\n\n\t// ------------------------------------------------------------------------\n\t// Emerygency freeze - onlyOwner\n\t// ------------------------------------------------------------------------\n\tfunction emergencyFreezeAllAccounts (bool _freeze) public onlyOwner returns(bool res) {\n\t\temergencyFreeze = _freeze;\n\t\temit EmerygencyFreezed(_freeze);\n\t\treturn true;\n\t}\n  \n\n\t// ------------------------------------------------------------------------\n\t//               CONSTANT METHODS\n\t// ------------------------------------------------------------------------\n\n\n\t// ------------------------------------------------------------------------\n\t// Check Allowance : Constant\n\t// ------------------------------------------------------------------------\n\tfunction allowance(address _tokenOwner, address _spender) public view returns (uint remaining) {\n\t\treturn allowed[_tokenOwner][_spender];\n\t}\n\n\t// ------------------------------------------------------------------------\n\t// Check Balance : Constant\n\t// ------------------------------------------------------------------------\n\tfunction balanceOf(address _tokenOwner) public view returns (uint balance) {\n\t\treturn balances[_tokenOwner];\n\t}\n\n\t// ------------------------------------------------------------------------\n\t// Total supply : Constant\n\t// ------------------------------------------------------------------------\n\tfunction totalSupply() public view returns (uint) {\n\t\treturn totalSupply;\n\t}\n\n\t// ------------------------------------------------------------------------\n\t// Get Freeze Status : Constant\n\t// ------------------------------------------------------------------------\n\tfunction isFreezed(address _targetAddress) public view returns (bool) {\n\t\treturn frozen[_targetAddress]; \n\t}\n\n\n\n\t// ------------------------------------------------------------------------\n\t// Prevents contract from accepting ETH\n\t// ------------------------------------------------------------------------\n\tfunction () public payable {\n\t\trevert();\n\t}\n\n\t// ------------------------------------------------------------------------\n\t// Owner can transfer out any accidentally sent ERC20 tokens\n\t// ------------------------------------------------------------------------\n\tfunction transferAnyERC20Token(address _tokenAddress, uint _value) public onlyOwner returns (bool success) {\n\t\treturn ERC20Interface(_tokenAddress).transfer(owner, _value);\n\t}\n}",
  "bytecode": ""
}