{
  "address": "0x60daec030a5b76bfd4aaa6c0b2bf6d4b81c4a34e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MainContract",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-06\n*/\n\npragma solidity 0.4.11;\n\n// File: contracts/OwnerValidator.sol\n\ncontract TokenContract {\n    function totalSupply() constant returns (uint256 supply);\n    function decimals() constant returns(uint8 units);\n    function balanceOf(address _owner) constant returns (uint256 balance);\n    function transfer(address _to, uint256 _value) returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n    function transferFromSender(address _to, uint256 _value) returns (bool success);\n    function approve(address _spender, uint256 _value) returns (bool success);\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n}\ncontract OwnerValidator {\n    function validate(address addr) constant returns (bool);\n}\n\ncontract Owned {\n    function ownerValidate(address addr) constant returns (bool);\n    bool public isWorking;\n\n    function Owned() {\n        isWorking = true;\n    }\n\n    modifier onlyOwner {\n        if (!ownerValidate(msg.sender)) throw;\n        _;\n    }\n\n    modifier onlyWorking {\n        if (!isWorking) throw;\n        _;\n    }\n\n    modifier onlyNotWorking {\n        if (isWorking) throw;\n        _;\n    }\n\n    function setWorking(bool _isWorking) onlyOwner {\n        isWorking = _isWorking;\n    }\n}\n\ncontract OwnerValidatorImpl is OwnerValidator, Owned {\n\n    address[] public owners;\n\n\n    TokenContract public tokenContract;\n\n    function OwnerValidatorImpl() {\n        owners.push(msg.sender);\n    }\n\n\n    function indexOfOwners(address _address) private constant returns (uint pos) {\n        pos = 0;\n        for (uint i = 0; i < owners.length; i++) {\n            if (owners[i] == _address) {\n                pos = i + 1;\n                break;\n            }\n        }\n        return pos;\n    }\n\n    function validate(address addr) constant returns (bool) {\n        return (indexOfOwners(addr) != 0);\n    }\n\n    function getOwners() constant returns (address[]) {\n        return owners;\n    }\n\n    function addOwner(address addr) onlyWorking {\n        if (validate(msg.sender)) {\n            if (!validate(addr)) {\n                owners.push(addr);\n            }\n        }\n    }\n\n    function removeOwner(address addr) onlyWorking {\n        if (validate(msg.sender)) {\n            uint pos = indexOfOwners(addr);\n            if (pos > 0) {\n                owners[pos - 1] = 0x0;\n            }\n        }\n    }\n\n    function setTokenContract(address _tokenContract) onlyWorking {\n        if (validate(msg.sender)) {\n            tokenContract = TokenContract(_tokenContract);\n        }\n    }\n\n    function ownerValidate(address addr) constant returns (bool) {\n        return validate(addr);\n    }\n\n    function transferFromSender(address _to, uint256 _value) returns (bool success) {\n        if (!validate(msg.sender)) throw;\n        return tokenContract.transferFromSender(_to, _value);\n    }\n\n    function sendFromOwn(address _to, uint256 _value) returns (bool success) {\n        if (!validate(msg.sender)) throw;\n        if (!_to.send(_value)) throw;\n        return true;\n    }\n}\n\n// File: contracts/OffChainManager.sol\n\n\ncontract OffChainManager {\n    function isToOffChainAddress(address addr) constant returns (bool);\n    function getOffChainRootAddress() constant returns (address);\n}\n\ncontract OffChainManagerImpl is OffChainManager, Owned {\n    address public rootAddress;\n    address[] public offChainAddreses;\n\n    mapping (address => uint256) refOffChainAddresses;\n\n    OwnerValidator public ownerValidator;\n\n    TokenContract public tokenContract;\n\n    function OffChainManagerImpl(\n        address _rootAddress,\n        address _ownerValidator\n    ) {\n        rootAddress = _rootAddress;\n        ownerValidator = OwnerValidator(_ownerValidator);\n    }\n\n    function setRootAddress(address _address) onlyWorking {\n        if (ownerValidator.validate(msg.sender)) {\n            rootAddress = _address;\n        }\n    }\n\n    function setOwnerValidatorAddress(address _ownerValidator) onlyWorking {\n        if (ownerValidator.validate(msg.sender)) {\n            ownerValidator = OwnerValidator(_ownerValidator);\n        }\n    }\n\n    function setTokenContract(address _tokenContract) {\n        if (ownerValidator.validate(msg.sender)) {\n            tokenContract = TokenContract(_tokenContract);\n        }\n    }\n\n    function offChainAddresesValidCount() constant returns (uint) {\n        uint cnt = 0;\n        for (uint i = 0; i < offChainAddreses.length; i++) {\n            if (offChainAddreses[i] != 0) {\n                cnt++;\n            }\n        }\n        return cnt;\n    }\n\n    function addOffChainAddress(address _address) private {\n        if (!isToOffChainAddress(_address)) {\n            offChainAddreses.push(_address);\n            refOffChainAddresses[_address] = offChainAddreses.length;\n        }\n    }\n\n    function removeOffChainAddress(address _address) private {\n        uint pos = refOffChainAddresses[_address];\n        if (pos > 0) {\n            offChainAddreses[pos - 1] = 0;\n            refOffChainAddresses[_address] = 0x0;\n        }\n    }\n\n    function addOffChainAddresses(address[] _addresses) onlyWorking {\n        if (ownerValidator.validate(msg.sender)) {\n            for (uint i = 0; i < _addresses.length; i++) {\n                addOffChainAddress(_addresses[i]);\n            }\n        }\n    }\n\n    function removeOffChainAddresses(address[] _addresses) onlyWorking {\n        if (ownerValidator.validate(msg.sender)) {\n            for (uint i = 0; i < _addresses.length; i++) {\n                removeOffChainAddress(_addresses[i]);\n            }\n        }\n    }\n\n    function ownerValidate(address addr) constant returns (bool) {\n        return ownerValidator.validate(addr);\n    }\n\n    function transferFromSender(address _to, uint256 _value) returns (bool success) {\n        if (!ownerValidator.validate(msg.sender)) throw;\n        return tokenContract.transferFromSender(_to, _value);\n    }\n\n    function sendFromOwn(address _to, uint256 _value) returns (bool success) {\n        if (!ownerValidator.validate(msg.sender)) throw;\n        if (!_to.send(_value)) throw;\n        return true;\n    }\n\n    function isToOffChainAddress(address addr) constant returns (bool) {\n        return refOffChainAddresses[addr] > 0;\n    }\n\n    function getOffChainRootAddress() constant returns (address) {\n        return rootAddress;\n    }\n\n    function getOffChainAddresses() constant returns (address[]) {\n        return offChainAddreses;\n    }\n\n    function isToOffChainAddresses(address[] _addresses) constant returns (bool) {\n        for (uint i = 0; i < _addresses.length; i++) {\n            if (!isToOffChainAddress(_addresses[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n// File: contracts/TokenContract.sol\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n// assert(b > 0);\n    uint256 c = a / b;\n// assert(a == b * c + a % b);\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\ncontract TokenContractImpl is TokenContract, Owned {\n    using SafeMath for uint256;\n    string public standard = \"Token 0.1\";\n    uint256 _totalSupply;\n    uint8 _decimals;\n\n    mapping (address => uint256) public balances;\n    mapping (address => mapping (address => uint256)) public allowed;\n\n    OwnerValidator public ownerValidator;\n    OffChainManager public offChainManager;\n\n    bool public isRedenominated;\n    uint256 public redenomiValue;\n    mapping (address => uint256) public redenominatedBalances;\n    mapping (address => mapping (address => uint256)) public redenominatedAllowed;\n\n    function TokenContractImpl(\n        uint256 initialSupply,\n        uint8 decimals,\n        address _ownerValidator,\n        address _offChainManager\n    ){\n        balances[msg.sender] = initialSupply;\n        _totalSupply = initialSupply;\n        _decimals = decimals;\n        ownerValidator = OwnerValidator(_ownerValidator);\n        offChainManager = OffChainManager(_offChainManager);\n    }\n\n    function totalSupply() constant returns (uint256 totalSupply) {\n        if (isRedenominated) {\n            return redenominatedValue(_totalSupply);\n        }\n        return _totalSupply;\n    }\n\n    function decimals() constant returns (uint8 decimals) {\n        return _decimals;\n    }\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        if (isRedenominated) {\n            if (redenominatedBalances[_owner] > 0) {\n                return redenominatedBalances[_owner];\n            }\n            return redenominatedValue(balances[_owner]);\n        }\n        return balances[_owner];\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint remaining) {\n        if (isRedenominated) {\n            if (redenominatedAllowed[_owner][_spender] > 0) {\n                return redenominatedAllowed[_owner][_spender];\n            }\n            return redenominatedValue(allowed[_owner][_spender]);\n        }\n        return allowed[_owner][_spender];\n    }\n\n    function redenominatedValue(uint256 _value) private returns (uint256) {\n        return _value.mul(redenomiValue);\n    }\n\n    function ownerValidate(address addr) constant returns (bool) {\n        return ownerValidator.validate(addr);\n    }\n\n\n    function redenominate(uint256 _redenomiValue) {\n        if (isRedenominated) throw;\n        if (ownerValidator.validate(msg.sender)) {\n            redenomiValue = _redenomiValue;\n            Redenominate(msg.sender, isRedenominated, redenomiValue);\n        }\n    }\n\n\n    function applyRedenomination() onlyNotWorking {\n        if (isRedenominated) throw;\n        if (redenomiValue == 0) throw;\n        if (ownerValidator.validate(msg.sender)) {\n            isRedenominated = true;\n            ApplyRedenomination(msg.sender, isRedenominated, redenomiValue);\n        }\n    }\n\n    function setOwnerValidatorAddress(address _ownerValidator) onlyWorking {\n        if (ownerValidator.validate(msg.sender)) {\n            ownerValidator = OwnerValidator(_ownerValidator);\n        }\n    }\n\n    function setOffChainManagerAddress(address _offChainManager) onlyWorking {\n        if (ownerValidator.validate(msg.sender)) {\n            offChainManager = OffChainManager(_offChainManager);\n        }\n    }\n\n    function transfer(address _to, uint256 _value) onlyWorking returns (bool success) {\n        return transferProcess(tx.origin, _to, _value);\n    }\n\n    function transferProcess(address _from, address _to, uint256 _value) private returns (bool success) {\n        if (balanceOf(_from) < _value) throw;\n        subtractBalance(_from, _value);\n        if (offChainManager.isToOffChainAddress(_to)) {\n            addBalance(offChainManager.getOffChainRootAddress(), _value);\n            ToOffChainTransfer(_from, _to, _to, _value);\n        } else {\n            addBalance(_to, _value);\n        }\n        return true;\n    }\n\n    function addBalance(address _address, uint256 _value) private {\n        if (isRedenominated) {\n            if (redenominatedBalances[_address] == 0) {\n                if (balances[_address] > 0) {\n                    redenominatedBalances[_address] = redenominatedValue(balances[_address]);\n                    balances[_address] = 0;\n                }\n            }\n            redenominatedBalances[_address] = redenominatedBalances[_address].add(_value);\n        } else {\n            balances[_address] = balances[_address].add(_value);\n        }\n    }\n\n    function subtractBalance(address _address, uint256 _value) private {\n        if (isRedenominated) {\n            if (redenominatedBalances[_address] == 0) {\n                if (balances[_address] > 0) {\n                    redenominatedBalances[_address] = redenominatedValue(balances[_address]);\n                    balances[_address] = 0;\n                }\n            }\n            redenominatedBalances[_address] = redenominatedBalances[_address].sub(_value);\n        } else {\n            balances[_address] = balances[_address].sub(_value);\n        }\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) onlyWorking returns (bool success) {\n        if (balanceOf(_from) < _value) throw;\n        if (balanceOf(_to).add(_value) < balanceOf(_to)) throw;\n        if (_value > allowance(_from, tx.origin)) throw;\n        subtractBalance(_from, _value);\n        if (offChainManager.isToOffChainAddress(_to)) {\n            addBalance(offChainManager.getOffChainRootAddress(), _value);\n            ToOffChainTransfer(tx.origin, _to, _to, _value);\n        } else {\n            addBalance(_to, _value);\n        }\n        subtractAllowed(_from, tx.origin, _value);\n        return true;\n    }\n\n\n    function transferFromSender(address _to, uint256 _value) onlyWorking returns (bool success) {\n        if (!transferProcess(msg.sender, _to, _value)) throw;\n        TransferFromSender(msg.sender, _to, _value);\n        return true;\n    }\n\n\n    function transferFromOwn(address _to, uint256 _value) onlyWorking returns (bool success) {\n        if (!ownerValidator.validate(msg.sender)) throw;\n        if (!transferProcess(this, _to, _value)) throw;\n        TransferFromSender(this, _to, _value);\n        return true;\n    }\n\n    function sendFromOwn(address _to, uint256 _value) returns (bool success) {\n        if (!ownerValidator.validate(msg.sender)) throw;\n        if (!_to.send(_value)) throw;\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) onlyWorking returns (bool success) {\n        setAllowed(tx.origin, _spender, _value);\n        return true;\n    }\n\n    function subtractAllowed(address _from, address _spender, uint256 _value) private {\n        if (isRedenominated) {\n            if (redenominatedAllowed[_from][_spender] == 0) {\n                if (allowed[_from][_spender] > 0) {\n                    redenominatedAllowed[_from][_spender] = redenominatedValue(allowed[_from][_spender]);\n                    allowed[_from][_spender] = 0;\n                }\n            }\n            redenominatedAllowed[_from][_spender] = redenominatedAllowed[_from][_spender].sub(_value);\n        } else {\n            allowed[_from][_spender] = allowed[_from][_spender].sub(_value);\n        }\n    }\n\n    function setAllowed(address _owner, address _spender, uint256 _value) private {\n        if (isRedenominated) {\n            redenominatedAllowed[_owner][_spender] = _value;\n        } else {\n            allowed[_owner][_spender] = _value;\n        }\n    }\n\n    event TransferFromSender(address indexed _from, address indexed _to, uint256 _value);\n    event ToOffChainTransfer(address indexed _from, address indexed _toKey, address _to, uint256 _value);\n    event Redenominate(address _owner, bool _isRedenominated, uint256 _redenomiVakye);\n    event ApplyRedenomination(address _owner, bool _isRedenominated, uint256 _redenomiVakye);\n}\n\n// File: contracts/MainContract.sol\n\ncontract MainContract {\n    string public standard = \"Token 0.1\";\n    string public name;\n    string public symbol;\n\n    OwnerValidator public ownerValidator;\n    TokenContract public tokenContract;\n\n    function MainContract(\n        string _tokenName,\n        address _ownerValidator,\n        address _tokenContract,\n        string _symbol\n    ) {\n        ownerValidator = OwnerValidator(_ownerValidator);\n        tokenContract = TokenContract(_tokenContract);\n        name = _tokenName;\n        symbol = _symbol;\n    }\n\n    function totalSupply() constant returns(uint256 totalSupply) {\n        return tokenContract.totalSupply();\n    }\n\n    function decimals() constant returns(uint8 decimals) {\n        return tokenContract.decimals();\n    }\n\n    function setOwnerValidateAddress(address _ownerValidator) {\n        if (ownerValidator.validate(msg.sender)) {\n            ownerValidator = OwnerValidator(_ownerValidator);\n        }\n    }\n\n    function setTokenContract(address _tokenContract) {\n        if (ownerValidator.validate(msg.sender)) {\n            tokenContract = TokenContract(_tokenContract);\n        }\n    }\n\n    function transferFromSender(address _to, uint256 _value) returns (bool success) {\n        if (!ownerValidator.validate(msg.sender)) throw;\n        return tokenContract.transferFromSender(_to, _value);\n    }\n\n    function sendFromOwn(address _to, uint256 _value) returns (bool success) {\n        if (!ownerValidator.validate(msg.sender)) throw;\n        if (!_to.send(_value)) throw;\n        return true;\n    }\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return uint256(tokenContract.balanceOf(_owner));\n    }\n\n    function transfer(address _to, uint256 _value) returns (bool success) {\n        if (tokenContract.transfer(_to, _value)) {\n            Transfer(msg.sender, _to, _value);\n            return true;\n        } else {\n            throw;\n        }\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        if (tokenContract.transferFrom(_from, _to, _value)) {\n            Transfer(_from, _to, _value);\n            return true;\n        } else {\n            throw;\n        }\n    }\n\n    function approve(address _spender, uint256 _value) returns (bool success) {\n        if (tokenContract.approve(_spender,_value)) {\n            Approval(msg.sender,_spender,_value);\n            return true;\n        } else {\n            throw;\n        }\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return tokenContract.allowance(_owner,_spender);\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}",
  "bytecode": "60a0604052600960608190527f546f6b656e20302e3100000000000000000000000000000000000000000000006080908152620000409160009190620000e0565b5034156200004a57fe5b6040516200103d3803806200103d83398101604090815281516020830151918301516060840151918401939091015b60038054600160a060020a03808616600160a060020a03199283161790925560048054928516929091169190911790558351620000be906001906020870190620000e0565b508051620000d4906002906020840190620000e0565b505b505050506200018a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200012357805160ff191683800117855562000153565b8280016001018555821562000153579182015b828111156200015357825182559160200191906001019062000136565b5b506200016292915062000166565b5090565b6200018791905b808211156200016257600081556001016200016d565b5090565b90565b610ea3806200019a6000396000f300606060405236156100ca5763ffffffff60e060020a60003504166306fdde0381146100cc578063095ea7b31461015c57806318160ddd1461018f57806323b872dd146101b1578063313ce567146101ea57806350e86e1e1461021057806355a373d61461022e5780635a3b7e421461025a57806370a08231146102ea5780637e6216671461031857806395d89b411461034b578063a9059cbb146103db578063bae804a71461040e578063bbcd5bbe14610441578063d2d5a55c1461045f578063dd62ed3e1461048b575bfe5b34156100d457fe5b6100dc6104bf565b604080516020808252835181830152835191928392908301918501908083838215610122575b80518252602083111561012257601f199092019160209182019101610102565b505050905090810190601f16801561014e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561016457fe5b61017b600160a060020a036004351660243561054c565b604080519115158252519081900360200190f35b341561019757fe5b61019f61063e565b60408051918252519081900360200190f35b34156101b957fe5b61017b600160a060020a03600435811690602435166044356106b6565b604080519115158252519081900360200190f35b34156101f257fe5b6101fa6107b1565b6040805160ff9092168252519081900360200190f35b341561021857fe5b61022c600160a060020a0360043516610829565b005b341561023657fe5b61023e6108c9565b60408051600160a060020a039092168252519081900360200190f35b341561026257fe5b6100dc6108d8565b604080516020808252835181830152835191928392908301918501908083838215610122575b80518252602083111561012257601f199092019160209182019101610102565b505050905090810190601f16801561014e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102f257fe5b61019f600160a060020a0360043516610966565b60408051918252519081900360200190f35b341561032057fe5b61017b600160a060020a03600435166024356109f3565b604080519115158252519081900360200190f35b341561035357fe5b6100dc610aa8565b604080516020808252835181830152835191928392908301918501908083838215610122575b80518252602083111561012257601f199092019160209182019101610102565b505050905090810190601f16801561014e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103e357fe5b61017b600160a060020a0360043516602435610b33565b604080519115158252519081900360200190f35b341561041657fe5b61017b600160a060020a0360043516602435610c25565b604080519115158252519081900360200190f35b341561044957fe5b61022c600160a060020a0360043516610d32565b005b341561046757fe5b61023e610dd2565b60408051600160a060020a039092168252519081900360200190f35b341561049357fe5b61019f600160a060020a0360043581169060243516610de1565b60408051918252519081900360200190f35b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105445780601f1061051957610100808354040283529160200191610544565b820191906000526020600020905b81548152906001019060200180831161052757829003601f168201915b505050505081565b60048054604080516000602091820181905282517f095ea7b3000000000000000000000000000000000000000000000000000000008152600160a060020a038881169682019690965260248101879052925190949093169263095ea7b392604480820193929182900301818787803b15156105c357fe5b6102c65a03f115156105d157fe5b5050604051511590506106315782600160a060020a031633600160a060020a03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3506001610637565b60006000fd5b5b92915050565b6000600460009054906101000a9004600160a060020a0316600160a060020a03166318160ddd6000604051602001526040518163ffffffff1660e060020a028152600401809050602060405180830381600087803b151561069b57fe5b6102c65a03f115156106a957fe5b5050604051519150505b90565b60048054604080516000602091820181905282517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a038981169682019690965287861660248201526044810187905292519094909316926323b872dd92606480820193929182900301818787803b151561073557fe5b6102c65a03f1151561074357fe5b5050604051511590506106315782600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35060016107a9565b60006000fd5b5b9392505050565b6000600460009054906101000a9004600160a060020a0316600160a060020a031663313ce5676000604051602001526040518163ffffffff1660e060020a028152600401809050602060405180830381600087803b151561069b57fe5b6102c65a03f115156106a957fe5b5050604051519150505b90565b6003546040805160006020918201819052825160e060020a63207c64fb028152600160a060020a0333811660048301529351939094169363207c64fb936024808301949391928390030190829087803b151561088157fe5b6102c65a03f1151561088f57fe5b5050604051511590506108c5576003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b600454600160a060020a031681565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105445780601f1061051957610100808354040283529160200191610544565b820191906000526020600020905b81548152906001019060200180831161052757829003601f168201915b505050505081565b60048054604080516000602091820181905282517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a038781169682019690965292519094909316926370a0823192602480820193929182900301818787803b15156109d657fe5b6102c65a03f115156109e457fe5b5050604051519150505b919050565b6003546040805160006020918201819052825160e060020a63207c64fb028152600160a060020a03338116600483015293519194939093169263207c64fb92602480830193919282900301818787803b1515610a4b57fe5b6102c65a03f11515610a5957fe5b50506040515115159050610a6d5760006000fd5b604051600160a060020a0384169083156108fc029084906000818181858888f193505050501515610a9e5760006000fd5b5060015b92915050565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156105445780601f1061051957610100808354040283529160200191610544565b820191906000526020600020905b81548152906001019060200180831161052757829003601f168201915b505050505081565b60048054604080516000602091820181905282517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038881169682019690965260248101879052925190949093169263a9059cbb92604480820193929182900301818787803b1515610baa57fe5b6102c65a03f11515610bb857fe5b5050604051511590506106315782600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3506001610637565b60006000fd5b5b92915050565b6003546040805160006020918201819052825160e060020a63207c64fb028152600160a060020a03338116600483015293519194939093169263207c64fb92602480830193919282900301818787803b1515610c7d57fe5b6102c65a03f11515610c8b57fe5b50506040515115159050610c9f5760006000fd5b60048054604080516000602091820181905282517fbae804a7000000000000000000000000000000000000000000000000000000008152600160a060020a0389811696820196909652602481018890529251949093169363bae804a7936044808501948390030190829087803b1515610d1457fe5b6102c65a03f11515610d2257fe5b5050604051519150505b92915050565b6003546040805160006020918201819052825160e060020a63207c64fb028152600160a060020a0333811660048301529351939094169363207c64fb936024808301949391928390030190829087803b1515610d8a57fe5b6102c65a03f11515610d9857fe5b5050604051511590506108c5576004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b600354600160a060020a031681565b60048054604080516000602091820181905282517fdd62ed3e000000000000000000000000000000000000000000000000000000008152600160a060020a03888116968201969096528686166024820152925190949093169263dd62ed3e92604480820193929182900301818787803b1515610d1457fe5b6102c65a03f11515610d2257fe5b5050604051519150505b929150505600a165627a7a723058200a0aa351212af1184d6c60a67c5886d37fe8a4779a01eb4a7df52cf453c9757400290000000000000000000000000000000000000000000000000000000000000080000000000000000000000000ebd5be233c4e9765ccb36c8b6f8de336ceda210000000000000000000000000047be251e13101c30528c61a88393788997552eae00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000034b5443000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034b54430000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000ebd5be233c4e9765ccb36c8b6f8de336ceda210000000000000000000000000047be251e13101c30528c61a88393788997552eae00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000034b5443000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034b54430000000000000000000000000000000000000000000000000000000000"
}