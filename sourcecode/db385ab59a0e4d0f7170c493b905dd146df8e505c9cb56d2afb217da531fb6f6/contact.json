{
  "address": "0xb66041c5accc99fccce8e4f06074ac52c9c556dd",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Amber",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-03\n*/\n\npragma solidity 0.4.24;\n\nlibrary SafeMathExt{\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function pow(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (b == 0){\n      return 1;\n    }\n    if (b == 1){\n      return a;\n    }\n    uint256 c = a;\n    for(uint i = 1; i<b; i++){\n      c = mul(c, a);\n    }\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function roundUp(uint256 a, uint256 b) public pure returns(uint256){\n    // ((a + b - 1) / b) * b\n    uint256 c = (mul(div(sub(add(a, b), 1), b), b));\n    return c;\n  }\n}\n\nlibrary PureAmber{\n    /*==============================\n    =             BUY              =\n    ==============================*/\n    function isValidBuy(uint256 price_, uint256 msgValue_) public pure returns(bool){\n        return (price_ == msgValue_);\n    }\n    function refererAllowed(address msgSender_, address currentReferer_, address newReferer_) public pure returns(bool){\n        return (addressNotSet(currentReferer_) && isAddress(newReferer_) && isNotSelf(msgSender_, newReferer_));\n    }\n    function addressNotSet(address address_) public pure returns(bool){\n        return (address_ == 0x0);\n    }\n    function isAddress(address address_) public pure returns(bool){\n        return (address_ != 0x0);\n    }\n    function isNotSelf(address msgSender_, address compare_) public pure returns(bool){\n        return (msgSender_ != compare_);\n    }\n\n    /*==============================\n    =         BADGE SYSTEM         =\n    ==============================*/\n    function isFirstBadgeEle(uint256 badgeID_) public pure returns(bool){\n        return (badgeID_ == 0);\n    }\n    function isLastBadgeEle(uint256 badgeID_, uint256 badgeLength_) public pure returns(bool){\n        assert(badgeID_ <= SafeMathExt.sub(badgeLength_, 1));\n        return (badgeID_ == SafeMathExt.sub(badgeLength_, 1));\n    }\n\n    function roundUp(uint256 input_, uint256 decimals_) public pure returns(uint256){\n        return ((input_ + decimals_ - 1) / decimals_) * decimals_;\n    }\n\n    /*==============================\n    =          DIVI SPLIT          =\n    ==============================*/   \n    function calcShare(uint256 msgValue_, uint256 ratio_) public pure returns(uint256){\n        assert(ratio_ <= 100 && msgValue_ >= 0);\n        return SafeMathExt.div((SafeMathExt.mul(msgValue_, ratio_)), 100);\n    }\n    function calcDiviDistribution(uint256 value_, uint256 userCount_) public pure returns(uint256){\n        assert(value_ >= 0);\n        return SafeMathExt.div(value_, userCount_);\n    }\n}\n\ncontract BadgeFactoryInterface{\n\tfunction _initBadges(address admin_, uint256 badgeBasePrice_, uint256 badgeStartMultiplier_, uint256 badgeStartQuantity_) external;\n\tfunction _createNewBadge(address owner_, uint256 price_) external;\n\tfunction _setOwner(uint256 badgeID_, address owner_) external;\n\tfunction getOwner(uint256 badgeID_) public view returns(address);\n\tfunction _increasePrice(uint256 badgeID_) external;\n\tfunction getPrice(uint256 badgeID_) public view returns(uint256);\n\tfunction _increaseTotalDivis(uint256 badgeID_, uint256 divis_) external;\n\tfunction getTotalDivis(uint256 badgeID_) public view returns(uint256);\n\tfunction _setBuyTime(uint256 badgeID_, uint32 timeStamp_) external;\n\tfunction getBuyTime(uint256 badgeID_) public view returns(uint32);\n\tfunction getCreationTime(uint256 badgeID_) public view returns(uint32);\n\tfunction getChainLength() public view returns(uint256);\n}\n\ncontract TeamAmberInterface{\n    function distribute() public payable;\n}\n\ncontract Amber{\n\tusing SafeMathExt for uint256;\n    /*===============================================================================\n    =                      DATA SET                     DATA SET                    =\n    ===============================================================================*/\n    /*==============================\n    =          INTERFACES          =\n    ==============================*/\n    BadgeFactoryInterface internal _badgeFactory;\n    TeamAmberInterface internal _teamAmber;\n\n    /*==============================\n    =          CONSTANTS           =\n    ==============================*/\n    uint256 internal constant FINNEY = 10**15;\n    uint256 internal constant _sharePreviousOwnerRatio = 50;\n    uint256 internal constant _shareReferalRatio = 5;\n    uint256 internal constant _shareDistributionRatio = 45;\n\n    /*==============================\n    =          VARIABLES           =\n    ==============================*/\n    address internal _contractOwner;\n    address internal _admin;\n    uint256 internal _badgeBasePrice;\n    uint256 internal _startTime;\n\n    /*==============================\n    =        USER MAPPINGS         =\n    ==============================*/\n    mapping(address => uint256) private _balanceDivis;\n    mapping(address => address) private _referer;\n\n    /*==============================\n    =            EVENTS            =\n    ==============================*/\n    event onContractStart(uint256 startTime_);\n    event onRefererSet(address indexed user_, address indexed referer_);\n    event onBadgeBuy(uint256 indexed badgeID_, address indexed previousOwner_, address indexed buyer_, uint256 price_, uint256 newPrice_);\n    event onWithdraw(address indexed receiver_, uint256 amount_);\n\n    /*==============================\n    =          MODIFIERS           =\n    ==============================*/\n    modifier onlyContractOwner(){\n    \trequire(msg.sender == _contractOwner, 'Sender is not the contract owner.');\n    \t_;\n    }\n    modifier isNotAContract(){\n        require (msg.sender == tx.origin, 'Contracts are not allowed to interact.');\n        _;\n    }\n    modifier isRunning(){\n    \trequire(_startTime != 0 && _startTime <= now, 'The contract is not running yet.');\n    \t_;\n    }\n\n    /*===============================================================================\n    =                       FUNCTIONS                       FUNCTIONS               =\n    ===============================================================================*/\n    /*==============================\n    =           OWNER ONLY         =\n    ==============================*/\n    constructor(address admin_, address teamAmberAddress_) public{\n    \t_contractOwner = msg.sender;\n        _admin = admin_;\n        _teamAmber = TeamAmberInterface(teamAmberAddress_);\n    }\n\n    function initGame(address badgesFactoryAddress_, uint256 badgeBasePrice_, uint256 badgeStartMultiplier_, uint256 badgeStartQuantity_) external onlyContractOwner{\n        require(_badgeBasePrice == 0);\n\n        _badgeBasePrice = badgeBasePrice_;\n        _badgeFactory = BadgeFactoryInterface(badgesFactoryAddress_);\n        _badgeFactory._initBadges(_admin, badgeBasePrice_, badgeStartMultiplier_, badgeStartQuantity_);\n    }\n\n    function _startContract(uint256 delay_) external onlyContractOwner{\n    \trequire(_startTime == 0);\n        _startTime = now + delay_;\n\n        emit onContractStart(_startTime);\n    }\n\n    /*==============================\n    =             BUY              =\n    ==============================*/\n    //Hex Data: 0x7deb6025\n    function buy(uint256 badgeID_, address newReferer_) public payable isNotAContract isRunning{\n    \t_refererUpdate(msg.sender, newReferer_);\n    \t_buy(badgeID_, msg.sender, msg.value);\n    }\n\n    function _buy(uint256 badgeID_, address msgSender_, uint256 msgValue_) internal{\n        address previousOwner = _badgeFactory.getOwner(badgeID_);\n        require(PureAmber.isNotSelf(msgSender_, _badgeFactory.getOwner(badgeID_)), 'You can not buy from yourself.');\n        require(PureAmber.isValidBuy(_badgeFactory.getPrice(badgeID_), msgValue_), 'It is not a valid buy.');        \n\n        _diviSplit(badgeID_, previousOwner, msgSender_, msgValue_);\n        _extendBadges(badgeID_, msgSender_, _badgeBasePrice);\n        _badgeOwnerChange(badgeID_, msgSender_);\n        _badgeFactory._increasePrice(badgeID_);\n\n        emit onBadgeBuy (badgeID_, previousOwner, msgSender_, msgValue_, _badgeFactory.getPrice(badgeID_));\n    }\n\n    function _refererUpdate(address user_, address newReferer_) internal{\n    \tif (PureAmber.refererAllowed(user_, _referer[user_], newReferer_)){\n    \t\t_referer[user_] = newReferer_;\n    \t\temit onRefererSet(user_, newReferer_);\n    \t}\n    }\n\n    /*==============================\n    =         BADGE SYSTEM         =\n    ==============================*/\n    function _extendBadges(uint256 badgeID_, address owner_, uint256 price_) internal{\n        if (PureAmber.isLastBadgeEle(badgeID_, _badgeFactory.getChainLength())){\n            _badgeFactory._createNewBadge(owner_, price_);\n        }\n    }\n\n    function _badgeOwnerChange(uint256 badgeID_, address newOwner_) internal{      \n        _badgeFactory._setOwner(badgeID_, newOwner_);\n        _badgeFactory._setBuyTime(badgeID_, uint32(now));\n    }\n\n    /*==============================\n    =          DIVI SPLIT          =\n    ==============================*/\n    function _diviSplit(uint256 badgeID_, address previousOwner_, address msgSender_, uint256 msgValue_) internal{\n    \t_shareToPreviousOwner(previousOwner_, msgValue_, _sharePreviousOwnerRatio);\n    \t_shareToReferer(_referer[msgSender_], msgValue_, _shareReferalRatio);\n    \t_shareToDistribution(badgeID_, previousOwner_, msgValue_, _shareDistributionRatio);\n    }\n\n    function _shareToPreviousOwner(address previousOwner_, uint256 msgValue_, uint256 ratio_) internal{\n    \t_increasePlayerDivis(previousOwner_, PureAmber.calcShare(msgValue_, ratio_));\n    }\n\n    function _shareToReferer(address referer_, uint256 msgValue_, uint256 ratio_) internal{\n    \tif (PureAmber.addressNotSet(referer_)){\n    \t\t_increasePlayerDivis(_admin, PureAmber.calcShare(msgValue_, ratio_));\n    \t} else {\n    \t\t_increasePlayerDivis(referer_, PureAmber.calcShare(msgValue_, ratio_));\n    \t}\n    }\n\n    function _shareToDistribution(uint256 badgeID_, address previousOwner_, uint256 msgValue_, uint256 ratio_) internal{\n    \tuint256 share = PureAmber.calcShare(msgValue_, ratio_);\n\n    \tif (PureAmber.isFirstBadgeEle(badgeID_)){\n    \t\t_specialDistribution(previousOwner_, share);\n    \t} else {\n    \t\t_normalDistribution(badgeID_, PureAmber.calcDiviDistribution(share, badgeID_));\n    \t}\n    }\n\n    function _normalDistribution(uint256 badgeID_, uint256 divis_) internal{\n    \tfor(uint256 i = 0; i<badgeID_; i++){\n            _badgeFactory._increaseTotalDivis(i, divis_);\n            _increasePlayerDivis(_badgeFactory.getOwner(i), divis_);\n        }\n    }\n\n    function _specialDistribution(address previousOwner_, uint256 divis_) internal{\n        _badgeFactory._increaseTotalDivis(0, divis_);\n        _increasePlayerDivis(previousOwner_, divis_);\n    }\n\n    function _increasePlayerDivis(address user_, uint256 amount_) internal{\n        _balanceDivis[user_] = SafeMathExt.add(_balanceDivis[user_], amount_);\n    }\n\n    /*==============================\n    =           WITHDRAW           =\n    ==============================*/\n    //Hex Data: 0x0ed86f04\n    function withdrawDivis() public isNotAContract{\n    \t_withdrawDivis(msg.sender);\n    }\n\n    function _withdrawDivis(address msgSender_) internal{\n    \trequire (_balanceDivis[msgSender_] >= 0, 'Hack attempt: Sender does not have enough Divis to withdraw.');\n    \tuint256 payout = _balanceDivis[msgSender_];\n        _resetBalanceDivis(msgSender_);\n        _transferDivis(msgSender_, payout);\n\n        emit onWithdraw (msgSender_, payout);\n    }\n\n    function _transferDivis(address msgSender_, uint256 payout_) internal{\n    \tassert(address(this).balance >= payout_);\n    \tif(msgSender_ == _admin){\n    \t\t_teamAmber.distribute.value(payout_)();\n    \t} else {\n    \t\tmsgSender_.transfer(payout_); \t\t\n    \t}\n    }\n\n    function _resetBalanceDivis(address user_) internal{\n    \t_balanceDivis[user_] = 0;\n    }\n\n    /*==============================\n    =            HELPERS           =\n    ==============================*/\n    function getStartTime() public view returns (uint256){\n        return _startTime;\n    }\n\n    function getBalanceDivis(address user_) public view returns(uint256){\n    \treturn _balanceDivis[user_];\n    }\n\n    function getReferer(address user_) public view returns(address){\n    \treturn _referer[user_];\n    }\n\n    function getBalanceContract() public view returns(uint256){\n    \treturn address(this).balance;\n    }\n\n    function getBadges() public view returns(address[], uint256[], uint256[], uint32[], uint32[]){\n    \tuint256 length = _badgeFactory.getChainLength();\n    \taddress[] memory owner = new address[](length);\n    \tuint256[] memory price = new uint256[](length);\n    \tuint256[] memory totalDivis = new uint256[](length);\n    \tuint32[] memory buyTime = new uint32[](length);\n        uint32[] memory creationTime = new uint32[](length);\n\n        for (uint256 i = 0; i < length; i++) {\n           owner[i] = _badgeFactory.getOwner(i);\n           price[i] = _badgeFactory.getPrice(i);\n           totalDivis[i] = _badgeFactory.getTotalDivis(i);\n           buyTime[i] = _badgeFactory.getBuyTime(i);\n           creationTime[i] = _badgeFactory.getCreationTime(i);\n       }\n       return (owner, price, totalDivis, buyTime, creationTime);\n   }\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051604080611d3583398101604052805160209091015160028054600160a060020a0319908116331790915560038054600160a060020a0394851690831617905560018054939092169216919091179055611cc3806100726000396000f30060806040526004361061007f5763ffffffff60e060020a6000350416630ed86f0481146100845780633e9bee1b1461009b57806342a04fea146100ce57806366bd78fd1461024b5780636d03fa87146102605780637d49300d1461029d5780637deb6025146102c7578063c828371e146102de578063f08ea4cc146102f3575b600080fd5b34801561009057600080fd5b5061009961030b565b005b3480156100a757600080fd5b506100bc600160a060020a0360043516610393565b60408051918252519081900360200190f35b3480156100da57600080fd5b506100e36103ae565b60405180806020018060200180602001806020018060200186810386528b818151815260200191508051906020019060200280838360005b8381101561013357818101518382015260200161011b565b5050505090500186810385528a818151815260200191508051906020019060200280838360005b8381101561017257818101518382015260200161015a565b50505050905001868103845289818151815260200191508051906020019060200280838360005b838110156101b1578181015183820152602001610199565b50505050905001868103835288818151815260200191508051906020019060200280838360005b838110156101f05781810151838201526020016101d8565b50505050905001868103825287818151815260200191508051906020019060200280838360005b8381101561022f578181015183820152602001610217565b505050509050019a505050505050505050505060405180910390f35b34801561025757600080fd5b506100bc6108bb565b34801561026c57600080fd5b50610281600160a060020a03600435166108c0565b60408051600160a060020a039092168252519081900360200190f35b3480156102a957600080fd5b50610099600160a060020a03600435166024356044356064356108de565b610099600435600160a060020a0360243516610a34565b3480156102ea57600080fd5b506100bc610b33565b3480156102ff57600080fd5b50610099600435610b39565b333214610388576040805160e560020a62461bcd02815260206004820152602660248201527f436f6e74726163747320617265206e6f7420616c6c6f77656420746f20696e7460448201527f65726163742e0000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b61039133610c0b565b565b600160a060020a031660009081526006602052604090205490565b60608060608060606000606080606080606060008060009054906101000a9004600160a060020a0316600160a060020a0316638f2bab076040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561041457600080fd5b505af1158015610428573d6000803e3d6000fd5b505050506040513d602081101561043e57600080fd5b505160408051828152602080840282010190915290975087801561046c578160200160208202803883390190505b50955086604051908082528060200260200182016040528015610499578160200160208202803883390190505b509450866040519080825280602002602001820160405280156104c6578160200160208202803883390190505b509350866040519080825280602002602001820160405280156104f3578160200160208202803883390190505b50925086604051908082528060200260200182016040528015610520578160200160208202803883390190505b509150600090505b868110156108a85760008054604080517fc41a360a000000000000000000000000000000000000000000000000000000008152600481018590529051600160a060020a039092169263c41a360a926024808401936020939083900390910190829087803b15801561059857600080fd5b505af11580156105ac573d6000803e3d6000fd5b505050506040513d60208110156105c257600080fd5b505186518790839081106105d257fe5b600160a060020a03928316602091820290920181019190915260008054604080517fe7572230000000000000000000000000000000000000000000000000000000008152600481018790529051919094169363e7572230936024808301949193928390030190829087803b15801561064957600080fd5b505af115801561065d573d6000803e3d6000fd5b505050506040513d602081101561067357600080fd5b5051855186908390811061068357fe5b602090810290910181019190915260008054604080517f7dc5cc64000000000000000000000000000000000000000000000000000000008152600481018690529051600160a060020a0390921693637dc5cc649360248084019492938390030190829087803b1580156106f557600080fd5b505af1158015610709573d6000803e3d6000fd5b505050506040513d602081101561071f57600080fd5b5051845185908390811061072f57fe5b602090810290910181019190915260008054604080517f9c14c77b000000000000000000000000000000000000000000000000000000008152600481018690529051600160a060020a0390921693639c14c77b9360248084019492938390030190829087803b1580156107a157600080fd5b505af11580156107b5573d6000803e3d6000fd5b505050506040513d60208110156107cb57600080fd5b505183518490839081106107db57fe5b63ffffffff909216602092830290910182015260008054604080517f97ec23cb000000000000000000000000000000000000000000000000000000008152600481018690529051600160a060020a03909216936397ec23cb9360248084019492938390030190829087803b15801561085257600080fd5b505af1158015610866573d6000803e3d6000fd5b505050506040513d602081101561087c57600080fd5b5051825183908390811061088c57fe5b63ffffffff909216602092830290910190910152600101610528565b50939a9299509097509550909350915050565b303190565b600160a060020a039081166000908152600760205260409020541690565b600254600160a060020a03163314610966576040805160e560020a62461bcd02815260206004820152602160248201527f53656e646572206973206e6f742074686520636f6e7472616374206f776e657260448201527f2e00000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6004541561097357600080fd5b60048381556000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387811691909117808355600354604080517fce7ba91600000000000000000000000000000000000000000000000000000000815291841695820195909552602481018890526044810187905260648101869052935191169263ce7ba91692608480830193919282900301818387803b158015610a1657600080fd5b505af1158015610a2a573d6000803e3d6000fd5b5050505050505050565b333214610ab1576040805160e560020a62461bcd02815260206004820152602660248201527f436f6e74726163747320617265206e6f7420616c6c6f77656420746f20696e7460448201527f65726163742e0000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60055415801590610ac457504260055411155b1515610b1a576040805160e560020a62461bcd02815260206004820181905260248201527f54686520636f6e7472616374206973206e6f742072756e6e696e67207965742e604482015290519081900360640190fd5b610b243382610d11565b610b2f823334610e38565b5050565b60055490565b600254600160a060020a03163314610bc1576040805160e560020a62461bcd02815260206004820152602160248201527f53656e646572206973206e6f742074686520636f6e7472616374206f776e657260448201527f2e00000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60055415610bce57600080fd5b428101600581905560408051918252517fc95500414a933625aebaf804d96decf560ff6c63826e9ff60c61408e05bb004f9181900360200190a150565b600160a060020a038116600090815260066020526040812054811115610ca1576040805160e560020a62461bcd02815260206004820152603c60248201527f4861636b20617474656d70743a2053656e64657220646f6573206e6f7420686160448201527f766520656e6f75676820446976697320746f2077697468647261772e00000000606482015290519081900360840190fd5b50600160a060020a038116600090815260066020526040902054610cc482611336565b610cce8282611350565b604080518281529051600160a060020a038416917fccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc919081900360200190a25050565b600160a060020a038083166000818152600760209081526040918290205482517f5b8b4f9100000000000000000000000000000000000000000000000000000000815260048101949094528416602484015292841660448301525173b0d6cde34e2c79021891230dc6457eebfcaffe7492635b8b4f919260648082019391829003018186803b158015610da357600080fd5b505af4158015610db7573d6000803e3d6000fd5b505050506040513d6020811015610dcd57600080fd5b505115610b2f57600160a060020a03828116600081815260076020526040808220805473ffffffffffffffffffffffffffffffffffffffff19169486169485179055517fb3f1c8ed4ff0777d22e70236169841472c2775e96f5349e766a140ab2a579ec89190a35050565b60008054604080517fc41a360a000000000000000000000000000000000000000000000000000000008152600481018790529051600160a060020a039092169163c41a360a9160248082019260209290919082900301818787803b158015610e9f57600080fd5b505af1158015610eb3573d6000803e3d6000fd5b505050506040513d6020811015610ec957600080fd5b505160008054604080517fc41a360a00000000000000000000000000000000000000000000000000000000815260048101899052905193945073b0d6cde34e2c79021891230dc6457eebfcaffe7493637a91e53d938893600160a060020a03169263c41a360a9260248083019360209383900390910190829087803b158015610f5157600080fd5b505af1158015610f65573d6000803e3d6000fd5b505050506040513d6020811015610f7b57600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a039384166004820152929091166024830152516044808301926020929190829003018186803b158015610fc957600080fd5b505af4158015610fdd573d6000803e3d6000fd5b505050506040513d6020811015610ff357600080fd5b5051151561104b576040805160e560020a62461bcd02815260206004820152601e60248201527f596f752063616e206e6f74206275792066726f6d20796f757273656c662e0000604482015290519081900360640190fd5b60008054604080517fe757223000000000000000000000000000000000000000000000000000000000815260048101889052905173b0d6cde34e2c79021891230dc6457eebfcaffe749363bcc4f0ed93600160a060020a03169263e75722309260248083019360209383900390910190829087803b1580156110cc57600080fd5b505af11580156110e0573d6000803e3d6000fd5b505050506040513d60208110156110f657600080fd5b50516040805160e060020a63ffffffff8516028152600481019290925260248201869052516044808301926020929190829003018186803b15801561113a57600080fd5b505af415801561114e573d6000803e3d6000fd5b505050506040513d602081101561116457600080fd5b505115156111bc576040805160e560020a62461bcd02815260206004820152601660248201527f4974206973206e6f7420612076616c6964206275792e00000000000000000000604482015290519081900360640190fd5b6111c88482858561141d565b6111d58484600454611463565b6111df84846115f8565b60008054604080517fedb9548c000000000000000000000000000000000000000000000000000000008152600481018890529051600160a060020a039092169263edb9548c9260248084019382900301818387803b15801561124057600080fd5b505af1158015611254573d6000803e3d6000fd5b5050505082600160a060020a031681600160a060020a0316857f2686f82b0aa94a5654f3447b6942219f9bb3554040f9ab28ccff24f318c90322856000809054906101000a9004600160a060020a0316600160a060020a031663e75722308a6040518263ffffffff1660e060020a02815260040180828152602001915050602060405180830381600087803b1580156112ec57600080fd5b505af1158015611300573d6000803e3d6000fd5b505050506040513d602081101561131657600080fd5b50516040805192835260208301919091528051918290030190a450505050565b600160a060020a0316600090815260066020526040812055565b303181111561135b57fe5b600354600160a060020a03838116911614156113e257600160009054906101000a9004600160a060020a0316600160a060020a031663e4fc6b6d826040518263ffffffff1660e060020a0281526004016000604051808303818588803b1580156113c457600080fd5b505af11580156113d8573d6000803e3d6000fd5b5050505050610b2f565b604051600160a060020a0383169082156108fc029083906000818181858888f19350505050158015611418573d6000803e3d6000fd5b505050565b61142983826032611706565b600160a060020a038083166000908152600760205260409020546114509116826005611795565b61145d848483602d6118c2565b50505050565b73b0d6cde34e2c79021891230dc6457eebfcaffe7463c4dd5acc846000809054906101000a9004600160a060020a0316600160a060020a0316638f2bab076040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156114d057600080fd5b505af11580156114e4573d6000803e3d6000fd5b505050506040513d60208110156114fa57600080fd5b50516040805160e060020a63ffffffff861602815260048101939093526024830191909152516044808301926020929190829003018186803b15801561153f57600080fd5b505af4158015611553573d6000803e3d6000fd5b505050506040513d602081101561156957600080fd5b5051156114185760008054604080517fdceacb93000000000000000000000000000000000000000000000000000000008152600160a060020a038681166004830152602482018690529151919092169263dceacb93926044808201939182900301818387803b1580156115db57600080fd5b505af11580156115ef573d6000803e3d6000fd5b50505050505050565b60008054604080517f6205983900000000000000000000000000000000000000000000000000000000815260048101869052600160a060020a038581166024830152915191909216926362059839926044808201939182900301818387803b15801561166357600080fd5b505af1158015611677573d6000803e3d6000fd5b505060008054604080517f70e4b8090000000000000000000000000000000000000000000000000000000081526004810188905263ffffffff421660248201529051600160a060020a0390921694506370e4b8099350604480820193929182900301818387803b1580156116ea57600080fd5b505af11580156116fe573d6000803e3d6000fd5b505050505050565b6114188373b0d6cde34e2c79021891230dc6457eebfcaffe7463ab51902085856040518363ffffffff1660e060020a028152600401808381526020018281526020019250505060206040518083038186803b15801561176457600080fd5b505af4158015611778573d6000803e3d6000fd5b505050506040513d602081101561178e57600080fd5b5051611a8f565b604080517f579d94c0000000000000000000000000000000000000000000000000000000008152600160a060020a0385166004820152905173b0d6cde34e2c79021891230dc6457eebfcaffe749163579d94c0916024808301926020929190829003018186803b15801561180857600080fd5b505af415801561181c573d6000803e3d6000fd5b505050506040513d602081101561183257600080fd5b50511561170657600354604080517fab519020000000000000000000000000000000000000000000000000000000008152600481018590526024810184905290516118bd92600160a060020a03169173b0d6cde34e2c79021891230dc6457eebfcaffe749163ab51902091604480820192602092909190829003018186803b15801561176457600080fd5b611418565b600073b0d6cde34e2c79021891230dc6457eebfcaffe7463ab51902084846040518363ffffffff1660e060020a028152600401808381526020018281526020019250505060206040518083038186803b15801561191e57600080fd5b505af4158015611932573d6000803e3d6000fd5b505050506040513d602081101561194857600080fd5b5051604080517f8a80dfb100000000000000000000000000000000000000000000000000000000815260048101889052905191925073b0d6cde34e2c79021891230dc6457eebfcaffe7491638a80dfb191602480820192602092909190829003018186803b1580156119b957600080fd5b505af41580156119cd573d6000803e3d6000fd5b505050506040513d60208110156119e357600080fd5b5051156119f9576119f48482611ad2565b611a88565b611a888573b0d6cde34e2c79021891230dc6457eebfcaffe7463c287fa7284896040518363ffffffff1660e060020a028152600401808381526020018281526020019250505060206040518083038186803b158015611a5757600080fd5b505af4158015611a6b573d6000803e3d6000fd5b505050506040513d6020811015611a8157600080fd5b5051611b5c565b5050505050565b600160a060020a038216600090815260066020526040902054611ab29082611c81565b600160a060020a0390921660009081526006602052604090209190915550565b60008054604080517f75718e2c00000000000000000000000000000000000000000000000000000000815260048101849052602481018590529051600160a060020a03909216926375718e2c9260448084019382900301818387803b158015611b3a57600080fd5b505af1158015611b4e573d6000803e3d6000fd5b50505050610b2f8282611a8f565b60005b828110156114185760008054604080517f75718e2c00000000000000000000000000000000000000000000000000000000815260048101859052602481018690529051600160a060020a03909216926375718e2c9260448084019382900301818387803b158015611bcf57600080fd5b505af1158015611be3573d6000803e3d6000fd5b50505050611c796000809054906101000a9004600160a060020a0316600160a060020a031663c41a360a836040518263ffffffff1660e060020a02815260040180828152602001915050602060405180830381600087803b158015611c4757600080fd5b505af1158015611c5b573d6000803e3d6000fd5b505050506040513d6020811015611c7157600080fd5b505183611a8f565b600101611b5f565b600082820183811015611c9057fe5b93925050505600a165627a7a72305820e966811642418f241f22e010340931e41701c41d694ca7e3830ef2a2ac9ba5020029000000000000000000000000ae5ac19f938f8338920e630cc9a8ecd6ce89bca10000000000000000000000001ce75bfd524489e7dd8678d4905cbd8f47f22083",
  "constructorArguments": "000000000000000000000000ae5ac19f938f8338920e630cc9a8ecd6ce89bca10000000000000000000000001ce75bfd524489e7dd8678d4905cbd8f47f22083",
  "libraries": [
    {
      "name": "PureAmber",
      "address": "0xb0d6cdE34E2C79021891230Dc6457eEBFcaFFE74"
    }
  ]
}