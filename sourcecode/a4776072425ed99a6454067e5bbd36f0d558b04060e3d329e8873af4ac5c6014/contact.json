{
  "address": "0xe2ca8e9eea579da2276be4267320fd9069645431",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CrowdsaleWPTByRounds",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-18\n*/\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    if (_a == 0) {\n      return 0;\n    }\n\n    uint256 c = _a * _b;\n    require(c / _a == _b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    require(_b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    require(_b <= _a);\n    uint256 c = _a - _b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    uint256 c = _a + _b;\n    require(c >= _a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n */\nlibrary SafeERC20 {\n  function safeTransfer(\n    ERC20 _token,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transfer(_to, _value));\n  }\n\n  function safeTransferFrom(\n    ERC20 _token,\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transferFrom(_from, _to, _value));\n  }\n\n  function safeApprove(\n    ERC20 _token,\n    address _spender,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.approve(_spender, _value));\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n}\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n  function totalSupply() public view returns (uint256);\n\n  function balanceOf(address _who) public view returns (uint256);\n\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transfer(address _to, uint256 _value) public returns (bool);\n\n  function approve(address _spender, uint256 _value)\n    public returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\ncontract AddressesFilterFeature is Ownable {}\ncontract ERC20Basic {}\ncontract BasicToken is ERC20Basic {}\ncontract StandardToken is ERC20, BasicToken {}\ncontract MintableToken is AddressesFilterFeature, StandardToken {}\n\ncontract Token is MintableToken {\n      function mint(address, uint256) public returns (bool);\n}\n/**\n * @title CrowdsaleWPTByRounds\n * @dev This is an example of a fully fledged crowdsale.\n * The way to add new features to a base crowdsale is by multiple inheritance.\n * In this example we are providing following extensions:\n * CappedCrowdsale - sets a max boundary for raised funds\n * RefundableCrowdsale - set a min goal to be reached and returns funds if it's not met\n *\n * After adding multiple features it's good practice to run integration tests\n * to ensure that subcontracts works together as intended.\n */\n// XXX There doesn't seem to be a way to split this line that keeps solium\n// happy. See:\n// https://github.com/duaraghav8/Solium/issues/205\n// --elopio - 2018-05-10\n// solium-disable-next-line max-len\ncontract CrowdsaleWPTByRounds is Ownable {\n  using SafeMath for uint256;\n  using SafeERC20 for ERC20;\n\n  // The token being sold\n  ERC20 public token;\n\n  // Address where funds are collected\n  address public wallet;\n\n  // Address of tokens minter\n  Token public minterContract;\n\n  // How many token units a buyer gets per wei.\n  // The rate is the conversion between wei and the smallest and indivisible token unit.\n  uint256 public rate;\n\n  // Amount of tokens raised\n  uint256 public tokensRaised;\n\n  // Cap for current round\n  uint256 public cap;\n\n  // Time ranges for current round\n  uint256 public openingTime;\n  uint256 public closingTime;\n\n  //Minimal value of investment\n  uint public minInvestmentValue;\n  \n  //Flags to on/off checks for buy Token\n  bool public checksOn;\n\n  //Amount of gas for internal transactions\n  uint256 public gasAmount;\n\n  /**\n   * @dev Allows the owner to set the minter contract.\n   * @param _minterAddr the minter address\n   */\n  function setMinter(address _minterAddr) public onlyOwner {\n    minterContract = Token(_minterAddr);\n  }\n\n  /**\n   * @dev Reverts if not in crowdsale time range.\n   */\n  modifier onlyWhileOpen {\n    // solium-disable-next-line security/no-block-members\n    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n    _;\n  }\n\n  /**\n   * Event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */\n  event TokenPurchase(\n    address indexed purchaser,\n    address indexed beneficiary,\n    uint256 value,\n    uint256 amount\n    );\n\n  /**\n   * Event for token transfer\n   * @param _from who paid for the tokens\n   * @param _to who got the tokens\n   * @param amount amount of tokens purchased\n   * @param isDone flag of success of transfer\n   */\n  event TokensTransfer(\n    address indexed _from,\n    address indexed _to,\n    uint256 amount,\n    bool isDone\n    );\n\nconstructor () public {\n    rate = 400;\n    wallet = 0xeA9cbceD36a092C596e9c18313536D0EEFacff46;\n    cap = 400000000000000000000000;\n    openingTime = 1534558186;\n    closingTime = 1535320800;\n\n    minInvestmentValue = 0.02 ether;\n    \n    checksOn = true;\n    gasAmount = 25000;\n  }\n\n   /**\n   * @dev Checks whether the cap has been reached.\n   * @return Whether the cap was reached\n   */\n  function capReached() public view returns (bool) {\n    return tokensRaised >= cap;\n  }\n\n   /**\n   * @dev Correction of current rate.\n   */\n  function changeRate(uint256 newRate) public onlyOwner {\n    rate = newRate;\n  }\n\n   /**\n   * @dev Close current round.\n   */\n  function closeRound() public onlyOwner {\n    closingTime = block.timestamp + 1;\n  }\n\n   /**\n   * @dev Set token address.\n   */\n  function setToken(ERC20 _token) public onlyOwner {\n    token = _token;\n  }\n\n   /**\n   * @dev Set address od deposit wallet.\n   */\n  function setWallet(address _wallet) public onlyOwner {\n    wallet = _wallet;\n  }\n\n   /**\n   * @dev Change minimal amount of investment.\n   */\n  function changeMinInvest(uint256 newMinValue) public onlyOwner {\n    rate = newMinValue;\n  }\n\n   /**\n   * @dev Flag to sell WPT without checks.\n   */\n  function setChecksOn(bool _checksOn) public onlyOwner {\n    checksOn = _checksOn;\n  }\n\n   /**\n   * @dev Set amount of gas for internal transactions.\n   */\n  function setGasAmount(uint256 _gasAmount) public onlyOwner {\n    gasAmount = _gasAmount;\n  }\n\n   /**\n   * @dev Set cap for current round.\n   */\n  function setCap(uint256 _newCap) public onlyOwner {\n    cap = _newCap;\n  }\n\n   /**\n   * @dev Start new crowdsale round if already not started.\n   */\n  function startNewRound(uint256 _rate, address _wallet, ERC20 _token, uint256 _cap, uint256 _openingTime, uint256 _closingTime) payable public onlyOwner {\n    require(!hasOpened());\n    rate = _rate;\n    wallet = _wallet;\n    token = _token;\n    cap = _cap;\n    openingTime = _openingTime;\n    closingTime = _closingTime;\n  }\n\n  /**\n   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n   * @return Whether crowdsale period has elapsed\n   */\n  function hasClosed() public view returns (bool) {\n    // solium-disable-next-line security/no-block-members\n    return block.timestamp > closingTime;\n  }\n\n  /**\n   * @dev Checks whether the period in which the crowdsale is open.\n   * @return Whether crowdsale period has opened\n   */\n  function hasOpened() public view returns (bool) {\n    // solium-disable-next-line security/no-block-members\n    return (openingTime < block.timestamp && block.timestamp < closingTime);\n  }\n\n  // -----------------------------------------\n  // Crowdsale external interface\n  // -----------------------------------------\n\n  /**\n   * @dev fallback function ***DO NOT OVERRIDE***\n   */\n  function () payable external {\n    buyTokens(msg.sender);\n  }\n\n  /**\n   * @dev low level token purchase ***DO NOT OVERRIDE***\n   * @param _beneficiary Address performing the token purchase\n   */\n  function buyTokens(address _beneficiary) payable public{\n\n    uint256 weiAmount = msg.value;\n    if (checksOn) {\n        _preValidatePurchase(_beneficiary, weiAmount);\n    }\n    \n    // calculate token amount to be created\n    uint256 tokens = _getTokenAmount(weiAmount);\n\n    // update state\n    tokensRaised = tokensRaised.add(tokens);\n\n    minterContract.mint(_beneficiary, tokens);\n    \n    emit TokenPurchase(\n      msg.sender,\n      _beneficiary,\n      weiAmount,\n      tokens\n    );\n\n    _forwardFunds();\n  }\n\n  /**\n   * @dev Extend parent behavior requiring purchase to respect the funding cap.\n   * @param _beneficiary Token purchaser\n   *  _weiAmount Amount of wei contributed\n   */\n  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount)\n  internal\n  view\n  onlyWhileOpen\n  {\n    require(_beneficiary != address(0));\n    require(_weiAmount != 0 && _weiAmount > minInvestmentValue);\n    require(tokensRaised.add(_getTokenAmount(_weiAmount)) <= cap);\n  }\n\n  /**\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n   * @param _beneficiary Address performing the token purchase\n   * @param _tokenAmount Number of tokens to be emitted\n   */\n  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n    token.safeTransfer(_beneficiary, _tokenAmount);\n  }\n\n  /**\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n   * @param _beneficiary Address receiving the tokens\n   * @param _tokenAmount Number of tokens to be purchased\n   */\n  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n    _deliverTokens(_beneficiary, _tokenAmount);\n  }\n\n  /**\n   * @dev Override to extend the way in which ether is converted to tokens.\n   * @param _weiAmount Value in wei to be converted into tokens\n   * @return Number of tokens that can be purchased with the specified _weiAmount\n   */\n  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n    return _weiAmount.mul(rate);\n  }\n\n  /**\n   * @dev Determines how ETH is stored/forwarded on purchases.\n   */\n  function _forwardFunds() internal {\n    bool isTransferDone = wallet.call.value(msg.value).gas(gasAmount)();\n    emit TokensTransfer (\n        msg.sender,\n        wallet,\n        msg.value,\n        isTransferDone\n        );\n  }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060008054600160a060020a031990811633179091556101906004556002805490911673ea9cbced36a092c596e9c18313536d0eefacff461790556954b40b1f852bda000000600655635b777fea600755635b8322e060085566470de4df820000600955600a805460ff191660011790556161a8600b55610a7e806100966000396000f3006080604052600436106101695763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630c8f78fb8114610174578063144fa6d71461018c5780631515bc2b146101ad5780632c4e722e146101d6578063355274ea146101fd57806347786d37146102125780634b6753bc1461022a5780634f9359451461023f578063521eb273146102545780635bd7ebc51461028557806367b50af91461029d5780636ea6b71b146102b2578063715018a6146102c757806374e7493b1461028557806385d37e97146102dc5780638b6d6f1d146103025780638da5cb5b1461031757806392f002331461032c578063b7a8807c14610341578063be8eef8e14610356578063d3e837cb1461036b578063deaa59df14610385578063e278fe6f146103a6578063ec8ac4d8146103bb578063f2fde38b146103cf578063fc0c546a146103f0578063fca3b5aa14610405578063fd9304cd14610426575b6101723361043b565b005b34801561018057600080fd5b50610172600435610567565b34801561019857600080fd5b50610172600160a060020a0360043516610583565b3480156101b957600080fd5b506101c26105c9565b604080519115158252519081900360200190f35b3480156101e257600080fd5b506101eb6105d1565b60408051918252519081900360200190f35b34801561020957600080fd5b506101eb6105d7565b34801561021e57600080fd5b506101726004356105dd565b34801561023657600080fd5b506101eb6105f9565b34801561024b57600080fd5b506101c26105ff565b34801561026057600080fd5b5061026961060a565b60408051600160a060020a039092168252519081900360200190f35b34801561029157600080fd5b50610172600435610619565b3480156102a957600080fd5b506101eb610635565b3480156102be57600080fd5b506101eb61063b565b3480156102d357600080fd5b50610172610641565b610172600435600160a060020a036024358116906044351660643560843560a4356106ad565b34801561030e57600080fd5b506101c2610727565b34801561032357600080fd5b50610269610730565b34801561033857600080fd5b5061026961073f565b34801561034d57600080fd5b506101eb61074e565b34801561036257600080fd5b506101c2610754565b34801561037757600080fd5b50610172600435151561076d565b34801561039157600080fd5b50610172600160a060020a0360043516610797565b3480156103b257600080fd5b506101726107dd565b610172600160a060020a036004351661043b565b3480156103db57600080fd5b50610172600160a060020a03600435166107fd565b3480156103fc57600080fd5b50610269610820565b34801561041157600080fd5b50610172600160a060020a036004351661082f565b34801561043257600080fd5b506101eb610875565b600a54349060009060ff161561045557610455838361087b565b61045e826108f7565b600554909150610474908263ffffffff61091416565b600555600354604080517f40c10f19000000000000000000000000000000000000000000000000000000008152600160a060020a03868116600483015260248201859052915191909216916340c10f199160448083019260209291908290030181600087803b1580156104e657600080fd5b505af11580156104fa573d6000803e3d6000fd5b505050506040513d602081101561051057600080fd5b505060408051838152602081018390528151600160a060020a0386169233927f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad18929081900390910190a3610562610931565b505050565b600054600160a060020a0316331461057e57600080fd5b600b55565b600054600160a060020a0316331461059a57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600854421190565b60045481565b60065481565b600054600160a060020a031633146105f457600080fd5b600655565b60085481565b600654600554101590565b600254600160a060020a031681565b600054600160a060020a0316331461063057600080fd5b600455565b600b5481565b60055481565b600054600160a060020a0316331461065857600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031633146106c457600080fd5b6106cc610754565b156106d657600080fd5b60049590955560028054600160a060020a0395861673ffffffffffffffffffffffffffffffffffffffff19918216179091556001805494909516931692909217909255600691909155600755600855565b600a5460ff1681565b600054600160a060020a031681565b600354600160a060020a031681565b60075481565b600042600754108015610768575060085442105b905090565b600054600160a060020a0316331461078457600080fd5b600a805460ff1916911515919091179055565b600054600160a060020a031633146107ae57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a031633146107f457600080fd5b60014201600855565b600054600160a060020a0316331461081457600080fd5b61081d816109a7565b50565b600154600160a060020a031681565b600054600160a060020a0316331461084657600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60095481565b600754421015801561088f57506008544211155b151561089a57600080fd5b600160a060020a03821615156108af57600080fd5b80158015906108bf575060095481115b15156108ca57600080fd5b6006546108e86108d9836108f7565b6005549063ffffffff61091416565b11156108f357600080fd5b5050565b600061090e60045483610a2490919063ffffffff16565b92915050565b60008282018381101561092657600080fd5b8091505b5092915050565b600254600b54604051600092600160a060020a03169190349084818181858888f16002546040805134815283151560208201528151939850600160a060020a0390921696503395507fa1164c4ee20dd1e5183c76b82f88cb353bc0d88be072d1f643505531a464608a945090829003019150a350565b600160a060020a03811615156109bc57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600080831515610a37576000915061092a565b50828202828482811515610a4757fe5b041461092657600080fd00a165627a7a72305820026720a6b24b7041c7e90cee68b9b8258a999dea3f8113501bcfb44262d6c6ff0029"
}