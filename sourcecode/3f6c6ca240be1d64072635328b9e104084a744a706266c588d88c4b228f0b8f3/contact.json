{
  "address": "0x4cc19356f2d37338b9802aa8e8fc58b0373296e7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SelfKeyToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-06\n*/\n\npragma solidity ^0.4.18;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n\n\n\n\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    assert(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n    assert(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    assert(token.approve(spender, value));\n  }\n}\n\n\n\n/**\n * @title CrowdsaleConfig\n * @dev Holds all constants for SelfKeyCrowdsale contract\n*/\ncontract CrowdsaleConfig {\n    uint256 public constant TOKEN_DECIMALS = 18;\n    uint256 public constant MIN_TOKEN_UNIT = 10 ** uint256(TOKEN_DECIMALS);\n\n    // Initial distribution amounts\n    uint256 public constant TOTAL_SUPPLY_CAP = 6000000000 * MIN_TOKEN_UNIT;\n\n    // 33% of the total supply cap\n    uint256 public constant SALE_CAP = 1980000000 * MIN_TOKEN_UNIT;\n\n    // Minimum cap per purchaser on public sale = $100 in KEY (at $0.015)\n    uint256 public constant PURCHASER_MIN_TOKEN_CAP = 6666 * MIN_TOKEN_UNIT;\n\n    // Maximum cap per purchaser on first day of public sale = $3,000 in KEY (at $0.015)\n    uint256 public constant PURCHASER_MAX_TOKEN_CAP_DAY1 = 200000 * MIN_TOKEN_UNIT;\n\n    // Maximum cap per purchaser on public sale = $18,000 in KEY (at $0.015)\n    uint256 public constant PURCHASER_MAX_TOKEN_CAP = 1200000 * MIN_TOKEN_UNIT;\n\n    // 16.5%\n    uint256 public constant FOUNDATION_POOL_TOKENS = 876666666 * MIN_TOKEN_UNIT;\n    uint256 public constant FOUNDATION_POOL_TOKENS_VESTED = 113333334 * MIN_TOKEN_UNIT;\n\n    // Approx 33%\n    uint256 public constant COMMUNITY_POOL_TOKENS = 1980000000 * MIN_TOKEN_UNIT;\n\n    // Founders' distribution. Total = 16.5%\n    uint256 public constant FOUNDERS_TOKENS = 330000000 * MIN_TOKEN_UNIT;\n    uint256 public constant FOUNDERS_TOKENS_VESTED_1 = 330000000 * MIN_TOKEN_UNIT;\n    uint256 public constant FOUNDERS_TOKENS_VESTED_2 = 330000000 * MIN_TOKEN_UNIT;\n\n    // 1% for legal advisors\n    uint256 public constant LEGAL_EXPENSES_1_TOKENS = 54000000 * MIN_TOKEN_UNIT;\n    uint256 public constant LEGAL_EXPENSES_2_TOKENS = 6000000 * MIN_TOKEN_UNIT;\n\n    // KEY price in USD (thousandths)\n    uint256 public constant TOKEN_PRICE_THOUSANDTH = 15;  // $0.015 per KEY\n\n    // Contract wallet addresses for initial allocation\n    address public constant CROWDSALE_WALLET_ADDR = 0xE0831b1687c9faD3447a517F9371E66672505dB0;\n    address public constant FOUNDATION_POOL_ADDR = 0xD68947892Ef4D94Cdef7165b109Cf6Cd3f58A8e8;\n    address public constant FOUNDATION_POOL_ADDR_VEST = 0xd0C24Bb82e71A44eA770e84A3c79979F9233308D;\n    address public constant COMMUNITY_POOL_ADDR = 0x0506c5485AE54aB14C598Ef16C459409E5d8Fc03;\n    address public constant FOUNDERS_POOL_ADDR = 0x4452d6454e777743a5Ee233fbe873055008fF528;\n    address public constant LEGAL_EXPENSES_ADDR_1 = 0xb57911380F13A0a9a6Ba6562248674B5f56D7BFE;\n    address public constant LEGAL_EXPENSES_ADDR_2 = 0x9be281CdcF34B3A01468Ad1008139410Ba5BB2fB;\n\n    // 6 months period, in seconds, for pre-commitment half-vesting\n    uint64 public constant PRECOMMITMENT_VESTING_SECONDS = 15552000;\n}\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\n/* solhint-disable not-rely-on-time */\n\n\n\n\n\n\n\n\n\n/**\n * @title SelfKeyToken\n * @dev SelfKey Token implementation.\n */\ncontract SelfKeyToken is MintableToken {\n    string public constant name = 'SelfKey'; //solhint-disable-line const-name-snakecase\n    string public constant symbol = 'KEY'; //solhint-disable-line const-name-snakecase\n    uint256 public constant decimals = 18; //solhint-disable-line const-name-snakecase\n\n    uint256 public cap;\n    bool private transfersEnabled = false;\n\n    event Burned(address indexed burner, uint256 value);\n\n    /**\n     * @dev Only the contract owner can transfer without restrictions.\n     *      Regular holders need to wait until sale is finalized.\n     * @param _sender — The address sending the tokens\n     * @param _value — The number of tokens to send\n     */\n    modifier canTransfer(address _sender, uint256 _value) {\n        require(transfersEnabled || _sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Constructor that sets a maximum supply cap.\n     * @param _cap — The maximum supply cap.\n     */\n    function SelfKeyToken(uint256 _cap) public {\n        cap = _cap;\n    }\n\n    /**\n     * @dev Overrides MintableToken.mint() for restricting supply under cap\n     * @param _to — The address to receive minted tokens\n     * @param _value — The number of tokens to mint\n     */\n    function mint(address _to, uint256 _value) public onlyOwner canMint returns (bool) {\n        require(totalSupply.add(_value) <= cap);\n        return super.mint(_to, _value);\n    }\n\n    /**\n     * @dev Checks modifier and allows transfer if tokens are not locked.\n     * @param _to — The address to receive tokens\n     * @param _value — The number of tokens to send\n     */\n    function transfer(address _to, uint256 _value)\n        public canTransfer(msg.sender, _value) returns (bool)\n    {\n        return super.transfer(_to, _value);\n    }\n\n    /**\n     * @dev Checks modifier and allows transfer if tokens are not locked.\n     * @param _from — The address to send tokens from\n     * @param _to — The address to receive tokens\n     * @param _value — The number of tokens to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value)\n        public canTransfer(_from, _value) returns (bool)\n    {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    /**\n     * @dev Enables token transfers.\n     *      Called when the token sale is successfully finalized\n     */\n    function enableTransfers() public onlyOwner {\n        transfersEnabled = true;\n    }\n\n    /**\n    * @dev Burns a specific number of tokens.\n    * @param _value — The number of tokens to be burned.\n    */\n    function burn(uint256 _value) public onlyOwner {\n        require(_value > 0);\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Burned(burner, _value);\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @title TokenTimelock\n * @dev TokenTimelock is a token holder contract that will allow a\n * beneficiary to extract the tokens after a given release time\n */\ncontract TokenTimelock {\n  using SafeERC20 for ERC20Basic;\n\n  // ERC20 basic token contract being held\n  ERC20Basic public token;\n\n  // beneficiary of tokens after they are released\n  address public beneficiary;\n\n  // timestamp when token release is enabled\n  uint256 public releaseTime;\n\n  function TokenTimelock(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\n    require(_releaseTime > now);\n    token = _token;\n    beneficiary = _beneficiary;\n    releaseTime = _releaseTime;\n  }\n\n  /**\n   * @notice Transfers tokens held by timelock to beneficiary.\n   */\n  function release() public {\n    require(now >= releaseTime);\n\n    uint256 amount = token.balanceOf(this);\n    require(amount > 0);\n\n    token.safeTransfer(beneficiary, amount);\n  }\n}\n\n\n\n\n\n\n/**\n * @title RefundVault\n * @dev This contract is used for storing funds while a crowdsale\n * is in progress. Supports refunding the money if crowdsale fails,\n * and forwarding it if crowdsale is successful.\n */\ncontract RefundVault is Ownable {\n  using SafeMath for uint256;\n\n  enum State { Active, Refunding, Closed }\n\n  mapping (address => uint256) public deposited;\n  address public wallet;\n  State public state;\n\n  event Closed();\n  event RefundsEnabled();\n  event Refunded(address indexed beneficiary, uint256 weiAmount);\n\n  function RefundVault(address _wallet) public {\n    require(_wallet != address(0));\n    wallet = _wallet;\n    state = State.Active;\n  }\n\n  function deposit(address investor) onlyOwner public payable {\n    require(state == State.Active);\n    deposited[investor] = deposited[investor].add(msg.value);\n  }\n\n  function close() onlyOwner public {\n    require(state == State.Active);\n    state = State.Closed;\n    Closed();\n    wallet.transfer(this.balance);\n  }\n\n  function enableRefunds() onlyOwner public {\n    require(state == State.Active);\n    state = State.Refunding;\n    RefundsEnabled();\n  }\n\n  function refund(address investor) public {\n    require(state == State.Refunding);\n    uint256 depositedValue = deposited[investor];\n    deposited[investor] = 0;\n    investor.transfer(depositedValue);\n    Refunded(investor, depositedValue);\n  }\n}\n\n\n\n/**\n * @title SelfKeyCrowdsale\n * @dev SelfKey Token Crowdsale implementation.\n */\n// solhint-disable-next-line max-states-count\ncontract SelfKeyCrowdsale is Ownable, CrowdsaleConfig {\n    using SafeMath for uint256;\n    using SafeERC20 for SelfKeyToken;\n\n    // whitelist of addresses that can perform precommitments and KYC verifications\n    mapping(address => bool) public isVerifier;\n\n    // Token contract\n    SelfKeyToken public token;\n\n    uint64 public startTime;\n    uint64 public endTime;\n\n    // Minimum tokens expected to sell\n    uint256 public goal;\n\n    // How many tokens a buyer gets per ETH\n    uint256 public rate = 51800;\n\n    // ETH price in USD, can be later updated until start date\n    uint256 public ethPrice = 777;\n\n    // Total amount of tokens purchased, including pre-sale\n    uint256 public totalPurchased = 0;\n\n    mapping(address => bool) public kycVerified;\n    mapping(address => uint256) public tokensPurchased;\n\n    // a mapping of dynamically instantiated token timelocks for each pre-commitment beneficiary\n    mapping(address => address) public vestedTokens;\n\n    bool public isFinalized = false;\n\n    // Token Timelocks\n    TokenTimelock public foundersTimelock1;\n    TokenTimelock public foundersTimelock2;\n    TokenTimelock public foundationTimelock;\n\n    // Vault to hold funds until crowdsale is finalized. Allows refunding if crowdsale is not successful.\n    RefundVault public vault;\n\n    // Crowdsale events\n    event TokenPurchase(\n        address indexed purchaser,\n        address indexed beneficiary,\n        uint256 value,\n        uint256 amount\n    );\n\n    event VerifiedKYC(address indexed participant);\n\n    event AddedPrecommitment(\n        address indexed participant,\n        uint256 tokensAllocated\n    );\n\n    event Finalized();\n\n    modifier verifierOnly() {\n        require(isVerifier[msg.sender]);\n        _;\n    }\n\n    /**\n     * @dev Crowdsale contract constructor\n     * @param _startTime — Unix timestamp representing the crowdsale start time\n     * @param _endTime — Unix timestamp representing the crowdsale start time\n     * @param _goal — Minimum amount of tokens expected to sell.\n     */\n    function SelfKeyCrowdsale(\n        uint64 _startTime,\n        uint64 _endTime,\n        uint256 _goal\n    ) public\n    {\n        require(_endTime > _startTime);\n\n        // sets contract owner as a verifier\n        isVerifier[msg.sender] = true;\n\n        token = new SelfKeyToken(TOTAL_SUPPLY_CAP);\n\n        // mints all possible tokens to the crowdsale contract\n        token.mint(address(this), TOTAL_SUPPLY_CAP);\n        token.finishMinting();\n\n        startTime = _startTime;\n        endTime = _endTime;\n        goal = _goal;\n\n        vault = new RefundVault(CROWDSALE_WALLET_ADDR);\n\n        // Set timelocks to 6 months and a year after startTime, respectively\n        uint64 sixMonthLock = uint64(startTime + 15552000);\n        uint64 yearLock = uint64(startTime + 31104000);\n\n        // Instantiation of token timelocks\n        foundersTimelock1 = new TokenTimelock(token, FOUNDERS_POOL_ADDR, sixMonthLock);\n        foundersTimelock2 = new TokenTimelock(token, FOUNDERS_POOL_ADDR, yearLock);\n        foundationTimelock = new TokenTimelock(token, FOUNDATION_POOL_ADDR_VEST, yearLock);\n\n        // Genesis allocation of tokens\n        token.safeTransfer(FOUNDATION_POOL_ADDR, FOUNDATION_POOL_TOKENS);\n        token.safeTransfer(COMMUNITY_POOL_ADDR, COMMUNITY_POOL_TOKENS);\n        token.safeTransfer(FOUNDERS_POOL_ADDR, FOUNDERS_TOKENS);\n        token.safeTransfer(LEGAL_EXPENSES_ADDR_1, LEGAL_EXPENSES_1_TOKENS);\n        token.safeTransfer(LEGAL_EXPENSES_ADDR_2, LEGAL_EXPENSES_2_TOKENS);\n\n        // Allocation of vested tokens\n        token.safeTransfer(foundersTimelock1, FOUNDERS_TOKENS_VESTED_1);\n        token.safeTransfer(foundersTimelock2, FOUNDERS_TOKENS_VESTED_2);\n        token.safeTransfer(foundationTimelock, FOUNDATION_POOL_TOKENS_VESTED);\n    }\n\n    /**\n     * @dev Fallback function is used to buy tokens.\n     *      It's the only entry point since `buyTokens` is internal\n     */\n    function () public payable {\n        buyTokens(msg.sender);\n    }\n\n    /**\n     * @dev Adds an address to the whitelist of Verifiers\n     * @param _address - address of the verifier\n     */\n    function addVerifier (address _address) public onlyOwner {\n        isVerifier[_address] = true;\n    }\n\n    /**\n     * @dev Removes an address from the whitelist of Verifiers\n     * @param _address - address of the verifier to be removed\n     */\n    function removeVerifier (address _address) public onlyOwner {\n        isVerifier[_address] = false;\n    }\n\n    /**\n     * @dev Sets a new start date as long as token hasn't started yet\n     * @param _startTime - unix timestamp of the new start time\n     */\n    function setStartTime (uint64 _startTime) public onlyOwner {\n        require(now < startTime);\n        require(_startTime > now);\n        require(_startTime < endTime);\n\n        startTime = _startTime;\n    }\n\n    /**\n     * @dev Sets a new end date as long as end date hasn't been reached\n     * @param _endTime - unix timestamp of the new end time\n     */\n    function setEndTime (uint64 _endTime) public onlyOwner {\n        require(now < endTime);\n        require(_endTime > now);\n        require(_endTime > startTime);\n\n        endTime = _endTime;\n    }\n\n    /**\n     * @dev Updates the ETH/USD conversion rate as long as the public sale hasn't started\n     * @param _ethPrice - Updated conversion rate\n     */\n    function setEthPrice(uint256 _ethPrice) public onlyOwner {\n        require(now < startTime);\n        require(_ethPrice > 0);\n\n        ethPrice = _ethPrice;\n        rate = ethPrice.mul(1000).div(TOKEN_PRICE_THOUSANDTH);\n    }\n\n    /**\n     * @dev Must be called after crowdsale ends, to do some extra finalization\n     *      work. Calls the contract's finalization function.\n     */\n    function finalize() public onlyOwner {\n        require(now > startTime);\n        require(!isFinalized);\n\n        finalization();\n        Finalized();\n\n        isFinalized = true;\n    }\n\n    /**\n     * @dev If crowdsale is unsuccessful, a refund can be claimed back\n     */\n    function claimRefund(address participant) public {\n        // requires sale to be finalized and goal not reached,\n        require(isFinalized);\n        require(!goalReached());\n\n        vault.refund(participant);\n    }\n\n    /**\n     * @dev If crowdsale is unsuccessful, participants can claim refunds\n     */\n    function goalReached() public constant returns (bool) {\n        return totalPurchased >= goal;\n    }\n\n    /**\n     * @dev Release time-locked tokens\n     */\n    function releaseLockFounders1() public {\n        foundersTimelock1.release();\n    }\n\n    function releaseLockFounders2() public {\n        foundersTimelock2.release();\n    }\n\n    function releaseLockFoundation() public {\n        foundationTimelock.release();\n    }\n\n    /**\n     * @dev Release time-locked tokens for any vested address\n     */\n    function releaseLock(address participant) public {\n        require(vestedTokens[participant] != 0x0);\n\n        TokenTimelock timelock = TokenTimelock(vestedTokens[participant]);\n        timelock.release();\n    }\n\n    /**\n     * @dev Verifies KYC for given participant.\n     *      This enables token purchases by the participant addres\n     */\n    function verifyKYC(address participant) public verifierOnly {\n        kycVerified[participant] = true;\n\n        VerifiedKYC(participant);\n    }\n\n    /**\n     * @dev Adds an address for pre-sale commitments made off-chain.\n     * @param beneficiary — Address of the already verified participant\n     * @param tokensAllocated — Exact amount of KEY tokens (including decimal places) to allocate\n     * @param halfVesting — determines whether the half the tokens will be time-locked or not\n     */\n    function addPrecommitment(\n        address beneficiary,\n        uint256 tokensAllocated,\n        bool halfVesting\n    ) public verifierOnly\n    {\n        // requires to be on pre-sale\n        require(now < startTime); // solhint-disable-line not-rely-on-time\n\n        kycVerified[beneficiary] = true;\n\n        uint256 tokens = tokensAllocated;\n        totalPurchased = totalPurchased.add(tokens);\n        tokensPurchased[beneficiary] = tokensPurchased[beneficiary].add(tokens);\n\n        if (halfVesting) {\n            // half the tokens are put into a time-lock for a pre-defined period\n            uint64 endTimeLock = uint64(startTime + PRECOMMITMENT_VESTING_SECONDS);\n\n            // Sets a timelock for half the tokens allocated\n            uint256 half = tokens.div(2);\n            TokenTimelock timelock;\n\n            if (vestedTokens[beneficiary] == 0x0) {\n                timelock = new TokenTimelock(token, beneficiary, endTimeLock);\n                vestedTokens[beneficiary] = address(timelock);\n            } else {\n                timelock = TokenTimelock(vestedTokens[beneficiary]);\n            }\n\n            token.safeTransfer(beneficiary, half);\n            token.safeTransfer(timelock, tokens.sub(half));\n        } else {\n            // all tokens are sent to the participant's address\n            token.safeTransfer(beneficiary, tokens);\n        }\n\n        AddedPrecommitment(\n            beneficiary,\n            tokens\n        );\n    }\n\n    /**\n     * @dev Additional finalization logic. Enables token transfers.\n     */\n    function finalization() internal {\n        if (goalReached()) {\n            burnUnsold();\n            vault.close();\n            token.enableTransfers();\n        } else {\n            vault.enableRefunds();\n        }\n    }\n\n    /**\n     *  @dev Low level token purchase. Only callable internally. Participants MUST be KYC-verified before purchase\n     *  @param participant — The address of the token purchaser\n     */\n    function buyTokens(address participant) internal {\n        require(kycVerified[participant]);\n        require(now >= startTime);\n        require(now < endTime);\n        require(!isFinalized);\n        require(msg.value != 0);\n\n        // Calculate the token amount to be allocated\n        uint256 weiAmount = msg.value;\n        uint256 tokens = weiAmount.mul(rate);\n\n        // Update state\n        tokensPurchased[participant] = tokensPurchased[participant].add(tokens);\n        totalPurchased = totalPurchased.add(tokens);\n\n        require(totalPurchased <= SALE_CAP);\n        require(tokensPurchased[participant] >= PURCHASER_MIN_TOKEN_CAP);\n\n        if (now < startTime + 86400) {\n            // if still during the first day of token sale, apply different max cap\n            require(tokensPurchased[participant] <= PURCHASER_MAX_TOKEN_CAP_DAY1);\n        } else {\n            require(tokensPurchased[participant] <= PURCHASER_MAX_TOKEN_CAP);\n        }\n\n        // Sends ETH contribution to the RefundVault and tokens to participant\n        vault.deposit.value(msg.value)(participant);\n        token.safeTransfer(participant, tokens);\n\n        TokenPurchase(\n            msg.sender,\n            participant,\n            weiAmount,\n            tokens\n        );\n    }\n\n    /**\n     * @dev Burn all remaining (unsold) tokens.\n     *      This should be called after sale finalization\n     */\n    function burnUnsold() internal {\n        // All tokens held by this contract get burned\n        token.burn(token.balanceOf(this));\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_cap\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60606040526003805460a060020a60ff02191690556005805460ff19169055341561002957600080fd5b604051602080610ded8339810160405280805160038054600160a060020a03191633600160a060020a031617905560045550610d8190508061006c6000396000f3006060604052600436106101065763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461010b57806306fdde0314610132578063095ea7b3146101bc57806318160ddd146101de57806323b872dd14610203578063313ce5671461022b578063355274ea1461023e57806340c10f191461025157806342966c6814610273578063661884631461028b57806370a08231146102ad5780637d64bcb4146102cc5780638da5cb5b146102df57806395d89b411461030e578063a9059cbb14610321578063af35c6c714610343578063d73dd62314610356578063dd62ed3e14610378578063f2fde38b1461039d575b600080fd5b341561011657600080fd5b61011e6103bc565b604051901515815260200160405180910390f35b341561013d57600080fd5b6101456103cc565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610181578082015183820152602001610169565b50505050905090810190601f1680156101ae5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101c757600080fd5b61011e600160a060020a0360043516602435610403565b34156101e957600080fd5b6101f161046f565b60405190815260200160405180910390f35b341561020e57600080fd5b61011e600160a060020a0360043581169060243516604435610475565b341561023657600080fd5b6101f16104ba565b341561024957600080fd5b6101f16104bf565b341561025c57600080fd5b61011e600160a060020a03600435166024356104c5565b341561027e57600080fd5b61028960043561052c565b005b341561029657600080fd5b61011e600160a060020a03600435166024356105ed565b34156102b857600080fd5b6101f1600160a060020a03600435166106e7565b34156102d757600080fd5b61011e610702565b34156102ea57600080fd5b6102f261078d565b604051600160a060020a03909116815260200160405180910390f35b341561031957600080fd5b61014561079c565b341561032c57600080fd5b61011e600160a060020a03600435166024356107d3565b341561034e57600080fd5b610289610816565b341561036157600080fd5b61011e600160a060020a0360043516602435610840565b341561038357600080fd5b6101f1600160a060020a03600435811690602435166108e4565b34156103a857600080fd5b610289600160a060020a036004351661090f565b60035460a060020a900460ff1681565b60408051908101604052600781527f53656c664b657900000000000000000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005481565b6005546000908490839060ff168061049a5750600354600160a060020a038381169116145b15156104a557600080fd5b6104b08686866109aa565b9695505050505050565b601281565b60045481565b60035460009033600160a060020a039081169116146104e357600080fd5b60035460a060020a900460ff16156104fa57600080fd5b600454600054610510908463ffffffff610b2c16565b111561051b57600080fd5b6105258383610b3b565b9392505050565b60035460009033600160a060020a0390811691161461054a57600080fd5b6000821161055757600080fd5b5033600160a060020a03811660009081526001602052604090205461057c9083610c48565b600160a060020a038216600090815260016020526040812091909155546105a9908363ffffffff610c4816565b600055600160a060020a0381167f696de425f79f4a40bc6d2122ca50507f0efbeabbff86a84871b7196ab8ea8df78360405190815260200160405180910390a25050565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561064a57600160a060020a033381166000908152600260209081526040808320938816835292905290812055610681565b61065a818463ffffffff610c4816565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526001602052604090205490565b60035460009033600160a060020a0390811691161461072057600080fd5b60035460a060020a900460ff161561073757600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a150600190565b600354600160a060020a031681565b60408051908101604052600381527f4b45590000000000000000000000000000000000000000000000000000000000602082015281565b6005546000903390839060ff16806107f85750600354600160a060020a038381169116145b151561080357600080fd5b61080d8585610c5a565b95945050505050565b60035433600160a060020a0390811691161461083157600080fd5b6005805460ff19166001179055565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610878908363ffffffff610b2c16565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a0390811691161461092a57600080fd5b600160a060020a038116151561093f57600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000600160a060020a03831615156109c157600080fd5b600160a060020a0384166000908152600160205260409020548211156109e657600080fd5b600160a060020a0380851660009081526002602090815260408083203390941683529290522054821115610a1957600080fd5b600160a060020a038416600090815260016020526040902054610a42908363ffffffff610c4816565b600160a060020a038086166000908152600160205260408082209390935590851681522054610a77908363ffffffff610b2c16565b600160a060020a03808516600090815260016020908152604080832094909455878316825260028152838220339093168252919091522054610abf908363ffffffff610c4816565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b60008282018381101561052557fe5b60035460009033600160a060020a03908116911614610b5957600080fd5b60035460a060020a900460ff1615610b7057600080fd5b600054610b83908363ffffffff610b2c16565b6000908155600160a060020a038416815260016020526040902054610bae908363ffffffff610b2c16565b600160a060020a0384166000818152600160205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a2600160a060020a03831660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350600192915050565b600082821115610c5457fe5b50900390565b6000600160a060020a0383161515610c7157600080fd5b600160a060020a033316600090815260016020526040902054821115610c9657600080fd5b600160a060020a033316600090815260016020526040902054610cbf908363ffffffff610c4816565b600160a060020a033381166000908152600160205260408082209390935590851681522054610cf4908363ffffffff610b2c16565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a3506001929150505600a165627a7a72305820a0db4a7417f51dac893a505484403c713964d24a776ca71d61c0b642f6760aae002900000000000000000000000000000000000000001363156bbee3016d70000000",
  "constructorArguments": "00000000000000000000000000000000000000001363156bbee3016d70000000"
}