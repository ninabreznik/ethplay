{
  "address": "0xc3e329ca5380c6b416cf095ed1a662c378a2b630",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TaurusPay",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-09\n*/\n\npragma solidity ^0.4.24;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n}\n\ncontract ERC20 {\n    uint256 public totalSupply;\n\n    bool public transfersEnabled;\n\n    function balanceOf(address _owner) public constant returns (uint256 balance);\n\n    function transfer(address _to, uint256 _value) public returns (bool success);\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n    function approve(address _spender, uint256 _value) public returns (bool success);\n\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract ERC223Basic {\n    uint256 public totalSupply;\n\n    bool public transfersEnabled;\n\n    function balanceOf(address who) public view returns (uint256);\n\n    function transfer(address to, uint256 value) public returns (bool);\n\n    function transfer(address to, uint256 value, bytes data) public;\n\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\n\n}\n\ncontract ERC223ReceivingContract {\n    /**\n     * @dev Standard ERC223 function that will handle incoming token transfers.\n     *\n     * @param _from  Token sender address.\n     * @param _value Amount of tokens.\n     * @param _data  Transaction metadata.\n     */\n    function tokenFallback(address _from, uint _value, bytes _data) public;\n}\n\ncontract ERC223Token is ERC223Basic {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances; // List of user balances.\n\n    /**\n    * @dev protection against short address attack\n    */\n    modifier onlyPayloadSize(uint numwords) {\n        assert(msg.data.length == numwords * 32 + 4);\n        _;\n    }\n\n    /**\n     * @dev Transfer the specified amount of tokens to the specified address.\n     *      Invokes the `tokenFallback` function if the recipient is a contract.\n     *      The token transfer fails if the recipient is a contract\n     *      but does not implement the `tokenFallback` function\n     *      or the fallback function to receive funds.\n     *\n     * @param _to    Receiver address.\n     * @param _value Amount of tokens that will be transferred.\n     * @param _data  Transaction metadata.\n     */\n    function transfer(address _to, uint _value, bytes _data) public onlyPayloadSize(3) {\n        // Standard function transfer similar to ERC20 transfer with no _data .\n        // Added due to backwards compatibility reasons .\n        uint codeLength;\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n        require(transfersEnabled);\n\n        assembly {\n        // Retrieve the size of the code on target address, this needs assembly .\n            codeLength := extcodesize(_to)\n        }\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        if(codeLength>0) {\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n            receiver.tokenFallback(msg.sender, _value, _data);\n        }\n        emit Transfer(msg.sender, _to, _value, _data);\n    }\n\n    /**\n     * @dev Transfer the specified amount of tokens to the specified address.\n     *      This function works the same with the previous one\n     *      but doesn't contain `_data` param.\n     *      Added due to backwards compatibility reasons.\n     *\n     * @param _to    Receiver address.\n     * @param _value Amount of tokens that will be transferred.\n     */\n    function transfer(address _to, uint _value) public onlyPayloadSize(2) returns(bool) {\n        uint codeLength;\n        bytes memory empty;\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n        require(transfersEnabled);\n\n        assembly {\n        // Retrieve the size of the code on target address, this needs assembly .\n            codeLength := extcodesize(_to)\n        }\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        if(codeLength>0) {\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n            receiver.tokenFallback(msg.sender, _value, empty);\n        }\n        emit Transfer(msg.sender, _to, _value, empty);\n        return true;\n    }\n\n\n    /**\n     * @dev Returns balance of the `_owner`.\n     *\n     * @param _owner   The address whose balance will be returned.\n     * @return balance Balance of the `_owner`.\n     */\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n}\n\ncontract StandardToken is ERC20, ERC223Token {\n\n    mapping(address => mapping(address => uint256)) internal allowed;\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3) returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        require(transfersEnabled);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public onlyPayloadSize(2) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}\n\ncontract TaurusPay is StandardToken {\n\n    string public constant name = \"TaurusPay\";\n    string public constant symbol = \"TAPT\";\n    uint8 public constant decimals = 18;\n    uint256 public constant INITIAL_SUPPLY = 950 * 10**6 * (10**uint256(decimals));\n    address public owner;\n    mapping (address => bool) public contractUsers;\n    bool public mintingFinished;\n    uint256 public tokenAllocated = 0;\n    // list of valid claim\n    mapping (address => uint) public countClaimsToken;\n\n    uint256 public priceToken = 950000;\n    uint256 public priceClaim = 0.0005 ether;\n    uint256 public numberClaimToken = 200 * (10**uint256(decimals));\n    uint256 public startTimeDay = 50400;\n    uint256 public endTimeDay = 51300;\n\n    event OwnerChanged(address indexed previousOwner, address indexed newOwner);\n    event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount);\n    event TokenLimitReached(uint256 tokenRaised, uint256 purchasedToken);\n    event MinWeiLimitReached(address indexed sender, uint256 weiAmount);\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n\n    constructor(address _owner) public {\n        totalSupply = INITIAL_SUPPLY;\n        owner = _owner;\n        //owner = msg.sender; // for test's\n        balances[owner] = INITIAL_SUPPLY;\n        transfersEnabled = true;\n        mintingFinished = false;\n    }\n\n    // fallback function can be used to buy tokens\n    function() payable public {\n        buyTokens(msg.sender);\n    }\n\n    function buyTokens(address _investor) public payable returns (uint256){\n        require(_investor != address(0));\n        uint256 weiAmount = msg.value;\n        uint256 tokens = validPurchaseTokens(weiAmount);\n        if (tokens == 0) {revert();}\n        tokenAllocated = tokenAllocated.add(tokens);\n        mint(_investor, tokens, owner);\n\n        emit TokenPurchase(_investor, weiAmount, tokens);\n        owner.transfer(weiAmount);\n        return tokens;\n    }\n\n    function validPurchaseTokens(uint256 _weiAmount) public returns (uint256) {\n        uint256 addTokens = _weiAmount.mul(priceToken);\n        if (_weiAmount < 0.01 ether) {\n            emit MinWeiLimitReached(msg.sender, _weiAmount);\n            return 0;\n        }\n        if (tokenAllocated.add(addTokens) > balances[owner]) {\n            emit TokenLimitReached(tokenAllocated, addTokens);\n            return 0;\n        }\n        return addTokens;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n\n    /**\n     * @dev Function to stop minting new tokens.\n     * @return True if the operation was successful.\n     */\n    function finishMinting() onlyOwner canMint public returns (bool) {\n        mintingFinished = true;\n        emit MintFinished();\n        return true;\n    }\n\n    function changeOwner(address _newOwner) onlyOwner public returns (bool){\n        require(_newOwner != address(0));\n        emit OwnerChanged(owner, _newOwner);\n        owner = _newOwner;\n        return true;\n    }\n\n    function enableTransfers(bool _transfersEnabled) onlyOwner public {\n        transfersEnabled = _transfersEnabled;\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param _to The address that will receive the minted tokens.\n     * @param _amount The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address _to, uint256 _amount, address _owner) canMint internal returns (bool) {\n        require(_to != address(0));\n        require(_amount <= balances[owner]);\n        require(!mintingFinished);\n        balances[_to] = balances[_to].add(_amount);\n        balances[_owner] = balances[_owner].sub(_amount);\n        emit Mint(_to, _amount);\n        emit Transfer(_owner, _to, _amount);\n        return true;\n    }\n\n    function claim() canMint public payable returns (bool) {\n        uint256 currentTime = now;\n        //currentTime = 1540037100; //for test's\n        require(validPurchaseTime(currentTime));\n        require(msg.value >= priceClaim);\n        address beneficiar = msg.sender;\n        require(beneficiar != address(0));\n        require(!mintingFinished);\n\n        uint256 amount = calcAmount(beneficiar);\n        require(amount <= balances[owner]);\n\n        balances[beneficiar] = balances[beneficiar].add(amount);\n        balances[owner] = balances[owner].sub(amount);\n        tokenAllocated = tokenAllocated.add(amount);\n        owner.transfer(msg.value);\n        emit Mint(beneficiar, amount);\n        emit Transfer(owner, beneficiar, amount);\n        return true;\n    }\n\n    //function calcAmount(address _beneficiar) canMint public returns (uint256 amount) { //for test's\n    function calcAmount(address _beneficiar) canMint internal returns (uint256 amount) {\n        if (countClaimsToken[_beneficiar] == 0) {\n            countClaimsToken[_beneficiar] = 1;\n        }\n        if (countClaimsToken[_beneficiar] >= 22) {\n            return 0;\n        }\n        uint step = countClaimsToken[_beneficiar];\n        amount = numberClaimToken.mul(105 - 5*step).div(100);\n        countClaimsToken[_beneficiar] = countClaimsToken[_beneficiar].add(1);\n    }\n\n    function validPurchaseTime(uint256 _currentTime) canMint public view returns (bool) {\n        uint256 dayTime = _currentTime % 1 days;\n        if (startTimeDay <= dayTime && dayTime <=  endTimeDay) {\n            return true;\n        }\n        return false;\n    }\n\n    function changeTime(uint256 _newStartTimeDay, uint256 _newEndTimeDay) public {\n        require(0 < _newStartTimeDay && 0 < _newEndTimeDay);\n        startTimeDay = _newStartTimeDay;\n        endTimeDay = _newEndTimeDay;\n    }\n\n    /**\n     * Peterson's Law Protection\n     * Claim tokens\n     */\n    function claimTokensToOwner(address _token) public onlyOwner {\n        if (_token == 0x0) {\n            owner.transfer(address(this).balance);\n            return;\n        }\n        TaurusPay token = TaurusPay(_token);\n        uint256 balance = token.balanceOf(this);\n        token.transfer(owner, balance);\n        emit Transfer(_token, owner, balance);\n    }\n\n    function setPriceClaim(uint256 _newPriceClaim) external onlyOwner {\n        require(_newPriceClaim > 0);\n        priceClaim = _newPriceClaim;\n    }\n\n    function setNumberClaimToken(uint256 _newNumClaimToken) external onlyOwner {\n        require(_newNumClaimToken > 0);\n        numberClaimToken = _newNumClaimToken;\n    }\n\n}",
  "bytecode": "60806040526000600955620e7ef0600b556601c6bf52634000600c55680ad78ebc5ac6200000600d5561c4e0600e5561c864600f5534801561004057600080fd5b50604051602080611b3383398101604090815290516b0311d253316c79d376000000600281905560068054600160a060020a031916600160a060020a03938416179081905590911660009081526004602052918220556003805460ff19908116600117909155600880549091169055611a749081906100bf90396000f30060806040526004361061019d5763ffffffff60e060020a60003504166305d2035b81146101a957806306fdde03146101d2578063095ea7b31461025c57806318160ddd1461028057806323b872dd146102a75780632ff2e9dc146102d15780632ff6fe76146102e65780632ffd68d3146102fb578063313ce5671461031c578063347518c7146103475780634e71d92d1461035f57806354057aa6146103675780635931228b14610381578063643791501461039657806366188463146103ae578063672781ed146103d2578063707188c1146103e757806370a082311461040257806378f7aeee146104235780637d64bcb4146104385780638da5cb5b1461044d57806395d89b411461047e57806396d8b05014610493578063a6f9dae1146104b4578063a9059cbb146104d5578063ad001266146104f9578063be45fd621461051a578063bef97c8714610583578063d73dd62314610598578063d9144712146105bc578063dd62ed3e146105d1578063ec8ac4d8146105f8578063ed93ca261461060c578063f41e60c514610621578063fc38ce191461063b575b6101a633610653565b50005b3480156101b557600080fd5b506101be61073b565b604080519115158252519081900360200190f35b3480156101de57600080fd5b506101e7610744565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610221578181015183820152602001610209565b50505050905090810190601f16801561024e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561026857600080fd5b506101be600160a060020a036004351660243561077b565b34801561028c57600080fd5b506102956107e1565b60408051918252519081900360200190f35b3480156102b357600080fd5b506101be600160a060020a03600435811690602435166044356107e7565b3480156102dd57600080fd5b5061029561096c565b3480156102f257600080fd5b5061029561097c565b34801561030757600080fd5b50610295600160a060020a0360043516610982565b34801561032857600080fd5b50610331610994565b6040805160ff9092168252519081900360200190f35b34801561035357600080fd5b506101be600435610999565b6101be6109e3565b34801561037357600080fd5b5061037f600435610bbc565b005b34801561038d57600080fd5b50610295610be5565b3480156103a257600080fd5b5061037f600435610beb565b3480156103ba57600080fd5b506101be600160a060020a0360043516602435610c14565b3480156103de57600080fd5b50610295610d04565b3480156103f357600080fd5b5061037f600435602435610d0a565b34801561040e57600080fd5b50610295600160a060020a0360043516610d30565b34801561042f57600080fd5b50610295610d4b565b34801561044457600080fd5b506101be610d51565b34801561045957600080fd5b50610462610db7565b60408051600160a060020a039092168252519081900360200190f35b34801561048a57600080fd5b506101e7610dc6565b34801561049f57600080fd5b5061037f600160a060020a0360043516610dfd565b3480156104c057600080fd5b506101be600160a060020a0360043516610fd1565b3480156104e157600080fd5b506101be600160a060020a036004351660243561106c565b34801561050557600080fd5b506101be600160a060020a03600435166112e4565b34801561052657600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261037f948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506112f99650505050505050565b34801561058f57600080fd5b506101be611569565b3480156105a457600080fd5b506101be600160a060020a0360043516602435611572565b3480156105c857600080fd5b5061029561160b565b3480156105dd57600080fd5b50610295600160a060020a0360043581169060243516611611565b610295600160a060020a0360043516610653565b34801561061857600080fd5b5061029561164c565b34801561062d57600080fd5b5061037f6004351515611652565b34801561064757600080fd5b5061029560043561167c565b60008080600160a060020a038416151561066c57600080fd5b3491506106788261167c565b905080151561068657600080fd5b600954610699908263ffffffff61176416565b6009556006546106b59085908390600160a060020a031661177a565b5060408051838152602081018390528151600160a060020a038716927fcd60aa75dea3072fbc07ae6d7d856b5dc5f4eee88854f5b4abf7b680ef8bc50f928290030190a2600654604051600160a060020a039091169083156108fc029084906000818181858888f19350505050158015610733573d6000803e3d6000fd5b509392505050565b60085460ff1681565b60408051808201909152600981527f5461757275735061790000000000000000000000000000000000000000000000602082015281565b336000818152600560209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60025481565b60006003366064146107f557fe5b600160a060020a038416151561080a57600080fd5b600160a060020a03851660009081526004602052604090205483111561082f57600080fd5b600160a060020a038516600090815260056020908152604080832033845290915290205483111561085f57600080fd5b60035460ff16151561087057600080fd5b600160a060020a038516600090815260046020526040902054610899908463ffffffff6118cf16565b600160a060020a0380871660009081526004602052604080822093909355908616815220546108ce908463ffffffff61176416565b600160a060020a038086166000908152600460209081526040808320949094559188168152600582528281203382529091522054610912908463ffffffff6118cf16565b600160a060020a0380871660008181526005602090815260408083203384528252918290209490945580518781529051928816939192600080516020611a29833981519152929181900390910190a3506001949350505050565b6b0311d253316c79d37600000081565b600b5481565b600a6020526000908152604090205481565b601281565b600854600090819060ff16156109ae57600080fd5b620151808306905080600e54111580156109ca5750600f548111155b156109d857600191506109dd565b600091505b50919050565b60085460009081908190819060ff16156109fc57600080fd5b429250610a0883610999565b1515610a1357600080fd5b600c54341015610a2257600080fd5b339150811515610a3157600080fd5b60085460ff1615610a4157600080fd5b610a4a826118e1565b600654600160a060020a0316600090815260046020526040902054909150811115610a7457600080fd5b600160a060020a038216600090815260046020526040902054610a9d908263ffffffff61176416565b600160a060020a038084166000908152600460205260408082209390935560065490911681522054610ad5908263ffffffff6118cf16565b600654600160a060020a0316600090815260046020526040902055600954610b03908263ffffffff61176416565b600955600654604051600160a060020a03909116903480156108fc02916000818181858888f19350505050158015610b3f573d6000803e3d6000fd5b50604080518281529051600160a060020a038416917f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885919081900360200190a2600654604080518381529051600160a060020a03808616931691600080516020611a29833981519152919081900360200190a36001935050505090565b600654600160a060020a03163314610bd357600080fd5b60008111610be057600080fd5b600c55565b600f5481565b600654600160a060020a03163314610c0257600080fd5b60008111610c0f57600080fd5b600d55565b336000908152600560209081526040808320600160a060020a038616845290915281205480831115610c6957336000908152600560209081526040808320600160a060020a0388168452909152812055610c9e565b610c79818463ffffffff6118cf16565b336000908152600560209081526040808320600160a060020a03891684529091529020555b336000818152600560209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600c5481565b816000108015610d1a5750806000105b1515610d2557600080fd5b600e91909155600f55565b600160a060020a031660009081526004602052604090205490565b60095481565b600654600090600160a060020a03163314610d6b57600080fd5b60085460ff1615610d7b57600080fd5b6008805460ff191660011790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600654600160a060020a031681565b60408051808201909152600481527f5441505400000000000000000000000000000000000000000000000000000000602082015281565b6006546000908190600160a060020a03163314610e1957600080fd5b600160a060020a0383161515610e6957600654604051600160a060020a0390911690303180156108fc02916000818181858888f19350505050158015610e63573d6000803e3d6000fd5b50610fcc565b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051849350600160a060020a038416916370a082319160248083019260209291908290030181600087803b158015610ecd57600080fd5b505af1158015610ee1573d6000803e3d6000fd5b505050506040513d6020811015610ef757600080fd5b5051600654604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810184905290519293509084169163a9059cbb916044808201926020929091908290030181600087803b158015610f6b57600080fd5b505af1158015610f7f573d6000803e3d6000fd5b505050506040513d6020811015610f9557600080fd5b5050600654604080518381529051600160a060020a0392831692861691600080516020611a29833981519152919081900360200190a35b505050565b600654600090600160a060020a03163314610feb57600080fd5b600160a060020a038216151561100057600080fd5b600654604051600160a060020a038085169216907fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c90600090a35060068054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff199091161790556001919050565b60008060608160023660441461107e57fe5b600160a060020a038716151561109357600080fd5b336000908152600460205260409020548611156110af57600080fd5b60035460ff1615156110c057600080fd5b33600090815260046020526040902054873b94506110e4908763ffffffff6118cf16565b3360009081526004602052604080822092909255600160a060020a03891681522054611116908763ffffffff61176416565b600160a060020a0388166000908152600460205260408120919091558411156112225786915081600160a060020a031663c0ee0b8a3388866040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156111bb5781810151838201526020016111a3565b50505050905090810190601f1680156111e85780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561120957600080fd5b505af115801561121d573d6000803e3d6000fd5b505050505b86600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c1688866040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561129c578181015183820152602001611284565b50505050905090810190601f1680156112c95780820380516001836020036101000a031916815260200191505b50935050505060405180910390a35060019695505050505050565b60076020526000908152604090205460ff1681565b60008060033660641461130857fe5b600160a060020a038616151561131d57600080fd5b3360009081526004602052604090205485111561133957600080fd5b60035460ff16151561134a57600080fd5b33600090815260046020526040902054863b935061136e908663ffffffff6118cf16565b3360009081526004602052604080822092909255600160a060020a038816815220546113a0908663ffffffff61176416565b600160a060020a0387166000908152600460205260408120919091558311156114ac5785915081600160a060020a031663c0ee0b8a3387876040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561144557818101518382015260200161142d565b50505050905090810190601f1680156114725780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561149357600080fd5b505af11580156114a7573d6000803e3d6000fd5b505050505b85600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c1687876040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561152657818101518382015260200161150e565b50505050905090810190601f1680156115535780820380516001836020036101000a031916815260200191505b50935050505060405180910390a3505050505050565b60035460ff1681565b336000908152600560209081526040808320600160a060020a03861684529091528120546115a6908363ffffffff61176416565b336000818152600560209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600d5481565b600060023660441461161f57fe5b5050600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b600e5481565b600654600160a060020a0316331461166957600080fd5b6003805460ff1916911515919091179055565b600080611694600b54846119ed90919063ffffffff16565b9050662386f26fc100008310156116e45760408051848152905133917f0f36f9ac72964373d449d48877bd9443e49c93c404464e4082e3de730bd3971b919081900360200190a2600091506109dd565b600654600160a060020a0316600090815260046020526040902054600954611712908363ffffffff61176416565b111561175e57600954604080519182526020820183905280517f77fcbebee5e7fc6abb70669438e18dae65fc2057b32b694851724c2726a35b629281900390910190a1600091506109dd565b92915050565b60008282018381101561177357fe5b9392505050565b60085460009060ff161561178d57600080fd5b600160a060020a03841615156117a257600080fd5b600654600160a060020a03166000908152600460205260409020548311156117c957600080fd5b60085460ff16156117d957600080fd5b600160a060020a038416600090815260046020526040902054611802908463ffffffff61176416565b600160a060020a038086166000908152600460205260408082209390935590841681522054611837908463ffffffff6118cf16565b600160a060020a038084166000908152600460209081526040918290209390935580518681529051918716927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a283600160a060020a031682600160a060020a0316600080516020611a29833981519152856040518082815260200191505060405180910390a35060019392505050565b6000828211156118db57fe5b50900390565b600854600090819060ff16156118f657600080fd5b600160a060020a0383166000908152600a6020526040902054151561193257600160a060020a0383166000908152600a60205260409020600190555b600160a060020a0383166000908152600a602052604090205460161161195b57600091506109dd565b50600160a060020a0382166000908152600a6020526040902054600d546119a190606490611995906005850260690363ffffffff6119ed16565b9063ffffffff611a1116565b600160a060020a0384166000908152600a60205260409020549092506119ce90600163ffffffff61176416565b600160a060020a0384166000908152600a602052604090205550919050565b6000828202831580611a095750828482811515611a0657fe5b04145b151561177357fe5b6000808284811515611a1f57fe5b049493505050505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820c8c191ef2f5bbbef3ee7f8bb739c64eefd2c504af924c039df6d2b91e46ed428002900000000000000000000000011dc39386dd894e8ed79006e6601ecc2b943ff07",
  "constructorArguments": "00000000000000000000000011dc39386dd894e8ed79006e6601ecc2b943ff07"
}