{
  "address": "0x945bcaf1bc4e28d634eb721ac00d08c674fbeed5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HTN_TOKEN",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-10\n*/\n\npragma solidity >=0.4.22 <0.6.0;\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error.\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address payable private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address payable) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(),\"Invalid owner\");\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address payable newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address payable newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * @title ERC20Detailed token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 public _decimals;\n\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://eips.ethereum.org/EIPS/eip-20\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) public _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n    \n    mapping (address => bool) public frozenAccount;\n\n    uint256 private _totalSupply;\n    \n    /**\n     * @dev Total number of tokens in existence.\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner The address to query the balance of.\n     * @return A uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n     * @dev Transfer token to a specified address.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n\n    /**\n     * @dev Transfer token for a specified addresses.\n     * @param from The address to transfer from.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0),\"Check recipient is owner\");\n        // Check if sender is frozen\n        require(!frozenAccount[from],\"Check if sender is frozen\");\n        // Check if recipient is frozen\n        require(!frozenAccount[to],\"Check if recipient is frozen\");\n        \n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0),\"Check recipient is '0x0'\");\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0),\"Check recipient is owner\");\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Approve an address to spend another addresses' tokens.\n     * @param owner The address that owns the tokens.\n     * @param spender The address that will spend the tokens.\n     * @param value The number of tokens that can be spent.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    \n}\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev Give an account access to this role.\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev Remove an account's access to this role.\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev Check if an account has this role.\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\ncontract MinterRole is Ownable {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private _minters;\n\n    constructor () internal {\n        _addMinter(msg.sender);\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n\n    function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n\n    function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n}\n\n/**\n * @title ERC20Mintable\n * @dev ERC20 minting logic.\n */\ncontract ERC20Mintable is ERC20, Ownable {\n    /**\n     * @dev Function to mint tokens\n     * @param to The address that will receive the minted tokens.\n     * @param value The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address to, uint256 value) public onlyOwner returns (bool) {\n        _mint(to, value);\n        return true;\n    }\n}\n\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract ERC20Burnable is ERC20,Ownable{\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param value The amount of token to be burned.\n     */\n    function burn(uint256 value) onlyOwner public {\n        _burn(msg.sender, value);\n    }\n\n}\n\ncontract PauserRole is Ownable {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor () internal {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender));\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n    event Paused(address account);\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    constructor () internal {\n        _paused = false;\n    }\n    \n    // modifier onlyPauser() {\n    //     require(isPauser(msg.sender));\n    //     _;\n    // }\n    /**\n     * @return True if the contract is paused, false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n\n    /**\n     * @dev Called by a pauser to pause, triggers stopped state.\n     */\n    function pause() public onlyOwner whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev Called by a pauser to unpause, returns to normal state.\n     */\n    function unpause() public onlyOwner whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n\n\n/**\n * @title Pausable token\n * @dev ERC20 modified with pausable transfers.\n */\ncontract ERC20Pausable is ERC20, Pausable {\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transfer(to, value);\n    }\n\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n        return super.approve(spender, value);\n    }\n\n}\n\n\n/**\n * @title Heart Number Token\n * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\n * Note they can later distribute these tokens as they wish using `transfer` and other\n * `ERC20` functions.\n */\ncontract HTN_TOKEN is ERC20, ERC20Detailed, ERC20Burnable, ERC20Mintable, ERC20Pausable {\n\n    string private constant NAME = \"Heart Number\"; \n    string private constant SYMBOL = \"HTN\"; \n    uint8 private constant DECIMALS = 18; \n    \n    /**\n     * @dev The price of tokenBuy.\n     */\n    uint256 public TokenPerETHBuy = 100000;\n    \n    /**\n     * @dev The price of tokenSell.\n     */\n    uint256 public TokenPerETHSell = 100000;\n    \n    /**\n    * @dev Sell token is enabled\n    */\n    bool public SellTokenAllowed;\n    \n    /**\n    * @dev Buy token is enabled\n    */\n    bool public BuyTokenAllowed;\n    \n    /**\n     * @dev This notifies clients about the new Buy price.\n     */\n    event BuyRateChanged(uint256 oldValue, uint256 newValue);\n    \n    /**\n     * @dev This notifies clients about the new Sell price.\n     */\n    event SellRateChanged(uint256 oldValue, uint256 newValue);\n    \n    /**\n     * @dev This notifies clients about the Buy Token.\n     */\n    event BuyToken(address user, uint256 eth, uint256 token);\n    \n     /**\n     * @dev This notifies clients about the Sell Token.\n     */\n    event SellToken(address user, uint256 eth, uint256 token);\n    \n    /**\n     * @dev This notifies clients about frozen accounts.\n     */\n    event FrozenFunds(address target, bool frozen);    \n    \n    /**\n    * @dev This notifies sell token status.\n    */\n    event SellTokenAllowedEvent(bool isAllowed);\n    \n    /**\n    * @dev This notifies buy token status.\n    */\n    event BuyTokenAllowedEvent(bool isAllowed);\n    \n    uint256 public constant INITIAL_SUPPLY = 10000000000 *(10 ** uint256(DECIMALS));\n\n    \n    /**\n     * @dev Constructor that gives msg.sender all of existing tokens.\n     */\n    constructor () public ERC20Detailed(NAME, SYMBOL, DECIMALS) {\n        _mint(msg.sender, INITIAL_SUPPLY);\n        SellTokenAllowed = false;\n        BuyTokenAllowed = true;\n    }\n    \n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n    /// @param target Address to be frozen\n    /// @param freeze either to freeze it or not\n    function freezeAccount(address target, bool freeze) onlyOwner  public {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n    \n    /**\n    * Set price function for Buy\n    *\n    * @param value the amount new Buy Price\n    */\n    function setBuyRate(uint256 value) onlyOwner public {\n        require(value > 0);\n        emit BuyRateChanged(TokenPerETHBuy, value);\n        TokenPerETHBuy = value;\n    }\n    \n    /**\n    * Set price function for Sell\n    *\n    * @param value the amount new Sell Price\n    */\n    function setSellRate(uint256 value) onlyOwner public {\n        require(value > 0);\n        emit SellRateChanged(TokenPerETHSell, value);\n        TokenPerETHSell = value;\n    }\n    \n    /**\n    *  function for Buy Token\n    */\n    function buy() payable public  returns (uint amount){\n        require(msg.value > 0 , \"Ivalid Ether amount\");\n        require(!frozenAccount[msg.sender], \"Accout is frozen\");                      // check sender is not frozen account\n        require(BuyTokenAllowed, \"Buy Token is not allowed\");                         // check buy token allowed\n        amount = ((msg.value.mul(TokenPerETHBuy)).mul( 10 ** uint256(decimals()))).div(1 ether);\n        _balances[address(this)] -= amount;                        // adds the amount to owner's \n        _balances[msg.sender] += amount; \n        emit Transfer(address(this),msg.sender ,amount);\n        return amount;\n    }\n    \n    /**\n    *  function for Sell Token\n    */\n    function sell(uint amount) public  returns (uint revenue){\n        \n        require(_balances[msg.sender] >= amount,\"Checks if the sender has enough to sell\");         // checks if the sender has enough to sell\n        require(!frozenAccount[msg.sender],\"Check if sender is frozen\");              // check sender is not frozen account\n        require(SellTokenAllowed);                        // check sell token allowed  \n        _balances[address(this)] += amount;               // adds the amount to owner's balance\n        _balances[msg.sender] -= amount;                  // subtracts the amount from seller's balance\n        revenue = (amount.mul(1 ether)).div(TokenPerETHSell.mul(10 ** uint256(decimals()))) ;\n        msg.sender.transfer(revenue);                     // sends ether to the seller: it's important to do this last to prevent recursion attacks\n        emit Transfer(msg.sender, address(this), amount);               // executes an event reflecting on the change\n        return revenue;                                   // ends function and returns\n        \n    }\n    \n    /**\n    * Enable Sell Token\n    */\n    function enableSellToken() onlyOwner public {\n        SellTokenAllowed = true;\n        emit SellTokenAllowedEvent (true);\n    }\n\n    /**\n    * Disable Sell Token\n    */\n    function disableSellToken() onlyOwner public {\n        SellTokenAllowed = false;\n        emit SellTokenAllowedEvent (false);\n    }\n    \n    /**\n    * Enable Buy Token\n    */\n    function enableBuyToken() onlyOwner public {\n        BuyTokenAllowed = true;\n        emit BuyTokenAllowedEvent (true);\n    }\n\n    /**\n    * Disable Buy Token\n    */\n    function disableBuyToken() onlyOwner public {\n        BuyTokenAllowed = false;\n        emit BuyTokenAllowedEvent (false);\n    }\n    \n    /**\n    * @dev Withdraw for Ether\n    */\n     function withdraw(uint withdrawAmount) onlyOwner public  {\n          if (withdrawAmount <= address(this).balance) {\n            owner().transfer(withdrawAmount);\n        }\n    }\n}",
  "bytecode": "6080604052620186a0600955620186a0600a553480156200001f57600080fd5b50604080518082018252600c81527f4865617274204e756d626572000000000000000000000000000000000000000060208083019182528351808501909452600384527f48544e00000000000000000000000000000000000000000000000000000000009084015281519192916012916200009e91600491906200038f565b508151620000b49060059060208501906200038f565b506006805460ff191660ff929092169190911761010060a860020a0319166101003381029190911791829055604051600160a060020a0391909204169250600091507f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36200012f336401000000006200016f810204565b6008805460ff191690556200015a336b204fce5e3e25026110000000640100000000620001c1810204565b600b805461ffff191661010017905562000434565b6200018a60078264010000000062001a43620002e282021704565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b600160a060020a03821615156200023957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f436865636b20726563697069656e742069732027307830270000000000000000604482015290519081900360640190fd5b60035462000256908264010000000062001a316200033d82021704565b600355600160a060020a0382166000908152602081905260409020546200028c908264010000000062001a316200033d82021704565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600160a060020a0381161515620002f857600080fd5b6200030d828264010000000062000357810204565b156200031857600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6000828201838110156200035057600080fd5b9392505050565b6000600160a060020a03821615156200036f57600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003d257805160ff191683800117855562000402565b8280016001018555821562000402579182015b8281111562000402578251825591602001919060010190620003e5565b506200041092915062000414565b5090565b6200043191905b808211156200041057600081556001016200041b565b90565b611b2480620004446000396000f3fe60806040526004361061022c576000357c0100000000000000000000000000000000000000000000000000000000900480636aa737e01161013557806394357c6b116100bd578063b414d4b61161008c578063b414d4b6146106c6578063dd62ed3e146106f9578063e4849b3214610734578063e724529c1461075e578063f2fde38b146107995761022c565b806394357c6b1461065b57806395d89b4114610670578063a6f2ae3a14610685578063a9059cbb1461068d5761022c565b80638456cb59116101045780638456cb59146105ac57806385e436bf146105c15780638da5cb5b146105eb5780638e0b017d1461061c5780638f32d59b146106465761022c565b80636aa737e01461051c5780636ebcf6071461053157806370a08231146105645780637794de55146105975761022c565b8063313ce567116101b857806342966c681161018757806342966c681461048057806346fbf68e146104aa5780634b0d5417146104dd578063534f36c5146104f25780635c975abb146105075761022c565b8063313ce567146103f257806332424aa31461041d5780633f4ba83a1461043257806340c10f19146104475761022c565b80631d0b482f116101ff5780631d0b482f1461034457806323b872dd1461035957806328b937021461039c5780632e1a7d4d146103b15780632ff2e9dc146103dd5761022c565b806306fdde0314610231578063095ea7b3146102bb5780630f7ca5771461030857806318160ddd1461031d575b600080fd5b34801561023d57600080fd5b506102466107cc565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610280578181015183820152602001610268565b50505050905090810190601f1680156102ad5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102c757600080fd5b506102f4600480360360408110156102de57600080fd5b50600160a060020a038135169060200135610862565b604080519115158252519081900360200190f35b34801561031457600080fd5b506102f4610888565b34801561032957600080fd5b50610332610896565b60408051918252519081900360200190f35b34801561035057600080fd5b5061033261089c565b34801561036557600080fd5b506102f46004803603606081101561037c57600080fd5b50600160a060020a038135811691602081013590911690604001356108a2565b3480156103a857600080fd5b506102f46108c8565b3480156103bd57600080fd5b506103db600480360360208110156103d457600080fd5b50356108d1565b005b3480156103e957600080fd5b5061033261096a565b3480156103fe57600080fd5b5061040761097a565b6040805160ff9092168252519081900360200190f35b34801561042957600080fd5b50610407610983565b34801561043e57600080fd5b506103db61098c565b34801561045357600080fd5b506102f46004803603604081101561046a57600080fd5b50600160a060020a038135169060200135610a28565b34801561048c57600080fd5b506103db600480360360208110156104a357600080fd5b5035610a89565b3480156104b657600080fd5b506102f4600480360360208110156104cd57600080fd5b5035600160a060020a0316610adf565b3480156104e957600080fd5b506103db610af2565b3480156104fe57600080fd5b50610332610b7e565b34801561051357600080fd5b506102f4610b84565b34801561052857600080fd5b506103db610b8d565b34801561053d57600080fd5b506103326004803603602081101561055457600080fd5b5035600160a060020a0316610c1d565b34801561057057600080fd5b506103326004803603602081101561058757600080fd5b5035600160a060020a0316610c2f565b3480156105a357600080fd5b506103db610c4a565b3480156105b857600080fd5b506103db610cd7565b3480156105cd57600080fd5b506103db600480360360208110156105e457600080fd5b5035610d75565b3480156105f757600080fd5b50610600610e10565b60408051600160a060020a039092168252519081900360200190f35b34801561062857600080fd5b506103db6004803603602081101561063f57600080fd5b5035610e24565b34801561065257600080fd5b506102f4610ebf565b34801561066757600080fd5b506103db610ed5565b34801561067c57600080fd5b50610246610f66565b610332610fc7565b34801561069957600080fd5b506102f4600480360360408110156106b057600080fd5b50600160a060020a03813516906020013561117f565b3480156106d257600080fd5b506102f4600480360360208110156106e957600080fd5b5035600160a060020a031661119c565b34801561070557600080fd5b506103326004803603604081101561071c57600080fd5b50600160a060020a03813581169160200135166111b1565b34801561074057600080fd5b506103326004803603602081101561075757600080fd5b50356111dc565b34801561076a57600080fd5b506103db6004803603604081101561078157600080fd5b50600160a060020a038135169060200135151561135e565b3480156107a557600080fd5b506103db600480360360208110156107bc57600080fd5b5035600160a060020a031661140e565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108585780601f1061082d57610100808354040283529160200191610858565b820191906000526020600020905b81548152906001019060200180831161083b57829003601f168201915b5050505050905090565b60085460009060ff161561087557600080fd5b61087f8383611463565b90505b92915050565b600b54610100900460ff1681565b60035490565b600a5481565b60085460009060ff16156108b557600080fd5b6108c0848484611470565b949350505050565b600b5460ff1681565b6108d9610ebf565b151561091d576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020611a92833981519152604482015290519081900360640190fd5b303181116109675761092d610e10565b600160a060020a03166108fc829081150290604051600060405180830381858888f19350505050158015610965573d6000803e3d6000fd5b505b50565b6b204fce5e3e2502611000000081565b60065460ff1690565b60065460ff1681565b610994610ebf565b15156109d8576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020611a92833981519152604482015290519081900360640190fd5b60085460ff1615156109e957600080fd5b6008805460ff191690556040805133815290517f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9181900360200190a1565b6000610a32610ebf565b1515610a76576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020611a92833981519152604482015290519081900360640190fd5b610a8083836114c7565b50600192915050565b610a91610ebf565b1515610ad5576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020611a92833981519152604482015290519081900360640190fd5b61096733826115aa565b600061088260078363ffffffff61168c16565b610afa610ebf565b1515610b3e576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020611a92833981519152604482015290519081900360640190fd5b600b805460ff19169055604080516000815290517f1a26afc103797a41cda97337e6bccd6b52abf0b3ca40d8b88c3958d827ec2f979181900360200190a1565b60095481565b60085460ff1690565b610b95610ebf565b1515610bd9576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020611a92833981519152604482015290519081900360640190fd5b600b805460ff1916600190811790915560408051918252517f1a26afc103797a41cda97337e6bccd6b52abf0b3ca40d8b88c3958d827ec2f979181900360200190a1565b60006020819052908152604090205481565b600160a060020a031660009081526020819052604090205490565b610c52610ebf565b1515610c96576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020611a92833981519152604482015290519081900360640190fd5b600b805461ff0019169055604080516000815290517f3b5b2c71f43810b5658cc67290694552f6e7aecd6bb56ae2f75661a2929401d69181900360200190a1565b610cdf610ebf565b1515610d23576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020611a92833981519152604482015290519081900360640190fd5b60085460ff1615610d3357600080fd5b6008805460ff191660011790556040805133815290517f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589181900360200190a1565b610d7d610ebf565b1515610dc1576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020611a92833981519152604482015290519081900360640190fd5b60008111610dce57600080fd5b600954604080519182526020820183905280517fcfa7074b22c98fb9291e698be8caae9fd3391198b3dd068fbe42c6da6b9c9bf59281900390910190a1600955565b6006546101009004600160a060020a031690565b610e2c610ebf565b1515610e70576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020611a92833981519152604482015290519081900360640190fd5b60008111610e7d57600080fd5b600a54604080519182526020820183905280517ffa46b8b4ccaecf1d18401d52f6693d32659468c8553f904bf40cbcfd416ac0f69281900390910190a1600a55565b6006546101009004600160a060020a0316331490565b610edd610ebf565b1515610f21576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020611a92833981519152604482015290519081900360640190fd5b600b805461ff001916610100179055604080516001815290517f3b5b2c71f43810b5658cc67290694552f6e7aecd6bb56ae2f75661a2929401d69181900360200190a1565b60058054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108585780601f1061082d57610100808354040283529160200191610858565b6000348110611020576040805160e560020a62461bcd02815260206004820152601360248201527f4976616c696420457468657220616d6f756e7400000000000000000000000000604482015290519081900360640190fd5b3360009081526002602052604090205460ff1615611088576040805160e560020a62461bcd02815260206004820152601060248201527f4163636f75742069732066726f7a656e00000000000000000000000000000000604482015290519081900360640190fd5b600b54610100900460ff1615156110e9576040805160e560020a62461bcd02815260206004820152601860248201527f42757920546f6b656e206973206e6f7420616c6c6f7765640000000000000000604482015290519081900360640190fd5b611133670de0b6b3a764000061112761110061097a565b60ff16600a0a61111b600954346116c390919063ffffffff16565b9063ffffffff6116c316565b9063ffffffff6116ee16565b30600081815260208181526040808320805486900390553380845292819020805486019055805185815290519495509193600080516020611ab28339815191529281900390910190a390565b60085460009060ff161561119257600080fd5b61087f8383611712565b60026020526000908152604090205460ff1681565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b3360009081526020819052604081205482111561122d5760405160e560020a62461bcd028152600401808060200182810382526027815260200180611ad26027913960400191505060405180910390fd5b3360009081526002602052604090205460ff1615611295576040805160e560020a62461bcd02815260206004820152601960248201527f436865636b2069662073656e6465722069732066726f7a656e00000000000000604482015290519081900360640190fd5b600b5460ff1615156112a657600080fd5b306000908152602081905260408082208054850190553382529020805483900390556113036112eb6112d661097a565b600a80549160ff16900a63ffffffff6116c316565b61112784670de0b6b3a764000063ffffffff6116c316565b604051909150339082156108fc029083906000818181858888f19350505050158015611333573d6000803e3d6000fd5b5060408051838152905130913391600080516020611ab28339815191529181900360200190a3919050565b611366610ebf565b15156113aa576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020611a92833981519152604482015290519081900360640190fd5b600160a060020a038216600081815260026020908152604091829020805460ff191685151590811790915582519384529083015280517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a59281900390910190a15050565b611416610ebf565b151561145a576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020611a92833981519152604482015290519081900360640190fd5b6109678161171f565b6000610a803384846117a8565b600061147d848484611834565b600160a060020a0384166000908152600160209081526040808320338085529252909120546114bd9186916114b8908663ffffffff611a1c16565b6117a8565b5060019392505050565b600160a060020a0382161515611527576040805160e560020a62461bcd02815260206004820152601860248201527f436865636b20726563697069656e742069732027307830270000000000000000604482015290519081900360640190fd5b60035461153a908263ffffffff611a3116565b600355600160a060020a038216600090815260208190526040902054611566908263ffffffff611a3116565b600160a060020a038316600081815260208181526040808320949094558351858152935192939192600080516020611ab28339815191529281900390910190a35050565b600160a060020a038216151561160a576040805160e560020a62461bcd02815260206004820152601860248201527f436865636b20726563697069656e74206973206f776e65720000000000000000604482015290519081900360640190fd5b60035461161d908263ffffffff611a1c16565b600355600160a060020a038216600090815260208190526040902054611649908263ffffffff611a1c16565b600160a060020a03831660008181526020818152604080832094909455835185815293519193600080516020611ab2833981519152929081900390910190a35050565b6000600160a060020a03821615156116a357600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b60008215156116d457506000610882565b8282028284828115156116e357fe5b041461087f57600080fd5b60008082116116fc57600080fd5b6000828481151561170957fe5b04949350505050565b6000610a80338484611834565b600160a060020a038116151561173457600080fd5b600654604051600160a060020a0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360068054600160a060020a039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b600160a060020a03821615156117bd57600080fd5b600160a060020a03831615156117d257600080fd5b600160a060020a03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b600160a060020a0382161515611894576040805160e560020a62461bcd02815260206004820152601860248201527f436865636b20726563697069656e74206973206f776e65720000000000000000604482015290519081900360640190fd5b600160a060020a03831660009081526002602052604090205460ff1615611905576040805160e560020a62461bcd02815260206004820152601960248201527f436865636b2069662073656e6465722069732066726f7a656e00000000000000604482015290519081900360640190fd5b600160a060020a03821660009081526002602052604090205460ff1615611976576040805160e560020a62461bcd02815260206004820152601c60248201527f436865636b20696620726563697069656e742069732066726f7a656e00000000604482015290519081900360640190fd5b600160a060020a03831660009081526020819052604090205461199f908263ffffffff611a1c16565b600160a060020a0380851660009081526020819052604080822093909355908416815220546119d4908263ffffffff611a3116565b600160a060020a03808416600081815260208181526040918290209490945580518581529051919392871692600080516020611ab283398151915292918290030190a3505050565b600082821115611a2b57600080fd5b50900390565b60008282018381101561087f57600080fd5b600160a060020a0381161515611a5857600080fd5b611a62828261168c565b15611a6c57600080fd5b600160a060020a0316600090815260209190915260409020805460ff1916600117905556fe496e76616c6964206f776e657200000000000000000000000000000000000000ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef436865636b73206966207468652073656e6465722068617320656e6f75676820746f2073656c6ca165627a7a72305820cad2fcf388e6c7ec2488f6a9c4789fcefeabfb3d769810791e0be3d31f4213210029"
}