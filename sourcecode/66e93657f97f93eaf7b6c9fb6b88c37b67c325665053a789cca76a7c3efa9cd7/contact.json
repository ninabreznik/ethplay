{
  "address": "0xc74629dbb6458688581accfda1f54b5fe6b16305",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CustomToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-29\n*/\n\npragma solidity ^0.4.19;\n\ncontract BaseToken {\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != 0x0);\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n        Transfer(_from, _to, _value);\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n}\n\ncontract ICOToken is BaseToken {\n    // 1 ether = icoRatio token\n    uint256 public icoRatio;\n    uint256 public icoBegintime;\n    uint256 public icoEndtime;\n    address public icoSender;\n    address public icoHolder;\n\n    event ICO(address indexed from, uint256 indexed value, uint256 tokenValue);\n    event Withdraw(address indexed from, address indexed holder, uint256 value);\n\n    function ico() public payable {\n        require(now >= icoBegintime && now <= icoEndtime);\n        uint256 tokenValue = (msg.value * icoRatio * 10 ** uint256(decimals)) / (1 ether / 1 wei);\n        if (tokenValue == 0 || balanceOf[icoSender] < tokenValue) {\n            revert();\n        }\n        _transfer(icoSender, msg.sender, tokenValue);\n        ICO(msg.sender, msg.value, tokenValue);\n    }\n\n    function withdraw() public {\n        uint256 balance = this.balance;\n        icoHolder.transfer(balance);\n        Withdraw(msg.sender, icoHolder, balance);\n    }\n}\n\ncontract CustomToken is BaseToken, ICOToken {\n    function CustomToken() public {\n        totalSupply = 1000000000000000000000000000;\n        name = 'GIOCOO';\n        symbol = 'GICC';\n        decimals = 18;\n        balanceOf[0x516dc06b3940c3f3c30bf7480c893625f74cc2ca] = totalSupply;\n        Transfer(address(0), 0x516dc06b3940c3f3c30bf7480c893625f74cc2ca, totalSupply);\n\n        icoRatio = 20000;\n        icoBegintime = 1522555200;\n        icoEndtime = 1554091200;\n        icoSender = 0x76ac1eaf8530ef25011bdf9873ab72e3d5d08d4b;\n        icoHolder = 0x76ac1eaf8530ef25011bdf9873ab72e3d5d08d4b;\n    }\n\n    function() public payable {\n        ico();\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b6b033b2e3c9fd0803ce800000060035560408051908101604052600681527f47494f434f4f000000000000000000000000000000000000000000000000000060208201526000908051610066929160200190610188565b5060408051908101604052600481527f4749434300000000000000000000000000000000000000000000000000000000602082015260019080516100ae929160200190610188565b506002805460ff1916601217905560035473516dc06b3940c3f3c30bf7480c893625f74cc2ca600081815260046020527fc7cd4678b3545e4697a26119e8ded60f76ad3c113abb62a273471864948a9ace83905590917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060405190815260200160405180910390a3614e20600655635ac05940600755635ca18cc0600855600980547376ac1eaf8530ef25011bdf9873ab72e3d5d08d4b600160a060020a03199182168117909255600a80549091169091179055610223565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101c957805160ff19168380011785556101f6565b828001600101855582156101f6579182015b828111156101f65782518255916020019190600101906101db565b50610202929150610206565b5090565b61022091905b80821115610202576000815560010161020c565b90565b610800806102326000396000f3006060604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100ef578063095ea7b31461017957806318160ddd146101af57806323b872dd146101d4578063313ce567146101fc5780633ccfd60b146102255780635d452201146100e557806370a082311461023857806395d89b4114610257578063a2ebb20b1461026a578063a9059cbb14610299578063b3b8c620146102bb578063d211fe86146102ce578063dd62ed3e146102e1578063de28fc1d14610306578063e6136d8414610319575b6100ed61032c565b005b34156100fa57600080fd5b6101026103f4565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561013e578082015183820152602001610126565b50505050905090810190601f16801561016b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561018457600080fd5b61019b600160a060020a0360043516602435610492565b604051901515815260200160405180910390f35b34156101ba57600080fd5b6101c26104fe565b60405190815260200160405180910390f35b34156101df57600080fd5b61019b600160a060020a0360043581169060243516604435610504565b341561020757600080fd5b61020f61057b565b60405160ff909116815260200160405180910390f35b341561023057600080fd5b6100ed610584565b341561024357600080fd5b6101c2600160a060020a0360043516610603565b341561026257600080fd5b610102610615565b341561027557600080fd5b61027d610680565b604051600160a060020a03909116815260200160405180910390f35b34156102a457600080fd5b61019b600160a060020a036004351660243561068f565b34156102c657600080fd5b6101c26106a5565b34156102d957600080fd5b6101c26106ab565b34156102ec57600080fd5b6101c2600160a060020a03600435811690602435166106b1565b341561031157600080fd5b61027d6106ce565b341561032457600080fd5b6101c26106dd565b6000600754421015801561034257506008544211155b151561034d57600080fd5b600254600654670de0b6b3a76400009160ff16600a0a34909102020490508015806103925750600954600160a060020a03166000908152600460205260409020548190105b1561039c57600080fd5b6009546103b390600160a060020a031633836106e3565b3433600160a060020a03167f4a987bc3d04b32db133ad9a3c7c0d8ecc441eb56f45a62b92c38384c095e7ac08360405190815260200160405180910390a350565b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561048a5780601f1061045f5761010080835404028352916020019161048a565b820191906000526020600020905b81548152906001019060200180831161046d57829003601f168201915b505050505081565b600160a060020a03338116600081815260056020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60035481565b600160a060020a0380841660009081526005602090815260408083203390941683529290529081205482111561053957600080fd5b600160a060020a03808516600090815260056020908152604080832033909416835292905220805483900390556105718484846106e3565b5060019392505050565b60025460ff1681565b600a54600160a060020a0330811631911681156108fc0282604051600060405180830381858888f1935050505015156105bc57600080fd5b600a54600160a060020a039081169033167f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb8360405190815260200160405180910390a350565b60046020526000908152604090205481565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561048a5780601f1061045f5761010080835404028352916020019161048a565b600a54600160a060020a031681565b600061069c3384846106e3565b50600192915050565b60065481565b60085481565b600560209081526000928352604080842090915290825290205481565b600954600160a060020a031681565b60075481565b6000600160a060020a03831615156106fa57600080fd5b600160a060020a0384166000908152600460205260409020548290101561072057600080fd5b600160a060020a0383166000908152600460205260409020548281011161074657600080fd5b50600160a060020a03828116600090815260046020526040808220805493871683529120805484810382558254850192839055905492019101811461078757fe5b82600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a3505050505600a165627a7a7230582076a8105787d9c4c173ced3c21ab521d61de3830b1c77f90ffc98f8ac7f18c5600029"
}