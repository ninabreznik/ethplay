{
  "address": "0x60ce035dc589c3fd185b224a7ca03c598948973b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AxieSiringClockAuction",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-17\n*/\n\npragma solidity ^0.4.23;\n\n// File: contracts/breeding/AxieIncubatorInterface.sol\n\ninterface AxieIncubatorInterface {\n  function breedingFee() external view returns (uint256);\n\n  function requireEnoughExpForBreeding(\n    uint256 _axieId\n  )\n    external\n    view;\n\n  function breedAxies(\n    uint256 _sireId,\n    uint256 _matronId,\n    uint256 _birthPlace\n  )\n    external\n    payable\n    returns (uint256 _axieId);\n}\n\n// File: contracts/erc/erc721/IERC721Base.sol\n\n/// @title ERC-721 Non-Fungible Token Standard\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n///  Note: the ERC-165 identifier for this interface is 0x6466353c\ninterface IERC721Base /* is IERC165  */ {\n  /// @dev This emits when ownership of any NFT changes by any mechanism.\n  ///  This event emits when NFTs are created (`from` == 0) and destroyed\n  ///  (`to` == 0). Exception: during contract creation, any number of NFTs\n  ///  may be created and assigned without emitting Transfer. At the time of\n  ///  any transfer, the approved address for that NFT (if any) is reset to none.\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n\n  /// @dev This emits when the approved address for an NFT is changed or\n  ///  reaffirmed. The zero address indicates there is no approved address.\n  ///  When a Transfer event emits, this also indicates that the approved\n  ///  address for that NFT (if any) is reset to none.\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n\n  /// @dev This emits when an operator is enabled or disabled for an owner.\n  ///  The operator can manage all NFTs of the owner.\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n  /// @notice Count all NFTs assigned to an owner\n  /// @dev NFTs assigned to the zero address are considered invalid, and this\n  ///  function throws for queries about the zero address.\n  /// @param _owner An address for whom to query the balance\n  /// @return The number of NFTs owned by `_owner`, possibly zero\n  function balanceOf(address _owner) external view returns (uint256);\n\n  /// @notice Find the owner of an NFT\n  /// @param _tokenId The identifier for an NFT\n  /// @dev NFTs assigned to zero address are considered invalid, and queries\n  ///  about them do throw.\n  /// @return The address of the owner of the NFT\n  function ownerOf(uint256 _tokenId) external view returns (address);\n\n  /// @notice Transfers the ownership of an NFT from one address to another address\n  /// @dev Throws unless `msg.sender` is the current owner, an authorized\n  ///  operator, or the approved address for this NFT. Throws if `_from` is\n  ///  not the current owner. Throws if `_to` is the zero address. Throws if\n  ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\n  ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\n  ///  `onERC721Received` on `_to` and throws if the return value is not\n  ///  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`.\n  /// @param _from The current owner of the NFT\n  /// @param _to The new owner\n  /// @param _tokenId The NFT to transfer\n  /// @param _data Additional data with no specified format, sent in call to `_to`\n  // solium-disable-next-line arg-overflow\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) external payable;\n\n  /// @notice Transfers the ownership of an NFT from one address to another address\n  /// @dev This works identically to the other function with an extra data parameter,\n  ///  except this function just sets data to []\n  /// @param _from The current owner of the NFT\n  /// @param _to The new owner\n  /// @param _tokenId The NFT to transfer\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\n\n  /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\n  ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\n  ///  THEY MAY BE PERMANENTLY LOST\n  /// @dev Throws unless `msg.sender` is the current owner, an authorized\n  ///  operator, or the approved address for this NFT. Throws if `_from` is\n  ///  not the current owner. Throws if `_to` is the zero address. Throws if\n  ///  `_tokenId` is not a valid NFT.\n  /// @param _from The current owner of the NFT\n  /// @param _to The new owner\n  /// @param _tokenId The NFT to transfer\n  function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\n\n  /// @notice Set or reaffirm the approved address for an NFT\n  /// @dev The zero address indicates there is no approved address.\n  /// @dev Throws unless `msg.sender` is the current NFT owner, or an authorized\n  ///  operator of the current owner.\n  /// @param _approved The new approved NFT controller\n  /// @param _tokenId The NFT to approve\n  function approve(address _approved, uint256 _tokenId) external payable;\n\n  /// @notice Enable or disable approval for a third party (\"operator\") to manage\n  ///  all your asset.\n  /// @dev Emits the ApprovalForAll event\n  /// @param _operator Address to add to the set of authorized operators.\n  /// @param _approved True if the operators is approved, false to revoke approval\n  function setApprovalForAll(address _operator, bool _approved) external;\n\n  /// @notice Get the approved address for a single NFT\n  /// @dev Throws if `_tokenId` is not a valid NFT\n  /// @param _tokenId The NFT to find the approved address for\n  /// @return The approved address for this NFT, or the zero address if there is none\n  function getApproved(uint256 _tokenId) external view returns (address);\n\n  /// @notice Query if an address is an authorized operator for another address\n  /// @param _owner The address that owns the NFTs\n  /// @param _operator The address that acts on behalf of the owner\n  /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\n  function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n}\n\n// File: zeppelin/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: zeppelin/contracts/lifecycle/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\n// File: zeppelin/contracts/ownership/HasNoContracts.sol\n\n/**\n * @title Contracts that should not own Contracts\n * @author Remco Bloemen <[email protected]π.com>\n * @dev Should contracts (anything Ownable) end up being owned by this contract, it allows the owner\n * of this contract to reclaim ownership of the contracts.\n */\ncontract HasNoContracts is Ownable {\n\n  /**\n   * @dev Reclaim ownership of Ownable contracts\n   * @param contractAddr The address of the Ownable to be reclaimed.\n   */\n  function reclaimContract(address contractAddr) external onlyOwner {\n    Ownable contractInst = Ownable(contractAddr);\n    contractInst.transferOwnership(owner);\n  }\n}\n\n// File: zeppelin/contracts/token/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: zeppelin/contracts/token/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: zeppelin/contracts/token/SafeERC20.sol\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    assert(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n    assert(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    assert(token.approve(spender, value));\n  }\n}\n\n// File: zeppelin/contracts/ownership/CanReclaimToken.sol\n\n/**\n * @title Contracts that should be able to recover tokens\n * @author SylTi\n * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n * This will prevent any accidental loss of tokens.\n */\ncontract CanReclaimToken is Ownable {\n  using SafeERC20 for ERC20Basic;\n\n  /**\n   * @dev Reclaim all ERC20Basic compatible tokens\n   * @param token ERC20Basic The address of the token contract\n   */\n  function reclaimToken(ERC20Basic token) external onlyOwner {\n    uint256 balance = token.balanceOf(this);\n    token.safeTransfer(owner, balance);\n  }\n\n}\n\n// File: zeppelin/contracts/ownership/HasNoTokens.sol\n\n/**\n * @title Contracts that should not own Tokens\n * @author Remco Bloemen <[email protected]π.com>\n * @dev This blocks incoming ERC23 tokens to prevent accidental loss of tokens.\n * Should tokens (any ERC20Basic compatible) end up in the contract, it allows the\n * owner to reclaim the tokens.\n */\ncontract HasNoTokens is CanReclaimToken {\n\n /**\n  * @dev Reject all ERC23 compatible tokens\n  * @param from_ address The address that is transferring the tokens\n  * @param value_ uint256 the amount of the specified token\n  * @param data_ Bytes The data passed from the caller.\n  */\n  function tokenFallback(address from_, uint256 value_, bytes data_) external {\n    revert();\n  }\n\n}\n\n// File: contracts/marketplace/AxieSiringClockAuction.sol\n\n/// @title Clock auction for Axie siring.\ncontract AxieSiringClockAuction is HasNoContracts, HasNoTokens, Pausable {\n  // Represents an auction on an NFT.\n  struct Auction {\n    // Current owner of NFT.\n    address seller;\n    // Price (in wei) at beginning of auction.\n    uint128 startingPrice;\n    // Price (in wei) at end of auction.\n    uint128 endingPrice;\n    // Duration (in seconds) of auction.\n    uint64 duration;\n    // Time when auction started.\n    // NOTE: 0 if this auction has been concluded.\n    uint64 startedAt;\n  }\n\n  // Cut owner takes on each auction, measured in basis points (1/100 of a percent).\n  // Values 0-10,000 map to 0%-100%.\n  uint256 public ownerCut;\n\n  IERC721Base coreContract;\n  AxieIncubatorInterface incubatorContract;\n\n  // Map from Axie ID to their corresponding auction.\n  mapping (uint256 => Auction) public auctions;\n\n  event AuctionCreated(\n    uint256 indexed _axieId,\n    uint256 _startingPrice,\n    uint256 _endingPrice,\n    uint256 _duration,\n    address _seller\n  );\n\n  event AuctionSuccessful(\n    uint256 indexed _sireId,\n    uint256 indexed _matronId,\n    uint256 _totalPrice,\n    address _winner\n  );\n\n  event AuctionCancelled(uint256 indexed _axieId);\n\n  /// @dev Constructor creates a reference to the NFT ownership contract\n  ///  and verifies the owner cut is in the valid range.\n  /// @param _ownerCut - percent cut the owner takes on each auction, must be\n  ///  between 0-10,000.\n  constructor(uint256 _ownerCut) public {\n    require(_ownerCut <= 10000);\n    ownerCut = _ownerCut;\n  }\n\n  function () external payable onlyOwner {\n  }\n\n  // Modifiers to check that inputs can be safely stored with a certain\n  // number of bits. We use constants and multiple modifiers to save gas.\n  modifier canBeStoredWith64Bits(uint256 _value) {\n    require(_value <= 18446744073709551615);\n    _;\n  }\n\n  modifier canBeStoredWith128Bits(uint256 _value) {\n    require(_value < 340282366920938463463374607431768211455);\n    _;\n  }\n\n  function reclaimEther() external onlyOwner {\n    owner.transfer(address(this).balance);\n  }\n\n  function setCoreContract(address _coreAddress) external onlyOwner {\n    coreContract = IERC721Base(_coreAddress);\n  }\n\n  function setIncubatorContract(address _incubatorAddress) external onlyOwner {\n    incubatorContract = AxieIncubatorInterface(_incubatorAddress);\n  }\n\n  /// @dev Returns auction info for an NFT on auction.\n  /// @param _axieId - ID of NFT on auction.\n  function getAuction(\n    uint256 _axieId\n  )\n    external\n    view\n    returns (\n      address seller,\n      uint256 startingPrice,\n      uint256 endingPrice,\n      uint256 duration,\n      uint256 startedAt\n    )\n  {\n    Auction storage _auction = auctions[_axieId];\n    require(_isOnAuction(_auction));\n    return (\n      _auction.seller,\n      _auction.startingPrice,\n      _auction.endingPrice,\n      _auction.duration,\n      _auction.startedAt\n    );\n  }\n\n  /// @dev Returns the current price of an auction.\n  /// @param _axieId - ID of the Axie price we are checking.\n  function getCurrentPrice(\n    uint256 _axieId\n  )\n    external\n    view\n    returns (uint256)\n  {\n    Auction storage _auction = auctions[_axieId];\n    require(_isOnAuction(_auction));\n    return _getCurrentPrice(_auction);\n  }\n\n  /// @dev Creates and begins a new auction.\n  /// @param _axieId - ID of Axie to auction, sender must be owner.\n  /// @param _startingPrice - Price of item (in wei) at beginning of auction.\n  /// @param _endingPrice - Price of item (in wei) at end of auction.\n  /// @param _duration - Length of time to move between starting\n  ///  price and ending price (in seconds).\n  function createAuction(\n    uint256 _axieId,\n    uint256 _startingPrice,\n    uint256 _endingPrice,\n    uint256 _duration\n  )\n    external\n    whenNotPaused\n    canBeStoredWith128Bits(_startingPrice)\n    canBeStoredWith128Bits(_endingPrice)\n    canBeStoredWith64Bits(_duration)\n  {\n    address _seller = msg.sender;\n\n    require(coreContract.ownerOf(_axieId) == _seller);\n    incubatorContract.requireEnoughExpForBreeding(_axieId); // Validate EXP for breeding.\n\n    _escrow(_seller, _axieId);\n\n    Auction memory _auction = Auction(\n      _seller,\n      uint128(_startingPrice),\n      uint128(_endingPrice),\n      uint64(_duration),\n      uint64(now)\n    );\n\n    _addAuction(\n      _axieId,\n      _auction,\n      _seller\n    );\n  }\n\n  /// @dev Bids on an siring auction and completing it.\n  /// @param _sireId - ID of Axie to bid on siring.\n  /// @param _matronId - ID of matron Axie.\n  function bidOnSiring(\n    uint256 _sireId,\n    uint256 _matronId,\n    uint256 _birthPlace\n  )\n    external\n    payable\n    whenNotPaused\n    returns (uint256 /* _axieId */)\n  {\n    Auction storage _auction = auctions[_sireId];\n    require(_isOnAuction(_auction));\n\n    require(msg.sender == coreContract.ownerOf(_matronId));\n\n    // Save seller address here since `_bid` will clear it.\n    address _seller = _auction.seller;\n\n    // _bid will throw if the bid or funds transfer fails.\n    _bid(_sireId, _matronId, msg.value, _auction);\n\n    uint256 _axieId = incubatorContract.breedAxies.value(\n      incubatorContract.breedingFee()\n    )(\n      _sireId,\n      _matronId,\n      _birthPlace\n    );\n\n    _transfer(_seller, _sireId);\n\n    return _axieId;\n  }\n\n  /// @dev Cancels an auction that hasn't been won yet.\n  ///  Returns the NFT to original owner.\n  /// @notice This is a state-modifying function that can\n  ///  be called while the contract is paused.\n  /// @param _axieId - ID of Axie on auction.\n  function cancelAuction(uint256 _axieId) external {\n    Auction storage _auction = auctions[_axieId];\n    require(_isOnAuction(_auction));\n    require(msg.sender == _auction.seller);\n    _cancelAuction(_axieId, _auction.seller);\n  }\n\n  /// @dev Cancels an auction when the contract is paused.\n  ///  Only the owner may do this, and NFTs are returned to\n  ///  the seller. This should only be used in emergencies.\n  /// @param _axieId - ID of the NFT on auction to cancel.\n  function cancelAuctionWhenPaused(\n    uint256 _axieId\n  )\n    external\n    whenPaused\n    onlyOwner\n  {\n    Auction storage _auction = auctions[_axieId];\n    require(_isOnAuction(_auction));\n    _cancelAuction(_axieId, _auction.seller);\n  }\n\n  /// @dev Returns true if the NFT is on auction.\n  /// @param _auction - Auction to check.\n  function _isOnAuction(Auction storage _auction) internal view returns (bool) {\n    return (_auction.startedAt > 0);\n  }\n\n  /// @dev Returns current price of an NFT on auction. Broken into two\n  ///  functions (this one, that computes the duration from the auction\n  ///  structure, and the other that does the price computation) so we\n  ///  can easily test that the price computation works correctly.\n  function _getCurrentPrice(\n    Auction storage _auction\n  )\n    internal\n    view\n    returns (uint256)\n  {\n    uint256 _secondsPassed = 0;\n\n    // A bit of insurance against negative values (or wraparound).\n    // Probably not necessary (since Ethereum guarantees that the\n    // now variable doesn't ever go backwards).\n    if (now > _auction.startedAt) {\n      _secondsPassed = now - _auction.startedAt;\n    }\n\n    return _computeCurrentPrice(\n      _auction.startingPrice,\n      _auction.endingPrice,\n      _auction.duration,\n      _secondsPassed\n    );\n  }\n\n  /// @dev Computes the current price of an auction. Factored out\n  ///  from _currentPrice so we can run extensive unit tests.\n  ///  When testing, make this function external and turn on\n  ///  `Current price computation` test suite.\n  function _computeCurrentPrice(\n    uint256 _startingPrice,\n    uint256 _endingPrice,\n    uint256 _duration,\n    uint256 _secondsPassed\n  )\n    internal\n    pure\n    returns (uint256)\n  {\n    // NOTE: We don't use SafeMath (or similar) in this function because\n    //  all of our external functions carefully cap the maximum values for\n    //  time (at 64-bits) and currency (at 128-bits). _duration is\n    //  also known to be non-zero (see the require() statement in\n    //  _addAuction()).\n    if (_secondsPassed >= _duration) {\n      // We've reached the end of the dynamic pricing portion\n      // of the auction, just return the end price.\n      return _endingPrice;\n    } else {\n      // Starting price can be higher than ending price (and often is!), so\n      // this delta can be negative.\n      int256 _totalPriceChange = int256(_endingPrice) - int256(_startingPrice);\n\n      // This multiplication can't overflow, _secondsPassed will easily fit within\n      // 64-bits, and _totalPriceChange will easily fit within 128-bits, their product\n      // will always fit within 256-bits.\n      int256 _currentPriceChange = _totalPriceChange * int256(_secondsPassed) / int256(_duration);\n\n      // _currentPriceChange can be negative, but if so, will have a magnitude\n      // less that _startingPrice. Thus, this result will always end up positive.\n      int256 _currentPrice = int256(_startingPrice) + _currentPriceChange;\n\n      return uint256(_currentPrice);\n    }\n  }\n\n  /// @dev Adds an auction to the list of open auctions. Also fires the\n  ///  AuctionCreated event.\n  /// @param _axieId The ID of the Axie to be put on auction.\n  /// @param _auction Auction to add.\n  function _addAuction(\n    uint256 _axieId,\n    Auction memory _auction,\n    address _seller\n  )\n    internal\n  {\n    // Require that all auctions have a duration of\n    // at least one minute. (Keeps our math from getting hairy!).\n    require(_auction.duration >= 1 minutes);\n\n    auctions[_axieId] = _auction;\n\n    emit AuctionCreated(\n      _axieId,\n      uint256(_auction.startingPrice),\n      uint256(_auction.endingPrice),\n      uint256(_auction.duration),\n      _seller\n    );\n  }\n\n  /// @dev Removes an auction from the list of open auctions.\n  /// @param _axieId - ID of NFT on auction.\n  function _removeAuction(uint256 _axieId) internal {\n    delete auctions[_axieId];\n  }\n\n  /// @dev Cancels an auction unconditionally.\n  function _cancelAuction(uint256 _axieId, address _seller) internal {\n    _removeAuction(_axieId);\n    _transfer(_seller, _axieId);\n    emit AuctionCancelled(_axieId);\n  }\n\n  /// @dev Escrows the NFT, assigning ownership to this contract.\n  /// Throws if the escrow fails.\n  /// @param _owner - Current owner address of Axie to escrow.\n  /// @param _axieId - ID of Axie whose approval to verify.\n  function _escrow(address _owner, uint256 _axieId) internal {\n    // It will throw if transfer fails.\n    coreContract.transferFrom(_owner, this, _axieId);\n  }\n\n  /// @dev Transfers an NFT owned by this contract to another address.\n  /// Returns true if the transfer succeeds.\n  /// @param _receiver - Address to transfer NFT to.\n  /// @param _axieId - ID of Axie to transfer.\n  function _transfer(address _receiver, uint256 _axieId) internal {\n    // It will throw if transfer fails\n    coreContract.transferFrom(this, _receiver, _axieId);\n  }\n\n  /// @dev Computes owner's cut of a sale.\n  /// @param _price - Sale price of NFT.\n  function _computeCut(uint256 _price) internal view returns (uint256) {\n    // NOTE: We don't use SafeMath (or similar) in this function because\n    //  all of our entry functions carefully cap the maximum values for\n    //  currency (at 128-bits), and ownerCut <= 10000 (see the require()\n    //  statement in the ClockAuction constructor). The result of this\n    //  function is always guaranteed to be <= _price.\n    return _price * ownerCut / 10000;\n  }\n\n  /// @dev Computes the price and transfers winnings.\n  /// Does NOT transfer ownership of Axie.\n  function _bid(\n    uint256 _sireId,\n    uint256 _matronId,\n    uint256 _bidAmount,\n    Auction storage _auction\n  )\n    internal\n    returns (uint256)\n  {\n    // Check that the incoming bid is higher than the current price.\n    uint256 _price = _getCurrentPrice(_auction);\n    uint256 _priceWithFee = _price + incubatorContract.breedingFee();\n\n    // Technically this shouldn't happen as `_price` fits in 128 bits.\n    // However, we could set `breedingFee` to a very large number accidentally.\n    assert(_priceWithFee >= _price);\n\n    require(_bidAmount >= _priceWithFee);\n\n    // Grab a reference to the seller before the auction struct\n    // gets deleted.\n    address _seller = _auction.seller;\n\n    // The bid is good! Remove the auction before sending the fees\n    // to the sender so we can't have a reentrancy attack.\n    _removeAuction(_sireId);\n\n    // Transfer proceeds to seller (if there are any!)\n    if (_price > 0) {\n      //  Calculate the auctioneer's cut.\n      // (NOTE: _computeCut() is guaranteed to return a\n      //  value <= price, so this subtraction can't go negative.)\n      uint256 _auctioneerCut = _computeCut(_price);\n      uint256 _sellerProceeds = _price - _auctioneerCut;\n\n      // NOTE: Doing a transfer() in the middle of a complex\n      // method like this is generally discouraged because of\n      // reentrancy attacks and DoS attacks if the seller is\n      // a contract with an invalid fallback function. We explicitly\n      // guard against reentrancy attacks by removing the auction\n      // before calling transfer(), and the only thing the seller\n      // can DoS is the sale of their own asset! (And if it's an\n      // accident, they can call cancelAuction().)\n      _seller.transfer(_sellerProceeds);\n    }\n\n    if (_bidAmount > _priceWithFee) {\n      // Calculate any excess funds included with the bid. If the excess\n      // is anything worth worrying about, transfer it back to bidder.\n      // NOTE: We checked above that the bid amount is greater than or\n      // equal to the price so this cannot underflow.\n      uint256 _bidExcess = _bidAmount - _priceWithFee;\n\n      // Return the funds. Similar to the previous transfer, this is\n      // not susceptible to a re-entry attack because the auction is\n      // removed before any transfers occur.\n      msg.sender.transfer(_bidExcess);\n    }\n\n    // Tell the world!\n    emit AuctionSuccessful(\n      _sireId,\n      _matronId,\n      _price,\n      msg.sender\n    );\n\n    return _price;\n  }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_incubatorAddress\",\"type\":\"address\"}],\"name\":\"setIncubatorContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddr\",\"type\":\"address\"}],\"name\":\"reclaimContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_axieId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sireId\",\"type\":\"uint256\"},{\"name\":\"_matronId\",\"type\":\"uint256\"},{\"name\":\"_birthPlace\",\"type\":\"uint256\"}],\"name\":\"bidOnSiring\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"startingPrice\",\"type\":\"uint128\"},{\"name\":\"endingPrice\",\"type\":\"uint128\"},{\"name\":\"duration\",\"type\":\"uint64\"},{\"name\":\"startedAt\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_axieId\",\"type\":\"uint256\"}],\"name\":\"getAuction\",\"outputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"startingPrice\",\"type\":\"uint256\"},{\"name\":\"endingPrice\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"startedAt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_axieId\",\"type\":\"uint256\"}],\"name\":\"cancelAuctionWhenPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_axieId\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from_\",\"type\":\"address\"},{\"name\":\"value_\",\"type\":\"uint256\"},{\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_axieId\",\"type\":\"uint256\"}],\"name\":\"getCurrentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_coreAddress\",\"type\":\"address\"}],\"name\":\"setCoreContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ownerCut\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_axieId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_duration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sireId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_matronId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_totalPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_winner\",\"type\":\"address\"}],\"name\":\"AuctionSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_axieId\",\"type\":\"uint256\"}],\"name\":\"AuctionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "60806040526000805460a060020a60ff021916905534801561002057600080fd5b506040516020806114a9833981016040525160008054600160a060020a03191633600160a060020a031617905561271081111561005c57600080fd5b60015561143b8061006e6000396000f3006080604052600436106100ed5763ffffffff60e060020a60003504166317ffc320811461010a5780631e7bef651461012b5780632aed7f3f1461014c5780633f4ba83a1461016d578063431f21da14610182578063522c8401146101a3578063571a26a0146101c65780635c975abb1461022c57806378bd79351461025557806383b5ff8b146102a25780638456cb59146102b7578063878eb368146102cc5780638da5cb5b146102e457806396b5a755146103155780639f727c271461032d578063c0ee0b8a14610342578063c55d0f5614610373578063c62666931461038b578063f2fde38b146103ac575b60005433600160a060020a0390811691161461010857600080fd5b005b34801561011657600080fd5b50610108600160a060020a03600435166103cd565b34801561013757600080fd5b50610108600160a060020a0360043516610497565b34801561015857600080fd5b50610108600160a060020a03600435166104e1565b34801561017957600080fd5b5061010861057f565b34801561018e57600080fd5b506101086004356024356044356064356105f9565b6101b46004356024356044356107f9565b60408051918252519081900360200190f35b3480156101d257600080fd5b506101de600435610a21565b60408051600160a060020a0390961686526001608060020a039485166020870152929093168483015267ffffffffffffffff9081166060850152919091166080830152519081900360a00190f35b34801561023857600080fd5b50610241610a88565b604080519115158252519081900360200190f35b34801561026157600080fd5b5061026d600435610a98565b60408051600160a060020a03909616865260208601949094528484019290925260608401526080830152519081900360a00190f35b3480156102ae57600080fd5b506101b4610b25565b3480156102c357600080fd5b50610108610b2b565b3480156102d857600080fd5b50610108600435610baa565b3480156102f057600080fd5b506102f9610c17565b60408051600160a060020a039092168252519081900360200190f35b34801561032157600080fd5b50610108600435610c26565b34801561033957600080fd5b50610108610c62565b34801561034e57600080fd5b5061010860048035600160a060020a0316906024803591604435918201910135610cbf565b34801561037f57600080fd5b506101b4600435610cc4565b34801561039757600080fd5b50610108600160a060020a0360043516610cf6565b3480156103b857600080fd5b50610108600160a060020a0360043516610d40565b6000805433600160a060020a039081169116146103e957600080fd5b81600160a060020a03166370a08231306040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b15801561044457600080fd5b505af1158015610458573d6000803e3d6000fd5b505050506040513d602081101561046e57600080fd5b505160005490915061049390600160a060020a0384811691168363ffffffff610dd816565b5050565b60005433600160a060020a039081169116146104b257600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000805433600160a060020a039081169116146104fd57600080fd5b5060008054604080517ff2fde38b000000000000000000000000000000000000000000000000000000008152600160a060020a039283166004820152905184939284169263f2fde38b926024808201939182900301818387803b15801561056357600080fd5b505af1158015610577573d6000803e3d6000fd5b505050505050565b60005433600160a060020a0390811691161461059a57600080fd5b60005460a060020a900460ff1615156105b257600080fd5b6000805474ff0000000000000000000000000000000000000000191681556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b339190a1565b60006106036113e1565b60005460a060020a900460ff161561061a57600080fd5b846001608060020a03811061062e57600080fd5b846001608060020a03811061064257600080fd5b8467ffffffffffffffff81111561065857600080fd5b600254604080517f6352211e000000000000000000000000000000000000000000000000000000008152600481018c90529051339750600160a060020a03808916931691636352211e9160248083019260209291908290030181600087803b1580156106c357600080fd5b505af11580156106d7573d6000803e3d6000fd5b505050506040513d60208110156106ed57600080fd5b5051600160a060020a03161461070257600080fd5b600354604080517fbcf7bd0b000000000000000000000000000000000000000000000000000000008152600481018c90529051600160a060020a039092169163bcf7bd0b9160248082019260009290919082900301818387803b15801561076857600080fd5b505af115801561077c573d6000803e3d6000fd5b5050505061078a858a610e74565b60a06040519081016040528086600160a060020a03168152602001896001608060020a03168152602001886001608060020a031681526020018767ffffffffffffffff1681526020014267ffffffffffffffff1681525093506107ee898587610eea565b505050505050505050565b6000805481908190819060a060020a900460ff161561081757600080fd5b6000878152600460205260409020925061083083611038565b151561083b57600080fd5b600254604080517f6352211e000000000000000000000000000000000000000000000000000000008152600481018990529051600160a060020a0390921691636352211e916024808201926020929091908290030181600087803b1580156108a257600080fd5b505af11580156108b6573d6000803e3d6000fd5b505050506040513d60208110156108cc57600080fd5b505133600160a060020a039081169116146108e657600080fd5b8254600160a060020a031691506108ff87873486611059565b50600354604080517fc69cd09d0000000000000000000000000000000000000000000000000000000081529051600160a060020a039092169163c2db589091839163c69cd09d916004808201926020929091908290030181600087803b15801561096857600080fd5b505af115801561097c573d6000803e3d6000fd5b505050506040513d602081101561099257600080fd5b50516040805160e060020a63ffffffff8516028152600481018c9052602481018b9052604481018a90529051606480830192602092919082900301818588803b1580156109de57600080fd5b505af11580156109f2573d6000803e3d6000fd5b50505050506040513d6020811015610a0957600080fd5b50519050610a17828861120c565b9695505050505050565b600460205260009081526040902080546001820154600290920154600160a060020a03909116916001608060020a0380821692700100000000000000000000000000000000909204169067ffffffffffffffff808216916801000000000000000090041685565b60005460a060020a900460ff1681565b60008181526004602052604081208190819081908190610ab781611038565b1515610ac257600080fd5b80546001820154600290920154600160a060020a03909116986001608060020a038084169950700100000000000000000000000000000000909304909216965067ffffffffffffffff808216965068010000000000000000909104169350915050565b60015481565b60005433600160a060020a03908116911614610b4657600080fd5b60005460a060020a900460ff1615610b5d57600080fd5b6000805474ff0000000000000000000000000000000000000000191660a060020a1781556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff6259190a1565b6000805460a060020a900460ff161515610bc357600080fd5b60005433600160a060020a03908116911614610bde57600080fd5b506000818152600460205260409020610bf681611038565b1515610c0157600080fd5b8054610493908390600160a060020a0316611282565b600054600160a060020a031681565b6000818152600460205260409020610c3d81611038565b1515610c4857600080fd5b805433600160a060020a03908116911614610c0157600080fd5b60005433600160a060020a03908116911614610c7d57600080fd5b60008054604051600160a060020a0391821692309092163180156108fc0292909190818181858888f19350505050158015610cbc573d6000803e3d6000fd5b50565b600080fd5b6000818152600460205260408120610cdb81611038565b1515610ce657600080fd5b610cef816112c4565b9392505050565b60005433600160a060020a03908116911614610d1157600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60005433600160a060020a03908116911614610d5b57600080fd5b600160a060020a0381161515610d7057600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b82600160a060020a031663a9059cbb83836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610e3b57600080fd5b505af1158015610e4f573d6000803e3d6000fd5b505050506040513d6020811015610e6557600080fd5b50511515610e6f57fe5b505050565b600254604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152308116602483015260448201859052915191909216916323b872dd91606480830192600092919082900301818387803b15801561056357600080fd5b603c826060015167ffffffffffffffff1610151515610f0857600080fd5b60008381526004602090815260409182902084518154600160a060020a0391821673ffffffffffffffffffffffffffffffffffffffff1990911617825582860151600183018054868901516001608060020a0390811670010000000000000000000000000000000081029482166fffffffffffffffffffffffffffffffff19909316831790911693909317909155606080890151600290950180546080808c015167ffffffffffffffff90811668010000000000000000026fffffffffffffffff0000000000000000199190991667ffffffffffffffff19909316831716979097179091558751928352958201929092528086019490945290851690830152915185927ffe21114808b55d6a54bec91c46a20e8dfe7f033edf3f058a5012a829d8d0e3ca928290030190a2505050565b6002015460006801000000000000000090910467ffffffffffffffff161190565b600080600080600080600061106d886112c4565b9550600360009054906101000a9004600160a060020a0316600160a060020a031663c69cd09d6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156110c257600080fd5b505af11580156110d6573d6000803e3d6000fd5b505050506040513d60208110156110ec57600080fd5b505186019450858510156110fc57fe5b8489101561110957600080fd5b8754600160a060020a0316935061111f8b61134b565b60008611156111715761113186611398565b6040519093508387039250600160a060020a0385169083156108fc029084906000818181858888f1935050505015801561116f573d6000803e3d6000fd5b505b848911156111b6575060405184890390600160a060020a0333169082156108fc029083906000818181858888f193505050501580156111b4573d6000803e3d6000fd5b505b60408051878152600160a060020a033316602082015281518c928e927fe40da2ed231723b222a7ba7da994c3afc3f83a51da76262083e38841e2da0982929081900390910190a350939998505050505050505050565b600254604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a033081166004830152858116602483015260448201859052915191909216916323b872dd91606480830192600092919082900301818387803b15801561056357600080fd5b61128b8261134b565b611295818361120c565b60405182907f2809c7e17bf978fbc7194c0a694b638c4215e9140cacc6c38ca36010b45697df90600090a25050565b6002810154600090819068010000000000000000900467ffffffffffffffff1642111561130a5750600282015468010000000000000000900467ffffffffffffffff1642035b60018301546002840154610cef916001608060020a0380821692700100000000000000000000000000000000909204169067ffffffffffffffff16846113a4565b6000908152600460205260408120805473ffffffffffffffffffffffffffffffffffffffff19168155600181019190915560020180546fffffffffffffffffffffffffffffffff19169055565b60015461271091020490565b60008080808585106113b8578693506113d6565b8787039250858584028115156113ca57fe5b05915081880190508093505b505050949350505050565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152905600a165627a7a72305820e56d3153113d562066e0dc44d74e5cf4202ea416ca90384fde9d1d33db512822002900000000000000000000000000000000000000000000000000000000000001a9",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000001a9"
}