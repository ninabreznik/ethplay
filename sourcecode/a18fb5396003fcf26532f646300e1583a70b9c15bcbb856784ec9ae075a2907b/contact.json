{
  "address": "0xcd85f4fd1c87d6ba898b697c13ded067e5041a32",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ESSENTIA_PE",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-24\n*/\n\npragma solidity ^0.4.24;\n\n/*\n\n    Copyright 2018, Angelo A. M. & Vicent Nos & Mireia Puig\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\n\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\n\ncontract Ownable {\n\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() internal {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\n\n\n////////////////////////////////////////////////////////\n//:                                                  ://\n//:            ESSENTIA Public Engagement            ://\n//:               https://essentia.one               ://\n//:..................................................://\n////////////////////////////////////////////////////////\n\n\n\n\ncontract TokenCHK {\n\n  function balanceOf(address _owner) public pure returns (uint256 balance) {}\n\n}\n\n\n\n\ncontract ESSENTIA_PE is Ownable {\n\n    using SafeMath for uint256;\n\n    string public name = \"ESSENTIA Public Engagement\";      // Extended name of this contract\n    uint256 public tokenPrice = 0;        // Set the fixed ESS token price\n    uint256 public maxCap = 0;            // Set the target maximum cap in ETH\n    address public FWDaddrETH;            // Set the address to forward the received ETH to\n    address public ESSgenesis;            // Set the ESSENTIA Genesis contract address\n    uint256 public totalSold;             // Keep track of the contributions total\n    uint256 public decimals = 18;         // The decimals to consider\n\n    mapping (address => uint256) public sold;       // Map the ESS token allcations\n\n    uint256 public pubEnd = 0;                      // Set the unixtime END for the public engagement\n    address contractAddr=this;                      // Better way to point to this from this\n\n    // Constant to simplify the conversion of token amounts into integer form\n    uint256 public tokenUnit = uint256(10)**decimals;\n\n\n\n    //\n    // \"toETHaddr\" is the address to which the ETH contributions are forwarded to, aka FWDaddrETH\n    // \"addrESSgenesis\" is the address of the Essentia ERC20 token contract, aka ESSgenesis\n    //\n    // NOTE: this contract will sell only its token balance on the ERC20 specified in addrESSgenesis\n    //       the maxCap in ETH and the tokenPrice will indirectly set the ESS token amount on sale\n    //\n    // NOTE: this contract should have sufficient ESS token balance to be > maxCap / tokenPrice\n    //\n    // NOTE: this contract will stop REGARDLESS of the above (maxCap) when its token balance is all sold\n    //\n    // The Owner of this contract can set: Price, End, MaxCap, ESS Genesis and ETH Forward address\n    //\n    // The received ETH are directly forwarded to the external FWDaddrETH address\n    // The ESS tokens are transferred to the contributing addresses once withdrawPUB is executed\n    //\n\n\n    constructor\n        (\n        address toETHaddr,\n        address addrESSgenesis\n        ) public {\n        FWDaddrETH = toETHaddr;\n        ESSgenesis = addrESSgenesis;\n\n    }\n\n\n\n    function () public payable {\n        buy();               // Allow to buy tokens sending ETH directly to the contract, fallback\n    }\n\n\n\n\n    function setFWDaddrETH(address _value) public onlyOwner{\n      FWDaddrETH=_value;     // Set the forward address default toETHaddr\n\n    }\n\n\n    function setGenesis(address _value) public onlyOwner{\n      ESSgenesis=_value;     // Set the ESS erc20 genesis contract address default ESSgenesis\n\n    }\n\n\n    function setMaxCap(uint256 _value) public onlyOwner{\n      maxCap=_value;         // Set the max cap in ETH default 0\n\n    }\n\n\n    function setPrice(uint256 _value) public onlyOwner{\n      tokenPrice=_value;     // Set the token price default 0\n\n    }\n\n\n    function setPubEnd(uint256 _value) public onlyOwner{\n      pubEnd=_value;         // Set the END of the public engagement unixtime default 0\n\n    }\n\n\n\n\n    function buy() public payable {\n\n        require(block.timestamp < pubEnd);          // Require the current unixtime to be lower than the END unixtime\n        require(msg.value > 0);                     // Require the sender to send an ETH tx higher than 0\n        require(msg.value <= msg.sender.balance);   // Require the sender to have sufficient ETH balance for the tx\n\n        // Requiring this to avoid going out of tokens, aka we are getting just true/false from the transfer call\n        require(msg.value + totalSold <= maxCap);\n\n        // Calculate the amount of tokens per contribution\n        uint256 tokenAmount = (msg.value * tokenUnit) / tokenPrice;\n\n        // Requiring sufficient token balance on this contract to accept the tx\n        require(tokenAmount<=TokenCHK(ESSgenesis).balanceOf(contractAddr));\n\n        transferBuy(msg.sender, tokenAmount);       // Instruct the accounting function\n        totalSold = totalSold.add(msg.value);       // Account for the total contributed/sold\n        FWDaddrETH.transfer(msg.value);             // Forward the ETH received to the external address\n\n    }\n\n\n\n\n    function withdrawPUB() public returns(bool){\n\n        require(block.timestamp > pubEnd);          // Require the PE to be over - actual time higher than end unixtime\n        require(sold[msg.sender] > 0);              // Require the ESS token balance to be sent to be higher than 0\n\n        // Send ESS tokens to the contributors proportionally to their contribution/s\n        if(!ESSgenesis.call(bytes4(keccak256(\"transfer(address,uint256)\")), msg.sender, sold[msg.sender])){revert();}\n\n        delete sold[msg.sender];\n        return true;\n\n    }\n\n\n\n\n    function transferBuy(address _to, uint256 _value) internal returns (bool) {\n\n        require(_to != address(0));                 // Require the destination address being non-zero\n\n        sold[_to]=sold[_to].add(_value);            // Account for multiple txs from the same address\n\n        return true;\n\n    }\n\n\n\n        //\n        // Probably the sky would fall down first but, in case skynet feels funny..\n        // ..we try to make sure anyway that no ETH would get stuck in this contract\n        //\n    function EMGwithdraw(uint256 weiValue) external onlyOwner {\n        require(block.timestamp > pubEnd);          // Require the public engagement to be over\n        require(weiValue > 0);                      // Require a non-zero value\n\n        FWDaddrETH.transfer(weiValue);              // Transfer to the external ETH forward address\n    }\n\n}",
  "bytecode": "60806040526040805190810160405280601a81526020017f455353454e544941205075626c696320456e676167656d656e740000000000008152506001908051906020019061004f9291906101b1565b50600060025560006003556012600755600060095530600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600754600a0a600b553480156100ba57600080fd5b506040516040806200136b8339810180604052810190808051906020019092919080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050610256565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101f257805160ff1916838001178555610220565b82800160010185558215610220579182015b8281111561021f578251825591602001919060010190610204565b5b50905061022d9190610231565b5090565b61025391905b8082111561024f576000816000905550600101610237565b5090565b90565b61110580620002666000396000f300608060405260043610610112576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461011c57806323548b8b146101ac5780632926050f146101d7578063313ce567146102025780636c99b0da1461022d578063711619de14610270578063763265de1461029d5780637ff9b596146102ca5780638da5cb5b146102f55780639106d7ba1461034c57806391b7f5ed14610377578063929a3c18146103a4578063a6f2ae3a146103d1578063b0b773c4146103db578063b69dc15d14610432578063caefdbe914610489578063e89b3ecb146104e0578063e93c980d1461050f578063eb14b3531461053a578063f2fde38b1461057d575b61011a6105c0565b005b34801561012857600080fd5b506101316107ea565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610171578082015181840152602081019050610156565b50505050905090810190601f16801561019e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101b857600080fd5b506101c1610888565b6040518082815260200191505060405180910390f35b3480156101e357600080fd5b506101ec61088e565b6040518082815260200191505060405180910390f35b34801561020e57600080fd5b50610217610894565b6040518082815260200191505060405180910390f35b34801561023957600080fd5b5061026e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061089a565b005b34801561027c57600080fd5b5061029b60048036038101908080359060200190929190505050610939565b005b3480156102a957600080fd5b506102c86004803603810190808035906020019092919050505061099e565b005b3480156102d657600080fd5b506102df610a03565b6040518082815260200191505060405180910390f35b34801561030157600080fd5b5061030a610a09565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561035857600080fd5b50610361610a2e565b6040518082815260200191505060405180910390f35b34801561038357600080fd5b506103a260048036038101908080359060200190929190505050610a34565b005b3480156103b057600080fd5b506103cf60048036038101908080359060200190929190505050610a99565b005b6103d96105c0565b005b3480156103e757600080fd5b506103f0610b7f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561043e57600080fd5b50610473600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ba5565b6040518082815260200191505060405180910390f35b34801561049557600080fd5b5061049e610bbd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104ec57600080fd5b506104f5610be3565b604051808215151515815260200191505060405180910390f35b34801561051b57600080fd5b50610524610de5565b6040518082815260200191505060405180910390f35b34801561054657600080fd5b5061057b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610deb565b005b34801561058957600080fd5b506105be600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e8a565b005b6000600954421015156105d257600080fd5b6000341115156105e157600080fd5b3373ffffffffffffffffffffffffffffffffffffffff1631341115151561060757600080fd5b60035460065434011115151561061c57600080fd5b600254600b54340281151561062d57fe5b049050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561070f57600080fd5b505af1158015610723573d6000803e3d6000fd5b505050506040513d602081101561073957600080fd5b8101908080519060200190929190505050811115151561075857600080fd5b6107623382610fdf565b50610778346006546110bb90919063ffffffff16565b600681905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501580156107e6573d6000803e3d6000fd5b5050565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108805780601f1061085557610100808354040283529160200191610880565b820191906000526020600020905b81548152906001019060200180831161086357829003601f168201915b505050505081565b60035481565b60095481565b60075481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108f557600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561099457600080fd5b8060098190555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109f957600080fd5b8060038190555050565b60025481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a8f57600080fd5b8060028190555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610af457600080fd5b60095442111515610b0457600080fd5b600081111515610b1357600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610b7b573d6000803e3d6000fd5b5050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60086020528060005260406000206000915090505481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060095442111515610bf557600080fd5b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111515610c4357600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660405180807f7472616e7366657228616464726573732c75696e743235362900000000000000815250601901905060405180910390207c0100000000000000000000000000000000000000000000000000000000900433600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001925050506000604051808303816000875af1925050501515610d9b57600080fd5b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090556001905090565b600b5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e4657600080fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ee557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610f2157600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561101c57600080fd5b61106e82600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110bb90919063ffffffff16565b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b60008082840190508381101515156110cf57fe5b80915050929150505600a165627a7a72305820b727d2bbeceab7df4a1cd17b4dc86799a04e361579247c37e34d214ee2ba37f60029000000000000000000000000b33532656433f4eca3782f6b20298d1424d1f2cf000000000000000000000000fc05987bd2be489accf0f509e44b0145d68240f7",
  "constructorArguments": "000000000000000000000000b33532656433f4eca3782f6b20298d1424d1f2cf000000000000000000000000fc05987bd2be489accf0f509e44b0145d68240f7"
}