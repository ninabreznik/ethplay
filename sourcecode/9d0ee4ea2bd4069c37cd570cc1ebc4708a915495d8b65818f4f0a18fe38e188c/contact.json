{
  "address": "0xabe63a04acb55f8c2ea3509ce10775623bd98f3b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CvcProxy",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-11\n*/\n\npragma solidity ^0.4.24;\n\n// File: contracts/upgradeability/ImplementationStorage.sol\n\n/**\n * @title ImplementationStorage\n * @dev This contract stores proxy implementation address.\n */\ncontract ImplementationStorage {\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"cvc.proxy.implementation\", and is validated in the constructor.\n     */\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0xa490aab0d89837371982f93f57ffd20c47991f88066ef92475bc8233036969bb;\n\n    /**\n    * @dev Constructor\n    */\n    constructor() public {\n        assert(IMPLEMENTATION_SLOT == keccak256(\"cvc.proxy.implementation\"));\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     * @return Address of the current implementation\n     */\n    function implementation() public view returns (address impl) {\n        bytes32 slot = IMPLEMENTATION_SLOT;\n        assembly {\n            impl := sload(slot)\n        }\n    }\n}\n\n// File: openzeppelin-solidity/contracts/AddressUtils.sol\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary AddressUtils {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   *  as the code is not actually created until after the constructor finishes.\n   * @param addr address to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address addr) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(addr) }\n    return size > 0;\n  }\n\n}\n\n// File: contracts/upgradeability/CvcProxy.sol\n\n/**\n * @title CvcProxy\n * @dev Transparent proxy with upgradeability functions and authorization control.\n */\ncontract CvcProxy is ImplementationStorage {\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     * @param implementation Address of the new implementation.\n     */\n    event Upgraded(address implementation);\n\n    /**\n     * @dev Emitted when the administration has been transferred.\n     * @param previousAdmin Address of the previous admin.\n     * @param newAdmin Address of the new admin.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"cvc.proxy.admin\", and is validated in the constructor.\n     */\n    bytes32 private constant ADMIN_SLOT = 0x2bbac3e52eee27be250d682577104e2abe776c40160cd3167b24633933100433;\n\n    /**\n     * @dev Modifier to check whether the `msg.sender` is the admin.\n     * It executes the function if called by admin. Otherwise, it will delegate the call to the implementation.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == currentAdmin()) {\n            _;\n        } else {\n            delegate(implementation());\n        }\n    }\n\n    /**\n     * Contract constructor.\n     * It sets the `msg.sender` as the proxy admin.\n     */\n    constructor() public {\n        assert(ADMIN_SLOT == keccak256(\"cvc.proxy.admin\"));\n        setAdmin(msg.sender);\n    }\n\n    /**\n     * @dev Fallback function.\n     */\n    function() external payable {\n        require(msg.sender != currentAdmin(), \"Message sender is not contract admin\");\n        delegate(implementation());\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     * Only the current admin can call this function.\n     * @param _newAdmin Address to transfer proxy administration to.\n     */\n    function changeAdmin(address _newAdmin) external ifAdmin {\n        require(_newAdmin != address(0), \"Cannot change contract admin to zero address\");\n        emit AdminChanged(currentAdmin(), _newAdmin);\n        setAdmin(_newAdmin);\n    }\n\n    /**\n     * @dev Allows the proxy owner to upgrade the current version of the proxy.\n     * @param _implementation the address of the new implementation to be set.\n     */\n    function upgradeTo(address _implementation) external ifAdmin {\n        upgradeImplementation(_implementation);\n    }\n\n    /**\n     * @dev Allows the proxy owner to upgrade and call the new implementation\n     * to initialize whatever is needed through a low level call.\n     * @param _implementation the address of the new implementation to be set.\n     * @param _data the msg.data to bet sent in the low level call. This parameter may include the function\n     * signature of the implementation to be called with the needed payload.\n     */\n    function upgradeToAndCall(address _implementation, bytes _data) external payable ifAdmin {\n        upgradeImplementation(_implementation);\n        //solium-disable-next-line security/no-call-value\n        require(address(this).call.value(msg.value)(_data), \"Upgrade error: initialization method call failed\");\n    }\n\n    /**\n     * @dev Returns the Address of the proxy admin.\n     * @return address\n     */\n    function admin() external view ifAdmin returns (address) {\n        return currentAdmin();\n    }\n\n    /**\n     * @dev Upgrades the implementation address.\n     * @param _newImplementation the address of the new implementation to be set\n     */\n    function upgradeImplementation(address _newImplementation) private {\n        address currentImplementation = implementation();\n        require(currentImplementation != _newImplementation, \"Upgrade error: proxy contract already uses specified implementation\");\n        setImplementation(_newImplementation);\n        emit Upgraded(_newImplementation);\n    }\n\n    /**\n     * @dev Delegates execution to an implementation contract.\n     * This is a low level function that doesn't return to its internal call site.\n     * It will return to the external caller whatever the implementation returns.\n     * @param _implementation Address to delegate.\n     */\n    function delegate(address _implementation) private {\n        assembly {\n            // Copy msg.data.\n            calldatacopy(0, 0, calldatasize)\n\n            // Call current implementation passing proxy calldata.\n            let result := delegatecall(gas, _implementation, 0, calldatasize, 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize)\n\n            // Propagate result (delegatecall returns 0 on error).\n            switch result\n            case 0 {revert(0, returndatasize)}\n            default {return (0, returndatasize)}\n        }\n    }\n\n    /**\n     * @return The admin slot.\n     */\n    function currentAdmin() private view returns (address proxyAdmin) {\n        bytes32 slot = ADMIN_SLOT;\n        assembly {\n            proxyAdmin := sload(slot)\n        }\n    }\n\n    /**\n     * @dev Sets the address of the proxy admin.\n     * @param _newAdmin Address of the new proxy admin.\n     */\n    function setAdmin(address _newAdmin) private {\n        bytes32 slot = ADMIN_SLOT;\n        assembly {\n            sstore(slot, _newAdmin)\n        }\n    }\n\n    /**\n     * @dev Sets the implementation address of the proxy.\n     * @param _newImplementation Address of the new implementation.\n     */\n    function setImplementation(address _newImplementation) private {\n        require(\n            AddressUtils.isContract(_newImplementation),\n            \"Cannot set new implementation: no contract code at contract address\"\n        );\n        bytes32 slot = IMPLEMENTATION_SLOT;\n        assembly {\n            sstore(slot, _newImplementation)\n        }\n    }\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_implementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_implementation\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"impl\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b5060405180807f6376632e70726f78792e696d706c656d656e746174696f6e000000000000000081525060180190506040518091039020600019167fa490aab0d89837371982f93f57ffd20c47991f88066ef92475bc8233036969bb6001026000191614151561007c57fe5b60405180807f6376632e70726f78792e61646d696e0000000000000000000000000000000000815250600f0190506040518091039020600019167f2bbac3e52eee27be250d682577104e2abe776c40160cd3167b24633933100433600102600019161415156100e757fe5b6100ff33610104640100000000026401000000009004565b610133565b60007f2bbac3e52eee27be250d682577104e2abe776c40160cd3167b2463393310043360010290508181555050565b6109e6806101426000396000f30060806040526004361061006d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633659cfe6146101505780634f1ef286146101935780635c60da1b146101e15780638f28397014610238578063f851a4401461027b575b6100756102d2565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415151561013e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f4d6573736167652073656e646572206973206e6f7420636f6e7472616374206181526020017f646d696e0000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b61014e610149610303565b610334565b005b34801561015c57600080fd5b50610191600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061035a565b005b6101df600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019082018035906020019190919293919293905050506103b7565b005b3480156101ed57600080fd5b506101f6610303565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561024457600080fd5b50610279600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104ee565b005b34801561028757600080fd5b506102906106b4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000807f2bbac3e52eee27be250d682577104e2abe776c40160cd3167b246339331004336001029050805491505090565b6000807fa490aab0d89837371982f93f57ffd20c47991f88066ef92475bc8233036969bb6001029050805491505090565b3660008037600080366000845af43d6000803e8060008114610355573d6000f35b3d6000fd5b6103626102d2565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156103a35761039e81610714565b6103b4565b6103b36103ae610303565b610334565b5b50565b6103bf6102d2565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156104d8576103fb83610714565b3073ffffffffffffffffffffffffffffffffffffffff163483836040518083838082843782019150509250505060006040518083038185875af19250505015156104d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f55706772616465206572726f723a20696e697469616c697a6174696f6e206d6581526020017f74686f642063616c6c206661696c65640000000000000000000000000000000081525060400191505060405180910390fd5b6104e9565b6104e86104e3610303565b610334565b5b505050565b6104f66102d2565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156106a057600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156105f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001807f43616e6e6f74206368616e676520636f6e74726163742061646d696e20746f2081526020017f7a65726f2061646472657373000000000000000000000000000000000000000081525060400191505060405180910390fd5b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f61061d6102d2565b82604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a161069b81610880565b6106b1565b6106b06106ab610303565b610334565b5b50565b60006106be6102d2565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610700576106f96102d2565b9050610711565b61071061070b610303565b610334565b5b90565b600061071e610303565b90508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610810576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260438152602001807f55706772616465206572726f723a2070726f787920636f6e747261637420616c81526020017f726561647920757365732073706563696669656420696d706c656d656e74617481526020017f696f6e000000000000000000000000000000000000000000000000000000000081525060600191505060405180910390fd5b610819826108af565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b82604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a15050565b60007f2bbac3e52eee27be250d682577104e2abe776c40160cd3167b2463393310043360010290508181555050565b60006108ba826109a7565b151561097a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260438152602001807f43616e6e6f7420736574206e657720696d706c656d656e746174696f6e3a206e81526020017f6f20636f6e747261637420636f646520617420636f6e7472616374206164647281526020017f657373000000000000000000000000000000000000000000000000000000000081525060600191505060405180910390fd5b7fa490aab0d89837371982f93f57ffd20c47991f88066ef92475bc8233036969bb60010290508181555050565b600080823b9050600081119150509190505600a165627a7a72305820217a0189de99c2ae3f5c53cbbfaa4b7eab27fae03ef8b58703719d284bb86dcc0029"
}