{
  "address": "0xd8a5b0d3cb3b00113a0cd96856926dc555d9e752",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Winether",
  "contractName": "Gamble",
  "compilerVersion": "v0.4.8+commit.60cc1668",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-04-03\n*/\n\npragma solidity ^0.4.8;\n\ncontract OraclizeI {\n    address public cbAddress;\n    function query(uint _timestamp, string _datasource, string _arg) payable returns (bytes32 _id);\n    function query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit) payable returns (bytes32 _id);\n    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) payable returns (bytes32 _id);\n    function query2_withGasLimit(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit) payable returns (bytes32 _id);\n    function queryN(uint _timestamp, string _datasource, bytes _argN) payable returns (bytes32 _id);\n    function queryN_withGasLimit(uint _timestamp, string _datasource, bytes _argN, uint _gaslimit) payable returns (bytes32 _id);\n    function getPrice(string _datasource) returns (uint _dsprice);\n    function getPrice(string _datasource, uint gaslimit) returns (uint _dsprice);\n    function useCoupon(string _coupon);\n    function setProofType(byte _proofType);\n    function setConfig(bytes32 _config);\n    function setCustomGasPrice(uint _gasPrice);\n}\ncontract OraclizeAddrResolverI {\n    function getAddress() returns (address _addr);\n}\ncontract usingOraclize {\n    uint constant day = 60*60*24;\n    uint constant week = 60*60*24*7;\n    uint constant month = 60*60*24*30;\n    byte constant proofType_NONE = 0x00;\n    byte constant proofType_TLSNotary = 0x10;\n    byte constant proofStorage_IPFS = 0x01;\n    uint8 constant networkID_auto = 0;\n    uint8 constant networkID_mainnet = 1;\n    uint8 constant networkID_testnet = 2;\n    uint8 constant networkID_morden = 2;\n    uint8 constant networkID_consensys = 161;\n\n    OraclizeAddrResolverI OAR;\n\n    OraclizeI oraclize;\n    modifier oraclizeAPI {\n        if((address(OAR)==0)||(getCodeSize(address(OAR))==0)) oraclize_setNetwork(networkID_auto);\n        oraclize = OraclizeI(OAR.getAddress());\n        _;\n    }\n    modifier coupon(string code){\n        oraclize = OraclizeI(OAR.getAddress());\n        oraclize.useCoupon(code);\n        _;\n    }\n\n    function oraclize_setNetwork(uint8 networkID) internal returns(bool){\n        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)>0){ //mainnet\n            OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);\n            return true;\n        }\n        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)>0){ //ropsten testnet\n            OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);\n            return true;\n        }\n        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)>0){ //kovan testnet\n            OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);\n            return true;\n        }\n        if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)>0){ //ethereum-bridge\n            OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);\n            return true;\n        }\n        if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)>0){ //ether.camp ide\n            OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);\n            return true;\n        }\n        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)>0){ //browser-solidity\n            OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);\n            return true;\n        }\n        return false;\n    }\n\n    function __callback(bytes32 myid, string result) {\n        __callback(myid, result, new bytes(0));\n    }\n    function __callback(bytes32 myid, string result, bytes proof) {\n    }\n\n    function oraclize_getPrice(string datasource) oraclizeAPI internal returns (uint){\n        return oraclize.getPrice(datasource);\n    }\n\n    function oraclize_getPrice(string datasource, uint gaslimit) oraclizeAPI internal returns (uint){\n        return oraclize.getPrice(datasource, gaslimit);\n    }\n    \n    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query.value(price)(0, datasource, arg);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query.value(price)(timestamp, datasource, arg);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);\n    }\n    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit);\n    }\n    function oraclize_query(string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query2.value(price)(0, datasource, arg1, arg2);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query2.value(price)(timestamp, datasource, arg1, arg2);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query2_withGasLimit.value(price)(timestamp, datasource, arg1, arg2, gaslimit);\n    }\n    function oraclize_query(string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query2_withGasLimit.value(price)(0, datasource, arg1, arg2, gaslimit);\n    }\n    function oraclize_query(string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        bytes memory args = stra2cbor(argN);\n        return oraclize.queryN.value(price)(0, datasource, args);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        bytes memory args = stra2cbor(argN);\n        return oraclize.queryN.value(price)(timestamp, datasource, args);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        bytes memory args = stra2cbor(argN);\n        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);\n    }\n    function oraclize_query(string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        bytes memory args = stra2cbor(argN);\n        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);\n    }\n    function oraclize_query(string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = args[0];       \n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    \n    function oraclize_query(string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    \n    function oraclize_query(string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n\n    function oraclize_cbAddress() oraclizeAPI internal returns (address){\n        return oraclize.cbAddress();\n    }\n    function oraclize_setProof(byte proofP) oraclizeAPI internal {\n        return oraclize.setProofType(proofP);\n    }\n    function oraclize_setCustomGasPrice(uint gasPrice) oraclizeAPI internal {\n        return oraclize.setCustomGasPrice(gasPrice);\n    }\n    function oraclize_setConfig(bytes32 config) oraclizeAPI internal {\n        return oraclize.setConfig(config);\n    }\n\n    function getCodeSize(address _addr) constant internal returns(uint _size) {\n        assembly {\n            _size := extcodesize(_addr)\n        }\n    }\n\n    function parseAddr(string _a) internal returns (address){\n        bytes memory tmp = bytes(_a);\n        uint160 iaddr = 0;\n        uint160 b1;\n        uint160 b2;\n        for (uint i=2; i<2+2*20; i+=2){\n            iaddr *= 256;\n            b1 = uint160(tmp[i]);\n            b2 = uint160(tmp[i+1]);\n            if ((b1 >= 97)&&(b1 <= 102)) b1 -= 87;\n            else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;\n            if ((b2 >= 97)&&(b2 <= 102)) b2 -= 87;\n            else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;\n            iaddr += (b1*16+b2);\n        }\n        return address(iaddr);\n    }\n\n    function strCompare(string _a, string _b) internal returns (int) {\n        bytes memory a = bytes(_a);\n        bytes memory b = bytes(_b);\n        uint minLength = a.length;\n        if (b.length < minLength) minLength = b.length;\n        for (uint i = 0; i < minLength; i ++)\n            if (a[i] < b[i])\n                return -1;\n            else if (a[i] > b[i])\n                return 1;\n        if (a.length < b.length)\n            return -1;\n        else if (a.length > b.length)\n            return 1;\n        else\n            return 0;\n    }\n\n    function indexOf(string _haystack, string _needle) internal returns (int) {\n        bytes memory h = bytes(_haystack);\n        bytes memory n = bytes(_needle);\n        if(h.length < 1 || n.length < 1 || (n.length > h.length))\n            return -1;\n        else if(h.length > (2**128 -1))\n            return -1;\n        else\n        {\n            uint subindex = 0;\n            for (uint i = 0; i < h.length; i ++)\n            {\n                if (h[i] == n[0])\n                {\n                    subindex = 1;\n                    while(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex])\n                    {\n                        subindex++;\n                    }\n                    if(subindex == n.length)\n                        return int(i);\n                }\n            }\n            return -1;\n        }\n    }\n\n    function strConcat(string _a, string _b, string _c, string _d, string _e) internal returns (string) {\n        bytes memory _ba = bytes(_a);\n        bytes memory _bb = bytes(_b);\n        bytes memory _bc = bytes(_c);\n        bytes memory _bd = bytes(_d);\n        bytes memory _be = bytes(_e);\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n        bytes memory babcde = bytes(abcde);\n        uint k = 0;\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n        return string(babcde);\n    }\n\n    function strConcat(string _a, string _b, string _c, string _d) internal returns (string) {\n        return strConcat(_a, _b, _c, _d, \"\");\n    }\n\n    function strConcat(string _a, string _b, string _c) internal returns (string) {\n        return strConcat(_a, _b, _c, \"\", \"\");\n    }\n\n    function strConcat(string _a, string _b) internal returns (string) {\n        return strConcat(_a, _b, \"\", \"\", \"\");\n    }\n\n    // parseInt\n    function parseInt(string _a) internal returns (uint) {\n        return parseInt(_a, 0);\n    }\n\n    // parseInt(parseFloat*10^_b)\n    function parseInt(string _a, uint _b) internal returns (uint) {\n        bytes memory bresult = bytes(_a);\n        uint mint = 0;\n        bool decimals = false;\n        for (uint i=0; i<bresult.length; i++){\n            if ((bresult[i] >= 48)&&(bresult[i] <= 57)){\n                if (decimals){\n                   if (_b == 0) break;\n                    else _b--;\n                }\n                mint *= 10;\n                mint += uint(bresult[i]) - 48;\n            } else if (bresult[i] == 46) decimals = true;\n        }\n        if (_b > 0) mint *= 10**_b;\n        return mint;\n    }\n\n    function uint2str(uint i) internal returns (string){\n        if (i == 0) return \"0\";\n        uint j = i;\n        uint len;\n        while (j != 0){\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len - 1;\n        while (i != 0){\n            bstr[k--] = byte(48 + i % 10);\n            i /= 10;\n        }\n        return string(bstr);\n    }\n\n    function stra2cbor(string[] arr) internal returns (bytes) {\n            uint arrlen = arr.length;\n\n            // get correct cbor output length\n            uint outputlen = 0;\n            bytes[] memory elemArray = new bytes[](arrlen);\n            for (uint i = 0; i < arrlen; i++) {\n                elemArray[i] = (bytes(arr[i]));\n                outputlen += elemArray[i].length + (elemArray[i].length - 1)/23 + 3; //+3 accounts for paired identifier types\n            }\n            uint ctr = 0;\n            uint cborlen = arrlen + 0x80;\n            outputlen += byte(cborlen).length;\n            bytes memory res = new bytes(outputlen);\n\n            while (byte(cborlen).length > ctr) {\n                res[ctr] = byte(cborlen)[ctr];\n                ctr++;\n            }\n            for (i = 0; i < arrlen; i++) {\n                res[ctr] = 0x5F;\n                ctr++;\n                for (uint x = 0; x < elemArray[i].length; x++) {\n                    // if there's a bug with larger strings, this may be the culprit\n                    if (x % 23 == 0) {\n                        uint elemcborlen = elemArray[i].length - x >= 24 ? 23 : elemArray[i].length - x;\n                        elemcborlen += 0x40;\n                        uint lctr = ctr;\n                        while (byte(elemcborlen).length > ctr - lctr) {\n                            res[ctr] = byte(elemcborlen)[ctr - lctr];\n                            ctr++;\n                        }\n                    }\n                    res[ctr] = elemArray[i][x];\n                    ctr++;\n                }\n                res[ctr] = 0xFF;\n                ctr++;\n            }\n            return res;\n        }\n}\n// </ORACLIZE_API>\n\ncontract Gamble is usingOraclize {\n    uint Cashpot;\n    uint Service_Fee;\n    uint Gross;\n    uint Ticket;\n    address Owner;\n    string Power_Ball;\n    bool Power_Ball_Set;\n    event Prize(string text,uint amount,string ticket);\n    event Notify_Number(string text,uint amount);\n    event Notify_String(string text,string ticket);\n    event Loser(string text,string ticket);\n    event Balance(string text,uint balance,address user);\n    event newOraclizeQuery(string text);\n    event Tickets_Sold(string text,uint sold);\n    mapping(address => string) Tickets;\n    mapping(uint => address) Ticket_Number;\n    function Gamble()\n        {\n            Prize(\"Prize \",Cashpot,Power_Ball);\n            Power_Ball_Set = false;\n        }\n     function __callback(bytes32 myid, string result) {\n        if (msg.sender != oraclize_cbAddress()) throw;\n        if(!Power_Ball_Set)\n            {\t\n\t\t\t\tPower_Ball = result;\n\t\t\t\tPower_Ball_Set = true;\n\t\t\t\tPrize(\"Winning numbers set\",Cashpot,result);\n            }\n        else\n            {\n\t\t\t\tTickets[Ticket_Number[Ticket]] = result;\n\t\t\t\tNotify_String(\"Ticket\",Tickets[Ticket_Number[Ticket]]);\n\t\t\t\tbytes32 hash =  sha3(Power_Ball);\n\t\t\t\tbytes32 ticket_hash = sha3(Tickets[Ticket_Number[Ticket]]);\n\t\t\t\tif(hash != ticket_hash)\n\t\t\t\t\t{\n\t\t\t\t\t\tLoser(\"Lost\",Tickets[Ticket_Number[Ticket]]);\n\t\t\t\t\t\tif(ticket_hash == sha3(\"1\\n1\\n1\\n\")){small_payout(1);}\n\t\t\t\t\t\tif(ticket_hash == sha3(\"2\\n2\\n2\\n\")){small_payout(2);}\n\t\t\t\t\t\tif(ticket_hash == sha3(\"3\\n3\\n4\\n\")){small_payout(3);}\n\t\t\t\t\t\tif(ticket_hash == sha3(\"4\\n4\\n4\\n\")){small_payout(3);}\n\t\t\t\t\t\tif(ticket_hash == sha3(\"5\\n5\\n5\\n\")){small_payout(4);}\n\t\t\t\t\t\tif(ticket_hash == sha3(\"6\\n6\\n6\\n\")){small_payout(4);}\n\t\t\t\t\t\tif(ticket_hash == sha3(\"7\\n7\\n7\\n\")){small_payout(5);}\n\t\t\t\t\t\tif(ticket_hash == sha3(\"8\\n8\\n8\\n\")){small_payout(4);}\n\t\t\t\t\t\tif(ticket_hash == sha3(\"9\\n9\\n9\\n\")){small_payout(3);}\n\t\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tService_Fee = Cashpot / 20;\n\t\t\t\t\t\tGross = (Cashpot - Service_Fee) * 9/10;\n\t\t\t\t\t\tif(!Owner.send(Service_Fee))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t    Notify_Number(\"Problem sending service fee:\",Service_Fee);\n\t\t\t\t\t\t    throw;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tBalance(\"Your Old Balance Is:\",Ticket_Number[Ticket].balance,Ticket_Number[Ticket]);\n\t\t\t\t\t\tCashpot = Cashpot - Service_Fee;\n\t\t\t\t\t\tif(!Ticket_Number[Ticket].send(Gross))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t    Notify_Number(\"Problem sending ether pot:\",Gross);\n\t\t\t\t\t\t    throw;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tBalance(\"Your New Balance Is:\",Ticket_Number[Ticket].balance,Ticket_Number[Ticket]);\n\t\t\t\t\t\tNotify_Number(\"Winner:\",Gross);  \n\t\t\t\t\t\tCashpot = Cashpot - Gross;   \n\t\t\t\t\t\tPower_Ball_Set = false;\n\t\t\t\t\t\tService_Fee = 0;\n\t\t\t\t\t\tGross = 0;\n                        newOraclizeQuery(\"Oraclize query was sent, standing by for the answer..\");\n\t\t\t            oraclize_query(\"URL\", \"https://www.random.org/integers/?num=3&min=1&max=9&col=1&base=10&format=plain&rnd=new\");\t\t\t\t\t}    \n            }\n    }    \n\tfunction draw() payable\n\t\t{\n\t\t     if(msg.value * 50 < 1 ether){throw;}\n\t\t     if(Owner == 0 ){Owner = msg.sender;}\n\t\t\t Cashpot += msg.value;\n\t\t\t Ticket += 1;\n\t\t\t Ticket_Number[Ticket] = msg.sender;\n             newOraclizeQuery(\"Oraclize query was sent, standing by for the answer..\");\n\t\t\t oraclize_query(\"URL\", \"https://www.random.org/integers/?num=3&min=1&max=9&col=1&base=10&format=plain&rnd=new\");\n\t\t\t Tickets_Sold(\"Tickets Sold:\",Ticket);\n\t\t}\n\tfunction small_payout (uint bonus)\n\t\t{\n\t\t    if (msg.sender != oraclize_cbAddress()) throw;\n\t\t    Notify_String(\"Bonus Payout\",Tickets[Ticket_Number[Ticket]]);\n\t\t\tService_Fee = Cashpot / 20;\n\t\t\tGross = (Cashpot - Service_Fee) * bonus/10;\n\t\t\tif(!Owner.send(Service_Fee))\n\t\t\t{\n\t\t\t    Notify_Number(\"Problem sending service fee:\",Service_Fee);\n\t\t\t    throw;\n\t\t\t}\n\t\t\tBalance(\"Your Old Balance Is:\",Ticket_Number[Ticket].balance,Ticket_Number[Ticket]);\n\t\t\tCashpot = Cashpot - Service_Fee;\n\t\t\tif(!Ticket_Number[Ticket].send(Gross))\n\t\t\t{\n\t\t\t    Notify_Number(\"Problem sending ether pot:\",Gross);\n\t\t\t    throw;\n\t\t\t}\n\t\t\tBalance(\"Your New Balance Is:\",Ticket_Number[Ticket].balance,Ticket_Number[Ticket]);\n\t\t\tNotify_Number(\"Winner:\",Gross);  \n\t\t\tCashpot = Cashpot - Gross;   \n\t\t\tService_Fee = 0;\n\t\t\tGross = 0;\n\t\t}\n\tfunction check_prize() returns (uint)\n\t   {\n\t       return this.balance;\n\t   } \n\tfunction winning_ticket() returns (string)\n\t\t{\n\t\t\treturn Power_Ball;\n\t\t}\n}",
  "bytecode": "606060405234610000575b7f2e39c2b12653a7cbeee001eb005b9c8fdc1ab8b3dffd2708e18c90966a0491ce6002546007604051808060200184815260200180602001838103835260068152602001807f5072697a652000000000000000000000000000000000000000000000000000008152506020018381038252848181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156100f75780601f106100cc576101008083540402835291602001916100f7565b820191906000526020600020905b8154815290600101906020018083116100da57829003601f168201915b505094505050505060405180910390a16000600860006101000a81548160ff0219169083151502179055505b5b6126a280620001346000396000f30060606040523615610076576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630eecae211461007b57806318d80d4a1461008557806327dc297e146100a857806338bbfa501461010c5780633c5f10a3146101b357806377dc041314610249575b610000565b610083610266565b005b346100005761009261053c565b6040518082815260200191505060405180910390f35b346100005761010a60048080356000191690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061055c565b005b34610000576101b160048080356000191690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506115bd565b005b34610000576101c06115c3565b604051808060200182810382528381815181526020019150805190602001908083836000831461020f575b80518252602083111561020f576020820191506020810190506020830392506101eb565b505050905090810190601f16801561023b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34610000576102646004808035906020019091905050611675565b005b670de0b6b3a764000060323402101561027e57610000565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156103015733600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b34600260008282540192505081905550600160056000828254019250508190555033600a6000600554815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f46cb989ef9cef13e930e3b7f286225a086e716a90d63e0b7da85d310a9db0c9a6040518080602001828103825260358152602001807f4f7261636c697a65207175657279207761732073656e742c207374616e64696e81526020017f6720627920666f722074686520616e737765722e2e000000000000000000000081525060400191505060405180910390a16104c6604060405190810160405280600381526020017f55524c0000000000000000000000000000000000000000000000000000000000815250608060405190810160405280605581526020017f68747470733a2f2f7777772e72616e646f6d2e6f72672f696e7465676572732f81526020017f3f6e756d3d33266d696e3d31266d61783d3926636f6c3d3126626173653d313081526020017f26666f726d61743d706c61696e26726e643d6e65770000000000000000000000815250611cf4565b507fbaf3d262286389d873a3610d94233820ff8303b49d8bcb27c7ea4e94c086407160055460405180806020018381526020018281038252600d8152602001807f5469636b65747320536f6c643a000000000000000000000000000000000000008152506020019250505060405180910390a15b565b60003073ffffffffffffffffffffffffffffffffffffffff163190505b90565b60006000610568612143565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156105a157610000565b600860009054906101000a900460ff161515610765578260079080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061060357805160ff1916838001178555610631565b82800160010185558215610631579182015b82811115610630578251825591602001919060010190610615565b5b50905061065691905b8082111561065257600081600090555060010161063a565b5090565b50506001600860006101000a81548160ff0219169083151502179055507f2e39c2b12653a7cbeee001eb005b9c8fdc1ab8b3dffd2708e18c90966a0491ce60025484604051808060200184815260200180602001838103835260138152602001807f57696e6e696e67206e756d626572732073657400000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360008314610725575b80518252602083111561072557602082019150602081019050602083039250610701565b505050905090810190601f1680156107515780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a16115b6565b8260096000600a6000600554815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061082357805160ff1916838001178555610851565b82800160010185558215610851579182015b82811115610850578251825591602001919060010190610835565b5b50905061087691905b8082111561087257600081600090555060010161085a565b5090565b50507f6b2ae2ab714187e413d5e0abb0f9ceee9714b2c3cb70cb761cfeb159dc15184860096000600a6000600554815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051808060200180602001838103835260068152602001807f5469636b657400000000000000000000000000000000000000000000000000008152506020018381038252848181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156109ce5780601f106109a3576101008083540402835291602001916109ce565b820191906000526020600020905b8154815290600101906020018083116109b157829003601f168201915b5050935050505060405180910390a160076040518082805460018160011615610100020316600290048015610a3a5780601f10610a18576101008083540402835291820191610a3a565b820191906000526020600020905b815481529060010190602001808311610a26575b50509150506040518091039020915060096000600a6000600554815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518082805460018160011615610100020316600290048015610b185780601f10610af6576101008083540402835291820191610b18565b820191906000526020600020905b815481529060010190602001808311610b04575b50509150506040518091039020905080600019168260001916141515610f72577fb3997703fc46a5379fd673af5f6675e36c20630583ebebdb4c6d49bbe60f7ebd60096000600a6000600554815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051808060200180602001838103835260048152602001807f4c6f737400000000000000000000000000000000000000000000000000000000815250602001838103825284818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015610c8e5780601f10610c6357610100808354040283529160200191610c8e565b820191906000526020600020905b815481529060010190602001808311610c7157829003601f168201915b5050935050505060405180910390a160405180807f310a310a310a0000000000000000000000000000000000000000000000000000815250600601905060405180910390206000191681600019161415610ced57610cec6001611675565b5b60405180807f320a320a320a0000000000000000000000000000000000000000000000000000815250600601905060405180910390206000191681600019161415610d3d57610d3c6002611675565b5b60405180807f330a330a340a0000000000000000000000000000000000000000000000000000815250600601905060405180910390206000191681600019161415610d8d57610d8c6003611675565b5b60405180807f340a340a340a0000000000000000000000000000000000000000000000000000815250600601905060405180910390206000191681600019161415610ddd57610ddc6003611675565b5b60405180807f350a350a350a0000000000000000000000000000000000000000000000000000815250600601905060405180910390206000191681600019161415610e2d57610e2c6004611675565b5b60405180807f360a360a360a0000000000000000000000000000000000000000000000000000815250600601905060405180910390206000191681600019161415610e7d57610e7c6004611675565b5b60405180807f370a370a370a0000000000000000000000000000000000000000000000000000815250600601905060405180910390206000191681600019161415610ecd57610ecc6005611675565b5b60405180807f380a380a380a0000000000000000000000000000000000000000000000000000815250600601905060405180910390206000191681600019161415610f1d57610f1c6004611675565b5b60405180807f390a390a390a0000000000000000000000000000000000000000000000000000815250600601905060405180910390206000191681600019161415610f6d57610f6c6003611675565b5b6115b5565b601460025481156100005704600381905550600a6009600354600254030281156100005704600481905550600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6003549081150290604051809050600060405180830381858888f193505050501515611076577fc291ad276987a938ce4836b14999c72b8c7f70618c5fb328a4bb221c5436795f60035460405180806020018381526020018281038252601c8152602001807f50726f626c656d2073656e64696e672073657276696365206665653a000000008152506020019250505060405180910390a1610000565b7ff3f10da76ca332cbb9b03fa612856e8d903a87871579510fefda28bd446e04c3600a6000600554815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1631600a6000600554815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405180806020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825260148152602001807f596f7572204f6c642042616c616e63652049733a000000000000000000000000815250602001935050505060405180910390a160035460025403600281905550600a6000600554815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6004549081150290604051809050600060405180830381858888f193505050501515611294577fc291ad276987a938ce4836b14999c72b8c7f70618c5fb328a4bb221c5436795f60045460405180806020018381526020018281038252601a8152602001807f50726f626c656d2073656e64696e6720657468657220706f743a0000000000008152506020019250505060405180910390a1610000565b7ff3f10da76ca332cbb9b03fa612856e8d903a87871579510fefda28bd446e04c3600a6000600554815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1631600a6000600554815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405180806020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825260148152602001807f596f7572204e65772042616c616e63652049733a000000000000000000000000815250602001935050505060405180910390a17fc291ad276987a938ce4836b14999c72b8c7f70618c5fb328a4bb221c5436795f6004546040518080602001838152602001828103825260078152602001807f57696e6e65723a000000000000000000000000000000000000000000000000008152506020019250505060405180910390a1600454600254036002819055506000600860006101000a81548160ff021916908315150217905550600060038190555060006004819055507f46cb989ef9cef13e930e3b7f286225a086e716a90d63e0b7da85d310a9db0c9a6040518080602001828103825260358152602001807f4f7261636c697a65207175657279207761732073656e742c207374616e64696e81526020017f6720627920666f722074686520616e737765722e2e000000000000000000000081525060400191505060405180910390a16115b3604060405190810160405280600381526020017f55524c0000000000000000000000000000000000000000000000000000000000815250608060405190810160405280605581526020017f68747470733a2f2f7777772e72616e646f6d2e6f72672f696e7465676572732f81526020017f3f6e756d3d33266d696e3d31266d61783d3926636f6c3d3126626173653d313081526020017f26666f726d61743d706c61696e26726e643d6e65770000000000000000000000815250611cf4565b505b5b5b50505050565b5b505050565b602060405190810160405280600081525060078054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561166a5780601f1061163f5761010080835404028352916020019161166a565b820191906000526020600020905b81548152906001019060200180831161164d57829003601f168201915b505050505090505b90565b61167d612143565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116b657610000565b7f6b2ae2ab714187e413d5e0abb0f9ceee9714b2c3cb70cb761cfeb159dc15184860096000600a6000600554815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518080602001806020018381038352600c8152602001807f426f6e7573205061796f7574000000000000000000000000000000000000000081525060200183810382528481815460018160011615610100020316600290048152602001915080546001816001161561010002031660029004801561180c5780601f106117e15761010080835404028352916020019161180c565b820191906000526020600020905b8154815290600101906020018083116117ef57829003601f168201915b5050935050505060405180910390a1601460025481156100005704600381905550600a81600354600254030281156100005704600481905550600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6003549081150290604051809050600060405180830381858888f19350505050151561191e577fc291ad276987a938ce4836b14999c72b8c7f70618c5fb328a4bb221c5436795f60035460405180806020018381526020018281038252601c8152602001807f50726f626c656d2073656e64696e672073657276696365206665653a000000008152506020019250505060405180910390a1610000565b7ff3f10da76ca332cbb9b03fa612856e8d903a87871579510fefda28bd446e04c3600a6000600554815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1631600a6000600554815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405180806020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825260148152602001807f596f7572204f6c642042616c616e63652049733a000000000000000000000000815250602001935050505060405180910390a160035460025403600281905550600a6000600554815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6004549081150290604051809050600060405180830381858888f193505050501515611b3c577fc291ad276987a938ce4836b14999c72b8c7f70618c5fb328a4bb221c5436795f60045460405180806020018381526020018281038252601a8152602001807f50726f626c656d2073656e64696e6720657468657220706f743a0000000000008152506020019250505060405180910390a1610000565b7ff3f10da76ca332cbb9b03fa612856e8d903a87871579510fefda28bd446e04c3600a6000600554815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1631600a6000600554815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405180806020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825260148152602001807f596f7572204e65772042616c616e63652049733a000000000000000000000000815250602001935050505060405180910390a17fc291ad276987a938ce4836b14999c72b8c7f70618c5fb328a4bb221c5436795f6004546040518080602001838152602001828103825260078152602001807f57696e6e65723a000000000000000000000000000000000000000000000000008152506020019250505060405180910390a160045460025403600281905550600060038190555060006004819055505b50565b600060006000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480611d6957506000611d67600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661234c565b145b15611d7a57611d786000612358565b505b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cc48316000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b156100005760325a03f1156100005750505060405180519050600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663524f3889856000604051602001526040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360008314611f1b575b805182526020831115611f1b57602082019150602081019050602083039250611ef7565b505050905090810190601f168015611f475780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b156100005760325a03f1156100005750505060405180519050905062030d403a02670de0b6b3a764000001811115611f98576000600102915061213b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663adf59f9982600087876000604051602001526040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018060200180602001838103835285818151815260200191508051906020019080838360008314612068575b80518252602083111561206857602082019150602081019050602083039250612044565b505050905090810190601f1680156120945780820380516001836020036101000a031916815260200191505b508381038252848181518152602001915080519060200190808383600083146120dc575b8051825260208311156120dc576020820191506020810190506020830392506120b8565b505050905090810190601f1680156121085780820380516001836020036101000a031916815260200191505b50955050505050506020604051808303818588803b156100005761235a5a03f11561000057505050506040518051905091505b5b5092915050565b60006000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806121b6575060006121b4600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661234c565b145b156121c7576121c56000612358565b505b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cc48316000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b156100005760325a03f1156100005750505060405180519050600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c281d19e6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b156100005760325a03f115610000575050506040518051905090505b5b90565b6000813b90505b919050565b60006000612379731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed61234c565b11156123dd57731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050612671565b60006123fc73c03a2615d5efaf5f49f60b7bb6583eaec212fdf161234c565b11156124605773c03a2615d5efaf5f49f60b7bb6583eaec212fdf1600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050612671565b600061247f73b7a07bcf2ba2f2703b24c0691b5278999c59ac7e61234c565b11156124e35773b7a07bcf2ba2f2703b24c0691b5278999c59ac7e600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050612671565b6000612502736f485c8bf6fc43ea212e93bbf8ce046c7f1cb47561234c565b111561256657736f485c8bf6fc43ea212e93bbf8ce046c7f1cb475600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050612671565b60006125857320e12a1f859b3feae5fb2a0a32c18f5a65555bbf61234c565b11156125e9577320e12a1f859b3feae5fb2a0a32c18f5a65555bbf600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050612671565b60006126087351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa61234c565b111561266c577351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050612671565b600090505b9190505600a165627a7a723058209f84a3a9c08f5c62c3f0ed1f20f8e043aa57a23fe1a3e12fe4bb6aadd2ede87b0029"
}