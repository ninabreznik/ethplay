{
  "address": "0xbde6ff7ff944aa8ef554410572dfee184d25302a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ABBToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-06\n*/\n\npragma solidity ^0.4.18;\n\ncontract SafeMath {\n  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b > 0);\n    uint256 c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n\n  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c>=a && c>=b);\n    return c;\n  }\n}\n\ncontract owned {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    function owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n       require(newOwner != address(0));\n       OwnershipTransferred(owner, newOwner);\n       owner = newOwner;\n    }\n}\n\ncontract TokenERC20 is SafeMath {\n\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;\n    uint256 public totalSupply;\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public {\n        totalSupply = initialSupply * 10 ** uint256(decimals); \n        balanceOf[msg.sender] = totalSupply;                \n        name = tokenName;                                   \n        symbol = tokenSymbol;  \n    }                             \n\n    function _transfer(address _from, address _to, uint256 _value) private {\n        require(_to != 0x0);\t\n        require(balanceOf[_from] >= _value); \n        require(balanceOf[_to] + _value > balanceOf[_to]); \n        uint256 previousBalances = SafeMath.safeAdd(balanceOf[_from],balanceOf[_to]); \n        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value); \n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value); \n        Transfer(_from, _to, _value);\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);\n        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n}\n\ncontract ABBToken is owned, TokenERC20 {\n\n    mapping (address => bool) public frozenAccount;\n\t\n    event FrozenFunds(address target, bool frozen);\n    event Burn(address indexed from, uint256 value);\n\n    function ABBToken(uint256 initialSupply, string tokenName, string tokenSymbol) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\n    \n\tfunction burn(uint256 _value) onlyOwner public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);  \n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);          \n        totalSupply = SafeMath.safeSub(totalSupply, _value);                     \n        Burn(msg.sender, _value);\n        return true;\n    }\n \n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        FrozenFunds(target, freeze);\n    }\n}",
  "bytecode": "60606040526003805460ff19166012179055341561001c57600080fd5b604051610aa5380380610aa5833981016040528080519190602001805182019190602001805160008054600160a060020a033316600160a060020a03199091168117825560035460ff16600a0a870260048190559082526005602052604090912055909101905082828260018280516100999291602001906100b9565b5060028180516100ad9291602001906100b9565b50505050505050610154565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100fa57805160ff1916838001178555610127565b82800160010185558215610127579182015b8281111561012757825182559160200191906001019061010c565b50610133929150610137565b5090565b61015191905b80821115610133576000815560010161013d565b90565b610942806101636000396000f3006060604052600436106100cf5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100d4578063095ea7b31461015e57806318160ddd1461019457806323b872dd146101b9578063313ce567146101e157806342966c681461020a57806370a08231146102205780638da5cb5b1461023f57806395d89b411461026e578063a9059cbb14610281578063b414d4b6146102a5578063dd62ed3e146102c4578063e724529c146102e9578063f2fde38b1461030d575b600080fd5b34156100df57600080fd5b6100e761032c565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561012357808201518382015260200161010b565b50505050905090810190601f1680156101505780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561016957600080fd5b610180600160a060020a03600435166024356103ca565b604051901515815260200160405180910390f35b341561019f57600080fd5b6101a76103fa565b60405190815260200160405180910390f35b34156101c457600080fd5b610180600160a060020a0360043581169060243516604435610400565b34156101ec57600080fd5b6101f46104a2565b60405160ff909116815260200160405180910390f35b341561021557600080fd5b6101806004356104ab565b341561022b57600080fd5b6101a7600160a060020a036004351661057e565b341561024a57600080fd5b610252610590565b604051600160a060020a03909116815260200160405180910390f35b341561027957600080fd5b6100e761059f565b341561028c57600080fd5b6102a3600160a060020a036004351660243561060a565b005b34156102b057600080fd5b610180600160a060020a0360043516610619565b34156102cf57600080fd5b6101a7600160a060020a036004358116906024351661062e565b34156102f457600080fd5b6102a3600160a060020a0360043516602435151561064b565b341561031857600080fd5b6102a3600160a060020a03600435166106d7565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103c25780601f10610397576101008083540402835291602001916103c2565b820191906000526020600020905b8154815290600101906020018083116103a557829003601f168201915b505050505081565b600160a060020a033381166000908152600660209081526040808320938616835292905220819055600192915050565b60045481565b600160a060020a0380841660009081526006602090815260408083203390941683529290529081205482111561043557600080fd5b600160a060020a03808516600090815260066020908152604080832033909416835292905220546104669083610772565b600160a060020a0380861660009081526006602090815260408083203390941683529290522055610498848484610784565b5060019392505050565b60035460ff1681565b6000805433600160a060020a039081169116146104c757600080fd5b600160a060020a033316600090815260056020526040902054829010156104ed57600080fd5b600160a060020a0333166000908152600560205260409020546105109083610772565b600160a060020a0333166000908152600560205260409020556004546105369083610772565b600455600160a060020a0333167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a2506001919050565b60056020526000908152604090205481565b600054600160a060020a031681565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103c25780601f10610397576101008083540402835291602001916103c2565b610615338383610784565b5050565b60076020526000908152604090205460ff1681565b600660209081526000928352604080842090915290825290205481565b60005433600160a060020a0390811691161461066657600080fd5b600160a060020a03821660009081526007602052604090819020805460ff19168315151790557f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a5908390839051600160a060020a039092168252151560208201526040908101905180910390a15050565b60005433600160a060020a039081169116146106f257600080fd5b600160a060020a038116151561070757600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008282111561077e57fe5b50900390565b6000600160a060020a038316151561079b57600080fd5b600160a060020a038416600090815260056020526040902054829010156107c157600080fd5b600160a060020a038316600090815260056020526040902054828101116107e757600080fd5b600160a060020a0380851660009081526005602052604080822054928616825290205461081491906108f2565b600160a060020a03851660009081526005602052604090205490915061083a9083610772565b600160a060020a03808616600090815260056020526040808220939093559085168152205461086990836108f2565b600160a060020a03808516600081815260056020526040908190209390935591908616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a3600160a060020a038084166000908152600560205260408082205492871682529020540181146108ec57fe5b50505050565b60008282018381108015906109075750828110155b151561090f57fe5b93925050505600a165627a7a723058206d5dafbd969c0cbfee19194312708db3eb568943cda065f054dc65198a86cf5c002900000000000000000000000000000000000000000000000000000002540be400000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000008414242546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034142420000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000002540be400000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000008414242546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034142420000000000000000000000000000000000000000000000000000000000"
}