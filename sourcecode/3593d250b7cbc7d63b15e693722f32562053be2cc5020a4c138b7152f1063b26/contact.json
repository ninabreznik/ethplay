{
  "address": "0xb910264ec731099f230a7d7052767a3d7f023634",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "OrcaBounties",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-05\n*/\n\npragma solidity ^0.4.24;\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    require(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(\n    ERC20 token,\n    address from,\n    address to,\n    uint256 value\n  )\n    internal\n  {\n    require(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    require(token.approve(spender, value));\n  }\n}\n\n// File: contracts/TokenRecoverable.sol\n\ncontract TokenRecoverable is Ownable {\n    using SafeERC20 for ERC20Basic;\n\n    function recoverTokens(ERC20Basic token, address to, uint256 amount) public onlyOwner {\n        uint256 balance = token.balanceOf(address(this));\n        require(balance >= amount);\n        token.safeTransfer(to, amount);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\ncontract OrcaCrowdsale {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) public bountyBalances;\n\n    function claimBounty(address beneficiary) public;\n}\n\n// File: contracts/OrcaBounties.sol\n\ncontract OrcaBounties is TokenRecoverable {\n\n    OrcaCrowdsale public crowdsale;\n\n    constructor(address _crowdsale) public {\n        require(_crowdsale != address(0));\n        crowdsale = OrcaCrowdsale(_crowdsale);\n    }\n\n    function () public payable {\n        crowdsale.claimBounty(msg.sender);\n\n        if (msg.value > 0) {\n            msg.sender.transfer(msg.value);\n        }\n    }\n\n    function bountyOf(address beneficiary) public view returns (uint256) {\n        return crowdsale.bountyBalances(beneficiary);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b506040516020806105fd833981016040525160008054600160a060020a03191633179055600160a060020a038116151561004957600080fd5b60018054600160a060020a031916600160a060020a0392909216919091179055610585806100786000396000f3006080604052600436106100775763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416635f3e849f811461012d578063715018a6146101575780638da5cb5b1461016c578063944129431461019d5780639c1e03a0146101d0578063f2fde38b146101e5575b600154604080517f98ff80750000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a03909216916398ff80759160248082019260009290919082900301818387803b1580156100dc57600080fd5b505af11580156100f0573d6000803e3d6000fd5b50505050600034111561012b5760405133903480156108fc02916000818181858888f19350505050158015610129573d6000803e3d6000fd5b505b005b34801561013957600080fd5b5061012b600160a060020a0360043581169060243516604435610206565b34801561016357600080fd5b5061012b6102da565b34801561017857600080fd5b50610181610346565b60408051600160a060020a039092168252519081900360200190f35b3480156101a957600080fd5b506101be600160a060020a0360043516610355565b60408051918252519081900360200190f35b3480156101dc57600080fd5b506101816103f2565b3480156101f157600080fd5b5061012b600160a060020a0360043516610401565b60008054600160a060020a0316331461021e57600080fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a038616916370a082319160248083019260209291908290030181600087803b15801561027f57600080fd5b505af1158015610293573d6000803e3d6000fd5b505050506040513d60208110156102a957600080fd5b50519050818110156102ba57600080fd5b6102d4600160a060020a038516848463ffffffff61042416565b50505050565b600054600160a060020a031633146102f157600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031681565b600154604080517ff8bd8c87000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301529151600093929092169163f8bd8c879160248082019260209290919082900301818787803b1580156103c057600080fd5b505af11580156103d4573d6000803e3d6000fd5b505050506040513d60208110156103ea57600080fd5b505192915050565b600154600160a060020a031681565b600054600160a060020a0316331461041857600080fd5b610421816104dc565b50565b82600160a060020a031663a9059cbb83836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156104a057600080fd5b505af11580156104b4573d6000803e3d6000fd5b505050506040513d60208110156104ca57600080fd5b505115156104d757600080fd5b505050565b600160a060020a03811615156104f157600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a72305820ca69beaaca5483c544a834de2d8048a63d18738c315a04c0f025659d95b3887a0029000000000000000000000000edf19b437d1a67e18b15dd4a859dd52f9cfa012f",
  "constructorArguments": "000000000000000000000000edf19b437d1a67e18b15dd4a859dd52f9cfa012f"
}