{
  "address": "0x75d34b30a9a2405b7e2bbff94badcc0ce6c934ad",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TGEToken",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-08-31\n*/\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n}\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value) returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) returns (bool);\n  function approve(address spender, uint256 value) returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\n\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will recieve the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\n\ncontract TGEToken is MintableToken {\n    string public name;       \n    uint8 public decimals = 18;                \n    string public symbol;                 \n    string public version = \"H0.1\";\n    \n    function TGEToken(\n        string _tokenName,\n        string _tokenSymbol\n        ) {\n        name = _tokenName;\n        symbol = _tokenSymbol;\n    }\n    \n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n\n        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n        assert(_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData));\n        return true;\n    }\n\n    function burn(uint256 _value) returns (bool success) {\n        if (balances[msg.sender] >= _value && _value > 0) {\n            balances[msg.sender] -= _value;\n            totalSupply -= _value;\n            Transfer(msg.sender, 0x0, _value);\n            return true;\n        } else {\n            return false;\n        }\n    }\n}",
  "bytecode": "606060409081526003805460a060020a60ff02191690556005805460ff191660121790558051908101604052600481527f48302e3100000000000000000000000000000000000000000000000000000000602082015260079080516200006a929160200190620000f0565b5034156200007757600080fd5b60405162001035380380620010358339810160405280805182019190602001805190910190505b5b60038054600160a060020a03191633600160a060020a03161790555b6004828051620000d0929160200190620000f0565b506006818051620000e6929160200190620000f0565b505b50506200019a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200013357805160ff191683800117855562000163565b8280016001018555821562000163579182015b828111156200016357825182559160200191906001019062000146565b5b506200017292915062000176565b5090565b6200019791905b808211156200017257600081556001016200017d565b5090565b90565b610e8b80620001aa6000396000f300606060405236156100d55763ffffffff60e060020a60003504166305d2035b81146100da57806306fdde0314610101578063095ea7b31461018c57806318160ddd146101c257806323b872dd146101e7578063313ce5671461022357806340c10f191461024c57806342966c681461028257806354fd4d50146102ac57806370a08231146103375780637d64bcb4146103685780638da5cb5b1461038f57806395d89b41146103be578063a9059cbb14610449578063cae9ca511461047f578063dd62ed3e146104f8578063f2fde38b1461052f575b600080fd5b34156100e557600080fd5b6100ed610550565b604051901515815260200160405180910390f35b341561010c57600080fd5b610114610571565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101515780820151818401525b602001610138565b50505050905090810190601f16801561017e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561019757600080fd5b6100ed600160a060020a036004351660243561060f565b604051901515815260200160405180910390f35b34156101cd57600080fd5b6101d56106b6565b60405190815260200160405180910390f35b34156101f257600080fd5b6100ed600160a060020a03600435811690602435166044356106bc565b604051901515815260200160405180910390f35b341561022e57600080fd5b6102366107d1565b60405160ff909116815260200160405180910390f35b341561025757600080fd5b6100ed600160a060020a03600435166024356107da565b604051901515815260200160405180910390f35b341561028d57600080fd5b6100ed6004356108bc565b604051901515815260200160405180910390f35b34156102b757600080fd5b610114610959565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101515780820151818401525b602001610138565b50505050905090810190601f16801561017e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561034257600080fd5b6101d5600160a060020a03600435166109f7565b60405190815260200160405180910390f35b341561037357600080fd5b6100ed610a16565b604051901515815260200160405180910390f35b341561039a57600080fd5b6103a2610a9d565b604051600160a060020a03909116815260200160405180910390f35b34156103c957600080fd5b610114610aac565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101515780820151818401525b602001610138565b50505050905090810190601f16801561017e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561045457600080fd5b6100ed600160a060020a0360043516602435610b4a565b604051901515815260200160405180910390f35b341561048a57600080fd5b6100ed60048035600160a060020a03169060248035919060649060443590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610c0a95505050505050565b604051901515815260200160405180910390f35b341561050357600080fd5b6101d5600160a060020a0360043581169060243516610da9565b60405190815260200160405180910390f35b341561053a57600080fd5b61054e600160a060020a0360043516610dd6565b005b60035474010000000000000000000000000000000000000000900460ff1681565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106075780601f106105dc57610100808354040283529160200191610607565b820191906000526020600020905b8154815290600101906020018083116105ea57829003601f168201915b505050505081565b60008115806106415750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b151561064c57600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60005481565b600160a060020a038084166000908152600260209081526040808320338516845282528083205493861683526001909152812054909190610703908463ffffffff610e2e16565b600160a060020a038086166000908152600160205260408082209390935590871681522054610738908463ffffffff610e4816565b600160a060020a038616600090815260016020526040902055610761818463ffffffff610e4816565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3600191505b509392505050565b60055460ff1681565b60035460009033600160a060020a039081169116146107f857600080fd5b60035474010000000000000000000000000000000000000000900460ff161561082057600080fd5b600054610833908363ffffffff610e2e16565b6000908155600160a060020a03841681526001602052604090205461085e908363ffffffff610e2e16565b600160a060020a0384166000818152600160205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a25060015b5b5b92915050565b600160a060020a0333166000908152600160205260408120548290108015906108e55750600082115b1561094f57600160a060020a03331660008181526001602052604080822080548690039055815485900382559091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a3506001610953565b5060005b5b919050565b60078054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106075780601f106105dc57610100808354040283529160200191610607565b820191906000526020600020905b8154815290600101906020018083116105ea57829003601f168201915b505050505081565b600160a060020a0381166000908152600160205260409020545b919050565b60035460009033600160a060020a03908116911614610a3457600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a15060015b5b90565b600354600160a060020a031681565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106075780601f106105dc57610100808354040283529160200191610607565b820191906000526020600020905b8154815290600101906020018083116105ea57829003601f168201915b505050505081565b600160a060020a033316600090815260016020526040812054610b73908363ffffffff610e4816565b600160a060020a033381166000908152600160205260408082209390935590851681522054610ba8908363ffffffff610e2e16565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b92915050565b600160a060020a03338116600081815260026020908152604080832094881680845294909152808220869055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259086905190815260200160405180910390a383600160a060020a03166040517f72656365697665417070726f76616c28616464726573732c75696e743235362c81527f616464726573732c6279746573290000000000000000000000000000000000006020820152602e01604051809103902060e060020a9004338530866040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a03168152602001828051906020019080838360005b83811015610d4c5780820151818401525b602001610d33565b50505050905090810190601f168015610d795780820380516001836020036101000a031916815260200191505b5094505050505060006040518083038160008761646e5a03f1925050501515610d9e57fe5b5060015b9392505050565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b60035433600160a060020a03908116911614610df157600080fd5b600160a060020a03811615610e29576003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b5b50565b600082820183811015610e3d57fe5b8091505b5092915050565b600082821115610e5457fe5b508082035b929150505600a165627a7a72305820186776f6ae62536369d2db2ba2aa82a203e3294249431cc026cac512eca203370029000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000244d616369656a2057617069c584736b6920e2809c5761706e69616be2809d20546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035741500000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000244d616369656a2057617069c584736b6920e2809c5761706e69616be2809d20546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035741500000000000000000000000000000000000000000000000000000000000"
}