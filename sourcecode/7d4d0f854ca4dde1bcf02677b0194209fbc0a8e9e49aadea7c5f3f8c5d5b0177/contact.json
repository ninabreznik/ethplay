{
  "address": "0x9a98e1b91302665a9b71bd4409e52bb0ad39731f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TorpedoLaunchGame",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-01\n*/\n\n/*\n\nIntroducing \"TORPEDO LAUNCH\" Version 2.1, with a minor update on payout system\n\"TORPEDO LAUNCH\" is playable @ https://torpedolaunch.io (Ethereum Edition) and https://trx.torpedolaunch.io (TRON Edition)\n\nAbout the game :\n\nYou are in command on a WW2 Class Submarine, YOUR MISSION : Seek and Destroy enemy ships.\n\nHow to play TORPEDO LAUNCH:\n\nBuy a batch of 15 torpedoes and try to score as much as possible by sinking ships and submarines.\nYour Break-even point is at the moving average score of all players, if your score is over the moving average, you are receiving your credits back\nplus a part of the current treasure proportionally to your score, if your score is lower than the moving average, you are receiving\na part of your credits also proportionally to your score. At every play, the best score is registered also for the HIGHSCORE JACKPOT PAYOUT which is\npaid every 100 play. In addition, every time you buy new torpedoes, 5% of the price will buy you HDX20 Token you can resell anytime, earning\nyou Ethereum or Tron(TRX) from the volume of any HDX20 POWERED GAMES as long as you hold them (visit hdx20.io or trx.hdx20.io for details).\n\nPlay for the JACKPOT, Play for the TREASURE, Play for staking HDX20 TOKEN or Play for all at once...Your Choice!\n\nWe wish you Good Luck!\n\nPAYOUTS DISTRIBUTION:\n100% of TREASURE and JACKPOT are paid to Players\n\nat every Play:\n\n 5% credited to player as HDX20 token\n64% of losing credits to the running TREASURE\n16% of losing credits to the running JACKPOT\n15% of losing credits to the community of HDX20 gamers/holders distributed as price appreciation.\n 5% of losing credits to developer for running, developing and expanding the platform.\n\n\nUPDATE:\n\nVersion 2.1 is a UPDATE on the payout system to distribute a percentage of the treasure for a better distribution among all players  \n(previous version was distributing the full treasure at average_score *2)\n\n\nThis product is copyrighted. Any unauthorized copy, modification, or use without express written consent from HyperDevbox is prohibited.\n\nCopyright 2018 HyperDevbox\n\n*/\n\n\n\n\npragma solidity ^0.4.25;\n\n\ninterface HDX20Interface\n{\n    function() payable external;\n    \n    \n    function buyTokenFromGame( address _customerAddress , address _referrer_address ) payable external returns(uint256);\n  \n    function payWithToken( uint256 _eth , address _player_address ) external returns(uint256);\n  \n    function appreciateTokenPrice() payable external;\n   \n    function totalSupply() external view returns(uint256); \n    \n    function ethBalanceOf(address _customerAddress) external view returns(uint256);\n  \n    function balanceOf(address _playerAddress) external view returns(uint256);\n    \n    function sellingPrice( bool includeFees) external view returns(uint256);\n  \n}\n\n\ncontract TorpedoLaunchGame\n{\n     HDX20Interface private HDXcontract = HDX20Interface(0x8942a5995bd168f347f7ec58f25a54a9a064f882);\n     \n     using SafeMath for uint256;\n     using SafeMath128 for uint128;\n     \n     /*==============================\n    =            EVENTS            =\n    ==============================*/\n    event OwnershipTransferred(\n        \n         address previousOwner,\n         address nextOwner,\n          uint256 timeStamp\n         );\n         \n    event HDXcontractChanged(\n        \n         address previous,\n         address next,\n         uint256 timeStamp\n         );\n \n    event onJackpotWin(\n        address customerAddress,\n        uint256 val\n       \n    );\n    \n    event onChangeAverageScore(\n        uint32 score\n       \n    );\n    \n    event onChangeJackpotCycle(\n        uint32 cycle\n       \n    );\n    \n    \n     event onChangeMaximumScore(\n        uint32 score\n       \n    );\n    \n     event onChangeTimeout(\n        uint32 timeout\n       \n    );\n    \n      event onChangePercentageTreasure(\n        uint32 percentage\n       \n    );\n\t    \n     event onWithdrawGains(\n        address customerAddress,\n        uint256 ethereumWithdrawn,\n        uint256 timeStamp\n    );\n    \n    event onNewScore(\n\t\tuint256       score,\n        address       customerAddress,\n        bool          newHighScore,\n        uint256\t\t  val,\t\t\t\t//winning\n        uint32        torpedoBatchMultiplier  //x1, x10, x100\n        \n    );\n             \n    event onBuyTorpedo(\n        address     customerAddress,\n        uint256     torpedoBatchID,\n        uint256     torpedoBatchBlockTimeout,  \n        uint256     nbToken,\n        uint32      torpedoBatchMultiplier  //x1, x10, x100\n        );    \n        \n        \n     event onMaintenance(\n        bool        mode,\n        uint256     timeStamp\n\n        );    \n      \n        \n    event onChangeBlockTimeAverage(\n        \n         uint256 blocktimeavg\n         \n        );    \n        \n    event onChangeMinimumPrice(\n        \n         uint256 minimum,\n         uint256 timeStamp\n         );\n         \n    event onNewName(\n        \n         address     customerAddress,\n         bytes32     name,\n         uint256     timeStamp\n         );\n        \n    /*==============================\n    =            MODIFIERS         =\n    ==============================*/\n    modifier onlyOwner\n    {\n        require (msg.sender == owner );\n        _;\n    }\n    \n    modifier onlyFromHDXToken\n    {\n        require (msg.sender == address( HDXcontract ));\n        _;\n    }\n   \n     modifier onlyDirectTransaction\n    {\n        require (msg.sender == tx.origin);\n        _;\n    }\n   \n   \n  \n    \n    modifier isMaintenance\n    {\n        require (maintenanceMode==true);\n        _;\n    }\n    \n     modifier isNotMaintenance\n    {\n        require (maintenanceMode==false);\n        _;\n    }\n   \n  \n    address public owner;\n  \n   \n    address public signerAuthority = 0xf77444cE64f3F46ba6b63F6b9411dF9c589E3319;\n   \n    \n    \n\n    constructor () public\n    {\n        owner = msg.sender;\n       \n\t\t//set the average point to the maximum / 5 extended score\n\t\t\n\t\tuint32 maximumScore = (1350+70)*15;\n\t   \t   \n\t\tGameRoundData.extraData[2] = maximumScore/5;\n\t\tGameRoundData.extraData[3] = 100; //default jackpot cycle\n        GameRoundData.extraData[4] = maximumScore;\n        GameRoundData.extraData[5] = 60*60; //1 hour by default\n        GameRoundData.extraData[6] = 10; //10 percents default\n        \n        if ( address(this).balance > 0)\n        {\n            owner.transfer( address(this).balance );\n        }\n    }\n    \n    function changeOwner(address _nextOwner) public\n    onlyOwner\n    {\n        require (_nextOwner != owner);\n        require(_nextOwner != address(0));\n         \n        emit OwnershipTransferred(owner, _nextOwner , now);\n         \n        owner = _nextOwner;\n    }\n    \n    function changeSigner(address _nextSigner) public\n    onlyOwner\n    {\n        require (_nextSigner != signerAuthority);\n        require(_nextSigner != address(0));\n      \n        signerAuthority = _nextSigner;\n    }\n    \n    function changeHDXcontract(address _next) public\n    onlyOwner\n    {\n        require (_next != address( HDXcontract ));\n        require( _next != address(0));\n         \n        emit HDXcontractChanged(address(HDXcontract), _next , now);\n         \n        HDXcontract  = HDX20Interface( _next);\n    }\n  \n  \n    \n    function changeBlockTimeAverage( uint256 blocktimeavg) public\n    onlyOwner\n    {\n        require ( blocktimeavg>0 );\n        \n       \n        blockTimeAverage = blocktimeavg;\n        \n        emit onChangeBlockTimeAverage( blockTimeAverage );\n         \n    }\n    \n    \n    //in case we need to reset the game difficulty \n    function changeAverageScore( uint32 score) public\n    onlyOwner\n    {\n       \n        GameRoundData.extraData[2] = score;\n        \n        emit onChangeAverageScore( score );\n         \n    }\n    \n    //in case we need to adjust if players prefer a fast jackpot over quantity or opposite \n    function changeJackpotCycle( uint32 cycle) public\n    onlyOwner\n    {\n        //let's stay reasonnable\n        require( cycle>0 && cycle<=1000);\n        \n       \n        GameRoundData.extraData[3] = cycle;\n        \n        emit onChangeJackpotCycle( cycle );\n         \n    }\n    \n    //in case we want to add new ships, new bonus item to the game, etc....we need to adjust the maximum score\n    function changeMaximumScore( uint32 score) public\n    onlyOwner\n    {\n        //let's stay reasonnable\n        require( score > 4000);\n        \n        GameRoundData.extraData[4] = score;\n       \n      \n        emit onChangeMaximumScore( score );\n         \n    }\n    \n     //in case we need to change the timeout because of slower or faster network (in seconds) \n    function changeTimeOut( uint32 timeout) public\n    onlyOwner\n    {\n       \n        GameRoundData.extraData[5] = timeout;\n        \n        emit onChangeTimeout( timeout );\n         \n    }\n    \n    //we want to be able to tune the game and select a different percentage of the treasure to be giving per play at maximum\n    //also we can use this to make contest and special event etc....\n    function changePercentageTreasure( uint32 percentage) public\n    onlyOwner\n    {\n        require( percentage > 0 && percentage<=100);\n        \n        GameRoundData.extraData[6] = percentage;\n        \n        emit onChangePercentageTreasure( percentage );\n         \n    }\n    \n    function enableMaintenance() public\n    onlyOwner\n    {\n        maintenanceMode = true;\n        \n        emit onMaintenance( maintenanceMode , now);\n        \n    }\n\n    function disableMaintenance() public\n    onlyOwner\n    {\n      \n        maintenanceMode = false;\n        \n        emit onMaintenance( maintenanceMode , now);\n        \n       \n      \n    }\n    \n  \n    function changeMinimumPrice( uint256 newmini) public\n    onlyOwner\n    {\n      \n      if (newmini>0)\n      {\n          minimumSharePrice = newmini;\n      }\n       \n      emit onChangeMinimumPrice( newmini , now ); \n    }\n    \n    \n     /*================================\n    =       GAMES VARIABLES         =\n    ================================*/\n    \n    struct PlayerData_s\n    {\n   \n        uint256 chest;  \n        uint256 payoutsTo;\n       \n\t\t//credit locked until we validate the score\n\t\tuint256 lockedCredit;\t\n\t\t\n        uint256         torpedoBatchID;         \n        uint256         torpedoBatchBlockTimeout;   \n\n\t\tuint32[1]\t\tpackedData;\t\t//[0] = torpedomultiplier;\n\t\t\t\t\t\t\n    }\n    \n    \n    struct GameRoundData_s\n    {\n\t   \n\t   uint256\t\t\t\tjackpotAmount;\n\t   uint256\t\t\t\ttreasureAmount;\n\t   address\t\t\t\tcurrentJackpotWinner;\n\t          \n       uint256              hdx20AppreciationPayout;\n       uint256              devAppreciationPayout;\n\t   \n       //********************************************************************************************\n\t   \n\t   uint32[7]\t\t\textraData;\t\t//[0] = jackpot current highscore\n\t\t\t\t\t\t\t\t\t\t\t//[1] = jackpot turn (start at 0 to jackpot cycle )\n\t\t\t\t\t\t\t\t\t\t\t//[2] = scoreAverage to beat\n\t\t\t                                //[3] = jackpot cycle (default 100)\t\t\t\t\t\t\t\t\n\t                                        //[4] = maximum score possible in the game\n\t                                        //[5] = timeout/torpedo score in seconds\n\t                                        //[6] = percentage treasure per play\n  \n    }\n      \n   \n    mapping (address => PlayerData_s)   private PlayerData;\n       \n    GameRoundData_s   private GameRoundData;\n    \n    mapping( address => bytes32) private registeredNames;\n       \n    bool        private maintenanceMode=false;     \n    \n    uint8 constant private HDX20BuyFees = 5;\n     \n    uint8 constant private DevFees = 5;\n\tuint8 constant private AppreciationFees = 15;\t\t\n\tuint8 constant private JackpotAppreciation = 16;\n\tuint8 constant private TreasureAppreciation = 64;\n   \n    uint256 constant internal magnitude = 1e18;\n     \n    uint256 private minimumSharePrice = 0.01 ether;\n    \n    uint256 private blockTimeAverage = 15;                \n\n\n    uint256 constant thresholdForAppreciation = 0.05 ether;\n      \n    /*================================\n    =       PUBLIC FUNCTIONS         =\n    ================================*/\n    \n    //fallback will be called only from the HDX token contract to fund the game from customers's HDX20\n    \n     function()\n     payable\n     public\n     onlyFromHDXToken \n    {\n       \n      \n      \n          \n    }\n    \n     function ChargeJackpot() public payable\n    {\n\t\tuint256 _val = msg.value;\n\t\t\n\t\tGameRoundData.jackpotAmount = GameRoundData.jackpotAmount.add( _val );\n\t\n    }\n    \n    function ChargeTreasure() public payable\n    {\n\t\tuint256 _val = msg.value;\n\t\n\t\t\n\t\tGameRoundData.treasureAmount = GameRoundData.treasureAmount.add( _val );\n\t\t\t\t   \n    }\n\t\n\tfunction AddJackpotTreasure( uint256 _val ) private\n\t{\n\t\t//add to jackpot and treasure\n\t\tGameRoundData.jackpotAmount = GameRoundData.jackpotAmount.add( _val.mul( JackpotAppreciation ) / 100 );\n\t\t\n\t\tGameRoundData.treasureAmount = GameRoundData.treasureAmount.add( _val.mul( TreasureAppreciation ) / 100 );\n\t\t\n\t\t//now HDX20 appreciation and dev account\n\t\t\n\t\tuint256 _appreciation = SafeMath.mul( _val , AppreciationFees) / 100; \n          \n        uint256 _dev = SafeMath.mul( _val , DevFees) / 100;  \n\t\t\n\t\t_dev = _dev.add( GameRoundData.devAppreciationPayout );\n\t\t\n\t\tif (_dev>= thresholdForAppreciation )\n\t\t{\n\t\t\tGameRoundData.devAppreciationPayout = 0;\n\t\t\t\n\t\t\tHDXcontract.buyTokenFromGame.value( _dev )( owner , address(0));\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\t GameRoundData.devAppreciationPayout = _dev;\n\t\t}\n\t\n\t\t_appreciation = _appreciation.add( GameRoundData.hdx20AppreciationPayout );\n\t\t\n\t\tif (_appreciation>= thresholdForAppreciation)\n\t\t{\n\t\t\tGameRoundData.hdx20AppreciationPayout = 0;\n\t\t\t\n\t\t\tHDXcontract.appreciateTokenPrice.value( _appreciation )();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tGameRoundData.hdx20AppreciationPayout = _appreciation;\n\t\t}\n\t\t\n\t}\n\t\n    \n    \n    \n    function ValidTorpedoScore( int256 score, uint256 torpedoBatchID , bytes32 r , bytes32 s , uint8 v) public\n    onlyDirectTransaction\n    {\n        address _customer_address = msg.sender;\n         \n        require( maintenanceMode==false);\n  \n        GameVar_s memory gamevar;\n        gamevar.score = score;\n        gamevar.torpedoBatchID = torpedoBatchID;\n        gamevar.r = r;\n        gamevar.s = s;\n        gamevar.v = v;\n   \n        coreValidTorpedoScore( _customer_address , gamevar  );\n    }\n    \n    \n    struct GameVar_s\n    {\n     \n        bool madehigh;\n              \n               \n        uint256  torpedoBatchID;\n       \n \t    int256   score;\n\t\tuint256  scoreMultiplied;\n\t\t\n\t\tuint32   multiplier;\n\t\t\n        bytes32  r;\n        bytes32  s;\n        uint8    v;\n    }\n    \n\tfunction payJackpot() private\n\t{\n\t\taddress _winner = GameRoundData.currentJackpotWinner;\n\t\tuint256 _j = GameRoundData.jackpotAmount;\n\t\t\n\t\t\n\t\tif (_winner != address(0))\n\t\t{\n\t\t\tPlayerData[ _winner ].chest = PlayerData[ _winner ].chest.add( _j ); \n\t\t\n\t\t\n    \t\tGameRoundData.currentJackpotWinner = address(0);\n    \t\tGameRoundData.jackpotAmount = 0;\n    \t\t//turn to 0\n    \t\tGameRoundData.extraData[1] = 0;\n    \t\t//highscore to 0\n    \t\tGameRoundData.extraData[0] = 0;\n    \t\t\n    \t\temit onJackpotWin( _winner , _j  );\n\t\t}\n\t\t\n\t}\n  \n    \n    function coreValidTorpedoScore( address _player_address , GameVar_s gamevar) private\n    {\n    \n        PlayerData_s storage  _PlayerData = PlayerData[ _player_address];\n                \n        require((gamevar.torpedoBatchID != 0) && (gamevar.torpedoBatchID == _PlayerData.torpedoBatchID) && ( _PlayerData.lockedCredit>0 ));\n                \n        gamevar.madehigh = false;\n\n\t\n        if (block.number>=_PlayerData.torpedoBatchBlockTimeout || (ecrecover(keccak256(abi.encodePacked( gamevar.score,gamevar.torpedoBatchID )) , gamevar.v, gamevar.r, gamevar.s) != signerAuthority))\n        {\n            gamevar.score = 0;\n        }\n\t\t\n\t\tif (gamevar.score<0) gamevar.score = 0;\n\t\t\t\t            \n        gamevar.scoreMultiplied = uint256(gamevar.score) * uint256(_PlayerData.packedData[0]);\n        \n        if (gamevar.score>0xffffffff) gamevar.score = 0xffffffff;\n        if (gamevar.scoreMultiplied>0xffffffff) gamevar.scoreMultiplied = 0xffffffff;\n   \t\t\n\t\t//new jackpot highscore\n\t\tif (gamevar.scoreMultiplied > uint256( GameRoundData.extraData[0] ))\n\t\t{\n\t\t\tGameRoundData.extraData[0] = uint32( gamevar.scoreMultiplied );\n\t\t\t\n\t\t\tGameRoundData.currentJackpotWinner = _player_address;\n\t\t\t\n \t\t\tgamevar.madehigh = true;\n\t\t\t \n\t\t}\n\t\t\n\t\t//jackpot turn++\n\t\t GameRoundData.extraData[1]++;\n\t\t\n\t\t//time to pay jackpot cycle ?\t\n\t\tif (GameRoundData.extraData[1]>=GameRoundData.extraData[3])\n\t\t{\n\t\t\tpayJackpot();\n\t\t}\n\t\t\n\t\n\t\t//we need to deal with scores not multiplied here\t\n\t\t\n\t\tuint256 _winning =0;\n\t\tuint256 _average = uint256( GameRoundData.extraData[2]);\n\t\tuint256 _top = _average*3;\n\t\t\n\t\tuint256 _score = uint256(gamevar.score);\n\t\t\n\t\tif (_score >=_average )\n\t\t{\n\t\t\t//more or equal than average score \n\t\t\t\n\t\t\t_winning = _PlayerData.lockedCredit;\n\t\t\t\n\t\t\t//how much from the treasure\n\t\t\t\t\t\n\t\t\tif (_score > _top) _score = _top;\n\t\t\n\t\t\t_score -= _average;\n\t\t\t_top -= _average;\n\t\t\n\t\t\t\n\t\t\t//apply the credit multiplier\t\t\t\n\t\t\tuint256 _gains = GameRoundData.treasureAmount.mul( _score * uint256( _PlayerData.packedData[0] )) / 100;\n\t\t\t\n\t\t\t\n\t\t\t//apply the percentage now per play NEW\n\t\t\t_gains = _gains.mul( GameRoundData.extraData[6] );\n\t\t\t_gains /= 100;\n\t\t\t\n\t\t\t//finally scale it to the score \n\t\t\t_gains /= (1+_top);\n\t\t\t\n\t\t\t//adjust treasure\n\t\t\tGameRoundData.treasureAmount = GameRoundData.treasureAmount.sub( _gains );\n\t\t\t\t\t\t\t\t\t\n\t\t\t_winning = _winning.add( _gains );\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//less than average score\n\t\t\n\t\t\tif (_average>0)\n\t\t\t{\n\t\t\t\t_winning = _PlayerData.lockedCredit.mul( _score ) / _average;\n\t\t\t}\n\t\t}\n\t\t\n\t\t//credit the player for what is won\n\t\t_PlayerData.chest = _PlayerData.chest.add( _winning );\n\t\t\n\t\t\n\t\t//loosing some ?\n\t\t\n\t\tif (_PlayerData.lockedCredit> _winning)\n\t\t{\n\t\t\t\n\t\t\tAddJackpotTreasure( _PlayerData.lockedCredit - _winning );\n\t\t}\n\t\t\n\t\t//update average, we shall not overflow :)\n\t\t\t\t\n\t\t_score = uint256(gamevar.score);\n\t\t\n\t\tuint32 maximumScore = GameRoundData.extraData[4];\n\t\t\n\t\t\n\t\t//this has to be significatf and not just someone trying to cheat the system \n\t\t//\n\t\tif (_score>_average/2)\n\t\t{\n\t\t\t_score = _score.add( _average * 99 );\n\t\t\t_score /= 100;\n\t\t\t\n\t\t\tif (_score< maximumScore/6 ) _score = maximumScore/6;\n\t\t\tif (_score > maximumScore/3) _score = maximumScore/3;\n\t\t\t\n\t\t\tGameRoundData.extraData[2] = uint32( _score );\n\t\t}\n\n\t\t//\t\t\n   \n        //ok reset it so we can get a new one\n        _PlayerData.torpedoBatchID = 0;\n        _PlayerData.lockedCredit = 0;\n\t\t\n        emit onNewScore( gamevar.scoreMultiplied , _player_address , gamevar.madehigh , _winning , _PlayerData.packedData[0] );\n\n\n    }\n    \n    \n    function BuyTorpedoWithDividends( uint256 eth , int256 score, uint256 torpedoBatchID,  address _referrer_address , bytes32 r , bytes32 s , uint8 v) public\n    onlyDirectTransaction\n    {\n        \n        require( maintenanceMode==false  && (eth==minimumSharePrice || eth==minimumSharePrice*10 || eth==minimumSharePrice*100) );\n  \n        address _customer_address = msg.sender;\n        \n        GameVar_s memory gamevar;\n        gamevar.score = score;\n        gamevar.torpedoBatchID = torpedoBatchID;\n        gamevar.r = r;\n        gamevar.s = s;\n        gamevar.v = v;\n        \n      \n        gamevar.multiplier =uint32( eth / minimumSharePrice);\n        \n        eth = HDXcontract.payWithToken( eth , _customer_address );\n       \n        require( eth>0 );\n        \n         \n        CoreBuyTorpedo( _customer_address , eth , _referrer_address , gamevar );\n        \n       \n    }\n    \n    function BuyName( bytes32 name ) public payable\n    {\n        address _customer_address = msg.sender;\n        uint256 eth = msg.value; \n        \n        require( maintenanceMode==false  && (eth==minimumSharePrice*10));\n        \n        //50% for the community\n        //50% for the developer account\n        \n        eth /= 2;\n        \n        HDXcontract.buyTokenFromGame.value( eth )( owner , address(0));\n       \n        HDXcontract.appreciateTokenPrice.value( eth )();\n        \n        registeredNames[ _customer_address ] = name;\n        \n        emit onNewName( _customer_address , name , now );\n    }\n    \n    function BuyTorpedo( int256 score, uint256 torpedoBatchID, address _referrer_address , bytes32 r , bytes32 s , uint8 v ) public payable\n    onlyDirectTransaction\n    {\n     \n        address _customer_address = msg.sender;\n        uint256 eth = msg.value;\n        \n        require( maintenanceMode==false  && (eth==minimumSharePrice || eth==minimumSharePrice*10 || eth==minimumSharePrice*100));\n   \n        GameVar_s memory gamevar;\n        gamevar.score = score;\n        gamevar.torpedoBatchID = torpedoBatchID;\n        gamevar.r = r;\n        gamevar.s = s;\n        gamevar.v = v;\n        \n       \n        gamevar.multiplier =uint32( eth / minimumSharePrice);\n   \n        CoreBuyTorpedo( _customer_address , eth , _referrer_address, gamevar);\n     \n    }\n    \n    /*================================\n    =       CORE BUY FUNCTIONS       =\n    ================================*/\n    \n    function CoreBuyTorpedo( address _player_address , uint256 eth ,  address _referrer_address , GameVar_s gamevar) private\n    {\n    \n        PlayerData_s storage  _PlayerData = PlayerData[ _player_address];\n            \n        \n        //we need to validate the score before buying a torpedo batch\n        if (gamevar.torpedoBatchID !=0 || _PlayerData.torpedoBatchID !=0)\n        {\n             coreValidTorpedoScore( _player_address , gamevar);\n        }\n        \n        \n        //if we can continue then everything is fine let's create the new torpedo batch\n        \n        _PlayerData.packedData[0] = gamevar.multiplier;\n        _PlayerData.torpedoBatchBlockTimeout = block.number + (uint256(GameRoundData.extraData[5]) / blockTimeAverage);\n        _PlayerData.torpedoBatchID = uint256((keccak256(abi.encodePacked( block.number, _player_address , address(this)))));\n        \n        \n        //HDX20BuyFees\n        uint256 _tempo = (eth.mul(HDX20BuyFees)) / 100;\n\t\t\n\t\t_PlayerData.lockedCredit =  eth - _tempo;\t//total - hdx20\n\t\t        \n        uint256 _nb_token =   HDXcontract.buyTokenFromGame.value( _tempo )( _player_address , _referrer_address);\n        \n        \n        emit onBuyTorpedo( _player_address, _PlayerData.torpedoBatchID , _PlayerData.torpedoBatchBlockTimeout, _nb_token,  _PlayerData.packedData[0]);\n            \n        \n    }\n    \n   \n    \n    function get_Gains(address _player_address) private view\n    returns( uint256)\n    {\n       \n        uint256 _gains = PlayerData[ _player_address ].chest;\n        \n        if (_gains > PlayerData[ _player_address].payoutsTo)\n        {\n            _gains -= PlayerData[ _player_address].payoutsTo;\n        }\n        else _gains = 0;\n     \n    \n        return( _gains );\n        \n    }\n    \n    \n    function WithdrawGains() public \n   \n    {\n        address _customer_address = msg.sender;\n        \n        uint256 _gains = get_Gains( _customer_address );\n        \n        require( _gains>0);\n        \n        PlayerData[ _customer_address ].payoutsTo = PlayerData[ _customer_address ].payoutsTo.add( _gains );\n        \n      \n        emit onWithdrawGains( _customer_address , _gains , now);\n        \n        _customer_address.transfer( _gains );\n        \n        \n    }\n    \n   \n    \n   \n   \n  \n  \n    \n     /*================================\n    =  VIEW AND HELPERS FUNCTIONS    =\n    ================================*/\n  \n    \n    function view_get_Treasure() public\n    view\n    returns(uint256)\n    {\n      \n      return( GameRoundData.treasureAmount );  \n    }\n\t\n\tfunction view_get_Jackpot() public\n    view\n    returns(uint256)\n    {\n      \n      return( GameRoundData.jackpotAmount );  \n    }\n \n    function view_get_gameData() public\n    view\n    returns( uint256 treasure,\n\t\t\t uint256 jackpot,\n\t\t\t uint32  highscore ,\n\t\t\t address highscore_address ,\n\t\t\t bytes32 highscore_name,\n\t\t\t uint32  highscore_turn,\n\t\t\t uint32  score_average,\n\t\t\n\t\t\t uint256 torpedoBatchID ,\n\t\t\t uint32 torpedoBatchMultiplier ,\n\t\t\t uint256 torpedoBatchBlockTimeout,\n\t\t\t uint32  score_maximum,\n\t\t\t uint32  percentage)\n    {\n        address _player_address = msg.sender;\n\t\t\n\t\ttreasure = GameRoundData.treasureAmount;\n\t\tjackpot = GameRoundData.jackpotAmount;\n\t\thighscore = GameRoundData.extraData[0];\n\t\thighscore_address = GameRoundData.currentJackpotWinner;\n\t\thighscore_name = view_get_registeredNames( GameRoundData.currentJackpotWinner  );\n\t\thighscore_turn = GameRoundData.extraData[1];\n\t\tscore_average = GameRoundData.extraData[2];\n\t\tscore_maximum =  GameRoundData.extraData[4];\n\t\t\n\t\tpercentage = GameRoundData.extraData[6];\n\t\t      \n        torpedoBatchID = PlayerData[_player_address].torpedoBatchID;\n        torpedoBatchMultiplier = PlayerData[_player_address].packedData[0];\n        torpedoBatchBlockTimeout = PlayerData[_player_address].torpedoBatchBlockTimeout;\n       \n    }\n  \n       \n  \n    \n    function view_get_Gains()\n    public\n    view\n    returns( uint256 gains)\n    {\n        \n        address _player_address = msg.sender;\n   \n      \n        uint256 _gains = PlayerData[ _player_address ].chest;\n        \n        if (_gains > PlayerData[ _player_address].payoutsTo)\n        {\n            _gains -= PlayerData[ _player_address].payoutsTo;\n        }\n        else _gains = 0;\n     \n    \n        return( _gains );\n        \n    }\n  \n  \n    \n    function view_get_gameStates() public \n    view\n    returns( uint256 minimumshare ,\n\t\t     uint256 blockNumberCurrent ,\n\t\t\t uint256 blockTimeAvg ,\n\t\t\t uint32  highscore ,\n\t\t\t address highscore_address ,\n\t\t\t bytes32 highscore_name,\n\t\t\t uint32  highscore_turn,\n\t\t\t uint256 jackpot,\n\t\t\t bytes32 myname,\n\t\t\t uint32  jackpotCycle)\n    {\n       \n        \n        return( minimumSharePrice ,  block.number , blockTimeAverage , GameRoundData.extraData[0] , GameRoundData.currentJackpotWinner , view_get_registeredNames( GameRoundData.currentJackpotWinner  ) , GameRoundData.extraData[1] , GameRoundData.jackpotAmount,  view_get_registeredNames(msg.sender) , GameRoundData.extraData[3]);\n    }\n    \n    function view_get_pendingHDX20Appreciation()\n    public\n    view\n    returns(uint256)\n    {\n        return GameRoundData.hdx20AppreciationPayout;\n    }\n    \n    function view_get_pendingDevAppreciation()\n    public\n    view\n    returns(uint256)\n    {\n        return GameRoundData.devAppreciationPayout;\n    }\n  \n \n \n    function totalEthereumBalance()\n    public\n    view\n    returns(uint256)\n    {\n        return address(this).balance;\n    }\n    \n    function view_get_maintenanceMode()\n    public\n    view\n    returns(bool)\n    {\n        return( maintenanceMode);\n    }\n    \n    function view_get_blockNumbers()\n    public\n    view\n    returns( uint256 b1 )\n    {\n        return( block.number);\n        \n    }\n    \n    function view_get_registeredNames(address _player)\n    public\n    view\n    returns( bytes32)\n    {\n        \n        return( registeredNames[ _player ]);\n    }\n    \n   \n}\n\n\nlibrary SafeMath {\n    \n   \n    function mul(uint256 a, uint256 b) \n        internal \n        pure \n        returns (uint256 c) \n    {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        require(c / a == b);\n        return c;\n    }\n\n   \n    function sub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256) \n    {\n        require(b <= a);\n        return a - b;\n    }\n\n   \n    function add(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256 c) \n    {\n        c = a + b;\n        require(c >= a);\n        return c;\n    }\n    \n   \n    \n  \n    \n   \n}\n\n\nlibrary SafeMath128 {\n    \n   \n    function mul(uint128 a, uint128 b) \n        internal \n        pure \n        returns (uint128 c) \n    {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        require(c / a == b);\n        return c;\n    }\n\n   \n    function sub(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128) \n    {\n        require(b <= a);\n        return a - b;\n    }\n\n   \n    function add(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128 c) \n    {\n        c = a + b;\n        require(c >= a);\n        return c;\n    }\n    \n   \n    \n  \n    \n   \n}",
  "bytecode": "608060405260008054600160a060020a0319908116738942a5995bd168f347f7ec58f25a54a9a064f882179091556002805490911673f77444ce64f3f46ba6b63f6b9411df9c589e3319179055600b805460ff19169055662386f26fc10000600c55600f600d5534801561007257600080fd5b5060018054600160a060020a0319163317905560098054604060020a63ffffffff0219166910a4000000000000000017606060020a63ffffffff0219166c6400000000000000000000000017608060020a63ffffffff021916715334000000000000000000000000000000001760a060020a63ffffffff021916750e1000000000000000000000000000000000000000001760c060020a63ffffffff021916780a00000000000000000000000000000000000000000000000017905561533460003031111561017757600154604051600160a060020a0390911690303180156108fc02916000818181858888f19350505050158015610175573d6000803e3d6000fd5b505b5061200b806101876000396000f3006080604052600436106101955763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630149eea081146101ae5780630908c7fa146101d55780630f666426146101fb57806310b7d9ae146102135780631449c3211461023c57806320496b4f146102b15780632497ae8b146102cf57806332dc04aa146102d757806333791ddc146102ef57806336091526146103105780634af0616a1461032e57806352e18b1814610355578063576bcd3f1461036a5780635b3660961461037557806361c959261461039657806367cae2fc146103c75780636b2f4632146103e5578063844d38ee146103fa57806388037e1c1461040f5780638da5cb5b146104955780639b8fa9a7146104aa578063a6f9dae1146104bf578063aad2b723146104e0578063b395f27814610501578063bbf3553114610516578063bd679ab21461052b578063bdc0ba8e14610540578063cc0e13e214610555578063d1ae07b91461056a578063d925312814610588578063f13909c7146105be578063fee13823146105dc575b600054600160a060020a031633146101ac57600080fd5b005b3480156101ba57600080fd5b506101c36105e4565b60408051918252519081900360200190f35b6101ac600435602435600160a060020a036044351660643560843560ff60a435166105ea565b34801561020757600080fd5b506101ac600435610698565b34801561021f57600080fd5b506102286106fb565b604080519115158252519081900360200190f35b34801561024857600080fd5b50610251610704565b604080519a8b5260208b01999099528989019790975263ffffffff95861660608a0152600160a060020a03909416608089015260a0880192909252831660c087015260e08601526101008501521661012083015251908190036101400190f35b3480156102bd57600080fd5b506101ac63ffffffff600435166107bf565b6101ac61085e565b3480156102e357600080fd5b506101ac600435610879565b3480156102fb57600080fd5b506101c3600160a060020a03600435166108d8565b34801561031c57600080fd5b506101ac63ffffffff600435166108f3565b34801561033a57600080fd5b506101ac60043560243560443560643560ff6084351661099f565b34801561036157600080fd5b506101c3610a00565b6101ac600435610a06565b34801561038157600080fd5b506101ac600160a060020a0360043516610ba8565b3480156103a257600080fd5b506103ab610c6a565b60408051600160a060020a039092168252519081900360200190f35b3480156103d357600080fd5b506101ac63ffffffff60043516610c79565b3480156103f157600080fd5b506101c3610d3f565b34801561040657600080fd5b506101c3610d44565b34801561041b57600080fd5b50610424610d92565b604080519c8d5260208d019b909b5263ffffffff998a168c8c0152600160a060020a0390981660608c015260808b019690965293871660a08a015291861660c089015260e0880152841661010087015261012086015282166101408501521661016083015251908190036101800190f35b3480156104a157600080fd5b506103ab610ed0565b3480156104b657600080fd5b506101c3610edf565b3480156104cb57600080fd5b506101ac600160a060020a0360043516610ee5565b3480156104ec57600080fd5b506101ac600160a060020a0360043516610fa7565b34801561050d57600080fd5b506101c361101d565b34801561052257600080fd5b506101c3611021565b34801561053757600080fd5b506101ac611027565b34801561054c57600080fd5b506101ac611108565b34801561056157600080fd5b506101ac611166565b34801561057657600080fd5b506101ac63ffffffff600435166111ce565b34801561059457600080fd5b506101ac600435602435604435600160a060020a036064351660843560a43560ff60c43516611249565b3480156105ca57600080fd5b506101ac63ffffffff60043516611395565b6101ac611428565b60055490565b6000806105f5611f9b565b33321461060157600080fd5b600b5433935034925060ff161580156106385750600c548214806106295750600c54600a0282145b806106385750600c5460640282145b151561064357600080fd5b604081018990526020810188905260a0810186905260c0810185905260ff841660e0820152600c548281151561067557fe5b0463ffffffff16608082015261068d83838984611443565b505050505050505050565b600154600160a060020a031633146106af57600080fd5b60008111156106be57600c8190555b6040805182815242602082015281517f96aff3d0ee4748c300128c53ba5612b8363232b00ab841ce27937cd52c8e0f28929181900390910190a150565b600b5460ff1690565b600080600080600080600080600080600c5443600d546004600501600060078110151561072d57fe5b60088104919091015460065460079092166004026101000a900463ffffffff1690600160a060020a0316610760816108d8565b60095460045464010000000090910463ffffffff169061077f336108d8565b60096003600891828204019190066004029054906101000a900463ffffffff16995099509950995099509950995099509950995090919293949596979899565b600154600160a060020a031633146107d657600080fd5b610fa063ffffffff8216116107ea57600080fd5b6009805463ffffffff8316700100000000000000000000000000000000810273ffffffff00000000000000000000000000000000199092169190911790915560408051918252517f1fe39814d8e1776d8ca188fe42e7f088f609c0824e2bafae1a9070d885d34df49181900360200190a150565b6004543490610873908263ffffffff6116b316565b60045550565b600154600160a060020a0316331461089057600080fd5b6000811161089d57600080fd5b600d8190556040805182815290517f6c1cf48245a0a91e114596b04dfcbe443303e5f72fab6771794891112fe4395f9181900360200190a150565b600160a060020a03166000908152600a602052604090205490565b600154600160a060020a0316331461090a57600080fd5b60008163ffffffff1611801561092857506103e88163ffffffff1611155b151561093357600080fd5b6009805463ffffffff83166c0100000000000000000000000081026fffffffff000000000000000000000000199092169190911790915560408051918252517f479f8bfd4c4612ab0e38c5f1cf5c9b16c72ffe8e4816429219397d052212f8059181900360200190a150565b60006109a9611f9b565b3332146109b557600080fd5b600b5433925060ff16156109c857600080fd5b604081018790526020810186905260a0810185905260c0810184905260ff831660e08201526109f782826116c3565b50505050505050565b60045490565b600b543390349060ff16158015610a215750600c54600a0281145b1515610a2c57600080fd5b60008054600154604080517fc671b934000000000000000000000000000000000000000000000000000000008152600160a060020a03928316600482015260248101949094525160029094049391169163c671b93491849160448082019260209290919082900301818588803b158015610aa557600080fd5b505af1158015610ab9573d6000803e3d6000fd5b50505050506040513d6020811015610ad057600080fd5b505060008054604080517f16ff1c760000000000000000000000000000000000000000000000000000000081529051600160a060020a03909216926316ff1c76928592600480820193929182900301818588803b158015610b3057600080fd5b505af1158015610b44573d6000803e3d6000fd5b505050600160a060020a0384166000818152600a6020908152604091829020889055815192835282018790524282820152517fcf9e039b89f14b39579de014cbb7196367b18bd199b38836c8f1177d72de3f109350908190036060019150a1505050565b600154600160a060020a03163314610bbf57600080fd5b600054600160a060020a0382811691161415610bda57600080fd5b600160a060020a0381161515610bef57600080fd5b60005460408051600160a060020a03928316815291831660208301524282820152517f87ab77b91a9a6a5a04a748607e0ee38d580963c4e21fe45d2e79ffeef26bc55e9181900360600190a16000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600254600160a060020a031681565b600154600160a060020a03163314610c9057600080fd5b60008163ffffffff16118015610cad575060648163ffffffff1611155b1515610cb857600080fd5b6009805463ffffffff8316780100000000000000000000000000000000000000000000000081027fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff9092169190911790915560408051918252517f87f4dc682b88c3b5aac3631874489a05fa128e4c79b4235e29d41b52276219c89181900360200190a150565b303190565b3360008181526003602052604081208054600190910154919291811115610d8857600160a060020a0382166000908152600360205260409020600101549003610d8c565b5060005b92915050565b60055460045460095460065463ffffffff90911690600160a060020a031660008080808080808033610dc38a6108d8565b98506009600160088104919091015460079091166004026101000a900463ffffffff16975060096002600881049091015463ffffffff6004600790931683026101000a90910416975060099060088104919091015460079091166004026101000a900463ffffffff16925060096006600881049190910154600160a060020a0383166000908152600360208190526040822090810154995060079093166004026101000a90910463ffffffff169350600590910190600891828204019190066004029054906101000a900463ffffffff1694506003600082600160a060020a0316600160a060020a0316815260200190815260200160002060040154935050909192939495969798999a9b565b600154600160a060020a031681565b60085490565b600154600160a060020a03163314610efc57600080fd5b600154600160a060020a0382811691161415610f1757600080fd5b600160a060020a0381161515610f2c57600080fd5b60015460408051600160a060020a03928316815291831660208301524282820152517fc13a1166d81cd3b0b352a367aebab95f3a6f6bc695fdab8e9a9d335239c3861b9181900360600190a16001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600154600160a060020a03163314610fbe57600080fd5b600254600160a060020a0382811691161415610fd957600080fd5b600160a060020a0381161515610fee57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b4390565b60075490565b33600061103382611c22565b90506000811161104257600080fd5b600160a060020a03821660009081526003602052604090206001015461106e908263ffffffff6116b316565b600160a060020a038316600081815260036020908152604091829020600101939093558051918252918101839052428183015290517f8ea11b70a47e5aaa4024df0985799a384faaaf34e6da0aadbadcae0fbfca45ac9181900360600190a1604051600160a060020a0383169082156108fc029083906000818181858888f19350505050158015611103573d6000803e3d6000fd5b505050565b600154600160a060020a0316331461111f57600080fd5b600b805460ff19169055604080516000815242602082015281517fb04e455982e111d37c1d6ff02f82a465d673bb8931f9595e16b3aaf421001e56929181900390910190a1565b600154600160a060020a0316331461117d57600080fd5b600b805460ff1916600117908190556040805160ff929092161515825242602083015280517fb04e455982e111d37c1d6ff02f82a465d673bb8931f9595e16b3aaf421001e569281900390910190a1565b600154600160a060020a031633146111e557600080fd5b6009805463ffffffff83166801000000000000000081026bffffffff0000000000000000199092169190911790915560408051918252517fb9e274777f8bea0ddc401e51a66afc1dbb4d77f11dc5fc87a3d274f2198e6f399181900360200190a150565b6000611253611f9b565b33321461125f57600080fd5b600b5460ff161580156112905750600c548914806112815750600c54600a0289145b806112905750600c5460640289145b151561129b57600080fd5b604081018890526020810187905260a0810185905260c0810184905260ff831660e0820152600c54339250898115156112d057fe5b0463ffffffff16608082015260008054604080517f52dde1c3000000000000000000000000000000000000000000000000000000008152600481018d9052600160a060020a038681166024830152915191909216926352dde1c392604480820193602093909283900390910190829087803b15801561134e57600080fd5b505af1158015611362573d6000803e3d6000fd5b505050506040513d602081101561137857600080fd5b505198506000891161138957600080fd5b61068d828a8884611443565b600154600160a060020a031633146113ac57600080fd5b6009805463ffffffff831674010000000000000000000000000000000000000000810277ffffffff0000000000000000000000000000000000000000199092169190911790915560408051918252517fb79b5f1808adbd9d2c84104501e3c8b0ff30d96f342374ccd7efd0f3a7dd7c669181900360200190a150565b600554349061143d908263ffffffff6116b316565b60055550565b600160a060020a038416600090815260036020908152604082209083015190919081901515806114765750600383015415155b156114855761148587856116c3565b608084015160058401805463ffffffff191663ffffffff928316179055600d54600954909174010000000000000000000000000000000000000000909104168115156114cd57fe5b4391900481016004850155604080516020808201939093526c01000000000000000000000000600160a060020a038b168102828401523002605482015281516048818303018152606890910191829052805190928291908401908083835b6020831061154a5780518252601f19909201916020918201910161152b565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091206003870155506064915061158a9050876005611c6c565b81151561159357fe5b048087036002850155600054604080517fc671b934000000000000000000000000000000000000000000000000000000008152600160a060020a038b811660048301528981166024830152915193955091169163c671b934918591604480830192602092919082900301818588803b15801561160e57600080fd5b505af1158015611622573d6000803e3d6000fd5b50505050506040513d602081101561163957600080fd5b505160038401546004850154600586015460408051600160a060020a038d1681526020810194909452838101929092526060830184905263ffffffff166080830152519192507f893a94d3ac2a0e3a12d4af96531945eab88ae2fc729b9a1f7681b7147641f6f4919081900360a00190a150505050505050565b81810182811015610d8c57600080fd5b6000806000806000806000600360008a600160a060020a0316600160a060020a0316815260200190815260200160002096508760200151600014158015611711575086600301548860200151145b8015611721575060008760020154115b151561172c57600080fd5b6000885260048701544310158061186a57506002546040808a01516020808c0151835180830193909352828401528251808303840181526060909201928390528151600160a060020a0390941693600193918291908401908083835b602083106117a75780518252601f199092019160209182019101611788565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208a60e001518b60a001518c60c00151604051600081526020016040526040518085600019166000191681526020018460ff1660ff1681526020018360001916600019168152602001826000191660001916815260200194505050505060206040516020810390808403906000865af1158015611854573d6000803e3d6000fd5b50505060206040510351600160a060020a031614155b1561187757600060408901525b60008860400151121561188c57600060408901525b6005870154604089015163ffffffff918216810260608b015213156118b65763ffffffff60408901525b63ffffffff886060015111156118d15763ffffffff60608901525b600954606089015163ffffffff90911610156119325760608801516009805463ffffffff191663ffffffff9092169190911790556006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038b16179055600188525b6009805464010000000080820463ffffffff9081166001018116820267ffffffff000000001990931692909217928390556c01000000000000000000000000830482169204161061198557611985611c98565b6009546040890151600097506801000000000000000090910463ffffffff1695506003860294509250848310611a7b5786600201549550838311156119c8578392505b6005878101549054948690039493869003936064916119f3919063ffffffff908116870290611c6c16565b8115156119fc57fe5b6009549190049250611a3590839063ffffffff7801000000000000000000000000000000000000000000000000909104811690611c6c16565b6064900491506001840182811515611a4957fe5b6005549190049250611a61908363ffffffff611d6816565b600555611a74868363ffffffff6116b316565b9550611aa8565b6000851115611aa85760028701548590611a9b908563ffffffff611c6c16565b811515611aa457fe5b0495505b8654611aba908763ffffffff6116b316565b87556002870154861015611ad757611ad786886002015403611d7d565b506040870151600954909250700100000000000000000000000000000000900463ffffffff1660028504831115611ba057611b1b836063870263ffffffff6116b316565b9250606483049250600663ffffffff82160463ffffffff16831015611b4d57600663ffffffff82160463ffffffff1692505b600363ffffffff82160463ffffffff16831115611b7757600363ffffffff82160463ffffffff1692505b600980546bffffffff000000000000000019166801000000000000000063ffffffff8616021790555b6000600388018190556002880155606088810151895160058a015460408051938452600160a060020a038e1660208501529115158383015292820189905263ffffffff909216608082015290517fc2ca3d3b410c75e764bf6de6d426acf69da72d6923a4ca930c7f200a56549e0d9181900360a00190a1505050505050505050565b600160a060020a03811660009081526003602052604081208054600190910154811115610d8857600160a060020a0383166000908152600360205260409020600101549003610d8c565b6000821515611c7d57506000610d8c565b50818102818382811515611c8d57fe5b0414610d8c57600080fd5b600654600454600160a060020a03909116908115611d6457600160a060020a038216600090815260036020526040902054611cd9908263ffffffff6116b316565b600160a060020a0383166000818152600360209081526040808320949094556006805473ffffffffffffffffffffffffffffffffffffffff191690556004919091556009805467ffffffffffffffff191690558251918252810183905281517fe7ba6ef52006f8f5b4771bacba37125f9c774523f2669363cbba4d365b114bff929181900390910190a15b5050565b600082821115611d7757600080fd5b50900390565b600080611db06064611d9685601063ffffffff611c6c16565b811515611d9f57fe5b60045491900463ffffffff6116b316565b600455611de36064611dc985604063ffffffff611c6c16565b811515611dd257fe5b60055491900463ffffffff6116b316565b6005556064611df384600f611c6c565b811515611dfc57fe5b0491506064611e0c846005611c6c565b811515611e1557fe5b6008549190049150611e2e90829063ffffffff6116b316565b905066b1a2bc2ec500008110611ee957600060088190558054600154604080517fc671b934000000000000000000000000000000000000000000000000000000008152600160a060020a03928316600482015260248101949094525191169163c671b93491849160448082019260209290919082900301818588803b158015611eb657600080fd5b505af1158015611eca573d6000803e3d6000fd5b50505050506040513d6020811015611ee157600080fd5b50611eef9050565b60088190555b600754611f0390839063ffffffff6116b316565b915066b1a2bc2ec500008210611f9457600060078190558054604080517f16ff1c760000000000000000000000000000000000000000000000000000000081529051600160a060020a03909216926316ff1c76928692600481810193929182900301818588803b158015611f7657600080fd5b505af1158015611f8a573d6000803e3d6000fd5b5050505050611103565b5060075550565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810191909152905600a165627a7a723058205b976fdb9e34d6ac7183aebd8b1271ca70da518f2a6abbe05e97fcb4bb3f05b70029"
}