{
  "address": "0xf7a6868ad958b724bc486e10bd3ddc8d63aa16c7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EMPRG",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-11\n*/\n\npragma solidity ^0.4.19;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\ncontract Owned {\n\taddress private Owner;\n\t\n\tfunction Owned() public{\n\t    \n\t    Owner = msg.sender;\n\t}\n    \n\tfunction IsOwner(address addr) view public returns(bool)\n\t{\n\t    return Owner == addr;\n\t}\n\t\n\tfunction TransferOwner(address newOwner) public onlyOwner\n\t{\n\t    Owner = newOwner;\n\t}\n\t\n\tfunction Terminate() public onlyOwner\n\t{\n\t    selfdestruct(Owner);\n\t}\n\t\n\tmodifier onlyOwner(){\n        require(msg.sender == Owner);\n        _;\n    }\n}\n\ncontract EMPRG is Owned {\n    using SafeMath for uint256;\n    string public constant name = \"empowr green\";\n    string public constant symbol = \"EMPRG\";\n    uint256 public constant decimals = 18;  // 18 is the most common number of decimal places\n    bool private tradeable;\n    uint256 private currentSupply;\n    mapping(address => uint256) private balances;\n    mapping(address => mapping(address=> uint256)) private allowed;\n    mapping(address => bool) private lockedAccounts;  \n\t\n\t/*\n\t\tIncoming Ether\n\t*/\t\n    event ReceivedEth(address indexed _from, uint256 _value);\n\t//this is the fallback\n\tfunction () payable public {\n\t\temit ReceivedEth(msg.sender, msg.value);\t\t\n\t}\n\t\n\tevent TransferredEth(address indexed _to, uint256 _value);\n\tfunction FoundationTransfer(address _to, uint256 amtEth, uint256 amtToken) public onlyOwner\n\t{\n\t\trequire(address(this).balance >= amtEth && balances[this] >= amtToken );\n\t\t\n\t\tif(amtEth >0)\n\t\t{\n\t\t\t_to.transfer(amtEth);\n\t\t\temit TransferredEth(_to, amtEth);\n\t\t}\n\t\t\n\t\tif(amtToken > 0)\n\t\t{\n\t\t\trequire(balances[_to] + amtToken > balances[_to]);\n\t\t\tbalances[this] -= amtToken;\n\t\t\tbalances[_to] += amtToken;\n\t\t\temit Transfer(this, _to, amtToken);\n\t\t}\n\t\t\n\t\t\n\t}\t\n\t/*\n\t\tEnd Incoming Ether\n\t*/\n\t\n\t\n\t\n    function EMPRG( ) public\n    {\n        uint256 initialTotalSupplyRaw = 20000000000000000;\n        balances[this] = initialTotalSupplyRaw;\n        \n        currentSupply =  initialTotalSupplyRaw;\n\t    emit Transfer(address(0), this, currentSupply);\n        \n    }\n\n\tfunction MintToken(uint256 amt) public onlyOwner {\n\t    require(balances[this] + amt >= balances[this]);\n\t    currentSupply += amt;\n\t    balances[this] += amt;\n\t    emit Transfer(address(0), this, amt);\n\t}\n\t\n\tfunction DestroyToken(uint256 amt) public onlyOwner {\n\t    require ( balances[this] >= amt);\n\t    currentSupply -= amt;\n\t    balances[this] -= amt;\n\t    emit Transfer(this,address(0), amt);\n\t}\n\t\n\t\n\t\n    event SoldToken(address _buyer, uint256 _value, string note);\n    function BuyToken(address _buyer, uint256 _value, string note) public onlyOwner\n    {\n\t\trequire(balances[this] >= _value && balances[_buyer] + _value > balances[_buyer]);\n\t\t\n        emit SoldToken( _buyer,  _value,  note);\n        balances[this] -= _value;\n        balances[_buyer] += _value;\n        emit Transfer(this, _buyer, _value);\n    }\n    \n    function LockAccount(address toLock) public onlyOwner\n    {\n        lockedAccounts[toLock] = true;\n    }\n    function UnlockAccount(address toUnlock) public onlyOwner\n    {\n        delete lockedAccounts[toUnlock];\n    }\n    \n    function SetTradeable(bool t) public onlyOwner\n    {\n        tradeable = t;\n    }\n    function IsTradeable() public view returns(bool)\n    {\n        return tradeable;\n    }\n    \n    \n    function totalSupply() constant public returns (uint256)\n    {\n        return currentSupply;\n    }\n    function balanceOf(address _owner) constant public returns (uint256 balance)\n    {\n        return balances[_owner];\n    }\n    function transfer(address _to, uint256 _value) public notLocked returns (bool success) {\n        require(tradeable);\n         if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n             emit Transfer( msg.sender, _to,  _value);\n             balances[msg.sender] -= _value;\n             balances[_to] += _value;\n             return true;\n         } else {\n             return false;\n         }\n     }\n    function transferFrom(address _from, address _to, uint _value)public notLocked returns (bool success) {\n        require(!lockedAccounts[_from] && !lockedAccounts[_to]);\n\t\trequire(tradeable);\n        if (balances[_from] >= _value\n            && allowed[_from][msg.sender] >= _value\n            && balances[_to] + _value > balances[_to]) {\n                \n            emit Transfer( _from, _to,  _value);\n                \n            balances[_from] -= _value;\n            allowed[_from][msg.sender] -= _value;\n            balances[_to] += _value;\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n     /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n   \n   modifier notLocked(){\n       require (!lockedAccounts[msg.sender]);\n       _;\n   }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"MintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"amtEth\",\"type\":\"uint256\"},{\"name\":\"amtToken\",\"type\":\"uint256\"}],\"name\":\"FoundationTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toLock\",\"type\":\"address\"}],\"name\":\"LockAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"BuyToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"DestroyToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"TransferOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IsTradeable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"t\",\"type\":\"bool\"}],\"name\":\"SetTradeable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Terminate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toUnlock\",\"type\":\"address\"}],\"name\":\"UnlockAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"IsOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ReceivedEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferredEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"SoldToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "6060604052341561000f57600080fd5b60008054600160a060020a03191633600160a060020a0390811691909117825530168082526002602052604080832066470de4df82000090819055600181905592907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a350611001806100946000396000f3006060604052600436106101275763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305297781811461016657806306fdde031461017e5780630730a32214610208578063095ea7b31461022d57806318160ddd1461026357806323b872dd146102885780632e42b012146102b0578063313ce567146102cf578063321de1d4146102e25780635daf8a7114610347578063661884631461035d57806370a082311461037f578063858ac4d81461039e5780638aa99826146103bd5780638e3bd6fa146103d05780639445eb3a146103e857806395d89b41146103fb578063a9059cbb1461040e578063b9c97a4414610430578063d73dd6231461044f578063dd0860a814610471578063dd62ed3e14610490575b33600160a060020a03167f52a6cdf67c40ce333b3d846e4e143db87f71dd7935612a4cafcf6ba76047ca1f3460405190815260200160405180910390a2005b341561017157600080fd5b61017c6004356104b5565b005b341561018957600080fd5b610191610542565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101cd5780820151838201526020016101b5565b50505050905090810190601f1680156101fa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561021357600080fd5b61017c600160a060020a0360043516602435604435610579565b341561023857600080fd5b61024f600160a060020a03600435166024356106d2565b604051901515815260200160405180910390f35b341561026e57600080fd5b61027661073f565b60405190815260200160405180910390f35b341561029357600080fd5b61024f600160a060020a0360043581169060243516604435610745565b34156102bb57600080fd5b61017c600160a060020a03600435166108eb565b34156102da57600080fd5b61027661092a565b34156102ed57600080fd5b61017c60048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061092f95505050505050565b341561035257600080fd5b61017c600435610aa1565b341561036857600080fd5b61024f600160a060020a0360043516602435610b32565b341561038a57600080fd5b610276600160a060020a0360043516610c2c565b34156103a957600080fd5b61017c600160a060020a0360043516610c47565b34156103c857600080fd5b61024f610c91565b34156103db57600080fd5b61017c6004351515610cb2565b34156103f357600080fd5b61017c610d0d565b341561040657600080fd5b610191610d36565b341561041957600080fd5b61024f600160a060020a0360043516602435610d6d565b341561043b57600080fd5b61017c600160a060020a0360043516610e75565b341561045a57600080fd5b61024f600160a060020a0360043516602435610eb1565b341561047c57600080fd5b61024f600160a060020a0360043516610f55565b341561049b57600080fd5b610276600160a060020a0360043581169060243516610f69565b60005433600160a060020a039081169116146104d057600080fd5b600160a060020a03301660009081526002602052604090205481810110156104f757600080fd5b6001805482019055600160a060020a033016600081815260026020526040808220805485019055600080516020610fb68339815191529084905190815260200160405180910390a350565b60408051908101604052600c81527f656d706f777220677265656e0000000000000000000000000000000000000000602082015281565b60005433600160a060020a0390811691161461059457600080fd5b8130600160a060020a031631101580156105c75750600160a060020a033016600090815260026020526040902054819010155b15156105d257600080fd5b600082111561064a57600160a060020a03831682156108fc0283604051600060405180830381858888f19350505050151561060c57600080fd5b82600160a060020a03167f83007cefb28dc4cfb49f429f899c69d37f8011db578f48da2f64929a79bf67b38360405190815260200160405180910390a25b60008111156106cd57600160a060020a0383166000908152600260205260409020548181011161067957600080fd5b600160a060020a03308116600081815260026020526040808220805486900390559286168082529083902080548501905591600080516020610fb68339815191529084905190815260200160405180910390a35b505050565b600160a060020a03338116600081815260036020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60015490565b600160a060020a03331660009081526004602052604081205460ff161561076b57600080fd5b600160a060020a03841660009081526004602052604090205460ff161580156107ad5750600160a060020a03831660009081526004602052604090205460ff16155b15156107b857600080fd5b60005474010000000000000000000000000000000000000000900460ff1615156107e157600080fd5b600160a060020a0384166000908152600260205260409020548290108015906108315750600160a060020a0380851660009081526003602090815260408083203390941683529290522054829010155b80156108565750600160a060020a038316600090815260026020526040902054828101115b156108e05782600160a060020a031684600160a060020a0316600080516020610fb68339815191528460405190815260200160405180910390a350600160a060020a038084166000908152600260208181526040808420805487900390556003825280842033861685528252808420805487900390559386168352522080548201905560016108e4565b5060005b9392505050565b60005433600160a060020a0390811691161461090657600080fd5b600160a060020a03166000908152600460205260409020805460ff19166001179055565b601281565b60005433600160a060020a0390811691161461094a57600080fd5b600160a060020a03301660009081526002602052604090205482901080159061098c5750600160a060020a038316600090815260026020526040902054828101115b151561099757600080fd5b7f0307f82a1d7930932f894f6f841bd41285da9d1374694c831ad1efa591139316838383604051600160a060020a03841681526020810183905260606040820181815290820183818151815260200191508051906020019080838360005b83811015610a0d5780820151838201526020016109f5565b50505050905090810190601f168015610a3a5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1600160a060020a03308116600081815260026020526040808220805487900390559286168082529083902080548601905591600080516020610fb68339815191529085905190815260200160405180910390a3505050565b60005433600160a060020a03908116911614610abc57600080fd5b600160a060020a03301660009081526002602052604090205481901015610ae257600080fd5b600180548290039055600160a060020a03301660008181526002602052604080822080548590039055909190600080516020610fb68339815191529084905190815260200160405180910390a350565b600160a060020a03338116600090815260036020908152604080832093861683529290529081205480831115610b8f57600160a060020a033381166000908152600360209081526040808320938816835292905290812055610bc6565b610b9f818463ffffffff610f9416565b600160a060020a033381166000908152600360209081526040808320938916835292905220555b600160a060020a0333811660008181526003602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526002602052604090205490565b60005433600160a060020a03908116911614610c6257600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60005474010000000000000000000000000000000000000000900460ff1690565b60005433600160a060020a03908116911614610ccd57600080fd5b60008054911515740100000000000000000000000000000000000000000274ff000000000000000000000000000000000000000019909216919091179055565b60005433600160a060020a03908116911614610d2857600080fd5b600054600160a060020a0316ff5b60408051908101604052600581527f454d505247000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a03331660009081526004602052604081205460ff1615610d9357600080fd5b60005474010000000000000000000000000000000000000000900460ff161515610dbc57600080fd5b600160a060020a033316600090815260026020526040902054829010801590610dfe5750600160a060020a038316600090815260026020526040902054828101115b15610e6d5782600160a060020a031633600160a060020a0316600080516020610fb68339815191528460405190815260200160405180910390a350600160a060020a03338116600090815260026020526040808220805485900390559184168152208054820190556001610739565b506000610739565b60005433600160a060020a03908116911614610e9057600080fd5b600160a060020a03166000908152600460205260409020805460ff19169055565b600160a060020a033381166000908152600360209081526040808320938616835292905290812054610ee9908363ffffffff610fa616565b600160a060020a0333811660008181526003602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600054600160a060020a0391821691161490565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b600082821115610fa057fe5b50900390565b6000828201838110156108e457fe00ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058202b1d8a5a4bcecf1c35564751965b2f7d411c60b5b81775b0cbb5425e5bbe092d0029"
}