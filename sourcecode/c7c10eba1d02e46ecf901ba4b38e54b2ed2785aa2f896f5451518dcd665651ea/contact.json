{
  "address": "0xaaaaaaaba2ea3daab0a6c05f1b962c78c9836d99",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AzbitToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-16\n*/\n\npragma solidity ^0.4.25;\n\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\ncontract AzbitToken is Ownable {\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;\n    // 18 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply;\n\n    uint256 public constant MIN_RELEASE_DATE = 1561939200; // Monday, 01-Jul-19 00:00:00 UTC in RFC 2822\n    uint256 public constant MAX_RELEASE_DATE = 1567296000; // Sunday, 01-Sep-19 00:00:00 UTC in RFC 2822\n    uint256 public releaseDate = MIN_RELEASE_DATE;\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n    mapping (address => bool) public whiteList;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // This generates a public event on the blockchain that will notify clients\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n\n    // Emit special events in methods that change the state of the contract\n    event WhiteListAdded(address indexed _address);\n    event WhiteListRemoved(address indexed _address);\n    event ReleaseChanged(uint256 _date);\n\n    /**\n     * Constructor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    constructor(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n        emit Transfer(address(0), msg.sender, totalSupply); // Minting event notification\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal canTransfer {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != address(0x0));\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` on behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n            return true;\n        }\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    /**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n        totalSupply -= _value;                              // Update totalSupply\n        emit Burn(_from, _value);\n        return true;\n    }\n\n    function addToWhiteList(address _address) public onlyOwner {\n        whiteList[_address] = true;\n        emit WhiteListAdded(_address);\n    }\n\n    function removeFromWhiteList(address _address) public onlyOwner {\n        delete whiteList[_address];\n        emit WhiteListRemoved(_address);\n    }\n\n    function changeRelease(uint256 _date) public onlyOwner {\n        require(_date > now && releaseDate > now && _date > MIN_RELEASE_DATE && _date < MAX_RELEASE_DATE);\n        releaseDate = _date;\n        emit ReleaseChanged(_date);\n    }\n\n    modifier canTransfer() {\n        require(now >= releaseDate || whiteList[msg.sender]);\n        _;\n    }\n}",
  "bytecode": "60806040526003805460ff19166012179055635d194d0060055534801561002557600080fd5b50604051610e11380380610e1183398101604090815281516020808401518385015160008054600160a060020a03191633908117825560035460ff16600a0a8602600481905590825260068552959020949094558401805192949093019161009391600191908501906100ea565b5080516100a79060029060208401906100ea565b50600454604080519182525133916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3505050610185565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061012b57805160ff1916838001178555610158565b82800160010185558215610158579182015b8281111561015857825182559160200191906001019061013d565b50610164929150610168565b5090565b61018291905b80821115610164576000815560010161016e565b90565b610c7d806101946000396000f30060806040526004361061011c5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301bf6648811461012157806306fdde0314610144578063095ea7b3146101ce57806318160ddd146102065780631a6e24451461022d57806323b872dd14610245578063313ce5671461026f578063323b2c261461029a578063372c12b1146102af57806342966c68146102d057806347ee0394146102e857806370a082311461030957806379cc67901461032a5780637ee7f42a1461034e5780638da5cb5b1461036357806395d89b4114610394578063a9059cbb146103a9578063b9e3e2db146103cd578063cae9ca51146103e2578063dd62ed3e1461044b578063f2fde38b14610472575b600080fd5b34801561012d57600080fd5b50610142600160a060020a0360043516610493565b005b34801561015057600080fd5b506101596104f3565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561019357818101518382015260200161017b565b50505050905090810190601f1680156101c05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101da57600080fd5b506101f2600160a060020a0360043516602435610580565b604080519115158252519081900360200190f35b34801561021257600080fd5b5061021b6105e6565b60408051918252519081900360200190f35b34801561023957600080fd5b506101426004356105ec565b34801561025157600080fd5b506101f2600160a060020a0360043581169060243516604435610677565b34801561027b57600080fd5b506102846106e6565b6040805160ff9092168252519081900360200190f35b3480156102a657600080fd5b5061021b6106ef565b3480156102bb57600080fd5b506101f2600160a060020a03600435166106f7565b3480156102dc57600080fd5b506101f260043561070c565b3480156102f457600080fd5b50610142600160a060020a0360043516610784565b34801561031557600080fd5b5061021b600160a060020a03600435166107e7565b34801561033657600080fd5b506101f2600160a060020a03600435166024356107f9565b34801561035a57600080fd5b5061021b6108ca565b34801561036f57600080fd5b506103786108d2565b60408051600160a060020a039092168252519081900360200190f35b3480156103a057600080fd5b506101596108e1565b3480156103b557600080fd5b506101f2600160a060020a0360043516602435610939565b3480156103d957600080fd5b5061021b61094f565b3480156103ee57600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526101f2948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506109559650505050505050565b34801561045757600080fd5b5061021b600160a060020a0360043581169060243516610a6e565b34801561047e57600080fd5b50610142600160a060020a0360043516610a8b565b600054600160a060020a031633146104aa57600080fd5b600160a060020a038116600081815260086020526040808220805460ff19169055517fdb0d54f6e7ff4a52bdc49b4c8d9ff245f409fee25c2c0a0a72ece14e2ddf4cfc9190a250565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105785780601f1061054d57610100808354040283529160200191610578565b820191906000526020600020905b81548152906001019060200180831161055b57829003601f168201915b505050505081565b336000818152600760209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60045481565b600054600160a060020a0316331461060357600080fd5b4281118015610613575042600554115b80156106225750635d194d0081115b80156106315750635d6b0a0081105b151561063c57600080fd5b60058190556040805182815290517f931ef4126e72d84f31e1a99c0649183bacbded5f1853f029ec412f99cfad8feb9181900360200190a150565b600160a060020a03831660009081526007602090815260408083203384529091528120548211156106a757600080fd5b600160a060020a03841660009081526007602090815260408083203384529091529020805483900390556106dc848484610b1f565b5060019392505050565b60035460ff1681565b635d6b0a0081565b60086020526000908152604090205460ff1681565b3360009081526006602052604081205482111561072857600080fd5b3360008181526006602090815260409182902080548690039055600480548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a2506001919050565b600054600160a060020a0316331461079b57600080fd5b600160a060020a038116600081815260086020526040808220805460ff19166001179055517fbf309892cce19064e6d63ba3339f893b199c8cb5041fc6731702cb18e805d2919190a250565b60066020526000908152604090205481565b600160a060020a03821660009081526006602052604081205482111561081e57600080fd5b600160a060020a038316600090815260076020908152604080832033845290915290205482111561084e57600080fd5b600160a060020a0383166000818152600660209081526040808320805487900390556007825280832033845282529182902080548690039055600480548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a250600192915050565b635d194d0081565b600054600160a060020a031681565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156105785780601f1061054d57610100808354040283529160200191610578565b6000610946338484610b1f565b50600192915050565b60055481565b6000836109628185610580565b15610a66576040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018790523060448401819052608060648501908152875160848601528751600160a060020a03871695638f4ffcb195948b94938b939192909160a490910190602085019080838360005b838110156109fa5781810151838201526020016109e2565b50505050905090810190601f168015610a275780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015610a4957600080fd5b505af1158015610a5d573d6000803e3d6000fd5b50505050600191505b509392505050565b600760209081526000928352604080842090915290825290205481565b600054600160a060020a03163314610aa257600080fd5b600160a060020a0381161515610ab757600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600060055442101580610b4157503360009081526008602052604090205460ff165b1515610b4c57600080fd5b600160a060020a0383161515610b6157600080fd5b600160a060020a038416600090815260066020526040902054821115610b8657600080fd5b600160a060020a03831660009081526006602052604090205482810111610bac57600080fd5b50600160a060020a038083166000818152600660209081526040808320805495891680855282852080548981039091559486905281548801909155815187815291519390950194927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3600160a060020a03808416600090815260066020526040808220549287168252902054018114610c4b57fe5b505050505600a165627a7a7230582056de927fe6eb5faabad2983255498ecdc864b6203199812a5a0192cfedef187a00290000000000000000000000000000000000000000000000000000005d75c80000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000005417a6269740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002415a000000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000005d75c80000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000005417a6269740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002415a000000000000000000000000000000000000000000000000000000000000"
}