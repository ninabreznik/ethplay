{
  "address": "0x6468890abb29d2dcf9c81e5d3377a61ff5de63e0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EOCHToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-19\n*/\n\npragma solidity ^0.4.16;\n\ncontract EOCHToken {\n\n    string public name = \"Everything On Chain for Health\";      //  token name\n    string public symbol = \"EOCH\";           //  token symbol\n    uint256 public decimals = 6;            //  token digit\n    uint256 constant valueFounder = 16000000000000000;\n\n    mapping (address => uint256) public balanceMap;\n    mapping (address => uint256) public frozenOf; // ##\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    uint256 public totalSupply = 0;\n    bool public stopped = false;\n    bool public isMultiply = true;\n\n    address owner = 0x0;\n\n    modifier isOwner {\n        assert(owner == msg.sender);\n        _;\n    }\n\n    modifier isRunning {\n        assert (!stopped);\n        _;\n    }\n\n    modifier isMulti {\n        assert (isMultiply);\n        _;\n    }\n\n    modifier validAddress {\n        assert(0x0 != msg.sender);\n        _;\n    }\n\n    function EOCHToken() {\n        owner = msg.sender;\n        totalSupply = valueFounder;\n        balanceMap[owner] = valueFounder;\n        Transfer(0x0, owner, valueFounder);\n    }\n\n    function transfer(address _to, uint256 _value) isRunning validAddress returns (bool success) {\n        require(balanceMap[msg.sender] >= _value);\n        require(balanceMap[_to] + _value >= balanceMap[_to]);\n        balanceMap[msg.sender] -= _value;\n        balanceMap[_to] += _value;\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferMulti(\n        address _to_1,\n        address _to_2,\n        address _to_3,\n        address _to_4,\n        address _to_5,\n        address _to_6,\n        address _to_7,\n        address _to_8,\n        address _to_9,\n        address _to_10,\n        uint256 _value) isRunning validAddress isMulti returns (bool success) {\n\n        require(10 * _value > 0 && balanceMap[msg.sender] >= 10 * _value);\n        require(balanceMap[_to_1] + _value >= balanceMap[_to_1]) ;\n        require(balanceMap[_to_2] + _value >= balanceMap[_to_2]) ;\n        require(balanceMap[_to_3] + _value >= balanceMap[_to_3]) ;\n        require(balanceMap[_to_4] + _value >= balanceMap[_to_4]) ;\n        require(balanceMap[_to_5] + _value >= balanceMap[_to_5]) ;\n        require(balanceMap[_to_6] + _value >= balanceMap[_to_6]) ;\n        require(balanceMap[_to_7] + _value >= balanceMap[_to_7]) ;\n        require(balanceMap[_to_8] + _value >= balanceMap[_to_8]) ;\n        require(balanceMap[_to_9] + _value >= balanceMap[_to_9]) ;\n        require(balanceMap[_to_10] + _value >= balanceMap[_to_10]) ;\n\n        balanceMap[msg.sender] -= 10 * _value;\n        balanceMap[_to_1] += _value;\n        balanceMap[_to_2] += _value;\n        balanceMap[_to_3] += _value;\n        balanceMap[_to_4] += _value;\n        balanceMap[_to_5] += _value;\n        balanceMap[_to_6] += _value;\n        balanceMap[_to_7] += _value;\n        balanceMap[_to_8] += _value;\n        balanceMap[_to_9] += _value;\n        balanceMap[_to_10] += _value;\n\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) isRunning validAddress returns (bool success) {\n        require(balanceMap[_from] >= _value);\n        require(balanceMap[_to] + _value >= balanceMap[_to]);\n        require(allowance[_from][msg.sender] >= _value);\n        balanceMap[_to] += _value;\n        balanceMap[_from] -= _value;\n        allowance[_from][msg.sender] -= _value;\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) isRunning validAddress returns (bool success) {\n        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n        allowance[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function stop() isOwner {\n        stopped = true;\n    }\n\n    function start() isOwner {\n        stopped = false;\n    }\n\n    function stopMulti() isOwner {\n        isMultiply = false;\n    }\n\n    function startMulti() isOwner {\n        isMultiply = true;\n    }\n\n    function setName(string _name) isOwner {\n        name = _name;\n    }\n\n    function burn(uint256 _value) {\n        require(balanceMap[msg.sender] >= _value);\n        balanceMap[msg.sender] -= _value;\n        balanceMap[0x0] += _value;\n        Transfer(msg.sender, 0x0, _value);\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    // ##\n\n    function balanceOf(address _owner) public constant returns (uint256 balance){\n        return balanceMap[_owner] + frozenOf[_owner];\n    }\n\n    function frozen(address targetAddress , uint256 value) public isOwner returns (bool success){\n\n        require(balanceMap[targetAddress] >= value); // check has enough\n\n        uint256 count = balanceMap[targetAddress] + frozenOf[targetAddress];\n\n        balanceMap[targetAddress] -= value;\n        frozenOf[targetAddress] += value;\n\n        require(count == balanceMap[targetAddress] + frozenOf[targetAddress]);\n\n        return true;\n    }\n\n    function unfrozen(address targetAddress, uint256 value) public isOwner returns (bool success){\n\n        require(frozenOf[targetAddress] >= value); // check has enough\n\n        uint256 count = balanceMap[targetAddress] + frozenOf[targetAddress];\n\n        balanceMap[targetAddress] += value;\n        frozenOf[targetAddress] -= value;\n\n        require(count == balanceMap[targetAddress] + frozenOf[targetAddress]);\n\n        return true;\n    }\n\n    function frozenOf(address targetAddress) public constant returns (uint256 frozen){\n        return frozenOf[targetAddress];\n    }\n\n    function frozenOf() public constant returns (uint256 frozen){\n        return frozenOf[msg.sender];\n    }\n}",
  "bytecode": ""
}