{
  "address": "0xee2972a6177c28f3efacb1862a1a8507c3f10faa",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DRPUTokenConverter",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-01\n*/\n\npragma solidity ^0.4.15;\n\n/**\n * @title Ownership interface\n *\n * Perminent ownership\n *\n * #created 01/10/2017\n * #author Frank Bonnet\n */\ncontract IOwnership {\n\n    /**\n     * Returns true if `_account` is the current owner\n     *\n     * @param _account The address to test against\n     */\n    function isOwner(address _account) constant returns (bool);\n\n\n    /**\n     * Gets the current owner\n     *\n     * @return address The current owner\n     */\n    function getOwner() constant returns (address);\n}\n\n\n/**\n * @title Ownership\n *\n * Perminent ownership\n *\n * #created 01/10/2017\n * #author Frank Bonnet\n */\ncontract Ownership is IOwnership {\n\n    // Owner\n    address internal owner;\n\n\n    /**\n     * The publisher is the inital owner\n     */\n    function Ownership() {\n        owner = msg.sender;\n    }\n\n\n    /**\n     * Access is restricted to the current owner\n     */\n    modifier only_owner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n\n    /**\n     * Returns true if `_account` is the current owner\n     *\n     * @param _account The address to test against\n     */\n    function isOwner(address _account) public constant returns (bool) {\n        return _account == owner;\n    }\n\n\n    /**\n     * Gets the current owner\n     *\n     * @return address The current owner\n     */\n    function getOwner() public constant returns (address) {\n        return owner;\n    }\n}\n\n\n/**\n * @title Transferable ownership interface\n *\n * Enhances ownership by allowing the current owner to \n * transfer ownership to a new owner\n *\n * #created 01/10/2017\n * #author Frank Bonnet\n */\ncontract ITransferableOwnership {\n    \n\n    /**\n     * Transfer ownership to `_newOwner`\n     *\n     * @param _newOwner The address of the account that will become the new owner \n     */\n    function transferOwnership(address _newOwner);\n}\n\n\n/**\n * @title Transferable ownership\n *\n * Enhances ownership by allowing the current owner to \n * transfer ownership to a new owner\n *\n * #created 01/10/2017\n * #author Frank Bonnet\n */\ncontract TransferableOwnership is ITransferableOwnership, Ownership {\n\n\n    /**\n     * Transfer ownership to `_newOwner`\n     *\n     * @param _newOwner The address of the account that will become the new owner \n     */\n    function transferOwnership(address _newOwner) public only_owner {\n        owner = _newOwner;\n    }\n}\n\n\n/**\n * @title Pausable interface\n *\n * Simple interface to pause and resume \n *\n * #created 11/10/2017\n * #author Frank Bonnet\n */\ncontract IPausable {\n\n    /**\n     * Returns whether the implementing contract is \n     * currently paused or not\n     *\n     * @return Whether the paused state is active\n     */\n    function isPaused() constant returns (bool);\n\n\n    /**\n     * Change the state to paused\n     */\n    function pause();\n\n\n    /**\n     * Change the state to resume, undo the effects \n     * of calling pause\n     */\n    function resume();\n}\n\n\n/**\n * @title IAuthenticationManager \n *\n * Allows the authentication process to be enabled and disabled\n *\n * #created 15/10/2017\n * #author Frank Bonnet\n */\ncontract IAuthenticationManager {\n    \n\n    /**\n     * Returns true if authentication is enabled and false \n     * otherwise\n     *\n     * @return Whether the converter is currently authenticating or not\n     */\n    function isAuthenticating() constant returns (bool);\n\n\n    /**\n     * Enable authentication\n     */\n    function enableAuthentication();\n\n\n    /**\n     * Disable authentication\n     */\n    function disableAuthentication();\n}\n\n\n/**\n * @title IAuthenticator \n *\n * Authenticator interface\n *\n * #created 15/10/2017\n * #author Frank Bonnet\n */\ncontract IAuthenticator {\n    \n\n    /**\n     * Authenticate \n     *\n     * Returns whether `_account` is authenticated or not\n     *\n     * @param _account The account to authenticate\n     * @return whether `_account` is successfully authenticated\n     */\n    function authenticate(address _account) constant returns (bool);\n}\n\n\n/**\n * @title IWhitelist \n *\n * Whitelist authentication interface\n *\n * #created 04/10/2017\n * #author Frank Bonnet\n */\ncontract IWhitelist is IAuthenticator {\n    \n\n    /**\n     * Returns whether an entry exists for `_account`\n     *\n     * @param _account The account to check\n     * @return whether `_account` is has an entry in the whitelist\n     */\n    function hasEntry(address _account) constant returns (bool);\n\n\n    /**\n     * Add `_account` to the whitelist\n     *\n     * If an account is currently disabled, the account is reenabled, otherwise \n     * a new entry is created\n     *\n     * @param _account The account to add\n     */\n    function add(address _account);\n\n\n    /**\n     * Remove `_account` from the whitelist\n     *\n     * Will not actually remove the entry but disable it by updating\n     * the accepted record\n     *\n     * @param _account The account to remove\n     */\n    function remove(address _account);\n}\n\n\n/**\n * @title Token retrieve interface\n *\n * Allows tokens to be retrieved from a contract\n *\n * #created 29/09/2017\n * #author Frank Bonnet\n */\ncontract ITokenRetriever {\n\n    /**\n     * Extracts tokens from the contract\n     *\n     * @param _tokenContract The address of ERC20 compatible token\n     */\n    function retrieveTokens(address _tokenContract);\n}\n\n\n/**\n * @title Token retrieve\n *\n * Allows tokens to be retrieved from a contract\n *\n * #created 18/10/2017\n * #author Frank Bonnet\n */\ncontract TokenRetriever is ITokenRetriever {\n\n    /**\n     * Extracts tokens from the contract\n     *\n     * @param _tokenContract The address of ERC20 compatible token\n     */\n    function retrieveTokens(address _tokenContract) public {\n        IToken tokenInstance = IToken(_tokenContract);\n        uint tokenBalance = tokenInstance.balanceOf(this);\n        if (tokenBalance > 0) {\n            tokenInstance.transfer(msg.sender, tokenBalance);\n        }\n    }\n}\n\n\n/**\n * @title Token observer interface\n *\n * Allows a token smart-contract to notify observers \n * when tokens are received\n *\n * #created 09/10/2017\n * #author Frank Bonnet\n */\ncontract ITokenObserver {\n\n    /**\n     * Called by the observed token smart-contract in order \n     * to notify the token observer when tokens are received\n     *\n     * @param _from The address that the tokens where send from\n     * @param _value The amount of tokens that was received\n     */\n    function notifyTokensReceived(address _from, uint _value);\n}\n\n\n/**\n * @title Abstract token observer\n *\n * Allows observers to be notified by an observed token smart-contract\n * when tokens are received\n *\n * #created 09/10/2017\n * #author Frank Bonnet\n */\ncontract TokenObserver is ITokenObserver {\n\n    /**\n     * Called by the observed token smart-contract in order \n     * to notify the token observer when tokens are received\n     *\n     * @param _from The address that the tokens where send from\n     * @param _value The amount of tokens that was received\n     */\n    function notifyTokensReceived(address _from, uint _value) public {\n        onTokensReceived(msg.sender, _from, _value);\n    }\n\n\n    /**\n     * Event handler\n     * \n     * Called by `_token` when a token amount is received\n     *\n     * @param _token The token contract that received the transaction\n     * @param _from The account or contract that send the transaction\n     * @param _value The value of tokens that where received\n     */\n    function onTokensReceived(address _token, address _from, uint _value) internal;\n}\n\n\n/**\n * @title ERC20 compatible token interface\n *\n * - Implements ERC 20 Token standard\n * - Implements short address attack fix\n *\n * #created 29/09/2017\n * #author Frank Bonnet\n */\ncontract IToken { \n\n    /** \n     * Get the total supply of tokens\n     * \n     * @return The total supply\n     */\n    function totalSupply() constant returns (uint);\n\n\n    /** \n     * Get balance of `_owner` \n     * \n     * @param _owner The address from which the balance will be retrieved\n     * @return The balance\n     */\n    function balanceOf(address _owner) constant returns (uint);\n\n\n    /** \n     * Send `_value` token to `_to` from `msg.sender`\n     * \n     * @param _to The address of the recipient\n     * @param _value The amount of token to be transferred\n     * @return Whether the transfer was successful or not\n     */\n    function transfer(address _to, uint _value) returns (bool);\n\n\n    /** \n     * Send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n     * \n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value The amount of token to be transferred\n     * @return Whether the transfer was successful or not\n     */\n    function transferFrom(address _from, address _to, uint _value) returns (bool);\n\n\n    /** \n     * `msg.sender` approves `_spender` to spend `_value` tokens\n     * \n     * @param _spender The address of the account able to transfer the tokens\n     * @param _value The amount of tokens to be approved for transfer\n     * @return Whether the approval was successful or not\n     */\n    function approve(address _spender, uint _value) returns (bool);\n\n\n    /** \n     * Get the amount of remaining tokens that `_spender` is allowed to spend from `_owner`\n     * \n     * @param _owner The address of the account owning tokens\n     * @param _spender The address of the account able to transfer the tokens\n     * @return Amount of remaining tokens allowed to spent\n     */\n    function allowance(address _owner, address _spender) constant returns (uint);\n}\n\n\n/**\n * @title ManagedToken interface\n *\n * Adds the following functionality to the basic ERC20 token\n * - Locking\n * - Issuing\n * - Burning \n *\n * #created 29/09/2017\n * #author Frank Bonnet\n */\ncontract IManagedToken is IToken { \n\n    /** \n     * Returns true if the token is locked\n     * \n     * @return Whether the token is locked\n     */\n    function isLocked() constant returns (bool);\n\n\n    /**\n     * Locks the token so that the transfering of value is disabled \n     *\n     * @return Whether the unlocking was successful or not\n     */\n    function lock() returns (bool);\n\n\n    /**\n     * Unlocks the token so that the transfering of value is enabled \n     *\n     * @return Whether the unlocking was successful or not\n     */\n    function unlock() returns (bool);\n\n\n    /**\n     * Issues `_value` new tokens to `_to`\n     *\n     * @param _to The address to which the tokens will be issued\n     * @param _value The amount of new tokens to issue\n     * @return Whether the tokens where sucessfully issued or not\n     */\n    function issue(address _to, uint _value) returns (bool);\n\n\n    /**\n     * Burns `_value` tokens of `_from`\n     *\n     * @param _from The address that owns the tokens to be burned\n     * @param _value The amount of tokens to be burned\n     * @return Whether the tokens where sucessfully burned or not \n     */\n    function burn(address _from, uint _value) returns (bool);\n}\n\n\n/**\n * @title Token Changer interface\n *\n * Basic token changer public interface \n *\n * #created 06/10/2017\n * #author Frank Bonnet\n */\ncontract ITokenChanger {\n\n    /**\n     * Returns true if '_token' is on of the tokens that are \n     * managed by this token changer\n     * \n     * @param _token The address being tested\n     * @return Whether the '_token' is part of this token changer\n     */\n    function isToken(address _token) constant returns (bool);\n\n\n    /**\n     * Returns the address of the left token\n     *\n     * @return Left token address\n     */\n    function getLeftToken() constant returns (address);\n\n\n    /**\n     * Returns the address of the right token\n     *\n     * @return Right token address\n     */\n    function getRightToken() constant returns (address);\n\n\n    /**\n     * Returns the fee that is paid in tokens when using \n     * the token changer\n     *\n     * @return The percentage of tokens that is charged\n     */\n    function getFee() constant returns (uint);\n\n    \n    /**\n     * Returns the rate that is used to change between tokens\n     *\n     * @return The rate used when changing tokens\n     */\n    function getRate() constant returns (uint);\n\n\n    /**\n     * Returns the precision of the rate and fee params\n     *\n     * @return The amount of decimals used\n     */\n    function getPrecision() constant returns (uint);\n\n\n    /**\n     * Calculates and returns the fee based on `_value` of tokens\n     *\n     * @return The actual fee\n     */\n    function calculateFee(uint _value) constant returns (uint);\n}\n\n\n/**\n * @title Token Changer\n *\n * Provides a generic way to convert between two tokens using a fixed \n * ratio and an optional fee.\n *\n * #created 06/10/2017\n * #author Frank Bonnet\n */\ncontract TokenChanger is ITokenChanger, IPausable {\n\n    IManagedToken private tokenLeft; // tokenLeft = tokenRight * rate / precision\n    IManagedToken private tokenRight; // tokenRight = tokenLeft / rate * precision\n\n    uint private rate; // Ratio between tokens\n    uint private fee; // Percentage lost in transfer\n    uint private precision; // Precision \n    bool private paused; // Paused state\n    bool private burn; // Whether the changer should burn tokens\n\n\n    /**\n     * Only if '_token' is the left or right token \n     * that of the token changer\n     */\n    modifier is_token(address _token) {\n        require(_token == address(tokenLeft) || _token == address(tokenRight));\n        _;\n    }\n\n\n    /**\n     * Construct token changer\n     *\n     * @param _tokenLeft Ref to the 'left' token smart-contract\n     * @param _tokenRight Ref to the 'right' token smart-contract\n     * @param _rate The rate used when changing tokens\n     * @param _fee The percentage of tokens that is charged\n     * @param _decimals The amount of decimals used for _rate and _fee\n     * @param _paused Whether the token changer starts in the paused state or not\n     * @param _burn Whether the changer should burn tokens or not\n     */\n    function TokenChanger(address _tokenLeft, address _tokenRight, uint _rate, uint _fee, uint _decimals, bool _paused, bool _burn) {\n        tokenLeft = IManagedToken(_tokenLeft);\n        tokenRight = IManagedToken(_tokenRight);\n        rate = _rate;\n        fee = _fee;\n        precision = _decimals > 0 ? 10**_decimals : 1;\n        paused = _paused;\n        burn = _burn;\n    }\n\n    \n    /**\n     * Returns true if '_token' is on of the tokens that are \n     * managed by this token changer\n     * \n     * @param _token The address being tested\n     * @return Whether the '_token' is part of this token changer\n     */\n    function isToken(address _token) public constant returns (bool) {\n        return _token == address(tokenLeft) || _token == address(tokenRight);\n    }\n\n\n    /**\n     * Returns the address of the left token\n     *\n     * @return Left token address\n     */\n    function getLeftToken() public constant returns (address) {\n        return tokenLeft;\n    }\n\n\n    /**\n     * Returns the address of the right token\n     *\n     * @return Right token address\n     */\n    function getRightToken() public constant returns (address) {\n        return tokenRight;\n    }\n\n\n    /**\n     * Returns the fee that is paid in tokens when using \n     * the token changer\n     *\n     * @return The percentage of tokens that is charged\n     */\n    function getFee() public constant returns (uint) {\n        return fee;\n    }\n\n\n    /**\n     * Returns the rate that is used to change between tokens\n     *\n     * @return The rate used when changing tokens\n     */\n    function getRate() public constant returns (uint) {\n        return rate;\n    }\n\n\n    /**\n     * Returns the precision of the rate and fee params\n     *\n     * @return The amount of decimals used\n     */\n    function getPrecision() public constant returns (uint) {\n        return precision;\n    }\n\n\n    /**\n     * Returns whether the token changer is currently \n     * paused or not. While being in the paused state \n     * the contract should revert the transaction instead \n     * of converting tokens\n     *\n     * @return Whether the token changer is in the paused state\n     */\n    function isPaused() public constant returns (bool) {\n        return paused;\n    }\n\n\n    /**\n     * Pause the token changer making the contract \n     * revert the transaction instead of converting \n     */\n    function pause() public {\n        paused = true;\n    }\n\n\n    /**\n     * Resume the token changer making the contract \n     * convert tokens instead of reverting the transaction \n     */\n    function resume() public {\n        paused = false;\n    }\n\n\n    /**\n     * Calculates and returns the fee based on `_value` of tokens\n     *\n     * @param _value The amount of tokens that is being converted\n     * @return The actual fee\n     */\n    function calculateFee(uint _value) public constant returns (uint) {\n        return fee == 0 ? 0 : _value * fee / precision;\n    }\n\n\n    /**\n     * Converts tokens by burning the tokens received at the token smart-contact \n     * located at `_from` and by issuing tokens at the opposite token smart-contract\n     *\n     * @param _from The token smart-contract that received the tokens\n     * @param _sender The account that send the tokens (token owner)\n     * @param _value The amount of tokens that where received\n     */\n    function convert(address _from, address _sender, uint _value) internal {\n        require(!paused);\n        require(_value > 0);\n\n        uint amountToIssue;\n        if (_from == address(tokenLeft)) {\n            amountToIssue = _value * rate / precision;\n            tokenRight.issue(_sender, amountToIssue - calculateFee(amountToIssue));\n            if (burn) {\n                tokenLeft.burn(this, _value);\n            }   \n        } \n        \n        else if (_from == address(tokenRight)) {\n            amountToIssue = _value * precision / rate;\n            tokenLeft.issue(_sender, amountToIssue - calculateFee(amountToIssue));\n            if (burn) {\n                tokenRight.burn(this, _value);\n            } \n        }\n    }\n}\n\n\n/**\n * @title DRPU Converter\n *\n * Will allow DRP token holders to convert their DRP Balance into DRPU at the ratio of 1:2, locking all recieved DRP into the converter.\n *\n * DRPU as indicated by its ‘U’ designation is Dcorp’s utility token for those who are under strict \n * compliance within their country of residence, and does not entitle holders to profit sharing.\n *\n * https://www.dcorp.it/drpu\n *\n * #created 11/10/2017\n * #author Frank Bonnet\n */\ncontract DRPUTokenConverter is TokenChanger, IAuthenticationManager, TransferableOwnership, TokenRetriever {\n\n    // Authentication\n    IWhitelist private whitelist;\n    bool private requireAuthentication;\n\n\n    /**\n     * Construct drp - drpu token changer\n     *\n     * Rate is multiplied by 10**6 taking into account the difference in \n     * decimals between (old) DRP (2) and DRPU (8)\n     *\n     * @param _whitelist The address of the whitelist authenticator\n     * @param _drp Ref to the (old) DRP token smart-contract\n     * @param _drpu Ref to the DRPU token smart-contract https://www.dcorp.it/drpu\n     */\n    function DRPUTokenConverter(address _whitelist, address _drp, address _drpu) \n        TokenChanger(_drp, _drpu, 2 * 10**6, 0, 0, false, false) {\n        whitelist = IWhitelist(_whitelist);\n        requireAuthentication = true;\n    }\n\n\n    /**\n     * Returns true if authentication is enabled and false \n     * otherwise\n     *\n     * @return Whether the converter is currently authenticating or not\n     */\n    function isAuthenticating() public constant returns (bool) {\n        return requireAuthentication;\n    }\n\n\n    /**\n     * Enable authentication\n     */\n    function enableAuthentication() public only_owner {\n        requireAuthentication = true;\n    }\n\n\n    /**\n     * Disable authentication\n     */\n    function disableAuthentication() public only_owner {\n        requireAuthentication = false;\n    }\n\n\n    /**\n     * Pause the token changer making the contract \n     * revert the transaction instead of converting \n     */\n    function pause() public only_owner {\n        super.pause();\n    }\n\n\n    /**\n     * Resume the token changer making the contract \n     * convert tokens instead of reverting the transaction \n     */\n    function resume() public only_owner {\n        super.resume();\n    }\n\n\n    /**\n     * Request that the (old) drp smart-contract transfers `_value` worth \n     * of (old) drp to the drpu token converter to be converted\n     * \n     * Note! This function requires the drpu token converter smart-contract \n     * to be approved to spend at least `_value` worth of (old) drp by the \n     * owner of the tokens by calling the approve() function in the (old) \n     * dpr token smart-contract\n     *\n     * @param _value The amount of tokens to transfer and convert\n     */\n    function requestConversion(uint _value) public {\n        require(_value > 0);\n        address sender = msg.sender;\n\n        // Authenticate\n        require(!requireAuthentication || whitelist.authenticate(sender));\n\n        IToken drpToken = IToken(getLeftToken());\n        drpToken.transferFrom(sender, this, _value); // Transfer old drp from sender to converter \n        convert(drpToken, sender, _value); // Convert to drps\n    }\n\n\n    /**\n     * Failsafe mechanism\n     * \n     * Allows the owner to retrieve tokens from the contract that \n     * might have been send there by accident\n     *\n     * @param _tokenContract The address of ERC20 compatible token\n     */\n    function retrieveTokens(address _tokenContract) public only_owner {\n        require(getLeftToken() != _tokenContract); // Ensure that the (old) drp token stays locked\n        super.retrieveTokens(_tokenContract);\n    }\n\n\n    /**\n     * Prevents the accidental sending of ether\n     */\n    function () payable {\n        revert();\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLeftToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRightToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isAuthenticating\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableAuthentication\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrecision\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"calculateFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableAuthentication\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"requestConversion\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_whitelist\",\"type\":\"address\"},{\"name\":\"_drp\",\"type\":\"address\"},{\"name\":\"_drpu\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]",
  "bytecode": "6060604052341561000f57600080fd5b604051606080610c6d8339810160405280805191906020018051919060200180519150505b5b8181621e84806000806000805b60008054600160a060020a03808a16600160a060020a031992831617835560018054918a169190921617905560028690556003859055831161008557600161008a565b82600a0a5b6004556005805460ff19168315151761ff001916610100831515021790555b5050600580546201000060b060020a0319166201000033600160a060020a03160217905550505050505b6006805474010000000000000000000000000000000000000000600160a060020a0319909116600160a060020a0386161760a060020a60ff0219161790555b5050505b610b48806101256000396000f300606060405236156100e05763ffffffff60e060020a600035041663046f7da281146100e857806319f37361146100fd5780632f54bf6e146101305780635205b80f146101635780635237d23514610192578063679aefce146101c15780638456cb59146101e6578063893d20e8146101fb578063903f2c481461022a57806390be0bd9146102515780639670c0bc1461026657806399a5d7471461028b578063a92d6a48146102b3578063ac4ddd9f146102c8578063b187bd26146102e9578063c6afd98a14610310578063ced72f8714610328578063f2fde38b1461034d575b5b600080fd5b005b34156100f357600080fd5b6100e661036e565b005b341561010857600080fd5b61011c600160a060020a036004351661039b565b604051901515815260200160405180910390f35b341561013b57600080fd5b61011c600160a060020a03600435166103cd565b604051901515815260200160405180910390f35b341561016e57600080fd5b6101766103ea565b604051600160a060020a03909116815260200160405180910390f35b341561019d57600080fd5b6101766103fa565b604051600160a060020a03909116815260200160405180910390f35b34156101cc57600080fd5b6101d461040a565b60405190815260200160405180910390f35b34156101f157600080fd5b6100e6610411565b005b341561020657600080fd5b61017661043e565b604051600160a060020a03909116815260200160405180910390f35b341561023557600080fd5b61011c610454565b604051901515815260200160405180910390f35b341561025c57600080fd5b6100e6610476565b005b341561027157600080fd5b6101d46104d0565b60405190815260200160405180910390f35b341561029657600080fd5b6101d46004356104d7565b60405190815260200160405180910390f35b34156102be57600080fd5b6100e6610505565b005b34156102d357600080fd5b6100e6600160a060020a0360043516610548565b005b34156102f457600080fd5b61011c61059d565b604051901515815260200160405180910390f35b341561031b57600080fd5b6100e66004356105a7565b005b341561033357600080fd5b6101d46106ff565b60405190815260200160405180910390f35b341561035857600080fd5b6100e6600160a060020a0360043516610706565b005b60055433600160a060020a0390811662010000909204161461038f57600080fd5b61039761075b565b5b5b565b60008054600160a060020a03838116911614806103c55750600154600160a060020a038381169116145b90505b919050565b600554600160a060020a038281166201000090920416145b919050565b600054600160a060020a03165b90565b600154600160a060020a03165b90565b6002545b90565b60055433600160a060020a0390811662010000909204161461043257600080fd5b610397610768565b5b5b565b600554620100009004600160a060020a03165b90565b60065474010000000000000000000000000000000000000000900460ff165b90565b60055433600160a060020a0390811662010000909204161461049757600080fd5b6006805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790555b5b565b6004545b90565b60006003546000146104fa5760045460035483028115156104f457fe5b046103c5565b60005b90505b919050565b60055433600160a060020a0390811662010000909204161461052657600080fd5b6006805474ff0000000000000000000000000000000000000000191690555b5b565b60055433600160a060020a0390811662010000909204161461056957600080fd5b80600160a060020a031661057b6103ea565b600160a060020a0316141561058f57600080fd5b61059881610778565b5b5b50565b60055460ff165b90565b6000808083116105b657600080fd5b60065433925074010000000000000000000000000000000000000000900460ff1615806106535750600654600160a060020a03166308e0d29d8360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561063757600080fd5b6102c65a03f1151561064857600080fd5b505050604051805190505b151561065e57600080fd5b6106666103ea565b905080600160a060020a03166323b872dd83308660006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b15156106d257600080fd5b6102c65a03f115156106e357600080fd5b50505060405180519050506106f9818385610875565b5b505050565b6003545b90565b60055433600160a060020a0390811662010000909204161461072757600080fd5b6005805475ffffffffffffffffffffffffffffffffffffffff0000191662010000600160a060020a038416021790555b5b50565b6005805460ff191690555b565b6005805460ff191660011790555b565b806000600160a060020a0382166370a0823130836040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156107d157600080fd5b6102c65a03f115156107e257600080fd5b505050604051805191505060008111156106f95781600160a060020a031663a9059cbb338360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561085357600080fd5b6102c65a03f1151561086457600080fd5b505050604051805150505b5b505050565b60055460009060ff161561088857600080fd5b6000821161089557600080fd5b600054600160a060020a03858116911614156109d85760045460025483028115156108bc57fe5b6001549190049150600160a060020a031663867904b4846108dc846104d7565b840360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561092a57600080fd5b6102c65a03f1151561093b57600080fd5b50505060405180515050600554610100900460ff16156109d35760008054600160a060020a031690639dc29fac90309085906040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156109b757600080fd5b6102c65a03f115156109c857600080fd5b505050604051805150505b610b13565b600154600160a060020a0385811691161415610b135760025460045483028115156109ff57fe5b6000549190049150600160a060020a031663867904b484610a1f846104d7565b840360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610a6d57600080fd5b6102c65a03f11515610a7e57600080fd5b50505060405180515050600554610100900460ff1615610b1357600154600160a060020a0316639dc29fac308460006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610af757600080fd5b6102c65a03f11515610b0857600080fd5b505050604051805150505b5b5b5b505050505600a165627a7a72305820fbc3f6d904c0f39582ff2a653015a709440025df842c84d572adb13f23dfe73e0029000000000000000000000000dd5cec9019ec8449a5d01d0d8175e6519530d276000000000000000000000000621d78f2ef2fd937bfca696cabaf9a779f59b3ed000000000000000000000000e30e02f049957e2a5907589e06ba646fb2c321ba",
  "constructorArguments": "000000000000000000000000dd5cec9019ec8449a5d01d0d8175e6519530d276000000000000000000000000621d78f2ef2fd937bfca696cabaf9a779f59b3ed000000000000000000000000e30e02f049957e2a5907589e06ba646fb2c321ba"
}