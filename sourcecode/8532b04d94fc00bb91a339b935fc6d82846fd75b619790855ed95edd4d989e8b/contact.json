{
  "address": "0x2c4e94c48db4a9c8977aba3cbb9e5c4d94f9ecfd",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Token",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-16\n*/\n\npragma solidity ^0.4.21;\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n        if(a == 0) { return 0; }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\ncontract Ownable {\n    address public owner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    modifier onlyOwner() { require(msg.sender == owner); _; }\n    function Ownable() public { \n\t    owner = msg.sender; \n\t\t}\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(this));\n        owner = newOwner;\n        emit OwnershipTransferred(owner, newOwner);\n    }\n}\ncontract ERC20 {\n    uint256 public totalSupply;\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    function balanceOf(address who) public view returns(uint256);\n    function transfer(address to, uint256 value) public returns(bool);\n    function transferFrom(address from, address to, uint256 value) public returns(bool);\n    function allowance(address owner, address spender) public view returns(uint256);\n    function approve(address spender, uint256 value) public returns(bool);\n}\ncontract StandardToken is ERC20{\n    using SafeMath for uint256;\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    mapping(address => uint256) public balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    function StandardToken(string _name, string _symbol, uint8 _decimals) public {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n    }\n    function balanceOf(address _owner) public view returns(uint256 balance) {\n        return balances[_owner];\n    }\n\nfunction transfer(address _to, uint256 _value) public returns(bool) {\n        require(_to != address(this));\n        require(_value <= balances[msg.sender]);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\t\temit Transfer(msg.sender, _to, _value);\n\t\treturn true;\n}\nfunction multiTransfer(address[] _to, uint256[] _value) public returns(bool) {\n        require(_to.length == _value.length);\n        for(uint i = 0; i < _to.length; i++) {\n            transfer(_to[i], _value[i]);\n        }\n        return true;\n}\nfunction transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n        require(_to != address(this));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n    function allowance(address _owner, address _spender) public view returns(uint256) {\n        return allowed[_owner][_spender];\n    }\n    function approve(address _spender, uint256 _value) public returns(bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    function increaseApproval(address _spender, uint _addedValue) public returns(bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns(bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if(_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n}\ncontract MintableToken is StandardToken, Ownable{\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n    bool public mintingFinished = false;\n    modifier canMint(){require(!mintingFinished); _;}\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns(bool) {\n        totalSupply = totalSupply.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n\t\temit Mint(_to, _amount);\n        emit Transfer(address(this), _to, _amount);\n        return true;\n    }\n    function finishMinting() onlyOwner canMint public returns(bool) {\n        mintingFinished = true;\n        emit MintFinished();\n        return true;\n    }\n}\ncontract CappedToken is MintableToken {\n    uint256 public cap;\n    function CappedToken(uint256 _cap) public {\n        require(_cap > 0);\n        cap = _cap;\n    }\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns(bool) {\n        require(totalSupply.add(_amount) <= cap);\n        return super.mint(_to, _amount);\n    }\n}\ncontract BurnableToken is StandardToken {\n    event Burn(address indexed burner, uint256 value);\n\n    function burn(uint256 _value) public {\n        require(_value <= balances[msg.sender]);\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        emit Burn(burner, _value);\n    }\n}\ncontract RewardToken is StandardToken, Ownable {\n    struct Payment {\n        uint time;\n        uint amount;\n    }\n    Payment[] public repayments;\n    mapping(address => Payment[]) public rewards;\n\n    event Reward(address indexed to, uint256 amount);\n\n    function repayment() onlyOwner payable public {\n        require(msg.value >= 0.000085 * 1 ether);\n        repayments.push(Payment({time : now, amount : msg.value}));\n    }\n    function _reward(address _to) private returns(bool) {\n        if(rewards[_to].length < repayments.length) {\n            uint sum = 0;\n            for(uint i = rewards[_to].length; i < repayments.length; i++) {\n                uint amount = balances[_to] > 0 ? (repayments[i].amount * balances[_to] / totalSupply) : 0;\n                rewards[_to].push(Payment({time : now, amount : amount}));\n                sum += amount;\n            }\n            if(sum > 0) {\n                _to.transfer(sum);\n                emit Reward(_to, sum);\n            }\n            return true;\n        }\n        return false;\n    }\n    function reward() public returns(bool) {\n        return _reward(msg.sender);\n    }\n    function transfer(address _to, uint256 _value) public returns(bool) {\n        _reward(msg.sender);\n        _reward(_to);\n        return super.transfer(_to, _value);\n    }\n    function multiTransfer(address[] _to, uint256[] _value) public returns(bool) {\n        _reward(msg.sender);\n        for(uint i = 0; i < _to.length; i++) {\n            _reward(_to[i]);\n        }\n        return super.multiTransfer(_to, _value);\n    }\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n        _reward(_from);\n        _reward(_to);\n        return super.transferFrom(_from, _to, _value);\n    }\n}\ncontract Token is CappedToken, BurnableToken, RewardToken {\n    function Token() CappedToken(1000000000 * 1 ether) StandardToken(\"JULLAR\", \"JUL\", 18) public {\n        \n    }\n}\ncontract JullarCrowdsale is Ownable{\n    using SafeMath for uint;\n    Token public token;\n    address private BeneficiaryA = 0x87CC179C88B593Ff7DBDD1B6e9A9F7437Df1880E; \n    address private BenefB = 0x8ae64056f409BbC00ed03eDC6B350eaB7d842A15; \n    address private JullarBountyAdr = 0xA2Df1e14632Ed83B1e7A35848dAe7c8623e1D030; // BountyAddress\t\n    address private JullarPartnersAdr = 0x3d6D84c26a11Ed1123dB68791c80aa7F7ce767C8; // Partner\n    uint public collectedWei;\n\taddress[] public JullarTeamAdr;\n\tstring public ActiveSalesPhase = \"Super PreICO\"; // Stage Name\n\t\n    string public TokenPriceETH = \"0.000085\";  \n\tuint public tokensSold = 0; \n\tuint private tokensForSale = 20000000 * 1 ether; \n\tuint public priceTokenWei = 85000000000000;  // 0.000085 ETH = 1 JUL superPreICO\n\t\n\tuint private Sb = 1 ether;\n    uint private oSbA = Sb * 10000000; // BeneficiaryA 10m JUL\n    uint private oSbB = Sb * 10000000; // BeneficiaryB 10m JUL\n\t\n    uint private JULLARbounty = Sb * 20000000; // BountyAmout 20m JUL\n    uint private JULLARpartner = Sb * 10000000; // Partners 10m JUL\n    bool public crowdsaleClosed = false;\n    event Rurchase(address indexed holder, uint256 tokenAmount, uint256 etherAmount);\n    event CrowdsaleClose();\n\tbool public paused = false;\n\tuint public pausestatus = 1;\n    event Pause();\n    event StartNextIcoStage();\n\t\n\tfunction pause() onlyOwner public  {\n        pausestatus = 0;\n\t\tpaused = true;\n        emit Pause();\n    }\t\n\tfunction JullarCrowdsale() public {\n     token = new Token();\t\n\t emit Rurchase(BeneficiaryA, oSbA, 0);\n\t emit Rurchase(BenefB, oSbB, 0);\n\t emit Rurchase(JullarBountyAdr, JULLARbounty, 0);\n\t emit Rurchase(JullarPartnersAdr, JULLARpartner, 0);\n\t token.mint(BeneficiaryA, oSbA);\n\t token.mint(BenefB, oSbB);\n\t token.mint(JullarBountyAdr, JULLARbounty);\n\t token.mint(JullarPartnersAdr, JULLARpartner);\n\t}\n    function() payable public {\n\t\tif(crowdsaleClosed == false){\n\t\t       purchase();\n\t\t}\n    }\t\n\tfunction purchase() payable public {\t\t\n\t\trequire(pausestatus != 0);\n        require(!crowdsaleClosed);\n        require(tokensSold < tokensForSale);\n        require(msg.value >= 0.000085 * 1 ether); \n        uint sum = msg.value;         \n        uint amount = sum.mul(1 ether).div(priceTokenWei);\n        uint retSum = 0;\n        if(tokensSold.add(amount) > tokensForSale) {\n            uint retAmount = tokensSold.add(amount).sub(tokensForSale);\n            retSum = retAmount.mul(priceTokenWei).div(1 ether);\n            amount = amount.sub(retAmount);\n            sum = sum.sub(retSum);\n        }\n\t\ttokensSold = tokensSold.add(amount);\n        collectedWei = collectedWei.add(sum);\n        token.mint(msg.sender, amount);\n        if(retSum > 0) {\n            msg.sender.transfer(retSum);\n        }\n        emit Rurchase(msg.sender, amount, sum);\t\t\n    }\n\n\tfunction StartNextStage() onlyOwner public {\n        require(!crowdsaleClosed);\n        require(pausestatus != 1);\n\t\tpausestatus = 1;\n        paused = false;\n        emit StartNextIcoStage();\n    }\n\n\tfunction NewStage(uint _newpricewei, string _stagename, string _TokenPriceETH, uint _TokenForSale) onlyOwner public  {\n\t\trequire(!crowdsaleClosed);\n        require(pausestatus != 1);\n\t\ttokensForSale = _TokenForSale * 1 ether;\n\t\tActiveSalesPhase = _stagename;\n\t\tpriceTokenWei = _newpricewei; \n\t\tTokenPriceETH = _TokenPriceETH;\n\t}\n\t\n\tfunction AddAdrJullarTeam(address _address) onlyOwner public{\n\t\trequire(JullarTeamAdr.length < 6);\n\t\tJullarTeamAdr.push(_address);\n\t}\n\t\n\tfunction WithdrawalofFunds(uint _arraynum) onlyOwner public {\n\t\trequire(_arraynum / 1 ether < 6);\n        JullarTeamAdr[_arraynum].transfer(address(this).balance);\n\t}\n\n    function closeCrowdsale() onlyOwner public {\n        require(!crowdsaleClosed);\n\t\tuint bensum = address(this).balance / 2;\t\t\n        BeneficiaryA.transfer(bensum);\n        BenefB.transfer(bensum);\n        token.mint(BeneficiaryA, token.cap().sub(token.totalSupply()));\n        token.transferOwnership(BeneficiaryA);\n        crowdsaleClosed = true;\n        emit CrowdsaleClose();\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"repayment\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"repayments\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewards\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": ""
}