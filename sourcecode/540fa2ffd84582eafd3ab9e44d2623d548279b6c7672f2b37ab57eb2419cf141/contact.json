{
  "address": "0x39fbd1140cd1fc298f00c3ea64b3591de94c67e7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "BitEye 1",
  "contractName": "BitEyeExchange",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-30\n*/\n\npragma solidity ^0.4.19;\n\n//ERC20 Token\ncontract Token {\n  function totalSupply() public constant returns (uint);\n  function balanceOf(address _owner) public constant returns (uint);\n  function transfer(address _to, uint _value) public returns (bool);\n  function transferFrom(address _from, address _to, uint _value) public returns (bool);\n  function approve(address _spender, uint _value) public returns (bool);\n  function allowance(address _owner, address _spender) public constant returns (uint);\n  event Transfer(address indexed _from, address indexed _to, uint _value);\n  event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\ncontract SafeMath {\n  function safeMul(uint a, uint b) internal pure returns (uint256) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function safeDiv(uint a, uint b) internal pure returns (uint256) {\n    uint c = a / b;\n    return c;\n  }\n\n  function safeSub(uint a, uint b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint a, uint b) internal pure returns (uint256) {\n    uint c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract BitEyeExchange is SafeMath {\n  mapping (address => mapping (address => uint256)) public balances;\n  mapping (bytes32 => bool) public traded;\n  mapping (bytes32 => uint256) public orderFills;\n  address public owner;\n  address public feeAccount;\n  mapping (address => bool) public signers;\n  mapping (address => uint256) public cancels;\n  mapping (bytes32 => bool) public withdraws;\n\n  uint256 public teamLocked = 300000000 * 1e18;\n  uint256 public teamClaimed = 0;\n  uint256 public totalForMining = 600000000 * 1e18;\n  uint256 public unmined = 600000000 * 1e18;\n  mapping (address => uint256) public mined;\n  address public BEY;\n  mapping (address => uint256) public miningRate;\n  bool public paused = false;\n  \n  event Deposit(address token, address user, uint256 amount, uint256 balance);\n  event Withdraw(address token, address user, uint256 amount, uint256 balance);\n  event Trade(address baseToken, address quoteToken, uint256 volume, uint256 fund, uint256 nonce, address buyer, address seller);\n  event Cancel(address user, bytes32 orderHash, uint256 nonce);\n  event Claim(address user, uint256 amount);\n\n  function BitEyeExchange(address _feeAccount) public {\n    owner = msg.sender;\n    feeAccount = _feeAccount;\n  }\n\n  function transferOwnership(address _newOwner) public onlyOwner {\n    if (_newOwner != address(0)) {\n      owner = _newOwner;\n    }\n  }\n\n  function setFeeAccount(address _newFeeAccount) public onlyOwner {\n    feeAccount = _newFeeAccount;\n  }\n\n  function addSigner(address _signer) public onlyOwner {\n    signers[_signer] = true;\n  }\n\n  function removeSigner(address _signer) public onlyOwner {\n    signers[_signer] = false;\n  }\n\n  function setBEY(address _addr) public onlyOwner {\n    BEY = _addr;\n  }\n\n  function setMiningRate(address _quoteToken, uint256 _rate) public onlyOwner {\n    miningRate[_quoteToken] = _rate;\n  }\n\n  function setPaused(bool _paused) public onlyOwner {\n    paused = _paused;\n  }\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  modifier onlySigner() {\n    require(signers[msg.sender]);\n    _; \n  }\n\n  modifier onlyNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  function() external {\n    revert();\n  }\n\n  function depositToken(address token, uint amount) public {\n    balances[token][msg.sender] = safeAdd(balances[token][msg.sender], amount);\n    require(Token(token).transferFrom(msg.sender, this, amount));\n    Deposit(token, msg.sender, amount, balances[token][msg.sender]);\n  }\n\n  function deposit() public payable {\n    balances[address(0)][msg.sender] = safeAdd(balances[address(0)][msg.sender], msg.value);\n    Deposit(address(0), msg.sender, msg.value, balances[address(0)][msg.sender]);\n  }\n\n  function withdraw(address token, uint amount, uint nonce, address _signer, uint8 v, bytes32 r, bytes32 s) public {\n    require(balances[token][msg.sender] >= amount);\n    require(signers[_signer]);\n    bytes32 hash = keccak256(this, msg.sender, token, amount, nonce);\n    require(isValidSignature(_signer, hash, v, r, s));\n    require(!withdraws[hash]);\n    withdraws[hash] = true;\n\n    balances[token][msg.sender] = safeSub(balances[token][msg.sender], amount);\n    if (token == address(0)) {\n      require(msg.sender.send(amount));\n    } else {\n      require(Token(token).transfer(msg.sender, amount));\n    }\n    Withdraw(token, msg.sender, amount, balances[token][msg.sender]);\n  }\n\n  function balanceOf(address token, address user) public view returns(uint) {\n    return balances[token][user];\n  }\n\n  function updateCancels(address user, uint256 nonce) public onlySigner {\n    require(nonce > cancels[user]);\n    cancels[user] = nonce;\n  }\n\n  function getMiningRate(address _quoteToken) public view returns(uint256) {\n    uint256 initialRate = miningRate[_quoteToken];\n    if (unmined > 500000000e18){\n      return initialRate;\n    } else if (unmined > 400000000e18 && unmined <= 500000000e18){\n      return initialRate * 9e17 / 1e18;\n    } else if (unmined > 300000000e18 && unmined <= 400000000e18){\n      return initialRate * 8e17 / 1e18;\n    } else if (unmined > 200000000e18 && unmined <= 300000000e18){\n      return initialRate * 7e17 / 1e18;\n    } else if (unmined > 100000000e18 && unmined <= 200000000e18){\n      return initialRate * 6e17 / 1e18;\n    } else if(unmined <= 100000000e18) {\n      return initialRate * 5e17 / 1e18;\n    }\n  }\n\n  function trade(\n      address[5] addrs,\n      uint[11] vals,\n      uint8[3] v,\n      bytes32[6] rs\n    ) public onlyNotPaused\n    returns (bool)\n\n    // addrs:\n    // addrs[0] baseToken\n    // addrs[1] quoteToken\n    // addrs[2] buyer\n    // addrs[3] seller\n    // addrs[4] signer\n\n    // vals:\n    // vals[0] buyVolume\n    // vals[1] buyFund\n    // vals[2] buyNonce\n\n    // vals[3] sellVolume\n    // vals[4] sellFund\n    // vals[5] sellNonce\n\n    // vals[6] tradeVolume\n    // vals[7] tradeFund\n    // vals[8] tradeNonce\n\n    // vals[9] buyerFee\n    // vals[10] sellerFee\n\n    // v:\n    // v[0] buyV\n    // v[1] sellV\n    // v[2] tradeV\n\n    // rs:\n    // rs[0] buyR\n    // rs[1] buyS\n    // rs[2] sellR\n    // rs[3] sellS\n    // rs[4] tradeR\n    // rs[5] tradeS\n  {\n    require(signers[addrs[4]]);\n    require(cancels[addrs[2]] < vals[2]);\n    require(cancels[addrs[3]] < vals[5]);\n\n    require(vals[6] > 0 && vals[7] > 0 && vals[8] > 0);\n    require(vals[1] >= vals[7] && vals[4] >= vals[7]);\n    require(msg.sender == addrs[2] || msg.sender == addrs[3] || msg.sender == addrs[4]);\n\n    bytes32 buyHash = keccak256(address(this), addrs[0], addrs[1], addrs[2], vals[0], vals[1], vals[2]);\n    bytes32 sellHash = keccak256(address(this), addrs[0], addrs[1], addrs[3], vals[3], vals[4], vals[5]);\n\n    require(isValidSignature(addrs[2], buyHash, v[0], rs[0], rs[1]));\n    require(isValidSignature(addrs[3], sellHash, v[1], rs[2], rs[3]));\n\n    bytes32 tradeHash = keccak256(this, buyHash, sellHash, addrs[4], vals[6], vals[7], vals[8], vals[9], vals[10]);\n    require(isValidSignature(addrs[4], tradeHash, v[2], rs[4], rs[5]));\n    \n    require(!traded[tradeHash]);\n    traded[tradeHash] = true;\n    \n    require(safeAdd(orderFills[buyHash], vals[6]) <= vals[0]);\n    require(safeAdd(orderFills[sellHash], vals[6]) <= vals[3]);\n\n    // balances[quoteToken][buyer] > tradeFund\n    require(balances[addrs[1]][addrs[2]] >= vals[7]);\n\n    // balances[quoteToken][buyer] -= tradeFund\n    balances[addrs[1]][addrs[2]] = safeSub(balances[addrs[1]][addrs[2]], vals[7]);\n\n    // balances[baseToken][seller] > tradeVolume\n    require(balances[addrs[0]][addrs[3]] >= vals[6]);\n\n    // balances[baseToken][seller] -= tradeVolume\n    balances[addrs[0]][addrs[3]] = safeSub(balances[addrs[0]][addrs[3]], vals[6]);\n\n    // balances[baseToken][buyer] += tradeVolume - tradeVolume * buyFee\n    balances[addrs[0]][addrs[2]] = safeAdd(balances[addrs[0]][addrs[2]], safeSub(vals[6], (safeMul(vals[6], vals[9]) / 1 ether)));\n\n    // balances[quoteToken][seller] += tradeFund - tradeFund * sellFee\n    balances[addrs[1]][addrs[3]] = safeAdd(balances[addrs[1]][addrs[3]], safeSub(vals[7], (safeMul(vals[7], vals[10]) / 1 ether)));\n    \n    balances[addrs[0]][feeAccount] = safeAdd(balances[addrs[0]][feeAccount], safeMul(vals[6], vals[9]) / 1 ether);\n    balances[addrs[1]][feeAccount] = safeAdd(balances[addrs[1]][feeAccount], safeMul(vals[7], vals[10]) / 1 ether);\n\n    orderFills[buyHash] = safeAdd(orderFills[buyHash], vals[6]);\n    orderFills[sellHash] = safeAdd(orderFills[sellHash], vals[6]);\n\n    Trade(addrs[0], addrs[1], vals[6], vals[7], vals[8], addrs[2], addrs[3]);\n\n    // Reward BEYs to buyer and seller\n    if(unmined > 0) {\n      if(miningRate[addrs[1]] > 0){\n        uint256 minedBEY = safeMul(safeMul(vals[7], getMiningRate(addrs[1])), 2) / (1 ether);\n        if(unmined > minedBEY) {\n          mined[addrs[2]] = safeAdd(mined[addrs[2]], safeSub(minedBEY, minedBEY / 2));\n          mined[addrs[3]] = safeAdd(mined[addrs[3]], minedBEY / 2);\n          unmined = safeSub(unmined, minedBEY);\n        } else {\n          mined[addrs[2]] = safeAdd(mined[addrs[2]], safeSub(unmined, unmined / 2));\n          mined[addrs[3]] = safeAdd(mined[addrs[3]], unmined / 2);\n          unmined = 0;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  function claim() public returns(bool) {\n    require(mined[msg.sender] > 0);\n    require(BEY != address(0));\n    uint256 amount = mined[msg.sender];\n    mined[msg.sender] = 0;\n    require(Token(BEY).transfer(msg.sender, amount));\n    Claim(msg.sender, amount);\n    return true;\n  }\n\n  function claimByTeam() public onlyOwner returns(bool) {\n    uint256 totalMined = safeSub(totalForMining, unmined);\n    require(totalMined > 0);\n    uint256 released = safeMul(teamLocked, totalMined) / totalForMining;\n    uint256 amount = safeSub(released, teamClaimed);\n    require(amount > 0);\n    teamClaimed = released;\n    require(Token(BEY).transfer(msg.sender, amount));\n    Claim(msg.sender, amount);\n    return true;\n  }\n\n  function cancel(\n    address baseToken, \n    address quoteToken, \n    address user,\n    uint volume,\n    uint fund,\n    uint nonce,\n    uint8 v,\n    bytes32 r,\n    bytes32 s) public onlySigner returns(bool)\n  {\n\n    bytes32 hash = keccak256(this, baseToken, quoteToken, user, volume, fund, nonce);\n    require(isValidSignature(user, hash, v, r, s));\n    orderFills[hash] = volume;\n    Cancel(user, hash, nonce);\n    return true;\n  }\n  \n  function isValidSignature(\n        address signer,\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s)\n        public\n        pure\n        returns (bool)\n  {\n    return signer == ecrecover(\n      keccak256(\"\\x19Ethereum Signed Message:\\n32\", hash),\n      v,\n      r,\n      s\n    );\n  }\n}",
  "bytecode": "60606040526af8277896582678ac00000060085560006009556b01f04ef12cb04cf158000000600a819055600b55600f805460ff19169055341561004257600080fd5b6040516020806120af8339810160405280805160038054600160a060020a03338116600160a060020a03199283161790925560048054929093169116179055505061201d806100926000396000f3006060604052600436106101925763ffffffff60e060020a600035041663058fe7d981146101a25780630e316ab7146101c65780631077666e146101e557806316c38b3c1461020a5780632f33465214610222578063338b5dea146102355780633f392b4214610257578063432607fc1461031e5780634574f3271461035f5780634b023cf81461037e5780634e71d92d1461039d5780635c975abb146103b0578063635e2cdb146103c357806365e17c9d146103e25780636e0ca71a146104115780637039dcdc14610430578063736c0d5b1461044f5780638163681e1461046e57806389e967731461049c5780638da5cb5b146104af57806399ccbec6146104c2578063a85d3179146104d5578063ae82fcf4146104f4578063bce4d04114610507578063c23f001f14610529578063caaacb121461054e578063d0e30db014610561578063d581332314610569578063d5ca35bc1461057f578063e09ab428146105b8578063eb12d61e146105ce578063f2fde38b146105ed578063f7213db61461060c578063f7888aec14610622575b341561019d57600080fd5b600080fd5b34156101ad57600080fd5b6101c4600160a060020a0360043516602435610647565b005b34156101d157600080fd5b6101c4600160a060020a036004351661067e565b34156101f057600080fd5b6101f86106ba565b60405190815260200160405180910390f35b341561021557600080fd5b6101c460043515156106c0565b341561022d57600080fd5b6101f86106ee565b341561024057600080fd5b6101c4600160a060020a03600435166024356106f4565b341561026257600080fd5b61030a600460a481600560a06040519081016040529190828260a08082843782019150505050509190806101600190600b80602002604051908101604052919082826101608082843782019150505050509190806060019060038060200260405190810160405291908282606080828437820191505050505091908060c001906006806020026040519081016040529190828260c0808284375093955061085b945050505050565b604051901515815260200160405180910390f35b341561032957600080fd5b61030a600160a060020a036004358116906024358116906044351660643560843560a43560ff60c4351660e4356101043561139b565b341561036a57600080fd5b6101f8600160a060020a03600435166114bc565b341561038957600080fd5b6101c4600160a060020a03600435166114ce565b34156103a857600080fd5b61030a611518565b34156103bb57600080fd5b61030a611644565b34156103ce57600080fd5b6101f8600160a060020a036004351661164d565b34156103ed57600080fd5b6103f561165f565b604051600160a060020a03909116815260200160405180910390f35b341561041c57600080fd5b6101f8600160a060020a036004351661166e565b341561043b57600080fd5b6101c4600160a060020a0360043516611680565b341561045a57600080fd5b61030a600160a060020a03600435166116ca565b341561047957600080fd5b61030a600160a060020a036004351660243560ff604435166064356084356116df565b34156104a757600080fd5b6103f56117a7565b34156104ba57600080fd5b6103f56117b6565b34156104cd57600080fd5b61030a6117c5565b34156104e057600080fd5b6101f8600160a060020a0360043516611914565b34156104ff57600080fd5b6101f8611aa3565b341561051257600080fd5b6101c4600160a060020a0360043516602435611aa9565b341561053457600080fd5b6101f8600160a060020a0360043581169060243516611b10565b341561055957600080fd5b6101f8611b2a565b6101c4611b30565b341561057457600080fd5b61030a600435611c09565b341561058a57600080fd5b6101c4600160a060020a0360043581169060243590604435906064351660ff6084351660a43560c435611c1e565b34156105c357600080fd5b61030a600435611ec0565b34156105d957600080fd5b6101c4600160a060020a0360043516611ed5565b34156105f857600080fd5b6101c4600160a060020a0360043516611f14565b341561061757600080fd5b6101f8600435611f6a565b341561062d57600080fd5b6101f8600160a060020a0360043581169060243516611f7c565b60035433600160a060020a0390811691161461066257600080fd5b600160a060020a039091166000908152600e6020526040902055565b60035433600160a060020a0390811691161461069957600080fd5b600160a060020a03166000908152600560205260409020805460ff19169055565b600b5481565b60035433600160a060020a039081169116146106db57600080fd5b600f805460ff1916911515919091179055565b60095481565b600160a060020a0380831660009081526020818152604080832033909416835292905220546107239082611fa5565b600160a060020a038084166000818152602081815260408083203395861684529091528082209490945590926323b872dd92913091869190516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b15156107af57600080fd5b6102c65a03f115156107c057600080fd5b5050506040518051905015156107d557600080fd5b600160a060020a0380831660009081526020818152604080832033948516845290915290819020547fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d79285929091859151600160a060020a0394851681529290931660208301526040808301919091526060820192909252608001905180910390a15050565b600f54600090819081908190819060ff161561087657600080fd5b6005600060808b0151600160a060020a0316815260208101919091526040016000205460ff1615156108a757600080fd5b60408801516006600060408c0151600160a060020a03168152602081019190915260400160002054106108d957600080fd5b60a08801516006600060608c0151600160a060020a031681526020810191909152604001600020541061090b57600080fd5b600060c08901511180156109235750600060e0890151115b801561093457506000610100890151115b151561093f57600080fd5b60e088015160208901511015801561095f575060e0880151608089015110155b151561096a57600080fd5b6040890151600160a060020a031633600160a060020a031614806109a357506060890151600160a060020a031633600160a060020a0316145b806109c357506080890151600160a060020a031633600160a060020a0316145b15156109ce57600080fd5b30895160208b015160408c01518b5160208d015160408e01516040516c01000000000000000000000000600160a060020a0398891681028252968816870260148201529487168602602886015292909516909302603c83015260508201929092526070810192909252609082015260b001604051908190039020935030895160208b015160608c015160608c015160808d015160a08e01516040516c01000000000000000000000000600160a060020a0398891681028252968816870260148201529487168602602886015292909516909302603c83015260508201929092526070810192909252609082015260b0016040519081900390209250610ae460408a015185895189518a60015b60200201516116df565b1515610aef57600080fd5b610b0a60608a01518460208a015160408a01518a6003610ada565b1515610b1557600080fd5b30848460808c015160c08c015160e08d01516101008e01516101208f01518f600a60200201516040516c01000000000000000000000000600160a060020a039a8b1681028252601482019990995260348101979097529490971690950260548501526068840191909152608883015260a882019290925260c881019290925260e8820152610108016040519081900390209150610bc360808a01518360408a015160808a01518a6005610ada565b1515610bce57600080fd5b60008281526001602052604090205460ff1615610bea57600080fd5b6000828152600160208190526040909120805460ff191690911790558751600085815260026020526040902054610c29908a60065b6020020151611fa5565b1115610c3457600080fd5b6060880151600084815260026020526040902054610c54908a6006610c1f565b1115610c5f57600080fd5b60e088015160008060208c0151600160a060020a03168152602081019190915260409081016000908120918c0151600160a060020a031681526020810191909152604001600020541015610cb257600080fd5b610d0660008060208c0151600160a060020a03168152602081019190915260409081016000908120918c0151600160a060020a031681526020810191909152604001600020548960075b6020020151611fbb565b60008060208c0151600160a060020a03168152602081019190915260409081016000908120918c0151600160a060020a0316815260208101919091526040016000205560c08801516000808b51600160a060020a03168152602081019190915260400160009081209060608c0151600160a060020a031681526020810191909152604001600020541015610d9957600080fd5b610de46000808b51600160a060020a03168152602081019190915260400160009081209060608c0151600160a060020a03168152602081019190915260400160002054896006610cfc565b6000808b51600160a060020a03168152602081019190915260400160009081209060608c0151600160a060020a031681526020810191909152604001600090812091909155610ea690808b51600160a060020a03168152602081019190915260409081016000908120918c0151600160a060020a03168152602081019190915260400160002054610ea160c08b0151670de0b6b3a7640000610e9260c08e01518e60095b6020020151611fcd565b811515610e9b57fe5b04611fbb565b611fa5565b6000808b51600160a060020a03168152602081019190915260409081016000908120918c0151600160a060020a031681526020810191909152604001600090812091909155610f5490808b60016020020151600160a060020a03168152602081019190915260400160009081209060608c0151600160a060020a03168152602081019190915260400160002054610ea160e08b0151670de0b6b3a7640000610e9260e08e01518e600a610e88565b60008060208c0151600160a060020a03168152602081019190915260400160009081209060608c0151600160a060020a031681526020810191909152604001600090812091909155610ff890808b51600160a060020a0390811682526020808301939093526040918201600090812060045490921681529252902054670de0b6b3a7640000610fe960c08c01518c6009610e88565b811515610ff257fe5b04611fa5565b6000808b51600160a060020a039081168252602080830193909352604091820160009081206004549092168152925281209190915561108090808b60016020020151600160a060020a0390811682526020808301939093526040918201600090812060045490921681529252902054670de0b6b3a7640000610fe960e08c01518c600a610e88565b60008060208c0151600160a060020a0390811682526020808301939093526040918201600090812060045490921681529083528181209390935586835260029091529020546110d190896006610c1f565b6000858152600260205260408082209290925584815220546110f590896006610c1f565b6000848152600260205260409020557fcb447c504d94c8c3546a4117cbb870c63ac178060c45e3afbbc2164501499628895160208b015160c08b015160e08c01516101008d015160408f01518f60036020020151604051600160a060020a039788168152958716602087015260408087019590955260608601939093526080850191909152841660a084015290921660c082015260e001905180910390a16000600b54111561138c576000600e8160208c0151600160a060020a0316600160a060020a0316815260200190815260200160002054111561138c57670de0b6b3a76400006111fc6111f560e08b01516111f060208e0151611914565b611fcd565b6002611fcd565b81151561120557fe5b04905080600b5411156112d257611244600c600060408c0151600160a060020a03168152602081019190915260400160002054610ea183600281610e9b565b600c600060408c0151600160a060020a03168152602081019190915260400160009081209190915561129a90600c9060608c0151600160a060020a03168152602081019190915260400160002054600283610ff2565b600c600060608c0151600160a060020a03168152602081019190915260400160002055600b546112ca9082611fbb565b600b5561138c565b611307600c600060408c0151600160a060020a03168152602081019190915260400160002054600b54610ea190600281610e9b565b600c600060408c0151600160a060020a03168152602081019190915260400160009081209190915561136090600c9060608c0151600160a060020a03168152602081019190915260400160002054600b54600290610ff2565b600c600060608c0151600160a060020a031681526020810191909152604001600090812091909155600b555b50600198975050505050505050565b600160a060020a033316600090815260056020526040812054819060ff1615156113c457600080fd5b308b8b8b8b8b8b6040516c01000000000000000000000000600160a060020a0398891681028252968816870260148201529487168602602886015292909516909302603c83015260508201929092526070810192909252609082015260b0016040518091039020905061143a89828787876116df565b151561144557600080fd5b600081815260026020526040908190208990557fcf2d1b815b936adb435f34e35cce04122b5bbbf57faf74ac5e32dd1b1100d3ab908a908390899051600160a060020a03909316835260208301919091526040808301919091526060909101905180910390a15060019a9950505050505050505050565b600c6020526000908152604090205481565b60035433600160a060020a039081169116146114e957600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a0333166000908152600c6020526040812054819081901161153f57600080fd5b600d54600160a060020a0316151561155657600080fd5b50600160a060020a03338181166000908152600c6020526040808220805490839055600d549094169263a9059cbb929091859190516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156115d257600080fd5b6102c65a03f115156115e357600080fd5b5050506040518051905015156115f857600080fd5b7f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d43382604051600160a060020a03909216825260208201526040908101905180910390a1600191505090565b600f5460ff1681565b60066020526000908152604090205481565b600454600160a060020a031681565b600e6020526000908152604090205481565b60035433600160a060020a0390811691161461169b57600080fd5b600d805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60056020526000908152604090205460ff1681565b60006001856040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0160405180910390208585856040516000815260200160405260006040516020015260405193845260ff90921660208085019190915260408085019290925260608401929092526080909201915160208103908084039060008661646e5a03f1151561177f57600080fd5b505060206040510351600160a060020a031686600160a060020a031614905095945050505050565b600d54600160a060020a031681565b600354600160a060020a031681565b60035460009081908190819033600160a060020a039081169116146117e957600080fd5b6117f7600a54600b54611fbb565b92506000831161180657600080fd5b600a5461181560085485611fcd565b81151561181e57fe5b04915061182d82600954611fbb565b90506000811161183c57600080fd5b6009829055600d54600160a060020a031663a9059cbb338360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156118a057600080fd5b6102c65a03f115156118b157600080fd5b5050506040518051905015156118c657600080fd5b7f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d43382604051600160a060020a03909216825260208201526040908101905180910390a16001935050505090565b600160a060020a0381166000908152600e6020526040812054600b546b019d971e4fe8401e7400000090111561194c57809150611a9d565b6b014adf4b7320334b90000000600b5411801561197757506b019d971e4fe8401e74000000600b5411155b1561199957670de0b6b3a7640000670c7d713b49da000082025b049150611a9d565b6af8277896582678ac000000600b541180156119c357506b014adf4b7320334b90000000600b5411155b156119e157670de0b6b3a7640000670b1a2bc2ec5000008202611991565b6aa56fa5b99019a5c8000000600b54118015611a0a57506af8277896582678ac000000600b5411155b15611a2857670de0b6b3a76400006709b6e64a8ec600008202611991565b6a52b7d2dcc80cd2e4000000600b54118015611a5157506aa56fa5b99019a5c8000000600b5411155b15611a6f57670de0b6b3a7640000670853a0d2313c00008202611991565b600b546a52b7d2dcc80cd2e40000009011611a9d57670de0b6b3a76400006706f05b59d3b200008202611991565b50919050565b60085481565b600160a060020a03331660009081526005602052604090205460ff161515611ad057600080fd5b600160a060020a0382166000908152600660205260409020548111611af457600080fd5b600160a060020a03909116600090815260066020526040902055565b600060208181529281526040808220909352908152205481565b600a5481565b33600160a060020a031660009081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb56020526040902054611b729034611fa5565b33600160a060020a03811660009081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb560205260408082208490557fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d793919291349151600160a060020a0394851681529290931660208301526040808301919091526060820192909252608001905180910390a1565b60016020526000908152604090205460ff1681565b600160a060020a038088166000908152602081815260408083203390941683529290529081205487901015611c5257600080fd5b600160a060020a03851660009081526005602052604090205460ff161515611c7957600080fd5b30338989896040516c01000000000000000000000000600160a060020a039687168102825294861685026014820152929094169092026028820152603c810191909152605c810191909152607c0160405180910390209050611cde85828686866116df565b1515611ce957600080fd5b60008181526007602052604090205460ff1615611d0557600080fd5b6000818152600760209081526040808320805460ff19166001179055600160a060020a03808c168452838352818420339091168452909152902054611d4a9088611fbb565b600160a060020a03808a1660008181526020818152604080832033909516835293905291909120919091551515611db157600160a060020a03331687156108fc0288604051600060405180830381858888f193505050501515611dac57600080fd5b611e34565b87600160a060020a031663a9059cbb338960006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515611e0e57600080fd5b6102c65a03f11515611e1f57600080fd5b505050604051805190501515611e3457600080fd5b600160a060020a0380891660009081526020818152604080832033948516845290915290819020547ff341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb567928b9290918b9151600160a060020a0394851681529290931660208301526040808301919091526060820192909252608001905180910390a15050505050505050565b60076020526000908152604090205460ff1681565b60035433600160a060020a03908116911614611ef057600080fd5b600160a060020a03166000908152600560205260409020805460ff19166001179055565b60035433600160a060020a03908116911614611f2f57600080fd5b600160a060020a03811615611f67576003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b60026020526000908152604090205481565b600160a060020a0391821660009081526020818152604080832093909416825291909152205490565b600082820183811015611fb457fe5b9392505050565b600082821115611fc757fe5b50900390565b6000828202831580611fe95750828482811515611fe657fe5b04145b1515611fb457fe00a165627a7a7230582066eb19dd24c29df5a54d65dddbac639c6807599cdca545cc8428f0a625ebc5c000290000000000000000000000006f56cc5a19bd3bff23c7cab0120a77a514f2414d",
  "constructorArguments": "0000000000000000000000006f56cc5a19bd3bff23c7cab0120a77a514f2414d"
}