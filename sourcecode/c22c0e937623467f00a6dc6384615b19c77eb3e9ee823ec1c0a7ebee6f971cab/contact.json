{
  "address": "0xc7251934aafcfadc52fe5804ea4eda1972e43d15",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CryptoSagaDungeonVer1",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-11\n*/\n\npragma solidity ^0.4.18;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\n/**\n * @title Claimable\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n * This allows the new owner to accept the transfer.\n */\ncontract Claimable is Ownable {\n  address public pendingOwner;\n\n  /**\n   * @dev Modifier throws if called by any account other than the pendingOwner.\n   */\n  modifier onlyPendingOwner() {\n    require(msg.sender == pendingOwner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to set the pendingOwner address.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    pendingOwner = newOwner;\n  }\n\n  /**\n   * @dev Allows the pendingOwner address to finalize the transfer.\n   */\n  function claimOwnership() onlyPendingOwner public {\n    OwnershipTransferred(owner, pendingOwner);\n    owner = pendingOwner;\n    pendingOwner = address(0);\n  }\n}\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\n\n/**\n * @title ERC721 interface\n * @dev see https://github.com/ethereum/eips/issues/721\n */\ncontract ERC721 {\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n\n  function balanceOf(address _owner) public view returns (uint256 _balance);\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n  function transfer(address _to, uint256 _tokenId) public;\n  function approve(address _to, uint256 _tokenId) public;\n  function takeOwnership(uint256 _tokenId) public;\n}\n\n\n/**\n * @title ERC721Token\n * Generic implementation for the required functionality of the ERC721 standard\n */\ncontract ERC721Token is ERC721 {\n  using SafeMath for uint256;\n\n  // Total amount of tokens\n  uint256 private totalTokens;\n\n  // Mapping from token ID to owner\n  mapping (uint256 => address) private tokenOwner;\n\n  // Mapping from token ID to approved address\n  mapping (uint256 => address) private tokenApprovals;\n\n  // Mapping from owner to list of owned token IDs\n  mapping (address => uint256[]) private ownedTokens;\n\n  // Mapping from token ID to index of the owner tokens list\n  mapping(uint256 => uint256) private ownedTokensIndex;\n\n  /**\n  * @dev Guarantees msg.sender is owner of the given token\n  * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n  */\n  modifier onlyOwnerOf(uint256 _tokenId) {\n    require(ownerOf(_tokenId) == msg.sender);\n    _;\n  }\n\n  /**\n  * @dev Gets the total amount of tokens stored by the contract\n  * @return uint256 representing the total amount of tokens\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalTokens;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address\n  * @param _owner address to query the balance of\n  * @return uint256 representing the amount owned by the passed address\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return ownedTokens[_owner].length;\n  }\n\n  /**\n  * @dev Gets the list of tokens owned by a given address\n  * @param _owner address to query the tokens of\n  * @return uint256[] representing the list of tokens owned by the passed address\n  */\n  function tokensOf(address _owner) public view returns (uint256[]) {\n    return ownedTokens[_owner];\n  }\n\n  /**\n  * @dev Gets the owner of the specified token ID\n  * @param _tokenId uint256 ID of the token to query the owner of\n  * @return owner address currently marked as the owner of the given token ID\n  */\n  function ownerOf(uint256 _tokenId) public view returns (address) {\n    address owner = tokenOwner[_tokenId];\n    require(owner != address(0));\n    return owner;\n  }\n\n  /**\n   * @dev Gets the approved address to take ownership of a given token ID\n   * @param _tokenId uint256 ID of the token to query the approval of\n   * @return address currently approved to take ownership of the given token ID\n   */\n  function approvedFor(uint256 _tokenId) public view returns (address) {\n    return tokenApprovals[_tokenId];\n  }\n\n  /**\n  * @dev Transfers the ownership of a given token ID to another address\n  * @param _to address to receive the ownership of the given token ID\n  * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n    clearApprovalAndTransfer(msg.sender, _to, _tokenId);\n  }\n\n  /**\n  * @dev Approves another address to claim for the ownership of the given token ID\n  * @param _to address to be approved for the given token ID\n  * @param _tokenId uint256 ID of the token to be approved\n  */\n  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n    address owner = ownerOf(_tokenId);\n    require(_to != owner);\n    if (approvedFor(_tokenId) != 0 || _to != 0) {\n      tokenApprovals[_tokenId] = _to;\n      Approval(owner, _to, _tokenId);\n    }\n  }\n\n  /**\n  * @dev Claims the ownership of a given token ID\n  * @param _tokenId uint256 ID of the token being claimed by the msg.sender\n  */\n  function takeOwnership(uint256 _tokenId) public {\n    require(isApprovedFor(msg.sender, _tokenId));\n    clearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\n  }\n\n  /**\n  * @dev Mint token function\n  * @param _to The address that will own the minted token\n  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n  */\n  function _mint(address _to, uint256 _tokenId) internal {\n    require(_to != address(0));\n    addToken(_to, _tokenId);\n    Transfer(0x0, _to, _tokenId);\n  }\n\n  /**\n  * @dev Burns a specific token\n  * @param _tokenId uint256 ID of the token being burned by the msg.sender\n  */\n  function _burn(uint256 _tokenId) onlyOwnerOf(_tokenId) internal {\n    if (approvedFor(_tokenId) != 0) {\n      clearApproval(msg.sender, _tokenId);\n    }\n    removeToken(msg.sender, _tokenId);\n    Transfer(msg.sender, 0x0, _tokenId);\n  }\n\n  /**\n   * @dev Tells whether the msg.sender is approved for the given token ID or not\n   * This function is not private so it can be extended in further implementations like the operatable ERC721\n   * @param _owner address of the owner to query the approval of\n   * @param _tokenId uint256 ID of the token to query the approval of\n   * @return bool whether the msg.sender is approved for the given token ID or not\n   */\n  function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\n    return approvedFor(_tokenId) == _owner;\n  }\n\n  /**\n  * @dev Internal function to clear current approval and transfer the ownership of a given token ID\n  * @param _from address which you want to send tokens from\n  * @param _to address which you want to transfer the token to\n  * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal {\n    require(_to != address(0));\n    require(_to != ownerOf(_tokenId));\n    require(ownerOf(_tokenId) == _from);\n\n    clearApproval(_from, _tokenId);\n    removeToken(_from, _tokenId);\n    addToken(_to, _tokenId);\n    Transfer(_from, _to, _tokenId);\n  }\n\n  /**\n  * @dev Internal function to clear current approval of a given token ID\n  * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function clearApproval(address _owner, uint256 _tokenId) private {\n    require(ownerOf(_tokenId) == _owner);\n    tokenApprovals[_tokenId] = 0;\n    Approval(_owner, 0, _tokenId);\n  }\n\n  /**\n  * @dev Internal function to add a token ID to the list of a given address\n  * @param _to address representing the new owner of the given token ID\n  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n  */\n  function addToken(address _to, uint256 _tokenId) private {\n    require(tokenOwner[_tokenId] == address(0));\n    tokenOwner[_tokenId] = _to;\n    uint256 length = balanceOf(_to);\n    ownedTokens[_to].push(_tokenId);\n    ownedTokensIndex[_tokenId] = length;\n    totalTokens = totalTokens.add(1);\n  }\n\n  /**\n  * @dev Internal function to remove a token ID from the list of a given address\n  * @param _from address representing the previous owner of the given token ID\n  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n  */\n  function removeToken(address _from, uint256 _tokenId) private {\n    require(ownerOf(_tokenId) == _from);\n\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n    uint256 lastTokenIndex = balanceOf(_from).sub(1);\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n\n    tokenOwner[_tokenId] = 0;\n    ownedTokens[_from][tokenIndex] = lastToken;\n    ownedTokens[_from][lastTokenIndex] = 0;\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n    ownedTokens[_from].length--;\n    ownedTokensIndex[_tokenId] = 0;\n    ownedTokensIndex[lastToken] = tokenIndex;\n    totalTokens = totalTokens.sub(1);\n  }\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n/**\n * @title AccessDeposit\n * @dev Adds grant/revoke functions to the contract.\n */\ncontract AccessDeposit is Claimable {\n\n  // Access for adding deposit.\n  mapping(address => bool) private depositAccess;\n\n  // Modifier for accessibility to add deposit.\n  modifier onlyAccessDeposit {\n    require(msg.sender == owner || depositAccess[msg.sender] == true);\n    _;\n  }\n\n  // @dev Grant acess to deposit heroes.\n  function grantAccessDeposit(address _address)\n    onlyOwner\n    public\n  {\n    depositAccess[_address] = true;\n  }\n\n  // @dev Revoke acess to deposit heroes.\n  function revokeAccessDeposit(address _address)\n    onlyOwner\n    public\n  {\n    depositAccess[_address] = false;\n  }\n\n}\n\n\n/**\n * @title AccessDeploy\n * @dev Adds grant/revoke functions to the contract.\n */\ncontract AccessDeploy is Claimable {\n\n  // Access for deploying heroes.\n  mapping(address => bool) private deployAccess;\n\n  // Modifier for accessibility to deploy a hero on a location.\n  modifier onlyAccessDeploy {\n    require(msg.sender == owner || deployAccess[msg.sender] == true);\n    _;\n  }\n\n  // @dev Grant acess to deploy heroes.\n  function grantAccessDeploy(address _address)\n    onlyOwner\n    public\n  {\n    deployAccess[_address] = true;\n  }\n\n  // @dev Revoke acess to deploy heroes.\n  function revokeAccessDeploy(address _address)\n    onlyOwner\n    public\n  {\n    deployAccess[_address] = false;\n  }\n\n}\n\n/**\n * @title AccessMint\n * @dev Adds grant/revoke functions to the contract.\n */\ncontract AccessMint is Claimable {\n\n  // Access for minting new tokens.\n  mapping(address => bool) private mintAccess;\n\n  // Modifier for accessibility to define new hero types.\n  modifier onlyAccessMint {\n    require(msg.sender == owner || mintAccess[msg.sender] == true);\n    _;\n  }\n\n  // @dev Grant acess to mint heroes.\n  function grantAccessMint(address _address)\n    onlyOwner\n    public\n  {\n    mintAccess[_address] = true;\n  }\n\n  // @dev Revoke acess to mint heroes.\n  function revokeAccessMint(address _address)\n    onlyOwner\n    public\n  {\n    mintAccess[_address] = false;\n  }\n\n}\n\n\n/**\n * @title Gold\n * @dev ERC20 Token that can be minted.\n */\ncontract Gold is StandardToken, Claimable, AccessMint {\n\n  string public constant name = \"Gold\";\n  string public constant symbol = \"G\";\n  uint8 public constant decimals = 18;\n\n  // Event that is fired when minted.\n  event Mint(\n    address indexed _to,\n    uint256 indexed _tokenId\n  );\n\n  // @dev Mint tokens with _amount to the address.\n  function mint(address _to, uint256 _amount) \n    onlyAccessMint\n    public \n    returns (bool) \n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n}\n\n\n/**\n * @title CryptoSaga Card\n * @dev ERC721 Token that repesents CryptoSaga's cards.\n *  Buy consuming a card, players of CryptoSaga can get a heroe.\n */\ncontract CryptoSagaCard is ERC721Token, Claimable, AccessMint {\n\n  string public constant name = \"CryptoSaga Card\";\n  string public constant symbol = \"CARD\";\n\n  // Rank of the token.\n  mapping(uint256 => uint8) public tokenIdToRank;\n\n  // The number of tokens ever minted.\n  uint256 public numberOfTokenId;\n\n  // The converter contract.\n  CryptoSagaCardSwap private swapContract;\n\n  // Event that should be fired when card is converted.\n  event CardSwap(address indexed _by, uint256 _tokenId, uint256 _rewardId);\n\n  // @dev Set the address of the contract that represents CryptoSaga Cards.\n  function setCryptoSagaCardSwapContract(address _contractAddress)\n    public\n    onlyOwner\n  {\n    swapContract = CryptoSagaCardSwap(_contractAddress);\n  }\n\n  function rankOf(uint256 _tokenId) \n    public view\n    returns (uint8)\n  {\n    return tokenIdToRank[_tokenId];\n  }\n\n  // @dev Mint a new card.\n  function mint(address _beneficiary, uint256 _amount, uint8 _rank)\n    onlyAccessMint\n    public\n  {\n    for (uint256 i = 0; i < _amount; i++) {\n      _mint(_beneficiary, numberOfTokenId);\n      tokenIdToRank[numberOfTokenId] = _rank;\n      numberOfTokenId ++;\n    }\n  }\n\n  // @dev Swap this card for reward.\n  //  The card will be burnt.\n  function swap(uint256 _tokenId)\n    onlyOwnerOf(_tokenId)\n    public\n    returns (uint256)\n  {\n    require(address(swapContract) != address(0));\n\n    var _rank = tokenIdToRank[_tokenId];\n    var _rewardId = swapContract.swapCardForReward(this, _rank);\n    CardSwap(ownerOf(_tokenId), _tokenId, _rewardId);\n    _burn(_tokenId);\n    return _rewardId;\n  }\n\n}\n\n\n/**\n * @title The interface contract for Card-For-Hero swap functionality.\n * @dev With this contract, a card holder can swap his/her CryptoSagaCard for reward.\n *  This contract is intended to be inherited by CryptoSagaCardSwap implementation contracts.\n */\ncontract CryptoSagaCardSwap is Ownable {\n\n  // Card contract.\n  address internal cardAddess;\n\n  // Modifier for accessibility to define new hero types.\n  modifier onlyCard {\n    require(msg.sender == cardAddess);\n    _;\n  }\n  \n  // @dev Set the address of the contract that represents ERC721 Card.\n  function setCardContract(address _contractAddress)\n    public\n    onlyOwner\n  {\n    cardAddess = _contractAddress;\n  }\n\n  // @dev Convert card into reward.\n  //  This should be implemented by CryptoSagaCore later.\n  function swapCardForReward(address _by, uint8 _rank)\n    onlyCard\n    public \n    returns (uint256);\n\n}\n\n\n/**\n * @title CryptoSagaHero\n * @dev The token contract for the hero.\n *  Also a superset of the ERC721 standard that allows for the minting\n *  of the non-fungible tokens.\n */\ncontract CryptoSagaHero is ERC721Token, Claimable, Pausable, AccessMint, AccessDeploy, AccessDeposit {\n\n  string public constant name = \"CryptoSaga Hero\";\n  string public constant symbol = \"HERO\";\n  \n  struct HeroClass {\n    // ex) Soldier, Knight, Fighter...\n    string className;\n    // 0: Common, 1: Uncommon, 2: Rare, 3: Heroic, 4: Legendary.\n    uint8 classRank;\n    // 0: Human, 1: Celestial, 2: Demon, 3: Elf, 4: Dark Elf, 5: Yogoe, 6: Furry, 7: Dragonborn, 8: Undead, 9: Goblin, 10: Troll, 11: Slime, and more to come.\n    uint8 classRace;\n    // How old is this hero class? \n    uint32 classAge;\n    // 0: Fighter, 1: Rogue, 2: Mage.\n    uint8 classType;\n\n    // Possible max level of this class.\n    uint32 maxLevel; \n    // 0: Water, 1: Fire, 2: Nature, 3: Light, 4: Darkness.\n    uint8 aura; \n\n    // Base stats of this hero type. \n    // 0: ATK\t1: DEF 2: AGL\t3: LUK 4: HP.\n    uint32[5] baseStats;\n    // Minimum IVs for stats. \n    // 0: ATK\t1: DEF 2: AGL\t3: LUK 4: HP.\n    uint32[5] minIVForStats;\n    // Maximum IVs for stats.\n    // 0: ATK\t1: DEF 2: AGL\t3: LUK 4: HP.\n    uint32[5] maxIVForStats;\n    \n    // Number of currently instanced heroes.\n    uint32 currentNumberOfInstancedHeroes;\n  }\n    \n  struct HeroInstance {\n    // What is this hero's type? ex) John, Sally, Mark...\n    uint32 heroClassId;\n    \n    // Individual hero's name.\n    string heroName;\n    \n    // Current level of this hero.\n    uint32 currentLevel;\n    // Current exp of this hero.\n    uint32 currentExp;\n\n    // Where has this hero been deployed? (0: Never depolyed ever.) ex) Dungeon Floor #1, Arena #5...\n    uint32 lastLocationId;\n    // When a hero is deployed, it takes time for the hero to return to the base. This is in Unix epoch.\n    uint256 availableAt;\n\n    // Current stats of this hero. \n    // 0: ATK\t1: DEF 2: AGL\t3: LUK 4: HP.\n    uint32[5] currentStats;\n    // The individual value for this hero's stats. \n    // This will affect the current stats of heroes.\n    // 0: ATK\t1: DEF 2: AGL\t3: LUK 4: HP.\n    uint32[5] ivForStats;\n  }\n\n  // Required exp for level up will increase when heroes level up.\n  // This defines how the value will increase.\n  uint32 public requiredExpIncreaseFactor = 100;\n\n  // Required Gold for level up will increase when heroes level up.\n  // This defines how the value will increase.\n  uint256 public requiredGoldIncreaseFactor = 1000000000000000000;\n\n  // Existing hero classes.\n  mapping(uint32 => HeroClass) public heroClasses;\n  // The number of hero classes ever defined.\n  uint32 public numberOfHeroClasses;\n\n  // Existing hero instances.\n  // The key is _tokenId.\n  mapping(uint256 => HeroInstance) public tokenIdToHeroInstance;\n  // The number of tokens ever minted. This works as the serial number.\n  uint256 public numberOfTokenIds;\n\n  // Gold contract.\n  Gold public goldContract;\n\n  // Deposit of players (in Gold).\n  mapping(address => uint256) public addressToGoldDeposit;\n\n  // Random seed.\n  uint32 private seed = 0;\n\n  // Event that is fired when a hero type defined.\n  event DefineType(\n    address indexed _by,\n    uint32 indexed _typeId,\n    string _className\n  );\n\n  // Event that is fired when a hero is upgraded.\n  event LevelUp(\n    address indexed _by,\n    uint256 indexed _tokenId,\n    uint32 _newLevel\n  );\n\n  // Event that is fired when a hero is deployed.\n  event Deploy(\n    address indexed _by,\n    uint256 indexed _tokenId,\n    uint32 _locationId,\n    uint256 _duration\n  );\n\n  // @dev Get the class's entire infomation.\n  function getClassInfo(uint32 _classId)\n    external view\n    returns (string className, uint8 classRank, uint8 classRace, uint32 classAge, uint8 classType, uint32 maxLevel, uint8 aura, uint32[5] baseStats, uint32[5] minIVs, uint32[5] maxIVs) \n  {\n    var _cl = heroClasses[_classId];\n    return (_cl.className, _cl.classRank, _cl.classRace, _cl.classAge, _cl.classType, _cl.maxLevel, _cl.aura, _cl.baseStats, _cl.minIVForStats, _cl.maxIVForStats);\n  }\n\n  // @dev Get the class's name.\n  function getClassName(uint32 _classId)\n    external view\n    returns (string)\n  {\n    return heroClasses[_classId].className;\n  }\n\n  // @dev Get the class's rank.\n  function getClassRank(uint32 _classId)\n    external view\n    returns (uint8)\n  {\n    return heroClasses[_classId].classRank;\n  }\n\n  // @dev Get the heroes ever minted for the class.\n  function getClassMintCount(uint32 _classId)\n    external view\n    returns (uint32)\n  {\n    return heroClasses[_classId].currentNumberOfInstancedHeroes;\n  }\n\n  // @dev Get the hero's entire infomation.\n  function getHeroInfo(uint256 _tokenId)\n    external view\n    returns (uint32 classId, string heroName, uint32 currentLevel, uint32 currentExp, uint32 lastLocationId, uint256 availableAt, uint32[5] currentStats, uint32[5] ivs, uint32 bp)\n  {\n    HeroInstance memory _h = tokenIdToHeroInstance[_tokenId];\n    var _bp = _h.currentStats[0] + _h.currentStats[1] + _h.currentStats[2] + _h.currentStats[3] + _h.currentStats[4];\n    return (_h.heroClassId, _h.heroName, _h.currentLevel, _h.currentExp, _h.lastLocationId, _h.availableAt, _h.currentStats, _h.ivForStats, _bp);\n  }\n\n  // @dev Get the hero's class id.\n  function getHeroClassId(uint256 _tokenId)\n    external view\n    returns (uint32)\n  {\n    return tokenIdToHeroInstance[_tokenId].heroClassId;\n  }\n\n  // @dev Get the hero's name.\n  function getHeroName(uint256 _tokenId)\n    external view\n    returns (string)\n  {\n    return tokenIdToHeroInstance[_tokenId].heroName;\n  }\n\n  // @dev Get the hero's level.\n  function getHeroLevel(uint256 _tokenId)\n    external view\n    returns (uint32)\n  {\n    return tokenIdToHeroInstance[_tokenId].currentLevel;\n  }\n  \n  // @dev Get the hero's location.\n  function getHeroLocation(uint256 _tokenId)\n    external view\n    returns (uint32)\n  {\n    return tokenIdToHeroInstance[_tokenId].lastLocationId;\n  }\n\n  // @dev Get the time when the hero become available.\n  function getHeroAvailableAt(uint256 _tokenId)\n    external view\n    returns (uint256)\n  {\n    return tokenIdToHeroInstance[_tokenId].availableAt;\n  }\n\n  // @dev Get the hero's BP.\n  function getHeroBP(uint256 _tokenId)\n    public view\n    returns (uint32)\n  {\n    var _tmp = tokenIdToHeroInstance[_tokenId].currentStats;\n    return (_tmp[0] + _tmp[1] + _tmp[2] + _tmp[3] + _tmp[4]);\n  }\n\n  // @dev Get the hero's required gold for level up.\n  function getHeroRequiredGoldForLevelUp(uint256 _tokenId)\n    public view\n    returns (uint256)\n  {\n    return (uint256(2) ** (tokenIdToHeroInstance[_tokenId].currentLevel / 10)) * requiredGoldIncreaseFactor;\n  }\n\n  // @dev Get the hero's required exp for level up.\n  function getHeroRequiredExpForLevelUp(uint256 _tokenId)\n    public view\n    returns (uint32)\n  {\n    return ((tokenIdToHeroInstance[_tokenId].currentLevel + 2) * requiredExpIncreaseFactor);\n  }\n\n  // @dev Get the deposit of gold of the player.\n  function getGoldDepositOfAddress(address _address)\n    external view\n    returns (uint256)\n  {\n    return addressToGoldDeposit[_address];\n  }\n\n  // @dev Get the token id of the player's #th token.\n  function getTokenIdOfAddressAndIndex(address _address, uint256 _index)\n    external view\n    returns (uint256)\n  {\n    return tokensOf(_address)[_index];\n  }\n\n  // @dev Get the total BP of the player.\n  function getTotalBPOfAddress(address _address)\n    external view\n    returns (uint32)\n  {\n    var _tokens = tokensOf(_address);\n    uint32 _totalBP = 0;\n    for (uint256 i = 0; i < _tokens.length; i ++) {\n      _totalBP += getHeroBP(_tokens[i]);\n    }\n    return _totalBP;\n  }\n\n  // @dev Set the hero's name.\n  function setHeroName(uint256 _tokenId, string _name)\n    onlyOwnerOf(_tokenId)\n    public\n  {\n    tokenIdToHeroInstance[_tokenId].heroName = _name;\n  }\n\n  // @dev Set the address of the contract that represents ERC20 Gold.\n  function setGoldContract(address _contractAddress)\n    onlyOwner\n    public\n  {\n    goldContract = Gold(_contractAddress);\n  }\n\n  // @dev Set the required golds to level up a hero.\n  function setRequiredExpIncreaseFactor(uint32 _value)\n    onlyOwner\n    public\n  {\n    requiredExpIncreaseFactor = _value;\n  }\n\n  // @dev Set the required golds to level up a hero.\n  function setRequiredGoldIncreaseFactor(uint256 _value)\n    onlyOwner\n    public\n  {\n    requiredGoldIncreaseFactor = _value;\n  }\n\n  // @dev Contructor.\n  function CryptoSagaHero(address _goldAddress)\n    public\n  {\n    require(_goldAddress != address(0));\n\n    // Assign Gold contract.\n    setGoldContract(_goldAddress);\n\n    // Initial heroes.\n    // Name, Rank, Race, Age, Type, Max Level, Aura, Stats.\n    defineType(\"Archangel\", 4, 1, 13540, 0, 99, 3, [uint32(74), 75, 57, 99, 95], [uint32(8), 6, 8, 5, 5], [uint32(8), 10, 10, 6, 6]);\n    defineType(\"Shadowalker\", 3, 4, 134, 1, 75, 4, [uint32(45), 35, 60, 80, 40], [uint32(3), 2, 10, 4, 5], [uint32(5), 5, 10, 7, 5]);\n    defineType(\"Pyromancer\", 2, 0, 14, 2, 50, 1, [uint32(50), 28, 17, 40, 35], [uint32(5), 3, 2, 3, 3], [uint32(8), 4, 3, 4, 5]);\n    defineType(\"Magician\", 1, 3, 224, 2, 30, 0, [uint32(35), 15, 25, 25, 30], [uint32(3), 1, 2, 2, 2], [uint32(5), 2, 3, 3, 3]);\n    defineType(\"Farmer\", 0, 0, 59, 0, 15, 2, [uint32(10), 22, 8, 15, 25], [uint32(1), 2, 1, 1, 2], [uint32(1), 3, 1, 2, 3]);\n  }\n\n  // @dev Define a new hero type (class).\n  function defineType(string _className, uint8 _classRank, uint8 _classRace, uint32 _classAge, uint8 _classType, uint32 _maxLevel, uint8 _aura, uint32[5] _baseStats, uint32[5] _minIVForStats, uint32[5] _maxIVForStats)\n    onlyOwner\n    public\n  {\n    require(_classRank < 5);\n    require(_classType < 3);\n    require(_aura < 5);\n    require(_minIVForStats[0] <= _maxIVForStats[0] && _minIVForStats[1] <= _maxIVForStats[1] && _minIVForStats[2] <= _maxIVForStats[2] && _minIVForStats[3] <= _maxIVForStats[3] && _minIVForStats[4] <= _maxIVForStats[4]);\n\n    HeroClass memory _heroType = HeroClass({\n      className: _className,\n      classRank: _classRank,\n      classRace: _classRace,\n      classAge: _classAge,\n      classType: _classType,\n      maxLevel: _maxLevel,\n      aura: _aura,\n      baseStats: _baseStats,\n      minIVForStats: _minIVForStats,\n      maxIVForStats: _maxIVForStats,\n      currentNumberOfInstancedHeroes: 0\n    });\n\n    // Save the hero class.\n    heroClasses[numberOfHeroClasses] = _heroType;\n\n    // Fire event.\n    DefineType(msg.sender, numberOfHeroClasses, _heroType.className);\n\n    // Increment number of hero classes.\n    numberOfHeroClasses ++;\n\n  }\n\n  // @dev Mint a new hero, with _heroClassId.\n  function mint(address _owner, uint32 _heroClassId)\n    onlyAccessMint\n    public\n    returns (uint256)\n  {\n    require(_owner != address(0));\n    require(_heroClassId < numberOfHeroClasses);\n\n    // The information of the hero's class.\n    var _heroClassInfo = heroClasses[_heroClassId];\n\n    // Mint ERC721 token.\n    _mint(_owner, numberOfTokenIds);\n\n    // Build random IVs for this hero instance.\n    uint32[5] memory _ivForStats;\n    uint32[5] memory _initialStats;\n    for (uint8 i = 0; i < 5; i++) {\n      _ivForStats[i] = (random(_heroClassInfo.maxIVForStats[i] + 1, _heroClassInfo.minIVForStats[i]));\n      _initialStats[i] = _heroClassInfo.baseStats[i] + _ivForStats[i];\n    }\n\n    // Temporary hero instance.\n    HeroInstance memory _heroInstance = HeroInstance({\n      heroClassId: _heroClassId,\n      heroName: \"\",\n      currentLevel: 1,\n      currentExp: 0,\n      lastLocationId: 0,\n      availableAt: now,\n      currentStats: _initialStats,\n      ivForStats: _ivForStats\n    });\n\n    // Save the hero instance.\n    tokenIdToHeroInstance[numberOfTokenIds] = _heroInstance;\n\n    // Increment number of token ids.\n    // This will only increment when new token is minted, and will never be decemented when the token is burned.\n    numberOfTokenIds ++;\n\n     // Increment instanced number of heroes.\n    _heroClassInfo.currentNumberOfInstancedHeroes ++;\n\n    return numberOfTokenIds - 1;\n  }\n\n  // @dev Set where the heroes are deployed, and when they will return.\n  //  This is intended to be called by Dungeon, Arena, Guild contracts.\n  function deploy(uint256 _tokenId, uint32 _locationId, uint256 _duration)\n    onlyAccessDeploy\n    public\n    returns (bool)\n  {\n    // The hero should be possessed by anybody.\n    require(ownerOf(_tokenId) != address(0));\n\n    var _heroInstance = tokenIdToHeroInstance[_tokenId];\n\n    // The character should be avaiable. \n    require(_heroInstance.availableAt <= now);\n\n    _heroInstance.lastLocationId = _locationId;\n    _heroInstance.availableAt = now + _duration;\n\n    // As the hero has been deployed to another place, fire event.\n    Deploy(msg.sender, _tokenId, _locationId, _duration);\n  }\n\n  // @dev Add exp.\n  //  This is intended to be called by Dungeon, Arena, Guild contracts.\n  function addExp(uint256 _tokenId, uint32 _exp)\n    onlyAccessDeploy\n    public\n    returns (bool)\n  {\n    // The hero should be possessed by anybody.\n    require(ownerOf(_tokenId) != address(0));\n\n    var _heroInstance = tokenIdToHeroInstance[_tokenId];\n\n    var _newExp = _heroInstance.currentExp + _exp;\n\n    // Sanity check to ensure we don't overflow.\n    require(_newExp == uint256(uint128(_newExp)));\n\n    _heroInstance.currentExp += _newExp;\n\n  }\n\n  // @dev Add deposit.\n  //  This is intended to be called by Dungeon, Arena, Guild contracts.\n  function addDeposit(address _to, uint256 _amount)\n    onlyAccessDeposit\n    public\n  {\n    // Increment deposit.\n    addressToGoldDeposit[_to] += _amount;\n  }\n\n  // @dev Level up the hero with _tokenId.\n  //  This function is called by the owner of the hero.\n  function levelUp(uint256 _tokenId)\n    onlyOwnerOf(_tokenId) whenNotPaused\n    public\n  {\n\n    // Hero instance.\n    var _heroInstance = tokenIdToHeroInstance[_tokenId];\n\n    // The character should be avaiable. (Should have already returned from the dungeons, arenas, etc.)\n    require(_heroInstance.availableAt <= now);\n\n    // The information of the hero's class.\n    var _heroClassInfo = heroClasses[_heroInstance.heroClassId];\n\n    // Hero shouldn't level up exceed its max level.\n    require(_heroInstance.currentLevel < _heroClassInfo.maxLevel);\n\n    // Required Exp.\n    var requiredExp = getHeroRequiredExpForLevelUp(_tokenId);\n\n    // Need to have enough exp.\n    require(_heroInstance.currentExp >= requiredExp);\n\n    // Required Gold.\n    var requiredGold = getHeroRequiredGoldForLevelUp(_tokenId);\n\n    // Owner of token.\n    var _ownerOfToken = ownerOf(_tokenId);\n\n    // Need to have enough Gold balance.\n    require(addressToGoldDeposit[_ownerOfToken] >= requiredGold);\n\n    // Increase Level.\n    _heroInstance.currentLevel += 1;\n\n    // Increase Stats.\n    for (uint8 i = 0; i < 5; i++) {\n      _heroInstance.currentStats[i] = _heroClassInfo.baseStats[i] + (_heroInstance.currentLevel - 1) * _heroInstance.ivForStats[i];\n    }\n    \n    // Deduct exp.\n    _heroInstance.currentExp -= requiredExp;\n\n    // Deduct gold.\n    addressToGoldDeposit[_ownerOfToken] -= requiredGold;\n\n    // Fire event.\n    LevelUp(msg.sender, _tokenId, _heroInstance.currentLevel);\n  }\n\n  // @dev Transfer deposit (with the allowance pattern.)\n  function transferDeposit(uint256 _amount)\n    whenNotPaused\n    public\n  {\n    require(goldContract.allowance(msg.sender, this) >= _amount);\n\n    // Send msg.sender's Gold to this contract.\n    if (goldContract.transferFrom(msg.sender, this, _amount)) {\n       // Increment deposit.\n      addressToGoldDeposit[msg.sender] += _amount;\n    }\n  }\n\n  // @dev Withdraw deposit.\n  function withdrawDeposit(uint256 _amount)\n    public\n  {\n    require(addressToGoldDeposit[msg.sender] >= _amount);\n\n    // Send deposit of Golds to msg.sender. (Rather minting...)\n    if (goldContract.transfer(msg.sender, _amount)) {\n      // Decrement deposit.\n      addressToGoldDeposit[msg.sender] -= _amount;\n    }\n  }\n\n  // @dev return a pseudo random number between lower and upper bounds\n  function random(uint32 _upper, uint32 _lower)\n    private\n    returns (uint32)\n  {\n    require(_upper > _lower);\n\n    seed = uint32(keccak256(keccak256(block.blockhash(block.number), seed), now));\n    return seed % (_upper - _lower) + _lower;\n  }\n\n}\n\n\n/**\n * @title CryptoSagaCorrectedHeroStats\n * @dev Corrected hero stats is needed to fix the bug in hero stats.\n */\ncontract CryptoSagaCorrectedHeroStats {\n\n  // The hero contract.\n  CryptoSagaHero private heroContract;\n\n  // @dev Constructor.\n  function CryptoSagaCorrectedHeroStats(address _heroContractAddress)\n    public\n  {\n    heroContract = CryptoSagaHero(_heroContractAddress);\n  }\n\n  // @dev Get the hero's stats and some other infomation.\n  function getCorrectedStats(uint256 _tokenId)\n    external view\n    returns (uint32 currentLevel, uint32 currentExp, uint32[5] currentStats, uint32[5] ivs, uint32 bp)\n  {\n    var (, , _currentLevel, _currentExp, , , _currentStats, _ivs, ) = heroContract.getHeroInfo(_tokenId);\n    \n    if (_currentLevel != 1) {\n      for (uint8 i = 0; i < 5; i ++) {\n        _currentStats[i] += _ivs[i];\n      }\n    }\n\n    var _bp = _currentStats[0] + _currentStats[1] + _currentStats[2] + _currentStats[3] + _currentStats[4];\n    return (_currentLevel, _currentExp, _currentStats, _ivs, _bp);\n  }\n\n  // @dev Get corrected total BP of the address.\n  function getCorrectedTotalBPOfAddress(address _address)\n    external view\n    returns (uint32)\n  {\n    var _balance = heroContract.balanceOf(_address);\n\n    uint32 _totalBP = 0;\n\n    for (uint256 i = 0; i < _balance; i ++) {\n      var (, , _currentLevel, , , , _currentStats, _ivs, ) = heroContract.getHeroInfo(heroContract.getTokenIdOfAddressAndIndex(_address, i));\n      if (_currentLevel != 1) {\n        for (uint8 j = 0; j < 5; j ++) {\n          _currentStats[j] += _ivs[j];\n        }\n      }\n      _totalBP += (_currentStats[0] + _currentStats[1] + _currentStats[2] + _currentStats[3] + _currentStats[4]);\n    }\n\n    return _totalBP;\n  }\n\n  // @dev Get corrected total BP of the address.\n  function getCorrectedTotalBPOfTokens(uint256[] _tokens)\n    external view\n    returns (uint32)\n  {\n    uint32 _totalBP = 0;\n\n    for (uint256 i = 0; i < _tokens.length; i ++) {\n      var (, , _currentLevel, , , , _currentStats, _ivs, ) = heroContract.getHeroInfo(_tokens[i]);\n      if (_currentLevel != 1) {\n        for (uint8 j = 0; j < 5; j ++) {\n          _currentStats[j] += _ivs[j];\n        }\n      }\n      _totalBP += (_currentStats[0] + _currentStats[1] + _currentStats[2] + _currentStats[3] + _currentStats[4]);\n    }\n\n    return _totalBP;\n  }\n}\n\n\n/**\n * @title CryptoSagaDungeonProgress\n * @dev Storage contract for progress of dungeons.\n */\ncontract CryptoSagaDungeonProgress is Claimable, AccessDeploy {\n\n  // The progress of the player in dungeons.\n  mapping(address => uint32[25]) public addressToProgress;\n\n  // @dev Get progress.\n  function getProgressOfAddressAndId(address _address, uint32 _id)\n    external view\n    returns (uint32)\n  {\n    var _progressList = addressToProgress[_address];\n    return _progressList[_id];\n  }\n\n  // @dev Increment progress.\n  function incrementProgressOfAddressAndId(address _address, uint32 _id)\n    onlyAccessDeploy\n    public\n  {\n    var _progressList = addressToProgress[_address];\n    _progressList[_id]++;\n    addressToProgress[_address] = _progressList;\n  }\n}\n\n\n/**\n * @title CryptoSagaDungeonVer1\n * @dev The actual gameplay is done by this contract. Version 1.0.1.\n */\ncontract CryptoSagaDungeonVer1 is Claimable, Pausable {\n\n  struct EnemyCombination {\n    // Is non-default combintion?\n    bool isPersonalized;\n    // Enemy slots' class Id.\n    uint32[4] enemySlotClassIds;\n  }\n\n  struct PlayRecord {\n    // This is needed for reconstructing the record.\n    uint32 initialSeed;\n    // The progress of the dugoeon when this play record made.\n    uint32 progress;\n    // Hero's token ids.\n    uint256[4] tokenIds;\n    // Unit's class ids. 0 ~ 3: Heroes. 4 ~ 7: Mobs.\n    uint32[8] unitClassIds;\n    // Unit's levels. 0 ~ 3: Heroes. 4 ~ 7: Mobs.\n    uint32[8] unitLevels;\n    // Exp reward given.\n    uint32 expReward;\n    // Gold Reward given.\n    uint256 goldReward;\n  }\n\n  // This information can be reconstructed with seed and dateTime.\n  // In order for the optimization this won't be really used.\n  struct TurnInfo {\n    // Number of turns before a team was vanquished.\n    uint8 turnLength;\n    // Turn order of units.\n    uint8[8] turnOrder;\n    // Defender list. (The unit that is attacked.)\n    uint8[24] defenderList;\n    // Damage list. (The damage given to the defender.)\n    uint32[24] damageList;\n    // Heroes' original Exps.\n    uint32[4] originalExps;\n  }\n\n  // Progress contract.\n  CryptoSagaDungeonProgress private progressContract;\n\n  // The hero contract.\n  CryptoSagaHero private heroContract;\n\n  // Corrected hero stats contract.\n  CryptoSagaCorrectedHeroStats private correctedHeroContract;\n\n  // Gold contract.\n  Gold public goldContract;\n\n  // Card contract.\n  CryptoSagaCard public cardContract;\n\n  // The location Id of this contract.\n  // Will be used when calling deploy function of hero contract.\n  uint32 public locationId = 0;\n\n  // The dungeon cooldown time. (Default value: 15 mins.)\n  uint256 public coolDungeon = 900;\n\n  // Hero cooldown time. (Default value: 60 mins.)\n  uint256 public coolHero = 3600;\n\n  // The exp reward when clearing this dungeon.\n  uint32 public expReward = 100;\n\n  // The Gold reward when clearing this dungeon.\n  uint256 public goldReward = 1000000000000000000;\n\n  // The previous dungeon that should be cleared.\n  uint32 public previousDungeonId;\n\n  // The progress of the previous dungeon that should be cleared.\n  uint32 public requiredProgressOfPreviousDungeon;\n\n  // Turn data save.\n  bool public isTurnDataSaved = true;\n\n  // The enemies in this dungeon for the player.\n  mapping(address => EnemyCombination) public addressToEnemyCombination;\n\n  // Last game's play datetime.\n  mapping(address => uint256) public addressToPlayRecordDateTime;\n\n  // Last game's record of the player.\n  mapping(address => PlayRecord) public addressToPlayRecord;\n\n  // Additional information on last game's record of the player.\n  mapping(address => TurnInfo) public addressToTurnInfo;\n\n  // List of the Mobs possibly appear in this dungeon.\n  uint32[] public possibleMobClasses;\n\n  // Initial enemy combination.\n  // This will be shown when there's no play record.\n  EnemyCombination public initialEnemyCombination;\n\n  // Random seed.\n  uint32 private seed = 0;\n\n  // Event that is fired when a player try to clear this dungeon.\n  event TryDungeon(\n    address indexed _by,\n    uint32 _tryingProgress,\n    uint32 _progress,\n    bool _isSuccess\n  );\n\n  // @dev Get enemy combination.\n  function getEnemyCombinationOfAddress(address _address)\n    external view\n    returns (uint32[4])\n  {\n    // Retrieve enemy information.\n    // Instead of null check, isPersonalized check will tell the personalized mobs for this player exist.\n    var _enemyCombination = addressToEnemyCombination[_address];\n    if (_enemyCombination.isPersonalized == false) {\n      // Then let's use default value.\n      _enemyCombination = initialEnemyCombination;\n    }\n    return _enemyCombination.enemySlotClassIds;\n  }\n\n  // @dev Get initial enemy combination.\n  function getInitialEnemyCombination()\n    external view\n    returns (uint32[4])\n  {\n    return initialEnemyCombination.enemySlotClassIds;\n  }\n\n  // @dev Get play record's datetime.\n  function getLastPlayDateTime(address _address)\n    external view\n    returns (uint256 dateTime)\n  {\n    return addressToPlayRecordDateTime[_address];\n  }\n\n  // @dev Get previous game record.\n  function getPlayRecord(address _address)\n    external view\n    returns (uint32 initialSeed, uint32 progress, uint256[4] heroTokenIds, uint32[8] uintClassIds, uint32[8] unitLevels, uint32 expRewardGiven, uint256 goldRewardGiven, uint8 turnLength, uint8[8] turnOrder, uint8[24] defenderList, uint32[24] damageList)\n  {\n    PlayRecord memory _p = addressToPlayRecord[_address];\n    TurnInfo memory _t = addressToTurnInfo[_address];\n    return (_p.initialSeed, _p.progress, _p.tokenIds, _p.unitClassIds, _p.unitLevels, _p.expReward, _p.goldReward, _t.turnLength, _t.turnOrder, _t.defenderList, _t.damageList);\n  }\n\n  // @dev Get previous game record.\n  function getPlayRecordNoTurnData(address _address)\n    external view\n    returns (uint32 initialSeed, uint32 progress, uint256[4] heroTokenIds, uint32[8] uintClassIds, uint32[8] unitLevels, uint32 expRewardGiven, uint256 goldRewardGiven)\n  {\n    PlayRecord memory _p = addressToPlayRecord[_address];\n    return (_p.initialSeed, _p.progress, _p.tokenIds, _p.unitClassIds, _p.unitLevels, _p.expReward, _p.goldReward);\n  }\n\n  // @dev Set location id.\n  function setLocationId(uint32 _value)\n    onlyOwner\n    public\n  {\n    locationId = _value;\n  }\n\n  // @dev Set cooldown of this dungeon.\n  function setCoolDungeon(uint32 _value)\n    onlyOwner\n    public\n  {\n    coolDungeon = _value;\n  }\n\n  // @dev Set cooldown of heroes entered this dungeon.\n  function setCoolHero(uint32 _value)\n    onlyOwner\n    public\n  {\n    coolHero = _value;\n  }\n\n  // @dev Set the Exp given to the player when clearing this dungeon.\n  function setExpReward(uint32 _value)\n    onlyOwner\n    public\n  {\n    expReward = _value;\n  }\n\n  // @dev Set the Golds given to the player when clearing this dungeon.\n  function setGoldReward(uint256 _value)\n    onlyOwner\n    public\n  {\n    goldReward = _value;\n  }\n\n  // @dev Set wether the turn data saved or not.\n  function setIsTurnDataSaved(bool _value)\n    onlyOwner\n    public\n  {\n    isTurnDataSaved = _value;\n  }\n\n  // @dev Set initial enemy combination.\n  function setInitialEnemyCombination(uint32[4] _enemySlotClassIds)\n    onlyOwner\n    public\n  {\n    initialEnemyCombination.isPersonalized = false;\n    initialEnemyCombination.enemySlotClassIds = _enemySlotClassIds;\n  }\n\n  // @dev Set previous dungeon.\n  function setPreviousDungeoonId(uint32 _dungeonId)\n    onlyOwner\n    public\n  {\n    previousDungeonId = _dungeonId;\n  }\n\n  // @dev Set required progress of previous dungeon.\n  function setRequiredProgressOfPreviousDungeon(uint32 _progress)\n    onlyOwner\n    public\n  {\n    requiredProgressOfPreviousDungeon = _progress;\n  }\n\n  // @dev Set possible mobs in this dungeon.\n  function setPossibleMobs(uint32[] _classIds)\n    onlyOwner\n    public\n  {\n    possibleMobClasses = _classIds;\n  }\n\n  // @dev Constructor.\n  function CryptoSagaDungeonVer1(address _progressAddress, address _heroContractAddress, address _correctedHeroContractAddress, address _cardContractAddress, address _goldContractAddress, uint32 _locationId, uint256 _coolDungeon, uint256 _coolHero, uint32 _expReward, uint256 _goldReward, uint32 _previousDungeonId, uint32 _requiredProgressOfPreviousDungeon, uint32[4] _enemySlotClassIds, bool _isTurnDataSaved)\n    public\n  {\n    progressContract = CryptoSagaDungeonProgress(_progressAddress);\n    heroContract = CryptoSagaHero(_heroContractAddress);\n    correctedHeroContract = CryptoSagaCorrectedHeroStats(_correctedHeroContractAddress);\n    cardContract = CryptoSagaCard(_cardContractAddress);\n    goldContract = Gold(_goldContractAddress);\n    \n    locationId = _locationId;\n    coolDungeon = _coolDungeon;\n    coolHero = _coolHero;\n    expReward = _expReward;\n    goldReward = _goldReward;\n\n    previousDungeonId = _previousDungeonId;\n    requiredProgressOfPreviousDungeon = _requiredProgressOfPreviousDungeon;\n\n    initialEnemyCombination.isPersonalized = false;\n    initialEnemyCombination.enemySlotClassIds = _enemySlotClassIds;\n    \n    isTurnDataSaved = _isTurnDataSaved;\n  }\n  \n  // @dev Enter this dungeon.\n  function enterDungeon(uint256[4] _tokenIds, uint32 _tryingProgress)\n    whenNotPaused\n    public\n  {\n    // Each hero should be different ids.\n    require(_tokenIds[0] == 0 || (_tokenIds[0] != _tokenIds[1] && _tokenIds[0] != _tokenIds[2] && _tokenIds[0] != _tokenIds[3]));\n    require(_tokenIds[1] == 0 || (_tokenIds[1] != _tokenIds[0] && _tokenIds[1] != _tokenIds[2] && _tokenIds[1] != _tokenIds[3]));\n    require(_tokenIds[2] == 0 || (_tokenIds[2] != _tokenIds[0] && _tokenIds[2] != _tokenIds[1] && _tokenIds[2] != _tokenIds[3]));\n    require(_tokenIds[3] == 0 || (_tokenIds[3] != _tokenIds[0] && _tokenIds[3] != _tokenIds[1] && _tokenIds[3] != _tokenIds[2]));\n\n    // Check the previous dungeon's progress.\n    if (requiredProgressOfPreviousDungeon != 0) {\n      require(progressContract.getProgressOfAddressAndId(msg.sender, previousDungeonId) >= requiredProgressOfPreviousDungeon);\n    }\n\n    // 1 is the minimum prgress.\n    require(_tryingProgress > 0);\n\n    // Only up to 'progress + 1' is allowed.\n    require(_tryingProgress <= progressContract.getProgressOfAddressAndId(msg.sender, locationId) + 1);\n\n    // Check dungeon availability.\n    require(addressToPlayRecordDateTime[msg.sender] + coolDungeon <= now);\n\n    // Check ownership and availability check.\n    require(checkOwnershipAndAvailability(msg.sender, _tokenIds));\n\n    // Set play record datetime.\n    addressToPlayRecordDateTime[msg.sender] = now;\n\n    // Set seed.\n    seed += uint32(now);\n\n    // Define play record here.\n    PlayRecord memory _playRecord;\n    _playRecord.initialSeed = seed;\n    _playRecord.progress = _tryingProgress;\n    _playRecord.tokenIds[0] = _tokenIds[0];\n    _playRecord.tokenIds[1] = _tokenIds[1];\n    _playRecord.tokenIds[2] = _tokenIds[2];\n    _playRecord.tokenIds[3] = _tokenIds[3];\n\n    // The information that can give additional information.\n    TurnInfo memory _turnInfo;\n\n    // Step 1: Retrieve Hero information (0 ~ 3) & Enemy information (4 ~ 7).\n\n    uint32[5][8] memory _unitStats; // Stats of units for given levels and class ids.\n    uint8[2][8] memory _unitTypesAuras; // 0: Types of units for given levels and class ids. 1: Auras of units for given levels and class ids.\n\n    // Retrieve deployed hero information.\n    if (_tokenIds[0] != 0) {\n      _playRecord.unitClassIds[0] = heroContract.getHeroClassId(_tokenIds[0]);\n      (_playRecord.unitLevels[0], _turnInfo.originalExps[0], _unitStats[0], , ) = correctedHeroContract.getCorrectedStats(_tokenIds[0]);\n      (, , , , _unitTypesAuras[0][0], , _unitTypesAuras[0][1], , , ) = heroContract.getClassInfo(_playRecord.unitClassIds[0]);\n    }\n    if (_tokenIds[1] != 0) {\n      _playRecord.unitClassIds[1] = heroContract.getHeroClassId(_tokenIds[1]);\n      (_playRecord.unitLevels[1], _turnInfo.originalExps[1], _unitStats[1], , ) = correctedHeroContract.getCorrectedStats(_tokenIds[1]);\n      (, , , , _unitTypesAuras[1][0], , _unitTypesAuras[1][1], , , ) = heroContract.getClassInfo(_playRecord.unitClassIds[1]);\n    }\n    if (_tokenIds[2] != 0) {\n      _playRecord.unitClassIds[2] = heroContract.getHeroClassId(_tokenIds[2]);\n      (_playRecord.unitLevels[2], _turnInfo.originalExps[2], _unitStats[2], , ) = correctedHeroContract.getCorrectedStats(_tokenIds[2]);\n      (, , , , _unitTypesAuras[2][0], , _unitTypesAuras[2][1], , , ) = heroContract.getClassInfo(_playRecord.unitClassIds[2]);\n    }\n    if (_tokenIds[3] != 0) {\n      _playRecord.unitClassIds[3] = heroContract.getHeroClassId(_tokenIds[3]);\n      (_playRecord.unitLevels[3], _turnInfo.originalExps[3], _unitStats[3], , ) = correctedHeroContract.getCorrectedStats(_tokenIds[3]);\n      (, , , , _unitTypesAuras[3][0], , _unitTypesAuras[3][1], , , ) = heroContract.getClassInfo(_playRecord.unitClassIds[3]);\n    }\n\n    // Retrieve enemy information.\n    // Instead of null check, isPersonalized check will tell the personalized mobs for this player exist.\n    var _enemyCombination = addressToEnemyCombination[msg.sender];\n    if (_enemyCombination.isPersonalized == false) {\n      // Then let's use default value.\n      _enemyCombination = initialEnemyCombination;\n    }\n\n    uint32[5][8] memory _tmpEnemyBaseStatsAndIVs; // 0 ~ 3: Temp value for getting enemy base stats. 4 ~ 7: Temp value for getting enemy IVs.\n\n    // Retrieve mobs' class information. \n    (, , , , _unitTypesAuras[4][0], , _unitTypesAuras[4][1], _tmpEnemyBaseStatsAndIVs[0], _tmpEnemyBaseStatsAndIVs[4], ) = heroContract.getClassInfo(_enemyCombination.enemySlotClassIds[0]);\n    (, , , , _unitTypesAuras[5][0], , _unitTypesAuras[5][1], _tmpEnemyBaseStatsAndIVs[1], _tmpEnemyBaseStatsAndIVs[5], ) = heroContract.getClassInfo(_enemyCombination.enemySlotClassIds[1]);\n    (, , , , _unitTypesAuras[6][0], , _unitTypesAuras[6][1], _tmpEnemyBaseStatsAndIVs[2], _tmpEnemyBaseStatsAndIVs[6], ) = heroContract.getClassInfo(_enemyCombination.enemySlotClassIds[2]);\n    (, , , , _unitTypesAuras[7][0], , _unitTypesAuras[7][1], _tmpEnemyBaseStatsAndIVs[3], _tmpEnemyBaseStatsAndIVs[7], ) = heroContract.getClassInfo(_enemyCombination.enemySlotClassIds[3]);\n\n    _playRecord.unitClassIds[4] = _enemyCombination.enemySlotClassIds[0];\n    _playRecord.unitClassIds[5] = _enemyCombination.enemySlotClassIds[1];\n    _playRecord.unitClassIds[6] = _enemyCombination.enemySlotClassIds[2];\n    _playRecord.unitClassIds[7] = _enemyCombination.enemySlotClassIds[3];\n    \n    // Set level for enemies.\n    _playRecord.unitLevels[4] = _tryingProgress;\n    _playRecord.unitLevels[5] = _tryingProgress;\n    _playRecord.unitLevels[6] = _tryingProgress;\n    _playRecord.unitLevels[7] = _tryingProgress;\n\n    // With _tryingProgress, _tmpEnemyBaseStatsAndIVs, we can get the current stats of mobs.\n    for (uint8 i = 0; i < 5; i ++) {\n      _unitStats[4][i] = _tmpEnemyBaseStatsAndIVs[0][i] + _playRecord.unitLevels[4] * _tmpEnemyBaseStatsAndIVs[4][i];\n      _unitStats[5][i] = _tmpEnemyBaseStatsAndIVs[1][i] + _playRecord.unitLevels[5] * _tmpEnemyBaseStatsAndIVs[5][i];\n      _unitStats[6][i] = _tmpEnemyBaseStatsAndIVs[2][i] + _playRecord.unitLevels[6] * _tmpEnemyBaseStatsAndIVs[6][i];\n      _unitStats[7][i] = _tmpEnemyBaseStatsAndIVs[3][i] + _playRecord.unitLevels[7] * _tmpEnemyBaseStatsAndIVs[7][i];\n    }\n\n    // Step 2. Run the battle logic.\n    \n    // Firstly, we need to assign the unit's turn order with AGLs of the units.\n    uint32[8] memory _unitAGLs;\n    for (i = 0; i < 8; i ++) {\n      _unitAGLs[i] = _unitStats[i][2];\n    }\n    _turnInfo.turnOrder = getOrder(_unitAGLs);\n    \n    // Fight for 24 turns. (8 units x 3 rounds.)\n    _turnInfo.turnLength = 24;\n    for (i = 0; i < 24; i ++) {\n      if (_unitStats[4][4] == 0 && _unitStats[5][4] == 0 && _unitStats[6][4] == 0 && _unitStats[7][4] == 0) {\n        _turnInfo.turnLength = i;\n        break;\n      } else if (_unitStats[0][4] == 0 && _unitStats[1][4] == 0 && _unitStats[2][4] == 0 && _unitStats[3][4] == 0) {\n        _turnInfo.turnLength = i;\n        break;\n      }\n      \n      var _slotId = _turnInfo.turnOrder[(i % 8)];\n      if (_slotId < 4 && _tokenIds[_slotId] == 0) {\n        // This means the slot is empty.\n        // Defender should be default value.\n        _turnInfo.defenderList[i] = 127;\n      } else if (_unitStats[_slotId][4] == 0) {\n        // This means the unit on this slot is dead.\n        // Defender should be default value.\n        _turnInfo.defenderList[i] = 128;\n      } else {\n        // 1) Check number of attack targets that are alive.\n        uint8 _targetSlotId = 255;\n        if (_slotId < 4) {\n          if (_unitStats[4][4] > 0)\n            _targetSlotId = 4;\n          else if (_unitStats[5][4] > 0)\n            _targetSlotId = 5;\n          else if (_unitStats[6][4] > 0)\n            _targetSlotId = 6;\n          else if (_unitStats[7][4] > 0)\n            _targetSlotId = 7;\n        } else {\n          if (_unitStats[0][4] > 0)\n            _targetSlotId = 0;\n          else if (_unitStats[1][4] > 0)\n            _targetSlotId = 1;\n          else if (_unitStats[2][4] > 0)\n            _targetSlotId = 2;\n          else if (_unitStats[3][4] > 0)\n            _targetSlotId = 3;\n        }\n        \n        // Target is the defender.\n        _turnInfo.defenderList[i] = _targetSlotId;\n        \n        // Base damage. (Attacker's ATK * 1.5 - Defender's DEF).\n        uint32 _damage = 10;\n        if ((_unitStats[_slotId][0] * 150 / 100) > _unitStats[_targetSlotId][1])\n          _damage = max((_unitStats[_slotId][0] * 150 / 100) - _unitStats[_targetSlotId][1], 10);\n        else\n          _damage = 10;\n\n        // Check miss / success.\n        if ((_unitStats[_slotId][3] * 150 / 100) > _unitStats[_targetSlotId][2]) {\n          if (min(max(((_unitStats[_slotId][3] * 150 / 100) - _unitStats[_targetSlotId][2]), 75), 99) <= random(100, 0))\n            _damage = _damage * 0;\n        }\n        else {\n          if (75 <= random(100, 0))\n            _damage = _damage * 0;\n        }\n\n        // Is the attack critical?\n        if (_unitStats[_slotId][3] > _unitStats[_targetSlotId][3]) {\n          if (min(max((_unitStats[_slotId][3] - _unitStats[_targetSlotId][3]), 5), 75) > random(100, 0))\n            _damage = _damage * 150 / 100;\n        }\n        else {\n          if (5 > random(100, 0))\n            _damage = _damage * 150 / 100;\n        }\n\n        // Is attacker has the advantageous Type?\n        if (_unitTypesAuras[_slotId][0] == 0 && _unitTypesAuras[_targetSlotId][0] == 1) // Fighter > Rogue\n          _damage = _damage * 125 / 100;\n        else if (_unitTypesAuras[_slotId][0] == 1 && _unitTypesAuras[_targetSlotId][0] == 2) // Rogue > Mage\n          _damage = _damage * 125 / 100;\n        else if (_unitTypesAuras[_slotId][0] == 2 && _unitTypesAuras[_targetSlotId][0] == 0) // Mage > Fighter\n          _damage = _damage * 125 / 100;\n\n        // Is attacker has the advantageous Aura?\n        if (_unitTypesAuras[_slotId][1] == 0 && _unitTypesAuras[_targetSlotId][1] == 1) // Water > Fire\n          _damage = _damage * 150 / 100;\n        else if (_unitTypesAuras[_slotId][1] == 1 && _unitTypesAuras[_targetSlotId][1] == 2) // Fire > Nature\n          _damage = _damage * 150 / 100;\n        else if (_unitTypesAuras[_slotId][1] == 2 && _unitTypesAuras[_targetSlotId][1] == 0) // Nature > Water\n          _damage = _damage * 150 / 100;\n        else if (_unitTypesAuras[_slotId][1] == 3 && _unitTypesAuras[_targetSlotId][1] == 4) // Light > Darkness\n          _damage = _damage * 150 / 100;\n        else if (_unitTypesAuras[_slotId][1] == 4 && _unitTypesAuras[_targetSlotId][1] == 3) // Darkness > Light\n          _damage = _damage * 150 / 100;\n        \n        // Apply damage so that reduce hp of defender.\n        if(_unitStats[_targetSlotId][4] > _damage)\n          _unitStats[_targetSlotId][4] -= _damage;\n        else\n          _unitStats[_targetSlotId][4] = 0;\n\n        // Save damage to play record.\n        _turnInfo.damageList[i] = _damage;\n      }\n    }\n    \n    // Step 3. Apply the result of this battle.\n\n    // Set heroes deployed.\n    if (_tokenIds[0] != 0)\n      heroContract.deploy(_tokenIds[0], locationId, coolHero);\n    if (_tokenIds[1] != 0)\n      heroContract.deploy(_tokenIds[1], locationId, coolHero);\n    if (_tokenIds[2] != 0)\n      heroContract.deploy(_tokenIds[2], locationId, coolHero);\n    if (_tokenIds[3] != 0)\n      heroContract.deploy(_tokenIds[3], locationId, coolHero);\n\n    uint8 _deadEnemies = 0;\n\n    // Check result.\n    if (_unitStats[4][4] == 0)\n      _deadEnemies ++;\n    if (_unitStats[5][4] == 0)\n      _deadEnemies ++;\n    if (_unitStats[6][4] == 0)\n      _deadEnemies ++;\n    if (_unitStats[7][4] == 0)\n      _deadEnemies ++;\n      \n    if (_deadEnemies == 4) {\n      // Fire TryDungeon event.\n      TryDungeon(msg.sender, _tryingProgress, progressContract.getProgressOfAddressAndId(msg.sender, locationId), true);\n      \n      // Check for progress.\n      if (_tryingProgress == progressContract.getProgressOfAddressAndId(msg.sender, locationId) + 1) {\n        // Increment progress.\n        progressContract.incrementProgressOfAddressAndId(msg.sender, locationId);\n        // Rewards.\n        (_playRecord.expReward, _playRecord.goldReward) = giveReward(_tokenIds, _tryingProgress, _deadEnemies, false, _turnInfo.originalExps);\n        // For every 10th floor(progress), Dungeon Chest card is given.\n        if (_tryingProgress % 10 == 0) {\n          cardContract.mint(msg.sender, 1, 3);\n        }\n      } else {\n        // Rewards for already cleared dungeon.\n        (_playRecord.expReward, _playRecord.goldReward) = giveReward(_tokenIds, _tryingProgress, _deadEnemies, true, _turnInfo.originalExps);\n      }\n\n      // New enemy combination for the player.\n      createNewCombination(msg.sender);\n    }\n    else {\n      // Fire TryDungeon event.\n      TryDungeon(msg.sender, _tryingProgress, progressContract.getProgressOfAddressAndId(msg.sender, locationId), false);\n\n      // Rewards.\n      (_playRecord.expReward, _playRecord.goldReward) = giveReward(_tokenIds, _tryingProgress, _deadEnemies, false, _turnInfo.originalExps);\n    }\n\n    // Save the result of this gameplay.\n    addressToPlayRecord[msg.sender] = _playRecord;\n\n    // Save the turn data.\n    // This is commented as this information can be reconstructed with intitial seed and date time.\n    // By commenting this, we can reduce about 400k gas.\n    if (isTurnDataSaved) {\n      addressToTurnInfo[msg.sender] = _turnInfo;\n    }\n  }\n\n  // @dev Check ownership.\n  function checkOwnershipAndAvailability(address _playerAddress, uint256[4] _tokenIds)\n    private view\n    returns(bool)\n  {\n    if ((_tokenIds[0] == 0 || heroContract.ownerOf(_tokenIds[0]) == _playerAddress) && (_tokenIds[1] == 0 || heroContract.ownerOf(_tokenIds[1]) == _playerAddress) && (_tokenIds[2] == 0 || heroContract.ownerOf(_tokenIds[2]) == _playerAddress) && (_tokenIds[3] == 0 || heroContract.ownerOf(_tokenIds[3]) == _playerAddress)) {\n      \n      // Retrieve avail time of heroes.\n      uint256[4] memory _heroAvailAts;\n      if (_tokenIds[0] != 0)\n        ( , , , , , _heroAvailAts[0], , , ) = heroContract.getHeroInfo(_tokenIds[0]);\n      if (_tokenIds[1] != 0)\n        ( , , , , , _heroAvailAts[1], , , ) = heroContract.getHeroInfo(_tokenIds[1]);\n      if (_tokenIds[2] != 0)\n        ( , , , , , _heroAvailAts[2], , , ) = heroContract.getHeroInfo(_tokenIds[2]);\n      if (_tokenIds[3] != 0)\n        ( , , , , , _heroAvailAts[3], , , ) = heroContract.getHeroInfo(_tokenIds[3]);\n\n      if (_heroAvailAts[0] <= now && _heroAvailAts[1] <= now && _heroAvailAts[2] <= now && _heroAvailAts[3] <= now) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  // @dev New combination of mobs.\n  //  The combination is personalized by players, and refreshed when the dungeon cleared.\n  function createNewCombination(address _playerAddress)\n    private\n  {\n    EnemyCombination memory _newCombination;\n    _newCombination.isPersonalized = true;\n    for (uint8 i = 0; i < 4; i++) {\n      _newCombination.enemySlotClassIds[i] = possibleMobClasses[random(uint32(possibleMobClasses.length), 0)];\n    }\n    addressToEnemyCombination[_playerAddress] = _newCombination;\n  }\n\n  // @dev Give rewards.\n  function giveReward(uint256[4] _heroes, uint32 _progress, uint8 _numberOfKilledEnemies, bool _isClearedBefore, uint32[4] _originalExps)\n    private\n    returns (uint32 expRewardGiven, uint256 goldRewardGiven)\n  {\n    uint256 _goldRewardGiven;\n    uint32 _expRewardGiven;\n    if (_numberOfKilledEnemies != 4) {\n      // In case lost.\n      // Give baseline gold reward.\n      _goldRewardGiven = goldReward / 25 * sqrt(_progress);\n      _expRewardGiven = expReward * _numberOfKilledEnemies / 4 / 5 * sqrt(_progress / 4 + 1);\n    } else if (_isClearedBefore == true) {\n      // Did win, but this progress has been already cleared before.\n      _goldRewardGiven = goldReward / 5 * sqrt(_progress);\n      _expRewardGiven = expReward / 5 * sqrt(_progress / 4 + 1);\n    } else {\n      // Firstly cleared the progress.\n      _goldRewardGiven = goldReward * sqrt(_progress);\n      _expRewardGiven = expReward * sqrt(_progress / 4 + 1);\n    }\n\n    // Give reward Gold.\n    goldContract.mint(msg.sender, _goldRewardGiven);\n    \n    // Give reward EXP.\n    if(_heroes[0] != 0)\n      heroContract.addExp(_heroes[0], uint32(2)**32 - _originalExps[0] + _expRewardGiven);\n    if(_heroes[1] != 0)\n      heroContract.addExp(_heroes[1], uint32(2)**32 - _originalExps[1] + _expRewardGiven);\n    if(_heroes[2] != 0)\n      heroContract.addExp(_heroes[2], uint32(2)**32 - _originalExps[2] + _expRewardGiven);\n    if(_heroes[3] != 0)\n      heroContract.addExp(_heroes[3], uint32(2)**32 - _originalExps[3] + _expRewardGiven);\n\n    return (_expRewardGiven, _goldRewardGiven);\n  }\n\n  // @dev Return a pseudo random number between lower and upper bounds\n  function random(uint32 _upper, uint32 _lower)\n    private\n    returns (uint32)\n  {\n    require(_upper > _lower);\n\n    seed = seed % uint32(1103515245) + 12345;\n    return seed % (_upper - _lower) + _lower;\n  }\n\n  // @dev Retreive order based on given array _by.\n  function getOrder(uint32[8] _by)\n    private pure\n    returns (uint8[8])\n  {\n    uint8[8] memory _order = [uint8(0), 1, 2, 3, 4, 5, 6, 7];\n    for (uint8 i = 0; i < 8; i ++) {\n      for (uint8 j = i + 1; j < 8; j++) {\n        if (_by[i] < _by[j]) {\n          uint32 tmp1 = _by[i];\n          _by[i] = _by[j];\n          _by[j] = tmp1;\n          uint8 tmp2 = _order[i];\n          _order[i] = _order[j];\n          _order[j] = tmp2;\n        }\n      }\n    }\n    return _order;\n  }\n\n  // @return Bigger value of two uint32s.\n  function max(uint32 _value1, uint32 _value2)\n    private pure\n    returns (uint32)\n  {\n    if(_value1 >= _value2)\n      return _value1;\n    else\n      return _value2;\n  }\n\n  // @return Bigger value of two uint32s.\n  function min(uint32 _value1, uint32 _value2)\n    private pure\n    returns (uint32)\n  {\n    if(_value2 >= _value1)\n      return _value1;\n    else\n      return _value2;\n  }\n\n  // @return Square root of the given value.\n  function sqrt(uint32 _value) \n    private pure\n    returns (uint32) \n  {\n    uint32 z = (_value + 1) / 2;\n    uint32 y = _value;\n    while (z < y) {\n      y = z;\n      z = (_value / z + z) / 2;\n    }\n    return y;\n  }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"previousDungeonId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_classIds\",\"type\":\"uint32[]\"}],\"name\":\"setPossibleMobs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getLastPlayDateTime\",\"outputs\":[{\"name\":\"dateTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiredProgressOfPreviousDungeon\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToPlayRecord\",\"outputs\":[{\"name\":\"initialSeed\",\"type\":\"uint32\"},{\"name\":\"progress\",\"type\":\"uint32\"},{\"name\":\"expReward\",\"type\":\"uint32\"},{\"name\":\"goldReward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setIsTurnDataSaved\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_progress\",\"type\":\"uint32\"}],\"name\":\"setRequiredProgressOfPreviousDungeon\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToTurnInfo\",\"outputs\":[{\"name\":\"turnLength\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint32\"}],\"name\":\"setCoolDungeon\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTurnDataSaved\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint32\"}],\"name\":\"setExpReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dungeonId\",\"type\":\"uint32\"}],\"name\":\"setPreviousDungeoonId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"possibleMobClasses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goldReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cardContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setGoldReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enemySlotClassIds\",\"type\":\"uint32[4]\"}],\"name\":\"setInitialEnemyCombination\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getEnemyCombinationOfAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32[4]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getPlayRecord\",\"outputs\":[{\"name\":\"initialSeed\",\"type\":\"uint32\"},{\"name\":\"progress\",\"type\":\"uint32\"},{\"name\":\"heroTokenIds\",\"type\":\"uint256[4]\"},{\"name\":\"uintClassIds\",\"type\":\"uint32[8]\"},{\"name\":\"unitLevels\",\"type\":\"uint32[8]\"},{\"name\":\"expRewardGiven\",\"type\":\"uint32\"},{\"name\":\"goldRewardGiven\",\"type\":\"uint256\"},{\"name\":\"turnLength\",\"type\":\"uint8\"},{\"name\":\"turnOrder\",\"type\":\"uint8[8]\"},{\"name\":\"defenderList\",\"type\":\"uint8[24]\"},{\"name\":\"damageList\",\"type\":\"uint32[24]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToEnemyCombination\",\"outputs\":[{\"name\":\"isPersonalized\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coolDungeon\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint32\"}],\"name\":\"setLocationId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coolHero\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialEnemyCombination\",\"outputs\":[{\"name\":\"isPersonalized\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitialEnemyCombination\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32[4]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locationId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getPlayRecordNoTurnData\",\"outputs\":[{\"name\":\"initialSeed\",\"type\":\"uint32\"},{\"name\":\"progress\",\"type\":\"uint32\"},{\"name\":\"heroTokenIds\",\"type\":\"uint256[4]\"},{\"name\":\"uintClassIds\",\"type\":\"uint32[8]\"},{\"name\":\"unitLevels\",\"type\":\"uint32[8]\"},{\"name\":\"expRewardGiven\",\"type\":\"uint32\"},{\"name\":\"goldRewardGiven\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[4]\"},{\"name\":\"_tryingProgress\",\"type\":\"uint32\"}],\"name\":\"enterDungeon\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint32\"}],\"name\":\"setCoolHero\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goldContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToPlayRecordDateTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_progressAddress\",\"type\":\"address\"},{\"name\":\"_heroContractAddress\",\"type\":\"address\"},{\"name\":\"_correctedHeroContractAddress\",\"type\":\"address\"},{\"name\":\"_cardContractAddress\",\"type\":\"address\"},{\"name\":\"_goldContractAddress\",\"type\":\"address\"},{\"name\":\"_locationId\",\"type\":\"uint32\"},{\"name\":\"_coolDungeon\",\"type\":\"uint256\"},{\"name\":\"_coolHero\",\"type\":\"uint256\"},{\"name\":\"_expReward\",\"type\":\"uint32\"},{\"name\":\"_goldReward\",\"type\":\"uint256\"},{\"name\":\"_previousDungeonId\",\"type\":\"uint32\"},{\"name\":\"_requiredProgressOfPreviousDungeon\",\"type\":\"uint32\"},{\"name\":\"_enemySlotClassIds\",\"type\":\"uint32[4]\"},{\"name\":\"_isTurnDataSaved\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tryingProgress\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"_progress\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"_isSuccess\",\"type\":\"bool\"}],\"name\":\"TryDungeon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "60606040526001805460a060020a60ff02191690556006805460a060020a63ffffffff0219169055610384600755610e106008556009805463ffffffff19908116606417909155670de0b6b3a7640000600a55600b8054604060020a60ff0219166801000000000000000017905560138054909116905534156200008257600080fd5b6040516102208062004e6983398101604052808051919060200180519190602001805191906020018051919060200180519190602001805191906020018051919060200180519190602001805191906020018051919060200180519190602001805191602082019160a0018051906020019091905050336000806101000a815481600160a060020a030219169083600160a060020a031602179055508d600260006101000a815481600160a060020a030219169083600160a060020a031602179055508c600360006101000a815481600160a060020a030219169083600160a060020a031602179055508b600460006101000a815481600160a060020a030219169083600160a060020a031602179055508a600660006101000a815481600160a060020a030219169083600160a060020a0316021790555089600560006101000a815481600160a060020a030219169083600160a060020a0316021790555088600660146101000a81548163ffffffff021916908363ffffffff160217905550876007819055508660088190555085600960006101000a81548163ffffffff021916908363ffffffff16021790555084600a8190555083600b60006101000a81548163ffffffff021916908363ffffffff16021790555082600b60046101000a81548163ffffffff021916908363ffffffff1602179055506000601160000160006101000a81548160ff021916908315150217905550816011600101906004620002ae929190620002e7565b50600b80549115156801000000000000000002604060020a60ff021990921691909117905550620003b19b505050505050505050505050565b600183019183908215620003785791602002820160005b838211156200034457835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302620002fe565b8015620003765782816101000a81549063ffffffff021916905560040160208160030104928301926001030262000344565b505b50620003869291506200038a565b5090565b620003ae91905b808211156200038657805463ffffffff1916815560010162000391565b90565b614aa880620003c16000396000f3006060604052600436106101c95763ffffffff60e060020a600035041663040177b781146101ce578063063ca521146101fa5780630e0304f71461024b5780630ec89f2b1461027c5780630faac0e21461028f5780632b99f3e1146102e157806334eb3200146102f95780633789ddd2146103155780633872b3ec1461034a5780633f4ba83a1461036657806345fd3666146103795780634a5e4fa8146103a05780634cc78983146103bc5780634e71e0c8146103d8578063510c72ae146103eb5780635c975abb1461040157806360e587f914610414578063693bd2d0146104275780638456cb5914610456578063862eb9c01461046957806387a977521461047f5780638da5cb5b146104b75780638f3a8982146104ca5780639686898a14610521578063be25a61c14610688578063c3fb31a4146106a7578063c4e6aaa6146106ba578063d9c76d61146106d6578063da8300d2146106e9578063db7f1e6b146106fc578063e30c39781461070f578063e8aadc3f14610722578063eeb8491014610735578063f019c5da14610814578063f2fde38b14610827578063fa99d7ae14610846578063fc36cc9d14610886578063fc996557146108a2578063fd07e1fd146108b5575b600080fd5b34156101d957600080fd5b6101e16108d4565b60405163ffffffff909116815260200160405180910390f35b341561020557600080fd5b61024960046024813581810190830135806020818102016040519081016040528093929190818152602001838360200280828437509496506108e095505050505050565b005b341561025657600080fd5b61026a600160a060020a0360043516610912565b60405190815260200160405180910390f35b341561028757600080fd5b6101e161092d565b341561029a57600080fd5b6102ae600160a060020a0360043516610941565b60405163ffffffff9485168152928416602084015292166040808301919091526060820192909252608001905180910390f35b34156102ec57600080fd5b6102496004351515610976565b341561030457600080fd5b61024963ffffffff600435166109b9565b341561032057600080fd5b610334600160a060020a03600435166109fc565b60405160ff909116815260200160405180910390f35b341561035557600080fd5b61024963ffffffff60043516610a11565b341561037157600080fd5b610249610a37565b341561038457600080fd5b61038c610ab6565b604051901515815260200160405180910390f35b34156103ab57600080fd5b61024963ffffffff60043516610acb565b34156103c757600080fd5b61024963ffffffff60043516610b02565b34156103e357600080fd5b610249610b39565b34156103f657600080fd5b6101e1600435610bc7565b341561040c57600080fd5b61038c610bff565b341561041f57600080fd5b61026a610c0f565b341561043257600080fd5b61043a610c15565b604051600160a060020a03909116815260200160405180910390f35b341561046157600080fd5b610249610c24565b341561047457600080fd5b610249600435610ca8565b341561048a57600080fd5b61024960046084818060806040519081016040529190828260808082843750939550610cc8945050505050565b34156104c257600080fd5b61043a610cfa565b34156104d557600080fd5b6104e9600160a060020a0360043516610d09565b6040518082608080838360005b8381101561050e5780820151838201526020016104f6565b5050505090500191505060405180910390f35b341561052c57600080fd5b610540600160a060020a0360043516610d9c565b60405163ffffffff808d1682528b166020820152604081018a608080838360005b83811015610579578082015183820152602001610561565b5050505090500189600860200280838360005b838110156105a457808201518382015260200161058c565b5050505090500188600860200280838360005b838110156105cf5780820151838201526020016105b7565b5050505063ffffffff8a169201918252506020810187905260ff861660408201526060018461010080838360005b838110156106155780820151838201526020016105fd565b5050505090500183601860200280838360005b83811015610640578082015183820152602001610628565b5050505090500182601860200280838360005b8381101561066b578082015183820152602001610653565b505050509050019b50505050505050505050505060405180910390f35b341561069357600080fd5b61038c600160a060020a0360043516611185565b34156106b257600080fd5b61026a61119a565b34156106c557600080fd5b61024963ffffffff600435166111a0565b34156106e157600080fd5b61026a6111f2565b34156106f457600080fd5b61038c6111f8565b341561070757600080fd5b6104e9611201565b341561071a57600080fd5b61043a61126a565b341561072d57600080fd5b6101e1611279565b341561074057600080fd5b610754600160a060020a036004351661128c565b60405163ffffffff8089168252871660208201526040810186608080838360005b8381101561078d578082015183820152602001610775565b5050505090500185600860200280838360005b838110156107b85780820151838201526020016107a0565b5050505090500184600860200280838360005b838110156107e35780820151838201526020016107cb565b505050509050018363ffffffff1663ffffffff16815260200182815260200197505050505050505060405180910390f35b341561081f57600080fd5b6101e1611450565b341561083257600080fd5b610249600160a060020a036004351661145c565b341561085157600080fd5b610249600460848180608060405190810160405291908282608080828437509395505050913563ffffffff1691506114a69050565b341561089157600080fd5b61024963ffffffff6004351661390b565b34156108ad57600080fd5b61043a613931565b34156108c057600080fd5b61026a600160a060020a0360043516613940565b600b5463ffffffff1681565b60005433600160a060020a039081169116146108fb57600080fd5b601081805161090e929160200190614632565b5050565b600160a060020a03166000908152600d602052604090205490565b600b54640100000000900463ffffffff1681565b600e6020526000908152604090208054600782015460089092015463ffffffff80831693640100000000909304811692169084565b60005433600160a060020a0390811691161461099157600080fd5b600b8054911515680100000000000000000268ff000000000000000019909216919091179055565b60005433600160a060020a039081169116146109d457600080fd5b600b805463ffffffff9092166401000000000267ffffffff0000000019909216919091179055565b600f6020526000908152604090205460ff1681565b60005433600160a060020a03908116911614610a2c57600080fd5b63ffffffff16600755565b60005433600160a060020a03908116911614610a5257600080fd5b60015460a060020a900460ff161515610a6a57600080fd5b6001805474ff0000000000000000000000000000000000000000191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b600b5468010000000000000000900460ff1681565b60005433600160a060020a03908116911614610ae657600080fd5b6009805463ffffffff191663ffffffff92909216919091179055565b60005433600160a060020a03908116911614610b1d57600080fd5b600b805463ffffffff191663ffffffff92909216919091179055565b60015433600160a060020a03908116911614610b5457600080fd5b600154600054600160a060020a0391821691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b6010805482908110610bd557fe5b9060005260206000209060089182820401919006600402915054906101000a900463ffffffff1681565b60015460a060020a900460ff1681565b600a5481565b600654600160a060020a031681565b60005433600160a060020a03908116911614610c3f57600080fd5b60015460a060020a900460ff1615610c5657600080fd5b6001805474ff0000000000000000000000000000000000000000191660a060020a1790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b60005433600160a060020a03908116911614610cc357600080fd5b600a55565b60005433600160a060020a03908116911614610ce357600080fd5b6011805460ff1916905561090e60128260046146e1565b600054600160a060020a031681565b610d1161473a565b600160a060020a0382166000908152600c60205260409020805460ff161515610d38575060115b6001810160046080604051908101604052919060808301826000855b82829054906101000a900463ffffffff1663ffffffff1681526020019060040190602082600301049283019260010382029150808411610d5457509498975050505050505050565b600080610da7614762565b610daf614789565b610db7614789565b6000806000610dc4614789565b610dcc6147a4565b610dd46147a4565b610ddc6147bf565b610de461480f565b600160a060020a038e166000908152600e6020526040908190209060e090519081016040908152825463ffffffff80821684526401000000009091041660208301529091908083019060018301906004906080905190810160405291906080830182845b815481526020019060010190808311610e4857505050918352505060200160058201600861010060405190810160405291906101008301826000855b82829054906101000a900463ffffffff1663ffffffff1681526020019060040190602082600301049283019260010382029150808411610e84579050505050918352505060200160068201600861010060405190810160405291906101008301826000855b82829054906101000a900463ffffffff1663ffffffff1681526020019060040190602082600301049283019260010382029150808411610ee9579050505050505081526020016007820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016008820154815250509150600f60008f600160a060020a0316600160a060020a0316815260200190815260200160002060a06040519081016040908152825460ff16825290919060208301906001830190600890610100905190810160405291906101008301826000855b825461010083900a900460ff16815260206001928301818104948501949093039092029101808411610fc0579050505050918352505060200160028201601861030060405190810160405291906103008301826000855b825461010083900a900460ff16815260206001928301818104948501949093039092029101808411611017579050505050918352505060200160038201601861030060405190810160405291906103008301826000855b82829054906101000a900463ffffffff1663ffffffff168152602001906004019060208260030104928301926001038202915080841161106e57905050505091835250506020016006820160046080604051908101604052919060808301826000855b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116110d15790505050505050815250509050816000015182602001518360400151846060015185608001518660a001518760c001518751886020015189604001518a606001518898508797508696508292508191508090509c509c509c509c509c509c509c509c509c509c509c50505091939597999b90929496989a50565b600c6020526000908152604090205460ff1681565b60075481565b60005433600160a060020a039081169116146111bb57600080fd5b6006805463ffffffff90921660a060020a0277ffffffff000000000000000000000000000000000000000019909216919091179055565b60085481565b60115460ff1681565b61120961473a565b601260046080604051908101604052919060808301826000855b82829054906101000a900463ffffffff1663ffffffff1681526020019060040190602082600301049283019260010382029150808411611223579050505050505090505b90565b600154600160a060020a031681565b60065460a060020a900463ffffffff1681565b600080611297614762565b61129f614789565b6112a7614789565b6000806112b26147bf565b600160a060020a0389166000908152600e6020526040908190209060e090519081016040908152825463ffffffff80821684526401000000009091041660208301529091908083019060018301906004906080905190810160405291906080830182845b81548152602001906001019080831161131657505050918352505060200160058201600861010060405190810160405291906101008301826000855b82829054906101000a900463ffffffff1663ffffffff1681526020019060040190602082600301049283019260010382029150808411611352579050505050918352505060200160068201600861010060405190810160405291906101008301826000855b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116113b757505050928452505050600782015463ffffffff1660208201526008909101546040909101529050805181602001518260400151836060015184608001518560a001518660c00151959f949e50929c50909a509850965090945092505050565b60095463ffffffff1681565b60005433600160a060020a0390811691161461147757600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6114ae6147bf565b6114b661480f565b6114be614857565b6114c6614885565b60006114d0614857565b60006114da614789565b60015460009081908190819060a060020a900460ff16156114fa57600080fd5b8d51158061152e575060208e01518e511415801561151d575060408e01518e5114155b801561152e575060608e01518e5114155b151561153957600080fd5b60208e0151158061157657508d5160208f015114158015611562575060408e015160208f015114155b8015611576575060608e015160208f015114155b151561158157600080fd5b60408e015115806115be57508d5160408f0151141580156115aa575060208e015160408f015114155b80156115be575060608e015160408f015114155b15156115c957600080fd5b60608e0151158061160657508d5160608f0151141580156115f2575060208e015160608f015114155b8015611606575060408e015160608f015114155b151561161157600080fd5b600b54640100000000900463ffffffff16156116d057600b5460025463ffffffff6401000000008304811692600160a060020a039092169163e156c5939133911660006040516020015260405163ffffffff84811660e060020a028252600160a060020a0393909316600482015291166024820152604401602060405180830381600087803b15156116a257600080fd5b6102c65a03f115156116b357600080fd5b5050506040518051905063ffffffff16101515156116d057600080fd5b600063ffffffff8e16116116e357600080fd5b600254600654600160a060020a039091169063e156c59390339060a060020a900463ffffffff1660006040516020015260405163ffffffff84811660e060020a028252600160a060020a0393909316600482015291166024820152604401602060405180830381600087803b151561175a57600080fd5b6102c65a03f1151561176b57600080fd5b5050506040518051905060010163ffffffff168d63ffffffff161115151561179257600080fd5b600754600160a060020a0333166000908152600d602052604090205442910111156117bc57600080fd5b6117c6338f613952565b15156117d157600080fd5b600160a060020a0333166000908152600d6020908152604090912042908190556013805463ffffffff808216909301831663ffffffff19909116179081905581168e528e16908d01528d518c604001515260208e01518c604001516020015260408e01518c604001516040015260608e01518c60400151606001528d5115611a4157600354600160a060020a031663d1f699028f5160006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b15156118a557600080fd5b6102c65a03f115156118b657600080fd5b505050604051805190508c6060015163ffffffff919091169052600454600160a060020a031663763901448f5160006040516101a0015260405160e060020a63ffffffff841602815260048101919091526024016101a060405180830381600087803b151561192457600080fd5b6102c65a03f1151561193557600080fd5b5050506040518051906020018051906020018060a0018060a0018051506020016040525060808f015160808f0151918e5263ffffffff92831690915291169052600354600160a060020a0316636ccd5cbe60608e01515160006040516102c0015260405163ffffffff83811660e060020a0282529190911660048201526024016102c060405180830381600087803b15156119cf57600080fd5b6102c65a03f115156119e057600080fd5b50505060405180519060200180519060200180519060200180519060200180519060200180519060200180516102009091016040529195509093508d925060009150611a299050565b60200201518b5160ff92831660209190910152911690525b60208e015115611c5e57600354600160a060020a031663d1f699028f6001602002015160006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515611aa357600080fd5b6102c65a03f11515611ab457600080fd5b505050604051805190508c60600151600163ffffffff9092166020929092020152600454600160a060020a031663763901448f6001602002015160006040516101a0015260405160e060020a63ffffffff841602815260048101919091526024016101a060405180830381600087803b1515611b2f57600080fd5b6102c65a03f11515611b4057600080fd5b5050506040518051906020018051906020018060a0018060a0018051506020016040525060808f015160200160808f015160208f81019390935263ffffffff93841692019190915291169052600354600160a060020a0316636ccd5cbe60608e01516020015160006040516102c0015260405163ffffffff83811660e060020a0282529190911660048201526024016102c060405180830381600087803b1515611be957600080fd5b6102c65a03f11515611bfa57600080fd5b50505060405180519060200180519060200180519060200180519060200180519060200180519060200180516102009091016040529195509093508d925060019150611c439050565b602002015160208c015160ff92831660209190910152911690525b60408e015115611e7b57600354600160a060020a031663d1f699028f6002602002015160006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515611cc057600080fd5b6102c65a03f11515611cd157600080fd5b505050604051805190508c60600151600263ffffffff9092166020929092020152600454600160a060020a031663763901448f6002602002015160006040516101a0015260405160e060020a63ffffffff841602815260048101919091526024016101a060405180830381600087803b1515611d4c57600080fd5b6102c65a03f11515611d5d57600080fd5b5050506040518051906020018051906020018060a0018060a0018051506020016040525060808f015160400160808f015160408f81019390935263ffffffff93841692019190915291169052600354600160a060020a0316636ccd5cbe60608e01516040015160006040516102c0015260405163ffffffff83811660e060020a0282529190911660048201526024016102c060405180830381600087803b1515611e0657600080fd5b6102c65a03f11515611e1757600080fd5b50505060405180519060200180519060200180519060200180519060200180519060200180519060200180516102009091016040529195509093508d925060029150611e609050565b602002015160408c015160ff92831660209190910152911690525b60608e0151156120bc57600360009054906101000a9004600160a060020a0316600160a060020a031663d1f699028f6003600481101515611eb857fe5b602002015160006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515611efc57600080fd5b6102c65a03f11515611f0d57600080fd5b505050604051805190508c60600151600363ffffffff9092166020929092020152600454600160a060020a031663763901448f6003602002015160006040516101a0015260405160e060020a63ffffffff841602815260048101919091526024016101a060405180830381600087803b1515611f8857600080fd5b6102c65a03f11515611f9957600080fd5b5050506040518051906020018051906020018060a0018060a0018051506020016040525060808f015160600160808f01516003602002018e6003602002019290925263ffffffff92831690915291169052600354600160a060020a0316636ccd5cbe60608e01516060015160006040516102c0015260405163ffffffff83811660e060020a0282529190911660048201526024016102c060405180830381600087803b151561204757600080fd5b6102c65a03f1151561205857600080fd5b50505060405180519060200180519060200180519060200180519060200180519060200180519060200180516102009091016040529195509093508d9250600391506120a19050565b602002015160608c015160ff92831660209190910152911690525b600160a060020a0333166000908152600c60205260409020805490985060ff1615156120e757601197505b6003546001890154600160a060020a0390911690636ccd5cbe9063ffffffff1660006040516102c0015260405163ffffffff83811660e060020a0282529190911660048201526024016102c060405180830381600087803b151561214a57600080fd5b6102c65a03f1151561215b57600080fd5b505050604051805190602001805190602001805190602001805190602001805190602001805190602001805161020082016040529296509194505060208101925060c001905060808d015160808e015160808d0192909252918b5260ff928316602090910152911690526003546001890154600160a060020a0390911690636ccd5cbe90640100000000900463ffffffff1660006040516102c0015260405163ffffffff83811660e060020a0282529190911660048201526024016102c060405180830381600087803b151561223057600080fd5b6102c65a03f1151561224157600080fd5b505050604051805190602001805190602001805190602001805190602001805190602001805190602001805161020082016040529296509194505060208101925060c001905060a08d015160a08e015160a08d019290925260208c81019390935260ff9384169190920152911690526003546001890154600160a060020a0390911690636ccd5cbe9063ffffffff680100000000000000009091041660006040516102c0015260405163ffffffff83811660e060020a0282529190911660048201526024016102c060405180830381600087803b151561232057600080fd5b6102c65a03f1151561233157600080fd5b505050604051805190602001805190602001805190602001805190602001805190602001805190602001805161020082016040529296509194505060208101925060c090810191508d015160c08e015160c08d01929092526040808d019390935260ff9384166020909201919091529290911690915260035460018a0154600160a060020a0390911691636ccd5cbe916c01000000000000000000000000900463ffffffff1690600090516102c0015260405163ffffffff83811660e060020a0282529190911660048201526024016102c060405180830381600087803b151561241a57600080fd5b6102c65a03f1151561242b57600080fd5b505050604051805190602001805190602001805190602001805190602001805190602001805190602001805161020082016040529296509194505060208101925060c001905060e08d015160e08e015160e08d01929092526060808d019390935260ff93841660209092019190915292909116909152600189015463ffffffff16908d015163ffffffff91821660809190910152600189015464010000000090041660608d015163ffffffff91821660a0919091015260018901546801000000000000000090041660608d015163ffffffff91821660c0919091015260018901546c0100000000000000000000000090041660608d015163ffffffff9190911660e0909101528c60808d015163ffffffff919091166080918201528d908d015163ffffffff9190911660a0909101528c60808d015163ffffffff9190911660c0909101528c60808d015163ffffffff9190911660e090910152600095505b60058660ff16101561271557608087015160ff8716600581106125a857fe5b60200201518c608001516080015102875160ff8816600581106125c757fe5b60200201510160808b015160ff8816600581106125e057fe5b63ffffffff929092166020909202015260a087015160ff87166005811061260357fe5b60200201518c6080015160a0015102602088015160ff88166005811061262557fe5b60200201510160a08b015160ff88166005811061263e57fe5b63ffffffff929092166020909202015260c087015160ff87166005811061266157fe5b60200201518c6080015160c0015102604088015160ff88166005811061268357fe5b60200201510160c08b015160ff88166005811061269c57fe5b63ffffffff929092166020909202015260e087015160ff8716600581106126bf57fe5b60200201518c6080015160e0015102606088015160ff8816600581106126e157fe5b60200201510160e08b015160ff8816600581106126fa57fe5b63ffffffff9092166020929092020152600190950194612589565b600095505b60088660ff161015612768578960ff87166008811061273557fe5b6020020151604001518560ff88166008811061274d57fe5b63ffffffff909216602092909202015260019095019461271a565b61277185613f01565b60208c015260188b52600095505b60188660ff1610156130225760808a01516080015163ffffffff161580156127b3575060a08a01516080015163ffffffff16155b80156127cb575060c08a01516080015163ffffffff16155b80156127e3575060e08a01516080015163ffffffff16155b156127f35760ff86168b52613022565b89516080015163ffffffff16158015612818575060208a01516080015163ffffffff16155b8015612830575060408a01516080015163ffffffff16155b8015612848575060608a01516080015163ffffffff16155b156128585760ff86168b52613022565b8a60200151600860ff88160660ff1660088110151561287357fe5b6020020151935060048460ff1610801561289e57508d60ff85166004811061289757fe5b6020020151155b156128ca57607f8b6040015160ff8816601881106128b857fe5b60ff9092166020929092020152613017565b8960ff8516600881106128d957fe5b60200201516080015163ffffffff1615156129035760808b6040015160ff8816601881106128b857fe5b60ff925060048460ff16101561299457600060808b01516080015163ffffffff161115612933576004925061298f565b600060a08b01516080015163ffffffff161115612953576005925061298f565b600060c08b01516080015163ffffffff161115612973576006925061298f565b600060e08b01516080015163ffffffff16111561298f57600792505b612a0d565b60008a516080015163ffffffff1611156129b15760009250612a0d565b600060208b01516080015163ffffffff1611156129d15760019250612a0d565b600060408b01516080015163ffffffff1611156129f15760029250612a0d565b600060608b01516080015163ffffffff161115612a0d57600392505b828b6040015160ff881660188110612a2157fe5b60ff9283166020919091029190910152600a92508a90841660088110612a4357fe5b60200201516020015163ffffffff1660648b60ff871660088110612a6357fe5b60200201515160960263ffffffff16811515612a7b57fe5b0463ffffffff161115612adc57612ad58a60ff851660088110612a9a57fe5b60200201516020015160648c60ff881660088110612ab457fe5b60200201515160960263ffffffff16811515612acc57fe5b0403600a6140ad565b9150612ae1565b600a91505b8960ff841660088110612af057fe5b60200201516040015163ffffffff1660648b60ff871660088110612b1057fe5b60200201516060015160960263ffffffff16811515612b2b57fe5b0463ffffffff161115612bb957612b44606460006140cf565b63ffffffff16612ba4612b9d8c60ff871660088110612b5f57fe5b60200201516040015160648e60ff8a1660088110612b7957fe5b60200201516060015160960263ffffffff16811515612b9457fe5b0403604b6140ad565b6063614133565b63ffffffff1611612bb457600091505b612bd7565b612bc5606460006140cf565b63ffffffff16604b11612bd757600091505b8960ff841660088110612be657fe5b60200201516060015163ffffffff168a60ff861660088110612c0457fe5b60200201516060015163ffffffff161115612c9157612c25606460006140cf565b63ffffffff16612c70612c698c60ff871660088110612c4057fe5b6020020151606001518d60ff891660088110612c5857fe5b6020020151606001510360056140ad565b604b614133565b63ffffffff161115612c8c57606463ffffffff60968402160491505b612cbb565b612c9d606460006140cf565b63ffffffff1660051115612cbb57606463ffffffff60968402160491505b8860ff851660088110612cca57fe5b60200201515160ff16158015612cf757508860ff841660088110612cea57fe5b60200201515160ff166001145b15612d1157606463ffffffff607d8402165b049150612db6565b8860ff851660088110612d2057fe5b60200201515160ff166001148015612d4f57508860ff841660088110612d4257fe5b60200201515160ff166002145b15612d6557606463ffffffff607d840216612d09565b8860ff851660088110612d7457fe5b60200201515160ff166002148015612da157508860ff841660088110612d9657fe5b60200201515160ff16155b15612db657606463ffffffff607d8402160491505b8860ff851660088110612dc557fe5b60200201516020015160ff16158015612df857508860ff841660088110612de857fe5b60200201516020015160ff166001145b15612e1257606463ffffffff60968402165b049150612f77565b8860ff851660088110612e2157fe5b60200201516020015160ff166001148015612e5657508860ff841660088110612e4657fe5b60200201516020015160ff166002145b15612e6c57606463ffffffff6096840216612e0a565b8860ff851660088110612e7b57fe5b60200201516020015160ff166002148015612eae57508860ff841660088110612ea057fe5b60200201516020015160ff16155b15612ec457606463ffffffff6096840216612e0a565b8860ff851660088110612ed357fe5b60200201516020015160ff166003148015612f0857508860ff841660088110612ef857fe5b60200201516020015160ff166004145b15612f1e57606463ffffffff6096840216612e0a565b8860ff851660088110612f2d57fe5b60200201516020015160ff166004148015612f6257508860ff841660088110612f5257fe5b60200201516020015160ff166003145b15612f7757606463ffffffff60968402160491505b63ffffffff82168a60ff851660088110612f8d57fe5b60200201516080015163ffffffff161115612fcc57818a60ff851660088110612fb257fe5b60200201516080018181510363ffffffff16905250612ff2565b60008a60ff851660088110612fdd57fe5b602002015163ffffffff919091166080909101525b818b6060015160ff88166018811061300657fe5b63ffffffff90921660209290920201525b60019095019461277f565b8d51156130c957600354600160a060020a031663284fb3638f51600660149054906101000a900463ffffffff166008546000604051602001526040518463ffffffff1660e060020a028152600401808481526020018363ffffffff1663ffffffff1681526020018281526020019350505050602060405180830381600087803b15156130ad57600080fd5b6102c65a03f115156130be57600080fd5b505050604051805150505b60208e01511561317957600354600160a060020a031663284fb3638f60016020020151600660149054906101000a900463ffffffff166008546000604051602001526040518463ffffffff1660e060020a028152600401808481526020018363ffffffff1663ffffffff1681526020018281526020019350505050602060405180830381600087803b151561315d57600080fd5b6102c65a03f1151561316e57600080fd5b505050604051805150505b60408e01511561322957600354600160a060020a031663284fb3638f60026020020151600660149054906101000a900463ffffffff166008546000604051602001526040518463ffffffff1660e060020a028152600401808481526020018363ffffffff1663ffffffff1681526020018281526020019350505050602060405180830381600087803b151561320d57600080fd5b6102c65a03f1151561321e57600080fd5b505050604051805150505b60608e0151156132f857600360009054906101000a9004600160a060020a0316600160a060020a031663284fb3638f600360048110151561326657fe5b6020020151600660149054906101000a900463ffffffff166008546000604051602001526040518463ffffffff1660e060020a028152600401808481526020018363ffffffff1663ffffffff1681526020018281526020019350505050602060405180830381600087803b15156132dc57600080fd5b6102c65a03f115156132ed57600080fd5b505050604051805150505b50600060808a01516080015163ffffffff161515613314576001015b60a08a01516080015163ffffffff16151561332d576001015b60c08a01516080015163ffffffff161515613346576001015b60e08a01516080015163ffffffff16151561335f576001015b8060ff16600414156136745733600160a060020a03167f899a544c07bbb626fdb7f36c63b7cffee3869aaad13a9b770dce9de2f79919b48e600260009054906101000a9004600160a060020a0316600160a060020a031663e156c59333600660149054906101000a900463ffffffff1660006040516020015260405163ffffffff84811660e060020a028252600160a060020a0393909316600482015291166024820152604401602060405180830381600087803b151561341f57600080fd5b6102c65a03f1151561343057600080fd5b50505060405180519050600160405163ffffffff93841681529190921660208201529015156040808301919091526060909101905180910390a2600254600654600160a060020a039091169063e156c59390339060a060020a900463ffffffff1660006040516020015260405163ffffffff84811660e060020a028252600160a060020a0393909316600482015291166024820152604401602060405180830381600087803b15156134e157600080fd5b6102c65a03f115156134f257600080fd5b5050506040518051905060010163ffffffff168d63ffffffff16141561364357600254600654600160a060020a039091169063a40156b890339060a060020a900463ffffffff1660405163ffffffff84811660e060020a028252600160a060020a0393909316600482015291166024820152604401600060405180830381600087803b151561358057600080fd5b6102c65a03f1151561359157600080fd5b5050506135a68e8e8360008f6080015161414c565b60c08e015263ffffffff90811660a08e0152600a8e82160616151561363e57600654600160a060020a0316636112e8ac336001600360405160e060020a63ffffffff8616028152600160a060020a039093166004840152602483019190915260ff166044820152606401600060405180830381600087803b151561362957600080fd5b6102c65a03f1151561363a57600080fd5b5050505b613666565b6136558e8e8360018f6080015161414c565b60c08e015263ffffffff1660a08d01525b61366f336144fe565b613796565b33600160a060020a03167f899a544c07bbb626fdb7f36c63b7cffee3869aaad13a9b770dce9de2f79919b48e600260009054906101000a9004600160a060020a0316600160a060020a031663e156c59333600660149054906101000a900463ffffffff1660006040516020015260405163ffffffff84811660e060020a028252600160a060020a0393909316600482015291166024820152604401602060405180830381600087803b151561372857600080fd5b6102c65a03f1151561373957600080fd5b50505060405180519050600060405163ffffffff93841681529190921660208201529015156040808301919091526060909101905180910390a26137858e8e8360008f6080015161414c565b60c08e015263ffffffff1660a08d01525b600160a060020a0333166000908152600e602052604090208c908151815463ffffffff191663ffffffff919091161781556020820151815463ffffffff919091166401000000000267ffffffff0000000019909116178155604082015161380390600183019060046148b3565b50606082015161381990600583019060086146e1565b50608082015161382f90600683019060086146e1565b5060a082015160078201805463ffffffff191663ffffffff9290921691909117905560c082015160089091015550600b5460ff6801000000000000000090910416156138fb57600160a060020a0333166000908152600f602052604090208b908151815460ff191660ff9190911617815560208201516138b590600183019060086148ed565b5060408201516138cb90600283019060186148ed565b5060608201516138e1906003830190601861497c565b5060808201516138f790600683019060046146e1565b5050505b5050505050505050505050505050565b60005433600160a060020a0390811691161461392657600080fd5b63ffffffff16600855565b600554600160a060020a031681565b600d6020526000908152604090205481565b600061395c614762565b825115806139e15750600354600160a060020a038581169116636352211e855160006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b15156139bb57600080fd5b6102c65a03f115156139cc57600080fd5b50505060405180519050600160a060020a0316145b8015613a73575060208301511580613a735750600354600160a060020a038581169116636352211e602086015160006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515613a4d57600080fd5b6102c65a03f11515613a5e57600080fd5b50505060405180519050600160a060020a0316145b8015613b05575060408301511580613b055750600354600160a060020a038581169116636352211e604086015160006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515613adf57600080fd5b6102c65a03f11515613af057600080fd5b50505060405180519050600160a060020a0316145b8015613b97575060608301511580613b975750600354600160a060020a038581169116636352211e606086015160006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515613b7157600080fd5b6102c65a03f11515613b8257600080fd5b50505060405180519050600160a060020a0316145b15613ef557825115613c5d57600354600160a060020a03166375e39f2684516000604051610220015260405160e060020a63ffffffff8416028152600481019190915260240161022060405180830381600087803b1515613bf757600080fd5b6102c65a03f11515613c0857600080fd5b5050506040518051906020018051906020018051906020018051906020018051906020018051906020018060a0018060a0018051506020016040525090955086945060009350613c5792505050565b60200201525b602083015115613d2457600354600160a060020a03166375e39f2660208501516000604051610220015260405160e060020a63ffffffff8416028152600481019190915260240161022060405180830381600087803b1515613cbe57600080fd5b6102c65a03f11515613ccf57600080fd5b5050506040518051906020018051906020018051906020018051906020018051906020018051906020018060a0018060a0018051506020016040525090955086945060019350613d1e92505050565b60200201525b604083015115613deb57600354600160a060020a03166375e39f2660408501516000604051610220015260405160e060020a63ffffffff8416028152600481019190915260240161022060405180830381600087803b1515613d8557600080fd5b6102c65a03f11515613d9657600080fd5b5050506040518051906020018051906020018051906020018051906020018051906020018051906020018060a0018060a0018051506020016040525090955086945060029350613de592505050565b60200201525b606083015115613eb257600354600160a060020a03166375e39f2660608501516000604051610220015260405160e060020a63ffffffff8416028152600481019190915260240161022060405180830381600087803b1515613e4c57600080fd5b6102c65a03f11515613e5d57600080fd5b5050506040518051906020018051906020018051906020018051906020018051906020018051906020018060a0018060a0018051506020016040525090955086945060039350613eac92505050565b60200201525b42815111158015613ec7575042602082015111155b8015613ed7575042604082015111155b8015613ee7575042606082015111155b15613ef55760019150613efa565b600091505b5092915050565b613f09614789565b613f11614789565b60008060008061010060405190810160409081526000808352600160208401526002918301919091526003606083015260046080830152600560a0830152600660c0830152600760e083015290955093505b60088460ff1610156140a2578360010192505b60088360ff161015614097578660ff841660088110613f9157fe5b602002015163ffffffff168760ff861660088110613fab57fe5b602002015163ffffffff16101561408c578660ff851660088110613fcb57fe5b602002015191508660ff841660088110613fe157fe5b60200201518760ff861660088110613ff557fe5b63ffffffff9092166020929092020152818760ff85166008811061401557fe5b63ffffffff90921660209290920201528460ff85166008811061403457fe5b602002015190508460ff84166008811061404a57fe5b60200201518560ff86166008811061405e57fe5b60ff92831660209190910291909101528190869085166008811061407e57fe5b60ff90921660209290920201525b600190920191613f76565b600190930192613f63565b509295945050505050565b600063ffffffff808316908416106140c65750816140c9565b50805b92915050565b600063ffffffff808316908416116140e657600080fd5b6013546341c64e6d9063ffffffff166013805463ffffffff1916929091066130390163ffffffff908116929092179081905583918286038116911681151561412a57fe5b06019392505050565b600063ffffffff808416908316106140c65750816140c9565b6000808080600460ff8816146141b657614165886145d0565b63ffffffff166019600a5481151561417957fe5b04029150614193600463ffffffff8a165b046001016145d0565b600954600590600460ff8b1663ffffffff92831602821604165b0402905061423b565b60018615151415614204576141ca886145d0565b63ffffffff166005600a548115156141de57fe5b040291506141f3600463ffffffff8a1661418a565b60095460059063ffffffff166141ad565b61420d886145d0565b63ffffffff16600a5402915061422e60048963ffffffff1681151561418a57fe5b60095463ffffffff160290505b600554600160a060020a03166340c10f19338460006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561429a57600080fd5b6102c65a03f115156142ab57600080fd5b505050604051805150899050511561433e57600354600160a060020a0316631debbe2f8a51838851640100000000030160006040516020015260405163ffffffff84811660e060020a028252600482019390935291166024820152604401602060405180830381600087803b151561432257600080fd5b6102c65a03f1151561433357600080fd5b505050604051805150505b6020890151156143cf57600354600160a060020a0316631debbe2f60208b0151836020890151640100000000030160006040516020015260405163ffffffff84811660e060020a028252600482019390935291166024820152604401602060405180830381600087803b15156143b357600080fd5b6102c65a03f115156143c457600080fd5b505050604051805150505b60408901511561446057600354600160a060020a0316631debbe2f60408b0151836040890151640100000000030160006040516020015260405163ffffffff84811660e060020a028252600482019390935291166024820152604401602060405180830381600087803b151561444457600080fd5b6102c65a03f1151561445557600080fd5b505050604051805150505b6060890151156144f157600354600160a060020a0316631debbe2f60608b0151836060890151640100000000030160006040516020015260405163ffffffff84811660e060020a028252600482019390935291166024820152604401602060405180830381600087803b15156144d557600080fd5b6102c65a03f115156144e657600080fd5b505050604051805150505b9890975095505050505050565b6145066149d5565b6001815260005b60048160ff16101561458b57601080546145289060006140cf565b63ffffffff1681548110151561453a57fe5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff16826020015160ff83166004811061457357fe5b63ffffffff909216602092909202015260010161450d565b600160a060020a0383166000908152600c6020526040902082908151815460ff191690151517815560208201516145c890600183019060046146e1565b505050505050565b600060026001830163ffffffff1604825b8063ffffffff168263ffffffff16101561462b578190506002828363ffffffff168663ffffffff1681151561461257fe5b040163ffffffff1681151561462357fe5b0491506145e1565b9392505050565b828054828255906000526020600020906007016008900481019282156146d15791602002820160005b8382111561469f57835183826101000a81548163ffffffff021916908363ffffffff160217905550926020019260040160208160030104928301926001030261465b565b80156146cf5782816101000a81549063ffffffff021916905560040160208160030104928301926001030261469f565b505b506146dd9291506149f0565b5090565b6001830191839082156146d15791602002820160008382111561469f57835183826101000a81548163ffffffff021916908363ffffffff160217905550926020019260040160208160030104928301926001030261465b565b60806040519081016040526004815b6000815260001990910190602001816147495790505090565b60806040519081016040526004815b60008152602001906001900390816147715790505090565b61010060405190810160405260008152600760208201614749565b61030060405190810160405260008152601760208201614749565b61030060405190810160409081526000808352602083015281016147e1614762565b81526020016147ee614789565b81526020016147fb614789565b815260006020820181905260409091015290565b6107a0604051908101604052600081526020810161482b614789565b81526020016148386147a4565b81526020016148456147a4565b815260200161485261473a565b905290565b6105006040519081016040526008815b61486f614a11565b8152602001906001900390816148675790505090565b6102006040519081016040526008815b61489d614a2b565b8152602001906001900390816148955790505090565b82600481019282156148e1579160200282015b828111156148e15782518255916020019190600101906148c6565b506146dd929150614a44565b6001830191839082156149705791602002820160005b8382111561494157835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302614903565b801561496e5782816101000a81549060ff0219169055600101602081600001049283019260010302614941565b505b506146dd929150614a5e565b6003830191839082156146d15791602002820160008382111561469f57835183826101000a81548163ffffffff021916908363ffffffff160217905550926020019260040160208160030104928301926001030261465b565b60a0604051908101604052600081526020810161485261473a565b61126791905b808211156146dd57805463ffffffff191681556001016149f6565b60a060405190810160405260008152600460208201614749565b6040805190810160405260008152600160208201614749565b61126791905b808211156146dd5760008155600101614a4a565b61126791905b808211156146dd57805460ff19168155600101614a645600a165627a7a7230582028f8dae12b06c20afd4d538e3320145a50dced46de19906e10e576dc8c456ed60029000000000000000000000000e7b704652787ff7654b9975ea99c3d1ca04bcf42000000000000000000000000abc7e6c01237e8eef355bba2bf925a730b714d5f0000000000000000000000001f6f71e1e6a56dc348f1ec9a22b200ac44459fe40000000000000000000000001b5242794288b45831ce069c9934a29b89af019700000000000000000000000059bcded9c87ce46ec97c13640bfc0390ceb00e990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012c000000000000000000000000000000000000000000000000000000000000038400000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000004563918244f400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000e7b704652787ff7654b9975ea99c3d1ca04bcf42000000000000000000000000abc7e6c01237e8eef355bba2bf925a730b714d5f0000000000000000000000001f6f71e1e6a56dc348f1ec9a22b200ac44459fe40000000000000000000000001b5242794288b45831ce069c9934a29b89af019700000000000000000000000059bcded9c87ce46ec97c13640bfc0390ceb00e990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012c000000000000000000000000000000000000000000000000000000000000038400000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000004563918244f400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000000000000"
}