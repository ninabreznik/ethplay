{
  "address": "0x31b432e0dc5a5ab8502ffcd0eadb127a807efb72",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WTXH",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-09\n*/\n\npragma solidity 0.4.25;\n\n// ----------------------------------------------------------------------------\n// Safe maths\n// ----------------------------------------------------------------------------\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\n\n// ----------------------------------------------------------------------------\n// Owned contract\n// ----------------------------------------------------------------------------\ncontract Owned {\n    address public owner;\n    \n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n    function totalSupply() public view returns (uint);\n    function balanceOf(address tokenOwner) public view returns (uint balance);\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 \n// \n// ----------------------------------------------------------------------------\n\ncontract WTXH is ERC20Interface, Owned {\n    using SafeMath for uint;\n\n    string public constant name = \"WTX Hub\";\n    string public constant symbol = \"WTXH\";\n    uint8 public constant decimals = 18;\n    \n    mapping(address => uint) frozenAccountPeriod;\n    mapping(address => bool) frozenAccount;\n\n    uint constant public _decimals18 = uint(10) ** decimals;\n    uint constant public _totalSupply    = 400000000 * _decimals18;\n    \n    event FrozenFunds(address target, uint period);\n\n    constructor() public { \n        balances[owner] = _totalSupply;\n        emit Transfer(address(0), owner, _totalSupply);\n    }\n\n// ----------------------------------------------------------------------------\n// mappings for implementing ERC20 \n// ERC20 standard functions\n// ----------------------------------------------------------------------------\n    \n    // Balances for each account\n    mapping(address => uint) balances;\n    \n    // Owner of account approves the transfer of an amount to another account\n    mapping(address => mapping(address => uint)) allowed;\n\n    function totalSupply() public view returns (uint) {\n        return _totalSupply;\n    }\n    \n    // Get the token balance for account `tokenOwner`\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\n        return balances[tokenOwner];\n    }\n    \n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n\n    function _transfer(address _from, address _toAddress, uint _tokens) private {\n        balances[_from] = balances[_from].sub(_tokens);\n        addToBalance(_toAddress, _tokens);\n        emit Transfer(_from, _toAddress, _tokens);\n    }\n    \n    // Transfer the balance from owner's account to another account\n    function transfer(address _add, uint _tokens) public returns (bool success) {\n        require(_add != address(0));\n        require(_tokens <= balances[msg.sender]);\n        \n        if(!frozenAccount[msg.sender] && now > frozenAccountPeriod[msg.sender]){\n            _transfer(msg.sender, _add, _tokens);\n        }\n        \n        return true;\n    }\n\n    /*\n        Allow `spender` to withdraw from your account, multiple times, \n        up to the `tokens` amount.If this function is called again it \n        overwrites the current allowance with _value.\n    */\n    function approve(address spender, uint tokens) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n    \n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n    \n    /*\n        Send `tokens` amount of tokens from address `from` to address `to`\n        The transferFrom method is used for a withdraw workflow, \n        allowing contracts to send tokens on your behalf, \n        for example to \"deposit\" to a contract address and/or to charge\n        fees in sub-currencies; the command should fail unless the _from \n        account has deliberately authorized the sender of the message via\n        some mechanism; we propose these standardized APIs for approval:\n    */\n    function transferFrom(address from, address _toAddr, uint tokens) public returns (bool success) {\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        _transfer(from, _toAddr, tokens);\n        return true;\n    }\n    \n\n    // address not null\n    modifier addressNotNull(address _addr){\n        require(_addr != address(0));\n        _;\n    }\n\n    // Add to balance\n    function addToBalance(address _address, uint _amount) internal {\n    \tbalances[_address] = balances[_address].add(_amount);\n    }\n\t\n\t /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n    \n    function freezeAccount(address target, uint period) public onlyOwner {\n        require(target != address(0) && owner != target);\n        frozenAccount[target] = true;\n        frozenAccountPeriod[target] = period;\n        emit FrozenFunds(target, period);\n    }\n    \n    function unFreezeAccount(address target) public onlyOwner {\n        require(target != address(0));\n        delete(frozenAccount[target]);\n        delete(frozenAccountPeriod[target]);\n    }\n    \n    function getFreezeAccountInfo(address _ad) public view onlyOwner returns(bool, uint) {\n        return (frozenAccount[_ad], frozenAccountPeriod[_ad]);\n    }\n\n    function () payable external {\n        owner.transfer(msg.value);\n    }\n\n}",
  "bytecode": "608060405234801561001057600080fd5b5060008054600160a060020a0319163317808255600160a060020a0390811682526003602090815260408084206b014adf4b7320334b90000000908190558454825191825291519190931693927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92908290030190a3610b27806100956000396000f3006080604052600436106100fb5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610138578063095ea7b3146101c257806318160ddd146101fa57806323b872dd1461022157806329846afe1461024b578063313ce567146102715780633d413ba41461029c5780633eaaf86b146102d857806353cc2fae146102ed578063661884631461030e57806370a0823114610332578063894875cf146103535780638da5cb5b1461036857806395d89b4114610399578063a9059cbb146103ae578063d73dd623146103d2578063dd62ed3e146103f6578063f2fde38b1461041d575b60008054604051600160a060020a03909116913480156108fc02929091818181858888f19350505050158015610135573d6000803e3d6000fd5b50005b34801561014457600080fd5b5061014d61043e565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561018757818101518382015260200161016f565b50505050905090810190601f1680156101b45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101ce57600080fd5b506101e6600160a060020a0360043516602435610475565b604080519115158252519081900360200190f35b34801561020657600080fd5b5061020f6104dc565b60408051918252519081900360200190f35b34801561022d57600080fd5b506101e6600160a060020a03600435811690602435166044356104ec565b34801561025757600080fd5b5061026f600160a060020a0360043516602435610559565b005b34801561027d57600080fd5b5061028661060d565b6040805160ff9092168252519081900360200190f35b3480156102a857600080fd5b506102bd600160a060020a0360043516610612565b60408051921515835260208301919091528051918290030190f35b3480156102e457600080fd5b5061020f61065a565b3480156102f957600080fd5b5061026f600160a060020a036004351661066a565b34801561031a57600080fd5b506101e6600160a060020a03600435166024356106c2565b34801561033e57600080fd5b5061020f600160a060020a03600435166107b2565b34801561035f57600080fd5b5061020f6107cd565b34801561037457600080fd5b5061037d6107d9565b60408051600160a060020a039092168252519081900360200190f35b3480156103a557600080fd5b5061014d6107e8565b3480156103ba57600080fd5b506101e6600160a060020a036004351660243561081f565b3480156103de57600080fd5b506101e6600160a060020a0360043516602435610899565b34801561040257600080fd5b5061020f600160a060020a0360043581169060243516610932565b34801561042957600080fd5b5061026f600160a060020a036004351661095d565b60408051808201909152600781527f5754582048756200000000000000000000000000000000000000000000000000602082015281565b336000818152600460209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a35060015b92915050565b6b014adf4b7320334b9000000090565b600160a060020a0383166000908152600460209081526040808320338452909152812054610520908363ffffffff6109f116565b600160a060020a038516600090815260046020908152604080832033845290915290205561054f848484610a06565b5060019392505050565b600054600160a060020a0316331461057057600080fd5b600160a060020a038216158015906105965750600054600160a060020a03838116911614155b15156105a157600080fd5b600160a060020a0382166000818152600260209081526040808320805460ff191660019081179091558252918290208490558151928352820183905280517fb4d1971fab77c7179a15c1d5959be5ccdf22f58dc394dfab76d4f27098d981df9281900390910190a15050565b601281565b600080548190600160a060020a0316331461062c57600080fd5b5050600160a060020a031660009081526002602090815260408083205460019092529091205460ff90911691565b6b014adf4b7320334b9000000081565b600054600160a060020a0316331461068157600080fd5b600160a060020a038116151561069657600080fd5b600160a060020a03166000908152600260209081526040808320805460ff191690556001909152812055565b336000908152600460209081526040808320600160a060020a03861684529091528120548083111561071757336000908152600460209081526040808320600160a060020a038816845290915281205561074c565b610727818463ffffffff6109f116565b336000908152600460209081526040808320600160a060020a03891684529091529020555b336000818152600460209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526003602052604090205490565b670de0b6b3a764000081565b600054600160a060020a031681565b60408051808201909152600481527f5754584800000000000000000000000000000000000000000000000000000000602082015281565b6000600160a060020a038316151561083657600080fd5b3360009081526003602052604090205482111561085257600080fd5b3360009081526002602052604090205460ff1615801561088057503360009081526001602052604090205442115b1561089057610890338484610a06565b50600192915050565b336000908152600460209081526040808320600160a060020a03861684529091528120546108cd908363ffffffff610aa216565b336000818152600460209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205490565b600054600160a060020a0316331461097457600080fd5b600160a060020a038116151561098957600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610a0057600080fd5b50900390565b600160a060020a038316600090815260036020526040902054610a2f908263ffffffff6109f116565b600160a060020a038416600090815260036020526040902055610a528282610ab2565b81600160a060020a031683600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b818101828110156104d657600080fd5b600160a060020a038216600090815260036020526040902054610adb908263ffffffff610aa216565b600160a060020a03909216600090815260036020526040902091909155505600a165627a7a7230582055fcaa2a6295811810fbe81105a6aeda64a7a08fb2b2464b999088fb5d354e5f0029"
}