{
  "address": "0x48d9eac690ba14e055af890cc33e17e2cbc0a37a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EthTweetMe",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-03\n*/\n\npragma solidity ^0.4.24;\n\n\ncontract ERC20Basic {\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint tokens) public returns (bool success);\n  function approve(address spender, uint tokens) public returns (bool success);\n  function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n  event Transfer(address indexed from, address indexed to, uint tokens);\n  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n// ----------------------------------------------------------------------------\n// Safe maths\n// ----------------------------------------------------------------------------\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n\ncontract EthTweetMe is Ownable {\n    using SafeMath for uint256;\n\n    // Supported token symbols mapped to ERC20 contract addr\n    mapping(string => address) tokens;\n\n    address webappAddress;\n    address feePayoutAddress;\n    uint256 public feePercentage = 5;\n    uint256 public minAmount = 0.000001 ether;\n    uint256 public webappMinBalance = 0.000001 ether;\n\n    struct Influencer {\n        address influencerAddress;\n        uint256 charityPercentage;\n        address charityAddress;\n    }\n    // Map influencer's twitterHandle to Influencer struct\n    mapping(string => Influencer) influencers;\n\n\n    event InfluencerAdded(string _influencerTwitterHandle);\n    event FeePercentageUpdated(uint256 _feePercentage);\n    event Deposit(address _address, uint256 _amount);\n\n\n    modifier onlyWebappOrOwner() {\n        require(msg.sender == webappAddress || msg.sender == owner);\n        _;\n    }\n    modifier onlyFeePayoutOrOwner() {\n        require(msg.sender == feePayoutAddress || msg.sender == owner);\n        _;\n    }\n\n\n    constructor() public {\n        webappAddress = msg.sender;\n        feePayoutAddress = msg.sender;\n    }\n\n    // Fallback function. Allow users to pay the contract directly\n    function() external payable {\n        emit Deposit(msg.sender, msg.value);\n    }\n\n    // Owner management functions\n    function updateFeePercentage(uint256 _feePercentage) external onlyWebappOrOwner {\n        require(_feePercentage <= 100);\n        feePercentage = _feePercentage;\n        emit FeePercentageUpdated(feePercentage);\n    }\n\n    function updateMinAmount(uint256 _minAmount) external onlyWebappOrOwner {\n        minAmount = _minAmount;\n    }\n    function updateWebappMinBalance(uint256 _minBalance) external onlyWebappOrOwner {\n        webappMinBalance = _minBalance;\n    }\n\n    function updateWebappAddress(address _address) external onlyOwner {\n        webappAddress = _address;\n    }\n\n    function updateFeePayoutAddress(address _address) external onlyOwner {\n        feePayoutAddress = _address;\n    }\n\n    // Move some of the remaining balance stored in the contract\n    function payoutETH(uint256 _amount) external onlyFeePayoutOrOwner {\n        require(_amount <= address(this).balance);\n        feePayoutAddress.transfer(_amount);\n    }\n    function payoutERC20(string _symbol) external onlyFeePayoutOrOwner {\n        // Must be an ERC20 that we support\n        require(tokens[_symbol] != 0x0);\n        ERC20Basic erc20 = ERC20Basic(tokens[_symbol]);\n\n        require(erc20.balanceOf(address(this)) > 0);\n        erc20.transfer(feePayoutAddress, erc20.balanceOf(address(this)));\n    }\n\n    function updateInfluencer(\n            string _twitterHandle,\n            address _influencerAddress,\n            uint256 _charityPercentage,\n            address _charityAddress) external onlyWebappOrOwner {\n        require(_charityPercentage <= 100);\n        require((_charityPercentage == 0 && _charityAddress == 0x0) || (_charityPercentage > 0 && _charityAddress != 0x0));\n        if (influencers[_twitterHandle].influencerAddress == 0x0) {\n            // This is a new Influencer!\n            emit InfluencerAdded(_twitterHandle);\n        }\n        influencers[_twitterHandle] = Influencer(_influencerAddress, _charityPercentage, _charityAddress);\n    }\n\n    function sendEthTweet(uint256 _amount, bool _isERC20, string _symbol, bool _payFromMsg, string _influencerTwitterHandle, uint256 _additionalFee) private {\n        require(\n            (!_isERC20 && _payFromMsg && msg.value == _amount) ||\n            (!_isERC20 && !_payFromMsg && _amount <= address(this).balance) ||\n            _isERC20\n        );\n        require(_additionalFee == 0 || _amount > _additionalFee);\n\n        ERC20Basic erc20;\n        if (_isERC20) {\n            // Now do ERC20-specific checks\n            // Must be an ERC20 that we support\n            require(tokens[_symbol] != 0x0);\n\n            // The ERC20 funds should have already been transferred\n            erc20 = ERC20Basic(tokens[_symbol]);\n            require(erc20.balanceOf(address(this)) >= _amount);\n        }\n\n        // influencer must be a known twitterHandle\n        Influencer memory influencer = influencers[_influencerTwitterHandle];\n        require(influencer.influencerAddress != 0x0);\n\n        uint256[] memory payouts = new uint256[](4);    // 0: influencer, 1: charity, 2: fee, 3: webapp\n        uint256 hundred = 100;\n        if (_additionalFee > 0) {\n            payouts[3] = _additionalFee;\n            _amount = _amount.sub(_additionalFee);\n        }\n        if (influencer.charityPercentage == 0) {\n            payouts[0] = _amount.mul(hundred.sub(feePercentage)).div(hundred);\n            payouts[2] = _amount.sub(payouts[0]);\n        } else {\n            payouts[1] = _amount.mul(influencer.charityPercentage).div(hundred);\n            payouts[0] = _amount.sub(payouts[1]).mul(hundred.sub(feePercentage)).div(hundred);\n            payouts[2] = _amount.sub(payouts[1]).sub(payouts[0]);\n        }\n\n        require(payouts[0].add(payouts[1]).add(payouts[2]) == _amount);\n\n        if (payouts[0] > 0) {\n            if (!_isERC20) {\n                influencer.influencerAddress.transfer(payouts[0]);\n            } else {\n                erc20.transfer(influencer.influencerAddress, payouts[0]);\n            }\n        }\n        if (payouts[1] > 0) {\n            if (!_isERC20) {\n                influencer.charityAddress.transfer(payouts[1]);\n            } else {\n                erc20.transfer(influencer.charityAddress, payouts[1]);\n            }\n        }\n        if (payouts[2] > 0) {\n            if (!_isERC20) {\n                if (webappAddress.balance < webappMinBalance) {\n                    // Redirect the fee funds into webapp\n                    payouts[3] = payouts[3].add(payouts[2]);\n                } else {\n                    feePayoutAddress.transfer(payouts[2]);\n                }\n            } else {\n                erc20.transfer(feePayoutAddress, payouts[2]);\n            }\n        }\n        if (payouts[3] > 0) {\n            if (!_isERC20) {\n                webappAddress.transfer(payouts[3]);\n            } else {\n                erc20.transfer(webappAddress, payouts[3]);\n            }\n        }\n    }\n\n    // Called by users directly interacting with the contract, paying in ETH\n    //  Users are paying their own gas so no additional fee.\n    function sendEthTweet(string _influencerTwitterHandle) external payable {\n        sendEthTweet(msg.value, false, \"ETH\", true, _influencerTwitterHandle, 0);\n    }\n\n    // Called by the webapp on behalf of Other/QR code payers.\n    //  Charge an additional fee since we're paying for gas.\n    function sendPrepaidEthTweet(uint256 _amount, string _influencerTwitterHandle, uint256 _additionalFee) external onlyWebappOrOwner {\n        /* require(_amount <= address(this).balance); */\n        sendEthTweet(_amount, false, \"ETH\", false, _influencerTwitterHandle, _additionalFee);\n    }\n\n    /****************************************************************\n    *   ERC-20 support\n    ****************************************************************/\n    function addNewToken(string _symbol, address _address) external onlyWebappOrOwner {\n        tokens[_symbol] = _address;\n    }\n    function removeToken(string _symbol) external onlyWebappOrOwner {\n        require(tokens[_symbol] != 0x0);\n        delete(tokens[_symbol]);\n    }\n    function supportsToken(string _symbol, address _address) external constant returns (bool) {\n        return (tokens[_symbol] == _address);\n    }\n    function contractTokenBalance(string _symbol) external constant returns (uint256) {\n        require(tokens[_symbol] != 0x0);\n        ERC20Basic erc20 = ERC20Basic(tokens[_symbol]);\n        return erc20.balanceOf(address(this));\n    }\n\n    // Called as the second step by users directly interacting with the contract.\n    //  Users are paying their own gas so no additional fee.\n    function sendERC20Tweet(uint256 _amount, string _symbol, string _influencerTwitterHandle) external {\n        // Pull in the pre-approved ERC-20 funds\n        ERC20Basic erc20 = ERC20Basic(tokens[_symbol]);\n        erc20.transferFrom(msg.sender, address(this), _amount);\n\n        sendEthTweet(_amount, true, _symbol, false, _influencerTwitterHandle, 0);\n    }\n\n    // Called by the webapp on behalf of Other/QR code payers.\n    //  Charge an additional fee since we're paying for gas.\n    function sendPrepaidERC20Tweet(uint256 _amount, string _symbol, string _influencerTwitterHandle, uint256 _additionalFee) external onlyWebappOrOwner {\n        sendEthTweet(_amount, true, _symbol, false, _influencerTwitterHandle, _additionalFee);\n    }\n\n    // Public accessors\n    function getInfluencer(string _twitterHandle) external constant returns(address, uint256, address) {\n        Influencer memory influencer = influencers[_twitterHandle];\n        return (influencer.influencerAddress, influencer.charityPercentage, influencer.charityAddress);\n    }\n\n}",
  "bytecode": ""
}