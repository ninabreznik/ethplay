{
  "address": "0x34dbde62ce8af4ea2525fd0f10caf7acbf1af82c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "StyrasToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-21\n*/\n\npragma solidity ^0.4.18;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    \n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n  \n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    \n    // Public variable with address of owner\n    address public owner;\n    \n    /**\n     * Log ownership transference\n     */\n    event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    function Ownable() public {\n        // Set the contract creator as the owner\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        // Check that sender is owner\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) onlyOwner public {\n        // Check for a non-null owner\n        require(newOwner != address(0));\n        // Log ownership transference\n        OwnershipTransferred(owner, newOwner);\n        // Set new owner\n        owner = newOwner;\n    }\n    \n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n\n    uint256 public totalSupply = 0;\n    function balanceOf(address who) public constant returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n}\n\n\ncontract MintableToken is ERC20Basic, Ownable {\n\n    bool public mintingFinished = false;\n\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n    \n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool);\n\n    /**\n     * @dev Function to stop minting new tokens.\n     * @return True if the operation was successful.\n     */\n    function finishMinting() onlyOwner public returns (bool) {\n        mintingFinished = true;\n        MintFinished();\n        return true;\n    }\n  \n}\n\n\n/**\n * @title Extended ERC20 Token contract\n * @dev Custom Token (ERC20 Token) transactions.\n */\ncontract StyrasToken is MintableToken {\n  \n    using SafeMath for uint256;\n\n    string public name = \"Styras\";\n    string public symbol = \"STY\";\n    uint256 public decimals = 18;\n\n    uint256 public reservedSupply;\n\n    uint256 public publicLockEnd = 1516060800; // GMT: Tuesday, January 16, 2018 0:00:00\n    uint256 public partnersLockEnd = 1530230400; // GMT: Friday, June 29, 2018 0:00:00\n    uint256 public partnersMintLockEnd = 1514678400; // GMT: Sunday, December 31, 2017 0:00:00\n\n    address public partnersWallet;\n    mapping(address => uint256) balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Burn(address indexed burner, uint256 value);\n\n    /**\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function StyrasToken(address partners, uint256 reserved) public {\n        require(partners != address(0));\n        partnersWallet = partners;\n        reservedSupply = reserved;\n        assert(publicLockEnd <= partnersLockEnd);\n        assert(partnersMintLockEnd < partnersLockEnd);\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param investor The address to query the the balance of.\n     * @return An uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address investor) public constant returns (uint256 balanceOfInvestor) {\n        return balances[investor];\n    }\n\n    /**\n     * @dev transfer token for a specified address\n     * @param _to The address to transfer to.\n     * @param _amount The amount to be transferred.\n     */\n    function transfer(address _to, uint256 _amount) public returns (bool) {\n        require(_to != address(0));\n        require((msg.sender != partnersWallet && now >= publicLockEnd) || now >= partnersLockEnd);\n        require(_amount > 0 && _amount <= balances[msg.sender]);\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n  \n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _amount uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool) {\n        require(_to != address(0));\n        require((_from != partnersWallet && now >= publicLockEnd) || now >= partnersLockEnd);\n        require(_amount > 0 && _amount <= balances[_from]);\n        require(_amount <= allowed[_from][msg.sender]);\n        balances[_from] = balances[_from].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n        Transfer(_from, _to, _amount);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     */\n    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public {\n        require((msg.sender != partnersWallet && now >= publicLockEnd) || now >= partnersLockEnd);\n        require(_value > 0 && _value <= balances[msg.sender]);\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Burn(burner, _value);\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param _to The address that will receive the minted tokens.\n     * @param _amount The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n        require(_to != partnersWallet);\n        totalSupply = totalSupply.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Mint(_to, _amount);\n        Transfer(address(0), _to, _amount);\n        return true;\n    }\n\n    /**\n     * @dev Function to mint reserved tokens to partners\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mintPartners(uint256 amount) onlyOwner canMint public returns (bool) {\n        require(now >= partnersMintLockEnd);\n        require(reservedSupply > 0);\n        require(amount <= reservedSupply);\n        totalSupply = totalSupply.add(amount);\n        reservedSupply = reservedSupply.sub(amount);\n        balances[partnersWallet] = balances[partnersWallet].add(amount);\n        Mint(partnersWallet, amount);\n        Transfer(address(0), partnersWallet, amount);\n        return true;\n    }\n  \n}\n\n\n/**\n * @title RefundVault\n * @dev This contract is used for storing funds while a crowdsale\n * is in progress. Supports refunding the money if crowdsale fails,\n * and forwarding it if crowdsale is successful.\n */\ncontract RefundVault is Ownable {\n  \n    using SafeMath for uint256;\n\n    enum State { Active, Refunding, Closed }\n\n    mapping (address => uint256) public deposited;\n    address public wallet;\n    State public state;\n\n    event Closed();\n    event RefundsEnabled();\n    event Refunded(address indexed beneficiary, uint256 weiAmount);\n\n    function RefundVault(address _to) public {\n        require(_to != address(0));\n        wallet = _to;\n        state = State.Active;\n    }\n\n    function deposit(address investor) onlyOwner public payable {\n        require(state == State.Active);\n        deposited[investor] = deposited[investor].add(msg.value);\n    }\n\n    function close() onlyOwner public {\n        require(state == State.Active);\n        state = State.Closed;\n        Closed();\n        wallet.transfer(this.balance);\n    }\n\n    function enableRefunds() onlyOwner public {\n        require(state == State.Active);\n        state = State.Refunding;\n        RefundsEnabled();\n    }\n\n    function refund(address investor) public {\n        require(state == State.Refunding);\n        require(deposited[investor] > 0);\n        uint256 depositedValue = deposited[investor];\n        deposited[investor] = 0;\n        investor.transfer(depositedValue);\n        Refunded(investor, depositedValue);\n    }\n  \n}\n\n\ncontract Withdrawable is Ownable {\n\n    bool public withdrawEnabled = false;\n    address public wallet;\n\n    event Withdrawed(uint256 weiAmount);\n  \n    function Withdrawable(address _to) public {\n        require(_to != address(0));\n        wallet = _to;\n    }\n\n    modifier canWithdraw() {\n        require(withdrawEnabled);\n        _;\n    }\n  \n    function enableWithdraw() onlyOwner public {\n        withdrawEnabled = true;\n    }\n  \n    // owner can withdraw ether here\n    function withdraw(uint256 weiAmount) onlyOwner canWithdraw public {\n        require(this.balance >= weiAmount);\n        wallet.transfer(weiAmount);\n        Withdrawed(weiAmount);\n    }\n\n}\n\n\ncontract StyrasVault is Withdrawable, RefundVault {\n  \n    function StyrasVault(address wallet) public\n        Withdrawable(wallet)\n        RefundVault(wallet) {\n        // NOOP\n    }\n  \n    function balanceOf(address investor) public constant returns (uint256 depositedByInvestor) {\n        return deposited[investor];\n    }\n  \n    function enableWithdraw() onlyOwner public {\n        require(state == State.Active);\n        withdrawEnabled = true;\n    }\n\n}\n\n\n/**\n * @title StyrasCrowdsale\n * @dev This is a capped and refundable crowdsale.\n */\ncontract StyrasCrowdsale is Ownable {\n\n    using SafeMath for uint256;\n  \n    enum State { preSale, publicSale, hasFinalized }\n\n    // how many token units a buyer gets per ether\n    // minimum amount of funds (soft-cap) to be raised in weis\n    // maximum amount of funds (hard-cap) to be raised in weis\n    // minimum amount of weis to invest per investor\n    uint256 public rate;\n    uint256 public goal;\n    uint256 public cap;\n    uint256 public minInvest = 100000000000000000; // 0.1 ETH\n\n    // presale treats\n    uint256 public presaleDeadline = 1511827200; // GMT: Tuesday, November 28, 2017 00:00:00\n    uint256 public presaleRate = 4000; // 1 ETH == 4000 STY 33% bonus\n    uint256 public presaleCap = 50000000000000000000000000; // 50 millions STY\n  \n    // pubsale treats\n    uint256 public pubsaleDeadline = 1514678400; // GMT: Sunday, December 31, 2017 0:00:00\n    uint256 public pubsaleRate = 3000; // 1 ETH == 3000 STY\n    uint256 public pubsaleCap = 180000000000000000000000000;\n\n    // harrd cap = pubsaleCap + reservedSupply -> 200000000 DTY\n    uint256 public reservedSupply = 20000000000000000000000000; // 10% max totalSupply\n\n    uint256 public softCap = 840000000000000000000000; // 840 thousands STY\n\n    // start and end timestamps where investments are allowed (both inclusive)\n    // flag for investments finalization\n    uint256 public startTime = 1511276400; // GMT: Tuesday, November 21, 2017 15:00:00\n    uint256 public endTime;\n\n    // amount of raised money in wei\n    // address where funds are collected\n    uint256 public weiRaised = 0;\n    address public escrowWallet;\n    address public partnersWallet;\n\n    // contract of the token being sold\n    // contract of the vault used to hold funds while crowdsale is running\n    StyrasToken public token;\n    StyrasVault public vault;\n\n    State public state;\n\n    /**\n     * event for token purchase logging\n     * @param purchaser who paid for the tokens\n     * @param beneficiary who got the tokens\n     * @param value weis paid for purchase\n     * @param amount amount of tokens purchased\n     */\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n    event PresaleFinalized();\n    event Finalized();\n\n    function StyrasCrowdsale(address escrow, address partners) public {\n        require(now < startTime);\n        require(partners != address(0));\n        require(startTime < presaleDeadline);\n        require(presaleDeadline < pubsaleDeadline);\n        require(pubsaleRate < presaleRate);\n        require(presaleCap < pubsaleCap);\n        require(softCap <= pubsaleCap);\n        endTime = presaleDeadline;\n        escrowWallet = escrow;\n        partnersWallet = partners;\n        token = new StyrasToken(partnersWallet, reservedSupply);\n        vault = new StyrasVault(escrowWallet);\n        rate = presaleRate;\n        goal = softCap.div(rate);\n        cap = presaleCap.div(rate);\n        state = State.preSale;\n        assert(goal < cap);\n        assert(startTime < endTime);\n    }\n\n    // fallback function can be used to buy tokens\n    function () public payable {\n        buyTokens(msg.sender);\n    }\n  \n    // low level token purchase function\n    function buyTokens(address beneficiary) public payable {\n        require(beneficiary != address(0));\n        require(state < State.hasFinalized);\n        require(validPurchase());\n        uint256 weiAmount = msg.value;\n        // calculate token amount to be created\n        uint256 tokenAmount = weiAmount.mul(rate);\n        // update state\n        weiRaised = weiRaised.add(weiAmount);\n        token.mint(beneficiary, tokenAmount);\n        TokenPurchase(msg.sender, beneficiary, weiAmount, tokenAmount);\n        forwardFunds();\n    }\n\n    // send ether to the fund collection wallet\n    // override to create custom fund forwarding mechanisms\n    function forwardFunds() internal {\n        vault.deposit.value(msg.value)(msg.sender);\n        assert(vault.balance == weiRaised);\n    }\n\n    // @return true if the transaction can buy tokens\n    function validPurchase() internal constant returns (bool) {\n        bool withinPeriod = startTime <= now && now <= endTime;\n        bool nonZeroPurchase = msg.value > 0;\n        bool withinCap = weiRaised < cap;\n        bool overMinInvest = msg.value >= minInvest || vault.balanceOf(msg.sender) >= minInvest;\n        return withinPeriod && nonZeroPurchase && withinCap && overMinInvest;\n    }\n\n    function hardCap() public constant returns (uint256) {\n        return pubsaleCap + reservedSupply;\n    }\n\n    function goalReached() public constant returns (bool) {\n        return weiRaised >= goal;\n    }\n\n    // @return true if crowdsale event has ended\n    function hasEnded() public constant returns (bool) {\n        bool afterPeriod = now > endTime;\n        bool capReached = weiRaised >= cap;\n        return afterPeriod || capReached;\n    }\n\n    // if crowdsale is unsuccessful, investors can claim refunds here\n    function claimRefund() public {\n        require(state == State.hasFinalized);\n        require(!goalReached());\n        vault.refund(msg.sender);\n    }\n\n    function enableWithdraw() onlyOwner public {\n        require(goalReached());\n        vault.enableWithdraw();\n    }\n  \n    // if crowdsale is successful, owner can withdraw ether here\n    function withdraw(uint256 _weiAmountToWithdraw) onlyOwner public {\n        require(goalReached());\n        vault.withdraw(_weiAmountToWithdraw);\n    }\n\n    function finalizePresale() onlyOwner public {\n        require(state == State.preSale);\n        require(hasEnded());\n        uint256 weiDiff = 0;\n        uint256 raisedTokens = token.totalSupply();\n        rate = pubsaleRate;\n        if (!goalReached()) {\n            weiDiff = (softCap.sub(raisedTokens)).div(rate);\n            goal = weiRaised.add(weiDiff);\n        }\n        weiDiff = (pubsaleCap.sub(raisedTokens)).div(rate);\n        cap = weiRaised.add(weiDiff);\n        endTime = pubsaleDeadline;\n        state = State.publicSale;\n        assert(goal < cap);\n        assert(startTime < endTime);\n        PresaleFinalized();\n    }\n\n    /**\n     * @dev Must be called after crowdsale ends, to do some extra finalization\n     * work. Calls the contract's finalization function.\n     */\n    function finalize() onlyOwner public {\n        require(state == State.publicSale);\n        require(hasEnded());\n        finalization();\n        state = State.hasFinalized;\n        Finalized();\n    }\n\n    // vault finalization task, called when owner calls finalize()\n    function finalization() internal {\n        if (goalReached()) {\n            vault.close();\n            token.mintPartners(reservedSupply);\n        } else {\n            vault.enableRefunds();\n        }\n        vault.transferOwnership(owner);\n        token.transferOwnership(owner);\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partnersMintLockEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reservedSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balanceOfInvestor\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partnersLockEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintPartners\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partnersWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicLockEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"partners\",\"type\":\"address\"},{\"name\":\"reserved\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "6060604052600080556000600160146101000a81548160ff0219169083151502179055506040805190810160405280600681526020017f53747972617300000000000000000000000000000000000000000000000000008152506002908051906020019062000070929190620001fd565b506040805190810160405280600381526020017f535459000000000000000000000000000000000000000000000000000000000081525060039080519060200190620000be929190620001fd565b506012600455635a5d4080600655635b357680600755635a4828806008553415620000e857600080fd5b604051604080620022cf8339810160405280805190602001909190805190602001909190505033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156200018c57600080fd5b81600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060058190555060075460065411151515620001e557fe5b600754600854101515620001f557fe5b5050620002ac565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200024057805160ff191683800117855562000271565b8280016001018555821562000271579182015b828111156200027057825182559160200191906001019062000253565b5b50905062000280919062000284565b5090565b620002a991905b80821115620002a55760008160009055506001016200028b565b5090565b90565b61201380620002bc6000396000f300606060405260043610610133576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305d2035b1461013857806306fdde0314610165578063095ea7b3146101f35780630dc224ec1461024d57806318160ddd1461027657806323b872dd1461029f578063313ce5671461031857806340c10f191461034157806342966c681461039b57806344d19d2b146103be57806366188463146103e757806370a08231146104415780637d64bcb41461048e5780638da5cb5b146104bb5780638faa6cb71461051057806395d89b4114610539578063a1243ad3146105c7578063a9059cbb14610602578063a945f90f1461065c578063d73dd623146106b1578063dd62ed3e1461070b578063f2fde38b14610777578063f8d3e256146107b0575b600080fd5b341561014357600080fd5b61014b6107d9565b604051808215151515815260200191505060405180910390f35b341561017057600080fd5b6101786107ec565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101b857808201518184015260208101905061019d565b50505050905090810190601f1680156101e55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101fe57600080fd5b610233600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061088a565b604051808215151515815260200191505060405180910390f35b341561025857600080fd5b61026061097c565b6040518082815260200191505060405180910390f35b341561028157600080fd5b610289610982565b6040518082815260200191505060405180910390f35b34156102aa57600080fd5b6102fe600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610988565b604051808215151515815260200191505060405180910390f35b341561032357600080fd5b61032b610dcb565b6040518082815260200191505060405180910390f35b341561034c57600080fd5b610381600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610dd1565b604051808215151515815260200191505060405180910390f35b34156103a657600080fd5b6103bc6004808035906020019091905050611016565b005b34156103c957600080fd5b6103d16111ef565b6040518082815260200191505060405180910390f35b34156103f257600080fd5b610427600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506111f5565b604051808215151515815260200191505060405180910390f35b341561044c57600080fd5b610478600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611486565b6040518082815260200191505060405180910390f35b341561049957600080fd5b6104a16114cf565b604051808215151515815260200191505060405180910390f35b34156104c657600080fd5b6104ce61157a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561051b57600080fd5b6105236115a0565b6040518082815260200191505060405180910390f35b341561054457600080fd5b61054c6115a6565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561058c578082015181840152602081019050610571565b50505050905090810190601f1680156105b95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105d257600080fd5b6105e86004808035906020019091905050611644565b604051808215151515815260200191505060405180910390f35b341561060d57600080fd5b610642600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611901565b604051808215151515815260200191505060405180910390f35b341561066757600080fd5b61066f611ba9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156106bc57600080fd5b6106f1600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611bcf565b604051808215151515815260200191505060405180910390f35b341561071657600080fd5b610761600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611dcb565b6040518082815260200191505060405180910390f35b341561078257600080fd5b6107ae600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611e52565b005b34156107bb57600080fd5b6107c3611faa565b6040518082815260200191505060405180910390f35b600160149054906101000a900460ff1681565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108825780601f1061085757610100808354040283529160200191610882565b820191906000526020600020905b81548152906001019060200180831161086557829003601f168201915b505050505081565b600081600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60085481565b60005481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156109c557600080fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614158015610a2557506006544210155b80610a3257506007544210155b1515610a3d57600080fd5b600082118015610a8c5750600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211155b1515610a9757600080fd5b600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610b2257600080fd5b610b7482600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611fb090919063ffffffff16565b600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c0982600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611fc990919063ffffffff16565b600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610cdb82600b60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611fb090919063ffffffff16565b600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60045481565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e2f57600080fd5b600160149054906101000a900460ff16151515610e4b57600080fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610ea857600080fd5b610ebd82600054611fc990919063ffffffff16565b600081905550610f1582600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611fc990919063ffffffff16565b600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415801561107857506006544210155b8061108557506007544210155b151561109057600080fd5b6000821180156110df5750600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211155b15156110ea57600080fd5b33905061113f82600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611fb090919063ffffffff16565b600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061119782600054611fb090919063ffffffff16565b6000819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a25050565b60055481565b600080600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115611306576000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061139a565b6113198382611fb090919063ffffffff16565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561152d57600080fd5b60018060146101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60075481565b60038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561163c5780601f106116115761010080835404028352916020019161163c565b820191906000526020600020905b81548152906001019060200180831161161f57829003601f168201915b505050505081565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116a257600080fd5b600160149054906101000a900460ff161515156116be57600080fd5b60085442101515156116cf57600080fd5b60006005541115156116e057600080fd5b60055482111515156116f157600080fd5b61170682600054611fc990919063ffffffff16565b60008190555061172182600554611fb090919063ffffffff16565b60058190555061179b82600a6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611fc990919063ffffffff16565b600a6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a2600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561193e57600080fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415801561199e57506006544210155b806119ab57506007544210155b15156119b657600080fd5b600082118015611a055750600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211155b1515611a1057600080fd5b611a6282600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611fb090919063ffffffff16565b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611af782600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611fc990919063ffffffff16565b600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000611c6082600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611fc990919063ffffffff16565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611eae57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611eea57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60065481565b6000828211151515611fbe57fe5b818303905092915050565b6000808284019050838110151515611fdd57fe5b80915050929150505600a165627a7a7230582064bbeb3c5279ca1506600e0fc39faac8d0e0e794f176b026f551d5081fc0d49a002900000000000000000000000073705cbdd69d6f55a749effe410508cb933cdef8000000000000000000000000000000000000000000108b2a2c28029094000000",
  "constructorArguments": "00000000000000000000000073705cbdd69d6f55a749effe410508cb933cdef8000000000000000000000000000000000000000000108b2a2c28029094000000"
}