{
  "address": "0x1b64dd46fdc45bb8706beb306241f089ed5d85bc",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Carati",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-22\n*/\n\npragma solidity ^0.4.24;\n\n// File: contracts/token/ERC20/IERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: contracts/token/ERC20/ERC20Detailed.sol\n\n/**\n * @title ERC20Detailed token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract ERC20Detailed is IERC20 {\n  string private _name;\n  string private _symbol;\n  uint8 private _decimals;\n\n  constructor(string name, string symbol, uint8 decimals) public {\n    _name = name;\n    _symbol = symbol;\n    _decimals = decimals;\n  }\n\n  /**\n   * @return the name of the token.\n   */\n  function name() public view returns(string) {\n    return _name;\n  }\n\n  /**\n   * @return the symbol of the token.\n   */\n  function symbol() public view returns(string) {\n    return _symbol;\n  }\n\n  /**\n   * @return the number of decimals of the token.\n   */\n  function decimals() public view returns(uint8) {\n    return _decimals;\n  }\n}\n\n// File: contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n// File: contracts/token/ERC20/ERC20.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract ERC20 is IERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n\n  mapping (address => mapping (address => uint256)) private _allowed;\n\n  uint256 private _totalSupply;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param owner The address to query the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function transfer(address to, uint256 value) public returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    require(value <= _allowed[from][msg.sender]);\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    _transfer(from, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n  * @dev Transfer token for a specified addresses\n  * @param from The address to transfer from.\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function _transfer(address from, address to, uint256 value) internal {\n    require(value <= _balances[from]);\n    require(to != address(0));\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n\n  /**\n   * @dev Internal function that mints an amount of the token and assigns it to\n   * an account. This encapsulates the modification of balances such that the\n   * proper events are emitted.\n   * @param account The account that will receive the created tokens.\n   * @param value The amount that will be created.\n   */\n  function _mint(address account, uint256 value) internal {\n    require(account != 0);\n    _totalSupply = _totalSupply.add(value);\n    _balances[account] = _balances[account].add(value);\n    emit Transfer(address(0), account, value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burn(address account, uint256 value) internal {\n    require(account != 0);\n    require(value <= _balances[account]);\n\n    _totalSupply = _totalSupply.sub(value);\n    _balances[account] = _balances[account].sub(value);\n    emit Transfer(account, address(0), value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account, deducting from the sender's allowance for said account. Uses the\n   * internal burn function.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burnFrom(address account, uint256 value) internal {\n    require(value <= _allowed[account][msg.sender]);\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n      value);\n    _burn(account, value);\n  }\n}\n\n// File: contracts/access/Roles.sol\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an account access to this role\n   */\n  function add(Role storage role, address account) internal {\n    require(account != address(0));\n    require(!has(role, account));\n\n    role.bearer[account] = true;\n  }\n\n  /**\n   * @dev remove an account's access to this role\n   */\n  function remove(Role storage role, address account) internal {\n    require(account != address(0));\n    require(has(role, account));\n\n    role.bearer[account] = false;\n  }\n\n  /**\n   * @dev check if an account has this role\n   * @return bool\n   */\n  function has(Role storage role, address account)\n    internal\n    view\n    returns (bool)\n  {\n    require(account != address(0));\n    return role.bearer[account];\n  }\n}\n\n// File: contracts/access/roles/MinterRole.sol\n\ncontract MinterRole {\n  using Roles for Roles.Role;\n\n  event MinterAdded(address indexed account);\n  event MinterRemoved(address indexed account);\n\n  Roles.Role private minters;\n\n  constructor() internal {\n    _addMinter(msg.sender);\n  }\n\n  modifier onlyMinter() {\n    require(isMinter(msg.sender));\n    _;\n  }\n\n  function isMinter(address account) public view returns (bool) {\n    return minters.has(account);\n  }\n\n  function addMinter(address account) public onlyMinter {\n    _addMinter(account);\n  }\n\n  function renounceMinter() public {\n    _removeMinter(msg.sender);\n  }\n\n  function _addMinter(address account) internal {\n    minters.add(account);\n    emit MinterAdded(account);\n  }\n\n  function _removeMinter(address account) internal {\n    minters.remove(account);\n    emit MinterRemoved(account);\n  }\n}\n\n// File: contracts/token/ERC20/ERC20Mintable.sol\n\n/**\n * @title ERC20Mintable\n * @dev ERC20 minting logic\n */\ncontract ERC20Mintable is ERC20, MinterRole {\n  /**\n   * @dev Function to mint tokens\n   * @param to The address that will receive the minted tokens.\n   * @param value The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address to,\n    uint256 value\n  )\n    public\n    onlyMinter\n    returns (bool)\n  {\n    _mint(to, value);\n    return true;\n  }\n}\n\n// File: contracts/token/ERC20/ERC20Burnable.sol\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract ERC20Burnable is ERC20 {\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param value The amount of token to be burned.\n   */\n  function burn(uint256 value) public {\n    _burn(msg.sender, value);\n  }\n\n  /**\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n   * @param from address The address which you want to send tokens from\n   * @param value uint256 The amount of token to be burned\n   */\n  function burnFrom(address from, uint256 value) public {\n    _burnFrom(from, value);\n  }\n}\n\n// File: contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() internal {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\n// File: contracts/ERC223ReceivingContract.sol\n\ncontract ERC223ReceivingContract { \n    function tokenFallback(address _from, uint _value, bytes _data) public;\n}\n\n// File: contracts/Carati.sol\n\n//ERC223 compatible safe token\ncontract Carati is ERC20Detailed, ERC20Mintable, ERC20Burnable, Ownable {\n    constructor (string _name, string _symbol, uint8 _decimals) public\n        ERC20Detailed(_name, _symbol, _decimals)\n    {}\n\n    mapping (address => uint256) public balances;\n\n    // Overridden transfer method with _data param for transaction data (ERC223 Specification)\n    function transfer(address _to, uint _value, bytes _data) public {\n        uint codeLength;\n\n        assembly {\n            codeLength := extcodesize(_to)\n        }\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        // Check to see if receiver is contract\n        if(codeLength>0) {\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n            receiver.tokenFallback(msg.sender, _value, _data);\n        }\n        emit Transfer(msg.sender, _to, _value);\n    }\n    \n    // Overridden Backwards compatible transfer method without _data param (ERC223 Specification)\n    function transfer(address _to, uint _value) public returns (bool) {\n        uint codeLength;\n        bytes memory empty;\n\n        assembly {\n            codeLength := extcodesize(_to)\n        }\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        // Check to see if receiver is contract\n        if(codeLength>0) {\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n            receiver.tokenFallback(msg.sender, _value, empty);\n        }\n        emit Transfer(msg.sender, _to, _value);\n    }\n}",
  "bytecode": "60806040523480156200001157600080fd5b506040516200148b3803806200148b8339810160409081528151602080840151928401519184018051909493909301928491849184916200005891600091860190620001d4565b5081516200006e906001906020850190620001d4565b506002805460ff191660ff92909216919091179055506200009a905033640100000000620000ef810204565b60078054600160a060020a031916331790819055604051600160a060020a0391909116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350505062000279565b6200010a6006826401000000006200111c6200014182021704565b604051600160a060020a038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b600160a060020a03811615156200015757600080fd5b6200016c82826401000000006200019c810204565b156200017757600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6000600160a060020a0382161515620001b457600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200021757805160ff191683800117855562000247565b8280016001018555821562000247579182015b82811115620002475782518255916020019190600101906200022a565b506200025592915062000259565b5090565b6200027691905b8082111562000255576000815560010162000260565b90565b61120280620002896000396000f3006080604052600436106101325763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610137578063095ea7b3146101c157806318160ddd146101f957806323b872dd1461022057806327e235e31461024a578063313ce5671461026b578063395093511461029657806340c10f19146102ba57806342966c68146102de57806370a08231146102f8578063715018a61461031957806379cc67901461032e5780638da5cb5b146103525780638f32d59b1461038357806395d89b4114610398578063983b2d56146103ad57806398650275146103ce578063a457c2d7146103e3578063a9059cbb14610407578063aa271e1a1461042b578063be45fd621461044c578063dd62ed3e146104b5578063f2fde38b146104dc575b600080fd5b34801561014357600080fd5b5061014c6104fd565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561018657818101518382015260200161016e565b50505050905090810190601f1680156101b35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101cd57600080fd5b506101e5600160a060020a0360043516602435610593565b604080519115158252519081900360200190f35b34801561020557600080fd5b5061020e610611565b60408051918252519081900360200190f35b34801561022c57600080fd5b506101e5600160a060020a0360043581169060243516604435610617565b34801561025657600080fd5b5061020e600160a060020a03600435166106b4565b34801561027757600080fd5b506102806106c6565b6040805160ff9092168252519081900360200190f35b3480156102a257600080fd5b506101e5600160a060020a03600435166024356106cf565b3480156102c657600080fd5b506101e5600160a060020a036004351660243561077f565b3480156102ea57600080fd5b506102f66004356107a8565b005b34801561030457600080fd5b5061020e600160a060020a03600435166107b5565b34801561032557600080fd5b506102f66107d0565b34801561033a57600080fd5b506102f6600160a060020a036004351660243561083a565b34801561035e57600080fd5b50610367610848565b60408051600160a060020a039092168252519081900360200190f35b34801561038f57600080fd5b506101e5610857565b3480156103a457600080fd5b5061014c610868565b3480156103b957600080fd5b506102f6600160a060020a03600435166108c8565b3480156103da57600080fd5b506102f66108e5565b3480156103ef57600080fd5b506101e5600160a060020a03600435166024356108f0565b34801561041357600080fd5b506101e5600160a060020a036004351660243561093b565b34801561043757600080fd5b506101e5600160a060020a0360043516610ade565b34801561045857600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526102f6948235600160a060020a0316946024803595369594606494920191908190840183828082843750949750610af79650505050505050565b3480156104c157600080fd5b5061020e600160a060020a0360043581169060243516610c94565b3480156104e857600080fd5b506102f6600160a060020a0360043516610cbf565b60008054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105895780601f1061055e57610100808354040283529160200191610589565b820191906000526020600020905b81548152906001019060200180831161056c57829003601f168201915b5050505050905090565b6000600160a060020a03831615156105aa57600080fd5b336000818152600460209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60055490565b600160a060020a038316600090815260046020908152604080832033845290915281205482111561064757600080fd5b600160a060020a038416600090815260046020908152604080832033845290915290205461067b908363ffffffff610cdb16565b600160a060020a03851660009081526004602090815260408083203384529091529020556106aa848484610cf2565b5060019392505050565b60086020526000908152604090205481565b60025460ff1690565b6000600160a060020a03831615156106e657600080fd5b336000908152600460209081526040808320600160a060020a038716845290915290205461071a908363ffffffff610dd416565b336000818152600460209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600061078a33610ade565b151561079557600080fd5b61079f8383610ded565b50600192915050565b6107b23382610e87565b50565b600160a060020a031660009081526003602052604090205490565b6107d8610857565b15156107e357600080fd5b600754604051600091600160a060020a0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36007805473ffffffffffffffffffffffffffffffffffffffff19169055565b6108448282610f45565b5050565b600754600160a060020a031690565b600754600160a060020a0316331490565b60018054604080516020601f600260001961010087891615020190951694909404938401819004810282018101909252828152606093909290918301828280156105895780601f1061055e57610100808354040283529160200191610589565b6108d133610ade565b15156108dc57600080fd5b6107b281610fd7565b6108ee3361101f565b565b6000600160a060020a038316151561090757600080fd5b336000908152600460209081526040808320600160a060020a038716845290915290205461071a908363ffffffff610cdb16565b33600090815260086020526040812054833b906060908390610963908663ffffffff610cdb16565b3360009081526008602052604080822092909255600160a060020a03881681522054610995908663ffffffff610dd416565b600160a060020a038716600090815260086020526040812091909155831115610aa757506040517fc0ee0b8a0000000000000000000000000000000000000000000000000000000081523360048201818152602483018790526060604484019081528451606485015284518994600160a060020a0386169463c0ee0b8a9490938b93899360840190602085019080838360005b83811015610a40578181015183820152602001610a28565b50505050905090810190601f168015610a6d5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610a8e57600080fd5b505af1158015610aa2573d6000803e3d6000fd5b505050505b604080518681529051600160a060020a0388169133916000805160206111b78339815191529181900360200190a350505092915050565b6000610af160068363ffffffff61106716565b92915050565b33600090815260086020526040812054843b9190610b1b908563ffffffff610cdb16565b3360009081526008602052604080822092909255600160a060020a03871681522054610b4d908563ffffffff610dd416565b600160a060020a038616600090815260086020526040812091909155821115610c5f57506040517fc0ee0b8a0000000000000000000000000000000000000000000000000000000081523360048201818152602483018690526060604484019081528551606485015285518894600160a060020a0386169463c0ee0b8a9490938a938a9360840190602085019080838360005b83811015610bf8578181015183820152602001610be0565b50505050905090810190601f168015610c255780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610c4657600080fd5b505af1158015610c5a573d6000803e3d6000fd5b505050505b604080518581529051600160a060020a0387169133916000805160206111b78339815191529181900360200190a35050505050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205490565b610cc7610857565b1515610cd257600080fd5b6107b28161109e565b60008083831115610ceb57600080fd5b5050900390565b600160a060020a038316600090815260036020526040902054811115610d1757600080fd5b600160a060020a0382161515610d2c57600080fd5b600160a060020a038316600090815260036020526040902054610d55908263ffffffff610cdb16565b600160a060020a038085166000908152600360205260408082209390935590841681522054610d8a908263ffffffff610dd416565b600160a060020a0380841660008181526003602090815260409182902094909455805185815290519193928716926000805160206111b783398151915292918290030190a3505050565b600082820183811015610de657600080fd5b9392505050565b600160a060020a0382161515610e0257600080fd5b600554610e15908263ffffffff610dd416565b600555600160a060020a038216600090815260036020526040902054610e41908263ffffffff610dd416565b600160a060020a03831660008181526003602090815260408083209490945583518581529351929391926000805160206111b78339815191529281900390910190a35050565b600160a060020a0382161515610e9c57600080fd5b600160a060020a038216600090815260036020526040902054811115610ec157600080fd5b600554610ed4908263ffffffff610cdb16565b600555600160a060020a038216600090815260036020526040902054610f00908263ffffffff610cdb16565b600160a060020a0383166000818152600360209081526040808320949094558351858152935191936000805160206111b7833981519152929081900390910190a35050565b600160a060020a0382166000908152600460209081526040808320338452909152902054811115610f7557600080fd5b600160a060020a0382166000908152600460209081526040808320338452909152902054610fa9908263ffffffff610cdb16565b600160a060020a03831660009081526004602090815260408083203384529091529020556108448282610e87565b610fe860068263ffffffff61111c16565b604051600160a060020a038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b61103060068263ffffffff61116a16565b604051600160a060020a038216907fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b6000600160a060020a038216151561107e57600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b600160a060020a03811615156110b357600080fd5b600754604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36007805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a038116151561113157600080fd5b61113b8282611067565b1561114557600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b600160a060020a038116151561117f57600080fd5b6111898282611067565b151561119457600080fd5b600160a060020a0316600090815260209190915260409020805460ff191690555600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a7230582027a15951b18475d178eac08ce12ed9f3cb90d467acd2af3778fb7995e66d69970029000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000006436172617469000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000053234436172000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000006436172617469000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000053234436172000000000000000000000000000000000000000000000000000000"
}