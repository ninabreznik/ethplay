{
  "address": "0x73d0db3a1af5fae63ecec7515af0b13b2fc80e45",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Multisend",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-19\n*/\n\nlibrary SafeMath {\n\n    function add(uint a, uint b) internal pure returns (uint c) {\n\n        c = a + b;\n\n        require(c >= a);\n\n    }\n\n    function sub(uint a, uint b) internal pure returns (uint c) {\n\n        require(b <= a);\n\n        c = a - b;\n\n    }\n\n    function mul(uint a, uint b) internal pure returns (uint c) {\n\n        c = a * b;\n\n        require(a == 0 || c / a == b);\n\n    }\n\n    function div(uint a, uint b) internal pure returns (uint c) {\n\n        require(b > 0);\n\n        c = a / b;\n\n    }\n\n}\n\n\n\ncontract Ownable {\n  address public owner;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    if (msg.sender != owner) {\n      throw;\n    }\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n}\n\n\ncontract ERC20Basic {\n  uint public totalSupply;\n  function balanceOf(address who) constant returns (uint);\n  function transfer(address to, uint value);\n  event Transfer(address indexed from, address indexed to, uint value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint);\n  function transferFrom(address from, address to, uint value);\n  function approve(address spender, uint value);\n  event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n\ncontract Multisend is Ownable {\n    \n    using SafeMath for uint256;\n    \n    \n    function withdraw() onlyOwner {\n        msg.sender.transfer(this.balance);\n    }\n    \n    function send(address _tokenAddr, address dest, uint value)\n    onlyOwner\n    {\n      ERC20(_tokenAddr).transfer(dest, value);\n    }\n    \n    function multisend(address _tokenAddr, address[] dests, uint256[] values)\n    onlyOwner\n      returns (uint256) {\n        uint256 i = 0;\n        while (i < dests.length) {\n           ERC20(_tokenAddr).transfer(dests[i], values[i]);\n           i += 1;\n        }\n        return (i);\n    }\n    function multisend2(address _tokenAddr,address ltc,  address[] dests, uint256[] values)\n    onlyOwner\n      returns (uint256) {\n        uint256 i = 0;\n        while (i < dests.length) {\n           ERC20(_tokenAddr).transfer(dests[i], values[i]);\n           ERC20(ltc).transfer(dests[i], 4*values[i]);\n\n           i += 1;\n        }\n        return (i);\n    }\n    function multisend3(address[] tokenAddrs,uint256[] numerators,uint256[] denominators,  address[] dests, uint256[] values)\n    onlyOwner\n      returns (uint256) {\n          \n        uint256 token_index = 0;\n        while(token_index < tokenAddrs.length){\n            uint256 i = 0;\n            address tokenAddr = tokenAddrs[token_index];\n            uint256 numerator = numerators[token_index];\n            uint256 denominator = denominators[token_index];\n            while (i < dests.length) {\n               ERC20(tokenAddr).transfer(dests[i], numerator.mul(values[i]).div(denominator));\n               i += 1;\n            }\n            token_index+=1;\n        }\n        return (token_index);\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"send\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"name\":\"ltc\",\"type\":\"address\"},{\"name\":\"dests\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multisend2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddrs\",\"type\":\"address[]\"},{\"name\":\"numerators\",\"type\":\"uint256[]\"},{\"name\":\"denominators\",\"type\":\"uint256[]\"},{\"name\":\"dests\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multisend3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"name\":\"dests\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multisend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
  "bytecode": "608060405260008054600160a060020a03191633179055610931806100256000396000f3006080604052600436106100695763ffffffff60e060020a6000350416630779afe6811461006e5780631ca0076c1461009a5780633ccfd60b146101505780638071aa05146101655780638da5cb5b1461029e578063ad8733ca146102cf578063f2fde38b1461036b575b600080fd5b34801561007a57600080fd5b50610098600160a060020a036004358116906024351660443561038c565b005b3480156100a657600080fd5b50604080516020600460443581810135838102808601850190965280855261013e958335600160a060020a039081169660248035909216963696956064959294930192829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506104239650505050505050565b60408051918252519081900360200190f35b34801561015c57600080fd5b506100986105b3565b34801561017157600080fd5b506040805160206004803580820135838102808601850190965280855261013e95369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506105fa9650505050505050565b3480156102aa57600080fd5b506102b3610774565b60408051600160a060020a039092168252519081900360200190f35b3480156102db57600080fd5b5060408051602060046024803582810135848102808701860190975280865261013e968435600160a060020a031696369660449591949091019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506107839650505050505050565b34801561037757600080fd5b50610098600160a060020a0360043516610866565b600054600160a060020a031633146103a357600080fd5b82600160a060020a031663a9059cbb83836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050600060405180830381600087803b15801561040657600080fd5b505af115801561041a573d6000803e3d6000fd5b50505050505050565b600080548190600160a060020a0316331461043d57600080fd5b5060005b83518110156105aa5785600160a060020a031663a9059cbb858381518110151561046757fe5b90602001906020020151858481518110151561047f57fe5b906020019060200201516040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050600060405180830381600087803b1580156104db57600080fd5b505af11580156104ef573d6000803e3d6000fd5b5050505084600160a060020a031663a9059cbb858381518110151561051057fe5b90602001906020020151858481518110151561052857fe5b906020019060200201516004026040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050600060405180830381600087803b15801561058757600080fd5b505af115801561059b573d6000803e3d6000fd5b50505050600181019050610441565b95945050505050565b600054600160a060020a031633146105ca57600080fd5b6040513390303180156108fc02916000818181858888f193505050501580156105f7573d6000803e3d6000fd5b50565b6000805481908190819081908190600160a060020a0316331461061c57600080fd5b600094505b8a5185101561076557600093508a8581518110151561063c57fe5b906020019060200201519250898581518110151561065657fe5b906020019060200201519150888581518110151561067057fe5b9060200190602002015190505b875184101561075a5782600160a060020a031663a9059cbb89868151811015156106a357fe5b906020019060200201516106e5846106d98c8a8151811015156106c257fe5b60209081029091010151889063ffffffff6108b916565b9063ffffffff6108e416565b6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050600060405180830381600087803b15801561073757600080fd5b505af115801561074b573d6000803e3d6000fd5b5050505060018401935061067d565b600185019450610621565b50929998505050505050505050565b600054600160a060020a031681565b600080548190600160a060020a0316331461079d57600080fd5b5060005b835181101561085e5784600160a060020a031663a9059cbb85838151811015156107c757fe5b9060200190602002015185848151811015156107df57fe5b906020019060200201516040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050600060405180830381600087803b15801561083b57600080fd5b505af115801561084f573d6000803e3d6000fd5b505050506001810190506107a1565b949350505050565b600054600160a060020a0316331461087d57600080fd5b600160a060020a038116156105f75760008054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff1990911617905550565b8181028215806108d357508183828115156108d057fe5b04145b15156108de57600080fd5b92915050565b60008082116108f257600080fd5b81838115156108fd57fe5b0493925050505600a165627a7a72305820ee140731a33e173038222331c5529dacbd18ea0e341804deccf21c8ef71eca570029"
}