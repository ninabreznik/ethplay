{
  "address": "0x17cba58578eecaee898242a02edac75b8cc17231",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AUMXToken",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-16\n*/\n\npragma solidity ^0.4.18;\n\n/**************************************************************\n*\n* Alteum Token\n* AUMX ERC223 Token Standard\n* Author: Lex Garza \n* by ALTEUM / Copanga\n*\n**************************************************************/\n\n/**\n * ERC223 token by Dexaran\n * retreived from\n * https://github.com/Dexaran/ERC223-token-standard\n */\ncontract ERC223 {\n  uint public totalSupply;\n  function balanceOf(address who) public view returns (uint);\n  \n  function name() public view returns (string _name);\n  function symbol() public view returns (string _symbol);\n  function decimals() public view returns (uint8 _decimals);\n  function totalSupply() public view returns (uint256 _supply);\n\n  function transfer(address to, uint value) public returns (bool ok);\n  function transfer(address to, uint value, bytes data) public returns (bool ok);\n  function transfer(address to, uint value, bytes data, string custom_fallback) public returns (bool ok);\n  \n  event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n}\n\n\ncontract ContractReceiver {\n\tfunction tokenFallback(address _from, uint _value, bytes _data) public pure;\n}\n\n/*\n* Safe Math Library from Zeppelin Solidity\n* https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n*/\ncontract SafeMath\n{\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n      }\n    \n\tfunction safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tassert(b <= a);\n\t\treturn a - b;\n\t}\n\t\n\tfunction safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a / b;\n\t\treturn c;\n\t}\n\t\n\tfunction safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tuint256 c = a * b;\n\t\tassert(c / a == b);\n\t\treturn c;\n\t}\n}\n\ncontract AUMXToken is ERC223, SafeMath{\n\tmapping(address => mapping(address => uint)) allowed;\n\tmapping(address => uint) balances;\n\tstring public name = \"Alteum\";\n\tstring public symbol = \"AUM\";\n\tuint8 public decimals = 8; // Using a Satoshi as base for our decimals: 0.00000001;\n\tuint256 public totalSupply = 5000000000000000; // 50,000,000 AUM's, not mineable, not mintable;\n\t\n\tbool locked;\n\taddress Owner;\n\taddress swapperAddress;\n\t\n\tfunction AUMXToken() public {\n\t\tlocked = true;\n\t\tOwner = msg.sender;\n\t\tswapperAddress = msg.sender;\n\t\tbalances[msg.sender] = totalSupply;\n\t\tallowed[msg.sender][swapperAddress] = totalSupply;\n\t}\n\t\n\tmodifier isUnlocked()\n\t{\n\t\tif(locked && msg.sender != Owner) revert();\n\t\t_;\n\t}\n\t\n\tmodifier onlyOwner()\n\t{\n\t\tif(msg.sender != Owner) revert();\n\t\t_;\n\t}\n\t  \n\t// Function to access name of token .\n\tfunction name() public view returns (string _name) {\n\t\treturn name;\n\t}\n\t// Function to access symbol of token .\n\tfunction symbol() public view returns (string _symbol) {\n\t\treturn symbol;\n\t}\n\t// Function to access decimals of token .\n\tfunction decimals() public view returns (uint8 _decimals) {\n\t\treturn decimals;\n\t}\n\t// Function to access total supply of tokens .\n\tfunction totalSupply() public view returns (uint256 _totalSupply) {\n\t\treturn totalSupply;\n\t}\n\t  \n\tfunction ChangeSwapperAddress(address newSwapperAddress) public onlyOwner\n\t{\n\t\taddress oldSwapperAddress = swapperAddress;\n\t\tswapperAddress = newSwapperAddress;\n\t\tuint setAllowance = allowed[msg.sender][oldSwapperAddress];\n\t\tallowed[msg.sender][oldSwapperAddress] = 0;\n\t\tallowed[msg.sender][newSwapperAddress] = setAllowance;\n\t}\n\t\n\tfunction UnlockToken() public onlyOwner\n\t{\n\t\tlocked = false;\n\t}\n\t  \n\t  \n\t  \n\t// Function that is called when a user or another contract wants to transfer funds .\n\tfunction transfer(address _to, uint _value, bytes _data, string _custom_fallback) public isUnlocked returns (bool success) {\n\t\tif(isContract(_to)) {\n\t\t\tif (balanceOf(msg.sender) < _value) revert();\n\t\t\tbalances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n\t\t\tbalances[_to] = safeAdd(balanceOf(_to), _value);\n\t\t\tassert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\n\t\t\tTransfer(msg.sender, _to, _value, _data);\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn transferToAddress(_to, _value, _data);\n\t\t}\n\t}\n\t  \n\n\t// Function that is called when a user or another contract wants to transfer funds .\n\tfunction transfer(address _to, uint _value, bytes _data) public isUnlocked returns (bool success) {\n\t\tif(isContract(_to)) {\n\t\t\treturn transferToContract(_to, _value, _data);\n\t\t}\n\t\telse {\n\t\t\treturn transferToAddress(_to, _value, _data);\n\t\t}\n\t}\n\t  \n\t// Standard function transfer similar to ERC20 transfer with no _data .\n\t// Added due to backwards compatibility reasons .\n\tfunction transfer(address _to, uint _value) public isUnlocked returns (bool success) {\n\t\t//standard function transfer similar to ERC20 transfer with no _data\n\t\t//added due to backwards compatibility reasons\n\t\tbytes memory empty;\n\t\tif(isContract(_to)) {\n\t\t\treturn transferToContract(_to, _value, empty);\n\t\t}\n\t\telse {\n\t\t\treturn transferToAddress(_to, _value, empty);\n\t\t}\n\t}\n\n\t//assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n\tfunction isContract(address _addr) private view returns (bool is_contract) {\n\t\tuint length;\n\t\tassembly {\n\t\t\t//retrieve the size of the code on target address, this needs assembly\n\t\t\tlength := extcodesize(_addr)\n\t\t}\n\t\treturn (length>0);\n\t}\n\n\t//function that is called when transaction target is an address\n\tfunction transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n\t\tif (balanceOf(msg.sender) < _value) revert();\n\t\tbalances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n\t\tbalances[_to] = safeAdd(balanceOf(_to), _value);\n\t\tTransfer(msg.sender, _to, _value, _data);\n\t\treturn true;\n\t}\n\t  \n\t//function that is called when transaction target is a contract\n\tfunction transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n\t\tif (balanceOf(msg.sender) < _value) revert();\n\t\tbalances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n\t\tbalances[_to] = safeAdd(balanceOf(_to), _value);\n\t\tContractReceiver receiver = ContractReceiver(_to);\n\t\treceiver.tokenFallback(msg.sender, _value, _data);\n\t\tTransfer(msg.sender, _to, _value, _data);\n\t\treturn true;\n\t}\n\t\n\tfunction transferFrom(address _from, address _to, uint _value) public returns(bool)\n\t{\n\t\tif(locked && msg.sender != swapperAddress) revert();\n\t\tif (balanceOf(_from) < _value) revert();\n\t\tif(_value > allowed[_from][msg.sender]) revert();\n\t\t\n\t\tbalances[_from] = safeSub(balanceOf(_from), _value);\n\t\tallowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\n\t\tbalances[_to] = safeAdd(balanceOf(_to), _value);\n\t\tbytes memory empty;\n\t\tTransfer(_from, _to, _value, empty);\n\t\treturn true;\n\t}\n\n\tfunction balanceOf(address _owner) public view returns (uint balance) {\n\t\treturn balances[_owner];\n\t}\n}",
  "bytecode": "60606040526040805190810160405280600681526020017f416c7465756d0000000000000000000000000000000000000000000000000000815250600390805190602001906200005192919062000261565b506040805190810160405280600381526020017f41554d0000000000000000000000000000000000000000000000000000000000815250600490805190602001906200009f92919062000261565b506008600560006101000a81548160ff021916908360ff1602179055506611c37937e080006006553415620000d357600080fd5b6001600760006101000a81548160ff02191690831515021790555033600760016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600654600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600654600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555062000310565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002a457805160ff1916838001178555620002d5565b82800160010185558215620002d5579182015b82811115620002d4578251825591602001919060010190620002b7565b5b509050620002e49190620002e8565b5090565b6200030d91905b8082111562000309576000816000905550600101620002ef565b5090565b90565b61172980620003206000396000f3006060604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100b457806318160ddd1461014257806323b872dd1461016b578063313ce567146101e457806370a082311461021357806370f18bcd1461026057806395d89b4114610275578063a9059cbb14610303578063b9119b871461035d578063be45fd6214610396578063f6368f8a14610433575b600080fd5b34156100bf57600080fd5b6100c7610513565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101075780820151818401526020810190506100ec565b50505050905090810190601f1680156101345780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561014d57600080fd5b6101556105bb565b6040518082815260200191505060405180910390f35b341561017657600080fd5b6101ca600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506105c5565b604051808215151515815260200191505060405180910390f35b34156101ef57600080fd5b6101f7610965565b604051808260ff1660ff16815260200191505060405180910390f35b341561021e57600080fd5b61024a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061097c565b6040518082815260200191505060405180910390f35b341561026b57600080fd5b6102736109c5565b005b341561028057600080fd5b610288610a3e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102c85780820151818401526020810190506102ad565b50505050905090810190601f1680156102f55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561030e57600080fd5b610343600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610ae6565b604051808215151515815260200191505060405180910390f35b341561036857600080fd5b610394600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610b99565b005b34156103a157600080fd5b610419600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610de5565b604051808215151515815260200191505060405180910390f35b341561043e57600080fd5b6104f9600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610e90565b604051808215151515815260200191505060405180910390f35b61051b6116d5565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105b15780601f10610586576101008083540402835291602001916105b1565b820191906000526020600020905b81548152906001019060200180831161059457829003601f168201915b5050505050905090565b6000600654905090565b60006105cf6116e9565b600760009054906101000a900460ff1680156106395750600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b1561064357600080fd5b8261064d8661097c565b101561065857600080fd5b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548311156106e157600080fd5b6106f36106ed8661097c565b8461123b565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506107bc600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548461123b565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061084e6108488561097c565b84611254565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550806040518082805190602001908083835b6020831015156108c757805182526020820191506020810190506020830392506108a2565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16866040518082815260200191505060405180910390a460019150509392505050565b6000600560009054906101000a900460ff16905090565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a2157600080fd5b6000600760006101000a81548160ff021916908315150217905550565b610a466116d5565b60048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610adc5780601f10610ab157610100808354040283529160200191610adc565b820191906000526020600020905b815481529060010190602001808311610abf57829003601f168201915b5050505050905090565b6000610af06116e9565b600760009054906101000a900460ff168015610b5a5750600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15610b6457600080fd5b610b6d84611272565b15610b8457610b7d848483611285565b9150610b92565b610b8f848483611541565b91505b5092915050565b600080600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bf857600080fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915082600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b6000600760009054906101000a900460ff168015610e515750600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15610e5b57600080fd5b610e6484611272565b15610e7b57610e74848484611285565b9050610e89565b610e86848484611541565b90505b9392505050565b6000600760009054906101000a900460ff168015610efc5750600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15610f0657600080fd5b610f0f85611272565b156112255783610f1e3361097c565b1015610f2957600080fd5b610f3b610f353361097c565b8561123b565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f90610f8a8661097c565b85611254565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff166000836040518082805190602001908083835b6020831015156110225780518252602082019150602081019050602083039250610ffd565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207c01000000000000000000000000000000000000000000000000000000009004903387876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828051906020019080838360005b838110156111035780820151818401526020810190506110e8565b50505050905090810190601f1680156111305780820380516001836020036101000a031916815260200191505b50935050505060006040518083038185886187965a03f19350505050151561115457fe5b826040518082805190602001908083835b60208310151561118a5780518252602082019150602081019050602083039250611165565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16876040518082815260200191505060405180910390a460019050611233565b611230858585611541565b90505b949350505050565b600082821115151561124957fe5b818303905092915050565b600080828401905083811015151561126857fe5b8091505092915050565b600080823b905060008111915050919050565b600080836112923361097c565b101561129d57600080fd5b6112af6112a93361097c565b8561123b565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506113046112fe8661097c565b85611254565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508490508073ffffffffffffffffffffffffffffffffffffffff1663c0ee0b8a3386866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561140c5780820151818401526020810190506113f1565b50505050905090810190601f1680156114395780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b151561145957600080fd5b6102c65a03f1151561146a57600080fd5b505050826040518082805190602001908083835b6020831015156114a3578051825260208201915060208101905060208303925061147e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16876040518082815260200191505060405180910390a460019150509392505050565b60008261154d3361097c565b101561155857600080fd5b61156a6115643361097c565b8461123b565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506115bf6115b98561097c565b84611254565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816040518082805190602001908083835b6020831015156116385780518252602082019150602081019050602083039250611613565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16866040518082815260200191505060405180910390a4600190509392505050565b602060405190810160405280600081525090565b6020604051908101604052806000815250905600a165627a7a723058204fa3778a04b268086e09352c3815e8a0a37c346e3699d01c980cae26ba2a53bb0029"
}