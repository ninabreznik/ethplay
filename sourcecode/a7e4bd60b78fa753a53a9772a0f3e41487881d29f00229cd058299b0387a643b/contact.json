{
  "address": "0x0f43093b586b011258479e61d41a862e909386e0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PO8PrivateSaleToken03",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-22\n*/\n\npragma solidity^0.4.21;\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() public {\n        owner = address(0x072F140DcCCE18F9966Aeb6D71ffcD0b42748683);\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\ncontract ERC20 {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public;\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract PO8BaseToken is ERC20 {\n    using SafeMath for uint256;\n    \n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 totalSupply_;\n\n    mapping(address => uint256) balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    constructor(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply) public{\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        totalSupply_ = _totalSupply;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n\n    function _transfer(address _from, address _to, uint256 _value) internal {\n        require(_to != address(0));\n        require(balances[_from] >= _value);\n        require(balances[_to].add(_value) > balances[_to]);\n\n\n        uint256 previousBalances = balances[_from].add(balances[_to]);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(_from, _to, _value);\n\n        assert(balances[_from].add(balances[_to]) == previousBalances);\n    }\n\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_value <= allowed[_from][msg.sender]);     // Check allowance\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}\n\ncontract PO8Token is PO8BaseToken(\"PO8 Token\", \"PO8\", 18, 10000000000000000000000000000), Ownable {\n\n    uint256 internal privateToken;\n    uint256 internal preSaleToken;\n    uint256 internal crowdSaleToken;\n    uint256 internal bountyToken;\n    uint256 internal foundationToken;\n    address public founderAddress;\n    bool public unlockAllTokens;\n\n    mapping (address => bool) public approvedAccount;\n\n    event UnFrozenFunds(address target, bool unfrozen);\n    event UnLockAllTokens(bool unlock);\n\n    constructor() public {\n        founderAddress = address(0x072F140DcCCE18F9966Aeb6D71ffcD0b42748683);\n        balances[founderAddress] = totalSupply_;\n        emit Transfer(address(0), founderAddress, totalSupply_);\n    }\n\n    function _transfer(address _from, address _to, uint _value) internal {\n        require (_to != address(0));                               \n        require (balances[_from] >= _value);               \n        require (balances[_to].add(_value) >= balances[_to]); \n        require(approvedAccount[_from] || unlockAllTokens);\n\n        balances[_from] = balances[_from].sub(_value);                  \n        balances[_to] = balances[_to].add(_value);                  \n        emit Transfer(_from, _to, _value);\n    }\n\n    function unlockAllTokens(bool _unlock) public onlyOwner {\n        unlockAllTokens = _unlock;\n        emit UnLockAllTokens(_unlock);\n    }\n\n    function approvedAccount(address target, bool approval) public onlyOwner {\n        approvedAccount[target] = approval;\n        emit UnFrozenFunds(target, approval);\n    }\n}\n\ncontract PO8PrivateSaleToken03 is Ownable{\n    using SafeMath for uint256;\n\n    PO8Token public token;\n    address public wallet;\n    uint256 public currentRate;\n    uint256 public limitTokenForSale;\n    mapping (address => bool) claimAfter45ds;\n    mapping (address => uint) boughtTime;\n    mapping (address => mapping(uint => uint)) boughtUser;\n\n    event ChangeRate(address indexed who, uint256 newrate);\n    event FinishSale();\n    event ClaimAfter45Days();\n    event ClaimAfter90Days();\n\n    constructor() public {\n        currentRate = 15000;\n        wallet = address(0x072F140DcCCE18F9966Aeb6D71ffcD0b42748683); //address of founder\n        limitTokenForSale = 1250000000000000000000000000;\n        token = PO8Token(0x8744a672D5a2df51Da92B4BAb608CE7ff4Ddd804);// address of PO8 Token\n    }\n\n    function changeRate(uint256 newrate) public onlyOwner{\n        require(newrate > 0);\n        currentRate = newrate;\n\n        emit ChangeRate(msg.sender, newrate);\n    }\n\n    function remainTokens() view public returns(uint256) {\n        return token.balanceOf(this);\n    }\n\n    function finish() public onlyOwner {\n        uint256 reTokens = remainTokens();\n        token.transfer(owner, reTokens);\n        \n        emit FinishSale();\n    }\n\n    function getBoughtTime(address user) view public returns (uint256){\n        return boughtTime[user];\n    }\n    function userBalance(address user)view public returns (uint256){\n        return boughtUser[user][boughtTime[user]];\n    }\n    \n    function remainUserTokenBalance(address user)view public returns (uint256){\n        return userBalance(user) * currentRate;\n    }\n\n    function () public payable {\n        assert(msg.value >= 1 ether);\n        uint256 time = now * 1000;\n        \n        uint256 _value = msg.value.div(3);\n        uint256 tokens = currentRate.mul(_value);\n        token.transfer(msg.sender, tokens);        \n        wallet.transfer(msg.value); \n        boughtTime[msg.sender] = time;//assign time\n        boughtUser[msg.sender][boughtTime[msg.sender]] = boughtUser[msg.sender][boughtTime[msg.sender]].add(msg.value.sub(_value));\n        claimAfter45ds[msg.sender] = false;\n    }\n\n    function claimAfter45days() external returns (bool){\n        require((now * 1000 - 3888000000) >= getBoughtTime(msg.sender)); // after 45 days\n        require(userBalance(msg.sender) > 0);\n        require(claimAfter45ds[msg.sender] != true);\n\n        uint256 _value = boughtUser[msg.sender][boughtTime[msg.sender]].div(2);\n        uint256 tokens = currentRate.mul(_value);\n        token.transfer(msg.sender, tokens);\n        boughtUser[msg.sender][boughtTime[msg.sender]] = boughtUser[msg.sender][boughtTime[msg.sender]].sub(_value);\n        emit ClaimAfter45Days();\n        claimAfter45ds[msg.sender] = true;\n        return true;\n    }\n\n    function claimAfter90days() external returns (bool){\n        require((now * 1000 - 7776000000) >= getBoughtTime(msg.sender)); // after 90 days\n        require(userBalance(msg.sender) > 0);\n        require(claimAfter45ds[msg.sender] == true);\n\n        uint256 _value = boughtUser[msg.sender][boughtTime[msg.sender]];\n        uint256 tokens = currentRate.mul(_value);\n        token.transfer(msg.sender, tokens);\n        boughtUser[msg.sender][boughtTime[msg.sender]] = boughtUser[msg.sender][boughtTime[msg.sender]].sub(_value);\n        emit ClaimAfter90Days();\n        return true;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"limitTokenForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimAfter90days\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"remainUserTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newrate\",\"type\":\"uint256\"}],\"name\":\"changeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBoughtTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimAfter45days\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newrate\",\"type\":\"uint256\"}],\"name\":\"ChangeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FinishSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ClaimAfter45Days\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ClaimAfter90Days\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": ""
}