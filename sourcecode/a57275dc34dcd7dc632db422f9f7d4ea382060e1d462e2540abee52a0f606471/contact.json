{
  "address": "0x8f7dbf90e71285552a687097220e1035c2e87639",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "_0xCatetherToken",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-05\n*/\n\npragma solidity ^0.4.23;\n// ----------------------------------------------------------------------------\n// '0xCatether Token' contract\n// Mineable ERC20 Token using Proof Of Work\n//\n// Symbol      : 0xCATE\n// Name        : 0xCatether Token\n// Total supply: No Limit\n// Decimals    : 4\n//\n// ----------------------------------------------------------------------------\n// ----------------------------------------------------------------------------\n// Safe maths\n// ----------------------------------------------------------------------------\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\nlibrary ExtendedMath {\n    //return the smaller of the two inputs (a or b)\n    function limitLessThan(uint a, uint b) internal pure returns (uint c) {\n        if(a > b) return b;\n        return a;\n    }\n}\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\ncontract EIP918Interface {\n\n    /*\n     * Externally facing mint function that is called by miners to validate challenge digests, calculate reward,\n     * populate statistics, mutate epoch variables and adjust the solution difficulty as required. Once complete,\n     * a Mint event is emitted before returning a success indicator.\n     **/\n    function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success);\n\n    /*\n     * Optional\n     * Externally facing merge function that is called by miners to validate challenge digests, calculate reward,\n     * populate statistics, mutate epoch variables and adjust the solution difficulty as required. Additionally, the\n     * merge function takes an array of target token addresses to be used in merged rewards. Once complete,\n     * a Mint event is emitted before returning a success indicator.\n     **/\n    //function merge(uint256 nonce, bytes32 challenge_digest, address[] mineTokens) public returns (bool);\n\n    /*\n     * Returns the challenge number\n     **/\n    function getChallengeNumber() public view returns (bytes32);\n\n    /*\n     * Returns the mining difficulty. The number of digits that the digest of the PoW solution requires which \n     * typically auto adjusts during reward generation.\n     **/\n    function getMiningDifficulty() public view returns (uint);\n\n    /*\n     * Returns the mining target\n     **/\n    function getMiningTarget() public view returns (uint);\n\n    /*\n     * Return the current reward amount. Depending on the algorithm, typically rewards are divided every reward era \n     * as tokens are mined to provide scarcity\n     **/\n    function getMiningReward() public view returns (uint);\n    \n    /*\n     * Upon successful verification and reward the mint method dispatches a Mint Event indicating the reward address, \n     * the reward amount, the epoch count and newest challenge number.\n     **/\n    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\n\n}\n// ----------------------------------------------------------------------------\n// Contract function to receive approval and execute function in one call\n//\n// Borrowed from MiniMeToken\n// ----------------------------------------------------------------------------\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n}\n// ----------------------------------------------------------------------------\n// Owned contract\n// ----------------------------------------------------------------------------\ncontract Owned {\n    address public owner;\n    address public newOwner;\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n    \n    constructor() public {\n        owner = msg.sender;\n    }\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\n// ----------------------------------------------------------------------------\n// ERC20 Token, with the addition of symbol, name and decimals and an\n// initial fixed supply\n// ----------------------------------------------------------------------------\ncontract _0xCatetherToken is ERC20Interface, EIP918Interface, Owned {\n    using SafeMath for uint;\n    using ExtendedMath for uint;\n    string public symbol;\n    string public  name;\n    uint8 public decimals;\n    uint public _totalSupply;\n    uint public latestDifficultyPeriodStarted;\n    uint public epochCount;//number of 'blocks' mined\n    //a little number\n    uint public  _MINIMUM_TARGET = 2**16;\n    //a big number is easier ; just find a solution that is smaller\n    //uint public  _MAXIMUM_TARGET = 2**224;  bitcoin uses 224\n    uint public  _MAXIMUM_TARGET = 2**224;\n    uint public miningTarget;\n    bytes32 public challengeNumber;   //generate a new one when a new reward is minted\n    address public lastRewardTo;\n    uint public lastRewardAmount;\n    uint public lastRewardEthBlockNumber;\n    // a bunch of maps to know where this is going (pun intended)\n    \n    mapping(bytes32 => bytes32) public solutionForChallenge;\n    mapping(uint => uint) public targetForEpoch;\n    mapping(uint => uint) public timeStampForEpoch;\n    mapping(address => uint) balances;\n    mapping(address => address) donationsTo;\n    mapping(address => mapping(address => uint)) allowed;\n    event Donation(address donation);\n    event DonationAddressOf(address donator, address donnationAddress);\n    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\n\n    // ------------------------------------------------------------------------\n    // Constructor\n    // ------------------------------------------------------------------------\n    constructor() public{\n        symbol = \"0xCATE\";\n        name = \"0xCatether Token\";\n        \n        decimals = 4;\n        epochCount = 0;\n        _totalSupply = 1337000000*10**uint(decimals); \n        \n        targetForEpoch[epochCount] = _MAXIMUM_TARGET;\n        challengeNumber = \"GENESIS_BLOCK\";\n        solutionForChallenge[challengeNumber] = \"42\"; // ahah yes\n        timeStampForEpoch[epochCount] = block.timestamp;\n        latestDifficultyPeriodStarted = block.number;\n        \n        epochCount = epochCount.add(1);\n        targetForEpoch[epochCount] = _MAXIMUM_TARGET;\n        miningTarget = _MAXIMUM_TARGET;\n        \n        balances[owner] = _totalSupply;\n        emit Transfer(address(0), owner, _totalSupply);\n    }\n\n    function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success) {\n        //the PoW must contain work that includes a recent ethereum block hash (challenge number) and the msg.sender's address to prevent MITM attacks\n        bytes32 digest =  keccak256(challengeNumber, msg.sender, nonce );\n        //the challenge digest must match the expected\n        if (digest != challenge_digest) revert();\n        //the digest must be smaller than the target\n        if(uint256(digest) > miningTarget) revert();\n        //only allow one reward for each challenge\n        bytes32 solution = solutionForChallenge[challenge_digest];\n        solutionForChallenge[challengeNumber] = digest;\n        if(solution != 0x0) revert();  //prevent the same answer from awarding twice\n        uint reward_amount = getMiningReward();\n        balances[msg.sender] = balances[msg.sender].add(reward_amount);\n        _totalSupply = _totalSupply.add(reward_amount);\n        //set readonly diagnostics data\n        lastRewardTo = msg.sender;\n        lastRewardAmount = reward_amount;\n        lastRewardEthBlockNumber = block.number;\n        _startNewMiningEpoch();\n        emit Mint(msg.sender, reward_amount, epochCount, challengeNumber );\n       return true;\n    }\n\n    //a new 'block' to be mined\n    function _startNewMiningEpoch() internal {\n        \n        timeStampForEpoch[epochCount] = block.timestamp;\n        epochCount = epochCount.add(1);\n    \n      //Difficulty adjustment following the DigiChieldv3 implementation (Tempered-SMA)\n      // Allows more thorough protection against multi-pool hash attacks\n      // https://github.com/zawy12/difficulty-algorithms/issues/9\n        miningTarget = _reAdjustDifficulty(epochCount);\n      //make the latest ethereum block hash a part of the next challenge for PoW to prevent pre-mining future blocks\n      //do this last since this is a protection mechanism in the mint() function\n      challengeNumber = blockhash(block.number.sub(1));\n    }\n\n    //https://github.com/zawy12/difficulty-algorithms/issues/21\n    //readjust the target via a tempered EMA\n    function _reAdjustDifficulty(uint epoch) internal returns (uint) {\n    \n        uint timeTarget = 300;  // We want miners to spend 5 minutes to mine each 'block'\n        uint N = 6180;          //N = 1000*n, ratio between timeTarget and windowTime (31-ish minutes)\n                                // (Ethereum doesn't handle floating point numbers very well)\n        uint elapsedTime = timeStampForEpoch[epoch.sub(1)].sub(timeStampForEpoch[epoch.sub(2)]); // will revert if current timestamp is smaller than the previous one\n        targetForEpoch[epoch] = (targetForEpoch[epoch.sub(1)].mul(10000)).div( N.mul(3920).div(N.sub(1000).add(elapsedTime.mul(1042).div(timeTarget))).add(N));\n        //              newTarget   =   Tampered EMA-retarget on the last 6 blocks (a bit more, it's an approximation)\n\t// \t\t\t\tAlso, there's an adjust factor, in order to correct the delays induced by the time it takes for transactions to confirm\n\t//\t\t\t\tDifficulty is adjusted to the time it takes to produce a valid hash. Here, if we set it to take 300 seconds, it will actually take \n\t//\t\t\t\t300 seconds + TxConfirmTime to validate that block. So, we wad a little % to correct that lag time.\n\t//\t\t\t\tOnce Ethereum scales, it will actually make block times go a tad faster. There's no perfect answer to this problem at the moment\n        latestDifficultyPeriodStarted = block.number;\n        return targetForEpoch[epoch];\n    }\n\n    //this is a recent ethereum block hash, used to prevent pre-mining future blocks\n    function getChallengeNumber() public constant returns (bytes32) {\n        return challengeNumber;\n    }\n\n    //the number of zeroes the digest of the PoW solution requires.  Auto adjusts\n     function getMiningDifficulty() public constant returns (uint) {\n        return _MAXIMUM_TARGET.div(targetForEpoch[epochCount]);\n    }\n\n    function getMiningTarget() public constant returns (uint) {\n       return targetForEpoch[epochCount];\n    }\n\n    //There's no limit to the coin supply\n    //reward follows more or less the same emmission rate as Dogecoins'. 5 minutes per block / 105120 block in one year (roughly)\n    function getMiningReward() public constant returns (uint) {\n        bytes32 digest = solutionForChallenge[challengeNumber];\n        if(epochCount > 160000) return (50000   * 10**uint(decimals) );                                   //  14.4 M/day / ~ 1.0B Tokens in 20'000 blocks (coin supply @100'000th block ~ 150 Billions)\n        if(epochCount > 140000) return (75000   * 10**uint(decimals) );                                   //  21.6 M/day / ~ 1.5B Tokens in 20'000 blocks (coin supply @100'000th block ~ 149 Billions)\n        if(epochCount > 120000) return (125000  * 10**uint(decimals) );                                  //  36.0 M/day / ~ 2.5B Tokens in 20'000 blocks (coin supply @100'000th block ~ 146 Billions)\n        if(epochCount > 100000) return (250000  * 10**uint(decimals) );                                  //  72.0 M/day / ~ 5.0B Tokens in 20'000 blocks (coin supply @100'000th block ~ 141 Billions) (~ 1 year elapsed)\n        if(epochCount > 80000) return  (500000  * 10**uint(decimals) );                                   // 144.0 M/day / ~10.0B Tokens in 20'000 blocks (coin supply @ 80'000th block ~ 131 Billions)\n        if(epochCount > 60000) return  (1000000 * 10**uint(decimals) );                                  // 288.0 M/day / ~20.0B Tokens in 20'000 blocks (coin supply @ 60'000th block ~ 111 Billions)\n        if(epochCount > 40000) return  ((uint256(keccak256(digest)) % 2500000) * 10**uint(decimals) );   // 360.0 M/day / ~25.0B Tokens in 20'000 blocks (coin supply @ 40'000th block ~  86 Billions)\n        if(epochCount > 20000) return  ((uint256(keccak256(digest)) % 3500000) * 10**uint(decimals) );   // 504.0 M/day / ~35.0B Tokens in 20'000 blocks (coin supply @ 20'000th block ~  51 Billions)\n                               return  ((uint256(keccak256(digest)) % 5000000) * 10**uint(decimals) );                         // 720.0 M/day / ~50.0B Tokens in 20'000 blocks \n    }\n\n    //help debug mining software (even though challenge_digest isn't used, this function is constant and helps troubleshooting mining issues)\n    function getMintDigest(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number) public view returns (bytes32 digesttest) {\n        bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\n        return digest;\n    }\n\n    //help debug mining software\n    function checkMintSolution(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number, uint testTarget) public view returns (bool success) {\n      bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\n      if(uint256(digest) > testTarget) revert();\n      return (digest == challenge_digest);\n    }\n\n    // ------------------------------------------------------------------------\n    // Total supply\n    // ------------------------------------------------------------------------\n    function totalSupply() public constant returns (uint) {\n        return _totalSupply.sub(balances[address(0)]);\n    }\n\n    // ------------------------------------------------------------------------\n    // Get the token balance for account `tokenOwner`\n    // ------------------------------------------------------------------------\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n        return balances[tokenOwner];\n    }\n    \n    function donationTo(address tokenOwner) public constant returns (address donationAddress) {\n        return donationsTo[tokenOwner];\n    }\n    \n    function changeDonation(address donationAddress) public returns (bool success) {\n        donationsTo[msg.sender] = donationAddress;\n        \n        emit DonationAddressOf(msg.sender , donationAddress); \n        return true;\n    \n    }\n\n    // ------------------------------------------------------------------------\n    // Transfer the balance from token owner's account to `to` account\n    // - Owner's account must have sufficient balance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transfer(address to, uint tokens) public returns (bool success) {\n        \n        address donation = donationsTo[msg.sender];\n        balances[msg.sender] = (balances[msg.sender].sub(tokens)).add(5000); // 0.5 CATE for the sender\n        \n        balances[to] = balances[to].add(tokens);\n        balances[donation] = balances[donation].add(5000); // 0.5 CATE for the sender's donation address\n        \n        emit Transfer(msg.sender, to, tokens);\n        emit Donation(donation);\n        \n        return true;\n    }\n    \n    function transferAndDonateTo(address to, uint tokens, address donation) public returns (bool success) {\n        \n        balances[msg.sender] = (balances[msg.sender].sub(tokens)).add(5000); // 0.5 CATE for the sender\n        balances[to] = balances[to].add(tokens);\n        balances[donation] = balances[donation].add(5000); // 0.5 CATE for the sender's specified donation address\n        emit Transfer(msg.sender, to, tokens);\n        emit Donation(donation);\n        return true;\n    }\n    // ------------------------------------------------------------------------\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n    // from the token owner's account\n    //\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n    // recommends that there are no checks for the approval double-spend attack\n    // as this should be implemented in user interfaces\n    // ------------------------------------------------------------------------\n    function approve(address spender, uint tokens) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Transfer `tokens` from the `from` account to the `to` account\n    //\n    // The calling account must already have sufficient tokens approve(...)-d\n    // for spending from the `from` account and\n    // - From account must have sufficient balance to transfer\n    // - Spender must have sufficient allowance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n        \n        balances[from] = balances[from].sub(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        balances[donationsTo[from]] = balances[donationsTo[from]].add(5000);     // 0.5 CATE for the sender's donation address\n        balances[donationsTo[msg.sender]] = balances[donationsTo[msg.sender]].add(5000); // 0.5 CATE for the sender\n        emit Transfer(from, to, tokens);\n        emit Donation(donationsTo[from]);\n        emit Donation(donationsTo[msg.sender]);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Returns the amount of tokens approved by the owner that can be\n    // transferred to the spender's account\n    // ------------------------------------------------------------------------\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n    // from the token owner's account. The `spender` contract function\n    // `receiveApproval(...)` is then executed\n    // ------------------------------------------------------------------------\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Don't accept ETH\n    // ------------------------------------------------------------------------\n    function () public payable {\n        revert();\n    }\n    \n    // ------------------------------------------------------------------------\n    // Owner can transfer out any accidentally sent ERC20 tokens\n    // ------------------------------------------------------------------------\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"donation\",\"type\":\"address\"}],\"name\":\"transferAndDonateTo\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRewardEthBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMiningDifficulty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"challenge_digest\",\"type\":\"bytes32\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"timeStampForEpoch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMiningTarget\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"donationAddress\",\"type\":\"address\"}],\"name\":\"changeDonation\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMiningReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getChallengeNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRewardTo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"targetForEpoch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"challenge_digest\",\"type\":\"bytes32\"},{\"name\":\"challenge_number\",\"type\":\"bytes32\"},{\"name\":\"testTarget\",\"type\":\"uint256\"}],\"name\":\"checkMintSolution\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"epochCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_MAXIMUM_TARGET\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"miningTarget\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"challengeNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"challenge_digest\",\"type\":\"bytes32\"},{\"name\":\"challenge_number\",\"type\":\"bytes32\"}],\"name\":\"getMintDigest\",\"outputs\":[{\"name\":\"digesttest\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"solutionForChallenge\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRewardAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestDifficultyPeriodStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"donationTo\",\"outputs\":[{\"name\":\"donationAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_MINIMUM_TARGET\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"donation\",\"type\":\"address\"}],\"name\":\"Donation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"donator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"donnationAddress\",\"type\":\"address\"}],\"name\":\"DonationAddressOf\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reward_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"epochCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newChallengeNumber\",\"type\":\"bytes32\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "6080604052620100006008557c01000000000000000000000000000000000000000000000000000000006009553480156200003957600080fd5b5060008054600160a060020a03191633600160a060020a03161790556040805180820190915260068082527f307843415445000000000000000000000000000000000000000000000000000060209092019182526200009b9160029162000272565b506040805180820190915260108082527f3078436174657468657220546f6b656e000000000000000000000000000000006020909201918252620000e29160039162000272565b506004805460ff19168117908190556000600781905560ff909116600a0a634fb10040026005556009547f6e0956cda88cad152e89927e53611735b61a5c762d1428573c6931b0a5efcb01557f47454e455349535f424c4f434b00000000000000000000000000000000000000600b557f34320000000000000000000000000000000000000000000000000000000000007fa9627a23c819d4cd6e47e1743d5e8f45a9ecd777e0d92602b7f4f6ecc3c579d7558080526011602052427f4ad3b33220dddc71b994a52d72c06b10862965f7d926534c05c00fb7e819e7b75543600655620001df9060016401000000006200025b81026200158b1704565b60078190556009546000918252601060209081526040808420839055600a929092556005548354600160a060020a03908116855260128352838520829055845484519283529351931693927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a362000317565b818101828110156200026c57600080fd5b92915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002b557805160ff1916838001178555620002e5565b82800160010185558215620002e5579182015b82811115620002e5578251825591602001919060010190620002c8565b50620002f3929150620002f7565b5090565b6200031491905b80821115620002f35760008155600101620002fe565b90565b61178b80620003276000396000f3006080604052600436106101d75763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146101dc578063095ea7b3146102665780630f917e311461029e578063163aa00d146102c957806317da485f146102f05780631801fbe51461030557806318160ddd1461032057806323b872dd1461033557806329de37981461035f578063313ce5671461037757806332e99708146103a25780633eaaf86b146103b75780633f06e17c146103cc578063490203a7146103ed5780634ef37628146104025780636fd396d61461041757806370a082311461044857806371d9e0df1461046957806379ba50971461048157806381269a5614610498578063829965cc146104b957806387a2a9d6146104ce5780638a769d35146104e35780638ae0368b146104f85780638da5cb5b1461050d57806395d89b411461052257806397566aa014610537578063a70a8d2314610555578063a9059cbb1461056d578063bafedcaa14610591578063cae9ca51146105a6578063cb9ae7071461060f578063d416efdb14610624578063d4ee1d9014610645578063dc39d06d1461065a578063dc6e9cf91461067e578063dd62ed3e14610693578063f2fde38b146106ba575b600080fd5b3480156101e857600080fd5b506101f16106db565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561022b578181015183820152602001610213565b50505050905090810190601f1680156102585780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561027257600080fd5b5061028a600160a060020a0360043516602435610769565b604080519115158252519081900360200190f35b3480156102aa57600080fd5b5061028a600160a060020a0360043581169060243590604435166107d4565b3480156102d557600080fd5b506102de61090a565b60408051918252519081900360200190f35b3480156102fc57600080fd5b506102de610910565b34801561031157600080fd5b5061028a600435602435610939565b34801561032c57600080fd5b506102de610ab4565b34801561034157600080fd5b5061028a600160a060020a0360043581169060243516604435610af2565b34801561036b57600080fd5b506102de600435610d2d565b34801561038357600080fd5b5061038c610d3f565b6040805160ff9092168252519081900360200190f35b3480156103ae57600080fd5b506102de610d48565b3480156103c357600080fd5b506102de610d5d565b3480156103d857600080fd5b5061028a600160a060020a0360043516610d63565b3480156103f957600080fd5b506102de610de1565b34801561040e57600080fd5b506102de610f56565b34801561042357600080fd5b5061042c610f5c565b60408051600160a060020a039092168252519081900360200190f35b34801561045457600080fd5b506102de600160a060020a0360043516610f6b565b34801561047557600080fd5b506102de600435610f86565b34801561048d57600080fd5b50610496610f98565b005b3480156104a457600080fd5b5061028a600435602435604435606435611024565b3480156104c557600080fd5b506102de611077565b3480156104da57600080fd5b506102de61107d565b3480156104ef57600080fd5b506102de611083565b34801561050457600080fd5b506102de611089565b34801561051957600080fd5b5061042c61108f565b34801561052e57600080fd5b506101f161109e565b34801561054357600080fd5b506102de6004356024356044356110f6565b34801561056157600080fd5b506102de600435611134565b34801561057957600080fd5b5061028a600160a060020a0360043516602435611146565b34801561059d57600080fd5b506102de611280565b3480156105b257600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261028a948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506112869650505050505050565b34801561061b57600080fd5b506102de611409565b34801561063057600080fd5b5061042c600160a060020a036004351661140f565b34801561065157600080fd5b5061042c61142d565b34801561066657600080fd5b5061028a600160a060020a036004351660243561143c565b34801561068a57600080fd5b506102de6114fb565b34801561069f57600080fd5b506102de600160a060020a0360043581169060243516611501565b3480156106c657600080fd5b50610496600160a060020a036004351661152c565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107615780601f1061073657610100808354040283529160200191610761565b820191906000526020600020905b81548152906001019060200180831161074457829003601f168201915b505050505081565b600160a060020a03338116600081815260146020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b600160a060020a0333166000908152601260205260408120546108119061138890610805908663ffffffff61157616565b9063ffffffff61158b16565b600160a060020a033381166000908152601260205260408082209390935590861681522054610846908463ffffffff61158b16565b600160a060020a03808616600090815260126020526040808220939093559084168152205461087d9061138863ffffffff61158b16565b600160a060020a0380841660009081526012602090815260409182902093909355805186815290518783169333909316927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef928290030190a360408051600160a060020a038416815290516000805160206117408339815191529181900360200190a15060019392505050565b600e5481565b6007546000908152601060205260408120546009546109349163ffffffff61159b16565b905090565b600b54604080519182526c01000000000000000000000000600160a060020a0333160260208301526034820184905251908190036054019020600090818084831461098357600080fd5b600a5483111561099257600080fd5b6000858152600f602052604080822054600b5483529120849055915081156109b957600080fd5b6109c1610de1565b600160a060020a0333166000908152601260205260409020549091506109ed908263ffffffff61158b16565b600160a060020a033316600090815260126020526040902055600554610a19908263ffffffff61158b16565b600555600c805473ffffffffffffffffffffffffffffffffffffffff191633600160a060020a0316179055600d81905543600e55610a556115bc565b600754600b546040805184815260208101939093528281019190915251600160a060020a033316917fcf6fbb9dcea7d07263ab4f5c3a92f53af33dffc421d9d121e1c74b307e68189d919081900360600190a250600195945050505050565b600080805260126020527f7e7fa33969761a458e04f477e039a608702b4f924981d6653935a8319a08ad7b546005546109349163ffffffff61157616565b600160a060020a038316600090815260126020526040812054610b1b908363ffffffff61157616565b600160a060020a0380861660009081526012602090815260408083209490945560148152838220339093168252919091522054610b5e908363ffffffff61157616565b600160a060020a0380861660009081526014602090815260408083203385168452825280832094909455918616815260129091522054610ba4908363ffffffff61158b16565b600160a060020a038085166000908152601260208181526040808420959095558884168352601381528483205490931682529091522054610bed9061138863ffffffff61158b16565b600160a060020a03808616600090815260136020818152604080842054851684526012808352818520969096553385168452918152818320549093168252929091522054610c439061138863ffffffff61158b16565b600160a060020a03338116600090815260136020908152604080832054841683526012825291829020939093558051858152905186831693928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef928290030190a3600160a060020a038085166000908152601360209081526040918290205482519316835290516000805160206117408339815191529281900390910190a1600160a060020a033381166000908152601360209081526040918290205482519316835290516000805160206117408339815191529281900390910190a15060019392505050565b60116020526000908152604090205481565b60045460ff1681565b60075460009081526010602052604090205490565b60055481565b600160a060020a033381166000818152601360209081526040808320805495871673ffffffffffffffffffffffffffffffffffffffff1990961686179055805193845290830193909352825190927fc9a43a9d07839ddc6fa52cff9559f630776003d97ecd4909f433d10cc760f890928290030190a1506001919050565b600b546000908152600f6020526040812054600754620271001015610e145760045460ff16600a0a61c350029150610f52565b620222e06007541115610e365760045460ff16600a0a620124f8029150610f52565b6201d4c06007541115610e585760045460ff16600a0a6201e848029150610f52565b620186a06007541115610e7a5760045460ff16600a0a6203d090029150610f52565b620138806007541115610e9c5760045460ff16600a0a6207a120029150610f52565b61ea606007541115610ebd5760045460ff16600a0a620f4240029150610f52565b619c406007541115610ef65760045460408051838152905190819003602001902060ff909116600a0a90622625a0905b06029150610f52565b614e206007541115610f2a5760045460408051838152905190819003602001902060ff909116600a0a90623567e090610eed565b60045460408051838152905190819003602001902060ff909116600a0a90624c4b4090060291505b5090565b600b5490565b600c54600160a060020a031681565b600160a060020a031660009081526012602052604090205490565b60106020526000908152604090205481565b60015433600160a060020a03908116911614610fb357600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b604080518381526c01000000000000000000000000600160a060020a0333160260208201526034810186905290519081900360540190206000908281111561106b57600080fd5b93909314949350505050565b60075481565b60095481565b600a5481565b600b5481565b600054600160a060020a031681565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156107615780601f1061073657610100808354040283529160200191610761565b604080518281526c01000000000000000000000000600160a060020a0333160260208201526034810185905290519081900360540190209392505050565b600f6020526000908152604090205481565b600160a060020a033381166000908152601360209081526040808320546012909252822054919216906111879061138890610805908663ffffffff61157616565b600160a060020a0333811660009081526012602052604080822093909355908616815220546111bc908463ffffffff61158b16565b600160a060020a0380861660009081526012602052604080822093909355908316815220546111f39061138863ffffffff61158b16565b600160a060020a0380831660009081526012602090815260409182902093909355805186815290518783169333909316927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef928290030190a360408051600160a060020a038316815290516000805160206117408339815191529181900360200190a15060019392505050565b600d5481565b600160a060020a03338116600081815260146020908152604080832094881680845294825280832087905580518781529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a383600160a060020a0316638f4ffcb1338530866040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611398578181015183820152602001611380565b50505050905090810190601f1680156113c55780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156113e757600080fd5b505af11580156113fb573d6000803e3d6000fd5b506001979650505050505050565b60065481565b600160a060020a039081166000908152601360205260409020541690565b600154600160a060020a031681565b6000805433600160a060020a0390811691161461145857600080fd5b60008054604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810186905290519186169263a9059cbb926044808401936020939083900390910190829087803b1580156114c857600080fd5b505af11580156114dc573d6000803e3d6000fd5b505050506040513d60208110156114f257600080fd5b50519392505050565b60085481565b600160a060020a03918216600090815260146020908152604080832093909416825291909152205490565b60005433600160a060020a0390811691161461154757600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008282111561158557600080fd5b50900390565b818101828110156107ce57600080fd5b60008082116115a957600080fd5b81838115156115b457fe5b049392505050565b600780546000908152601160205260409020429055546115e390600163ffffffff61158b16565b60078190556115f19061160b565b600a5561160543600163ffffffff61157616565b40600b55565b600061012c6118248261166f60118261162b88600263ffffffff61157616565b8152602001908152602001600020546011600061165260018a61157690919063ffffffff16565b81526020019081526020016000205461157690919063ffffffff16565b90506116fc6116c4836108056116b26116a0886116948861041263ffffffff61171a16565b9063ffffffff61159b16565b610805886103e863ffffffff61157616565b61169487610f5063ffffffff61171a16565b611694612710601060006116df8b600163ffffffff61157616565b81526020019081526020016000205461171a90919063ffffffff16565b60009586526010602052604090952094855550504360065550505490565b818102821580611734575081838281151561173157fe5b04145b15156107ce57600080fd00187f451f92c6a4236353b5331d5fb67bdbfcc66b54367037fba41d6bcef08ce7a165627a7a72305820596270788f1a9113c3c44e80f1e88c823b507528b66adda8f8b33728ca829c6c0029"
}