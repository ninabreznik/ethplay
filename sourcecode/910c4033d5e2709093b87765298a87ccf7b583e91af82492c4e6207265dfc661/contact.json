{
  "address": "0xd10a9343a0981ccd01b06303a2cd88e089bf1dc6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SnailTroi",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-20\n*/\n\npragma solidity ^0.5.7;\n\n/* SNAILTROI\n\nSnailTroi is a daily ROI game, with extra twists to sustain it.\n\n1) TROI\nTo start, players spend ETH to Grow their Troi.\nThey get a \"troi size\" proportional to their investment.\nEach player gets to harvest ETH equivalent to their troiSize.\nThis harvest starts equivalent to 1% of their initial, daily.\nA global bonus rises by 8% per day (1% in 3 hours, roughly 0.0001% per second).\nAs soon as any player claims this global bonus, it resets to 0.\nA player can only harvest once a day.\n\n2) FOUR KINGS\nPlayers can spend ETH to collect up to 4 kings.\nEach of these kings is a hot potato, with an unique effect.\nThe price of a king starts at 0.02 eth, and rises by 0.02 eth on each buy\n\nBLUE KING (0) - receives 4% divs on each buy\nRED KING (1) - doubles global bonus for the owner\nGREEN KING (2) - receives 4% divs on each claim\nPURPLE KING (3) - receives 4% of the pot when the Doomclock stops\n\n3) DOOMCLOCK \nA timer starts at 24 hours, FOMO style.\nIf this timer reaches 0, whoever bought last gets 4% of the pot.\nThe Four Kings come back to their base price, and ETH gains relative to troiSize are lowered by 10%.\nThe Doomclock resets to 24 hours on a large enough buy.\nThe required buy starts at 0.001 ETH, and increases by 0.001 ETH on each reset.\n\n4) REFERRALS\nWhenever a referred player claims, his referrer gets an extra 20% of his claim.\nIn the absence of referral, this extra 20% goes to the dev.\nTo be able to refer someone, a player must own a certain number of snails in SnailThrone.\nReferrals can be changed at any time through a new GrowTroi action.\n\n5) DAILY BONUS\nA daily timer of 24 hours runs nonstop.\nWhoever spends the most ETH in one buy during this 24 hour period wins 2% of the pot.\n\n6) SPLIT\nOn GrowTroi:\n- 90% to the troiPot (main pot)\n- 10% to the thronePot (SnailThrone divs)\n\nOn Kings:\n- initial + 0.01 eth to the previous owner\n- 0.005 eth to the troiPot\n- 0.005 eth to the thronePot\n\n*/\n\ncontract SnailThrone {\n    mapping (address => uint256) public hatcherySnail;\n}\n\ncontract SnailTroi {\n    using SafeMath for uint;\n    \n    /* Event */\n\n    event GrewTroi(address indexed player, uint eth, uint size);\n    event NewLeader(address indexed player, uint eth);\n    event HarvestedFroot(address indexed player, uint eth, uint size);\n    event BecameKing(address indexed player, uint eth, uint king);\n    event ResetClock(address indexed player, uint eth);\n    event Doomed(address leader, address king, uint eth);\n    event WonDaily (address indexed player, uint eth);\n    event WithdrewBalance (address indexed player, uint eth);\n    event PaidThrone (address indexed player, uint eth);\n    event BoostedChest (address indexed player, uint eth);\n\n    /* Constants */\n    \n    uint256 constant SECONDS_IN_DAY     = 86400;\n    uint256 constant MINIMUM_INVEST     = 0.001 ether; //same value for Doomclock raise\n    uint256 constant KING_BASE_COST     = 0.02 ether; //resets to this everytime the Doomclock reaches 0\n    uint256 constant REFERRAL_REQ       = 420;\n    uint256 constant REFERRAL_PERCENT   = 20;\n    uint256 constant KING_PERCENT       = 4;\n    uint256 constant DAILY_PERCENT      = 2;\n    address payable constant SNAILTHRONE= 0x261d650a521103428C6827a11fc0CBCe96D74DBc;\n    \n\tSnailThrone throneContract;\n\n    /* Variables */\n\t\n\t//Game status to ensure proper start\n\tbool public gameActive              = false;\n\t\n\t//Dev address for proper start\n\taddress public dev                  = msg.sender;\n\t\n\t//Main reward pot\n\tuint256 public troiChest            = 0;\n\t\n\t//Divs for SnailThrone holders\n\tuint256 public thronePot            = 0;\n\t\n\t//Current reward per troiSize\n\tuint256 public troiReward           = 0.000001 ether; //divide by this to get troiSize per ETH\n\t\n\t//Doomclock\n\tuint256 public doomclockTimer;\n\tuint256 public doomclockCost        = MINIMUM_INVEST;\n\taddress public doomclockLeader; //last buyer spending more ETH than doomclockCost\n\t\n\t//King struct\n\tstruct King {\n        uint256 cost;\n        address owner;\n    }\n\n    King[4] lostKing;\n\t\n\t//Last global claim\n\tuint256 public lastBonus;\n\t\n\t//Daily timer, leader, current max\n\tuint256 public dailyTimer;\n\taddress public dailyLeader;\n\tuint256 public dailyMax;\n\t\n    /* Mappings */\n    \n    mapping (address => uint256) playerBalance;\n    mapping (address => uint256) troiSize;\n    mapping (address => uint256) lastFroot;\n    mapping (address => address) referral;\n\n    /* Functions */\n    \n    // Constructor\n    \n    constructor() public {\n        throneContract = SnailThrone(SNAILTHRONE);\n    }\n    \n    // StartGame\n    // Only usable by owner once, to start the game properly\n    // Requires a seed of 1 ETH\n    \n    function StartGame() payable public {\n        require(gameActive != true, \"game is already active\");\n        require(msg.sender == dev, \"you're not snailking!\");\n        require(msg.value == 1 ether, \"seed must be 1 ETH\");\n        \n        //All seed ETH goes to Chest\n\t\ttroiChest = msg.value;\n\t\t\n\t\t//Get troiSize to give\n        uint256 _growth = msg.value.div(troiReward);\n        \n        //Add player troiSize\n        troiSize[msg.sender] = troiSize[msg.sender].add(_growth);\n\t\t\n\t\t//Avoid blackholing ETH\n\t\treferral[msg.sender] = dev;\n\t\tdoomclockLeader = dev;\n\t\tdailyLeader = dev;\n\t\t\n        for(uint256 i = 0; i < 4; i++){\n            lostKing[i].cost = KING_BASE_COST;\n            lostKing[i].owner = dev;\n        }\n        \n        dailyTimer = now.add(SECONDS_IN_DAY);\n        doomclockTimer = now.add(SECONDS_IN_DAY);\n        lastBonus = now;\n        lastFroot[msg.sender] = now;\n        gameActive = true;\n    }\n    \n    //-- PRIVATE --\n    \n    // CheckDailyTimer\n    // If we're over, give reward to leader and reset values\n    // Transfer thronePot to SnailThrone if balance > 0.01 ETH\n    \n    function CheckDailyTimer() private {\n        if(now > dailyTimer){\n            dailyTimer = now.add(SECONDS_IN_DAY);\n            uint256 _reward = troiChest.mul(DAILY_PERCENT).div(100);\n            troiChest = troiChest.sub(_reward);\n            playerBalance[dailyLeader] = playerBalance[dailyLeader].add(_reward);\n            dailyMax = 0;\n            \n            emit WonDaily(dailyLeader, _reward);\n            \n            if(thronePot > 0.01 ether){\n                uint256 _payThrone = thronePot;\n                thronePot = 0;\n                (bool success, bytes memory data) = SNAILTHRONE.call.value(_payThrone)(\"\");\n                require(success);\n     \n                emit PaidThrone(msg.sender, _payThrone);\n            }\n        }\n    }\n\n    // CheckDoomclock\n    // If we're not over, check if enough ETH to reset\n    // Increase doomclockCost and change doomclockLeader if so\n    // Else, reward winners and reset Kings\n    \n    function CheckDoomclock(uint256 _msgValue) private {\n        if(now < doomclockTimer){\n            if(_msgValue >= doomclockCost){\n                doomclockTimer = now.add(SECONDS_IN_DAY);\n                doomclockCost = doomclockCost.add(MINIMUM_INVEST);\n                doomclockLeader = msg.sender;\n                \n                emit ResetClock(msg.sender, doomclockCost);\n            }\n        } else {\n\t\t\ttroiReward = troiReward.mul(9).div(10);\n            doomclockTimer = now.add(SECONDS_IN_DAY);\n            doomclockCost = MINIMUM_INVEST;\n            uint256 _reward = troiChest.mul(KING_PERCENT).div(100);\n            troiChest = troiChest.sub(_reward.mul(2));\n            playerBalance[doomclockLeader] = playerBalance[doomclockLeader].add(_reward);\n            playerBalance[lostKing[3].owner] = playerBalance[lostKing[3].owner].add(_reward);\n            \n            for(uint256 i = 0; i < 4; i++){\n            lostKing[i].cost = KING_BASE_COST;\n            }\n            \n            emit Doomed(doomclockLeader, lostKing[3].owner, _reward);\n        }\n    }\n    \n    //-- GAME ACTIONS --\n    \n    // GrowTroi\n    // Claims divs if need be\n    // Gives player troiSize in exchange for ETH\n    // Checks Doomclock, dailyMax\n    \n    function GrowTroi(address _ref) public payable {\n        require(gameActive == true, \"game hasn't started yet\");\n        require(tx.origin == msg.sender, \"no contracts allowed\");\n        require(msg.value >= MINIMUM_INVEST, \"at least 1 finney to grow a troi\");\n        require(_ref != msg.sender, \"can't refer yourself, silly\");\n        \n        //Call HarvestFroot if player is already invested, else set lastFroot to now\n        if(troiSize[msg.sender] != 0){\n            HarvestFroot();\n        } else {\n            lastFroot[msg.sender] = now;\n        }\n        \n        //Assign new ref. If referrer lacks snail requirement, dev becomes referrer\n        uint256 _snail = GetSnail(_ref);\n        if(_snail >= REFERRAL_REQ){\n            referral[msg.sender] = _ref;\n        } else {\n            referral[msg.sender] = dev;\n        }\n\n        //Split ETH to pot\n        uint256 _chestTemp = troiChest.add(msg.value.mul(9).div(10));\n        thronePot = thronePot.add(msg.value.div(10));\n        \n        //Give reward to Blue King\n        uint256 _reward = msg.value.mul(KING_PERCENT).div(100);\n        _chestTemp = _chestTemp.sub(_reward);\n        troiChest = _chestTemp;\n        playerBalance[lostKing[0].owner] = playerBalance[lostKing[0].owner].add(_reward);\n        \n        //Get troiSize to give\n        uint256 _growth = msg.value.div(troiReward);\n        \n        //Add player troiSize\n        troiSize[msg.sender] = troiSize[msg.sender].add(_growth);\n        \n        //Emit event\n        emit GrewTroi(msg.sender, msg.value, troiSize[msg.sender]);\n    \n        //Check msg.value against dailyMax\n        if(msg.value > dailyMax){\n            dailyMax = msg.value;\n            dailyLeader = msg.sender;\n            \n            emit NewLeader(msg.sender, msg.value);\n        }\n        \n        //Check dailyTimer\n        CheckDailyTimer();\n        \n        //Check Doomclock\n        CheckDoomclock(msg.value);\n    }\n    \n    // HarvestFroot\n    // Gives player his share of ETH, according to global bonus\n    // Sets his lastFroot to now, sets lastBonus to now\n    // Checks Doomclock\n    \n    function HarvestFroot() public {\n        require(gameActive == true, \"game hasn't started yet\");\n        require(troiSize[msg.sender] > 0, \"grow your troi first\");\n        uint256 _timeSince = lastFroot[msg.sender].add(SECONDS_IN_DAY);\n        require(now > _timeSince, \"your harvest isn't ready\");\n        \n        //Get ETH reward for player and ref\n        uint256 _reward = ComputeHarvest();\n        uint256 _ref = _reward.mul(REFERRAL_PERCENT).div(100);\n        uint256 _king = _reward.mul(KING_PERCENT).div(100);\n        \n        //Set lastFroot and lastBonus\n        lastFroot[msg.sender] = now;\n        lastBonus = now;\n        \n        //Lower troiPot\n        troiChest = troiChest.sub(_reward).sub(_ref).sub(_king);\n        \n        //Give referral reward\n        playerBalance[referral[msg.sender]] = playerBalance[referral[msg.sender]].add(_ref);\n        \n        //Give green king reward\n        playerBalance[lostKing[2].owner] = playerBalance[lostKing[2].owner].add(_king);\n        \n        //Give player reward\n        playerBalance[msg.sender] = playerBalance[msg.sender].add(_reward);\n        \n        emit HarvestedFroot(msg.sender, _reward, troiSize[msg.sender]);\n        \n        //Check dailyTimer\n        CheckDailyTimer();\n        \n        //Check Doomclock\n        CheckDoomclock(0);\n    }\n    \n    // BecomeKing\n    // Player becomes the owner of a King in exchange for ETH\n    // Pays out previous owner, increases cost\n    \n    function BecomeKing(uint256 _id) payable public {\n        require(gameActive == true, \"game is paused\");\n        require(tx.origin == msg.sender, \"no contracts allowed\");\n        require(msg.value == lostKing[_id].cost, \"wrong ether cost for king\");\n        \n        //split 0.01 ETH to pots\n        troiChest = troiChest.add(KING_BASE_COST.div(4));\n        thronePot = thronePot.add(KING_BASE_COST.div(4));\n        \n        //give value - 0.01 ETH to previous owner\n        uint256 _prevReward = msg.value.sub(KING_BASE_COST.div(2));\n        address _prevOwner = lostKing[_id].owner;\n        playerBalance[_prevOwner] = playerBalance[_prevOwner].add(_prevReward);\n        \n        //give King to flipper, increase cost\n        lostKing[_id].owner = msg.sender;\n        lostKing[_id].cost = lostKing[_id].cost.add(KING_BASE_COST);\n        \n        emit BecameKing(msg.sender, msg.value, _id);\n    }\n    \n    //-- MISC ACTIONS --\n    \n    // WithdrawBalance\n    // Withdraws the ETH balance of a player to his wallet\n    \n    function WithdrawBalance() public {\n        require(playerBalance[msg.sender] > 0, \"no ETH in player balance\");\n        \n        uint _amount = playerBalance[msg.sender];\n        playerBalance[msg.sender] = 0;\n        msg.sender.transfer(_amount);\n        \n        emit WithdrewBalance(msg.sender, _amount);\n    }\n    \n    // fallback function\n    // Feeds the troiChest\n    \n    function() external payable {\n        troiChest = troiChest.add(msg.value);\n        \n        emit BoostedChest(msg.sender, msg.value);\n    }\n    \n    //-- CALCULATIONS --\n    \n    // ComputeHarvest\n    // Returns ETH reward for HarvestShare\n    \n    function ComputeHarvest() public view returns(uint256) {\n        \n        //Get time since last Harvest\n        uint256 _timeLapsed = now.sub(lastFroot[msg.sender]);\n        \n        //Get current bonus\n        uint256 _bonus = ComputeBonus();\n        //Compute reward\n        uint256 _reward = troiReward.mul(troiSize[msg.sender]).mul(_timeLapsed.add(_bonus)).div(SECONDS_IN_DAY).div(100);\n        \n        //Check reward + ref + king isn't above remaining troiChest\n        uint256 _sum = _reward.add(_reward.mul(REFERRAL_PERCENT.add(KING_PERCENT)).div(100));\n        if(_sum > troiChest){\n            _reward = troiChest.mul(100).div(REFERRAL_PERCENT.add(KING_PERCENT).add(100));\n        }\n        return _reward;\n    }\n    \n    // ComputeBonus \n    // Returns time since last bonus x 8\n    \n    function ComputeBonus() public view returns(uint256) {\n        uint256 _bonus = (now.sub(lastBonus)).mul(8);\n        if(msg.sender == lostKing[1].owner){\n            _bonus = _bonus.mul(2);\n        }\n        return _bonus;\n    }\n    \n    //-- GETTERS --\n    \n    function GetTroi(address adr) public view returns(uint256) {\n        return troiSize[adr];\n    }\n\t\n\tfunction GetMyBalance() public view returns(uint256) {\n\t    return playerBalance[msg.sender];\n\t}\n\t\n\tfunction GetMyLastHarvest() public view returns(uint256) {\n\t    return lastFroot[msg.sender];\n\t}\n\t\n\tfunction GetMyReferrer() public view returns(address) {\n\t    return referral[msg.sender];\n\t}\n\t\n\tfunction GetSnail(address _adr) public view returns(uint256) {\n        return throneContract.hatcherySnail(_adr);\n    }\n\t\n\tfunction GetKingCost(uint256 _id) public view returns(uint256) {\n\t\treturn lostKing[_id].cost;\n\t}\n\t\n\tfunction GetKingOwner(uint256 _id) public view returns(address) {\n\t\treturn lostKing[_id].owner;\n\t}\n}\n\n/* SafeMath library */\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}",
  "bytecode": "608060405260008054600160a01b60ff0219168155600180546001600160a01b03191633179055600281905560035564e8d4a5100060045566038d7ea4c6800060065534801561004e57600080fd5b50600080546001600160a01b03191673261d650a521103428c6827a11fc0cbce96d74dbc1790556118bd806100846000396000f3fe6080604052600436106101815760003560e01c806396ba5f7f116100d1578063ac39c79f1161008a578063be0131e611610064578063be0131e61461043f578063e0f67bc714610454578063f020044f14610469578063faf1a8d31461049257610181565b8063ac39c79f14610400578063b593bcd314610415578063bd69b0711461042a57610181565b806396ba5f7f1461037e578063a39d716d14610393578063a3dfc364146103a8578063a53ccada146103b0578063a8999b7b146103d6578063abd2b842146103eb57610181565b806342c102a51161013e5780635142f8b4116101185780635142f8b41461032057806355e6a8cf1461033f578063593728e31461035457806391cca3db1461036957610181565b806342c102a51461029257806347fbde12146102c55780634ad12ec01461030b57610181565b8063022b9735146101cf5780630d6a5c75146101f657806311aa1c861461020b5780631eab5237146102355780633671e029146102685780633c72cec51461027d575b600254610194903463ffffffff6104a716565b60025560408051348152905133917febb5bdde204269ddd38880d2fe28c67ffdf60db4e09875c8dbff1dd8b072b6eb919081900360200190a2005b3480156101db57600080fd5b506101e46104bf565b60408051918252519081900360200190f35b34801561020257600080fd5b506101e46104d2565b34801561021757600080fd5b506101e46004803603602081101561022e57600080fd5b50356105e8565b34801561024157600080fd5b506101e46004803603602081101561025857600080fd5b50356001600160a01b0316610602565b34801561027457600080fd5b506101e461061d565b34801561028957600080fd5b506101e4610669565b34801561029e57600080fd5b506101e4600480360360208110156102b557600080fd5b50356001600160a01b031661066f565b3480156102d157600080fd5b506102ef600480360360208110156102e857600080fd5b50356106f2565b604080516001600160a01b039092168252519081900360200190f35b34801561031757600080fd5b506101e4610718565b61033d6004803603602081101561033657600080fd5b503561071e565b005b34801561034b57600080fd5b506101e46109d1565b34801561036057600080fd5b506102ef6109e4565b34801561037557600080fd5b506102ef6109f3565b34801561038a57600080fd5b506101e4610a02565b34801561039f57600080fd5b5061033d610a08565b61033d610ae7565b61033d600480360360208110156103c657600080fd5b50356001600160a01b0316610d89565b3480156103e257600080fd5b506102ef61115a565b3480156103f757600080fd5b506101e4611169565b34801561040c57600080fd5b506102ef61116f565b34801561042157600080fd5b506101e461118b565b34801561043657600080fd5b506101e4611191565b34801561044b57600080fd5b5061033d611197565b34801561046057600080fd5b506101e461146b565b34801561047557600080fd5b5061047e611471565b604080519115158252519081900360200190f35b34801561049e57600080fd5b506101e4611481565b6000828201838110156104b657fe5b90505b92915050565b3360009081526014602052604090205490565b3360009081526016602052604081205481906104f590429063ffffffff61148716565b9050600061050161061d565b9050600061055c60646105506201518081610522888863ffffffff6104a716565b336000908152601560205260409020546004546105449163ffffffff61149916565b9063ffffffff61149916565b9063ffffffff6114bd16565b9050600061059761058a606461055061057d6014600463ffffffff6104a716565b869063ffffffff61149916565b839063ffffffff6104a716565b90506002548111156105e0576105dd6105c960646105bd6014600463ffffffff6104a716565b9063ffffffff6104a716565b60025461055090606463ffffffff61149916565b91505b509250505090565b6000600882600481106105f757fe5b600202015492915050565b6001600160a01b031660009081526015602052604090205490565b60008061063a60086105446010544261148790919063ffffffff16565b600b549091506001600160a01b03163314156106645761066181600263ffffffff61149916565b90505b905090565b60055481565b6000805460408051600160e31b63043a3a710281526001600160a01b038581166004830152915191909216916321d1d388916024808301926020929190829003018186803b1580156106c057600080fd5b505afa1580156106d4573d6000803e3d6000fd5b505050506040513d60208110156106ea57600080fd5b505192915050565b60006008826004811061070157fe5b60020201600101546001600160a01b031692915050565b60115481565b600054600160a01b900460ff1615156001146107845760408051600160e51b62461bcd02815260206004820152600e60248201527f67616d6520697320706175736564000000000000000000000000000000000000604482015290519081900360640190fd5b3233146107db5760408051600160e51b62461bcd02815260206004820152601460248201527f6e6f20636f6e74726163747320616c6c6f776564000000000000000000000000604482015290519081900360640190fd5b600881600481106107e857fe5b600202015434146108435760408051600160e51b62461bcd02815260206004820152601960248201527f77726f6e6720657468657220636f737420666f72206b696e6700000000000000604482015290519081900360640190fd5b61086d61085e66470de4df820000600463ffffffff6114bd16565b6002549063ffffffff6104a716565b60025561089a61088b66470de4df820000600463ffffffff6114bd16565b6003549063ffffffff6104a716565b60035560006108c76108ba66470de4df820000600263ffffffff6114bd16565b349063ffffffff61148716565b90506000600883600481106108d857fe5b60020201600101546001600160a01b031660008181526014602052604090205490915061090590836104a7565b6001600160a01b038216600090815260146020526040902055336008846004811061092c57fe5b6002020160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555061098066470de4df8200006008856004811061096f57fe5b60020201549063ffffffff6104a716565b6008846004811061098d57fe5b60020201556040805134815260208101859052815133927f7b31c696e35a4eb56574806fff4443d9d5199cb8d46697454c3b9147618524c2928290030190a2505050565b3360009081526016602052604090205490565b6007546001600160a01b031681565b6001546001600160a01b031681565b60025481565b33600090815260146020526040902054610a6c5760408051600160e51b62461bcd02815260206004820152601860248201527f6e6f2045544820696e20706c617965722062616c616e63650000000000000000604482015290519081900360640190fd5b33600081815260146020526040808220805490839055905190929183156108fc02918491818181858888f19350505050158015610aad573d6000803e3d6000fd5b5060408051828152905133917f3b57c8ab659a2ed2a5b1674c7197d3cfefb18665ee17600906500f02dd3a306c919081900360200190a250565b600054600160a01b900460ff16151560011415610b4e5760408051600160e51b62461bcd02815260206004820152601660248201527f67616d6520697320616c72656164792061637469766500000000000000000000604482015290519081900360640190fd5b6001546001600160a01b03163314610bb05760408051600160e51b62461bcd02815260206004820152601560248201527f796f75277265206e6f7420736e61696c6b696e67210000000000000000000000604482015290519081900360640190fd5b34670de0b6b3a764000014610c0f5760408051600160e51b62461bcd02815260206004820152601260248201527f73656564206d7573742062652031204554480000000000000000000000000000604482015290519081900360640190fd5b346002819055600454600091610c2a9163ffffffff6114bd16565b33600090815260156020526040902054909150610c4d908263ffffffff6104a716565b3360009081526015602090815260408083209390935560018054601790925292822080546001600160a01b03199081166001600160a01b039384161790915592546007805485169190921690811790915560128054909316179091555b6004811015610d1e5766470de4df82000060088260048110610cc857fe5b60020201556001546001600160a01b031660088260048110610ce657fe5b6002020160010160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508080600101915050610caa565b50610d32426201518063ffffffff6104a716565b601155610d48426201518063ffffffff6104a716565b6005555042601081905533600090815260166020526040812091909155805474ff00000000000000000000000000000000000000001916600160a01b179055565b600054600160a01b900460ff161515600114610def5760408051600160e51b62461bcd02815260206004820152601760248201527f67616d65206861736e2774207374617274656420796574000000000000000000604482015290519081900360640190fd5b323314610e465760408051600160e51b62461bcd02815260206004820152601460248201527f6e6f20636f6e74726163747320616c6c6f776564000000000000000000000000604482015290519081900360640190fd5b66038d7ea4c68000341015610ea55760408051600160e51b62461bcd02815260206004820181905260248201527f6174206c6561737420312066696e6e657920746f2067726f7720612074726f69604482015290519081900360640190fd5b6001600160a01b038116331415610f065760408051600160e51b62461bcd02815260206004820152601b60248201527f63616e277420726566657220796f757273656c662c2073696c6c790000000000604482015290519081900360640190fd5b3360009081526015602052604090205415610f2857610f23611197565b610f3b565b3360009081526016602052604090204290555b6000610f468261066f565b90506101a48110610f7e5733600090815260176020526040902080546001600160a01b0319166001600160a01b038416179055610fae565b60015433600090815260176020526040902080546001600160a01b0319166001600160a01b039092169190911790555b6000610fc961085e600a61055034600963ffffffff61149916565b9050610fdf61088b34600a63ffffffff6114bd16565b6003556000610ffa606461055034600463ffffffff61149916565b905061100c828263ffffffff61148716565b6002819055915061104781601460006008815b60020201600101546001600160a01b03168152602081019190915260400160002054906104a7565b6009546001600160a01b03166000908152601460205260408120919091556004546110739034906114bd565b33600090815260156020526040902054909150611096908263ffffffff6104a716565b33600081815260156020908152604091829020849055815134815290810193909352805191927f5f09c1c237f0d560f1352de59a08b30e8ef6ff3cf7d353d0bee0edb2f61d5da3929081900390910190a260135434111561114257346013819055601280546001600160a01b03191633908117909155604080519283525190917f67c9a9e267dea2a0d7aa75b534fb824a6be722311a388432892d1ffc92e9ab44919081900360200190a25b61114a6114d2565b61115334611679565b5050505050565b6012546001600160a01b031681565b60045481565b336000908152601760205260409020546001600160a01b031690565b60105481565b60035481565b600054600160a01b900460ff1615156001146111fd5760408051600160e51b62461bcd02815260206004820152601760248201527f67616d65206861736e2774207374617274656420796574000000000000000000604482015290519081900360640190fd5b336000908152601560205260409020546112615760408051600160e51b62461bcd02815260206004820152601460248201527f67726f7720796f75722074726f69206669727374000000000000000000000000604482015290519081900360640190fd5b33600090815260166020526040812054611284906201518063ffffffff6104a716565b90508042116112dd5760408051600160e51b62461bcd02815260206004820152601860248201527f796f757220686172766573742069736e27742072656164790000000000000000604482015290519081900360640190fd5b60006112e76104d2565b90506000611301606461055084601463ffffffff61149916565b9050600061131b606461055085600463ffffffff61149916565b336000908152601660205260409020429081905560105560025490915061135e90829061135290859082908863ffffffff61148716565b9063ffffffff61148716565b600255336000908152601760209081526040808320546001600160a01b031683526014909152902054611397908363ffffffff6104a716565b336000908152601760209081526040808320546001600160a01b031683526014918290528220929092556113d09183916008600261101f565b600d546001600160a01b03166000908152601460205260408082209290925533815220546113fe90846104a7565b33600081815260146020908152604080832094909455601581529083902054835187815291820152825191927fd00903019075d0f45ffcc07011ab4abf1a06d0f901bf69a810ad75532d7a0ae692918290030190a261145b6114d2565b6114656000611679565b50505050565b60135481565b600054600160a01b900460ff1681565b60065481565b60008282111561149357fe5b50900390565b6000826114a8575060006104b9565b828202828482816114b557fe5b04146104b657fe5b6000808284816114c957fe5b04949350505050565b601154421115611677576114ef426201518063ffffffff6104a716565b6011556002805460009161151091606491610550919063ffffffff61149916565b600254909150611526908263ffffffff61148716565b6002556012546001600160a01b0316600090815260146020526040902054611554908263ffffffff6104a716565b601280546001600160a01b039081166000908152601460209081526040808320959095556013919091559154835185815293519116927fd426fbe1cea083356571be627e1ad695169d24f373fdc4585c5b5a344721399d92908290030190a2662386f26fc100006003541115611675576003805460009182905560405190919060609073261d650a521103428c6827a11fc0cbce96d74dbc9084908481818185875af1925050503d8060008114611627576040519150601f19603f3d011682016040523d82523d6000602084013e61162c565b606091505b50915091508161163b57600080fd5b60408051848152905133917ffd2b287395e90cf1891bf11bd61ab2c174577b8854eb26c5d22c6321f969387d919081900360200190a25050505b505b565b60055442101561171157600654811061170c5761169f426201518063ffffffff6104a716565b6005556006546116bc9066038d7ea4c6800063ffffffff6104a716565b6006819055600780546001600160a01b03191633908117909155604080519283525190917f4fd59206b6f4f1d866f95f490177ce09e892248c9122437444872324957cf9d8919081900360200190a25b611675565b61172c600a610550600960045461149990919063ffffffff16565b600455611742426201518063ffffffff6104a716565b60055566038d7ea4c6800060065560025460009061176e9060649061055090600463ffffffff61149916565b905061179361178482600263ffffffff61149916565b6002549063ffffffff61148716565b6002556007546001600160a01b03166000908152601460205260409020546117c1908263ffffffff6104a716565b6007546001600160a01b031660009081526014602081905260408220929092556117f09183916008600361101f565b600f546001600160a01b03166000908152601460205260408120919091555b600481101561183a5766470de4df8200006008826004811061182d57fe5b600202015560010161180f565b50600754600f54604080516001600160a01b03938416815291909216602082015280820183905290517ffcd34ade61d7977651a24cf106cc959d929752e93e451162c8b41b611804de4f9181900360600190a1505056fea165627a7a72305820f0648b39c21ebbc707c2669119f327743c9ed11dcc88bde5a1a964618a4e00010029"
}