{
  "address": "0x9A98fDa0160471EBCEeFb3cc8bF97a846499B8EB",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AvatarNameRegistry",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-02\n*/\n\n// File: zos-lib/contracts/Initializable.sol\n\npragma solidity >=0.4.24 <0.6.0;\n\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool wasInitializing = initializing;\n    initializing = true;\n    initialized = true;\n\n    _;\n\n    initializing = wasInitializing;\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    uint256 cs;\n    assembly { cs := extcodesize(address) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\n// File: contracts/AvatarNameStorage.sol\n\npragma solidity ^0.5.0;\n\ncontract ERC20Interface {\n    function balanceOf(address from) public view returns (uint256);\n    function transferFrom(address from, address to, uint tokens) public returns (bool);\n    function allowance(address owner, address spender) public view returns (uint256);\n    function burn(uint256 amount) public;\n}\n\ncontract AvatarNameStorage {\n    // Storage\n    ERC20Interface public manaToken;\n    uint256 public blocksUntilReveal;\n    uint256 public blocksToExpire;\n    uint256 public price;\n\n    struct Data {\n        string username;\n        string metadata;\n    }\n    struct Commit {\n        bytes32 commit;\n        uint256 blockNumber;\n        bool revealed;\n    }\n\n    // Stores commit messages by accounts\n    mapping (address => Commit) public commit;\n    // Stores usernames used\n    mapping (string => address) usernames;\n    // Stores account data\n    mapping (address => Data) public user;\n    // Stores account roles\n    mapping (address => bool) public allowed;\n\n    // Events\n    event Register(\n        address indexed _owner,\n        string _username,\n        string _metadata,\n        address indexed _caller\n    );\n    event MetadataChanged(address indexed _owner, string _metadata);\n    event Allow(address indexed _caller, address indexed _account, bool _allowed);\n    event CommitUsername(address indexed _owner, bytes32 indexed _hash, uint256 _blockNumber);\n    event RevealUsername(address indexed _owner, bytes32 indexed _hash, uint256 _blockNumber);\n}\n\n// File: contracts/AvatarNameRegistry.sol\n\npragma solidity ^0.5.0;\n\n\n\n\ncontract AvatarNameRegistry is Initializable, AvatarNameStorage {\n\n    /**\n    * @dev Initializer of the contract\n    * @param _mana - address of the mana token\n    * @param _register - address of the user allowed to register usernames and assign the role\n    * @param _blocksUntilReveal - uint256 for the blocks that should pass before reveal a commit\n    */\n    function initialize(\n        ERC20Interface _mana,\n        address _register,\n        uint256 _blocksUntilReveal,\n        uint256 _blocksToExpire\n    )\n    public initializer\n    {\n        require(_blocksUntilReveal != 0, \"Blocks until reveal should be greather than 0\");\n        require(_blocksToExpire != 0, \"Blocks to expire should be greather than 0\");\n\n        manaToken = _mana;\n        blocksUntilReveal = _blocksUntilReveal;\n        blocksToExpire = _blocksToExpire;\n        price = 100000000000000000000; // 100 in wei\n\n        // Allow deployer to register usernames\n        allowed[_register] = true;\n    }\n\n    /**\n    * @dev Check if the sender is an allowed account\n    */\n    modifier onlyAllowed() {\n        require(\n            allowed[msg.sender] == true,\n            \"The sender is not allowed to register a username\"\n        );\n        _;\n    }\n\n    /**\n    * @dev Manage role for an account\n    * @param _account - address of the account to be managed\n    * @param _allowed - bool whether the account should be allowed or not\n    */\n    function setAllowed(address _account, bool _allowed) external onlyAllowed {\n        require(_account != msg.sender, \"You can not manage your role\");\n        allowed[_account] = _allowed;\n        emit Allow(msg.sender, _account, _allowed);\n    }\n\n    /**\n    * @dev Register a usename\n    * @notice that the username should be less than or equal 32 bytes and blanks are not allowed\n    * @param _beneficiary - address of the account to be managed\n    * @param _username - string for the username\n    * @param _metadata - string for the metadata\n    */\n    function _registerUsername(\n        address _beneficiary,\n        string memory _username,\n        string memory _metadata\n    )\n    internal\n    {\n        _requireBalance(_beneficiary);\n        _requireUsernameValid(_username);\n        require(isUsernameAvailable(_username), \"The username was already taken\");\n\n        manaToken.transferFrom(_beneficiary, address(this), price);\n        manaToken.burn(price);\n\n        // Save username\n        usernames[_username] = _beneficiary;\n\n        Data storage data = user[_beneficiary];\n\n        // Free previous username\n        delete usernames[data.username];\n\n        // Set data\n        data.username = _username;\n\n        bytes memory metadata = bytes(_metadata);\n        if (metadata.length > 0) {\n            data.metadata = _metadata;\n        }\n\n        emit Register(\n            _beneficiary,\n            _username,\n            data.metadata,\n            msg.sender\n        );\n    }\n\n    /**\n    * @dev Register a usename\n    * @notice that the username can only be registered by an allowed account\n    * @param _beneficiary - address of the account to be managed\n    * @param _username - string for the username\n    * @param _metadata - string for the metadata\n    */\n    function registerUsername(\n        address _beneficiary,\n        string calldata _username,\n        string calldata _metadata\n    )\n    external\n    onlyAllowed\n    {\n        _registerUsername(_beneficiary, _username, _metadata);\n    }\n\n    /**\n    * @dev Commit a hash for a desire username\n    * @notice that the reveal should happen after the blocks defined on {blocksUntilReveal}\n    * @param _hash - bytes32 of the commit hash\n    */\n    function commitUsername(bytes32 _hash) public {\n        // If the user wants to re-commit the same hash. he should wait until expires\n        require(\n            commit[msg.sender].commit != _hash ||\n            hasExpired(commit[msg.sender].blockNumber),\n            \"There is already a commit for the same hash\"\n        );\n        commit[msg.sender].commit = _hash;\n        commit[msg.sender].blockNumber = block.number;\n        commit[msg.sender].revealed = false;\n\n        emit CommitUsername(msg.sender, _hash, block.number);\n    }\n\n    /**\n    * @dev Reveal a commit\n    * @notice that the reveal should happen after the blocks defined on {blocksUntilReveal}\n    * @param _username - string for the username\n    * @param _metadata - string for the metadata\n    * @param _salt - bytes32 for the salt\n    */\n    function revealUsername(\n        string memory _username,\n        string memory _metadata,\n        bytes32 _salt\n    )\n    public\n    {\n        Commit storage userCommit = commit[msg.sender];\n\n        require(userCommit.commit != 0, \"The user has not a commit to be revealed\");\n        require(userCommit.revealed == false, \"The commit was already revealed\");\n        require(!hasExpired(userCommit.blockNumber), \"The commit was expired\");\n        require(\n            getHash(_username, _metadata, _salt) == userCommit.commit,\n            \"Revealed hash does not match commit\"\n        );\n        require(\n            block.number > userCommit.blockNumber + blocksUntilReveal,\n            \"Reveal can not be done before blocks passed\"\n        );\n\n        userCommit.revealed = true;\n\n        emit RevealUsername(msg.sender, userCommit.commit, block.number);\n\n        _registerUsername(msg.sender, _username, _metadata);\n    }\n\n    /**\n    * @dev Return a bytes32 hash for the given arguments\n    * @param _username - string for the username\n    * @param _metadata - string for the metadata\n    * @param _salt - bytes32 for the salt\n    * @return bytes32 - for the hash of the given arguments\n    */\n    function getHash(\n        string memory _username,\n        string memory _metadata,\n        bytes32 _salt\n    )\n    public\n    view\n    returns (bytes32)\n    {\n        return keccak256(\n            abi.encodePacked(address(this), _username, _metadata, _salt)\n        );\n    }\n\n    /**\n    * @dev Set metadata for an existing user\n    * @param _metadata - string for the metadata\n    */\n    function setMetadata(string calldata _metadata) external {\n        require(userExists(msg.sender), \"The user does not exist\");\n\n        user[msg.sender].metadata = _metadata;\n        emit MetadataChanged(msg.sender, _metadata);\n    }\n\n    /**\n    * @dev Check whether a user exist or not\n    * @param _user - address for the user\n    * @return bool - whether the user exist or not\n    */\n    function userExists(address _user) public view returns (bool) {\n        Data memory data = user[_user];\n        bytes memory username = bytes(data.username);\n        return username.length > 0;\n    }\n\n    /**\n    * @dev Check whether a username is available or not\n    * @param _username - string for the username\n    * @return bool - whether the username is available or not\n    */\n    function isUsernameAvailable(string memory _username) public view returns (bool) {\n        return usernames[_username] == address(0);\n    }\n\n    function hasExpired(uint256 _blockNumber) public view returns (bool) {\n        return _blockNumber + blocksUntilReveal + blocksToExpire < block.number;\n    }\n\n    /**\n    * @dev Validate a username\n    * @param _username - string for the username\n    */\n    function _requireUsernameValid(string memory _username) internal pure {\n        bytes memory tempUsername = bytes(_username);\n        require(tempUsername.length <= 32, \"Username should be less than or equal 32 characters\");\n        for(uint256 i = 0; i < tempUsername.length; i++) {\n            require(tempUsername[i] > 0x1f, \"Invalid Character\");\n        }\n    }\n\n    /**\n    * @dev Validate if a user has balance and the contract has enough allowance\n    * to use user MANA on his belhalf\n    * @param _user - address of the user\n    */\n    function _requireBalance(address _user) internal view {\n        require(\n            manaToken.balanceOf(_user) >= price,\n            \"Insufficient funds\"\n        );\n        require(\n            manaToken.allowance(_user, address(this)) >= price,\n            \"The contract is not authorized to use MANA on sender behalf\"\n        );\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blocksUntilReveal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"commit\",\"outputs\":[{\"name\":\"commit\",\"type\":\"bytes32\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"name\":\"revealed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_username\",\"type\":\"string\"},{\"name\":\"_metadata\",\"type\":\"string\"},{\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"getHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setAllowed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"commitUsername\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"hasExpired\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blocksToExpire\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manaToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"user\",\"outputs\":[{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"metadata\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_username\",\"type\":\"string\"},{\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"registerUsername\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"setMetadata\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_username\",\"type\":\"string\"},{\"name\":\"_metadata\",\"type\":\"string\"},{\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"revealUsername\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mana\",\"type\":\"address\"},{\"name\":\"_register\",\"type\":\"address\"},{\"name\":\"_blocksUntilReveal\",\"type\":\"uint256\"},{\"name\":\"_blocksToExpire\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"isUsernameAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_username\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_metadata\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"Register\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"MetadataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"Allow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"CommitUsername\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"RevealUsername\",\"type\":\"event\"}]",
  "bytecode": ""
}