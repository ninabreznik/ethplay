{
  "address": "0xcc34366e3842ca1bd36c1f324d15257960fcc801",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MyToken",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-01\n*/\n\npragma solidity ^0.4.11;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title Authorizable\n * @dev Allows to authorize access to certain function calls\n */\ncontract Authorizable is Ownable {\n\n  address[] authorizers;\n  mapping(address => uint) authorizerIndex;\n\n  /**\n   * @dev Throws if called by any account tat is not authorized.\n   */\n  modifier onlyAuthorized {\n    require(isAuthorized(msg.sender));\n    _;\n  }\n\n  /**\n   * @dev Contructor that authorizes the msg.sender.\n   */\n  function Authorizable() public {\n    authorizers.length = 2;\n    authorizers[1] = msg.sender;\n    authorizerIndex[msg.sender] = 1;\n  }\n\n  /**\n   * @dev Function to get a specific authorizer\n   * @param _authorizerIndex index of the authorizer to be retrieved.\n   * @return The address of the authorizer.\n   */\n  function getAuthorizer(uint _authorizerIndex) external constant returns(address) {\n    return address(authorizers[_authorizerIndex + 1]);\n  }\n\n  /**\n   * @dev Function to check if an address is authorized\n   * @param _addr the address to check if it is authorized.\n   * @return boolean flag if address is authorized.\n   */\n  function isAuthorized(address _addr) public constant returns(bool) {\n    return authorizerIndex[_addr] > 0;\n  }\n\n  /**\n   * @dev Function to add a new authorizer\n   * @param _addr the address to add as a new authorizer.\n   */\n  function addAuthorized(address _addr) external onlyOwner {\n    authorizerIndex[_addr] = authorizers.length;\n    authorizers.length++;\n    authorizers[authorizers.length - 1] = _addr;\n  }\n\n}\n\n/**\n * @title ExchangeRate\n * @dev Allows updating and retrieveing of Conversion Rates for BON tokens\n *\n * ABI\n * [{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"updateRate\",\"outputs\":[],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"nonpayable\"},{\"constant\":true,\"inputs\":[{\"name\":\"_authorizerIndex\",\"type\":\"uint256\"}],\"name\":\"getAuthorizer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"view\"},{\"constant\":false,\"inputs\":[{\"name\":\"data\",\"type\":\"uint256[]\"}],\"name\":\"updateRates\",\"outputs\":[],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"nonpayable\"},{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"view\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"view\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addAuthorized\",\"outputs\":[],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"nonpayable\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"rates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"view\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"nonpayable\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"view\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"symbol\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"RateUpdated\",\"type\":\"event\"}]\n */\ncontract ExchangeRate is Ownable, Authorizable {\n\n  event RateUpdated(uint timestamp, bytes32 symbol, uint rate);\n\n  mapping(bytes32 => uint) public rates;\n\n  /**\n   * @dev Allows the current owner to update a single rate.\n   * @param _symbol The symbol to be updated.\n   * @param _rate the rate for the symbol.\n   */\n  function updateRate(string _symbol, uint _rate) public onlyAuthorized {\n    rates[keccak256(_symbol)] = _rate;\n    RateUpdated(now, keccak256(_symbol), _rate);\n  }\n\n  /**\n   * @dev Allows the current owner to update multiple rates.\n   * Rate name should be hashed by keccak256: https://emn178.github.io/online-tools/keccak_256.html\n   * [\n   *   \"0x9696f33f18e6c2c578fe917dd3f5e1613cc0add242942840b709f9ec392cfc46\",1234567,\n   *   \"0x8f6c75b19293b5703037f47598d72a91641249e6ecec91fa499fb6d66a92e867\",54321\n   * ]\n   * @param data an array that alternates keccak256 hashes of the symbol and the corresponding rate .\n   */\n  function updateRates(uint[] data) public onlyAuthorized {\n    require(data.length % 2 == 0);\n    uint i = 0;\n    while (i < data.length / 2) {\n      bytes32 symbol = bytes32(data[i * 2]);\n      uint rate = data[i * 2 + 1];\n      rates[symbol] = rate;\n      RateUpdated(now, symbol, rate);\n      i++;\n    }\n  }\n\n  /**\n   * @dev Allows the anyone to read the current rate.\n   * @param _symbol the symbol to be retrieved.\n   */\n  function getRate(string _symbol) public constant returns(uint) {\n    return rates[keccak256(_symbol)];\n  }\n\n}\n\n/**\n * Math operations with safety checks\n */\nlibrary SafeMath {\n  function mul(uint a, uint b) internal returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint a, uint b) internal returns (uint) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint a, uint b) internal returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint a, uint b) internal returns (uint) {\n    uint c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a < b ? a : b;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20Basic {\n  uint public totalSupply;\n  function balanceOf(address who) public constant returns (uint);\n  function transfer(address to, uint value) public;\n  event Transfer(address indexed from, address indexed to, uint value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint);\n  function transferFrom(address from, address to, uint value) public;\n  function approve(address spender, uint value) public;\n  event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint;\n\n  mapping(address => uint) balances;\n\n  /**\n   * @dev Fix for the ERC20 short address attack.\n   */\n  modifier onlyPayloadSize(uint size) {\n    require(msg.data.length >= size + 4);\n    _;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n * @dev Implemantation of the basic standart token.\n */\ncontract StandardToken is BasicToken, ERC20 {\n\n  mapping (address => mapping (address => uint)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // if (_value > _allowance) throw;\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint _value) public {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n  }\n\n  /**\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\n/**\n * @title Mintable token\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint value);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n  uint public totalSupply = 0;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will recieve the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint _amount) public onlyOwner canMint returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() public onlyOwner returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\n\n/**\n * @title MyToken\n * @dev The main BON token contract\n *\n * ABI\n * [{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"view\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"view\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"nonpayable\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"view\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"nonpayable\"},{\"constant\":false,\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"nonpayable\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"view\"},{\"constant\":true,\"inputs\":[{\"name\":\"_authorizerIndex\",\"type\":\"uint256\"}],\"name\":\"getAuthorizer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"view\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"nonpayable\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradingStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"view\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"view\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"nonpayable\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"view\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"view\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"nonpayable\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addAuthorized\",\"outputs\":[],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"nonpayable\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"view\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"nonpayable\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"view\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]\n */\ncontract MyToken is MintableToken, Authorizable {\n\n  string public name = \"Bonpay Token\";\n  string public symbol = \"BON\";\n  uint public decimals = 18;\n\n  bool public tradingStarted = false;\n\n  /**\n   * @dev modifier that throws if trading has not started yet\n   */\n  modifier hasStartedTrading() {\n    require(tradingStarted);\n    _;\n  }\n\n  function mint(address _to, uint _amount) public onlyAuthorized canMint returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() public onlyAuthorized returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n\n  /**\n   * @dev Allows the owner to enable the trading. This can not be undone\n   */\n  function startTrading() public onlyOwner {\n    tradingStarted = true;\n  }\n\n  /**\n   * @dev Allows anyone to transfer the BON tokens once trading has started\n   * @param _to the recipient address of the tokens.\n   * @param _value number of tokens to be transfered.\n   */\n  function transfer(address _to, uint _value) public hasStartedTrading {\n    super.transfer(_to, _value);\n  }\n\n  /**\n  * @dev Allows anyone to transfer the BON tokens once trading has started\n  * @param _from address The address which you want to send tokens from\n  * @param _to address The address which you want to transfer to\n  * @param _value uint the amout of tokens to be transfered\n  */\n  function transferFrom(address _from, address _to, uint _value) public hasStartedTrading {\n    super.transferFrom(_from, _to, _value);\n  }\n\n}\n\n/**\n * @title MainSale\n * @dev The main BON token sale contract\n *\n * ABI\n * [{\"constant\":false,\"inputs\":[{\"name\":\"_multisigVault\",\"type\":\"address\"}],\"name\":\"setMultisigVault\",\"outputs\":[],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"nonpayable\"},{\"constant\":true,\"inputs\":[{\"name\":\"_authorizerIndex\",\"type\":\"uint256\"}],\"name\":\"getAuthorizer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"view\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"view\"},{\"constant\":true,\"inputs\":[],\"name\":\"altDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"view\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"authorizedCreateTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"nonpayable\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"nonpayable\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"view\"},{\"constant\":false,\"inputs\":[{\"name\":\"_exchangeRate\",\"type\":\"address\"}],\"name\":\"setExchangeRate\",\"outputs\":[],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"nonpayable\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"nonpayable\"},{\"constant\":false,\"inputs\":[{\"name\":\"totalAltDeposits\",\"type\":\"uint256\"}],\"name\":\"setAltDeposit\",\"outputs\":[],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"nonpayable\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"view\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\",\"stateMutability\":\"payable\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addAuthorized\",\"outputs\":[],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"nonpayable\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"view\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hardcap\",\"type\":\"uint256\"}],\"name\":\"setHardCap\",\"outputs\":[],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"nonpayable\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"nonpayable\"},{\"constant\":false,\"inputs\":[{\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"setStart\",\"outputs\":[],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"nonpayable\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"view\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"view\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_exchangeRate\",\"type\":\"address\"},{\"name\":\"_multisigVault\",\"type\":\"address\"},{\"name\":\"_start\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\",\"stateMutability\":\"nonpayable\"},{\"payable\":true,\"type\":\"fallback\",\"stateMutability\":\"payable\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ether_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pay_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"exchangerate\",\"type\":\"uint256\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pay_amount\",\"type\":\"uint256\"}],\"name\":\"AuthorizedCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MainSaleClosed\",\"type\":\"event\"}]\n */\ncontract MainSale is Ownable, Authorizable {\n  using SafeMath for uint;\n  event TokenSold(address recipient, uint ether_amount, uint pay_amount, uint exchangerate);\n  event AuthorizedCreate(address recipient, uint pay_amount);\n  event MainSaleClosed();\n\n  MyToken public token;\n\n  address public multisigVault;\n\n  uint hardcap = 200000 ether;\n  ExchangeRate public exchangeRate;\n\n  uint public altDeposits = 0;\n  uint public start = 0;\n\n  /**\n   * @dev modifier to allow token creation only when the sale IS ON\n   */\n  modifier saleIsOn() {\n    require(now > start && now < start + 28 days);\n    _;\n  }\n\n  /**\n   * @dev modifier to allow token creation only when the hardcap has not been reached\n   */\n  modifier isUnderHardCap() {\n    require(multisigVault.balance + altDeposits <= hardcap);\n    _;\n  }\n\n  function MainSale(address _token, address _exchangeRate, address _multisigVault, uint _start) public onlyOwner {\n    token = MyToken(_token);\n    setExchangeRate(_exchangeRate);\n    setMultisigVault(_multisigVault);\n    setStart(_start);\n  }\n\n  /**\n   * @dev Allows anyone to create tokens by depositing ether.\n   * @param recipient the recipient to receive tokens.\n   */\n  function createTokens(address recipient) public isUnderHardCap saleIsOn payable {\n    uint rate = exchangeRate.getRate(\"ETH\");\n    uint tokens = rate.mul(msg.value).div(1 ether);\n    token.mint(recipient, tokens);\n    require(multisigVault.send(msg.value));\n    TokenSold(recipient, msg.value, tokens, rate);\n  }\n\n\n  /**\n   * @dev Allows to set the toal alt deposit measured in ETH to make sure the hardcap includes other deposits\n   * @param totalAltDeposits total amount ETH equivalent\n   */\n  function setAltDeposit(uint totalAltDeposits) public onlyAuthorized {\n    altDeposits = totalAltDeposits;\n  }\n\n  /**\n   * @dev Allows authorized acces to create tokens. This is used for Bitcoin and ERC20 deposits\n   * @param recipient the recipient to receive tokens.\n   * @param tokens number of tokens to be created.\n   */\n  function authorizedCreateTokens(address recipient, uint tokens) public onlyAuthorized {\n    token.mint(recipient, tokens);\n    AuthorizedCreate(recipient, tokens);\n  }\n\n  /**\n   * @dev Allows the owner to set the hardcap.\n   * @param _hardcap the new hardcap\n   */\n  function setHardCap(uint _hardcap) public onlyOwner {\n    hardcap = _hardcap;\n  }\n\n  /**\n   * @dev Allows the owner to set the starting time.\n   * @param _start the new _start\n   */\n  function setStart(uint _start) public onlyOwner {\n    start = _start;\n  }\n\n  /**\n   * @dev Allows the owner to set the multisig contract.\n   * @param _multisigVault the multisig contract address\n   */\n  function setMultisigVault(address _multisigVault) public onlyOwner {\n    if (_multisigVault != address(0)) {\n      multisigVault = _multisigVault;\n    }\n  }\n\n  /**\n   * @dev Allows the owner to set the exchangerate contract.\n   * @param _exchangeRate the exchangerate address\n   */\n  function setExchangeRate(address _exchangeRate) public onlyOwner {\n    exchangeRate = ExchangeRate(_exchangeRate);\n  }\n\n  /**\n   * @dev Allows the owner to finish the minting. This will create the\n   * restricted tokens and then close the minting.\n   * to this owner.\n   */\n  function finishMinting() public onlyOwner {\n    uint issuedTokenSupply = token.totalSupply();\n    uint restrictedTokens = issuedTokenSupply.mul(49).div(51);\n    token.mint(multisigVault, restrictedTokens);\n    token.finishMinting();\n    MainSaleClosed();\n  }\n\n  /**\n   * @dev Allows the owner to transfer ERC20 tokens to the multi sig vault\n   * @param _token the contract address of the ERC20 contract\n   */\n  function retrieveTokens(address _token) public onlyAuthorized {\n    ERC20 othertoken = ERC20(_token);\n    othertoken.transfer(multisigVault, othertoken.balanceOf(this));\n  }\n\n  /**\n   * @dev Fallback function which receives ether and created the appropriate number of tokens for the \n   * msg.sender.\n   */\n  function() external payable {\n    createTokens(msg.sender);\n  }\n\n}",
  "bytecode": "606060409081526003805460a060020a60ff021916905560006004558051908101604052600c81527f426f6e70617920546f6b656e0000000000000000000000000000000000000000602082015260079080516200006292916020019062000144565b5060408051908101604052600381527f424f4e000000000000000000000000000000000000000000000000000000000060208201526008908051620000ac92916020019062000144565b506012600955600a805460ff191690555b5b60038054600160a060020a03191633600160a060020a03161790555b6002620000e9600582620001ca565b503360056001815481101515620000fc57fe5b906000526020600020900160005b8154600160a060020a039384166101009290920a918202918402191617905533166000908152600660205260409020600190555b6200021b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200018757805160ff1916838001178555620001b7565b82800160010185558215620001b7579182015b82811115620001b75782518255916020019190600101906200019a565b5b50620001c6929150620001f7565b5090565b815481835581811511620001f157600083815260209020620001f1918101908301620001f7565b5b505050565b6200021891905b80821115620001c65760008155600101620001fe565b5090565b90565b610cf4806200022b6000396000f300606060405236156101045763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461010957806306fdde0314610130578063095ea7b3146101bb57806318160ddd146101df57806323b872dd14610204578063293230b81461022e578063313ce567146102435780633a3e8e841461026857806340c10f191461029a5780635b4f472a146102d057806370a08231146102f75780637d64bcb4146103285780638da5cb5b1461034f57806395d89b411461037e578063a9059cbb14610409578063cf1c316a1461042d578063dd62ed3e1461044e578063f2fde38b14610485578063fe9fbb80146104a6575b600080fd5b341561011457600080fd5b61011c6104d9565b604051901515815260200160405180910390f35b341561013b57600080fd5b6101436104fa565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101805780820151818401525b602001610167565b50505050905090810190601f1680156101ad5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101c657600080fd5b6101dd600160a060020a0360043516602435610598565b005b34156101ea57600080fd5b6101f2610638565b60405190815260200160405180910390f35b341561020f57600080fd5b6101dd600160a060020a036004358116906024351660443561063e565b005b341561023957600080fd5b6101dd610661565b005b341561024e57600080fd5b6101f261068d565b60405190815260200160405180910390f35b341561027357600080fd5b61027e600435610693565b604051600160a060020a03909116815260200160405180910390f35b34156102a557600080fd5b61011c600160a060020a03600435166024356106cf565b604051901515815260200160405180910390f35b34156102db57600080fd5b61011c6107aa565b604051901515815260200160405180910390f35b341561030257600080fd5b6101f2600160a060020a03600435166107b3565b60405190815260200160405180910390f35b341561033357600080fd5b61011c6107d2565b604051901515815260200160405180910390f35b341561035a57600080fd5b61027e610851565b604051600160a060020a03909116815260200160405180910390f35b341561038957600080fd5b610143610860565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101805780820151818401525b602001610167565b50505050905090810190601f1680156101ad5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561041457600080fd5b6101dd600160a060020a03600435166024356108fe565b005b341561043857600080fd5b6101dd600160a060020a036004351661091f565b005b341561045957600080fd5b6101f2600160a060020a03600435811690602435166109b2565b60405190815260200160405180910390f35b341561049057600080fd5b6101dd600160a060020a03600435166109df565b005b34156104b157600080fd5b61011c600160a060020a0360043516610a3c565b604051901515815260200160405180910390f35b60035474010000000000000000000000000000000000000000900460ff1681565b60078054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105905780601f1061056557610100808354040283529160200191610590565b820191906000526020600020905b81548152906001019060200180831161057357829003601f168201915b505050505081565b8015806105c85750600160a060020a03338116600090815260026020908152604080832093861683529290522054155b15156105d357600080fd5b600160a060020a03338116600081815260026020908152604080832094871680845294909152908190208490557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259084905190815260200160405180910390a35b5050565b60045481565b600a5460ff16151561064f57600080fd5b61065a838383610a5c565b5b5b505050565b60035433600160a060020a0390811691161461067c57600080fd5b600a805460ff191660011790555b5b565b60095481565b60006005826001018154811015156106a757fe5b906000526020600020900160005b9054906101000a9004600160a060020a031690505b919050565b60006106da33610a3c565b15156106e557600080fd5b60035474010000000000000000000000000000000000000000900460ff161561070d57600080fd5b600454610720908363ffffffff610b7f16565b600455600160a060020a03831660009081526001602052604090205461074c908363ffffffff610b7f16565b600160a060020a0384166000818152600160205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a25060015b5b5b92915050565b600a5460ff1681565b600160a060020a0381166000908152600160205260409020545b919050565b60006107dd33610a3c565b15156107e857600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a15060015b5b90565b600354600160a060020a031681565b60088054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105905780601f1061056557610100808354040283529160200191610590565b820191906000526020600020905b81548152906001019060200180831161057357829003601f168201915b505050505081565b600a5460ff16151561090f57600080fd5b6106348282610b99565b5b5b5050565b60035433600160a060020a0390811691161461093a57600080fd5b60058054600160a060020a0383166000908152600660205260409020819055906109679060018301610c7d565b5060058054829190600019810190811061097d57fe5b906000526020600020900160005b6101000a815481600160a060020a030219169083600160a060020a031602179055505b5b50565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b60035433600160a060020a039081169116146109fa57600080fd5b600160a060020a0381161515610a0f57600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b600160a060020a038116600090815260066020526040812054115b919050565b600060606064361015610a6e57600080fd5b600160a060020a038086166000908152600260209081526040808320338516845282528083205493881683526001909152902054909250610ab5908463ffffffff610b7f16565b600160a060020a038086166000908152600160205260408082209390935590871681522054610aea908463ffffffff610c6616565b600160a060020a038616600090815260016020526040902055610b13828463ffffffff610c6616565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a35b5b5050505050565b600082820183811015610b8e57fe5b8091505b5092915050565b60406044361015610ba957600080fd5b600160a060020a033316600090815260016020526040902054610bd2908363ffffffff610c6616565b600160a060020a033381166000908152600160205260408082209390935590851681522054610c07908363ffffffff610b7f16565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35b5b505050565b600082821115610c7257fe5b508082035b92915050565b81548183558181151161065a5760008381526020902061065a918101908301610ca7565b5b505050565b61084d91905b80821115610cc15760008155600101610cad565b5090565b905600a165627a7a7230582084da58bdef78b113ad14feeb9de59314b86fde10f99a7f1ea61f690b71549a9c0029"
}