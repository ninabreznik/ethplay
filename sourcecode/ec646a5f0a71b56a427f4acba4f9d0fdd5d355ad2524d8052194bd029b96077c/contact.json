{
  "address": "0x828539d6d54ac9b3d427113e878ae8357d1f928a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BAIRON",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-08\n*/\n\npragma solidity ^0.4.16;\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n\ncontract BAIRON {\n    // Public variables of the token\n    string public name = \"Bairon\";\n    string public symbol = \"BARN\";\n    uint8 public decimals = 18;\n    // 18 decimals is the strongly suggested default\n    uint256 public totalSupply;\n    uint256 public BaironSupply = 3000000000;\n    uint256 public buyPrice = 300000;\n    address public creator;\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event FundTransfer(address backer, uint amount, bool isContribution);\n    \n    \n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function BAIRON() public {\n        totalSupply = BaironSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;    // Give BaironCoin Mint the total created tokens\n        creator = msg.sender;\n    }\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        Transfer(_from, _to, _value);\n      \n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    \n    \n    /// @notice Buy tokens from contract by sending ether\n    function () payable internal {\n        uint amount = msg.value * buyPrice;                    // calculates the amount, made it so you can get many BOIS but to get MANY BOIS you have to spend ETH and not WEI\n        uint amountRaised;                                     \n        amountRaised += msg.value;                            //many thanks bois, couldnt do it without r/me_irl\n        require(balanceOf[creator] >= amount);               // checks if it has enough to sell\n        require(msg.value <= 10**17);                        // so any person who wants to put more then 0.1 ETH has time to think about what they are doing\n        balanceOf[msg.sender] += amount;                  // adds the amount to buyer's balance\n        balanceOf[creator] -= amount;                        // sends ETH to BaironCoinMint\n        Transfer(creator, msg.sender, amount);               // execute an event reflecting the change\n        creator.transfer(amountRaised);\n    }\n\n }",
  "bytecode": "60806040526040805190810160405280600681526020017f426169726f6e00000000000000000000000000000000000000000000000000008152506000908051906020019061004f929190610180565b506040805190810160405280600481526020017f4241524e000000000000000000000000000000000000000000000000000000008152506001908051906020019061009b929190610180565b506012600260006101000a81548160ff021916908360ff16021790555063b2d05e00600455620493e06005553480156100d357600080fd5b50600260009054906101000a900460ff1660ff16600a0a60045402600381905550600354600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610225565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101c157805160ff19168380011785556101ef565b828001600101855582156101ef579182015b828111156101ee5782518255916020019190600101906101d3565b5b5090506101fc9190610200565b5090565b61022291905b8082111561021e576000816000905550600101610206565b5090565b90565b610a34806102346000396000f3006080604052600436106100a4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806302d05d3f146102ea57806306fdde031461034157806318160ddd146103d1578063313ce567146103fc57806370a082311461042d57806373a5717e146104845780638620410b146104af57806395d89b41146104da578063a9059cbb1461056a578063dd62ed3e146105b7575b6000806005543402915034810190508160076000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561012357600080fd5b67016345785d8a0000341115151561013a57600080fd5b81600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508160076000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055503373ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156102e5573d6000803e3d6000fd5b505050005b3480156102f657600080fd5b506102ff61062e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561034d57600080fd5b50610356610654565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561039657808201518184015260208101905061037b565b50505050905090810190601f1680156103c35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103dd57600080fd5b506103e66106f2565b6040518082815260200191505060405180910390f35b34801561040857600080fd5b506104116106f8565b604051808260ff1660ff16815260200191505060405180910390f35b34801561043957600080fd5b5061046e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061070b565b6040518082815260200191505060405180910390f35b34801561049057600080fd5b50610499610723565b6040518082815260200191505060405180910390f35b3480156104bb57600080fd5b506104c4610729565b6040518082815260200191505060405180910390f35b3480156104e657600080fd5b506104ef61072f565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561052f578082015181840152602081019050610514565b50505050905090810190601f16801561055c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561057657600080fd5b506105b5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107cd565b005b3480156105c357600080fd5b50610618600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107dc565b6040518082815260200191505060405180910390f35b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106ea5780601f106106bf576101008083540402835291602001916106ea565b820191906000526020600020905b8154815290600101906020018083116106cd57829003601f168201915b505050505081565b60035481565b600260009054906101000a900460ff1681565b60076020528060005260406000206000915090505481565b60045481565b60055481565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107c55780601f1061079a576101008083540402835291602001916107c5565b820191906000526020600020905b8154815290600101906020018083116107a857829003601f168201915b505050505081565b6107d8338383610801565b5050565b6008602052816000526040600020602052806000526040600020600091509150505481565b60008273ffffffffffffffffffffffffffffffffffffffff161415151561082757600080fd5b80600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561087557600080fd5b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054011015151561090457600080fd5b80600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050505600a165627a7a723058205439dff97df2790f3b7f53f004a5db216ef125664e09613d9f25c322ad691d140029"
}