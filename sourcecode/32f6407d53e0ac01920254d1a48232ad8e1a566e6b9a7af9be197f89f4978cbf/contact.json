{
  "address": "0x847f2f9f21b14a60fda7e2e32a31766cfed04dd5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PresalePool",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-15\n*/\n\npragma solidity ^0.4.19;\n\n// Wolf Crypto pooling contract\n// written by @iamdefinitelyahuman\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\ninterface ERC20 {\n  function balanceOf(address _owner) external returns (uint256 balance);\n  function transfer(address _to, uint256 _value) external returns (bool success);\n}\n\ninterface WhiteList {\n   function isPaidUntil (address addr) external view returns (uint);\n}\n\n\ncontract PresalePool {\n\n  // SafeMath is a library to ensure that math operations do not have overflow errors\n  // https://zeppelin-solidity.readthedocs.io/en/latest/safemath.html\n  using SafeMath for uint;\n  \n  // The contract has 2 stages:\n  // 1 - The initial state. The owner is able to add addresses to the whitelist, and any whitelisted addresses can deposit or withdraw eth to the contract.\n  // 2 - The eth is sent from the contract to the receiver. Unused eth can be claimed by contributors immediately. Once tokens are sent to the contract,\n  //     the owner enables withdrawals and contributors can withdraw their tokens.\n  uint8 public contractStage = 1;\n  \n  // These variables are set at the time of contract creation\n  // address that creates the contract\n  address public owner;\n  uint maxContractBalance;\n  // maximum eth amount (in wei) that can be sent by a whitelisted address\n  uint contributionCap;\n  // the % of tokens kept by the contract owner\n  uint public feePct;\n  // the address that the pool will be paid out to\n  address public receiverAddress;\n  \n  // These constant variables do not change with each contract deployment\n  // minimum eth amount (in wei) that can be sent by a whitelisted address\n  uint constant public contributionMin = 100000000000000000;\n  // maximum gas price allowed for deposits in stage 1\n  uint constant public maxGasPrice = 50000000000;\n  // whitelisting contract\n  WhiteList constant public whitelistContract = WhiteList(0xf6E386FA4794B58350e7B4Cb32B6f86Fb0F357d4);\n  bool whitelistIsActive = true;\n  \n  // These variables are all initially set to 0 and will be set at some point during the contract\n  // epoch time that the next contribution caps become active\n  uint public nextCapTime;\n  // pending contribution caps\n  uint public nextContributionCap;\n  // block number of the last change to the receiving address (set if receiving address is changed, stage 1)\n  uint public addressChangeBlock;\n  // amount of eth (in wei) present in the contract when it was submitted\n  uint public finalBalance;\n  // array containing eth amounts to be refunded in stage 2\n  uint[] public ethRefundAmount;\n  // default token contract to be used for withdrawing tokens in stage 2\n  address public activeToken;\n  \n  // data structure for holding the contribution amount, cap, eth refund status, and token withdrawal status for each whitelisted address\n  struct Contributor {\n    uint ethRefund;\n    uint balance;\n    uint cap;\n    mapping (address => uint) tokensClaimed;\n  }\n  // mapping that holds the contributor struct for each whitelisted address\n  mapping (address => Contributor) whitelist;\n  \n  // data structure for holding information related to token withdrawals.\n  struct TokenAllocation {\n    ERC20 token;\n    uint[] pct;\n    uint balanceRemaining;\n  }\n  // mapping that holds the token allocation struct for each token address\n  mapping (address => TokenAllocation) distributionMap;\n  \n  \n  // modifier for functions that can only be accessed by the contract creator\n  modifier onlyOwner () {\n    require (msg.sender == owner);\n    _;\n  }\n  \n  // modifier to prevent re-entrancy exploits during contract > contract interaction\n  bool locked;\n  modifier noReentrancy() {\n    require(!locked);\n    locked = true;\n    _;\n    locked = false;\n  }\n  \n  // Events triggered throughout contract execution\n  // These can be watched via geth filters to keep up-to-date with the contract\n  event ContributorBalanceChanged (address contributor, uint totalBalance);\n  event ReceiverAddressSet ( address _addr);\n  event PoolSubmitted (address receiver, uint amount);\n  event WithdrawalsOpen (address tokenAddr);\n  event TokensWithdrawn (address receiver, address token, uint amount);\n  event EthRefundReceived (address sender, uint amount);\n  event EthRefunded (address receiver, uint amount);\n  event ERC223Received (address token, uint value);\n   \n  // These are internal functions used for calculating fees, eth and token allocations as %\n  // returns a value as a % accurate to 20 decimal points\n  function _toPct (uint numerator, uint denominator ) internal pure returns (uint) {\n    return numerator.mul(10 ** 20) / denominator;\n  }\n  \n  // returns % of any number, where % given was generated with toPct\n  function _applyPct (uint numerator, uint pct) internal pure returns (uint) {\n    return numerator.mul(pct) / (10 ** 20);\n  }\n  \n  // This function is called at the time of contract creation,\n  // it sets the initial variables and whitelists the contract owner.\n  function PresalePool (address receiverAddr, uint contractCap, uint cap, uint fee) public {\n    require (fee < 100);\n    require (contractCap >= cap);\n    owner = msg.sender;\n    receiverAddress = receiverAddr;\n    maxContractBalance = contractCap;\n    contributionCap = cap;\n    feePct = _toPct(fee,100);\n  }\n  \n  // This function is called whenever eth is sent into the contract.\n  // The send will fail unless the contract is in stage one and the sender has been whitelisted.\n  // The amount sent is added to the balance in the Contributor struct associated with the sending address.\n  function () payable public {\n    if (contractStage == 1) {\n      _ethDeposit();\n    } else _ethRefund();\n  }\n  \n  // Internal function for handling eth deposits during contract stage one.\n  function _ethDeposit () internal {\n    assert (contractStage == 1);\n    require (!whitelistIsActive || whitelistContract.isPaidUntil(msg.sender) > now);\n    require (tx.gasprice <= maxGasPrice);\n    require (this.balance <= maxContractBalance);\n    var c = whitelist[msg.sender];\n    uint newBalance = c.balance.add(msg.value);\n    require (newBalance >= contributionMin);\n    if (nextCapTime > 0 && nextCapTime < now) {\n      contributionCap = nextContributionCap;\n      nextCapTime = 0;\n    }\n    if (c.cap > 0) require (newBalance <= c.cap);\n    else require (newBalance <= contributionCap);\n    c.balance = newBalance;\n    ContributorBalanceChanged(msg.sender, newBalance);\n  }\n  \n  // Internal function for handling eth refunds during stage two.\n  function _ethRefund () internal {\n    assert (contractStage == 2);\n    require (msg.sender == owner || msg.sender == receiverAddress);\n    require (msg.value >= contributionMin);\n    ethRefundAmount.push(msg.value);\n    EthRefundReceived(msg.sender, msg.value);\n  }\n  \n  // This function is called to withdraw eth or tokens from the contract.\n  // It can only be called by addresses that are whitelisted and show a balance greater than 0.\n  // If called during stage one, the full eth balance deposited into the contract is returned and the contributor's balance reset to 0.\n  // If called during stage two, the contributor's unused eth will be returned, as well as any available tokens.\n  // The token address may be provided optionally to withdraw tokens that are not currently the default token (airdrops).\n  function withdraw (address tokenAddr) public {\n    var c = whitelist[msg.sender];\n    require (c.balance > 0);\n    if (contractStage == 1) {\n      uint amountToTransfer = c.balance;\n      c.balance = 0;\n      msg.sender.transfer(amountToTransfer);\n      ContributorBalanceChanged(msg.sender, 0);\n    } else {\n      _withdraw(msg.sender,tokenAddr);\n    }  \n  }\n  \n  // This function allows the contract owner to force a withdrawal to any contributor.\n  function withdrawFor (address contributor, address tokenAddr) public onlyOwner {\n    require (contractStage == 2);\n    require (whitelist[contributor].balance > 0);\n    _withdraw(contributor,tokenAddr);\n  }\n  \n  // This internal function handles withdrawals during stage two.\n  // The associated events will fire to notify when a refund or token allocation is claimed.\n  function _withdraw (address receiver, address tokenAddr) internal {\n    assert (contractStage == 2);\n    var c = whitelist[receiver];\n    if (tokenAddr == 0x00) {\n      tokenAddr = activeToken;\n    }\n    var d = distributionMap[tokenAddr];\n    require ( (ethRefundAmount.length > c.ethRefund) || d.pct.length > c.tokensClaimed[tokenAddr] );\n    if (ethRefundAmount.length > c.ethRefund) {\n      uint pct = _toPct(c.balance,finalBalance);\n      uint ethAmount = 0;\n      for (uint i=c.ethRefund; i<ethRefundAmount.length; i++) {\n        ethAmount = ethAmount.add(_applyPct(ethRefundAmount[i],pct));\n      }\n      c.ethRefund = ethRefundAmount.length;\n      if (ethAmount > 0) {\n        receiver.transfer(ethAmount);\n        EthRefunded(receiver,ethAmount);\n      }\n    }\n    if (d.pct.length > c.tokensClaimed[tokenAddr]) {\n      uint tokenAmount = 0;\n      for (i=c.tokensClaimed[tokenAddr]; i<d.pct.length; i++) {\n        tokenAmount = tokenAmount.add(_applyPct(c.balance,d.pct[i]));\n      }\n      c.tokensClaimed[tokenAddr] = d.pct.length;\n      if (tokenAmount > 0) {\n        require(d.token.transfer(receiver,tokenAmount));\n        d.balanceRemaining = d.balanceRemaining.sub(tokenAmount);\n        TokensWithdrawn(receiver,tokenAddr,tokenAmount);\n      }  \n    }\n    \n  }\n  \n  \n  // This function is called by the owner to modify the contribution cap of a whitelisted address.\n  // If the current contribution balance exceeds the new cap, the excess balance is refunded.\n  function modifyIndividualCap (address addr, uint cap) public onlyOwner {\n    require (contractStage == 1);\n    require (cap <= maxContractBalance);\n    var c = whitelist[addr];\n    require (cap >= c.balance);\n    c.cap = cap;\n  }\n  \n  // This function is called by the owner to modify the cap.\n  function modifyCap (uint cap) public onlyOwner {\n    require (contractStage == 1);\n    require (contributionCap <= cap && maxContractBalance >= cap);\n    contributionCap = cap;\n    nextCapTime = 0;\n  }\n  \n  // This function is called by the owner to modify the cap at a future time.\n  function modifyNextCap (uint time, uint cap) public onlyOwner {\n    require (contractStage == 1);\n    require (contributionCap <= cap && maxContractBalance >= cap);\n    require (time > now);\n    nextCapTime = time;\n    nextContributionCap = cap;\n  }\n  \n  // This function is called to modify the maximum balance of the contract.\n  function modifyMaxContractBalance (uint amount) public onlyOwner {\n    require (contractStage == 1);\n    require (amount >= contributionMin);\n    require (amount >= this.balance);\n    maxContractBalance = amount;\n    if (amount < contributionCap) contributionCap = amount;\n  }\n  \n  function toggleWhitelist (bool active) public onlyOwner {\n    whitelistIsActive = active;\n  }\n  \n  // This callable function returns the total pool cap, current balance and remaining balance to be filled.\n  function checkPoolBalance () view public returns (uint poolCap, uint balance, uint remaining) {\n    if (contractStage == 1) {\n      remaining = maxContractBalance.sub(this.balance);\n    } else {\n      remaining = 0;\n    }\n    return (maxContractBalance,this.balance,remaining);\n  }\n  \n  // This callable function returns the balance, contribution cap, and remaining available balance of any contributor.\n  function checkContributorBalance (address addr) view public returns (uint balance, uint cap, uint remaining) {\n    var c = whitelist[addr];\n    if (contractStage == 2) return (c.balance,0,0);\n    if (whitelistIsActive && whitelistContract.isPaidUntil(addr) < now) return (c.balance,0,0);\n    if (c.cap > 0) cap = c.cap;\n    else cap = contributionCap;\n    if (cap.sub(c.balance) > maxContractBalance.sub(this.balance)) return (c.balance, cap, maxContractBalance.sub(this.balance));\n    return (c.balance, cap, cap.sub(c.balance));\n  }\n  \n  // This callable function returns the token balance that a contributor can currently claim.\n  function checkAvailableTokens (address addr, address tokenAddr) view public returns (uint tokenAmount) {\n    var c = whitelist[addr];\n    var d = distributionMap[tokenAddr];\n    for (uint i = c.tokensClaimed[tokenAddr]; i < d.pct.length; i++) {\n      tokenAmount = tokenAmount.add(_applyPct(c.balance, d.pct[i]));\n    }\n    return tokenAmount;\n  }\n   \n  // This function sets the receiving address that the contract will send the pooled eth to.\n  // It can only be called by the contract owner if the receiver address has not already been set.\n  // After making this call, the contract will be unable to send the pooled eth for 6000 blocks.\n  // This limitation is so that if the owner acts maliciously in making the change, all whitelisted\n  // addresses have ~24 hours to withdraw their eth from the contract.\n  function setReceiverAddress (address addr) public onlyOwner {\n    require (contractStage == 1);\n    receiverAddress = addr;\n    addressChangeBlock = block.number;\n    ReceiverAddressSet(addr);\n  }\n\n  // This function sends the pooled eth to the receiving address, calculates the % of unused eth to be returned,\n  // and advances the contract to stage two. It can only be called by the contract owner during stages one or two.\n  // The amount to send (given in wei) must be specified during the call. As this function can only be executed once,\n  // it is VERY IMPORTANT not to get the amount wrong.\n  function submitPool (uint amountInWei) public onlyOwner noReentrancy {\n    require (contractStage == 1);\n    require (receiverAddress != 0x00);\n    require (block.number >= addressChangeBlock.add(6000));\n    if (amountInWei == 0) amountInWei = this.balance;\n    require (contributionMin <= amountInWei && amountInWei <= this.balance);\n    finalBalance = this.balance;\n    require (receiverAddress.call.value(amountInWei).gas(msg.gas.sub(5000))());\n    if (this.balance > 0) ethRefundAmount.push(this.balance);\n    contractStage = 2;\n    PoolSubmitted(receiverAddress, amountInWei);\n  }\n  \n  // This function opens the contract up for token withdrawals.\n  // It can only be called by the owner during stage two.  The owner specifies the address of an ERC20 token\n  // contract that this contract has a balance in, and optionally a bool to prevent this token from being\n  // the default withdrawal (in the event of an airdrop, for example).\n  function enableTokenWithdrawals (address tokenAddr, bool notDefault) public onlyOwner noReentrancy {\n    require (contractStage == 2);\n    if (notDefault) {\n      require (activeToken != 0x00);\n    } else {\n      activeToken = tokenAddr;\n    }\n    var d = distributionMap[tokenAddr];    \n    if (d.pct.length==0) d.token = ERC20(tokenAddr);\n    uint amount = d.token.balanceOf(this).sub(d.balanceRemaining);\n    require (amount > 0);\n    if (feePct > 0) {\n      require (d.token.transfer(owner,_applyPct(amount,feePct)));\n    }\n    amount = d.token.balanceOf(this).sub(d.balanceRemaining);\n    d.balanceRemaining = d.token.balanceOf(this);\n    d.pct.push(_toPct(amount,finalBalance));\n  }\n  \n  // This is a standard function required for ERC223 compatibility.\n  function tokenFallback (address from, uint value, bytes data) public {\n    ERC223Received (from, value);\n  }\n  \n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"checkPoolBalance\",\"outputs\":[{\"name\":\"poolCap\",\"type\":\"uint256\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"receiverAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextContributionCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"modifyNextCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amountInWei\",\"type\":\"uint256\"}],\"name\":\"submitPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxGasPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddr\",\"type\":\"address\"},{\"name\":\"notDefault\",\"type\":\"bool\"}],\"name\":\"enableTokenWithdrawals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ethRefundAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"checkAvailableTokens\",\"outputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressChangeBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"modifyCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"toggleWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setReceiverAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activeToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePct\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"modifyMaxContractBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"},{\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"withdrawFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"checkContributorBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"cap\",\"type\":\"uint256\"},{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributionMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"modifyIndividualCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextCapTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"receiverAddr\",\"type\":\"address\"},{\"name\":\"contractCap\",\"type\":\"uint256\"},{\"name\":\"cap\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalBalance\",\"type\":\"uint256\"}],\"name\":\"ContributorBalanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"ReceiverAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PoolSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"WithdrawalsOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthRefundReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ERC223Received\",\"type\":\"event\"}]",
  "bytecode": "60606040526000805460ff191660011790556004805460a060020a60ff0219167401000000000000000000000000000000000000000017905534156200004457600080fd5b6040516080806200196e83398101604052808051919060200180519190602001805191906020018051915050606481106200007e57600080fd5b818310156200008c57600080fd5b60008054600160a060020a033381166101000261010060a860020a03199092169190911790915560048054918616600160a060020a031990921691909117905560018390556002829055620000f1816064640100000000620013f9620000ff82021704565b600355506200017192505050565b600081620001258468056bc75e2d63100000640100000000620017566200013782021704565b8115156200012f57fe5b049392505050565b6000808315156200014c57600091506200016a565b508282028284828115156200015d57fe5b04146200016657fe5b8091505b5092915050565b6117ed80620001816000396000f3006060604052600436106101455763ffffffff60e060020a600035041663021bc974811461016a5780630370ca41146101a157806316fed3e2146101ca5780632129e25a146101f95780632aabb48e1461021e57806332cc6a9f1461023157806333e7ed611461024a5780633de39c11146102605780634fbc7e111461027357806351cff8d91461029757806352f1e07b146102b6578063737c2d8c146102cc5780637c02e1ea146102f15780637e4930ae1461030457806380e3f1ad1461031a5780638279c7db1461033257806384900b04146103515780638796d43d146103645780638da5cb5b14610377578063a02cf9371461038a578063abccb0431461039d578063adb5735c146103b3578063b9c009f0146103d8578063bcc13d1d146103f7578063be1890351461040a578063c0ee0b8a1461042c578063ece2ea4014610491575b60005460ff16600114156101605761015b6104a4565b610168565b61016861067d565b005b341561017557600080fd5b61017d610746565b60405180848152602001838152602001828152602001935050505060405180910390f35b34156101ac57600080fd5b6101b4610797565b60405160ff909116815260200160405180910390f35b34156101d557600080fd5b6101dd6107a0565b604051600160a060020a03909116815260200160405180910390f35b341561020457600080fd5b61020c6107af565b60405190815260200160405180910390f35b341561022957600080fd5b61020c6107b5565b341561023c57600080fd5b6101686004356024356107bb565b341561025557600080fd5b610168600435610823565b341561026b57600080fd5b61020c6109dd565b341561027e57600080fd5b610168600160a060020a036004351660243515156109e6565b34156102a257600080fd5b610168600160a060020a0360043516610d32565b34156102c157600080fd5b61020c600435610e02565b34156102d757600080fd5b61020c600160a060020a0360043581169060243516610e21565b34156102fc57600080fd5b61020c610eb0565b341561030f57600080fd5b610168600435610eb6565b341561032557600080fd5b6101686004351515610f11565b341561033d57600080fd5b610168600160a060020a0360043516610f71565b341561035c57600080fd5b6101dd61100f565b341561036f57600080fd5b6101dd611027565b341561038257600080fd5b6101dd611036565b341561039557600080fd5b61020c61104a565b34156103a857600080fd5b610168600435611050565b34156103be57600080fd5b610168600160a060020a03600435811690602435166110c6565b34156103e357600080fd5b61017d600160a060020a036004351661112c565b341561040257600080fd5b61020c6112d2565b341561041557600080fd5b610168600160a060020a03600435166024356112de565b341561043757600080fd5b61016860048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061135195505050505050565b341561049c57600080fd5b61020c61139a565b60008054819060ff166001146104b657fe5b60045474010000000000000000000000000000000000000000900460ff16158061055b57504273f6e386fa4794b58350e7b4cb32b6f86fb0f357d46315c7ff343360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561053e57600080fd5b6102c65a03f1151561054f57600080fd5b50505060405180519050115b151561056657600080fd5b640ba43b74003a111561057857600080fd5b600154600160a060020a03301631111561059157600080fd5b600160a060020a0333166000908152600b6020526040902060018101549092506105c1903463ffffffff6113a016565b905067016345785d8a00008110156105d857600080fd5b60006005541180156105eb575042600554105b156105fc5760065460025560006005555b60008260020154111561061f57600282015481111561061a57600080fd5b61062e565b60025481111561062e57600080fd5b600182018190557fbd5304e38e372b10ebf161f6b67eeaf9f4e25653126622b0e2497484850d10f43382604051600160a060020a03909216825260208201526040908101905180910390a15050565b60005460ff1660021461068c57fe5b60005433600160a060020a039081166101009092041614806106bc575060045433600160a060020a039081169116145b15156106c757600080fd5b67016345785d8a00003410156106dc57600080fd5b60098054600181016106ee8382611781565b50600091825260209091203491018190557fa6b266978e1d6bcae9b5baa4078b3b92fc622b302cca549cf2ebf2e4723aca3c903390604051600160a060020a03909216825260208201526040908101905180910390a1565b600080548190819060ff166001141561077d5760015461077690600160a060020a0330163163ffffffff6113ba16565b9050610781565b5060005b6001549330600160a060020a0316319350909150565b60005460ff1681565b600454600160a060020a031681565b60085481565b60065481565b60005433600160a060020a0390811661010090920416146107db57600080fd5b60005460ff166001146107ed57600080fd5b806002541115801561080157508060015410155b151561080c57600080fd5b42821161081857600080fd5b600591909155600655565b60005433600160a060020a03908116610100909204161461084357600080fd5b600d5460ff161561085357600080fd5b600d805460ff1916600190811790915560005460ff161461087357600080fd5b600454600160a060020a0316151561088a57600080fd5b60075461089f9061177063ffffffff6113a016565b4310156108ab57600080fd5b8015156108bf5750600160a060020a033016315b8067016345785d8a0000111580156108e1575030600160a060020a0316318111155b15156108ec57600080fd5b600160a060020a033081163160085560045416816109136113885a9063ffffffff6113ba16565b90604051600060405180830381858888f19350505050151561093457600080fd5b600030600160a060020a03163111156109735760098054600181016109598382611781565b5060009182526020909120600160a060020a033016319101555b6000805460ff191660021790556004547f166428c0f697cf2ebca7e4045ddec0f48bb4914f5ffac8765da1551e2881a51990600160a060020a031682604051600160a060020a03909216825260208201526040908101905180910390a150600d805460ff19169055565b640ba43b740081565b60008054819033600160a060020a039081166101009092041614610a0957600080fd5b600d5460ff1615610a1957600080fd5b600d8054600160ff1990911617905560005460ff16600214610a3a57600080fd5b8215610a5c57600a54600160a060020a03161515610a5757600080fd5b610a85565b600a805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0386161790555b600160a060020a0384166000908152600c6020526040902060018101549092501515610ad257815473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0385161782555b60028201548254610b5b9190600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610b3457600080fd5b6102c65a03f11515610b4557600080fd5b505050604051805191905063ffffffff6113ba16565b905060008111610b6a57600080fd5b60006003541115610c13578154600054600354600160a060020a039283169263a9059cbb9261010090041690610ba19085906113cc565b60006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610bed57600080fd5b6102c65a03f11515610bfe57600080fd5b505050604051805190501515610c1357600080fd5b60028201548254610c759190600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610b3457600080fd5b8254909150600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610cd057600080fd5b6102c65a03f11515610ce157600080fd5b50505060405180516002840155506001808301805490918101610d048382611781565b91600052602060002090016000610d1d846008546113f9565b9091555050600d805460ff1916905550505050565b600160a060020a0333166000908152600b602052604081206001810154909190819011610d5e57600080fd5b60005460ff1660011415610df357506001810180546000909155600160a060020a03331681156108fc0282604051600060405180830381858888f193505050501515610da957600080fd5b7fbd5304e38e372b10ebf161f6b67eeaf9f4e25653126622b0e2497484850d10f4336000604051600160a060020a03909216825260208201526040908101905180910390a1610dfd565b610dfd3384611415565b505050565b6009805482908110610e1057fe5b600091825260209091200154905081565b600160a060020a038083166000908152600b602090815260408083209385168352600c8252808320600385019092528220549192915b6001820154811015610ea757610e9d610e9084600101548460010184815481101515610e7f57fe5b9060005260206000209001546113cc565b859063ffffffff6113a016565b9350600101610e57565b50505092915050565b60075481565b60005433600160a060020a039081166101009092041614610ed657600080fd5b60005460ff16600114610ee857600080fd5b8060025411158015610efc57508060015410155b1515610f0757600080fd5b6002556000600555565b60005433600160a060020a039081166101009092041614610f3157600080fd5b60048054911515740100000000000000000000000000000000000000000274ff000000000000000000000000000000000000000019909216919091179055565b60005433600160a060020a039081166101009092041614610f9157600080fd5b60005460ff16600114610fa357600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038316179055436007557f17528c7f18bea16a4db7e968a53fe806a68a29800c78185e7d52d343dd8004ba81604051600160a060020a03909116815260200160405180910390a150565b73f6e386fa4794b58350e7b4cb32b6f86fb0f357d481565b600a54600160a060020a031681565b6000546101009004600160a060020a031681565b60035481565b60005433600160a060020a03908116610100909204161461107057600080fd5b60005460ff1660011461108257600080fd5b67016345785d8a000081101561109757600080fd5b600160a060020a033016318110156110ae57600080fd5b60018190556002548110156110c35760028190555b50565b60005433600160a060020a0390811661010090920416146110e657600080fd5b60005460ff166002146110f857600080fd5b600160a060020a0382166000908152600b60205260408120600101541161111e57600080fd5b6111288282611415565b5050565b600160a060020a0381166000908152600b6020526040812081548291829160ff16600214156111685760018101549350600092508291506112ca565b60045474010000000000000000000000000000000000000000900460ff16801561120d57504273f6e386fa4794b58350e7b4cb32b6f86fb0f357d46315c7ff348760006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156111f057600080fd5b6102c65a03f1151561120157600080fd5b50505060405180519050105b156112255760018101549350600092508291506112ca565b60008160020154111561123e5780600201549250611244565b60025492505b60015461126190600160a060020a0330163163ffffffff6113ba16565b600182015461127790859063ffffffff6113ba16565b11156112ad578060010154836112a230600160a060020a0316316001546113ba90919063ffffffff16565b9350935093506112ca565b6001810154836112c3818363ffffffff6113ba16565b9350935093505b509193909250565b67016345785d8a000081565b6000805433600160a060020a0390811661010090920416146112ff57600080fd5b60005460ff1660011461131157600080fd5b60015482111561132057600080fd5b50600160a060020a0382166000908152600b60205260409020600181015482101561134a57600080fd5b6002015550565b7f121b68c1c3978d37f853f81c5ba5a0d2d36bb308e0765a3d6eb906c01ebdfe888383604051600160a060020a03909216825260208201526040908101905180910390a1505050565b60055481565b6000828201838110156113af57fe5b8091505b5092915050565b6000828211156113c657fe5b50900390565b600068056bc75e2d631000006113e8848463ffffffff61175616565b8115156113f157fe5b049392505050565b6000816113e88468056bc75e2d6310000063ffffffff61175616565b600080548190819081908190819060ff1660021461142f57fe5b600160a060020a038089166000908152600b6020526040902096508716151561146157600a54600160a060020a031696505b600160a060020a0387166000908152600c6020526040902086546009549196509011806114ab5750600160a060020a03871660009081526003870160205260409020546001860154115b15156114b657600080fd5b855460095411156115ac576114d186600101546008546113f9565b86549094506000935091505b6009548210156115285761151b61150e6009848154811015156114fc57fe5b906000526020600020900154866113cc565b849063ffffffff6113a016565b92506001909101906114dd565b600954865560008311156115ac57600160a060020a03881683156108fc0284604051600060405180830381858888f19350505050151561156757600080fd5b7fffab3269bdaceca4d1bbc53e74b982ac2b306687e17e21f1e499e7fdf6751ac88884604051600160a060020a03909216825260208201526040908101905180910390a15b600160a060020a03871660009081526003870160205260409020546001860154111561174c575050600160a060020a0385166000908152600385016020526040812054905b60018501548210156116335761162661161987600101548760010185815481101515610e7f57fe5b829063ffffffff6113a016565b60019092019190506115f1565b6001850154600160a060020a038816600090815260038801602052604081209190915581111561174c578454600160a060020a031663a9059cbb898360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156116bb57600080fd5b6102c65a03f115156116cc57600080fd5b5050506040518051905015156116e157600080fd5b60028501546116f6908263ffffffff6113ba16565b60028601557f6337ed398c0e8467698c581374fdce4db14922df487b5a39483079f5f59b60a4888883604051600160a060020a039384168152919092166020820152604080820192909252606001905180910390a15b5050505050505050565b60008083151561176957600091506113b3565b5082820282848281151561177957fe5b04146113af57fe5b815481835581811511610dfd57600083815260209020610dfd9181019083016117be91905b808211156117ba57600081556001016117a6565b5090565b905600a165627a7a72305820dbc674234dad26178ed3a8996c416cf6dacfbbf7627223c1394b954d191b36590029000000000000000000000000f23dbc71e0aaa1ec59a494b71c09ec70ed08b6c000000000000000000000000000000000000000000000006c6b935b8bbd4000000000000000000000000000000000000000000000000000008ac7230489e800000000000000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000f23dbc71e0aaa1ec59a494b71c09ec70ed08b6c000000000000000000000000000000000000000000000006c6b935b8bbd4000000000000000000000000000000000000000000000000000008ac7230489e800000000000000000000000000000000000000000000000000000000000000000000"
}