{
  "address": "0xfaaa1f6bc1cadbd8f67f76f1ef0061549f66b617",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PlatformTerms",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-05\n*/\n\npragma solidity 0.4.25;\n\ncontract Math {\n\n    ////////////////////////\n    // Internal functions\n    ////////////////////////\n\n    // absolute difference: |v1 - v2|\n    function absDiff(uint256 v1, uint256 v2)\n        internal\n        pure\n        returns(uint256)\n    {\n        return v1 > v2 ? v1 - v2 : v2 - v1;\n    }\n\n    // divide v by d, round up if remainder is 0.5 or more\n    function divRound(uint256 v, uint256 d)\n        internal\n        pure\n        returns(uint256)\n    {\n        return add(v, d/2) / d;\n    }\n\n    // computes decimal decimalFraction 'frac' of 'amount' with maximum precision (multiplication first)\n    // both amount and decimalFraction must have 18 decimals precision, frac 10**18 represents a whole (100% of) amount\n    // mind loss of precision as decimal fractions do not have finite binary expansion\n    // do not use instead of division\n    function decimalFraction(uint256 amount, uint256 frac)\n        internal\n        pure\n        returns(uint256)\n    {\n        // it's like 1 ether is 100% proportion\n        return proportion(amount, frac, 10**18);\n    }\n\n    // computes part/total of amount with maximum precision (multiplication first)\n    // part and total must have the same units\n    function proportion(uint256 amount, uint256 part, uint256 total)\n        internal\n        pure\n        returns(uint256)\n    {\n        return divRound(mul(amount, part), total);\n    }\n\n    //\n    // Open Zeppelin Math library below\n    //\n\n    function mul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function min(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function max(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a > b ? a : b;\n    }\n}\n\n/// @title uniquely identifies deployable (non-abstract) platform contract\n/// @notice cheap way of assigning implementations to knownInterfaces which represent system services\n///         unfortunatelly ERC165 does not include full public interface (ABI) and does not provide way to list implemented interfaces\n///         EIP820 still in the making\n/// @dev ids are generated as follows keccak256(\"neufund-platform:<contract name>\")\n///      ids roughly correspond to ABIs\ncontract IContractId {\n    /// @param id defined as above\n    /// @param version implementation version\n    function contractId() public pure returns (bytes32 id, uint256 version);\n}\n\n/// @title set terms of Platform (investor's network) of the ETO\ncontract PlatformTerms is Math, IContractId {\n\n    ////////////////////////\n    // Constants\n    ////////////////////////\n\n    // fraction of fee deduced on successful ETO (see Math.sol for fraction definition)\n    uint256 public constant PLATFORM_FEE_FRACTION = 3 * 10**16;\n    // fraction of tokens deduced on succesful ETO\n    uint256 public constant TOKEN_PARTICIPATION_FEE_FRACTION = 2 * 10**16;\n    // share of Neumark reward platform operator gets\n    // actually this is a divisor that splits Neumark reward in two parts\n    // the results of division belongs to platform operator, the remaining reward part belongs to investor\n    uint256 public constant PLATFORM_NEUMARK_SHARE = 2; // 50:50 division\n    // ICBM investors whitelisted by default\n    bool public constant IS_ICBM_INVESTOR_WHITELISTED = true;\n\n    // maximum ticket size Platform accepts in EUR ULPS\n    // no max ticket in general prospectus regulation\n    // uint256 public constant MAX_TICKET_EUR_ULPS = 10000000 * 10**18;\n\n    // token rate expires after\n    uint256 public constant TOKEN_RATE_EXPIRES_AFTER = 4 hours;\n\n    // time after which claimable tokens become recycleable in fee disbursal pool\n    uint256 public constant DEFAULT_DISBURSAL_RECYCLE_AFTER_DURATION = 4 * 365 days;\n\n    ////////////////////////\n    // Public Function\n    ////////////////////////\n\n    // calculates investor's and platform operator's neumarks from total reward\n    function calculateNeumarkDistribution(uint256 rewardNmk)\n        public\n        pure\n        returns (uint256 platformNmk, uint256 investorNmk)\n    {\n        // round down - platform may get 1 wei less than investor\n        platformNmk = rewardNmk / PLATFORM_NEUMARK_SHARE;\n        // rewardNmk > platformNmk always\n        return (platformNmk, rewardNmk - platformNmk);\n    }\n\n    function calculatePlatformTokenFee(uint256 tokenAmount)\n        public\n        pure\n        returns (uint256)\n    {\n        // mind tokens having 0 precision\n        return proportion(tokenAmount, TOKEN_PARTICIPATION_FEE_FRACTION, 10**18);\n    }\n\n    function calculatePlatformFee(uint256 amount)\n        public\n        pure\n        returns (uint256)\n    {\n        return decimalFraction(amount, PLATFORM_FEE_FRACTION);\n    }\n\n    //\n    // Implements IContractId\n    //\n\n    function contractId() public pure returns (bytes32 id, uint256 version) {\n        return (0x95482babc4e32de6c4dc3910ee7ae62c8e427efde6bc4e9ce0d6d93e24c39323, 1);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculatePlatformFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IS_ICBM_INVESTOR_WHITELISTED\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PLATFORM_NEUMARK_SHARE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_PARTICIPATION_FEE_FRACTION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractId\",\"outputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"version\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"calculatePlatformTokenFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PLATFORM_FEE_FRACTION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rewardNmk\",\"type\":\"uint256\"}],\"name\":\"calculateNeumarkDistribution\",\"outputs\":[{\"name\":\"platformNmk\",\"type\":\"uint256\"},{\"name\":\"investorNmk\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_RATE_EXPIRES_AFTER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_DISBURSAL_RECYCLE_AFTER_DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]",
  "bytecode": "608060405234801561001057600080fd5b50610311806100206000396000f3006080604052600436106100a35763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630cbab4f781146100a857806327986eda146100d2578063659c713b146100fb578063753f3f15146101105780638291286c146101255780639ae0f89014610153578063bcac56851461016b578063d017ecb414610180578063e1546a2314610198578063f4fb5ea9146101ad575b600080fd5b3480156100b457600080fd5b506100c06004356101c2565b60408051918252519081900360200190f35b3480156100de57600080fd5b506100e76101db565b604080519115158252519081900360200190f35b34801561010757600080fd5b506100c06101e0565b34801561011c57600080fd5b506100c06101e5565b34801561013157600080fd5b5061013a6101f0565b6040805192835260208301919091528051918290030190f35b34801561015f57600080fd5b506100c0600435610217565b34801561017757600080fd5b506100c0610233565b34801561018c57600080fd5b5061013a60043561023e565b3480156101a457600080fd5b506100c061024a565b3480156101b957600080fd5b506100c0610250565b60006101d582666a94d74f430000610258565b92915050565b600181565b600281565b66470de4df82000081565b7f95482babc4e32de6c4dc3910ee7ae62c8e427efde6bc4e9ce0d6d93e24c3932360019091565b60006101d58266470de4df820000670de0b6b3a7640000610274565b666a94d74f43000081565b60028104919082900390565b61384081565b630784ce0081565b600061026d8383670de0b6b3a7640000610274565b9392505050565b60006102896102838585610291565b836102b5565b949350505050565b60008282028315806102ad57508284828115156102aa57fe5b04145b151561026d57fe5b6000816102c584600283046102d6565b8115156102ce57fe5b049392505050565b60008282018381101561026d57fe00a165627a7a72305820a1ed6c6fbec699704599b9e6d0035949fb141565e9c5ade54248e4a66230accd0029"
}