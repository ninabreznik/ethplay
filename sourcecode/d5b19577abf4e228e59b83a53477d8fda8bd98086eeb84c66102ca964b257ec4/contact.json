{
  "address": "0x9653cfd0865ad8313bea2f0c2ec0584bfd05115b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "FuturXE",
  "contractName": "FuturXe",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-07-01\n*/\n\npragma solidity ^0.4.2;\n\ncontract ERC20Interface {\n\n    function balanceOf(address _owner) constant returns (uint256 balance);\n    function transfer(address _to, uint256 _value) returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n    function approve(address _spender, uint256 _value) returns (bool success);\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n\n    // Triggered when tokens are transferred.\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n    // Triggered whenever approve(address _spender, uint256 _value) is called.\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n}\n\ncontract Owner {\n    //For storing the owner address\n    address public owner;\n\n    //Constructor for assign a address for owner property(It will be address who deploy the contract) \n    function Owner() {\n        owner = msg.sender;\n    }\n\n    //This is modifier (a special function) which will execute before the function execution on which it applied \n    modifier onlyOwner() {\n        if(msg.sender != owner) throw;\n        //This statement replace with the code of fucntion on which modifier is applied\n        _;\n    }\n    //Here is the example of modifier this function code replace _; statement of modifier \n    function transferOwnership(address new_owner) onlyOwner {\n        owner = new_owner;\n    }\n}\n\ncontract FuturXe is ERC20Interface,Owner {\n\n    //Common information about coin\n    string  public name;\n    string  public symbol;\n    uint8   public decimals;\n    uint256 public totalSupply;\n    \n    //Balance property which should be always associate with an address\n    mapping(address => uint256) balances;\n    //frozenAccount property which should be associate with an address\n    mapping (address => bool) public frozenAccount;\n    // Owner of account approves the transfer of an amount to another account\n    mapping(address => mapping (address => uint256)) allowed;\n    \n    //These generates a public event on the blockchain that will notify clients\n    event FrozenFunds(address target, bool frozen);\n    \n    //Construtor for initial supply (The address who deployed the contract will get it) and important information\n    function FuturXe(uint256 initial_supply, string _name, string _symbol, uint8 _decimal) {\n        balances[msg.sender]  = initial_supply;\n        name                  = _name;\n        symbol                = _symbol;\n        decimals              = _decimal;\n        totalSupply           = initial_supply;\n    }\n\n    // What is the balance of a particular account?\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    //Function for transer the coin from one address to another\n    function transfer(address to, uint value) returns (bool success) {\n\n        //checking account is freeze or not\n        if (frozenAccount[msg.sender]) return false;\n\n        //checking the sender should have enough coins\n        if(balances[msg.sender] < value) return false;\n        //checking for overflows\n        if(balances[to] + value < balances[to]) return false;\n        \n        //substracting the sender balance\n        balances[msg.sender] -= value;\n        //adding the reciever balance\n        balances[to] += value;\n        \n        // Notify anyone listening that this transfer took place\n        Transfer(msg.sender, to, value);\n\n        return true;\n    }\n\n\n    //Function for transer the coin from one address to another\n    function transferFrom(address from, address to, uint value) returns (bool success) {\n\n        //checking account is freeze or not\n        if (frozenAccount[msg.sender]) return false;\n\n        //checking the from should have enough coins\n        if(balances[from] < value) return false;\n\n        //checking for allowance\n        if( allowed[from][msg.sender] >= value ) return false;\n\n        //checking for overflows\n        if(balances[to] + value < balances[to]) return false;\n        \n        balances[from] -= value;\n        allowed[from][msg.sender] -= value;\n        balances[to] += value;\n        \n        // Notify anyone listening that this transfer took place\n        Transfer(from, to, value);\n\n        return true;\n    }\n\n    //\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    //\n    function approve(address _spender, uint256 _amount) returns (bool success) {\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n    \n    //\n    function mintToken(address target, uint256 mintedAmount) onlyOwner{\n        balances[target] += mintedAmount;\n        totalSupply += mintedAmount;\n        \n        Transfer(0,owner,mintedAmount);\n        Transfer(owner,target,mintedAmount);\n    }\n\n    //\n    function freezeAccount(address target, bool freeze) onlyOwner {\n        frozenAccount[target] = freeze;\n        FrozenFunds(target, freeze);\n    }\n\n    //\n    function changeName(string _name) onlyOwner {\n        name = _name;\n    }\n\n    //\n    function changeSymbol(string _symbol) onlyOwner {\n        symbol = _symbol;\n    }\n\n    //\n    function changeDecimals(uint8 _decimals) onlyOwner {\n        decimals = _decimals;\n    }\n}",
  "bytecode": "6060604052341561000c57fe5b604051610d45380380610d458339810160409081528151602083015191830151606084015191939283019201905b5b60008054600160a060020a03191633600160a060020a03161790555b600160a060020a0333166000908152600560209081526040909120859055835161008791600191908601906100ba565b50815161009b9060029060208501906100ba565b506003805460ff191660ff831617905560048490555b5050505061015a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100fb57805160ff1916838001178555610128565b82800160010185558215610128579182015b8281111561012857825182559160200191906001019061010d565b5b50610135929150610139565b5090565b61015791905b80821115610135576000815560010161013f565b5090565b90565b610bdc806101696000396000f300606060405236156100ee5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100f0578063095ea7b31461018057806318160ddd146101b357806323b872dd146101d5578063313ce5671461020e5780635353a2d81461023457806370a082311461028c57806379c65068146102ba5780638da5cb5b146102db57806395d89b4114610307578063a3895fff14610397578063a9059cbb146103ef578063b414d4b614610422578063c112dfa314610452578063dd62ed3e1461046a578063e724529c1461049e578063f2fde38b146104c1575bfe5b34156100f857fe5b6101006104df565b604080516020808252835181830152835191928392908301918501908083838215610146575b80518252602083111561014657601f199092019160209182019101610126565b505050905090810190601f1680156101725780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561018857fe5b61019f600160a060020a036004351660243561056c565b604080519115158252519081900360200190f35b34156101bb57fe5b6101c36105d7565b60408051918252519081900360200190f35b34156101dd57fe5b61019f600160a060020a03600435811690602435166044356105dd565b604080519115158252519081900360200190f35b341561021657fe5b61021e610708565b6040805160ff9092168252519081900360200190f35b341561023c57fe5b61028a600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284375094965061071195505050505050565b005b341561029457fe5b6101c3600160a060020a0360043516610746565b60408051918252519081900360200190f35b34156102c257fe5b61028a600160a060020a0360043516602435610765565b005b34156102e357fe5b6102eb610809565b60408051600160a060020a039092168252519081900360200190f35b341561030f57fe5b610100610818565b604080516020808252835181830152835191928392908301918501908083838215610146575b80518252602083111561014657601f199092019160209182019101610126565b505050905090810190601f1680156101725780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561039f57fe5b61028a600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437509496506108a395505050505050565b005b34156103f757fe5b61019f600160a060020a03600435166024356108d8565b604080519115158252519081900360200190f35b341561042a57fe5b61019f600160a060020a03600435166109b3565b604080519115158252519081900360200190f35b341561045a57fe5b61028a60ff600435166109c8565b005b341561047257fe5b6101c3600160a060020a03600435811690602435166109f8565b60408051918252519081900360200190f35b34156104a657fe5b61028a600160a060020a03600435166024351515610a25565b005b34156104c957fe5b61028a600160a060020a0360043516610aa7565b005b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105645780601f1061053957610100808354040283529160200191610564565b820191906000526020600020905b81548152906001019060200180831161054757829003601f168201915b505050505081565b600160a060020a03338116600081815260076020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b60045481565b600160a060020a03331660009081526006602052604081205460ff161561060657506000610701565b600160a060020a0384166000908152600560205260409020548290101561062f57506000610701565b600160a060020a038085166000908152600760209081526040808320339094168352929052205482901061066557506000610701565b600160a060020a038316600090815260056020526040902054828101101561068f57506000610701565b600160a060020a0380851660008181526005602081815260408084208054899003905560078252808420338716855282528084208054899003905594881680845291815291849020805487019055835186815293519093600080516020610b9183398151915292908290030190a35060015b9392505050565b60035460ff1681565b60005433600160a060020a0390811691161461072d5760006000fd5b8051610740906001906020840190610af0565b505b5b50565b600160a060020a0381166000908152600560205260409020545b919050565b60005433600160a060020a039081169116146107815760006000fd5b600160a060020a0380831660009081526005602090815260408083208054860190556004805486019055825481518681529151941693600080516020610b91833981519152929181900390910190a3600054604080518381529051600160a060020a03808616931691600080516020610b91833981519152919081900360200190a35b5b5050565b600054600160a060020a031681565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156105645780601f1061053957610100808354040283529160200191610564565b820191906000526020600020905b81548152906001019060200180831161054757829003601f168201915b505050505081565b60005433600160a060020a039081169116146108bf5760006000fd5b8051610740906002906020840190610af0565b505b5b50565b600160a060020a03331660009081526006602052604081205460ff1615610901575060006105d1565b600160a060020a0333166000908152600560205260409020548290101561092a575060006105d1565b600160a060020a0383166000908152600560205260409020548281011015610954575060006105d1565b600160a060020a0333811660008181526005602090815260408083208054889003905593871680835291849020805487019055835186815293519193600080516020610b91833981519152929081900390910190a35060015b92915050565b60066020526000908152604090205460ff1681565b60005433600160a060020a039081169116146109e45760006000fd5b6003805460ff191660ff83161790555b5b50565b600160a060020a038083166000908152600760209081526040808320938516835292905220545b92915050565b60005433600160a060020a03908116911614610a415760006000fd5b600160a060020a038216600081815260066020908152604091829020805460ff191685151590811790915582519384529083015280517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a59281900390910190a15b5b5050565b60005433600160a060020a03908116911614610ac35760006000fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610b3157805160ff1916838001178555610b5e565b82800160010185558215610b5e579182015b82811115610b5e578251825591602001919060010190610b43565b5b50610b6b929150610b6f565b5090565b610b8d91905b80821115610b6b5760008155600101610b75565b5090565b905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820345b2b8977d48c3f97b5dd6d01c29154096f5cd6d1fa4fa9344ddd675344a5830029000000000000000000000000000000000000000000000000001dd7c1681d0000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000007467574757258450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034658450000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000001dd7c1681d0000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000007467574757258450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034658450000000000000000000000000000000000000000000000000000000000"
}