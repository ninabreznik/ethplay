{
  "address": "0x59ca30aaf1533ef40ba5be7ddea99119a5849f52",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ClinicAllCrowdsale",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-18\n*/\n\npragma solidity ^0.4.24;\n\n// File: node_modules\\zeppelin-solidity\\contracts\\math\\SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\SafeERC20.sol\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    require(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(\n    ERC20 token,\n    address from,\n    address to,\n    uint256 value\n  )\n    internal\n  {\n    require(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    require(token.approve(spender, value));\n  }\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\crowdsale\\Crowdsale.sol\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale,\n * allowing investors to purchase tokens with ether. This contract implements\n * such functionality in its most fundamental form and can be extended to provide additional\n * functionality and/or custom behavior.\n * The external interface represents the basic interface for purchasing tokens, and conform\n * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n * the methods to add functionality. Consider using 'super' where appropiate to concatenate\n * behavior.\n */\ncontract Crowdsale {\n  using SafeMath for uint256;\n  using SafeERC20 for ERC20;\n\n  // The token being sold\n  ERC20 public token;\n\n  // Address where funds are collected\n  address public wallet;\n\n  // How many token units a buyer gets per wei.\n  // The rate is the conversion between wei and the smallest and indivisible token unit.\n  // So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK\n  // 1 wei will give you 1 unit, or 0.001 TOK.\n  uint256 public rate;\n\n  // Amount of wei raised\n  uint256 public weiRaised;\n\n  /**\n   * Event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */\n  event TokenPurchase(\n    address indexed purchaser,\n    address indexed beneficiary,\n    uint256 value,\n    uint256 amount\n  );\n\n  /**\n   * @param _rate Number of token units a buyer gets per wei\n   * @param _wallet Address where collected funds will be forwarded to\n   * @param _token Address of the token being sold\n   */\n  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n    require(_rate > 0);\n    require(_wallet != address(0));\n    require(_token != address(0));\n\n    rate = _rate;\n    wallet = _wallet;\n    token = _token;\n  }\n\n  // -----------------------------------------\n  // Crowdsale external interface\n  // -----------------------------------------\n\n  /**\n   * @dev fallback function ***DO NOT OVERRIDE***\n   */\n  function () external payable {\n    buyTokens(msg.sender);\n  }\n\n  /**\n   * @dev low level token purchase ***DO NOT OVERRIDE***\n   * @param _beneficiary Address performing the token purchase\n   */\n  function buyTokens(address _beneficiary) public payable {\n\n    uint256 weiAmount = msg.value;\n    _preValidatePurchase(_beneficiary, weiAmount);\n\n    // calculate token amount to be created\n    uint256 tokens = _getTokenAmount(weiAmount);\n\n    // update state\n    weiRaised = weiRaised.add(weiAmount);\n\n    _processPurchase(_beneficiary, tokens);\n    emit TokenPurchase(\n      msg.sender,\n      _beneficiary,\n      weiAmount,\n      tokens\n    );\n\n    _updatePurchasingState(_beneficiary, weiAmount);\n\n    _forwardFunds();\n    _postValidatePurchase(_beneficiary, weiAmount);\n  }\n\n  // -----------------------------------------\n  // Internal interface (extensible)\n  // -----------------------------------------\n\n  /**\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n   * @param _beneficiary Address performing the token purchase\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _preValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    require(_beneficiary != address(0));\n    require(_weiAmount != 0);\n  }\n\n  /**\n   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n   * @param _beneficiary Address performing the token purchase\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _postValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    // optional override\n  }\n\n  /**\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n   * @param _beneficiary Address performing the token purchase\n   * @param _tokenAmount Number of tokens to be emitted\n   */\n  function _deliverTokens(\n    address _beneficiary,\n    uint256 _tokenAmount\n  )\n    internal\n  {\n    token.safeTransfer(_beneficiary, _tokenAmount);\n  }\n\n  /**\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n   * @param _beneficiary Address receiving the tokens\n   * @param _tokenAmount Number of tokens to be purchased\n   */\n  function _processPurchase(\n    address _beneficiary,\n    uint256 _tokenAmount\n  )\n    internal\n  {\n    _deliverTokens(_beneficiary, _tokenAmount);\n  }\n\n  /**\n   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n   * @param _beneficiary Address receiving the tokens\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _updatePurchasingState(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    // optional override\n  }\n\n  /**\n   * @dev Override to extend the way in which ether is converted to tokens.\n   * @param _weiAmount Value in wei to be converted into tokens\n   * @return Number of tokens that can be purchased with the specified _weiAmount\n   */\n  function _getTokenAmount(uint256 _weiAmount)\n    internal view returns (uint256)\n  {\n    return _weiAmount.mul(rate);\n  }\n\n  /**\n   * @dev Determines how ETH is stored/forwarded on purchases.\n   */\n  function _forwardFunds() internal {\n    wallet.transfer(msg.value);\n  }\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\ownership\\Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\crowdsale\\validation\\TimedCrowdsale.sol\n\n/**\n * @title TimedCrowdsale\n * @dev Crowdsale accepting contributions only within a time frame.\n */\ncontract TimedCrowdsale is Crowdsale {\n  using SafeMath for uint256;\n\n  uint256 public openingTime;\n  uint256 public closingTime;\n\n  /**\n   * @dev Reverts if not in crowdsale time range.\n   */\n  modifier onlyWhileOpen {\n    // solium-disable-next-line security/no-block-members\n    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n    _;\n  }\n\n  /**\n   * @dev Constructor, takes crowdsale opening and closing times.\n   * @param _openingTime Crowdsale opening time\n   * @param _closingTime Crowdsale closing time\n   */\n  constructor(uint256 _openingTime, uint256 _closingTime) public {\n    // solium-disable-next-line security/no-block-members\n    require(_openingTime >= block.timestamp);\n    require(_closingTime >= _openingTime);\n\n    openingTime = _openingTime;\n    closingTime = _closingTime;\n  }\n\n  /**\n   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n   * @return Whether crowdsale period has elapsed\n   */\n  function hasClosed() public view returns (bool) {\n    // solium-disable-next-line security/no-block-members\n    return block.timestamp > closingTime;\n  }\n\n  /**\n   * @dev Extend parent behavior requiring to be within contributing period\n   * @param _beneficiary Token purchaser\n   * @param _weiAmount Amount of wei contributed\n   */\n  function _preValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n    onlyWhileOpen\n  {\n    super._preValidatePurchase(_beneficiary, _weiAmount);\n  }\n\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\crowdsale\\distribution\\FinalizableCrowdsale.sol\n\n/**\n * @title FinalizableCrowdsale\n * @dev Extension of Crowdsale where an owner can do extra work\n * after finishing.\n */\ncontract FinalizableCrowdsale is TimedCrowdsale, Ownable {\n  using SafeMath for uint256;\n\n  bool public isFinalized = false;\n\n  event Finalized();\n\n  /**\n   * @dev Must be called after crowdsale ends, to do some extra finalization\n   * work. Calls the contract's finalization function.\n   */\n  function finalize() onlyOwner public {\n    require(!isFinalized);\n    require(hasClosed());\n\n    finalization();\n    emit Finalized();\n\n    isFinalized = true;\n  }\n\n  /**\n   * @dev Can be overridden to add finalization logic. The overriding function\n   * should call super.finalization() to ensure the chain of finalization is\n   * executed entirely.\n   */\n  function finalization() internal {\n  }\n\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\MintableToken.sol\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  modifier hasMintPermission() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    hasMintPermission\n    canMint\n    public\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\crowdsale\\emission\\MintedCrowdsale.sol\n\n/**\n * @title MintedCrowdsale\n * @dev Extension of Crowdsale contract whose tokens are minted in each purchase.\n * Token ownership should be transferred to MintedCrowdsale for minting.\n */\ncontract MintedCrowdsale is Crowdsale {\n\n  /**\n   * @dev Overrides delivery by minting tokens upon purchase.\n   * @param _beneficiary Token purchaser\n   * @param _tokenAmount Number of tokens to be minted\n   */\n  function _deliverTokens(\n    address _beneficiary,\n    uint256 _tokenAmount\n  )\n    internal\n  {\n    require(MintableToken(token).mint(_beneficiary, _tokenAmount));\n  }\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\CappedToken.sol\n\n/**\n * @title Capped token\n * @dev Mintable token with a token cap.\n */\ncontract CappedToken is MintableToken {\n\n  uint256 public cap;\n\n  constructor(uint256 _cap) public {\n    require(_cap > 0);\n    cap = _cap;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    public\n    returns (bool)\n  {\n    require(totalSupply_.add(_amount) <= cap);\n\n    return super.mint(_to, _amount);\n  }\n\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\math\\Math.sol\n\n/**\n * @title Math\n * @dev Assorted math operations\n */\nlibrary Math {\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\payment\\Escrow.sol\n\n/**\n * @title Escrow\n * @dev Base escrow contract, holds funds destinated to a payee until they\n * withdraw them. The contract that uses the escrow as its payment method\n * should be its owner, and provide public methods redirecting to the escrow's\n * deposit and withdraw.\n */\ncontract Escrow is Ownable {\n  using SafeMath for uint256;\n\n  event Deposited(address indexed payee, uint256 weiAmount);\n  event Withdrawn(address indexed payee, uint256 weiAmount);\n\n  mapping(address => uint256) private deposits;\n\n  function depositsOf(address _payee) public view returns (uint256) {\n    return deposits[_payee];\n  }\n\n  /**\n  * @dev Stores the sent amount as credit to be withdrawn.\n  * @param _payee The destination address of the funds.\n  */\n  function deposit(address _payee) public onlyOwner payable {\n    uint256 amount = msg.value;\n    deposits[_payee] = deposits[_payee].add(amount);\n\n    emit Deposited(_payee, amount);\n  }\n\n  /**\n  * @dev Withdraw accumulated balance for a payee.\n  * @param _payee The address whose funds will be withdrawn and transferred to.\n  */\n  function withdraw(address _payee) public onlyOwner {\n    uint256 payment = deposits[_payee];\n    assert(address(this).balance >= payment);\n\n    deposits[_payee] = 0;\n\n    _payee.transfer(payment);\n\n    emit Withdrawn(_payee, payment);\n  }\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\payment\\ConditionalEscrow.sol\n\n/**\n * @title ConditionalEscrow\n * @dev Base abstract escrow to only allow withdrawal if a condition is met.\n */\ncontract ConditionalEscrow is Escrow {\n  /**\n  * @dev Returns whether an address is allowed to withdraw their funds. To be\n  * implemented by derived contracts.\n  * @param _payee The destination address of the funds.\n  */\n  function withdrawalAllowed(address _payee) public view returns (bool);\n\n  function withdraw(address _payee) public {\n    require(withdrawalAllowed(_payee));\n    super.withdraw(_payee);\n  }\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\payment\\RefundEscrow.sol\n\n/**\n * @title RefundEscrow\n * @dev Escrow that holds funds for a beneficiary, deposited from multiple parties.\n * The contract owner may close the deposit period, and allow for either withdrawal\n * by the beneficiary, or refunds to the depositors.\n */\ncontract RefundEscrow is Ownable, ConditionalEscrow {\n  enum State { Active, Refunding, Closed }\n\n  event Closed();\n  event RefundsEnabled();\n\n  State public state;\n  address public beneficiary;\n\n  /**\n   * @dev Constructor.\n   * @param _beneficiary The beneficiary of the deposits.\n   */\n  constructor(address _beneficiary) public {\n    require(_beneficiary != address(0));\n    beneficiary = _beneficiary;\n    state = State.Active;\n  }\n\n  /**\n   * @dev Stores funds that may later be refunded.\n   * @param _refundee The address funds will be sent to if a refund occurs.\n   */\n  function deposit(address _refundee) public payable {\n    require(state == State.Active);\n    super.deposit(_refundee);\n  }\n\n  /**\n   * @dev Allows for the beneficiary to withdraw their funds, rejecting\n   * further deposits.\n   */\n  function close() public onlyOwner {\n    require(state == State.Active);\n    state = State.Closed;\n    emit Closed();\n  }\n\n  /**\n   * @dev Allows for refunds to take place, rejecting further deposits.\n   */\n  function enableRefunds() public onlyOwner {\n    require(state == State.Active);\n    state = State.Refunding;\n    emit RefundsEnabled();\n  }\n\n  /**\n   * @dev Withdraws the beneficiary's funds.\n   */\n  function beneficiaryWithdraw() public {\n    require(state == State.Closed);\n    beneficiary.transfer(address(this).balance);\n  }\n\n  /**\n   * @dev Returns whether refundees can withdraw their deposits (be refunded).\n   */\n  function withdrawalAllowed(address _payee) public view returns (bool) {\n    return state == State.Refunding;\n  }\n}\n\n// File: contracts\\ClinicAllRefundEscrow.sol\n\n/**\n * @title ClinicAllRefundEscrow\n * @dev Escrow that holds funds for a beneficiary, deposited from multiple parties.\n * The contract owner may close the deposit period, and allow for either withdrawal\n * by the beneficiary, or refunds to the depositors.\n */\ncontract ClinicAllRefundEscrow is RefundEscrow {\n  using Math for uint256;\n\n  struct RefundeeRecord {\n    bool isRefunded;\n    uint256 index;\n  }\n\n  mapping(address => RefundeeRecord) public refundees;\n  address[] public refundeesList;\n\n  event Deposited(address indexed payee, uint256 weiAmount);\n  event Withdrawn(address indexed payee, uint256 weiAmount);\n\n  mapping(address => uint256) public deposits;\n  mapping(address => uint256) public beneficiaryDeposits;\n\n  // Amount of wei deposited by beneficiary\n  uint256 public beneficiaryDepositedAmount;\n\n  // Amount of wei deposited by investors to CrowdSale\n  uint256 public investorsDepositedToCrowdSaleAmount;\n\n  /**\n   * @dev Constructor.\n   * @param _beneficiary The beneficiary of the deposits.\n   */\n  constructor(address _beneficiary)\n  RefundEscrow(_beneficiary)\n  public {\n  }\n\n  function depositsOf(address _payee) public view returns (uint256) {\n    return deposits[_payee];\n  }\n\n  function beneficiaryDepositsOf(address _payee) public view returns (uint256) {\n    return beneficiaryDeposits[_payee];\n  }\n\n  /**\n   * Internal. Is being user by parent classes, just for keeping the interface.\n   * @dev Stores funds that may later be refunded.\n   * @param _refundee The address funds will be sent to if a refund occurs.\n   */\n  function deposit(address _refundee) public payable {\n    uint256 amount = msg.value;\n    beneficiaryDeposits[_refundee] = beneficiaryDeposits[_refundee].add(amount);\n    beneficiaryDepositedAmount = beneficiaryDepositedAmount.add(amount);\n  }\n\n  /**\n * @dev Stores funds that may later be refunded.\n * @param _refundee The address funds will be sent to if a refund occurs.\n * @param _value The amount of funds will be sent to if a refund occurs.\n */\n  function depositFunds(address _refundee, uint256 _value) public onlyOwner {\n    require(state == State.Active, \"Funds deposition is possible only in the Active state.\");\n\n    uint256 amount = _value;\n    deposits[_refundee] = deposits[_refundee].add(amount);\n    investorsDepositedToCrowdSaleAmount = investorsDepositedToCrowdSaleAmount.add(amount);\n\n    emit Deposited(_refundee, amount);\n\n    RefundeeRecord storage _data = refundees[_refundee];\n    _data.isRefunded = false;\n\n    if (_data.index == uint256(0)) {\n      refundeesList.push(_refundee);\n      _data.index = refundeesList.length.sub(1);\n    }\n  }\n\n  /**\n  * @dev Allows for the beneficiary to withdraw their funds, rejecting\n  * further deposits.\n  */\n  function close() public onlyOwner {\n    super.close();\n  }\n\n  function withdraw(address _payee) public onlyOwner {\n    require(state == State.Refunding, \"Funds withdrawal is possible only in the Refunding state.\");\n    require(depositsOf(_payee) > 0, \"An investor should have non-negative deposit for withdrawal.\");\n\n    RefundeeRecord storage _data = refundees[_payee];\n    require(_data.isRefunded == false, \"An investor should not be refunded.\");\n\n    uint256 payment = deposits[_payee];\n    assert(address(this).balance >= payment);\n\n    deposits[_payee] = 0;\n\n    investorsDepositedToCrowdSaleAmount = investorsDepositedToCrowdSaleAmount.sub(payment);\n\n    _payee.transfer(payment);\n\n    emit Withdrawn(_payee, payment);\n\n    _data.isRefunded = true;\n\n    removeRefundeeByIndex(_data.index);\n  }\n\n  /**\n  @dev Owner can do manual refund here if investore has \"BAD\" money\n  @param _payee address of investor that needs to refund with next manual ETH sending\n  */\n  function manualRefund(address _payee) public onlyOwner {\n    uint256 payment = deposits[_payee];\n    RefundeeRecord storage _data = refundees[_payee];\n\n    investorsDepositedToCrowdSaleAmount = investorsDepositedToCrowdSaleAmount.sub(payment);\n    deposits[_payee] = 0;\n    _data.isRefunded = true;\n\n    removeRefundeeByIndex(_data.index);\n  }\n\n  /**\n  * @dev Remove refundee referenced index from the internal list\n  * @param _indexToDelete An index in an array for deletion\n  */\n  function removeRefundeeByIndex(uint256 _indexToDelete) private {\n    if ((refundeesList.length > 0) && (_indexToDelete < refundeesList.length)) {\n      uint256 _lastIndex = refundeesList.length.sub(1);\n      refundeesList[_indexToDelete] = refundeesList[_lastIndex];\n      refundeesList.length--;\n    }\n  }\n  /**\n  * @dev Get refundee list length\n  */\n  function refundeesListLength() public onlyOwner view returns (uint256) {\n    return refundeesList.length;\n  }\n\n  /**\n  * @dev Auto refund\n  * @param _txFee The cost of executing refund code\n  */\n  function withdrawChunk(uint256 _txFee, uint256 _chunkLength) public onlyOwner returns (uint256, address[]) {\n    require(state == State.Refunding, \"Funds withdrawal is possible only in the Refunding state.\");\n\n    uint256 _refundeesCount = refundeesList.length;\n    require(_chunkLength >= _refundeesCount);\n    require(_txFee > 0, \"Transaction fee should be above zero.\");\n    require(_refundeesCount > 0, \"List of investors should not be empty.\");\n    uint256 _weiRefunded = 0;\n    require(address(this).balance > (_chunkLength.mul(_txFee)), \"Account's ballance should allow to pay all tx fees.\");\n    address[] memory _refundeesListCopy = new address[](_chunkLength);\n\n    uint256 i;\n    for (i = 0; i < _chunkLength; i++) {\n      address _refundee = refundeesList[i];\n      RefundeeRecord storage _data = refundees[_refundee];\n      if (_data.isRefunded == false) {\n        if (depositsOf(_refundee) > _txFee) {\n          uint256 _deposit = depositsOf(_refundee);\n          if (_deposit > _txFee) {\n            _weiRefunded = _weiRefunded.add(_deposit);\n            uint256 _paymentWithoutTxFee = _deposit.sub(_txFee);\n            _refundee.transfer(_paymentWithoutTxFee);\n            emit Withdrawn(_refundee, _paymentWithoutTxFee);\n            _data.isRefunded = true;\n            _refundeesListCopy[i] = _refundee;\n          }\n        }\n      }\n    }\n\n    for (i = 0; i < _chunkLength; i++) {\n      if (address(0) != _refundeesListCopy[i]) {\n        RefundeeRecord storage _dataCleanup = refundees[_refundeesListCopy[i]];\n        require(_dataCleanup.isRefunded == true, \"Investors in this list should be refunded.\");\n        removeRefundeeByIndex(_dataCleanup.index);\n      }\n    }\n\n    return (_weiRefunded, _refundeesListCopy);\n  }\n\n  /**\n  * @dev Auto refund\n  * @param _txFee The cost of executing refund code\n  */\n  function withdrawEverything(uint256 _txFee) public onlyOwner returns (uint256, address[]) {\n    require(state == State.Refunding, \"Funds withdrawal is possible only in the Refunding state.\");\n    return withdrawChunk(_txFee, refundeesList.length);\n  }\n\n  /**\n  * @dev Withdraws all beneficiary's funds.\n  */\n  function beneficiaryWithdraw() public {\n    //This methods is intentionally is overriden here to prevent uncontrollable funds transferring to a beneficiary. Only owner should be able to do this\n    //require(state == State.Closed);\n    //beneficiary.transfer(address(this).balance);\n  }\n\n  /**\n  * @dev Withdraws the part of beneficiary's funds.\n  */\n  function beneficiaryWithdrawChunk(uint256 _value) public onlyOwner {\n    require(_value <= address(this).balance, \"Withdraw part can not be more than current balance\");\n    beneficiaryDepositedAmount = beneficiaryDepositedAmount.sub(_value);\n    beneficiary.transfer(_value);\n  }\n\n  /**\n  * @dev Withdraws all beneficiary's funds.\n  */\n  function beneficiaryWithdrawAll() public onlyOwner {\n    uint256 _value = address(this).balance;\n    beneficiaryDepositedAmount = beneficiaryDepositedAmount.sub(_value);\n    beneficiary.transfer(_value);\n  }\n\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\lifecycle\\TokenDestructible.sol\n\n/**\n * @title TokenDestructible:\n * @author Remco Bloemen <[email protected]о─.com>\n * @dev Base contract that can be destroyed by owner. All funds in contract including\n * listed tokens will be sent to the owner.\n */\ncontract TokenDestructible is Ownable {\n\n  constructor() public payable { }\n\n  /**\n   * @notice Terminate contract and refund to owner\n   * @param tokens List of addresses of ERC20 or ERC20Basic token contracts to\n   refund.\n   * @notice The called token contracts could try to re-enter this contract. Only\n   supply token contracts you trust.\n   */\n  function destroy(address[] tokens) onlyOwner public {\n\n    // Transfer tokens to owner\n    for (uint256 i = 0; i < tokens.length; i++) {\n      ERC20Basic token = ERC20Basic(tokens[i]);\n      uint256 balance = token.balanceOf(this);\n      token.transfer(owner, balance);\n    }\n\n    // Transfer Eth to owner and terminate contract\n    selfdestruct(owner);\n  }\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\BurnableToken.sol\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\DetailedERC20.sol\n\n/**\n * @title DetailedERC20 token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract DetailedERC20 is ERC20 {\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  constructor(string _name, string _symbol, uint8 _decimals) public {\n    name = _name;\n    symbol = _symbol;\n    decimals = _decimals;\n  }\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\lifecycle\\Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\PausableToken.sol\n\n/**\n * @title Pausable token\n * @dev StandardToken modified with pausable transfers.\n **/\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(\n    address _spender,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\n// File: contracts\\TransferableToken.sol\n\n/**\n * @title TransferableToken\n * @dev Base contract which allows to implement transfer for token.\n */\ncontract TransferableToken is Ownable {\n  event TransferOn();\n  event TransferOff();\n\n  bool public transferable = false;\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not transferable.\n   */\n  modifier whenNotTransferable() {\n    require(!transferable);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is transferable.\n   */\n  modifier whenTransferable() {\n    require(transferable);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to enable transfers\n   */\n  function transferOn() onlyOwner whenNotTransferable public {\n    transferable = true;\n    emit TransferOn();\n  }\n\n  /**\n   * @dev called by the owner to disable transfers\n   */\n  function transferOff() onlyOwner whenTransferable public {\n    transferable = false;\n    emit TransferOff();\n  }\n\n}\n\n// File: contracts\\ClinicAllToken.sol\n\n//PausableToken, TokenDestructible\ncontract ClinicAllToken is MintableToken, DetailedERC20, CappedToken, BurnableToken, TransferableToken {\n  constructor\n  (\n    string _name,\n    string _symbol,\n    uint8 _decimals,\n    uint256 _cap\n  )\n  DetailedERC20(_name, _symbol, _decimals)\n  CappedToken(_cap)\n  public\n  {\n\n  }\n\n  /*/\n  *  Refund event when ICO didn't pass soft cap and we refund ETH to investors + burn ERC-20 tokens from investors balances\n  /*/\n  function burnAfterRefund(address _who) public onlyOwner {\n    uint256 _value = balances[_who];\n    _burn(_who, _value);\n  }\n\n  /*/\n  *  Allow transfers only if token is transferable\n  /*/\n  function transfer(\n    address _to,\n    uint256 _value\n  )\n  public\n  whenTransferable\n  returns (bool)\n  {\n    return super.transfer(_to, _value);\n  }\n\n  /*/\n  *  Allow transfers only if token is transferable\n  /*/\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n  public\n  whenTransferable\n  returns (bool)\n  {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function transferToPrivateInvestor(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n  public\n  onlyOwner\n  returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  function burnPrivateSale(address privateSaleWallet, uint256 _value) public onlyOwner {\n    _burn(privateSaleWallet, _value);\n  }\n\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\ownership\\rbac\\Roles.sol\n\n/**\n * @title Roles\n * @author Francisco Giordano (@frangio)\n * @dev Library for managing addresses assigned to a Role.\n * See RBAC.sol for example usage.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an address access to this role\n   */\n  function add(Role storage role, address addr)\n    internal\n  {\n    role.bearer[addr] = true;\n  }\n\n  /**\n   * @dev remove an address' access to this role\n   */\n  function remove(Role storage role, address addr)\n    internal\n  {\n    role.bearer[addr] = false;\n  }\n\n  /**\n   * @dev check if an address has this role\n   * // reverts\n   */\n  function check(Role storage role, address addr)\n    view\n    internal\n  {\n    require(has(role, addr));\n  }\n\n  /**\n   * @dev check if an address has this role\n   * @return bool\n   */\n  function has(Role storage role, address addr)\n    view\n    internal\n    returns (bool)\n  {\n    return role.bearer[addr];\n  }\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\ownership\\rbac\\RBAC.sol\n\n/**\n * @title RBAC (Role-Based Access Control)\n * @author Matt Condon (@Shrugs)\n * @dev Stores and provides setters and getters for roles and addresses.\n * Supports unlimited numbers of roles and addresses.\n * See //contracts/mocks/RBACMock.sol for an example of usage.\n * This RBAC method uses strings to key roles. It may be beneficial\n * for you to write your own implementation of this interface using Enums or similar.\n * It's also recommended that you define constants in the contract, like ROLE_ADMIN below,\n * to avoid typos.\n */\ncontract RBAC {\n  using Roles for Roles.Role;\n\n  mapping (string => Roles.Role) private roles;\n\n  event RoleAdded(address indexed operator, string role);\n  event RoleRemoved(address indexed operator, string role);\n\n  /**\n   * @dev reverts if addr does not have role\n   * @param _operator address\n   * @param _role the name of the role\n   * // reverts\n   */\n  function checkRole(address _operator, string _role)\n    view\n    public\n  {\n    roles[_role].check(_operator);\n  }\n\n  /**\n   * @dev determine if addr has role\n   * @param _operator address\n   * @param _role the name of the role\n   * @return bool\n   */\n  function hasRole(address _operator, string _role)\n    view\n    public\n    returns (bool)\n  {\n    return roles[_role].has(_operator);\n  }\n\n  /**\n   * @dev add a role to an address\n   * @param _operator address\n   * @param _role the name of the role\n   */\n  function addRole(address _operator, string _role)\n    internal\n  {\n    roles[_role].add(_operator);\n    emit RoleAdded(_operator, _role);\n  }\n\n  /**\n   * @dev remove a role from an address\n   * @param _operator address\n   * @param _role the name of the role\n   */\n  function removeRole(address _operator, string _role)\n    internal\n  {\n    roles[_role].remove(_operator);\n    emit RoleRemoved(_operator, _role);\n  }\n\n  /**\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\n   * @param _role the name of the role\n   * // reverts\n   */\n  modifier onlyRole(string _role)\n  {\n    checkRole(msg.sender, _role);\n    _;\n  }\n\n  /**\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\n   * @param _roles the names of the roles to scope access to\n   * // reverts\n   *\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\n   *  see: https://github.com/ethereum/solidity/issues/2467\n   */\n  // modifier onlyRoles(string[] _roles) {\n  //     bool hasAnyRole = false;\n  //     for (uint8 i = 0; i < _roles.length; i++) {\n  //         if (hasRole(msg.sender, _roles[i])) {\n  //             hasAnyRole = true;\n  //             break;\n  //         }\n  //     }\n\n  //     require(hasAnyRole);\n\n  //     _;\n  // }\n}\n\n// File: contracts\\Managed.sol\n\n/**\n * @title Managed\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\n * This simplifies the implementation of \"user permissions\".\n */\ncontract Managed is Ownable, RBAC {\n  string public constant ROLE_MANAGER = \"manager\";\n\n  /**\n  * @dev Throws if operator is not whitelisted.\n  */\n  modifier onlyManager() {\n    checkRole(msg.sender, ROLE_MANAGER);\n    _;\n  }\n\n  /**\n  * @dev set an address as a manager\n  * @param _operator address\n  * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n  */\n  function setManager(address _operator) public onlyOwner {\n    addRole(_operator, ROLE_MANAGER);\n  }\n\n  /**\n  * @dev delete an address as a manager\n  * @param _operator address\n  * @return true if the address was deleted from the whitelist, false if the address wasn't already in the whitelist\n  */\n  function removeManager(address _operator) public onlyOwner {\n    removeRole(_operator, ROLE_MANAGER);\n  }\n}\n\n// File: contracts\\Limited.sol\n\n/**\n * @title LimitedCrowdsale\n * @dev Crowdsale in which only limited number of tokens can be bought.\n */\ncontract Limited is Managed {\n  using SafeMath for uint256;\n  mapping(address => uint256) public limitsList;\n\n  /**\n  * @dev Reverts if beneficiary has no limit. Can be used when extending this contract.\n  */\n  modifier isLimited(address _payee) {\n    require(limitsList[_payee] > 0, \"An investor is limited if it has a limit.\");\n    _;\n  }\n\n\n  /**\n  * @dev Reverts if beneficiary want to buy more tokens than limit allows. Can be used when extending this contract.\n  */\n  modifier doesNotExceedLimit(address _payee, uint256 _tokenAmount, uint256 _tokenBalance, uint256 kycLimitThreshold) {\n    uint256 _newBalance = _tokenBalance.add(_tokenAmount);\n    uint256 _payeeLimit = getLimit(_payee);\n    if (_newBalance >= kycLimitThreshold/* && _payeeLimit >= kycLimitThreshold*/) {\n        //It does not make sense to validate limit if its lower than the threshold; otherwhise, a payee will hit the lower limit in attempt of buying more than kycThreshold\n        require(_newBalance <= _payeeLimit, \"An investor should not exceed its limit on buying.\");\n    }\n    _;\n  }\n\n  /**\n  * @dev Returns limits for _payee.\n  * @param _payee Address to get token limits\n  */\n  function getLimit(address _payee)\n  public view returns (uint256)\n  {\n    return limitsList[_payee];\n  }\n\n  /**\n  * @dev Adds limits to addresses.\n  * @param _payees Addresses to set limit\n  * @param _limits Limit values to set to addresses\n  */\n  function addAddressesLimits(address[] _payees, uint256[] _limits) public\n  onlyManager\n  {\n    require(_payees.length == _limits.length, \"Array sizes should be equal.\");\n    for (uint256 i = 0; i < _payees.length; i++) {\n      addLimit(_payees[i], _limits[i]);\n    }\n  }\n\n\n  /**\n  * @dev Adds limit to address.\n  * @param _payee Address to set limit\n  * @param _limit Limit value to set to address\n  */\n  function addLimit(address _payee, uint256 _limit) public\n  onlyManager\n  {\n    limitsList[_payee] = _limit;\n  }\n\n\n  /**\n  * @dev Removes single address-limit record.\n  * @param _payee Address to be removed\n  */\n  function removeLimit(address _payee) external\n  onlyManager\n  {\n    limitsList[_payee] = 0;\n  }\n\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\access\\Whitelist.sol\n\n/**\n * @title Whitelist\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\n * This simplifies the implementation of \"user permissions\".\n */\ncontract Whitelist is Ownable, RBAC {\n  string public constant ROLE_WHITELISTED = \"whitelist\";\n\n  /**\n   * @dev Throws if operator is not whitelisted.\n   * @param _operator address\n   */\n  modifier onlyIfWhitelisted(address _operator) {\n    checkRole(_operator, ROLE_WHITELISTED);\n    _;\n  }\n\n  /**\n   * @dev add an address to the whitelist\n   * @param _operator address\n   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n   */\n  function addAddressToWhitelist(address _operator)\n    onlyOwner\n    public\n  {\n    addRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev getter to determine if address is in whitelist\n   */\n  function whitelist(address _operator)\n    public\n    view\n    returns (bool)\n  {\n    return hasRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev add addresses to the whitelist\n   * @param _operators addresses\n   * @return true if at least one address was added to the whitelist,\n   * false if all addresses were already in the whitelist\n   */\n  function addAddressesToWhitelist(address[] _operators)\n    onlyOwner\n    public\n  {\n    for (uint256 i = 0; i < _operators.length; i++) {\n      addAddressToWhitelist(_operators[i]);\n    }\n  }\n\n  /**\n   * @dev remove an address from the whitelist\n   * @param _operator address\n   * @return true if the address was removed from the whitelist,\n   * false if the address wasn't in the whitelist in the first place\n   */\n  function removeAddressFromWhitelist(address _operator)\n    onlyOwner\n    public\n  {\n    removeRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev remove addresses from the whitelist\n   * @param _operators addresses\n   * @return true if at least one address was removed from the whitelist,\n   * false if all addresses weren't in the whitelist in the first place\n   */\n  function removeAddressesFromWhitelist(address[] _operators)\n    onlyOwner\n    public\n  {\n    for (uint256 i = 0; i < _operators.length; i++) {\n      removeAddressFromWhitelist(_operators[i]);\n    }\n  }\n\n}\n\n// File: contracts\\ManagedWhitelist.sol\n\n/**\n * @title ManagedWhitelist\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\n * This simplifies the implementation of \"user permissions\".\n */\ncontract ManagedWhitelist is Managed, Whitelist {\n  /**\n  * @dev add an address to the whitelist\n  * @param _operator address\n  * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n  */\n  function addAddressToWhitelist(address _operator) public onlyManager {\n    addRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n  * @dev add addresses to the whitelist\n  * @param _operators addresses\n  * @return true if at least one address was added to the whitelist,\n  * false if all addresses were already in the whitelist\n  */\n  function addAddressesToWhitelist(address[] _operators) public onlyManager {\n    for (uint256 i = 0; i < _operators.length; i++) {\n      addAddressToWhitelist(_operators[i]);\n    }\n  }\n\n  /**\n  * @dev remove an address from the whitelist\n  * @param _operator address\n  * @return true if the address was removed from the whitelist,\n  * false if the address wasn't in the whitelist in the first place\n  */\n  function removeAddressFromWhitelist(address _operator) public onlyManager {\n    removeRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n  * @dev remove addresses from the whitelist\n  * @param _operators addresses\n  * @return true if at least one address was removed from the whitelist,\n  * false if all addresses weren't in the whitelist in the first place\n  */\n  function removeAddressesFromWhitelist(address[] _operators) public onlyManager {\n    for (uint256 i = 0; i < _operators.length; i++) {\n      removeAddressFromWhitelist(_operators[i]);\n    }\n  }\n}\n\n// File: contracts\\MigratedTimedFinalizableCrowdsale.sol\n\n/**\n * @title MigratedTimedCrowdsale\n * @dev Crowdsale accepting contributions only within a time frame.\n */\ncontract MigratedTimedFinalizableCrowdsale is Crowdsale, Ownable {\n  using SafeMath for uint256;\n  bool public isFinalized = false;\n\n  event Finalized();\n\n  /**\n   * @dev Must be called after crowdsale ends, to do some extra finalization\n   * work. Calls the contract's finalization function.\n   */\n  function finalize() onlyOwner public {\n    require(!isFinalized);\n    require(hasClosed());\n\n    finalization();\n    emit Finalized();\n\n    isFinalized = true;\n  }\n\n  /**\n   * @dev Can be overridden to add finalization logic. The overriding function\n   * should call super.finalization() to ensure the chain of finalization is\n   * executed entirely.\n   */\n  function finalization() internal {\n  } \n  \n  uint256 public openingTime;\n  uint256 public closingTime;\n\n  /**\n   * @dev Reverts if not in crowdsale time range.\n   */\n  modifier onlyWhileOpen {\n    // solium-disable-next-line security/no-block-members\n    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n    _;\n  }\n\n  /**\n   * @dev Constructor, takes crowdsale opening and closing times.\n   * @param _openingTime Crowdsale opening time\n   * @param _closingTime Crowdsale closing time\n   */\n  constructor(uint256 _openingTime, uint256 _closingTime) public {\n    // solium-disable-next-line security/no-block-members\n    //require(_closingTime >= block.timestamp);\n    //require(_closingTime >= _openingTime);\n\n    openingTime = _openingTime;\n    closingTime = _closingTime;\n  }\n\n  /**\n   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n   * @return Whether crowdsale period has elapsed\n   */\n  function hasClosed() public view returns (bool) {\n    // solium-disable-next-line security/no-block-members\n    return block.timestamp > closingTime;\n  }\n\n  /**\n   * @dev Extend parent behavior requiring to be within contributing period\n   * @param _beneficiary Token purchaser\n   * @param _weiAmount Amount of wei contributed\n   */\n  function _preValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n    onlyWhileOpen\n  {\n    super._preValidatePurchase(_beneficiary, _weiAmount);\n  }\n}\n\n// File: contracts\\PrivatelyManaged.sol\n\n/**\n * @title Managed\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\n * This simplifies the implementation of \"user permissions\".\n */\ncontract PrivatelyManaged is Ownable, RBAC {\n  string public constant ROLE_PRIVATEMANAGER = \"private_manager\";\n\n  /**\n  * @dev Throws if operator is not whitelisted.\n  */\n  modifier onlyPrivateManager() {\n    checkRole(msg.sender, ROLE_PRIVATEMANAGER);\n    _;\n  }\n\n  /**\n  * @dev set an address as a private sale manager\n  * @param _operator address\n  * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n  */\n  function setPrivateManager(address _operator) public onlyOwner {\n    addRole(_operator, ROLE_PRIVATEMANAGER);\n  }\n\n  /**\n  * @dev delete an address as a private sale manager\n  * @param _operator address\n  * @return true if the address was deleted from the whitelist, false if the address wasn't already in the whitelist\n  */\n  function removePrivateManager(address _operator) public onlyOwner {\n    removeRole(_operator, ROLE_PRIVATEMANAGER);\n  }\n}\n\n// File: contracts\\ClinicAllCrowdsale.sol\n\n//import \"./../node_modules/zeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol\";\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/// @title ClinicAll crowdsale contract\n/// @dev  ClinicAll crowdsale contract\n//contract ClinicAllCrowdsale is Crowdsale, TimedCrowdsale, FinalizableCrowdsale, MintedCrowdsale, ManagedWhitelist, Limited {\ncontract ClinicAllCrowdsale is Crowdsale, MigratedTimedFinalizableCrowdsale, MintedCrowdsale, ManagedWhitelist, Limited {\n  constructor\n  (\n    uint256 _tokenLimitSupply,\n    uint256 _rate,\n    address _wallet,\n    address _privateSaleManagerWallet,\n    ERC20 _token,\n    uint256 _openingTime,\n    uint256 _closingTime,\n    uint256 _discountTokenAmount,\n    uint256 _discountTokenPercent,\n    uint256 _preSaleClosingTime,\n    uint256 _softCapLimit,\n    ClinicAllRefundEscrow _vault,\n    uint256 _buyLimitSupplyMin,\n    uint256 _buyLimitSupplyMax,\n    uint256 _kycLimitThreshold\n  )\n  Crowdsale(_rate, _wallet, _token)\n  //TimedCrowdsale(_openingTime, _closingTime)\n  MigratedTimedFinalizableCrowdsale(_openingTime, _closingTime)\n  public\n  {\n    privateSaleManagerWallet = _privateSaleManagerWallet;\n    tokenSupplyLimit = _tokenLimitSupply;\n    discountTokenAmount = _discountTokenAmount;\n    discountTokenPercent = _discountTokenPercent;\n    preSaleClosingTime = _preSaleClosingTime;\n    softCapLimit = _softCapLimit;\n    vault = _vault;\n    buyLimitSupplyMin = _buyLimitSupplyMin;\n    buyLimitSupplyMax = _buyLimitSupplyMax;\n    kycLimitThreshold = _kycLimitThreshold;\n  }\n\n  using SafeMath for uint256;\n\n  // refund vault used to hold funds while crowdsale is running\n  ClinicAllRefundEscrow public vault;\n\n  /*/\n  *  Properties, constants\n  /*/\n  //address public walletPrivateSaler;\n  // Limit of tokens for supply during ICO public sale\n  uint256 public tokenSupplyLimit;\n  // Limit of tokens with discount on current contract\n  uint256 public discountTokenAmount;\n  // Percent value for discount tokens\n  uint256 public discountTokenPercent;\n  // Time when we finish pre sale\n  uint256 public preSaleClosingTime;\n  // Minimum amount of funds to be raised in weis\n  uint256 public softCapLimit;\n  // Min buy limit for each investor\n  uint256 public buyLimitSupplyMin;\n  // Max buy limit for each investor\n  uint256 public buyLimitSupplyMax;\n  // KYC Limit threshold for small and big investors\n  uint256 public kycLimitThreshold;\n  // Address where private sale funds are collected\n  address public privateSaleManagerWallet;\n  // Private sale tokens supply limit\n  uint256 public privateSaleSupplyLimit;\n\n  // Modifiers\n  /**\n  * @dev Throws if operator is not whitelisted.\n  */\n  modifier onlyPrivateSaleManager() {\n    require(privateSaleManagerWallet == msg.sender, \"Operation is allowed only for the private sale manager.\");\n    _;\n  }\n\n\n  // Public functions\n\n  /*/\n  *  @dev Owner can transfer ownership of the token to a new owner\n  *  @param _newTokenOwner  New token owner address\n  */\n  function transferTokenOwnership(address _newTokenOwner) public\n  onlyOwner\n  {\n      MintableToken(token).transferOwnership(_newTokenOwner);\n  }\n\n  /*/\n  *  @dev Owner can transfer ownership of the vault to a new owner\n  *  @param _newTokenOwner  New token owner address\n  */\n  function transferVaultOwnership(address _newVaultOwner) public\n  onlyOwner\n  {\n      ClinicAllRefundEscrow(vault).transferOwnership(_newVaultOwner);\n  }\n\n  /*/\n  *  @dev Owner can extend ICO closing time\n  *  @param _closingTime New ICO closing time\n  */\n  function extendICO(uint256 _closingTime) public\n  onlyOwner\n  {\n      closingTime = _closingTime;\n  }\n\n  /*/\n  *  @dev Owner can extend ICO closing time\n  *  @param _closingTime New ICO closing time\n  */\n  function extendPreSale(uint256 _preSaleClosingTime) public\n  onlyOwner\n  {\n      preSaleClosingTime = _preSaleClosingTime;\n  }\n\n  /*/\n  *  @dev Should be used only once during the migration of ICO contracts\n  *  @param _beneficiary Wallet address of migrated beneficiary\n  *  @param _weiAmount Sum of invested ETH funds in wei\n  *  @param _tokenAmount Sum of bought tokens for this ETH funds\n  */\n  function migrateBeneficiary(address _beneficiary, uint256 _weiAmount, uint256 _tokenAmount) public\n  onlyOwner\n  {\n    weiRaised = weiRaised.add(_weiAmount);\n    //That is crucial that _forwardFunds() will not be called here\n    _processPurchase(_beneficiary, _tokenAmount);\n    emit TokenPurchase(\n      msg.sender,\n      _beneficiary,\n      _weiAmount,\n      _tokenAmount\n    );\n  }\n\n  /*/\n  *  @dev CrowdSale manager is able to change rate value during ICO\n  *  @param _rate wei to CHT tokens exchange rate\n  */\n  function updateRate(uint256 _rate) public\n  onlyManager\n  {\n    require(_rate != 0, \"Exchange rate should not be 0.\");\n    rate = _rate;\n  }\n\n  /*/\n  *  @dev CrowdSale manager is able to change min and max buy limit for investors during ICO\n  *  @param _min Minimal amount of tokens that could be bought\n  *  @param _max Maximum amount of tokens that could be bought\n  */\n  function updateBuyLimitRange(uint256 _min, uint256 _max) public\n  onlyOwner\n  {\n    require(_min != 0, \"Minimal buy limit should not be 0.\");\n    require(_max != 0, \"Maximal buy limit should not be 0.\");\n    require(_max > _min, \"Maximal buy limit should be greater than minimal buy limit.\");\n    buyLimitSupplyMin = _min;\n    buyLimitSupplyMax = _max;\n  }\n\n  /*/\n  *  @dev CrowdSale manager is able to change Kyc Limit Eliminator for investors during ICO\n  *  @param _value amount of tokens that should be as eliminator\n  */\n  function updateKycLimitThreshold(uint256 _value) public\n  onlyOwner\n  {\n    require(_value != 0, \"Kyc threshold should not be 0.\");\n    kycLimitThreshold = _value;\n  }\n\n  /**\n  * @dev Investors can claim refunds here if crowdsale is unsuccessful\n  */\n  function claimRefund() public {\n    require(isFinalized, \"Claim refunds is only possible if the ICO is finalized.\");\n    require(!goalReached(), \"Claim refunds is only possible if the soft cap goal has not been reached.\");\n    uint256 deposit = vault.depositsOf(msg.sender);\n    vault.withdraw(msg.sender);\n    weiRaised = weiRaised.sub(deposit);\n    ClinicAllToken(token).burnAfterRefund(msg.sender);\n  }\n\n  /**\n  @dev Owner can claim full refund if a crowdsale is unsuccessful\n  @param _txFee Transaction fee that will be deducted from an invested sum\n  */\n  function claimRefundChunk(uint256 _txFee, uint256 _chunkLength) public onlyOwner {\n    require(isFinalized, \"Claim refunds is only possible if the ICO is finalized.\");\n    require(!goalReached(), \"Claim refunds is only possible if the soft cap goal has not been reached.\");\n    uint256 _weiRefunded;\n    address[] memory _refundeesList;\n    (_weiRefunded, _refundeesList) = vault.withdrawChunk(_txFee, _chunkLength);\n    weiRaised = weiRaised.sub(_weiRefunded);\n    for (uint256 i = 0; i < _refundeesList.length; i++) {\n      ClinicAllToken(token).burnAfterRefund(_refundeesList[i]);\n    }\n  }\n\n  /**\n  * @dev Get refundee list length\n  */\n  function refundeesListLength() public onlyOwner view returns (uint256) {\n    return vault.refundeesListLength();\n  }\n\n  /**\n  * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n  * @return Whether crowdsale period has elapsed\n  */\n  function hasClosed() public view returns (bool) {\n    return ((block.timestamp > closingTime) || tokenSupplyLimit <= token.totalSupply());\n  }\n\n  /**\n  * @dev Checks whether funding goal was reached.\n  * @return Whether funding goal was reached\n  */\n  function goalReached() public view returns (bool) {\n    return token.totalSupply() >= softCapLimit;\n  }\n\n  /**\n  * @dev Checks rest of tokens supply.\n  */\n  function supplyRest() public view returns (uint256) {\n    return (tokenSupplyLimit.sub(token.totalSupply()));\n  }\n\n  //Private functions\n\n  function _processPurchase(\n    address _beneficiary,\n    uint256 _tokenAmount\n  )\n  internal\n  doesNotExceedLimit(_beneficiary, _tokenAmount, token.balanceOf(_beneficiary), kycLimitThreshold)\n  {\n    super._processPurchase(_beneficiary, _tokenAmount);\n  }\n\n  function _preValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n  internal\n  onlyIfWhitelisted(_beneficiary)\n  isLimited(_beneficiary)\n  {\n    super._preValidatePurchase(_beneficiary, _weiAmount);\n    uint256 tokens = _getTokenAmount(_weiAmount);\n    require(tokens.add(token.totalSupply()) <= tokenSupplyLimit, \"Total amount fo sold tokens should not exceed the total supply limit.\");\n    require(tokens >= buyLimitSupplyMin, \"An investor can buy an amount of tokens only above the minimal limit.\");\n    require(tokens.add(token.balanceOf(_beneficiary)) <= buyLimitSupplyMax, \"An investor cannot buy tokens above the maximal limit.\");\n  }\n\n  /**\n   * @dev Te way in which ether is converted to tokens.\n   * @param _weiAmount Value in wei to be converted into tokens\n   * @return Number of tokens that can be purchased with the specified _weiAmount with discount or not\n   */\n  function _getTokenAmount(uint256 _weiAmount)\n  internal view returns (uint256)\n  {\n    if (isDiscount()) {\n      return _getTokensWithDiscount(_weiAmount);\n    }\n    return _weiAmount.mul(rate);\n  }\n\n  /**\n   * @dev Public method where ether is converted to tokens.\n   * @param _weiAmount Value in wei to be converted into tokens\n   */\n  function getTokenAmount(uint256 _weiAmount)\n  public view returns (uint256)\n  {\n    return _getTokenAmount(_weiAmount);\n  }\n\n  /**\n   * @dev iternal method returns total tokens amount including discount\n   */\n  function _getTokensWithDiscount(uint256 _weiAmount)\n  internal view returns (uint256)\n  {\n    uint256 tokens = 0;\n    uint256 restOfDiscountTokens = discountTokenAmount.sub(token.totalSupply());\n    uint256 discountTokensMax = _getDiscountTokenAmount(_weiAmount);\n    if (restOfDiscountTokens < discountTokensMax) {\n      uint256 discountTokens = restOfDiscountTokens;\n      //get rest of WEI\n      uint256 _rate = _getDiscountRate();\n      uint256 _discointWeiAmount = discountTokens.div(_rate);\n      uint256 _restOfWeiAmount = _weiAmount.sub(_discointWeiAmount);\n      uint256 normalTokens = _restOfWeiAmount.mul(rate);\n      tokens = discountTokens.add(normalTokens);\n    } else {\n      tokens = discountTokensMax;\n    }\n\n    return tokens;\n  }\n\n  /**\n   * @dev iternal method returns discount tokens amount\n   * @param _weiAmount An amount of ETH that should be converted to an amount of CHT tokens\n   */\n  function _getDiscountTokenAmount(uint256 _weiAmount)\n  internal view returns (uint256)\n  {\n    require(_weiAmount != 0, \"It should be possible to buy tokens only by providing non zero ETH.\");\n    uint256 _rate = _getDiscountRate();\n    return _weiAmount.mul(_rate);\n  }\n\n  /**\n   * @dev Returns the discount rate value\n   */\n  function _getDiscountRate()\n  internal view returns (uint256)\n  {\n    require(isDiscount(), \"Getting discount rate should be possible only below the discount tokens limit.\");\n    return rate.add(rate.mul(discountTokenPercent).div(100));\n  }\n\n  /**\n   * @dev Returns the exchange rate value\n   */\n  function getRate()\n  public view returns (uint256)\n  {\n    if (isDiscount()) {\n      return _getDiscountRate();\n    }\n\n    return rate;\n  }\n\n  /**\n   * @dev Returns the status if the ICO's private sale has closed or not\n   */\n  function isDiscount()\n  public view returns (bool)\n  {\n    return (preSaleClosingTime >= block.timestamp);\n  }\n\n  /**\n   * @dev Internal method where owner transfers part of tokens to reserve\n   */\n  function transferTokensToReserve(address _beneficiary) private\n  {\n    require(tokenSupplyLimit < CappedToken(token).cap(), \"Token's supply limit should be less that token' cap limit.\");\n    // calculate token amount to be created\n    uint256 _tokenCap = CappedToken(token).cap();\n    uint256 tokens = _tokenCap.sub(tokenSupplyLimit);\n\n    _deliverTokens(_beneficiary, tokens);\n  }\n\n  /**\n  * @dev Enable transfers of tokens between wallets\n  */\n  function transferOn() public onlyOwner\n  {\n    ClinicAllToken(token).transferOn();\n  }\n\n  /**\n  * @dev Disable transfers of tokens between wallets\n  */\n  function transferOff() public onlyOwner\n  {\n    ClinicAllToken(token).transferOff();\n  }\n\n  /**\n   * @dev Internal method where owner transfers part of tokens to reserve and finish minting\n   */\n  function finalization() internal {\n    if (goalReached()) {\n      transferTokensToReserve(wallet);\n      vault.close();\n    } else {\n      vault.enableRefunds();\n    }\n    MintableToken(token).finishMinting();\n    super.finalization();\n  }\n\n  /**\n  * @dev Overrides Crowdsale fund forwarding, sending funds to vault.\n  */\n  function _forwardFunds() internal {\n    super._forwardFunds();\n    vault.depositFunds(msg.sender, msg.value);\n  }\n\n  /**\n  * @dev Public method where private sale manager can transfer tokens to private investors\n  */\n  function transferToPrivateInvestor(\n    address _beneficiary,\n    uint256 _value\n  )\n  public\n  onlyPrivateSaleManager\n  onlyIfWhitelisted(_beneficiary)\n  returns (bool)\n  {\n    ClinicAllToken(token).transferToPrivateInvestor(msg.sender, _beneficiary, _value);\n  }\n\n  /**\n  * @dev Allocates funds for the private sale manager, but not beyound the tokenSupplyLimit\n  * @param privateSaleSupplyAmount value of CHT tokens to add for private sale\n  */\n  function allocatePrivateSaleFunds(uint256 privateSaleSupplyAmount) public onlyOwner\n  {\n    require(privateSaleSupplyLimit.add(privateSaleSupplyAmount) < tokenSupplyLimit, \"Token's private sale supply limit should be less that token supply limit.\");\n    privateSaleSupplyLimit = privateSaleSupplyLimit.add(privateSaleSupplyAmount);\n    _deliverTokens(privateSaleManagerWallet, privateSaleSupplyAmount);\n  }\n\n  /**\n  * @dev Public method where private sale manager can transfer the rest of tokens form private sale wallet available to crowdsale\n  */\n  function redeemPrivateSaleFunds()\n  public\n  onlyPrivateSaleManager\n  {\n    uint256 _balance = ClinicAllToken(token).balanceOf(msg.sender);\n    privateSaleSupplyLimit = privateSaleSupplyLimit.sub(_balance);\n    ClinicAllToken(token).burnPrivateSale(msg.sender, _balance);\n  }\n\n  /**\n  @dev Owner can withdraw part of funds during of ICO\n  @param _value Transaction amoun that will be deducted from an vault sum\n  */\n  function beneficiaryWithdrawChunk(uint256 _value)\n  public\n  onlyOwner\n  {\n    vault.beneficiaryWithdrawChunk(_value);\n  }\n\n  /**\n  @dev Owner can withdraw all funds during or after of ICO\n  */\n  function beneficiaryWithdrawAll()\n  public\n  onlyOwner\n  {\n    vault.beneficiaryWithdrawAll();\n  }\n\n  /**\n  @dev Owner can do manual refund here if investore has \"BAD\" money\n  @param _payee address of investor that needs to refund with next manual ETH sending\n  */\n  function manualRefund(address _payee) public onlyOwner {\n    uint256 deposit = vault.depositsOf(_payee);\n    vault.manualRefund(_payee);\n    weiRaised = weiRaised.sub(deposit);\n    ClinicAllToken(token).burnAfterRefund(_payee);\n  }\n\n}",
  "bytecode": "60806040526004805460a060020a60ff02191690553480156200002157600080fd5b506040516101e080620038ef83398101604090815281516020830151918301516060840151608085015160a086015160c087015160e08801516101008901516101208a01516101408b01516101608c01516101808d01516101a08e01516101c0909e01519b9d9a9b999a98999798969795969495939492939192909189898f8f8e60008311620000b057600080fd5b600160a060020a0382161515620000c657600080fd5b600160a060020a0381161515620000dc57600080fd5b60029290925560018054600160a060020a03928316600160a060020a031991821617909155600080549383169382169390931790925560048054831633179055600593909355600691909155601280549e83169e82169e909e17909d55600a9f909f55600b97909755600c95909555600d93909355600e919091556009805491909b16971696909617909855600f949094555050506010939093555050601155613763806200018c6000396000f3006080604052600436106102dc5763ffffffff60e060020a60003504166302e14b4781146102e757806308199e731461030e5780630988ca8c146103235780630d0b658a1461038a5780631496baf8146103ab5780631515bc2b146103c657806318b919e9146103ef5780631b99a8df146104795780631ce28e721461049a57806320f10fdd146104bb578063217fe6c6146104d057806321af15701461053757806321e6b53d1461054f57806324953eaa14610570578063286dd3f5146105c55780632c4e722e146105e65780632e336644146105fb5780633b9c448d146106105780633d017659146106415780634042b66f14610656578063455bf1421461066b5780634b6753bc146106805780634bb278f3146106955780634e140274146106aa578063521eb273146106bf57806354948bd7146106d4578063598ab2c9146106e957806363351deb146106fe57806364a0dd231461071f578063679aefce1461073757806369ea17711461074c578063715018a61461076457806371bdb914146107795780637b9417c81461078e5780637b9e9073146107af5780637d3d6522146107c457806385a08f41146107d95780638b40c51c146107ee5780638d4e4083146108035780638da5cb5b146108185780638e9a4bcc1461082d578063928a5891146108515780639a065a60146108695780639b19251a1461087e578063aade8dcc1461089f578063ac18de43146108b4578063b0eca2c5146108d5578063b1d006d6146108ea578063b338823214610902578063b5545a3c14610929578063b7a8807c1461093e578063c2507ac114610953578063d0ebdbe71461096b578063d4f4b3681461098c578063d9ca1c6314610a1a578063dec7d45b14610a35578063df31027a14610a59578063e071c0ca14610a71578063e2ec6ec314610a92578063ec8ac4d814610ae7578063f2fde38b14610afb578063f5b944eb14610b1c578063fbfa77cf14610b31578063fc0c546a14610b46575b6102e533610b5b565b005b3480156102f357600080fd5b506102fc610bfd565b60408051918252519081900360200190f35b34801561031a57600080fd5b506102fc610c03565b34801561032f57600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526102e5958335600160a060020a0316953695604494919390910191908190840183828082843750949750610c099650505050505050565b34801561039657600080fd5b506102e5600160a060020a0360043516610c77565b3480156103b757600080fd5b506102e5600435602435610e3d565b3480156103d257600080fd5b506103db611137565b604080519115158252519081900360200190f35b3480156103fb57600080fd5b506104046111ce565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561043e578181015183820152602001610426565b50505050905090810190601f16801561046b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561048557600080fd5b506102e5600160a060020a03600435166111f3565b3480156104a657600080fd5b506102fc600160a060020a0360043516611239565b3480156104c757600080fd5b506102fc611258565b3480156104dc57600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526103db958335600160a060020a031695369560449491939091019190819084018382808284375094975061125e9650505050505050565b34801561054357600080fd5b506102e56004356112d3565b34801561055b57600080fd5b506102e5600160a060020a03600435166112ef565b34801561057c57600080fd5b50604080516020600480358082013583810280860185019096528085526102e59536959394602494938501929182918501908490808284375094975061137e9650505050505050565b3480156105d157600080fd5b506102e5600160a060020a03600435166113e1565b3480156105f257600080fd5b506102fc61143d565b34801561060757600080fd5b506102e5611443565b34801561061c57600080fd5b506106256114c7565b60408051600160a060020a039092168252519081900360200190f35b34801561064d57600080fd5b506102fc6114d6565b34801561066257600080fd5b506102fc6114dc565b34801561067757600080fd5b506102fc6114e2565b34801561068c57600080fd5b506102fc611580565b3480156106a157600080fd5b506102e5611586565b3480156106b657600080fd5b506103db61161e565b3480156106cb57600080fd5b50610625611627565b3480156106e057600080fd5b506102e5611636565b3480156106f557600080fd5b506102fc6116a7565b34801561070a57600080fd5b506102fc600160a060020a0360043516611743565b34801561072b57600080fd5b506102e5600435611755565b34801561074357600080fd5b506102fc6117c8565b34801561075857600080fd5b506102e56004356117ed565b34801561077057600080fd5b506102e5611875565b34801561078557600080fd5b506102fc6118e3565b34801561079a57600080fd5b506102e5600160a060020a03600435166118e9565b3480156107bb57600080fd5b506102fc611942565b3480156107d057600080fd5b506103db611948565b3480156107e557600080fd5b506102fc6119d2565b3480156107fa57600080fd5b506102e56119d8565b34801561080f57600080fd5b506103db611a49565b34801561082457600080fd5b50610625611a59565b34801561083957600080fd5b506102e5600160a060020a0360043516602435611a68565b34801561085d57600080fd5b506102e5600435611ab0565b34801561087557600080fd5b506102fc611baa565b34801561088a57600080fd5b506103db600160a060020a0360043516611bb0565b3480156108ab57600080fd5b506102fc611bdf565b3480156108c057600080fd5b506102e5600160a060020a0360043516611be5565b3480156108e157600080fd5b506102e5611c28565b3480156108f657600080fd5b506102e5600435611dc6565b34801561090e57600080fd5b506102e5600160a060020a0360043516602435604435611de2565b34801561093557600080fd5b506102e5611e66565b34801561094a57600080fd5b506102fc612100565b34801561095f57600080fd5b506102fc600435612106565b34801561097757600080fd5b506102e5600160a060020a0360043516612111565b34801561099857600080fd5b50604080516020600480358082013583810280860185019096528085526102e595369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506121549650505050505050565b348015610a2657600080fd5b506102e5600435602435612228565b348015610a4157600080fd5b506103db600160a060020a03600435166024356123c1565b348015610a6557600080fd5b506102e5600435612526565b348015610a7d57600080fd5b506102e5600160a060020a03600435166125a3565b348015610a9e57600080fd5b50604080516020600480358082013583810280860185019096528085526102e5953695939460249493850192918291850190849080828437509497506126219650505050505050565b6102e5600160a060020a0360043516610b5b565b348015610b0757600080fd5b506102e5600160a060020a0360043516612684565b348015610b2857600080fd5b506104046126a4565b348015610b3d57600080fd5b506106256126c8565b348015610b5257600080fd5b506106256126d7565b346000610b6883836126e6565b610b7182612a88565b600354909150610b87908363ffffffff612abb16565b600355610b948382612ac8565b60408051838152602081018390528151600160a060020a0386169233927f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad18929081900390910190a3610be68383610c73565b610bee612c1f565b610bf88383610c73565b505050565b600d5481565b60135481565b610c73826007836040518082805190602001908083835b60208310610c3f5780518252601f199092019160209182019101610c20565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922092915050612c92565b5050565b600454600090600160a060020a03163314610c9157600080fd5b600954604080517fe3a9db1a000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301529151919092169163e3a9db1a9160248083019260209291908290030181600087803b158015610cf957600080fd5b505af1158015610d0d573d6000803e3d6000fd5b505050506040513d6020811015610d2357600080fd5b5051600954604080517f0d0b658a000000000000000000000000000000000000000000000000000000008152600160a060020a0386811660048301529151939450911691630d0b658a9160248082019260009290919082900301818387803b158015610d8e57600080fd5b505af1158015610da2573d6000803e3d6000fd5b5050600354610dba925090508263ffffffff612ca716565b60035560008054604080517f1536637b000000000000000000000000000000000000000000000000000000008152600160a060020a03868116600483015291519190921692631536637b926024808201939182900301818387803b158015610e2157600080fd5b505af1158015610e35573d6000803e3d6000fd5b505050505050565b6004546000906060908290600160a060020a03163314610e5c57600080fd5b60045460a060020a900460ff161515610ed3576040805160e560020a62461bcd028152602060048201526037602482015260008051602061371883398151915260448201527f66207468652049434f2069732066696e616c697a65642e000000000000000000606482015290519081900360840190fd5b610edb611948565b15610f6a576040805160e560020a62461bcd028152602060048201526049602482015260008051602061371883398151915260448201527f662074686520736f66742063617020676f616c20686173206e6f74206265656e60648201527f20726561636865642e0000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b600954604080517ff3c8f08a00000000000000000000000000000000000000000000000000000000815260048101889052602481018790529051600160a060020a039092169163f3c8f08a9160448082019260009290919082900301818387803b158015610fd757600080fd5b505af1158015610feb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561101457600080fd5b81516020830180519193928301929164010000000081111561103557600080fd5b8201602081018481111561104857600080fd5b815185602082028301116401000000008211171561106557600080fd5b505060035494975095506110849392508691505063ffffffff612ca716565b6003555060005b8151811015611130576000548251600160a060020a0390911690631536637b908490849081106110b757fe5b906020019060200201516040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050600060405180830381600087803b15801561110c57600080fd5b505af1158015611120573d6000803e3d6000fd5b50506001909201915061108b9050565b5050505050565b60006006544211806111c857506000809054906101000a9004600160a060020a0316600160a060020a03166318160ddd6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561119657600080fd5b505af11580156111aa573d6000803e3d6000fd5b505050506040513d60208110156111c057600080fd5b5051600a5411155b90505b90565b60408051808201909152600981526000805160206136f8833981519152602082015281565b61121f3360408051908101604052806007815260200160c960020a6636b0b730b3b2b902815250610c09565b600160a060020a0316600090815260086020526040812055565b600160a060020a0381166000908152600860205260409020545b919050565b600a5481565b60006112ca836007846040518082805190602001908083835b602083106112965780518252601f199092019160209182019101611277565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922092915050612cb9565b90505b92915050565b600454600160a060020a031633146112ea57600080fd5b600d55565b600454600160a060020a0316331461130657600080fd5b60008054604080517ff2fde38b000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301529151919092169263f2fde38b926024808201939182900301818387803b15801561136a57600080fd5b505af1158015611130573d6000803e3d6000fd5b60006113ac3360408051908101604052806007815260200160c960020a6636b0b730b3b2b902815250610c09565b5060005b8151811015610c73576113d982828151811015156113ca57fe5b906020019060200201516113e1565b6001016113b0565b61140d3360408051908101604052806007815260200160c960020a6636b0b730b3b2b902815250610c09565b61143a816040805190810160405280600981526020016000805160206136f8833981519152815250612cd8565b50565b60025481565b600454600160a060020a0316331461145a57600080fd5b600960009054906101000a9004600160a060020a0316600160a060020a0316632e3366446040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156114ad57600080fd5b505af11580156114c1573d6000803e3d6000fd5b50505050565b601254600160a060020a031681565b60115481565b60035481565b600454600090600160a060020a031633146114fc57600080fd5b600960009054906101000a9004600160a060020a0316600160a060020a031663455bf1426040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561154f57600080fd5b505af1158015611563573d6000803e3d6000fd5b505050506040513d602081101561157957600080fd5b5051905090565b60065481565b600454600160a060020a0316331461159d57600080fd5b60045460a060020a900460ff16156115b457600080fd5b6115bc611137565b15156115c757600080fd5b6115cf612de9565b6040517f6823b073d48d6e3a7d385eeb601452d680e74bb46afe3255a7d778f3a9b1768190600090a16004805474ff0000000000000000000000000000000000000000191660a060020a179055565b600d5442111590565b600154600160a060020a031681565b600454600160a060020a0316331461164d57600080fd5b60008054604080517f54948bd70000000000000000000000000000000000000000000000000000000081529051600160a060020a03909216926354948bd79260048084019382900301818387803b1580156114ad57600080fd5b60008054604080517f18160ddd00000000000000000000000000000000000000000000000000000000815290516111c892600160a060020a0316916318160ddd91600480830192602092919082900301818887803b15801561170857600080fd5b505af115801561171c573d6000803e3d6000fd5b505050506040513d602081101561173257600080fd5b5051600a549063ffffffff612ca716565b60086020526000908152604090205481565b600454600160a060020a0316331461176c57600080fd5b8015156117c3576040805160e560020a62461bcd02815260206004820152601e60248201527f4b7963207468726573686f6c642073686f756c64206e6f7420626520302e0000604482015290519081900360640190fd5b601155565b60006117d261161e565b156117e6576117df612f6e565b90506111cb565b5060025490565b6118193360408051908101604052806007815260200160c960020a6636b0b730b3b2b902815250610c09565b801515611870576040805160e560020a62461bcd02815260206004820152601e60248201527f45786368616e676520726174652073686f756c64206e6f7420626520302e0000604482015290519081900360640190fd5b600255565b600454600160a060020a0316331461188c57600080fd5b600454604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26004805473ffffffffffffffffffffffffffffffffffffffff19169055565b600e5481565b6119153360408051908101604052806007815260200160c960020a6636b0b730b3b2b902815250610c09565b61143a816040805190810160405280600981526020016000805160206136f8833981519152815250613054565b600f5481565b6000600e546000809054906101000a9004600160a060020a0316600160a060020a03166318160ddd6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561199f57600080fd5b505af11580156119b3573d6000803e3d6000fd5b505050506040513d60208110156119c957600080fd5b50511015905090565b60105481565b600454600160a060020a031633146119ef57600080fd5b60008054604080517f8b40c51c0000000000000000000000000000000000000000000000000000000081529051600160a060020a0390921692638b40c51c9260048084019382900301818387803b1580156114ad57600080fd5b60045460a060020a900460ff1681565b600454600160a060020a031681565b611a943360408051908101604052806007815260200160c960020a6636b0b730b3b2b902815250610c09565b600160a060020a03909116600090815260086020526040902055565b600454600160a060020a03163314611ac757600080fd5b600a54601354611add908363ffffffff612abb16565b10611b7e576040805160e560020a62461bcd02815260206004820152604960248201527f546f6b656e277320707269766174652073616c6520737570706c79206c696d6960448201527f742073686f756c64206265206c657373207468617420746f6b656e207375707060648201527f6c79206c696d69742e0000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b601354611b91908263ffffffff612abb16565b60135560125461143a90600160a060020a031682613126565b600b5481565b60006112cd826040805190810160405280600981526020016000805160206136f883398151915281525061125e565b600c5481565b600454600160a060020a03163314611bfc57600080fd5b61143a8160408051908101604052806007815260200160c960020a6636b0b730b3b2b902815250612cd8565b601254600090600160a060020a03163314611cb3576040805160e560020a62461bcd02815260206004820152603760248201527f4f7065726174696f6e20697320616c6c6f776564206f6e6c7920666f7220746860448201527f6520707269766174652073616c65206d616e616765722e000000000000000000606482015290519081900360840190fd5b60008054604080517f70a082310000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a03909216926370a08231926024808401936020939083900390910190829087803b158015611d1a57600080fd5b505af1158015611d2e573d6000803e3d6000fd5b505050506040513d6020811015611d4457600080fd5b5051601354909150611d5c908263ffffffff612ca716565b60135560008054604080517f6d8f9035000000000000000000000000000000000000000000000000000000008152336004820152602481018590529051600160a060020a0390921692636d8f90359260448084019382900301818387803b15801561136a57600080fd5b600454600160a060020a03163314611ddd57600080fd5b600655565b600454600160a060020a03163314611df957600080fd5b600354611e0c908363ffffffff612abb16565b600355611e198382612ac8565b60408051838152602081018390528151600160a060020a0386169233927f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad18929081900390910190a3505050565b60045460009060a060020a900460ff161515611ee0576040805160e560020a62461bcd028152602060048201526037602482015260008051602061371883398151915260448201527f66207468652049434f2069732066696e616c697a65642e000000000000000000606482015290519081900360840190fd5b611ee8611948565b15611f77576040805160e560020a62461bcd028152602060048201526049602482015260008051602061371883398151915260448201527f662074686520736f66742063617020676f616c20686173206e6f74206265656e60648201527f20726561636865642e0000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b600954604080517fe3a9db1a0000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a039092169163e3a9db1a916024808201926020929091908290030181600087803b158015611fdd57600080fd5b505af1158015611ff1573d6000803e3d6000fd5b505050506040513d602081101561200757600080fd5b5051600954604080517f51cff8d90000000000000000000000000000000000000000000000000000000081523360048201529051929350600160a060020a03909116916351cff8d99160248082019260009290919082900301818387803b15801561207157600080fd5b505af1158015612085573d6000803e3d6000fd5b505060035461209d925090508263ffffffff612ca716565b60035560008054604080517f1536637b0000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a0390921692631536637b9260248084019382900301818387803b15801561136a57600080fd5b60055481565b60006112cd82612a88565b600454600160a060020a0316331461212857600080fd5b61143a8160408051908101604052806007815260200160c960020a6636b0b730b3b2b902815250613054565b60006121823360408051908101604052806007815260200160c960020a6636b0b730b3b2b902815250610c09565b81518351146121db576040805160e560020a62461bcd02815260206004820152601c60248201527f41727261792073697a65732073686f756c6420626520657175616c2e00000000604482015290519081900360640190fd5b5060005b8251811015610bf85761222083828151811015156121f957fe5b90602001906020020151838381518110151561221157fe5b90602001906020020151611a68565b6001016121df565b600454600160a060020a0316331461223f57600080fd5b8115156122bc576040805160e560020a62461bcd02815260206004820152602260248201527f4d696e696d616c20627579206c696d69742073686f756c64206e6f742062652060448201527f302e000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b801515612339576040805160e560020a62461bcd02815260206004820152602260248201527f4d6178696d616c20627579206c696d69742073686f756c64206e6f742062652060448201527f302e000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b8181116123b6576040805160e560020a62461bcd02815260206004820152603b60248201527f4d6178696d616c20627579206c696d69742073686f756c64206265206772656160448201527f746572207468616e206d696e696d616c20627579206c696d69742e0000000000606482015290519081900360840190fd5b600f91909155601055565b601254600090600160a060020a0316331461244c576040805160e560020a62461bcd02815260206004820152603760248201527f4f7065726174696f6e20697320616c6c6f776564206f6e6c7920666f7220746860448201527f6520707269766174652073616c65206d616e616765722e000000000000000000606482015290519081900360840190fd5b8261247a816040805190810160405280600981526020016000805160206136f8833981519152815250610c09565b60008054604080517fec71351c000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a038881166024830152604482018890529151919092169263ec71351c92606480820193602093909283900390910190829087803b1580156124f257600080fd5b505af1158015612506573d6000803e3d6000fd5b505050506040513d602081101561251c57600080fd5b5091949350505050565b600454600160a060020a0316331461253d57600080fd5b600954604080517fdf31027a000000000000000000000000000000000000000000000000000000008152600481018490529051600160a060020a039092169163df31027a9160248082019260009290919082900301818387803b15801561136a57600080fd5b600454600160a060020a031633146125ba57600080fd5b600954604080517ff2fde38b000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301529151919092169163f2fde38b91602480830192600092919082900301818387803b15801561136a57600080fd5b600061264f3360408051908101604052806007815260200160c960020a6636b0b730b3b2b902815250610c09565b5060005b8151811015610c735761267c828281518110151561266d57fe5b906020019060200201516118e9565b600101612653565b600454600160a060020a0316331461269b57600080fd5b61143a816131cf565b604080518082019091526007815260c960020a6636b0b730b3b2b902602082015281565b600954600160a060020a031681565b600054600160a060020a031681565b600082612716816040805190810160405280600981526020016000805160206136f8833981519152815250610c09565b600160a060020a0384166000908152600860205260408120548591106127ac576040805160e560020a62461bcd02815260206004820152602960248201527f416e20696e766573746f72206973206c696d697465642069662069742068617360448201527f2061206c696d69742e0000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6127b6858561324d565b6127bf84612a88565b9250600a546128526000809054906101000a9004600160a060020a0316600160a060020a03166318160ddd6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561281957600080fd5b505af115801561282d573d6000803e3d6000fd5b505050506040513d602081101561284357600080fd5b5051859063ffffffff612abb16565b11156128f4576040805160e560020a62461bcd02815260206004820152604560248201527f546f74616c20616d6f756e7420666f20736f6c6420746f6b656e732073686f7560448201527f6c64206e6f74206578636565642074686520746f74616c20737570706c79206c60648201527f696d69742e000000000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b600f5483101561299a576040805160e560020a62461bcd02815260206004820152604560248201527f416e20696e766573746f722063616e2062757920616e20616d6f756e74206f6660448201527f20746f6b656e73206f6e6c792061626f766520746865206d696e696d616c206c60648201527f696d69742e000000000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b60105460008054604080517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a038a811660048301529151612a0c9492909316926370a0823192602480840193602093929083900390910190829087803b15801561281957600080fd5b1115611130576040805160e560020a62461bcd02815260206004820152603660248201527f416e20696e766573746f722063616e6e6f742062757920746f6b656e7320616260448201527f6f766520746865206d6178696d616c206c696d69742e00000000000000000000606482015290519081900360840190fd5b6000612a9261161e565b15612aa757612aa082613276565b9050611253565b6002546112cd90839063ffffffff61339d16565b818101828110156112cd57fe5b60008054604080517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a03808716600483015291518694869493909316926370a0823192602480820193602093909283900390910190829087803b158015612b3757600080fd5b505af1158015612b4b573d6000803e3d6000fd5b505050506040513d6020811015612b6157600080fd5b5051601154600080612b79848663ffffffff612abb16565b9150612b8486611239565b9050828210612c0b5780821115612c0b576040805160e560020a62461bcd02815260206004820152603260248201527f416e20696e766573746f722073686f756c64206e6f742065786365656420697460448201527f73206c696d6974206f6e20627579696e672e0000000000000000000000000000606482015290519081900360840190fd5b612c1588886133c6565b5050505050505050565b612c276133d0565b600954604080517f921b004b0000000000000000000000000000000000000000000000000000000081523360048201523460248201529051600160a060020a039092169163921b004b9160448082019260009290919082900301818387803b1580156114ad57600080fd5b612c9c8282612cb9565b1515610c7357600080fd5b600082821115612cb357fe5b50900390565b600160a060020a03166000908152602091909152604090205460ff1690565b612d42826007836040518082805190602001908083835b60208310612d0e5780518252601f199092019160209182019101612cef565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922092915050613409565b81600160a060020a03167fd211483f91fc6eff862467f8de606587a30c8fc9981056f051b897a418df803a826040518080602001828103825283818151815260200191508051906020019080838360005b83811015612dab578181015183820152602001612d93565b50505050905090810190601f168015612dd85780820380516001836020036101000a031916815260200191505b509250505060405180910390a25050565b612df1611948565b15612e7b57600154612e0b90600160a060020a031661342b565b600960009054906101000a9004600160a060020a0316600160a060020a03166343d726d66040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015612e5e57600080fd5b505af1158015612e72573d6000803e3d6000fd5b50505050612ee7565b600960009054906101000a9004600160a060020a0316600160a060020a0316638c52dc416040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015612ece57600080fd5b505af1158015612ee2573d6000803e3d6000fd5b505050505b6000809054906101000a9004600160a060020a0316600160a060020a0316637d64bcb46040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015612f3957600080fd5b505af1158015612f4d573d6000803e3d6000fd5b505050506040513d6020811015612f6357600080fd5b50612f6c905080565b565b6000612f7861161e565b151561301a576040805160e560020a62461bcd02815260206004820152604e60248201527f47657474696e6720646973636f756e7420726174652073686f756c642062652060448201527f706f737369626c65206f6e6c792062656c6f772074686520646973636f756e7460648201527f20746f6b656e73206c696d69742e000000000000000000000000000000000000608482015290519081900360a40190fd5b6111c86130456064613039600c5460025461339d90919063ffffffff16565b9063ffffffff6135d516565b6002549063ffffffff612abb16565b6130be826007836040518082805190602001908083835b6020831061308a5780518252601f19909201916020918201910161306b565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220929150506135ea565b81600160a060020a03167fbfec83d64eaa953f2708271a023ab9ee82057f8f3578d548c1a4ba0b5b7004898260405180806020018281038252838181518152602001915080519060200190808383600083811015612dab578181015183820152602001612d93565b60008054604080517f40c10f19000000000000000000000000000000000000000000000000000000008152600160a060020a03868116600483015260248201869052915191909216926340c10f1992604480820193602093909283900390910190829087803b15801561319857600080fd5b505af11580156131ac573d6000803e3d6000fd5b505050506040513d60208110156131c257600080fd5b50511515610c7357600080fd5b600160a060020a03811615156131e457600080fd5b600454604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600554421015801561326157506006544211155b151561326c57600080fd5b610c73828261360f565b60008060008060008060008060008097506133176000809054906101000a9004600160a060020a0316600160a060020a03166318160ddd6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156132dc57600080fd5b505af11580156132f0573d6000803e3d6000fd5b505050506040513d602081101561330657600080fd5b5051600b549063ffffffff612ca716565b96506133228a613630565b95508587101561338b57869450613337612f6e565b9350613349858563ffffffff6135d516565b925061335b8a8463ffffffff612ca716565b91506133726002548361339d90919063ffffffff16565b9050613384858263ffffffff612abb16565b975061338f565b8597505b509598975050505050505050565b60008215156133ae575060006112cd565b508181028183828115156133be57fe5b04146112cd57fe5b610c738282613126565b600154604051600160a060020a03909116903480156108fc02916000818181858888f1935050505015801561143a573d6000803e3d6000fd5b600160a060020a0316600090815260209190915260409020805460ff19169055565b60008054604080517f355274ea00000000000000000000000000000000000000000000000000000000815290518392600160a060020a03169163355274ea91600480830192602092919082900301818787803b15801561348a57600080fd5b505af115801561349e573d6000803e3d6000fd5b505050506040513d60208110156134b457600080fd5b5051600a5410613534576040805160e560020a62461bcd02815260206004820152603a60248201527f546f6b656e277320737570706c79206c696d69742073686f756c64206265206c60448201527f657373207468617420746f6b656e2720636170206c696d69742e000000000000606482015290519081900360840190fd5b6000809054906101000a9004600160a060020a0316600160a060020a031663355274ea6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561358657600080fd5b505af115801561359a573d6000803e3d6000fd5b505050506040513d60208110156135b057600080fd5b5051600a549092506135c990839063ffffffff612ca716565b9050610bf88382613126565b600081838115156135e257fe5b049392505050565b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b600160a060020a038216151561362457600080fd5b801515610c7357600080fd5b6000808215156136d6576040805160e560020a62461bcd02815260206004820152604360248201527f49742073686f756c6420626520706f737369626c6520746f2062757920746f6b60448201527f656e73206f6e6c792062792070726f766964696e67206e6f6e207a65726f204560648201527f54482e0000000000000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b6136de612f6e565b90506136f0838263ffffffff61339d16565b9392505050560077686974656c6973740000000000000000000000000000000000000000000000436c61696d20726566756e6473206973206f6e6c7920706f737369626c652069a165627a7a72305820bb5405e6f01f0b9b7660056e5e0ac00b5cb9c39aa5f6a48921e1b8906ad9b5ee002900000000000000000000000000000000000000000052b7d2dcc80cd2e40000000000000000000000000000000000000000000000000000000000000000000087000000000000000000000000e7f2ca9f90c486c675452514eb074a09128c69210000000000000000000000000ee12e6d46401e3199119c7cf3b95ad1592b392a000000000000000000000000113f7d9987d24c6588e4d2cbc7c1c8090109fa8f000000000000000000000000000000000000000000000000000000005c918281000000000000000000000000000000000000000000000000000000005d4190cf00000000000000000000000000000000000000000052b7d2dcc80cd2e40000000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000005ca3f77f000000000000000000000000000000000000000000084595161401484a0000000000000000000000000000000c5c553a0795db4b5e305ccf6c57fe885aadc0be0000000000000000000000000000000000000000000000056bc75e2d63100000000000000000000000000000000000000000000000000a968163f0a57b40000000000000000000000000000000000000000000000000021e19e0c9bab2400000",
  "constructorArguments": "00000000000000000000000000000000000000000052b7d2dcc80cd2e40000000000000000000000000000000000000000000000000000000000000000000087000000000000000000000000e7f2ca9f90c486c675452514eb074a09128c69210000000000000000000000000ee12e6d46401e3199119c7cf3b95ad1592b392a000000000000000000000000113f7d9987d24c6588e4d2cbc7c1c8090109fa8f000000000000000000000000000000000000000000000000000000005c918281000000000000000000000000000000000000000000000000000000005d4190cf00000000000000000000000000000000000000000052b7d2dcc80cd2e40000000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000005ca3f77f000000000000000000000000000000000000000000084595161401484a0000000000000000000000000000000c5c553a0795db4b5e305ccf6c57fe885aadc0be0000000000000000000000000000000000000000000000056bc75e2d63100000000000000000000000000000000000000000000000000a968163f0a57b40000000000000000000000000000000000000000000000000021e19e0c9bab2400000"
}