{
  "address": "0x4d13d624a87baa278733c068a174412afa9ca6c8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Eterbase Coin",
  "contractName": "XBase",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-19\n*/\n\npragma solidity ^0.5.7;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address who) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function transfer(address to, uint256 value) external returns (bool);\n    function approve(address spender, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface IERC223 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint);\n\n    function transfer(address to, uint value) external returns (bool);\n    function transfer(address to, uint value, bytes calldata data) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n}\n\ncontract ContractReceiver {\n    function tokenFallback(address _from, uint _value, bytes memory _data) public {\n        \n    }\n}\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error.\n */\nlibrary SafeMath {\n    /**\n      * @dev Multiplies two unsigned integers, reverts on overflow.\n      */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n      * @dev Integer division of two unsigned integers truncating the quotient,\n      * reverts on division by zero.\n      */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n      * @dev Subtracts two unsigned integers, reverts on overflow\n      * (i.e. if subtrahend is greater than minuend).\n      */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n      * @dev Adds two unsigned integers, reverts on overflow.\n      */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n      * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n      * reverts when dividing by zero.\n      */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n\ncontract StandardToken is IERC20, IERC223 {\n    uint256 public totalSupply;\n\n    using SafeMath for uint;\n\n    mapping (address => uint256) internal balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        //require(_value == 0 || allowed[msg.sender][_spender] == 0);\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    // Function that is called when a user or another contract wants to transfer funds.\n    function transfer(address _to, uint _value, bytes memory _data) public returns (bool success) {\n        if (isContract(_to)) {\n            return transferToContract(_to, _value, _data);\n        } else {\n            return transferToAddress(_to, _value, _data);\n        }\n    }\n\n    // Standard function transfer similar to ERC20 transfer with no _data.\n    // Added due to backwards compatibility reasons.\n    function transfer(address _to, uint _value) public returns (bool success) {\n        bytes memory empty;\n        if (isContract(_to)) {\n            return transferToContract(_to, _value, empty);\n        } else {\n            return transferToAddress(_to, _value, empty);\n        }\n    }\n\n    // Assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n    function isContract(address _addr) private view returns (bool is_contract) {\n        uint length;\n        require(_addr != address(0));\n        assembly {\n            //retrieve the size of the code on target address, this needs assembly\n            length := extcodesize(_addr)\n        }\n        return (length > 0);\n    }\n\n    // Function that is called when transaction target is an address.\n    function transferToAddress(address _to, uint _value, bytes memory _data) private returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        emit Transfer(msg.sender, _to, _value, _data);\n        return true;\n    }\n\n    // Function that is called when transaction target is a contract.\n    function transferToContract(address _to, uint _value, bytes memory _data) private returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        ContractReceiver receiver = ContractReceiver(_to);\n        receiver.tokenFallback(msg.sender, _value, _data);\n        emit Transfer(msg.sender, _to, _value);\n        emit Transfer(msg.sender, _to, _value, _data);\n        return true;\n    }\n}\n\ncontract XBase is StandardToken {\n    string public constant name = \"Eterbase Coin\";\n    string public constant symbol = \"XBASE\";\n    uint8 public constant decimals = 18;\n    uint256 public constant initialSupply = 1000000000 * 10 ** uint256(decimals);\n\n    constructor () public {\n        totalSupply = initialSupply;\n        balances[msg.sender] = initialSupply;\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b506b033b2e3c9fd0803ce8000000600081815533815260016020526040902055610c388061003f6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063661884631161008c578063a9059cbb11610066578063a9059cbb14610261578063be45fd621461028d578063d73dd62314610348578063dd62ed3e14610374576100cf565b8063661884631461020757806370a082311461023357806395d89b4114610259576100cf565b806306fdde03146100d4578063095ea7b31461015157806318160ddd1461019157806323b872dd146101ab578063313ce567146101e1578063378dc3dc146101ff575b600080fd5b6100dc6103a2565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101165781810151838201526020016100fe565b50505050905090810190601f1680156101435780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561016757600080fd5b506001600160a01b0381351690602001356103db565b604080519115158252519081900360200190f35b610199610442565b60408051918252519081900360200190f35b61017d600480360360608110156101c157600080fd5b506001600160a01b03813581169160208101359091169060400135610448565b6101e96105c0565b6040805160ff9092168252519081900360200190f35b6101996105c5565b61017d6004803603604081101561021d57600080fd5b506001600160a01b0381351690602001356105d5565b6101996004803603602081101561024957600080fd5b50356001600160a01b03166106c5565b6100dc6106e0565b61017d6004803603604081101561027757600080fd5b506001600160a01b038135169060200135610704565b61017d600480360360608110156102a357600080fd5b6001600160a01b03823516916020810135918101906060810160408201356401000000008111156102d357600080fd5b8201836020820111156102e557600080fd5b8035906020019184600183028401116401000000008311171561030757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610734945050505050565b61017d6004803603604081101561035e57600080fd5b506001600160a01b038135169060200135610761565b6101996004803603604081101561038a57600080fd5b506001600160a01b03813581169160200135166107fa565b6040518060400160405280600d81526020017f457465726261736520436f696e0000000000000000000000000000000000000081525081565b3360008181526002602090815260408083206001600160a01b038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a35060015b92915050565b60005481565b60006001600160a01b03831661045d57600080fd5b6001600160a01b03841660009081526001602052604090205482111561048257600080fd5b6001600160a01b03841660009081526002602090815260408083203384529091529020548211156104b257600080fd5b6001600160a01b0384166000908152600160205260409020546104db908363ffffffff61082516565b6001600160a01b038086166000908152600160205260408082209390935590851681522054610510908363ffffffff61083a16565b6001600160a01b038085166000908152600160209081526040808320949094559187168152600282528281203382529091522054610554908363ffffffff61082516565b6001600160a01b03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060015b9392505050565b601281565b6b033b2e3c9fd0803ce800000081565b3360009081526002602090815260408083206001600160a01b03861684529091528120548083111561062a573360009081526002602090815260408083206001600160a01b038816845290915281205561065f565b61063a818463ffffffff61082516565b3360009081526002602090815260408083206001600160a01b03891684529091529020555b3360008181526002602090815260408083206001600160a01b0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b6001600160a01b031660009081526001602052604090205490565b604051806040016040528060058152602001600160d81b6458424153450281525081565b600060606107118461084c565b156107295761072184848361086a565b91505061043c565b610721848483610aa8565b600061073f8461084c565b156107565761074f84848461086a565b90506105b9565b61074f848484610aa8565b3360009081526002602090815260408083206001600160a01b0386168452909152812054610795908363ffffffff61083a16565b3360008181526002602090815260408083206001600160a01b0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b60008282111561083457600080fd5b50900390565b6000828201838110156105b957600080fd5b6000806001600160a01b03831661086257600080fd5b50503b151590565b3360009081526001602052604081205483111561088657600080fd5b336000908152600160205260409020546108a6908463ffffffff61082516565b33600090815260016020526040808220929092556001600160a01b038616815220546108d8908463ffffffff61083a16565b6001600160a01b0385166000818152600160209081526040808320949094559251600160e11b63607705c50281523360048201818152602483018990526060604484019081528851606485015288518b9763c0ee0b8a9694958c958c959493608490920192860191908190849084905b83811015610960578181015183820152602001610948565b50505050905090810190601f16801561098d5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1580156109ae57600080fd5b505af11580156109c2573d6000803e3d6000fd5b50506040805187815290516001600160a01b03891693503392507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3826040518082805190602001908083835b60208310610a365780518252601f199092019160209182019101610a17565b51815160209384036101000a6000190180199092169116179052604080519290940182900382208a835293519395506001600160a01b038b16945033937fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c169350918290030190a4506001949350505050565b33600090815260016020526040812054831115610ac457600080fd5b33600090815260016020526040902054610ae4908463ffffffff61082516565b33600090815260016020526040808220929092556001600160a01b03861681522054610b16908463ffffffff61083a16565b6001600160a01b0385166000818152600160209081526040918290209390935580518681529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3816040518082805190602001908083835b60208310610b9b5780518252601f199092019160209182019101610b7c565b51815160209384036101000a60001901801990921691161790526040805192909401829003822089835293519395506001600160a01b038a16945033937fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c169350918290030190a4506001939250505056fea165627a7a72305820320b8a30809f7ebdafe2a41f33539b584fe3a5ba9a1cc2e0080509eb006eec250029"
}