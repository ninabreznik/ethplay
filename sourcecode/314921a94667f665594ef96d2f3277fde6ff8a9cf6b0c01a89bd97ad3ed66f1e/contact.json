{
  "address": "0x8f7f252c4499e5baa25d59967d7abad65e44115a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Distribution",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-27\n*/\n\npragma solidity ^0.4.13;\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract CanReclaimToken is Ownable {\n  using SafeERC20 for ERC20Basic;\n\n  /**\n   * @dev Reclaim all ERC20Basic compatible tokens\n   * @param token ERC20Basic The address of the token contract\n   */\n  function reclaimToken(ERC20Basic token) external onlyOwner {\n    uint256 balance = token.balanceOf(this);\n    token.safeTransfer(owner, balance);\n  }\n\n}\n\ncontract Claimable is Ownable {\n  address public pendingOwner;\n\n  /**\n   * @dev Modifier throws if called by any account other than the pendingOwner.\n   */\n  modifier onlyPendingOwner() {\n    require(msg.sender == pendingOwner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to set the pendingOwner address.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    pendingOwner = newOwner;\n  }\n\n  /**\n   * @dev Allows the pendingOwner address to finalize the transfer.\n   */\n  function claimOwnership() onlyPendingOwner public {\n    emit OwnershipTransferred(owner, pendingOwner);\n    owner = pendingOwner;\n    pendingOwner = address(0);\n  }\n}\n\ncontract Whitelist is Ownable {\n  mapping(address => bool) public whitelist;\n\n  event WhitelistedAddressAdded(address addr);\n  event WhitelistedAddressRemoved(address addr);\n\n  /**\n   * @dev Throws if called by any account that's not whitelisted.\n   */\n  modifier onlyWhitelisted() {\n    require(whitelist[msg.sender]);\n    _;\n  }\n\n  /**\n   * @dev add an address to the whitelist\n   * @param addr address\n   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n   */\n  function addAddressToWhitelist(address addr) onlyOwner public returns(bool success) {\n    if (!whitelist[addr]) {\n      whitelist[addr] = true;\n      emit WhitelistedAddressAdded(addr);\n      success = true;\n    }\n  }\n\n  /**\n   * @dev add addresses to the whitelist\n   * @param addrs addresses\n   * @return true if at least one address was added to the whitelist,\n   * false if all addresses were already in the whitelist\n   */\n  function addAddressesToWhitelist(address[] addrs) onlyOwner public returns(bool success) {\n    for (uint256 i = 0; i < addrs.length; i++) {\n      if (addAddressToWhitelist(addrs[i])) {\n        success = true;\n      }\n    }\n  }\n\n  /**\n   * @dev remove an address from the whitelist\n   * @param addr address\n   * @return true if the address was removed from the whitelist,\n   * false if the address wasn't in the whitelist in the first place\n   */\n  function removeAddressFromWhitelist(address addr) onlyOwner public returns(bool success) {\n    if (whitelist[addr]) {\n      whitelist[addr] = false;\n      emit WhitelistedAddressRemoved(addr);\n      success = true;\n    }\n  }\n\n  /**\n   * @dev remove addresses from the whitelist\n   * @param addrs addresses\n   * @return true if at least one address was removed from the whitelist,\n   * false if all addresses weren't in the whitelist in the first place\n   */\n  function removeAddressesFromWhitelist(address[] addrs) onlyOwner public returns(bool success) {\n    for (uint256 i = 0; i < addrs.length; i++) {\n      if (removeAddressFromWhitelist(addrs[i])) {\n        success = true;\n      }\n    }\n  }\n\n}\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeERC20 {\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    assert(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(\n    ERC20 token,\n    address from,\n    address to,\n    uint256 value\n  )\n    internal\n  {\n    assert(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    assert(token.approve(spender, value));\n  }\n}\n\ncontract Distribution is CanReclaimToken, Claimable, Whitelist {\n\n    using SafeERC20 for ERC20Basic;\n\n    event Distributed(address beneficiary, uint256 amount);\n\n    address[] public receivers;\n    // Also used to indicate the distribution state.\n    uint256 public amount = 0;\n    ERC20Basic public token;\n\n    constructor(ERC20Basic _token) public {\n        token = _token;\n    }\n\n    function setReceivers(address[] _receivers, uint256 _amount) onlyWhitelisted external {\n        // Be conservative about the size.\n        require(_receivers.length <= 80);\n        require(_amount > 0);\n\n        receivers = _receivers;\n        amount = _amount;\n    }\n\n    function distribute() onlyWhitelisted external {\n        require(receivers.length > 0);\n        require(amount > 0);\n        for (uint256 i = 0; i < receivers.length; ++i) {\n            address beneficiary = receivers[i];\n            token.safeTransfer(beneficiary, amount);\n            emit Distributed(beneficiary, amount);\n        }\n        // Clear.\n        amount = 0;\n        delete receivers;\n    }\n\n    function batchDistribute(\n        address[] batchReceivers,\n        uint256 batchAmount\n    ) onlyWhitelisted external\n    {\n        require(batchReceivers.length > 0);\n        require(batchAmount > 0);\n        for (uint256 i = 0; i < batchReceivers.length; ++i) {\n            address beneficiary = batchReceivers[i];\n            token.safeTransfer(beneficiary, batchAmount);\n            emit Distributed(beneficiary, batchAmount);\n        }\n    }\n    \n    function batchDistributeWithAmount(\n        address[] batchReceivers,\n        uint256[] batchAmounts\n    ) onlyWhitelisted external\n    {\n        require(batchReceivers.length > 0);\n        require(batchAmounts.length == batchReceivers.length);\n        for (uint256 i = 0; i < batchReceivers.length; ++i) {\n            address beneficiary = batchReceivers[i];\n            uint256 v = batchAmounts[i] * 1 ether;\n            token.safeTransfer(beneficiary, v);\n            emit Distributed(beneficiary, v);\n        }\n    }\n    \n\n    function finished() public view returns (bool) {\n        return amount == 0;\n    }\n}",
  "bytecode": "6080604052600060045534801561001557600080fd5b50604051602080610ce4833981016040525160008054600160a060020a0319908116331790915560058054600160a060020a0390931692909116919091179055610c80806100646000396000f3006080604052600436106100fb5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166317ffc320811461010057806324953eaa14610123578063286dd3f51461018c5780634e71e0c8146101ad5780637b9417c8146101c257806386420710146101e35780638da5cb5b146102075780639b19251a14610238578063aa8c217c14610259578063bef4876b14610280578063bfd772fc14610295578063cdd13589146102ad578063e2ec6ec3146102d9578063e30c39781461032e578063e4fc6b6d14610343578063f2fde38b14610358578063f7701ce814610379578063fc0c546a1461039d575b600080fd5b34801561010c57600080fd5b50610121600160a060020a03600435166103b2565b005b34801561012f57600080fd5b50604080516020600480358082013583810280860185019096528085526101789536959394602494938501929182918501908490808284375094975061047e9650505050505050565b604080519115158252519081900360200190f35b34801561019857600080fd5b50610178600160a060020a03600435166104dd565b3480156101b957600080fd5b50610121610574565b3480156101ce57600080fd5b50610178600160a060020a03600435166105fc565b3480156101ef57600080fd5b50610121602460048035828101929101359035610696565b34801561021357600080fd5b5061021c6106e3565b60408051600160a060020a039092168252519081900360200190f35b34801561024457600080fd5b50610178600160a060020a03600435166106f2565b34801561026557600080fd5b5061026e610707565b60408051918252519081900360200190f35b34801561028c57600080fd5b5061017861070d565b3480156102a157600080fd5b5061021c600435610715565b3480156102b957600080fd5b50610121602460048035828101929082013591813591820191013561073d565b3480156102e557600080fd5b50604080516020600480358082013583810280860185019096528085526101789536959394602494938501929182918501908490808284375094975061083e9650505050505050565b34801561033a57600080fd5b5061021c610897565b34801561034f57600080fd5b506101216108a6565b34801561036457600080fd5b50610121600160a060020a0360043516610998565b34801561038557600080fd5b506101216024600480358281019291013590356109de565b3480156103a957600080fd5b5061021c610ab4565b60008054600160a060020a031633146103ca57600080fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a038416916370a082319160248083019260209291908290030181600087803b15801561042b57600080fd5b505af115801561043f573d6000803e3d6000fd5b505050506040513d602081101561045557600080fd5b505160005490915061047a90600160a060020a0384811691168363ffffffff610ac316565b5050565b600080548190600160a060020a0316331461049857600080fd5b5060005b82518110156104d7576104c583828151811015156104b657fe5b906020019060200201516104dd565b156104cf57600191505b60010161049c565b50919050565b60008054600160a060020a031633146104f557600080fd5b600160a060020a03821660009081526002602052604090205460ff161561056f57600160a060020a038216600081815260026020908152604091829020805460ff19169055815192835290517ff1abf01a1043b7c244d128e8595cf0c1d10743b022b03a02dffd8ca3bf729f5a9281900390910190a15060015b919050565b600154600160a060020a0316331461058b57600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b60008054600160a060020a0316331461061457600080fd5b600160a060020a03821660009081526002602052604090205460ff16151561056f57600160a060020a038216600081815260026020908152604091829020805460ff19166001179055815192835290517fd1bba68c128cc3f427e5831b3c6f99f480b6efa6b9e80c757768f6124158cc3f9281900390910190a1506001919050565b3360009081526002602052604090205460ff1615156106b457600080fd5b60508211156106c257600080fd5b600081116106cf57600080fd5b6106db60038484610b78565b506004555050565b600054600160a060020a031681565b60026020526000908152604090205460ff1681565b60045481565b600454155b90565b600380548290811061072357fe5b600091825260209091200154600160a060020a0316905081565b336000908152600260205260408120548190819060ff16151561075f57600080fd5b6000861161076c57600080fd5b83861461077857600080fd5b600092505b858310156108355786868481811061079157fe5b90506020020135600160a060020a0316915084848481811015156107b157fe5b600554670de0b6b3a7640000602090920293909301350292506107e691600160a060020a03169050838363ffffffff610ac316565b60408051600160a060020a03841681526020810183905281517fb649c98f58055c520df0dcb5709eff2e931217ff2fb1e21376130d31bbb1c0af929181900390910190a182600101925061077d565b50505050505050565b600080548190600160a060020a0316331461085857600080fd5b5060005b82518110156104d757610885838281518110151561087657fe5b906020019060200201516105fc565b1561088f57600191505b60010161085c565b600154600160a060020a031681565b33600090815260026020526040812054819060ff1615156108c657600080fd5b6003546000106108d557600080fd5b6004546000106108e457600080fd5b600091505b60035482101561098557600380548390811061090157fe5b600091825260209091200154600454600554600160a060020a039283169350610933921690839063ffffffff610ac316565b60045460408051600160a060020a0384168152602081019290925280517fb649c98f58055c520df0dcb5709eff2e931217ff2fb1e21376130d31bbb1c0af9281900390910190a18160010191506108e9565b6000600481905561047a90600390610be8565b600054600160a060020a031633146109af57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b33600090815260026020526040812054819060ff1615156109fe57600080fd5b60008411610a0b57600080fd5b60008311610a1857600080fd5b600091505b83821015610aad57848483818110610a3157fe5b600554600160a060020a036020909202939093013581169350610a5e92169050828563ffffffff610ac316565b60408051600160a060020a03831681526020810185905281517fb649c98f58055c520df0dcb5709eff2e931217ff2fb1e21376130d31bbb1c0af929181900390910190a1816001019150610a1d565b5050505050565b600554600160a060020a031681565b82600160a060020a031663a9059cbb83836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610b3f57600080fd5b505af1158015610b53573d6000803e3d6000fd5b505050506040513d6020811015610b6957600080fd5b50511515610b7357fe5b505050565b828054828255906000526020600020908101928215610bd8579160200282015b82811115610bd857815473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03843516178255602090920191600190910190610b98565b50610be4929150610c09565b5090565b5080546000825590600052602060002090810190610c069190610c3a565b50565b61071291905b80821115610be457805473ffffffffffffffffffffffffffffffffffffffff19168155600101610c0f565b61071291905b80821115610be45760008155600101610c405600a165627a7a7230582005dd1596aa3aa7b1c11111d5ab1d12530fb9c068565f647e4e121a74a03b53c80029000000000000000000000000ea26c4ac16d4a5a106820bc8aee85fd0b7b2b664",
  "constructorArguments": "000000000000000000000000ea26c4ac16d4a5a106820bc8aee85fd0b7b2b664"
}