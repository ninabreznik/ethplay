{
  "address": "0x6aF6965775A2a2B0F2784C4B66d0657C90994330",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Agent",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "10000",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-17\n*/\n\n// File: contracts/standards/ERC1271.sol\n\npragma solidity 0.4.24;\n\n// ERC1271 on Feb 12th, 2019: https://github.com/ethereum/EIPs/blob/a97dc434930d0ccc4461c97d8c7a920dc585adf2/EIPS/eip-1271.md\n// Using `isValidSignature(bytes32,bytes)` even though the standard still hasn't been modified\n// Rationale: https://github.com/ethereum/EIPs/issues/1271#issuecomment-462719728\n\n\ncontract ERC1271 {\n    bytes4 constant public ERC1271_INTERFACE_ID = 0xfb855dc9; // this.isValidSignature.selector\n\n    bytes4 constant public ERC1271_RETURN_VALID_SIGNATURE =   0x20c13b0b; // TODO: Likely needs to be updated\n    bytes4 constant public ERC1271_RETURN_INVALID_SIGNATURE = 0x00000000;\n\n    /**\n    * @dev Function must be implemented by deriving contract\n    * @param _hash Arbitrary length data signed on the behalf of address(this)\n    * @param _signature Signature byte array associated with _data\n    * @return A bytes4 magic value 0x20c13b0b if the signature check passes, 0x00000000 if not\n    *\n    * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\n    * MUST allow external calls\n    */\n    function isValidSignature(bytes32 _hash, bytes memory _signature) public view returns (bytes4);\n\n    function returnIsValidSignatureMagicNumber(bool isValid) internal pure returns (bytes4) {\n        return isValid ? ERC1271_RETURN_VALID_SIGNATURE : ERC1271_RETURN_INVALID_SIGNATURE;\n    }\n}\n\n\ncontract ERC1271Bytes is ERC1271 {\n    /**\n    * @dev Default behavior of `isValidSignature(bytes,bytes)`, can be overloaded for custom validation\n    * @param _data Arbitrary length data signed on the behalf of address(this)\n    * @param _signature Signature byte array associated with _data\n    * @return A bytes4 magic value 0x20c13b0b if the signature check passes, 0x00000000 if not\n    *\n    * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\n    * MUST allow external calls\n    */\n    function isValidSignature(bytes _data, bytes _signature) public view returns (bytes4) {\n        return isValidSignature(keccak256(_data), _signature);\n    }\n}\n\n// File: contracts/SignatureValidator.sol\n\npragma solidity 0.4.24;\n\n// Inspired in https://github.com/horizon-games/multi-token-standard/blob/master/contracts/utils/SignatureValidator.sol\n// This should probably be moved into aOS: https://github.com/aragon/aragonOS/pull/442\n\n\n\nlibrary SignatureValidator {\n    enum SignatureMode {\n        Invalid, // 0x00\n        EIP712,  // 0x01\n        EthSign, // 0x02\n        ERC1271, // 0x03\n        NMode    // 0x04, to check if mode is specified, leave at the end\n    }\n\n    // bytes4(keccak256(\"isValidSignature(bytes,bytes)\")\n    bytes4 public constant ERC1271_RETURN_VALID_SIGNATURE = 0x20c13b0b;\n    uint256 internal constant ERC1271_ISVALIDSIG_MAX_GAS = 250000;\n\n    string private constant ERROR_INVALID_LENGTH_POP_BYTE = \"SIGVAL_INVALID_LENGTH_POP_BYTE\";\n\n    /// @dev Validates that a hash was signed by a specified signer.\n    /// @param hash Hash which was signed.\n    /// @param signer Address of the signer.\n    /// @param signature ECDSA signature along with the mode (0 = Invalid, 1 = EIP712, 2 = EthSign, 3 = ERC1271) {mode}{r}{s}{v}.\n    /// @return Returns whether signature is from a specified user.\n    function isValidSignature(bytes32 hash, address signer, bytes signature) internal view returns (bool) {\n        if (signature.length == 0) {\n            return false;\n        }\n\n        uint8 modeByte = uint8(signature[0]);\n        if (modeByte >= uint8(SignatureMode.NMode)) {\n            return false;\n        }\n        SignatureMode mode = SignatureMode(modeByte);\n\n        if (mode == SignatureMode.EIP712) {\n            return ecVerify(hash, signer, signature);\n        } else if (mode == SignatureMode.EthSign) {\n            return ecVerify(\n                keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)),\n                signer,\n                signature\n            );\n        } else if (mode == SignatureMode.ERC1271) {\n            // Pop the mode byte before sending it down the validation chain\n            return safeIsValidSignature(signer, hash, popFirstByte(signature));\n        } else {\n            return false;\n        }\n    }\n\n    function ecVerify(bytes32 hash, address signer, bytes memory signature) private pure returns (bool) {\n        (bool badSig, bytes32 r, bytes32 s, uint8 v) = unpackEcSig(signature);\n\n        if (badSig) {\n            return false;\n        }\n\n        return signer == ecrecover(hash, v, r, s);\n    }\n\n    function unpackEcSig(bytes memory signature) private pure returns (bool badSig, bytes32 r, bytes32 s, uint8 v) {\n        if (signature.length != 66) {\n            badSig = true;\n            return;\n        }\n\n        v = uint8(signature[65]);\n        assembly {\n            r := mload(add(signature, 33))\n            s := mload(add(signature, 65))\n        }\n\n        // Allow signature version to be 0 or 1\n        if (v < 27) {\n            v += 27;\n        }\n\n        if (v != 27 && v != 28) {\n            badSig = true;\n        }\n    }\n\n    function popFirstByte(bytes memory input) private pure returns (bytes memory output) {\n        uint256 inputLength = input.length;\n        require(inputLength > 0, ERROR_INVALID_LENGTH_POP_BYTE);\n\n        output = new bytes(inputLength - 1);\n\n        if (output.length == 0) {\n            return output;\n        }\n\n        uint256 inputPointer;\n        uint256 outputPointer;\n        assembly {\n            inputPointer := add(input, 0x21)\n            outputPointer := add(output, 0x20)\n        }\n        memcpy(outputPointer, inputPointer, output.length);\n    }\n\n    function safeIsValidSignature(address validator, bytes32 hash, bytes memory signature) private view returns (bool) {\n        bytes memory data = abi.encodeWithSelector(ERC1271(validator).isValidSignature.selector, hash, signature);\n        bytes4 erc1271Return = safeBytes4StaticCall(validator, data, ERC1271_ISVALIDSIG_MAX_GAS);\n        return erc1271Return == ERC1271_RETURN_VALID_SIGNATURE;\n    }\n\n    function safeBytes4StaticCall(address target, bytes data, uint256 maxGas) private view returns (bytes4 ret) {\n        uint256 gasLeft = gasleft();\n\n        uint256 callGas = gasLeft > maxGas ? maxGas : gasLeft;\n        bool ok;\n        assembly {\n            ok := staticcall(callGas, target, add(data, 0x20), mload(data), 0, 0)\n        }\n\n        if (!ok) {\n            return;\n        }\n\n        uint256 size;\n        assembly { size := returndatasize }\n        if (size != 32) {\n            return;\n        }\n\n        assembly {\n            let ptr := mload(0x40)       // get next free memory ptr\n            returndatacopy(ptr, 0, size) // copy return from above `staticcall`\n            ret := mload(ptr)            // read data at ptr and set it to be returned\n        }\n\n        return ret;\n    }\n\n    // From: https://github.com/Arachnid/solidity-stringutils/blob/master/src/strings.sol\n    function memcpy(uint256 dest, uint256 src, uint256 len) private pure {\n        // Copy word-length chunks while possible\n        for (; len >= 32; len -= 32) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n            dest += 32;\n            src += 32;\n        }\n\n        // Copy remaining bytes\n        uint mask = 256 ** (32 - len) - 1;\n        assembly {\n            let srcpart := and(mload(src), not(mask))\n            let destpart := and(mload(dest), mask)\n            mstore(dest, or(destpart, srcpart))\n        }\n    }\n}\n\n// File: contracts/standards/IERC165.sol\n\npragma solidity 0.4.24;\n\n\ninterface IERC165 {\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool);\n}\n\n// File: @aragon/os/contracts/common/UnstructuredStorage.sol\n\n/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\nlibrary UnstructuredStorage {\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\n        assembly { data := sload(position) }\n    }\n\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\n        assembly { data := sload(position) }\n    }\n\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\n        assembly { data := sload(position) }\n    }\n\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\n        assembly { data := sload(position) }\n    }\n\n    function setStorageBool(bytes32 position, bool data) internal {\n        assembly { sstore(position, data) }\n    }\n\n    function setStorageAddress(bytes32 position, address data) internal {\n        assembly { sstore(position, data) }\n    }\n\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\n        assembly { sstore(position, data) }\n    }\n\n    function setStorageUint256(bytes32 position, uint256 data) internal {\n        assembly { sstore(position, data) }\n    }\n}\n\n// File: @aragon/os/contracts/acl/IACL.sol\n\n/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ninterface IACL {\n    function initialize(address permissionsCreator) external;\n\n    // TODO: this should be external\n    // See https://github.com/ethereum/solidity/issues/4832\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\n}\n\n// File: @aragon/os/contracts/common/IVaultRecoverable.sol\n\n/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ninterface IVaultRecoverable {\n    event RecoverToVault(address indexed vault, address indexed token, uint256 amount);\n\n    function transferToVault(address token) external;\n\n    function allowRecoverability(address token) external view returns (bool);\n    function getRecoveryVault() external view returns (address);\n}\n\n// File: @aragon/os/contracts/kernel/IKernel.sol\n\n/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\n\n\ninterface IKernelEvents {\n    event SetApp(bytes32 indexed namespace, bytes32 indexed appId, address app);\n}\n\n\n// This should be an interface, but interfaces can't inherit yet :(\ncontract IKernel is IKernelEvents, IVaultRecoverable {\n    function acl() public view returns (IACL);\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\n\n    function setApp(bytes32 namespace, bytes32 appId, address app) public;\n    function getApp(bytes32 namespace, bytes32 appId) public view returns (address);\n}\n\n// File: @aragon/os/contracts/apps/AppStorage.sol\n\n/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\n\n\ncontract AppStorage {\n    using UnstructuredStorage for bytes32;\n\n    /* Hardcoded constants to save gas\n    bytes32 internal constant KERNEL_POSITION = keccak256(\"aragonOS.appStorage.kernel\");\n    bytes32 internal constant APP_ID_POSITION = keccak256(\"aragonOS.appStorage.appId\");\n    */\n    bytes32 internal constant KERNEL_POSITION = 0x4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b;\n    bytes32 internal constant APP_ID_POSITION = 0xd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b;\n\n    function kernel() public view returns (IKernel) {\n        return IKernel(KERNEL_POSITION.getStorageAddress());\n    }\n\n    function appId() public view returns (bytes32) {\n        return APP_ID_POSITION.getStorageBytes32();\n    }\n\n    function setKernel(IKernel _kernel) internal {\n        KERNEL_POSITION.setStorageAddress(address(_kernel));\n    }\n\n    function setAppId(bytes32 _appId) internal {\n        APP_ID_POSITION.setStorageBytes32(_appId);\n    }\n}\n\n// File: @aragon/os/contracts/acl/ACLSyntaxSugar.sol\n\n/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ncontract ACLSyntaxSugar {\n    function arr() internal pure returns (uint256[]) {\n        return new uint256[](0);\n    }\n\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\n        return arr(uint256(_a));\n    }\n\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\n        return arr(uint256(_a), uint256(_b));\n    }\n\n    function arr(address _a) internal pure returns (uint256[] r) {\n        return arr(uint256(_a));\n    }\n\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\n        return arr(uint256(_a), uint256(_b));\n    }\n\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\n        return arr(uint256(_a), _b, _c);\n    }\n\n    function arr(address _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\n        return arr(uint256(_a), _b, _c, _d);\n    }\n\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\n        return arr(uint256(_a), uint256(_b));\n    }\n\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\n    }\n\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\n        return arr(uint256(_a), uint256(_b), uint256(_c));\n    }\n\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\n        return arr(uint256(_a), uint256(_b), uint256(_c));\n    }\n\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\n        r = new uint256[](1);\n        r[0] = _a;\n    }\n\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\n        r = new uint256[](2);\n        r[0] = _a;\n        r[1] = _b;\n    }\n\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\n        r = new uint256[](3);\n        r[0] = _a;\n        r[1] = _b;\n        r[2] = _c;\n    }\n\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\n        r = new uint256[](4);\n        r[0] = _a;\n        r[1] = _b;\n        r[2] = _c;\n        r[3] = _d;\n    }\n\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\n        r = new uint256[](5);\n        r[0] = _a;\n        r[1] = _b;\n        r[2] = _c;\n        r[3] = _d;\n        r[4] = _e;\n    }\n}\n\n\ncontract ACLHelpers {\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\n        return uint8(_x >> (8 * 30));\n    }\n\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\n        return uint8(_x >> (8 * 31));\n    }\n\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\n        a = uint32(_x);\n        b = uint32(_x >> (8 * 4));\n        c = uint32(_x >> (8 * 8));\n    }\n}\n\n// File: @aragon/os/contracts/common/Uint256Helpers.sol\n\npragma solidity ^0.4.24;\n\n\nlibrary Uint256Helpers {\n    uint256 private constant MAX_UINT64 = uint64(-1);\n\n    string private constant ERROR_NUMBER_TOO_BIG = \"UINT64_NUMBER_TOO_BIG\";\n\n    function toUint64(uint256 a) internal pure returns (uint64) {\n        require(a <= MAX_UINT64, ERROR_NUMBER_TOO_BIG);\n        return uint64(a);\n    }\n}\n\n// File: @aragon/os/contracts/common/TimeHelpers.sol\n\n/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\n\ncontract TimeHelpers {\n    using Uint256Helpers for uint256;\n\n    /**\n    * @dev Returns the current block number.\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\n    *      tests.\n    */\n    function getBlockNumber() internal view returns (uint256) {\n        return block.number;\n    }\n\n    /**\n    * @dev Returns the current block number, converted to uint64.\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\n    *      tests.\n    */\n    function getBlockNumber64() internal view returns (uint64) {\n        return getBlockNumber().toUint64();\n    }\n\n    /**\n    * @dev Returns the current timestamp.\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\n    *      tests.\n    */\n    function getTimestamp() internal view returns (uint256) {\n        return block.timestamp; // solium-disable-line security/no-block-members\n    }\n\n    /**\n    * @dev Returns the current timestamp, converted to uint64.\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\n    *      tests.\n    */\n    function getTimestamp64() internal view returns (uint64) {\n        return getTimestamp().toUint64();\n    }\n}\n\n// File: @aragon/os/contracts/common/Initializable.sol\n\n/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\n\n\ncontract Initializable is TimeHelpers {\n    using UnstructuredStorage for bytes32;\n\n    // keccak256(\"aragonOS.initializable.initializationBlock\")\n    bytes32 internal constant INITIALIZATION_BLOCK_POSITION = 0xebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e;\n\n    string private constant ERROR_ALREADY_INITIALIZED = \"INIT_ALREADY_INITIALIZED\";\n    string private constant ERROR_NOT_INITIALIZED = \"INIT_NOT_INITIALIZED\";\n\n    modifier onlyInit {\n        require(getInitializationBlock() == 0, ERROR_ALREADY_INITIALIZED);\n        _;\n    }\n\n    modifier isInitialized {\n        require(hasInitialized(), ERROR_NOT_INITIALIZED);\n        _;\n    }\n\n    /**\n    * @return Block number in which the contract was initialized\n    */\n    function getInitializationBlock() public view returns (uint256) {\n        return INITIALIZATION_BLOCK_POSITION.getStorageUint256();\n    }\n\n    /**\n    * @return Whether the contract has been initialized by the time of the current block\n    */\n    function hasInitialized() public view returns (bool) {\n        uint256 initializationBlock = getInitializationBlock();\n        return initializationBlock != 0 && getBlockNumber() >= initializationBlock;\n    }\n\n    /**\n    * @dev Function to be called by top level contract after initialization has finished.\n    */\n    function initialized() internal onlyInit {\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(getBlockNumber());\n    }\n\n    /**\n    * @dev Function to be called by top level contract after initialization to enable the contract\n    *      at a future block number rather than immediately.\n    */\n    function initializedAt(uint256 _blockNumber) internal onlyInit {\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(_blockNumber);\n    }\n}\n\n// File: @aragon/os/contracts/common/Petrifiable.sol\n\n/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\n\ncontract Petrifiable is Initializable {\n    // Use block UINT256_MAX (which should be never) as the initializable date\n    uint256 internal constant PETRIFIED_BLOCK = uint256(-1);\n\n    function isPetrified() public view returns (bool) {\n        return getInitializationBlock() == PETRIFIED_BLOCK;\n    }\n\n    /**\n    * @dev Function to be called by top level contract to prevent being initialized.\n    *      Useful for freezing base contracts when they're used behind proxies.\n    */\n    function petrify() internal onlyInit {\n        initializedAt(PETRIFIED_BLOCK);\n    }\n}\n\n// File: @aragon/os/contracts/common/Autopetrified.sol\n\n/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\n\ncontract Autopetrified is Petrifiable {\n    constructor() public {\n        // Immediately petrify base (non-proxy) instances of inherited contracts on deploy.\n        // This renders them uninitializable (and unusable without a proxy).\n        petrify();\n    }\n}\n\n// File: @aragon/os/contracts/common/ConversionHelpers.sol\n\npragma solidity ^0.4.24;\n\n\nlibrary ConversionHelpers {\n    string private constant ERROR_IMPROPER_LENGTH = \"CONVERSION_IMPROPER_LENGTH\";\n\n    function dangerouslyCastUintArrayToBytes(uint256[] memory _input) internal pure returns (bytes memory output) {\n        // Force cast the uint256[] into a bytes array, by overwriting its length\n        // Note that the bytes array doesn't need to be initialized as we immediately overwrite it\n        // with the input and a new length. The input becomes invalid from this point forward.\n        uint256 byteLength = _input.length * 32;\n        assembly {\n            output := _input\n            mstore(output, byteLength)\n        }\n    }\n\n    function dangerouslyCastBytesToUintArray(bytes memory _input) internal pure returns (uint256[] memory output) {\n        // Force cast the bytes array into a uint256[], by overwriting its length\n        // Note that the uint256[] doesn't need to be initialized as we immediately overwrite it\n        // with the input and a new length. The input becomes invalid from this point forward.\n        uint256 intsLength = _input.length / 32;\n        require(_input.length == intsLength * 32, ERROR_IMPROPER_LENGTH);\n\n        assembly {\n            output := _input\n            mstore(output, intsLength)\n        }\n    }\n}\n\n// File: @aragon/os/contracts/common/ReentrancyGuard.sol\n\n/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\n\ncontract ReentrancyGuard {\n    using UnstructuredStorage for bytes32;\n\n    /* Hardcoded constants to save gas\n    bytes32 internal constant REENTRANCY_MUTEX_POSITION = keccak256(\"aragonOS.reentrancyGuard.mutex\");\n    */\n    bytes32 private constant REENTRANCY_MUTEX_POSITION = 0xe855346402235fdd185c890e68d2c4ecad599b88587635ee285bce2fda58dacb;\n\n    string private constant ERROR_REENTRANT = \"REENTRANCY_REENTRANT_CALL\";\n\n    modifier nonReentrant() {\n        // Ensure mutex is unlocked\n        require(!REENTRANCY_MUTEX_POSITION.getStorageBool(), ERROR_REENTRANT);\n\n        // Lock mutex before function call\n        REENTRANCY_MUTEX_POSITION.setStorageBool(true);\n\n        // Perform function call\n        _;\n\n        // Unlock mutex after function call\n        REENTRANCY_MUTEX_POSITION.setStorageBool(false);\n    }\n}\n\n// File: @aragon/os/contracts/lib/token/ERC20.sol\n\n// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/a9f910d34f0ab33a1ae5e714f69f9596a02b4d91/contracts/token/ERC20/ERC20.sol\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n    function totalSupply() public view returns (uint256);\n\n    function balanceOf(address _who) public view returns (uint256);\n\n    function allowance(address _owner, address _spender)\n        public view returns (uint256);\n\n    function transfer(address _to, uint256 _value) public returns (bool);\n\n    function approve(address _spender, uint256 _value)\n        public returns (bool);\n\n    function transferFrom(address _from, address _to, uint256 _value)\n        public returns (bool);\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n// File: @aragon/os/contracts/common/EtherTokenConstant.sol\n\n/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\n// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\n// contracts where both tokens and ETH are accepted\ncontract EtherTokenConstant {\n    address internal constant ETH = address(0);\n}\n\n// File: @aragon/os/contracts/common/IsContract.sol\n\n/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ncontract IsContract {\n    /*\n    * NOTE: this should NEVER be used for authentication\n    * (see pitfalls: https://github.com/fergarrui/ethereum-security/tree/master/contracts/extcodesize).\n    *\n    * This is only intended to be used as a sanity check that an address is actually a contract,\n    * RATHER THAN an address not being a contract.\n    */\n    function isContract(address _target) internal view returns (bool) {\n        if (_target == address(0)) {\n            return false;\n        }\n\n        uint256 size;\n        assembly { size := extcodesize(_target) }\n        return size > 0;\n    }\n}\n\n// File: @aragon/os/contracts/common/SafeERC20.sol\n\n// Inspired by AdEx (https://github.com/AdExNetwork/adex-protocol-eth/blob/b9df617829661a7518ee10f4cb6c4108659dd6d5/contracts/libs/SafeERC20.sol)\n// and 0x (https://github.com/0xProject/0x-monorepo/blob/737d1dc54d72872e24abce5a1dbe1b66d35fa21a/contracts/protocol/contracts/protocol/AssetProxy/ERC20Proxy.sol#L143)\n\npragma solidity ^0.4.24;\n\n\n\nlibrary SafeERC20 {\n    // Before 0.5, solidity has a mismatch between `address.transfer()` and `token.transfer()`:\n    // https://github.com/ethereum/solidity/issues/3544\n    bytes4 private constant TRANSFER_SELECTOR = 0xa9059cbb;\n\n    string private constant ERROR_TOKEN_BALANCE_REVERTED = \"SAFE_ERC_20_BALANCE_REVERTED\";\n    string private constant ERROR_TOKEN_ALLOWANCE_REVERTED = \"SAFE_ERC_20_ALLOWANCE_REVERTED\";\n\n    function invokeAndCheckSuccess(address _addr, bytes memory _calldata)\n        private\n        returns (bool)\n    {\n        bool ret;\n        assembly {\n            let ptr := mload(0x40)    // free memory pointer\n\n            let success := call(\n                gas,                  // forward all gas\n                _addr,                // address\n                0,                    // no value\n                add(_calldata, 0x20), // calldata start\n                mload(_calldata),     // calldata length\n                ptr,                  // write output over free memory\n                0x20                  // uint256 return\n            )\n\n            if gt(success, 0) {\n                // Check number of bytes returned from last function call\n                switch returndatasize\n\n                // No bytes returned: assume success\n                case 0 {\n                    ret := 1\n                }\n\n                // 32 bytes returned: check if non-zero\n                case 0x20 {\n                    // Only return success if returned data was true\n                    // Already have output in ptr\n                    ret := eq(mload(ptr), 1)\n                }\n\n                // Not sure what was returned: don't mark as success\n                default { }\n            }\n        }\n        return ret;\n    }\n\n    function staticInvoke(address _addr, bytes memory _calldata)\n        private\n        view\n        returns (bool, uint256)\n    {\n        bool success;\n        uint256 ret;\n        assembly {\n            let ptr := mload(0x40)    // free memory pointer\n\n            success := staticcall(\n                gas,                  // forward all gas\n                _addr,                // address\n                add(_calldata, 0x20), // calldata start\n                mload(_calldata),     // calldata length\n                ptr,                  // write output over free memory\n                0x20                  // uint256 return\n            )\n\n            if gt(success, 0) {\n                ret := mload(ptr)\n            }\n        }\n        return (success, ret);\n    }\n\n    /**\n    * @dev Same as a standards-compliant ERC20.transfer() that never reverts (returns false).\n    *      Note that this makes an external call to the token.\n    */\n    function safeTransfer(ERC20 _token, address _to, uint256 _amount) internal returns (bool) {\n        bytes memory transferCallData = abi.encodeWithSelector(\n            TRANSFER_SELECTOR,\n            _to,\n            _amount\n        );\n        return invokeAndCheckSuccess(_token, transferCallData);\n    }\n\n    /**\n    * @dev Same as a standards-compliant ERC20.transferFrom() that never reverts (returns false).\n    *      Note that this makes an external call to the token.\n    */\n    function safeTransferFrom(ERC20 _token, address _from, address _to, uint256 _amount) internal returns (bool) {\n        bytes memory transferFromCallData = abi.encodeWithSelector(\n            _token.transferFrom.selector,\n            _from,\n            _to,\n            _amount\n        );\n        return invokeAndCheckSuccess(_token, transferFromCallData);\n    }\n\n    /**\n    * @dev Same as a standards-compliant ERC20.approve() that never reverts (returns false).\n    *      Note that this makes an external call to the token.\n    */\n    function safeApprove(ERC20 _token, address _spender, uint256 _amount) internal returns (bool) {\n        bytes memory approveCallData = abi.encodeWithSelector(\n            _token.approve.selector,\n            _spender,\n            _amount\n        );\n        return invokeAndCheckSuccess(_token, approveCallData);\n    }\n\n    /**\n    * @dev Static call into ERC20.balanceOf().\n    * Reverts if the call fails for some reason (should never fail).\n    */\n    function staticBalanceOf(ERC20 _token, address _owner) internal view returns (uint256) {\n        bytes memory balanceOfCallData = abi.encodeWithSelector(\n            _token.balanceOf.selector,\n            _owner\n        );\n\n        (bool success, uint256 tokenBalance) = staticInvoke(_token, balanceOfCallData);\n        require(success, ERROR_TOKEN_BALANCE_REVERTED);\n\n        return tokenBalance;\n    }\n\n    /**\n    * @dev Static call into ERC20.allowance().\n    * Reverts if the call fails for some reason (should never fail).\n    */\n    function staticAllowance(ERC20 _token, address _owner, address _spender) internal view returns (uint256) {\n        bytes memory allowanceCallData = abi.encodeWithSelector(\n            _token.allowance.selector,\n            _owner,\n            _spender\n        );\n\n        (bool success, uint256 allowance) = staticInvoke(_token, allowanceCallData);\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\n\n        return allowance;\n    }\n}\n\n// File: @aragon/os/contracts/common/VaultRecoverable.sol\n\n/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\n\n\n\n\n\ncontract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\n    using SafeERC20 for ERC20;\n\n    string private constant ERROR_DISALLOWED = \"RECOVER_DISALLOWED\";\n    string private constant ERROR_VAULT_NOT_CONTRACT = \"RECOVER_VAULT_NOT_CONTRACT\";\n    string private constant ERROR_TOKEN_TRANSFER_FAILED = \"RECOVER_TOKEN_TRANSFER_FAILED\";\n\n    /**\n     * @notice Send funds to recovery Vault. This contract should never receive funds,\n     *         but in case it does, this function allows one to recover them.\n     * @param _token Token balance to be sent to recovery vault.\n     */\n    function transferToVault(address _token) external {\n        require(allowRecoverability(_token), ERROR_DISALLOWED);\n        address vault = getRecoveryVault();\n        require(isContract(vault), ERROR_VAULT_NOT_CONTRACT);\n\n        uint256 balance;\n        if (_token == ETH) {\n            balance = address(this).balance;\n            vault.transfer(balance);\n        } else {\n            ERC20 token = ERC20(_token);\n            balance = token.staticBalanceOf(this);\n            require(token.safeTransfer(vault, balance), ERROR_TOKEN_TRANSFER_FAILED);\n        }\n\n        emit RecoverToVault(vault, _token, balance);\n    }\n\n    /**\n    * @dev By default deriving from AragonApp makes it recoverable\n    * @param token Token address that would be recovered\n    * @return bool whether the app allows the recovery\n    */\n    function allowRecoverability(address token) public view returns (bool) {\n        return true;\n    }\n\n    // Cast non-implemented interface to be public so we can use it internally\n    function getRecoveryVault() public view returns (address);\n}\n\n// File: @aragon/os/contracts/evmscript/IEVMScriptExecutor.sol\n\n/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ninterface IEVMScriptExecutor {\n    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\n    function executorType() external pure returns (bytes32);\n}\n\n// File: @aragon/os/contracts/evmscript/IEVMScriptRegistry.sol\n\n/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\n\ncontract EVMScriptRegistryConstants {\n    /* Hardcoded constants to save gas\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = apmNamehash(\"evmreg\");\n    */\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\n}\n\n\ninterface IEVMScriptRegistry {\n    function addScriptExecutor(IEVMScriptExecutor executor) external returns (uint id);\n    function disableScriptExecutor(uint256 executorId) external;\n\n    // TODO: this should be external\n    // See https://github.com/ethereum/solidity/issues/4832\n    function getScriptExecutor(bytes script) public view returns (IEVMScriptExecutor);\n}\n\n// File: @aragon/os/contracts/kernel/KernelConstants.sol\n\n/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ncontract KernelAppIds {\n    /* Hardcoded constants to save gas\n    bytes32 internal constant KERNEL_CORE_APP_ID = apmNamehash(\"kernel\");\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = apmNamehash(\"acl\");\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = apmNamehash(\"vault\");\n    */\n    bytes32 internal constant KERNEL_CORE_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = 0x7e852e0fcfce6551c13800f1e7476f982525c2b5277ba14b24339c68416336d1;\n}\n\n\ncontract KernelNamespaceConstants {\n    /* Hardcoded constants to save gas\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = keccak256(\"core\");\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = keccak256(\"base\");\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = keccak256(\"app\");\n    */\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\n}\n\n// File: @aragon/os/contracts/evmscript/EVMScriptRunner.sol\n\n/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\n\n\n\n\n\ncontract EVMScriptRunner is AppStorage, Initializable, EVMScriptRegistryConstants, KernelNamespaceConstants {\n    string private constant ERROR_EXECUTOR_UNAVAILABLE = \"EVMRUN_EXECUTOR_UNAVAILABLE\";\n    string private constant ERROR_PROTECTED_STATE_MODIFIED = \"EVMRUN_PROTECTED_STATE_MODIFIED\";\n\n    /* This is manually crafted in assembly\n    string private constant ERROR_EXECUTOR_INVALID_RETURN = \"EVMRUN_EXECUTOR_INVALID_RETURN\";\n    */\n\n    event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData);\n\n    function getEVMScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\n        return IEVMScriptExecutor(getEVMScriptRegistry().getScriptExecutor(_script));\n    }\n\n    function getEVMScriptRegistry() public view returns (IEVMScriptRegistry) {\n        address registryAddr = kernel().getApp(KERNEL_APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\n        return IEVMScriptRegistry(registryAddr);\n    }\n\n    function runScript(bytes _script, bytes _input, address[] _blacklist)\n        internal\n        isInitialized\n        protectState\n        returns (bytes)\n    {\n        IEVMScriptExecutor executor = getEVMScriptExecutor(_script);\n        require(address(executor) != address(0), ERROR_EXECUTOR_UNAVAILABLE);\n\n        bytes4 sig = executor.execScript.selector;\n        bytes memory data = abi.encodeWithSelector(sig, _script, _input, _blacklist);\n\n        bytes memory output;\n        assembly {\n            let success := delegatecall(\n                gas,                // forward all gas\n                executor,           // address\n                add(data, 0x20),    // calldata start\n                mload(data),        // calldata length\n                0,                  // don't write output (we'll handle this ourselves)\n                0                   // don't write output\n            )\n\n            output := mload(0x40) // free mem ptr get\n\n            switch success\n            case 0 {\n                // If the call errored, forward its full error data\n                returndatacopy(output, 0, returndatasize)\n                revert(output, returndatasize)\n            }\n            default {\n                switch gt(returndatasize, 0x3f)\n                case 0 {\n                    // Need at least 0x40 bytes returned for properly ABI-encoded bytes values,\n                    // revert with \"EVMRUN_EXECUTOR_INVALID_RETURN\"\n                    // See remix: doing a `revert(\"EVMRUN_EXECUTOR_INVALID_RETURN\")` always results in\n                    // this memory layout\n                    mstore(output, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier\n                    mstore(add(output, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset\n                    mstore(add(output, 0x24), 0x000000000000000000000000000000000000000000000000000000000000001e) // reason length\n                    mstore(add(output, 0x44), 0x45564d52554e5f4558454355544f525f494e56414c49445f52455455524e0000) // reason\n\n                    revert(output, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)\n                }\n                default {\n                    // Copy result\n                    //\n                    // Needs to perform an ABI decode for the expected `bytes` return type of\n                    // `executor.execScript()` as solidity will automatically ABI encode the returned bytes as:\n                    //    [ position of the first dynamic length return value = 0x20 (32 bytes) ]\n                    //    [ output length (32 bytes) ]\n                    //    [ output content (N bytes) ]\n                    //\n                    // Perform the ABI decode by ignoring the first 32 bytes of the return data\n                    let copysize := sub(returndatasize, 0x20)\n                    returndatacopy(output, 0x20, copysize)\n\n                    mstore(0x40, add(output, copysize)) // free mem ptr set\n                }\n            }\n        }\n\n        emit ScriptResult(address(executor), _script, _input, output);\n\n        return output;\n    }\n\n    modifier protectState {\n        address preKernel = address(kernel());\n        bytes32 preAppId = appId();\n        _; // exec\n        require(address(kernel()) == preKernel, ERROR_PROTECTED_STATE_MODIFIED);\n        require(appId() == preAppId, ERROR_PROTECTED_STATE_MODIFIED);\n    }\n}\n\n// File: @aragon/os/contracts/apps/AragonApp.sol\n\n/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\n\n\n\n\n\n\n\n// Contracts inheriting from AragonApp are, by default, immediately petrified upon deployment so\n// that they can never be initialized.\n// Unless overriden, this behaviour enforces those contracts to be usable only behind an AppProxy.\n// ReentrancyGuard, EVMScriptRunner, and ACLSyntaxSugar are not directly used by this contract, but\n// are included so that they are automatically usable by subclassing contracts\ncontract AragonApp is AppStorage, Autopetrified, VaultRecoverable, ReentrancyGuard, EVMScriptRunner, ACLSyntaxSugar {\n    string private constant ERROR_AUTH_FAILED = \"APP_AUTH_FAILED\";\n\n    modifier auth(bytes32 _role) {\n        require(canPerform(msg.sender, _role, new uint256[](0)), ERROR_AUTH_FAILED);\n        _;\n    }\n\n    modifier authP(bytes32 _role, uint256[] _params) {\n        require(canPerform(msg.sender, _role, _params), ERROR_AUTH_FAILED);\n        _;\n    }\n\n    /**\n    * @dev Check whether an action can be performed by a sender for a particular role on this app\n    * @param _sender Sender of the call\n    * @param _role Role on this app\n    * @param _params Permission params for the role\n    * @return Boolean indicating whether the sender has the permissions to perform the action.\n    *         Always returns false if the app hasn't been initialized yet.\n    */\n    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\n        if (!hasInitialized()) {\n            return false;\n        }\n\n        IKernel linkedKernel = kernel();\n        if (address(linkedKernel) == address(0)) {\n            return false;\n        }\n\n        return linkedKernel.hasPermission(\n            _sender,\n            address(this),\n            _role,\n            ConversionHelpers.dangerouslyCastUintArrayToBytes(_params)\n        );\n    }\n\n    /**\n    * @dev Get the recovery vault for the app\n    * @return Recovery vault address for the app\n    */\n    function getRecoveryVault() public view returns (address) {\n        // Funds recovery via a vault is only available when used with a kernel\n        return kernel().getRecoveryVault(); // if kernel is not set, it will revert\n    }\n}\n\n// File: @aragon/os/contracts/common/DepositableStorage.sol\n\npragma solidity 0.4.24;\n\n\n\ncontract DepositableStorage {\n    using UnstructuredStorage for bytes32;\n\n    // keccak256(\"aragonOS.depositableStorage.depositable\")\n    bytes32 internal constant DEPOSITABLE_POSITION = 0x665fd576fbbe6f247aff98f5c94a561e3f71ec2d3c988d56f12d342396c50cea;\n\n    function isDepositable() public view returns (bool) {\n        return DEPOSITABLE_POSITION.getStorageBool();\n    }\n\n    function setDepositable(bool _depositable) internal {\n        DEPOSITABLE_POSITION.setStorageBool(_depositable);\n    }\n}\n\n// File: @aragon/apps-vault/contracts/Vault.sol\n\npragma solidity 0.4.24;\n\n\n\n\n\n\n\ncontract Vault is EtherTokenConstant, AragonApp, DepositableStorage {\n    using SafeERC20 for ERC20;\n\n    bytes32 public constant TRANSFER_ROLE = keccak256(\"TRANSFER_ROLE\");\n\n    string private constant ERROR_DATA_NON_ZERO = \"VAULT_DATA_NON_ZERO\";\n    string private constant ERROR_NOT_DEPOSITABLE = \"VAULT_NOT_DEPOSITABLE\";\n    string private constant ERROR_DEPOSIT_VALUE_ZERO = \"VAULT_DEPOSIT_VALUE_ZERO\";\n    string private constant ERROR_TRANSFER_VALUE_ZERO = \"VAULT_TRANSFER_VALUE_ZERO\";\n    string private constant ERROR_SEND_REVERTED = \"VAULT_SEND_REVERTED\";\n    string private constant ERROR_VALUE_MISMATCH = \"VAULT_VALUE_MISMATCH\";\n    string private constant ERROR_TOKEN_TRANSFER_FROM_REVERTED = \"VAULT_TOKEN_TRANSFER_FROM_REVERT\";\n    string private constant ERROR_TOKEN_TRANSFER_REVERTED = \"VAULT_TOKEN_TRANSFER_REVERTED\";\n\n    event VaultTransfer(address indexed token, address indexed to, uint256 amount);\n    event VaultDeposit(address indexed token, address indexed sender, uint256 amount);\n\n    /**\n    * @dev On a normal send() or transfer() this fallback is never executed as it will be\n    *      intercepted by the Proxy (see aragonOS#281)\n    */\n    function () external payable isInitialized {\n        require(msg.data.length == 0, ERROR_DATA_NON_ZERO);\n        _deposit(ETH, msg.value);\n    }\n\n    /**\n    * @notice Initialize Vault app\n    * @dev As an AragonApp it needs to be initialized in order for roles (`auth` and `authP`) to work\n    */\n    function initialize() external onlyInit {\n        initialized();\n        setDepositable(true);\n    }\n\n    /**\n    * @notice Deposit `_value` `_token` to the vault\n    * @param _token Address of the token being transferred\n    * @param _value Amount of tokens being transferred\n    */\n    function deposit(address _token, uint256 _value) external payable isInitialized {\n        _deposit(_token, _value);\n    }\n\n    /**\n    * @notice Transfer `_value` `_token` from the Vault to `_to`\n    * @param _token Address of the token being transferred\n    * @param _to Address of the recipient of tokens\n    * @param _value Amount of tokens being transferred\n    */\n    /* solium-disable-next-line function-order */\n    function transfer(address _token, address _to, uint256 _value)\n        external\n        authP(TRANSFER_ROLE, arr(_token, _to, _value))\n    {\n        require(_value > 0, ERROR_TRANSFER_VALUE_ZERO);\n\n        if (_token == ETH) {\n            require(_to.send(_value), ERROR_SEND_REVERTED);\n        } else {\n            require(ERC20(_token).safeTransfer(_to, _value), ERROR_TOKEN_TRANSFER_REVERTED);\n        }\n\n        emit VaultTransfer(_token, _to, _value);\n    }\n\n    function balance(address _token) public view returns (uint256) {\n        if (_token == ETH) {\n            return address(this).balance;\n        } else {\n            return ERC20(_token).staticBalanceOf(address(this));\n        }\n    }\n\n    /**\n    * @dev Disable recovery escape hatch, as it could be used\n    *      maliciously to transfer funds away from the vault\n    */\n    function allowRecoverability(address) public view returns (bool) {\n        return false;\n    }\n\n    function _deposit(address _token, uint256 _value) internal {\n        require(isDepositable(), ERROR_NOT_DEPOSITABLE);\n        require(_value > 0, ERROR_DEPOSIT_VALUE_ZERO);\n\n        if (_token == ETH) {\n            // Deposit is implicit in this case\n            require(msg.value == _value, ERROR_VALUE_MISMATCH);\n        } else {\n            require(\n                ERC20(_token).safeTransferFrom(msg.sender, address(this), _value),\n                ERROR_TOKEN_TRANSFER_FROM_REVERTED\n            );\n        }\n\n        emit VaultDeposit(_token, msg.sender, _value);\n    }\n}\n\n// File: @aragon/os/contracts/common/IForwarder.sol\n\n/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ninterface IForwarder {\n    function isForwarder() external pure returns (bool);\n\n    // TODO: this should be external\n    // See https://github.com/ethereum/solidity/issues/4832\n    function canForward(address sender, bytes evmCallScript) public view returns (bool);\n\n    // TODO: this should be external\n    // See https://github.com/ethereum/solidity/issues/4832\n    function forward(bytes evmCallScript) public;\n}\n\n// File: contracts/Agent.sol\n\n/*\n * SPDX-License-Identitifer:    GPL-3.0-or-later\n */\n\npragma solidity 0.4.24;\n\n\n\n\n\n\n\ncontract Agent is IERC165, ERC1271Bytes, IForwarder, IsContract, Vault {\n    bytes32 public constant EXECUTE_ROLE = keccak256(\"EXECUTE_ROLE\");\n    bytes32 public constant RUN_SCRIPT_ROLE = keccak256(\"RUN_SCRIPT_ROLE\");\n    bytes32 public constant ADD_PRESIGNED_HASH_ROLE = keccak256(\"ADD_PRESIGNED_HASH_ROLE\");\n    bytes32 public constant DESIGNATE_SIGNER_ROLE = keccak256(\"DESIGNATE_SIGNER_ROLE\");\n\n    bytes4 private constant ERC165_INTERFACE_ID = 0x01ffc9a7;\n\n    string private constant ERROR_EXECUTE_ETH_NO_DATA = \"AGENT_EXEC_ETH_NO_DATA\";\n    string private constant ERROR_EXECUTE_TARGET_NOT_CONTRACT = \"AGENT_EXEC_TARGET_NO_CONTRACT\";\n    string private constant ERROR_DESIGNATED_TO_SELF = \"AGENT_DESIGNATED_TO_SELF\";\n\n    mapping (bytes32 => bool) public isPresigned;\n    address public designatedSigner;\n\n    event Execute(address indexed sender, address indexed target, uint256 ethValue, bytes data);\n    event PresignHash(address indexed sender, bytes32 indexed hash);\n    event SetDesignatedSigner(address indexed sender, address indexed oldSigner, address indexed newSigner);\n\n    /**\n    * @notice Execute '`@radspec(_target, _data)`' on `_target``_ethValue == 0 ? '' : ' (Sending' + @tokenAmount(_ethValue, 0x00) + ')'`\n    * @param _target Address where the action is being executed\n    * @param _ethValue Amount of ETH from the contract that is sent with the action\n    * @param _data Calldata for the action\n    * @return Exits call frame forwarding the return data of the executed call (either error or success data)\n    */\n    function execute(address _target, uint256 _ethValue, bytes _data)\n        external // This function MUST always be external as the function performs a low level return, exiting the Agent app execution context\n        authP(EXECUTE_ROLE, arr(_target, _ethValue, uint256(getSig(_data)))) // bytes4 casted as uint256 sets the bytes as the LSBs\n    {\n        bool result = _target.call.value(_ethValue)(_data);\n\n        if (result) {\n            emit Execute(msg.sender, _target, _ethValue, _data);\n        }\n\n        assembly {\n            let size := returndatasize\n            let ptr := mload(0x40)\n            returndatacopy(ptr, 0, size)\n\n            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\n            // if the call returned error data, forward it\n            switch result case 0 { revert(ptr, size) }\n            default { return(ptr, size) }\n        }\n    }\n\n    /**\n    * @notice Set `_designatedSigner` as the designated signer of the app, which will be able to sign messages on behalf of the app\n    * @param _designatedSigner Address that will be able to sign messages on behalf of the app\n    */\n    function setDesignatedSigner(address _designatedSigner)\n        external\n        authP(DESIGNATE_SIGNER_ROLE, arr(_designatedSigner))\n    {\n        // Prevent an infinite loop by setting the app itself as its designated signer.\n        // An undetectable loop can be created by setting a different contract as the\n        // designated signer which calls back into `isValidSignature`.\n        // Given that `isValidSignature` is always called with just 50k gas, the max\n        // damage of the loop is wasting 50k gas.\n        require(_designatedSigner != address(this), ERROR_DESIGNATED_TO_SELF);\n\n        address oldDesignatedSigner = designatedSigner;\n        designatedSigner = _designatedSigner;\n\n        emit SetDesignatedSigner(msg.sender, oldDesignatedSigner, _designatedSigner);\n    }\n\n    /**\n    * @notice Pre-sign hash `_hash`\n    * @param _hash Hash that will be considered signed regardless of the signature checked with 'isValidSignature()'\n    */\n    function presignHash(bytes32 _hash)\n        external\n        authP(ADD_PRESIGNED_HASH_ROLE, arr(_hash))\n    {\n        isPresigned[_hash] = true;\n\n        emit PresignHash(msg.sender, _hash);\n    }\n\n    function isForwarder() external pure returns (bool) {\n        return true;\n    }\n\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool) {\n        return\n            interfaceId == ERC1271_INTERFACE_ID ||\n            interfaceId == ERC165_INTERFACE_ID;\n    }\n\n    /**\n    * @notice Execute the script as the Agent app\n    * @dev IForwarder interface conformance. Forwards any token holder action.\n    * @param _evmScript Script being executed\n    */\n    function forward(bytes _evmScript)\n        public\n        authP(RUN_SCRIPT_ROLE, arr(getScriptACLParam(_evmScript)))\n    {\n        bytes memory input = \"\"; // no input\n        address[] memory blacklist = new address[](0); // no addr blacklist, can interact with anything\n        runScript(_evmScript, input, blacklist);\n        // We don't need to emit an event here as EVMScriptRunner will emit ScriptResult if successful\n    }\n\n    function isValidSignature(bytes32 hash, bytes signature) public view returns (bytes4) {\n        // Short-circuit in case the hash was presigned. Optimization as performing calls\n        // and ecrecover is more expensive than an SLOAD.\n        if (isPresigned[hash]) {\n            return returnIsValidSignatureMagicNumber(true);\n        }\n\n        bool isValid;\n        if (designatedSigner == address(0)) {\n            isValid = false;\n        } else {\n            isValid = SignatureValidator.isValidSignature(hash, designatedSigner, signature);\n        }\n\n        return returnIsValidSignatureMagicNumber(isValid);\n    }\n\n    function canForward(address sender, bytes evmScript) public view returns (bool) {\n        uint256[] memory params = new uint256[](1);\n        params[0] = getScriptACLParam(evmScript);\n        return canPerform(sender, RUN_SCRIPT_ROLE, params);\n    }\n\n    function getScriptACLParam(bytes evmScript) internal pure returns (uint256) {\n        return uint256(keccak256(abi.encodePacked(evmScript)));\n    }\n\n    function getSig(bytes data) internal pure returns (bytes4 sig) {\n        if (data.length < 4) {\n            return;\n        }\n\n        assembly { sig := mload(add(data, 0x20)) }\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC1271_INTERFACE_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC1271_RETURN_INVALID_SIGNATURE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TRANSFER_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getEVMScriptExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RUN_SCRIPT_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDepositable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"presignHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DESIGNATE_SIGNER_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EXECUTE_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC1271_RETURN_VALID_SIGNATURE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_params\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEVMScriptRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_designatedSigner\",\"type\":\"address\"}],\"name\":\"setDesignatedSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"designatedSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADD_PRESIGNED_HASH_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isPresigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_ethValue\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"evmScript\",\"type\":\"bytes\"}],\"name\":\"canForward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_evmScript\",\"type\":\"bytes\"}],\"name\":\"forward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPetrified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isForwarder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Execute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"PresignHash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"oldSigner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newSigner\",\"type\":\"address\"}],\"name\":\"SetDesignatedSigner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VaultTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VaultDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"script\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"input\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"ScriptResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoverToVault\",\"type\":\"event\"}]",
  "bytecode": "6080604052620000176401000000006200001d810204565b6200023b565b6200003064010000000062000125810204565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a45440000000000000000602082015290156200010c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620000d0578181015183820152602001620000b6565b50505050905090810190601f168015620000fe5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506200012360001964010000000062000154810204565b565b60006200014f60008051602062003b388339815191526401000000006200271f6200023382021704565b905090565b6200016764010000000062000125810204565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a454400000000000000006020820152901562000206576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015620000d0578181015183820152602001620000b6565b506200023060008051602062003b3883398151915282640100000000620036776200023782021704565b50565b5490565b9055565b6138ed806200024b6000396000f3006080604052600436106101b65763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a781146103425780630803fac01461039057806311a5e409146103a55780631626ba7e146103ef5780631ce301811461044d578063206b60f91461046257806320c13b0b146104895780632914b9bd1461052057806332f0a3b5146105a2578063368c3c34146105b757806347e7ef24146105cc57806348a0c8dd146105f05780634c7ec0b01461060557806354842f141461061d5780635fa5e4e6146106325780637e7db6e11461064757806380afdea8146106755780638129fc1c1461068a5780638b3dd7491461069f5780639890cdca146106b45780639d4941d8146106c9578063a1658fad146106f7578063a479e5081461076b578063a83e52b414610780578063aae25051146107ae578063b06c4244146107c3578063b4fa653c146107d8578063b61d27f6146107f0578063beabacc81461082e578063c0774df314610865578063d4aae0c4146108d9578063d948d468146108ee578063de4796ed14610947578063e3d670d71461095c578063fd64eccb1461098a575b6101be61099f565b60408051808201909152601481527f494e49545f4e4f545f494e495449414c495a45440000000000000000000000006020820152901515610297576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561025c578181015183820152602001610244565b50505050905090810190601f1680156102895780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060408051808201909152601381527f5641554c545f444154415f4e4f4e5f5a45524f0000000000000000000000000060208201523615610334576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561025c578181015183820152602001610244565b506103406000346109c8565b005b34801561034e57600080fd5b5061037c7fffffffff0000000000000000000000000000000000000000000000000000000060043516610ce7565b604080519115158252519081900360200190f35b34801561039c57600080fd5b5061037c61099f565b3480156103b157600080fd5b506103ba610d82565b604080517fffffffff000000000000000000000000000000000000000000000000000000009092168252519081900360200190f35b3480156103fb57600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526103ba958335953695604494919390910191908190840183828082843750949750610da69650505050505050565b34801561045957600080fd5b506103ba610e32565b34801561046e57600080fd5b50610477610e37565b60408051918252519081900360200190f35b34801561049557600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526103ba94369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750610e6c9650505050505050565b34801561052c57600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610579943694929360249392840191908190840183828082843750949750610edb9650505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156105ae57600080fd5b50610579610fe7565b3480156105c357600080fd5b50610477611085565b61034073ffffffffffffffffffffffffffffffffffffffff600435166024356110ba565b3480156105fc57600080fd5b5061037c61116e565b34801561061157600080fd5b5061034060043561119e565b34801561062957600080fd5b506104776112e8565b34801561063e57600080fd5b5061047761131d565b34801561065357600080fd5b5061037c73ffffffffffffffffffffffffffffffffffffffff60043516611352565b34801561068157600080fd5b50610477611358565b34801561069657600080fd5b50610340611383565b3480156106ab57600080fd5b5061047761143c565b3480156106c057600080fd5b506103ba611467565b3480156106d557600080fd5b5061034073ffffffffffffffffffffffffffffffffffffffff6004351661148b565b34801561070357600080fd5b50604080516020600460443581810135838102808601850190965280855261037c95833573ffffffffffffffffffffffffffffffffffffffff169560248035963696956064959394920192918291850190849080828437509497506117ad9650505050505050565b34801561077757600080fd5b5061057961193d565b34801561078c57600080fd5b5061034073ffffffffffffffffffffffffffffffffffffffff600435166119ff565b3480156107ba57600080fd5b50610579611c16565b3480156107cf57600080fd5b50610477611c32565b3480156107e457600080fd5b5061037c600435611c67565b3480156107fc57600080fd5b506103406004803573ffffffffffffffffffffffffffffffffffffffff16906024803591604435918201910135611c7c565b34801561083a57600080fd5b5061034073ffffffffffffffffffffffffffffffffffffffff60043581169060243516604435611ea5565b34801561087157600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261037c95833573ffffffffffffffffffffffffffffffffffffffff169536956044949193909101919081908401838280828437509497506122509650505050505050565b3480156108e557600080fd5b506105796122d6565b3480156108fa57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526103409436949293602493928401919081908401838280828437509497506123019650505050505050565b34801561095357600080fd5b5061037c612424565b34801561096857600080fd5b5061047773ffffffffffffffffffffffffffffffffffffffff60043516612455565b34801561099657600080fd5b5061037c6124a9565b6000806109aa61143c565b905080158015906109c25750806109bf6124ae565b10155b91505090565b6109d061116e565b60408051808201909152601581527f5641554c545f4e4f545f4445504f53495441424c4500000000000000000000006020820152901515610a6d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561025c578181015183820152602001610244565b5060408051808201909152601881527f5641554c545f4445504f5349545f56414c55455f5a45524f0000000000000000602082015260008211610b0c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561025c578181015183820152602001610244565b5073ffffffffffffffffffffffffffffffffffffffff82161515610bcd5760408051808201909152601481527f5641554c545f56414c55455f4d49534d415443480000000000000000000000006020820152348214610bc7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561025c578181015183820152602001610244565b50610c96565b610bf573ffffffffffffffffffffffffffffffffffffffff831633308463ffffffff6124b216565b6040805190810160405280602081526020017f5641554c545f544f4b454e5f5452414e534645525f46524f4d5f524556455254815250901515610c94576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561025c578181015183820152602001610244565b505b604080518281529051339173ffffffffffffffffffffffffffffffffffffffff8516917f2790b90165fd3973ad7edde4eca71b4f8808dd4857a2a3a3e8ae5642a5cb196e9181900360200190a35050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167ffb855dc9000000000000000000000000000000000000000000000000000000001480610d7a57507fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000145b90505b919050565b7ffb855dc90000000000000000000000000000000000000000000000000000000081565b600082815260208190526040812054819060ff1615610dd057610dc96001612553565b9150610e2b565b60015473ffffffffffffffffffffffffffffffffffffffff161515610df757506000610e1f565b600154610e1c90859073ffffffffffffffffffffffffffffffffffffffff1685612588565b90505b610e2881612553565b91505b5092915050565b600081565b604080517f5452414e534645525f524f4c45000000000000000000000000000000000000008152905190819003600d01902081565b6000610ed4836040518082805190602001908083835b60208310610ea15780518252601f199092019160209182019101610e82565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902083610da6565b9392505050565b6000610ee561193d565b73ffffffffffffffffffffffffffffffffffffffff166304bf2a7f836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610f69578181015183820152602001610f51565b50505050905090810190601f168015610f965780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b158015610fb557600080fd5b505af1158015610fc9573d6000803e3d6000fd5b505050506040513d6020811015610fdf57600080fd5b505192915050565b6000610ff16122d6565b73ffffffffffffffffffffffffffffffffffffffff166332f0a3b56040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561105457600080fd5b505af1158015611068573d6000803e3d6000fd5b505050506040513d602081101561107e57600080fd5b5051905090565b604080517f52554e5f5343524950545f524f4c4500000000000000000000000000000000008152905190819003600f01902081565b6110c261099f565b60408051808201909152601481527f494e49545f4e4f545f494e495449414c495a4544000000000000000000000000602082015290151561115f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561025c578181015183820152602001610244565b5061116a82826109c8565b5050565b60006111997f665fd576fbbe6f247aff98f5c94a561e3f71ec2d3c988d56f12d342396c50cea61271f565b905090565b604080517f4144445f5052455349474e45445f484153485f524f4c45000000000000000000815290519081900360170190206111d982612723565b6111e43383836117ad565b60408051808201909152600f81527f4150505f415554485f4641494c454400000000000000000000000000000000006020820152901515611281576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561025c578181015183820152602001610244565b5060008381526020819052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905551849133917fb150212e573caa2a0216cf8f273ef996af143fd7b2d35abd92c8105536cac1609190a3505050565b604080517f44455349474e4154455f5349474e45525f524f4c4500000000000000000000008152905190819003601501902081565b604080517f455845435554455f524f4c4500000000000000000000000000000000000000008152905190819003600c01902081565b50600090565b60006111997fd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b61271f565b61138b61143c565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a4544000000000000000060208201529015611427576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561025c578181015183820152602001610244565b5061143061272e565b61143a600161280b565b565b60006111997febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e61271f565b7f20c13b0b0000000000000000000000000000000000000000000000000000000081565b600080600061149984611352565b60408051808201909152601281527f5245434f5645525f444953414c4c4f57454400000000000000000000000000006020820152901515611536576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561025c578181015183820152602001610244565b5061153f610fe7565b925061154a83612842565b60408051808201909152601a81527f5245434f5645525f5641554c545f4e4f545f434f4e545241435400000000000060208201529015156115e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561025c578181015183820152602001610244565b5073ffffffffffffffffffffffffffffffffffffffff84161515611652576040513031925073ffffffffffffffffffffffffffffffffffffffff84169083156108fc029084906000818181858888f1935050505015801561164c573d6000803e3d6000fd5b50611742565b508261167a73ffffffffffffffffffffffffffffffffffffffff82163063ffffffff61287c16565b91506116a373ffffffffffffffffffffffffffffffffffffffff8216848463ffffffff6129b516565b60408051808201909152601d81527f5245434f5645525f544f4b454e5f5452414e534645525f4641494c45440000006020820152901515611740576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561025c578181015183820152602001610244565b505b8373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02846040518082815260200191505060405180910390a350505050565b6000806117b861099f565b15156117c75760009150611935565b6117cf6122d6565b905073ffffffffffffffffffffffffffffffffffffffff811615156117f75760009150611935565b8073ffffffffffffffffffffffffffffffffffffffff1663fdef910686308761181f88612a4d565b6040517c010000000000000000000000000000000000000000000000000000000063ffffffff871602815273ffffffffffffffffffffffffffffffffffffffff808616600483019081529085166024830152604482018490526080606483019081528351608484015283519192909160a490910190602085019080838360005b838110156118b757818101518382015260200161189f565b50505050905090810190601f1680156118e45780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561190657600080fd5b505af115801561191a573d6000803e3d6000fd5b505050506040513d602081101561193057600080fd5b505191505b509392505050565b6000806119486122d6565b604080517fbe00bbd80000000000000000000000000000000000000000000000000000000081527fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb60048201527fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd616024820152905173ffffffffffffffffffffffffffffffffffffffff929092169163be00bbd8916044808201926020929091908290030181600087803b158015610fb557600080fd5b604080517f44455349474e4154455f5349474e45525f524f4c45000000000000000000000081529051908190036015019020600090611a3d83612a57565b611a483383836117ad565b60408051808201909152600f81527f4150505f415554485f4641494c454400000000000000000000000000000000006020820152901515611ae5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561025c578181015183820152602001610244565b5060408051808201909152601881527f4147454e545f44455349474e415445445f544f5f53454c460000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff8516301415611b9a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561025c578181015183820152602001610244565b506001805473ffffffffffffffffffffffffffffffffffffffff8681167fffffffffffffffffffffffff00000000000000000000000000000000000000008316811790935560405191169450849033907f3ecf54ed9acd859c5ee7f080794267b8f08b65d2446d816cef1efccd6d00d73590600090a450505050565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b604080517f4144445f5052455349474e45445f484153485f524f4c450000000000000000008152905190819003601701902081565b60006020819052908152604090205460ff1681565b600060405180807f455845435554455f524f4c450000000000000000000000000000000000000000815250600c0190506040518091039020611d178686611cf287878080601f01602080910402602001604051908101604052809392919081815260200183838082843750612a78945050505050565b7c01000000000000000000000000000000000000000000000000000000009004612a91565b611d223383836117ad565b60408051808201909152600f81527f4150505f415554485f4641494c454400000000000000000000000000000000006020820152901515611dbf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561025c578181015183820152602001610244565b508673ffffffffffffffffffffffffffffffffffffffff168686866040518083838082843782019150509250505060006040518083038185875af19250505092508215611e8d578673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fc25cfed0b22da6a56f0e5ff784979a0b8623eddf2aee4acd33c2adefb09cbab6888888604051808481526020018060200182810382528484828181526020019250808284376040519201829003965090945050505050a35b3d604051816000823e848015611ea1578282f35b8282fd5b604080517f5452414e534645525f524f4c45000000000000000000000000000000000000008152905190819003600d019020611ee2848484612abc565b611eed3383836117ad565b60408051808201909152600f81527f4150505f415554485f4641494c454400000000000000000000000000000000006020820152901515611f8a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561025c578181015183820152602001610244565b5060408051808201909152601981527f5641554c545f5452414e534645525f56414c55455f5a45524f00000000000000602082015260008411612029576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561025c578181015183820152602001610244565b5073ffffffffffffffffffffffffffffffffffffffff8516151561211e5760405173ffffffffffffffffffffffffffffffffffffffff85169084156108fc029085906000818181858888f193505050506040805190810160405280601381526020017f5641554c545f53454e445f524556455254454400000000000000000000000000815250901515612118576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561025c578181015183820152602001610244565b506121e4565b61214573ffffffffffffffffffffffffffffffffffffffff8616858563ffffffff6129b516565b60408051808201909152601d81527f5641554c545f544f4b454e5f5452414e534645525f524556455254454400000060208201529015156121e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561025c578181015183820152602001610244565b505b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f239e7f6cdac8fb35a788a46b431b54da87de90b82448a2c294be5e92a6e579af856040518082815260200191505060405180910390a35050505050565b604080516001808252818301909252600091606091906020808301908038833901905050905061227f83612af5565b81600081518110151561228e57fe5b60209081029091010152604080517f52554e5f5343524950545f524f4c4500000000000000000000000000000000008152905190819003600f019020610e28908590836117ad565b60006111997f4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b61271f565b604080517f52554e5f5343524950545f524f4c4500000000000000000000000000000000008152905190819003600f019020606090819061234961234485612af5565b612bdd565b6123543383836117ad565b60408051808201909152600f81527f4150505f415554485f4641494c4544000000000000000000000000000000000060208201529015156123f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561025c578181015183820152602001610244565b506040805160208082018352600080835283519081529081019092529450925061241c858585612c1e565b505050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61244f61143c565b14905090565b600073ffffffffffffffffffffffffffffffffffffffff8216151561247c57503031610d7d565b6124a273ffffffffffffffffffffffffffffffffffffffff83163063ffffffff61287c16565b9050610d7d565b600190565b4390565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905260009061254986826132f4565b9695505050505050565b600081612561576000610d7a565b507f20c13b0b00000000000000000000000000000000000000000000000000000000919050565b60008060008351600014156125a05760009250612716565b8360008151811015156125af57fe5b01602001517f0100000000000000000000000000000000000000000000000000000000000000908190048102049150600460ff8316106125f25760009250612716565b8160ff16600481111561260157fe5b9050600181600481111561261157fe5b141561262957612622868686613342565b9250612716565b600281600481111561263757fe5b14156126ea57604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083018a905283518084039091018152605c90920192839052815161262293918291908401908083835b602083106126b65780518252601f199092019160209182019101612697565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208686613342565b60038160048111156126f857fe5b141561271157612622858761270c8761340a565b613516565b600092505b50509392505050565b5490565b6060610d7a82612bdd565b61273661143c565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a45440000000000000000602082015290156127d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561025c578181015183820152602001610244565b5061143a6127de6124ae565b7febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e9063ffffffff61367716565b61283b7f665fd576fbbe6f247aff98f5c94a561e3f71ec2d3c988d56f12d342396c50cea8263ffffffff61367716565b50565b5490565b60008073ffffffffffffffffffffffffffffffffffffffff8316151561286b5760009150612876565b823b90506000811191505b50919050565b6040805173ffffffffffffffffffffffffffffffffffffffff83166024808301919091528251808303909101815260449091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f70a08231000000000000000000000000000000000000000000000000000000001790526000908180612909868461367b565b60408051808201909152601c81527f534146455f4552435f32305f42414c414e43455f524556455254454400000000602082015291935091508215156129ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561025c578181015183820152602001610244565b5095945050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052600090612a4485826132f4565b95945050505050565b8051602002815290565b6060610d7a8273ffffffffffffffffffffffffffffffffffffffff16612bdd565b6000600482511015612a8957610d7d565b506020015190565b6060612ab48473ffffffffffffffffffffffffffffffffffffffff1684846136ac565b949350505050565b6060612ab48473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16846136ac565b6000816040516020018082805190602001908083835b60208310612b2a5780518252601f199092019160209182019101612b0b565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310612b8d5780518252601f199092019160209182019101612b6e565b5181516020939093036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0180199091169216919091179052604051920182900390912095945050505050565b6040805160018082528183019092526060916020808301908038833901905050905081816000815181101515612c0f57fe5b60209081029091010152919050565b6060600080606080612c2e61099f565b60408051808201909152601481527f494e49545f4e4f545f494e495449414c495a45440000000000000000000000006020820152901515612ccb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561025c578181015183820152602001610244565b50600080612cd76122d6565b9150612ce1611358565b9050612cec8a610edb565b60408051808201909152601b81527f45564d52554e5f4558454355544f525f554e415641494c41424c450000000000602082015290965073ffffffffffffffffffffffffffffffffffffffff87161515612da2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561025c578181015183820152602001610244565b506040516060602482019081528b5160848301528b517f279cea3500000000000000000000000000000000000000000000000000000000975087928d928d928d9282916044820191606481019160a490910190602089019080838360005b83811015612e18578181015183820152602001612e00565b50505050905090810190601f168015612e455780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b83811015612e78578181015183820152602001612e60565b50505050905090810190601f168015612ea55780820380516001836020036101000a031916815260200191505b508481038252855181528551602091820191808801910280838360005b83811015612eda578181015183820152602001612ec2565b505050509050019650505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509350600080855160208701895af46040519350808015612fdf57603f3d118015612f7d5760203d03806020883e8601604052612fd9565b7f08c379a000000000000000000000000000000000000000000000000000000000865260206004870152601e60248701527f45564d52554e5f4558454355544f525f494e56414c49445f52455455524e00006044870152606486fd5b50612fe8565b3d6000863e3d85fd5b50508573ffffffffffffffffffffffffffffffffffffffff167f5229a5dba83a54ae8cb5b51bdd6de9474cacbe9dd332f5185f3a4f4f2e3f4ad98b8b8660405180806020018060200180602001848103845287818151815260200191508051906020019080838360005b8381101561306a578181015183820152602001613052565b50505050905090810190601f1680156130975780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b838110156130ca5781810151838201526020016130b2565b50505050905090810190601f1680156130f75780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b8381101561312a578181015183820152602001613112565b50505050905090810190601f1680156131575780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a28296508173ffffffffffffffffffffffffffffffffffffffff1661318a6122d6565b73ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601f81526020017f45564d52554e5f50524f5445435445445f53544154455f4d4f44494649454400815250901515613240576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561025c578181015183820152602001610244565b508061324a611358565b60408051808201909152601f81527f45564d52554e5f50524f5445435445445f53544154455f4d4f44494649454400602082015291146132e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561025c578181015183820152602001610244565b505050505050509392505050565b6000806040516020818551602087016000895af16000811115613338573d8015613325576020811461332e57613336565b60019350613336565b600183511493505b505b5090949350505050565b600080600080600061335386613725565b9350935093509350831561336a57600094506133ff565b60408051600080825260208083018085528c905260ff8516838501526060830187905260808301869052925160019360a0808501949193601f19840193928390039091019190865af11580156133c4573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161494505b505050509392505050565b805160408051808201909152601e81527f53494756414c5f494e56414c49445f4c454e4754485f504f505f42595445000060208201526060919060009081908184116134b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561025c578181015183820152602001610244565b50600183036040519080825280601f01601f1916602001820160405280156134e4578160200160208202803883390190505b5093508351600014156134f65761350e565b60218501915060208401905061350e81838651613805565b505050919050565b60408051602481018481526044820192835283516064830152835160009360609385937f1626ba7e000000000000000000000000000000000000000000000000000000009389938993909160849091019060208501908083838b5b83811015613589578181015183820152602001613571565b50505050905090810190601f1680156135b65780820380516001836020036101000a031916815260200191505b509350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050915061362986836203d090613867565b7fffffffff00000000000000000000000000000000000000000000000000000000167f20c13b0b00000000000000000000000000000000000000000000000000000000149695505050505050565b9055565b6000806000806040516020818751602089018a5afa925060008311156136a057805191505b50909590945092505050565b60408051600380825260808201909252606091602082018380388339019050509050838160008151811015156136de57fe5b6020908102909101015280518390829060019081106136f957fe5b60209081029091010152805182908290600290811061371457fe5b602090810290910101529392505050565b6000806000808451604214151561373f57600193506137fe565b84604181518110151561374e57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900490506021850151925060418501519150601b8160ff1610156137dc57601b015b8060ff16601b141580156137f457508060ff16601c14155b156137fe57600193505b9193509193565b60005b6020821061382a578251845260209384019390920191601f1990910190613808565b50905182516020929092036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0180199091169116179052565b60008060008060005a935085841161387f5783613881565b855b9250600080885160208a018b87fa915081151561389d576133ff565b503d602081146138ac576133ff565b604051816000823e51989750505050505050505600a165627a7a72305820324a9422dfa26c9009af3643b7d93fd6b650dbeb9b6cfe7fae7f1fae798b3a800029ebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e",
  "constructorArguments": "ebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e"
}