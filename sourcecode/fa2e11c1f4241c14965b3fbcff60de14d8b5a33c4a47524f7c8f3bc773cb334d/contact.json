{
  "address": "0x013f29b34338c3a01a3d2f55722465e98dd334d3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MultiSender",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-20\n*/\n\n/**\n *  \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n */\n \n\npragma solidity ^0.4.0;\n\n\n\n\nlibrary SafeMath {\n  function mul(uint a, uint b) internal pure  returns (uint) {\n    uint c = a * b;\n    require(a == 0 || c / a == b);\n    return c;\n  }\n  function div(uint a, uint b) internal pure returns (uint) {\n    require(b > 0);\n    uint c = a / b;\n    require(a == b * c + a % b);\n    return c;\n  }\n  function sub(uint a, uint b) internal pure returns (uint) {\n    require(b <= a);\n    return a - b;\n  }\n  function add(uint a, uint b) internal pure returns (uint) {\n    uint c = a + b;\n    require(c >= a);\n    return c;\n  }\n  function max64(uint64 a, uint64 b) internal  pure returns (uint64) {\n    return a >= b ? a : b;\n  }\n  function min64(uint64 a, uint64 b) internal  pure returns (uint64) {\n    return a < b ? a : b;\n  }\n  function max256(uint256 a, uint256 b) internal  pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n  function min256(uint256 a, uint256 b) internal  pure returns (uint256) {\n    return a < b ? a : b;\n  }\n}\n\n/**\n * @title Multi Sender, support ETH and ERC20 Tokens\n * @dev To Use this Dapp: http://multisender.phizhub.com\n*/\n\ncontract ERC20Basic {\n  uint public totalSupply;\n  function balanceOf(address who) public constant returns (uint);\n  function transfer(address to, uint value) public;\n  event Transfer(address indexed from, address indexed to, uint value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint);\n  function transferFrom(address from, address to, uint value) public;\n  function approve(address spender, uint value) public;\n  event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n/**\n * @title Multi Sender, support ETH and ERC20 Tokens\n * @dev To Use this Dapp: http://multisender.phizhub.com\n*/\n\ncontract BasicToken is ERC20Basic {\n\n  using SafeMath for uint;\n\n  mapping(address => uint) balances;\n\n  function transfer(address _to, uint _value) public{\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n  }\n\n  function balanceOf(address _owner) public constant returns (uint balance) {\n    return balances[_owner];\n  }\n}\n\n/**\n * @title Multi Sender, support ETH and ERC20 Tokens\n * @dev To Use this Dapp: http://multisender.phizhub.com\n*/\n\ncontract StandardToken is BasicToken, ERC20 {\n  mapping (address => mapping (address => uint)) allowed;\n\n  function transferFrom(address _from, address _to, uint _value) public {\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint _value) public{\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0)) ;\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n  }\n\n  function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n    return allowed[_owner][_spender];\n  }\n}\n\n/**\n * @title Multi Sender, support ETH and ERC20 Tokens\n * @dev To Use this Dapp: http://multisender.phizhub.com\n*/\n\ncontract Ownable {\n    address public owner;\n\n    function Ownable() public{\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n    function transferOwnership(address newOwner) onlyOwner public{\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n}\n\n/**\n * @title Multi Sender, support ETH and ERC20 Tokens\n * @dev To Use this Dapp: http://multisender.phizhub.com\n*/\n\ncontract MultiSender is Ownable{\n\n    using SafeMath for uint;\n\n\n    event LogTokenMultiSent(address token,uint256 total);\n    event LogGetToken(address token, address receiver, uint256 balance);\n    address public receiverAddress;\n    uint public txFee = 0 ether;\n    uint public VIPFee = 1 ether;\n\n    /* VIP List */\n    mapping(address => bool) public vipList;\n\n    /*\n  *  get balance\n  */\n  function getBalance(address _tokenAddress) onlyOwner public {\n      address _receiverAddress = getReceiverAddress();\n      if(_tokenAddress == address(0)){\n          require(_receiverAddress.send(address(this).balance));\n          return;\n      }\n      StandardToken token = StandardToken(_tokenAddress);\n      uint256 balance = token.balanceOf(this);\n      token.transfer(_receiverAddress, balance);\n      emit LogGetToken(_tokenAddress,_receiverAddress,balance);\n  }\n\n\n   /*\n  *  Register VIP\n  */\n  function registerVIP() payable public {\n      require(msg.value >= VIPFee);\n      address _receiverAddress = getReceiverAddress();\n      require(_receiverAddress.send(msg.value));\n      vipList[msg.sender] = true;\n  }\n\n  /*\n  *  VIP list\n  */\n  function addToVIPList(address[] _vipList) onlyOwner public {\n    for (uint i =0;i<_vipList.length;i++){\n      vipList[_vipList[i]] = true;\n    }\n  }\n\n  /*\n    * Remove address from VIP List by Owner\n  */\n  function removeFromVIPList(address[] _vipList) onlyOwner public {\n    for (uint i =0;i<_vipList.length;i++){\n      vipList[_vipList[i]] = false;\n    }\n   }\n\n    /*\n        * Check isVIP\n    */\n    function isVIP(address _addr) public view returns (bool) {\n        return _addr == owner || vipList[_addr];\n    }\n\n    /*\n        * set receiver address\n    */\n    function setReceiverAddress(address _addr) onlyOwner public {\n        require(_addr != address(0));\n        receiverAddress = _addr;\n    }\n\n\n    /*\n        * get receiver address\n    */\n    function getReceiverAddress() public view returns  (address){\n        if(receiverAddress == address(0)){\n            return owner;\n        }\n\n        return receiverAddress;\n    }\n\n     /*\n        * set vip fee\n    */\n    function setVIPFee(uint _fee) onlyOwner public {\n        VIPFee = _fee;\n    }\n\n    /*\n        * set tx fee\n    */\n    function setTxFee(uint _fee) onlyOwner public {\n        txFee = _fee;\n    }\n\n\n   function ethSendSameValue(address[] _to, uint _value) internal {\n\n        uint sendAmount = _to.length.sub(1).mul(_value);\n        uint remainingValue = msg.value;\n\n        bool vip = isVIP(msg.sender);\n        if(vip){\n            require(remainingValue >= sendAmount);\n        }else{\n            require(remainingValue >= sendAmount.add(txFee)) ;\n        }\n\t\trequire(_to.length <= 255);\n\n\t\tfor (uint8 i = 1; i < _to.length; i++) {\n\t\t\tremainingValue = remainingValue.sub(_value);\n\t\t\trequire(_to[i].send(_value));\n\t\t}\n\n\t    emit LogTokenMultiSent(0x000000000000000000000000000000000000bEEF,msg.value);\n    }\n\n    function ethSendDifferentValue(address[] _to, uint[] _value) internal {\n\n        uint sendAmount = _value[0];\n\t\tuint remainingValue = msg.value;\n\n\t    bool vip = isVIP(msg.sender);\n        if(vip){\n            require(remainingValue >= sendAmount);\n        }else{\n            require(remainingValue >= sendAmount.add(txFee)) ;\n        }\n\n\t\trequire(_to.length == _value.length);\n\t\trequire(_to.length <= 255);\n\n\t\tfor (uint8 i = 1; i < _to.length; i++) {\n\t\t\tremainingValue = remainingValue.sub(_value[i]);\n\t\t\trequire(_to[i].send(_value[i]));\n\t\t}\n\t    emit LogTokenMultiSent(0x000000000000000000000000000000000000bEEF,msg.value);\n\n    }\n\n    function coinSendSameValue(address _tokenAddress, address[] _to, uint _value)  internal {\n\n\t\tuint sendValue = msg.value;\n\t    bool vip = isVIP(msg.sender);\n        if(!vip){\n\t\t    require(sendValue >= txFee);\n        }\n\t\trequire(_to.length <= 255);\n\t\t\n\t\taddress from = msg.sender;\n\t\tuint256 sendAmount = _to.length.sub(1).mul(_value);\n\n        StandardToken token = StandardToken(_tokenAddress);\t\t\n\t\tfor (uint8 i = 1; i < _to.length; i++) {\n\t\t\ttoken.transferFrom(from, _to[i], _value);\n\t\t}\n\n\t    emit LogTokenMultiSent(_tokenAddress,sendAmount);\n\n\t}\n\n\tfunction coinSendDifferentValue(address _tokenAddress, address[] _to, uint[] _value)  internal  {\n\t\tuint sendValue = msg.value;\n\t    bool vip = isVIP(msg.sender);\n        if(!vip){\n\t\t    require(sendValue >= txFee);\n        }\n\n\t\trequire(_to.length == _value.length);\n\t\trequire(_to.length <= 255);\n\n        uint256 sendAmount = _value[0];\n        StandardToken token = StandardToken(_tokenAddress);\n        \n\t\tfor (uint8 i = 1; i < _to.length; i++) {\n\t\t\ttoken.transferFrom(msg.sender, _to[i], _value[i]);\n\t\t}\n        emit LogTokenMultiSent(_tokenAddress,sendAmount);\n\n\t}\n\n    /*\n        Send ether with the same value by a explicit call method\n    */\n\n    function sendEth(address[] _to, uint _value) payable public {\n\t\tethSendSameValue(_to,_value);\n\t}\n\n    /*\n        Send ether with the different value by a explicit call method\n    */\n    function multisend(address[] _to, uint[] _value) payable public {\n\t\t ethSendDifferentValue(_to,_value);\n\t}\n\n\t/*\n        Send ether with the different value by a implicit call method\n    */\n\n\tfunction mutiSendETHWithDifferentValue(address[] _to, uint[] _value) payable public {\n        ethSendDifferentValue(_to,_value);\n\t}\n\n\t/*\n        Send ether with the same value by a implicit call method\n    */\n\n    function mutiSendETHWithSameValue(address[] _to, uint _value) payable public {\n\t\tethSendSameValue(_to,_value);\n\t}\n\n\n    /*\n        Send coin with the same value by a implicit call method\n    */\n\n\tfunction mutiSendCoinWithSameValue(address _tokenAddress, address[] _to, uint _value)  payable public {\n\t    coinSendSameValue(_tokenAddress, _to, _value);\n\t}\n\n    /*\n        Send coin with the different value by a implicit call method, this method can save some fee.\n    */\n\tfunction mutiSendCoinWithDifferentValue(address _tokenAddress, address[] _to, uint[] _value) payable public {\n\t    coinSendDifferentValue(_tokenAddress, _to, _value);\n\t}\n\n    /*\n        Send coin with the different value by a explicit call method\n    */\n    function multisendToken(address _tokenAddress, address[] _to, uint[] _value) payable public {\n\t    coinSendDifferentValue(_tokenAddress, _to, _value);\n    }\n    /*\n        Send coin with the same value by a explicit call method\n    */\n    function drop(address _tokenAddress, address[] _to, uint _value)  payable public {\n\t\tcoinSendSameValue(_tokenAddress, _to, _value);\n\t}\n\n\n\n}",
  "bytecode": ""
}