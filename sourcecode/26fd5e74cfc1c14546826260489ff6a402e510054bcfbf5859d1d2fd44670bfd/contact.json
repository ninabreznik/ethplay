{
  "address": "0xe3e5ccc9c8ee95ddbeb08daa7c5001b88c0d632a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BangkaToken",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-21\n*/\n\npragma solidity ^0.5.1;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20 {\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n  \n  uint256 public totalSupply;\n  \n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  function allowance(address owner, address spender) public view returns (uint256);\n}\n\ncontract StandardToken is ERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) balances;\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n  \n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n  \n}\n\ncontract Pausable is Ownable {\n  event PausePublic(bool newState);\n  event PauseOwnerAdmin(bool newState);\n\n  bool public pausedPublic = true;\n  bool public pausedOwnerAdmin = false;\n\n  address public admin;\n\n  modifier whenNotPaused() {\n    if(pausedPublic) {\n      if(!pausedOwnerAdmin) {\n        require(msg.sender == admin || msg.sender == owner);\n      } else {\n        revert();\n      }\n    }\n    _;\n  }\n\n  function pause(bool newPausedPublic, bool newPausedOwnerAdmin) onlyOwner public {\n    require(!(newPausedPublic == false && newPausedOwnerAdmin == true));\n\n    pausedPublic = newPausedPublic;\n    pausedOwnerAdmin = newPausedOwnerAdmin;\n\n    emit PausePublic(newPausedPublic);\n    emit PauseOwnerAdmin(newPausedOwnerAdmin);\n  }\n  \n}\n\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\n\ncontract BangkaToken is PausableToken {\n    string  public  constant name = \"Bangka Token\";\n    string  public  constant symbol = \"BGT\";\n    uint8   public  constant decimals = 18;\n\n    modifier validDestination( address to )\n    {\n        require(to != address(0x0));\n        require(to != address(this));\n        _;\n    }\n\n    constructor ( address _admin, address _owner, uint _totalTokenAmount ) public\n    {\n        admin = _admin;\n        owner = _owner;\n\n        totalSupply = _totalTokenAmount;\n        balances[_owner] = _totalTokenAmount;\n        \n        emit Transfer(address(0x0), _owner, _totalTokenAmount);\n    }\n\n    function transfer(address _to, uint _value) validDestination(_to) public returns (bool) \n    {\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint _value) validDestination(_to) public returns (bool) \n    {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    event Burn(address indexed _burner, uint _value);\n\n    function burn(uint _value) public returns (bool)\n    {\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        emit Burn(msg.sender, _value);\n        emit Transfer(msg.sender, address(0x0), _value);\n        return true;\n    }\n\n    // save some gas by making only one contract call\n    function burnFrom(address _from, uint256 _value) public returns (bool) \n    {\n        assert( transferFrom( _from, msg.sender, _value ) );\n        return burn(_value);\n    }\n\n    function emergencyERC20Drain( ERC20 token, uint amount ) onlyOwner public {\n        // owner can drain tokens that are sent here by mistake\n        token.transfer( owner, amount );\n    }\n\n    event AdminTransferred(address indexed previousAdmin, address indexed newAdmin);\n\n    function changeAdmin(address newAdmin) onlyOwner public {\n        // owner can re-assign the admin\n        emit AdminTransferred(admin, newAdmin);\n        admin = newAdmin;\n    }\n}",
  "bytecode": "60806040526003805460a860020a60ff021960a060020a60ff0219909116740100000000000000000000000000000000000000001716905534801561004357600080fd5b506040516060806111f08339810180604052606081101561006357600080fd5b50805160208083015160409384015160048054600160a060020a03808716600160a060020a03199283161790925560038054928516929091168217905560008281558181526001855286812083905586518381529651959693959294919390927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35050506110f0806101006000396000f3fe608060405260043610610116577c0100000000000000000000000000000000000000000000000000000000600035046306fdde03811461011b578063095ea7b3146101a557806318160ddd146101f257806323b872dd1461021957806324bb7c261461025c578063313ce5671461027157806342966c681461029c57806364779ad7146102c657806366188463146102db57806370a082311461031457806379cc6790146103475780638da5cb5b146103805780638f283970146103b157806395d89b41146103e6578063a9059cbb146103fb578063d73dd62314610434578063db0e16f11461046d578063dd62ed3e146104a6578063ddeb5094146104e1578063f2fde38b14610515578063f851a44014610548575b600080fd5b34801561012757600080fd5b5061013061055d565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561016a578181015183820152602001610152565b50505050905090810190601f1680156101975780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101b157600080fd5b506101de600480360360408110156101c857600080fd5b50600160a060020a038135169060200135610594565b604080519115158252519081900360200190f35b3480156101fe57600080fd5b506102076105fb565b60408051918252519081900360200190f35b34801561022557600080fd5b506101de6004803603606081101561023c57600080fd5b50600160a060020a03813581169160208101359091169060400135610601565b34801561026857600080fd5b506101de610643565b34801561027d57600080fd5b50610286610653565b6040805160ff9092168252519081900360200190f35b3480156102a857600080fd5b506101de600480360360208110156102bf57600080fd5b5035610658565b3480156102d257600080fd5b506101de610715565b3480156102e757600080fd5b506101de600480360360408110156102fe57600080fd5b50600160a060020a038135169060200135610725565b34801561032057600080fd5b506102076004803603602081101561033757600080fd5b5035600160a060020a0316610785565b34801561035357600080fd5b506101de6004803603604081101561036a57600080fd5b50600160a060020a0381351690602001356107a0565b34801561038c57600080fd5b506103956107be565b60408051600160a060020a039092168252519081900360200190f35b3480156103bd57600080fd5b506103e4600480360360208110156103d457600080fd5b5035600160a060020a03166107cd565b005b3480156103f257600080fd5b5061013061084d565b34801561040757600080fd5b506101de6004803603604081101561041e57600080fd5b50600160a060020a038135169060200135610884565b34801561044057600080fd5b506101de6004803603604081101561045757600080fd5b50600160a060020a0381351690602001356108c4565b34801561047957600080fd5b506103e46004803603604081101561049057600080fd5b50600160a060020a038135169060200135610924565b3480156104b257600080fd5b50610207600480360360408110156104c957600080fd5b50600160a060020a03813581169160200135166109da565b3480156104ed57600080fd5b506103e46004803603604081101561050457600080fd5b508035151590602001351515610a05565b34801561052157600080fd5b506103e46004803603602081101561053857600080fd5b5035600160a060020a0316610af3565b34801561055457600080fd5b50610395610b88565b60408051808201909152600c81527f42616e676b6120546f6b656e0000000000000000000000000000000000000000602082015281565b60035460009060a060020a900460ff16156105ea5760035460a860020a900460ff16151561011657600454600160a060020a03163314806105df5750600354600160a060020a031633145b15156105ea57600080fd5b6105f48383610b97565b9392505050565b60005481565b600082600160a060020a038116151561061957600080fd5b600160a060020a03811630141561062f57600080fd5b61063a858585610bfd565b95945050505050565b60035460a060020a900460ff1681565b601281565b33600090815260016020526040812054610678908363ffffffff610c5e16565b336000908152600160205260408120919091555461069c908363ffffffff610c5e16565b60005560408051838152905133917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a260408051838152905160009133917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3506001919050565b60035460a860020a900460ff1681565b60035460009060a060020a900460ff161561077b5760035460a860020a900460ff16151561011657600454600160a060020a03163314806107705750600354600160a060020a031633145b151561077b57600080fd5b6105f48383610c70565b600160a060020a031660009081526001602052604090205490565b60006107ad833384610601565b15156107b557fe5b6105f482610658565b600354600160a060020a031681565b600354600160a060020a031633146107e457600080fd5b600454604051600160a060020a038084169216907ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec690600090a36004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60408051808201909152600381527f4247540000000000000000000000000000000000000000000000000000000000602082015281565b600082600160a060020a038116151561089c57600080fd5b600160a060020a0381163014156108b257600080fd5b6108bc8484610d60565b949350505050565b60035460009060a060020a900460ff161561091a5760035460a860020a900460ff16151561011657600454600160a060020a031633148061090f5750600354600160a060020a031633145b151561091a57600080fd5b6105f48383610dc0565b600354600160a060020a0316331461093b57600080fd5b600354604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810184905290519184169163a9059cbb916044808201926020929091908290030181600087803b1580156109aa57600080fd5b505af11580156109be573d6000803e3d6000fd5b505050506040513d60208110156109d457600080fd5b50505050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600160a060020a03163314610a1c57600080fd5b81158015610a2c57506001811515145b15610a3657600080fd5b6003805482151560a860020a0275ff0000000000000000000000000000000000000000001985151560a060020a810274ff00000000000000000000000000000000000000001990941693909317161790915560408051918252517fa14d191ca4f53bfcf003c65d429362010a2d3d68bc0c50cce4bdc0fccf661fb09181900360200190a160408051821515815290517fc77636fc4a62a1fa193ef538c0b7993a1313a0d9c0a9173058cebcd3239ef7b59181900360200190a15050565b600354600160a060020a03163314610b0a57600080fd5b600160a060020a0381161515610b1f57600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600454600160a060020a031681565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60035460009060a060020a900460ff1615610c535760035460a860020a900460ff16151561011657600454600160a060020a0316331480610c485750600354600160a060020a031633145b1515610c5357600080fd5b6108bc848484610e59565b600082821115610c6a57fe5b50900390565b336000908152600260209081526040808320600160a060020a038616845290915281205480831115610cc557336000908152600260209081526040808320600160a060020a0388168452909152812055610cfa565b610cd5818463ffffffff610c5e16565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b60035460009060a060020a900460ff1615610db65760035460a860020a900460ff16151561011657600454600160a060020a0316331480610dab5750600354600160a060020a031633145b1515610db657600080fd5b6105f48383610fd2565b336000908152600260209081526040808320600160a060020a0386168452909152812054610df4908363ffffffff6110b516565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b6000600160a060020a0383161515610e7057600080fd5b600160a060020a038416600090815260016020526040902054821115610e9557600080fd5b600160a060020a0384166000908152600260209081526040808320338452909152902054821115610ec557600080fd5b600160a060020a038416600090815260016020526040902054610eee908363ffffffff610c5e16565b600160a060020a038086166000908152600160205260408082209390935590851681522054610f23908363ffffffff6110b516565b600160a060020a038085166000908152600160209081526040808320949094559187168152600282528281203382529091522054610f67908363ffffffff610c5e16565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b6000600160a060020a0383161515610fe957600080fd5b3360009081526001602052604090205482111561100557600080fd5b33600090815260016020526040902054611025908363ffffffff610c5e16565b3360009081526001602052604080822092909255600160a060020a03851681522054611057908363ffffffff6110b516565b600160a060020a0384166000818152600160209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b6000828201838110156105f457fefea165627a7a7230582084119595fae62ab649ebbddd70b4446f6201d04c6b6ebf63ee5b8da95f93b6960029000000000000000000000000dee4b04232fd030fbff0ce92f427f2c32a39044c000000000000000000000000dee4b04232fd030fbff0ce92f427f2c32a39044c000000000000000000000000000000000000000000a56fa5b99019a5c8000000",
  "constructorArguments": "000000000000000000000000dee4b04232fd030fbff0ce92f427f2c32a39044c000000000000000000000000dee4b04232fd030fbff0ce92f427f2c32a39044c000000000000000000000000000000000000000000a56fa5b99019a5c8000000"
}