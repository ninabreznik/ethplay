{
  "address": "0xb30d7c1e6c74e46e9034f13740b7f10e39860cee",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ReceiverPays",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-20\n*/\n\npragma solidity ^0.4.20;\n\ncontract ReceiverPays {\n    address owner = msg.sender;\n\n    mapping(uint256 => bool) usedNonces;\n\n    // Funds are sent at deployment time.\n    function ReceiverPays() public payable { }\n\n\n    function claimPayment(uint256 amount, uint256 nonce, bytes sig) public {\n        require(!usedNonces[nonce]);\n        usedNonces[nonce] = true;\n\n        // This recreates the message that was signed on the client.\n        bytes32 message = prefixed(keccak256(msg.sender, amount, nonce, this));\n\n        require(recoverSigner(message, sig) == owner);\n\n        msg.sender.transfer(amount);\n    }\n\n    // Destroy contract and reclaim leftover funds.\n    function kill() public {\n        require(msg.sender == owner);\n        selfdestruct(msg.sender);\n    }\n\n\n    // Signature methods\n\n    function splitSignature(bytes sig)\n        internal\n        pure\n        returns (uint8, bytes32, bytes32)\n    {\n        require(sig.length == 65);\n\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        assembly {\n            // first 32 bytes, after the length prefix\n            r := mload(add(sig, 32))\n            // second 32 bytes\n            s := mload(add(sig, 64))\n            // final byte (first byte of the next 32 bytes)\n            v := byte(0, mload(add(sig, 96)))\n        }\n\n        return (v, r, s);\n    }\n\n    function recoverSigner(bytes32 message, bytes sig)\n        internal\n        pure\n        returns (address)\n    {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n\n        (v, r, s) = splitSignature(sig);\n\n        return ecrecover(message, v, r, s);\n    }\n\n    // Builds a prefixed hash to mimic the behavior of eth_sign.\n    function prefixed(bytes32 hash) internal pure returns (bytes32) {\n        return keccak256(\"\\x19Ethereum Signed Message:\\n32\", hash);\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"claimPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"}]",
  "bytecode": "608060405260008054600160a060020a03191633179055610309806100256000396000f30060806040526004361061004b5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166341c0e1b58114610050578063a90ae88714610067575b600080fd5b34801561005c57600080fd5b506100656100c7565b005b34801561007357600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526100659482359460248035953695946064949201919081908401838280828437509497506100ee9650505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146100eb57600080fd5b33ff5b60008281526001602052604081205460ff161561010a57600080fd5b600083815260016020819052604091829020805460ff1916909117905580516c0100000000000000000000000033810282526014820187905260348201869052300260548201529051908190036068019020610165906101df565b60005490915073ffffffffffffffffffffffffffffffffffffffff1661018b828461021d565b73ffffffffffffffffffffffffffffffffffffffff16146101ab57600080fd5b604051339085156108fc029086906000818181858888f193505050501580156101d8573d6000803e3d6000fd5b5050505050565b604080517f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c8101839052905190819003603c019020919050565b60008060008061022c856102a4565b60408051600080825260208083018085528d905260ff8716838501526060830186905260808301859052925195985093965091945060019360a0808401949293601f19830193908390039091019190865af115801561028f573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b600080600080600080865160411415156102bd57600080fd5b505050506020830151604084015160609094015160001a949093925090505600a165627a7a72305820e7e047d1ebac0ef7eef06d1c2fd4e65a5dcc99701d0480f2fddf2b583d73071a0029"
}