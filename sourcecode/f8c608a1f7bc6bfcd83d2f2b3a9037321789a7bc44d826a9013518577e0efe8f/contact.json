{
  "address": "0x8ba93580092f054bc21951a21f2756eabb317aea",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FFUELCoinTokenCrowdSale",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-11\n*/\n\npragma solidity ^0.4.18;\n\n// File: contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: contracts/token/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: contracts/token/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n// File: contracts/token/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/token/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: contracts/token/MintableToken.sol\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n// File: contracts/FFUELCoinToken.sol\n\ncontract FFUELCoinToken is MintableToken {\n    string public constant name = \"FIFO FUEL\";\n    string public constant symbol = \"FFUEL\";\n    uint8 public decimals = 18;\n    bool public tradingStarted = false;\n\n    // version cache buster\n    string public constant version = \"v2\";\n\n    // allow exceptional transfer for sender address - this mapping  can be modified only before the starting rounds\n    mapping (address => bool) public transferable;\n\n    /**\n     * @dev modifier that throws if spender address is not allowed to transfer\n     * and the trading is not enabled\n     */\n    modifier allowTransfer(address _spender) {\n\n        require(tradingStarted || transferable[_spender]);\n        _;\n    }\n    /**\n    *\n    * Only the owner of the token smart contract can add allow token to be transfer before the trading has started\n    *\n    */\n\n    function modifyTransferableHash(address _spender, bool value) onlyOwner public {\n        transferable[_spender] = value;\n    }\n\n    /**\n     * @dev Allows the owner to enable the trading.\n     */\n    function startTrading() onlyOwner public {\n        tradingStarted = true;\n    }\n\n    /**\n     * @dev Allows anyone to transfer the tokens once trading has started\n     * @param _to the recipient address of the tokens.\n     * @param _value number of tokens to be transfered.\n     */\n    function transfer(address _to, uint _value) allowTransfer(msg.sender) public returns (bool){\n        return super.transfer(_to, _value);\n    }\n\n    /**\n     * @dev Allows anyone to transfer the  tokens once trading has started or if the spender is part of the mapping\n\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint the amout of tokens to be transfered\n     */\n    function transferFrom(address _from, address _to, uint _value) allowTransfer(_from) public returns (bool){\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender when not paused.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n    function approve(address _spender, uint256 _value) public allowTransfer(_spender) returns (bool) {\n        return super.approve(_spender, _value);\n    }\n\n    /**\n     * Adding whenNotPaused\n     */\n    function increaseApproval(address _spender, uint _addedValue) public allowTransfer(_spender) returns (bool success) {\n        return super.increaseApproval(_spender, _addedValue);\n    }\n\n    /**\n     * Adding whenNotPaused\n     */\n    function decreaseApproval(address _spender, uint _subtractedValue) public allowTransfer(_spender) returns (bool success) {\n        return super.decreaseApproval(_spender, _subtractedValue);\n    }\n}\n\n// File: contracts/crowdsale/Crowdsale.sol\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale.\n * Crowdsales have a start and end timestamps, where investors can make\n * token purchases and the crowdsale will assign them tokens based\n * on a token per ETH rate. Funds collected are forwarded to a wallet\n * as they arrive.\n */\ncontract Crowdsale {\n  using SafeMath for uint256;\n\n  // The token being sold\n  MintableToken public token;\n\n  // start and end timestamps where investments are allowed (both inclusive)\n  uint256 public startTime;\n  uint256 public endTime;\n\n  // address where funds are collected\n  address public wallet;\n\n  // how many token units a buyer gets per wei\n  uint256 public rate;\n\n  // amount of raised money in wei\n  uint256 public weiRaised;\n\n  /**\n   * event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n\n  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n    require(_startTime >= now);\n    require(_endTime >= _startTime);\n    require(_rate > 0);\n    require(_wallet != address(0));\n\n    token = createTokenContract();\n    startTime = _startTime;\n    endTime = _endTime;\n    rate = _rate;\n    wallet = _wallet;\n  }\n\n  // creates the token to be sold.\n  // override this method to have crowdsale of a specific mintable token.\n  function createTokenContract() internal returns (MintableToken) {\n    return new MintableToken();\n  }\n\n\n  // fallback function can be used to buy tokens\n  function () external payable {\n    buyTokens(msg.sender);\n  }\n\n  // low level token purchase function\n  // override to create custom buy\n  function buyTokens(address beneficiary) public payable {\n    require(beneficiary != address(0));\n    require(validPurchase());\n\n    uint256 weiAmount = msg.value;\n\n    // calculate token amount to be created\n    uint256 tokens = weiAmount.mul(rate);\n\n    // update state\n    weiRaised = weiRaised.add(weiAmount);\n\n    token.mint(beneficiary, tokens);\n    emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n\n    forwardFunds();\n  }\n\n  // send ether to the fund collection wallet\n  // overrided to create custom fund forwarding mechanisms\n  function forwardFunds() internal {\n    wallet.transfer(msg.value);\n  }\n\n  // @return true if the transaction can buy tokens\n  function validPurchase() internal view returns (bool) {\n    bool withinPeriod = now >= startTime && now <= endTime;\n    bool nonZeroPurchase = msg.value != 0;\n    return withinPeriod && nonZeroPurchase;\n  }\n\n  // @return true if crowdsale event has ended\n  function hasEnded() public view returns (bool) {\n    return now > endTime;\n  }\n\n\n}\n\n// File: contracts/crowdsale/FinalizableCrowdsale.sol\n\n/**\n * @title FinalizableCrowdsale\n * @dev Extension of Crowdsale where an owner can do extra work\n * after finishing.\n */\ncontract FinalizableCrowdsale is Crowdsale, Ownable {\n  using SafeMath for uint256;\n\n  bool public isFinalized = false;\n\n  event Finalized();\n\n  /**\n   * @dev Must be called after crowdsale ends, to do some extra finalization\n   * work. Calls the contract's finalization function.\n   */\n  function finalize() onlyOwner public {\n    require(!isFinalized);\n    require(hasEnded());\n\n    finalization();\n    emit Finalized();\n\n    isFinalized = true;\n  }\n\n  /**\n   * @dev Can be overridden to add finalization logic. The overriding function\n   * should call super.finalization() to ensure the chain of finalization is\n   * executed entirely.\n   */\n  function finalization() internal{\n  }\n}\n\n// File: contracts/FFUELCoinTokenCrowdSale.sol\n\ncontract FFUELCoinTokenCrowdSale is FinalizableCrowdsale {\n    using SafeMath for uint256;\n\n\n    uint256 public numberOfPurchasers = 0;\n\n    // maximum tokens that can be minted in this crowd sale\n    uint256 public maxTokenSupply = 0;\n\n    // amounts of tokens already minted at the begining of this crowd sale - initialised later by the constructor\n    uint256 public initialTokenAmount = 0;\n\n    // version cache buster\n    string public constant version = \"v2\";\n\n    // pending contract owner\n    address public pendingOwner;\n\n    // minimum amount to participate\n    uint256 public minimumAmount = 0;\n\n    //\n    FFUELCoinToken public token;\n\n    // white listing admin - initialised later by the constructor\n    address public whiteListingAdmin;\n    address public rateAdmin;\n\n\n    bool public preSaleMode = true;\n    uint256 public tokenRateGwei;\n    address vested;\n    uint256 vestedAmount;\n\n    function FFUELCoinTokenCrowdSale(\n        uint256 _startTime,\n        uint256 _endTime,\n        uint256 _rate,\n        uint256 _minimumAmount,\n        uint256 _maxTokenSupply,\n        address _wallet,\n        address _pendingOwner,\n        address _whiteListingAdmin,\n        address _rateAdmin,\n        address _vested,\n        uint256 _vestedAmount,\n        FFUELCoinToken _token\n    )\n    FinalizableCrowdsale()\n    Crowdsale(_startTime, _endTime, _rate, _wallet) public\n    {\n        require(_pendingOwner != address(0));\n        require(_minimumAmount >= 0);\n        require(_maxTokenSupply > 0);\n\n        pendingOwner = _pendingOwner;\n        minimumAmount = _minimumAmount;\n        maxTokenSupply = _maxTokenSupply;\n\n        // whitelisting admin\n        setAdmin(_whiteListingAdmin, true);\n        setAdmin(_rateAdmin, false);\n\n        vested = _vested;\n        vestedAmount = _vestedAmount;\n\n        token=_token;\n    }\n\n\n    /**\n   * @dev Calculates the amount of  coins the buyer gets\n   * @param weiAmount uint the amount of wei send to the contract\n   * @return uint the amount of tokens the buyer gets\n   */\n    function computeTokenWithBonus(uint256 weiAmount) public view returns (uint256) {\n        uint256 tokens_ = 0;\n\n        if (weiAmount >= 100000 ether) {\n\n            tokens_ = weiAmount.mul(50).div(100);\n\n        } else if (weiAmount < 100000 ether && weiAmount >= 50000 ether) {\n\n            tokens_ = weiAmount.mul(35).div(100);\n\n        } else if (weiAmount < 50000 ether && weiAmount >= 10000 ether) {\n\n            tokens_ = weiAmount.mul(25).div(100);\n\n        } else if (weiAmount < 10000 ether && weiAmount >= 2500 ether) {\n\n            tokens_ = weiAmount.mul(15).div(100);\n        }\n\n\n        return tokens_;\n    }\n\n    /**\n    *\n    * Create the token on the fly, owner is the contract, not the contract owner yet\n    *\n    **/\n    function createTokenContract() internal returns (MintableToken) {\n        return token;\n    }\n\n    // low level token purchase function\n    function buyTokens(address beneficiary) public payable {\n        require(beneficiary != address(0), \"not for 0x0\");\n        //\n        require(validPurchase(), \"Crowd sale not started or ended, or min amount too low\");\n        // buying can only begins as soon as the ownership has been transferred\n        require(owner == pendingOwner, \"ownership transfer not done\");\n\n        require(tokenRateGwei != 0, \"rate invalid\");\n\n        // validate KYC here\n        // if not part of kyc then throw\n        bool cleared;\n        uint16 contributor_get;\n        address ref;\n        uint16 affiliate_get;\n\n        (cleared, contributor_get, ref, affiliate_get) = getContributor(beneficiary);\n\n        // Transaction do not happen if the contributor is not KYC cleared\n        require(cleared, \"not whitelisted\");\n\n        uint256 weiAmount = msg.value;\n\n        // make sure we accept only the minimum contribution\n        require(weiAmount > 0);\n\n        // Compute the number of tokens per Gwei\n        uint256 tokens = weiAmount.div(1000000000).mul(tokenRateGwei);\n\n        // compute the amount of bonus, from the contribution amount\n        uint256 bonus = computeTokenWithBonus(tokens);\n\n        // compute the amount of token bonus for the contributor thank to his referral\n        uint256 contributorGet = tokens.mul(contributor_get).div(10000);\n\n        // Sum it all\n        tokens = tokens.add(bonus);\n        tokens = tokens.add(contributorGet);\n\n        token.mint(beneficiary, tokens);\n        emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n\n        // update\n        weiRaised = weiRaised.add(weiAmount);\n        numberOfPurchasers = numberOfPurchasers + 1;\n\n        forwardFunds();\n\n        // ------------------------------------------------------------------\n        // compute the amount of token bonus that the referral get :\n        // only if KYC cleared, only if enough tokens still available\n        // ------------------------------------------------------------------\n        bool refCleared;\n        (refCleared) = getClearance(ref);\n        if (refCleared && ref != beneficiary)\n        {\n            // recompute the tokens amount using only the rate\n            tokens = weiAmount.div(1000000000).mul(tokenRateGwei);\n\n            // compute the amount of token for the affiliate\n            uint256 affiliateGet = tokens.mul(affiliate_get).div(10000);\n\n            // capped to a maxTokenSupply\n            // make sure we can not mint more token than expected\n            // we do not throw here as if this edge case happens it can be dealt with of chain\n            if (token.totalSupply() + affiliateGet <= maxTokenSupply)\n            {\n                // Mint the token\n                token.mint(ref, affiliateGet);\n                emit TokenPurchase(ref, ref, 0, affiliateGet);\n            }\n        }\n    }\n\n    // overriding Crowdsale#validPurchase to add extra cap logic\n    // @return true if investors can buy at the moment\n    function validPurchase() internal view returns (bool) {\n\n        // make sure we accept only the minimum contribution\n        bool minAmount = (msg.value >= minimumAmount);\n\n        // cap crowdsaled to a maxTokenSupply\n        // make sure we can not mint more token than expected\n        bool lessThanMaxSupply = (token.totalSupply() + msg.value.div(1000000000).mul(tokenRateGwei)) <= maxTokenSupply;\n\n        //bool withinCap = weiRaised.add(msg.value) <= cap;\n        return super.validPurchase() && minAmount && lessThanMaxSupply;\n    }\n\n    // overriding Crowdsale#hasEnded to add cap logic\n    // @return true if crowdsale event has ended\n    function hasEnded() public view returns (bool) {\n        bool capReached = token.totalSupply() >= maxTokenSupply;\n        return super.hasEnded() || capReached;\n    }\n\n\n    /**\n      *\n      * Called when the admin function finalize is called :\n      *\n      * it mint the remaining amount to have the supply exactly as planned\n      * it transfer the ownership of the token to the owner of the smart contract\n      *\n      */\n    function finalization() internal {\n        //\n        // send back to the owner the remaining tokens before finishing minting\n        // it ensure that there is only a exact maxTokenSupply token minted ever\n        //\n        uint256 remainingTokens = maxTokenSupply - token.totalSupply();\n\n        // mint the remaining amount and assign them to the owner\n        token.mint(owner, remainingTokens);\n        emit TokenPurchase(owner, owner, 0, remainingTokens);\n\n        // finalize the refundable inherited contract\n        super.finalization();\n\n        // no more minting allowed - immutable\n        token.finishMinting();\n\n        // transfer the token owner ship from the contract address to the real owner\n        token.transferOwnership(owner);\n    }\n\n\n    /**\n      *\n      * Admin functions only called by owner:\n      * Can change events dates\n      *\n      */\n    function changeDates(uint256 _startTime, uint256 _endTime) public onlyOwner {\n        require(_endTime >= _startTime, \"End time need to be in the > _startTime\");\n        startTime = _startTime;\n        endTime = _endTime;\n    }\n\n    /**\n      *\n      * Admin functions only called by owner:\n      * Change the owner\n      *\n      */\n    function transferOwnerShipToPendingOwner() public {\n\n        // only the pending owner can change the ownership\n        require(msg.sender == pendingOwner, \"only the pending owner can change the ownership\");\n\n        // can only be changed one time\n        require(owner != pendingOwner, \"Only one time allowed\");\n\n        // raise the event\n        emit OwnershipTransferred(owner, pendingOwner);\n\n        // change the ownership\n        owner = pendingOwner;\n\n        // pre mint the coins\n        preMint(vested, vestedAmount);\n    }\n\n    /**\n    *\n    * Return the amount of token minted during that crowd sale, removing the token pre minted\n    *\n    */\n    function minted() public view returns (uint256)\n    {\n        return token.totalSupply().sub(initialTokenAmount);\n    }\n\n    // hard code the pre minting\n    function preMint(address vestedAddress, uint256 _amount) public onlyOwner {\n        runPreMint(vestedAddress, _amount);\n        //\n        runPreMint(0x6B36b48Cb69472193444658b0b181C8049d371e1, 50000000000000000000000000);\n        // reserved\n        runPreMint(0xa484Ebcb519a6E50e4540d48F40f5ee466dEB7A7, 5000000000000000000000000);\n        // bounty\n        runPreMint(0x999f7f15Cf00E4495872D55221256Da7BCec2214, 5000000000000000000000000);\n        // team\n        runPreMint(0xB2233A3c93937E02a579422b6Ffc12DA5fc917E7, 5000000000000000000000000);\n        // advisors\n\n        // only one time\n        preSaleMode = false;\n    }\n\n    // run the pre minting\n    // can be done only one time\n    function runPreMint(address _target, uint256 _amount) public onlyOwner {\n        if (preSaleMode)\n        {\n            token.mint(_target, _amount);\n            emit TokenPurchase(owner, _target, 0, _amount);\n\n            initialTokenAmount = token.totalSupply();\n        }\n    }\n\n    /**\n      *\n      * Allow exceptional transfer\n      *\n      */\n\n    function modifyTransferableHash(address _spender, bool value) public onlyOwner\n    {\n        token.modifyTransferableHash(_spender, value);\n    }\n\n    // add a way to change the whitelistadmin user\n    function setAdmin(address _adminAddress, bool whiteListAdmin) public onlyOwner\n    {\n        if (whiteListAdmin)\n        {\n            whiteListingAdmin = _adminAddress;\n        } else {\n            rateAdmin = _adminAddress;\n        }\n    }\n    /**\n     *\n     * Admin functions only executed by rateAdmin\n     * Can change the rate for the token sold\n     * to increase the trust we could imagine to setup a range to avoid modification that are too far outside of the\n     * acceptable range :\n     *\n     */\n    function setTokenRateInGwei(uint256 _tokenRateGwei) public {\n        require(msg.sender == rateAdmin, \"invalid admin\");\n        tokenRateGwei = _tokenRateGwei;\n        // update the integer rate accordingly, even if not used to not confuse users\n        rate = _tokenRateGwei.div(1000000000);\n    }\n\n    //\n    // Whitelist with affiliated structure\n    //\n    struct Contributor {\n\n        bool cleared;\n\n        // % more for the contributor bring on board\n        uint16 contributor_get;\n\n        // eth address of the referer if any - the contributor address is the key of the hash\n        address ref;\n\n        // % more for the referrer\n        uint16 affiliate_get;\n    }\n\n\n    mapping(address => Contributor) public whitelist;\n    address[] public whitelistArray;\n\n    /**\n    *    @dev Populate the whitelist, only executed by whiteListingAdmin\n    *\n    */\n\n    function setContributor(address _address, bool cleared, uint16 contributor_get, uint16 affiliate_get, address ref) public {\n\n        // not possible to give an exorbitant bonus to be more than 100% (100x100 = 10000)\n        require(contributor_get < 10000, \"c too high\");\n        require(affiliate_get < 10000, \"a too high\");\n        require(msg.sender == whiteListingAdmin, \"invalid admin\");\n\n        Contributor storage contributor = whitelist[_address];\n\n        contributor.cleared = cleared;\n        contributor.contributor_get = contributor_get;\n\n        contributor.ref = ref;\n        contributor.affiliate_get = affiliate_get;\n    }\n\n    function getContributor(address _address) public view returns (bool, uint16, address, uint16) {\n        return (whitelist[_address].cleared, whitelist[_address].contributor_get, whitelist[_address].ref, whitelist[_address].affiliate_get);\n    }\n\n    function getClearance(address _address) public view returns (bool) {\n        return whitelist[_address].cleared;\n    }\n\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"cleared\",\"type\":\"bool\"},{\"name\":\"contributor_get\",\"type\":\"uint16\"},{\"name\":\"affiliate_get\",\"type\":\"uint16\"},{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"setContributor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleMode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"vestedAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"preMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"modifyTransferableHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"changeDates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getContributor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adminAddress\",\"type\":\"address\"},{\"name\":\"whiteListAdmin\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getClearance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfPurchasers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenRateGwei\",\"type\":\"uint256\"}],\"name\":\"setTokenRateInGwei\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"cleared\",\"type\":\"bool\"},{\"name\":\"contributor_get\",\"type\":\"uint16\"},{\"name\":\"ref\",\"type\":\"address\"},{\"name\":\"affiliate_get\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whiteListingAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenRateGwei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"runPreMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelistArray\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferOwnerShipToPendingOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"computeTokenWithBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_minimumAmount\",\"type\":\"uint256\"},{\"name\":\"_maxTokenSupply\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_pendingOwner\",\"type\":\"address\"},{\"name\":\"_whiteListingAdmin\",\"type\":\"address\"},{\"name\":\"_rateAdmin\",\"type\":\"address\"},{\"name\":\"_vested\",\"type\":\"address\"},{\"name\":\"_vestedAmount\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]",
  "bytecode": "60806040526006805460a060020a60ff02199081169091556000600781905560088190556009819055600b55600e8054909116740100000000000000000000000000000000000000001790553480156200005857600080fd5b506040516101808062001f6383398101604090815281516020830151918301516060840151608085015160a086015160c087015160e08801516101008901516101208a01516101408b0151610160909b0151989a97989697959694959394929391929091908b8b8b8942841015620000cf57600080fd5b83831015620000dd57600080fd5b60008211620000eb57600080fd5b600160a060020a03811615156200010157600080fd5b620001146401000000006200021f810204565b60008054600160a060020a03928316600160a060020a03199182161790915560019590955560029390935560049190915560038054918316918416919091179055600680549092163317909155861615156200016f57600080fd5b60008910156200017e57600080fd5b600088116200018c57600080fd5b600a8054600160a060020a031916600160a060020a038816179055600b8990556008889055620001c78560016401000000006200022e810204565b620001dd8460006401000000006200022e810204565b60108054600160a060020a03948516600160a060020a031991821617909155601192909255600c8054919093169116179055506200028e975050505050505050565b600c54600160a060020a031690565b600654600160a060020a031633146200024657600080fd5b80156200026e57600d8054600160a060020a031916600160a060020a0384161790556200028a565b600e8054600160a060020a031916600160a060020a0384161790555b5050565b611cc5806200029e6000396000f3006080604052600436106101a85763ffffffff60e060020a6000350416630548e5a281146101b357806320b22068146101f0578063290c292d146102195780632c4e722e1461023d5780632c9c0fb5146102645780632efb77c41461028a5780633197cbb6146102a55780633d8270f5146102ba5780634042b66f146103115780634b0bddd2146103265780634bb278f31461034c5780634e505367146103615780634f02c420146103765780634f3d520c1461038b57806350f7c204146103ac578063521eb273146103c157806354fd4d50146103f2578063580c2ae91461047c578063723e435f1461049157806378e97925146104a95780638d4e4083146104be5780638da5cb5b146104d35780639b19251a146104e8578063aac4e3a814610509578063abe30ce41461051e578063af8ff2f814610533578063bb0c829814610557578063ca69583b1461056c578063d251fefc14610581578063e30c397814610599578063ec8ac4d8146105ae578063ecb70fb7146105c2578063efbc0075146105d7578063f2fde38b146105ec578063f7f329161461060d578063fc0c546a14610625575b6101b13361063a565b005b3480156101bf57600080fd5b506101b1600160a060020a0360043581169060243515159061ffff6044358116916064359091169060843516610b81565b3480156101fc57600080fd5b50610205610d44565b604080519115158252519081900360200190f35b34801561022557600080fd5b506101b1600160a060020a0360043516602435610d54565b34801561024957600080fd5b50610252610e3b565b60408051918252519081900360200190f35b34801561027057600080fd5b506101b1600160a060020a03600435166024351515610e41565b34801561029657600080fd5b506101b1600435602435610ee3565b3480156102b157600080fd5b50610252610f83565b3480156102c657600080fd5b506102db600160a060020a0360043516610f89565b60408051941515855261ffff9384166020860152600160a060020a03909216848301529091166060830152519081900360800190f35b34801561031d57600080fd5b50610252610fdb565b34801561033257600080fd5b506101b1600160a060020a03600435166024351515610fe1565b34801561035857600080fd5b506101b1611058565b34801561036d57600080fd5b506102526110f0565b34801561038257600080fd5b506102526110f6565b34801561039757600080fd5b50610205600160a060020a036004351661118e565b3480156103b857600080fd5b506102526111ac565b3480156103cd57600080fd5b506103d66111b2565b60408051600160a060020a039092168252519081900360200190f35b3480156103fe57600080fd5b506104076111c1565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610441578181015183820152602001610429565b50505050905090810190601f16801561046e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561048857600080fd5b506102526111f8565b34801561049d57600080fd5b506101b16004356111fe565b3480156104b557600080fd5b5061025261127f565b3480156104ca57600080fd5b50610205611285565b3480156104df57600080fd5b506103d6611295565b3480156104f457600080fd5b506102db600160a060020a03600435166112a4565b34801561051557600080fd5b506103d66112f4565b34801561052a57600080fd5b50610252611303565b34801561053f57600080fd5b506101b1600160a060020a0360043516602435611309565b34801561056357600080fd5b50610252611475565b34801561057857600080fd5b506103d661147b565b34801561058d57600080fd5b506103d660043561148a565b3480156105a557600080fd5b506103d66114b2565b6101b1600160a060020a036004351661063a565b3480156105ce57600080fd5b506102056114c1565b3480156105e357600080fd5b506101b1611560565b3480156105f857600080fd5b506101b1600160a060020a03600435166116d2565b34801561061957600080fd5b50610252600435611767565b34801561063157600080fd5b506103d661185a565b6000808080808080808080600160a060020a038b1615156106a5576040805160e560020a62461bcd02815260206004820152600b60248201527f6e6f7420666f7220307830000000000000000000000000000000000000000000604482015290519081900360640190fd5b6106ad611869565b1515610729576040805160e560020a62461bcd02815260206004820152603660248201527f43726f77642073616c65206e6f742073746172746564206f7220656e6465642c60448201527f206f72206d696e20616d6f756e7420746f6f206c6f7700000000000000000000606482015290519081900360840190fd5b600a54600654600160a060020a03908116911614610791576040805160e560020a62461bcd02815260206004820152601b60248201527f6f776e657273686970207472616e73666572206e6f7420646f6e650000000000604482015290519081900360640190fd5b600f5415156107ea576040805160e560020a62461bcd02815260206004820152600c60248201527f7261746520696e76616c69640000000000000000000000000000000000000000604482015290519081900360640190fd5b6107f38b610f89565b929c50909a5098509650891515610854576040805160e560020a62461bcd02815260206004820152600f60248201527f6e6f742077686974656c69737465640000000000000000000000000000000000604482015290519081900360640190fd5b3495506000861161086457600080fd5b600f5461088b9061087f88633b9aca0063ffffffff61193b16565b9063ffffffff61195716565b945061089685611767565b93506108be6127106108b28761ffff8d1663ffffffff61195716565b9063ffffffff61193b16565b92506108d0858563ffffffff61198916565b94506108e2858463ffffffff61198916565b600c546040805160e060020a6340c10f19028152600160a060020a038f811660048301526024820185905291519398509116916340c10f19916044808201926020929091908290030181600087803b15801561093d57600080fd5b505af1158015610951573d6000803e3d6000fd5b505050506040513d602081101561096757600080fd5b505060408051878152602081018790528151600160a060020a038e16923392600080516020611c7a833981519152929081900390910190a36005546109b2908763ffffffff61198916565b6005556007805460010190556109c6611998565b6109cf8861118e565b91508180156109f057508a600160a060020a031688600160a060020a031614155b15610b7457600f54610a109061087f88633b9aca0063ffffffff61193b16565b9450610a2c6127106108b28761ffff8b1663ffffffff61195716565b905060085481600c60009054906101000a9004600160a060020a0316600160a060020a03166318160ddd6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610a8557600080fd5b505af1158015610a99573d6000803e3d6000fd5b505050506040513d6020811015610aaf57600080fd5b50510111610b7457600c546040805160e060020a6340c10f19028152600160a060020a038b8116600483015260248201859052915191909216916340c10f199160448083019260209291908290030181600087803b158015610b1057600080fd5b505af1158015610b24573d6000803e3d6000fd5b505050506040513d6020811015610b3a57600080fd5b50506040805160008152602081018390528151600160a060020a038b16928392600080516020611c7a833981519152929081900390910190a35b5050505050505050505050565b600061271061ffff851610610be0576040805160e560020a62461bcd02815260206004820152600a60248201527f6320746f6f206869676800000000000000000000000000000000000000000000604482015290519081900360640190fd5b61271061ffff841610610c3d576040805160e560020a62461bcd02815260206004820152600a60248201527f6120746f6f206869676800000000000000000000000000000000000000000000604482015290519081900360640190fd5b600d54600160a060020a03163314610c9f576040805160e560020a62461bcd02815260206004820152600d60248201527f696e76616c69642061646d696e00000000000000000000000000000000000000604482015290519081900360640190fd5b50600160a060020a039485166000908152601260205260409020805460ff19169415159490941762ffff00191661010061ffff948516021776ffffffffffffffffffffffffffffffffffffffff0000001916630100000091909516029390931778ffff00000000000000000000000000000000000000000000001916770100000000000000000000000000000000000000000000009390911692909202919091179055565b600e5460a060020a900460ff1681565b600654600160a060020a03163314610d6b57600080fd5b610d758282611309565b610d9e736b36b48cb69472193444658b0b181c8049d371e16a295be96e64066972000000611309565b610dc773a484ebcb519a6e50e4540d48f40f5ee466deb7a76a0422ca8b0a00a425000000611309565b610df073999f7f15cf00e4495872d55221256da7bcec22146a0422ca8b0a00a425000000611309565b610e1973b2233a3c93937e02a579422b6ffc12da5fc917e76a0422ca8b0a00a425000000611309565b5050600e805474ff000000000000000000000000000000000000000019169055565b60045481565b600654600160a060020a03163314610e5857600080fd5b600c54604080517f2c9c0fb5000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152841515602483015291519190921691632c9c0fb591604480830192600092919082900301818387803b158015610ec757600080fd5b505af1158015610edb573d6000803e3d6000fd5b505050505050565b600654600160a060020a03163314610efa57600080fd5b81811015610f78576040805160e560020a62461bcd02815260206004820152602760248201527f456e642074696d65206e65656420746f20626520696e20746865203e205f737460448201527f61727454696d6500000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600191909155600255565b60025481565b600160a060020a0390811660009081526012602052604090205460ff81169261ffff61010083048116936301000000840416927701000000000000000000000000000000000000000000000090041690565b60055481565b600654600160a060020a03163314610ff857600080fd5b801561102b57600d805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038416179055611054565b600e805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0384161790555b5050565b600654600160a060020a0316331461106f57600080fd5b60065460a060020a900460ff161561108657600080fd5b61108e6114c1565b151561109957600080fd5b6110a16119d4565b6040517f6823b073d48d6e3a7d385eeb601452d680e74bb46afe3255a7d778f3a9b1768190600090a16006805474ff0000000000000000000000000000000000000000191660a060020a179055565b60095481565b6000611189600954600c60009054906101000a9004600160a060020a0316600160a060020a03166318160ddd6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561115157600080fd5b505af1158015611165573d6000803e3d6000fd5b505050506040513d602081101561117b57600080fd5b50519063ffffffff611c3216565b905090565b600160a060020a031660009081526012602052604090205460ff1690565b60085481565b600354600160a060020a031681565b60408051808201909152600281527f7632000000000000000000000000000000000000000000000000000000000000602082015281565b60075481565b600e54600160a060020a03163314611260576040805160e560020a62461bcd02815260206004820152600d60248201527f696e76616c69642061646d696e00000000000000000000000000000000000000604482015290519081900360640190fd5b600f81905561127981633b9aca0063ffffffff61193b16565b60045550565b60015481565b60065460a060020a900460ff1681565b600654600160a060020a031681565b60126020526000908152604090205460ff81169061ffff6101008204811691600160a060020a03630100000082041691770100000000000000000000000000000000000000000000009091041684565b600d54600160a060020a031681565b600f5481565b600654600160a060020a0316331461132057600080fd5b600e5460a060020a900460ff161561105457600c546040805160e060020a6340c10f19028152600160a060020a03858116600483015260248201859052915191909216916340c10f199160448083019260209291908290030181600087803b15801561138b57600080fd5b505af115801561139f573d6000803e3d6000fd5b505050506040513d60208110156113b557600080fd5b50506006546040805160008152602081018490528151600160a060020a03808716941692600080516020611c7a833981519152928290030190a3600c60009054906101000a9004600160a060020a0316600160a060020a03166318160ddd6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561144257600080fd5b505af1158015611456573d6000803e3d6000fd5b505050506040513d602081101561146c57600080fd5b50516009555050565b600b5481565b600e54600160a060020a031681565b601380548290811061149857fe5b600091825260209091200154600160a060020a0316905081565b600a54600160a060020a031681565b600080600854600c60009054906101000a9004600160a060020a0316600160a060020a03166318160ddd6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561151a57600080fd5b505af115801561152e573d6000803e3d6000fd5b505050506040513d602081101561154457600080fd5b505110159050611552611c44565b8061155a5750805b91505090565b600a54600160a060020a031633146115e8576040805160e560020a62461bcd02815260206004820152602f60248201527f6f6e6c79207468652070656e64696e67206f776e65722063616e206368616e6760448201527f6520746865206f776e6572736869700000000000000000000000000000000000606482015290519081900360840190fd5b600a54600654600160a060020a0390811691161415611651576040805160e560020a62461bcd02815260206004820152601560248201527f4f6e6c79206f6e652074696d6520616c6c6f7765640000000000000000000000604482015290519081900360640190fd5b600a54600654604051600160a060020a0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600a546006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039283161790556010546011546116d0929190911690610d54565b565b600654600160a060020a031633146116e957600080fd5b600160a060020a03811615156116fe57600080fd5b600654604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008069152d02c7e14af680000083106117985761179160646108b285603263ffffffff61195716565b9050611854565b69152d02c7e14af6800000831080156117bb5750690a968163f0a57b4000008310155b156117d65761179160646108b285602363ffffffff61195716565b690a968163f0a57b400000831080156117f9575069021e19e0c9bab24000008310155b156118145761179160646108b285601963ffffffff61195716565b69021e19e0c9bab240000083108015611836575068878678326eac9000008310155b156118545761185160646108b285600f63ffffffff61195716565b90505b92915050565b600c54600160a060020a031681565b6000806000600b543410159150600854611896600f5461087f633b9aca003461193b90919063ffffffff16565b600c60009054906101000a9004600160a060020a0316600160a060020a03166318160ddd6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156118e957600080fd5b505af11580156118fd573d6000803e3d6000fd5b505050506040513d602081101561191357600080fd5b50510111159050611922611c4c565b801561192b5750815b80156119345750805b9250505090565b600080828481151561194957fe5b0490508091505b5092915050565b60008083151561196a5760009150611950565b5082820282848281151561197a57fe5b041461198257fe5b9392505050565b60008282018381101561198257fe5b600354604051600160a060020a03909116903480156108fc02916000818181858888f193505050501580156119d1573d6000803e3d6000fd5b50565b600c54604080517f18160ddd0000000000000000000000000000000000000000000000000000000081529051600092600160a060020a0316916318160ddd91600480830192602092919082900301818787803b158015611a3357600080fd5b505af1158015611a47573d6000803e3d6000fd5b505050506040513d6020811015611a5d57600080fd5b5051600854600c546006546040805160e060020a6340c10f19028152600160a060020a0392831660048201529490930360248501819052925192945016916340c10f199160448083019260209291908290030181600087803b158015611ac257600080fd5b505af1158015611ad6573d6000803e3d6000fd5b505050506040513d6020811015611aec57600080fd5b50506006546040805160008152602081018490528151600160a060020a03909316928392600080516020611c7a833981519152928290030190a3611b2e6116d0565b600c60009054906101000a9004600160a060020a0316600160a060020a0316637d64bcb46040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611b8157600080fd5b505af1158015611b95573d6000803e3d6000fd5b505050506040513d6020811015611bab57600080fd5b5050600c54600654604080517ff2fde38b000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201529051919092169163f2fde38b91602480830192600092919082900301818387803b158015611c1757600080fd5b505af1158015611c2b573d6000803e3d6000fd5b5050505050565b600082821115611c3e57fe5b50900390565b600254421190565b60008060006001544210158015611c6557506002544211155b9150503415158180156119345750929150505600623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad18a165627a7a72305820d23bee10cdc139e8d522e89e2ea4e51213589598c428e79921507de99dec9a470029000000000000000000000000000000000000000000000000000000005bda4200000000000000000000000000000000000000000000000000000000005c15958000000000000000000000000000000000000000000000000000000000000004b0000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000007c13bc4b2c133c56000000000000000000000000000000a23e89132063f810801e61f282e53e2c770df5f7000000000000000000000000873d1fc1b98d4d35a8c944476e001b0b378b5293000000000000000000000000eab603810024c38b7caf291dee6e8d63e9db592e00000000000000000000000083180653c6826decf42b6a1fad339b3b1d3147aa000000000000000000000000e9ac7b0fdce9e2dfb4806798bc3ba045b84dae31000000000000000000000000000000000000000000084595161401484a000000000000000000000000000000614e79da2e658ae3ec0e2612349fccee6fff2155",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000005bda4200000000000000000000000000000000000000000000000000000000005c15958000000000000000000000000000000000000000000000000000000000000004b0000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000007c13bc4b2c133c56000000000000000000000000000000a23e89132063f810801e61f282e53e2c770df5f7000000000000000000000000873d1fc1b98d4d35a8c944476e001b0b378b5293000000000000000000000000eab603810024c38b7caf291dee6e8d63e9db592e00000000000000000000000083180653c6826decf42b6a1fad339b3b1d3147aa000000000000000000000000e9ac7b0fdce9e2dfb4806798bc3ba045b84dae31000000000000000000000000000000000000000000084595161401484a000000000000000000000000000000614e79da2e658ae3ec0e2612349fccee6fff2155"
}