{
  "address": "0xe4bd56cbf537074e3836a1721983107cce9e689f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PepeCore",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-17\n*/\n\npragma solidity ^0.4.21;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title PullPayment\n * @dev Base contract supporting async send for pull payments. Inherit from this\n * contract and use asyncSend instead of send or transfer.\n */\ncontract PullPayment {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) public payments;\n  uint256 public totalPayments;\n\n  /**\n  * @dev Withdraw accumulated balance, called by payee.\n  */\n  function withdrawPayments() public {\n    address payee = msg.sender;\n    uint256 payment = payments[payee];\n\n    require(payment != 0);\n    require(address(this).balance >= payment);\n\n    totalPayments = totalPayments.sub(payment);\n    payments[payee] = 0;\n\n    payee.transfer(payment);\n  }\n\n  /**\n  * @dev Called by the payer to store the sent amount as credit to be pulled.\n  * @param dest The destination address of the funds.\n  * @param amount The amount to transfer.\n  */\n  function asyncSend(address dest, uint256 amount) internal {\n    payments[dest] = payments[dest].add(amount);\n    totalPayments = totalPayments.add(amount);\n  }\n\n  // Called by children of this contract to remove value from an account\n  function asyncDebit(address dest, uint256 amount) internal {\n    payments[dest] = payments[dest].sub(amount);\n    totalPayments = totalPayments.sub(amount);\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\n/**\n * Sorted list of sales for use in the marketplace. Sorting is maintained by linked list.\n */\nlibrary SaleListLib {\n  address public constant nullAddress = address(0);\n\n  struct SaleList {\n    address head;\n\n    mapping(address => address) sellerListMapping;\n    mapping(address => uint) sellerToPrice;\n  }\n\n  function getBest(SaleList storage self) public view returns (address, uint) {\n    address head = self.head;\n    return (head, self.sellerToPrice[head]);\n  }\n\n  function addSale(SaleList storage self, address seller, uint price) public {\n    require(price != 0);\n    require(seller != nullAddress);\n\n    if (_contains(self, seller)) {\n      removeSale(self, seller);\n    }\n\n    self.sellerToPrice[seller] = price;\n    if (self.head == nullAddress || price <= self.sellerToPrice[self.head]) {\n      self.sellerListMapping[seller] = self.head;\n      self.head = seller;\n    } else {\n      address prev = self.head;\n      address cur = self.sellerListMapping[prev];\n\n      while (cur != nullAddress) {\n        if (price <= self.sellerToPrice[cur]) {\n          self.sellerListMapping[prev] = seller;\n          self.sellerListMapping[seller] = cur;\n\n          break;\n        }\n\n        prev = cur;\n        cur = self.sellerListMapping[cur];\n      }\n\n      // Insert value greater than all values in list\n      if (cur == nullAddress) {\n        self.sellerListMapping[prev] = seller;\n      }\n    }\n  }\n\n  function removeSale(SaleList storage self, address seller) public returns (bool) {\n    require(seller != nullAddress);\n\n    if (!_contains(self, seller)) {\n      return false;\n    }\n\n    if (seller == self.head) {\n      self.head = self.sellerListMapping[seller];\n      _remove(self, seller);\n    } else {\n      address prev = self.head;\n      address cur = self.sellerListMapping[prev];\n\n      // TODO: Make SURE that initialized mapping with address vals initializes those vals to address(0)\n      // NOTE: Redundant check (prev != seller)\n      while (cur != nullAddress && prev != seller) {\n        if (cur == seller) {\n          self.sellerListMapping[prev] = self.sellerListMapping[seller];\n          _remove(self, seller);\n\n          break;\n        }\n\n        prev = cur;\n        cur = self.sellerListMapping[cur];\n      }\n\n      // NOTE: Redundant check\n      if (cur == nullAddress) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  // NOTE: This is a purely internal method that *only* zeros out sellerListMapping and sellerToPrice\n  function _remove(SaleList storage self, address seller) internal {\n    self.sellerToPrice[seller] = 0;\n    self.sellerListMapping[seller] = nullAddress;\n  }\n\n  function _contains(SaleList storage self, address seller) view internal returns (bool) {\n    return self.sellerToPrice[seller] != 0;\n  }\n}\n\ncontract SaleRegistry is Ownable {\n  using SafeMath for uint256;\n\n  /////////\n  // Events\n  /////////\n\n  event SalePosted(\n    address indexed _seller,\n    bytes32 indexed _sig,\n    uint256 _price\n  );\n\n  event SaleCancelled(\n    address indexed _seller,\n    bytes32 indexed _sig\n  );\n\n  ////////\n  // State\n  ////////\n\n  mapping(bytes32 => SaleListLib.SaleList) _sigToSortedSales;\n\n  mapping(address => mapping(bytes32 => uint256)) _addressToSigToSalePrice;\n\n  // NOTE: Rules are different for contract owner. Can run many sales at a time, all at a single price. This\n  // allows multi-sale at genesis time\n  mapping(bytes32 => uint256) _ownerSigToNumSales;\n\n  mapping(bytes32 => uint256) public sigToNumSales;\n\n  /////////////\n  // User views\n  /////////////\n\n  // Returns (seller, price) tuple\n  function getBestSale(bytes32 sig) public view returns (address, uint256) {\n    return SaleListLib.getBest(_sigToSortedSales[sig]);\n  }\n\n  // Returns price that the sender is selling the current sig for (or 0 if not)\n  function getMySalePrice(bytes32 sig) public view returns (uint256) {\n    return _addressToSigToSalePrice[msg.sender][sig];\n  }\n\n  ///////////////\n  // User actions\n  ///////////////\n\n  // Convenience method used *only* at genesis sale time\n  function postGenesisSales(bytes32 sig, uint256 price, uint256 numSales) internal onlyOwner {\n    SaleListLib.addSale(_sigToSortedSales[sig], owner, price);\n    _addressToSigToSalePrice[owner][sig] = price;\n\n    _ownerSigToNumSales[sig] = _ownerSigToNumSales[sig].add(numSales);\n    sigToNumSales[sig] = sigToNumSales[sig].add(numSales);\n\n    emit SalePosted(owner, sig, price);\n  }\n\n  // Admin method for re-listing all genesis sales\n  function relistGenesisSales(bytes32 sig, uint256 newPrice) external onlyOwner {\n    SaleListLib.addSale(_sigToSortedSales[sig], owner, newPrice);\n    _addressToSigToSalePrice[owner][sig] = newPrice;\n\n    emit SalePosted(owner, sig, newPrice);\n  }\n\n  // NOTE: Only allows 1 active sale per address per sig, unless owner\n  function postSale(address seller, bytes32 sig, uint256 price) internal {\n    SaleListLib.addSale(_sigToSortedSales[sig], seller, price);\n    _addressToSigToSalePrice[seller][sig] = price;\n\n    sigToNumSales[sig] = sigToNumSales[sig].add(1);\n\n    if (seller == owner) {\n      _ownerSigToNumSales[sig] = _ownerSigToNumSales[sig].add(1);\n    }\n\n    emit SalePosted(seller, sig, price);\n  }\n\n  // NOTE: Special remove logic for contract owner's sale!\n  function cancelSale(address seller, bytes32 sig) internal {\n    if (seller == owner) {\n      _ownerSigToNumSales[sig] = _ownerSigToNumSales[sig].sub(1);\n\n      if (_ownerSigToNumSales[sig] == 0) {\n        SaleListLib.removeSale(_sigToSortedSales[sig], seller);\n        _addressToSigToSalePrice[seller][sig] = 0;\n      }\n    } else {\n      SaleListLib.removeSale(_sigToSortedSales[sig], seller);\n      _addressToSigToSalePrice[seller][sig] = 0;\n    }\n    sigToNumSales[sig] = sigToNumSales[sig].sub(1);\n\n    emit SaleCancelled(seller, sig);\n  }\n}\n\ncontract OwnerRegistry {\n  using SafeMath for uint256;\n\n  /////////\n  // Events\n  /////////\n\n  event CardCreated(\n    bytes32 indexed _sig,\n    uint256 _numAdded\n  );\n\n  event CardsTransferred(\n    bytes32 indexed _sig,\n    address indexed _oldOwner,\n    address indexed _newOwner,\n    uint256 _count\n  );\n\n  ////////\n  // State\n  ////////\n\n  bytes32[] _allSigs;\n  mapping(address => mapping(bytes32 => uint256)) _ownerToSigToCount;\n  mapping(bytes32 => uint256) _sigToCount;\n\n  ////////////////\n  // Admin actions\n  ////////////////\n\n  function addCardToRegistry(address owner, bytes32 sig, uint256 numToAdd) internal {\n    // Only allow adding cards that haven't already been added\n    require(_sigToCount[sig] == 0);\n\n    _allSigs.push(sig);\n    _ownerToSigToCount[owner][sig] = numToAdd;\n    _sigToCount[sig] = numToAdd;\n\n    emit CardCreated(sig, numToAdd);\n  }\n\n  /////////////\n  // User views\n  /////////////\n\n  function getAllSigs() public view returns (bytes32[]) {\n    return _allSigs;\n  }\n\n  function getNumSigsOwned(bytes32 sig) public view returns (uint256) {\n    return _ownerToSigToCount[msg.sender][sig];\n  }\n\n  function getNumSigs(bytes32 sig) public view returns (uint256) {\n    return _sigToCount[sig];\n  }\n\n  ///////////////////\n  // Transfer actions\n  ///////////////////\n\n  function registryTransfer(address oldOwner, address newOwner, bytes32 sig, uint256 count) internal {\n    // Must be transferring at least one card!\n    require(count > 0);\n\n    // Don't allow a transfer when the old owner doesn't enough of the card\n    require(_ownerToSigToCount[oldOwner][sig] >= count);\n\n    _ownerToSigToCount[oldOwner][sig] = _ownerToSigToCount[oldOwner][sig].sub(count);\n    _ownerToSigToCount[newOwner][sig] = _ownerToSigToCount[newOwner][sig].add(count);\n\n    emit CardsTransferred(sig, oldOwner, newOwner, count);\n  }\n}\n\ncontract ArtistRegistry {\n  using SafeMath for uint256;\n\n  mapping(bytes32 => address) _sigToArtist;\n\n  // fee tuple is of form (txFeePercent, genesisSalePercent)\n  mapping(bytes32 => uint256[2]) _sigToFeeTuple;\n\n  function addArtistToRegistry(bytes32 sig,\n                               address artist,\n                               uint256 txFeePercent,\n                               uint256 genesisSalePercent) internal {\n    // Must be a valid artist address!\n    require(artist != address(0));\n\n    // Only allow 1 sig per artist!\n    require(_sigToArtist[sig] == address(0));\n\n    _sigToArtist[sig] = artist;\n    _sigToFeeTuple[sig] = [txFeePercent, genesisSalePercent];\n  }\n\n  function computeArtistTxFee(bytes32 sig, uint256 txFee) internal view returns (uint256) {\n    uint256 feePercent = _sigToFeeTuple[sig][0];\n    return (txFee.mul(feePercent)).div(100);\n  }\n\n  function computeArtistGenesisSaleFee(bytes32 sig, uint256 genesisSaleProfit) internal view returns (uint256) {\n    uint256 feePercent = _sigToFeeTuple[sig][1];\n    return (genesisSaleProfit.mul(feePercent)).div(100);\n  }\n\n  function getArtist(bytes32 sig) internal view returns (address) {\n    return _sigToArtist[sig];\n  }\n}\n\ncontract PepeCore is PullPayment, OwnerRegistry, SaleRegistry, ArtistRegistry {\n  using SafeMath for uint256;\n\n  uint256 constant public totalTxFeePercent = 4;\n\n  ////////////////////\n  // Shareholder stuff\n  ////////////////////\n\n  // Only 3 equal shareholders max allowed on this contract representing the three equal-partner founders\n  // involved in its inception\n  address public shareholder1;\n  address public shareholder2;\n  address public shareholder3;\n\n  // 0 -> 3 depending on contract state. I only use uint256 so that I can use SafeMath...\n  uint256 public numShareholders = 0;\n\n  // Used to set initial shareholders\n  function addShareholderAddress(address newShareholder) external onlyOwner {\n    // Don't let shareholder be address(0)\n    require(newShareholder != address(0));\n\n    // Contract owner can't be a shareholder\n    require(newShareholder != owner);\n\n    // Must be an open shareholder spot!\n    require(shareholder1 == address(0) || shareholder2 == address(0) || shareholder3 == address(0));\n\n    if (shareholder1 == address(0)) {\n      shareholder1 = newShareholder;\n      numShareholders = numShareholders.add(1);\n    } else if (shareholder2 == address(0)) {\n      shareholder2 = newShareholder;\n      numShareholders = numShareholders.add(1);\n    } else if (shareholder3 == address(0)) {\n      shareholder3 = newShareholder;\n      numShareholders = numShareholders.add(1);\n    }\n  }\n\n  // Splits the amount specified among shareholders equally\n  function payShareholders(uint256 amount) internal {\n    // If no shareholders, shareholder fees will be held in contract to be withdrawable by owner\n    if (numShareholders > 0) {\n      uint256 perShareholderFee = amount.div(numShareholders);\n\n      if (shareholder1 != address(0)) {\n        asyncSend(shareholder1, perShareholderFee);\n      }\n\n      if (shareholder2 != address(0)) {\n        asyncSend(shareholder2, perShareholderFee);\n      }\n\n      if (shareholder3 != address(0)) {\n        asyncSend(shareholder3, perShareholderFee);\n      }\n    }\n  }\n\n  ////////////////\n  // Admin actions\n  ////////////////\n\n  function withdrawContractBalance() external onlyOwner {\n    uint256 contractBalance = address(this).balance;\n    uint256 withdrawableBalance = contractBalance.sub(totalPayments);\n\n    // No withdrawal necessary if <= 0 balance\n    require(withdrawableBalance > 0);\n\n    msg.sender.transfer(withdrawableBalance);\n  }\n\n  function addCard(bytes32 sig,\n                   address artist,\n                   uint256 txFeePercent,\n                   uint256 genesisSalePercent,\n                   uint256 numToAdd,\n                   uint256 startingPrice) external onlyOwner {\n    addCardToRegistry(owner, sig, numToAdd);\n\n    addArtistToRegistry(sig, artist, txFeePercent, genesisSalePercent);\n\n    postGenesisSales(sig, startingPrice, numToAdd);\n  }\n\n  ///////////////\n  // User actions\n  ///////////////\n\n  function createSale(bytes32 sig, uint256 price) external {\n    // Can't sell a card for 0... May want other limits in the future\n    require(price > 0);\n\n    // Can't sell a card you don't own\n    require(getNumSigsOwned(sig) > 0);\n\n    // Can't post a sale if you have one posted already! Unless you're the contract owner\n    require(msg.sender == owner || _addressToSigToSalePrice[msg.sender][sig] == 0);\n\n    postSale(msg.sender, sig, price);\n  }\n\n  function removeSale(bytes32 sig) public {\n    // Can't cancel a sale that doesn't exist\n    require(_addressToSigToSalePrice[msg.sender][sig] > 0);\n\n    cancelSale(msg.sender, sig);\n  }\n\n  function computeTxFee(uint256 price) private pure returns (uint256) {\n    return (price * totalTxFeePercent) / 100;\n  }\n\n  // If card is held by contract owner, split among artist + shareholders\n  function paySellerFee(bytes32 sig, address seller, uint256 sellerProfit) private {\n    if (seller == owner) {\n      address artist = getArtist(sig);\n      uint256 artistFee = computeArtistGenesisSaleFee(sig, sellerProfit);\n      asyncSend(artist, artistFee);\n\n      payShareholders(sellerProfit.sub(artistFee));\n    } else {\n      asyncSend(seller, sellerProfit);\n    }\n  }\n\n  // Simply pay out tx fees appropriately\n  function payTxFees(bytes32 sig, uint256 txFee) private {\n    uint256 artistFee = computeArtistTxFee(sig, txFee);\n    address artist = getArtist(sig);\n    asyncSend(artist, artistFee);\n\n    payShareholders(txFee.sub(artistFee));\n  }\n\n  // Handle wallet debit if necessary, pay out fees, pay out seller profit, cancel sale, transfer card\n  function buy(bytes32 sig) external payable {\n    address seller;\n    uint256 price;\n    (seller, price) = getBestSale(sig);\n\n    // There must be a valid sale for the card\n    require(price > 0 && seller != address(0));\n\n    // Buyer must have enough Eth via wallet and payment to cover posted price\n    uint256 availableEth = msg.value.add(payments[msg.sender]);\n    require(availableEth >= price);\n\n    // Debit wallet if msg doesn't have enough value to cover price\n    if (msg.value < price) {\n      asyncDebit(msg.sender, price.sub(msg.value));\n    }\n\n    // Split out fees + seller profit\n    uint256 txFee = computeTxFee(price);\n    uint256 sellerProfit = price.sub(txFee);\n\n    // Pay out seller (special logic for seller == owner)\n    paySellerFee(sig, seller, sellerProfit);\n\n    // Pay out tx fees\n    payTxFees(sig, txFee);\n\n    // Cancel sale\n    cancelSale(seller, sig);\n\n    // Transfer single sig ownership in registry\n    registryTransfer(seller, msg.sender, sig, 1);\n  }\n\n  // Can also be used in airdrops, etc.\n  function transferSig(bytes32 sig, uint256 count, address newOwner) external {\n    uint256 numOwned = getNumSigsOwned(sig);\n\n    // Can't transfer cards you don't own\n    require(numOwned >= count);\n\n    // If transferring from contract owner, cancel the proper number of sales if necessary\n    if (msg.sender == owner) {\n      uint256 remaining = numOwned.sub(count);\n\n      if (remaining < _ownerSigToNumSales[sig]) {\n        uint256 numSalesToCancel = _ownerSigToNumSales[sig].sub(remaining);\n\n        for (uint256 i = 0; i < numSalesToCancel; i++) {\n          removeSale(sig);\n        }\n      }\n    } else {\n      // Remove existing sale if transferring all owned cards\n      if (numOwned == count && _addressToSigToSalePrice[msg.sender][sig] > 0) {\n        removeSale(sig);\n      }\n    }\n\n    // Transfer in registry\n    registryTransfer(msg.sender, newOwner, sig, count);\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"totalPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newShareholder\",\"type\":\"address\"}],\"name\":\"addShareholderAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTxFeePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sig\",\"type\":\"bytes32\"}],\"name\":\"getNumSigsOwned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shareholder1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawPayments\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numShareholders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shareholder2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sig\",\"type\":\"bytes32\"}],\"name\":\"removeSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sig\",\"type\":\"bytes32\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shareholder3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"sigToNumSales\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sig\",\"type\":\"bytes32\"},{\"name\":\"artist\",\"type\":\"address\"},{\"name\":\"txFeePercent\",\"type\":\"uint256\"},{\"name\":\"genesisSalePercent\",\"type\":\"uint256\"},{\"name\":\"numToAdd\",\"type\":\"uint256\"},{\"name\":\"startingPrice\",\"type\":\"uint256\"}],\"name\":\"addCard\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllSigs\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sig\",\"type\":\"bytes32\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"createSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawContractBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sig\",\"type\":\"bytes32\"},{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"relistGenesisSales\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sig\",\"type\":\"bytes32\"}],\"name\":\"getBestSale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sig\",\"type\":\"bytes32\"}],\"name\":\"getNumSigs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sig\",\"type\":\"bytes32\"},{\"name\":\"count\",\"type\":\"uint256\"},{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferSig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sig\",\"type\":\"bytes32\"}],\"name\":\"getMySalePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_sig\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"SalePosted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_sig\",\"type\":\"bytes32\"}],\"name\":\"SaleCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sig\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_numAdded\",\"type\":\"uint256\"}],\"name\":\"CardCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sig\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"CardsTransferred\",\"type\":\"event\"}]",
  "bytecode": "60806040526000600f5533600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612e15806100596000396000f30060806040526004361061013d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680625b448714610142578063467aeec91461016d5780634f9bf601146101b057806350a8d2b9146101db5780635e1dca04146102205780636103d70b1461027757806368eca6131461028e57806370780a7a146102b95780638d182f01146103105780638da5cb5b146103415780639c9a106114610398578063a4620d67146103bc578063b519739714610413578063b6ca878c14610458578063bb1630f2146104d1578063bf735b131461053d578063bfab3db914610578578063c29402f11461058f578063c41efe08146105ca578063c69b393614610642578063e2982c2114610687578063f2fde38b146106de578063f37bdaac14610721578063fc6c403b1461077c575b600080fd5b34801561014e57600080fd5b506101576107c1565b6040518082815260200191505060405180910390f35b34801561017957600080fd5b506101ae600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107c7565b005b3480156101bc57600080fd5b506101c5610bf7565b6040518082815260200191505060405180910390f35b3480156101e757600080fd5b5061020a6004803603810190808035600019169060200190929190505050610bfc565b6040518082815260200191505060405180910390f35b34801561022c57600080fd5b50610235610c5e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561028357600080fd5b5061028c610c84565b005b34801561029a57600080fd5b506102a3610dab565b6040518082815260200191505060405180910390f35b3480156102c557600080fd5b506102ce610db1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561031c57600080fd5b5061033f6004803603810190808035600019169060200190929190505050610dd7565b005b34801561034d57600080fd5b50610356610e4b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103ba6004803603810190808035600019169060200190929190505050610e71565b005b3480156103c857600080fd5b506103d1610fad565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561041f57600080fd5b506104426004803603810190808035600019169060200190929190505050610fd3565b6040518082815260200191505060405180910390f35b34801561046457600080fd5b506104cf6004803603810190808035600019169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190929190505050610feb565b005b3480156104dd57600080fd5b506104e6611093565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561052957808201518184015260208101905061050e565b505050509050019250505060405180910390f35b34801561054957600080fd5b506105766004803603810190808035600019169060200190929190803590602001909291905050506110ef565b005b34801561058457600080fd5b5061058d6111e3565b005b34801561059b57600080fd5b506105c86004803603810190808035600019169060200190929190803590602001909291905050506112cd565b005b3480156105d657600080fd5b506105f9600480360381019080803560001916906020019092919050505061151c565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b34801561064e57600080fd5b5061067160048036038101908080356000191690602001909291905050506115f1565b6040518082815260200191505060405180910390f35b34801561069357600080fd5b506106c8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611616565b6040518082815260200191505060405180910390f35b3480156106ea57600080fd5b5061071f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061162e565b005b34801561072d57600080fd5b5061077a600480360381019080803560001916906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611786565b005b34801561078857600080fd5b506107ab6004803603810190808035600019169060200190929190505050611919565b6040518082815260200191505060405180910390f35b60015481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561082357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561085f57600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156108bc57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806109675750600073ffffffffffffffffffffffffffffffffffffffff16600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b806109c05750600073ffffffffffffffffffffffffffffffffffffffff16600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b15156109cb57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610a845780600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610a796001600f5461197b90919063ffffffff16565b600f81905550610bf4565b600073ffffffffffffffffffffffffffffffffffffffff16600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610b3d5780600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610b326001600f5461197b90919063ffffffff16565b600f81905550610bf3565b600073ffffffffffffffffffffffffffffffffffffffff16600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610bf25780600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610beb6001600f5461197b90919063ffffffff16565b600f819055505b5b5b50565b600481565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008360001916600019168152602001908152602001600020549050919050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000803391506000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008114151515610cdb57600080fd5b803073ffffffffffffffffffffffffffffffffffffffff163110151515610d0157600080fd5b610d168160015461199990919063ffffffff16565b60018190555060008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610da6573d6000803e3d6000fd5b505050565b600f5481565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000836000191660001916815260200190815260200160002054111515610e3e57600080fd5b610e4833826119b2565b50565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000806000610e828661151c565b8095508196505050600084118015610ec75750600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614155b1515610ed257600080fd5b610f236000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020543461197b90919063ffffffff16565b9250838310151515610f3457600080fd5b83341015610f5957610f5833610f53348761199990919063ffffffff16565b611dc1565b5b610f6284611e73565b9150610f77828561199990919063ffffffff16565b9050610f84868683611e8c565b610f8e8683611f38565b610f9885876119b2565b610fa58533886001611f7d565b505050505050565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60096020528060005260406000206000915090505481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561104757600080fd5b611074600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687846121f1565b6110808686868661230b565b61108b86828461245c565b505050505050565b606060028054806020026020016040519081016040528092919081815260200182805480156110e557602002820191906000526020600020905b815460001916815260200190600101908083116110cd575b5050505050905090565b6000811115156110fe57600080fd5b600061110983610bfc565b11151561111557600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806111c957506000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000846000191660001916815260200190815260200160002054145b15156111d457600080fd5b6111df338383612746565b5050565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561124257600080fd5b3073ffffffffffffffffffffffffffffffffffffffff163191506112716001548361199990919063ffffffff16565b905060008111151561128257600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156112c8573d6000803e3d6000fd5b505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561132957600080fd5b73e3f10b91a8fb0e629a178ee4d3d3ac05fd7c5b8963840a9716600660008560001916600019168152602001908152602001600020600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060006040518083038186803b15801561140c57600080fd5b505af4158015611420573d6000803e3d6000fd5b505050508060076000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008460001916600019168152602001908152602001600020819055508160001916600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f354f175e145563d8eefe972795cc6f0b8b0d796ba29162053129982ad5d5f691836040518082815260200191505060405180910390a35050565b60008073e3f10b91a8fb0e629a178ee4d3d3ac05fd7c5b89630572f6576006600086600019166000191681526020019081526020016000206040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050604080518083038186803b1580156115a357600080fd5b505af41580156115b7573d6000803e3d6000fd5b505050506040513d60408110156115cd57600080fd5b81019080805190602001909291908051906020019092919050505091509150915091565b6000600460008360001916600019168152602001908152602001600020549050919050565b60006020528060005260406000206000915090505481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561168a57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156116c657600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060008061179587610bfc565b93508584101515156117a657600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561188d5761180f868561199990919063ffffffff16565b9250600860008860001916600019168152602001908152602001600020548310156118885761186283600860008a600019166000191681526020019081526020016000205461199990919063ffffffff16565b9150600090505b818110156118875761187a87610dd7565b8080600101915050611869565b5b611904565b85841480156118f457506000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000896000191660001916815260200190815260200160002054115b156119035761190287610dd7565b5b5b61191033868989611f7d565b50505050505050565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008360001916600019168152602001908152602001600020549050919050565b600080828401905083811015151561198f57fe5b8091505092915050565b60008282111515156119a757fe5b818303905092915050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611bd357611a3760016008600084600019166000191681526020019081526020016000205461199990919063ffffffff16565b600860008360001916600019168152602001908152602001600020819055506000600860008360001916600019168152602001908152602001600020541415611bce5773e3f10b91a8fb0e629a178ee4d3d3ac05fd7c5b8963eb43cd16600660008460001916600019168152602001908152602001600020846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b158015611b3357600080fd5b505af4158015611b47573d6000803e3d6000fd5b505050506040513d6020811015611b5d57600080fd5b8101908080519060200190929190505050506000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008360001916600019168152602001908152602001600020819055505b611d27565b73e3f10b91a8fb0e629a178ee4d3d3ac05fd7c5b8963eb43cd16600660008460001916600019168152602001908152602001600020846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b158015611c8c57600080fd5b505af4158015611ca0573d6000803e3d6000fd5b505050506040513d6020811015611cb657600080fd5b8101908080519060200190929190505050506000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008360001916600019168152602001908152602001600020819055505b611d5660016009600084600019166000191681526020019081526020016000205461199990919063ffffffff16565b6009600083600019166000191681526020019081526020016000208190555080600019168273ffffffffffffffffffffffffffffffffffffffff167fea5ab772b9c02a538d11e47d094496a6e24123ee5d26c1ec94db232afada1cf760405160405180910390a35050565b611e12816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461199990919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611e698160015461199990919063ffffffff16565b6001819055505050565b6000606460048302811515611e8457fe5b049050919050565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611f2657611eee856129c7565b9150611efa8584612a0c565b9050611f068282612a6b565b611f21611f1c828561199990919063ffffffff16565b612b1d565b611f31565b611f308484612a6b565b5b5050505050565b600080611f458484612cd4565b9150611f50846129c7565b9050611f5c8183612a6b565b611f77611f72838561199990919063ffffffff16565b612b1d565b50505050565b600081111515611f8c57600080fd5b80600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084600019166000191681526020019081526020016000205410151515611ff357600080fd5b61205e81600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085600019166000191681526020019081526020016000205461199990919063ffffffff16565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084600019166000191681526020019081526020016000208190555061212581600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085600019166000191681526020019081526020016000205461197b90919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008460001916600019168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1683600019167fca854e9a512debe5ebf4a5228b275f9d8c3c005f95ba3660d7a6a66fdc72b112846040518082815260200191505060405180910390a450505050565b60006004600084600019166000191681526020019081526020016000205414151561221b57600080fd5b600282908060018154018082558091505090600182039060005260206000200160009091929091909150906000191690555080600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000846000191660001916815260200190815260200160002081905550806004600084600019166000191681526020019081526020016000208190555081600019167f5ac4a187d29c4350cc4df530b82f63c563573f6a54125942974ca8c99e4bede9826040518082815260200191505060405180910390a2505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561234757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600a6000866000191660001916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156123bd57600080fd5b82600a6000866000191660001916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604080519081016040528083815260200182815250600b60008660001916600019168152602001908152602001600020906002612455929190612d84565b5050505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156124b857600080fd5b73e3f10b91a8fb0e629a178ee4d3d3ac05fd7c5b8963840a9716600660008660001916600019168152602001908152602001600020600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060006040518083038186803b15801561259b57600080fd5b505af41580156125af573d6000803e3d6000fd5b505050508160076000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000856000191660001916815260200190815260200160002081905550612660816008600086600019166000191681526020019081526020016000205461197b90919063ffffffff16565b600860008560001916600019168152602001908152602001600020819055506126ad816009600086600019166000191681526020019081526020016000205461197b90919063ffffffff16565b600960008560001916600019168152602001908152602001600020819055508260001916600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f354f175e145563d8eefe972795cc6f0b8b0d796ba29162053129982ad5d5f691846040518082815260200191505060405180910390a3505050565b73e3f10b91a8fb0e629a178ee4d3d3ac05fd7c5b8963840a971660066000856000191660001916815260200190815260200160002085846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060006040518083038186803b15801561280757600080fd5b505af415801561281b573d6000803e3d6000fd5b5050505080600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008460001916600019168152602001908152602001600020819055506128ab60016009600085600019166000191681526020019081526020016000205461197b90919063ffffffff16565b60096000846000191660001916815260200190815260200160002081905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561296f5761294f60016008600085600019166000191681526020019081526020016000205461197b90919063ffffffff16565b600860008460001916600019168152602001908152602001600020819055505b81600019168373ffffffffffffffffffffffffffffffffffffffff167f354f175e145563d8eefe972795cc6f0b8b0d796ba29162053129982ad5d5f691836040518082815260200191505060405180910390a3505050565b6000600a6000836000191660001916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080600b600085600019166000191681526020019081526020016000206001600281101515612a3857fe5b01549050612a626064612a548386612d3390919063ffffffff16565b612d6e90919063ffffffff16565b91505092915050565b612abc816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461197b90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612b138160015461197b90919063ffffffff16565b6001819055505050565b600080600f541115612cd057612b3e600f5483612d6e90919063ffffffff16565b9050600073ffffffffffffffffffffffffffffffffffffffff16600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612bc557612bc4600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682612a6b565b5b600073ffffffffffffffffffffffffffffffffffffffff16600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612c4a57612c49600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682612a6b565b5b600073ffffffffffffffffffffffffffffffffffffffff16600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612ccf57612cce600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682612a6b565b5b5b5050565b600080600b600085600019166000191681526020019081526020016000206000600281101515612d0057fe5b01549050612d2a6064612d1c8386612d3390919063ffffffff16565b612d6e90919063ffffffff16565b91505092915050565b6000806000841415612d485760009150612d67565b8284029050828482811515612d5957fe5b04141515612d6357fe5b8091505b5092915050565b60008183811515612d7b57fe5b04905092915050565b8260028101928215612db3579160200282015b82811115612db2578251825591602001919060010190612d97565b5b509050612dc09190612dc4565b5090565b612de691905b80821115612de2576000816000905550600101612dca565b5090565b905600a165627a7a7230582072ada87abffdcf404de6f3759a226a3fd03354d3b1849d444573cbd4cb86c3800029"
}