{
  "address": "0x5f875083f7f3c71ee347a37bd3e234f60c062cd0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BankWallet",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-16\n*/\n\npragma solidity ^0.4.25;\n\n\ncontract SafeMath {\n    function safeSub(uint a, uint b) internal pure returns (uint) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function safeSub(int a, int b) internal pure returns (int) {\n        if (b < 0) assert(a - b > a);\n        else assert(a - b <= a);\n        return a - b;\n    }\n\n    function safeAdd(uint a, uint b) internal pure returns (uint) {\n        uint c = a + b;\n        assert(c >= a && c >= b);\n        return c;\n    }\n\n    function safeMul(uint a, uint b) internal pure returns (uint) {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n}\n\n\ncontract Token {\n    function transfer(address receiver, uint amount) public returns (bool) {\n        (receiver);\n        (amount);\n        return false;\n    }\n\n    function balanceOf(address holder) public view returns (uint) {\n        (holder);\n        return 0;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        (_spender);\n        (_value);\n        return false;\n    }\n}\n\n\ncontract Casino {\n    function deposit(address _receiver, uint _amount, bool _chargeGas) public;\n}\n\n\ncontract Owned {\n    address public owner;\n    address public receiver;\n    mapping (address => bool) public moderator;\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyModerator {\n        require(moderator[msg.sender]);\n        _;\n    }\n\n    modifier onlyAdmin {\n        require(moderator[msg.sender] || msg.sender == owner);\n        _;\n    }\n\n    constructor() internal {\n        owner = msg.sender;\n        receiver = msg.sender;\n    }\n\n    function setOwner(address _address) public onlyOwner {\n        owner = _address;\n    }\n\n    function setReceiver(address _address) public onlyAdmin {\n        receiver = _address;\n    }\n\n    function addModerator(address _address) public onlyOwner {\n        moderator[_address] = true;\n    }\n\n    function removeModerator(address _address) public onlyOwner {\n        moderator[_address] = false;\n    }\n}\n\n\ncontract RequiringAuthorization is Owned {\n    mapping(address => bool) public authorized;\n\n    modifier onlyAuthorized {\n        require(authorized[msg.sender]);\n        _;\n    }\n\n    constructor() internal {\n        authorized[msg.sender] = true;\n    }\n\n    function authorize(address _address) public onlyAdmin {\n        authorized[_address] = true;\n    }\n\n    function deauthorize(address _address) public onlyAdmin {\n        authorized[_address] = false;\n    }\n\n}\n\n\ncontract Pausable is Owned {\n    bool public paused = false;\n\n    event Paused(bool _paused);\n\n    modifier onlyPaused {\n        require(paused == true);\n        _;\n    }\n\n    modifier onlyActive {\n        require(paused == false);\n        _;\n    }\n\n    function pause() public onlyActive onlyAdmin {\n        paused = true;\n    }\n\n    function activate() public onlyPaused onlyOwner {\n        paused = false;\n    }\n}\n\n\ncontract BankWallet is Pausable, RequiringAuthorization, SafeMath {\n    address public edgelessToken;\n    address public edgelessCasino;\n\n    uint public oneEdg = 100000;\n    uint public maxFundAmount = 0.22 ether;\n\n    event Withdrawal(address _token, uint _amount);\n    event Deposit(address _receiver, uint _amount);\n    event Fund(address _receiver, uint _amount);\n\n    constructor(address _token, address _casino) public {\n        edgelessToken = _token;\n        edgelessCasino = _casino;\n        owner = msg.sender;\n    }\n\n    function () public payable {}\n\n    function withdraw(address _token, uint _amount) public onlyAdmin returns (bool _success) {\n        _success = false;\n        if (_token == address (0)) {\n            uint weiAmount = _amount;\n            if (weiAmount > address(this).balance) {\n                return false;\n            }\n            _success = receiver.send(weiAmount);\n        } else {\n            Token __token = Token(_token);\n            uint amount = _amount;\n            if (amount > __token.balanceOf(this)) {\n                return false;\n            }\n            _success = __token.transfer(receiver, amount);\n        }\n\n        if (_success) {\n            emit Withdrawal(_token, _amount);\n        }\n    }\n\n    function approve(uint _amount) public onlyAuthorized {\n        _approveForCasino(edgelessCasino, _amount);\n    }\n\n    function deposit(address _address, uint _amount, bool _chargeGas) public onlyAuthorized {\n        Casino __casino = Casino(edgelessCasino);\n        __casino.deposit(_address, _amount, _chargeGas);\n        emit Deposit(_address, _amount);\n    }\n\n    function fund(address _address, uint _amount) public onlyAuthorized returns (bool _success) {\n        require(_amount <= maxFundAmount);\n        _success = _address.send(_amount);\n        if (_success) {\n            emit Fund(_address, _amount);\n        }\n    }\n\n    function setCasinoContract(address _casino) public onlyAdmin {\n        edgelessCasino = _casino;\n        _approveForCasino(_casino, 1000000000);\n    }\n\n    function setMaxFundAmount(uint _amount) public onlyAdmin {\n        maxFundAmount = _amount;\n    }\n\n    function _approveForCasino(address _address, uint _amount) internal returns (bool _success) {\n        Token __token = Token(edgelessToken);\n        _success = __token.approve(_address, safeMul(_amount, oneEdg));\n    }\n\n}",
  "bytecode": "60806040526003805460ff19169055620186a060075567030d98d59a96000060085534801561002d57600080fd5b50604051604080610d3e83398101604090815281516020928301516000805433600160a060020a031991821681178355600180548316821781558184526004909752948220805460ff1916909617909555600580548616600160a060020a03948516179055600680548616939092169290921790558054909216178155610c849081906100ba90396000f3006080604052600436106101325763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630f15f4c0811461013457806313af403514610149578063159e15771461016a57806327c97fa5146101915780632f311c48146101b25780633edd1128146101e35780635c975abb1461020c5780636ec3e02814610235578063707c0e0b1461024d578063718da7ee1461026e5780637b1837de1461028f57806380cac648146102b3578063837b5c03146102c85780638456cb59146102dd578063869d785f146102f25780638da5cb5b14610313578063b1bed4f514610328578063b532e4cb14610349578063b6a5d7de1461036a578063b759f9541461038b578063b9181611146103a3578063f3fef3a3146103c4578063f7260d3e146103e8575b005b34801561014057600080fd5b506101326103fd565b34801561015557600080fd5b50610132600160a060020a0360043516610434565b34801561017657600080fd5b5061017f61047a565b60408051918252519081900360200190f35b34801561019d57600080fd5b50610132600160a060020a0360043516610480565b3480156101be57600080fd5b506101c76104d4565b60408051600160a060020a039092168252519081900360200190f35b3480156101ef57600080fd5b50610132600160a060020a036004351660243560443515156104e3565b34801561021857600080fd5b506102216105dd565b604080519115158252519081900360200190f35b34801561024157600080fd5b506101326004356105e6565b34801561025957600080fd5b50610132600160a060020a036004351661061e565b34801561027a57600080fd5b50610132600160a060020a036004351661068b565b34801561029b57600080fd5b50610221600160a060020a03600435166024356106ed565b3480156102bf57600080fd5b5061017f610792565b3480156102d457600080fd5b506101c7610798565b3480156102e957600080fd5b506101326107a7565b3480156102fe57600080fd5b50610132600160a060020a03600435166107f9565b34801561031f57600080fd5b506101c7610831565b34801561033457600080fd5b50610221600160a060020a0360043516610840565b34801561035557600080fd5b50610132600160a060020a0360043516610855565b34801561037657600080fd5b50610132600160a060020a0360043516610890565b34801561039757600080fd5b506101326004356108e7565b3480156103af57600080fd5b50610221600160a060020a036004351661091b565b3480156103d057600080fd5b50610221600160a060020a0360043516602435610930565b3480156103f457600080fd5b506101c7610b57565b60035460ff16151560011461041157600080fd5b600054600160a060020a0316331461042857600080fd5b6003805460ff19169055565b600054600160a060020a0316331461044b57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60075481565b3360009081526002602052604090205460ff16806104a85750600054600160a060020a031633145b15156104b357600080fd5b600160a060020a03166000908152600460205260409020805460ff19169055565b600554600160a060020a031681565b3360009081526004602052604081205460ff16151561050157600080fd5b50600654604080517f3edd1128000000000000000000000000000000000000000000000000000000008152600160a060020a038681166004830152602482018690528415156044830152915191909216918291633edd11289160648082019260009290919082900301818387803b15801561057b57600080fd5b505af115801561058f573d6000803e3d6000fd5b505060408051600160a060020a03881681526020810187905281517fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9450908190039091019150a150505050565b60035460ff1681565b3360009081526002602052604090205460ff168061060e5750600054600160a060020a031633145b151561061957600080fd5b600855565b3360009081526002602052604090205460ff16806106465750600054600160a060020a031633145b151561065157600080fd5b6006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03831617905561068781633b9aca00610b66565b5050565b3360009081526002602052604090205460ff16806106b35750600054600160a060020a031633145b15156106be57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b3360009081526004602052604081205460ff16151561070b57600080fd5b60085482111561071a57600080fd5b604051600160a060020a0384169083156108fc029084906000818181858888f193505050509050801561078c5760408051600160a060020a03851681526020810184905281517fda8220a878ff7a89474ccffdaa31ea1ed1ffbb0207d5051afccc4fbaf81f9bcd929181900390910190a15b92915050565b60085481565b600654600160a060020a031681565b60035460ff16156107b757600080fd5b3360009081526002602052604090205460ff16806107df5750600054600160a060020a031633145b15156107ea57600080fd5b6003805460ff19166001179055565b600054600160a060020a0316331461081057600080fd5b600160a060020a03166000908152600260205260409020805460ff19169055565b600054600160a060020a031681565b60026020526000908152604090205460ff1681565b600054600160a060020a0316331461086c57600080fd5b600160a060020a03166000908152600260205260409020805460ff19166001179055565b3360009081526002602052604090205460ff16806108b85750600054600160a060020a031633145b15156108c357600080fd5b600160a060020a03166000908152600460205260409020805460ff19166001179055565b3360009081526004602052604090205460ff16151561090557600080fd5b60065461068790600160a060020a031682610b66565b60046020526000908152604090205460ff1681565b3360009081526002602052604081205481908190819060ff168061095e5750600054600160a060020a031633145b151561096957600080fd5b60009350600160a060020a03861615156109c25784925030318311156109925760009350610b4e565b600154604051600160a060020a039091169084156108fc029085906000818181858888f193505050509350610b03565b5050604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905185918591600160a060020a038416916370a082319160248083019260209291908290030181600087803b158015610a2957600080fd5b505af1158015610a3d573d6000803e3d6000fd5b505050506040513d6020811015610a5357600080fd5b5051811115610a655760009350610b4e565b600154604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810184905290519184169163a9059cbb916044808201926020929091908290030181600087803b158015610ad457600080fd5b505af1158015610ae8573d6000803e3d6000fd5b505050506040513d6020811015610afe57600080fd5b505193505b8315610b4e5760408051600160a060020a03881681526020810187905281517f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65929181900390910190a15b50505092915050565b600154600160a060020a031681565b600554600754600091600160a060020a031690819063095ea7b3908690610b8e908790610c2d565b6040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610bf957600080fd5b505af1158015610c0d573d6000803e3d6000fd5b505050506040513d6020811015610c2357600080fd5b5051949350505050565b6000828202831580610c495750828482811515610c4657fe5b04145b1515610c5157fe5b93925050505600a165627a7a7230582068137495ea9b8b31cf86211b745a29ae9d74fba8c8ff2df4a2751d4bb27c30e20029000000000000000000000000801f67ec764459f9ec3cb9d6b998547f2de6ed3f000000000000000000000000764280456ae178591e037e36b01f69a52d9327a7",
  "constructorArguments": "000000000000000000000000801f67ec764459f9ec3cb9d6b998547f2de6ed3f000000000000000000000000764280456ae178591e037e36b01f69a52d9327a7"
}