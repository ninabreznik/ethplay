{
  "address": "0x0a680e503fd9ae14b62444c75ffb4bef1f105666",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "_RowanCoin",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-07\n*/\n\npragma solidity ^0.4.23;\n\n// Symbol      : GZM\n\n// Name        : Arma Coin\n\n// Max supply: 1,000,000,000.00\n\n// Decimals    : 8\n//\n// ----------------------------------------------------------------------------\n// ----------------------------------------------------------------------------\n// Safe maths\n// ----------------------------------------------------------------------------\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n        return c;\n    }\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\nlibrary ExtendedMath {\n    //return the smaller of the two inputs (a or b)\n    function limitLessThan(uint a, uint b) internal pure returns (uint c) {\n        if(a > b) return b;\n        return a;\n    }\n}\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\ncontract EIP918Interface {\n\n    /*\n     * Externally facing mint function that is called by miners to validate challenge digests, calculate reward,\n     * populate statistics, mutate epoch variables and adjust the solution difficulty as required. Once complete,\n     * a Mint event is emitted before returning a success indicator.\n     **/\n    function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success);\n\n    /*\n     * Optional\n     * Externally facing merge function that is called by miners to validate challenge digests, calculate reward,\n     * populate statistics, mutate epoch variables and adjust the solution difficulty as required. Additionally, the\n     * merge function takes an array of target token addresses to be used in merged rewards. Once complete,\n     * a Mint event is emitted before returning a success indicator.\n     **/\n    //function merge(uint256 nonce, bytes32 challenge_digest, address[] mineTokens) public returns (bool);\n\n    /*\n     * Returns the challenge number\n     **/\n    function getChallengeNumber() public view returns (bytes32);\n\n    /*\n     * Returns the mining difficulty. The number of digits that the digest of the PoW solution requires which \n     * typically auto adjusts during reward generation.\n     **/\n    function getMiningDifficulty() public view returns (uint);\n\n    /*\n     * Returns the mining target\n     **/\n    function getMiningTarget() public view returns (uint);\n\n    /*\n     * Return the current reward amount. Depending on the algorithm, typically rewards are divided every reward era \n     * as tokens are mined to provide scarcity\n     **/\n    function getMiningReward() public view returns (uint);\n    \n    /*\n     * Upon successful verification and reward the mint method dispatches a Mint Event indicating the reward address, \n     * the reward amount, the epoch count and newest challenge number.\n     **/\n    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\n\n}\n// ----------------------------------------------------------------------------\n// Contract function to receive approval and execute function in one call\n//\n// Borrowed from MiniMeToken\n// ----------------------------------------------------------------------------\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n}\n// ----------------------------------------------------------------------------\n// Owned contract\n// ----------------------------------------------------------------------------\ncontract Owned {\n    address public owner;\n    address public newOwner;\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n    \n    constructor() public {\n        owner = msg.sender;\n    }\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\n// ----------------------------------------------------------------------------\n// ERC20 Token, with the addition of symbol, name and decimals and an\n// initial fixed supply\n// ----------------------------------------------------------------------------\ncontract _RowanCoin is ERC20Interface, EIP918Interface, Owned {\n    using SafeMath for uint;\n    using ExtendedMath for uint;\n    string public symbol;\n    string public  name;\n    uint8 public decimals;\n    uint public _maxSupply;\n    uint public _totalSupply;\n    uint public latestDifficultyPeriodStarted;\n    uint public epochCount;//number of 'blocks' mined\n    //a little number\n    uint public  _MINIMUM_TARGET = 2**16;\n    //a big number is easier ; just find a solution that is smaller\n    //uint public  _MAXIMUM_TARGET = 2**224;  bitcoin uses 224\n    uint public  _MAXIMUM_TARGET = 2**224;\n    uint public miningTarget;\n    bytes32 public challengeNumber;   //generate a new one when a new reward is minted\n    address public lastRewardTo;\n    uint public lastRewardAmount;\n    uint public lastRewardEthBlockNumber;\n    // a bunch of maps to know where this is going (pun intended)\n    uint public _MAX_MESSAGE_LENGTH = 360;\n    \n    mapping(bytes32 => bytes32) public solutionForChallenge;\n    mapping(uint => uint) public targetForEpoch;\n    mapping(uint => uint) public timeStampForEpoch;\n    mapping(address => uint) balances;\n    mapping(address => address) donationsTo;\n    mapping(address => mapping(address => uint)) allowed;\n    mapping(address => string) public messages;\n    event Donation(address donation);\n    event DonationAddressOf(address donator, address donnationAddress);\n    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\n\n    // ------------------------------------------------------------------------\n    // Constructor\n    // ------------------------------------------------------------------------\n    constructor() public{\n        symbol = \"GZM\";\n        name = \"Arma Coin\";\n        \n        decimals = 8;\n        epochCount = 0;\n        _maxSupply = 1000000000*10**uint(decimals); \n        _totalSupply = 300000000*10**uint(decimals); \n        \n        \n        targetForEpoch[epochCount] = _MAXIMUM_TARGET;\n        challengeNumber = \"GENESIS_BLOCK\";\n        solutionForChallenge[challengeNumber] = \"42\"; // ahah yes\n        timeStampForEpoch[epochCount] = block.timestamp;\n        latestDifficultyPeriodStarted = block.number;\n        \n        epochCount = epochCount.add(1);\n        targetForEpoch[epochCount] = _MAXIMUM_TARGET;\n        miningTarget = _MAXIMUM_TARGET;\n        \n        balances[owner] = _totalSupply;\n        emit Transfer(address(0), owner, _totalSupply);\n    }\n\n    function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success) {\n        //the PoW must contain work that includes a recent ethereum block hash (challenge number) and the msg.sender's address to prevent MITM attacks\n        bytes32 digest =  keccak256(challengeNumber, msg.sender, nonce );\n        //the challenge digest must match the expected\n        if (digest != challenge_digest) revert();\n        //the digest must be smaller than the target\n        if(uint256(digest) > miningTarget) revert();\n        //only allow one reward for each challenge\n        bytes32 solution = solutionForChallenge[challenge_digest];\n        solutionForChallenge[challengeNumber] = digest;\n        if(solution != 0x0) revert();  //prevent the same answer from awarding twice\n        uint reward_amount = getMiningReward();\n        // minting limit is _maxSupply\n        require ( _totalSupply.add(reward_amount) <= _maxSupply);\n        balances[msg.sender] = balances[msg.sender].add(reward_amount);\n        _totalSupply = _totalSupply.add(reward_amount);\n        //set readonly diagnostics data\n        lastRewardTo = msg.sender;\n        lastRewardAmount = reward_amount;\n        lastRewardEthBlockNumber = block.number;\n        _startNewMiningEpoch();\n        emit Mint(msg.sender, reward_amount, epochCount, challengeNumber );\n       return true;\n    }\n\n    function strConcat(string _a, string _b) internal returns (string){\n        bytes memory _ba = bytes(_a);\n        bytes memory _bb = bytes(_b);\n        string memory ab = new string(_ba.length + _bb.length );\n        bytes memory ba = bytes(ab);\n        uint k = 0;\n        for (uint i = 0; i < _ba.length; i++) ba[k++] = _ba[i];\n        for (i = 0; i < _bb.length; i++) ba[k++] = _bb[i];\n        return string(ba);\n    }\n\n    function addMessage(address advertiser, string newMessage) public {\n        bytes memory bs = bytes(newMessage);\n        require (bs.length <= _MAX_MESSAGE_LENGTH );\n        require (balances[msg.sender] >= 100000000);\n        balances[msg.sender] = balances[msg.sender].sub(100000000);\n        balances[advertiser] = balances[advertiser].add(100000000);\n        messages[advertiser] = strConcat( messages[advertiser], \"\\n\");\n        messages[advertiser] = strConcat( messages[advertiser], newMessage);\n        emit Transfer(msg.sender, advertiser, 100000000);\n    }\n\n    //a new 'block' to be mined\n    function _startNewMiningEpoch() internal {\n        \n        timeStampForEpoch[epochCount] = block.timestamp;\n        epochCount = epochCount.add(1);\n    \n      //Difficulty adjustment following the DigiChieldv3 implementation (Tempered-SMA)\n      // Allows more thorough protection against multi-pool hash attacks\n      // https://github.com/zawy12/difficulty-algorithms/issues/9\n        miningTarget = _reAdjustDifficulty(epochCount);\n      //make the latest ethereum block hash a part of the next challenge for PoW to prevent pre-mining future blocks\n      //do this last since this is a protection mechanism in the mint() function\n      challengeNumber = blockhash(block.number.sub(1));\n    }\n\n    //https://github.com/zawy12/difficulty-algorithms/issues/21\n    //readjust the target via a tempered EMA\n    function _reAdjustDifficulty(uint epoch) internal returns (uint) {\n    \n        uint timeTarget = 300;  // We want miners to spend 5 minutes to mine each 'block'\n        uint N = 6180;          //N = 1000*n, ratio between timeTarget and windowTime (31-ish minutes)\n                                // (Ethereum doesn't handle floating point numbers very well)\n        uint elapsedTime = timeStampForEpoch[epoch.sub(1)].sub(timeStampForEpoch[epoch.sub(2)]); // will revert if current timestamp is smaller than the previous one\n        targetForEpoch[epoch] = (targetForEpoch[epoch.sub(1)].mul(10000)).div( N.mul(3920).div(N.sub(1000).add(elapsedTime.mul(1042).div(timeTarget))).add(N));\n        //              newTarget   =   Tampered EMA-retarget on the last 6 blocks (a bit more, it's an approximation)\n\t// \t\t\t\tAlso, there's an adjust factor, in order to correct the delays induced by the time it takes for transactions to confirm\n\t//\t\t\t\tDifficulty is adjusted to the time it takes to produce a valid hash. Here, if we set it to take 300 seconds, it will actually take \n\t//\t\t\t\t300 seconds + TxConfirmTime to validate that block. So, we wad a little % to correct that lag time.\n\t//\t\t\t\tOnce Ethereum scales, it will actually make block times go a tad faster. There's no perfect answer to this problem at the moment\n        latestDifficultyPeriodStarted = block.number;\n        return targetForEpoch[epoch];\n    }\n\n    //this is a recent ethereum block hash, used to prevent pre-mining future blocks\n    function getChallengeNumber() public constant returns (bytes32) {\n        return challengeNumber;\n    }\n\n    //the number of zeroes the digest of the PoW solution requires.  Auto adjusts\n     function getMiningDifficulty() public constant returns (uint) {\n        return _MAXIMUM_TARGET.div(targetForEpoch[epochCount]);\n    }\n\n    function getMiningTarget() public constant returns (uint) {\n       return targetForEpoch[epochCount];\n    }\n\n    //There's no limit to the coin supply\n    //reward follows more or less the same emmission rate as coins'. 5 minutes per block / 105120 block in one year (roughly)\n    function getMiningReward() public constant returns (uint) {\n        bytes32 digest = solutionForChallenge[challengeNumber];\n        if(epochCount > 160000) return (50000   * 10**uint(decimals) );                                   //  14.4 M/day / ~ 1.0B Tokens in 20'000 blocks (coin supply @100'000th block ~ 150 Billions)\n        if(epochCount > 140000) return (75000   * 10**uint(decimals) );                                   //  21.6 M/day / ~ 1.5B Tokens in 20'000 blocks (coin supply @100'000th block ~ 149 Billions)\n        if(epochCount > 120000) return (125000  * 10**uint(decimals) );                                  //  36.0 M/day / ~ 2.5B Tokens in 20'000 blocks (coin supply @100'000th block ~ 146 Billions)\n        if(epochCount > 100000) return (250000  * 10**uint(decimals) );                                  //  72.0 M/day / ~ 5.0B Tokens in 20'000 blocks (coin supply @100'000th block ~ 141 Billions) (~ 1 year elapsed)\n        if(epochCount > 80000) return  (500000  * 10**uint(decimals) );                                   // 144.0 M/day / ~10.0B Tokens in 20'000 blocks (coin supply @ 80'000th block ~ 131 Billions)\n        if(epochCount > 60000) return  (1000000 * 10**uint(decimals) );                                  // 288.0 M/day / ~20.0B Tokens in 20'000 blocks (coin supply @ 60'000th block ~ 111 Billions)\n        if(epochCount > 40000) return  ((uint256(keccak256(digest)) % 2500000) * 10**uint(decimals) );   // 360.0 M/day / ~25.0B Tokens in 20'000 blocks (coin supply @ 40'000th block ~  86 Billions)\n        if(epochCount > 20000) return  ((uint256(keccak256(digest)) % 3500000) * 10**uint(decimals) );   // 504.0 M/day / ~35.0B Tokens in 20'000 blocks (coin supply @ 20'000th block ~  51 Billions)\n                               return  ((uint256(keccak256(digest)) % 5000000) * 10**uint(decimals) );                         // 720.0 M/day / ~50.0B Tokens in 20'000 blocks \n    }\n\n    //help debug mining software (even though challenge_digest isn't used, this function is constant and helps troubleshooting mining issues)\n    function getMintDigest(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number) public view returns (bytes32 digesttest) {\n        bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\n        return digest;\n    }\n\n    //help debug mining software\n    function checkMintSolution(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number, uint testTarget) public view returns (bool success) {\n      bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\n      if(uint256(digest) > testTarget) revert();\n      return (digest == challenge_digest);\n    }\n\n    // ------------------------------------------------------------------------\n    // Total supply\n    // ------------------------------------------------------------------------\n    function totalSupply() public constant returns (uint) {\n        return _totalSupply.sub(balances[address(0)]);\n    }\n\n    // ------------------------------------------------------------------------\n    // Get the token balance for account `tokenOwner`\n    // ------------------------------------------------------------------------\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n        return balances[tokenOwner];\n    }\n    \n    function donationTo(address tokenOwner) public constant returns (address donationAddress) {\n        return donationsTo[tokenOwner];\n    }\n    \n    function changeDonation(address donationAddress) public returns (bool success) {\n        donationsTo[msg.sender] = donationAddress;\n        \n        emit DonationAddressOf(msg.sender , donationAddress); \n        return true;\n    \n    }\n\n    // ------------------------------------------------------------------------\n    // Transfer the balance from token owner's account to `to` account\n    // - Owner's account must have sufficient balance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transfer(address to, uint tokens) public returns (bool success) {\n        \n        address donation = donationsTo[msg.sender];\n        balances[msg.sender] = (balances[msg.sender].sub(tokens)).add(5000); // 0.5 RWN for the sender\n        \n        balances[to] = balances[to].add(tokens);\n        balances[donation] = balances[donation].add(5000); // 0.5 GZM for the sender's donation address\n        \n        emit Transfer(msg.sender, to, tokens);\n        emit Donation(donation);\n        \n        return true;\n    }\n    \n    function transferAndDonateTo(address to, uint tokens, address donation) public returns (bool success) {\n        \n        balances[msg.sender] = (balances[msg.sender].sub(tokens)).add(5000); // 0.5 GZM for the sender\n        balances[to] = balances[to].add(tokens);\n        balances[donation] = balances[donation].add(5000); // 0.5 GZM for the sender's specified donation address\n        emit Transfer(msg.sender, to, tokens);\n        emit Donation(donation);\n        return true;\n    }\n    // ------------------------------------------------------------------------\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n    // from the token owner's account\n    //\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n    // recommends that there are no checks for the approval double-spend attack\n    // as this should be implemented in user interfaces\n    // ------------------------------------------------------------------------\n    function approve(address spender, uint tokens) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Transfer `tokens` from the `from` account to the `to` account\n    //\n    // The calling account must already have sufficient tokens approve(...)-d\n    // for spending from the `from` account and\n    // - From account must have sufficient balance to transfer\n    // - Spender must have sufficient allowance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n        \n        balances[from] = balances[from].sub(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        balances[donationsTo[from]] = balances[donationsTo[from]].add(5000);     // 0.5 GZM for the sender's donation address\n        balances[donationsTo[msg.sender]] = balances[donationsTo[msg.sender]].add(5000); // 0.5 GZM for the sender\n        emit Transfer(from, to, tokens);\n        emit Donation(donationsTo[from]);\n        emit Donation(donationsTo[msg.sender]);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Returns the amount of tokens approved by the owner that can be\n    // transferred to the spender's account\n    // ------------------------------------------------------------------------\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n    // from the token owner's account. The `spender` contract function\n    // `receiveApproval(...)` is then executed\n    // ------------------------------------------------------------------------\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Don't accept ETH\n    // ------------------------------------------------------------------------\n    function () public payable {\n        revert();\n    }\n    \n    // ------------------------------------------------------------------------\n    // Owner can transfer out any accidentally sent ERC20 tokens\n    // ------------------------------------------------------------------------\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"donation\",\"type\":\"address\"}],\"name\":\"transferAndDonateTo\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRewardEthBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMiningDifficulty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"challenge_digest\",\"type\":\"bytes32\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"timeStampForEpoch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMiningTarget\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"donationAddress\",\"type\":\"address\"}],\"name\":\"changeDonation\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMiningReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getChallengeNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"messages\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRewardTo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"targetForEpoch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"challenge_digest\",\"type\":\"bytes32\"},{\"name\":\"challenge_number\",\"type\":\"bytes32\"},{\"name\":\"testTarget\",\"type\":\"uint256\"}],\"name\":\"checkMintSolution\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"epochCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_MAXIMUM_TARGET\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"miningTarget\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"challengeNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"challenge_digest\",\"type\":\"bytes32\"},{\"name\":\"challenge_number\",\"type\":\"bytes32\"}],\"name\":\"getMintDigest\",\"outputs\":[{\"name\":\"digesttest\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"solutionForChallenge\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRewardAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"advertiser\",\"type\":\"address\"},{\"name\":\"newMessage\",\"type\":\"string\"}],\"name\":\"addMessage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestDifficultyPeriodStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"donationTo\",\"outputs\":[{\"name\":\"donationAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_MINIMUM_TARGET\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_MAX_MESSAGE_LENGTH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"donation\",\"type\":\"address\"}],\"name\":\"Donation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"donator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"donnationAddress\",\"type\":\"address\"}],\"name\":\"DonationAddressOf\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reward_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"epochCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newChallengeNumber\",\"type\":\"bytes32\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "6080604052620100006009557c0100000000000000000000000000000000000000000000000000000000600a556101686010553480156200003f57600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040805190810160405280600381526020017f475a4d000000000000000000000000000000000000000000000000000000000081525060029080519060200190620000cd92919062000399565b506040805190810160405280600981526020017f41726d6120436f696e0000000000000000000000000000000000000000000000815250600390805190602001906200011b92919062000399565b506008600460006101000a81548160ff021916908360ff1602179055506000600881905550600460009054906101000a900460ff1660ff16600a0a633b9aca0002600581905550600460009054906101000a900460ff1660ff16600a0a6311e1a30002600681905550600a54601260006008548152602001908152602001600020819055507f47454e455349535f424c4f434b00000000000000000000000000000000000000600c81600019169055507f343200000000000000000000000000000000000000000000000000000000000060116000600c54600019166000191681526020019081526020016000208160001916905550426013600060085481526020019081526020016000208190555043600781905550620002586001600854620003796401000000000262003369179091906401000000009004565b600881905550600a5460126000600854815260200190815260200160002081905550600a54600b81905550600654601460008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6006546040518082815260200191505060405180910390a362000448565b600081830190508281101515156200039057600080fd5b80905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003dc57805160ff19168380011785556200040d565b828001600101855582156200040d579182015b828111156200040c578251825591602001919060010190620003ef565b5b5090506200041c919062000420565b5090565b6200044591905b808211156200044157600081600090555060010162000427565b5090565b90565b61386580620004586000396000f300608060405260043610610204576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610209578063095ea7b3146102995780630f917e31146102fe578063163aa00d1461038357806317da485f146103ae5780631801fbe5146103d957806318160ddd1461042c57806322f4596f1461045757806323b872dd1461048257806329de379814610507578063313ce5671461054857806332e99708146105795780633eaaf86b146105a45780633f06e17c146105cf578063490203a71461062a5780634ef37628146106555780635fdd59f8146106885780636fd396d61461074457806370a082311461079b57806371d9e0df146107f257806379ba50971461083357806381269a561461084a578063829965cc146108b557806387a2a9d6146108e05780638a769d351461090b5780638ae0368b146109365780638da5cb5b1461096957806395d89b41146109c057806397566aa014610a50578063a70a8d2314610ab5578063a9059cbb14610b02578063bafedcaa14610b67578063bc7aa54d14610b92578063cae9ca5114610c1b578063cb9ae70714610cc6578063d416efdb14610cf1578063d4ee1d9014610d74578063dc39d06d14610dcb578063dc6e9cf914610e30578063dd62ed3e14610e5b578063e196823214610ed2578063f2fde38b14610efd575b600080fd5b34801561021557600080fd5b5061021e610f40565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561025e578082015181840152602081019050610243565b50505050905090810190601f16801561028b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102a557600080fd5b506102e4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610fde565b604051808215151515815260200191505060405180910390f35b34801561030a57600080fd5b50610369600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110d0565b604051808215151515815260200191505060405180910390f35b34801561038f57600080fd5b5061039861137a565b6040518082815260200191505060405180910390f35b3480156103ba57600080fd5b506103c3611380565b6040518082815260200191505060405180910390f35b3480156103e557600080fd5b506104126004803603810190808035906020019092919080356000191690602001909291905050506113b1565b604051808215151515815260200191505060405180910390f35b34801561043857600080fd5b50610441611654565b6040518082815260200191505060405180910390f35b34801561046357600080fd5b5061046c6116af565b6040518082815260200191505060405180910390f35b34801561048e57600080fd5b506104ed600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506116b5565b604051808215151515815260200191505060405180910390f35b34801561051357600080fd5b5061053260048036038101908080359060200190929190505050611d8e565b6040518082815260200191505060405180910390f35b34801561055457600080fd5b5061055d611da6565b604051808260ff1660ff16815260200191505060405180910390f35b34801561058557600080fd5b5061058e611db9565b6040518082815260200191505060405180910390f35b3480156105b057600080fd5b506105b9611dd6565b6040518082815260200191505060405180910390f35b3480156105db57600080fd5b50610610600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ddc565b604051808215151515815260200191505060405180910390f35b34801561063657600080fd5b5061063f611efc565b6040518082815260200191505060405180910390f35b34801561066157600080fd5b5061066a612139565b60405180826000191660001916815260200191505060405180910390f35b34801561069457600080fd5b506106c9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612143565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107095780820151818401526020810190506106ee565b50505050905090810190601f1680156107365780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561075057600080fd5b506107596121f3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107a757600080fd5b506107dc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612219565b6040518082815260200191505060405180910390f35b3480156107fe57600080fd5b5061081d60048036038101908080359060200190929190505050612262565b6040518082815260200191505060405180910390f35b34801561083f57600080fd5b5061084861227a565b005b34801561085657600080fd5b5061089b600480360381019080803590602001909291908035600019169060200190929190803560001916906020019092919080359060200190929190505050612419565b604051808215151515815260200191505060405180910390f35b3480156108c157600080fd5b506108ca6124ae565b6040518082815260200191505060405180910390f35b3480156108ec57600080fd5b506108f56124b4565b6040518082815260200191505060405180910390f35b34801561091757600080fd5b506109206124ba565b6040518082815260200191505060405180910390f35b34801561094257600080fd5b5061094b6124c0565b60405180826000191660001916815260200191505060405180910390f35b34801561097557600080fd5b5061097e6124c6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156109cc57600080fd5b506109d56124eb565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610a155780820151818401526020810190506109fa565b50505050905090810190601f168015610a425780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610a5c57600080fd5b50610a976004803603810190808035906020019092919080356000191690602001909291908035600019169060200190929190505050612589565b60405180826000191660001916815260200191505060405180910390f35b348015610ac157600080fd5b50610ae46004803603810190808035600019169060200190929190505050612602565b60405180826000191660001916815260200191505060405180910390f35b348015610b0e57600080fd5b50610b4d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061261a565b604051808215151515815260200191505060405180910390f35b348015610b7357600080fd5b50610b7c612927565b6040518082815260200191505060405180910390f35b348015610b9e57600080fd5b50610c19600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061292d565b005b348015610c2757600080fd5b50610cac600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612dd3565b604051808215151515815260200191505060405180910390f35b348015610cd257600080fd5b50610cdb613022565b6040518082815260200191505060405180910390f35b348015610cfd57600080fd5b50610d32600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613028565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610d8057600080fd5b50610d89613091565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610dd757600080fd5b50610e16600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506130b7565b604051808215151515815260200191505060405180910390f35b348015610e3c57600080fd5b50610e4561321b565b6040518082815260200191505060405180910390f35b348015610e6757600080fd5b50610ebc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613221565b6040518082815260200191505060405180910390f35b348015610ede57600080fd5b50610ee76132a8565b6040518082815260200191505060405180910390f35b348015610f0957600080fd5b50610f3e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506132ae565b005b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fd65780601f10610fab57610100808354040283529160200191610fd6565b820191906000526020600020905b815481529060010190602001808311610fb957829003601f168201915b505050505081565b600081601660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600061113861138861112a85601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461334d90919063ffffffff16565b61336990919063ffffffff16565b601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506111cd83601460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461336990919063ffffffff16565b601460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611264611388601460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461336990919063ffffffff16565b601460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a37f187f451f92c6a4236353b5331d5fb67bdbfcc66b54367037fba41d6bcef08ce782604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1600190509392505050565b600f5481565b60006113ac60126000600854815260200190815260200160002054600a5461338890919063ffffffff16565b905090565b600080600080600c5433876040518084600019166000191681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018281526020019350505050604051809103902092508460001916836000191614151561143a57600080fd5b600b548360019004111561144d57600080fd5b6011600086600019166000191681526020019081526020016000205491508260116000600c54600019166000191681526020019081526020016000208160001916905550600060010282600019161415156114a757600080fd5b6114af611efc565b90506005546114c98260065461336990919063ffffffff16565b111515156114d657600080fd5b61152881601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461336990919063ffffffff16565b601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506115808160065461336990919063ffffffff16565b60068190555033600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600e8190555043600f819055506115dd6133ac565b3373ffffffffffffffffffffffffffffffffffffffff167fcf6fbb9dcea7d07263ab4f5c3a92f53af33dffc421d9d121e1c74b307e68189d82600854600c54604051808481526020018381526020018260001916600019168152602001935050505060405180910390a26001935050505092915050565b60006116aa601460008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460065461334d90919063ffffffff16565b905090565b60055481565b600061170982601460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461334d90919063ffffffff16565b601460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506117db82601660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461334d90919063ffffffff16565b601660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506118ad82601460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461336990919063ffffffff16565b601460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506119a361138860146000601560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461336990919063ffffffff16565b60146000601560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611af861138860146000601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461336990919063ffffffff16565b60146000601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a37f187f451f92c6a4236353b5331d5fb67bdbfcc66b54367037fba41d6bcef08ce7601560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a17f187f451f92c6a4236353b5331d5fb67bdbfcc66b54367037fba41d6bcef08ce7601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1600190509392505050565b60136020528060005260406000206000915090505481565b600460009054906101000a900460ff1681565b600060126000600854815260200190815260200160002054905090565b60065481565b600081601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fc9a43a9d07839ddc6fa52cff9559f630776003d97ecd4909f433d10cc760f8903383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a160019050919050565b60008060116000600c5460001916600019168152602001908152602001600020549050620271006008541115611f4d57600460009054906101000a900460ff1660ff16600a0a61c350029150612135565b620222e06008541115611f7c57600460009054906101000a900460ff1660ff16600a0a620124f8029150612135565b6201d4c06008541115611fab57600460009054906101000a900460ff1660ff16600a0a6201e848029150612135565b620186a06008541115611fda57600460009054906101000a900460ff1660ff16600a0a6203d090029150612135565b62013880600854111561200957600460009054906101000a900460ff1660ff16600a0a6207a120029150612135565b61ea60600854111561203757600460009054906101000a900460ff1660ff16600a0a620f4240029150612135565b619c40600854111561209157600460009054906101000a900460ff1660ff16600a0a622625a08260405180826000191660001916815260200191505060405180910390206001900481151561208857fe5b06029150612135565b614e2060085411156120eb57600460009054906101000a900460ff1660ff16600a0a623567e0826040518082600019166000191681526020019150506040518091039020600190048115156120e257fe5b06029150612135565b600460009054906101000a900460ff1660ff16600a0a624c4b408260405180826000191660001916815260200191505060405180910390206001900481151561213057fe5b060291505b5090565b6000600c54905090565b60176020528060005260406000206000915090508054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156121eb5780601f106121c0576101008083540402835291602001916121eb565b820191906000526020600020905b8154815290600101906020018083116121ce57829003601f168201915b505050505081565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000601460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60126020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156122d657600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000808333876040518084600019166000191681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401828152602001935050505060405180910390209050828160019004111561249857600080fd5b8460001916816000191614915050949350505050565b60085481565b600a5481565b600b5481565b600c5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156125815780601f1061255657610100808354040283529160200191612581565b820191906000526020600020905b81548152906001019060200180831161256457829003601f168201915b505050505081565b6000808233866040518084600019166000191681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401828152602001935050505060405180910390209050809150509392505050565b60116020528060005260406000206000915090505481565b600080601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506126e56113886126d785601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461334d90919063ffffffff16565b61336990919063ffffffff16565b601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061277a83601460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461336990919063ffffffff16565b601460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612811611388601460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461336990919063ffffffff16565b601460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a37f187f451f92c6a4236353b5331d5fb67bdbfcc66b54367037fba41d6bcef08ce781604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1600191505092915050565b600e5481565b606081905060105481511115151561294457600080fd5b6305f5e100601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561299657600080fd5b6129ec6305f5e100601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461334d90919063ffffffff16565b601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612a856305f5e100601460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461336990919063ffffffff16565b601460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612bde601760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612b9e5780601f10612b7357610100808354040283529160200191612b9e565b820191906000526020600020905b815481529060010190602001808311612b8157829003601f168201915b50505050506040805190810160405280600181526020017f0a00000000000000000000000000000000000000000000000000000000000000815250613414565b601760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209080519060200190612c30929190613794565b50612d12601760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612d075780601f10612cdc57610100808354040283529160200191612d07565b820191906000526020600020905b815481529060010190602001808311612cea57829003601f168201915b505050505083613414565b601760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209080519060200190612d64929190613794565b508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6305f5e1006040518082815260200191505060405180910390a3505050565b600082601660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a38373ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338530866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612fb0578082015181840152602081019050612f95565b50505050905090810190601f168015612fdd5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015612fff57600080fd5b505af1158015613013573d6000803e3d6000fd5b50505050600190509392505050565b60075481565b6000601560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561311457600080fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156131d857600080fd5b505af11580156131ec573d6000803e3d6000fd5b505050506040513d602081101561320257600080fd5b8101908080519060200190929190505050905092915050565b60095481565b6000601660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60105481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561330957600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600082821115151561335e57600080fd5b818303905092915050565b6000818301905082811015151561337f57600080fd5b80905092915050565b6000808211151561339857600080fd5b81838115156133a357fe5b04905092915050565b42601360006008548152602001908152602001600020819055506133dc600160085461336990919063ffffffff16565b6008819055506133ed6008546135e5565b600b8190555061340760014361334d90919063ffffffff16565b40600c8160001916905550565b606080606080606060008088955087945084518651016040519080825280601f01601f19166020018201604052801561345c5781602001602082028038833980820191505090505b50935083925060009150600090505b855181101561351e57858181518110151561348257fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000283838060010194508151811015156134e157fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808060010191505061346b565b600090505b84518110156135d657848181518110151561353a57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002838380600101945081518110151561359957fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050613523565b82965050505050505092915050565b60008060008061012c925061182491506136546013600061361060028961334d90919063ffffffff16565b8152602001908152602001600020546013600061363760018a61334d90919063ffffffff16565b81526020019081526020016000205461334d90919063ffffffff16565b90506137276136de836136d06136ad61368a8861367c6104128961376390919063ffffffff16565b61338890919063ffffffff16565b61369f6103e88961334d90919063ffffffff16565b61336990919063ffffffff16565b6136c2610f508861376390919063ffffffff16565b61338890919063ffffffff16565b61336990919063ffffffff16565b613719612710601260006136fc60018c61334d90919063ffffffff16565b81526020019081526020016000205461376390919063ffffffff16565b61338890919063ffffffff16565b60126000878152602001908152602001600020819055504360078190555060126000868152602001908152602001600020549350505050919050565b600081830290506000831480613783575081838281151561378057fe5b04145b151561378e57600080fd5b92915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106137d557805160ff1916838001178555613803565b82800160010185558215613803579182015b828111156138025782518255916020019190600101906137e7565b5b5090506138109190613814565b5090565b61383691905b8082111561383257600081600090555060010161381a565b5090565b905600a165627a7a72305820eee90ea71be96f058e7ceaa1f1f522c1a71de5642351097de4b484e63d2045e30029"
}