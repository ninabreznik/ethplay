{
  "address": "0xb236e2477b8ed34b203b60e2b88884ee5b31a3c3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "UCCoinSales",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-17\n*/\n\npragma solidity 0.4.19;\n\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract UCCoin is StandardToken, Ownable {\n\n    string public constant name = \"UC Coin\";\n    string public constant symbol = \"UCN\";\n    uint8 public constant decimals = 8;\n\n    uint256 public INITIAL_TOKEN_SUPPLY = 500000000 * (10 ** uint256(decimals));\n\n    function MAX_UCCOIN_SUPPLY() public view returns (uint256) {\n        return totalSupply.div(10 ** uint256(decimals));\n    }\n\n    function UCCoin() public {\n        totalSupply = INITIAL_TOKEN_SUPPLY;\n        balances[msg.sender] = totalSupply;\n    }\n}\n\ncontract UCCoinSales is UCCoin {\n\n    uint256 public weiRaised;\n\n    uint256 public UCCOIN_PER_ETHER = 1540;\n    uint256 public MINIMUM_SELLING_UCCOIN = 150;\n\n    bool public shouldStopCoinSelling = true;\n\n    mapping(address => uint256) public contributions;\n    mapping(address => bool) public blacklistAddresses;\n\n    event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\n    event UcCoinPriceChanged(uint256 value, uint256 updated);\n    event UcCoinMinimumSellingChanged(uint256 value, uint256 updated);\n    event UCCoinSaleIsOn(uint256 updated);\n    event UCCoinSaleIsOff(uint256 updated);\n\n    function UCCoinSales() public {\n\n    }\n    // users can buy UC Coin\n    function() payable external {\n        buyUcCoins();\n    }\n    // users can buy UC Coin\n    function buyUcCoins() payable public {\n        require(msg.sender != address(0));\n\n        bool didSetUcCoinValue = UCCOIN_PER_ETHER > 0;\n        require(!shouldStopCoinSelling && didSetUcCoinValue);\n        require(blacklistAddresses[tx.origin] != true);\n\n        uint256 weiAmount = msg.value;\n\n        uint256 tokens = getUcCoinTokenPerEther().mul(msg.value).div(1 ether);\n\n        require(tokens >= getMinimumSellingUcCoinToken());\n        require(balances[owner] >= tokens);\n\n        weiRaised = weiRaised.add(weiAmount);\n\n        balances[owner] = balances[owner].sub(tokens);\n        balances[msg.sender] = balances[msg.sender].add(tokens);\n        // send fund...\n        owner.transfer(msg.value);\n\n        contributions[msg.sender] = contributions[msg.sender].add(msg.value);\n\n        TokenPurchase(msg.sender, weiAmount, tokens);\n    }\n\n    // convert UC amount per ether -> Token amount per ether\n    function getUcCoinTokenPerEther() internal returns (uint256) {\n        return UCCOIN_PER_ETHER * (10 ** uint256(decimals));\n    }\n    // convert minium UC amount to purchase -> minimum Token amount to purchase\n    function getMinimumSellingUcCoinToken() internal returns (uint256) {\n        return MINIMUM_SELLING_UCCOIN * (10 ** uint256(decimals));\n    }\n\n    // the contract owner sends tokens to the target address\n    function sendTokens(address target, uint256 tokenAmount) external onlyOwner returns (bool) {\n        require(target != address(0));\n        require(balances[owner] >= tokenAmount);\n        balances[owner] = balances[owner].sub(tokenAmount);\n        balances[target] = balances[target].add(tokenAmount);\n\n        Transfer(msg.sender, target, tokenAmount);\n    }\n    // the contract owner can set the coin value per 1 ether\n    function setUCCoinPerEther(uint256 coinAmount) external onlyOwner returns (uint256) {\n        require(UCCOIN_PER_ETHER != coinAmount);\n        require(coinAmount >= MINIMUM_SELLING_UCCOIN);\n        \n        UCCOIN_PER_ETHER = coinAmount;\n        UcCoinPriceChanged(UCCOIN_PER_ETHER, now);\n\n        return UCCOIN_PER_ETHER;\n    }\n    // the contract owner can set the minimum coin value to purchase\n    function setMinUCCoinSellingValue(uint256 coinAmount) external onlyOwner returns (uint256) {\n        MINIMUM_SELLING_UCCOIN = coinAmount;\n        UcCoinMinimumSellingChanged(MINIMUM_SELLING_UCCOIN, now);\n\n        return MINIMUM_SELLING_UCCOIN;\n    }\n    // the contract owner can add a target address in the blacklist. if true, this means the target address should be blocked.\n    function addUserIntoBlacklist(address target) external onlyOwner returns (address) {\n        return setBlacklist(target, true);\n    }\n    // the contract owner can delete a target address from the blacklist. if the value is false, this means the target address is not blocked anymore.\n    function removeUserFromBlacklist(address target) external onlyOwner returns (address) {\n        return setBlacklist(target, false);\n    }\n    // set up true or false for a target address\n    function setBlacklist(address target, bool shouldBlock) internal onlyOwner returns (address) {\n        blacklistAddresses[target] = shouldBlock;\n        return target;\n    }  \n    // if true, token sale is not available\n    function setStopSelling() external onlyOwner {\n        shouldStopCoinSelling = true;\n        UCCoinSaleIsOff(now);\n    }\n    // if false, token sale is available\n    function setContinueSelling() external onlyOwner {\n        shouldStopCoinSelling = false;\n        UCCoinSaleIsOn(now);\n    }\n\n    // the contract owner can push all remain UC Coin to the target address.\n    function pushAllRemainToken(address target) external onlyOwner {\n        uint256 remainAmount = balances[msg.sender];\n        balances[msg.sender] = balances[msg.sender].sub(remainAmount);\n        balances[target] = balances[target].add(remainAmount);\n\n        Transfer(msg.sender, target, remainAmount);\n    }\n    // check target Address contribution\n    function getBuyerContribution(address target) onlyOwner public returns (uint256 contribute) {\n        return contributions[target];\n    }\n}",
  "bytecode": "6060604052600860ff16600a0a631dcd65000260045561060460065560966007556001600860006101000a81548160ff021916908315150217905550341561004657600080fd5b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600454600081905550600054600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612871806100e56000396000f30060606040526004361061018b576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305ab421d1461019557806306fdde03146101ef578063095ea7b31461027d57806318160ddd146102d7578063189f4d34146103005780631a1e01d51461033757806323b872dd146103705780632e7248bf146103e9578063313ce567146104125780633761a3d614610441578063380754461461044b5780634042b66f1461047857806342e94c90146104a157806366188463146104ee57806370a08231146105485780637506721914610595578063892ee1a2146105be5780638da5cb5b146106375780638e77fe2f1461068c57806395d89b41146106dd5780639d3ac6d51461076b578063a3208c1e146107b8578063a9059cbb14610831578063a9bb32741461088b578063cb4b3710146108b4578063cef037fd146108c9578063d73dd623146108de578063d74d763e14610938578063dd62ed3e1461096f578063f2fde38b146109db578063f975f3a214610a14575b610193610a3d565b005b34156101a057600080fd5b6101d5600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610ea4565b604051808215151515815260200191505060405180910390f35b34156101fa57600080fd5b610202611187565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610242578082015181840152602081019050610227565b50505050905090810190601f16801561026f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561028857600080fd5b6102bd600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506111c0565b604051808215151515815260200191505060405180910390f35b34156102e257600080fd5b6102ea6112b2565b6040518082815260200191505060405180910390f35b341561030b57600080fd5b61032160048080359060200190919050506112b8565b6040518082815260200191505060405180910390f35b341561034257600080fd5b61036e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611368565b005b341561037b57600080fd5b6103cf600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061159b565b604051808215151515815260200191505060405180910390f35b34156103f457600080fd5b6103fc61195a565b6040518082815260200191505060405180910390f35b341561041d57600080fd5b610425611960565b604051808260ff1660ff16815260200191505060405180910390f35b610449610a3d565b005b341561045657600080fd5b61045e611965565b604051808215151515815260200191505060405180910390f35b341561048357600080fd5b61048b611978565b6040518082815260200191505060405180910390f35b34156104ac57600080fd5b6104d8600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061197e565b6040518082815260200191505060405180910390f35b34156104f957600080fd5b61052e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611996565b604051808215151515815260200191505060405180910390f35b341561055357600080fd5b61057f600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611c27565b6040518082815260200191505060405180910390f35b34156105a057600080fd5b6105a8611c70565b6040518082815260200191505060405180910390f35b34156105c957600080fd5b6105f5600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611c93565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561064257600080fd5b61064a611d03565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561069757600080fd5b6106c3600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611d29565b604051808215151515815260200191505060405180910390f35b34156106e857600080fd5b6106f0611d49565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610730578082015181840152602081019050610715565b50505050905090810190601f16801561075d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561077657600080fd5b6107a2600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611d82565b6040518082815260200191505060405180910390f35b34156107c357600080fd5b6107ef600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611e27565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561083c57600080fd5b610871600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611e97565b604051808215151515815260200191505060405180910390f35b341561089657600080fd5b61089e6120bb565b6040518082815260200191505060405180910390f35b34156108bf57600080fd5b6108c76120c1565b005b34156108d457600080fd5b6108dc612171565b005b34156108e957600080fd5b61091e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050612221565b604051808215151515815260200191505060405180910390f35b341561094357600080fd5b610959600480803590602001909190505061241d565b6040518082815260200191505060405180910390f35b341561097a57600080fd5b6109c5600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506124ef565b6040518082815260200191505060405180910390f35b34156109e657600080fd5b610a12600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612576565b005b3415610a1f57600080fd5b610a276126ce565b6040518082815260200191505060405180910390f35b60008060008073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151515610a7d57600080fd5b6000600654119250600860009054906101000a900460ff16158015610a9f5750825b1515610aaa57600080fd5b60011515600a60003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151515610b0a57600080fd5b349150610b41670de0b6b3a7640000610b3334610b256126d4565b6126e790919063ffffffff16565b61272290919063ffffffff16565b9050610b4b61273d565b8110151515610b5957600080fd5b8060016000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610bc957600080fd5b610bde8260055461275090919063ffffffff16565b600581905550610c588160016000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461276e90919063ffffffff16565b60016000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d0f81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461275090919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501515610db457600080fd5b610e0634600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461275090919063ffffffff16565b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167fcd60aa75dea3072fbc07ae6d7d856b5dc5f4eee88854f5b4abf7b680ef8bc50f8383604051808381526020018281526020019250505060405180910390a2505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f0257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610f3e57600080fd5b8160016000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610fae57600080fd5b6110228260016000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461276e90919063ffffffff16565b60016000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506110d982600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461275090919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a392915050565b6040805190810160405280600781526020017f554320436f696e0000000000000000000000000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561131657600080fd5b816007819055507f66a51d1d0e368bb06b84d8c6e3fea62511f652fa1c54df86a5a55c3a1de0c9e560075442604051808381526020018281526020019250505060405180910390a16007549050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113c657600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905061145a81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461276e90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506114ef81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461275090919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156115d857600080fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561162657600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156116b157600080fd5b61170382600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461276e90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061179882600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461275090919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061186a82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461276e90919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60075481565b600881565b600860009054906101000a900460ff1681565b60055481565b60096020528060005260406000206000915090505481565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115611aa7576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611b3b565b611aba838261276e90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000611c8e600860ff16600a0a60005461272290919063ffffffff16565b905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611cf157600080fd5b611cfc826000612787565b9050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a6020528060005260406000206000915054906101000a900460ff1681565b6040805190810160405280600381526020017f55434e000000000000000000000000000000000000000000000000000000000081525081565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611de057600080fd5b600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e8557600080fd5b611e90826001612787565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611ed457600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515611f2257600080fd5b611f7482600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461276e90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061200982600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461275090919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60065481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561211d57600080fd5b6001600860006101000a81548160ff0219169083151502179055507f70354053dd3649889b50a0fa509359defe80885202070179f1d37bf1e12ebab0426040518082815260200191505060405180910390a1565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156121cd57600080fd5b6000600860006101000a81548160ff0219169083151502179055507f3aca37882f780247ad2328832071a806f7aac0cf3fceec9faaef5210c76155d3426040518082815260200191505060405180910390a1565b60006122b282600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461275090919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561247b57600080fd5b816006541415151561248c57600080fd5b600754821015151561249d57600080fd5b816006819055507f1ac975edd6a2eb14d0d694913aef81bba262b3e65334ad4122ed557bcb08713260065442604051808381526020018281526020019250505060405180910390a16006549050919050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156125d257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561260e57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60045481565b6000600860ff16600a0a60065402905090565b60008060008414156126fc576000915061271b565b828402905082848281151561270d57fe5b0414151561271757fe5b8091505b5092915050565b600080828481151561273057fe5b0490508091505092915050565b6000600860ff16600a0a60075402905090565b600080828401905083811015151561276457fe5b8091505092915050565b600082821115151561277c57fe5b818303905092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156127e557600080fd5b81600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550829050929150505600a165627a7a72305820f13868ed6100aeeab185127edc1497f05d3bd52ad09f8379c69fcfd622ac028e0029"
}