{
  "address": "0xb561fef0d624c0826ff869946f6076b7c4f2ba42",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "SeratioCoin",
  "contractName": "SeratioCoin",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-09-14\n*/\n\npragma solidity ^0.4.16;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value) returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) returns (bool);\n  function approve(address spender, uint256 value) returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n}\n\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will recieve the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\ncontract PauseInfrastructure is Ownable {\n    event triggerUnpauseEvent();\n    event triggerPauseEvent();\n\n    bool public paused;\n\n    /**\n     * constructor assigns initial paused state\n     * @param _paused selects the initial pause state.\n     */\n    function PauseInfrastructure(bool _paused){\n        paused = _paused;\n    }\n\n    /**\n     * @dev modifier to allow actions only when the contract IS paused\n     */\n    modifier whenNotPaused() {\n        if (paused) revert();\n        _;\n    }\n\n    /**\n     * @dev modifier to allow actions only when the contract IS NOT paused\n     */\n    modifier whenPaused {\n        require (paused);\n        _;\n    }\n}\n\n\ncontract Startable is PauseInfrastructure {\n  function Startable () PauseInfrastructure(true){\n  }\n\n  // called by the owner to start\n  function start() onlyOwner whenPaused returns (bool) {\n    paused = false;\n    triggerUnpauseEvent();\n    return true;\n  }\n}\n\ncontract StartableMintableToken is Startable, MintableToken {\n\n    function transfer(address _to, uint _value) whenNotPaused returns (bool){\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) whenNotPaused returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n}\n\ncontract SeratioCoin is StartableMintableToken {\n    // Name of the token\n    string constant public name = \"SeratioCoin\";\n    // Token abbreviation\n    string constant public symbol = \"SER\";\n    // Decimal places\n    uint8 constant public decimals = 7;\n    // Zeros after the point\n    uint32 constant public DECIMAL_ZEROS = 10000000;\n}",
  "bytecode": "60606040526003805460a860020a60ff02191690555b60015b5b60038054600160a060020a03191633600160a060020a03161790555b6003805460a060020a60ff02191674010000000000000000000000000000000000000000831515021790555b505b5b610b46806100736000396000f300606060405236156100ee5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b81146100f357806306fdde031461011a578063095ea7b3146101a557806318160ddd146101db57806323b872dd14610200578063313ce5671461023c57806340c10f1914610265578063414d784e1461029b5780635c975abb146102c757806370a08231146102ee5780637d64bcb41461031f5780638da5cb5b1461034657806395d89b4114610375578063a9059cbb14610400578063be9a655514610436578063dd62ed3e1461045d578063f2fde38b14610494575b600080fd5b34156100fe57600080fd5b6101066104b5565b604051901515815260200160405180910390f35b341561012557600080fd5b61012d6104d7565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561016a5780820151818401525b602001610151565b50505050905090810190601f1680156101975780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101b057600080fd5b610106600160a060020a036004351660243561050e565b604051901515815260200160405180910390f35b34156101e657600080fd5b6101ee6105b5565b60405190815260200160405180910390f35b341561020b57600080fd5b610106600160a060020a03600435811690602435166044356105bb565b604051901515815260200160405180910390f35b341561024757600080fd5b61024f6105eb565b60405160ff909116815260200160405180910390f35b341561027057600080fd5b610106600160a060020a03600435166024356105f0565b604051901515815260200160405180910390f35b34156102a657600080fd5b6102ae6106d3565b60405163ffffffff909116815260200160405180910390f35b34156102d257600080fd5b6101066106da565b604051901515815260200160405180910390f35b34156102f957600080fd5b6101ee600160a060020a03600435166106ea565b60405190815260200160405180910390f35b341561032a57600080fd5b610106610709565b604051901515815260200160405180910390f35b341561035157600080fd5b610359610792565b604051600160a060020a03909116815260200160405180910390f35b341561038057600080fd5b61012d6107a1565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561016a5780820151818401525b602001610151565b50505050905090810190601f1680156101975780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561040b57600080fd5b610106600160a060020a03600435166024356107d8565b604051901515815260200160405180910390f35b341561044157600080fd5b610106610806565b604051901515815260200160405180910390f35b341561046857600080fd5b6101ee600160a060020a036004358116906024351661088f565b60405190815260200160405180910390f35b341561049f57600080fd5b6104b3600160a060020a03600435166108bc565b005b6003547501000000000000000000000000000000000000000000900460ff1681565b60408051908101604052600b81527f5365726174696f436f696e000000000000000000000000000000000000000000602082015281565b60008115806105405750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b151561054b57600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60005481565b60035460009060a060020a900460ff16156105d557600080fd5b6105e0848484610914565b90505b5b9392505050565b600781565b60035460009033600160a060020a0390811691161461060e57600080fd5b6003547501000000000000000000000000000000000000000000900460ff161561063757600080fd5b60005461064a908363ffffffff610a2916565b6000908155600160a060020a038416815260016020526040902054610675908363ffffffff610a2916565b600160a060020a0384166000818152600160205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a25060015b5b5b92915050565b6298968081565b60035460a060020a900460ff1681565b600160a060020a0381166000908152600160205260409020545b919050565b60035460009033600160a060020a0390811691161461072757600080fd5b6003805475ff000000000000000000000000000000000000000000191675010000000000000000000000000000000000000000001790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a15060015b5b90565b600354600160a060020a031681565b60408051908101604052600381527f5345520000000000000000000000000000000000000000000000000000000000602082015281565b60035460009060a060020a900460ff16156107f257600080fd5b6107fc8383610a43565b90505b5b92915050565b60035460009033600160a060020a0390811691161461082457600080fd5b60035460a060020a900460ff16151561083c57600080fd5b6003805474ff0000000000000000000000000000000000000000191690557f51b463996149baad3ba2af695d99b5d769cfc6adb2b317a100752d1b799d7a5060405160405180910390a15060015b5b5b90565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b60035433600160a060020a039081169116146108d757600080fd5b600160a060020a0381161561090f576003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b5b50565b600160a060020a03808416600090815260026020908152604080832033851684528252808320549386168352600190915281205490919061095b908463ffffffff610a2916565b600160a060020a038086166000908152600160205260408082209390935590871681522054610990908463ffffffff610b0316565b600160a060020a0386166000908152600160205260409020556109b9818463ffffffff610b0316565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3600191505b509392505050565b600082820183811015610a3857fe5b8091505b5092915050565b600160a060020a033316600090815260016020526040812054610a6c908363ffffffff610b0316565b600160a060020a033381166000908152600160205260408082209390935590851681522054610aa1908363ffffffff610a2916565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b92915050565b600082821115610b0f57fe5b508082035b929150505600a165627a7a723058205e3d4e7fbee376dce737987d8695d40fd70fbc50cfcf32a7aeda0e1537c71b8e0029"
}