{
  "address": "0xa38fcedd23de2191dc27f9a0240ac170be0a14fe",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CaelumMiner",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-05\n*/\n\npragma solidity 0.4.25;\n\nlibrary SafeMath {\n\n    /**\n     * @dev Multiplies two numbers, reverts on overflow.\n     */\n    function mul(uint256 _a, uint256 _b) internal pure returns(uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (_a == 0) {\n            return 0;\n        }\n\n        uint256 c = _a * _b;\n        require(c / _a == _b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 _a, uint256 _b) internal pure returns(uint256) {\n        require(_b > 0); // Solidity only automatically asserts when dividing by 0\n        uint256 c = _a / _b;\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 _a, uint256 _b) internal pure returns(uint256) {\n        require(_b <= _a);\n        uint256 c = _a - _b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two numbers, reverts on overflow.\n     */\n    function add(uint256 _a, uint256 _b) internal pure returns(uint256) {\n        uint256 c = _a + _b;\n        require(c >= _a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns(uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\nlibrary ExtendedMath {\n    function limitLessThan(uint a, uint b) internal pure returns(uint c) {\n        if (a > b) return b;\n        return a;\n    }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @dev Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\ncontract InterfaceContracts is Ownable {\n    InterfaceContracts public _internalMod;\n    \n    function setModifierContract (address _t) onlyOwner public {\n        _internalMod = InterfaceContracts(_t);\n    }\n\n    modifier onlyMiningContract() {\n      require(msg.sender == _internalMod._contract_miner(), \"Wrong sender\");\n          _;\n      }\n\n    modifier onlyTokenContract() {\n      require(msg.sender == _internalMod._contract_token(), \"Wrong sender\");\n      _;\n    }\n    \n    modifier onlyMasternodeContract() {\n      require(msg.sender == _internalMod._contract_masternode(), \"Wrong sender\");\n      _;\n    }\n    \n    modifier onlyVotingOrOwner() {\n      require(msg.sender == _internalMod._contract_voting() || msg.sender == owner, \"Wrong sender\");\n      _;\n    }\n    \n    modifier onlyVotingContract() {\n      require(msg.sender == _internalMod._contract_voting() || msg.sender == owner, \"Wrong sender\");\n      _;\n    }\n      \n    function _contract_voting () public view returns (address) {\n        return _internalMod._contract_voting();\n    }\n    \n    function _contract_masternode () public view returns (address) {\n        return _internalMod._contract_masternode();\n    }\n    \n    function _contract_token () public view returns (address) {\n        return _internalMod._contract_token();\n    }\n    \n    function _contract_miner () public view returns (address) {\n        return _internalMod._contract_miner();\n    }\n}\n\ninterface ICaelumMasternode {\n    function _externalArrangeFlow() external;\n    function rewardsProofOfWork() external returns (uint) ;\n    function rewardsMasternode() external returns (uint) ;\n    function masternodeIDcounter() external returns (uint) ;\n    function masternodeCandidate() external returns (uint) ;\n    function getUserFromID(uint) external view returns  (address) ;\n    function contractProgress() external view returns (uint, uint, uint, uint, uint, uint, uint, uint);\n}\n\ninterface ICaelumToken {\n    function rewardExternal(address, uint) external;\n    function balanceOf(address) external view returns (uint);\n}\n\ninterface EIP918Interface  {\n\n    /*\n     * Externally facing mint function that is called by miners to validate challenge digests, calculate reward,\n     * populate statistics, mutate epoch variables and adjust the solution difficulty as required. Once complete,\n     * a Mint event is emitted before returning a success indicator.\n     **/\n  \tfunction mint(uint256 nonce, bytes32 challenge_digest) external returns (bool success);\n\n\n\t/*\n     * Returns the challenge number\n     **/\n    function getChallengeNumber() external view returns (bytes32);\n\n    /*\n     * Returns the mining difficulty. The number of digits that the digest of the PoW solution requires which\n     * typically auto adjusts during reward generation.\n     **/\n    function getMiningDifficulty() external view returns (uint);\n\n    /*\n     * Returns the mining target\n     **/\n    function getMiningTarget() external view returns (uint);\n\n    /*\n     * Return the current reward amount. Depending on the algorithm, typically rewards are divided every reward era\n     * as tokens are mined to provide scarcity\n     **/\n    function getMiningReward() external view returns (uint);\n\n    /*\n     * Upon successful verification and reward the mint method dispatches a Mint Event indicating the reward address,\n     * the reward amount, the epoch count and newest challenge number.\n     **/\n    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\n\n}\n\ncontract AbstractERC918 is EIP918Interface {\n\n    // generate a new challenge number after a new reward is minted\n    bytes32 public challengeNumber;\n\n    // the current mining difficulty\n    uint public difficulty;\n\n    // cumulative counter of the total minted tokens\n    uint public tokensMinted;\n\n    // track read only minting statistics\n    struct Statistics {\n        address lastRewardTo;\n        uint lastRewardAmount;\n        uint lastRewardEthBlockNumber;\n        uint lastRewardTimestamp;\n    }\n\n    Statistics public statistics;\n\n    /*\n     * Externally facing mint function that is called by miners to validate challenge digests, calculate reward,\n     * populate statistics, mutate epoch variables and adjust the solution difficulty as required. Once complete,\n     * a Mint event is emitted before returning a success indicator.\n     **/\n    function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success);\n\n\n    /*\n     * Internal interface function _hash. Overide in implementation to define hashing algorithm and\n     * validation\n     **/\n    function _hash(uint256 nonce, bytes32 challenge_digest) internal returns (bytes32 digest);\n\n    /*\n     * Internal interface function _reward. Overide in implementation to calculate and return reward\n     * amount\n     **/\n    function _reward() internal returns (uint);\n\n    /*\n     * Internal interface function _newEpoch. Overide in implementation to define a cutpoint for mutating\n     * mining variables in preparation for the next epoch\n     **/\n    function _newEpoch(uint256 nonce) internal returns (uint);\n\n    /*\n     * Internal interface function _adjustDifficulty. Overide in implementation to adjust the difficulty\n     * of the mining as required\n     **/\n    function _adjustDifficulty() internal returns (uint);\n\n}\n\ncontract CaelumAbstractMiner is InterfaceContracts, AbstractERC918 {\n    /**\n     * CaelumMiner contract.\n     *\n     * We need to make sure the contract is 100% compatible when using the EIP918Interface.\n     * This contract is an abstract Caelum miner contract.\n     *\n     * Function 'mint', and '_reward' are overriden in the CaelumMiner contract.\n     * Function '_reward_masternode' is added and needs to be overriden in the CaelumMiner contract.\n     */\n\n    using SafeMath for uint;\n    using ExtendedMath for uint;\n\n    uint256 public totalSupply = 2100000000000000;\n\n    uint public latestDifficultyPeriodStarted;\n    uint public epochCount;\n    uint public baseMiningReward = 50;\n    uint public blocksPerReadjustment = 512;\n    uint public _MINIMUM_TARGET = 2 ** 16;\n    uint public _MAXIMUM_TARGET = 2 ** 234;\n    uint public rewardEra = 0;\n\n    uint public maxSupplyForEra;\n    uint public MAX_REWARD_ERA = 39;\n    uint public MINING_RATE_FACTOR = 60; //mint the token 60 times less often than ether\n\n    uint public MAX_ADJUSTMENT_PERCENT = 100;\n    uint public TARGET_DIVISOR = 2000;\n    uint public QUOTIENT_LIMIT = TARGET_DIVISOR.div(2);\n    mapping(bytes32 => bytes32) solutionForChallenge;\n    mapping(address => mapping(address => uint)) allowed;\n\n    bytes32 public challengeNumber;\n    uint public difficulty;\n    uint public tokensMinted;\n\n    Statistics public statistics;\n\n    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\n    event RewardMasternode(address candidate, uint amount);\n\n    constructor() public {\n        tokensMinted = 0;\n        maxSupplyForEra = totalSupply.div(2);\n        difficulty = _MAXIMUM_TARGET;\n        latestDifficultyPeriodStarted = block.number;\n        _newEpoch(0);\n    }\n\n    function _newEpoch(uint256 nonce) internal returns(uint) {\n        if (tokensMinted.add(getMiningReward()) > maxSupplyForEra && rewardEra < MAX_REWARD_ERA) {\n            rewardEra = rewardEra + 1;\n        }\n        maxSupplyForEra = totalSupply - totalSupply.div(2 ** (rewardEra + 1));\n        epochCount = epochCount.add(1);\n        challengeNumber = blockhash(block.number - 1);\n        return (epochCount);\n    }\n\n    function mint(uint256 nonce, bytes32 challenge_digest) public returns(bool success);\n\n    function _hash(uint256 nonce, bytes32 challenge_digest) internal returns(bytes32 digest) {\n        digest = keccak256(challengeNumber, msg.sender, nonce);\n        if (digest != challenge_digest) revert();\n        if (uint256(digest) > difficulty) revert();\n        bytes32 solution = solutionForChallenge[challengeNumber];\n        solutionForChallenge[challengeNumber] = digest;\n        if (solution != 0x0) revert(); //prevent the same answer from awarding twice\n    }\n\n    function _reward() internal returns(uint);\n\n    function _reward_masternode() internal returns(uint);\n\n    function _adjustDifficulty() internal returns(uint) {\n        //every so often, readjust difficulty. Dont readjust when deploying\n        if (epochCount % blocksPerReadjustment != 0) {\n            return difficulty;\n        }\n\n        uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;\n        //assume 360 ethereum blocks per hour\n        //we want miners to spend 10 minutes to mine each 'block', about 60 ethereum blocks = one 0xbitcoin epoch\n        uint epochsMined = blocksPerReadjustment;\n        uint targetEthBlocksPerDiffPeriod = epochsMined * MINING_RATE_FACTOR;\n        //if there were less eth blocks passed in time than expected\n        if (ethBlocksSinceLastDifficultyPeriod < targetEthBlocksPerDiffPeriod) {\n            uint excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(MAX_ADJUSTMENT_PERCENT)).div(ethBlocksSinceLastDifficultyPeriod);\n            uint excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(QUOTIENT_LIMIT);\n            // If there were 5% more blocks mined than expected then this is 5.  If there were 100% more blocks mined than expected then this is 100.\n            //make it harder\n            difficulty = difficulty.sub(difficulty.div(TARGET_DIVISOR).mul(excess_block_pct_extra)); //by up to 50 %\n        } else {\n            uint shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(MAX_ADJUSTMENT_PERCENT)).div(targetEthBlocksPerDiffPeriod);\n            uint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(QUOTIENT_LIMIT); //always between 0 and 1000\n            //make it easier\n            difficulty = difficulty.add(difficulty.div(TARGET_DIVISOR).mul(shortage_block_pct_extra)); //by up to 50 %\n        }\n        latestDifficultyPeriodStarted = block.number;\n        if (difficulty < _MINIMUM_TARGET) //very difficult\n        {\n            difficulty = _MINIMUM_TARGET;\n        }\n        if (difficulty > _MAXIMUM_TARGET) //very easy\n        {\n            difficulty = _MAXIMUM_TARGET;\n        }\n    }\n\n    function getChallengeNumber() public view returns(bytes32) {\n        return challengeNumber;\n    }\n\n    function getMiningDifficulty() public view returns(uint) {\n        return _MAXIMUM_TARGET.div(difficulty);\n    }\n\n    function getMiningTarget() public view returns(uint) {\n        return difficulty;\n    }\n\n    function getMiningReward() public view returns(uint) {\n        return (baseMiningReward * 1e8).div(2 ** rewardEra);\n    }\n\n    function getMintDigest(\n        uint256 nonce,\n        bytes32 challenge_digest,\n        bytes32 challenge_number\n    )\n    public view returns(bytes32 digesttest) {\n        bytes32 digest = keccak256(challenge_number, msg.sender, nonce);\n        return digest;\n    }\n\n    function checkMintSolution(\n        uint256 nonce,\n        bytes32 challenge_digest,\n        bytes32 challenge_number,\n        uint testTarget\n    )\n    public view returns(bool success) {\n        bytes32 digest = keccak256(challenge_number, msg.sender, nonce);\n        if (uint256(digest) > testTarget) revert();\n        return (digest == challenge_digest);\n    }\n}\n\ncontract CaelumMiner is CaelumAbstractMiner {\n\n    ICaelumToken public tokenInterface;\n    ICaelumMasternode public masternodeInterface;\n    bool public ACTIVE_STATE = false;\n    uint swapStartedBlock = now;\n    uint public gasPriceLimit = 999;\n\n    /**\n     * @dev Allows the owner to set a gas limit on submitting solutions.\n     * courtesy of KiwiToken.\n     * See https://github.com/liberation-online/MineableToken for more details why.\n     */\n\n    modifier checkGasPrice(uint txnGasPrice) {\n        require(txnGasPrice <= gasPriceLimit * 1000000000, \"Gas above gwei limit!\");\n        _;\n    }\n\n    event GasPriceSet(uint8 _gasPrice);\n\n    function setGasPriceLimit(uint8 _gasPrice) onlyOwner public {\n        require(_gasPrice > 0);\n        gasPriceLimit = _gasPrice;\n\n        emit GasPriceSet(_gasPrice); //emit event\n    }\n\n    function setTokenContract() internal {\n        tokenInterface = ICaelumToken(_contract_token());\n    }\n\n    function setMasternodeContract() internal {\n        masternodeInterface = ICaelumMasternode(_contract_masternode());\n    }\n\n    /**\n     * Override; For some reason, truffle testing does not recognize function.\n     */\n    function setModifierContract (address _contract) onlyOwner public {\n        require (now <= swapStartedBlock + 10 days);\n        _internalMod = InterfaceContracts(_contract);\n        setMasternodeContract();\n        setTokenContract();\n    }\n\n    /**\n    * @dev Move the voting away from token. All votes will be made from the voting\n    */\n    function VoteModifierContract (address _contract) onlyVotingContract external {\n        //_internalMod = CaelumModifierAbstract(_contract);\n        _internalMod = InterfaceContracts(_contract);\n        setMasternodeContract();\n        setTokenContract();\n    }\n\n    function mint(uint256 nonce, bytes32 challenge_digest) checkGasPrice(tx.gasprice) public returns(bool success) {\n        require(ACTIVE_STATE);\n\n        _hash(nonce, challenge_digest);\n\n        masternodeInterface._externalArrangeFlow();\n\n        uint rewardAmount = _reward();\n        uint rewardMasternode = _reward_masternode();\n\n        tokensMinted += rewardAmount.add(rewardMasternode);\n\n        uint epochCounter = _newEpoch(nonce);\n\n        _adjustDifficulty();\n\n        statistics = Statistics(msg.sender, rewardAmount, block.number, now);\n\n        emit Mint(msg.sender, rewardAmount, epochCounter, challengeNumber);\n\n        return true;\n    }\n\n    function _reward() internal returns(uint) {\n\n        uint _pow = masternodeInterface.rewardsProofOfWork();\n\n        tokenInterface.rewardExternal(msg.sender, _pow);\n\n        return _pow;\n    }\n\n    function _reward_masternode() internal returns(uint) {\n\n        uint _mnReward = masternodeInterface.rewardsMasternode();\n        if (masternodeInterface.masternodeIDcounter() == 0) return 0;\n\n        address _mnCandidate = masternodeInterface.getUserFromID(masternodeInterface.masternodeCandidate()); // userByIndex[masternodeCandidate].accountOwner;\n        if (_mnCandidate == 0x0) return 0;\n\n        tokenInterface.rewardExternal(_mnCandidate, _mnReward);\n\n        emit RewardMasternode(_mnCandidate, _mnReward);\n\n        return _mnReward;\n    }\n\n    /**\n     * @dev Fetch data from the actual reward. We do this to prevent pools payout out\n     * the global reward instead of the calculated ones.\n     * By default, pools fetch the `getMiningReward()` value and will payout this amount.\n     */\n    function getMiningRewardForPool() public view returns(uint) {\n        return masternodeInterface.rewardsProofOfWork();\n    }\n\n    function getMiningReward() public view returns(uint) {\n        return (baseMiningReward * 1e8).div(2 ** rewardEra);\n    }\n\n    function contractProgress() public view returns\n        (\n            uint epoch,\n            uint candidate,\n            uint round,\n            uint miningepoch,\n            uint globalreward,\n            uint powreward,\n            uint masternodereward,\n            uint usercounter\n        ) {\n            return ICaelumMasternode(_contract_masternode()).contractProgress();\n\n        }\n\n    /**\n     * @dev Call this function prior to mining to copy all old contract values.\n     * This included minted tokens, difficulty, etc..\n     */\n\n    function getDataFromContract(address _previous_contract) onlyOwner public {\n        require(ACTIVE_STATE == false);\n        require(_contract_token() != 0);\n        require(_contract_masternode() != 0);\n\n        CaelumAbstractMiner prev = CaelumAbstractMiner(_previous_contract);\n        difficulty = prev.difficulty();\n        rewardEra = prev.rewardEra();\n        MINING_RATE_FACTOR = prev.MINING_RATE_FACTOR();\n        maxSupplyForEra = prev.maxSupplyForEra();\n        tokensMinted = prev.tokensMinted();\n        epochCount = prev.epochCount();\n\n        ACTIVE_STATE = true;\n    }\n    \n    function balanceOf(address _owner) public view returns(uint256) {\n        return tokenInterface.balanceOf(_owner);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"TARGET_DIVISOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMiningRewardForPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_contract_miner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"masternodeInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"VoteModifierContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMiningDifficulty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"challenge_digest\",\"type\":\"bytes32\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"difficulty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_ADJUSTMENT_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setModifierContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_previous_contract\",\"type\":\"address\"}],\"name\":\"getDataFromContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardEra\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMiningTarget\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINING_RATE_FACTOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_REWARD_ERA\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMiningReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getChallengeNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupplyForEra\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseMiningReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractProgress\",\"outputs\":[{\"name\":\"epoch\",\"type\":\"uint256\"},{\"name\":\"candidate\",\"type\":\"uint256\"},{\"name\":\"round\",\"type\":\"uint256\"},{\"name\":\"miningepoch\",\"type\":\"uint256\"},{\"name\":\"globalreward\",\"type\":\"uint256\"},{\"name\":\"powreward\",\"type\":\"uint256\"},{\"name\":\"masternodereward\",\"type\":\"uint256\"},{\"name\":\"usercounter\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"challenge_digest\",\"type\":\"bytes32\"},{\"name\":\"challenge_number\",\"type\":\"bytes32\"},{\"name\":\"testTarget\",\"type\":\"uint256\"}],\"name\":\"checkMintSolution\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_contract_voting\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"epochCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACTIVE_STATE\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_MAXIMUM_TARGET\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"challengeNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"statistics\",\"outputs\":[{\"name\":\"lastRewardTo\",\"type\":\"address\"},{\"name\":\"lastRewardAmount\",\"type\":\"uint256\"},{\"name\":\"lastRewardEthBlockNumber\",\"type\":\"uint256\"},{\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasPriceLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"challenge_digest\",\"type\":\"bytes32\"},{\"name\":\"challenge_number\",\"type\":\"bytes32\"}],\"name\":\"getMintDigest\",\"outputs\":[{\"name\":\"digesttest\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_contract_masternode\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"QUOTIENT_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_contract_token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_internalMod\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestDifficultyPeriodStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blocksPerReadjustment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_MINIMUM_TARGET\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasPrice\",\"type\":\"uint8\"}],\"name\":\"setGasPriceLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_gasPrice\",\"type\":\"uint8\"}],\"name\":\"GasPriceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reward_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"epochCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newChallengeNumber\",\"type\":\"bytes32\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"candidate\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardMasternode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "6080604052660775f05a0740006009556032600c55610200600d5562010000600e557d040000000000000000000000000000000000000000000000000000000000600f5560006010556027601255603c60135560646014556107d060158190556200007a90600264010000000062001468620000f382021704565b6016556021805460a060020a60ff0219169055426022556103e760235560008054600160a060020a03191633178155601b55600954620000ca90600264010000000062001468620000f382021704565b601155600f54601a5543600a55620000ec600064010000000062000118810204565b506200021c565b6000808083116200010357600080fd5b82848115156200010f57fe5b04949350505050565b6000601154620001526200013a620001d1640100000000026401000000009004565b601b54906401000000006200191c6200020282021704565b118015620001635750601254601054105b1562000173576010805460010190555b601054600954620001989160010160020a64010000000062001468620000f382021704565b60095403601155600b54620001bd9060016401000000006200191c6200020282021704565b600b81905543600019014060195592915050565b601054600c54600091620001fd916305f5e100029060020a64010000000062001468620000f382021704565b905090565b6000828201838110156200021557600080fd5b9392505050565b611c35806200022c6000396000f3006080604052600436106102005763ffffffff60e060020a600035041663095b6d4c81146102055780630b2cb8a31461022c5780630de33210146102415780630e7b2f31146102725780630ecf42531461028757806317da485f146102aa5780631801fbe5146102bf57806318160ddd146102ee57806319cae462146103035780631beddf1c146103185780631dfb396f1461032d57806329a7922d1461034e5780632d38bf7a1461036f57806332e99708146103845780633426e5f51461039957806346eed3f3146103ae578063490203a7146103c35780634ef37628146103d85780634fa972e1146103ed57806354bcb164146104025780636de9f32b1461041757806370a082311461042c578063715018a61461044d5780637558d81e1461046257806381269a56146104b857806381ae8d86146104d9578063829965cc146104ee5780638786e0951461050357806387a2a9d6146105185780638ae0368b1461052d5780638da5cb5b1461054257806395e272bd14610557578063961a929c1461059c57806397566aa0146105b1578063aad5b4ae146105cf578063ad1dfe3b146105e4578063be550be4146105f9578063c28b29471461060e578063cb9ae70714610623578063d87b8fcb14610638578063dc6e9cf91461064d578063f2fde38b14610662578063f343d68314610683578063f72c28a114610698575b600080fd5b34801561021157600080fd5b5061021a6106b3565b60408051918252519081900360200190f35b34801561023857600080fd5b5061021a6106b9565b34801561024d57600080fd5b50610256610749565b60408051600160a060020a039092168252519081900360200190f35b34801561027e57600080fd5b506102566107a8565b34801561029357600080fd5b506102a8600160a060020a03600435166107b7565b005b3480156102b657600080fd5b5061021a6108fe565b3480156102cb57600080fd5b506102da60043560243561091c565b604080519115158252519081900360200190f35b3480156102fa57600080fd5b5061021a610b1b565b34801561030f57600080fd5b5061021a610b21565b34801561032457600080fd5b5061021a610b27565b34801561033957600080fd5b506102a8600160a060020a0360043516610b2d565b34801561035a57600080fd5b506102a8600160a060020a0360043516610b58565b34801561037b57600080fd5b5061021a610f2b565b34801561039057600080fd5b5061021a610f31565b3480156103a557600080fd5b5061021a610f37565b3480156103ba57600080fd5b5061021a610f3d565b3480156103cf57600080fd5b5061021a610f43565b3480156103e457600080fd5b5061021a610f65565b3480156103f957600080fd5b5061021a610f6b565b34801561040e57600080fd5b5061021a610f71565b34801561042357600080fd5b5061021a610f77565b34801561043857600080fd5b5061021a600160a060020a0360043516610f7d565b34801561045957600080fd5b506102a8611018565b34801561046e57600080fd5b50610477611084565b604080519889526020890197909752878701959095526060870193909352608086019190915260a085015260c084015260e083015251908190036101000190f35b3480156104c457600080fd5b506102da600435602435604435606435611140565b3480156104e557600080fd5b5061025661118a565b3480156104fa57600080fd5b5061021a6111e9565b34801561050f57600080fd5b506102da6111ef565b34801561052457600080fd5b5061021a611210565b34801561053957600080fd5b5061021a611216565b34801561054e57600080fd5b5061025661121c565b34801561056357600080fd5b5061056c61122b565b60408051600160a060020a0390951685526020850193909352838301919091526060830152519081900360800190f35b3480156105a857600080fd5b5061021a611246565b3480156105bd57600080fd5b5061021a60043560243560443561124c565b3480156105db57600080fd5b50610256611281565b3480156105f057600080fd5b5061021a6112e0565b34801561060557600080fd5b506102566112e6565b34801561061a57600080fd5b50610256611345565b34801561062f57600080fd5b5061021a611354565b34801561064457600080fd5b5061021a61135a565b34801561065957600080fd5b5061021a611360565b34801561066e57600080fd5b506102a8600160a060020a0360043516611366565b34801561068f57600080fd5b50610256611386565b3480156106a457600080fd5b506102a860ff60043516611395565b60155481565b602154604080517f1ad93a9b0000000000000000000000000000000000000000000000000000000081529051600092600160a060020a031691631ad93a9b91600480830192602092919082900301818787803b15801561071857600080fd5b505af115801561072c573d6000803e3d6000fd5b505050506040513d602081101561074257600080fd5b5051905090565b600154604080517f0de332100000000000000000000000000000000000000000000000000000000081529051600092600160a060020a031691630de3321091600480830192602092919082900301818787803b15801561071857600080fd5b602154600160a060020a031681565b600160009054906101000a9004600160a060020a0316600160a060020a03166381ae8d866040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561080a57600080fd5b505af115801561081e573d6000803e3d6000fd5b505050506040513d602081101561083457600080fd5b5051600160a060020a03163314806108565750600054600160a060020a031633145b15156108c357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f57726f6e672073656e6465720000000000000000000000000000000000000000604482015290519081900360640190fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790556108f36113fa565b6108fb611431565b50565b6000610917601a54600f5461146890919063ffffffff16565b905090565b6000806000803a602354633b9aca0002811115151561099c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4761732061626f76652067776569206c696d6974210000000000000000000000604482015290519081900360640190fd5b60215474010000000000000000000000000000000000000000900460ff1615156109c557600080fd5b6109cf8787611490565b50602160009054906101000a9004600160a060020a0316600160a060020a031663a042d43e6040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015610a2357600080fd5b505af1158015610a37573d6000803e3d6000fd5b50505050610a43611500565b9350610a4d61160f565b9250610a5f848463ffffffff61191c16565b601b80549091019055610a7187611935565b9150610a7b6119bd565b506040805160808101825233808252602080830188905243838501819052426060948501819052601c805473ffffffffffffffffffffffffffffffffffffffff191685179055601d8a9055601e91909155601f55601954845189815291820187905281850152925190927fcf6fbb9dcea7d07263ab4f5c3a92f53af33dffc421d9d121e1c74b307e68189d92908290030190a25060019695505050505050565b60095481565b601a5481565b60145481565b600054600160a060020a03163314610b4457600080fd5b602254620d2f00014211156108c357600080fd5b60008054600160a060020a03163314610b7057600080fd5b60215474010000000000000000000000000000000000000000900460ff1615610b9857600080fd5b610ba06112e6565b600160a060020a03161515610bb457600080fd5b610bbc611281565b600160a060020a03161515610bd057600080fd5b81905080600160a060020a03166319cae4626040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610c1157600080fd5b505af1158015610c25573d6000803e3d6000fd5b505050506040513d6020811015610c3b57600080fd5b5051601a55604080517f2d38bf7a0000000000000000000000000000000000000000000000000000000081529051600160a060020a03831691632d38bf7a9160048083019260209291908290030181600087803b158015610c9b57600080fd5b505af1158015610caf573d6000803e3d6000fd5b505050506040513d6020811015610cc557600080fd5b5051601055604080517f3426e5f50000000000000000000000000000000000000000000000000000000081529051600160a060020a03831691633426e5f59160048083019260209291908290030181600087803b158015610d2557600080fd5b505af1158015610d39573d6000803e3d6000fd5b505050506040513d6020811015610d4f57600080fd5b5051601355604080517f4fa972e10000000000000000000000000000000000000000000000000000000081529051600160a060020a03831691634fa972e19160048083019260209291908290030181600087803b158015610daf57600080fd5b505af1158015610dc3573d6000803e3d6000fd5b505050506040513d6020811015610dd957600080fd5b5051601155604080517f6de9f32b0000000000000000000000000000000000000000000000000000000081529051600160a060020a03831691636de9f32b9160048083019260209291908290030181600087803b158015610e3957600080fd5b505af1158015610e4d573d6000803e3d6000fd5b505050506040513d6020811015610e6357600080fd5b5051601b55604080517f829965cc0000000000000000000000000000000000000000000000000000000081529051600160a060020a0383169163829965cc9160048083019260209291908290030181600087803b158015610ec357600080fd5b505af1158015610ed7573d6000803e3d6000fd5b505050506040513d6020811015610eed57600080fd5b5051600b5550506021805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000179055565b60105481565b601a5490565b60135481565b60125481565b600061091760105460020a600c546305f5e1000261146890919063ffffffff16565b60195490565b60115481565b600c5481565b601b5481565b60208054604080517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152915160009492909316926370a082319260248084019391929182900301818787803b158015610fe657600080fd5b505af1158015610ffa573d6000803e3d6000fd5b505050506040513d602081101561101057600080fd5b505192915050565b600054600160a060020a0316331461102f57600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600080600080600080600080611098611281565b600160a060020a0316637558d81e6040518163ffffffff1660e060020a02815260040161010060405180830381600087803b1580156110d657600080fd5b505af11580156110ea573d6000803e3d6000fd5b505050506040513d61010081101561110157600080fd5b508051602082015160408301516060840151608085015160a086015160c087015160e090970151959f949e50929c50909a509850965091945092509050565b604080518381526c01000000000000000000000000330260208201526034810186905290519081900360540190206000908281111561117e57600080fd5b93909314949350505050565b600154604080517f81ae8d860000000000000000000000000000000000000000000000000000000081529051600092600160a060020a0316916381ae8d8691600480830192602092919082900301818787803b15801561071857600080fd5b600b5481565b60215474010000000000000000000000000000000000000000900460ff1681565b600f5481565b60195481565b600054600160a060020a031681565b601c54601d54601e54601f54600160a060020a039093169284565b60235481565b604080518281526c01000000000000000000000000330260208201526034810185905290519081900360540190209392505050565b600154604080517faad5b4ae0000000000000000000000000000000000000000000000000000000081529051600092600160a060020a03169163aad5b4ae91600480830192602092919082900301818787803b15801561071857600080fd5b60165481565b600154604080517fbe550be40000000000000000000000000000000000000000000000000000000081529051600092600160a060020a03169163be550be491600480830192602092919082900301818787803b15801561071857600080fd5b600154600160a060020a031681565b600a5481565b600d5481565b600e5481565b600054600160a060020a0316331461137d57600080fd5b6108fb81611b2d565b602054600160a060020a031681565b600054600160a060020a031633146113ac57600080fd5b600060ff8216116113bc57600080fd5b60ff8116602381905560408051918252517fdfd0de69153615d091009f6a203a3188c76f7dbdccfcdb30ae401af52279dd489181900360200190a150565b611402611281565b6021805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6114396112e6565b6020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008080831161147757600080fd5b828481151561148257fe5b0490508091505b5092915050565b601954604080519182526c0100000000000000000000000033026020830152603482018490525190819003605401902060008282146114ce57600080fd5b601a548211156114dd57600080fd5b506019546000908152601760205260409020805490829055801561148957600080fd5b600080602160009054906101000a9004600160a060020a0316600160a060020a0316631ad93a9b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561155657600080fd5b505af115801561156a573d6000803e3d6000fd5b505050506040513d602081101561158057600080fd5b5051602054604080517f680d5762000000000000000000000000000000000000000000000000000000008152336004820152602481018490529051929350600160a060020a039091169163680d57629160448082019260009290919082900301818387803b1580156115f157600080fd5b505af1158015611605573d6000803e3d6000fd5b5092949350505050565b6000806000602160009054906101000a9004600160a060020a0316600160a060020a031663e1eca3276040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561166757600080fd5b505af115801561167b573d6000803e3d6000fd5b505050506040513d602081101561169157600080fd5b5051602154604080517fe6f76fe80000000000000000000000000000000000000000000000000000000081529051929450600160a060020a039091169163e6f76fe8916004808201926020929091908290030181600087803b1580156116f657600080fd5b505af115801561170a573d6000803e3d6000fd5b505050506040513d602081101561172057600080fd5b505115156117315760009250611917565b602154604080517f448a00170000000000000000000000000000000000000000000000000000000081529051600160a060020a0390921691632debc54991839163448a0017916004808201926020929091908290030181600087803b15801561179957600080fd5b505af11580156117ad573d6000803e3d6000fd5b505050506040513d60208110156117c357600080fd5b50516040805160e060020a63ffffffff851602815260048101929092525160248083019260209291908290030181600087803b15801561180257600080fd5b505af1158015611816573d6000803e3d6000fd5b505050506040513d602081101561182c57600080fd5b50519050600160a060020a03811615156118495760009250611917565b602054604080517f680d5762000000000000000000000000000000000000000000000000000000008152600160a060020a038481166004830152602482018690529151919092169163680d576291604480830192600092919082900301818387803b1580156118b757600080fd5b505af11580156118cb573d6000803e3d6000fd5b505060408051600160a060020a03851681526020810186905281517f8f9a423c71e43ad001bebf147d969f424a8fac4e5970a367c5e53abb17cbe7109450908190039091019150a18192505b505090565b60008282018381101561192e57600080fd5b9392505050565b6000601154611954611945610f43565b601b549063ffffffff61191c16565b1180156119645750601254601054105b15611973576010805460010190555b60105460095461198e9160010160020a63ffffffff61146816565b60095403601155600b546119a990600163ffffffff61191c16565b600b81905543600019014060195592915050565b600080600080600080600080600d54600b548115156119d857fe5b06156119e857601a549750611b23565b600a5443039650600d5495506013548602945084871015611a9257611a2887611a1c60145488611baa90919063ffffffff16565b9063ffffffff61146816565b601654909450611a4f90611a4386606463ffffffff611bd816565b9063ffffffff611bef16565b9250611a8a611a7b84611a6f601554601a5461146890919063ffffffff16565b9063ffffffff611baa16565b601a549063ffffffff611bd816565b601a55611af9565b611aab85611a1c6014548a611baa90919063ffffffff16565b601654909250611ac690611a4384606463ffffffff611bd816565b9050611af5611ae682611a6f601554601a5461146890919063ffffffff16565b601a549063ffffffff61191c16565b601a555b43600a55600e54601a541015611b1057600e54601a555b600f54601a541115611b2357600f54601a555b5050505050505090565b600160a060020a0381161515611b4257600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600080831515611bbd5760009150611489565b50828202828482811515611bcd57fe5b041461192e57600080fd5b60008083831115611be857600080fd5b5050900390565b600081831115611c00575080611c03565b50815b929150505600a165627a7a723058207537c5d7fcd1b4f1d86b395c12df84aab28b84fe5c2bbc1d74835d5f9b2633ff0029"
}