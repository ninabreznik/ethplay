{
  "address": "0xc9614ac5a61845d70668d7b42aed865333949fc3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ITeacCoinToken",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-14\n*/\n\npragma solidity ^0.4.23;\n/**\n* @title Ownable\n* @dev The Ownable contract has an owner address, and provides basic authorization\ncontrol\n* functions, this simplifies the implementation of \"user permissions\".\n*/\ncontract Ownable {\naddress public owner;\nevent OwnershipRenounced(address indexed previousOwner);\nevent OwnershipTransferred(\naddress indexed previousOwner,\naddress indexed newOwner\n);\n/**\n* @dev The Ownable constructor sets the original `owner` of the contract to the\nsender\n* account.\n*/\nconstructor() public {\nowner = msg.sender;\n}\n/**\n* @dev Throws if called by any account other than the owner.\n*/\nmodifier onlyOwner() {\nrequire(msg.sender == owner);\n_;\n}\n/**\n* @dev Allows the current owner to transfer control of the contract to a newOwner.\n* @param newOwner The address to transfer ownership to.\n*/\nfunction transferOwnership(address newOwner) public onlyOwner {\nrequire(newOwner != address(0));\nemit OwnershipTransferred(owner, newOwner);\nowner = newOwner;\n}\n/**\n* @dev Allows the current owner to relinquish control of the contract.\n*/\nfunction renounceOwnership() public onlyOwner {\nemit OwnershipRenounced(owner);\nowner = address(0);\n}\n}\n/**\n* @title SafeMath\n* @dev Math operations with safety checks that throw on error\n*/\nlibrary SafeMath {\n/**\n* @dev Multiplies two numbers, throws on overflow.\n*/\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\nif (a == 0) {\nreturn 0;\n}\nc = a * b;\nassert(c / a == b);\nreturn c;\n}\n/**\n* @dev Integer division of two numbers, truncating the quotient.\n*/\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n// assert(b > 0); // Solidity automatically throws when dividing by 0\n// uint256 c = a / b;\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\nreturn a / b;\n}\n/**\n* @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than\nminuend).\n*/\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\nassert(b <= a);\nreturn a - b;\n}\n/**\n* @dev Adds two numbers, throws on overflow.\n*/\nfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\nc = a + b;\nassert(c >= a);\nreturn c;\n}\n}\n/**\n* @title ERC20Basic\n* @dev Simpler version of ERC20 interface\n* @dev see https://github.com/ethereum/EIPs/issues/179\n*/\ncontract ERC20Basic {\nfunction totalSupply() public view returns (uint256);\nfunction balanceOf(address who) public view returns (uint256);\nfunction transfer(address to, uint256 value) public returns (bool);\nevent Transfer(address indexed from, address indexed to, uint256 value);\n}\n/**\n* @title ERC20 interface\n* @dev see https://github.com/ethereum/EIPs/issues/20\n*/\ncontract ERC20 is ERC20Basic {\nfunction allowance(address owner, address spender) public view returns (uint256);\nfunction transferFrom(address from, address to, uint256 value) public returns\n(bool);\nfunction approve(address spender, uint256 value) public returns (bool);\nevent Approval(address indexed owner, address indexed spender, uint256 value);\n}\ncontract BasicToken is ERC20Basic {\nusing SafeMath for uint256;\nmapping(address => uint256) balances;\nuint256 totalSupply_;\n/**\n* @dev total number of tokens in existence\n*/\nfunction totalSupply() public view returns (uint256) {\nreturn totalSupply_;\n}\n/**\n* @dev transfer token for a specified address\n* @param _to The address to transfer to.\n* @param _value The amount to be transferred.\n*/\nfunction transfer(address _to, uint256 _value) public returns (bool) {\nrequire(_to != address(0));\nrequire(_value <= balances[msg.sender]);\nbalances[msg.sender] = balances[msg.sender].sub(_value);\nbalances[_to] = balances[_to].add(_value);\nemit Transfer(msg.sender, _to, _value);\nreturn true;\n}\n/**\n* @dev Gets the balance of the specified address.\n* @param _owner The address to query the the balance of.\n* @return An uint256 representing the amount owned by the passed address.\n*/\nfunction balanceOf(address _owner) public view returns (uint256) {\nreturn balances[_owner];\n}\n}\n/**\n* @title Standard ERC20 token\n*\n* @dev Implementation of the basic standard token.\n* @dev https://github.com/ethereum/EIPs/issues/20\n* @dev Based on code by FirstBlood:\nhttps://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n*/\ncontract StandardToken is ERC20, BasicToken {\nmapping (address => mapping (address => uint256)) internal allowed;\n/**\n* @dev Transfer tokens from one address to another\n* @param _from address The address which you want to send tokens from\n* @param _to address The address which you want to transfer to\n* @param _value uint256 the amount of tokens to be transferred\n*/\nfunction transferFrom(address _from, address _to, uint256 _value) public returns\n(bool) {\nrequire(_to != address(0));\nrequire(_value <= balances[_from]);\nrequire(_value <= allowed[_from][msg.sender]);\nbalances[_from] = balances[_from].sub(_value);\nbalances[_to] = balances[_to].add(_value);\nallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\nemit Transfer(_from, _to, _value);\nreturn true;\n}\n/**\n* @dev Approve the passed address to spend the specified amount of tokens on behalf\nof msg.sender.\n*\n* Beware that changing an allowance with this method brings the risk that someone\nmay use both the old\n* and the new allowance by unfortunate transaction ordering. One possible solution\nto mitigate this\n* race condition is to first reduce the spender's allowance to 0 and set the\ndesired value afterwards:\n* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n* @param _spender The address which will spend the funds.\n* @param _value The amount of tokens to be spent.\n*/\nfunction approve(address _spender, uint256 _value) public returns (bool) {\nrequire((_value == 0 ) || (allowed[msg.sender][_spender] == 0));\nallowed[msg.sender][_spender] = _value;\nemit Approval(msg.sender, _spender, _value);\nreturn true;\n}\n/**\n* @dev Function to check the amount of tokens that an owner allowed to a spender.\n* @param _owner address The address which owns the funds.\n* @param _spender address The address which will spend the funds.\n* @return A uint256 specifying the amount of tokens still available for the\nspender.\n*/\nfunction allowance(address _owner, address _spender) public view returns (uint256) {\nreturn allowed[_owner][_spender];\n}\n/**\n* @dev Increase the amount of tokens that an owner allowed to a spender.\n*\n* approve should be called when allowed[_spender] == 0. To increment\n* allowed value is better to use this function to avoid 2 calls (and wait until\n* the first transaction is mined)\n* From MonolithDAO Token.sol\n* @param _spender The address which will spend the funds.\n* @param _addedValue The amount of tokens to increase the allowance by.\n*/\nfunction increaseApproval(address _spender, uint _addedValue) public returns (bool)\n{\nallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\nemit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\nreturn true;\n}\n/**\n* @dev Decrease the amount of tokens that an owner allowed to a spender.\n*\n* approve should be called when allowed[_spender] == 0. To decrement\n* allowed value is better to use this function to avoid 2 calls (and wait until\n* the first transaction is mined)\n* From MonolithDAO Token.sol\n* @param _spender The address which will spend the funds.\n* @param _subtractedValue The amount of tokens to decrease the allowance by.\n*/\nfunction decreaseApproval(address _spender, uint _subtractedValue) public returns\n(bool) {\nuint oldValue = allowed[msg.sender][_spender];\nif (_subtractedValue > oldValue) {\nallowed[msg.sender][_spender] = 0;\n} else {\nallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n}\nemit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\nreturn true;\n}\n}\ncontract ITeacCoinToken is StandardToken{\nstring public constant name = \"Initial Tea Chain\"; // solium-disable-line uppercase\nstring public constant symbol = \"ITEAC\"; // solium-disable-line uppercase\nuint8 public constant decimals = 18; // solium-disable-line uppercase\nuint256 public constant INITIAL_SUPPLY = 2000000000000000000000000000;\nuint256 public constant MAX_SUPPLY = 100 * 10000 * 10000 * (10 **\nuint256(decimals));\n/**\n* @dev Constructor that gives msg.sender all of existing tokens.\n*/\nconstructor() ITeacCoinToken() public {\ntotalSupply_ = INITIAL_SUPPLY;\nbalances[msg.sender] = INITIAL_SUPPLY;\nemit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n}\n/**\n* The fallback function.\n*/\nfunction() payable public {\nrevert();\n}\n}",
  "bytecode": "608060405234801561001057600080fd5b506b06765c793fa10079d00000006001819055506b06765c793fa10079d00000006000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6b06765c793fa10079d00000006040518082815260200191505060405180910390a3611343806100de6000396000f3006080604052600436106100c5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100ca578063095ea7b31461015a57806318160ddd146101bf57806323b872dd146101ea5780632ff2e9dc1461026f578063313ce5671461029a57806332cb6b0c146102cb57806366188463146102f657806370a082311461035b57806395d89b41146103b2578063a9059cbb14610442578063d73dd623146104a7578063dd62ed3e1461050c575b600080fd5b3480156100d657600080fd5b506100df610583565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561011f578082015181840152602081019050610104565b50505050905090810190601f16801561014c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561016657600080fd5b506101a5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105bc565b604051808215151515815260200191505060405180910390f35b3480156101cb57600080fd5b506101d4610743565b6040518082815260200191505060405180910390f35b3480156101f657600080fd5b50610255600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061074d565b604051808215151515815260200191505060405180910390f35b34801561027b57600080fd5b50610284610b07565b6040518082815260200191505060405180910390f35b3480156102a657600080fd5b506102af610b17565b604051808260ff1660ff16815260200191505060405180910390f35b3480156102d757600080fd5b506102e0610b1c565b6040518082815260200191505060405180910390f35b34801561030257600080fd5b50610341600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b2e565b604051808215151515815260200191505060405180910390f35b34801561036757600080fd5b5061039c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dbf565b6040518082815260200191505060405180910390f35b3480156103be57600080fd5b506103c7610e07565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104075780820151818401526020810190506103ec565b50505050905090810190601f1680156104345780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561044e57600080fd5b5061048d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e40565b604051808215151515815260200191505060405180910390f35b3480156104b357600080fd5b506104f2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061105f565b604051808215151515815260200191505060405180910390f35b34801561051857600080fd5b5061056d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061125b565b6040518082815260200191505060405180910390f35b6040805190810160405280601181526020017f496e697469616c2054656120436861696e00000000000000000000000000000081525081565b60008082148061064857506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b151561065357600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600154905090565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561078a57600080fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156107d757600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561086257600080fd5b6108b3826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112e290919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610946826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112fb90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a1782600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112e290919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b6b06765c793fa10079d000000081565b601281565b601260ff16600a0a6402540be4000281565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610c3f576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610cd3565b610c5283826112e290919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6040805190810160405280600581526020017f495445414300000000000000000000000000000000000000000000000000000081525081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610e7d57600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610eca57600080fd5b610f1b826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112e290919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610fae826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112fb90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60006110f082600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112fb90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008282111515156112f057fe5b818303905092915050565b6000818301905082811015151561130e57fe5b809050929150505600a165627a7a72305820ff4d9653a636af51b1dad5a03173444247e8ed21ddbd8b30da0e9f48ee51fd7d0029"
}