{
  "address": "0x7a83db2d2737c240c77c7c5d8be8c2ad68f6ff23",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "UselessReserveBank",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-07-09\n*/\n\npragma solidity ^0.4.11;\n\n// ----------------------------------------------------------------------------\n// The Useless Reserve Bank Token Contract\n//\n// - If you need welfare support, claim your free URB token entitlements from\n//   the gubberment.\n//\n//   Call the default function `()` to claim 1,000 URBs by sending a 0 value\n//   transaction to this contract address.\n//\n//   NOTE that any ethers sent with this call will fill the coffers of this\n//   gubberment's token contract.\n//\n// - If you consider yourself to be in the top 1%, make a donation for world\n//   peace.\n//\n//   Call `philanthropise({message})` and 100,000 URBs will be sent to\n//   your account for each ether you donate. Fractions of ethers are always\n//   accepted.\n//\n//   Your message and donation amount will be etched into the blockchain\n//   forever, to recognise your generousity. Thank you.\n//\n//   As you are making this world a better place, your philanthropic donation\n//   is eligible for a special discounted 20% tax rate. Your taxes will be\n//   shared equally among the current gubberment treasury officials.\n//   Thank you.\n//\n// - If you have fallen into hard times and have accumulated some URB tokens,\n//   you can convert your URBs into ethers.\n//\n//   Liquidate your URBs by calling `liquidate(amountOfTokens)`, where\n//   1 URB is specified as 1,000,000,000,000,000,000 (18 decimal places).\n//   You will receive 1 ether for each 30,000 URBs you liquidate.\n//\n//   NOTE that this treasury contract can only dish out ethers in exchange\n//   for URB tokens **IF** there are sufficient ethers in this contract.\n//   Only 25% of the ether balance of this contract can be claimed at any\n//   one time.\n//\n// - Any gifts of ERC20 tokens send to this contract will be solemnly accepted\n//   by the gubberment. The treasury will at it's discretion disburst these \n//   gifts to friendly officials. Thank you.\n//\n// Token Contract:\n// - Symbol: URB\n// - Name: Useless Reserve Bank\n// - Decimals: 18\n// - Contract address; 0x7a83db2d2737c240c77c7c5d8be8c2ad68f6ff23\n// - Block: 4,000,000\n//\n// Usage:\n// - Watch this contract at address:\n//     0x7A83dB2d2737C240C77C7C5D8be8c2aD68f6FF23\n//   with the application binary interface published at:\n//     https://etherscan.io/address/0x7a83db2d2737c240c77c7c5d8be8c2ad68f6ff23#code\n//   to execute this token contract functions in Ethereum Wallet / Mist or\n//   MyEtherWallet.\n//\n// User Functions:\n// - default send function ()\n//   Users can send 0 or more ethers to this contract address and receive back\n//   1000 URBs\n//\n// - philanthropise(name)\n//   Rich users can send a non-zero ether amount, calling this function with\n//   a name or dedication message. 100,000 URBs will be minted for each\n//   1 ETH sent. Fractions of an ether can be sent.\n//   Remember that your goodwill karma is related to the size of your donation.\n//\n// - liquidate(amountOfTokens)\n//   URB token holders can liquidate part or all of their tokens and receive\n//   back 1 ether for every 30,000 URBs liquidated, ONLY if the ethers to be\n//   received is less than 25% of the outstanding ETH balance of this contract\n//\n// - bribe()\n//   Send ethers directly to the gubberment treasury officials. Your ethers\n//   will be distributed equally among the current treasury offcials.\n//\n// Info Functions:\n// - currentEtherBalance()\n//   Returns the current ether balance of this contract.\n//\n// - currentTokenBalance()\n//   Returns the total supply of URB tokens, where 1 URB is represented as\n//   1,000,000,000,000,000,000 (18 decimal places).\n//\n// - numberOfTreasuryOfficials()\n//   Returns the number of officials on the payroll of the gubberment\n//   treasury.\n//\n// Gubberment Functions:\n// - pilfer(amount)\n//   Gubberment officials can pilfer any ethers in this contract when necessary.\n//\n// - acceptGiftTokens(tokenAddress)\n//   The gubberment can accept any ERC20-compliant gift tokens send to this\n//   contract.\n//\n// - replaceOfficials([accounts])\n//   The gubberment can sack and replace all it's treasury officials in one go.\n//\n// Standard ERC20 Functions:\n// - balanceOf(account)\n// - totalSupply\n// - transfer(to, amount)\n// - approve(spender, amount)\n// - transferFrom(owner, spender, amount)\n//\n// Yes, I made it into block 4,000,000 .\n//\n// Remember to make love and peace, not war!\n//\n// (c) The Gubberment 2017. The MIT Licence.\n// ----------------------------------------------------------------------------\n\ncontract Gubberment {\n    address public gubberment;\n    address public newGubberment;\n    event GubbermentOverthrown(address indexed _from, address indexed _to);\n\n    function Gubberment() {\n        gubberment = msg.sender;\n    }\n\n    modifier onlyGubberment {\n        if (msg.sender != gubberment) throw;\n        _;\n    }\n\n    function coupDetat(address _newGubberment) onlyGubberment {\n        newGubberment = _newGubberment;\n    }\n \n    function gubbermentOverthrown() {\n        if (msg.sender == newGubberment) {\n            GubbermentOverthrown(gubberment, newGubberment);\n            gubberment = newGubberment;\n        }\n    }\n}\n\n\n// ERC Token Standard #20 - https://github.com/ethereum/EIPs/issues/20\ncontract ERC20Token {\n    // ------------------------------------------------------------------------\n    // Balances for each account\n    // ------------------------------------------------------------------------\n    mapping(address => uint) balances;\n\n    // ------------------------------------------------------------------------\n    // Owner of account approves the transfer of an amount to another account\n    // ------------------------------------------------------------------------\n    mapping(address => mapping (address => uint)) allowed;\n\n    // ------------------------------------------------------------------------\n    // Total token supply\n    // ------------------------------------------------------------------------\n    uint public totalSupply;\n\n    // ------------------------------------------------------------------------\n    // Get the account balance of another account with address _owner\n    // ------------------------------------------------------------------------\n    function balanceOf(address _owner) constant returns (uint balance) {\n        return balances[_owner];\n    }\n\n    // ------------------------------------------------------------------------\n    // Transfer the balance from owner's account to another account\n    // ------------------------------------------------------------------------\n    function transfer(address _to, uint _amount) returns (bool success) {\n        if (balances[msg.sender] >= _amount\n            && _amount > 0\n            && balances[_to] + _amount > balances[_to]) {\n            balances[msg.sender] -= _amount;\n            balances[_to] += _amount;\n            Transfer(msg.sender, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    // ------------------------------------------------------------------------\n    // Allow _spender to withdraw from your account, multiple times, up to the\n    // _value amount. If this function is called again it overwrites the\n    // current allowance with _value.\n    // ------------------------------------------------------------------------\n    function approve(\n        address _spender,\n        uint _amount\n    ) returns (bool success) {\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Spender of tokens transfer an amount of tokens from the token owner's\n    // balance to the spender's account. The owner of the tokens must already\n    // have approve(...)-d this transfer\n    // ------------------------------------------------------------------------\n    function transferFrom(\n        address _from,\n        address _to,\n        uint _amount\n    ) returns (bool success) {\n        if (balances[_from] >= _amount\n            && allowed[_from][msg.sender] >= _amount\n            && _amount > 0\n            && balances[_to] + _amount > balances[_to]) {\n            balances[_from] -= _amount;\n            allowed[_from][msg.sender] -= _amount;\n            balances[_to] += _amount;\n            Transfer(_from, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    // ------------------------------------------------------------------------\n    // Returns the amount of tokens approved by the owner that can be\n    // transferred to the spender's account\n    // ------------------------------------------------------------------------\n    function allowance(\n        address _owner, \n        address _spender\n    ) constant returns (uint remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender,\n        uint _value);\n}\n\n\ncontract UselessReserveBank is ERC20Token, Gubberment {\n\n    // ------------------------------------------------------------------------\n    // Token information\n    // ------------------------------------------------------------------------\n    string public constant symbol = \"URB\";\n    string public constant name = \"Useless Reserve Bank\";\n    uint8 public constant decimals = 18;\n    \n    uint public constant WELFARE_HANDOUT = 1000;\n    uint public constant ONEPERCENT_TOKENS_PER_ETH = 100000;\n    uint public constant LIQUIDATION_TOKENS_PER_ETH = 30000;\n\n    address[] public treasuryOfficials;\n    uint public constant TAXRATE = 20;\n    uint public constant LIQUIDATION_RESERVE_RATIO = 75;\n\n    uint public totalTaxed;\n    uint public totalBribery;\n    uint public totalPilfered;\n\n    uint public constant SENDING_BLOCK = 3999998; \n\n    function UselessReserveBank() {\n        treasuryOfficials.push(0xDe18789c4d65DC8ecE671A4145F32F1590c4D802);\n        treasuryOfficials.push(0x8899822D031891371afC369767511164Ef21e55c);\n    }\n\n    // ------------------------------------------------------------------------\n    // Just give the welfare handouts\n    // ------------------------------------------------------------------------\n    function () payable {\n        uint tokens = WELFARE_HANDOUT * 1 ether;\n        totalSupply += tokens;\n        balances[msg.sender] += tokens;\n        WelfareHandout(msg.sender, tokens, totalSupply, msg.value, \n            this.balance);\n        Transfer(0x0, msg.sender, tokens);\n    }\n    event WelfareHandout(address indexed recipient, uint tokens, \n        uint newTotalSupply, uint ethers, uint newEtherBalance);\n\n\n    // ------------------------------------------------------------------------\n    // If you consider yourself rich, donate for world peace\n    // ------------------------------------------------------------------------\n    function philanthropise(string name) payable {\n        // Sending something real?\n        require(msg.value > 0);\n\n        // Calculate the number of tokens\n        uint tokens = msg.value * ONEPERCENT_TOKENS_PER_ETH;\n\n        // Assign tokens to account and inflate total supply\n        balances[msg.sender] += tokens;\n        totalSupply += tokens;\n\n        // Calculate and forward taxes to the treasury\n        uint taxAmount = msg.value * TAXRATE / 100;\n        if (taxAmount > 0) {\n            totalTaxed += taxAmount;\n            uint taxPerOfficial = taxAmount / treasuryOfficials.length;\n            for (uint i = 0; i < treasuryOfficials.length; i++) {\n                treasuryOfficials[i].transfer(taxPerOfficial);\n            }\n        }\n\n        Philanthropy(msg.sender, name, tokens, totalSupply, msg.value, \n            this.balance, totalTaxed);\n        Transfer(0x0, msg.sender, tokens);\n    }\n    event Philanthropy(address indexed buyer, string name, uint tokens, \n        uint newTotalSupply, uint ethers, uint newEtherBalance,\n        uint totalTaxed);\n\n\n    // ------------------------------------------------------------------------\n    // Liquidate your tokens for ETH, if this contract has sufficient ETH\n    // ------------------------------------------------------------------------\n    function liquidate(uint amountOfTokens) {\n        // Account must have sufficient tokens\n        require(amountOfTokens <= balances[msg.sender]);\n\n        // Burn tokens\n        balances[msg.sender] -= amountOfTokens;\n        totalSupply -= amountOfTokens;\n\n        // Calculate ETH to exchange\n        uint ethersToSend = amountOfTokens / LIQUIDATION_TOKENS_PER_ETH;\n\n        // Is there sufficient ETH to support this liquidation?\n        require(ethersToSend > 0 && \n            ethersToSend <= (this.balance * (100 - LIQUIDATION_RESERVE_RATIO) / 100));\n\n        // Log message\n        Liquidate(msg.sender, amountOfTokens, totalSupply, \n            ethersToSend, this.balance - ethersToSend);\n        Transfer(msg.sender, 0x0, amountOfTokens);\n\n        // Send ETH\n        msg.sender.transfer(ethersToSend);\n    }\n    event Liquidate(address indexed seller, \n        uint tokens, uint newTotalSupply, \n        uint ethers, uint newEtherBalance);\n\n\n    // ------------------------------------------------------------------------\n    // Gubberment officials will accept 100% of bribes\n    // ------------------------------------------------------------------------\n    function bribe() payable {\n        // Briber must be offering something real\n        require(msg.value > 0);\n\n        // Do we really need to keep track of the total bribes?\n        totalBribery += msg.value;\n        Bribed(msg.value, totalBribery);\n\n        uint bribePerOfficial = msg.value / treasuryOfficials.length;\n        for (uint i = 0; i < treasuryOfficials.length; i++) {\n            treasuryOfficials[i].transfer(bribePerOfficial);\n        }\n    }\n    event Bribed(uint amount, uint newTotalBribery);\n\n\n    // ------------------------------------------------------------------------\n    // Gubberment officials can pilfer out of necessity\n    // ------------------------------------------------------------------------\n    function pilfer(uint amount) onlyGubberment {\n        // Cannot pilfer more than the contract balance\n        require(amount > this.balance);\n\n        // Do we really need to keep track of the total pilfered amounts?\n        totalPilfered += amount;\n        Pilfered(amount, totalPilfered, this.balance - amount);\n\n        uint amountPerOfficial = amount / treasuryOfficials.length;\n        for (uint i = 0; i < treasuryOfficials.length; i++) {\n            treasuryOfficials[i].transfer(amountPerOfficial);\n        }\n    }\n    event Pilfered(uint amount, uint totalPilfered, \n        uint newEtherBalance);\n\n\n    // ------------------------------------------------------------------------\n    // Accept any ERC20 gifts\n    // ------------------------------------------------------------------------\n    function acceptGiftTokens(address tokenAddress) \n      onlyGubberment returns (bool success) \n    {\n        ERC20Token token = ERC20Token(tokenAddress);\n        uint amount = token.balanceOf(this);\n        return token.transfer(gubberment, amount);\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Change gubberment officials\n    // ------------------------------------------------------------------------\n    function replaceOfficials(address[] newOfficials) onlyGubberment {\n        treasuryOfficials = newOfficials;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Information function\n    // ------------------------------------------------------------------------\n    function currentEtherBalance() constant returns (uint) {\n        return this.balance;\n    }\n\n    function currentTokenBalance() constant returns (uint) {\n        return totalSupply;\n    }\n\n    function numberOfTreasuryOfficials() constant returns (uint) {\n        return treasuryOfficials.length;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WELFARE_HANDOUT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pilfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ONEPERCENT_TOKENS_PER_ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPilfered\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"bribe\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTaxed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOfficials\",\"type\":\"address[]\"}],\"name\":\"replaceOfficials\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBribery\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gubberment\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"treasuryOfficials\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newGubberment\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"philanthropise\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"gubbermentOverthrown\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LIQUIDATION_RESERVE_RATIO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TAXRATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LIQUIDATION_TOKENS_PER_ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentEtherBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SENDING_BLOCK\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfTreasuryOfficials\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newGubberment\",\"type\":\"address\"}],\"name\":\"coupDetat\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"acceptGiftTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethers\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newEtherBalance\",\"type\":\"uint256\"}],\"name\":\"WelfareHandout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethers\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newEtherBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalTaxed\",\"type\":\"uint256\"}],\"name\":\"Philanthropy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethers\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newEtherBalance\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newTotalBribery\",\"type\":\"uint256\"}],\"name\":\"Bribed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalPilfered\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newEtherBalance\",\"type\":\"uint256\"}],\"name\":\"Pilfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"GubbermentOverthrown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "606060405234156200000d57fe5b5b5b60038054600160a060020a03191633600160a060020a03161790555b60058054600181016200003f8382620000da565b916000526020600020900160005b8154600160a060020a036101009290920a918202191673de18789c4d65dc8ece671a4145f32f1590c4d802909102179055506005805460018101620000938382620000da565b916000526020600020900160005b8154600160a060020a036101009290920a9182021916738899822d031891371afc369767511164ef21e55c909102179055505b6200012b565b81548183558181151162000101576000838152602090206200010191810190830162000107565b5b505050565b6200012891905b808211156200012457600081556001016200010e565b5090565b90565b611416806200013b6000396000f300606060405236156101935763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461024a57806307cfa11f146102da578063095ea7b3146102fc578063143a1a2f1461032f57806318160ddd1461034457806323b872dd1461036657806323c943531461039f57806327e7fe5a146103c1578063313ce567146103e3578063369cd4601461040957806337d0208c1461042b57806337fbec9614610435578063415f12401461045757806344af1f4b1461046c57806360368a33146104c157806361f43285146104e3578063652f64941461050f57806370a082311461053e5780637ed053151461056c5780638126e4e314610598578063950f4170146105e857806395d89b41146105fa578063a67f99971461068a578063a9059cbb146106ac578063b2923cff146106df578063ce23e8bc14610701578063d5a5825d14610723578063dd62ed3e14610745578063e36d3a4314610779578063e704430d1461079b578063efc018cc146107bd578063ff2b350d146107db575b6102485b60028054683635c9adc5dea000009081018255600160a060020a033381166000818152602081815260409182902080548601905594548151858152958601523485820152309092163160608501529051919290917f8294a7962087e832e9388263e4e6af97ed9958327121cfbf9c0ed84da98c2f349181900360800190a2604080518281529051600160a060020a033316916000916000805160206113cb8339815191529181900360200190a35b50565b005b341561025257fe5b61025a61080b565b6040805160208082528351818301528351919283929083019185019080838382156102a0575b8051825260208311156102a057601f199092019160209182019101610280565b505050905090810190601f1680156102cc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102e257fe5b6102ea610842565b60408051918252519081900360200190f35b341561030457fe5b61031b600160a060020a0360043516602435610848565b604080519115158252519081900360200190f35b341561033757fe5b6102486004356108b3565b005b341561034c57fe5b6102ea6109c3565b60408051918252519081900360200190f35b341561036e57fe5b61031b600160a060020a03600435811690602435166044356109c9565b604080519115158252519081900360200190f35b34156103a757fe5b6102ea610ad1565b60408051918252519081900360200190f35b34156103c957fe5b6102ea610ad8565b60408051918252519081900360200190f35b34156103eb57fe5b6103f3610adf565b6040805160ff9092168252519081900360200190f35b341561041157fe5b6102ea610ae4565b60408051918252519081900360200190f35b610248610aea565b005b341561043d57fe5b6102ea610bc3565b60408051918252519081900360200190f35b341561045f57fe5b610248600435610bc9565b005b341561047457fe5b610248600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843750949650610d1495505050505050565b005b34156104c957fe5b6102ea610d49565b60408051918252519081900360200190f35b34156104eb57fe5b6104f3610d4f565b60408051600160a060020a039092168252519081900360200190f35b341561051757fe5b6104f3600435610d5e565b60408051600160a060020a039092168252519081900360200190f35b341561054657fe5b6102ea600160a060020a0360043516610d90565b60408051918252519081900360200190f35b341561057457fe5b6104f3610daf565b60408051600160a060020a039092168252519081900360200190f35b610248600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843750949650610dbe95505050505050565b005b34156105f057fe5b610248610fb6565b005b341561060257fe5b61025a61103f565b6040805160208082528351818301528351919283929083019185019080838382156102a0575b8051825260208311156102a057601f199092019160209182019101610280565b505050905090810190601f1680156102cc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561069257fe5b6102ea611076565b60408051918252519081900360200190f35b34156106b457fe5b61031b600160a060020a036004351660243561107b565b604080519115158252519081900360200190f35b34156106e757fe5b6102ea611138565b60408051918252519081900360200190f35b341561070957fe5b6102ea61113d565b60408051918252519081900360200190f35b341561072b57fe5b6102ea611143565b60408051918252519081900360200190f35b341561074d57fe5b6102ea600160a060020a0360043581169060243516611152565b60408051918252519081900360200190f35b341561078157fe5b6102ea61117f565b60408051918252519081900360200190f35b34156107a357fe5b6102ea611186565b60408051918252519081900360200190f35b34156107c557fe5b610248600160a060020a036004351661118d565b005b34156107e357fe5b61031b600160a060020a03600435166111d6565b604080519115158252519081900360200190f35b60408051808201909152601481527f5573656c65737320526573657276652042616e6b000000000000000000000000602082015281565b6103e881565b600160a060020a03338116600081815260016020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b600354600090819033600160a060020a039081169116146108d45760006000fd5b600160a060020a0330163183116108eb5760006000fd5b60088054840190819055604080518581526020810192909252600160a060020a0330163185900382820152517fed918136fe0709c6640272d81e09fa143d66606db9fec3b8f4764d8b05c4996d9181900360600190a16005548381151561094e57fe5b049150600090505b6005548110156109bc57600580548290811061096e57fe5b906000526020600020900160005b90546040516101009290920a9004600160a060020a0316906108fc8415029084906000818181858888f1935050505015156109b357fe5b5b600101610956565b5b5b505050565b60025481565b600160a060020a038316600090815260208190526040812054829010801590610a195750600160a060020a0380851660009081526001602090815260408083203390941683529290522054829010155b8015610a255750600082115b8015610a4a5750600160a060020a038316600090815260208190526040902054828101115b15610ac557600160a060020a0380851660008181526020818152604080832080548890039055600182528083203386168452825280832080548890039055938716808352828252918490208054870190558351868152935191936000805160206113cb833981519152929081900390910190a3506001610ac9565b5060005b5b9392505050565b6002545b90565b620186a081565b601281565b60085481565b60008034819011610afb5760006000fd5b60078054349081019182905560408051918252602082019290925281517f3f6a67925881418ccb15bf0ed7fe709e68e5dd9273754b6c679547ecd71fd2ea929181900390910190a160055434811515610b5057fe5b049150600090505b600554811015610bbe576005805482908110610b7057fe5b906000526020600020900160005b90546040516101009290920a9004600160a060020a0316906108fc8415029084906000818181858888f193505050501515610bb557fe5b5b600101610b58565b5b5050565b60065481565b600160a060020a033316600090815260208190526040812054821115610bef5760006000fd5b600160a060020a033316600090815260208190526040902080548390039055600280548390039055617530825b049050600081118015610c4057506064600160a060020a033016316019025b048111155b1515610c4c5760006000fd5b33600160a060020a03167f4e91025e01b2329df1ec1067d27aafec4d1c41f682ccd794dee04321e0b1e8dc83600254848530600160a060020a031631036040518085815260200184815260200183815260200182815260200194505050505060405180910390a2604080518381529051600091600160a060020a033316916000805160206113cb8339815191529181900360200190a3604051600160a060020a0333169082156108fc029083906000818181858888f193505050501515610bbe57fe5b5b5050565b60035433600160a060020a03908116911614610d305760006000fd5b8051610bbe90600590602084019061131f565b505b5b50565b60075481565b600354600160a060020a031681565b6005805482908110610d6c57fe5b906000526020600020900160005b915054906101000a9004600160a060020a031681565b600160a060020a0381166000908152602081905260409020545b919050565b600454600160a060020a031681565b600080808034819011610dd15760006000fd5b600160a060020a0333166000908152602081905260409020805434620186a08102918201909255600280548201905594506064906014025b0492506000831115610e9857600680548401905560055483811515610e2a57fe5b049150600090505b600554811015610e98576005805482908110610e4a57fe5b906000526020600020900160005b90546040516101009290920a9004600160a060020a0316906108fc8415029084906000818181858888f193505050501515610e8f57fe5b5b600101610e32565b5b33600160a060020a03167fa93deda4de4368f4a48089ae0649d4595173d9cf5721972f75f9b8f839a2f60686866002543430600160a060020a0316316006546040518080602001878152602001868152602001858152602001848152602001838152602001828103825288818151815260200191508051906020019080838360008314610f41575b805182526020831115610f4157601f199092019160209182019101610f21565b505050905090810190601f168015610f6d5780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a2604080518581529051600160a060020a033316916000916000805160206113cb8339815191529181900360200190a35b5050505050565b60045433600160a060020a039081169116141561103c57600454600354604051600160a060020a0392831692909116907fc7c369599b2a6a2eafcc8cc7379e9a5c619f5a7b302a5c3dd795b2d42a4e476f90600090a36004546003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039092169190911790555b5b565b60408051808201909152600381527f5552420000000000000000000000000000000000000000000000000000000000602082015281565b604b81565b600160a060020a0333166000908152602081905260408120548290108015906110a45750600082115b80156110c95750600160a060020a038316600090815260208190526040902054828101115b1561112957600160a060020a0333811660008181526020818152604080832080548890039055938716808352918490208054870190558351868152935191936000805160206113cb833981519152929081900390910190a35060016108ad565b5060006108ad565b5b92915050565b601481565b61753081565b600160a060020a033016315b90565b600160a060020a038083166000908152600160209081526040808320938516835292905220545b92915050565b623d08fe81565b6005545b90565b60035433600160a060020a039081169116146111a95760006000fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b6003546000908190819033600160a060020a039081169116146111f95760006000fd5b83915081600160a060020a03166370a08231306000604051602001526040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b151561127557fe5b6102c65a03f1151561128357fe5b50506040805180516003546000602093840181905284517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a039283166004820152602481018490529451929650908716945063a9059cbb936044808201949392918390030190829087803b15156112ff57fe5b6102c65a03f1151561130d57fe5b5050604051519350505b5b5050919050565b828054828255906000526020600020908101928215611381579160200282015b82811115611381578251825473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0390911617825560209092019160019091019061133f565b5b5061138e929150611392565b5090565b610ad591905b8082111561138e57805473ffffffffffffffffffffffffffffffffffffffff19168155600101611398565b5090565b905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820abc06557f205446094e124ffb50645d354fb4bd8c5fb4a8c9c977b9ab0659c020029"
}