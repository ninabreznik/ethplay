{
  "address": "0x1a7c48088df30ecfeb09f5b8e25ac0b2b3f796a2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CarsPresell",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-11\n*/\n\n/* ==================================================================== */\n/* Copyright (c) 2018 The CryptoRacing Project.  All rights reserved.\n/* \n/*   The first idle car race game of blockchain                 \n/* ==================================================================== */\npragma solidity ^0.4.20;\n\n/// @title ERC-165 Standard Interface Detection\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\ninterface ERC165 {\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\n}\n\n/// @title ERC-721 Non-Fungible Token Standard\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\ncontract ERC721 is ERC165 {\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n    function balanceOf(address _owner) external view returns (uint256);\n    function ownerOf(uint256 _tokenId) external view returns (address);\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external;\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n    function approve(address _approved, uint256 _tokenId) external;\n    function setApprovalForAll(address _operator, bool _approved) external;\n    function getApproved(uint256 _tokenId) external view returns (address);\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n}\n\n/// @title ERC-721 Non-Fungible Token Standard\ninterface ERC721TokenReceiver {\n\tfunction onERC721Received(address _from, uint256 _tokenId, bytes data) external returns(bytes4);\n}\n\ncontract AccessAdmin {\n    bool public isPaused = false;\n    address public addrAdmin;  \n\n    event AdminTransferred(address indexed preAdmin, address indexed newAdmin);\n\n    function AccessAdmin() public {\n        addrAdmin = msg.sender;\n    }  \n\n\n    modifier onlyAdmin() {\n        require(msg.sender == addrAdmin);\n        _;\n    }\n\n    modifier whenNotPaused() {\n        require(!isPaused);\n        _;\n    }\n\n    modifier whenPaused {\n        require(isPaused);\n        _;\n    }\n\n    function setAdmin(address _newAdmin) external onlyAdmin {\n        require(_newAdmin != address(0));\n        AdminTransferred(addrAdmin, _newAdmin);\n        addrAdmin = _newAdmin;\n    }\n\n    function doPause() external onlyAdmin whenNotPaused {\n        isPaused = true;\n    }\n\n    function doUnpause() external onlyAdmin whenPaused {\n        isPaused = false;\n    }\n}\n\n\ncontract AccessService is AccessAdmin {\n    address public addrService;\n    address public addrFinance;\n\n    modifier onlyService() {\n        require(msg.sender == addrService);\n        _;\n    }\n\n    modifier onlyFinance() {\n        require(msg.sender == addrFinance);\n        _;\n    }\n\n    function setService(address _newService) external {\n        require(msg.sender == addrService || msg.sender == addrAdmin);\n        require(_newService != address(0));\n        addrService = _newService;\n    }\n\n    function setFinance(address _newFinance) external {\n        require(msg.sender == addrFinance || msg.sender == addrAdmin);\n        require(_newFinance != address(0));\n        addrFinance = _newFinance;\n    }\n}\n\n\n\n\n\n/* ==================================================================== */\n/* equipmentId \n/* 10001\tT1\n/* 10002\tT2\n/* 10003\tT3\n/* 10004\tT4\n/* 10005\tT5\n/* 10006\tT6 \n/* 10007\tfreeCar          \n/* ==================================================================== */\n\ncontract RaceToken is ERC721, AccessAdmin {\n    /// @dev The equipment info\n    struct Fashion {\n        uint16 equipmentId;             // 0  Equipment ID\n        uint16 quality;     \t        // 1  Rarity: 1 Coarse/2 Good/3 Rare/4 Epic/5 Legendary\n        uint16 pos;         \t        // 2  Slots: 1 Engine/2 Turbine/3 BodySystem/4 Pipe/5 Suspension/6 NO2/7 Tyre/8 Transmission/9 Car\n        uint16 production;    \t        // 3  Race bonus productivity\n        uint16 attack;\t                // 4  Attack\n        uint16 defense;                 // 5  Defense\n        uint16 plunder;     \t        // 6  Plunder\n        uint16 productionMultiplier;    // 7  Percent value\n        uint16 attackMultiplier;     \t// 8  Percent value\n        uint16 defenseMultiplier;     \t// 9  Percent value\n        uint16 plunderMultiplier;     \t// 10 Percent value\n        uint16 level;       \t        // 11 level\n        uint16 isPercent;   \t        // 12  Percent value\n    }\n\n    /// @dev All equipments tokenArray (not exceeding 2^32-1)\n    Fashion[] public fashionArray;\n\n    /// @dev Amount of tokens destroyed\n    uint256 destroyFashionCount;\n\n    /// @dev Equipment token ID belong to owner address\n    mapping (uint256 => address) fashionIdToOwner;\n\n    /// @dev Equipments owner by the owner (array)\n    mapping (address => uint256[]) ownerToFashionArray;\n\n    /// @dev Equipment token ID search in owner array\n    mapping (uint256 => uint256) fashionIdToOwnerIndex;\n\n    /// @dev The authorized address for each Race\n    mapping (uint256 => address) fashionIdToApprovals;\n\n    /// @dev The authorized operators for each address\n    mapping (address => mapping (address => bool)) operatorToApprovals;\n\n    /// @dev Trust contract\n    mapping (address => bool) actionContracts;\n\n\t//设置可调用当前合约的其他合约\n    function setActionContract(address _actionAddr, bool _useful) external onlyAdmin {\n        actionContracts[_actionAddr] = _useful;\n    }\n\n    function getActionContract(address _actionAddr) external view onlyAdmin returns(bool) {\n        return actionContracts[_actionAddr];\n    }\n\n    /// @dev This emits when the approved address for an Race is changed or reaffirmed.\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n\n    /// @dev This emits when an operator is enabled or disabled for an owner.\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n    /// @dev This emits when the equipment ownership changed \n    event Transfer(address indexed from, address indexed to, uint256 tokenId);\n\n    /// @dev This emits when the equipment created\n    event CreateFashion(address indexed owner, uint256 tokenId, uint16 equipmentId, uint16 quality, uint16 pos, uint16 level, uint16 createType);\n\n    /// @dev This emits when the equipment's attributes changed\n    event ChangeFashion(address indexed owner, uint256 tokenId, uint16 changeType);\n\n    /// @dev This emits when the equipment destroyed\n    event DeleteFashion(address indexed owner, uint256 tokenId, uint16 deleteType);\n    \n    function RaceToken() public {\n        addrAdmin = msg.sender;\n        fashionArray.length += 1;\n    }\n\n    // modifier\n    /// @dev Check if token ID is valid\n    modifier isValidToken(uint256 _tokenId) {\n        require(_tokenId >= 1 && _tokenId <= fashionArray.length);\n        require(fashionIdToOwner[_tokenId] != address(0)); \n        _;\n    }\n\n    modifier canTransfer(uint256 _tokenId) {\n        address owner = fashionIdToOwner[_tokenId];\n        require(msg.sender == owner || msg.sender == fashionIdToApprovals[_tokenId] || operatorToApprovals[owner][msg.sender]);\n        _;\n    }\n\n    // ERC721\n    function supportsInterface(bytes4 _interfaceId) external view returns(bool) {\n        // ERC165 || ERC721 || ERC165^ERC721\n        return (_interfaceId == 0x01ffc9a7 || _interfaceId == 0x80ac58cd || _interfaceId == 0x8153916a) && (_interfaceId != 0xffffffff);\n    }\n        \n    function name() public pure returns(string) {\n        return \"Race Token\";\n    }\n\n    function symbol() public pure returns(string) {\n        return \"Race\";\n    }\n\n    /// @dev Search for token quantity address\n    /// @param _owner Address that needs to be searched\n    /// @return Returns token quantity\n    function balanceOf(address _owner) external view returns(uint256) {\n        require(_owner != address(0));\n        return ownerToFashionArray[_owner].length;\n    }\n\n    /// @dev Find the owner of an Race\n    /// @param _tokenId The tokenId of Race\n    /// @return Give The address of the owner of this Race\n    function ownerOf(uint256 _tokenId) external view /*isValidToken(_tokenId)*/ returns (address owner) {\n        return fashionIdToOwner[_tokenId];\n    }\n\n    /// @dev Transfers the ownership of an Race from one address to another address\n    /// @param _from The current owner of the Race\n    /// @param _to The new owner\n    /// @param _tokenId The Race to transfer\n    /// @param data Additional data with no specified format, sent in call to `_to`\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) \n        external\n        whenNotPaused\n    {\n        _safeTransferFrom(_from, _to, _tokenId, data);\n    }\n\n    /// @dev Transfers the ownership of an Race from one address to another address\n    /// @param _from The current owner of the Race\n    /// @param _to The new owner\n    /// @param _tokenId The Race to transfer\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) \n        external\n        whenNotPaused\n    {\n        _safeTransferFrom(_from, _to, _tokenId, \"\");\n    }\n\n    /// @dev Transfer ownership of an Race, '_to' must be a vaild address, or the Race will lost\n    /// @param _from The current owner of the Race\n    /// @param _to The new owner\n    /// @param _tokenId The Race to transfer\n    function transferFrom(address _from, address _to, uint256 _tokenId)\n        external\n        whenNotPaused\n        isValidToken(_tokenId)\n        canTransfer(_tokenId)\n    {\n        address owner = fashionIdToOwner[_tokenId];\n        require(owner != address(0));\n        require(_to != address(0));\n        require(owner == _from);\n        \n        _transfer(_from, _to, _tokenId);\n    }\n\n    /// @dev Set or reaffirm the approved address for an Race\n    /// @param _approved The new approved Race controller\n    /// @param _tokenId The Race to approve\n    function approve(address _approved, uint256 _tokenId)\n        external\n        whenNotPaused\n    {\n        address owner = fashionIdToOwner[_tokenId];\n        require(owner != address(0));\n        require(msg.sender == owner || operatorToApprovals[owner][msg.sender]);\n\n        fashionIdToApprovals[_tokenId] = _approved;\n        Approval(owner, _approved, _tokenId);\n    }\n\n    /// @dev Enable or disable approval for a third party (\"operator\") to manage all your asset.\n    /// @param _operator Address to add to the set of authorized operators.\n    /// @param _approved True if the operators is approved, false to revoke approval\n    function setApprovalForAll(address _operator, bool _approved) \n        external \n        whenNotPaused\n    {\n        operatorToApprovals[msg.sender][_operator] = _approved;\n        ApprovalForAll(msg.sender, _operator, _approved);\n    }\n\n    /// @dev Get the approved address for a single Race\n    /// @param _tokenId The Race to find the approved address for\n    /// @return The approved address for this Race, or the zero address if there is none\n    function getApproved(uint256 _tokenId) external view isValidToken(_tokenId) returns (address) {\n        return fashionIdToApprovals[_tokenId];\n    }\n\n    /// @dev Query if an address is an authorized operator for another address\n    /// @param _owner The address that owns the Races\n    /// @param _operator The address that acts on behalf of the owner\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool) {\n        return operatorToApprovals[_owner][_operator];\n    }\n\n    /// @dev Count Races tracked by this contract\n    /// @return A count of valid Races tracked by this contract, where each one of\n    ///  them has an assigned and queryable owner not equal to the zero address\n    function totalSupply() external view returns (uint256) {\n        return fashionArray.length - destroyFashionCount - 1;\n    }\n\n    /// @dev Do the real transfer with out any condition checking\n    /// @param _from The old owner of this Race(If created: 0x0)\n    /// @param _to The new owner of this Race \n    /// @param _tokenId The tokenId of the Race\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n        if (_from != address(0)) {\n            uint256 indexFrom = fashionIdToOwnerIndex[_tokenId];\n            uint256[] storage fsArray = ownerToFashionArray[_from];\n            require(fsArray[indexFrom] == _tokenId);\n\n            // If the Race is not the element of array, change it to with the last\n            if (indexFrom != fsArray.length - 1) {\n                uint256 lastTokenId = fsArray[fsArray.length - 1];\n                fsArray[indexFrom] = lastTokenId; \n                fashionIdToOwnerIndex[lastTokenId] = indexFrom;\n            }\n            fsArray.length -= 1; \n            \n            if (fashionIdToApprovals[_tokenId] != address(0)) {\n                delete fashionIdToApprovals[_tokenId];\n            }      \n        }\n\n        // Give the Race to '_to'\n        fashionIdToOwner[_tokenId] = _to;\n        ownerToFashionArray[_to].push(_tokenId);\n        fashionIdToOwnerIndex[_tokenId] = ownerToFashionArray[_to].length - 1;\n        \n        Transfer(_from != address(0) ? _from : this, _to, _tokenId);\n    }\n\n    /// @dev Actually perform the safeTransferFrom\n    function _safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) \n        internal\n        isValidToken(_tokenId) \n        canTransfer(_tokenId)\n    {\n        address owner = fashionIdToOwner[_tokenId];\n        require(owner != address(0));\n        require(_to != address(0));\n        require(owner == _from);\n        \n        _transfer(_from, _to, _tokenId);\n\n        // Do the callback after everything is done to avoid reentrancy attack\n        uint256 codeSize;\n        assembly { codeSize := extcodesize(_to) }\n        if (codeSize == 0) {\n            return;\n        }\n        bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(_from, _tokenId, data);\n        // bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\")) = 0xf0b9e5ba;\n        require(retval == 0xf0b9e5ba);\n    }\n\n    //----------------------------------------------------------------------------------------------------------\n\n    /// @dev Equipment creation\n    /// @param _owner Owner of the equipment created\n    /// @param _attrs Attributes of the equipment created\n    /// @return Token ID of the equipment created\n    function createFashion(address _owner, uint16[13] _attrs, uint16 _createType) \n        external \n        whenNotPaused\n        returns(uint256)\n    {\n        require(actionContracts[msg.sender]);\n        require(_owner != address(0));\n\n        uint256 newFashionId = fashionArray.length;\n        require(newFashionId < 4294967296);\n\n        fashionArray.length += 1;\n        Fashion storage fs = fashionArray[newFashionId];\n        fs.equipmentId = _attrs[0];\n        fs.quality = _attrs[1];\n        fs.pos = _attrs[2];\n        if (_attrs[3] != 0) {\n            fs.production = _attrs[3];\n        }\n        \n        if (_attrs[4] != 0) {\n            fs.attack = _attrs[4];\n        }\n\t\t\n\t\tif (_attrs[5] != 0) {\n            fs.defense = _attrs[5];\n        }\n       \n        if (_attrs[6] != 0) {\n            fs.plunder = _attrs[6];\n        }\n        \n        if (_attrs[7] != 0) {\n            fs.productionMultiplier = _attrs[7];\n        }\n\n        if (_attrs[8] != 0) {\n            fs.attackMultiplier = _attrs[8];\n        }\n\n        if (_attrs[9] != 0) {\n            fs.defenseMultiplier = _attrs[9];\n        }\n\n        if (_attrs[10] != 0) {\n            fs.plunderMultiplier = _attrs[10];\n        }\n\n        if (_attrs[11] != 0) {\n            fs.level = _attrs[11];\n        }\n\n        if (_attrs[12] != 0) {\n            fs.isPercent = _attrs[12];\n        }\n        \n        _transfer(0, _owner, newFashionId);\n        CreateFashion(_owner, newFashionId, _attrs[0], _attrs[1], _attrs[2], _attrs[11], _createType);\n        return newFashionId;\n    }\n\n    /// @dev One specific attribute of the equipment modified\n    function _changeAttrByIndex(Fashion storage _fs, uint16 _index, uint16 _val) internal {\n        if (_index == 3) {\n            _fs.production = _val;\n        } else if(_index == 4) {\n            _fs.attack = _val;\n        } else if(_index == 5) {\n            _fs.defense = _val;\n        } else if(_index == 6) {\n            _fs.plunder = _val;\n        }else if(_index == 7) {\n            _fs.productionMultiplier = _val;\n        }else if(_index == 8) {\n            _fs.attackMultiplier = _val;\n        }else if(_index == 9) {\n            _fs.defenseMultiplier = _val;\n        }else if(_index == 10) {\n            _fs.plunderMultiplier = _val;\n        } else if(_index == 11) {\n            _fs.level = _val;\n        } \n       \n    }\n\n    /// @dev Equiment attributes modified (max 4 stats modified)\n    /// @param _tokenId Equipment Token ID\n    /// @param _idxArray Stats order that must be modified\n    /// @param _params Stat value that must be modified\n    /// @param _changeType Modification type such as enhance, socket, etc.\n    function changeFashionAttr(uint256 _tokenId, uint16[4] _idxArray, uint16[4] _params, uint16 _changeType) \n        external \n        whenNotPaused\n        isValidToken(_tokenId) \n    {\n        require(actionContracts[msg.sender]);\n\n        Fashion storage fs = fashionArray[_tokenId];\n        if (_idxArray[0] > 0) {\n            _changeAttrByIndex(fs, _idxArray[0], _params[0]);\n        }\n\n        if (_idxArray[1] > 0) {\n            _changeAttrByIndex(fs, _idxArray[1], _params[1]);\n        }\n\n        if (_idxArray[2] > 0) {\n            _changeAttrByIndex(fs, _idxArray[2], _params[2]);\n        }\n\n        if (_idxArray[3] > 0) {\n            _changeAttrByIndex(fs, _idxArray[3], _params[3]);\n        }\n\n        ChangeFashion(fashionIdToOwner[_tokenId], _tokenId, _changeType);\n    }\n\n    /// @dev Equipment destruction\n    /// @param _tokenId Equipment Token ID\n    /// @param _deleteType Destruction type, such as craft\n    function destroyFashion(uint256 _tokenId, uint16 _deleteType)\n        external \n        whenNotPaused\n        isValidToken(_tokenId) \n    {\n        require(actionContracts[msg.sender]);\n\n        address _from = fashionIdToOwner[_tokenId];\n        uint256 indexFrom = fashionIdToOwnerIndex[_tokenId];\n        uint256[] storage fsArray = ownerToFashionArray[_from]; \n        require(fsArray[indexFrom] == _tokenId);\n\n        if (indexFrom != fsArray.length - 1) {\n            uint256 lastTokenId = fsArray[fsArray.length - 1];\n            fsArray[indexFrom] = lastTokenId; \n            fashionIdToOwnerIndex[lastTokenId] = indexFrom;\n        }\n        fsArray.length -= 1; \n\n        fashionIdToOwner[_tokenId] = address(0);\n        delete fashionIdToOwnerIndex[_tokenId];\n        destroyFashionCount += 1;\n\n        Transfer(_from, 0, _tokenId);\n\n        DeleteFashion(_from, _tokenId, _deleteType);\n    }\n\n    /// @dev Safe transfer by trust contracts\n    function safeTransferByContract(uint256 _tokenId, address _to) \n        external\n        whenNotPaused\n    {\n        require(actionContracts[msg.sender]);\n\n        require(_tokenId >= 1 && _tokenId <= fashionArray.length);\n        address owner = fashionIdToOwner[_tokenId];\n        require(owner != address(0));\n        require(_to != address(0));\n        require(owner != _to);\n\n        _transfer(owner, _to, _tokenId);\n    }\n\n    //----------------------------------------------------------------------------------------------------------\n\n\t//查看单一部件属性\n    /// @dev Get fashion attrs by tokenId\n    function getFashion(uint256 _tokenId) external view isValidToken(_tokenId) returns (uint16[13] datas) {\n        Fashion storage fs = fashionArray[_tokenId];\n        datas[0] = fs.equipmentId;\n        datas[1] = fs.quality;\n        datas[2] = fs.pos;\n        datas[3] = fs.production;\n        datas[4] = fs.attack;\n        datas[5] = fs.defense;\n        datas[6] = fs.plunder;\n        datas[7] = fs.productionMultiplier;\n        datas[8] = fs.attackMultiplier;\n        datas[9] = fs.defenseMultiplier;\n        datas[10] = fs.plunderMultiplier;\n        datas[11] = fs.level;\n        datas[12] = fs.isPercent;\n        \n    }\n\n\t//单个玩家获得当前所有tokenid和标记\n    /// @dev Get tokenIds and flags by owner\n    function getOwnFashions(address _owner) external view returns(uint256[] tokens, uint32[] flags) {\n        require(_owner != address(0));\n        uint256[] storage fsArray = ownerToFashionArray[_owner];\n        uint256 length = fsArray.length;\n        tokens = new uint256[](length);\n        flags = new uint32[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            tokens[i] = fsArray[i];\n            Fashion storage fs = fashionArray[fsArray[i]];\n            flags[i] = uint32(uint32(fs.equipmentId) * 100 + uint32(fs.quality) * 10 + fs.pos);\n        }\n    }\n\n\t\n\t/// @dev Race token info returned based on Token ID transfered (64 at most)\n    function getFashionsAttrs(uint256[] _tokens) external view returns(uint16[] attrs) {\n        uint256 length = _tokens.length;\n        require(length <= 64);\n        attrs = new uint16[](length * 13);\n        uint256 tokenId;\n        uint256 index;\n        for (uint256 i = 0; i < length; ++i) {\n            tokenId = _tokens[i];\n            if (fashionIdToOwner[tokenId] != address(0)) {\n                index = i * 13;\n                Fashion storage fs = fashionArray[tokenId];\n                attrs[index]     = fs.equipmentId;\n\t\t\t\tattrs[index + 1] = fs.quality;\n                attrs[index + 2] = fs.pos;\n                attrs[index + 3] = fs.production;\n                attrs[index + 4] = fs.attack;\n                attrs[index + 5] = fs.defense;\n                attrs[index + 6] = fs.plunder;\n                attrs[index + 7] = fs.productionMultiplier;\n                attrs[index + 8] = fs.attackMultiplier;\n                attrs[index + 9] = fs.defenseMultiplier;\n                attrs[index + 10] = fs.plunderMultiplier;\n                attrs[index + 11] = fs.level;\n                attrs[index + 12] = fs.isPercent;  \n            }   \n        }\n    }\n}\n\n\n//Tournament bonus interface\ninterface IRaceCoin {\n    function addTotalEtherPool(uint256 amount) external;\n    function addPlayerToList(address player) external;\n    function increasePlayersAttribute(address player, uint16[13] param) external;\n    function reducePlayersAttribute(address player, uint16[13] param) external;\n}\n\ncontract CarsPresell is AccessService {\n\n    using SafeMath for uint256;\n    \n    RaceToken tokenContract;\n\n    IRaceCoin public raceCoinContract;\n\n   \n    //Bonus pool address\n    address poolContract;\n\n    ///Bonus pool ratio\n    uint256 constant prizeGoldPercent = 80;\n\n    //referer\n    uint256 constant refererPercent = 5;\n\n    //The maximum number of cars per quality\n\tuint16 private carCountsLimit;\n\n\n   \n\n\n\n    mapping (uint16 => uint16) carPresellCounter;\n    mapping (address => uint16[]) presellLimit;\n\n    mapping (address => uint16) freeCarCount;\n\n    event CarPreSelled(address indexed buyer, uint16 equipmentId);\n    event FreeCarsObtained(address indexed buyer, uint16 equipmentId);\n\n    event PresellReferalGain(address referal, address player, uint256 amount);\n\n    function CarsPresell(address _nftAddr) public {\n        addrAdmin = msg.sender;\n        addrService = msg.sender;\n        addrFinance = msg.sender;\n\n        tokenContract = RaceToken(_nftAddr);\n\t\t\n\t\t//Maximum number of vehicles per class\n\t\tcarCountsLimit = 500;\n\n        carPresellCounter[10001] = 100;\n        carPresellCounter[10002] = 100;\n        carPresellCounter[10003] = 100;\n        carPresellCounter[10004] = 100;\n        carPresellCounter[10005] = 100;\n\t\tcarPresellCounter[10006] = 100;\n\n    }\n\n    function() external payable {\n\n    }\n\n    function setRaceTokenAddr(address _nftAddr) external onlyAdmin {\n        tokenContract = RaceToken(_nftAddr);\n    }\n\n   \n    //Set up tournament bonus address\n    function setRaceCoin(address _addr) external onlyAdmin {\n        require(_addr != address(0));\n        poolContract = _addr;\n        raceCoinContract = IRaceCoin(_addr);\n    }\n\t\n\t\n\t//Increase the number of pre-sale cars, the maximum limit of each vehicle is 500 vehicles.\n\tfunction setCarCounts(uint16 _carId, uint16 _carCounts) external onlyAdmin {\n\t\trequire( carPresellCounter[_carId] <= carCountsLimit);\n\t\tuint16 curSupply = carPresellCounter[_carId];\n\t\trequire((curSupply + _carCounts)<= carCountsLimit);\n        carPresellCounter[_carId] = curSupply + _carCounts;\n    }\n\n\n    //Get free cars\n    function freeCar(uint16 _equipmentId)\n        external\n        payable\n        whenNotPaused \n    {\n        require(freeCarCount[msg.sender] != 1);\n\n        uint256 payBack = 0;\n\n        uint16[] storage buyArray = presellLimit[msg.sender];\n\n        if(_equipmentId == 10007){\n            require(msg.value >= 0.0 ether);\n            payBack = (msg.value - 0.0 ether);\n            uint16[13] memory param0 = [10007, 7, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n            tokenContract.createFashion(msg.sender, param0, 1);\n            raceCoinContract.increasePlayersAttribute(msg.sender, param0);\n            buyArray.push(10007);\n\n            if (payBack > 0) {\n                msg.sender.transfer(payBack);\n            }\n\n            freeCarCount[msg.sender] = 1;\n\n            raceCoinContract.addPlayerToList(msg.sender);\n\n            FreeCarsObtained(msg.sender,_equipmentId);\n        }\n    }\n\n    //Whether a free car has been received.\n    function getFreeCarCount(address _owner) external view returns(uint16){\n\n        require(_owner != address(0));\n        if(freeCarCount[msg.sender] != 1){\n            freeCarCount[msg.sender] = 0;\n        }\n\n        return  freeCarCount[msg.sender];\n    }\n\n\n\n    function UpdateCurrentCarCount(uint16 _equipmentId,uint16 curSupply) internal {\n        carPresellCounter[_equipmentId] = (curSupply - 1);\n    }\n\n\n    function carPresell(address referer,uint16 _equipmentId) \n        external\n        payable\n        whenNotPaused \n    {\n        uint16 curSupply = carPresellCounter[_equipmentId];\n        require(curSupply > 0);\n        uint16[] storage buyArray = presellLimit[msg.sender];\n        uint256 curBuyCnt = buyArray.length;\n\t\t\n        require(curBuyCnt < 10);\n\n        uint256 payBack = 0;\n        if (_equipmentId == 10001) {\n            require(msg.value >= 0.075 ether);\n            payBack = (msg.value - 0.075 ether);\n            uint16[13] memory param1 = [10001, 1, 9, 10, 0, 0, 0, 10, 0, 0, 0, 0, 0];       // 10 productivity 10% productivity plus\n            tokenContract.createFashion(msg.sender, param1, 1);\n            raceCoinContract.increasePlayersAttribute(msg.sender, param1);\n            buyArray.push(10001);\n            raceCoinContract.addPlayerToList(msg.sender);\n        } else if(_equipmentId == 10002) {\n            require(msg.value >= 0.112 ether);\n            payBack = (msg.value - 0.112 ether);\n            uint16[13] memory param2 = [10002, 2, 9, 15, 0, 0, 0, 15, 5, 0, 0, 0, 0];       // 15 productivity 15% productivity plus 5% attack bonus\n            tokenContract.createFashion(msg.sender, param2, 1);\n            raceCoinContract.increasePlayersAttribute(msg.sender, param2);\n            buyArray.push(10002);\n            raceCoinContract.addPlayerToList(msg.sender);\n        } else if(_equipmentId == 10003) {\n            require(msg.value >= 0.225 ether);\n            payBack = (msg.value - 0.225 ether);\n            uint16[13] memory param3 = [10003, 3, 9, 30, 0, 0, 0, 20, 10, 5, 0, 0, 0];        // 30 productivity 20% productivity plus 10% attack plus 5% defense plus\n            tokenContract.createFashion(msg.sender, param3, 1);\n            raceCoinContract.increasePlayersAttribute(msg.sender, param3);\n            buyArray.push(10003);\n            raceCoinContract.addPlayerToList(msg.sender);\n        } else if(_equipmentId == 10004) {\n            require(msg.value >= 0.563 ether);\n            payBack = (msg.value - 0.563 ether);\n            uint16[13] memory param4 = [10004, 4, 9, 75, 0, 0, 0, 25, 15, 10, 5, 0, 0];        // 75 productivity 25% productivity plus 15% attack plus 10% defense plus 5% predatory addition.\n            tokenContract.createFashion(msg.sender, param4, 1);\n            raceCoinContract.increasePlayersAttribute(msg.sender, param4);\n            buyArray.push(10004);\n            raceCoinContract.addPlayerToList(msg.sender);\n        } else if(_equipmentId == 10005){\n            require(msg.value >= 1.7 ether);\n            payBack = (msg.value - 1.7 ether);\n            uint16[13] memory param5 = [10005, 5, 9, 225, 0, 0, 0, 30, 20, 15, 10, 0, 0];      // 225 productivity 30% productivity plus 20% attack plus 15% defense plus 10% predatory addition.\n            tokenContract.createFashion(msg.sender, param5, 1);\n            raceCoinContract.increasePlayersAttribute(msg.sender, param5);\n            buyArray.push(10005);\n            raceCoinContract.addPlayerToList(msg.sender);\n        }else if(_equipmentId == 10006){\n            require(msg.value >= 6 ether);\n            payBack = (msg.value - 6 ether);\n            uint16[13] memory param6 = [10006, 6, 9, 788, 0, 0, 0, 35, 25, 20, 15, 0, 0];      // 788 productivity 35% productivity plus 25% attack plus 20% defense plus 15% predatory addition.\n            tokenContract.createFashion(msg.sender, param6, 1);\n            raceCoinContract.increasePlayersAttribute(msg.sender, param6);\n            buyArray.push(10006);\n            raceCoinContract.addPlayerToList(msg.sender);\n        }\n\n        UpdateCurrentCarCount(_equipmentId,curSupply);\n\n\n        CarPreSelled(msg.sender, _equipmentId);\n\n\n\n        uint256 ethVal = msg.value.sub(payBack);\n\n        uint256 referalDivs;\n        if (referer != address(0) && referer != msg.sender) {\n            referalDivs = ethVal.mul(refererPercent).div(100); // 5%\n            referer.transfer(referalDivs);\n            emit PresellReferalGain(referer, msg.sender, referalDivs);\n        }\n\n\n        //Capital injection into capital pool\n        if (poolContract != address(0) && ethVal.mul(prizeGoldPercent).div(100) > 0) {\n            poolContract.transfer(ethVal.mul(prizeGoldPercent).div(100));\n            raceCoinContract.addTotalEtherPool(ethVal.mul(prizeGoldPercent).div(100));\n        }\n\n        //The rest of the account is entered into the developer account.\n        if(referalDivs > 0){\n            addrFinance.transfer(ethVal.sub(ethVal.mul(prizeGoldPercent).div(100)).sub(ethVal.mul(refererPercent).div(100)));\n        }else{\n            addrFinance.transfer(ethVal.sub(ethVal.mul(prizeGoldPercent).div(100)));\n        }\n        \n\n           \n        if (payBack > 0) {\n            msg.sender.transfer(payBack);\n        }\n    }\n\n    function withdraw() \n        external \n    {\n        require(msg.sender == addrFinance || msg.sender == addrAdmin);\n        addrFinance.transfer(this.balance);\n    }\n\n    function getCarCanPresellCount() external view returns (uint16[6] cntArray) {\n        cntArray[0] = carPresellCounter[10001];\n        cntArray[1] = carPresellCounter[10002];\n        cntArray[2] = carPresellCounter[10003];\n        cntArray[3] = carPresellCounter[10004];\n        cntArray[4] = carPresellCounter[10005];\n\t\tcntArray[5] = carPresellCounter[10006];  \t\t\n    }\n\n    function getBuyCount(address _owner) external view returns (uint32) {\n        return uint32(presellLimit[_owner].length);\n    }\n\n    function getBuyArray(address _owner) external view returns (uint16[]) {\n        uint16[] storage buyArray = presellLimit[_owner];\n        return buyArray;\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}",
  "bytecode": "608060405260008060006101000a81548160ff02191690831515021790555034801561002a57600080fd5b50604051602080613e5d8339810180604052810190808051906020019092919050505033600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101f4600560146101000a81548161ffff021916908361ffff16021790555060646006600061271161ffff16815260200190815260200160002060006101000a81548161ffff021916908361ffff16021790555060646006600061271261ffff16815260200190815260200160002060006101000a81548161ffff021916908361ffff16021790555060646006600061271361ffff16815260200190815260200160002060006101000a81548161ffff021916908361ffff16021790555060646006600061271461ffff16815260200190815260200160002060006101000a81548161ffff021916908361ffff16021790555060646006600061271561ffff16815260200190815260200160002060006101000a81548161ffff021916908361ffff16021790555060646006600061271661ffff16815260200190815260200160002060006101000a81548161ffff021916908361ffff16021790555050613b5e806102ff6000396000f300608060405260043610610112576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806312bcf07d146101145780631aec50cd1461015757806330efb8d31461019b5780633ccfd60b146101b2578063558dc444146101c957806362b33b5514610228578063649f357c1461027f57806367d0661d146102be578063704b6c02146102d557806382cb9df9146103185780639b8d30641461036f578063b187bd26146103b2578063bedb8a3f146103e1578063bf8bdac114610405578063bfae2f0e14610448578063cdd977e01461049f578063cecfbf34146104f6578063d489c0bf14610549578063e5d3d9d7146105ac578063f6d75e8214610644575b005b34801561012057600080fd5b50610155600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610687565b005b610199600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803561ffff1690602001909291905050506107a4565b005b3480156101a757600080fd5b506101b0612786565b005b3480156101be57600080fd5b506101c7612818565b005b3480156101d557600080fd5b5061020a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061294e565b604051808261ffff1661ffff16815260200191505060405180910390f35b34801561023457600080fd5b5061023d612a97565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561028b57600080fd5b506102bc600480360381019080803561ffff169060200190929190803561ffff169060200190929190505050612abd565b005b3480156102ca57600080fd5b506102d3612bfc565b005b3480156102e157600080fd5b50610316600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612c8f565b005b34801561032457600080fd5b5061032d612de7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561037b57600080fd5b506103b0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612e0d565b005b3480156103be57600080fd5b506103c7612f41565b604051808215151515815260200191505060405180910390f35b610403600480360381019080803561ffff169060200190929190505050612f53565b005b34801561041157600080fd5b50610446600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613547565b005b34801561045457600080fd5b5061045d61367b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104ab57600080fd5b506104b46136a1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561050257600080fd5b5061050b6136c7565b6040518082600660200280838360005b8381101561053657808201518184015260208101905061051b565b5050505090500191505060405180910390f35b34801561055557600080fd5b5061058a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061388e565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b3480156105b857600080fd5b506105ed600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506138da565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610630578082015181840152602081019050610615565b505050509050019250505060405180910390f35b34801561065057600080fd5b50610685600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061399f565b005b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156106e357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561071f57600080fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806000806107b2613aeb565b6107ba613aeb565b6107c2613aeb565b6107ca613aeb565b6107d2613aeb565b6107da613aeb565b6000806000809054906101000a900460ff161515156107f857600080fd5b600660008e61ffff1661ffff16815260200190815260200160002060009054906101000a900461ffff169b5060008c61ffff1611151561083757600080fd5b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209a508a805490509950600a8a10151561088e57600080fd5b600098506127118d61ffff161415610cc45767010a741a4627800034101515156108b757600080fd5b67010a741a46278000340398506101a06040519081016040528061271161ffff168152602001600161ffff168152602001600961ffff168152602001600a61ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600a61ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152509750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f1406049338a60016040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183600d60200280838360005b83811015610a2b578082015181840152602081019050610a10565b505050509050018261ffff1681526020019350505050602060405180830381600087803b158015610a5b57600080fd5b505af1158015610a6f573d6000803e3d6000fd5b505050506040513d6020811015610a8557600080fd5b810190808051906020019092919050505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634aab17f9338a6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182600d60200280838360005b83811015610b5f578082015181840152602081019050610b44565b5050505090500192505050600060405180830381600087803b158015610b8457600080fd5b505af1158015610b98573d6000803e3d6000fd5b505050508a612711908060018154018082558091505090600182039060005260206000209060109182820401919006600202909192909190916101000a81548161ffff021916908361ffff16021790555050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166328ed9d80336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015610ca757600080fd5b505af1158015610cbb573d6000803e3d6000fd5b505050506121c0565b6127128d61ffff1614156110f65767018de76816d800003410151515610ce957600080fd5b67018de76816d80000340398506101a06040519081016040528061271261ffff168152602001600261ffff168152602001600961ffff168152602001600f61ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600f61ffff168152602001600561ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152509650600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f1406049338960016040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183600d60200280838360005b83811015610e5d578082015181840152602081019050610e42565b505050509050018261ffff1681526020019350505050602060405180830381600087803b158015610e8d57600080fd5b505af1158015610ea1573d6000803e3d6000fd5b505050506040513d6020811015610eb757600080fd5b810190808051906020019092919050505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634aab17f933896040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182600d60200280838360005b83811015610f91578082015181840152602081019050610f76565b5050505090500192505050600060405180830381600087803b158015610fb657600080fd5b505af1158015610fca573d6000803e3d6000fd5b505050508a612712908060018154018082558091505090600182039060005260206000209060109182820401919006600202909192909190916101000a81548161ffff021916908361ffff16021790555050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166328ed9d80336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156110d957600080fd5b505af11580156110ed573d6000803e3d6000fd5b505050506121bf565b6127138d61ffff1614156115285767031f5c4ed2768000341015151561111b57600080fd5b67031f5c4ed2768000340398506101a06040519081016040528061271361ffff168152602001600361ffff168152602001600961ffff168152602001601e61ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001601461ffff168152602001600a61ffff168152602001600561ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152509550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f1406049338860016040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183600d60200280838360005b8381101561128f578082015181840152602081019050611274565b505050509050018261ffff1681526020019350505050602060405180830381600087803b1580156112bf57600080fd5b505af11580156112d3573d6000803e3d6000fd5b505050506040513d60208110156112e957600080fd5b810190808051906020019092919050505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634aab17f933886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182600d60200280838360005b838110156113c35780820151818401526020810190506113a8565b5050505090500192505050600060405180830381600087803b1580156113e857600080fd5b505af11580156113fc573d6000803e3d6000fd5b505050508a612713908060018154018082558091505090600182039060005260206000209060109182820401919006600202909192909190916101000a81548161ffff021916908361ffff16021790555050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166328ed9d80336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561150b57600080fd5b505af115801561151f573d6000803e3d6000fd5b505050506121be565b6127148d61ffff16141561195a576707d02d84608b8000341015151561154d57600080fd5b6707d02d84608b8000340398506101a06040519081016040528061271461ffff168152602001600461ffff168152602001600961ffff168152602001604b61ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001601961ffff168152602001600f61ffff168152602001600a61ffff168152602001600561ffff168152602001600061ffff168152602001600061ffff168152509450600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f1406049338760016040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183600d60200280838360005b838110156116c15780820151818401526020810190506116a6565b505050509050018261ffff1681526020019350505050602060405180830381600087803b1580156116f157600080fd5b505af1158015611705573d6000803e3d6000fd5b505050506040513d602081101561171b57600080fd5b810190808051906020019092919050505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634aab17f933876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182600d60200280838360005b838110156117f55780820151818401526020810190506117da565b5050505090500192505050600060405180830381600087803b15801561181a57600080fd5b505af115801561182e573d6000803e3d6000fd5b505050508a612714908060018154018082558091505090600182039060005260206000209060109182820401919006600202909192909190916101000a81548161ffff021916908361ffff16021790555050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166328ed9d80336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561193d57600080fd5b505af1158015611951573d6000803e3d6000fd5b505050506121bd565b6127158d61ffff161415611d8c576717979cfe362a0000341015151561197f57600080fd5b6717979cfe362a0000340398506101a06040519081016040528061271561ffff168152602001600561ffff168152602001600961ffff16815260200160e161ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001601e61ffff168152602001601461ffff168152602001600f61ffff168152602001600a61ffff168152602001600061ffff168152602001600061ffff168152509350600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f1406049338660016040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183600d60200280838360005b83811015611af3578082015181840152602081019050611ad8565b505050509050018261ffff1681526020019350505050602060405180830381600087803b158015611b2357600080fd5b505af1158015611b37573d6000803e3d6000fd5b505050506040513d6020811015611b4d57600080fd5b810190808051906020019092919050505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634aab17f933866040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182600d60200280838360005b83811015611c27578082015181840152602081019050611c0c565b5050505090500192505050600060405180830381600087803b158015611c4c57600080fd5b505af1158015611c60573d6000803e3d6000fd5b505050508a612715908060018154018082558091505090600182039060005260206000209060109182820401919006600202909192909190916101000a81548161ffff021916908361ffff16021790555050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166328ed9d80336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015611d6f57600080fd5b505af1158015611d83573d6000803e3d6000fd5b505050506121bc565b6127168d61ffff1614156121bb576753444835ec5800003410151515611db157600080fd5b6753444835ec580000340398506101a06040519081016040528061271661ffff168152602001600661ffff168152602001600961ffff16815260200161031461ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001602361ffff168152602001601961ffff168152602001601461ffff168152602001600f61ffff168152602001600061ffff168152602001600061ffff168152509250600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f1406049338560016040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183600d60200280838360005b83811015611f26578082015181840152602081019050611f0b565b505050509050018261ffff1681526020019350505050602060405180830381600087803b158015611f5657600080fd5b505af1158015611f6a573d6000803e3d6000fd5b505050506040513d6020811015611f8057600080fd5b810190808051906020019092919050505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634aab17f933856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182600d60200280838360005b8381101561205a57808201518184015260208101905061203f565b5050505090500192505050600060405180830381600087803b15801561207f57600080fd5b505af1158015612093573d6000803e3d6000fd5b505050508a612716908060018154018082558091505090600182039060005260206000209060109182820401919006600202909192909190916101000a81548161ffff021916908361ffff16021790555050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166328ed9d80336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156121a257600080fd5b505af11580156121b6573d6000803e3d6000fd5b505050505b5b5b5b5b5b6121ca8d8d613a3f565b3373ffffffffffffffffffffffffffffffffffffffff167f1916d27b07f08435c37b17f9f23255ee9623457f8eb8752e32510255850b5dc38e604051808261ffff1661ffff16815260200191505060405180910390a26122338934613a7c90919063ffffffff16565b9150600073ffffffffffffffffffffffffffffffffffffffff168e73ffffffffffffffffffffffffffffffffffffffff161415801561229e57503373ffffffffffffffffffffffffffffffffffffffff168e73ffffffffffffffffffffffffffffffffffffffff1614155b156123b3576122ca60646122bc600585613a9590919063ffffffff16565b613ad090919063ffffffff16565b90508d73ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015612312573d6000803e3d6000fd5b507fe360cd1808f32f51cd18f90bf94f40accf77a3213b3adfa84384c8d7845f309e8e3383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a15b600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614158015612438575060006124366064612428605086613a9590919063ffffffff16565b613ad090919063ffffffff16565b115b1561259c57600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6124a06064612492605087613a9590919063ffffffff16565b613ad090919063ffffffff16565b9081150290604051600060405180830381858888f193505050501580156124cb573d6000803e3d6000fd5b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e7526bd6125316064612523605087613a9590919063ffffffff16565b613ad090919063ffffffff16565b6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b15801561258357600080fd5b505af1158015612597573d6000803e3d6000fd5b505050505b600081111561268357600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc61265261260b60646125fd600588613a9590919063ffffffff16565b613ad090919063ffffffff16565b612644612635606461262760508a613a9590919063ffffffff16565b613ad090919063ffffffff16565b87613a7c90919063ffffffff16565b613a7c90919063ffffffff16565b9081150290604051600060405180830381858888f1935050505015801561267d573d6000803e3d6000fd5b50612725565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6126f86126e960646126db605088613a9590919063ffffffff16565b613ad090919063ffffffff16565b85613a7c90919063ffffffff16565b9081150290604051600060405180830381858888f19350505050158015612723573d6000803e3d6000fd5b505b6000891115612776573373ffffffffffffffffffffffffffffffffffffffff166108fc8a9081150290604051600060405180830381858888f19350505050158015612774573d6000803e3d6000fd5b505b5050505050505050505050505050565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156127e257600080fd5b6000809054906101000a900460ff1615156127fc57600080fd5b60008060006101000a81548160ff021916908315150217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806128c15750600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156128cc57600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f1935050505015801561294b573d6000803e3d6000fd5b50565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561298b57600080fd5b6001600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900461ffff1661ffff16141515612a42576000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548161ffff021916908361ffff1602179055505b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900461ffff169050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612b1a57600080fd5b600560149054906101000a900461ffff1661ffff16600660008561ffff1661ffff16815260200190815260200160002060009054906101000a900461ffff1661ffff1611151515612b6a57600080fd5b600660008461ffff1661ffff16815260200190815260200160002060009054906101000a900461ffff169050600560149054906101000a900461ffff1661ffff1682820161ffff1611151515612bbf57600080fd5b818101600660008561ffff1661ffff16815260200190815260200160002060006101000a81548161ffff021916908361ffff160217905550505050565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612c5857600080fd5b6000809054906101000a900460ff16151515612c7357600080fd5b60016000806101000a81548160ff021916908315150217905550565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612ceb57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612d2757600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec660405160405180910390a380600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480612eb65750600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515612ec157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612efd57600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900460ff1681565b600080612f5e613aeb565b6000809054906101000a900460ff16151515612f7957600080fd5b6001600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900461ffff1661ffff1614151515612fda57600080fd5b60009250600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091506127178461ffff161415613541576000341015151561303d57600080fd5b6000340392506101a06040519081016040528061271761ffff168152602001600761ffff168152602001600961ffff168152602001600161ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152509050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f1406049338360016040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183600d60200280838360005b838110156131aa57808201518184015260208101905061318f565b505050509050018261ffff1681526020019350505050602060405180830381600087803b1580156131da57600080fd5b505af11580156131ee573d6000803e3d6000fd5b505050506040513d602081101561320457600080fd5b810190808051906020019092919050505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634aab17f933836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182600d60200280838360005b838110156132de5780820151818401526020810190506132c3565b5050505090500192505050600060405180830381600087803b15801561330357600080fd5b505af1158015613317573d6000803e3d6000fd5b5050505081612717908060018154018082558091505090600182039060005260206000209060109182820401919006600202909192909190916101000a81548161ffff021916908361ffff1602179055505060008311156133ba573373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f193505050501580156133b8573d6000803e3d6000fd5b505b6001600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548161ffff021916908361ffff160217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166328ed9d80336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156134d257600080fd5b505af11580156134e6573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167fee82114fb2a33ead719c44bab6c2e40e71cfd9898d84245be54d80a1048ce0ba85604051808261ffff1661ffff16815260200191505060405180910390a25b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806135f05750600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156135fb57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561363757600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6136cf613b0f565b6006600061271161ffff16815260200190815260200160002060009054906101000a900461ffff1681600060068110151561370657fe5b602002019061ffff16908161ffff16815250506006600061271261ffff16815260200190815260200160002060009054906101000a900461ffff1681600160068110151561375057fe5b602002019061ffff16908161ffff16815250506006600061271361ffff16815260200190815260200160002060009054906101000a900461ffff1681600260068110151561379a57fe5b602002019061ffff16908161ffff16815250506006600061271461ffff16815260200190815260200160002060009054906101000a900461ffff168160036006811015156137e457fe5b602002019061ffff16908161ffff16815250506006600061271561ffff16815260200190815260200160002060009054906101000a900461ffff1681600460068110151561382e57fe5b602002019061ffff16908161ffff16815250506006600061271661ffff16815260200190815260200160002060009054906101000a900461ffff1681600560068110151561387857fe5b602002019061ffff16908161ffff168152505090565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b60606000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508080548060200260200160405190810160405280929190818152602001828054801561399257602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116139595790505b5050505050915050919050565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156139fb57600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60018103600660008461ffff1661ffff16815260200190815260200160002060006101000a81548161ffff021916908361ffff1602179055505050565b6000828211151515613a8a57fe5b818303905092915050565b6000806000841415613aaa5760009150613ac9565b8284029050828482811515613abb57fe5b04141515613ac557fe5b8091505b5092915050565b6000808284811515613ade57fe5b0490508091505092915050565b6101a060405190810160405280600d90602082028038833980820191505090505090565b60c0604051908101604052806006906020820280388339808201915050905050905600a165627a7a7230582063673ffbf63d90e59fd2cdbb147631752456ab1694cc66c13b6af1b6a90a28e400290000000000000000000000005ad89bb4f55a33320e076068636ed7314cd2922c",
  "constructorArguments": "0000000000000000000000005ad89bb4f55a33320e076068636ed7314cd2922c"
}