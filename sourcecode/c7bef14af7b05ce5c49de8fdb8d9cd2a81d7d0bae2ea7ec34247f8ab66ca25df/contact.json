{
  "address": "0xfa9eaf022f8d501a3d4bd4c5f8cb034cd333c2d5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MidnightRun",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-26\n*/\n\npragma solidity ^0.4.24;\n\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    _owner = msg.sender;\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\n\n\ncontract MidnightRun is Ownable {\n  using SafeMath\n  for uint;\n\n  modifier isHuman() {\n    uint32 size;\n    address investor = msg.sender;\n    assembly {\n      size: = extcodesize(investor)\n    }\n    if (size > 0) {\n      revert(\"Inhuman\");\n    }\n    _;\n  }\n\n  event DailyDividendPayout(address indexed _address, uint value, uint periodCount, uint percent, uint time);\n  event ReferralPayout(address indexed _addressFrom, address indexed _addressTo, uint value, uint percent, uint time);\n  event MidnightRunPayout(address indexed _address, uint value, uint totalValue, uint userValue, uint time);\n\n  uint public period = 24 hours;\n  uint public startTime = 1538002800; //  Tue, 26 Sep 2018 23:00:00 +0000 UTC\n\n  uint public dailyDividendPercent = 400; //4%\n  uint public referredDividendPercent = 430; //4.3%\n\n  uint public referrerPercent = 250; //2.5%\n  uint public minBetLevel = 0.01 ether;\n\n  uint public referrerAndOwnerPercent = 2000; //20%\n  uint public currentStakeID = 1;\n\n  struct DepositInfo {\n    uint value;\n    uint firstBetTime;\n    uint lastBetTime;\n    uint lastPaymentTime;\n    uint nextPayAfterTime;\n    bool isExist;\n    uint id;\n    uint referrerID;\n  }\n\n  mapping(address => DepositInfo) public investorToDepostIndex;\n  mapping(uint => address) public idToAddressIndex;\n\n  // Jackpot\n  uint public midnightPrizePercent = 1000; //10%\n  uint public midnightPrize = 0;\n  uint public nextPrizeTime = startTime + period;\n\n  uint public currentPrizeStakeID = 0;\n\n  struct MidnightRunDeposit {\n    uint value;\n    address user;\n  }\n  mapping(uint => MidnightRunDeposit) public stakeIDToDepositIndex;\n\n /**\n  * Constructor no need for unnecessary work in here.\n  */\n  constructor() public {\n  }\n\n  /**\n   * Fallback and entrypoint for deposits.\n   */\n  function() public payable isHuman {\n    if (msg.value == 0) {\n      collectPayoutForAddress(msg.sender);\n    } else {\n      uint refId = 1;\n      address referrer = bytesToAddress(msg.data);\n      if (investorToDepostIndex[referrer].isExist) {\n        refId = investorToDepostIndex[referrer].id;\n      }\n      deposit(refId);\n    }\n  }\n\n/**\n * Reads the given bytes into an addtress\n */\n  function bytesToAddress(bytes bys) private pure returns(address addr) {\n    assembly {\n      addr: = mload(add(bys, 20))\n    }\n  }\n\n/**\n * Put some funds into the contract for the prize\n */\n  function addToMidnightPrize() public payable onlyOwner {\n    midnightPrize += msg.value;\n  }\n\n/**\n * Get the time of the next payout - calculated\n */\n  function getNextPayoutTime() public view returns(uint) {\n    if (now<startTime) return startTime + period;\n    return startTime + ((now.sub(startTime)).div(period)).mul(period) + period;\n  }\n\n/**\n * Make a deposit into the contract\n */\n  function deposit(uint _referrerID) public payable isHuman {\n    require(_referrerID <= currentStakeID, \"Who referred you?\");\n    require(msg.value >= minBetLevel, \"Doesn't meet minimum stake.\");\n\n    // when is next midnight ?\n    uint nextPayAfterTime = getNextPayoutTime();\n\n    if (investorToDepostIndex[msg.sender].isExist) {\n      if (investorToDepostIndex[msg.sender].nextPayAfterTime < now) {\n        collectPayoutForAddress(msg.sender);\n      }\n      investorToDepostIndex[msg.sender].value += msg.value;\n      investorToDepostIndex[msg.sender].lastBetTime = now;\n    } else {\n      DepositInfo memory newDeposit;\n\n      newDeposit = DepositInfo({\n        value: msg.value,\n        firstBetTime: now,\n        lastBetTime: now,\n        lastPaymentTime: 0,\n        nextPayAfterTime: nextPayAfterTime,\n        isExist: true,\n        id: currentStakeID,\n        referrerID: _referrerID\n      });\n\n      investorToDepostIndex[msg.sender] = newDeposit;\n      idToAddressIndex[currentStakeID] = msg.sender;\n\n      currentStakeID++;\n    }\n\n    if (now > nextPrizeTime) {\n      doMidnightRun();\n    }\n\n    currentPrizeStakeID++;\n\n    MidnightRunDeposit memory midnitrunDeposit;\n    midnitrunDeposit.user = msg.sender;\n    midnitrunDeposit.value = msg.value;\n\n    stakeIDToDepositIndex[currentPrizeStakeID] = midnitrunDeposit;\n\n    // contribute to the Midnight Run Prize\n    midnightPrize += msg.value.mul(midnightPrizePercent).div(10000);\n    // Is there a referrer to be paid?\n    if (investorToDepostIndex[msg.sender].referrerID != 0) {\n\n      uint refToPay = msg.value.mul(referrerPercent).div(10000);\n      // Referral Fee\n      idToAddressIndex[investorToDepostIndex[msg.sender].referrerID].transfer(refToPay);\n      // Team and advertising fee\n      owner().transfer(msg.value.mul(referrerAndOwnerPercent - referrerPercent).div(10000));\n      emit ReferralPayout(msg.sender, idToAddressIndex[investorToDepostIndex[msg.sender].referrerID], refToPay, referrerPercent, now);\n    } else {\n      // Team and advertising fee\n      owner().transfer(msg.value.mul(referrerAndOwnerPercent).div(10000));\n    }\n  }\n\n\n\n/**\n * Collect payout for the msg.sender\n */\n  function collectPayout() public isHuman {\n    collectPayoutForAddress(msg.sender);\n  }\n\n/**\n * Collect payout for the given address\n */\n  function getRewardForAddress(address _address) public onlyOwner {\n    collectPayoutForAddress(_address);\n  }\n\n/**\n *\n */\n  function collectPayoutForAddress(address _address) internal {\n    require(investorToDepostIndex[_address].isExist == true, \"Who are you?\");\n    require(investorToDepostIndex[_address].nextPayAfterTime < now, \"Not yet.\");\n\n    uint periodCount = now.sub(investorToDepostIndex[_address].nextPayAfterTime).div(period).add(1);\n    uint percent = dailyDividendPercent;\n\n    if (investorToDepostIndex[_address].referrerID > 0) {\n      percent = referredDividendPercent;\n    }\n\n    uint toPay = periodCount.mul(investorToDepostIndex[_address].value).div(10000).mul(percent);\n\n    investorToDepostIndex[_address].lastPaymentTime = now;\n    investorToDepostIndex[_address].nextPayAfterTime += periodCount.mul(period);\n\n    // protect contract - this could result in some bad luck - but not much\n    if (toPay.add(midnightPrize) < address(this).balance.sub(msg.value))\n    {\n      _address.transfer(toPay);\n      emit DailyDividendPayout(_address, toPay, periodCount, percent, now);\n    }\n  }\n\n/**\n * Perform the Midnight Run\n */\n  function doMidnightRun() public isHuman {\n    require(now>nextPrizeTime , \"Not yet\");\n\n    // set the next prize time to the next payout time (MidnightRun)\n    nextPrizeTime = getNextPayoutTime();\n\n    if (currentPrizeStakeID > 5) {\n      uint toPay = midnightPrize;\n      midnightPrize = 0;\n\n      if (toPay > address(this).balance){\n        toPay = address(this).balance;\n      }\n\n      uint totalValue = stakeIDToDepositIndex[currentPrizeStakeID].value + stakeIDToDepositIndex[currentPrizeStakeID - 1].value + stakeIDToDepositIndex[currentPrizeStakeID - 2].value + stakeIDToDepositIndex[currentPrizeStakeID - 3].value + stakeIDToDepositIndex[currentPrizeStakeID - 4].value;\n\n      stakeIDToDepositIndex[currentPrizeStakeID].user.transfer(toPay.mul(stakeIDToDepositIndex[currentPrizeStakeID].value).div(totalValue));\n      emit MidnightRunPayout(stakeIDToDepositIndex[currentPrizeStakeID].user, toPay.mul(stakeIDToDepositIndex[currentPrizeStakeID].value).div(totalValue), totalValue, stakeIDToDepositIndex[currentPrizeStakeID].value, now);\n\n      stakeIDToDepositIndex[currentPrizeStakeID - 1].user.transfer(toPay.mul(stakeIDToDepositIndex[currentPrizeStakeID - 1].value).div(totalValue));\n      emit MidnightRunPayout(stakeIDToDepositIndex[currentPrizeStakeID - 1].user, toPay.mul(stakeIDToDepositIndex[currentPrizeStakeID - 1].value).div(totalValue), totalValue, stakeIDToDepositIndex[currentPrizeStakeID - 1].value, now);\n\n      stakeIDToDepositIndex[currentPrizeStakeID - 2].user.transfer(toPay.mul(stakeIDToDepositIndex[currentPrizeStakeID - 2].value).div(totalValue));\n      emit MidnightRunPayout(stakeIDToDepositIndex[currentPrizeStakeID - 2].user, toPay.mul(stakeIDToDepositIndex[currentPrizeStakeID - 2].value).div(totalValue), totalValue, stakeIDToDepositIndex[currentPrizeStakeID - 2].value, now);\n\n      stakeIDToDepositIndex[currentPrizeStakeID - 3].user.transfer(toPay.mul(stakeIDToDepositIndex[currentPrizeStakeID - 3].value).div(totalValue));\n      emit MidnightRunPayout(stakeIDToDepositIndex[currentPrizeStakeID - 3].user, toPay.mul(stakeIDToDepositIndex[currentPrizeStakeID - 3].value).div(totalValue), totalValue, stakeIDToDepositIndex[currentPrizeStakeID - 3].value, now);\n\n      stakeIDToDepositIndex[currentPrizeStakeID - 4].user.transfer(toPay.mul(stakeIDToDepositIndex[currentPrizeStakeID - 4].value).div(totalValue));\n      emit MidnightRunPayout(stakeIDToDepositIndex[currentPrizeStakeID - 4].user, toPay.mul(stakeIDToDepositIndex[currentPrizeStakeID - 4].value).div(totalValue), totalValue, stakeIDToDepositIndex[currentPrizeStakeID - 4].value, now);\n    }\n  }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}",
  "bytecode": "6080604052620151806001908155635bac0f706002556101906003556101ae60045560fa600555662386f26fc100006006556107d06007556008556103e8600b556000600c819055635bad60f0600d55600e5534801561005e57600080fd5b5060008054600160a060020a0319163317905561162b806100806000396000f30060806040526004361061013d5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630dba240081146102385780633a6dc128146102425780633d32a6cf1461027b57806349c53b2d146102a2578063636d98b1146102b757806371d007cd146102cc57806378e97925146103005780638da5cb5b146103155780638f32d59b1461032a57806392285a1a146103535780639dad2d6214610368578063aac7df661461037d578063aad4482514610392578063b6b55f25146103b3578063beae2aaf146103be578063c1071657146103d3578063c629cdf414610437578063df1836ca1461044c578063eeedb8e214610461578063ef78d4fd14610476578063f2fde38b1461048b578063f3ab2c6d146104ac578063f5486860146104c1578063fafbb9a3146104d6575b60008033803b9063ffffffff8216831015610190576040805160e560020a62461bcd02815260206004820152600760248201526000805160206115c0833981519152604482015290519081900360640190fd5b3415156101a5576101a0336104eb565b610232565b600193506101e36000368080601f016020809104026020016040519081016040528093929190818152602001838380828437506107b3945050505050565b600160a060020a03811660009081526009602052604090206005015490935060ff161561022957600160a060020a03831660009081526009602052604090206006015493505b610232846107ba565b50505050005b610240610ca0565b005b34801561024e57600080fd5b5061025a600435610cbd565b60408051928352600160a060020a0390911660208301528051918290030190f35b34801561028757600080fd5b50610290610cdf565b60408051918252519081900360200190f35b3480156102ae57600080fd5b50610240610ce5565b3480156102c357600080fd5b506102906112b6565b3480156102d857600080fd5b506102e46004356112bc565b60408051600160a060020a039092168252519081900360200190f35b34801561030c57600080fd5b506102906112d7565b34801561032157600080fd5b506102e46112dd565b34801561033657600080fd5b5061033f6112ed565b604080519115158252519081900360200190f35b34801561035f57600080fd5b506102906112fe565b34801561037457600080fd5b50610290611304565b34801561038957600080fd5b5061029061130a565b34801561039e57600080fd5b50610240600160a060020a0360043516611310565b6102406004356107ba565b3480156103ca57600080fd5b5061029061132f565b3480156103df57600080fd5b506103f4600160a060020a0360043516611335565b6040805198895260208901979097528787019590955260608701939093526080860191909152151560a085015260c084015260e083015251908190036101000190f35b34801561044357600080fd5b5061024061137c565b34801561045857600080fd5b506102906113da565b34801561046d57600080fd5b506102906113e0565b34801561048257600080fd5b506102906113e6565b34801561049757600080fd5b50610240600160a060020a03600435166113ec565b3480156104b857600080fd5b50610290611408565b3480156104cd57600080fd5b5061029061140e565b3480156104e257600080fd5b50610290611414565b600160a060020a0381166000908152600960205260408120600501548190819060ff161515600114610567576040805160e560020a62461bcd02815260206004820152600c60248201527f57686f2061726520796f753f0000000000000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a03841660009081526009602052604090206004015442116105d9576040805160e560020a62461bcd02815260206004820152600860248201527f4e6f74207965742e000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018054600160a060020a03861660009081526009602052604090206004015461062b929161061f9161061390429063ffffffff61145b16565b9063ffffffff61147916565b9063ffffffff61149c16565b600354600160a060020a038616600090815260096020526040812060070154929550909350101561065c5760045491505b600160a060020a0384166000908152600960205260409020546106a0908390610694906127109061061390889063ffffffff6114b516565b9063ffffffff6114b516565b600160a060020a0385166000908152600960205260409020426003909101556001549091506106d690849063ffffffff6114b516565b600160a060020a03851660009081526009602052604090206004018054909101905561070930313463ffffffff61145b16565b600c5461071d90839063ffffffff61149c16565b10156107ad57604051600160a060020a0385169082156108fc029083906000818181858888f19350505050158015610759573d6000803e3d6000fd5b5060408051828152602081018590528082018490524260608201529051600160a060020a038616917f4175768318d05d175ba194bba03717d72a0f41138f491d37f4b8808433b5ec84919081900360800190a25b50505050565b6014015190565b60006107c4611560565b6107cc6115a8565b600033803b9063ffffffff821683101561081e576040805160e560020a62461bcd02815260206004820152600760248201526000805160206115c0833981519152604482015290519081900360640190fd5b600854871115610878576040805160e560020a62461bcd02815260206004820152601160248201527f57686f20726566657272656420796f753f000000000000000000000000000000604482015290519081900360640190fd5b6006543410156108d2576040805160e560020a62461bcd02815260206004820152601b60248201527f446f65736e2774206d656574206d696e696d756d207374616b652e0000000000604482015290519081900360640190fd5b6108da611414565b3360009081526009602052604090206005015490965060ff161561093c573360009081526009602052604090206004015442111561091b5761091b336104eb565b33600090815260096020526040902080543401815542600290910155610a5b565b61010060405190810160405280348152602001428152602001428152602001600081526020018781526020016001151581526020016008548152602001888152509450846009600033600160a060020a0316600160a060020a03168152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff02191690831515021790555060c0820151816006015560e0820151816007015590505033600a6000600854815260200190815260200160002060006101000a815481600160a060020a030219169083600160a060020a031602179055506008600081548092919060010191905055505b600d54421115610a6d57610a6d610ce5565b600e8054600190810191829055336020878101918252348089526000948552600f90915260409093208751815590519101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909216919091179055600b54610add916127109161061391906114b5565b600c805490910190553360009081526009602052604090206007015415610c3e57610b19612710610613600554346114b590919063ffffffff16565b336000908152600960209081526040808320600701548352600a909152808220549051929550600160a060020a03169185156108fc0291869190818181858888f19350505050158015610b70573d6000803e3d6000fd5b50610b796112dd565b600160a060020a03166108fc610ba461271061061360055460075403346114b590919063ffffffff16565b6040518115909202916000818181858888f19350505050158015610bcc573d6000803e3d6000fd5b50336000818152600960209081526040808320600701548352600a8252918290205460055483518881529283015242828401529151600160a060020a039290921692917f45c0cf9f69d353cf3187595d052580cd76255a6519099fe88d76a57faca583ca9181900360600190a3610c97565b610c466112dd565b600160a060020a03166108fc610c6d612710610613600754346114b590919063ffffffff16565b6040518115909202916000818181858888f19350505050158015610c95573d6000803e3d6000fd5b505b50505050505050565b610ca86112ed565b1515610cb357600080fd5b600c805434019055565b600f6020526000908152604090208054600190910154600160a060020a031682565b60065481565b60008033803b9063ffffffff8216831015610d38576040805160e560020a62461bcd02815260206004820152600760248201526000805160206115c0833981519152604482015290519081900360640190fd5b600d544211610d91576040805160e560020a62461bcd02815260206004820152600760248201527f4e6f742079657400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b610d99611414565b600d55600e54600510156107ad57600c8054600090915593503031841115610dc057303193505b600e5460031981016000908152600f6020526040808220546002198401835281832054600119850184528284205460001986018552838520549585529290932080546001909101549481019092019092019091019450600160a060020a03909116906108fc90610e379086906106139089906114b5565b6040518115909202916000818181858888f19350505050158015610e5f573d6000803e3d6000fd5b50600e546000908152600f6020526040902060018101549054600160a060020a03909116906000805160206115e083398151915290610eab90869061061390899063ffffffff6114b516565b600e546000908152600f602090815260409182902054825193845290830188905282820152426060830152519081900360800190a2600e54600019016000908152600f6020526040902060018101549054600160a060020a03909116906108fc90610f2390869061061390899063ffffffff6114b516565b6040518115909202916000818181858888f19350505050158015610f4b573d6000803e3d6000fd5b50600e54600019016000908152600f6020526040902060018101549054600160a060020a03909116906000805160206115e083398151915290610f9b90869061061390899063ffffffff6114b516565b600e54600019016000908152600f602090815260409182902054825193845290830188905282820152426060830152519081900360800190a2600e54600119016000908152600f6020526040902060018101549054600160a060020a03909116906108fc9061101790869061061390899063ffffffff6114b516565b6040518115909202916000818181858888f1935050505015801561103f573d6000803e3d6000fd5b50600e54600119016000908152600f6020526040902060018101549054600160a060020a03909116906000805160206115e08339815191529061108f90869061061390899063ffffffff6114b516565b600e54600119016000908152600f602090815260409182902054825193845290830188905282820152426060830152519081900360800190a2600e54600219016000908152600f6020526040902060018101549054600160a060020a03909116906108fc9061110b90869061061390899063ffffffff6114b516565b6040518115909202916000818181858888f19350505050158015611133573d6000803e3d6000fd5b50600e54600219016000908152600f6020526040902060018101549054600160a060020a03909116906000805160206115e08339815191529061118390869061061390899063ffffffff6114b516565b600e54600219016000908152600f602090815260409182902054825193845290830188905282820152426060830152519081900360800190a2600e54600319016000908152600f6020526040902060018101549054600160a060020a03909116906108fc906111ff90869061061390899063ffffffff6114b516565b6040518115909202916000818181858888f19350505050158015611227573d6000803e3d6000fd5b50600e54600319016000908152600f6020526040902060018101549054600160a060020a03909116906000805160206115e08339815191529061127790869061061390899063ffffffff6114b516565b600e54600319016000908152600f602090815260409182902054825193845290830188905282820152426060830152519081900360800190a250505050565b60055481565b600a60205260009081526040902054600160a060020a031681565b60025481565b600054600160a060020a03165b90565b600054600160a060020a0316331490565b600e5481565b60045481565b600b5481565b6113186112ed565b151561132357600080fd5b61132c816104eb565b50565b60035481565b600960205260009081526040902080546001820154600283015460038401546004850154600586015460068701546007909701549596949593949293919260ff9091169188565b33803b90600063ffffffff831611156113cd576040805160e560020a62461bcd02815260206004820152600760248201526000805160206115c0833981519152604482015290519081900360640190fd5b6113d6336104eb565b5050565b60075481565b60085481565b60015481565b6113f46112ed565b15156113ff57600080fd5b61132c816114e3565b600c5481565b600d5481565b600060025442101561142d5750600154600254016112ea565b6001546114516001546106946001546106136002544261145b90919063ffffffff16565b6002540101905090565b6000808383111561146b57600080fd5b5050808203805b5092915050565b60008080831161148857600080fd5b828481151561149357fe5b04949350505050565b6000828201838110156114ae57600080fd5b9392505050565b6000808315156114c85760009150611472565b508282028284828115156114d857fe5b04146114ae57600080fd5b600160a060020a03811615156114f857600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b61010060405190810160405280600081526020016000815260200160008152602001600081526020016000815260200160001515815260200160008152602001600081525090565b6040805180820190915260008082526020820152905600496e68756d616e00000000000000000000000000000000000000000000000000b403199f0cf676b3f926b6994d32067692e35fc0304ea603cd914cc4462a0765a165627a7a72305820fcd529e05b3947fe55f5cacc5cbcf71bf0c8edb7b9462e17474c5a6b9bb1bbc80029"
}