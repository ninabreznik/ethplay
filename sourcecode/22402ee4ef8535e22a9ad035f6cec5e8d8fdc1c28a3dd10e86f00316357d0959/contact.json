{
  "address": "0xbbca7197c4bf733d8fd38751733864b70851cb87",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CIBUSToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-13\n*/\n\npragma solidity ^0.4.19;\n\n/*\n * Abstract Token Smart Contract.  Copyright © 2017 by CIBUS WORLD.\n * Author: [email protected]\n */\n\n \n /*\n * Safe Math Smart Contract.  Copyright © 2017-2018 by CIBUS WORLD.\n * Author: [email protected]\n * https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n */\n\ncontract SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\n\n/**\n * ERC-20 standard token interface, as defined\n * <a href=\"http://github.com/ethereum/EIPs/issues/20\">here</a>.\n */\ncontract Token {\n  \n  function totalSupply() constant returns (uint256 supply);\n  function balanceOf(address _owner) constant returns (uint256 balance);\n  function transfer(address _to, uint256 _value) returns (bool success);\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n  function approve(address _spender, uint256 _value) returns (bool success);\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\n\n/**\n * Abstract Token Smart Contract that could be used as a base contract for\n * ERC-20 token contracts.\n */\ncontract AbstractToken is Token, SafeMath {\n  /**\n   * Create new Abstract Token contract.\n   */\n  function AbstractToken () {\n    // Do nothing\n  }\n  \n  /**\n   * Get number of tokens currently belonging to given owner.\n   *\n   * @param _owner address to get number of tokens currently belonging to the\n   *        owner of\n   * @return number of tokens currently belonging to the owner of given address\n   */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return accounts [_owner];\n  }\n\n  /**\n   * Transfer given number of tokens from message sender to given recipient.\n   *\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer to the owner of given address\n   * @return true if tokens were transferred successfully, false otherwise\n   * accounts [_to] + _value > accounts [_to] for overflow check\n   * which is already in safeMath\n   */\n  function transfer(address _to, uint256 _value) returns (bool success) {\n    require(_to != address(0));\n    if (accounts [msg.sender] < _value) return false;\n    if (_value > 0 && msg.sender != _to) {\n      accounts [msg.sender] = safeSub (accounts [msg.sender], _value);\n      accounts [_to] = safeAdd (accounts [_to], _value);\n    }\n    Transfer (msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n   * Transfer given number of tokens from given owner to given recipient.\n   *\n   * @param _from address to transfer tokens from the owner of\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer from given owner to given\n   *        recipient\n   * @return true if tokens were transferred successfully, false otherwise\n   * accounts [_to] + _value > accounts [_to] for overflow check\n   * which is already in safeMath\n   */\n  function transferFrom(address _from, address _to, uint256 _value)\n  returns (bool success) {\n    require(_to != address(0));\n    if (allowances [_from][msg.sender] < _value) return false;\n    if (accounts [_from] < _value) return false; \n\n    if (_value > 0 && _from != _to) {\n\t  allowances [_from][msg.sender] = safeSub (allowances [_from][msg.sender], _value);\n      accounts [_from] = safeSub (accounts [_from], _value);\n      accounts [_to] = safeAdd (accounts [_to], _value);\n    }\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * Allow given spender to transfer given number of tokens from message sender.\n   * @param _spender address to allow the owner of to transfer tokens from message sender\n   * @param _value number of tokens to allow to transfer\n   * @return true if token transfer was successfully approved, false otherwise\n   */\n   function approve (address _spender, uint256 _value) returns (bool success) {\n    allowances [msg.sender][_spender] = _value;\n    Approval (msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * Tell how many tokens given spender is currently allowed to transfer from\n   * given owner.\n   *\n   * @param _owner address to get number of tokens allowed to be transferred\n   *        from the owner of\n   * @param _spender address to get number of tokens allowed to be transferred\n   *        by the owner of\n   * @return number of tokens given spender is currently allowed to transfer\n   *         from given owner\n   */\n  function allowance(address _owner, address _spender) constant\n  returns (uint256 remaining) {\n    return allowances [_owner][_spender];\n  }\n\n  /**\n   * Mapping from addresses of token holders to the numbers of tokens belonging\n   * to these token holders.\n   */\n  mapping (address => uint256) accounts;\n\n  /**\n   * Mapping from addresses of token holders to the mapping of addresses of\n   * spenders to the allowances set by these token holders to these spenders.\n   */\n  mapping (address => mapping (address => uint256)) private allowances;\n}\n\n\n/**\n * CIBUS token smart contract.\n */\ncontract CIBUSToken is AbstractToken {\n  /**\n   * Maximum allowed number of tokens in circulation.\n   *Total Supply for Pre ICO = (10% of 100000000 = 10000000)  and  ICO = (30% of 100000000 = 30000000) \n   * 10^^10 is done for decimal places, this is standard practice as all ethers are actually wei in EVM\n   */\n   \n   \n  uint256 constant MAX_TOKEN_COUNT = 100000000 * (10**10);\n   \n  /**\n   * Address of the owner of this smart contract.\n   */\n  address private owner;\n\n  /**\n   * Current number of tokens in circulation.\n   */\n  uint256 tokenCount = 0;\n  \n \n  /**\n   * True if tokens transfers are currently frozen, false otherwise.\n   */\n  bool frozen = false;\n  \n  /**\n   * Counter of total funds collected, in wei\n  */\n  uint public totalCollected = 0;\n\n  /**\n   * Create new CIBUS token smart contract and make msg.sender the\n   * owner of this smart contract.\n   */\n  function CIBUSToken () {\n    owner = msg.sender;\n  }\n\n  /**\n   * Get total number of tokens in circulation.\n   *\n   * @return total number of tokens in circulation\n   */\n  function totalSupply() constant returns (uint256 supply) {\n    return tokenCount;\n  }\n\n  string constant public name = \"CIBUS Token\";\n  string constant public symbol = \"CBT\";\n  uint8 constant public decimals = 10;\n  \n  /**\n   * Transfer given number of tokens from message sender to given recipient.\n   *\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer to the owner of given address\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transfer(address _to, uint256 _value) returns (bool success) {\n    if (frozen) return false;\n    else return AbstractToken.transfer (_to, _value);\n  }\n\n  /**\n   * Transfer given number of tokens from given owner to given recipient.\n   *\n   * @param _from address to transfer tokens from the owner of\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer from given owner to given\n   *        recipient\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transferFrom(address _from, address _to, uint256 _value)\n    returns (bool success) {\n    if (frozen) return false;\n    else return AbstractToken.transferFrom (_from, _to, _value);\n  }\n\n   /**\n   * Change how many tokens given spender is allowed to transfer from message\n   * spender.  In order to prevent double spending of allowance,\n   * To change the approve amount you first have to reduce the addresses`\n   * allowance to zero by calling `approve(_spender, 0)` if it is not\n   * already 0 to mitigate the race condition described here:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender address to allow the owner of to transfer tokens from\n   *        message sender\n   * @param _value number of tokens to allow to transfer\n   * @return true if token transfer was successfully approved, false otherwise\n   */\n  function approve (address _spender, uint256 _value)\n    returns (bool success) {\n\trequire(allowance (msg.sender, _spender) == 0 || _value == 0);\n    return AbstractToken.approve (_spender, _value);\n  }\n\n  /**\n   * Create _value new tokens and give new created tokens to msg.sender.\n   * May only be called by smart contract owner.\n   *\n   * @param _value number of tokens to create\n   * @param _collected total amounts of fund collected for this issuance, in wei\n   * @return true if tokens were created successfully, false otherwise\n   */\n  function createTokens(uint256 _value, uint _collected)\n    returns (bool success) {\n    require (msg.sender == owner);\n\n    if (_value > 0) {\n      if (_value > safeSub (MAX_TOKEN_COUNT, tokenCount)) return false;\n\t  \n      accounts [msg.sender] = safeAdd (accounts [msg.sender], _value);\n      tokenCount = safeAdd (tokenCount, _value);\n      totalCollected = safeAdd(totalCollected, _collected);\n\t  \n\t  // adding transfer event and _from address as null address\n\t  Transfer(0x0, msg.sender, _value);\n\t  \n\t  return true;\n    }\n\t\n\t  return false;\n    \n  }\n  \n  \n  /**\n   * For future use only whne we will need more tokens for our main application\n   * Create mintedAmount new tokens and give new created tokens to target.\n   * May only be called by smart contract owner.\n   * @param mintedAmount number of tokens to create\n   * @return true if tokens were created successfully, false otherwise\n   */\n  \n  function mintToken(address target, uint256 mintedAmount) \n  returns (bool success) {\n    require (msg.sender == owner);\n      if (mintedAmount > 0) {\n\t  \n      accounts [target] = safeAdd (accounts [target], mintedAmount);\n      tokenCount = safeAdd (tokenCount, mintedAmount);\n\t  \n\t  // adding transfer event and _from address as null address\n\t  Transfer(0x0, target, mintedAmount);\n\t  \n\t   return true;\n    }\n\t  return false;\n   \n    }\n\n  /**\n   * Set new owner for the smart contract.\n   * May only be called by smart contract owner.\n   *\n   * @param _newOwner address of new owner of the smart contract\n   */\n  function setOwner(address _newOwner) {\n    require (msg.sender == owner);\n\n    owner = _newOwner;\n  }\n\n  /**\n   * Freeze token transfers.\n   * May only be called by smart contract owner.\n   */\n  function freezeTransfers () {\n    require (msg.sender == owner);\n\n    if (!frozen) {\n      frozen = true;\n      Freeze ();\n    }\n  }\n\n  /**\n   * Unfreeze token transfers.\n   * May only be called by smart contract owner.\n   */\n  function unfreezeTransfers () {\n    require (msg.sender == owner);\n\n    if (frozen) {\n      frozen = false;\n      Unfreeze ();\n    }\n  }\n  \n  /*A user is able to unintentionally send tokens to a contract \n  * and if the contract is not prepared to refund them they will get stuck in the contract. \n  * The same issue used to happen for Ether too but new Solidity versions added the payable modifier to\n  * prevent unintended Ether transfers. However, there’s no such mechanism for token transfers.\n  * so the below function is created\n  */\n  \n  function refundTokens(address _token, address _refund, uint256 _value) {\n    require (msg.sender == owner);\n    require(_token != address(this));\n    AbstractToken token = AbstractToken(_token);\n    token.transfer(_refund, _value);\n    RefundTokens(_token, _refund, _value);\n  }\n\n  /**\n   * Logged when token transfers were frozen.\n   */\n  event Freeze ();\n\n  /**\n   * Logged when token transfers were unfrozen.\n   */\n  event Unfreeze ();\n  \n  /**\n   * when accidentally send other tokens are refunded\n   */\n  \n  event RefundTokens(address _token, address _refund, uint256 _value);\n}",
  "bytecode": "606060405260006003556000600460006101000a81548160ff0219169083151502179055506000600555341561003457600080fd5b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611674806100846000396000f3006060604052600436106100e6576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301502460146100eb57806306fdde0314610100578063095ea7b31461018e57806313af4035146101e857806318160ddd1461022157806323b872dd1461024a578063313ce567146102c357806331c420d4146102f25780633c6ee3921461030757806370a082311461034b57806379c650681461039857806389519c50146103f257806395d89b4114610453578063a9059cbb146104e1578063dd62ed3e1461053b578063e29eb836146105a7575b600080fd5b34156100f657600080fd5b6100fe6105d0565b005b341561010b57600080fd5b61011361068c565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610153578082015181840152602081019050610138565b50505050905090810190601f1680156101805780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561019957600080fd5b6101ce600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506106c5565b604051808215151515815260200191505060405180910390f35b34156101f357600080fd5b61021f600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506106fb565b005b341561022c57600080fd5b61023461079b565b6040518082815260200191505060405180910390f35b341561025557600080fd5b6102a9600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506107a5565b604051808215151515815260200191505060405180910390f35b34156102ce57600080fd5b6102d66107da565b604051808260ff1660ff16815260200191505060405180910390f35b34156102fd57600080fd5b6103056107df565b005b341561031257600080fd5b610331600480803590602001909190803590602001909190505061089a565b604051808215151515815260200191505060405180910390f35b341561035657600080fd5b610382600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610a37565b6040518082815260200191505060405180910390f35b34156103a357600080fd5b6103d8600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a7f565b604051808215151515815260200191505060405180910390f35b34156103fd57600080fd5b610451600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610be6565b005b341561045e57600080fd5b610466610dee565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104a657808201518184015260208101905061048b565b50505050905090810190601f1680156104d35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104ec57600080fd5b610521600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610e27565b604051808215151515815260200191505060405180910390f35b341561054657600080fd5b610591600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e5a565b6040518082815260200191505060405180910390f35b34156105b257600080fd5b6105ba610ee1565b6040518082815260200191505060405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561062c57600080fd5b600460009054906101000a900460ff16151561068a576001600460006101000a81548160ff0219169083151502179055507f615acbaede366d76a8b8cb2a9ada6a71495f0786513d71aa97aaf0c3910b78de60405160405180910390a15b565b6040805190810160405280600b81526020017f434942555320546f6b656e00000000000000000000000000000000000000000081525081565b6000806106d23385610e5a565b14806106de5750600082145b15156106e957600080fd5b6106f38383610ee7565b905092915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561075757600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600354905090565b6000600460009054906101000a900460ff16156107c557600090506107d3565b6107d0848484610fd9565b90505b9392505050565b600a81565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561083b57600080fd5b600460009054906101000a900460ff1615610898576000600460006101000a81548160ff0219169083151502179055507f2f05ba71d0df11bf5fa562a6569d70c4f80da84284badbe015ce1456063d0ded60405160405180910390a15b565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108f857600080fd5b6000831115610a2c57610915670de0b6b3a76400006003546113bf565b8311156109255760009050610a31565b61096d6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846113d8565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506109bb600354846113d8565b6003819055506109cd600554836113d8565b6005819055503373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019050610a31565b600090505b92915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610add57600080fd5b6000821115610bdb57610b2e6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836113d8565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b7c600354836113d8565b6003819055508273ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050610be0565b600090505b92915050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c4457600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515610c7f57600080fd5b8390508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515610d2d57600080fd5b6102c65a03f11515610d3e57600080fd5b50505060405180519050507ffab5e7a27e02736e52f60776d307340051d8bc15aee0ef211c7a4aa2a8cdc154848484604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a150505050565b6040805190810160405280600381526020017f434254000000000000000000000000000000000000000000000000000000000081525081565b6000600460009054906101000a900460ff1615610e475760009050610e54565b610e5183836113f6565b90505b92915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60055481565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561101657600080fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156110a357600090506113b8565b816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156110f257600090506113b8565b60008211801561112e57508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614155b1561134e576111b9600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836113bf565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506112816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836113bf565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061130b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836113d8565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b9392505050565b60008282111515156113cd57fe5b818303905092915050565b60008082840190508381101515156113ec57fe5b8091505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561143357600080fd5b816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156114825760009050611642565b6000821180156114be57508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b156115d85761150b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836113bf565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506115956000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836113d8565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b929150505600a165627a7a7230582090ae29b494883b5227010892372c2aa2e008dcb72ab77a013c286a3a52436f4e0029"
}