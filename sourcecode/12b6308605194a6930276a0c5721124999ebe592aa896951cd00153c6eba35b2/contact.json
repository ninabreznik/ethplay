{
  "address": "0x5f4a339fd4c64f8bb34935efa7a638b92ae82e9a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Cellpinda",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-29\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event PausePublic(bool newState);\n  event PauseOwnerAdmin(bool newState);\n\n  bool public pausedPublic = true;\n  bool public pausedOwnerAdmin = false;\n\n  /**\n   * @dev Modifier to make a function callable based on pause states.\n   */\n  modifier whenNotPaused() {\n    if(pausedPublic) {\n      if(!pausedOwnerAdmin) {\n        require(msg.sender == owner || msg.sender == owner);\n      } else {\n        revert();\n      }\n    }\n    _;\n  }\n\n  /**\n   * @dev called by the owner to set new pause flags\n   * pausedPublic can't be false while pausedOwnerAdmin is true\n   */\n  function pause(bool newPausedPublic, bool newPausedOwnerAdmin) onlyOwner public {\n    require(!(newPausedPublic == false && newPausedOwnerAdmin == true));\n\n    pausedPublic = newPausedPublic;\n    pausedOwnerAdmin = newPausedOwnerAdmin;\n\n    emit PausePublic(newPausedPublic);\n    emit PauseOwnerAdmin(newPausedOwnerAdmin);\n  }\n}\n\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\ncontract Cellpinda is PausableToken, MintableToken {\n    string public name = \"Cellpinda\";\n    string public symbol = \"CPD\";\n    uint256 public decimals = 8;\n    uint256 public INITIAL_SUPPLY = 10000000000 * (10 ** uint256(decimals));\n  \n    constructor() public \n    {\n        // assign the admin account\n        owner = msg.sender;\n        // assign the total tokens to owner\n        totalSupply_ = INITIAL_SUPPLY;\n        balances[msg.sender] = totalSupply_;\n        emit Transfer(address(0x0), msg.sender, totalSupply_);\n\n    }\n\n    event Burn(address indexed _burner, uint _value);\n\n    function burn(uint _value) public returns (bool)\n    {\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n        emit Burn(msg.sender, _value);\n        emit Transfer(msg.sender, address(0x0), _value);\n        return true;\n    }\n\n    // save some gas by making only one contract call\n    function burnFrom(address _from, uint256 _value) public returns (bool) \n    {\n        assert( transferFrom( _from, msg.sender, _value ) );\n        return burn(_value);\n    }\n\n}",
  "bytecode": "6003805460a860020a61ffff021960a060020a60ff0219909116740100000000000000000000000000000000000000001716905560c0604052600960808190527f43656c6c70696e6461000000000000000000000000000000000000000000000060a090815262000074916004919062000149565b506040805180820190915260038082527f43504400000000000000000000000000000000000000000000000000000000006020909201918252620000bb9160059162000149565b506008600655670de0b6b3a7640000600755348015620000da57600080fd5b506003805433600160a060020a031991821681179091168117909155600754600181905560008281526020818152604080832084905580519384525191927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a3620001ee565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200018c57805160ff1916838001178555620001bc565b82800160010185558215620001bc579182015b82811115620001bc5782518255916020019190600101906200019f565b50620001ca929150620001ce565b5090565b620001eb91905b80821115620001ca5760008155600101620001d5565b90565b61102280620001fe6000396000f3006080604052600436106101275763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461012c57806306fdde0314610155578063095ea7b3146101df57806318160ddd1461020357806323b872dd1461022a57806324bb7c26146102545780632ff2e9dc14610269578063313ce5671461027e57806340c10f191461029357806342966c68146102b757806364779ad7146102cf57806366188463146102e457806370a082311461030857806379cc6790146103295780637d64bcb41461034d5780638da5cb5b1461036257806395d89b4114610393578063a9059cbb146103a8578063d73dd623146103cc578063dd62ed3e146103f0578063ddeb509414610417578063f2fde38b14610438575b600080fd5b34801561013857600080fd5b50610141610459565b604080519115158252519081900360200190f35b34801561016157600080fd5b5061016a610469565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101a457818101518382015260200161018c565b50505050905090810190601f1680156101d15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101eb57600080fd5b50610141600160a060020a03600435166024356104f7565b34801561020f57600080fd5b5061021861055e565b60408051918252519081900360200190f35b34801561023657600080fd5b50610141600160a060020a0360043581169060243516604435610564565b34801561026057600080fd5b506101416105cd565b34801561027557600080fd5b506102186105dd565b34801561028a57600080fd5b506102186105e3565b34801561029f57600080fd5b50610141600160a060020a03600435166024356105e9565b3480156102c357600080fd5b506101416004356106e1565b3480156102db57600080fd5b5061014161078b565b3480156102f057600080fd5b50610141600160a060020a036004351660243561079b565b34801561031457600080fd5b50610218600160a060020a03600435166107fb565b34801561033557600080fd5b50610141600160a060020a0360043516602435610816565b34801561035957600080fd5b50610141610834565b34801561036e57600080fd5b506103776108ba565b60408051600160a060020a039092168252519081900360200190f35b34801561039f57600080fd5b5061016a6108c9565b3480156103b457600080fd5b50610141600160a060020a0360043516602435610924565b3480156103d857600080fd5b50610141600160a060020a0360043516602435610984565b3480156103fc57600080fd5b50610218600160a060020a03600435811690602435166109e4565b34801561042357600080fd5b5061043660043515156024351515610a0f565b005b34801561044457600080fd5b50610436600160a060020a0360043516610afd565b60035460b060020a900460ff1681565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104ef5780601f106104c4576101008083540402835291602001916104ef565b820191906000526020600020905b8154815290600101906020018083116104d257829003601f168201915b505050505081565b60035460009060a060020a900460ff161561054d5760035460a860020a900460ff16151561012757600354600160a060020a03163314806105425750600354600160a060020a031633145b151561054d57600080fd5b6105578383610b92565b9392505050565b60015490565b60035460009060a060020a900460ff16156105ba5760035460a860020a900460ff16151561012757600354600160a060020a03163314806105af5750600354600160a060020a031633145b15156105ba57600080fd5b6105c5848484610bf8565b949350505050565b60035460a060020a900460ff1681565b60075481565b60065481565b600354600090600160a060020a0316331461060357600080fd5b60035460b060020a900460ff161561061a57600080fd5b60015461062d908363ffffffff610d5d16565b600155600160a060020a038316600090815260208190526040902054610659908363ffffffff610d5d16565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a03851691600091600080516020610fd78339815191529181900360200190a350600192915050565b33600090815260208190526040812054610701908363ffffffff610d6c16565b33600090815260208190526040902055600154610724908363ffffffff610d6c16565b60015560408051838152905133917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a26040805183815290516000913391600080516020610fd78339815191529181900360200190a3506001919050565b60035460a860020a900460ff1681565b60035460009060a060020a900460ff16156107f15760035460a860020a900460ff16151561012757600354600160a060020a03163314806107e65750600354600160a060020a031633145b15156107f157600080fd5b6105578383610d7e565b600160a060020a031660009081526020819052604090205490565b6000610823833384610564565b151561082b57fe5b610557826106e1565b600354600090600160a060020a0316331461084e57600080fd5b60035460b060020a900460ff161561086557600080fd5b6003805476ff00000000000000000000000000000000000000000000191660b060020a1790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600354600160a060020a031681565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104ef5780601f106104c4576101008083540402835291602001916104ef565b60035460009060a060020a900460ff161561097a5760035460a860020a900460ff16151561012757600354600160a060020a031633148061096f5750600354600160a060020a031633145b151561097a57600080fd5b6105578383610e6e565b60035460009060a060020a900460ff16156109da5760035460a860020a900460ff16151561012757600354600160a060020a03163314806109cf5750600354600160a060020a031633145b15156109da57600080fd5b6105578383610f3d565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600160a060020a03163314610a2657600080fd5b81158015610a3657506001811515145b15610a4057600080fd5b6003805482151560a860020a0275ff0000000000000000000000000000000000000000001985151560a060020a810274ff00000000000000000000000000000000000000001990941693909317161790915560408051918252517fa14d191ca4f53bfcf003c65d429362010a2d3d68bc0c50cce4bdc0fccf661fb09181900360200190a160408051821515815290517fc77636fc4a62a1fa193ef538c0b7993a1313a0d9c0a9173058cebcd3239ef7b59181900360200190a15050565b600354600160a060020a03163314610b1457600080fd5b600160a060020a0381161515610b2957600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b6000600160a060020a0383161515610c0f57600080fd5b600160a060020a038416600090815260208190526040902054821115610c3457600080fd5b600160a060020a0384166000908152600260209081526040808320338452909152902054821115610c6457600080fd5b600160a060020a038416600090815260208190526040902054610c8d908363ffffffff610d6c16565b600160a060020a038086166000908152602081905260408082209390935590851681522054610cc2908363ffffffff610d5d16565b600160a060020a03808516600090815260208181526040808320949094559187168152600282528281203382529091522054610d04908363ffffffff610d6c16565b600160a060020a0380861660008181526002602090815260408083203384528252918290209490945580518681529051928716939192600080516020610fd7833981519152929181900390910190a35060019392505050565b60008282018381101561055757fe5b600082821115610d7857fe5b50900390565b336000908152600260209081526040808320600160a060020a038616845290915281205480831115610dd357336000908152600260209081526040808320600160a060020a0388168452909152812055610e08565b610de3818463ffffffff610d6c16565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b6000600160a060020a0383161515610e8557600080fd5b33600090815260208190526040902054821115610ea157600080fd5b33600090815260208190526040902054610ec1908363ffffffff610d6c16565b3360009081526020819052604080822092909255600160a060020a03851681522054610ef3908363ffffffff610d5d16565b600160a060020a03841660008181526020818152604091829020939093558051858152905191923392600080516020610fd78339815191529281900390910190a350600192915050565b336000908152600260209081526040808320600160a060020a0386168452909152812054610f71908363ffffffff610d5d16565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a3506001929150505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820cc7be1d0f427005fc6c4db7b9b93b46f343779de1f884d6a4956db646b42bcb30029"
}