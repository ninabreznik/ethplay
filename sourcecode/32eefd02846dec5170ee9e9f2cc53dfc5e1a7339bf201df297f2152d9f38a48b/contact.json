{
  "address": "0x3edd235c3e840c1f29286b2e39370a255c7b6fdb",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CMBToken",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-06\n*/\n\npragma solidity ^0.4.11;\n\n\ninterface IERC20 {\n  function totalSupply() constant returns (uint256 totalSupply);\n  function balanceOf(address _owner) constant returns (uint256 balance);\n  function transfer(address _to, uint256 _value) returns (bool success);\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n  function approve(address _spender, uint256 _value) returns (bool success);\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n}\n\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal  returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal  returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal  returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal  returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\n\n\n\ncontract CMBToken is IERC20 {\n\nusing SafeMath for uint256;\nuint public constant _totalSupply = 6500000000000000;\n\nstring public constant symbol = \"CMBT\";\nstring public constant name = \"CMB Token\";\nuint8 public constant decimals = 8;\n\n\nmapping (address => uint256) balances;\nmapping(address =>  mapping(address => uint256)) allowed;\n\n function CMBToken() {\n\tbalances[msg.sender] = _totalSupply;\n\n}\n\nfunction totalSupply() constant returns (uint256 totalSupply) {\n\treturn _totalSupply;\n}\n\nfunction balanceOf(address _owner) constant returns (uint256 balance) {\n\treturn balances[_owner];\n}\n\nfunction transfer(address _to, uint256 _value) returns (bool success) {\n\trequire(\n\t\tbalances[msg.sender] >= _value\n\t\t&& _value > 0\n\t);\n\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n\tbalances [_to] = balances[_to].add(_value);\n\tTransfer(msg.sender, _to, _value);\n\treturn true;\n\n}\n\nfunction transferFrom(address _from, address _to, uint256 _value) returns (bool success) { \n\trequire(\n\tallowed[_from][msg.sender] >= _value\n\t&& balances[_from] >= _value\n\t&& _value > 0\n\t);\n\tbalances[_from] = balances[msg.sender].sub(_value);\n\tbalances[_to] = balances[_to].add(_value);\n\tallowed[_from][msg.sender] = balances[msg.sender].sub(_value);\n\tTransfer(_from, _to, _value);\n\treturn true;\n\n}\n\nfunction approve(address _spender, uint256 _value) returns (bool success) {\n\tallowed[msg.sender][_spender] = _value;\n\tApproval(msg.sender, _spender, _value);\n\treturn true;\t\n}\n\nfunction allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n\treturn allowed[_owner][_spender];\n\n}\n\nevent Transfer(address indexed _from, address indexed _to, uint256 _value);\nevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n}",
  "bytecode": "6060604052341561000c57fe5b5b661717b72f0a4000600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5b610c2d806100696000396000f300606060405236156100a2576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100a4578063095ea7b31461013d57806318160ddd1461019457806323b872dd146101ba578063313ce567146102305780633eaaf86b1461025c57806370a082311461028257806395d89b41146102cc578063a9059cbb14610365578063dd62ed3e146103bc575bfe5b34156100ac57fe5b6100b4610425565b6040518080602001828103825283818151815260200191508051906020019080838360008314610103575b805182526020831115610103576020820191506020810190506020830392506100df565b505050905090810190601f16801561012f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561014557fe5b61017a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061045f565b604051808215151515815260200191505060405180910390f35b341561019c57fe5b6101a4610552565b6040518082815260200191505060405180910390f35b34156101c257fe5b610216600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610562565b604051808215151515815260200191505060405180910390f35b341561023857fe5b6102406108b4565b604051808260ff1660ff16815260200191505060405180910390f35b341561026457fe5b61026c6108b9565b6040518082815260200191505060405180910390f35b341561028a57fe5b6102b6600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506108c4565b6040518082815260200191505060405180910390f35b34156102d457fe5b6102dc61090e565b604051808060200182810382528381815181526020019150805190602001908083836000831461032b575b80518252602083111561032b57602082019150602081019050602083039250610307565b505050905090810190601f1680156103575780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561036d57fe5b6103a2600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610948565b604051808215151515815260200191505060405180910390f35b34156103c457fe5b61040f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610b3f565b6040518082815260200191505060405180910390f35b604060405190810160405280600981526020017f434d4220546f6b656e000000000000000000000000000000000000000000000081525081565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b6000661717b72f0a400090505b90565b600081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015801561062f575081600060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b801561063b5750600082115b15156106475760006000fd5b61069982600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bc790919063ffffffff16565b600060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061072e82600060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610be190919063ffffffff16565b600060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506107c382600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bc790919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b9392505050565b600881565b661717b72f0a400081565b6000600060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b604060405190810160405280600481526020017f434d42540000000000000000000000000000000000000000000000000000000081525081565b600081600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156109995750600082115b15156109a55760006000fd5b6109f782600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bc790919063ffffffff16565b600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a8c82600060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610be190919063ffffffff16565b600060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b92915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b6000828211151515610bd557fe5b81830390505b92915050565b600060008284019050838110151515610bf657fe5b8091505b50929150505600a165627a7a72305820eb1ed580273140642add1e34defdfd9fffb7291fe017bb52838d907ba1e1e67a0029"
}