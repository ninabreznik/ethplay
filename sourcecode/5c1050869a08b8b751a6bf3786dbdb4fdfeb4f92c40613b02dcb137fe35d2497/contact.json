{
  "address": "0xc4a86561cb0b7ea1214904f26e6d50fd357c7986",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Charg Coin",
  "contractName": "ChargCoinContract",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-03\n*/\n\npragma solidity ^0.4.18;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    uint256 public totalSupply = 90000000 * 10 ** 18;\n\n    function balanceOf(address who) public constant returns (uint256);\n\n    function transfer(address to, uint256 value) public returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public constant returns (uint256);\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n\n    function approve(address spender, uint256 value) public returns (bool);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) balances;\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) allowed;\n\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n\n        uint256 _allowance = allowed[_from][msg.sender];\n\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n        // require (_value <= _allowance);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = _allowance.sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue)\n    public returns (bool success) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        }\n        else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n\n    address public owner;\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) onlyOwner public {\n        require(newOwner != address(0));\n        owner = newOwner;\n    }\n}\n\n\n/*\n * ChargCoinContract\n *\n * Simple ERC20 Token example, with crowdsale token creation\n */\ncontract ChargCoinContract is StandardToken, Ownable {\n\n    string public standard = \"CHG\";\n    string public name = \"Charg Coin\";\n    string public symbol = \"CHG\";\n\n    uint public decimals = 18;\n\n    address public multisig = 0x482EFd447bE88748e7625e2b7c522c388970B790;\n\n    struct ChargingData {\n    address node;\n    uint startTime;\n    uint endTime;\n    uint256 fixedRate;\n    bool initialized;\n    uint256 predefinedAmount;\n    }\n\n    struct ParkingData {\n    address node;\n    uint startTime;\n    uint endTime;\n    uint256 fixedRate;\n    bool initialized;\n    uint256 predefinedAmount;\n    }\n\n    mapping (address => uint256) public authorized;\n\n    mapping (address => uint256) public rateOfCharging;\n    mapping (address => uint256) public rateOfParking;\n\n    mapping (address => ChargingData) public chargingSwitches;\n    mapping (address => ParkingData) public parkingSwitches;\n\n    mapping (address => uint256) public reservedFundsCharging;\n    mapping (address => uint256) public reservedFundsParking;\n\n    // 1 ETH = 800 CHARG tokens (1 CHARG = 0.59 USD)\n    uint PRICE = 800;\n\n    struct ContributorData {\n    uint contributionAmount;\n    uint tokensIssued;\n    }\n\n    function ChargCoinContract() public {\n        balances[msg.sender] = totalSupply;\n    }\n\n    mapping (address => ContributorData) public contributorList;\n\n    uint nextContributorIndex;\n\n    mapping (uint => address) contributorIndexes;\n\n    state public crowdsaleState = state.pendingStart;\n    enum state {pendingStart, crowdsale, crowdsaleEnded}\n\n    event CrowdsaleStarted(uint blockNumber);\n\n    event CrowdsaleEnded(uint blockNumber);\n\n    event ErrorSendingETH(address to, uint amount);\n\n    event MinCapReached(uint blockNumber);\n\n    event MaxCapReached(uint blockNumber);\n\n    uint public constant BEGIN_TIME = 1512319965;\n\n    uint public constant END_TIME = 1514764800;\n\n    uint public minCap = 1 ether;\n\n    uint public maxCap = 12500 ether;\n\n    uint public ethRaised = 0;\n\n    uint public totalSupply = 90000000 * 10 ** decimals;\n\n    uint crowdsaleTokenCap = 10000000 * 10 ** decimals; // 11.11%\n    uint foundersAndTeamTokens = 9000000 * 10 ** decimals; // 10%\n    uint DistroFundTokens = 69000000 * 10 ** decimals; // 76.67%\n\tuint BountyTokens = 2000000 * 10 ** decimals; // 2.22%\n\n    bool foundersAndTeamTokensClaimed = false;\n    bool DistroFundTokensClaimed = false;\n\tbool BountyTokensClaimed = false;\n\n    uint nextContributorToClaim;\n\n    mapping (address => bool) hasClaimedEthWhenFail;\n\n    function() payable public {\n        require(msg.value != 0);\n        require(crowdsaleState != state.crowdsaleEnded);\n        // Check if crowdsale has ended\n\n        bool stateChanged = checkCrowdsaleState();\n        // Check blocks and calibrate crowdsale state\n\n        if (crowdsaleState == state.crowdsale) {\n            createTokens(msg.sender);\n            // Process transaction and issue tokens\n\n        }\n        else {\n            refundTransaction(stateChanged);\n            // Set state and return funds or throw\n        }\n    }\n\n    //\n    // Check crowdsale state and calibrate it\n    //\n    function checkCrowdsaleState() internal returns (bool) {\n        if (ethRaised >= maxCap && crowdsaleState != state.crowdsaleEnded) {// Check if max cap is reached\n            crowdsaleState = state.crowdsaleEnded;\n            CrowdsaleEnded(block.number);\n            // Raise event\n            return true;\n        }\n\n        if (now >= END_TIME) {\n            crowdsaleState = state.crowdsaleEnded;\n            CrowdsaleEnded(block.number);\n            // Raise event\n            return true;\n        }\n\n        if (now >= BEGIN_TIME && now < END_TIME) {// Check if we are in crowdsale state\n            if (crowdsaleState != state.crowdsale) {// Check if state needs to be changed\n                crowdsaleState = state.crowdsale;\n                // Set new state\n                CrowdsaleStarted(block.number);\n                // Raise event\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    //\n    // Decide if throw or only return ether\n    //\n    function refundTransaction(bool _stateChanged) internal {\n        if (_stateChanged) {\n            msg.sender.transfer(msg.value);\n        }\n        else {\n            revert();\n        }\n    }\n\n    function createTokens(address _contributor) payable public {\n\n        uint _amount = msg.value;\n\n        uint contributionAmount = _amount;\n        uint returnAmount = 0;\n\n        if (_amount > (maxCap - ethRaised)) {// Check if max contribution is lower than _amount sent\n            contributionAmount = maxCap - ethRaised;\n            // Set that user contibutes his maximum alowed contribution\n            returnAmount = _amount - contributionAmount;\n            // Calculate how much he must get back\n        }\n\n        if (ethRaised + contributionAmount > minCap && minCap > ethRaised) {\n            MinCapReached(block.number);\n        }\n\n        if (ethRaised + contributionAmount == maxCap && ethRaised < maxCap) {\n            MaxCapReached(block.number);\n        }\n\n        if (contributorList[_contributor].contributionAmount == 0) {\n            contributorIndexes[nextContributorIndex] = _contributor;\n            nextContributorIndex += 1;\n        }\n\n        contributorList[_contributor].contributionAmount += contributionAmount;\n        ethRaised += contributionAmount;\n        // Add to eth raised\n\n        uint256 tokenAmount = calculateEthToChargcoin(contributionAmount);\n        // Calculate how much tokens must contributor get\n        if (tokenAmount > 0) {\n            transferToContributor(_contributor, tokenAmount);\n            contributorList[_contributor].tokensIssued += tokenAmount;\n            // log token issuance\n        }\n\n        if (!multisig.send(msg.value)) {\n            revert();\n        }\n    }\n\n\n    function transferToContributor(address _to, uint256 _value)  public {\n        balances[owner] = balances[owner].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n    }\n\n    function calculateEthToChargcoin(uint _eth) constant public returns (uint256) {\n\n        uint tokens = _eth.mul(getPrice());\n        uint percentage = 0;\n\n        if (ethRaised > 0) {\n            percentage = ethRaised * 100 / maxCap;\n        }\n\n        return tokens + getAmountBonus(tokens);\n    }\n\n    function getAmountBonus(uint tokens) pure public returns (uint) {\n        uint amountBonus = 0;\n\n        if (tokens >= 10000) amountBonus = tokens;\n        else if (tokens >= 5000) amountBonus = tokens * 60 / 100;\n        else if (tokens >= 1000) amountBonus = tokens * 30 / 100;\n        else if (tokens >= 500) amountBonus = tokens * 10 / 100;\n        else if (tokens >= 100) amountBonus = tokens * 5 / 100;\n        else if (tokens >= 10) amountBonus = tokens * 1 / 100;\n\n        return amountBonus;\n    }\n\n    // replace this with any other price function\n    function getPrice() constant public returns (uint result) {\n        return PRICE;\n    }\n\n    //\n    // Owner can batch return contributors contributions(eth)\n    //\n    function batchReturnEthIfFailed(uint _numberOfReturns) onlyOwner public {\n        require(crowdsaleState != state.crowdsaleEnded);\n        // Check if crowdsale has ended\n        require(ethRaised < minCap);\n        // Check if crowdsale has failed\n        address currentParticipantAddress;\n        uint contribution;\n        for (uint cnt = 0; cnt < _numberOfReturns; cnt++) {\n            currentParticipantAddress = contributorIndexes[nextContributorToClaim];\n            // Get next unclaimed participant\n            if (currentParticipantAddress == 0x0) return;\n            // Check if all the participants were compensated\n            if (!hasClaimedEthWhenFail[currentParticipantAddress]) {// Check if participant has already claimed\n                contribution = contributorList[currentParticipantAddress].contributionAmount;\n                // Get contribution of participant\n                hasClaimedEthWhenFail[currentParticipantAddress] = true;\n                // Set that he has claimed\n                balances[currentParticipantAddress] = 0;\n                if (!currentParticipantAddress.send(contribution)) {// Refund eth\n                    ErrorSendingETH(currentParticipantAddress, contribution);\n                    // If there is an issue raise event for manual recovery\n                }\n            }\n            nextContributorToClaim += 1;\n            // Repeat\n        }\n    }\n\n    //\n    // Owner can set multisig address for crowdsale\n    //\n    function setMultisigAddress(address _newAddress) onlyOwner public {\n        multisig = _newAddress;\n    }\n\n    //\n    // Registers node with rate\n    //\n    function registerNode(uint256 chargingRate, uint256 parkingRate) public {\n        if (authorized[msg.sender] == 1) revert();\n\n        rateOfCharging[msg.sender] = chargingRate;\n        rateOfParking[msg.sender] = parkingRate;\n        authorized[msg.sender] = 1;\n    }\n\n    // \n    // Block node\n    //\n    function blockNode (address node) onlyOwner public {\n        authorized[node] = 0;\n    }\n\n    //\n    // Updates node charging rate\n    // \n    function updateChargingRate (uint256 rate) public {\n        rateOfCharging[msg.sender] = rate;\n    }\n\n    //\n    // Updates node parking rate\n    // \n    function updateParkingRate (uint256 rate) public {\n        rateOfCharging[msg.sender] = rate;\n    }\n\n    function chargeOn (address node, uint time) public {\n        // Prevent from not authorized nodes\n        if (authorized[node] == 0) revert();\n        // Prevent from double charging\n        if (chargingSwitches[msg.sender].initialized) revert();\n\n        // Determine endTime\n        uint endTime = now + time;\n\n        // Prevent from past dates\n        if (endTime <= now) revert();\n\n        // Calculate the amount of tokens has to be taken from users account\n        uint256 predefinedAmount = (endTime - now) * rateOfCharging[node];\n\n        if (balances[msg.sender] < predefinedAmount) revert();\n\n        chargingSwitches[msg.sender] = ChargingData(node, now, endTime, rateOfCharging[node], true, predefinedAmount);\n        balances[msg.sender] = balances[msg.sender].sub(predefinedAmount);\n        reservedFundsCharging[msg.sender] = reservedFundsCharging[msg.sender].add(predefinedAmount);\n    }\n\n    function chargeOff (address node) public {\n        // Check that initialization happened\n        if (!chargingSwitches[msg.sender].initialized) revert();\n        // Calculate the amount depending on rate\n        uint256 amount = (now - chargingSwitches[msg.sender].startTime) * chargingSwitches[msg.sender].fixedRate;\n        // Maximum can be predefinedAmount, if it less than that, return tokens\n        amount = amount > chargingSwitches[msg.sender].predefinedAmount ? chargingSwitches[msg.sender].predefinedAmount : amount;\n\n        // Take tokens from reserFunds and put it on balance\n        balances[node] = balances[node] + amount;\n        reservedFundsCharging[msg.sender] = reservedFundsCharging[msg.sender] - amount;\n\n        // When amount is less than predefinedAmount, return other tokens to user\n        if (reservedFundsCharging[msg.sender] > 0) {\n            balances[msg.sender] = balances[msg.sender] + reservedFundsCharging[msg.sender];\n            reservedFundsCharging[msg.sender] = 0;\n        }\n\n        // Uninitialize\n        chargingSwitches[msg.sender].node = 0;\n        chargingSwitches[msg.sender].startTime = 0;\n        chargingSwitches[msg.sender].endTime = 0;\n        chargingSwitches[msg.sender].fixedRate = 0;\n        chargingSwitches[msg.sender].initialized = false;\n        chargingSwitches[msg.sender].predefinedAmount = 0;\n    }\n\n    function parkingOn (address node, uint time) public {\n        // Prevent from not authorized nodes\n        if (authorized[node] == 0) revert();\n        // Prevent from double charging\n        if (parkingSwitches[msg.sender].initialized) revert();\n\n        if (balances[msg.sender] < predefinedAmount) revert();\n\n        uint endTime = now + time;\n\n        // Prevent from past dates\n        if (endTime <= now) revert();\n\n        uint256 predefinedAmount = (endTime - now) * rateOfParking[node];\n\n        parkingSwitches[msg.sender] = ParkingData(node, now, endTime, rateOfParking[node], true, predefinedAmount);\n        balances[msg.sender] = balances[msg.sender].sub(predefinedAmount);\n        reservedFundsParking[msg.sender] = reservedFundsParking[msg.sender].add(predefinedAmount);\n    }\n\n    // Parking off     \n    function parkingOff (address node) public {\n        if (!parkingSwitches[msg.sender].initialized) revert();\n\n        // Calculate the amount depending on rate\n        uint256 amount = (now - parkingSwitches[msg.sender].startTime) * parkingSwitches[msg.sender].fixedRate;\n        // Maximum can be predefinedAmount, if it less than that, return tokens\n        amount = amount > parkingSwitches[msg.sender].predefinedAmount ? parkingSwitches[msg.sender].predefinedAmount : amount;\n\n        balances[node] = balances[node] + amount;\n        reservedFundsParking[msg.sender] = reservedFundsParking[msg.sender] - amount;\n\n        //  \n        if (reservedFundsParking[msg.sender] > 0) {\n            balances[msg.sender] = balances[msg.sender] + reservedFundsParking[msg.sender];\n            // all tokens taken, set to 0\n            reservedFundsParking[msg.sender] = 0;\n        }\n\n        // Uninitialize\n        parkingSwitches[msg.sender].node = 0;\n        parkingSwitches[msg.sender].startTime = 0;\n        parkingSwitches[msg.sender].endTime = 0;\n        parkingSwitches[msg.sender].fixedRate = 0;\n        parkingSwitches[msg.sender].initialized = false;\n        parkingSwitches[msg.sender].predefinedAmount = 0;\n    }\n\n}",
  "bytecode": ""
}