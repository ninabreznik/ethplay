{
  "address": "0xdc96a98f34847dc6517e81a73e5036f84a2742e1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EcoPayments",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-20\n*/\n\npragma solidity ^0.4.18;\n\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: zeppelin-solidity/contracts/token/SafeERC20.sol\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    assert(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n    assert(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    assert(token.approve(spender, value));\n  }\n}\n\n// File: zeppelin-solidity/contracts/ownership/CanReclaimToken.sol\n\n/**\n * @title Contracts that should be able to recover tokens\n * @author SylTi\n * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n * This will prevent any accidental loss of tokens.\n */\ncontract CanReclaimToken is Ownable {\n  using SafeERC20 for ERC20Basic;\n\n  /**\n   * @dev Reclaim all ERC20Basic compatible tokens\n   * @param token ERC20Basic The address of the token contract\n   */\n  function reclaimToken(ERC20Basic token) external onlyOwner {\n    uint256 balance = token.balanceOf(this);\n    token.safeTransfer(owner, balance);\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/ownership/HasNoEther.sol\n\n/**\n * @title Contracts that should not own Ether\n * @author Remco Bloemen <[email protected]π.com>\n * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\n * in the contract, it will allow the owner to reclaim this ether.\n * @notice Ether can still be send to this contract by:\n * calling functions labeled `payable`\n * `selfdestruct(contract_address)`\n * mining directly to the contract address\n*/\ncontract HasNoEther is Ownable {\n\n  /**\n  * @dev Constructor that rejects incoming Ether\n  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n  * we could use assembly to access msg.value.\n  */\n  function HasNoEther() payable {\n    require(msg.value == 0);\n  }\n\n  /**\n   * @dev Disallows direct send by settings a default function without the `payable` flag.\n   */\n  function() external {\n  }\n\n  /**\n   * @dev Transfer all Ether held by the contract to the owner.\n   */\n  function reclaimEther() external onlyOwner {\n    assert(owner.send(this.balance));\n  }\n}\n\n// File: contracts/EcoPayments.sol\n\ninterface Vault {\n    function contributionsOf(address _addr) public constant returns (uint256);\n}\n\ncontract EcoPayments is Ownable, Pausable, HasNoEther, CanReclaimToken {\n\n    using SafeMath for uint256;\n    using SafeERC20 for ERC20;\n\n    uint256[] private payoutDates = [\n        1512086400, // Dec 1, 2017\n        1514764800, // Jan 1, 2018\n        1517443200, // Feb 1, 2018\n        1519862400, // Mar 1, 2018\n        1522540800, // Apr 1, 2018\n        1525132800, // May 1, 2018\n        1527811200, // Jun 1, 2018\n        1530403200, // Jul 1, 2018\n        1533081600, // Aug 1, 2018\n        1535760000, // Sep 1, 2018\n        1538352000, // Oct 1, 2018\n        1541030400  // Nov 1, 2018\n    ];\n\n    ERC20 public token;\n    Vault public vault;\n\n    mapping (address => uint256) private withdrawals;\n\n    bool public initialized = false;\n\n    modifier whenInitialized() {\n        require (initialized == true);\n        _;\n    }\n\n    function EcoPayments(ERC20 _token, Vault _vault) {\n        token = _token;\n        vault = _vault;\n    }\n\n    function init() onlyOwner returns (uint256) {\n        require(token.balanceOf(this) == 5000000 * 10**18);\n        initialized = true;\n    }\n\n    function withdraw() whenInitialized whenNotPaused public {\n        uint256 amount = earningsOf(msg.sender);\n        require (amount > 0);\n        withdrawals[msg.sender] = withdrawals[msg.sender].add(amount);\n        token.safeTransfer(msg.sender, amount);\n    }\n\n    function earningsOf(address _addr) public constant returns (uint256) {\n        uint256 total = 0;\n        uint256 interest = vault.contributionsOf(_addr).mul(833).div(10000);\n\n        for (uint8 i = 0; i < payoutDates.length; i++) {\n            if (now < payoutDates[i]) {\n                break;\n            }\n\n            total = total.add(interest);\n        }\n\n        // Subtract any previously withdrawn earnings\n        total = total.sub(withdrawals[_addr]);\n\n        return total;\n    }\n}",
  "bytecode": "606060405260008060146101000a81548160ff02191690831515021790555061018060405190810160405280635a209b8063ffffffff168152602001635a497a0063ffffffff168152602001635a72588063ffffffff168152602001635a97428063ffffffff168152602001635ac0210063ffffffff168152602001635ae7ae0063ffffffff168152602001635b108c8063ffffffff168152602001635b38198063ffffffff168152602001635b60f80063ffffffff168152602001635b89d68063ffffffff168152602001635bb1638063ffffffff168152602001635bda420063ffffffff16815250600190600c6100f992919061021d565b506000600560006101000a81548160ff021916908315150217905550341561012057600080fd5b6040516040806111c083398101604052808051906020019091908051906020019091905050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060003414151561019457600080fd5b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050610297565b828054828255906000526020600020908101928215610261579160200282015b82811115610260578251829063ffffffff1690559160200191906001019061023d565b5b50905061026e9190610272565b5090565b61029491905b80821115610290576000816000905550600101610278565b5090565b90565b610f1a806102a66000396000f3006060604052600436106100c5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063158ef93e146100d257806317ffc320146100ff5780633ccfd60b146101385780633f4ba83a1461014d5780635c975abb146101625780638456cb591461018f5780638da5cb5b146101a45780638df08bd4146101f95780639f727c2714610246578063e1c7392a1461025b578063f2fde38b14610284578063fbfa77cf146102bd578063fc0c546a14610312575b34156100d057600080fd5b005b34156100dd57600080fd5b6100e5610367565b604051808215151515815260200191505060405180910390f35b341561010a57600080fd5b610136600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061037a565b005b341561014357600080fd5b61014b6104e7565b005b341561015857600080fd5b610160610626565b005b341561016d57600080fd5b6101756106e4565b604051808215151515815260200191505060405180910390f35b341561019a57600080fd5b6101a26106f7565b005b34156101af57600080fd5b6101b76107b7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561020457600080fd5b610230600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506107dc565b6040518082815260200191505060405180910390f35b341561025157600080fd5b6102596109b0565b005b341561026657600080fd5b61026e610a82565b6040518082815260200191505060405180910390f35b341561028f57600080fd5b6102bb600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610bf5565b005b34156102c857600080fd5b6102d0610d4a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561031d57600080fd5b610325610d70565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600560009054906101000a900460ff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156103d757600080fd5b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561047a57600080fd5b6102c65a03f1151561048b57600080fd5b5050506040518051905090506104e36000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828473ffffffffffffffffffffffffffffffffffffffff16610d969092919063ffffffff16565b5050565b600060011515600560009054906101000a900460ff16151514151561050b57600080fd5b600060149054906101000a900460ff1615151561052757600080fd5b610530336107dc565b905060008111151561054157600080fd5b61059381600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6990919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506106233382600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610d969092919063ffffffff16565b50565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561068157600080fd5b600060149054906101000a900460ff16151561069c57600080fd5b60008060146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b600060149054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561075257600080fd5b600060149054906101000a900460ff1615151561076e57600080fd5b6001600060146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600080600092506108ee6127106108e0610341600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633af0dbc18a6000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15156108b757600080fd5b6102c65a03f115156108c857600080fd5b50505060405180519050610e8790919063ffffffff16565b610eba90919063ffffffff16565b9150600090505b6001805490508160ff1610156109515760018160ff1681548110151561091757fe5b90600052602060002090015442101561092f57610951565b6109428284610e6990919063ffffffff16565b925080806001019150506108f5565b6109a3600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484610ed590919063ffffffff16565b9250829350505050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a0b57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501515610a8057fe5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610adf57600080fd5b6a0422ca8b0a00a425000000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610bb057600080fd5b6102c65a03f11515610bc157600080fd5b50505060405180519050141515610bd757600080fd5b6001600560006101000a81548160ff02191690831515021790555090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c5057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610c8c57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515610e4157600080fd5b6102c65a03f11515610e5257600080fd5b505050604051805190501515610e6457fe5b505050565b6000808284019050838110151515610e7d57fe5b8091505092915050565b60008082840290506000841480610ea85750828482811515610ea557fe5b04145b1515610eb057fe5b8091505092915050565b6000808284811515610ec857fe5b0490508091505092915050565b6000828211151515610ee357fe5b8183039050929150505600a165627a7a7230582007e7e7ad4fe6f2a1d9f10f06bda411596566db68febfb360b76d6beb5a3b1fe30029000000000000000000000000d3c00772b24d997a812249ca637a921e81357701000000000000000000000000204c3e5296ab443707e5404a509aa5194e63b12a",
  "constructorArguments": "000000000000000000000000d3c00772b24d997a812249ca637a921e81357701000000000000000000000000204c3e5296ab443707e5404a509aa5194e63b12a"
}