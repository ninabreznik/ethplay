{
  "address": "0x0e786d42fd70e4a51ab5f80aa5da19e74337e7f2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Swap",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-16\n*/\n\npragma solidity ^0.4.20;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n  \n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() internal {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\ncontract tokenInterface {\n\tfunction balanceOf(address _owner) public constant returns (uint256 balance);\n\tfunction transfer(address _to, uint256 _value) public returns (bool);\n}\n\ncontract Library {\n    // Notes:\n    // - this is limited to a payload length of 253 bytes\n    // - the payload should be ASCII as many clients will want to display this to the user\n    function createBSMHash(string payload) pure internal returns (bytes32) {\n        // \\x18Bitcoin Signed Message:\\n#{message.size.chr}#{message}\n        string memory prefix = \"\\x18Bitcoin Signed Message:\\n\";\n        return sha256(sha256(prefix, bytes1(bytes(payload).length), payload));\n    }\n\n    function validateBSM(string payload, address key, uint8 v, bytes32 r, bytes32 s) internal pure returns (bool) {\n        return key == ecrecover(createBSMHash(payload), v, r, s);\n    }\n  \n\t//bytes32 constant mask4 = 0xffffffff00000000000000000000000000000000000000000000000000000000;\n\t//bytes1 constant network = 0x00;\n\n    /*\n\tfunction getBitcoinAddress( bytes32 _xPoint, bytes32 _yPoint ) constant public returns( bytes20 hashedPubKey, bytes4 checkSum, bytes1 network)\t{\n\t\thashedPubKey \t= getHashedPublicKey(_xPoint, _yPoint);\n \t\tcheckSum \t= getCheckSum(hashedPubKey);\n \t\tnetwork \t= network;\n\t}*/\n\n\tfunction btcAddrPubKeyUncompr( bytes32 _xPoint, bytes32 _yPoint) internal pure returns( bytes20 hashedPubKey )\t{\n\t\tbytes1 startingByte = 0x04;\n \t\treturn ripemd160(sha256(startingByte, _xPoint, _yPoint));\n\t}\n\t\n\tfunction btcAddrPubKeyCompr(bytes32 _x, bytes32 _y) internal pure returns( bytes20 hashedPubKey )\t{\n\t    bytes1 _startingByte;\n\t    if (uint256(_y) % 2 == 0  ) {\n            _startingByte = 0x02;\n        } else {\n            _startingByte = 0x03;\n        }\n \t\treturn ripemd160(sha256(_startingByte, _x));\n\t}\n\t\n\tfunction ethAddressPublicKey( bytes32 _xPoint, bytes32 _yPoint) internal pure returns( address ethAddr )\t{\n \t\treturn address(keccak256(_xPoint, _yPoint) ); \n\t}\n\t/*\n\tfunction getCheckSum( bytes20 _hashedPubKey ) public pure returns(bytes4 checkSum) {\n\t\tvar full = sha256((sha256(network, _hashedPubKey)));\n\t\treturn bytes4(full&mask4);\n\t}\n    */\n    function toAsciiString(address x) internal pure returns (string) {\n        bytes memory s = new bytes(42);\n        s[0] = 0x30;\n        s[1] = 0x78;\n        for (uint i = 0; i < 20; i++) {\n            byte b = byte(uint8(uint(x) / (2**(8*(19 - i)))));\n            byte hi = byte(uint8(b) / 16);\n            byte lo = byte(uint8(b) - 16 * uint8(hi));\n            s[2+2*i] = char(hi);\n            s[2+2*i+1] = char(lo);            \n        }\n        return string(s);\n    }\n    \n    function char(byte b) internal pure returns (byte c) {\n        if (b < 10) return byte(uint8(b) + 0x30);\n        else return byte(uint8(b) + 0x57);\n    }\n    \n    /*\n    function getBTCAddr(bytes32 _xPoint, bytes32 _yPoint) pure public returns (bytes) {\n\t\tbytes20 hashedPubKey = btcAddressPublicKey(_xPoint, _yPoint);\n\t\tbytes4 checkSum = getCheckSum(hashedPubKey);\n\t\tbytes memory output = new bytes(25);\n\t\t\n\t\toutput[0] = network[0];\n\t\t\n\t\tfor (uint8 i = 0; i<20; i++) {\n            output[i+1] = hashedPubKey[i];\n        }\n        \n        for ( i = 0; i<4; i++) {\n            output[i+1+20] = checkSum[i];\n        }\n\n        return output;\n    }\n    */\n}\n\ncontract Swap is Ownable, Library {\n    using SafeMath for uint256;\n    tokenInterface public tokenContract;\n\tData public dataContract;\n    \n    mapping(address => bool) claimed;\n\n    function Swap(address _tokenAddress) public {\n        tokenContract = tokenInterface(_tokenAddress);\n    }\n\n    function claim(address _ethAddrReceiver, bytes32 _x, bytes32 _y, uint8 _v, bytes32 _r, bytes32 _s) public returns(bool) {\n        require ( dataContract != address(0) );\n        \n\t\t/* This code enable swap from BTC address compressed and uncompressed, check before compressed (more common format)\n\t\t * and then also uncompressed address format - btc address is calculated in hex format without checksum and prefix\n\t\t */\n        address btcAddr0x; \n\t\tbtcAddr0x = address( btcAddrPubKeyCompr(_x,_y) ); \n\t\tif( dataContract.CftBalanceOf( btcAddr0x ) == 0 || claimed[ btcAddr0x ] ) { //check if have balance of if is already claimed\n\t\t\tbtcAddr0x = address( btcAddrPubKeyUncompr(_x,_y) ); \n\t\t}\n\t\t\n\t\trequire ( dataContract.CftBalanceOf( btcAddr0x ) != 0 );\n        require ( !claimed[ btcAddr0x ] );\n\t\t\n\t\taddress checkEthAddr0x = address( ethAddressPublicKey(_x,_y) ); //calculate eth address from pubkey for check of ecrecover function to verify sign\n        require ( validateBSM( toAsciiString(_ethAddrReceiver), checkEthAddr0x, _v, _r, _s) ); // check if eth address of receiver is signed by owner of privkey\n        \n        //add 10 number after the dot, 1 satoshi = 10^8 | 1 wei = 10^18\n        // the swap is 1:0,5\n        uint256 tokenAmount = dataContract.CftBalanceOf(btcAddr0x) * 10**10 / 2; \n        \n        claimed[btcAddr0x] = true;\n        \n        tokenContract.transfer(_ethAddrReceiver, tokenAmount);\n        \n        return true;\n    }\n\n    function withdrawTokens(address to, uint256 value) public onlyOwner returns (bool) {\n        return tokenContract.transfer(to, value);\n    }\n    \n    function setTokenContract(address _tokenContract) public onlyOwner {\n        tokenContract = tokenInterface(_tokenContract);\n    }\n    \n    function setDataContract(address _tokenContract) public onlyOwner {\n        dataContract = Data(_tokenContract);\n    }\n\n    function () public payable {\n        revert();\n    }\n}\n\n\ncontract Data {\n    mapping(address => uint256) public CftBalanceOf;\n       function Data() public {\n            }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"setDataContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"setTokenContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ethAddrReceiver\",\"type\":\"address\"},{\"name\":\"_x\",\"type\":\"bytes32\"},{\"name\":\"_y\",\"type\":\"bytes32\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "6060604052341561000f57600080fd5b604051602080610c3b8339810160405280805160008054600160a060020a03338116600160a060020a031992831617909255600180549290931691161790555050610bdc8061005f6000396000f3006060604052600436106100745763ffffffff60e060020a60003504166303959bb7811461007957806306b091f91461009a5780630d668818146100d057806355a373d6146100ff5780638da5cb5b14610112578063bbcd5bbe14610125578063dbc5629714610144578063f2fde38b14610175575b600080fd5b341561008457600080fd5b610098600160a060020a0360043516610194565b005b34156100a557600080fd5b6100bc600160a060020a03600435166024356101de565b604051901515815260200160405180910390f35b34156100db57600080fd5b6100e361026d565b604051600160a060020a03909116815260200160405180910390f35b341561010a57600080fd5b6100e361027c565b341561011d57600080fd5b6100e361028b565b341561013057600080fd5b610098600160a060020a036004351661029a565b341561014f57600080fd5b6100bc600160a060020a036004351660243560443560ff6064351660843560a4356102e4565b341561018057600080fd5b610098600160a060020a03600435166105b1565b60005433600160a060020a039081169116146101af57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000805433600160a060020a039081169116146101fa57600080fd5b600154600160a060020a031663a9059cbb848460405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561025057600080fd5b5af1151561025d57600080fd5b5050506040518051949350505050565b600254600160a060020a031681565b600154600160a060020a031681565b600054600160a060020a031681565b60005433600160a060020a039081169116146102b557600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600254600090819081908190600160a060020a0316151561030457600080fd5b61030e898961064c565b6002546c010000000000000000000000009091049350600160a060020a0316636fcd62da8460405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561037157600080fd5b5af1151561037e57600080fd5b5050506040518051159050806103ac5750600160a060020a03831660009081526003602052604090205460ff165b156103ce576103bb8989610724565b6c01000000000000000000000000900492505b600254600160a060020a0316636fcd62da8460405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561041e57600080fd5b5af1151561042b57600080fd5b50505060405180511515905061044057600080fd5b600160a060020a03831660009081526003602052604090205460ff161561046657600080fd5b6104708989610788565b915061048761047e8b6107ab565b8389898961095e565b151561049257600080fd5b60028054600160a060020a0316636fcd62da8560405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156104e357600080fd5b5af115156104f057600080fd5b505050604051805190506402540be4000281151561050a57fe5b600160a060020a0380861660009081526003602052604090819020805460ff1916600190811790915554939092049350919091169063a9059cbb908c9084905160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561058a57600080fd5b5af1151561059757600080fd5b50505060405180515060019b9a5050505050505050505050565b60005433600160a060020a039081169116146105cc57600080fd5b600160a060020a03811615156105e157600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008060028306151561068057507f02000000000000000000000000000000000000000000000000000000000000006106a3565b507f03000000000000000000000000000000000000000000000000000000000000005b600360028286604051600160f860020a0319909216825260018201526021016020604051808303816000865af115156106db57600080fd5b505060405180519050604051908152602090810190604051808303816000865af1151561070757600080fd5b5050604051516c0100000000000000000000000002949350505050565b60007f040000000000000000000000000000000000000000000000000000000000000060036002828686604051600160f860020a03199093168352600183019190915260218201526041016020604051808303816000865af115156106db57600080fd5b600082826040519182526020820152604090810190519081900390209392505050565b6107b3610b9e565b6107bb610b9e565b600080600080602a6040518059106107d05750595b818152601f19601f8301168101602001604052905094507f30000000000000000000000000000000000000000000000000000000000000008560008151811061081557fe5b906020010190600160f860020a031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008560018151811061085b57fe5b906020010190600160f860020a031916908160001a905350600093505b6014841015610953578360130360080260020a87600160a060020a031681151561089e57fe5b0460f860020a02925060108360f860020a900460ff168115156108bd57fe5b0460f860020a0291508160f860020a90046010028360f860020a90040360f860020a0290506108eb826109e8565b8585600202600201815181106108fd57fe5b906020010190600160f860020a031916908160001a90535061091e816109e8565b85600360028702018151811061093057fe5b906020010190600160f860020a031916908160001a905350600190930192610878565b509295945050505050565b6000600161096b87610a4d565b8585856040516000815260200160405260405193845260ff9092166020808501919091526040808501929092526060840192909252608090920191516020810390808403906000865af115156109c057600080fd5b505060206040510351600160a060020a031685600160a060020a031614905095945050505050565b60007f0a00000000000000000000000000000000000000000000000000000000000000600160f860020a031983161015610a34578160f860020a900460300160f860020a029050610a48565b8160f860020a900460570160f860020a0290505b919050565b6000610a57610b9e565b60408051908101604052601981527f18426974636f696e205369676e6564204d6573736167653a0a000000000000006020820152905060028082855160f860020a02866040518084805190602001908083835b60208310610ac95780518252601f199092019160209182019101610aaa565b6001836020036101000a0380198251168184511617909252505050600160f860020a0319861692019182525060010182805190602001908083835b60208310610b235780518252601f199092019160209182019101610b04565b6001836020036101000a03801982511681845116808217855250505050505090500193505050506020604051808303816000865af11515610b6357600080fd5b505060405180519050604051908152602090810190604051808303816000865af11515610b8f57600080fd5b50506040518051949350505050565b602060405190810160405260008152905600a165627a7a72305820fa0605735fceffd7dd1e5dd869c2f3eacfc6fa5a1baaa2104e345296eded13680029000000000000000000000000c5d350b854a6cff0fc5a38a115a90c774dcae1b9",
  "constructorArguments": "000000000000000000000000c5d350b854a6cff0fc5a38a115a90c774dcae1b9"
}