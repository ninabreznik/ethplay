{
  "address": "0x533ef0984b2faa227acc620c67cce12aa39cd8cd",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "XaurumGammaToken",
  "contractName": "XaurumGammaToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-14\n*/\n\ncontract SafeMath {\n    \n    uint256 constant public MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n    function safeAdd(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        require(x <= MAX_UINT256 - y);\n        return x + y;\n    }\n\n    function safeSub(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        require(x >= y);\n        return x - y;\n    }\n\n    function safeMul(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        if (y == 0) {\n            return 0;\n        }\n        require(x <= (MAX_UINT256 / y));\n        return x * y;\n    }\n}\ncontract Owned {\n    address public owner;\n    address public newOwner;\n\n    function Owned() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        assert(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        require(_newOwner != owner);\n        newOwner = _newOwner;\n    }\n\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        OwnerUpdate(owner, newOwner);\n        owner = newOwner;\n        newOwner = 0x0;\n    }\n\n    event OwnerUpdate(address _prevOwner, address _newOwner);\n}\ncontract Lockable is Owned {\n\n    uint256 public lockedUntilBlock;\n\n    event ContractLocked(uint256 _untilBlock, string _reason);\n\n    modifier lockAffected {\n        require(block.number > lockedUntilBlock);\n        _;\n    }\n\n    function lockFromSelf(uint256 _untilBlock, string _reason) internal {\n        lockedUntilBlock = _untilBlock;\n        ContractLocked(_untilBlock, _reason);\n    }\n\n\n    function lockUntil(uint256 _untilBlock, string _reason) onlyOwner public {\n        lockedUntilBlock = _untilBlock;\n        ContractLocked(_untilBlock, _reason);\n    }\n}\n\ncontract tokenRecipientInterface {\n  function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);\n}\ncontract OwnedInterface {\n    address public owner;\n    address public newOwner;\n\n    modifier onlyOwner {\n        _;\n    }\n}\ncontract ERC20TokenInterface {\n  function totalSupply() public constant returns (uint256 _totalSupply);\n  function balanceOf(address _owner) public constant returns (uint256 balance);\n  function transfer(address _to, uint256 _value) public returns (bool success);\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n  function approve(address _spender, uint256 _value) public returns (bool success);\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract ERC20PrivateInterface {\n    uint256 supply;\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowances;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract ERC20Token is ERC20TokenInterface, SafeMath, Owned, Lockable {\n\n    /* Public variables of the token */\n    string public standard;\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n\n    /* Private variables of the token */\n    uint256 supply = 0;\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowances;\n\n    event Mint(address indexed _to, uint256 _value);\n    event Burn(address indexed _from, uint _value);\n\n    /* Returns total supply of issued tokens */\n    function totalSupply() constant returns (uint256) {\n        return supply;\n    }\n\n    /* Returns balance of address */\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    /* Transfers tokens from your address to other */\n    function transfer(address _to, uint256 _value) lockAffected returns (bool success) {\n        require(_to != 0x0 && _to != address(this));\n        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);  // Deduct senders balance\n        balances[_to] = safeAdd(balanceOf(_to), _value);                // Add recivers blaance\n        Transfer(msg.sender, _to, _value);                              // Raise Transfer event\n        return true;\n    }\n\n    /* Approve other address to spend tokens on your account */\n    function approve(address _spender, uint256 _value) lockAffected returns (bool success) {\n        allowances[msg.sender][_spender] = _value;        // Set allowance\n        Approval(msg.sender, _spender, _value);           // Raise Approval event\n        return true;\n    }\n\n    /* Approve and then communicate the approved contract in a single tx */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) lockAffected returns (bool success) {\n        tokenRecipientInterface spender = tokenRecipientInterface(_spender);    // Cast spender to tokenRecipient contract\n        approve(_spender, _value);                                              // Set approval to contract for _value\n        spender.receiveApproval(msg.sender, _value, this, _extraData);          // Raise method on _spender contract\n        return true;\n    }\n\n    /* A contract attempts to get the coins */\n    function transferFrom(address _from, address _to, uint256 _value) lockAffected returns (bool success) {\n        require(_to != 0x0 && _to != address(this));\n        balances[_from] = safeSub(balanceOf(_from), _value);                            // Deduct senders balance\n        balances[_to] = safeAdd(balanceOf(_to), _value);                                // Add recipient blaance\n        allowances[_from][msg.sender] = safeSub(allowances[_from][msg.sender], _value); // Deduct allowance for this address\n        Transfer(_from, _to, _value);                                                   // Raise Transfer event\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowances[_owner][_spender];\n    }\n\n    function mint(address _to, uint256 _amount) onlyOwner {\n        supply = safeAdd(supply, _amount);\n        balances[_to] = safeAdd(balances[_to], _amount);\n        Mint(_to, _amount);\n        Transfer(0x0, _to, _amount);\n    }\n\n    function burn(uint _amount) lockAffected {\n        balances[msg.sender] = safeSub(balanceOf(msg.sender), _amount);\n        supply = safeSub(supply, _amount);\n        Burn(msg.sender, _amount);\n        Transfer(msg.sender, 0x0, _amount);\n    }\n\n    function salvageTokensFromContract(address _tokenAddress, address _to, uint _amount) onlyOwner {\n        ERC20TokenInterface(_tokenAddress).transfer(_to, _amount);\n    }\n}\n\ncontract XaurumGammaToken is ERC20Token {\n\n    /* Initializes contract */\n    function XaurumGammaToken() {\n        standard = \"XGM token v1.0\";\n        name = \"XaurumGamma\";\n        symbol = \"XGM\";\n        decimals = 8;\n        lockFromSelf(4352535, \"Lock before distribution\");\n    }\n}",
  "bytecode": "6060604052600060075534156200001557600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040805190810160405280600e81526020017f58474d20746f6b656e2076312e3000000000000000000000000000000000000081525060039080519060200190620000a29291906200026b565b506040805190810160405280600b81526020017f58617572756d47616d6d6100000000000000000000000000000000000000000081525060049080519060200190620000f09291906200026b565b506040805190810160405280600381526020017f58474d0000000000000000000000000000000000000000000000000000000000815250600590805190602001906200013e9291906200026b565b506008600660006101000a81548160ff021916908360ff160217905550620001b362426a176040805190810160405280601881526020017f4c6f636b206265666f726520646973747269627574696f6e0000000000000000815250620001b96401000000000262001a01176401000000009004565b6200031a565b816002819055507f2c1bcb4f0c190ca2fcb1bb54323892ec36606ef7958dc7a4e1dc599fe2c1c0f082826040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156200022b5780820151818401526020810190506200020e565b50505050905090810190601f168015620002595780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002ae57805160ff1916838001178555620002df565b82800160010185558215620002df579182015b82811115620002de578251825591602001919060010190620002c1565b5b509050620002ee9190620002f2565b5090565b6200031791905b8082111562000313576000816000905550600101620002f9565b5090565b90565b611adc806200032a6000396000f30060606040526004361061011d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610122578063095ea7b3146101b057806318160ddd1461020a57806323b872dd14610233578063313ce567146102ac57806333a581d2146102db57806340c10f191461030457806342966c68146103465780635a3b7e421461036957806370a08231146103f757806379ba5097146104445780638da5cb5b1461045957806395d89b41146104ae578063a0929cda1461053c578063a9059cbb1461059d578063b26eafe4146105f7578063cae9ca511461065d578063d4ee1d90146106fa578063d8162db71461074f578063dd62ed3e14610778578063f2fde38b146107e4575b600080fd5b341561012d57600080fd5b61013561081d565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561017557808201518184015260208101905061015a565b50505050905090810190601f1680156101a25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101bb57600080fd5b6101f0600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506108bb565b604051808215151515815260200191505060405180910390f35b341561021557600080fd5b61021d6109bd565b6040518082815260200191505060405180910390f35b341561023e57600080fd5b610292600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506109c7565b604051808215151515815260200191505060405180910390f35b34156102b757600080fd5b6102bf610c57565b604051808260ff1660ff16815260200191505060405180910390f35b34156102e657600080fd5b6102ee610c6a565b6040518082815260200191505060405180910390f35b341561030f57600080fd5b610344600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c8e565b005b341561035157600080fd5b6103676004808035906020019091905050610e26565b005b341561037457600080fd5b61037c610f3e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103bc5780820151818401526020810190506103a1565b50505050905090810190601f1680156103e95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561040257600080fd5b61042e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610fdc565b6040518082815260200191505060405180910390f35b341561044f57600080fd5b610457611025565b005b341561046457600080fd5b61046c611201565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156104b957600080fd5b6104c1611226565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105015780820151818401526020810190506104e6565b50505050905090810190601f16801561052e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561054757600080fd5b61059b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506112c4565b005b34156105a857600080fd5b6105dd600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506113e8565b604051808215151515815260200191505060405180910390f35b341561060257600080fd5b61065b600480803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611571565b005b341561066857600080fd5b6106e0600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611678565b604051808215151515815260200191505060405180910390f35b341561070557600080fd5b61070d6117fc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561075a57600080fd5b610762611822565b6040518082815260200191505060405180910390f35b341561078357600080fd5b6107ce600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611828565b6040518082815260200191505060405180910390f35b34156107ef57600080fd5b61081b600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506118af565b005b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108b35780601f10610888576101008083540402835291602001916108b3565b820191906000526020600020905b81548152906001019060200180831161089657829003601f168201915b505050505081565b6000600254431115156108cd57600080fd5b81600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600754905090565b6000600254431115156109d957600080fd5b60008373ffffffffffffffffffffffffffffffffffffffff1614158015610a2c57503073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b1515610a3757600080fd5b610a49610a4385610fdc565b836119a7565b600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a9e610a9884610fdc565b836119c3565b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b67600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836119a7565b600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600660009054906101000a900460ff1681565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ce657fe5b610cf2600754826119c3565b600781905550610d41600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826119c3565b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885826040518082815260200191505060405180910390a28173ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60025443111515610e3657600080fd5b610e48610e4233610fdc565b826119a7565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e97600754826119a7565b6007819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a260003373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350565b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fd45780601f10610fa957610100808354040283529160200191610fd4565b820191906000526020600020905b815481529060010190602001808311610fb757829003601f168201915b505050505081565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561108157600080fd5b7f343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112bc5780601f10611291576101008083540402835291602001916112bc565b820191906000526020600020905b81548152906001019060200180831161129f57829003601f168201915b505050505081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561131c57fe5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15156113c757600080fd5b6102c65a03f115156113d857600080fd5b5050506040518051905050505050565b6000600254431115156113fa57600080fd5b60008373ffffffffffffffffffffffffffffffffffffffff161415801561144d57503073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b151561145857600080fd5b61146a61146433610fdc565b836119a7565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506114bf6114b984610fdc565b836119c3565b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115c957fe5b816002819055507f2c1bcb4f0c190ca2fcb1bb54323892ec36606ef7958dc7a4e1dc599fe2c1c0f082826040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561163957808201518184015260208101905061161e565b50505050905090810190601f1680156116665780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050565b6000806002544311151561168b57600080fd5b84905061169885856108bb565b508073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561178e578082015181840152602081019050611773565b50505050905090810190601f1680156117bb5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15156117dc57600080fd5b6102c65a03f115156117ed57600080fd5b50505060019150509392505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b6000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561190757fe5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561196357600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008183101515156119b857600080fd5b818303905092915050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383111515156119f657600080fd5b818301905092915050565b816002819055507f2c1bcb4f0c190ca2fcb1bb54323892ec36606ef7958dc7a4e1dc599fe2c1c0f082826040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611a71578082015181840152602081019050611a56565b50505050905090810190601f168015611a9e5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a150505600a165627a7a7230582059b0163ec2334fa4ca617bec02153e40e94bc3431d55930767efca28721541520029"
}