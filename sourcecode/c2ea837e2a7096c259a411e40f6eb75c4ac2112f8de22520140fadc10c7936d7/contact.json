{
  "address": "0x1f698d77b071efeff498ac906f4105b4a6a2606f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MultiSend",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": true,
  "runs": "0",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-21\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract MultiSend {\n  function multiSend(address _token, address[] addresses, uint amount) public {\n    ERC20 token = ERC20(_token);\n    for(uint i = 0; i < addresses.length; i++) {\n      require(token.transferFrom(msg.sender, addresses[i], amount));\n    }\n  }\n  function multiSendEth(address[] addresses) public payable {\n    for(uint i = 0; i < addresses.length; i++) {\n      addresses[i].transfer(msg.value / addresses.length);\n    }\n    msg.sender.transfer(this.balance);\n  }\n}",
  "bytecode": "6060604052341561000f57600080fd5b6102728061001e6000396000f3006060604052600436106100325763ffffffff60e060020a6000350416635b2a0e968114610037578063aafafbf314610098575b600080fd5b341561004257600080fd5b61009660048035600160a060020a031690604460248035908101908301358060208082020160405190810160405280939291908181526020018383602002808284375094965050933593506100dc92505050565b005b610096600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284375094965061019d95505050505050565b8260005b83518110156101965781600160a060020a03166323b872dd3386848151811061010557fe5b906020019060200201518660006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561016857600080fd5b6102c65a03f1151561017957600080fd5b50505060405180519050151561018e57600080fd5b6001016100e0565b5050505050565b60005b8151811015610205578181815181106101b557fe5b90602001906020020151600160a060020a03166108fc8351348115156101d757fe5b049081150290604051600060405180830381858888f1935050505015156101fd57600080fd5b6001016101a0565b33600160a060020a03166108fc30600160a060020a0316319081150290604051600060405180830381858888f19350505050151561024257600080fd5b50505600a165627a7a72305820b2c918e84bb420b8a563a0c510204a0b8f59d06d85511ff0b10988f5754aa5240029"
}