{
  "address": "0xc81ec8a2a711e96d977a48252ac694e1d4b5719d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GTCoin",
  "compilerVersion": "v0.4.17+commit.bdeb9e52",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-02\n*/\n\npragma solidity ^0.4.0;\n\ninterface ERC20 {\n    function transferFrom(address _from, address _to, uint _value) public returns (bool);\n    function approve(address _spender, uint _value) public returns (bool);\n    function allowance(address _owner, address _spender) public constant returns (uint);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\ninterface ERC223 {\n    function transfer(address _to, uint _value, bytes _data) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n}\n\ncontract ERC223ReceivingContract {\n    function tokenFallback(address _from, uint _value, bytes _data) public;\n}\n\ncontract Token {\n    string internal _symbol;\n    string internal _name;\n    uint8 internal _decimals;\n    uint internal _totalSupply;\n    mapping (address => uint) internal _balanceOf;\n    mapping (address => mapping (address => uint)) internal _allowances;\n\n    function Token(string symbol, string name, uint8 decimals, uint totalSupply) public {\n        _symbol = symbol;\n        _name = name;\n        _decimals = decimals;\n        _totalSupply = totalSupply;\n    }\n\n    function name() public constant returns (string) {\n        return _name;\n    }\n\n    function symbol() public constant returns (string) {\n        return _symbol;\n    }\n\n    function decimals() public constant returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public constant returns (uint) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address _addr) public constant returns (uint);\n    function transfer(address _to, uint _value) public returns (bool);\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract GTCoin is Token(\"GTC\", \"GTCoin\", 18, 100000000000000000000000000), ERC20, ERC223 {\n\n    using SafeMath for uint;\n\n    function GTCoin() public {\n        _balanceOf[msg.sender] = _totalSupply;\n    }\n\n    function totalSupply() public constant returns (uint) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address _addr) public constant returns (uint) {\n        return _balanceOf[_addr];\n    }\n\n    function transfer(address _to, uint _value) public returns (bool) {\n        if (_value > 0 && _value <= _balanceOf[msg.sender]) {\n            bytes memory empty;\n            _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(_value);\n            _balanceOf[_to] = _balanceOf[_to].add(_value);\n\n            if (isContract(_to)) {\n                ERC223ReceivingContract _contract = ERC223ReceivingContract(_to);\n                _contract.tokenFallback(msg.sender, _value, empty);\n            }\n            Transfer(msg.sender, _to, _value);\n            return true;\n        }\n        return false;\n    }\n\n    function transfer(address _to, uint _value, bytes _data) public returns (bool) {\n        if (_value > 0 && _value <= _balanceOf[msg.sender]) {\n            _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(_value);\n            _balanceOf[_to] = _balanceOf[_to].add(_value);\n\n            if (isContract(_to)) {\n                ERC223ReceivingContract _contract = ERC223ReceivingContract(_to);\n                _contract.tokenFallback(msg.sender, _value, _data);\n            }\n\n            Transfer(msg.sender, _to, _value, _data);\n            return true;\n        }\n        return false;\n    }\n\n    function isContract(address _addr) private constant returns (bool) {\n        uint codeSize;\n        assembly {\n            codeSize := extcodesize(_addr)\n        }\n        return codeSize > 0;\n    }\n\n    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n        if (_allowances[_from][msg.sender] > 0 && _value > 0 && _allowances[_from][msg.sender] >= _value && _balanceOf[_from] >= _value) {\n            _balanceOf[_from] = _balanceOf[_from].sub(_value);\n            _balanceOf[_to] = _balanceOf[_to].add(_value);\n            _allowances[_from][msg.sender] = _allowances[_from][msg.sender].sub(_value);\n            Transfer(_from, _to, _value);\n            return true;\n        }\n        return false;\n    }\n\n    function approve(address _spender, uint _value) public returns (bool) {\n        _allowances[msg.sender][_spender] = _allowances[msg.sender][_spender].add(_value);\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public constant returns (uint) {\n        return _allowances[_owner][_spender];\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b604080519081016040908152600382527f475443000000000000000000000000000000000000000000000000000000000060208301528051908101604052600681527f4754436f696e0000000000000000000000000000000000000000000000000000602082015260126a52b7d2dcc80cd2e400000060008480516100989291602001906100e8565b5060018380516100ac9291602001906100e8565b506002805460ff191660ff9390931692909217909155600381905533600160a060020a0316600090815260046020526040902055506101839050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061012957805160ff1916838001178555610156565b82800160010185558215610156579182015b8281111561015657825182559160200191906001019061013b565b50610162929150610166565b5090565b61018091905b80821115610162576000815560010161016c565b90565b610b1b806101926000396000f300606060405236156100885763ffffffff60e060020a60003504166306fdde03811461008d578063095ea7b31461011757806318160ddd1461014d57806323b872dd14610172578063313ce5671461019a57806370a08231146101c357806395d89b41146101e2578063a9059cbb146101f5578063be45fd6214610217578063dd62ed3e1461027c575b600080fd5b341561009857600080fd5b6100a06102a1565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156100dc5780820151838201526020016100c4565b50505050905090810190601f1680156101095780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561012257600080fd5b610139600160a060020a0360043516602435610349565b604051901515815260200160405180910390f35b341561015857600080fd5b6101606103ed565b60405190815260200160405180910390f35b341561017d57600080fd5b610139600160a060020a03600435811690602435166044356103f3565b34156101a557600080fd5b6101ad6105a4565b60405160ff909116815260200160405180910390f35b34156101ce57600080fd5b610160600160a060020a03600435166105ad565b34156101ed57600080fd5b6100a06105c8565b341561020057600080fd5b610139600160a060020a036004351660243561063b565b341561022257600080fd5b61013960048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061083895505050505050565b341561028757600080fd5b610160600160a060020a0360043581169060243516610a89565b6102a9610add565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561033f5780601f106103145761010080835404028352916020019161033f565b820191906000526020600020905b81548152906001019060200180831161032257829003601f168201915b5050505050905090565b600160a060020a033381166000908152600560209081526040808320938616835292905290812054610381908363ffffffff610ab416565b600160a060020a03338116600081815260056020908152604080832094891680845294909152908190209390935590917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60035490565b600160a060020a03808416600090815260056020908152604080832033909416835292905290812054819011801561042b5750600082115b801561045e5750600160a060020a0380851660009081526005602090815260408083203390941683529290522054829010155b80156104835750600160a060020a038416600090815260046020526040902054829010155b1561059957600160a060020a0384166000908152600460205260409020546104b1908363ffffffff610ac316565b600160a060020a0380861660009081526004602052604080822093909355908516815220546104e6908363ffffffff610ab416565b600160a060020a0380851660009081526004602090815260408083209490945587831682526005815283822033909316825291909152205461052e908363ffffffff610ac316565b600160a060020a03808616600081815260056020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600161059d565b5060005b9392505050565b60025460ff1690565b600160a060020a031660009081526004602052604090205490565b6105d0610add565b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561033f5780601f106103145761010080835404028352916020019161033f565b6000610645610add565b6000808411801561066e5750600160a060020a0333166000908152600460205260409020548411155b1561082b57600160a060020a03331660009081526004602052604090205461069c908563ffffffff610ac316565b600160a060020a0333811660009081526004602052604080822093909355908716815220546106d1908563ffffffff610ab416565b600160a060020a0386166000908152600460205260409020556106f385610ad5565b156107db575083600160a060020a03811663c0ee0b8a3386856040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610779578082015183820152602001610761565b50505050905090810190601f1680156107a65780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15156107c657600080fd5b6102c65a03f115156107d757600080fd5b5050505b84600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8660405190815260200160405180910390a360019250610830565b600092505b505092915050565b6000806000841180156108635750600160a060020a0333166000908152600460205260409020548411155b15610a7c57600160a060020a033316600090815260046020526040902054610891908563ffffffff610ac316565b600160a060020a0333811660009081526004602052604080822093909355908716815220546108c6908563ffffffff610ab416565b600160a060020a0386166000908152600460205260409020556108e885610ad5565b156109d0575083600160a060020a03811663c0ee0b8a3386866040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561096e578082015183820152602001610956565b50505050905090810190601f16801561099b5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15156109bb57600080fd5b6102c65a03f115156109cc57600080fd5b5050505b826040518082805190602001908083835b60208310610a005780518252601f1990920191602091820191016109e1565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902085600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c168760405190815260200160405180910390a460019150610a81565b600091505b509392505050565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b60008282018381101561059d57fe5b600082821115610acf57fe5b50900390565b6000903b1190565b602060405190810160405260008152905600a165627a7a72305820e92a72f0883d8234ff5c9582a3ebbd0d69ce4e01ef85b3d90b37807c5597fbd70029"
}