{
  "address": "0xfe50dd5f60705f093371b1589794a1e39ce5a435",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SNGTContract",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-28\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title ERC20Interface\n * @dev Standard version of ERC20 interface\n */\ncontract ERC20Interface {\n    uint256 public totalSupply;\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n    /**\n     * @dev The Ownable constructor sets the original `owner`\n     * of the contract to the sender account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the current owner\n     */\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner\n     * @param newOwner The address to transfer ownership to\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        owner = newOwner;\n    }\n}\n\n/**\n * @title SNGT\n * @dev Implemantation of the SNGT token\n */\ncontract SNGTContract is Ownable, ERC20Interface {\n    using SafeMath for uint256;\n\n    string public constant symbol = \"SNGT\";\n    string public constant name = \"SNGT\";\n    uint8 public constant decimals = 18;\n    uint256 private _unmintedTokens = 500000000 * uint(10) ** decimals;\n\n    mapping(address => uint256) balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Burn(address indexed _address, uint256 _value);\n    event Mint(address indexed _address, uint256 _value);\n\n    /**\n     * @dev Gets the balance of the specified address\n     * @param _owner The address to query the the balance of\n     * @return An uint256 representing the amount owned by the passed address\n     */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    /**\n     * @dev Transfer token to a specified address\n     * @param _to The address to transfer to\n     * @param _value The amount to be transferred\n     */\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(_to != address(0));\n        require(balances[msg.sender] >= _value);\n        assert(balances[_to] + _value >= balances[_to]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from The address which you want to send tokens from\n     * @param _to The address which you want to transfer to\n     * @param _value The amout of tokens to be transfered\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        assert(balances[_to] + _value >= balances[_to]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub( _value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender\n     * @param _spender The address which will spend the funds\n     * @param _value The amount of tokens to be spent\n     */\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens than an owner allowed to a spender\n     * @param _owner The address which owns the funds\n     * @param _spender The address which will spend the funds\n     * @return A uint specifing the amount of tokens still avaible for the spender\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * @dev Mint SNGT tokens. No more than 500,000,000 SNGT can be minted\n     * @param _account The address to which new tokens will be minted\n     * @param _mintedAmount The amout of tokens to be minted\n     */\n    function mintTokens(address _account, uint256 _mintedAmount) public onlyOwner returns (bool success){\n        require(_mintedAmount <= _unmintedTokens);\n\n        balances[_account] = balances[_account].add(_mintedAmount);\n        _unmintedTokens = _unmintedTokens.sub(_mintedAmount);\n        totalSupply = totalSupply.add(_mintedAmount);\n        emit Mint(_account, _mintedAmount);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0.\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address _spender, uint256 _addedValue) public returns (bool) {\n        require(_spender != address(0));\n\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0.\n     * Emits an Approval event.\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address _spender, uint256 _subtractedValue) public returns (bool) {\n        require(_spender != address(0));\n\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].sub(_subtractedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n     * @dev Mint SNGT tokens and aproves the passed address to spend the minted amount of tokens\n     * No more than 500,000,000 SNGT can be minted\n     * @param _target The address to which new tokens will be minted\n     * @param _mintedAmount The amout of tokens to be minted\n     * @param _spender The address which will spend minted funds\n     */\n    function mintTokensWithApproval(address _target, uint256 _mintedAmount, address _spender) public onlyOwner returns (bool success){\n        require(_mintedAmount <= _unmintedTokens);\n\n        balances[_target] = balances[_target].add(_mintedAmount);\n        _unmintedTokens = _unmintedTokens.sub(_mintedAmount);\n        totalSupply = totalSupply.add(_mintedAmount);\n        allowed[_target][_spender] = allowed[_target][_spender].add(_mintedAmount);\n        emit Mint(_target, _mintedAmount);\n        return true;\n    }\n\n    /**\n     * @dev Decrease amount of SNGT tokens that can be minted\n     * @param _burnedAmount The amount of unminted tokens to be burned\n     */\n    function burnUnmintedTokens(uint256 _burnedAmount) public onlyOwner returns (bool success){\n        require(_burnedAmount <= _unmintedTokens);\n        _unmintedTokens = _unmintedTokens.sub(_burnedAmount);\n        emit Burn(msg.sender, _burnedAmount);\n        return true;\n    }\n\n\n    /**\n     * @dev Function that burns an amount of the token of a given\n     * account.\n     * @param _account The account whose tokens will be burnt.\n     * @param _value The amount that will be burnt.\n     */\n    function burn(address _account, uint256 _value) onlyOwner public {\n        require(_account != address(0));\n\n        totalSupply = totalSupply.sub(_value);\n        balances[_account] = balances[_account].sub(_value);\n\n        emit Burn(_account, _value);\n\n    }\n\n    /**\n     * @dev Function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param _account The account whose tokens will be burnt.\n     * @param _value The amount that will be burnt.\n     */\n    function burnFrom(address _account, uint256 _value) onlyOwner public {\n        allowed[_account][msg.sender] = allowed[_account][msg.sender].sub(_value);\n        burn(_account, _value);\n\n        emit Burn(_account, _value);\n    }\n\n\n    /**\n     * @dev Returns the number of unminted token\n     */\n    function unmintedTokens() onlyOwner view public returns (uint256 tokens){\n        return _unmintedTokens;\n    }\n\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    uint256 c = _a * _b;\n    assert(c / _a == _b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    uint256 c = _a - _b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    uint256 c = _a + _b;\n    assert(c >= _a);\n\n    return c;\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_mintedAmount\",\"type\":\"uint256\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"mintTokensWithApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_burnedAmount\",\"type\":\"uint256\"}],\"name\":\"burnUnmintedTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unmintedTokens\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"}]",
  "bytecode": "60806040526b019d971e4fe8401e7400000060025560008054600160a060020a03191633179055610d88806100356000396000f3006080604052600436106101065763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461010b578063095ea7b31461019557806318160ddd146101cd57806323b872dd146101f4578063313ce5671461021e578063395093511461024957806370a082311461026d57806379cc67901461028e5780638da5cb5b146102b457806391fe7bab146102e557806395d89b411461010b5780639dc29fac14610310578063a457c2d714610334578063a9059cbb14610358578063dc8855271461037c578063dd62ed3e14610394578063e21827a1146103bb578063f0dda65c146103d0578063f2fde38b146103f4575b600080fd5b34801561011757600080fd5b50610120610415565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561015a578181015183820152602001610142565b50505050905090810190601f1680156101875780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101a157600080fd5b506101b9600160a060020a036004351660243561044c565b604080519115158252519081900360200190f35b3480156101d957600080fd5b506101e26104b2565b60408051918252519081900360200190f35b34801561020057600080fd5b506101b9600160a060020a03600435811690602435166044356104b8565b34801561022a57600080fd5b50610233610655565b6040805160ff9092168252519081900360200190f35b34801561025557600080fd5b506101b9600160a060020a036004351660243561065a565b34801561027957600080fd5b506101e2600160a060020a036004351661070a565b34801561029a57600080fd5b506102b2600160a060020a0360043516602435610725565b005b3480156102c057600080fd5b506102c96107e1565b60408051600160a060020a039092168252519081900360200190f35b3480156102f157600080fd5b506101b9600160a060020a0360043581169060243590604435166107f0565b34801561031c57600080fd5b506102b2600160a060020a0360043516602435610922565b34801561034057600080fd5b506101b9600160a060020a03600435166024356109e3565b34801561036457600080fd5b506101b9600160a060020a0360043516602435610a2e565b34801561038857600080fd5b506101b9600435610b35565b3480156103a057600080fd5b506101e2600160a060020a0360043581169060243516610bb0565b3480156103c757600080fd5b506101e2610bdb565b3480156103dc57600080fd5b506101b9600160a060020a0360043516602435610bfa565b34801561040057600080fd5b506102b2600160a060020a0360043516610cd7565b60408051808201909152600481527f534e475400000000000000000000000000000000000000000000000000000000602082015281565b336000818152600460209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60015481565b6000600160a060020a03831615156104cf57600080fd5b600160a060020a0384166000908152600360205260409020548211156104f457600080fd5b600160a060020a038416600090815260046020908152604080832033845290915290205482111561052457600080fd5b600160a060020a038316600090815260036020526040902054828101101561054857fe5b600160a060020a038416600090815260036020526040902054610571908363ffffffff610d3216565b600160a060020a0380861660009081526003602052604080822093909355908516815220546105a6908363ffffffff610d4616565b600160a060020a0380851660009081526003602090815260408083209490945591871681526004825282812033825290915220546105ea908363ffffffff610d3216565b600160a060020a03808616600081815260046020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b601281565b6000600160a060020a038316151561067157600080fd5b336000908152600460209081526040808320600160a060020a03871684529091529020546106a5908363ffffffff610d4616565b336000818152600460209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a031660009081526003602052604090205490565b600054600160a060020a0316331461073c57600080fd5b600160a060020a0382166000908152600460209081526040808320338452909152902054610770908263ffffffff610d3216565b600160a060020a038316600090815260046020908152604080832033845290915290205561079e8282610922565b604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a25050565b600054600160a060020a031681565b60008054600160a060020a0316331461080857600080fd5b60025483111561081757600080fd5b600160a060020a038416600090815260036020526040902054610840908463ffffffff610d4616565b600160a060020a03851660009081526003602052604090205560025461086c908463ffffffff610d3216565b600255600154610882908463ffffffff610d4616565b600155600160a060020a038085166000908152600460209081526040808320938616835292905220546108bb908463ffffffff610d4616565b600160a060020a038086166000818152600460209081526040808320948816835293815290839020939093558151868152915190927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885928290030190a25060019392505050565b600054600160a060020a0316331461093957600080fd5b600160a060020a038216151561094e57600080fd5b600154610961908263ffffffff610d3216565b600155600160a060020a03821660009081526003602052604090205461098d908263ffffffff610d3216565b600160a060020a038316600081815260036020908152604091829020939093558051848152905191927fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca592918290030190a25050565b6000600160a060020a03831615156109fa57600080fd5b336000908152600460209081526040808320600160a060020a03871684529091529020546106a5908363ffffffff610d3216565b6000600160a060020a0383161515610a4557600080fd5b33600090815260036020526040902054821115610a6157600080fd5b600160a060020a0383166000908152600360205260409020548281011015610a8557fe5b33600090815260036020526040902054610aa5908363ffffffff610d3216565b3360009081526003602052604080822092909255600160a060020a03851681522054610ad7908363ffffffff610d4616565b600160a060020a0384166000818152600360209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b60008054600160a060020a03163314610b4d57600080fd5b600254821115610b5c57600080fd5b600254610b6f908363ffffffff610d3216565b60025560408051838152905133917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2506001919050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205490565b60008054600160a060020a03163314610bf357600080fd5b5060025490565b60008054600160a060020a03163314610c1257600080fd5b600254821115610c2157600080fd5b600160a060020a038316600090815260036020526040902054610c4a908363ffffffff610d4616565b600160a060020a038416600090815260036020526040902055600254610c76908363ffffffff610d3216565b600255600154610c8c908363ffffffff610d4616565b600155604080518381529051600160a060020a038516917f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885919081900360200190a250600192915050565b600054600160a060020a03163314610cee57600080fd5b600160a060020a0381161515610d0357600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008083831115610d3f57fe5b5050900390565b600082820183811015610d5557fe5b93925050505600a165627a7a72305820262dca1f93fdbac4bafa8192d4c4e833fc8bacb303b1c3c67c180bb25de38edd0029"
}