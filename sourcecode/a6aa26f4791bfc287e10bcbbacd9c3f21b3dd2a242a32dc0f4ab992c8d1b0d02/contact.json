{
  "address": "0x2ce59e1f4c4159e087d1e2e16db2b606f67a2f3a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EraSwapToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-19\n*/\n\npragma solidity 0.4.24;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor () public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    /// Total amount of tokens\n  uint256 public totalSupply;\n  \n  function balanceOf(address _owner) public view returns (uint256 balance);\n  \n  function transfer(address _to, uint256 _amount) public returns (bool success);\n  \n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n  \n  function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success);\n  \n  function approve(address _spender, uint256 _amount) public returns (bool success);\n  \n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  //balance in each address account\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _amount The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _amount) public returns (bool success) {\n    require(_to != address(0));\n    require(balances[msg.sender] >= _amount && _amount > 0\n        && balances[_to].add(_amount) > balances[_to]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Transfer(msg.sender, _to, _amount);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n */\ncontract StandardToken is ERC20, BasicToken {\n  \n  \n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _amount uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\n    require(_to != address(0));\n    require(balances[_from] >= _amount);\n    require(allowed[_from][msg.sender] >= _amount);\n    require(_amount > 0 && balances[_to].add(_amount) > balances[_to]);\n\n    balances[_from] = balances[_from].sub(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n    emit Transfer(_from, _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _amount The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _amount) public returns (bool success) {\n    allowed[msg.sender][_spender] = _amount;\n    emit Approval(msg.sender, _spender, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is StandardToken, Ownable {\n\n    event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n\n  function burn(uint256 _value) public {\n\n    _burn(msg.sender, _value);\n\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply = totalSupply.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n} \n\n/**\n * @title Mintable token\n * @dev ERC20 token, with mintable token creation\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is StandardToken, Ownable {\n    using SafeMath for uint256;\n\n  mapping(address => uint256)public shares;\n  \n  address[] public beneficiaries;\n \n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n  event BeneficiariesAdded();\n  \n  uint256 public lastMintingTime;\n  uint256 public mintingStartTime = 1543622400;\n  uint256 public mintingThreshold = 31536000;\n  uint256 public lastMintedTokens = 91000000000000000;\n\n  bool public mintingFinished = false;\n  \n  \n\n  modifier canMint() {\n    require(!mintingFinished);\n    require(totalSupply < 910000000000000000);// Total minting has not yet been finished\n    require(beneficiaries.length == 7);//Check beneficiaries has been added\n    _;\n  }\n\n  modifier hasMintPermission() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @return A boolean that indicates if the operation was successful.\n   */\n\n  function mint() hasMintPermission  canMint public  returns (bool){\n    \n    uint256 _amount = tokensToMint();\n    \n    totalSupply = totalSupply.add(_amount);\n    \n    \n    for(uint8 i = 0; i<beneficiaries.length; i++){\n        \n        balances[beneficiaries[i]] = balances[beneficiaries[i]].add(_amount.mul(shares[beneficiaries[i]]).div(100));\n        emit Mint(beneficiaries[i], _amount.mul(shares[beneficiaries[i]]).div(100));\n        emit Transfer(address(0), beneficiaries[i], _amount.mul(shares[beneficiaries[i]]).div(100));\n    }\n    \n    lastMintingTime = now;\n    \n   \n     return true;\n  }\n  \n  //Return how much tokens will be minted as per algorithm. Each year 10% tokens will be reduced\n  function tokensToMint()private returns(uint256 _tokensToMint){\n      \n      uint8 tiersToBeMinted = currentTier() - getTierForLastMiniting();\n      \n      require(tiersToBeMinted>0);\n      \n      for(uint8 i = 0;i<tiersToBeMinted;i++){\n          _tokensToMint = _tokensToMint.add(lastMintedTokens.sub(lastMintedTokens.mul(10).div(100)));\n          lastMintedTokens = lastMintedTokens.sub(lastMintedTokens.mul(10).div(100));\n      }\n      \n      return _tokensToMint;\n      \n  }\n \n  function currentTier()private view returns(uint8 _tier) {\n      \n      uint256 currentTime = now;\n      \n      uint256 nextTierStartTime = mintingStartTime;\n      \n      while(nextTierStartTime < currentTime) {\n          nextTierStartTime = nextTierStartTime.add(mintingThreshold);\n          _tier++;\n      }\n      \n      return _tier;\n      \n  }\n  \n  function getTierForLastMiniting()private view returns(uint8 _tier) {\n      \n       uint256 nextTierStartTime = mintingStartTime;\n      \n      while(nextTierStartTime < lastMintingTime) {\n          nextTierStartTime = nextTierStartTime.add(mintingThreshold);\n          _tier++;\n      }\n      \n      return _tier;\n      \n  }\n  \n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n\n\nfunction beneficiariesPercentage(address[] _beneficiaries, uint256[] percentages) onlyOwner external returns(bool){\n   \n    require(_beneficiaries.length == 7);\n    require(percentages.length == 7);\n    \n    uint256 sumOfPercentages;\n    \n    if(beneficiaries.length>0) {\n        \n        for(uint8 j = 0;j<beneficiaries.length;j++) {\n            \n            shares[beneficiaries[j]] = 0;\n            delete beneficiaries[j];\n            \n            \n        }\n        beneficiaries.length = 0;\n        \n    }\n\n    for(uint8 i = 0; i < _beneficiaries.length; i++){\n\n      require(_beneficiaries[i] != 0x0);\n      require(percentages[i] > 0);\n      beneficiaries.push(_beneficiaries[i]);\n      \n      shares[_beneficiaries[i]] = percentages[i];\n      sumOfPercentages = sumOfPercentages.add(percentages[i]); \n     \n    }\n\n    require(sumOfPercentages == 100);\n    emit BeneficiariesAdded();\n    return true;\n  } \n}\n\n/**\n * @title ERA Swap Token \n * @dev Token representing EST.\n */\n contract EraSwapToken is BurnableToken, MintableToken{\n     string public name ;\n     string public symbol ;\n     uint8 public decimals = 8 ;\n     \n     /**\n     *@dev users sending ether to this contract will be reverted. Any ether sent to the contract will be sent back to the caller\n     */\n     function ()public payable {\n         revert();\n     }\n     \n     /**\n     * @dev Constructor function to initialize the initial supply of token to the creator of the contract\n     * @param initialSupply The initial supply of tokens which will be fixed through out\n     * @param tokenName The name of the token\n     * @param tokenSymbol The symboll of the token\n     */\n     constructor (\n            uint256 initialSupply,\n            string tokenName,\n            string tokenSymbol\n         ) public {\n         totalSupply = initialSupply.mul( 10 ** uint256(decimals)); //Update total supply with the decimal amount\n         name = tokenName;\n         symbol = tokenSymbol;\n         balances[msg.sender] = totalSupply;\n         \n         //Emitting transfer event since assigning all tokens to the creator also corresponds to the transfer of tokens to the creator\n         emit Transfer(address(0), msg.sender, totalSupply);\n     }\n     \n     /**\n     *@dev helper method to get token details, name, symbol and totalSupply in one go\n     */\n    function getTokenDetail() public view returns (string, string, uint256) {\n\t    return (name, symbol, totalSupply);\n    }\n }",
  "bytecode": "6080604052635c01cf006007556301e1338060089081556701434c04928f8000600955600a805460ff19908116909155600d805490911690911790553480156200004857600080fd5b50604051620016d4380380620016d4833981016040908152815160208301519183015160038054600160a060020a03191633179055600d549193928301920190620000a990849060ff16600a0a6401000000006200127e6200012c82021704565b6000558151620000c190600b90602085019062000166565b508051620000d790600c90602084019062000166565b5060008054338083526001602090815260408085208490558051938452519193927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050506200020b565b6000808315156200014157600091506200015f565b508282028284828115156200015257fe5b04146200015b57fe5b8091505b5092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001a957805160ff1916838001178555620001d9565b82800160010185558215620001d9579182015b82811115620001d9578251825591602001919060010190620001bc565b50620001e7929150620001eb565b5090565b6200020891905b80821115620001e75760008155600101620001f2565b90565b6114b9806200021b6000396000f3006080604052600436106101325763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461013757806306fdde0314610160578063095ea7b3146101ea5780631249c58b1461020e57806318160ddd1461022357806323b872dd1461024a578063289de615146102745780632af05c4e1461036e5780632e368e0314610383578063313ce567146103af57806342966c68146103da57806370a08231146103f45780637d64bcb41461041557806387b557051461042a5780638da5cb5b1461043f57806395d89b4114610470578063a9059cbb14610485578063ce7c2ac2146104a9578063dd62ed3e146104ca578063dfef5f69146104f1578063e3aeedc414610506578063efeb5e581461051b578063f2fde38b14610533575b600080fd5b34801561014357600080fd5b5061014c610554565b604080519115158252519081900360200190f35b34801561016c57600080fd5b5061017561055d565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101af578181015183820152602001610197565b50505050905090810190601f1680156101dc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101f657600080fd5b5061014c600160a060020a03600435166024356105eb565b34801561021a57600080fd5b5061014c610651565b34801561022f57600080fd5b50610238610916565b60408051918252519081900360200190f35b34801561025657600080fd5b5061014c600160a060020a036004358116906024351660443561091c565b34801561028057600080fd5b50610289610ac4565b604051808060200180602001848152602001838103835286818151815260200191508051906020019080838360005b838110156102d05781810151838201526020016102b8565b50505050905090810190601f1680156102fd5780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b83811015610330578181015183820152602001610318565b50505050905090810190601f16801561035d5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b34801561037a57600080fd5b50610238610c05565b34801561038f57600080fd5b5061014c6024600480358281019290820135918135918201910135610c0b565b3480156103bb57600080fd5b506103c4610e79565b6040805160ff9092168252519081900360200190f35b3480156103e657600080fd5b506103f2600435610e82565b005b34801561040057600080fd5b50610238600160a060020a0360043516610e8f565b34801561042157600080fd5b5061014c610eaa565b34801561043657600080fd5b50610238610f36565b34801561044b57600080fd5b50610454610f3c565b60408051600160a060020a039092168252519081900360200190f35b34801561047c57600080fd5b50610175610f4b565b34801561049157600080fd5b5061014c600160a060020a0360043516602435610fa6565b3480156104b557600080fd5b50610238600160a060020a03600435166110b7565b3480156104d657600080fd5b50610238600160a060020a03600435811690602435166110c9565b3480156104fd57600080fd5b506102386110f4565b34801561051257600080fd5b506102386110fa565b34801561052757600080fd5b50610454600435611100565b34801561053f57600080fd5b506103f2600160a060020a0360043516611128565b600a5460ff1681565b600b805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105e35780601f106105b8576101008083540402835291602001916105e3565b820191906000526020600020905b8154815290600101906020018083116105c657829003601f168201915b505050505081565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60035460009081908190600160a060020a0316331461066f57600080fd5b600a5460ff161561067f57600080fd5b600054670ca0f82db99b00001161069557600080fd5b6005546007146106a457600080fd5b6106ac6111bd565b6000549092506106c2908363ffffffff61126416565b600090815590505b60055460ff8216101561090a5761077d610736606461072a6004600060058760ff168154811015156106f857fe5b6000918252602080832090910154600160a060020a03168352820192909252604001902054869063ffffffff61127e16565b9063ffffffff6112a916565b6001600060058560ff1681548110151561074c57fe5b6000918252602080832090910154600160a060020a031683528201929092526040019020549063ffffffff61126416565b6001600060058460ff1681548110151561079357fe5b6000918252602080832090910154600160a060020a031683528201929092526040019020556005805460ff83169081106107c957fe5b600091825260208220015460058054600160a060020a03909216927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885926108549260649261072a926004929060ff8a1690811061082257fe5b6000918252602080832090910154600160a060020a03168352820192909252604001902054879063ffffffff61127e16565b60408051918252519081900360200190a26005805460ff831690811061087657fe5b600091825260208220015460058054600160a060020a03909216929160008051602061146e833981519152916108f19160649161072a91600491879160ff8b169081106108bf57fe5b6000918252602080832090910154600160a060020a03168352820192909252604001902054889063ffffffff61127e16565b60408051918252519081900360200190a36001016106ca565b50504260065550600190565b60005481565b6000600160a060020a038316151561093357600080fd5b600160a060020a03841660009081526001602052604090205482111561095857600080fd5b600160a060020a038416600090815260026020908152604080832033845290915290205482111561098857600080fd5b6000821180156109be5750600160a060020a0383166000908152600160205260409020546109bc818463ffffffff61126416565b115b15156109c957600080fd5b600160a060020a0384166000908152600160205260409020546109f2908363ffffffff6112c016565b600160a060020a038086166000908152600160205260408082209390935590851681522054610a27908363ffffffff61126416565b600160a060020a038085166000908152600160209081526040808320949094559187168152600282528281203382529091522054610a6b908363ffffffff6112c016565b600160a060020a038086166000818152600260209081526040808320338452825291829020949094558051868152905192871693919260008051602061146e833981519152929181900390910190a35060019392505050565b6060806000600b600c600054828054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b655780601f10610b3a57610100808354040283529160200191610b65565b820191906000526020600020905b815481529060010190602001808311610b4857829003601f168201915b5050855460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815295985087945092508401905082828015610bf35780601f10610bc857610100808354040283529160200191610bf3565b820191906000526020600020905b815481529060010190602001808311610bd657829003601f168201915b50505050509150925092509250909192565b60065481565b600354600090819081908190600160a060020a03163314610c2b57600080fd5b60078714610c3857600080fd5b60078514610c4557600080fd5b60055460001015610cf157600091505b60055460ff83161015610ce25760006004600060058560ff16815481101515610c7a57fe5b6000918252602080832090910154600160a060020a031683528201929092526040019020556005805460ff8416908110610cb057fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916905560019190910190610c55565b6000610cef60058261142a565b505b5060005b60ff8116871115610e3557878760ff8316818110610d0f57fe5b90506020020135600160a060020a0316600160a060020a0316600014151515610d3757600080fd5b6000868660ff8416818110610d4857fe5b90506020020135111515610d5b57600080fd5b6005888860ff8416818110610d6c57fe5b8354600181018555600094855260209485902001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039590920293909301359390931692909217905550858560ff8316818110610dc457fe5b90506020020135600460008a8a8560ff168181101515610de057fe5b60209081029290920135600160a060020a031683525081019190915260400160002055610e2b868660ff8416818110610e1557fe5b905060200201358461126490919063ffffffff16565b9250600101610cf5565b60648314610e4257600080fd5b6040517f45dbfacb32139a73ba98185dc91b94a088fdee69b538bb008c6631ec99d58f2690600090a1506001979650505050505050565b600d5460ff1681565b610e8c33826112d2565b50565b600160a060020a031660009081526001602052604090205490565b600354600090600160a060020a03163314610ec457600080fd5b600a5460ff1615610ed457600080fd5b600054670ca0f82db99b000011610eea57600080fd5b600554600714610ef957600080fd5b600a805460ff191660011790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a15060015b90565b60085481565b600354600160a060020a031681565b600c805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105e35780601f106105b8576101008083540402835291602001916105e3565b6000600160a060020a0383161515610fbd57600080fd5b336000908152600160205260409020548211801590610fdc5750600082115b801561100e5750600160a060020a03831660009081526001602052604090205461100c818463ffffffff61126416565b115b151561101957600080fd5b33600090815260016020526040902054611039908363ffffffff6112c016565b3360009081526001602052604080822092909255600160a060020a0385168152205461106b908363ffffffff61126416565b600160a060020a03841660008181526001602090815260409182902093909355805185815290519192339260008051602061146e8339815191529281900390910190a350600192915050565b60046020526000908152604090205481565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60075481565b60095481565b600580548290811061110e57fe5b600091825260209091200154600160a060020a0316905081565b600354600160a060020a0316331461113f57600080fd5b600160a060020a038116151561115457600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008060006111ca6113c2565b6111d26113f8565b039150600060ff8316116111e557600080fd5b5060005b8160ff168160ff16101561125f57611234611227611218606461072a600a60095461127e90919063ffffffff16565b6009549063ffffffff6112c016565b849063ffffffff61126416565b9250611254611218606461072a600a60095461127e90919063ffffffff16565b6009556001016111e9565b505090565b60008282018381101561127357fe5b8091505b5092915050565b6000808315156112915760009150611277565b508282028284828115156112a157fe5b041461127357fe5b60008082848115156112b757fe5b04949350505050565b6000828211156112cc57fe5b50900390565b600160a060020a0382166000908152600160205260409020548111156112f757600080fd5b600160a060020a038216600090815260016020526040902054611320908263ffffffff6112c016565b600160a060020a0383166000908152600160205260408120919091555461134d908263ffffffff6112c016565b600055604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a0385169160008051602061146e8339815191529181900360200190a35050565b6007546000905b6006548110156113f4576008546113e790829063ffffffff61126416565b60019092019190506113c9565b5090565b60075460009042905b8181101561125f5760085461141d90829063ffffffff61126416565b6001909301929050611401565b81548183558181111561144e5760008381526020902061144e918101908301611453565b505050565b610f3391905b808211156113f457600081556001016114595600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820db5abc2ab46fd037c748845d92886a0fd850049370843438d70553db03e8d85e002900000000000000000000000000000000000000000000000000000000363d7f80000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000e457261205377617020546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034553540000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000363d7f80000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000e457261205377617020546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034553540000000000000000000000000000000000000000000000000000000000"
}