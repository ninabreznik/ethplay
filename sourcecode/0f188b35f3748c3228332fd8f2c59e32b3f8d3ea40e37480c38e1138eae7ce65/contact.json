{
  "address": "0xdc46c3aace49cae863fcca825f8735883849e608",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CCC1Token",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-04\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * Math operations with safety checks\n */\ncontract SafeMath {\n  function safeMult(uint256 a, uint256 b) internal returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\n    assert(b > 0);\n    uint256 c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n\n  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\n    uint256 c = a + b;\n    assert(c>=a && c>=b);\n    return c;\n  }\n}\n\ncontract TokenERC20 {\n     function balanceOf(address _owner) constant returns (uint256  balance);\n     function transfer(address _to, uint256  _value) returns (bool success);\n     function transferFrom(address _from, address _to, uint256  _value) returns (bool success);\n     function approve(address _spender, uint256  _value) returns (bool success);\n     function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n     event Transfer(address indexed _from, address indexed _to, uint256  _value);\n     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract CCC1Token is SafeMath, TokenERC20{ \n    string public name = \"CCC1\";\n    string public symbol = \"CCC1\";\n    uint8 public decimals = 18;\n    uint256 public totalSupply = 4204800;\n\taddress public owner = 0x0;\n\tstring  public version = \"1.0\";\t\n\t\n    bool public locked = false;\t\n    uint256 public currentSupply;           \n    uint256 public tokenRaised = 0;    \n    uint256 public tokenExchangeRate = 333; \n\n    /* This creates an array with all balances */\n    mapping (address => uint256) public balanceOf;\n\tmapping (address => uint256) public freezeOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    /* This notifies clients about the amount burnt */\n    event Burn(address indexed from, uint256 value);\n\t\n\t/* This notifies clients about the amount frozen */\n    event Freeze(address indexed from, uint256 value);\n\t\n\t/* This notifies clients about the amount unfrozen */\n    event Unfreeze(address indexed from, uint256 value);\n\t\n\t/* IssueToken*/\n    event IssueToken(address indexed to, uint256 value);\n    \n\t/* TransferOwnerEther*/\n    event TransferOwnerEther(address indexed to, uint256 value);\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function CCC1Token(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n        ) {\n        totalSupply = formatDecimals(initialSupply);      \t\t\t //  Update total supply\n        balanceOf[msg.sender] = totalSupply;              \t\t\t //  Give the creator all initial tokens\n        name = tokenName;                                   \t\t //  Set the name for display purposes\n\t\tcurrentSupply = totalSupply;\n        symbol = tokenSymbol;                                        //  Set the symbol for display purposes\n\t\towner = msg.sender;\n    }\n\t\n\tmodifier onlyOwner()  { \n\t\trequire(msg.sender == owner); \n\t\t_; \n\t}\n\t\n\tmodifier validAddress()  {\n        require(address(0) != msg.sender);\n        _;\n    }\n\t\n    modifier unlocked() {\n        require(!locked);\n        _;\n    }\n\t\n    function formatDecimals(uint256 _value) internal returns (uint256 ) {\n        return _value * 10 ** uint256(decimals);\n\t}\n\t\n\tfunction balanceOf(address _owner) constant returns (uint256 balance) {\n        return balanceOf[_owner];\n    }\n\n    /* Allow another contract to spend some tokens in your behalf */\n    function approve(address _spender, uint256 _value) validAddress unlocked returns (bool success) {\n        require(_value > 0);\n        allowance[msg.sender][_spender] = _value;\n\t\tApproval(msg.sender, _spender, _value);\n        return true;\n    }\n\t\n\t/*Function to check the amount of tokens that an owner allowed to a spender.*/\n\tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n\t\treturn allowance[_owner][_spender];\n\t}\t\n\n\t  /**\n\t   * @dev Increase the amount of tokens that an owner allowance to a spender.\n\t   * approve should be called when allowance[_spender] == 0. To increment\n\t   * allowance value is better to use this function to avoid 2 calls (and wait until\n\t   * the first transaction is mined)\n\t   * @param _spender The address which will spend the funds.\n\t   * @param _addedValue The amount of tokens to increase the allowance by.\n\t   */\n\t  function increaseApproval(address _spender, uint256 _addedValue) validAddress unlocked public returns (bool success)\n\t  {\n\t\tallowance[msg.sender][_spender] = SafeMath.safeAdd(allowance[msg.sender][_spender], _addedValue);\n\t\tApproval(msg.sender, _spender, allowance[msg.sender][_spender]);\n\t\treturn true;\n\t  }\n\n\t  /**\n\t   * @dev Decrease the amount of tokens that an owner allowance to a spender.\n\t   * approve should be called when allowance[_spender] == 0. To decrement\n\t   * allowance value is better to use this function to avoid 2 calls (and wait until\n\t   * the first transaction is mined)\n\t   * @param _spender The address which will spend the funds.\n\t   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n\t   */\n\t  function decreaseApproval(address _spender, uint256 _subtractedValue) validAddress unlocked public returns (bool success)\n\t  {\n\t\tuint256 oldValue = allowance[msg.sender][_spender];\n\t\tif (_subtractedValue > oldValue) {\n\t\t  allowance[msg.sender][_spender] = 0;\n\t\t} else {\n\t\t  allowance[msg.sender][_spender] = SafeMath.safeSub(oldValue, _subtractedValue);\n\t\t}\n\t\tApproval(msg.sender, _spender, allowance[msg.sender][_spender]);\n\t\treturn true;\n\t  }\n\n    /* Send coins */\n    function transfer(address _to, uint256 _value) validAddress unlocked returns (bool success) {\t\n        _transfer(msg.sender, _to, _value);\n    }\n\t\n\t/**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != address(0));\n        require(_value > 0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);   // Subtract from the sender\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);       // Add the same to the recipient\n        Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /* A contract attempts to get the coins */\n    function transferFrom(address _from, address _to, uint256 _value) validAddress unlocked returns (bool success) {\t\n        require(_value <= allowance[_from][msg.sender]);     \t\t// Check allowance\n        require(_value > 0);\n        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    function burn(uint256 _value) validAddress unlocked returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   \t\t\t\t\t\t\t  // Check if the sender has enough\n        require(_value > 0);   \n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);  // Subtract from the sender\n        totalSupply = SafeMath.safeSub(totalSupply,_value);                       // Updates totalSupply\n        currentSupply = SafeMath.safeSub(currentSupply,_value);                   // Updates currentSupply\n        Burn(msg.sender, _value);\n        return true;\n    }\n\t\n\tfunction freeze(uint256 _value) validAddress unlocked returns (bool success) {\t\n        require(balanceOf[msg.sender] >= _value);   \t\t \t\t\t\t\t // Check if the sender has enough\n        require(_value > 0);   \n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value); // Subtract from the sender\n        freezeOf[msg.sender] = SafeMath.safeAdd(freezeOf[msg.sender], _value);   // Updates totalSupply\n        Freeze(msg.sender, _value);\n        return true;\n    }\n\t\n\tfunction unfreeze(uint256 _value) validAddress unlocked returns (bool success) {\n        require(freezeOf[msg.sender] >= _value);   \t\t \t\t\t\t\t\t   // Check if the sender has enough\n        require(_value > 0);   \n        freezeOf[msg.sender] = SafeMath.safeSub(freezeOf[msg.sender], _value);     // Subtract from the sender\n\t\tbalanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], _value);   // Updates totalSupply\n        Unfreeze(msg.sender, _value);\n        return true;\n    }\n\t\n    function transferETH() onlyOwner external {\n        require(this.balance > 0);\n        require(owner.send(this.balance));\n    }\n\t\n\t// transfer balance to owner\n\tfunction withdrawEther(uint256 amount) onlyOwner {\n        require(msg.sender == owner); \n\t\towner.transfer(amount);\n\t}\n\t\n    /**\n     * Fallback function\n     *\n     * The function without name is the default function that is called whenever anyone sends funds to a contract\n     */\n    function() payable public {\n        require(msg.sender != address(0));\n\t\trequire(msg.value > 0);\t\t \n        uint256 tokens = SafeMath.safeMult(msg.value, tokenExchangeRate);\n\t\trequire(tokens + tokenRaised <= currentSupply);\t\n        tokenRaised = SafeMath.safeAdd(tokenRaised, tokens);\n        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], tokens);\n        balanceOf[owner] = SafeMath.safeSub(balanceOf[owner], tokens);\n        IssueToken(msg.sender, tokens);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"unfreeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"IssueToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferOwnerEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60606040526040805190810160405280600481526020017f43434331000000000000000000000000000000000000000000000000000000008152506000908051906020019062000051929190620002c6565b506040805190810160405280600481526020017f4343433100000000000000000000000000000000000000000000000000000000815250600190805190602001906200009f929190620002c6565b506012600260006101000a81548160ff021916908360ff160217905550624029006003556000600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040805190810160405280600381526020017f312e3000000000000000000000000000000000000000000000000000000000008152506005908051906020019062000152929190620002c6565b506000600660006101000a81548160ff021916908315150217905550600060085561014d60095534156200018557600080fd5b6040516200267a3803806200267a83398101604052808051906020019091908051820191906020018051820191905050620001d483620002a564010000000002620022a8176401000000009004565b600381905550600354600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000908051906020019062000238929190620002c6565b5060035460078190555080600190805190602001906200025a929190620002c6565b5033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505062000375565b6000600260009054906101000a900460ff1660ff16600a0a82029050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200030957805160ff19168380011785556200033a565b828001600101855582156200033a579182015b82811115620003395782518255916020019190600101906200031c565b5b5090506200034991906200034d565b5090565b6200037291905b808211156200036e57600081600090555060010162000354565b5090565b90565b6122f580620003856000396000f300606060405260043610610133576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610361578063095ea7b3146103ef57806318160ddd1461044957806323b872dd1461047257806326a21575146104eb578063313ce567146105145780633bed33ce146105435780634172d0801461056657806342966c681461058f57806354fd4d50146105ca57806366188463146106585780636623fc46146106b257806370a08231146106ed578063771282f61461073a5780638da5cb5b1461076357806395d89b41146107b8578063a9059cbb14610846578063cd4217c1146108a0578063cf309012146108ed578063d73dd6231461091a578063d7a78db814610974578063dd62ed3e146109af578063e28d717b14610a1b575b60008073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415151561017057600080fd5b60003411151561017f57600080fd5b61018b34600954610a30565b90506007546008548201111515156101a257600080fd5b6101ae60085482610a63565b6008819055506101fd600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482610a63565b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506102ab600a6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482610a8d565b600a6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167f7ba26a0f068612fb882b3272004674d21fed286c2c8c795cf653044690b32db4826040518082815260200191505060405180910390a250005b341561036c57600080fd5b610374610aa6565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103b4578082015181840152602081019050610399565b50505050905090810190601f1680156103e15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103fa57600080fd5b61042f600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b44565b604051808215151515815260200191505060405180910390f35b341561045457600080fd5b61045c610c9d565b6040518082815260200191505060405180910390f35b341561047d57600080fd5b6104d1600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610ca3565b604051808215151515815260200191505060405180910390f35b34156104f657600080fd5b6104fe610eb3565b6040518082815260200191505060405180910390f35b341561051f57600080fd5b610527610eb9565b604051808260ff1660ff16815260200191505060405180910390f35b341561054e57600080fd5b6105646004808035906020019091905050610ecc565b005b341561057157600080fd5b610579610fe9565b6040518082815260200191505060405180910390f35b341561059a57600080fd5b6105b06004808035906020019091905050610fef565b604051808215151515815260200191505060405180910390f35b34156105d557600080fd5b6105dd6111ad565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561061d578082015181840152602081019050610602565b50505050905090810190601f16801561064a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561066357600080fd5b610698600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061124b565b604051808215151515815260200191505060405180910390f35b34156106bd57600080fd5b6106d3600480803590602001909190505061152b565b604051808215151515815260200191505060405180910390f35b34156106f857600080fd5b610724600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611751565b6040518082815260200191505060405180910390f35b341561074557600080fd5b61074d61179a565b6040518082815260200191505060405180910390f35b341561076e57600080fd5b6107766117a0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156107c357600080fd5b6107cb6117c6565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561080b5780820151818401526020810190506107f0565b50505050905090810190601f1680156108385780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561085157600080fd5b610886600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611864565b604051808215151515815260200191505060405180910390f35b34156108ab57600080fd5b6108d7600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506118cf565b6040518082815260200191505060405180910390f35b34156108f857600080fd5b6109006118e7565b604051808215151515815260200191505060405180910390f35b341561092557600080fd5b61095a600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506118fa565b604051808215151515815260200191505060405180910390f35b341561097f57600080fd5b6109956004808035906020019091905050611b45565b604051808215151515815260200191505060405180910390f35b34156109ba57600080fd5b610a05600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611d6b565b6040518082815260200191505060405180910390f35b3415610a2657600080fd5b610a2e611df2565b005b60008082840290506000841480610a515750828482811515610a4e57fe5b04145b1515610a5957fe5b8091505092915050565b6000808284019050838110158015610a7b5750828110155b1515610a8357fe5b8091505092915050565b6000828211151515610a9b57fe5b818303905092915050565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b3c5780601f10610b1157610100808354040283529160200191610b3c565b820191906000526020600020905b815481529060010190602001808311610b1f57829003601f168201915b505050505081565b60003373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff1614151515610b8257600080fd5b600660009054906101000a900460ff16151515610b9e57600080fd5b600082111515610bad57600080fd5b81600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60035481565b60003373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff1614151515610ce157600080fd5b600660009054906101000a900460ff16151515610cfd57600080fd5b600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610d8857600080fd5b600082111515610d9757600080fd5b610e1d600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610a8d565b600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ea8848484611eef565b600190509392505050565b60085481565b600260009054906101000a900460ff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f2857600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f8457600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501515610fe657600080fd5b50565b60095481565b60003373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff161415151561102d57600080fd5b600660009054906101000a900460ff1615151561104957600080fd5b81600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561109757600080fd5b6000821115156110a657600080fd5b6110ef600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610a8d565b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061113e60035483610a8d565b60038190555061115060075483610a8d565b6007819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a260019050919050565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112435780601f1061121857610100808354040283529160200191611243565b820191906000526020600020905b81548152906001019060200180831161122657829003601f168201915b505050505081565b6000803373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff161415151561128a57600080fd5b600660009054906101000a900460ff161515156112a657600080fd5b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808311156113b4576000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061143f565b6113be8184610a8d565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b60003373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff161415151561156957600080fd5b600660009054906101000a900460ff1615151561158557600080fd5b81600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156115d357600080fd5b6000821115156115e257600080fd5b61162b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610a8d565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506116b7600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610a63565b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167f2cfce4af01bcb9d6cf6c84ee1b7c491100b8695368264146a94d71e10a63083f836040518082815260200191505060405180910390a260019050919050565b6000600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60075481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561185c5780601f106118315761010080835404028352916020019161185c565b820191906000526020600020905b81548152906001019060200180831161183f57829003601f168201915b505050505081565b60003373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff16141515156118a257600080fd5b600660009054906101000a900460ff161515156118be57600080fd5b6118c9338484611eef565b92915050565b600b6020528060005260406000206000915090505481565b600660009054906101000a900460ff1681565b60003373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff161415151561193857600080fd5b600660009054906101000a900460ff1615151561195457600080fd5b6119da600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610a63565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b60003373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff1614151515611b8357600080fd5b600660009054906101000a900460ff16151515611b9f57600080fd5b81600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515611bed57600080fd5b600082111515611bfc57600080fd5b611c45600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610a8d565b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611cd1600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610a63565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167ff97a274face0b5517365ad396b1fdba6f68bd3135ef603e44272adba3af5a1e0836040518082815260200191505060405180910390a260019050919050565b6000600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e4e57600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff1631111515611e7457600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501515611eed57600080fd5b565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611f2c57600080fd5b600082111515611f3b57600080fd5b81600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515611f8957600080fd5b600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540111151561201757600080fd5b600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540190506120e3600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610a8d565b600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061216f600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610a63565b600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a380600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054011415156122a257fe5b50505050565b6000600260009054906101000a900460ff1660ff16600a0a820290509190505600a165627a7a72305820a3ae72f880e4ca11b9f20fb0248699b7ccdb54167aff80cb290cb511406487f400290000000000000000000000000000000000000000000000000000000000402900000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000004434343310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044343433100000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000402900000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000004434343310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044343433100000000000000000000000000000000000000000000000000000000"
}