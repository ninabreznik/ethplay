{
  "address": "0xff7a0282d23138dccb55334f1beced4b5ddffb1a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Blueshare Token",
  "contractName": "BlueshareToken",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": false,
  "runs": "200",
  "evmVersion": "byzantium",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-13\n*/\n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\n\npragma solidity ^0.5.2;\n\n\n/**\n * @title ERC20Detailed token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\npragma solidity ^0.5.2;\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://eips.ethereum.org/EIPS/eip-20\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev Total number of tokens in existence\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner The address to query the balance of.\n     * @return A uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n     * @dev Transfer token to a specified address\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n     * @dev Transfer token for a specified addresses\n     * @param from The address to transfer from.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Approve an address to spend another addresses' tokens.\n     * @param owner The address that owns the tokens.\n     * @param spender The address that will spend the tokens.\n     * @param value The number of tokens that can be spent.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _burn(account, value);\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/Roles.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol\n\npragma solidity ^0.5.2;\n\n\ncontract MinterRole {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private _minters;\n\n    constructor () internal {\n        _addMinter(msg.sender);\n    }\n\n    modifier onlyMinter() {\n        require(isMinter(msg.sender));\n        _;\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n\n    function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n\n    function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n\n    function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n\n    function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\n\npragma solidity ^0.5.2;\n\n\n\n/**\n * @title ERC20Mintable\n * @dev ERC20 minting logic\n */\ncontract ERC20Mintable is ERC20, MinterRole {\n    /**\n     * @dev Function to mint tokens\n     * @param to The address that will receive the minted tokens.\n     * @param value The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address to, uint256 value) public onlyMinter returns (bool) {\n        _mint(to, value);\n        return true;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     * @notice Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: contracts/ComplianceService.sol\n\npragma solidity ^0.5.2;\n\n/// @notice Standard interface for `ComplianceService`s\ncontract ComplianceService {\n\n    /*\n    * @notice This method *MUST* be called by `BlueshareToken`s during `transfer()` and `transferFrom()`.\n    *         The implementation *SHOULD* check whether or not a transfer can be approved.\n    *\n    * @dev    This method *MAY* call back to the token contract specified by `_token` for\n    *         more information needed to enforce trade approval.\n    *\n    * @param  _token The address of the token to be transfered\n    * @param  _spender The address of the spender of the token\n    * @param  _from The address of the sender account\n    * @param  _to The address of the receiver account\n    * @param  _amount The quantity of the token to trade\n    *\n    * @return uint8 The reason code: 0 means success.  Non-zero values are left to the implementation\n    *               to assign meaning.\n    */\n    function check(address _token, address _spender, address _from, address _to, uint256 _amount) public returns (uint8);\n\n    /*\n    * @notice This method *MUST* be called by `BlueshareToken`s during `forceTransferFrom()`. \n    *         Accessible only by admins, used for forced tokens transfer\n    *         The implementation *SHOULD* check whether or not a transfer can be approved.\n    *\n    * @dev    This method *MAY* call back to the token contract specified by `_token` for\n    *         more information needed to enforce trade approval.\n    *\n    * @param  _token The address of the token to be transfered\n    * @param  _spender The address of the spender of the token *Admin or Owner*\n    * @param  _from The address of the sender account\n    * @param  _to The address of the receiver account\n    * @param  _amount The quantity of the token to trade\n    *\n    * @return uint8 The reason code: 0 means success.  Non-zero values are left to the implementation\n    *               to assign meaning.\n    */\n    function forceCheck(address _token, address _spender, address _from, address _to, uint256 _amount) public returns (uint8);\n\n    /**\n    * @notice This method *MUST* be called by `BlueshareToken`s during  during `transfer()` and `transferFrom()`.\n    *         The implementation *SHOULD* check whether or not a transfer can be approved.\n    *\n    * @dev    This method  *MAY* call back to the token contract specified by `_token` for\n    *         information needed to enforce trade approval if needed\n    *\n    * @param  _token The address of the token to be transfered\n    * @param  _spender The address of the spender of the token (unused in this implementation)\n    * @param  _holder The address of the sender account, our holder\n    * @param  _balance The balance of our holder\n    * @param  _amount The amount he or she whants to send\n    *\n    * @return `true` if the trade should be approved and `false` if the trade should not be approved\n    */\n    function checkVested(address _token, address _spender, address _holder, uint256 _balance, uint256 _amount) public returns (bool);\n}\n\n// File: contracts/DividendService.sol\n\npragma solidity ^0.5.2;\n\n/// @notice Standard interface for `DividendService`s\ncontract DividendService {\n\n    /**\n    * @param _token The address of the token assigned with this `DividendService`\n    * @param _spender The address of the spender for this transaction\n    * @param _holder The address of the holder of the token\n    * @param _interval The time interval / year for which the dividends are paid or not\n    * @return uint8 The reason code: 0 means not paid.  Non-zero values are left to the implementation\n    *               to assign meaning.\n    */\n    function check(address _token, address _spender, address _holder, uint _interval) public returns (uint8);\n}\n\n// File: contracts/ServiceRegistry.sol\n\npragma solidity ^0.5.2;\n\n\n\n\n/// @notice regulator - A service that points to a `ComplianceService` contract\n/// @notice dividend - A service that points to a `DividendService` contract\ncontract ServiceRegistry is Ownable {\n    address public regulator;\n    address public dividend;\n\n    /**\n    * @notice Triggered when regulator or dividend service address is replaced\n    */\n    event ReplaceService(address oldService, address newService);\n\n    /**\n    * @dev Validate contract address\n    * Credit: https://github.com/Dexaran/ERC223-token-standard/blob/Recommended/ERC223_Token.sol#L107-L114\n    *\n    * @param _addr The address of a smart contract\n    */\n    modifier withContract(address _addr) {\n        uint length;\n        assembly { length := extcodesize(_addr) }\n        require(length > 0);\n        _;\n    }\n\n    /**\n    * @notice Constructor\n    *\n    * @param _regulator The address of the `ComplianceService` contract\n    * @param _dividend The address of the `DividendService` contract\n    *\n    */\n    constructor(address _regulator, address _dividend) public {\n        regulator = _regulator;\n        dividend = _dividend;\n    }\n\n    /**\n    * @notice Replaces the address pointer to the `ComplianceService` contract\n    *\n    * @dev This method is only callable by the contract's owner\n    *\n    * @param _regulator The address of the new `ComplianceService` contract\n    */\n    function replaceRegulator(address _regulator) public onlyOwner withContract(_regulator) {\n        require(regulator != _regulator, \"The address cannot be the same\");\n\n        address oldRegulator = regulator;\n        regulator = _regulator;\n        emit ReplaceService(oldRegulator, regulator);\n    }\n\n    /**\n    * @notice Replaces the address pointer to the `DividendService` contract\n    *\n    * @dev This method is only callable by the contract's owner\n    *\n    * @param _dividend The address of the new `DividendService` contract\n    */\n    function replaceDividend(address _dividend) public onlyOwner withContract(_dividend) {\n        require(dividend != _dividend, \"The address cannot be the same\");\n\n        address oldDividend = dividend;\n        dividend = _dividend;\n        emit ReplaceService(oldDividend, dividend);\n    }\n}\n\n// File: contracts/BlueshareToken.sol\n\npragma solidity ^0.5.2;\n\n\n\n\n\n\n\n/// @notice An ERC-20 token that has the ability to check for trade validity\ncontract BlueshareToken is ERC20Detailed, ERC20Mintable, Ownable {\n\n    /**\n    * @notice Token decimals setting (used when constructing ERC20Detailed)\n    */\n    uint8 constant public BLUESHARETOKEN_DECIMALS = 0;\n\n    /**\n    * International Securities Identification Number (ISIN)\n    */\n    string constant public ISIN = \"CH0465030796\";\n\n    /**\n    * @notice Triggered when regulator checks pass or fail\n    */\n    event CheckComplianceStatus(uint8 reason, address indexed spender, address indexed from, address indexed to, uint256 value);\n\n    /**\n    * @notice Triggered when regulator checks pass or fail\n    */\n    event CheckVestingStatus(bool reason, address indexed spender, address indexed from, uint256 balance, uint256 value);\n\n    /**\n    * @notice Triggered when dividend checks pass or fail\n    */\n    event CheckDividendStatus(uint8 reason, address indexed spender, address indexed holder, uint interval);\n\n    /**\n    * @notice Address of the `ServiceRegistry` that has the location of the\n    *         `ComplianceService` contract responsible for checking trade permissions and \n    *         `DividendService` contract responsible for checking dividend state.\n    */\n    ServiceRegistry public registry;\n\n    /**\n    * @notice Constructor\n    *\n    * @param _registry Address of `ServiceRegistry` contract\n    * @param _name Name of the token: See ERC20Detailed\n    * @param _symbol Symbol of the token: See ERC20Detailed\n    */\n    constructor(ServiceRegistry _registry, string memory _name, string memory _symbol) public\n      ERC20Detailed(_name, _symbol, BLUESHARETOKEN_DECIMALS)\n    {\n        require(address(_registry) != address(0), \"Uninitialized or undefined address\");\n\n        registry = _registry;\n    }\n\n    /**\n    * @notice ERC-20 overridden function that include logic to check for trade validity.\n    *\n    * @param _to The address of the receiver\n    * @param _value The number of tokens to transfer\n    *\n    * @return `true` if successful and `false` if unsuccessful\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_checkVested(msg.sender, balanceOf(msg.sender), _value), \"Cannot send vested amount!\");\n        require(_check(msg.sender, _to, _value), \"Cannot transfer!\");\n\n        return super.transfer(_to, _value);\n    }\n\n    /**\n    * @notice ERC-20 overridden function that include logic to check for trade validity.\n    *\n    * @param _from The address of the sender\n    * @param _to The address of the receiver\n    * @param _value The number of tokens to transfer\n    *\n    * @return `true` if successful and `false` if unsuccessful\n    */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_checkVested(_from, balanceOf(_from), _value), \"Cannot send vested amount!\");\n        require(_check(_from, _to, _value), \"Cannot transfer!\");\n        \n        return super.transferFrom(_from, _to, _value);\n    }\n\n    /**\n    * @notice ERC-20 extended function that include logic to check for trade validity with admin rights.\n    *\n    * @param _from The address of the old wallet\n    * @param _to The address of the new wallet\n    * @param _value The number of tokens to transfer\n    *\n    */\n    function forceTransferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_forceCheck(_from, _to, _value), \"Not allowed!\");\n\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n    * @notice The public function for checking divident payout status\n    *\n    * @param _holder The address of the token's holder\n    * @param _interval The interval for divident's status\n    */\n    function dividendStatus(address _holder, uint _interval) public returns (uint8) {\n        return _checkDividend(_holder, _interval);\n    }\n\n    /**\n    * @notice Performs the regulator check\n    *\n    * @dev This method raises a CheckComplianceStatus event indicating success or failure of the check\n    *\n    * @param _from The address of the sender\n    * @param _to The address of the receiver\n    * @param _value The number of tokens to transfer\n    *\n    * @return `true` if the check was successful and `false` if unsuccessful\n    */\n    function _check(address _from, address _to, uint256 _value) private returns (bool) {\n        uint8 reason = _regulator().check(address(this), msg.sender, _from, _to, _value);\n\n        emit CheckComplianceStatus(reason, msg.sender, _from, _to, _value);\n\n        return reason == 0;\n    }\n\n    /**\n    * @notice Performs the regulator forceCheck, accessable only by admins\n    *\n    * @dev This method raises a CheckComplianceStatus event indicating success or failure of the check\n    *\n    * @param _from The address of the sender\n    * @param _to The address of the receiver\n    * @param _value The number of tokens to transfer\n    *\n    * @return `true` if the check was successful and `false` if unsuccessful\n    */\n    function _forceCheck(address _from, address _to, uint256 _value) private returns (bool) {\n        uint8 allowance = _regulator().forceCheck(address(this), msg.sender, _from, _to, _value);\n\n        emit CheckComplianceStatus(allowance, msg.sender, _from, _to, _value);\n\n        return allowance == 0;\n    }\n\n    /**\n    * @notice Performs the regulator check\n    *\n    * @dev This method raises a CheckVestingStatus event indicating success or failure of the check\n    *\n    * @param _participant The address of the participant\n    * @param _balance The balance of the sender\n    * @param _value The number of tokens to transfer\n    *\n    * @return `true` if the check was successful and `false` if unsuccessful\n    */\n    function _checkVested(address _participant, uint256 _balance, uint256 _value) private returns (bool) {\n        bool allowed = _regulator().checkVested(address(this), msg.sender, _participant, _balance, _value);\n\n        emit CheckVestingStatus(allowed, msg.sender, _participant, _balance, _value);\n\n        return allowed;\n    }\n\n    /**\n    * @notice Performs the dividend check\n    *\n    * @dev This method raises a CheckDividendStatus event indicating success or failure of the check\n    *\n    * @param _address The address of the holder\n    * @param _interval The time interval / year for which the dividends are paid or not\n    *\n    * @return `true` if the check was successful and `false` if unsuccessful\n    */\n    function _checkDividend(address _address, uint _interval) private returns (uint8) {\n        uint8 status = _dividend().check(address(this), msg.sender, _address, _interval);\n\n        emit CheckDividendStatus(status, msg.sender, _address, _interval);\n\n        return status;\n    }\n\n    /**\n    * @notice Retreives the address of the `ComplianceService` that manages this token.\n    *\n    * @dev This function *MUST NOT* memoize the `ComplianceService` address.  This would\n    *      break the ability to upgrade the `ComplianceService`.\n    *\n    * @return The `ComplianceService` that manages this token.\n    */\n    function _regulator() public view returns (ComplianceService) {\n        return ComplianceService(registry.regulator());\n    }\n\n    /**\n    * @notice Retreives the address of the `DividendService` that manages this token.\n    *\n    * @dev This function *MUST NOT* memoize the `DividendService` address.  This would\n    *      break the ability to upgrade the `DividendService`.\n    *\n    * @return The `DividendService` that manages this token.\n    */\n    function _dividend() public view returns (DividendService) {\n        return DividendService(registry.dividend());\n    }\n}",
  "bytecode": "60806040523480156200001157600080fd5b5060405162002b1d38038062002b1d833981018060405260608110156200003757600080fd5b810190808051906020019092919080516401000000008111156200005a57600080fd5b828101905060208101848111156200007157600080fd5b81518560018202830111640100000000821117156200008f57600080fd5b50509291906020018051640100000000811115620000ac57600080fd5b82810190506020810184811115620000c357600080fd5b8151856001820283011164010000000082111715620000e157600080fd5b505092919050505081816000826000908051906020019062000105929190620004a3565b5081600190805190602001906200011e929190620004a3565b5080600260006101000a81548160ff021916908360ff1602179055505050506200015733620002e7640100000000026401000000009004565b33600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156200029d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602281526020018062002afb6022913960400191505060405180910390fd5b82600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505062000552565b6200030b816006620003516401000000000262002416179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156200038c57600080fd5b620003a7828262000410640100000000026401000000009004565b15620003b257600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156200044c57600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620004e657805160ff191683800117855562000517565b8280016001018555821562000517579182015b8281111562000516578251825591602001919060010190620004f9565b5b5090506200052691906200052a565b5090565b6200054f91905b808211156200054b57600081600090555060010162000531565b5090565b90565b61259980620005626000396000f3fe608060405234801561001057600080fd5b50600436106101ab576000357c0100000000000000000000000000000000000000000000000000000000900480638da5cb5b116100fb578063a457c2d7116100b4578063ab2c10d41161008e578063ab2c10d4146108b5578063dd62ed3e146108ff578063f2fde38b14610977578063ff5dbc25146109bb576101ab565b8063a457c2d71461078d578063a9059cbb146107f3578063aa271e1a14610859576101ab565b80638da5cb5b146105cd5780638f32d59b14610617578063937a105a1461063957806395d89b41146106bc578063983b2d561461073f5780639865027514610783576101ab565b8063392986331161016857806370a082311161014257806370a08231146104d7578063715018a61461052f5780637b1039991461053957806383a3e4d314610583576101ab565b80633929863314610385578063395093511461040b57806340c10f1914610471576101ab565b806306fdde03146101b0578063095ea7b314610233578063118fd8e01461029957806318160ddd146102bd57806323b872dd146102db578063313ce56714610361575b600080fd5b6101b8610a23565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101f85780820151818401526020810190506101dd565b50505050905090810190601f1680156102255780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61027f6004803603604081101561024957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ac5565b604051808215151515815260200191505060405180910390f35b6102a1610adc565b604051808260ff1660ff16815260200191505060405180910390f35b6102c5610ae1565b6040518082815260200191505060405180910390f35b610347600480360360608110156102f157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610aeb565b604051808215151515815260200191505060405180910390f35b610369610c03565b604051808260ff1660ff16815260200191505060405180910390f35b6103f16004803603606081101561039b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c1a565b604051808215151515815260200191505060405180910390f35b6104576004803603604081101561042157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610caf565b604051808215151515815260200191505060405180910390f35b6104bd6004803603604081101561048757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d54565b604051808215151515815260200191505060405180910390f35b610519600480360360208110156104ed57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d7c565b6040518082815260200191505060405180910390f35b610537610dc5565b005b610541610e97565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61058b610ebd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6105d5610f83565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61061f610fad565b604051808215151515815260200191505060405180910390f35b610641611005565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610681578082015181840152602081019050610666565b50505050905090810190601f1680156106ae5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6106c461103e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107045780820151818401526020810190506106e9565b50505050905090810190601f1680156107315780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6107816004803603602081101561075557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110e0565b005b61078b6110fe565b005b6107d9600480360360408110156107a357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611109565b604051808215151515815260200191505060405180910390f35b61083f6004803603604081101561080957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506111ae565b604051808215151515815260200191505060405180910390f35b61089b6004803603602081101561086f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112c4565b604051808215151515815260200191505060405180910390f35b6108bd6112e1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6109616004803603604081101561091557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113a7565b6040518082815260200191505060405180910390f35b6109b96004803603602081101561098d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061142e565b005b610a07600480360360408110156109d157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061144b565b604051808260ff1660ff16815260200191505060405180910390f35b606060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610abb5780601f10610a9057610100808354040283529160200191610abb565b820191906000526020600020905b815481529060010190602001808311610a9e57829003601f168201915b5050505050905090565b6000610ad233848461145f565b6001905092915050565b600081565b6000600554905090565b6000610b0084610afa86610d7c565b846115be565b610b72576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f43616e6e6f742073656e642076657374656420616d6f756e742100000000000081525060200191505060405180910390fd5b610b7d84848461179c565b610bef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f43616e6e6f74207472616e73666572210000000000000000000000000000000081525060200191505060405180910390fd5b610bfa8484846119bd565b90509392505050565b6000600260009054906101000a900460ff16905090565b6000610c27848484611a6e565b610c99576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f4e6f7420616c6c6f77656421000000000000000000000000000000000000000081525060200191505060405180910390fd5b610ca4848484611c8f565b600190509392505050565b6000610d4a3384610d4585600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e5d90919063ffffffff16565b61145f565b6001905092915050565b6000610d5f336112c4565b610d6857600080fd5b610d728383611e7c565b6001905092915050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610dcd610fad565b610dd657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd8fee146040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015610f4357600080fd5b505afa158015610f57573d6000803e3d6000fd5b505050506040513d6020811015610f6d57600080fd5b8101908080519060200190929190505050905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b6040518060400160405280600c81526020017f434830343635303330373936000000000000000000000000000000000000000081525081565b606060018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110d65780601f106110ab576101008083540402835291602001916110d6565b820191906000526020600020905b8154815290600101906020018083116110b957829003601f168201915b5050505050905090565b6110e9336112c4565b6110f257600080fd5b6110fb81611fd0565b50565b6111073361202a565b565b60006111a4338461119f85600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461208490919063ffffffff16565b61145f565b6001905092915050565b60006111c3336111bd33610d7c565b846115be565b611235576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f43616e6e6f742073656e642076657374656420616d6f756e742100000000000081525060200191505060405180910390fd5b61124033848461179c565b6112b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f43616e6e6f74207472616e73666572210000000000000000000000000000000081525060200191505060405180910390fd5b6112bc83836120a4565b905092915050565b60006112da8260066120bb90919063ffffffff16565b9050919050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630ff8cf9b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561136757600080fd5b505afa15801561137b573d6000803e3d6000fd5b505050506040513d602081101561139157600080fd5b8101908080519060200190929190505050905090565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b611436610fad565b61143f57600080fd5b6114488161214d565b50565b60006114578383612247565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561149957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156114d357600080fd5b80600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b6000806115c9610ebd565b73ffffffffffffffffffffffffffffffffffffffff166311e4490a30338888886040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200195505050505050602060405180830381600087803b1580156116db57600080fd5b505af11580156116ef573d6000803e3d6000fd5b505050506040513d602081101561170557600080fd5b810190808051906020019092919050505090508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f7dd3e9f5129b5649a698392d2aa7f2418b164afbab7cced8100fda84541e55828387876040518084151515158152602001838152602001828152602001935050505060405180910390a3809150509392505050565b6000806117a7610ebd565b73ffffffffffffffffffffffffffffffffffffffff1663803fcd4330338888886040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200195505050505050602060405180830381600087803b1580156118e557600080fd5b505af11580156118f9573d6000803e3d6000fd5b505050506040513d602081101561190f57600080fd5b810190808051906020019092919050505090508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fcc7304c3eeaef258796e69d83afc062585ff06a3b471ed364949f88365ac4f5b8487604051808360ff1660ff1681526020018281526020019250505060405180910390a460008160ff16149150509392505050565b60006119ca848484611c8f565b611a638433611a5e85600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461208490919063ffffffff16565b61145f565b600190509392505050565b600080611a79610ebd565b73ffffffffffffffffffffffffffffffffffffffff16637d227fb430338888886040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200195505050505050602060405180830381600087803b158015611bb757600080fd5b505af1158015611bcb573d6000803e3d6000fd5b505050506040513d6020811015611be157600080fd5b810190808051906020019092919050505090508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fcc7304c3eeaef258796e69d83afc062585ff06a3b471ed364949f88365ac4f5b8487604051808360ff1660ff1681526020018281526020019250505060405180910390a460008160ff16149150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611cc957600080fd5b611d1b81600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461208490919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611db081600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e5d90919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600080828401905083811015611e7257600080fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611eb657600080fd5b611ecb81600554611e5d90919063ffffffff16565b600581905550611f2381600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e5d90919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b611fe481600661241690919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b61203e8160066124c290919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669260405160405180910390a250565b60008282111561209357600080fd5b600082840390508091505092915050565b60006120b1338484611c8f565b6001905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156120f657600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561218757600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806122526112e1565b73ffffffffffffffffffffffffffffffffffffffff16634277b5b1303387876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001945050505050602060405180830381600087803b15801561235c57600080fd5b505af1158015612370573d6000803e3d6000fd5b505050506040513d602081101561238657600080fd5b810190808051906020019092919050505090508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f7e8fab7137db30f8b70f63a22a7e17c3eb24a087c667f28766c5a0e6b2411f6d8386604051808360ff1660ff1681526020018281526020019250505060405180910390a38091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561245057600080fd5b61245a82826120bb565b1561246457600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156124fc57600080fd5b61250682826120bb565b61250f57600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505056fea165627a7a7230582091be10d8ebbf2985e0be016ddade8b8e2a83b4af4e598efb81ffaaae0c7e929d0029556e696e697469616c697a6564206f7220756e646566696e65642061646472657373000000000000000000000000d1db8a7d1f4a1ffbd0d84444ab87b053ecf33e30000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000e426c75657368617265546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034253540000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000d1db8a7d1f4a1ffbd0d84444ab87b053ecf33e30000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000e426c75657368617265546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034253540000000000000000000000000000000000000000000000000000000000"
}