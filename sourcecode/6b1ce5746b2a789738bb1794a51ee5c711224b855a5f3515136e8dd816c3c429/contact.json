{
  "address": "0xac1ec3143b89d5b263d9194db216ea068e0f3dc9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BSCToken",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-09-25\n*/\n\npragma solidity ^0.4.13;\ncontract owned {\n    /* Owner definition. */\n    address public owner; // Owner address.\n    function owned() { owner = msg.sender; }\n    modifier onlyOwner { require(msg.sender == owner); _; }\n    function transferOwnership(address newOwner) onlyOwner { owner = newOwner; }\n}\ncontract token { \n    /* Base token definition. */\n    string  public name;        // Name for the token.\n    string  public symbol;      // Symbol for the token.\n    uint8   public decimals;    // Number of decimals of the token.\n    uint256 public totalSupply; // Total of tokens created.\n\n    // Array containing the balance foreach address.\n    mapping (address => uint256) public balanceOf;\n    // Array containing foreach address, an array containing each approved address and the amount of tokens it can spend.\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    /* This generates a public event on the blockchain that will notify about a transfer done. */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /* Initializes the contract */\n    function token(uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol) {\n        balanceOf[msg.sender] = initialSupply; // Gives the creator all initial tokens.\n        totalSupply           = initialSupply; // Update total supply.\n        name                  = tokenName;     // Set the name for display purposes.\n        symbol                = tokenSymbol;   // Set the symbol for display purposes.\n        decimals              = decimalUnits;  // Amount of decimals for display purposes.\n    }\n\n    /* Internal transfer, only can be called by this contract. */\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead.\n        require(balanceOf[_from] > _value);                // Check if the sender has enough.\n        require(balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows.\n        balanceOf[_from] -= _value; // Subtract from the sender.\n        balanceOf[_to]   += _value; // Add the same to the recipient.\n        Transfer(_from, _to, _value); // Notifies the blockchain about the transfer.\n    }\n\n    /// @notice Send `_value` tokens to `_to` from your account.\n    /// @param _to The address of the recipient.\n    /// @param _value The amount to send.\n    function transfer(address _to, uint256 _value) {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    /// @notice Send `_value` tokens to `_to` in behalf of `_from`.\n    /// @param _from The address of the sender.\n    /// @param _to The address of the recipient.\n    /// @param _value The amount to send.\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]); // Check allowance.\n        allowance[_from][msg.sender] -= _value; // Updates the allowance array, substracting the amount sent.\n        _transfer(_from, _to, _value); // Makes the transfer.\n        return true;\n    }\n\n    /// @notice Allows `_spender` to spend a maximum of `_value` tokens in your behalf.\n    /// @param _spender The address authorized to spend.\n    /// @param _value The max amount they can spend.\n    function approve(address _spender, uint256 _value) returns (bool success) {\n        allowance[msg.sender][_spender] = _value; // Adds a new register to allowance, permiting _spender to use _value of your tokens.\n        return true;\n    }\n}\n\ncontract BSCToken is owned, token {\n    /* Specific token definition for -Bitcoin StartUp Capital S.A.- company. */\n    uint256 public sellPrice         = 5000000000000000;  // Price applied if someone wants to sell a token.\n    uint256 public buyPrice          = 10000000000000000; // Price applied if someone wants to buy a token.\n    bool    public closeBuy          = false;             // If true, nobody will be able to buy.\n    bool    public closeSell         = false;             // If true, nobody will be able to sell.\n    uint256 public tokensAvailable   = balanceOf[this];   // Number of tokens available for sell.\n    uint256 public distributedTokens = 0;                 // Number of tokens distributed.\n    uint256 public solvency          = this.balance;      // Amount of Ether available to pay sales.\n    uint256 public profit            = 0;                 // Shows the actual profit for the company.\n\n    // Array containing foreach address if it's frozen or not.\n    mapping (address => bool) public frozenAccount;\n\n    /* This generates a public event on the blockchain that will notify about an address being freezed. */\n    event FrozenFunds(address target, bool frozen);\n    /* This generates a public event on the blockchain that will notify about an addition of Ether to the contract. */\n    event LogDeposit(address sender, uint amount);\n    /* This generates a public event on the blockchain that will notify about a migration has been completed. */\n    event LogMigration(address receiver, uint amount);\n    /* This generates a public event on the blockchain that will notify about a Withdrawal of Ether from the contract. */\n    event LogWithdrawal(address receiver, uint amount);\n\n    /* Initializes the contract */\n    function BSCToken( uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol ) token (initialSupply, tokenName, decimalUnits, tokenSymbol) {}\n\n    /* Internal transfer, only can be called by this contract */\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != 0x0);                               // Prevent transfer to 0x0 address. User should use burn() instead.\n        require(balanceOf[_from] >= _value);               // Check if the sender has enough.\n        require(balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows.\n        require(!frozenAccount[_from]);                    // Check if sender is frozen.\n        require(!frozenAccount[_to]);                      // Check if recipient is frozen.\n        \n        balanceOf[_from] -= _value; // Subtracts from the sender.\n        balanceOf[_to]   += _value; // Adds the same to the recipient.\n\n        _updateTokensAvailable(balanceOf[this]); // Update the balance of tokens available if necessary.\n        \n        Transfer(_from, _to, _value); // Notifies the blockchain about the transfer.\n    }\n\n    /* Internal, updates the balance of tokens available. */\n    function _updateTokensAvailable(uint256 _tokensAvailable) internal {\n        tokensAvailable = _tokensAvailable;\n    }\n\n    /* Internal, updates the balance of Ether available in order to cover potential sales. */\n    function _updateSolvency(uint256 _solvency) internal {\n        solvency = _solvency;\n    }\n\n    /* Internal, updates the profit value */\n    function _updateProfit(uint256 _increment, bool add) internal{\n        if (add){\n            // Increase the profit value\n            profit = profit + _increment;\n        }else{\n            // Decrease the profit value\n            if(_increment > profit){\n                profit = 0;\n            }else{\n                profit = profit - _increment;\n            }\n        }\n    }\n\n    /// @notice The owner sends `_value` tokens to `_to`, because `_to` have the right. The tokens migrated count as pre-distributed ones.\n    /// @param _to The address of the recipient.\n    /// @param _value The amount to send.\n    function completeMigration(address _to, uint256 _value) onlyOwner payable{\n        require( msg.value >= (_value * sellPrice) );       // Owner has to send enough ETH to proceed.\n        require((this.balance + msg.value) > this.balance); // Checks for overflows.\n        \n        //Contract has already received the Ether when this function is executed.\n        _updateSolvency(this.balance);   // Updates the value of solvency of the contract.\n        _updateProfit(msg.value, false); // Decrease profit value.\n        // Decrease because the owner invests his own Ether in order to guarantee the solvency.\n\n        _transfer(msg.sender, _to, _value); // Transfers the tokens to the investor's address.\n        distributedTokens = distributedTokens + _value; // Increase the number of tokens distributed.\n\n        LogMigration( _to, _value); // Notifies the blockchain about the migration taking place.\n    }\n\n    /// @notice Create `mintedAmount` tokens and send it to `target`.\n    /// @param target Address to receive the tokens.\n    /// @param mintedAmount The amount of tokens target will receive.\n    function mintToken(address target, uint256 mintedAmount) onlyOwner {\n        balanceOf[target] += mintedAmount; // Updates target's balance.\n        totalSupply       += mintedAmount; // Updates totalSupply.\n\n        _updateTokensAvailable(balanceOf[this]); // Update the balance of tokens available if necessary.\n        \n        Transfer(0, this, mintedAmount);      // Notifies the blockchain about the tokens created.\n        Transfer(this, target, mintedAmount); // Notifies the blockchain about the transfer to target.\n    }\n\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens.\n    /// @param target Address to be frozen.\n    /// @param freeze Either to freeze target or not.\n    function freezeAccount(address target, bool freeze) onlyOwner {\n        frozenAccount[target] = freeze; // Sets the target status. True if it's frozen, False if it's not.\n        FrozenFunds(target, freeze); // Notifies the blockchain about the change of state.\n    }\n\n    /// @notice Allow addresses to pay `newBuyPrice`ETH when buying and receive `newSellPrice`ETH when selling, foreach token bought/sold.\n    /// @param newSellPrice Price applied when an address sells its tokens, amount in WEI (1ETH = 10¹⁸WEI).\n    /// @param newBuyPrice Price applied when an address buys tokens, amount in WEI (1ETH = 10¹⁸WEI).\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {\n        sellPrice = newSellPrice; // Updates the buying price.\n        buyPrice = newBuyPrice;   // Updates the selling price.\n    }\n\n    /// @notice Sets the state of buy and sell operations\n    /// @param isClosedBuy True if buy operations are closed, False if opened.\n    /// @param isClosedSell True if sell operations are closed, False if opened.\n    function setStatus(bool isClosedBuy, bool isClosedSell) onlyOwner {\n        closeBuy = isClosedBuy;   // Updates the state of buy operations.\n        closeSell = isClosedSell; // Updates the state of sell operations.\n    }\n\n    /// @notice Deposits Ether to the contract\n    function deposit() payable returns(bool success) {\n        require((this.balance + msg.value) > this.balance); // Checks for overflows.\n        \n        //Contract has already received the Ether when this function is executed.\n        _updateSolvency(this.balance);   // Updates the value of solvency of the contract.\n        _updateProfit(msg.value, false); // Decrease profit value.\n        // Decrease because deposits will be done mostly by the owner.\n        // Possible donations won't count as profit. Atleast not for the company, but in favor of the investors.\n\n        LogDeposit(msg.sender, msg.value); // Notifies the blockchain about the Ether received.\n        return true;\n    }\n\n    /// @notice The owner withdraws Ether from the contract.\n    /// @param amountInWeis Amount of ETH in WEI which will be withdrawed.\n    function withdraw(uint amountInWeis) onlyOwner {\n        LogWithdrawal(msg.sender, amountInWeis); // Notifies the blockchain about the withdrawal.\n        _updateSolvency( (this.balance - amountInWeis) ); // Updates the value of solvency of the contract.\n        _updateProfit(amountInWeis, true);                // Increase the profit value.\n        owner.transfer(amountInWeis); // Sends the Ether to owner address.\n    }\n\n    /// @notice Buy tokens from contract by sending Ether.\n    function buy() payable {\n        require(!closeBuy); // Buy operations must be opened.\n        uint amount = msg.value / buyPrice; // Calculates the amount of tokens to be sent.\n        uint256 profit_in_transaction = msg.value - (amount * sellPrice); // Calculates the relative profit for this transaction.\n        require( profit_in_transaction > 0 );\n\n        //Contract has already received the Ether when this function is executed.\n        _transfer(this, msg.sender, amount); // Makes the transfer of tokens.\n        distributedTokens = distributedTokens + amount; // Increase the number of tokens distributed.\n        _updateSolvency(this.balance - profit_in_transaction);   // Updates the value of solvency of the contract.\n        _updateProfit(profit_in_transaction, true);              // Increase the profit value.\n        owner.transfer(profit_in_transaction); // Sends profit to the owner of the contract.\n    }\n\n    /// @notice Sell `amount` tokens to the contract.\n    /// @param amount amount of tokens to be sold.\n    function sell(uint256 amount) {\n        require(!closeSell); // Sell operations must be opened.\n        require(this.balance >= amount * sellPrice); // Checks if the contract has enough Ether to buy.\n        \n        _transfer(msg.sender, this, amount); // Makes the transfer of tokens, the contract receives the tokens.\n        distributedTokens = distributedTokens - amount; // Decrease the number of tokens distributed.\n        _updateSolvency( (this.balance - (amount * sellPrice)) ); // Updates the value of solvency of the contract.\n        msg.sender.transfer(amount * sellPrice); // Sends Ether to the seller.\n    }\n}",
  "bytecode": "606060409081526611c37937e08000600755662386f26fc100006008556009805461ffff19169055600160a060020a0330166000818152600560205291822054600a55600b82905531600c55600d5534156200005a57600080fd5b604051620011ef380380620011ef83398101604052808051919060200180518201919060200180519190602001805190910190505b838383835b5b60008054600160a060020a03191633600160a060020a03161790555b600160a060020a033316600090815260056020526040902084905560048490556001838051620000e69291602001906200011c565b506002818051620000fc9291602001906200011c565b506003805460ff191660ff84161790555b505050505b50505050620001c6565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200015f57805160ff19168380011785556200018f565b828001600101855582156200018f579182015b828111156200018f57825182559160200191906001019062000172565b5b506200019e929150620001a2565b5090565b620001c391905b808211156200019e5760008155600101620001a9565b5090565b90565b61101980620001d66000396000f300606060405236156101725763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305fefda7811461017757806306fdde0314610192578063095ea7b31461021d57806318160ddd1461025357806323b872dd146102785780632e1a7d4d146102b4578063313ce567146102cc5780634b750334146102f5578063586360ce1461031a57806360659a921461033f57806366d16cc31461036457806370a0823114610389578063773c5049146103ba578063780ae915146103df57806379c65068146103f85780638620410b1461041c5780638da5cb5b1461044157806395d89b4114610470578063a6f2ae3a146104fb578063a9059cbb14610505578063b3c2eac114610529578063b414d4b614610548578063ba83c9701461057b578063c6ab5cdc146105a2578063d0e30db0146105c9578063dd62ed3e146105e5578063e4849b321461061c578063e724529c14610634578063f2fde38b1461065a575b600080fd5b341561018257600080fd5b61019060043560243561067b565b005b341561019d57600080fd5b6101a56106a6565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101e25780820151818401525b6020016101c9565b50505050905090810190601f16801561020f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561022857600080fd5b61023f600160a060020a0360043516602435610744565b604051901515815260200160405180910390f35b341561025e57600080fd5b610266610775565b60405190815260200160405180910390f35b341561028357600080fd5b61023f600160a060020a036004358116906024351660443561077b565b604051901515815260200160405180910390f35b34156102bf57600080fd5b6101906004356107f3565b005b34156102d757600080fd5b6102df6108aa565b60405160ff909116815260200160405180910390f35b341561030057600080fd5b6102666108b3565b60405190815260200160405180910390f35b341561032557600080fd5b6102666108b9565b60405190815260200160405180910390f35b341561034a57600080fd5b6102666108bf565b60405190815260200160405180910390f35b341561036f57600080fd5b6102666108c5565b60405190815260200160405180910390f35b341561039457600080fd5b610266600160a060020a03600435166108cb565b60405190815260200160405180910390f35b34156103c557600080fd5b6102666108dd565b60405190815260200160405180910390f35b610190600160a060020a03600435166024356108e3565b005b341561040357600080fd5b610190600160a060020a03600435166024356109a4565b005b341561042757600080fd5b610266610a84565b60405190815260200160405180910390f35b341561044c57600080fd5b610454610a8a565b604051600160a060020a03909116815260200160405180910390f35b341561047b57600080fd5b6101a5610a99565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101e25780820151818401525b6020016101c9565b50505050905090810190601f16801561020f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610190610b37565b005b341561051057600080fd5b610190600160a060020a0360043516602435610be0565b005b341561053457600080fd5b61019060043515156024351515610bf0565b005b341561055357600080fd5b61023f600160a060020a0360043516610c2c565b604051901515815260200160405180910390f35b341561058657600080fd5b61023f610c41565b604051901515815260200160405180910390f35b34156105ad57600080fd5b61023f610c4f565b604051901515815260200160405180910390f35b61023f610c58565b604051901515815260200160405180910390f35b34156105f057600080fd5b610266600160a060020a0360043581169060243516610cdd565b60405190815260200160405180910390f35b341561062757600080fd5b610190600435610cfa565b005b341561063f57600080fd5b610190600160a060020a03600435166024351515610d94565b005b341561066557600080fd5b610190600160a060020a0360043516610e22565b005b60005433600160a060020a0390811691161461069657600080fd5b600782905560088190555b5b5050565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561073c5780601f106107115761010080835404028352916020019161073c565b820191906000526020600020905b81548152906001019060200180831161071f57829003601f168201915b505050505081565b600160a060020a03338116600090815260066020908152604080832093861683529290522081905560015b92915050565b60045481565b600160a060020a038084166000908152600660209081526040808320339094168352929052908120548211156107b057600080fd5b600160a060020a03808516600090815260066020908152604080832033909416835292905220805483900390556107e8848484610e6a565b5060015b9392505050565b60005433600160a060020a0390811691161461080e57600080fd5b7fb4214c8c54fc7442f36d3682f59aebaf09358a4431835b30efb29d52cf9e1e913382604051600160a060020a03909216825260208201526040908101905180910390a16108678130600160a060020a03163103610fa4565b610872816001610fad565b600054600160a060020a031681156108fc0282604051600060405180830381858888f1935050505015156108a557600080fd5b5b5b50565b60035460ff1681565b60075481565b600b5481565b600a5481565b600d5481565b60056020526000908152604090205481565b600c5481565b60005433600160a060020a039081169116146108fe57600080fd5b600754810234101561090f57600080fd5b600160a060020a0330168031903134011161092957600080fd5b61093c30600160a060020a031631610fa4565b610947346000610fad565b610952338383610e6a565b600b8054820190557fdbc139be75ee0b1663c70c64738c6ef477bef775c39533021231944d890d223d8282604051600160a060020a03909216825260208201526040908101905180910390a15b5b5050565b60005433600160a060020a039081169116146109bf57600080fd5b600160a060020a03808316600090815260056020526040808220805485019055600480548501905530909216815220546109f890610fe4565b30600160a060020a031660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a381600160a060020a031630600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a35b5b5050565b60085481565b600054600160a060020a031681565b60028054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561073c5780601f106107115761010080835404028352916020019161073c565b820191906000526020600020905b81548152906001019060200180831161071f57829003601f168201915b505050505081565b600954600090819060ff1615610b4c57600080fd5b60085434811515610b5957fe5b049150600754820234039050600081111515610b7457600080fd5b610b7f303384610e6a565b600b805483019055610b9d600160a060020a03301631829003610fa4565b610ba8816001610fad565b600054600160a060020a031681156108fc0282604051600060405180830381858888f1935050505015156106a157600080fd5b5b5050565b6106a1338383610e6a565b5b5050565b60005433600160a060020a03908116911614610c0b57600080fd5b6009805460ff19168315151761ff001916610100831515021790555b5b5050565b600e6020526000908152604090205460ff1681565b600954610100900460ff1681565b60095460ff1681565b6000600160a060020a03301680319031340111610c7457600080fd5b610c8730600160a060020a031631610fa4565b610c92346000610fad565b7f1b851e1031ef35a238e6c67d0c7991162390df915f70eaf9098dbf0b175a61983334604051600160a060020a03909216825260208201526040908101905180910390a15060015b90565b600660209081526000928352604080842090915290825290205481565b600954610100900460ff1615610d0f57600080fd5b6007548102600160a060020a033016311015610d2a57600080fd5b610d35333083610e6a565b80600b5403600b81905550610d59600754820230600160a060020a03163103610fa4565b33600160a060020a03166108fc60075483029081150290604051600060405180830381858888f1935050505015156108a557600080fd5b5b50565b60005433600160a060020a03908116911614610daf57600080fd5b600160a060020a0382166000908152600e602052604090819020805460ff19168315151790557f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a5908390839051600160a060020a039092168252151560208201526040908101905180910390a15b5b5050565b60005433600160a060020a03908116911614610e3d57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b600160a060020a0382161515610e7f57600080fd5b600160a060020a03831660009081526005602052604090205481901015610ea557600080fd5b600160a060020a03821660009081526005602052604090205481810111610ecb57600080fd5b600160a060020a0383166000908152600e602052604090205460ff1615610ef157600080fd5b600160a060020a0382166000908152600e602052604090205460ff1615610f1757600080fd5b600160a060020a038084166000908152600560205260408082208054859003905584831682528082208054850190553090921681522054610f5790610fe4565b81600160a060020a031683600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a35b505050565b600c8190555b50565b8015610fc057600d8054830190556106a1565b600d54821115610fd4576000600d556106a1565b600d805483900390555b5b5b5050565b600a8190555b505600a165627a7a7230582014514b5c2bdc772b3ea28a9ea7c667b61a7a7c9db91d2283a8d8f84d802c421e00290000000000000000000000000000000000000000000000000000000005f5e1000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000017426974636f696e2053746172747570204361706974616c00000000000000000000000000000000000000000000000000000000000000000000000000000000034253430000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000005f5e1000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000017426974636f696e2053746172747570204361706974616c00000000000000000000000000000000000000000000000000000000000000000000000000000000034253430000000000000000000000000000000000000000000000000000000000"
}