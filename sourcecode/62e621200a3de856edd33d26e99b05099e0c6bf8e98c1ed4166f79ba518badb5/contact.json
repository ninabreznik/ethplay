{
  "address": "0x36189049e1953fc66a251c3add645bd72ef1c2ab",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "uBitToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-29\n*/\n\npragma solidity ^0.4.24;\n\n\n// ----------------------------------------------------------------------------\n// uBit Burnable/Mintable token contract\n//\n// Symbol           : UB\n// Name             : uBit\n// Initial Supply   : 93,000,000\n// Decimals         : 18\n// ----------------------------------------------------------------------------\n\n\n// ----------------------------------------------------------------------------\n// Safe math\n// ----------------------------------------------------------------------------\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n    function totalSupply() public view returns (uint);\n    function balanceOf(address tokenOwner) public view returns (uint balance);\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n\ncontract Owned {\n    address public owner;\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    constructor() public {\n        owner = 0x2Aa5dd0c7B86a9c4875832E9E5d0dD9836393B7E;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        require(_newOwner != address(0x0));\n        emit OwnershipTransferred(owner,_newOwner);\n        owner = _newOwner;\n    }\n    \n}\n\n\n// ----------------------------------------------------------------------------\n// ERC20 Token, with the addition of symbol, name and decimals and an\n// initial fixed supply\n// ----------------------------------------------------------------------------\ncontract uBitToken is ERC20Interface, Owned {\n    \n    using SafeMath for uint;\n\n    string public symbol;\n    string public  name;\n    uint8 public decimals;\n    uint public _totalSupply;\n\n    mapping(address => uint) public balances;\n    mapping(address => mapping(address => uint)) public allowed;\n    \n    \n    event Mint(address indexed to, uint256 amount);\n    event Burn(address indexed burner, uint256 value);\n    \n    \n    // ------------------------------------------------------------------------\n    // Constructor\n    // ------------------------------------------------------------------------\n    constructor() public {\n        symbol = \"UB\";\n        name = \"uBit\";\n        decimals = 18;\n        _totalSupply = 93000000 * 10**uint(decimals);\n        balances[owner] = _totalSupply;\n        emit Transfer(address(0), owner, _totalSupply);\n    }\n    \n    \n    // ------------------------------------------------------------------------\n    // Reject when someone sends ethers to this contract\n    // ------------------------------------------------------------------------\n    function() public payable {\n        revert();\n    }\n    \n    \n    // ------------------------------------------------------------------------\n    // Total supply\n    // ------------------------------------------------------------------------\n    function totalSupply() public view returns (uint) {\n        return _totalSupply;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Get the token balance for account `tokenOwner`\n    // ------------------------------------------------------------------------\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\n        return balances[tokenOwner];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Transfer the balance from token owner's account to `to` account\n    // - Owner's account must have sufficient balance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transfer(address to, uint tokens) public returns (bool success) {\n        require(to != address(0));\n        require(tokens > 0);\n        require(balances[msg.sender] >= tokens);\n        \n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n    // from the token owner's account\n    //\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n    // recommends that there are no checks for the approval double-spend attack\n    // as this should be implemented in user interfaces \n    // ------------------------------------------------------------------------\n    function approve(address spender, uint tokens) public returns (bool success) {\n        require(spender != address(0));\n        require(tokens > 0);\n        \n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Transfer `tokens` from the `from` account to the `to` account\n    // \n    // The calling account must already have sufficient tokens approve(...)-d\n    // for spending from the `from` account and\n    // - From account must have sufficient balance to transfer\n    // - Spender must have sufficient allowance to transfer\n    // ------------------------------------------------------------------------\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n        require(from != address(0));\n        require(to != address(0));\n        require(tokens > 0);\n        require(balances[from] >= tokens);\n        require(allowed[from][msg.sender] >= tokens);\n        \n        balances[from] = balances[from].sub(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Returns the amount of tokens approved by the owner that can be\n    // transferred to the spender's account\n    // ------------------------------------------------------------------------\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n    \n    \n    // ------------------------------------------------------------------------\n    // Increase the amount of tokens that an owner allowed to a spender.\n    //\n    // approve should be called when allowed[_spender] == 0. To increment\n    // allowed value is better to use this function to avoid 2 calls (and wait until\n    // the first transaction is mined)\n    // _spender The address which will spend the funds.\n    // _addedValue The amount of tokens to increase the allowance by.\n    // ------------------------------------------------------------------------\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        require(_spender != address(0));\n        \n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n    \n    \n    // ------------------------------------------------------------------------\n    // Decrease the amount of tokens that an owner allowed to a spender.\n    //\n    // approve should be called when allowed[_spender] == 0. To decrement\n    // allowed value is better to use this function to avoid 2 calls (and wait until\n    // the first transaction is mined)\n    // From MonolithDAO Token.sol\n    // _spender The address which will spend the funds.\n    // _subtractedValue The amount of tokens to decrease the allowance by.\n    // ------------------------------------------------------------------------\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        require(_spender != address(0));\n        \n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n    \n    \n    // ------------------------------------------------------------------------\n    // Function to mint tokens\n    // _to The address that will receive the minted tokens.\n    // _value The amount of tokens to mint.\n    // A boolean that indicates if the operation was successful.\n    // ------------------------------------------------------------------------\n    function mint(address _to, uint256 _value) onlyOwner public returns (bool) {\n        require(_to != address(0));\n        require(_value > 0);\n        \n        _totalSupply = _totalSupply.add(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Mint(_to, _value);\n        emit Transfer(address(0), _to, _value);\n        return true;\n    }\n    \n    \n    // ------------------------------------------------------------------------\n    // Function to burn tokens\n    // _value The amount of tokens to burn.\n    // A boolean that indicates if the operation was successful.\n    // ------------------------------------------------------------------------\n    function burn(uint256 _value) onlyOwner public {\n      require(_value > 0);\n      require(_value <= balances[msg.sender]);\n      \n      balances[owner] = balances[owner].sub(_value);\n      _totalSupply = _totalSupply.sub(_value);\n      emit Burn(owner, _value);\n      emit Transfer(owner, address(0), _value);\n    }\n\n}",
  "bytecode": "608060405234801561001057600080fd5b5060008054600160a060020a031916732aa5dd0c7b86a9c4875832e9e5d0dd9836393b7e1790556040805180820190915260028082527f5542000000000000000000000000000000000000000000000000000000000000602090920191825261007b9160019161013f565b506040805180820190915260048082527f754269740000000000000000000000000000000000000000000000000000000060209092019182526100c09160029161013f565b5060038054601260ff19909116179081905560ff16600a0a63058b114002600481905560008054600160a060020a0390811682526005602090815260408084208590558354815195865290519216937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a36101da565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061018057805160ff19168380011785556101ad565b828001600101855582156101ad579182015b828111156101ad578251825591602001919060010190610192565b506101b99291506101bd565b5090565b6101d791905b808211156101b957600081556001016101c3565b90565b610d33806101e96000396000f3006080604052600436106100fb5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610100578063095ea7b31461018a57806318160ddd146101c257806323b872dd146101e957806327e235e314610213578063313ce567146102345780633eaaf86b1461025f57806340c10f191461027457806342966c68146102985780635c658165146102b257806366188463146102d957806370a08231146102fd5780638da5cb5b1461031e57806395d89b411461034f578063a9059cbb14610364578063d73dd62314610388578063dd62ed3e146103ac578063f2fde38b146103d3575b600080fd5b34801561010c57600080fd5b506101156103f4565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561014f578181015183820152602001610137565b50505050905090810190601f16801561017c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561019657600080fd5b506101ae600160a060020a036004351660243561047f565b604080519115158252519081900360200190f35b3480156101ce57600080fd5b506101d761050b565b60408051918252519081900360200190f35b3480156101f557600080fd5b506101ae600160a060020a0360043581169060243516604435610511565b34801561021f57600080fd5b506101d7600160a060020a0360043516610698565b34801561024057600080fd5b506102496106aa565b6040805160ff9092168252519081900360200190f35b34801561026b57600080fd5b506101d76106b3565b34801561028057600080fd5b506101ae600160a060020a03600435166024356106b9565b3480156102a457600080fd5b506102b06004356107bc565b005b3480156102be57600080fd5b506101d7600160a060020a03600435811690602435166108cb565b3480156102e557600080fd5b506101ae600160a060020a03600435166024356108e8565b34801561030957600080fd5b506101d7600160a060020a03600435166109f1565b34801561032a57600080fd5b50610333610a0c565b60408051600160a060020a039092168252519081900360200190f35b34801561035b57600080fd5b50610115610a1b565b34801561037057600080fd5b506101ae600160a060020a0360043516602435610a75565b34801561039457600080fd5b506101ae600160a060020a0360043516602435610b53565b3480156103b857600080fd5b506101d7600160a060020a0360043581169060243516610c03565b3480156103df57600080fd5b506102b0600160a060020a0360043516610c2e565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156104775780601f1061044c57610100808354040283529160200191610477565b820191906000526020600020905b81548152906001019060200180831161045a57829003601f168201915b505050505081565b6000600160a060020a038316151561049657600080fd5b600082116104a357600080fd5b336000818152600660209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b60045490565b6000600160a060020a038416151561052857600080fd5b600160a060020a038316151561053d57600080fd5b6000821161054a57600080fd5b600160a060020a03841660009081526005602052604090205482111561056f57600080fd5b600160a060020a038416600090815260066020908152604080832033845290915290205482111561059f57600080fd5b600160a060020a0384166000908152600560205260409020546105c8908363ffffffff610cc216565b600160a060020a0385166000908152600560209081526040808320939093556006815282822033835290522054610605908363ffffffff610cc216565b600160a060020a038086166000908152600660209081526040808320338452825280832094909455918616815260059091522054610649908363ffffffff610cd716565b600160a060020a038085166000818152600560209081526040918290209490945580518681529051919392881692600080516020610ce883398151915292918290030190a35060019392505050565b60056020526000908152604090205481565b60035460ff1681565b60045481565b60008054600160a060020a031633146106d157600080fd5b600160a060020a03831615156106e657600080fd5b600082116106f357600080fd5b600454610706908363ffffffff610cd716565b600455600160a060020a038316600090815260056020526040902054610732908363ffffffff610cd716565b600160a060020a038416600081815260056020908152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a03851691600091600080516020610ce88339815191529181900360200190a350600192915050565b600054600160a060020a031633146107d357600080fd5b600081116107e057600080fd5b336000908152600560205260409020548111156107fc57600080fd5b60008054600160a060020a0316815260056020526040902054610825908263ffffffff610cc216565b60008054600160a060020a0316815260056020526040902055600454610851908263ffffffff610cc216565b600455600054604080518381529051600160a060020a03909216917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59181900360200190a260008054604080518481529051600160a060020a039290921691600080516020610ce88339815191529181900360200190a350565b600660209081526000928352604080842090915290825290205481565b600080600160a060020a038416151561090057600080fd5b50336000908152600660209081526040808320600160a060020a03871684529091529020548083111561095657336000908152600660209081526040808320600160a060020a038816845290915281205561098b565b610966818463ffffffff610cc216565b336000908152600660209081526040808320600160a060020a03891684529091529020555b336000818152600660209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526005602052604090205490565b600054600160a060020a031681565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104775780601f1061044c57610100808354040283529160200191610477565b6000600160a060020a0383161515610a8c57600080fd5b60008211610a9957600080fd5b33600090815260056020526040902054821115610ab557600080fd5b33600090815260056020526040902054610ad5908363ffffffff610cc216565b3360009081526005602052604080822092909255600160a060020a03851681522054610b07908363ffffffff610cd716565b600160a060020a038416600081815260056020908152604091829020939093558051858152905191923392600080516020610ce88339815191529281900390910190a350600192915050565b6000600160a060020a0383161515610b6a57600080fd5b336000908152600660209081526040808320600160a060020a0387168452909152902054610b9e908363ffffffff610cd716565b336000818152600660209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260066020908152604080832093909416825291909152205490565b600054600160a060020a03163314610c4557600080fd5b600160a060020a0381161515610c5a57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610cd157600080fd5b50900390565b8181018281101561050557600080fd00ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058209c821f823963f7bfa5ff34d4a7117c1dde603a2623e9f755d7fe805f5cecf8010029"
}