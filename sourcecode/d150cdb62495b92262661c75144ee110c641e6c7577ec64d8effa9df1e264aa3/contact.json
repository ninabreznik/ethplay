{
  "address": "0xb3277bc81fd97bd17185237275fe674705bc648c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GETEventContract",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-21\n*/\n\n/*\n * http://solidity.readthedocs.io/en/latest\n * https://ethereumbuilders.gitbooks.io/guide/content/en/solidity_tutorials.html\n * Token standard: https://github.com/ethereum/EIPs/issues/20\n */\n// import \"contracts/StringLib.sol\";\n\npragma solidity ^0.4.24;\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeERC20 {\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    assert(token.transfer(to, value));\n  }\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n    assert(token.transferFrom(from, to, value));\n  }\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    assert(token.approve(spender, value));\n  }\n}\n\ncontract owned {\n    address owner;\n\n    modifier onlyOwner { if (msg.sender == owner) _ ; }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function kill() public {\n        if (msg.sender == owner) {\n            selfdestruct(owner);\n        }\n    }\n}\n/*\n * This contract holds all sold tickets for an event. Tickets are\n * created on the fly, identified by an id. Owners are identified by\n * an address.\n *\n * The system currently does not support\n * - privileges\n * - returning tickets\n * - execution of tickets\n */\n\ncontract GETEventContract is owned {\n    using SafeERC20 for ERC20Basic;\n    event TicketTransfered(address indexed from, address indexed to, uint256 ticketid);\n\n    // all sold / owned tickets in the system\n    mapping (uint256 => address) public ticketOwner;\n\n    event GETUnstaked(uint256 amount);\n\n    function transferTicket(address _receiver, uint256 _ticketid) onlyOwner public {\n        /*\n         * Transfer a specific ticket to a new owner, creating it\n         * on the fly if necessary\n         */\n        ticketOwner[_ticketid] = _receiver;\n    }\n\n    function unstakeGET(ERC20Basic _token) public onlyOwner {\n        uint256 currentGETBalance = _token.balanceOf(address(this));\n        _token.safeTransfer(owner, currentGETBalance);\n        emit GETUnstaked(currentGETBalance);\n    } \n}",
  "bytecode": "608060405260008054600160a060020a0319163317905561035c806100256000396000f3006080604052600436106100615763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166341c0e1b5811461006657806351958a561461007d5780637a4b7aa7146100a1578063c2ff12fc146100c2575b600080fd5b34801561007257600080fd5b5061007b6100f6565b005b34801561008957600080fd5b5061007b600160a060020a0360043516602435610119565b3480156100ad57600080fd5b5061007b600160a060020a0360043516610165565b3480156100ce57600080fd5b506100da600435610260565b60408051600160a060020a039092168252519081900360200190f35b600054600160a060020a031633141561011757600054600160a060020a0316ff5b565b600054600160a060020a0316331415610161576000818152600160205260409020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0384161790555b5050565b60008054600160a060020a031633141561016157604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a038416916370a082319160248083019260209291908290030181600087803b1580156101da57600080fd5b505af11580156101ee573d6000803e3d6000fd5b505050506040513d602081101561020457600080fd5b505160005490915061022990600160a060020a0384811691168363ffffffff61027b16565b6040805182815290517ff7bc0731022416627df34db0eabef153ca9165da0baf1e20e778a553e61f266a9181900360200190a15050565b600160205260009081526040902054600160a060020a031681565b82600160a060020a031663a9059cbb83836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156102f757600080fd5b505af115801561030b573d6000803e3d6000fd5b505050506040513d602081101561032157600080fd5b5051151561032b57fe5b5050505600a165627a7a7230582046397a3f0f86310f7056ca85cfefca5efd99044cbb13c637dcf492450785e7310029"
}