{
  "address": "0xb41f09a973a85c7f497c10b00a939de667b55a78",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Kryptono Token",
  "contractName": "KNOW",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-24\n*/\n\npragma solidity ^0.4.20;\n// ----------------------------------------------------------------------------------------------\n// KNOW Token by Kryptono Limited.\n// An ERC223 standard\n//\n// author: Kryptono Team\n// Contact: [emailÂ protected]\n\nlibrary SafeMath {\n\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n\n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n\n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n\n}\n\ncontract ERC20 {\n    // Get the total token supply\n    function totalSupply() public constant returns (uint256 _totalSupply);\n \n    // Get the account balance of another account with address _owner\n    function balanceOf(address _owner) public constant returns (uint256 balance);\n \n    // Send _value amount of tokens to address _to\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    \n    // transfer _value amount of token approved by address _from\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    \n    // approve an address with _value amount of tokens\n    function approve(address _spender, uint256 _value) public returns (bool success);\n\n    // get remaining token approved by _owner to _spender\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n  \n    // Triggered when tokens are transferred.\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n \n    // Triggered whenever approve(address _spender, uint256 _value) is called.\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract ERC223 is ERC20{\n    function transfer(address _to, uint _value, bytes _data) public returns (bool success);\n    function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success);\n    event Transfer(address indexed _from, address indexed _to, uint _value, bytes indexed _data);\n}\n\n/// contract receiver interface\ncontract ContractReceiver {  \n    function tokenFallback(address _from, uint _value, bytes _data) external;\n}\n\ncontract BasicKNOW is ERC223 {\n    using SafeMath for uint256;\n    \n    uint256 public constant decimals = 10;\n    string public constant symbol = \"KNOW\";\n    string public constant name = \"KNOW\";\n    uint256 public _totalSupply = 10 ** 19; // total supply is 10^19 unit, equivalent to 10^9 KNOW\n\n    // Owner of this contract\n    address public owner;\n\n    // tradable\n    bool public tradable = false;\n\n    // Balances KNOW for each account\n    mapping(address => uint256) balances;\n    \n    // Owner of account approves the transfer of an amount to another account\n    mapping(address => mapping (address => uint256)) allowed;\n            \n    /**\n     * Functions with this modifier can only be executed by the owner\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier isTradable(){\n        require(tradable == true || msg.sender == owner);\n        _;\n    }\n\n    /// @dev Constructor\n    function BasicKNOW() \n    public {\n        owner = msg.sender;\n        balances[owner] = _totalSupply;\n        Transfer(0x0, owner, _totalSupply);\n    }\n    \n    /// @dev Gets totalSupply\n    /// @return Total supply\n    function totalSupply()\n    public \n    constant \n    returns (uint256) {\n        return _totalSupply;\n    }\n        \n    /// @dev Gets account's balance\n    /// @param _addr Address of the account\n    /// @return Account balance\n    function balanceOf(address _addr) \n    public\n    constant \n    returns (uint256) {\n        return balances[_addr];\n    }\n    \n    \n    //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n    function isContract(address _addr) \n    private \n    view \n    returns (bool is_contract) {\n        uint length;\n        assembly {\n            //retrieve the size of the code on target address, this needs assembly\n            length := extcodesize(_addr)\n        }\n        return (length>0);\n    }\n \n    /// @dev Transfers the balance from msg.sender to an account\n    /// @param _to Recipient address\n    /// @param _value Transfered amount in unit\n    /// @return Transfer status\n    // Standard function transfer similar to ERC20 transfer with no _data .\n    // Added due to backwards compatibility reasons .\n    function transfer(address _to, uint _value) \n    public \n    isTradable\n    returns (bool success) {\n        require(_to != 0x0);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n    \n    /// @dev Function that is called when a user or another contract wants to transfer funds .\n    /// @param _to Recipient address\n    /// @param _value Transfer amount in unit\n    /// @param _data the data pass to contract reveiver\n    function transfer(\n        address _to, \n        uint _value, \n        bytes _data) \n    public\n    isTradable \n    returns (bool success) {\n        require(_to != 0x0);\n        balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n        balances[_to] = balanceOf(_to).add(_value);\n        Transfer(msg.sender, _to, _value);\n        if(isContract(_to)) {\n            ContractReceiver receiver = ContractReceiver(_to);\n            receiver.tokenFallback(msg.sender, _value, _data);\n            Transfer(msg.sender, _to, _value, _data);\n        }\n        \n        return true;\n    }\n    \n    /// @dev Function that is called when a user or another contract wants to transfer funds .\n    /// @param _to Recipient address\n    /// @param _value Transfer amount in unit\n    /// @param _data the data pass to contract reveiver\n    /// @param _custom_fallback custom name of fallback function\n    function transfer(\n        address _to, \n        uint _value, \n        bytes _data, \n        string _custom_fallback) \n    public \n    isTradable\n    returns (bool success) {\n        require(_to != 0x0);\n        balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n        balances[_to] = balanceOf(_to).add(_value);\n        Transfer(msg.sender, _to, _value);\n\n        if(isContract(_to)) {\n            assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\n            Transfer(msg.sender, _to, _value, _data);\n        }\n        return true;\n    }\n         \n    // Send _value amount of tokens from address _from to address _to\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\n    // fees in sub-currencies; the command should fail unless the _from account has\n    // deliberately authorized the sender of the message via some mechanism; we propose\n    // these standardized APIs for approval:\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value)\n    public\n    isTradable\n    returns (bool success) {\n        require(_to != 0x0);\n        balances[_from] = balances[_from].sub(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\n        Transfer(_from, _to, _value);\n        return true;\n    }\n    \n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n    // If this function is called again it overwrites the current allowance with _value.\n    function approve(address _spender, uint256 _amount) \n    public\n    returns (bool success) {\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n    \n    // get allowance\n    function allowance(address _owner, address _spender) \n    public\n    constant \n    returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    // withdraw any ERC20 token in this contract to owner\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public returns (bool success) {\n        return ERC223(tokenAddress).transfer(owner, tokens);\n    }\n    \n    // allow people can transfer their token\n    // NOTE: can not turn off\n    function turnOnTradable() \n    public\n    onlyOwner{\n        tradable = true;\n    }\n}\n\ncontract KNOW is BasicKNOW {\n\n    bool public _selling = false;//initial selling\n    \n    uint256 public _originalBuyPrice = 50 * 10**12; // original buy 1ETH = 5000 KNOW = 50 * 10**12 unit\n\n    // List of approved investors\n    mapping(address => bool) private approvedInvestorList;\n    \n    // deposit\n    mapping(address => uint256) private deposit;\n    \n    // icoPercent\n    uint256 public _icoPercent = 0;\n    \n    // _icoSupply is the avalable unit. Initially, it is _totalSupply\n    uint256 public _icoSupply = (_totalSupply * _icoPercent) / 100;\n    \n    // minimum buy 0.3 ETH\n    uint256 public _minimumBuy = 3 * 10 ** 17;\n    \n    // maximum buy 25 ETH\n    uint256 public _maximumBuy = 25 * 10 ** 18;\n\n    // totalTokenSold\n    uint256 public totalTokenSold = 0;\n\n    /**\n     * Functions with this modifier check on sale status\n     * Only allow sale if _selling is on\n     */\n    modifier onSale() {\n        require(_selling);\n        _;\n    }\n    \n    /**\n     * Functions with this modifier check the validity of address is investor\n     */\n    modifier validInvestor() {\n        require(approvedInvestorList[msg.sender]);\n        _;\n    }\n    \n    /**\n     * Functions with this modifier check the validity of msg value\n     * value must greater than equal minimumBuyPrice\n     * total deposit must less than equal maximumBuyPrice\n     */\n    modifier validValue(){\n        // require value >= _minimumBuy AND total deposit of msg.sender <= maximumBuyPrice\n        require ( (msg.value >= _minimumBuy) &&\n                ( (deposit[msg.sender].add(msg.value)) <= _maximumBuy) );\n        _;\n    }\n\n    /// @dev Fallback function allows to buy by ether.\n    function()\n    public\n    payable {\n        buyKNOW();\n    }\n    \n    /// @dev buy function allows to buy ether. for using optional data\n    function buyKNOW()\n    public\n    payable\n    onSale\n    validValue\n    validInvestor {\n        uint256 requestedUnits = (msg.value * _originalBuyPrice) / 10**18;\n        require(balances[owner] >= requestedUnits);\n        // prepare transfer data\n        balances[owner] = balances[owner].sub(requestedUnits);\n        balances[msg.sender] = balances[msg.sender].add(requestedUnits);\n        \n        // increase total deposit amount\n        deposit[msg.sender] = deposit[msg.sender].add(msg.value);\n        \n        // check total and auto turnOffSale\n        totalTokenSold = totalTokenSold.add(requestedUnits);\n        if (totalTokenSold >= _icoSupply){\n            _selling = false;\n        }\n        \n        // submit transfer\n        Transfer(owner, msg.sender, requestedUnits);\n        owner.transfer(msg.value);\n    }\n\n    /// @dev Constructor\n    function KNOW() BasicKNOW()\n    public {\n        setBuyPrice(_originalBuyPrice);\n    }\n    \n    /// @dev Enables sale \n    function turnOnSale() onlyOwner \n    public {\n        _selling = true;\n    }\n\n    /// @dev Disables sale\n    function turnOffSale() onlyOwner \n    public {\n        _selling = false;\n    }\n    \n    /// @dev set new icoPercent\n    /// @param newIcoPercent new value of icoPercent\n    function setIcoPercent(uint256 newIcoPercent)\n    public \n    onlyOwner {\n        _icoPercent = newIcoPercent;\n        _icoSupply = (_totalSupply * _icoPercent) / 100;\n    }\n    \n    /// @dev set new _maximumBuy\n    /// @param newMaximumBuy new value of _maximumBuy\n    function setMaximumBuy(uint256 newMaximumBuy)\n    public \n    onlyOwner {\n        _maximumBuy = newMaximumBuy;\n    }\n\n    /// @dev Updates buy price (owner ONLY)\n    /// @param newBuyPrice New buy price (in UNIT) 1ETH <=> 10 000 0000000000 unit\n    function setBuyPrice(uint256 newBuyPrice) \n    onlyOwner \n    public {\n        require(newBuyPrice>0);\n        _originalBuyPrice = newBuyPrice; // unit\n        // control _maximumBuy_USD = 10,000 USD, KNOW price is 0.1USD\n        // maximumBuy_KNOW = 100,000 KNOW = 100,000,0000000000 unit = 10^15\n        _maximumBuy = (10**18 * 10**15) /_originalBuyPrice;\n    }\n    \n    /// @dev check address is approved investor\n    /// @param _addr address\n    function isApprovedInvestor(address _addr)\n    public\n    constant\n    returns (bool) {\n        return approvedInvestorList[_addr];\n    }\n    \n    /// @dev get ETH deposit\n    /// @param _addr address get deposit\n    /// @return amount deposit of an buyer\n    function getDeposit(address _addr)\n    public\n    constant\n    returns(uint256){\n        return deposit[_addr];\n}\n    \n    /// @dev Adds list of new investors to the investors list and approve all\n    /// @param newInvestorList Array of new investors addresses to be added\n    function addInvestorList(address[] newInvestorList)\n    onlyOwner\n    public {\n        for (uint256 i = 0; i < newInvestorList.length; i++){\n            approvedInvestorList[newInvestorList[i]] = true;\n        }\n    }\n\n    /// @dev Removes list of investors from list\n    /// @param investorList Array of addresses of investors to be removed\n    function removeInvestorList(address[] investorList)\n    onlyOwner\n    public {\n        for (uint256 i = 0; i < investorList.length; i++){\n            approvedInvestorList[investorList[i]] = false;\n        }\n    }\n    \n    /// @dev Withdraws Ether in contract (Owner only)\n    /// @return Status of withdrawal\n    function withdraw() onlyOwner \n    public \n    returns (bool) {\n        return owner.send(this.balance);\n    }\n}",
  "bytecode": "6060604052678ac7230489e8000060009081556001805460a060020a60ff02191690556004805460ff19169055652d79883d200060055560088190556009819055670429d069189e0000600a5568015af1d78b58c40000600b55600c55341561006757600080fd5b60018054600160a060020a03191633600160a060020a0390811691909117808355600080549183168152600260205260408082208390559354909216927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91905190815260200160405180910390a36100f46005546100f964010000000002610bbd176401000000009004565b610146565b60015433600160a060020a0390811691161461011457600080fd5b6000811161012157600080fd5b6005819055806d314dc6448d9338c15b0a0000000081151561013f57fe5b04600b5550565b611470806101556000396000f3006060604052600436106101925763ffffffff60e060020a6000350416630188fdef811461019c57806306fdde03146101b2578063095ea7b31461023c57806318160ddd1461027257806323526a341461029757806323b872dd146102aa5780632fb1746d146102d2578063313ce567146102e55780633c2d6447146102f85780633c50afe11461030e5780633ccfd60b146103215780633eaaf86b14610334578063407cba6714610192578063501e3a2c1461034757806354840c6e1461035a57806363ae8d6c1461036d5780636b342eb81461038357806370a082311461039657806378f2144b146103b55780637fd2304f146103c85780638da5cb5b146103db57806395d89b41146101b25780639b1fe0d41461040a5780639fc3954914610429578063a9059cbb14610478578063b5f7f6361461049a578063be45fd62146104ad578063bfb9f08814610512578063dc39d06d14610561578063dd62ed3e14610583578063e1254fba146105a8578063e98cf987146105c7578063f6368f8a146105da578063f9323a3214610681575b61019a610694565b005b34156101a757600080fd5b61019a600435610898565b34156101bd57600080fd5b6101c56108b8565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156102015780820151838201526020016101e9565b50505050905090810190601f16801561022e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561024757600080fd5b61025e600160a060020a03600435166024356108ef565b604051901515815260200160405180910390f35b341561027d57600080fd5b61028561095c565b60405190815260200160405180910390f35b34156102a257600080fd5b61019a610962565b34156102b557600080fd5b61025e600160a060020a0360043581169060243516604435610989565b34156102dd57600080fd5b61019a610ad8565b34156102f057600080fd5b610285610b19565b341561030357600080fd5b61019a600435610b1e565b341561031957600080fd5b610285610b4b565b341561032c57600080fd5b61025e610b51565b341561033f57600080fd5b610285610ba1565b341561035257600080fd5b610285610ba7565b341561036557600080fd5b61025e610bad565b341561037857600080fd5b61019a600435610bbd565b341561038e57600080fd5b610285610c0a565b34156103a157600080fd5b610285600160a060020a0360043516610c10565b34156103c057600080fd5b610285610c2b565b34156103d357600080fd5b610285610c31565b34156103e657600080fd5b6103ee610c37565b604051600160a060020a03909116815260200160405180910390f35b341561041557600080fd5b61025e600160a060020a0360043516610c46565b341561043457600080fd5b61019a6004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650610c6495505050505050565b341561048357600080fd5b61025e600160a060020a0360043516602435610cdf565b34156104a557600080fd5b610285610dda565b34156104b857600080fd5b61025e60048035600160a060020a03169060248035919060649060443590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610de095505050505050565b341561051d57600080fd5b61019a600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284375094965061105f95505050505050565b341561056c57600080fd5b61025e600160a060020a03600435166024356110d6565b341561058e57600080fd5b610285600160a060020a036004358116906024351661115c565b34156105b357600080fd5b610285600160a060020a0360043516611187565b34156105d257600080fd5b61019a6111a2565b34156105e557600080fd5b61025e60048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405281815292919060208401838380828437509496506111cc95505050505050565b341561068c57600080fd5b61025e6113ee565b60045460009060ff1615156106a857600080fd5b600a5434101580156106e45750600b54600160a060020a0333166000908152600760205260409020546106e1903463ffffffff6113f716565b11155b15156106ef57600080fd5b600160a060020a03331660009081526006602052604090205460ff16151561071657600080fd5b600554670de0b6b3a7640000903402600154600160a060020a031660009081526002602052604090205491900491508190101561075257600080fd5b600154600160a060020a031660009081526002602052604090205461077d908263ffffffff61140716565b600154600160a060020a039081166000908152600260205260408082209390935533909116815220546107b6908263ffffffff6113f716565b600160a060020a0333166000908152600260209081526040808320939093556007905220546107eb903463ffffffff6113f716565b600160a060020a033316600090815260076020526040902055600c54610817908263ffffffff6113f716565b600c8190556009549010610830576004805460ff191690555b600154600160a060020a0333811691166000805160206114258339815191528360405190815260200160405180910390a3600154600160a060020a03163480156108fc0290604051600060405180830381858888f19350505050151561089557600080fd5b50565b60015433600160a060020a039081169116146108b357600080fd5b600b55565b60408051908101604052600481527f4b4e4f5700000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260036020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60005490565b60015433600160a060020a0390811691161461097d57600080fd5b6004805460ff19169055565b6001805460009160a060020a90910460ff16151514806109b7575060015433600160a060020a039081169116145b15156109c257600080fd5b600160a060020a03831615156109d757600080fd5b600160a060020a038416600090815260026020526040902054610a00908363ffffffff61140716565b600160a060020a0380861660009081526002602090815260408083209490945560038152838220339093168252919091522054610a43908363ffffffff61140716565b600160a060020a0380861660009081526003602090815260408083203385168452825280832094909455918616815260029091522054610a89908363ffffffff6113f716565b600160a060020a03808516600081815260026020526040908190209390935591908616906000805160206114258339815191529085905190815260200160405180910390a35060019392505050565b60015433600160a060020a03908116911614610af357600080fd5b6001805474ff0000000000000000000000000000000000000000191660a060020a179055565b600a81565b60015433600160a060020a03908116911614610b3957600080fd5b60088190556000546064910204600955565b60095481565b60015460009033600160a060020a03908116911614610b6f57600080fd5b600154600160a060020a039081169030163180156108fc0290604051600060405180830381858888f194505050505090565b60005481565b60085481565b60015460a060020a900460ff1681565b60015433600160a060020a03908116911614610bd857600080fd5b60008111610be557600080fd5b6005819055806d314dc6448d9338c15b0a00000000811515610c0357fe5b04600b5550565b600a5481565b600160a060020a031660009081526002602052604090205490565b60055481565b600b5481565b600154600160a060020a031681565b600160a060020a031660009081526006602052604090205460ff1690565b60015460009033600160a060020a03908116911614610c8257600080fd5b5060005b8151811015610cdb57600060066000848481518110610ca157fe5b90602001906020020151600160a060020a031681526020810191909152604001600020805460ff1916911515919091179055600101610c86565b5050565b6001805460009160a060020a90910460ff1615151480610d0d575060015433600160a060020a039081169116145b1515610d1857600080fd5b600160a060020a0383161515610d2d57600080fd5b600160a060020a033316600090815260026020526040902054610d56908363ffffffff61140716565b600160a060020a033381166000908152600260205260408082209390935590851681522054610d8b908363ffffffff6113f716565b600160a060020a0380851660008181526002602052604090819020939093559133909116906000805160206114258339815191529085905190815260200160405180910390a350600192915050565b600c5481565b60018054600091829160a060020a900460ff1615151480610e0f575060015433600160a060020a039081169116145b1515610e1a57600080fd5b600160a060020a0385161515610e2f57600080fd5b610e4884610e3c33610c10565b9063ffffffff61140716565b600160a060020a033316600090815260026020526040902055610e7a84610e6e87610c10565b9063ffffffff6113f716565b600160a060020a0380871660008181526002602052604090819020939093559133909116906000805160206114258339815191529087905190815260200160405180910390a3610ec98561141c565b15611054575083600160a060020a03811663c0ee0b8a3386866040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610f4f578082015183820152602001610f37565b50505050905090810190601f168015610f7c5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1515610f9c57600080fd5b6102c65a03f11515610fad57600080fd5b505050826040518082805190602001908083835b60208310610fe05780518252601f199092019160209182019101610fc1565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902085600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c168760405190815260200160405180910390a45b506001949350505050565b60015460009033600160a060020a0390811691161461107d57600080fd5b5060005b8151811015610cdb5760016006600084848151811061109c57fe5b90602001906020020151600160a060020a031681526020810191909152604001600020805460ff1916911515919091179055600101611081565b600154600090600160a060020a038085169163a9059cbb911684846040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561113b57600080fd5b6102c65a03f1151561114c57600080fd5b5050506040518051949350505050565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b600160a060020a031660009081526007602052604090205490565b60015433600160a060020a039081169116146111bd57600080fd5b6004805460ff19166001179055565b6001805460009160a060020a90910460ff16151514806111fa575060015433600160a060020a039081169116145b151561120557600080fd5b600160a060020a038516151561121a57600080fd5b61122784610e3c33610c10565b600160a060020a03331660009081526002602052604090205561124d84610e6e87610c10565b600160a060020a0380871660008181526002602052604090819020939093559133909116906000805160206114258339815191529087905190815260200160405180910390a361129c8561141c565b156110545784600160a060020a03166000836040518082805190602001908083835b602083106112dd5780518252601f1990920191602091820191016112be565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902060e060020a9004903387876040518563ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a03168152602001838152602001828051906020019080838360005b8381101561136e578082015183820152602001611356565b50505050905090810190601f16801561139b5780820380516001836020036101000a031916815260200191505b50935050505060006040518083038185886187965a03f1935050505015156113bf57fe5b8260405180828051906020019080838360208310610fe05780518252601f199092019160209182019101610fc1565b60045460ff1681565b8181018281101561095657600080fd5b60008282111561141657600080fd5b50900390565b6000903b11905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a7230582040c57305d9eef58ec46090c7313601b20931dccb82fdd8999f663ed41a9cb6ee0029"
}