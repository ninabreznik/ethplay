{
  "address": "0x4db8cee6107b24e761ede7a333ad49004fb8a00d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PlatformTeamCoinVer02",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-12\n*/\n\npragma solidity ^0.4.24;\ncontract owned {\naddress public owner;\nconstructor () public {\nowner = msg.sender;\n}\nmodifier onlyOwner {\nrequire(msg.sender == owner);\n_;\n}\nfunction transferOwnership(address newOwner) onlyOwner public {\nowner = newOwner;\n}\n}\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\ncontract TokenERC20 {\n// Public variables of the token\nstring public name;\nstring public symbol;\nuint8 public decimals = 8;\n// 18 decimals is the strongly suggested default, avoid changing it\nuint256 public totalSupply;\n// This creates an array with all balances\nmapping (address => uint256) public balanceOf;\nmapping (address => mapping (address => uint256)) public allowance;\n// This generates a public event on the blockchain that will notify clients\nevent Transfer(address indexed from, address indexed to, uint256 value);\n// This generates a public event on the blockchain that will notify clients\nevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n// This notifies clients about the amount burnt\nevent Burn(address indexed from, uint256 value);\n/**\n* Constrctor function\n*\n* Initializes contract with initial supply tokens to the creator of the contract\n*/\nconstructor(\nuint256 initialSupply,\nstring tokenName,\nstring tokenSymbol\n) public {\ntotalSupply = initialSupply * 10 ** uint256(decimals);\n// Update total supply with the decimal amount\nbalanceOf[msg.sender] = totalSupply;\n// Give the creator all initial tokens\nname = tokenName;\n// Set the name for display purposes\nsymbol = tokenSymbol;\n// Set the symbol for display purposes\n}\n/**\n* Internal transfer, only can be called by this contract\n*/\nfunction _transfer(address _from, address _to, uint _value) internal {\n// Prevent transfer to 0x0 address. Use burn() instead\nrequire(_to != 0x0);\n// Check if the sender has enough\nrequire(balanceOf[_from] >= _value);\n// Check for overflows\nrequire(balanceOf[_to] + _value > balanceOf[_to]);\n// Save this for an assertion in the future\nuint previousBalances = balanceOf[_from] + balanceOf[_to];\n// Subtract from the sender\nbalanceOf[_from] -= _value;\n// Add the same to the recipient\nbalanceOf[_to] += _value;\nemit Transfer(_from, _to, _value);\n// Asserts are used to use static analysis to find bugs in your code. They should never fail\nassert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n}\n/**\n* Transfer tokens\n*\n* Send `_value` tokens to `_to` from your account\n*\n* @param _to The address of the recipient\n* @param _value the amount to send\n*/\nfunction transfer(address _to, uint256 _value) public returns (bool success) {\n_transfer(msg.sender, _to, _value);\nreturn true;\n}\n/**\n* Transfer tokens from other address\n*\n* Send `_value` tokens to `_to` in behalf of `_from`\n*\n* @param _from The address of the sender\n* @param _to The address of the recipient\n* @param _value the amount to send\n*/\nfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\nrequire(_value <= allowance[_from][msg.sender]);\n// Check allowance\nallowance[_from][msg.sender] -= _value;\n_transfer(_from, _to, _value);\nreturn true;\n}\n/**\n* Set allowance for other address\n*\n* Allows `_spender` to spend no more than `_value` tokens in your behalf\n*\n* @param _spender The address authorized to spend\n* @param _value the max amount they can spend\n*/\nfunction approve(address _spender, uint256 _value) public\nreturns (bool success) {\nallowance[msg.sender][_spender] = _value;\nemit Approval(msg.sender, _spender, _value);\nreturn true;\n}\n/**\n* Set allowance for other address and notify\n*\n* Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n*\n* @param _spender The address authorized to spend\n* @param _value the max amount they can spend\n* @param _extraData some extra information to send to the approved contract\n*/\nfunction approveAndCall(address _spender, uint256 _value, bytes _extraData)\npublic\nreturns (bool success) {\ntokenRecipient spender = tokenRecipient(_spender);\nif (approve(_spender, _value)) {\nspender.receiveApproval(msg.sender, _value, this, _extraData);\nreturn true;\n}\n}\n/**\n* Destroy tokens\n*\n* Remove `_value` tokens from the system irreversibly\n*\n* @param _value the amount of money to burn\n*/\nfunction burn(uint256 _value) public returns (bool success) {\nrequire(balanceOf[msg.sender] >= _value);\n// Check if the sender has enough\nbalanceOf[msg.sender] -= _value;\n// Subtract from the sender\ntotalSupply -= _value;\n// Updates totalSupply\nemit Burn(msg.sender, _value);\nreturn true;\n}\n/**\n* Destroy tokens from other account\n*\n* Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n*\n* @param _from the address of the sender\n* @param _value the amount of money to burn\n*/\nfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\nrequire(balanceOf[_from] >= _value);\n// Check if the targeted balance is enough\nrequire(_value <= allowance[_from][msg.sender]);\n// Check allowance\nbalanceOf[_from] -= _value;\n// Subtract from the targeted balance\nallowance[_from][msg.sender] -= _value;\n// Subtract from the sender's allowance\ntotalSupply -= _value;\n// Update totalSupply\nemit Burn(_from, _value);\nreturn true;\n}\n}\n/******************************************/\n/* PlatformTeamCoinVer01 TOKEN STARTS HERE       */\n/******************************************/\ncontract PlatformTeamCoinVer02 is owned, TokenERC20 {\nuint256 public sellPrice;\nuint256 public buyPrice;\nmapping (address => bool) public frozenAccount;\n/* This generates a public event on the blockchain that will notify clients */\nevent FrozenFunds(address target, bool frozen);\n/* Initializes contract with initial supply tokens to the creator of the contract */\nconstructor(\nuint256 initialSupply,\nstring tokenName,\nstring tokenSymbol\n) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\n/* Internal transfer, only can be called by this contract */\nfunction _transfer(address _from, address _to, uint _value) internal {\nrequire (_to != 0x0);\n// Prevent transfer to 0x0 address. Use burn() instead\nrequire (balanceOf[_from] >= _value);\n// Check if the sender has enough\nrequire (balanceOf[_to] + _value >= balanceOf[_to]);\n// Check for overflows\nrequire(!frozenAccount[_from]);\n// Check if sender is frozen\nrequire(!frozenAccount[_to]);\n// Check if recipient is frozen\nbalanceOf[_from] -= _value;\n// Subtract from the sender\nbalanceOf[_to] += _value;\n// Add the same to the recipient\nemit Transfer(_from, _to, _value);\n}\n/// @notice Create `mintedAmount` tokens and send it to `target`\n/// @param target Address to receive the tokens\n/// @param mintedAmount the amount of tokens it will receive\nfunction mintToken(address target, uint256 mintedAmount) onlyOwner public {\nbalanceOf[target] += mintedAmount;\ntotalSupply += mintedAmount;\nemit Transfer(0, this, mintedAmount);\nemit Transfer(this, target, mintedAmount);\n}\n/// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n/// @param target Address to be frozen\n/// @param freeze either to freeze it or not\nfunction freezeAccount(address target, bool freeze) onlyOwner public {\nfrozenAccount[target] = freeze;\nemit FrozenFunds(target, freeze);\n}\n/// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\n/// @param newSellPrice Price the users can sell to the contract\n/// @param newBuyPrice Price users can buy from the contract\nfunction setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\nsellPrice = newSellPrice;\nbuyPrice = newBuyPrice;\n}\n/// @notice Buy tokens from contract by sending ether\nfunction buy() payable public {\nuint amount = msg.value / buyPrice;\n// calculates the amount\n_transfer(this, msg.sender, amount);\n// makes the transfers\n}\n/// @notice Sell `amount` tokens to contract\n/// @param amount amount of tokens to be sold\nfunction sell(uint256 amount) public {\naddress myAddress = this;\nrequire(myAddress.balance >= amount * sellPrice);\n// checks if the contract has enough ether to buy\n_transfer(msg.sender, this, amount);\n// makes the transfers\nmsg.sender.transfer(amount * sellPrice);\n// sends ether to the seller. It's important to do this last to avoid recursion attacks\n}\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]",
  "bytecode": "60806040526003805460ff1916600817905534801561001d57600080fd5b50604051610e00380380610e0083398101604090815281516020808401518385015160008054600160a060020a03191633908117825560035460ff16600a0a86026004819055908252600585529590209490945584018051929490930191849184918491610090916001918501906100b0565b5080516100a49060029060208401906100b0565b5050505050505061014b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100f157805160ff191683800117855561011e565b8280016001018555821561011e579182015b8281111561011e578251825591602001919060010190610103565b5061012a92915061012e565b5090565b61014891905b8082111561012a5760008155600101610134565b90565b610ca68061015a6000396000f3006080604052600436106101275763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305fefda7811461012c57806306fdde0314610149578063095ea7b3146101d357806318160ddd1461020b57806323b872dd14610232578063313ce5671461025c57806342966c68146102875780634b7503341461029f57806370a08231146102b457806379c65068146102d557806379cc6790146102f95780638620410b1461031d5780638da5cb5b1461033257806395d89b4114610363578063a6f2ae3a14610378578063a9059cbb14610380578063b414d4b6146103a4578063cae9ca51146103c5578063dd62ed3e1461042e578063e4849b3214610455578063e724529c1461046d578063f2fde38b14610493575b600080fd5b34801561013857600080fd5b506101476004356024356104b4565b005b34801561015557600080fd5b5061015e6104d6565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610198578181015183820152602001610180565b50505050905090810190601f1680156101c55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101df57600080fd5b506101f7600160a060020a0360043516602435610563565b604080519115158252519081900360200190f35b34801561021757600080fd5b506102206105c9565b60408051918252519081900360200190f35b34801561023e57600080fd5b506101f7600160a060020a03600435811690602435166044356105cf565b34801561026857600080fd5b5061027161063e565b6040805160ff9092168252519081900360200190f35b34801561029357600080fd5b506101f7600435610647565b3480156102ab57600080fd5b506102206106bf565b3480156102c057600080fd5b50610220600160a060020a03600435166106c5565b3480156102e157600080fd5b50610147600160a060020a03600435166024356106d7565b34801561030557600080fd5b506101f7600160a060020a036004351660243561078d565b34801561032957600080fd5b5061022061085e565b34801561033e57600080fd5b50610347610864565b60408051600160a060020a039092168252519081900360200190f35b34801561036f57600080fd5b5061015e610873565b6101476108cb565b34801561038c57600080fd5b506101f7600160a060020a03600435166024356108eb565b3480156103b057600080fd5b506101f7600160a060020a0360043516610901565b3480156103d157600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526101f7948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506109169650505050505050565b34801561043a57600080fd5b50610220600160a060020a0360043581169060243516610a2f565b34801561046157600080fd5b50610147600435610a4c565b34801561047957600080fd5b50610147600160a060020a03600435166024351515610aa0565b34801561049f57600080fd5b50610147600160a060020a0360043516610b1b565b600054600160a060020a031633146104cb57600080fd5b600791909155600855565b60018054604080516020600284861615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561055b5780601f106105305761010080835404028352916020019161055b565b820191906000526020600020905b81548152906001019060200180831161053e57829003601f168201915b505050505081565b336000818152600660209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60045481565b600160a060020a03831660009081526006602090815260408083203384529091528120548211156105ff57600080fd5b600160a060020a0384166000908152600660209081526040808320338452909152902080548390039055610634848484610b61565b5060019392505050565b60035460ff1681565b3360009081526005602052604081205482111561066357600080fd5b3360008181526005602090815260409182902080548690039055600480548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a2506001919050565b60075481565b60056020526000908152604090205481565b600054600160a060020a031633146106ee57600080fd5b600160a060020a03821660009081526005602090815260408083208054850190556004805485019055805184815290513093927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef928290030190a3604080518281529051600160a060020a0384169130917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b600160a060020a0382166000908152600560205260408120548211156107b257600080fd5b600160a060020a03831660009081526006602090815260408083203384529091529020548211156107e257600080fd5b600160a060020a0383166000818152600560209081526040808320805487900390556006825280832033845282529182902080548690039055600480548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a250600192915050565b60085481565b600054600160a060020a031681565b6002805460408051602060018416156101000260001901909316849004601f8101849004840282018401909252818152929183018282801561055b5780601f106105305761010080835404028352916020019161055b565b6000600854348115156108da57fe5b0490506108e8303383610b61565b50565b60006108f8338484610b61565b50600192915050565b60096020526000908152604090205460ff1681565b6000836109238185610563565b15610a27576040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018790523060448401819052608060648501908152875160848601528751600160a060020a03871695638f4ffcb195948b94938b939192909160a490910190602085019080838360005b838110156109bb5781810151838201526020016109a3565b50505050905090810190601f1680156109e85780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015610a0a57600080fd5b505af1158015610a1e573d6000803e3d6000fd5b50505050600191505b509392505050565b600660209081526000928352604080842090915290825290205481565b6007543090820281311015610a6057600080fd5b610a6b333084610b61565b6007546040513391840280156108fc02916000818181858888f19350505050158015610a9b573d6000803e3d6000fd5b505050565b600054600160a060020a03163314610ab757600080fd5b600160a060020a038216600081815260096020908152604091829020805460ff191685151590811790915582519384529083015280517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a59281900390910190a15050565b600054600160a060020a03163314610b3257600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a0382161515610b7657600080fd5b600160a060020a038316600090815260056020526040902054811115610b9b57600080fd5b600160a060020a0382166000908152600560205260409020548181011015610bc257600080fd5b600160a060020a03831660009081526009602052604090205460ff1615610be857600080fd5b600160a060020a03821660009081526009602052604090205460ff1615610c0e57600080fd5b600160a060020a03808416600081815260056020908152604080832080548790039055938616808352918490208054860190558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050505600a165627a7a723058200a595cc17da77c29436fc9c4fcffe792c629a1a7058007e62c3178d2cae4fedd0029000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000011506c6174666f726d5465616d436f696e3200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035054430000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000011506c6174666f726d5465616d436f696e3200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035054430000000000000000000000000000000000000000000000000000000000"
}