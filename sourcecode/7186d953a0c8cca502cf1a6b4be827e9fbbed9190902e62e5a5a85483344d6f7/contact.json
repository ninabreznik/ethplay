{
  "address": "0x9712f804721078550656f7868aa58a16b63592c3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CrystalDeposit",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-01\n*/\n\npragma solidity ^0.4.25;\n\n/*\n* CryptoMiningWar - Build your own empire on Blockchain\n* Author: InspiGames\n* Website: https://cryptominingwar.github.io/\n*/\n\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\ncontract CryptoEngineerInterface {\n    uint256 public prizePool = 0;\n\n    function subVirus(address /*_addr*/, uint256 /*_value*/) public {}\n    function claimPrizePool(address /*_addr*/, uint256 /*_value*/) public {} \n    function isContractMiniGame() public pure returns( bool /*_isContractMiniGame*/) {}\n}\ncontract CryptoMiningWarInterface {\n    uint256 public deadline; \n    function subCrystal( address /*_addr*/, uint256 /*_value*/ ) public {}\n}\ncontract CrystalDeposit {\n\tusing SafeMath for uint256;\n\n    bool init = false;\n\taddress public administrator;\n\t// mini game\n    uint256 public HALF_TIME = 48 hours;\n    uint256 public round = 0;\n    CryptoEngineerInterface public Engineer;\n    CryptoMiningWarInterface public MiningWar;\n    // mining war info\n    uint256 public miningWarDeadline;\n    uint256 constant private CRTSTAL_MINING_PERIOD = 86400;\n    /** \n    * @dev mini game information\n    */\n    mapping(uint256 => Game) public games;\n    /** \n    * @dev player information\n    */\n    mapping(address => Player) public players;\n   \n    struct Game {\n        uint256 round;\n        uint256 crystals;\n        uint256 prizePool;\n        uint256 endTime;\n        bool ended; \n    }\n    struct Player {\n        uint256 currentRound;\n        uint256 lastRound;\n        uint256 reward;\n        uint256 share; // your crystals share in current round \n    }\n    event EndRound(uint256 round, uint256 crystals, uint256 prizePool, uint256 endTime);\n    event Deposit(address player, uint256 questId, uint256 questLv, uint256 deposit, uint256 bonus, uint256 percent);\n    modifier isAdministrator()\n    {\n        require(msg.sender == administrator);\n        _;\n    }\n    modifier disableContract()\n    {\n        require(tx.origin == msg.sender);\n        _;\n    }\n\n    constructor() public {\n        administrator = msg.sender;\n        // set interface contract\n        setMiningWarInterface(0xf84c61bb982041c030b8580d1634f00fffb89059);\n        setEngineerInterface(0x69fd0e5d0a93bf8bac02c154d343a8e3709adabf);\n    }\n    function () public payable\n    {\n        \n    }\n    /** \n    * @dev MainContract used this function to verify game's contract\n    */\n    function isContractMiniGame() public pure returns( bool _isContractMiniGame )\n    {\n    \t_isContractMiniGame = true;\n    }\n    function upgrade(address addr) public isAdministrator\n    {\n        selfdestruct(addr);\n    }\n    /** \n    * @dev Main Contract call this function to setup mini game.\n    */\n    function setupMiniGame( uint256 /*_miningWarRoundNumber*/, uint256 _miningWarDeadline ) public\n    {\n        miningWarDeadline = getMiningWarDealine();\n    }\n    function setMiningWarInterface(address _addr) public isAdministrator\n    {\n        MiningWar = CryptoMiningWarInterface(_addr);\n    }\n    function setEngineerInterface(address _addr) public isAdministrator\n    {\n        CryptoEngineerInterface engineerInterface = CryptoEngineerInterface(_addr);\n        \n        require(engineerInterface.isContractMiniGame() == true);\n\n        Engineer = engineerInterface;\n    }\n    /**\n    * @dev start the mini game\n    */\n     function startGame() public \n    {\n        require(msg.sender == administrator);\n        require(init == false);\n        init = true;\n        miningWarDeadline = getMiningWarDealine();\n\n        games[round].ended = true;\n    \n        startRound();\n    }\n    function startRound() private\n    {\n        require(games[round].ended == true);\n\n        uint256 crystalsLastRound = games[round].crystals;\n        uint256 prizePoolLastRound= games[round].prizePool; \n\n        round = round + 1;\n\n        uint256 endTime = now + HALF_TIME;\n        // claim 5% of current prizePool as rewards.\n        uint256 engineerPrizePool = getEngineerPrizePool();\n        uint256 prizePool = SafeMath.div(SafeMath.mul(engineerPrizePool, 5),100);\n\n        Engineer.claimPrizePool(address(this), prizePool);\n        if (crystalsLastRound <= 0) prizePool = SafeMath.add(prizePool, prizePoolLastRound);\n        games[round] = Game(round, 0, prizePool, endTime, false);\n    }\n    function endRound() private\n    {\n        require(games[round].ended == false);\n        require(games[round].endTime <= now);\n\n        Game storage g = games[round];\n        g.ended = true;\n        \n        startRound();\n\n        emit EndRound(g.round, g.crystals, g.prizePool, g.endTime);\n    }\n    /**\n    * @dev player send crystals to the pot\n    */\n    function share(uint256 _value) public disableContract\n    {\n        require(miningWarDeadline > now);\n        require(games[round].ended == false);\n        require(_value >= 1);\n\n        MiningWar.subCrystal(msg.sender, _value); \n\n        if (games[round].endTime <= now) endRound();\n        \n        updateReward(msg.sender);\n        \n        Game storage g = games[round];\n        uint256 _share = SafeMath.mul(_value, CRTSTAL_MINING_PERIOD);\n        g.crystals = SafeMath.add(g.crystals, _share);\n        Player storage p = players[msg.sender];\n        if (p.currentRound == round) {\n            p.share = SafeMath.add(p.share, _share);\n        } else {\n            p.share = _share;\n            p.currentRound = round;\n        }\n\n        emit Deposit(msg.sender, 1, 1, _value, 0, 0); \n    }\n    function withdrawReward() public disableContract\n    {\n        if (games[round].endTime <= now) endRound();\n        \n        updateReward(msg.sender);\n        Player storage p = players[msg.sender];\n        uint256 balance  = p.reward; \n        if (address(this).balance >= balance) {\n             msg.sender.transfer(balance);\n            // update player\n            p.reward = 0;     \n        }\n    }\n    function updateReward(address _addr) private\n    {\n        Player storage p = players[_addr];\n        \n        if ( \n            games[p.currentRound].ended == true &&\n            p.lastRound < p.currentRound\n            ) {\n            p.reward = SafeMath.add(p.reward, calculateReward(msg.sender, p.currentRound));\n            p.lastRound = p.currentRound;\n        }\n    }\n    function getData(address _addr) \n    public\n    view\n    returns(\n        // current game\n        uint256 _prizePool,\n        uint256 _crystals,\n        uint256 _endTime,\n        // player info\n        uint256 _reward,\n        uint256 _share\n    ) {\n         (_prizePool, _crystals, _endTime) = getCurrentGame();\n         (_reward, _share)                 = getPlayerData(_addr);         \n    }\n      /**\n    * @dev calculate reward\n    */\n    function calculateReward(address _addr, uint256 _round) public view returns(uint256)\n    {\n        Player memory p = players[_addr];\n        Game memory g = games[_round];\n        if (g.endTime > now) return 0;\n        if (g.crystals == 0) return 0; \n        return SafeMath.div(SafeMath.mul(g.prizePool, p.share), g.crystals);\n    }\n    function getCurrentGame() private view returns(uint256 _prizePool, uint256 _crystals, uint256 _endTime)\n    {\n        Game memory g = games[round];\n        _prizePool = g.prizePool;\n        _crystals  = g.crystals;\n        _endTime   = g.endTime;\n    }\n    function getPlayerData(address _addr) private view returns(uint256 _reward, uint256 _share)\n    {\n        Player memory p = players[_addr];\n        _reward           = p.reward;\n        if (p.currentRound == round) _share = players[_addr].share; \n        if (p.currentRound != p.lastRound) _reward += calculateReward(_addr, p.currentRound);\n    }\n    function getEngineerPrizePool() private view returns(uint256)\n    {\n        return Engineer.prizePool();\n    }\n    function getMiningWarDealine () private view returns(uint256)\n    {\n        return MiningWar.deadline();\n    }\n}",
  "bytecode": "608060405260008060006101000a81548160ff0219169083151502179055506202a30060015560006002553480156200003757600080fd5b5033600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000a773f84c61bb982041c030b8580d1634f00fffb89059620000db640100000000026401000000009004565b620000d57369fd0e5d0a93bf8bac02c154d343a8e3709adabf6200017c640100000000026401000000009004565b620002d7565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156200013857600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515620001da57600080fd5b819050600115158173ffffffffffffffffffffffffffffffffffffffff16633281d5766040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200024657600080fd5b505af11580156200025b573d6000803e3d6000fd5b505050506040513d60208110156200027257600080fd5b810190808051906020019092919050505015151415156200029257600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6117b380620002e76000396000f3006080604052600436106100fc576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630900f010146100fe578063117a5b9014610141578063146ca531146101a25780631852e8d9146101cd5780633281d5761461022e57806338266b221461025d5780634332e77a146102d05780634f9d482a146102fb5780638a56b23014610326578063b4bd7d4114610369578063be7ccd7e146103c0578063c3d9c4b4146103f7578063c3f656f114610424578063c885bc581461047b578063d65ab5f214610492578063e2eb41ff146104a9578063f53d0a8e14610515578063ffa651b61461056c575b005b34801561010a57600080fd5b5061013f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506105af565b005b34801561014d57600080fd5b5061016c60048036038101908080359060200190929190505050610624565b60405180868152602001858152602001848152602001838152602001821515151581526020019550505050505060405180910390f35b3480156101ae57600080fd5b506101b7610667565b6040518082815260200191505060405180910390f35b3480156101d957600080fd5b50610218600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061066d565b6040518082815260200191505060405180910390f35b34801561023a57600080fd5b506102436107ad565b604051808215151515815260200191505060405180910390f35b34801561026957600080fd5b5061029e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107b6565b604051808681526020018581526020018481526020018381526020018281526020019550505050505060405180910390f35b3480156102dc57600080fd5b506102e56107ec565b6040518082815260200191505060405180910390f35b34801561030757600080fd5b506103106107f2565b6040518082815260200191505060405180910390f35b34801561033257600080fd5b50610367600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107f8565b005b34801561037557600080fd5b5061037e610898565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103cc57600080fd5b506103f560048036038101908080359060200190929190803590602001909291905050506108be565b005b34801561040357600080fd5b50610422600480360381019080803590602001909291905050506108d0565b005b34801561043057600080fd5b50610439610bc5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561048757600080fd5b50610490610beb565b005b34801561049e57600080fd5b506104a7610d19565b005b3480156104b557600080fd5b506104ea600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610df9565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b34801561052157600080fd5b5061052a610e29565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561057857600080fd5b506105ad600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e4f565b005b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561060b57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16ff5b60066020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040160009054906101000a900460ff16905085565b60025481565b600061067761172c565b61067f611755565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206080604051908101604052908160008201548152602001600182015481526020016002820154815260200160038201548152505091506006600085815260200190815260200160002060a06040519081016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff1615151515815250509050428160600151111561076d57600092506107a5565b60008160200151141561078357600092506107a5565b6107a261079882604001518460600151610fa5565b8260200151610fe0565b92505b505092915050565b60006001905090565b60008060008060006107c6610ffb565b8095508196508297505050506107db86611089565b809250819350505091939590929450565b60055481565b60015481565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561085457600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6108c661118e565b6005819055505050565b60008060003373ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614151561090f57600080fd5b4260055411151561091f57600080fd5b6000151560066000600254815260200190815260200160002060040160009054906101000a900460ff16151514151561095757600080fd5b6001841015151561096757600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b04eb63933866040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015610a2c57600080fd5b505af1158015610a40573d6000803e3d6000fd5b505050504260066000600254815260200190815260200160002060030154111515610a6e57610a6d611256565b5b610a7733611354565b6006600060025481526020019081526020016000209250610a9b8462015180610fa5565b9150610aab836001015483611413565b8360010181905550600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060025481600001541415610b1d57610b10816003015483611413565b8160030181905550610b32565b81816003018190555060025481600001819055505b7ff943cf10ef4d1e3239f4716ddecdf546e8ba8ab0e41deafd9a71a99936827e453360018087600080604051808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001868152602001858152602001848152602001838152602001828152602001965050505050505060405180910390a150505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000803373ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16141515610c2857600080fd5b4260066000600254815260200190815260200160002060030154111515610c5257610c51611256565b5b610c5b33611354565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020915081600201549050803073ffffffffffffffffffffffffffffffffffffffff1631101515610d15573373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610d09573d6000803e3d6000fd5b50600082600201819055505b5050565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d7557600080fd5b600015156000809054906101000a900460ff161515141515610d9657600080fd5b60016000806101000a81548160ff021916908315150217905550610db861118e565b600581905550600160066000600254815260200190815260200160002060040160006101000a81548160ff021916908315150217905550610df7611431565b565b60076020528060005260406000206000915090508060000154908060010154908060020154908060030154905084565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610eac57600080fd5b819050600115158173ffffffffffffffffffffffffffffffffffffffff16633281d5766040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610f1757600080fd5b505af1158015610f2b573d6000803e3d6000fd5b505050506040513d6020811015610f4157600080fd5b81019080805190602001909291905050501515141515610f6057600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000806000841415610fba5760009150610fd9565b8284029050828482811515610fcb57fe5b04141515610fd557fe5b8091505b5092915050565b6000808284811515610fee57fe5b0490508091505092915050565b6000806000611008611755565b60066000600254815260200190815260200160002060a06040519081016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff161515151581525050905080604001519350806020015192508060600151915050909192565b60008061109461172c565b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020608060405190810160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050806040015192506002548160000151141561116457600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015491505b806020015181600001511415156111885761118384826000015161066d565b830192505b50915091565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166329dcb0cf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561121657600080fd5b505af115801561122a573d6000803e3d6000fd5b505050506040513d602081101561124057600080fd5b8101908080519060200190929190505050905090565b600080151560066000600254815260200190815260200160002060040160009054906101000a900460ff16151514151561128f57600080fd5b4260066000600254815260200190815260200160002060030154111515156112b657600080fd5b600660006002548152602001908152602001600020905060018160040160006101000a81548160ff0219169083151502179055506112f2611431565b7fa235c93d1b2f697aad8778fa4900285a0ee92e32ec1b0bc7e9bb0515ccf488e081600001548260010154836002015484600301546040518085815260200184815260200183815260200182815260200194505050505060405180910390a150565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060011515600660008360000154815260200190815260200160002060040160009054906101000a900460ff1615151480156113d9575080600001548160010154105b1561140f576113f981600201546113f433846000015461066d565b611413565b8160020181905550806000015481600101819055505b5050565b600080828401905083811015151561142757fe5b8091505092915050565b60008060008060006001151560066000600254815260200190815260200160002060040160009054906101000a900460ff16151514151561147157600080fd5b600660006002548152602001908152602001600020600101549450600660006002548152602001908152602001600020600201549350600160025401600281905550600154420192506114c2611664565b91506114d96114d2836005610fa5565b6064610fe0565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637baf71f930836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156115a057600080fd5b505af11580156115b4573d6000803e3d6000fd5b505050506000851115156115cf576115cc8185611413565b90505b60a060405190810160405280600254815260200160008152602001828152602001848152602001600015158152506006600060025481526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548160ff0219169083151502179055509050505050505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663719ce73e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156116ec57600080fd5b505af1158015611700573d6000803e3d6000fd5b505050506040513d602081101561171657600080fd5b8101908080519060200190929190505050905090565b608060405190810160405280600081526020016000815260200160008152602001600081525090565b60a0604051908101604052806000815260200160008152602001600081526020016000815260200160001515815250905600a165627a7a72305820ac2ec52c8c3190dd16b38a7a0181df94bdcee0f1bd0d6d226418bc9e51109fb70029"
}