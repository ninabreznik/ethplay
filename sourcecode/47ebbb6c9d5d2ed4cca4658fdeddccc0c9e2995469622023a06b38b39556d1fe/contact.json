{
  "address": "0x627125882d592bbf122815364667efff3bdcd4c6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ICOToken",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-28\n*/\n\npragma solidity 0.5.0;\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/ERC20/ERC20.sol\n// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/ERC20/ERC20Basic.sol\n// \n// ----------------------------------------------------------------------------\ninterface ERC20Interface {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address who) external view returns (uint256);\n    function allowance(address approver, address spender) external view returns (uint256);\n    function transfer(address to, uint256 value) external returns (bool);\n    function approve(address spender, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    // solhint-disable-next-line no-simple-event-func-name\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed approver, address indexed spender, uint256 value);\n}\n\n//\n// base contract for all our horizon contracts and tokens\n//\ncontract HorizonContractBase {\n    // The owner of the contract, set at contract creation to the creator.\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    // Contract authorization - only allow the owner to perform certain actions.\n    modifier onlyOwner {\n        require(msg.sender == owner, \"Only the owner can call this function.\");\n        _;\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n *\n * Source: https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two numbers, throws on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/**\n * ICOToken for the timelessluxurygroup.com by Horizon-Globex.com of Switzerland.\n *\n * An ERC20 standard\n *\n * Author: Horizon Globex GmbH Development Team\n *\n * Dev Notes\n *   NOTE: There is no fallback function as this contract will never contain Ether, only the ICO tokens.\n *   NOTE: There is no approveAndCall/receiveApproval or ERC223 functionality.\n *   NOTE: Coins will never be minted beyond those at contract creation.\n *   NOTE: Zero transfers are allowed - we don't want to break a valid transaction chain.\n *   NOTE: There is no selfDestruct, changeOwner or migration path - this is the only contract.\n */\n\n\ncontract ICOToken is ERC20Interface, HorizonContractBase {\n    using SafeMath for uint256;\n\n    // Contract authorization - only allow the official KYC provider to perform certain actions.\n    modifier onlyKycProvider {\n        require(msg.sender == regulatorApprovedKycProvider, \"Only the KYC Provider can call this function.\");\n        _;\n    }\n\t\n\t// Contract authorization - only allow the official issuer to perform certain actions.\n    modifier onlyIssuer {\n        require(msg.sender == issuer, \"Only the Issuer can call this function.\");\n        _;\n    }\n\n    // The approved KYC provider that verifies all ICO/TGE Contributors.\n    address public regulatorApprovedKycProvider;\n    \n    // The issuer\n    address public issuer;\n\n    // Public identity variables of the token used by ERC20 platforms.\n    string public name;\n    string public symbol;\n    \n    // There is no good reason to deviate from 18 decimals, see https://github.com/ethereum/EIPs/issues/724.\n    uint8 public decimals = 18;\n    \n    // The total supply of tokens, set at creation, decreased with burn.\n    uint256 public totalSupply_;\n\n    // The supply of tokens, set at creation, to be allocated for the referral bonuses.\n    uint256 public rewardPool_;\n\n    // The Initial Coin Offering is finished.\n    bool public isIcoComplete;\n\n    // The balances of all accounts.\n    mapping (address => uint256) public balances;\n\n    // KYC submission hashes accepted by KYC service provider for AML/KYC review.\n    bytes32[] public kycHashes;\n\n    // All users that have passed the external KYC verification checks.\n    address[] public kycValidated;\n\n    // Addresses authorized to transfer tokens on an account's behalf.\n    mapping (address => mapping (address => uint256)) internal allowanceCollection;\n\n    // Lookup an ICO/TGE Contributor address to see if it was referred by another address (referee => referrer).\n    mapping (address => address) public referredBy;\n\n    // Emitted when the Initial Coin Offering phase ends, see closeIco().\n    event IcoComplete();\n\n    // Notification when tokens are burned by the owner.\n    event Burn(address indexed from, uint256 value);\n    \n    // Emitted when mint event ocurred\n    // added by andrewju\n    event Mint(address indexed from, uint256 value);\n\n    // Someone who was referred has purchased tokens, when the bonus is awarded log the details.\n    event ReferralRedeemed(address indexed referrer, address indexed referee, uint256 value);\n\n    /**\n     * Initialise contract with the 50 million initial supply tokens, allocated to\n     * the creator of the contract (the owner).\n     */\n    constructor(uint256 totalSupply, string memory _name, string memory _symbol, uint256 _rewardPool) public {\n\t\tname = _name;\n\t\tsymbol = _symbol;\n        totalSupply_ = totalSupply * 10 ** uint256(decimals);   // Set the total supply of ICO Tokens.\n        balances[msg.sender] = totalSupply_;\n        rewardPool_ = _rewardPool * 10 ** uint256(decimals);   // Set the total supply of ICO Reward Tokens.\n        \n        setKycProvider(msg.sender);\n        setIssuer(msg.sender);\n        \n    }\n\n    /**\n     * The total number of tokens that exist.\n     */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    /**\n     * The total number of reward pool tokens that remains.\n     */\n    function rewardPool() public onlyOwner view returns (uint256) {\n        return rewardPool_;\n    }\n\n    /**\n     * Get the number of tokens for a specific account.\n     *\n     * @param who    The address to get the token balance of.\n     */\n    function balanceOf(address who) public view returns (uint256 balance) {\n        return balances[who];\n    }\n\n    /**\n     * Get the current allowanceCollection that the approver has allowed 'spender' to spend on their behalf.\n     *\n     * See also: approve() and transferFrom().\n     *\n     * @param _approver  The account that owns the tokens.\n     * @param _spender   The account that can spend the approver's tokens.\n     */\n    function allowance(address _approver, address _spender) public view returns (uint256) {\n        return allowanceCollection[_approver][_spender];\n    }\n\n    /**\n     * Add the link between the referrer and who they referred.\n     *\n     * ---- ICO-Platform Note ----\n     * The horizon-globex.com ICO platform offers functionality for referrers to sign-up\n     * to refer Contributors. Upon such referred Contributions, Company shall automatically\n     * award 1% of our \"owner\" ICO tokens to the referrer as coded by this Smart Contract.\n     *\n     * All referrers must successfully complete our ICO KYC review prior to being allowed on-board.\n     * -- End ICO-Platform Note --\n     *\n     * @param referrer  The person doing the referring.\n     * @param referee   The person that was referred.\n     */\n    function refer(address referrer, address referee) public onlyOwner {\n        require(referrer != address(0x0), \"Referrer cannot be null\");\n        require(referee != address(0x0), \"Referee cannot be null\");\n        require(!isIcoComplete, \"Cannot add new referrals after ICO is complete.\");\n\n        referredBy[referee] = referrer;\n    }\n\n    /**\n     * Transfer tokens from the caller's account to the recipient.\n     *\n     * @param to    The address of the recipient.\n     * @param value The number of tokens to send.\n     */\n    // solhint-disable-next-line no-simple-event-func-name\n    function transfer(address to, uint256 value) public returns (bool) {\n        return _transfer(msg.sender, to, value);\n    }\n\t\n    /**\n     * Transfer pre-approved tokens on behalf of an account.\n     *\n     * See also: approve() and allowance().\n     *\n     * @param from  The address of the sender\n     * @param to    The address of the recipient\n     * @param value The number of tokens to send\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(value <= allowanceCollection[from][msg.sender], \"Amount to transfer is greater than allowance.\");\n\t\t\n        allowanceCollection[from][msg.sender] = allowanceCollection[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * Allow another address to spend tokens on your behalf.\n     *\n     * transferFrom can be called multiple times until the approved balance goes to zero.\n     * Subsequent calls to this function overwrite the previous balance.\n     * To change from a non-zero value to another non-zero value you must first set the\n     * allowance to zero - it is best to use safeApprove when doing this as you will\n     * manually have to check for transfers to ensure none happened before the zero allowance\n     * was set.\n     *\n     * @param _spender   The address authorized to spend your tokens.\n     * @param _value     The maximum amount of tokens they can spend.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        if(allowanceCollection[msg.sender][_spender] > 0 && _value != 0) {\n            revert(\"You cannot set a non-zero allowance to another non-zero, you must zero it first.\");\n        }\n\n        allowanceCollection[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n\n        return true;\n    }\n\n    /**\n     * Allow another address to spend tokens on your behalf while mitigating a double spend.\n     *\n     * Subsequent calls to this function overwrite the previous balance.\n     * The old value must match the current allowance otherwise this call reverts.\n     *\n     * @param spender   The address authorized to spend your tokens.\n     * @param value     The maximum amount of tokens they can spend.\n     * @param oldValue  The current allowance for this spender.\n     */\n    function safeApprove(address spender, uint256 value, uint256 oldValue) public returns (bool) {\n        require(spender != address(0x0), \"Cannot approve null address.\");\n        require(oldValue == allowanceCollection[msg.sender][spender], \"The expected old value did not match current allowance.\");\n\n        allowanceCollection[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n\n        return true;\n    }\n\n    /**\n     * The hash for all Know Your Customer information is calculated outside but stored here.\n     * This storage will be cleared once the ICO completes, see closeIco().\n     *\n     * ---- ICO-Platform Note ----\n     * The horizon-globex.com ICO platform's KYC app will register a hash of the Contributors\n     * KYC submission on the blockchain. Our Swiss financial-intermediary KYC provider will be \n     * notified of the submission and retrieve the Contributor data for formal review.\n     *\n     * All Contributors must successfully complete our ICO KYC review prior to being allowed on-board.\n     * -- End ICO-Platform Note --\n     *\n     * @param sha   The hash of the customer data.\n    */\n    function setKycHash(bytes32 sha) public onlyOwner {\n        require(!isIcoComplete, \"The ICO phase has ended, you can no longer set KYC hashes.\");\n\n        kycHashes.push(sha);\n    }\n\n    /**\n     * A user has passed KYC verification, store them on the blockchain in the order it happened.\n     * This will be cleared once the ICO completes, see closeIco().\n     *\n     * ---- ICO-Platform Note ----\n     * The horizon-globex.com ICO platform's registered KYC provider submits their approval\n     * for this Contributor to particpate using the ICO-Platform portal. \n     *\n     * Each Contributor will then be sent the Ethereum, Bitcoin and IBAN account numbers to\n     * deposit their Approved Contribution in exchange for ICO Tokens.\n     * -- End ICO-Platform Note --\n     *\n     * @param who   The user's address.\n     */\n    function kycApproved(address who) public onlyKycProvider {\n        require(!isIcoComplete, \"The ICO phase has ended, you can no longer approve.\");\n        require(who != address(0x0), \"Cannot approve a null address.\");\n\n        kycValidated.push(who);\n    }\n\n    /**\n     * Set the address that has the authority to approve users by KYC.\n     *\n     * ---- ICO-Platform Note ----\n     * The horizon-globex.com ICO platform shall register a fully licensed Swiss KYC\n     * provider to assess each potential Contributor for KYC and AML under Swiss law. \n     *\n     * -- End ICO-Platform Note --\n     *\n     * @param who   The address of the KYC provider.\n     */\n    function setKycProvider(address who) public onlyOwner {\n        regulatorApprovedKycProvider = who;\n    }\n    \n        /**\n     * Set the issuer address\n     *\n     * @param who   The address of the issuer.\n     */\n    function setIssuer(address who) public onlyOwner {\n        issuer = who;\n    }\n    \n    \n    /**\n     * Retrieve the KYC hash from the specified index.\n     *\n     * @param   index   The index into the array.\n     */\n    function getKycHash(uint256 index) public view returns (bytes32) {\n        return kycHashes[index];\n    }\n\n    /**\n     * Retrieve the validated KYC address from the specified index.\n     *\n     * @param   index   The index into the array.\n     */\n    function getKycApproved(uint256 index) public view returns (address) {\n        return kycValidated[index];\n    }\n\n    /**\n     * When someone referred (the referee) purchases tokens the referrer gets a 1% bonus from the central pool.\n     *\n     * ---- ICO-Platform Note ----\n     * The horizon-globex.com ICO platform's portal shall award referrers as part of the ICO\n     * ICO Token issuance procedure as overseen by the Swiss KYC provider. \n     *\n     * -- End ICO-Platform Note --\n     *\n     * @param referee   The referred account who just purchased some tokens.\n     * @param referrer  The account that referred the one purchasing tokens.\n     * @param value     The number of tokens purchased by the referee.\n    */\n    function awardReferralBonus(address referee, address referrer, uint256 value) private {\n        uint256 bonus = value / 100;\n        balances[owner] = balances[owner].sub(bonus);\n        balances[referrer] = balances[referrer].add(bonus);\n        rewardPool_ -= bonus;\n        emit ReferralRedeemed(referee, referrer, bonus);\n    }\n\n    /**\n     * During the ICO phase the owner will allocate tokens once KYC completes and funds are deposited.\n     *\n     * ---- ICO-Platform Note ----\n     * The horizon-globex.com ICO platform's portal shall issue ICO Token to Contributors on receipt of \n     * the Approved Contribution funds at the KYC providers Escrow account/wallets.\n     * Only after ICO Tokens are issued to the Contributor can the Swiss KYC provider allow the transfer\n     * of funds from their Escrow to Company.\n     *\n     * -- End ICO-Platform Note --\n     *\n     * @param to       The recipient of the tokens.\n     * @param value    The number of tokens to send.\n     */\n    function icoTransfer(address to, uint256 value) public onlyOwner {\n        require(!isIcoComplete, \"ICO is complete, use transfer().\");\n\n        // If an attempt is made to transfer more tokens than owned, transfer the remainder.\n        uint256 toTransfer = (value > (balances[msg.sender] - rewardPool_ )) ? (balances[msg.sender] - rewardPool_) : value;\n        \n        _transfer(msg.sender, to, toTransfer);\n\n        // Handle a referred account receiving tokens.\n        address referrer = referredBy[to];\n        if(referrer != address(0x0)) {\n            referredBy[to] = address(0x0);\n            awardReferralBonus(to, referrer, toTransfer);\n        }\n    }\n\n    /**\n     * End the ICO phase in accordance with KYC procedures and clean up.\n     *\n     * ---- ICO-Platform Note ----\n     * The horizon-globex.com ICO platform's portal shall halt the ICO at the end of the \n     * Contribution Period, as defined in the ICO Terms and Conditions at timelessluxurygroup.com.\n     *\n     * -- End ICO-Platform Note --\n     */\n    function closeIco() public onlyOwner {\n        require(!isIcoComplete, \"The ICO phase has already ended, you cannot close it again.\");\n        require((balances[owner] - rewardPool_) == 0, \"Cannot close ICO when a balance remains in the owner account.\");\n\n        isIcoComplete = true;\n        delete kycHashes;\n        delete kycValidated;\n\n        emit IcoComplete();\n    }\n\t\n    /**\n     * Internal transfer, can only be called by this contract\n     *\n     * @param from     The sender of the tokens.\n     * @param to       The recipient of the tokens.\n     * @param value    The number of tokens to send.\n     */\n    function _transfer(address from, address to, uint256 value) internal returns (bool) {\n        require(from != address(0x0), \"Cannot send tokens from null address\");\n        require(to != address(0x0), \"Cannot transfer tokens to null\");\n        require(balances[from] >= value, \"Insufficient funds\");\n\n        // Quick exit for zero, but allow it in case this transfer is part of a chain.\n        if(value == 0)\n            return true;\n\t\t\n        // Perform the transfer.\n        balances[from] = balances[from].sub(value);\n        balances[to] = balances[to].add(value);\n\t\t\n        // Any tokens sent to to owner are implicitly burned.\n        if (to == owner) {\n            _burn(to, value);\n        }\n\n        return true;\n    }\n    \n    /**\n     * Permanently mint tokens to increase the totalSupply_.\n     *\n     * @param value            The number of tokens to mint.\n     */\n    function mint(uint256 value) public onlyIssuer {\n        require(value > 0, \"Tokens to mint must be greater than zero\");\n        balances[owner] = balances[owner].add(value);\n        totalSupply_ = totalSupply_.add(value);\n        \n        emit Mint(msg.sender, value);\n        \n    }\n    \n    /**\n     * Permanently destroy tokens from totalSupply_.\n     *\n     * @param value            The number of tokens to burn.\n     */\n    function burn(uint256 value) public onlyIssuer {\n        _burn(owner, value);\n    }\n\n    /**\n     * Permanently destroy tokens belonging to a user.\n     *\n     * @param addressToBurn    The owner of the tokens to burn.\n     * @param value            The number of tokens to burn.\n     */\n    function _burn(address addressToBurn, uint256 value) private returns (bool success) {\n        require(value > 0, \"Tokens to burn must be greater than zero\");\n        require(balances[addressToBurn] >= value, \"Tokens to burn exceeds balance\");\n\n        balances[addressToBurn] = balances[addressToBurn].sub(value);\n        totalSupply_ = totalSupply_.sub(value);\n\n        emit Burn(msg.sender, value);\n\n        return true;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"regulatorApprovedKycProvider\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"kycValidated\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"setIssuer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"kycApproved\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"kycHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPool_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referredBy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sha\",\"type\":\"bytes32\"}],\"name\":\"setKycHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"icoTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getKycHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_approver\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"setKycProvider\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isIcoComplete\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"referee\",\"type\":\"address\"}],\"name\":\"refer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getKycApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"safeApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_rewardPool\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"IcoComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ReferralRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"approver\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60806040526012600560006101000a81548160ff021916908360ff1602179055503480156200002d57600080fd5b5060405162003b7d38038062003b7d833981018060405260808110156200005357600080fd5b810190808051906020019092919080516401000000008111156200007657600080fd5b828101905060208101848111156200008d57600080fd5b8151856001820283011164010000000082111715620000ab57600080fd5b50509291906020018051640100000000811115620000c857600080fd5b82810190506020810184811115620000df57600080fd5b8151856001820283011164010000000082111715620000fd57600080fd5b505092919060200180519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600390805190602001906200016a929190620004a2565b50816004908051906020019062000183929190620004a2565b50600560009054906101000a900460ff1660ff16600a0a8402600681905550600654600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600560009054906101000a900460ff1660ff16600a0a8102600781905550620002203362000244640100000000026401000000009004565b6200023a3362000373640100000000026401000000009004565b5050505062000551565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156200032f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e81526020017f6374696f6e2e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156200045e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e81526020017f6374696f6e2e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620004e557805160ff191683800117855562000516565b8280016001018555821562000516579182015b8281111562000515578251825591602001919060010190620004f8565b5b50905062000525919062000529565b5090565b6200054e91905b808211156200054a57600081600090555060010162000530565b5090565b90565b61361c80620005616000396000f3fe608060405260043610610196576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461019b578063080fd28a1461022b578063095ea7b31461028257806318160ddd146102f55780631d1438481461032057806323b872dd1461037757806327e235e31461040a578063313ce5671461046f578063324536eb146104a0578063399b5a07146104cb57806342966c6814610546578063485469711461058157806355cc4e57146105985780636641cc64146105e957806366666aa91461063a578063698e434b1461066557806370a08231146106b45780638da5cb5b14610719578063919987bc1461077057806395d89b411461079b578063a0712d681461082b578063a9059cbb14610866578063a90f8e9a146108d9578063b160a86b1461096a578063c6159a35146109a5578063cb3204a814610a00578063dd62ed3e14610a4f578063df0795aa14610ad4578063e4f7de9314610b25578063f454425514610b54578063f5c758c414610bc5578063f650366214610c40575b600080fd5b3480156101a757600080fd5b506101b0610cbd565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101f05780820151818401526020810190506101d5565b50505050905090810190601f16801561021d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561023757600080fd5b50610240610d5b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561028e57600080fd5b506102db600480360360408110156102a557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d81565b604051808215151515815260200191505060405180910390f35b34801561030157600080fd5b5061030a610fbe565b6040518082815260200191505060405180910390f35b34801561032c57600080fd5b50610335610fc8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561038357600080fd5b506103f06004803603606081101561039a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610fee565b604051808215151515815260200191505060405180910390f35b34801561041657600080fd5b506104596004803603602081101561042d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611230565b6040518082815260200191505060405180910390f35b34801561047b57600080fd5b50610484611248565b604051808260ff1660ff16815260200191505060405180910390f35b3480156104ac57600080fd5b506104b561125b565b6040518082815260200191505060405180910390f35b3480156104d757600080fd5b50610504600480360360208110156104ee57600080fd5b8101908080359060200190929190505050611261565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561055257600080fd5b5061057f6004803603602081101561056957600080fd5b810190808035906020019092919050505061129f565b005b34801561058d57600080fd5b506105966113b9565b005b3480156105a457600080fd5b506105e7600480360360208110156105bb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116b5565b005b3480156105f557600080fd5b506106386004803603602081101561060c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506117e3565b005b34801561064657600080fd5b5061064f611a87565b6040518082815260200191505060405180910390f35b34801561067157600080fd5b5061069e6004803603602081101561068857600080fd5b8101908080359060200190929190505050611b7b565b6040518082815260200191505060405180910390f35b3480156106c057600080fd5b50610703600480360360208110156106d757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b9e565b6040518082815260200191505060405180910390f35b34801561072557600080fd5b5061072e611be7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561077c57600080fd5b50610785611c0c565b6040518082815260200191505060405180910390f35b3480156107a757600080fd5b506107b0611c12565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107f05780820151818401526020810190506107d5565b50505050905090810190601f16801561081d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561083757600080fd5b506108646004803603602081101561084e57600080fd5b8101908080359060200190929190505050611cb0565b005b34801561087257600080fd5b506108bf6004803603604081101561088957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611f7c565b604051808215151515815260200191505060405180910390f35b3480156108e557600080fd5b50610928600480360360208110156108fc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f91565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561097657600080fd5b506109a36004803603602081101561098d57600080fd5b8101908080359060200190929190505050611fc4565b005b3480156109b157600080fd5b506109fe600480360360408110156109c857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612188565b005b348015610a0c57600080fd5b50610a3960048036036020811015610a2357600080fd5b81019080803590602001909291905050506124c7565b6040518082815260200191505060405180910390f35b348015610a5b57600080fd5b50610abe60048036036040811015610a7257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506124ea565b6040518082815260200191505060405180910390f35b348015610ae057600080fd5b50610b2360048036036020811015610af757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612571565b005b348015610b3157600080fd5b50610b3a61269f565b604051808215151515815260200191505060405180910390f35b348015610b6057600080fd5b50610bc360048036036040811015610b7757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506126b2565b005b348015610bd157600080fd5b50610bfe60048036036020811015610be857600080fd5b8101908080359060200190929190505050612a13565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610c4c57600080fd5b50610ca360048036036060811015610c6357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050612a56565b604051808215151515815260200191505060405180910390f35b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d535780601f10610d2857610100808354040283529160200191610d53565b820191906000526020600020905b815481529060010190602001808311610d3657829003601f168201915b505050505081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054118015610e0f575060008214155b15610ece576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260508152602001807f596f752063616e6e6f74207365742061206e6f6e2d7a65726f20616c6c6f776181526020017f6e636520746f20616e6f74686572206e6f6e2d7a65726f2c20796f75206d757381526020017f74207a65726f2069742066697273742e0000000000000000000000000000000081525060600191505060405180910390fd5b81600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600654905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561110a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d8152602001807f416d6f756e7420746f207472616e73666572206973206772656174657220746881526020017f616e20616c6c6f77616e63652e0000000000000000000000000000000000000081525060400191505060405180910390fd5b61119982600c60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612d0690919063ffffffff16565b600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611224848484612d1f565b50600190509392505050565b60096020528060005260406000206000915090505481565b600560009054906101000a900460ff1681565b60065481565b600b8181548110151561127057fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561138a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001807f4f6e6c7920746865204973737565722063616e2063616c6c207468697320667581526020017f6e6374696f6e2e0000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6113b56000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826130f0565b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114a3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e81526020017f6374696f6e2e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600860009054906101000a900460ff1615151561154e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603b8152602001807f5468652049434f2070686173652068617320616c726561647920656e6465642c81526020017f20796f752063616e6e6f7420636c6f736520697420616761696e2e000000000081525060400191505060405180910390fd5b6000600754600960008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403141515611650576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603d8152602001807f43616e6e6f7420636c6f73652049434f207768656e20612062616c616e63652081526020017f72656d61696e7320696e20746865206f776e6572206163636f756e742e00000081525060400191505060405180910390fd5b6001600860006101000a81548160ff021916908315150217905550600a60006116799190613564565b600b60006116879190613585565b7f8092f42d2e149f2bcf3d1a4e5d8c7d71c37501078e3ecb7915d7580d055f00cb60405160405180910390a1565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561179f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e81526020017f6374696f6e2e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d8152602001807f4f6e6c7920746865204b59432050726f76696465722063616e2063616c6c207481526020017f6869732066756e6374696f6e2e0000000000000000000000000000000000000081525060400191505060405180910390fd5b600860009054906101000a900460ff16151515611979576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260338152602001807f5468652049434f2070686173652068617320656e6465642c20796f752063616e81526020017f206e6f206c6f6e67657220617070726f76652e0000000000000000000000000081525060400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611a1e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f43616e6e6f7420617070726f76652061206e756c6c20616464726573732e000081525060200191505060405180910390fd5b600b8190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b73576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e81526020017f6374696f6e2e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600754905090565b600a81815481101515611b8a57fe5b906000526020600020016000915090505481565b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60075481565b60048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611ca85780601f10611c7d57610100808354040283529160200191611ca8565b820191906000526020600020905b815481529060010190602001808311611c8b57829003601f168201915b505050505081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611d9b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001807f4f6e6c7920746865204973737565722063616e2063616c6c207468697320667581526020017f6e6374696f6e2e0000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600081111515611e39576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f546f6b656e7320746f206d696e74206d7573742062652067726561746572207481526020017f68616e207a65726f00000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b611eac81600960008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461334e90919063ffffffff16565b600960008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611f258160065461334e90919063ffffffff16565b6006819055503373ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885826040518082815260200191505060405180910390a250565b6000611f89338484612d1f565b905092915050565b600d6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156120ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e81526020017f6374696f6e2e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600860009054906101000a900460ff16151515612159576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603a8152602001807f5468652049434f2070686173652068617320656e6465642c20796f752063616e81526020017f206e6f206c6f6e67657220736574204b5943206861736865732e00000000000081525060400191505060405180910390fd5b600a81908060018154018082558091505090600182039060005260206000200160009091929091909150555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612272576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e81526020017f6374696f6e2e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600860009054906101000a900460ff161515156122f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f49434f20697320636f6d706c6574652c20757365207472616e7366657228292e81525060200191505060405180910390fd5b6000600754600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054038211612349578161238e565b600754600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054035b905061239b338483612d1f565b506000600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156124c1576000600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506124c084828461336c565b5b50505050565b6000600a828154811015156124d857fe5b90600052602060002001549050919050565b6000600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561265b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e81526020017f6374696f6e2e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600860009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561279c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e81526020017f6374696f6e2e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612841576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f52656665727265722063616e6e6f74206265206e756c6c00000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156128e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f526566657265652063616e6e6f74206265206e756c6c0000000000000000000081525060200191505060405180910390fd5b600860009054906101000a900460ff16151515612991576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001807f43616e6e6f7420616464206e657720726566657272616c73206166746572204981526020017f434f20697320636f6d706c6574652e000000000000000000000000000000000081525060400191505060405180910390fd5b81600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000600b82815481101515612a2457fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515612afc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f43616e6e6f7420617070726f7665206e756c6c20616464726573732e0000000081525060200191505060405180910390fd5b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482141515612c15576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260378152602001807f546865206578706563746564206f6c642076616c756520646964206e6f74206d81526020017f617463682063757272656e7420616c6c6f77616e63652e00000000000000000081525060400191505060405180910390fd5b82600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a3600190509392505050565b6000828211151515612d1457fe5b818303905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515612deb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f43616e6e6f742073656e6420746f6b656e732066726f6d206e756c6c2061646481526020017f726573730000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515612e90576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f43616e6e6f74207472616e7366657220746f6b656e7320746f206e756c6c000081525060200191505060405180910390fd5b81600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515612f47576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f496e73756666696369656e742066756e6473000000000000000000000000000081525060200191505060405180910390fd5b6000821415612f5957600190506130e9565b612fab82600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612d0690919063ffffffff16565b600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061304082600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461334e90919063ffffffff16565b600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156130e4576130e283836130f0565b505b600190505b9392505050565b6000808211151561318f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f546f6b656e7320746f206275726e206d7573742062652067726561746572207481526020017f68616e207a65726f00000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b81600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515613246576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f546f6b656e7320746f206275726e20657863656564732062616c616e6365000081525060200191505060405180910390fd5b61329882600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612d0690919063ffffffff16565b600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506132f082600654612d0690919063ffffffff16565b6006819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a26001905092915050565b600080828401905083811015151561336257fe5b8091505092915050565b600060648281151561337a57fe5b0490506133f081600960008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612d0690919063ffffffff16565b600960008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506134a681600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461334e90919063ffffffff16565b600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550806007600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f1c77e1813cba280f97b8a5318f40f2edd3dc2db1b6ed8524d88db97767ff69ef836040518082815260200191505060405180910390a350505050565b508054600082559060005260206000209081019061358291906135a6565b50565b50805460008255906000526020600020908101906135a391906135cb565b50565b6135c891905b808211156135c45760008160009055506001016135ac565b5090565b90565b6135ed91905b808211156135e95760008160009055506001016135d1565b5090565b9056fea165627a7a7230582090a3c038361ae1e54c6df63361fd4ffe8b3d397f2e09f97f8135b99931279d6200290000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001554696d656c657373204c75787572792047726f757000000000000000000000000000000000000000000000000000000000000000000000000000000000000003544c470000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001554696d656c657373204c75787572792047726f757000000000000000000000000000000000000000000000000000000000000000000000000000000000000003544c470000000000000000000000000000000000000000000000000000000000"
}