{
  "address": "0xd2d14c8bca5869749fbf181a3e65b8609657d78d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenVault",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "500",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-05\n*/\n\npragma solidity 0.4.23;\n// produced by the Solididy File Flattener (c) David Appleton 2018\n// contact : [emailÂ protected]\n// released under Apache 2.0 licence\n// input  /Users/zacharykilgore/src/flexa/smart-contracts/contracts/TokenVault.sol\n// flattened :  Saturday, 05-Jan-19 14:47:14 UTC\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract Claimable is Ownable {\n  address public pendingOwner;\n\n  /**\n   * @dev Modifier throws if called by any account other than the pendingOwner.\n   */\n  modifier onlyPendingOwner() {\n    require(msg.sender == pendingOwner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to set the pendingOwner address.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    pendingOwner = newOwner;\n  }\n\n  /**\n   * @dev Allows the pendingOwner address to finalize the transfer.\n   */\n  function claimOwnership() onlyPendingOwner public {\n    emit OwnershipTransferred(owner, pendingOwner);\n    owner = pendingOwner;\n    pendingOwner = address(0);\n  }\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeERC20 {\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    assert(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(\n    ERC20 token,\n    address from,\n    address to,\n    uint256 value\n  )\n    internal\n  {\n    assert(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    assert(token.approve(spender, value));\n  }\n}\n\ncontract CanReclaimToken is Ownable {\n  using SafeERC20 for ERC20Basic;\n\n  /**\n   * @dev Reclaim all ERC20Basic compatible tokens\n   * @param token ERC20Basic The address of the token contract\n   */\n  function reclaimToken(ERC20Basic token) external onlyOwner {\n    uint256 balance = token.balanceOf(this);\n    token.safeTransfer(owner, balance);\n  }\n\n}\n\ncontract Recoverable is CanReclaimToken, Claimable {\n  using SafeERC20 for ERC20Basic;\n\n  /**\n   * @dev Transfer all ether held by the contract to the contract owner.\n   */\n  function reclaimEther() external onlyOwner {\n    owner.transfer(address(this).balance);\n  }\n\n}\n\ncontract TokenVault is Recoverable {\n  using SafeMath for uint256;\n  using SafeERC20 for ERC20Basic;\n\n  /** The ERC20 token distribution the vault manages. */\n  ERC20Basic public token;\n\n  /** The amount of tokens that should be allocated prior to locking the vault. */\n  uint256 public tokensToBeAllocated;\n\n  /** The total amount of tokens allocated through setAllocation. */\n  uint256 public tokensAllocated;\n\n  /** Total amount of tokens claimed. */\n  uint256 public totalClaimed;\n\n  /** UNIX timestamp when the contract was locked. */\n  uint256 public lockedAt;\n\n  /** UNIX timestamp when the contract was unlocked. */\n  uint256 public unlockedAt;\n\n  /**\n   * Amount of time, in seconds, after locking that must pass before the vault\n   * can be unlocked.\n   */\n  uint256 public vestingPeriod = 0;\n\n  /** Mapping of accounts to token allocations. */\n  mapping (address => uint256) public allocations;\n\n  /** Mapping of tokens claimed by a beneficiary. */\n  mapping (address => uint256) public claimed;\n\n\n  /** Event to track that allocations have been set and the vault has been locked. */\n  event Locked();\n\n  /** Event to track when the vault has been unlocked. */\n  event Unlocked();\n\n  /**\n   * Event to track successful allocation of amount and bonus amount.\n   * @param beneficiary Account that allocation is for\n   * @param amount Amount of tokens allocated\n   */\n  event Allocated(address indexed beneficiary, uint256 amount);\n\n  /**\n   * Event to track a beneficiary receiving an allotment of tokens.\n   * @param beneficiary Account that received tokens\n   * @param amount Amount of tokens received\n   */\n  event Distributed(address indexed beneficiary, uint256 amount);\n\n\n  /** Ensure the vault is able to be loaded. */\n  modifier vaultLoading() {\n    require(lockedAt == 0, \"Expected vault to be loadable\");\n    _;\n  }\n\n  /** Ensure the vault has been locked. */\n  modifier vaultLocked() {\n    require(lockedAt > 0, \"Expected vault to be locked\");\n    _;\n  }\n\n  /** Ensure the vault has been unlocked. */\n  modifier vaultUnlocked() {\n    require(unlockedAt > 0, \"Expected the vault to be unlocked\");\n    _;\n  }\n\n\n  /**\n   * @notice Creates a TokenVault contract that stores a token distribution.\n   * @param _token The address of the ERC20 token the vault is for\n   * @param _tokensToBeAllocated The amount of tokens that will be allocated\n   * prior to locking\n   * @param _vestingPeriod The amount of time, in seconds, that must pass\n   * after locking in the allocations and then unlocking the allocations for\n   * claiming\n   */\n  constructor(\n    ERC20Basic _token,\n    uint256 _tokensToBeAllocated,\n    uint256 _vestingPeriod\n  )\n    public\n  {\n    require(address(_token) != address(0), \"Token address should not be blank\");\n    require(_tokensToBeAllocated > 0, \"Token allocation should be greater than zero\");\n\n    token = _token;\n    tokensToBeAllocated = _tokensToBeAllocated;\n    vestingPeriod = _vestingPeriod;\n  }\n\n  /**\n   * @notice Function to set allocations for accounts.\n   * @dev To be called by owner, likely in a scripted fashion.\n   * @param _beneficiary The address to allocate tokens for\n   * @param _amount The amount of tokens to be allocated and made available\n   * once unlocked\n   * @return true if allocation has been set for beneficiary, false if not\n   */\n  function setAllocation(\n    address _beneficiary,\n    uint256 _amount\n  )\n    external\n    onlyOwner\n    vaultLoading\n    returns(bool)\n  {\n    require(_beneficiary != address(0), \"Beneficiary of allocation must not be blank\");\n    require(_amount != 0, \"Amount of allocation must not be zero\");\n    require(allocations[_beneficiary] == 0, \"Allocation amount for this beneficiary is not already set\");\n\n    // Update the storage\n    allocations[_beneficiary] = allocations[_beneficiary].add(_amount);\n    tokensAllocated = tokensAllocated.add(_amount);\n\n    emit Allocated(_beneficiary, _amount);\n\n    return true;\n  }\n\n  /**\n   * @notice Finalize setting of allocations and begin the lock up (vesting) period.\n   * @dev Should be called after every allocation has been set.\n   * @return true if the vault has been successfully locked\n   */\n  function lock() external onlyOwner vaultLoading {\n    require(tokensAllocated == tokensToBeAllocated, \"Expected to allocate all tokens\");\n    require(token.balanceOf(address(this)) == tokensAllocated, \"Vault must own enough tokens to distribute\");\n\n    // solium-disable-next-line security/no-block-members\n    lockedAt = block.timestamp;\n\n    emit Locked();\n  }\n\n  /**\n   * @notice Unlock the vault, allowing the tokens to be distributed to their\n   * beneficiaries.\n   * @dev Must be locked prior to unlocking. Also, the vestingPeriod must be up.\n   */\n  function unlock() external onlyOwner vaultLocked {\n    require(unlockedAt == 0, \"Must not be unlocked yet\");\n    // solium-disable-next-line security/no-block-members\n    require(block.timestamp >= lockedAt.add(vestingPeriod), \"Lock up must be over\");\n\n    // solium-disable-next-line security/no-block-members\n    unlockedAt = block.timestamp;\n\n    emit Unlocked();\n  }\n\n  /**\n   * @notice Claim whatever tokens account are allocated to the sender.\n   * @dev Can only be called once contract has been unlocked.\n   * @return true if balance successfully distributed to sender, false otherwise\n   */\n  function claim() public vaultUnlocked returns(bool) {\n    return _transferTokens(msg.sender);\n  }\n\n  /**\n   * @notice Utility function to actually transfer allocated tokens to their\n   * owners.\n   * @dev Can only be called by the owner. To be used in case an investor would\n   * like their tokens transferred directly for them. Most likely by a script.\n   * @param _beneficiary Address to transfer tokens to\n   * @return true if balance transferred to beneficiary, false otherwise\n   */\n  function transferFor(\n    address _beneficiary\n  )\n    public\n    onlyOwner\n    vaultUnlocked\n    returns(bool)\n  {\n    return _transferTokens(_beneficiary);\n  }\n\n  /****************\n   *** Internal ***\n   ****************/\n\n  /**\n   * @dev Calculate the number of tokens a beneficiary can claim.\n   * @param _beneficiary Address to check for\n   * @return The amount of tokens available to be claimed\n   */\n  function _claimableTokens(address _beneficiary) internal view returns(uint256) {\n    return allocations[_beneficiary].sub(claimed[_beneficiary]);\n  }\n\n  /**\n   * @dev Internal function to transfer an amount of tokens to a beneficiary.\n   * @param _beneficiary Account to transfer tokens to. The amount is derived\n   * from the claimable amount in the vault\n   * @return true if tokens transferred successfully, false if not\n   */\n  function _transferTokens(address _beneficiary) internal returns(bool) {\n    uint256 _amount = _claimableTokens(_beneficiary);\n    require(_amount > 0, \"Tokens to claim must be greater than zero\");\n\n    claimed[_beneficiary] = claimed[_beneficiary].add(_amount);\n    totalClaimed = totalClaimed.add(_amount);\n\n    token.safeTransfer(_beneficiary, _amount);\n\n    emit Distributed(_beneficiary, _amount);\n\n    return true;\n  }\n\n}",
  "bytecode": "6080604052600060085534801561001557600080fd5b506040516060806111e583398101604090815281516020830151919092015160008054600160a060020a03191633600160a060020a0390811691909117909155831615156100ea57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f546f6b656e20616464726573732073686f756c64206e6f7420626520626c616e60448201527f6b00000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6000821161017f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f546f6b656e20616c6c6f636174696f6e2073686f756c6420626520677265617460448201527f6572207468616e207a65726f0000000000000000000000000000000000000000606482015290519081900360840190fd5b60028054600160a060020a031916600160a060020a039490941693909317909255600355600855611030806101b56000396000f3006080604052600436106101115763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166317ffc32081146101165780634e71d92d146101395780634e71e0c81461016257806352a9039c1461017757806365622cfd146101aa5780637313ee5a146101cb578063755e3e28146101e05780638cb1e9c1146101f55780638da5cb5b1461020a5780639076c1661461023b578063990ca3ff1461025f5780639f727c2714610274578063a69df4b514610289578063b21634821461029e578063c884ef83146102b3578063d54ad2a1146102d4578063e30c3978146102e9578063f2fde38b146102fe578063f83d08ba1461031f578063fc0c546a14610334575b600080fd5b34801561012257600080fd5b50610137600160a060020a0360043516610349565b005b34801561014557600080fd5b5061014e61042c565b604080519115158252519081900360200190f35b34801561016e57600080fd5b506101376104c2565b34801561018357600080fd5b50610198600160a060020a036004351661054e565b60408051918252519081900360200190f35b3480156101b657600080fd5b5061014e600160a060020a0360043516610560565b3480156101d757600080fd5b50610198610610565b3480156101ec57600080fd5b50610198610616565b34801561020157600080fd5b5061019861061c565b34801561021657600080fd5b5061021f610622565b60408051600160a060020a039092168252519081900360200190f35b34801561024757600080fd5b5061014e600160a060020a0360043516602435610631565b34801561026b57600080fd5b506101986108f0565b34801561028057600080fd5b506101376108f6565b34801561029557600080fd5b50610137610953565b3480156102aa57600080fd5b50610198610aca565b3480156102bf57600080fd5b50610198600160a060020a0360043516610ad0565b3480156102e057600080fd5b50610198610ae2565b3480156102f557600080fd5b5061021f610ae8565b34801561030a57600080fd5b50610137600160a060020a0360043516610af7565b34801561032b57600080fd5b50610137610b41565b34801561034057600080fd5b5061021f610d80565b6000805433600160a060020a0390811691161461036557600080fd5b81600160a060020a03166370a08231306040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b1580156103d957600080fd5b505af11580156103ed573d6000803e3d6000fd5b505050506040513d602081101561040357600080fd5b505160005490915061042890600160a060020a0384811691168363ffffffff610d8f16565b5050565b6000806007541115156104b45760408051600080516020610fe5833981519152815260206004820152602160248201527f457870656374656420746865207661756c7420746f20626520756e6c6f636b6560448201527f6400000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6104bd33610e44565b905090565b60015433600160a060020a039081169116146104dd57600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b60096020526000908152604090205481565b6000805433600160a060020a0390811691161461057c57600080fd5b6007546000106106015760408051600080516020610fe5833981519152815260206004820152602160248201527f457870656374656420746865207661756c7420746f20626520756e6c6f636b6560448201527f6400000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b61060a82610e44565b92915050565b60085481565b60045481565b60075481565b600054600160a060020a031681565b6000805433600160a060020a0390811691161461064d57600080fd5b600654156106aa5760408051600080516020610fe5833981519152815260206004820152601d60248201527f4578706563746564207661756c7420746f206265206c6f616461626c65000000604482015290519081900360640190fd5b600160a060020a03831615156107355760408051600080516020610fe5833981519152815260206004820152602b60248201527f42656e6566696369617279206f6620616c6c6f636174696f6e206d757374206e60448201527f6f7420626520626c616e6b000000000000000000000000000000000000000000606482015290519081900360840190fd5b8115156107b75760408051600080516020610fe5833981519152815260206004820152602560248201527f416d6f756e74206f6620616c6c6f636174696f6e206d757374206e6f7420626560448201527f207a65726f000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a038316600090815260096020526040902054156108505760408051600080516020610fe5833981519152815260206004820152603960248201527f416c6c6f636174696f6e20616d6f756e7420666f7220746869732062656e656660448201527f696369617279206973206e6f7420616c72656164792073657400000000000000606482015290519081900360840190fd5b600160a060020a038316600090815260096020526040902054610879908363ffffffff610f9216565b600160a060020a0384166000908152600960205260409020556004546108a5908363ffffffff610f9216565b600455604080518381529051600160a060020a038516917f472f36e28bb47edb7c69c9e2ac00a77c66b505df54e9c818ac57110b0629e8c3919081900360200190a250600192915050565b60035481565b60005433600160a060020a0390811691161461091157600080fd5b60008054604051600160a060020a0391821692309092163180156108fc0292909190818181858888f19350505050158015610950573d6000803e3d6000fd5b50565b60005433600160a060020a0390811691161461096e57600080fd5b6006546000106109cd5760408051600080516020610fe5833981519152815260206004820152601b60248201527f4578706563746564207661756c7420746f206265206c6f636b65640000000000604482015290519081900360640190fd5b60075415610a2a5760408051600080516020610fe5833981519152815260206004820152601860248201527f4d757374206e6f7420626520756e6c6f636b6564207965740000000000000000604482015290519081900360640190fd5b600854600654610a3f9163ffffffff610f9216565b421015610a9b5760408051600080516020610fe5833981519152815260206004820152601460248201527f4c6f636b207570206d757374206265206f766572000000000000000000000000604482015290519081900360640190fd5b426007556040517f19aad37188a1d3921e29eb3c66acf43d81975e107cb650d58cca878627955fd690600090a1565b60065481565b600a6020526000908152604090205481565b60055481565b600154600160a060020a031681565b60005433600160a060020a03908116911614610b1257600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60005433600160a060020a03908116911614610b5c57600080fd5b60065415610bb95760408051600080516020610fe5833981519152815260206004820152601d60248201527f4578706563746564207661756c7420746f206265206c6f616461626c65000000604482015290519081900360640190fd5b60035460045414610c195760408051600080516020610fe5833981519152815260206004820152601f60248201527f457870656374656420746f20616c6c6f6361746520616c6c20746f6b656e7300604482015290519081900360640190fd5b600454600260009054906101000a9004600160a060020a0316600160a060020a03166370a08231306040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b158015610ca557600080fd5b505af1158015610cb9573d6000803e3d6000fd5b505050506040513d6020811015610ccf57600080fd5b505114610d515760408051600080516020610fe5833981519152815260206004820152602a60248201527f5661756c74206d757374206f776e20656e6f75676820746f6b656e7320746f2060448201527f6469737472696275746500000000000000000000000000000000000000000000606482015290519081900360840190fd5b426006556040517f0f2e5b6c72c6a4491efd919a9f9a409f324ef0708c11ee57d410c2cb06c0992b90600090a1565b600254600160a060020a031681565b82600160a060020a031663a9059cbb83836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610e0b57600080fd5b505af1158015610e1f573d6000803e3d6000fd5b505050506040513d6020811015610e3557600080fd5b50511515610e3f57fe5b505050565b600080610e5083610f9f565b905060008111610ed55760408051600080516020610fe5833981519152815260206004820152602960248201527f546f6b656e7320746f20636c61696d206d75737420626520677265617465722060448201527f7468616e207a65726f0000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a0383166000908152600a6020526040902054610efe908263ffffffff610f9216565b600160a060020a0384166000908152600a6020526040902055600554610f2a908263ffffffff610f9216565b600555600254610f4a90600160a060020a0316848363ffffffff610d8f16565b604080518281529051600160a060020a038516917fb649c98f58055c520df0dcb5709eff2e931217ff2fb1e21376130d31bbb1c0af919081900360200190a250600192915050565b8181018281101561060a57fe5b600160a060020a0381166000908152600a6020908152604080832054600990925282205461060a9163ffffffff610fd216565b600082821115610fde57fe5b50900390560008c379a000000000000000000000000000000000000000000000000000000000a165627a7a723058204ccd409fbd8770f05eb6cbd53c6a4a533bdf84363ef9719accb1267d0f88020400290000000000000000000000004a57e687b9126435a9b19e4a802113e266adebde00000000000000000000000000000000000000000e8603d2b10a57149b8c00000000000000000000000000000000000000000000000000000000000001e13380",
  "constructorArguments": "0000000000000000000000004a57e687b9126435a9b19e4a802113e266adebde00000000000000000000000000000000000000000e8603d2b10a57149b8c00000000000000000000000000000000000000000000000000000000000001e13380"
}