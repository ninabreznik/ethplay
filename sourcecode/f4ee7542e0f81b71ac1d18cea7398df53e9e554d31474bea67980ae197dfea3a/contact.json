{
  "address": "0xa00ccf3183578debdc2ad2368bdd1d85633ec614",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SmartLotto",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-13\n*/\n\npragma solidity ^0.4.25;\n\n/**\n *\n * SmartLotto.in\n *\n * Fair lottery smart contract with random determination of winning tickets\n *\n *\n * 1 ticket is jackpot winning ticket and get 10% of the contract balance\n * 5 tickets are first prize winnings tickets and get 5% of the contract balance\n * 10% of all tickets are second prize winners and get 35% of the contract balance\n * all other tickets receive 50% refund of the ticket price\n *\n *\n * 5% for referral program - use Add Data field and fill it with ETH-address of your upline when you buy tickets\n *\n *\n * 1 ticket price is 0.1 ETH, you can buy 250 tickets per 1 transaction maximum (250 tickets = 25 ETH)\n * You can make more transactions and purhase more tickets to increase your winning chances\n *\n * Use 200000 of gas limit when you buy tickets, check current gas price on https://ethgasstation.info\n *\n * Good luck!\n *\n */\n\n\ncontract SmartLotto {\n    using SafeMath for uint256;\n\n    uint256 constant public TICKET_PRICE = 0.1 ether;        // price of 1 ticket is 0.1 ETH\n    uint256 constant public MAX_TICKETS_PER_TX = 250;        // max tickets amount per 1 transaction\n\n    uint256 constant public JACKPOT_WINNER = 1;              // jackpot go to 1 ticket winners\n    uint256 constant public FIRST_PRIZE_WINNERS = 5;         // first prize go to 5 tickets winners\n    uint256 constant public SECOND_PRIZE_WINNERS_PERC = 10;  // percent of the second prize ticket winners\n\n    uint256 constant public JACKPOT_PRIZE = 10;              // jackpot winner take 10% of balance\n    uint256 constant public FIRST_PRIZE_POOL = 5;            // first prize winners takes 5% of balance\n    uint256 constant public SECOND_PRIZE_POOL = 35;          // second prize winners takes 35% of balance\n\n    uint256 constant public REFERRAL_COMMISSION = 5;         // referral commission 5% from input\n    uint256 constant public MARKETING_COMMISSION = 10;       // marketing commission 10% from input\n    uint256 constant public WINNINGS_COMMISSION = 20;        // winnings commission 20% from winnings\n\n    uint256 constant public PERCENTS_DIVIDER = 100;          // percents divider, 100%\n\n    uint256 constant public CLOSE_TICKET_SALES = 1546297200; // 23:00:00 31th of December 2018 GMT\n    uint256 constant public LOTTERY_DRAW_START = 1546300800; // 00:00:00 1th of January 2019 GMT\n    uint256 constant public PAYMENTS_END_TIME = 1554076800;  // 00:00:00 1th of April 2019 GMT\n\n    uint256 public playersCount = 0;                         // participated players counter\n    uint256 public ticketsCount = 0;                         // buyed tickets counter\n\n    uint256 public jackpotPrize = 0;                         // jackpot win amount per ticket\n    uint256 public firstPrize = 0;                           // first prize win amount per ticket\n    uint256 public secondPrize = 0;                          // second prize win amount per ticket\n    uint256 public secondPrizeWonTickets = 0;                // second prize win tickets amount\n    uint256 public wonTicketsAmount = 0;                     // total amount of won tickets\n    uint256 public participantsMoneyPool = 0;                // money pool returned to participants\n    uint256 public participantsTicketPrize = 0;              // amount returned per 1 ticket\n\n    uint256 public ticketsCalculated = 0;                    // won tickets calculated counter\n\n    uint256 public salt = 0;                                 // salt for random generator\n\n    bool public calculationsDone;                            // flag true when all calculations finished\n\n    address constant public MARKETING_ADDRESS = 0xFD527958E10C546f8b484135CC51fa9f0d3A8C5f;\n    address constant public COMMISSION_ADDRESS = 0x53434676E12A4eE34a4eC7CaBEBE9320e8b836e1;\n\n\n    struct Player {\n        uint256 ticketsCount;\n        uint256[] ticketsPacksBuyed;\n        uint256 winnings;\n        uint256 wonTicketsCount;\n        uint256 payed;\n    }\n\n    struct TicketsBuy {\n        address player;\n        uint256 ticketsAmount;\n    }\n\n\tstruct TicketsWon {\n\t\tuint256 won;\n    }\n\n    mapping (address => Player) public players;\n    mapping (uint256 => TicketsBuy) public ticketsBuys;\n\tmapping (uint256 => TicketsWon) public ticketsWons;\n\n\n    function() public payable {\n        if (msg.value >= TICKET_PRICE) {\n            buyTickets();\n        } else {\n            if (!calculationsDone) {\n                makeCalculations(50);\n            } else {\n                payPlayers();\n            }\n        }\n    }\n\n\n    function buyTickets() private {\n        // require time now less than or equal to 23:00:00 31th of December 2018 GMT\n        require(now <= CLOSE_TICKET_SALES);\n\n        // save msg.value\n        uint256 msgValue = msg.value;\n\n        // load player msg.sender\n        Player storage player = players[msg.sender];\n\n        // if new player add to total players stats\n        if (player.ticketsCount == 0) {\n            playersCount++;\n        }\n\n        // count amount of tickets which can be bought\n        uint256 ticketsAmount = msgValue.div(TICKET_PRICE);\n\n        // if tickets more than MAX_TICKETS_PER_TX (250 tickets)\n        if (ticketsAmount > MAX_TICKETS_PER_TX) {\n            // use MAX_TICKETS_PER_TX (250 tickets)\n            ticketsAmount = MAX_TICKETS_PER_TX;\n        }\n\n\t\t// count overpayed amount by player\n\t\tuint256 overPayed = msgValue.sub(ticketsAmount.mul(TICKET_PRICE));\n\n\t\t// if player overpayed\n\t\tif (overPayed > 0) {\n\t\t\t// update msgValue for futher calculations\n\t\t\tmsgValue = msgValue.sub(overPayed);\n\n\t\t\t// send to player overpayed amount\n\t\t\tmsg.sender.send(overPayed);\n\t\t}\n\n        // add bought tickets pack to array with id of current tickets amount\n        player.ticketsPacksBuyed.push(ticketsCount);\n\n        // create new TicketsBuy record\n        // creating only one record per MAX_TICKETS_PER_TX (250 tickets)\n        // to avoid high gas usage when players buy tickets\n        ticketsBuys[ticketsCount] = TicketsBuy({\n            player : msg.sender,\n            ticketsAmount : ticketsAmount\n        });\n\n\t\t// add bought tickets to player stats\n        player.ticketsCount = player.ticketsCount.add(ticketsAmount);\n        // update bought tickets counter\n        ticketsCount = ticketsCount.add(ticketsAmount);\n\n        // try get ref address from tx data\n        address referrerAddress = bytesToAddress(msg.data);\n\n        // if ref address not 0 and not msg.sender\n        if (referrerAddress != address(0) && referrerAddress != msg.sender) {\n            // count ref amount\n            uint256 referralAmount = msgValue.mul(REFERRAL_COMMISSION).div(PERCENTS_DIVIDER);\n            // send ref amount\n            referrerAddress.send(referralAmount);\n        }\n\n        // count marketing amount\n        uint256 marketingAmount = msgValue.mul(MARKETING_COMMISSION).div(PERCENTS_DIVIDER);\n        // send marketing amount\n        MARKETING_ADDRESS.send(marketingAmount);\n    }\n\n    function makeCalculations(uint256 count) public {\n        // require calculations not done\n        require(!calculationsDone);\n        // require time now more than or equal to 00:00:00 1st of January 2019 GMT\n        require(now >= LOTTERY_DRAW_START);\n\n        // if salt not counted\n        if (salt == 0) {\n            // create random salt which depends on blockhash, count of tickets and count of players\n            salt = uint256(keccak256(abi.encodePacked(ticketsCount, uint256(blockhash(block.number-1)), playersCount)));\n\n            // get actual contract balance\n            uint256 contractBalance = address(this).balance;\n\n            // count and save jackpot win amount per ticket\n            jackpotPrize = contractBalance.mul(JACKPOT_PRIZE).div(PERCENTS_DIVIDER).div(JACKPOT_WINNER);\n            // count and save first prize win amount per ticket\n            firstPrize = contractBalance.mul(FIRST_PRIZE_POOL).div(PERCENTS_DIVIDER).div(FIRST_PRIZE_WINNERS);\n\n            // count and save second prize win tickets amount\n            secondPrizeWonTickets = ticketsCount.mul(SECOND_PRIZE_WINNERS_PERC).div(PERCENTS_DIVIDER);\n            // count and save second prize win amount per ticket\n            secondPrize = contractBalance.mul(SECOND_PRIZE_POOL).div(PERCENTS_DIVIDER).div(secondPrizeWonTickets);\n\n            // count and save how many tickets won\n            wonTicketsAmount = secondPrizeWonTickets.add(JACKPOT_WINNER).add(FIRST_PRIZE_WINNERS);\n\n            // count and save money pool returned to participants\n            participantsMoneyPool = contractBalance.mul(PERCENTS_DIVIDER.sub(JACKPOT_PRIZE).sub(FIRST_PRIZE_POOL).sub(SECOND_PRIZE_POOL)).div(PERCENTS_DIVIDER);\n            // count and save participants prize per ticket\n            participantsTicketPrize = participantsMoneyPool.div(ticketsCount.sub(wonTicketsAmount));\n\n            // proceed jackpot prize ticket winnings\n            calculateWonTickets(JACKPOT_WINNER, jackpotPrize);\n            // proceed first prize tickets winnings\n            calculateWonTickets(FIRST_PRIZE_WINNERS, firstPrize);\n\n            // update calculated tickets counter\n            ticketsCalculated = ticketsCalculated.add(JACKPOT_WINNER).add(FIRST_PRIZE_WINNERS);\n        // if salt already counted\n        } else {\n            // if calculations of second prize winners not yet finished\n            if (ticketsCalculated < wonTicketsAmount) {\n                // how many tickets not yet calculated\n                uint256 ticketsForCalculation = wonTicketsAmount.sub(ticketsCalculated);\n\n                // if count zero and tickets for calculations more than 50\n                // than calculate 50 tickets to avoid gas cost more than block limit\n                if (count == 0 && ticketsForCalculation > 50) {\n                    ticketsForCalculation = 50;\n                }\n\n                // if count more than zero and count less than amount of not calculated tickets\n                // than use count as amount of tickets for calculations\n                if (count > 0 && count <= ticketsForCalculation) {\n                    ticketsForCalculation = count;\n                }\n\n                // proceed second prize ticket winnings\n                calculateWonTickets(ticketsForCalculation, secondPrize);\n\n                // update calculated tickets counter\n                ticketsCalculated = ticketsCalculated.add(ticketsForCalculation);\n            }\n\n            // if calculations of second prize winners finished set calculations done\n            if (ticketsCalculated == wonTicketsAmount) {\n                calculationsDone = true;\n            }\n        }\n    }\n\n    function calculateWonTickets(uint256 numbers, uint256 prize) private {\n        // for all numbers in var make calculations\n        for (uint256 n = 0; n < numbers; n++) {\n            // get random generated won ticket number\n            uint256 wonTicketNumber = random(n);\n\n\t\t\t// if ticket already won\n\t\t\tif (ticketsWons[wonTicketNumber].won == 1) {\n\t\t\t\t// than add 1 ticket to numbers\n\t\t\t\tnumbers = numbers.add(1);\n\t\t\t// ticket not won yet\n\t\t\t} else {\n\t\t\t\t// mark ticket as won\n\t\t\t\tticketsWons[wonTicketNumber].won = 1;\n\n\t\t\t\t// search player record to add ticket winnings\n\t\t\t\tfor (uint256 i = 0; i < MAX_TICKETS_PER_TX; i++) {\n\t\t\t\t\t// search max MAX_TICKETS_PER_TX (250 tickets)\n\t\t\t\t\tuint256 wonTicketIdSearch = wonTicketNumber - i;\n\n\t\t\t\t\t// if player record found\n\t\t\t\t\tif (ticketsBuys[wonTicketIdSearch].ticketsAmount > 0) {\n\t\t\t\t\t\t// read player from storage\n\t\t\t\t\t\tPlayer storage player = players[ticketsBuys[wonTicketIdSearch].player];\n\n\t\t\t\t\t\t// add ticket prize amount to player winnings\n\t\t\t\t\t\tplayer.winnings = player.winnings.add(prize);\n\t\t\t\t\t\t// update user won tickets counter\n\t\t\t\t\t\tplayer.wonTicketsCount++;\n\n\t\t\t\t\t\t// player found so stop searching\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n        }\n\n        // update salt and add numbers amount\n        salt = salt.add(numbers);\n    }\n\n    function payPlayers() private {\n        // require calculations are done\n        require(calculationsDone);\n\n        // pay players if time now less than 00:00:00 1st of April 2019 GMT\n        if (now <= PAYMENTS_END_TIME) {\n            // read player record\n            Player storage player = players[msg.sender];\n\n            // if player have won tickets and not yet payed\n            if (player.winnings > 0 && player.payed == 0) {\n                // count winnings commission from player won amount\n                uint256 winCommission = player.winnings.mul(WINNINGS_COMMISSION).div(PERCENTS_DIVIDER);\n\n                // count amount of not won tickets\n                uint256 notWonTickets = player.ticketsCount.sub(player.wonTicketsCount);\n                // count return amount for not won tickets\n                uint256 notWonAmount = notWonTickets.mul(participantsTicketPrize);\n\n                // update player payed winnings\n                player.payed = player.winnings.add(notWonAmount);\n\n                // send total winnings amount to player\n                msg.sender.send(player.winnings.sub(winCommission).add(notWonAmount).add(msg.value));\n\n                // send commission\n                COMMISSION_ADDRESS.send(winCommission);\n            }\n\n            // if player have not won tickets and not yet payed\n            if (player.winnings == 0 && player.payed == 0) {\n                // count return amount for not won tickets\n                uint256 returnAmount = player.ticketsCount.mul(participantsTicketPrize);\n\n                // update player payed winnings\n                player.payed = returnAmount;\n\n                // send total winnings amount to player\n                msg.sender.send(returnAmount.add(msg.value));\n            }\n        // if payment period already ended\n        } else {\n            // get actual contract balance\n            uint256 contractBalance = address(this).balance;\n\n            // actual contract balance more than zero\n            if (contractBalance > 0) {\n                // send contract balance to commission address\n                COMMISSION_ADDRESS.send(contractBalance);\n            }\n        }\n    }\n\n    function random(uint256 nonce) private view returns (uint256) {\n        // random number generated from salt plus nonce divided by total amount of tickets\n        uint256 number = uint256(keccak256(abi.encodePacked(salt.add(nonce)))).mod(ticketsCount);\n        return number;\n    }\n\n    function playerBuyedTicketsPacks(address player) public view returns (uint256[]) {\n        return players[player].ticketsPacksBuyed;\n    }\n\n    function bytesToAddress(bytes data) private pure returns (address addr) {\n        assembly {\n            addr := mload(add(data, 0x14))\n        }\n    }\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}",
  "bytecode": ""
}