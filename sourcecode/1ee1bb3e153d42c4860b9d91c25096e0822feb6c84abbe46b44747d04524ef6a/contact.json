{
  "address": "0x4bf32995fe59abc027cc7d3a379ebc2aa0371cb4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RNBToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-23\n*/\n\n/* \n@Rental and Booking (RNB)\n@2018 by TOTO team\n */\npragma solidity ^0.4.18;\n\n/*\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /*\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /*\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /*\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /*\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract AltcoinToken {\n    function balanceOf(address _owner) constant public returns (uint256);\n    function transfer(address _to, uint256 _value) public returns (bool);\n}\n\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) public constant returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public constant returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract RNBToken is ERC20 {\n    \n    using SafeMath for uint256;\n    address owner = msg.sender;\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;    \n\n    string public constant name = \"RNBToken\";\n    string public constant symbol = \"RNB\";\n    uint public constant decimals = 8;\n    \n    uint256 public totalSupply = 25000000000e8;\n    uint256 public totalDistributed = 0;    \n    uint256 public constant MIN_PURCHASE = 1 ether / 100;\n    uint256 public tokensPerEth = 20000000e8;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    \n    event Distr(address indexed to, uint256 amount);\n    event DistrFinished();\n    event StartICO();\n    event ResetICO();\n\n    event Airdrop(address indexed _owner, uint _amount, uint _balance);\n\n    event TokensPerEthUpdated(uint _tokensPerEth);\n    \n    event Burn(address indexed burner, uint256 value);\n\n    bool public distributionFinished = false;\n\n    bool public icoStart = false;\n    \n    modifier canDistr() {\n        require(!distributionFinished);\n        require(icoStart);\n        _;\n    }\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    \n    constructor () public {\n        owner = msg.sender;\n    }\n    \n    function transferOwnership(address newOwner) onlyOwner public {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n\n    function startICO() onlyOwner public returns (bool) {\n        icoStart = true;\n        emit StartICO();\n        return true;\n    }\n\n    function resetICO() onlyOwner public returns (bool) {\n        icoStart = false;\n        distributionFinished = false;\n        emit ResetICO();\n        return true;\n    }\n\n    function finishDistribution() onlyOwner canDistr public returns (bool) {\n        distributionFinished = true;\n        emit DistrFinished();\n        return true;\n    }\n    \n    function distr(address _to, uint256 _amount) canDistr private returns (bool) {\n        totalDistributed = totalDistributed.add(_amount);        \n        balances[_to] = balances[_to].add(_amount);\n        emit Distr(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n\n        return true;\n    }\n\n    function doAirdrop(address _participant, uint _amount) internal {\n\n        require( _amount > 0 );      \n\n        require( totalDistributed < totalSupply );\n        \n        balances[_participant] = balances[_participant].add(_amount);\n        totalDistributed = totalDistributed.add(_amount);\n\n        if (totalDistributed >= totalSupply) {\n            distributionFinished = true;\n        }\n\n        // log\n        emit Airdrop(_participant, _amount, balances[_participant]);\n        emit Transfer(address(0), _participant, _amount);\n    }\n\n    function transferTokenTo(address _participant, uint _amount) public onlyOwner {        \n        doAirdrop(_participant, _amount);\n    }\n\n    function transferTokenToMultiple(address[] _addresses, uint _amount) public onlyOwner {        \n        for (uint i = 0; i < _addresses.length; i++) doAirdrop(_addresses[i], _amount);\n    }\n\n    function updateTokensPerEth(uint _tokensPerEth) public onlyOwner {        \n        tokensPerEth = _tokensPerEth;\n        emit TokensPerEthUpdated(_tokensPerEth);\n    }\n           \n    function () external payable {\n        getTokens();\n     }\n    \n    function getTokens() payable canDistr  public {\n        uint256 tokens = 0;\n\n        // minimum contribution\n        require( msg.value >= MIN_PURCHASE );\n\n        require( msg.value > 0 );\n\n        // get baseline number of tokens\n        tokens = tokensPerEth.mul(msg.value) / 1 ether;        \n        address investor = msg.sender;\n        \n        if (tokens > 0) {\n            distr(investor, tokens);\n        }\n\n        if (totalDistributed >= totalSupply) {\n            distributionFinished = true;\n        }\n    }\n\n    function balanceOf(address _owner) constant public returns (uint256) {\n        return balances[_owner];\n    }\n\n    // mitigates the ERC20 short address attack\n    modifier onlyPayloadSize(uint size) {\n        assert(msg.data.length >= size + 4);\n        _;\n    }\n    \n    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\n\n        require(_to != address(0));\n        require(_amount <= balances[msg.sender]);\n        \n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n    \n    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\n\n        require(_to != address(0));\n        require(_amount <= balances[_from]);\n        require(_amount <= allowed[_from][msg.sender]);\n        \n        balances[_from] = balances[_from].sub(_amount);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(_from, _to, _amount);\n        return true;\n    }\n    \n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        // mitigates the ERC20 spend/approval race condition\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    function allowance(address _owner, address _spender) constant public returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n    \n    function getTokenBalance(address tokenAddress, address who) constant public returns (uint){\n        AltcoinToken t = AltcoinToken(tokenAddress);\n        uint bal = t.balanceOf(who);\n        return bal;\n    }\n    \n    function withdraw() onlyOwner public {\n        address myAddress = this;\n        uint256 etherBalance = myAddress.balance;\n        owner.transfer(etherBalance);\n    }\n    \n    function burn(uint256 _value) onlyOwner public {\n        require(_value <= balances[msg.sender]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        totalDistributed = totalDistributed.sub(_value);\n        emit Burn(burner, _value);\n    }\n    \n    function withdrawAltcoinTokens(address _tokenContract) onlyOwner public returns (bool) {\n        AltcoinToken token = AltcoinToken(_tokenContract);\n        uint256 amount = token.balanceOf(address(this));\n        return token.transfer(owner, amount);\n    }\n}",
  "bytecode": "608060405260018054600160a060020a031916331790556722b1c8c1227a0000600455600060055566071afd498d00006006556007805461ffff1916905534801561004957600080fd5b5060018054600160a060020a031916331790556111888061006b6000396000f3006080604052600436106101535763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461015d578063095ea7b3146101e757806318160ddd1461021f5780632195845f1461024657806323b872dd146102675780632c0a036b14610291578063313ce567146102a65780633ccfd60b146102bb57806342966c68146102d057806370a08231146102e85780637fa8c158146103095780638144650a1461031e578063827037db1461034257806395d89b41146103575780639b1cbccc1461036c5780639ea407be14610381578063a9059cbb14610399578063aa6ca80814610153578063c108d542146103bd578063c3888bce146103d2578063c489744b14610429578063cbdd69b514610450578063d439390c14610465578063dd62ed3e1461047a578063efca2eed146104a1578063f2fde38b146104b6575b61015b6104d7565b005b34801561016957600080fd5b50610172610585565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101ac578181015183820152602001610194565b50505050905090810190601f1680156101d95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101f357600080fd5b5061020b600160a060020a03600435166024356105bc565b604080519115158252519081900360200190f35b34801561022b57600080fd5b50610234610664565b60408051918252519081900360200190f35b34801561025257600080fd5b5061020b600160a060020a036004351661066a565b34801561027357600080fd5b5061020b600160a060020a03600435811690602435166044356107be565b34801561029d57600080fd5b5061020b610931565b3480156102b257600080fd5b50610234610985565b3480156102c757600080fd5b5061015b61098a565b3480156102dc57600080fd5b5061015b6004356109ec565b3480156102f457600080fd5b50610234600160a060020a0360043516610acb565b34801561031557600080fd5b5061020b610ae6565b34801561032a57600080fd5b5061015b600160a060020a0360043516602435610b3e565b34801561034e57600080fd5b5061020b610b5f565b34801561036357600080fd5b50610172610b6d565b34801561037857600080fd5b5061020b610ba4565b34801561038d57600080fd5b5061015b600435610c20565b3480156103a557600080fd5b5061020b600160a060020a0360043516602435610c72565b3480156103c957600080fd5b5061020b610d51565b3480156103de57600080fd5b506040805160206004803580820135838102808601850190965280855261015b953695939460249493850192918291850190849080828437509497505093359450610d5a9350505050565b34801561043557600080fd5b50610234600160a060020a0360043581169060243516610daa565b34801561045c57600080fd5b50610234610e5b565b34801561047157600080fd5b50610234610e61565b34801561048657600080fd5b50610234600160a060020a0360043581169060243516610e6c565b3480156104ad57600080fd5b50610234610e97565b3480156104c257600080fd5b5061015b600160a060020a0360043516610e9d565b600754600090819060ff16156104ec57600080fd5b600754610100900460ff16151561050257600080fd5b60009150662386f26fc1000034101561051a57600080fd5b6000341161052757600080fd5b600654670de0b6b3a764000090610544903463ffffffff610eef16565b81151561054d57fe5b0491503390506000821115610568576105668183610f18565b505b60045460055410610581576007805460ff191660011790555b5050565b60408051808201909152600881527f524e42546f6b656e000000000000000000000000000000000000000000000000602082015281565b600081158015906105ef5750336000908152600360209081526040808320600160a060020a038716845290915290205415155b156105fc5750600061065e565b336000818152600360209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b60045481565b60015460009081908190600160a060020a0316331461068857600080fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051859350600160a060020a038416916370a082319160248083019260209291908290030181600087803b1580156106ec57600080fd5b505af1158015610700573d6000803e3d6000fd5b505050506040513d602081101561071657600080fd5b5051600154604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810184905290519293509084169163a9059cbb916044808201926020929091908290030181600087803b15801561078a57600080fd5b505af115801561079e573d6000803e3d6000fd5b505050506040513d60208110156107b457600080fd5b5051949350505050565b6000606060643610156107cd57fe5b600160a060020a03841615156107e257600080fd5b600160a060020a03851660009081526002602052604090205483111561080757600080fd5b600160a060020a038516600090815260036020908152604080832033845290915290205483111561083757600080fd5b600160a060020a038516600090815260026020526040902054610860908463ffffffff61100a16565b600160a060020a038616600090815260026020908152604080832093909355600381528282203383529052205461089d908463ffffffff61100a16565b600160a060020a0380871660009081526003602090815260408083203384528252808320949094559187168152600290915220546108e1908463ffffffff61101c16565b600160a060020a03808616600081815260026020908152604091829020949094558051878152905191939289169260008051602061113d83398151915292918290030190a3506001949350505050565b600154600090600160a060020a0316331461094b57600080fd5b6007805461ffff191690556040517f709bfbbb9211cec7e9d6203bd75ecb00bc1802373741d11b664a136ae1b0ab0290600090a150600190565b600881565b6001546000908190600160a060020a031633146109a657600080fd5b50506001546040513091823191600160a060020a03909116906108fc8315029083906000818181858888f193505050501580156109e7573d6000803e3d6000fd5b505050565b600154600090600160a060020a03163314610a0657600080fd5b33600090815260026020526040902054821115610a2257600080fd5b5033600081815260026020526040902054610a43908363ffffffff61100a16565b600160a060020a038216600090815260026020526040902055600454610a6f908363ffffffff61100a16565b600455600554610a85908363ffffffff61100a16565b600555604080518381529051600160a060020a038316917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a25050565b600160a060020a031660009081526002602052604090205490565b600154600090600160a060020a03163314610b0057600080fd5b6007805461ff0019166101001790556040517f6a6b80772682d230603482c384f27af24be0f9cb49cce7a9009a31880841193d90600090a150600190565b600154600160a060020a03163314610b5557600080fd5b6105818282611029565b600754610100900460ff1681565b60408051808201909152600381527f524e420000000000000000000000000000000000000000000000000000000000602082015281565b600154600090600160a060020a03163314610bbe57600080fd5b60075460ff1615610bce57600080fd5b600754610100900460ff161515610be457600080fd5b6007805460ff191660011790556040517f7f95d919e78bdebe8a285e6e33357c2fcb65ccf66e72d7573f9f8f6caad0c4cc90600090a150600190565b600154600160a060020a03163314610c3757600080fd5b60068190556040805182815290517ff7729fa834bbef70b6d3257c2317a562aa88b56c81b544814f93dc5963a2c0039181900360200190a150565b600060406044361015610c8157fe5b600160a060020a0384161515610c9657600080fd5b33600090815260026020526040902054831115610cb257600080fd5b33600090815260026020526040902054610cd2908463ffffffff61100a16565b3360009081526002602052604080822092909255600160a060020a03861681522054610d04908463ffffffff61101c16565b600160a060020a03851660008181526002602090815260409182902093909355805186815290519192339260008051602061113d8339815191529281900390910190a35060019392505050565b60075460ff1681565b600154600090600160a060020a03163314610d7457600080fd5b5060005b82518110156109e757610da28382815181101515610d9257fe5b9060200190602002015183611029565b600101610d78565b600080600084915081600160a060020a03166370a08231856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b158015610e2657600080fd5b505af1158015610e3a573d6000803e3d6000fd5b505050506040513d6020811015610e5057600080fd5b505195945050505050565b60065481565b662386f26fc1000081565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b60055481565b600154600160a060020a03163314610eb457600080fd5b600160a060020a03811615610eec576001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b6000821515610f005750600061065e565b50818102818382811515610f1057fe5b041461065e57fe5b60075460009060ff1615610f2b57600080fd5b600754610100900460ff161515610f4157600080fd5b600554610f54908363ffffffff61101c16565b600555600160a060020a038316600090815260026020526040902054610f80908363ffffffff61101c16565b600160a060020a038416600081815260026020908152604091829020939093558051858152905191927f8940c4b8e215f8822c5c8f0056c12652c746cbc57eedbd2a440b175971d47a7792918290030190a2604080518381529051600160a060020a0385169160009160008051602061113d8339815191529181900360200190a350600192915050565b60008282111561101657fe5b50900390565b8181018281101561065e57fe5b6000811161103657600080fd5b6004546005541061104657600080fd5b600160a060020a03821660009081526002602052604090205461106f908263ffffffff61101c16565b600160a060020a03831660009081526002602052604090205560055461109b908263ffffffff61101c16565b6005819055600454116110b6576007805460ff191660011790555b600160a060020a0382166000818152600260209081526040918290205482518581529182015281517fada993ad066837289fe186cd37227aa338d27519a8a1547472ecb9831486d272929181900390910190a2604080518281529051600160a060020a0384169160009160008051602061113d8339815191529181900360200190a350505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a7230582053906856ff890feb8fbb802d792d37360530b1f2b556c30f9c6f017c61c2a24b0029"
}