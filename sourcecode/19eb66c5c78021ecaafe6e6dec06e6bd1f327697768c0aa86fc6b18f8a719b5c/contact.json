{
  "address": "0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SilaToken",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-28\n*/\n\npragma solidity ^0.5.2;\n\n\n/** @title A contract for issuing, redeeming and transfering Sila StableCoins\n  *\n  * @author www.silamoney.com\n  * Email: [emailÂ protected]\n  *\n  */\n\n/**Run\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\n \nlibrary SafeMath{\n    \n    \n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  \n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    \n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n\n    \n    if (_a == 0) {\n      return 0;\n    }\n\n    uint256 c = _a * _b;\n    require(c / _a == _b);\n\n    return c;\n  }\n\n \n   /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n \n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    \n    require(_b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = _a / _b;\n    \n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n  \n  \n \n   /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  \n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    require(_b <= _a);\n    uint256 c = _a - _b;\n\n    return c;\n  }\n\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  \n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    uint256 c = _a + _b;\n    require(c >= _a);\n\n    return c;\n  }\n\n    \n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract hotOwner and ColdOwner, and provides authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\n\ncontract Ownable {\n    \n    // hot and cold wallet addresses\n    \n    address public hotOwner=0xCd39203A332Ff477a35dA3AD2AD7761cDBEAb7F0;\n\n    address public coldOwner=0x1Ba688e70bb4F3CB266b8D721b5597bFbCCFF957;\n    \n    \n    //events\n    \n    event OwnershipTransferred(address indexed _newHotOwner,address indexed _newColdOwner,address indexed _oldColdOwner);\n\n\n    /**\n   * @dev Reverts if called by any account other than the hotOwner.\n   */\n   \n    modifier onlyHotOwner() {\n        require(msg.sender == hotOwner);\n        _;\n    }\n    \n     /**\n   * @dev Reverts if called by any account other than the coldOwner.\n   */\n    \n    modifier onlyColdOwner() {\n        require(msg.sender == coldOwner);\n        _;\n    }\n    \n     /**\n   * @dev Function assigns new hotowner and coldOwner\n   * @param _newHotOwner address The address which owns the funds.\n   * @param _newColdOwner address The address which can change the hotOwner.\n   */\n    \n    function transferOwnership(address _newHotOwner,address _newColdOwner) public onlyColdOwner returns (bool) {\n        require(_newHotOwner != address(0));\n        require(_newColdOwner!= address(0));\n        hotOwner = _newHotOwner;\n        coldOwner = _newColdOwner;\n        emit OwnershipTransferred(_newHotOwner,_newColdOwner,msg.sender);\n        return true;\n        \n        \n    }\n\n}\n\n/**\n * @title Authorizable\n * @dev The Authorizable contract can be used to authorize addresses to control silatoken main functions\n * functions, this will provide more flexibility in terms of signing trasactions\n */\n\ncontract Authorizable is Ownable {\n    \n    //map to check if the address is authorized to issue, redeem sila\n    mapping(address => bool) authorized;\n    \n    //events for when address is added or removed\n    event AuthorityAdded(address indexed _toAdd);\n    event AuthorityRemoved(address indexed _toRemove);\n    \n    //array of authorized address to check for all the authorized addresses\n    address[] public authorizedAddresses;\n\n    \n    modifier onlyAuthorized() {\n        require(authorized[msg.sender] || hotOwner == msg.sender);\n        _;\n    }\n    \n    \n     \n     /**\n   * @dev Function addAuthorized adds addresses that can issue,redeem and transfer silas\n   * @param _toAdd address of the added authority\n   */\n\n    function addAuthorized(address _toAdd) onlyHotOwner public returns(bool) {\n        require(_toAdd != address(0));\n        require(!authorized[_toAdd]);\n        authorized[_toAdd] = true;\n        authorizedAddresses.push(_toAdd);\n        emit AuthorityAdded(_toAdd);\n        return true;\n    }\n    \n    /**\n   * @dev Function RemoveAuthorized removes addresses that can issue and redeem silas\n   * @param _toRemove address of the added authority\n   */\n\n    function removeAuthorized(address _toRemove,uint _toRemoveIndex) onlyHotOwner public returns(bool) {\n        require(_toRemove != address(0));\n        require(authorized[_toRemove]);\n        authorized[_toRemove] = false;\n        authorizedAddresses[_toRemoveIndex] = authorizedAddresses[authorizedAddresses.length-1];\n        authorizedAddresses.pop();\n        emit AuthorityRemoved(_toRemove);\n        return true;\n    }\n    \n    \n    // view all the authorized addresses\n    function viewAuthorized() external view returns(address[] memory _authorizedAddresses){\n        return authorizedAddresses;\n    }\n    \n    \n    // check if the address is authorized\n    \n    function isAuthorized(address _authorized) external view returns(bool _isauthorized){\n        return authorized[_authorized];\n    }\n    \n    \n  \n\n}\n\n\n\n\n/**\n * @title EmergencyToggle\n * @dev The EmergencyToggle contract provides a way to pause the contract in emergency\n */\n\ncontract EmergencyToggle is Ownable{\n     \n    //variable to pause the entire contract if true\n    bool public emergencyFlag; \n\n    //constructor\n    constructor () public{\n      emergencyFlag = false;                            \n      \n    }\n  \n  \n   /**\n    * @dev onlyHotOwner can can pause the usage of issue,redeem, transfer functions\n    */\n    \n    function emergencyToggle() external onlyHotOwner{\n      emergencyFlag = !emergencyFlag;\n    }\n\n    \n \n }\n \n /**\n * @title  Token is Betalist,Blacklist\n */\n contract Betalist is Authorizable,EmergencyToggle{\n     \n    //maps for betalisted and blacklisted addresses\n    mapping(address=>bool) betalisted;\n    mapping(address=>bool) blacklisted;\n\n    //events for betalist and blacklist\n    event BetalistedAddress (address indexed _betalisted);\n    event BlacklistedAddress (address indexed _blacklisted);\n    event RemovedFromBlacklist(address indexed _toRemoveBlacklist);\n    event RemovedFromBetalist(address indexed _toRemoveBetalist);\n    \n    //variable to check if betalist is required when calling several functions on smart contract\n    bool public requireBetalisted;\n\n\n    //constructor\n    constructor () public{\n        requireBetalisted=true;\n        \n    }\n    \n    \n   /**\n  * @dev betaList the specified address\n  * @param _toBetalist the address to betalist\n  */\n    function betalistAddress(address _toBetalist) public onlyAuthorized returns(bool){\n        require(!emergencyFlag);\n        require(_toBetalist != address(0));\n        require(!blacklisted[_toBetalist]);\n        require(!betalisted[_toBetalist]);\n        betalisted[_toBetalist]=true;\n        emit BetalistedAddress(_toBetalist);\n        return true;\n        \n    }\n    \n     /**\n  * @dev remove from betaList the specified address\n  * @param _toRemoveBetalist The address to be removed\n  */\n    function removeAddressFromBetalist(address _toRemoveBetalist) public onlyAuthorized returns(bool){\n        require(!emergencyFlag);\n        require(_toRemoveBetalist != address(0));\n        require(betalisted[_toRemoveBetalist]);\n        betalisted[_toRemoveBetalist]=false;\n        emit RemovedFromBetalist(_toRemoveBetalist);\n        return true;\n        \n    }\n    \n      \n    /**\n  * @dev blackList the specified address\n  * @param _toBlacklist The address to blacklist\n  */\n    function blacklistAddress(address _toBlacklist) public onlyAuthorized returns(bool){\n        require(!emergencyFlag);\n        require(_toBlacklist != address(0));\n        require(!blacklisted[_toBlacklist]);\n        blacklisted[_toBlacklist]=true;\n        emit RemovedFromBlacklist(_toBlacklist);\n        return true;\n        \n    }\n    \n     /**\n  * @dev remove from blackList the specified address\n  * @param _toRemoveBlacklist The address to blacklist\n  */\n    function removeAddressFromBlacklist(address _toRemoveBlacklist) public onlyAuthorized returns(bool){\n        require(!emergencyFlag);\n        require(_toRemoveBlacklist != address(0));\n        require(blacklisted[_toRemoveBlacklist]);\n        blacklisted[_toRemoveBlacklist]=false;\n        emit RemovedFromBlacklist(_toRemoveBlacklist);\n        return true;\n        \n    }\n \n      /**\n  * @dev check the specified address if isBetaListed\n  * @param _betalisted The address to transfer to.\n  */\n    function isBetaListed(address _betalisted) external view returns(bool){\n            return (betalisted[_betalisted]);\n    }\n    \n     \n      /**\n  * @dev check the specified address isBlackListed\n  * @param _blacklisted The address to transfer to.\n  */\n    function isBlackListed(address _blacklisted) external view returns(bool){\n        return (blacklisted[_blacklisted]);\n        \n    }\n    \n    \n}\n\n/**\n * @title  Token is token Interface\n */\n\ncontract Token{\n    \n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public  returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\n/**\n *@title StandardToken\n *@dev Implementation of the basic standard token.\n */\n\ncontract StandardToken is Token,Betalist{\n  using SafeMath for uint256;\n\n  mapping (address => uint256)  balances;\n\n  mapping (address => mapping (address => uint256)) allowed;\n  \n  uint256 public totalSupply;\n\n\n \n  \n  \n  /**\n  * @dev Gets the balance of the specified address.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n\n  function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n  }\n\n  \n  \n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  \n  function allowance(address _owner,address _spender)public view returns (uint256){\n        return allowed[_owner][_spender];\n  }\n\n \n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  \n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(!emergencyFlag);\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n    if (requireBetalisted){\n        require(betalisted[_to]);\n        require(betalisted[msg.sender]);\n    }\n    require(!blacklisted[msg.sender]);\n    require(!blacklisted[_to]);\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n\n  }\n  \n  \n    /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * @param _value The amount of tokens to be spent.\n   */\n\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    require(!emergencyFlag);\n    if (requireBetalisted){\n        require(betalisted[msg.sender]);\n        require(betalisted[_spender]);\n    }\n    require(!blacklisted[msg.sender]);\n    require(!blacklisted[_spender]);\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n\n  }\n  \n  \n    /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n\n  function transferFrom(address _from,address _to,uint256 _value)public returns (bool){\n    require(!emergencyFlag);\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n    if (requireBetalisted){\n        require(betalisted[_to]);\n        require(betalisted[_from]);\n        require(betalisted[msg.sender]);\n    }\n    require(!blacklisted[_to]);\n    require(!blacklisted[_from]);\n    require(!blacklisted[msg.sender]);\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n    \n  }\n\n}\n\ncontract AssignOperator is StandardToken{\n    \n    //mappings\n    \n    mapping(address=>mapping(address=>bool)) isOperator;\n    \n    \n    //Events\n    event AssignedOperator (address indexed _operator,address indexed _for);\n    event OperatorTransfer (address indexed _developer,address indexed _from,address indexed _to,uint _amount);\n    event RemovedOperator  (address indexed _operator,address indexed _for);\n    \n    \n    /**\n   * @dev AssignedOperator to transfer tokens on users behalf\n   * @param _developer address The address which is allowed to transfer tokens on users behalf\n   * @param _user address The address which developer want to transfer from\n   */\n    \n    function assignOperator(address _developer,address _user) public onlyAuthorized returns(bool){\n        require(!emergencyFlag);\n        require(_developer != address(0));\n        require(_user != address(0));\n        require(!isOperator[_developer][_user]);\n        if(requireBetalisted){\n            require(betalisted[_user]);\n            require(betalisted[_developer]);\n        }\n        require(!blacklisted[_developer]);\n        require(!blacklisted[_user]);\n        isOperator[_developer][_user]=true;\n        emit AssignedOperator(_developer,_user);\n        return true;\n    }\n    \n    /**\n   * @dev RemoveOperator allowed to transfer tokens on users behalf\n   * @param _developer address The address which is allowed to trasnfer tokens on users behalf\n   * @param _user address The address which developer want to transfer from\n   */\n    function removeOperator(address _developer,address _user) public onlyAuthorized returns(bool){\n        require(!emergencyFlag);\n        require(_developer != address(0));\n        require(_user != address(0));\n        require(isOperator[_developer][_user]);\n        isOperator[_developer][_user]=false;\n        emit RemovedOperator(_developer,_user);\n        return true;\n        \n    }\n    \n    /**\n   * @dev Operatransfer for developer to transfer tokens on users behalf without requiring ethers in managed  ethereum accounts\n   * @param _from address the address to transfer tokens from\n   * @param _to address The address which developer want to transfer to\n   * @param _amount the amount of tokens user wants to transfer\n   */\n    \n    function operatorTransfer(address _from,address _to,uint _amount) public returns (bool){\n        require(!emergencyFlag);\n        require(isOperator[msg.sender][_from]);\n        require(_amount <= balances[_from]);\n        require(_from != address(0));\n        require(_to != address(0));\n        if (requireBetalisted){\n            require(betalisted[_to]);\n            require(betalisted[_from]);\n            require(betalisted[msg.sender]);\n        }\n        require(!blacklisted[_to]);\n        require(!blacklisted[_from]);\n        require(!blacklisted[msg.sender]);\n        balances[_from] = balances[_from].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit OperatorTransfer(msg.sender,_from, _to, _amount);\n        emit Transfer(_from,_to,_amount);\n        return true;\n        \n        \n    }\n    \n     /**\n   * @dev checkIsOperator is developer an operator allowed to transfer tokens on users behalf\n   * @param _developer the address allowed to trasnfer tokens \n   * @param _for address The address which developer want to transfer from\n   */\n    \n    function checkIsOperator(address _developer,address _for) external view returns (bool){\n            return (isOperator[_developer][_for]);\n    }\n\n    \n}\n\n\n\n /**\n *@title SilaToken\n *@dev Implementation for sila issue,redeem,protectedTransfer and batch functions\n */\n\ncontract SilaToken is AssignOperator{\n    using SafeMath for uint256;\n    \n    // parameters for silatoken\n    string  public constant name = \"SilaToken\";\n    string  public constant symbol = \"SILA\";\n    uint256 public constant decimals = 18;\n    string  public version = \"1.0\";\n    \n     \n    //Events fired during successfull execution of main silatoken functions\n    event Issued(address indexed _to,uint256 _value);\n    event Redeemed(address indexed _from,uint256 _amount);\n    event ProtectedTransfer(address indexed _from,address indexed _to,uint256 _amount);\n    event ProtectedApproval(address indexed _owner,address indexed _spender,uint256 _amount);\n    event GlobalLaunchSila(address indexed _launcher);\n    \n    \n\n    /**\n   * @dev issue tokens from sila  to _to address\n   * @dev onlyAuthorized  addresses can call this function\n   * @param _to address The address which you want to transfer to\n   * @param _amount uint256 the amount of tokens to be issued\n   */\n\n    function issue(address _to, uint256 _amount) public onlyAuthorized returns (bool) {\n        require(!emergencyFlag);\n        require(_to !=address(0));\n        if (requireBetalisted){\n            require(betalisted[_to]);\n        }\n        require(!blacklisted[_to]);\n        totalSupply = totalSupply.add(_amount);\n        balances[_to] = balances[_to].add(_amount);                 \n        emit Issued(_to, _amount);                     \n        return true;\n    }\n    \n    \n      \n   /**\n   * @dev redeem tokens from _from address\n   * @dev onlyAuthorized  addresses can call this function\n   * @param _from address is the address from which tokens are burnt\n   * @param _amount uint256 the amount of tokens to be burnt\n   */\n\n    function redeem(address _from,uint256 _amount) public onlyAuthorized returns(bool){\n        require(!emergencyFlag);\n        require(_from != address(0));\n        require(_amount <= balances[_from]);\n        if(requireBetalisted){\n            require(betalisted[_from]);\n        }\n        require(!blacklisted[_from]);\n        balances[_from] = balances[_from].sub(_amount);   \n        totalSupply = totalSupply.sub(_amount);\n        emit Redeemed(_from,_amount);\n        return true;\n            \n\n    }\n    \n    \n    /**\n   * @dev Transfer tokens from one address to another\n   * @dev onlyAuthorized  addresses can call this function\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _amount uint256 the amount of tokens to be transferred\n   */\n\n    function protectedTransfer(address _from,address _to,uint256 _amount) public onlyAuthorized returns(bool){\n        require(!emergencyFlag);\n        require(_amount <= balances[_from]);\n        require(_from != address(0));\n        require(_to != address(0));\n        if (requireBetalisted){\n            require(betalisted[_to]);\n            require(betalisted[_from]);\n        }\n        require(!blacklisted[_to]);\n        require(!blacklisted[_from]);\n        balances[_from] = balances[_from].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit ProtectedTransfer(_from, _to, _amount);\n        emit Transfer(_from,_to,_amount);\n        return true;\n        \n    }\n    \n    \n    /**\n    * @dev Launch sila for global transfers to work as standard\n    */\n    \n    function globalLaunchSila() public onlyHotOwner{\n            require(!emergencyFlag);\n            require(requireBetalisted);\n            requireBetalisted=false;\n            emit GlobalLaunchSila(msg.sender);\n    }\n    \n    \n    \n     /**\n   * @dev batchissue , isuue tokens in batches to multiple addresses at a time\n   * @param _amounts The amount of tokens to be issued.\n   * @param _toAddresses tokens to be issued to these addresses respectively\n    */\n    \n    function batchIssue(address[] memory _toAddresses,uint256[]  memory _amounts) public onlyAuthorized returns(bool) {\n            require(!emergencyFlag);\n            require(_toAddresses.length==_amounts.length);\n            for(uint i = 0; i < _toAddresses.length; i++) {\n                bool check=issue(_toAddresses[i],_amounts[i]);\n                require(check);\n            }\n            return true;\n            \n    }\n    \n    \n    /**\n    * @dev batchredeem , redeem tokens in batches from multiple addresses at a time\n    * @param _amounts The amount of tokens to be redeemed.\n    * @param _fromAddresses tokens to be redeemed to from addresses respectively\n     */\n    \n    function batchRedeem(address[] memory  _fromAddresses,uint256[]  memory _amounts) public onlyAuthorized returns(bool){\n            require(!emergencyFlag);\n            require(_fromAddresses.length==_amounts.length);\n            for(uint i = 0; i < _fromAddresses.length; i++) {\n                bool check=redeem(_fromAddresses[i],_amounts[i]);\n                require(check);\n            }  \n            return true;\n        \n    }\n    \n    \n      /**\n    * @dev batchTransfer, transfer tokens in batches between multiple addresses at a time\n    * @param _fromAddresses tokens to be transfered to these addresses respectively\n    * @param _toAddresses tokens to be transfered to these addresses respectively\n    * @param _amounts The amount of tokens to be transfered\n     */\n    function protectedBatchTransfer(address[] memory _fromAddresses,address[]  memory _toAddresses,uint256[] memory  _amounts) public onlyAuthorized returns(bool){\n            require(!emergencyFlag);\n            require(_fromAddresses.length==_amounts.length);\n            require(_toAddresses.length==_amounts.length);\n            require(_fromAddresses.length==_toAddresses.length);\n            for(uint i = 0; i < _fromAddresses.length; i++) {\n                bool check=protectedTransfer(_fromAddresses[i],_toAddresses[i],_amounts[i]);\n                require(check);\n               \n            }\n            return true;\n        \n    } \n    \n    \n    \n\n    \n    \n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"emergencyToggle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"operatorTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewAuthorized\",\"outputs\":[{\"name\":\"_authorizedAddresses\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toRemoveBlacklist\",\"type\":\"address\"}],\"name\":\"removeAddressFromBlacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"globalLaunchSila\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_developer\",\"type\":\"address\"},{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coldOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toRemoveBetalist\",\"type\":\"address\"}],\"name\":\"removeAddressFromBetalist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fromAddresses\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchRedeem\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newHotOwner\",\"type\":\"address\"},{\"name\":\"_newColdOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toBetalist\",\"type\":\"address\"}],\"name\":\"betalistAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddresses\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchIssue\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hotOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"authorizedAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_developer\",\"type\":\"address\"},{\"name\":\"_for\",\"type\":\"address\"}],\"name\":\"checkIsOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toRemove\",\"type\":\"address\"},{\"name\":\"_toRemoveIndex\",\"type\":\"uint256\"}],\"name\":\"removeAuthorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"emergencyFlag\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requireBetalisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fromAddresses\",\"type\":\"address[]\"},{\"name\":\"_toAddresses\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"protectedBatchTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAdd\",\"type\":\"address\"}],\"name\":\"addAuthorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_betalisted\",\"type\":\"address\"}],\"name\":\"isBetaListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_blacklisted\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"protectedTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toBlacklist\",\"type\":\"address\"}],\"name\":\"blacklistAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_developer\",\"type\":\"address\"},{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"assignOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_authorized\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"name\":\"_isauthorized\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Issued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ProtectedTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ProtectedApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_launcher\",\"type\":\"address\"}],\"name\":\"GlobalLaunchSila\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_for\",\"type\":\"address\"}],\"name\":\"AssignedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_developer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"OperatorTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_for\",\"type\":\"address\"}],\"name\":\"RemovedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_betalisted\",\"type\":\"address\"}],\"name\":\"BetalistedAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_blacklisted\",\"type\":\"address\"}],\"name\":\"BlacklistedAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_toRemoveBlacklist\",\"type\":\"address\"}],\"name\":\"RemovedFromBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_toRemoveBetalist\",\"type\":\"address\"}],\"name\":\"RemovedFromBetalist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_toAdd\",\"type\":\"address\"}],\"name\":\"AuthorityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_toRemove\",\"type\":\"address\"}],\"name\":\"AuthorityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_newHotOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newColdOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_oldColdOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "608060405273cd39203a332ff477a35da3ad2ad7761cdbeab7f06000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550731ba688e70bb4f3cb266b8d721b5597bfbccff957600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040518060400160405280600381526020017f312e300000000000000000000000000000000000000000000000000000000000815250600c9080519060200190620000fa92919062000137565b506000600460006101000a81548160ff0219169083151502179055506001600760006101000a81548160ff021916908315150217905550620001e6565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200017a57805160ff1916838001178555620001ab565b82800160010185558215620001ab579182015b82811115620001aa5782518255916020019190600101906200018d565b5b509050620001ba9190620001be565b5090565b620001e391905b80821115620001df576000816000905550600101620001c5565b5090565b90565b61503580620001f66000396000f3fe608060405234801561001057600080fd5b50600436106102315760003560e01c806378ac81c611610130578063c35991fc116100b8578063e47d60601161007c578063e47d60601461118e578063ef69f408146111ea578063f3290d7514611270578063f7e4aac6146112cc578063fe9fbb801461134857610231565b8063c35991fc14610e44578063cc3fb08214610e66578063cf1c316a1461105e578063dd58d112146110ba578063dd62ed3e1461111657610231565b806395d89b41116100ff57806395d89b4114610c57578063962ce9a214610cda578063a1e622f214610d56578063a9059cbb14610dbc578063b4007cda14610e2257610231565b806378ac81c6146109d5578063867904b414610b3957806389e29e9e14610b9f5780639587463114610be957610231565b806335e82f3a116101be57806354fd4d501161018257806354fd4d50146106be5780636200c9ff146107415780636d435421146108a557806370a082311461092157806375e7f7ca1461097957610231565b806335e82f3a1461053657806338ca5f231461059257806340b61fe91461059c578063537e38a7146106185780635397b7681461066257610231565b806318160ddd1161020557806318160ddd146103af5780631d75a4b9146103cd5780631e9a69501461042c57806323b872dd14610492578063313ce5671461051857610231565b8062a535981461023657806306fdde0314610240578063095ea7b3146102c35780630d1af10314610329575b600080fd5b61023e6113a4565b005b610248611429565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561028857808201518184015260208101905061026d565b50505050905090810190601f1680156102b55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61030f600480360360408110156102d957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611462565b604051808215151515815260200191505060405180910390f35b6103956004803603606081101561033f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506116de565b604051808215151515815260200191505060405180910390f35b6103b7611c80565b6040518082815260200191505060405180910390f35b6103d5611c86565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156104185780820151818401526020810190506103fd565b505050509050019250505060405180910390f35b6104786004803603604081101561044257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611d14565b604051808215151515815260200191505060405180910390f35b6104fe600480360360608110156104a857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061202e565b604051808215151515815260200191505060405180910390f35b61052061261f565b6040518082815260200191505060405180910390f35b6105786004803603602081101561054c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612624565b604051808215151515815260200191505060405180910390f35b61059a612821565b005b6105fe600480360360408110156105b257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061290d565b604051808215151515815260200191505060405180910390f35b610620612bd6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6106a46004803603602081101561067857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612bfc565b604051808215151515815260200191505060405180910390f35b6106c6612df9565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107065780820151818401526020810190506106eb565b50505050905090810190601f1680156107335780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61088b6004803603604081101561075757600080fd5b810190808035906020019064010000000081111561077457600080fd5b82018360208201111561078657600080fd5b803590602001918460208302840111640100000000831117156107a857600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561080857600080fd5b82018360208201111561081a57600080fd5b8035906020019184602083028401116401000000008311171561083c57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050612e97565b604051808215151515815260200191505060405180910390f35b610907600480360360408110156108bb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612fd4565b604051808215151515815260200191505060405180910390f35b6109636004803603602081101561093757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506131a0565b6040518082815260200191505060405180910390f35b6109bb6004803603602081101561098f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506131e9565b604051808215151515815260200191505060405180910390f35b610b1f600480360360408110156109eb57600080fd5b8101908080359060200190640100000000811115610a0857600080fd5b820183602082011115610a1a57600080fd5b80359060200191846020830284011164010000000083111715610a3c57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610a9c57600080fd5b820183602082011115610aae57600080fd5b80359060200191846020830284011164010000000083111715610ad057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929050505061343e565b604051808215151515815260200191505060405180910390f35b610b8560048036036040811015610b4f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061357b565b604051808215151515815260200191505060405180910390f35b610ba7613849565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610c1560048036036020811015610bff57600080fd5b810190808035906020019092919050505061386e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610c5f6138aa565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610c9f578082015181840152602081019050610c84565b50505050905090810190601f168015610ccc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610d3c60048036036040811015610cf057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506138e3565b604051808215151515815260200191505060405180910390f35b610da260048036036040811015610d6c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613977565b604051808215151515815260200191505060405180910390f35b610e0860048036036040811015610dd257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613bdc565b604051808215151515815260200191505060405180910390f35b610e2a613f87565b604051808215151515815260200191505060405180910390f35b610e4c613f9a565b604051808215151515815260200191505060405180910390f35b61104460048036036060811015610e7c57600080fd5b8101908080359060200190640100000000811115610e9957600080fd5b820183602082011115610eab57600080fd5b80359060200191846020830284011164010000000083111715610ecd57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610f2d57600080fd5b820183602082011115610f3f57600080fd5b80359060200191846020830284011164010000000083111715610f6157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610fc157600080fd5b820183602082011115610fd357600080fd5b80359060200191846020830284011164010000000083111715610ff557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050613fad565b604051808215151515815260200191505060405180910390f35b6110a06004803603602081101561107457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061411b565b604051808215151515815260200191505060405180910390f35b6110fc600480360360208110156110d057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614311565b604051808215151515815260200191505060405180910390f35b6111786004803603604081101561112c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614367565b6040518082815260200191505060405180910390f35b6111d0600480360360208110156111a457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506143ee565b604051808215151515815260200191505060405180910390f35b6112566004803603606081101561120057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050614444565b604051808215151515815260200191505060405180910390f35b6112b26004803603602081101561128657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061493c565b604051808215151515815260200191505060405180910390f35b61132e600480360360408110156112e257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614b3a565b604051808215151515815260200191505060405180910390f35b61138a6004803603602081101561135e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614f74565b604051808215151515815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146113fd57600080fd5b600460009054906101000a900460ff1615600460006101000a81548160ff021916908315150217905550565b6040518060400160405280600981526020017f53696c61546f6b656e000000000000000000000000000000000000000000000081525081565b6000600460009054906101000a900460ff161561147e57600080fd5b600760009054906101000a900460ff161561154057600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166114e957600080fd5b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661153f57600080fd5b5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561159757600080fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156115ee57600080fd5b81600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600460009054906101000a900460ff16156116fa57600080fd5b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661178d57600080fd5b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211156117d957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561181357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561184d57600080fd5b600760009054906101000a900460ff161561196557600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166118b857600080fd5b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661190e57600080fd5b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661196457600080fd5b5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156119bc57600080fd5b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611a1357600080fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611a6a57600080fd5b611abc82600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614fca90919063ffffffff16565b600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611b5182600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614fea90919063ffffffff16565b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fc665067cfdc36e0ad60e219fd416a8108016bdb4e5d39e521a4d39cbc8870f59856040518082815260200191505060405180910390a48273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600a5481565b60606003805480602002602001604051908101604052809291908181526020018280548015611d0a57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611cc0575b5050505050905090565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680611dba57503373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b611dc357600080fd5b600460009054906101000a900460ff1615611ddd57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611e1757600080fd5b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115611e6357600080fd5b600760009054906101000a900460ff1615611ecf57600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611ece57600080fd5b5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611f2657600080fd5b611f7882600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614fca90919063ffffffff16565b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611fd082600a54614fca90919063ffffffff16565b600a819055508273ffffffffffffffffffffffffffffffffffffffff167f4896181ff8f4543cc00db9fe9b6fb7e6f032b7eb772c72ab1ec1b4d2e03b9369836040518082815260200191505060405180910390a26001905092915050565b6000600460009054906101000a900460ff161561204a57600080fd5b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111561209657600080fd5b600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111561211f57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561215957600080fd5b600760009054906101000a900460ff161561227157600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166121c457600080fd5b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661221a57600080fd5b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661227057600080fd5b5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156122c857600080fd5b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561231f57600080fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561237657600080fd5b6123c882600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614fca90919063ffffffff16565b600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061245d82600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614fea90919063ffffffff16565b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061252f82600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614fca90919063ffffffff16565b600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b601281565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16806126ca57503373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b6126d357600080fd5b600460009054906101000a900460ff16156126ed57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561272757600080fd5b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661277d57600080fd5b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f2b6bf71b58b3583add364b3d9060ebf8019650f65f5be35f5464b9cb3e4ba2d460405160405180910390a260019050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461287a57600080fd5b600460009054906101000a900460ff161561289457600080fd5b600760009054906101000a900460ff166128ad57600080fd5b6000600760006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167fe89f9b1fafe83b1ee42f1d2ef313f8831e6c67517084b9dbc3d3da4b566cf3ae60405160405180910390a2565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16806129b357503373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b6129bc57600080fd5b600460009054906101000a900460ff16156129d657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612a1057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612a4a57600080fd5b600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612add57600080fd5b6000600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167ff7262ed0443cc211121ceb1a80d69004f319245615a7488f951f1437fd91642c60405160405180910390a36001905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680612ca257503373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b612cab57600080fd5b600460009054906101000a900460ff1615612cc557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612cff57600080fd5b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612d5557600080fd5b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f87d87948c47d3b2e6714e894353d546319d76e491df98f310c214d2d5dff95af60405160405180910390a260019050919050565b600c8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612e8f5780601f10612e6457610100808354040283529160200191612e8f565b820191906000526020600020905b815481529060010190602001808311612e7257829003601f168201915b505050505081565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680612f3d57503373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b612f4657600080fd5b600460009054906101000a900460ff1615612f6057600080fd5b8151835114612f6e57600080fd5b60008090505b8351811015612fc9576000612faf858381518110612f8e57fe5b6020026020010151858481518110612fa257fe5b6020026020010151611d14565b905080612fbb57600080fd5b508080600101915050612f74565b506001905092915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461303057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561306a57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156130a457600080fd5b826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc8894f26f396ce8c004245c8b7cd1b92103a6e4302fcbab883987149ac01b7ec60405160405180910390a46001905092915050565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff168061328f57503373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b61329857600080fd5b600460009054906101000a900460ff16156132b257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156132ec57600080fd5b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561334357600080fd5b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561339a57600080fd5b6001600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f420784f2aae2a86d7d84a958a319ba7054c9ad2c5ac835fa9fa9156ff2218e5d60405160405180910390a260019050919050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16806134e457503373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b6134ed57600080fd5b600460009054906101000a900460ff161561350757600080fd5b815183511461351557600080fd5b60008090505b835181101561357057600061355685838151811061353557fe5b602002602001015185848151811061354957fe5b602002602001015161357b565b90508061356257600080fd5b50808060010191505061351b565b506001905092915050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff168061362157503373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b61362a57600080fd5b600460009054906101000a900460ff161561364457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561367e57600080fd5b600760009054906101000a900460ff16156136ea57600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166136e957600080fd5b5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561374157600080fd5b61375682600a54614fea90919063ffffffff16565b600a819055506137ae82600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614fea90919063ffffffff16565b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167fa59f12e354e8cd10bb74c559844c2dd69a5458e31fe56c7594c62ca57480509a836040518082815260200191505060405180910390a26001905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6003818154811061387b57fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040518060400160405280600481526020017f53494c410000000000000000000000000000000000000000000000000000000081525081565b6000600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146139d257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415613a0c57600080fd5b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16613a6257600080fd5b6000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600360016003805490500381548110613acf57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660038381548110613b0757fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506003805480613b5a57fe5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590558273ffffffffffffffffffffffffffffffffffffffff167f272215cde179041f7a3e8da6f8aabc7c8fc1336ccd73aba698cb825a80d3be4860405160405180910390a26001905092915050565b6000600460009054906101000a900460ff1615613bf857600080fd5b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115613c4457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415613c7e57600080fd5b600760009054906101000a900460ff1615613d4057600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16613ce957600080fd5b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16613d3f57600080fd5b5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615613d9757600080fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615613dee57600080fd5b613e4082600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614fca90919063ffffffff16565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613ed582600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614fea90919063ffffffff16565b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600460009054906101000a900460ff1681565b600760009054906101000a900460ff1681565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff168061405357503373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b61405c57600080fd5b600460009054906101000a900460ff161561407657600080fd5b815184511461408457600080fd5b815183511461409257600080fd5b82518451146140a057600080fd5b60008090505b845181101561410f5760006140f58683815181106140c057fe5b60200260200101518684815181106140d457fe5b60200260200101518685815181106140e857fe5b6020026020010151614444565b90508061410157600080fd5b5080806001019150506140a6565b50600190509392505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461417657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156141b057600080fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561420757600080fd5b6001600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060038290806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508173ffffffffffffffffffffffffffffffffffffffff167f550a8ae64ec9d6640b6f168a26d3e6364b90defe8110c92135aa775b279e54ea60405160405180910390a260019050919050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16806144ea57503373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b6144f357600080fd5b600460009054906101000a900460ff161561450d57600080fd5b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111561455957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561459357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156145cd57600080fd5b600760009054906101000a900460ff161561468f57600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661463857600080fd5b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661468e57600080fd5b5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156146e657600080fd5b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561473d57600080fd5b61478f82600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614fca90919063ffffffff16565b600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061482482600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614fea90919063ffffffff16565b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5440a6fc561476da36165b911b398403adf97c31a08bd07d0d70b3e689f0bb846040518082815260200191505060405180910390a38273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16806149e257503373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b6149eb57600080fd5b600460009054906101000a900460ff1615614a0557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415614a3f57600080fd5b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615614a9657600080fd5b6001600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f2b6bf71b58b3583add364b3d9060ebf8019650f65f5be35f5464b9cb3e4ba2d460405160405180910390a260019050919050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680614be057503373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b614be957600080fd5b600460009054906101000a900460ff1615614c0357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415614c3d57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415614c7757600080fd5b600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615614d0b57600080fd5b600760009054906101000a900460ff1615614dcd57600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16614d7657600080fd5b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16614dcc57600080fd5b5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615614e2457600080fd5b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615614e7b57600080fd5b6001600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f2f7814d7377473006ce05a13cd13cfde820bbd43af03d65355784ff18ccf9db260405160405180910390a36001905092915050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b600082821115614fd957600080fd5b600082840390508091505092915050565b600080828401905083811015614fff57600080fd5b809150509291505056fea165627a7a72305820e0572e24d8b927324e4b7a7b5068bb3c391971b0d4c91cda7b67de263c67e91d0029"
}