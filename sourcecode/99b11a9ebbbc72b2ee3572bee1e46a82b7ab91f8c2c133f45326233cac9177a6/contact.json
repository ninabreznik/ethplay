{
  "address": "0x67826c9f09050344f2157a803d0402f16f57289a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ERC20",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-15\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an account access to this role\n   */\n  function add(Role storage role, address account) internal {\n    require(account != address(0));\n    require(!has(role, account));\n\n    role.bearer[account] = true;\n  }\n\n  /**\n   * @dev remove an account's access to this role\n   */\n  function remove(Role storage role, address account) internal {\n    require(account != address(0));\n    require(has(role, account));\n\n    role.bearer[account] = false;\n  }\n\n  /**\n   * @dev check if an account has this role\n   * @return bool\n   */\n  function has(Role storage role, address account)\n    internal\n    view\n    returns (bool)\n  {\n    require(account != address(0));\n    return role.bearer[account];\n  }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\n interface IERC20 {\n   function totalSupply() external view returns (uint256);\n\n   function balanceOf(address who) external view returns (uint256);\n\n   function allowance(address owner, address spender)\n     external view returns (uint256);\n\n   function transfer(address to, uint256 value) external returns (bool);\n\n   function approve(address spender, uint256 value)\n     external returns (bool);\n\n   function transferFrom(address from, address to, uint256 value)\n     external returns (bool);\n\n   event Transfer(\n     address indexed from,\n     address indexed to,\n     uint256 value\n   );\n\n   event Approval(\n     address indexed owner,\n     address indexed spender,\n     uint256 value\n   );\n }\n\ncontract ERC20 is IERC20 {\n  using SafeMath for uint256;\n  using Roles for Roles.Role;\n\n  event PauserAdded(address indexed account);\n  event PauserRemoved(address indexed account);\n  event Paused(address account);\n  event Unpaused(address account);\n\n  Roles.Role private pausers;\n\n  mapping (address => uint256) private _balances;\n\n  mapping (address => mapping (address => uint256)) private _allowed;\n\n  uint256 private _totalSupply;\n  string private _name;\n  string private _symbol;\n  uint8 private _decimals;\n  bool private _paused;\n\n  modifier onlyPauser() {\n    require(isPauser(msg.sender));\n    _;\n  }\n\n  constructor(string name, string symbol, uint8 decimals, uint256 totalSupply) public {\n    _name = name;\n    _symbol = symbol;\n    _decimals = decimals;\n    _totalSupply = totalSupply;\n    _balances[msg.sender] = _balances[msg.sender].add(_totalSupply);\n    _addPauser(msg.sender);\n    _paused = false;\n    emit Transfer(address(0), msg.sender, totalSupply);\n  }\n\n\n  /**\n   * @return true if the contract is paused, false otherwise.\n   */\n  function paused() public view returns(bool) {\n    return _paused;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!_paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(_paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyPauser whenNotPaused {\n    _paused = true;\n    emit Paused(msg.sender);\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyPauser whenPaused {\n    _paused = false;\n    emit Unpaused(msg.sender);\n  }\n\n  function isPauser(address account) public view returns (bool) {\n    return pausers.has(account);\n  }\n\n  function addPauser(address account) public onlyPauser {\n    _addPauser(account);\n  }\n\n  function renouncePauser() public {\n    _removePauser(msg.sender);\n  }\n\n  function _addPauser(address account) internal {\n    pausers.add(account);\n    emit PauserAdded(account);\n  }\n\n  function _removePauser(address account) internal {\n    pausers.remove(account);\n    emit PauserRemoved(account);\n  }\n\n  /**\n   * @return the name of the token.\n   */\n  function name() public view returns(string) {\n    return _name;\n  }\n\n  /**\n   * @return the symbol of the token.\n   */\n  function symbol() public view returns(string) {\n    return _symbol;\n  }\n\n  /**\n   * @return the number of decimals of the token.\n   */\n  function decimals() public view returns(uint8) {\n    return _decimals;\n  }\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param owner The address to query the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    require(value <= _allowed[from][msg.sender]);\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    _transfer(from, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n  * @dev Transfer token for a specified addresses\n  * @param from The address to transfer from.\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function _transfer(address from, address to, uint256 value) internal {\n    require(value <= _balances[from]);\n    require(to != address(0));\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n}",
  "bytecode": "60806040523480156200001157600080fd5b5060405162000e2c38038062000e2c83398101604090815281516020808401519284015160608501519285018051909594909401939092916200005a9160049187019062000222565b5082516200007090600590602086019062000222565b506006805460ff191660ff8416179055600381905533600090815260016020526040902054620000af9082640100000000620001238102620009af1704565b33600081815260016020526040902091909155620000d6906401000000006200013d810204565b6006805461ff001916905560408051828152905133916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350505050620002c7565b6000828201838110156200013657600080fd5b9392505050565b6200015860008264010000000062000adb6200018f82021704565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b600160a060020a0381161515620001a557600080fd5b620001ba8282640100000000620001ea810204565b15620001c557600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6000600160a060020a03821615156200020257600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200026557805160ff191683800117855562000295565b8280016001018555821562000295579182015b828111156200029557825182559160200191906001019062000278565b50620002a3929150620002a7565b5090565b620002c491905b80821115620002a35760008155600101620002ae565b90565b610b5580620002d76000396000f3006080604052600436106100f05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100f5578063095ea7b31461017f57806318160ddd146101b757806323b872dd146101de578063313ce5671461020857806339509351146102335780633f4ba83a1461025757806346fbf68e1461026e5780635c975abb1461028f5780636ef8d66d146102a457806370a08231146102b957806382dc1ec4146102da5780638456cb59146102fb57806395d89b4114610310578063a457c2d714610325578063a9059cbb14610349578063dd62ed3e1461036d575b600080fd5b34801561010157600080fd5b5061010a610394565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561014457818101518382015260200161012c565b50505050905090810190601f1680156101715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018b57600080fd5b506101a3600160a060020a036004351660243561042a565b604080519115158252519081900360200190f35b3480156101c357600080fd5b506101cc6104be565b60408051918252519081900360200190f35b3480156101ea57600080fd5b506101a3600160a060020a03600435811690602435166044356104c4565b34801561021457600080fd5b5061021d610579565b6040805160ff9092168252519081900360200190f35b34801561023f57600080fd5b506101a3600160a060020a0360043516602435610582565b34801561026357600080fd5b5061026c610648565b005b34801561027a57600080fd5b506101a3600160a060020a03600435166106b2565b34801561029b57600080fd5b506101a36106ca565b3480156102b057600080fd5b5061026c6106d8565b3480156102c557600080fd5b506101cc600160a060020a03600435166106e3565b3480156102e657600080fd5b5061026c600160a060020a03600435166106fe565b34801561030757600080fd5b5061026c61071e565b34801561031c57600080fd5b5061010a61078b565b34801561033157600080fd5b506101a3600160a060020a03600435166024356107ec565b34801561035557600080fd5b506101a3600160a060020a036004351660243561084d565b34801561037957600080fd5b506101cc600160a060020a0360043581169060243516610879565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104205780601f106103f557610100808354040283529160200191610420565b820191906000526020600020905b81548152906001019060200180831161040357829003601f168201915b5050505050905090565b600654600090610100900460ff161561044257600080fd5b600160a060020a038316151561045757600080fd5b336000818152600260209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60035490565b600654600090610100900460ff16156104dc57600080fd5b600160a060020a038416600090815260026020908152604080832033845290915290205482111561050c57600080fd5b600160a060020a0384166000908152600260209081526040808320338452909152902054610540908363ffffffff6108a416565b600160a060020a038516600090815260026020908152604080832033845290915290205561056f8484846108bb565b5060019392505050565b60065460ff1690565b600654600090610100900460ff161561059a57600080fd5b600160a060020a03831615156105af57600080fd5b336000908152600260209081526040808320600160a060020a03871684529091529020546105e3908363ffffffff6109af16565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b610651336106b2565b151561065c57600080fd5b600654610100900460ff16151561067257600080fd5b6006805461ff00191690556040805133815290517f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9181900360200190a1565b60006106c4818363ffffffff6109c816565b92915050565b600654610100900460ff1690565b6106e1336109ff565b565b600160a060020a031660009081526001602052604090205490565b610707336106b2565b151561071257600080fd5b61071b81610a47565b50565b610727336106b2565b151561073257600080fd5b600654610100900460ff161561074757600080fd5b6006805461ff0019166101001790556040805133815290517f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589181900360200190a1565b60058054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104205780601f106103f557610100808354040283529160200191610420565b600654600090610100900460ff161561080457600080fd5b600160a060020a038316151561081957600080fd5b336000908152600260209081526040808320600160a060020a03871684529091529020546105e3908363ffffffff6108a416565b600654600090610100900460ff161561086557600080fd5b6108703384846108bb565b50600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600080838311156108b457600080fd5b5050900390565b600160a060020a0383166000908152600160205260409020548111156108e057600080fd5b600160a060020a03821615156108f557600080fd5b600160a060020a03831660009081526001602052604090205461091e908263ffffffff6108a416565b600160a060020a038085166000908152600160205260408082209390935590841681522054610953908263ffffffff6109af16565b600160a060020a0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000828201838110156109c157600080fd5b9392505050565b6000600160a060020a03821615156109df57600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b610a1060008263ffffffff610a8f16565b604051600160a060020a038216907fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90600090a250565b610a5860008263ffffffff610adb16565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b600160a060020a0381161515610aa457600080fd5b610aae82826109c8565b1515610ab957600080fd5b600160a060020a0316600090815260209190915260409020805460ff19169055565b600160a060020a0381161515610af057600080fd5b610afa82826109c8565b15610b0457600080fd5b600160a060020a0316600090815260209190915260409020805460ff191660011790555600a165627a7a723058204fd43751b6ffa7cddac70edc64c1e68248bdbe7fac0078e251cdedb7770cd31e0029000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000c9f2c9cd04674edea4000000000000000000000000000000000000000000000000000000000000000000000155061746170696f73205472616e616b6173204c4c43000000000000000000000000000000000000000000000000000000000000000000000000000000000000035048540000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000c9f2c9cd04674edea4000000000000000000000000000000000000000000000000000000000000000000000155061746170696f73205472616e616b6173204c4c43000000000000000000000000000000000000000000000000000000000000000000000000000000000000035048540000000000000000000000000000000000000000000000000000000000"
}