{
  "address": "0x9097027f3f23af560cf2a0399fbceed4607b3904",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenDotFactory",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-17\n*/\n\npragma solidity ^0.4.24;\n\n// File: contracts/lib/ownership/Ownable.sol\n\ncontract Ownable {\n    address public owner;\n    event OwnershipTransferred(address indexed previousOwner,address indexed newOwner);\n\n    /// @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\n    constructor() public { owner = msg.sender; }\n\n    /// @dev Throws if called by any contract other than latest designated caller\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /// @dev Allows the current owner to transfer control of the contract to a newOwner.\n    /// @param newOwner The address to transfer ownership to.\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\n// File: contracts/lib/token/FactoryTokenInterface.sol\n\ncontract FactoryTokenInterface is Ownable {\n    function balanceOf(address _owner) public view returns (uint256);\n    function transfer(address _to, uint256 _value) public returns (bool);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n    function approve(address _spender, uint256 _value) public returns (bool);\n    function allowance(address _owner, address _spender) public view returns (uint256);\n    function mint(address _to, uint256 _amount) public returns (bool);\n    function burnFrom(address _from, uint256 _value) public;\n}\n\n// File: contracts/lib/token/TokenFactoryInterface.sol\n\ncontract TokenFactoryInterface {\n    function create(string _name, string _symbol) public returns (FactoryTokenInterface);\n}\n\n// File: contracts/lib/ownership/ZapCoordinatorInterface.sol\n\ncontract ZapCoordinatorInterface is Ownable {\n    function addImmutableContract(string contractName, address newAddress) external;\n    function updateContract(string contractName, address newAddress) external;\n    function getContractName(uint index) public view returns (string);\n    function getContract(string contractName) public view returns (address);\n    function updateAllDependencies() external;\n}\n\n// File: contracts/platform/bondage/BondageInterface.sol\n\ncontract BondageInterface {\n    function bond(address, bytes32, uint256) external returns(uint256);\n    function unbond(address, bytes32, uint256) external returns (uint256);\n    function delegateBond(address, address, bytes32, uint256) external returns(uint256);\n    function escrowDots(address, address, bytes32, uint256) external returns (bool);\n    function releaseDots(address, address, bytes32, uint256) external returns (bool);\n    function returnDots(address, address, bytes32, uint256) external returns (bool success);\n    function calcZapForDots(address, bytes32, uint256) external view returns (uint256);\n    function currentCostOfDot(address, bytes32, uint256) public view returns (uint256);\n    function getDotsIssued(address, bytes32) public view returns (uint256);\n    function getBoundDots(address, address, bytes32) public view returns (uint256);\n    function getZapBound(address, bytes32) public view returns (uint256);\n    function dotLimit( address, bytes32) public view returns (uint256);\n}\n\n// File: contracts/platform/bondage/currentCost/CurrentCostInterface.sol\n\ncontract CurrentCostInterface {\n    function _currentCostOfDot(address, bytes32, uint256) public view returns (uint256);\n    function _dotLimit(address, bytes32) public view returns (uint256);\n    function _costOfNDots(address, bytes32, uint256, uint256) public view returns (uint256);\n}\n\n// File: contracts/platform/registry/RegistryInterface.sol\n\ncontract RegistryInterface {\n    function initiateProvider(uint256, bytes32) public returns (bool);\n    function initiateProviderCurve(bytes32, int256[], address) public returns (bool);\n    function setEndpointParams(bytes32, bytes32[]) public;\n    function getEndpointParams(address, bytes32) public view returns (bytes32[]);\n    function getProviderPublicKey(address) public view returns (uint256);\n    function getProviderTitle(address) public view returns (bytes32);\n    function setProviderParameter(bytes32, bytes) public;\n    function setProviderTitle(bytes32) public;\n    function clearEndpoint(bytes32) public;\n    function getProviderParameter(address, bytes32) public view returns (bytes);\n    function getAllProviderParams(address) public view returns (bytes32[]);\n    function getProviderCurveLength(address, bytes32) public view returns (uint256);\n    function getProviderCurve(address, bytes32) public view returns (int[]);\n    function isProviderInitiated(address) public view returns (bool);\n    function getAllOracles() external view returns (address[]);\n    function getProviderEndpoints(address) public view returns (bytes32[]);\n    function getEndpointBroker(address, bytes32) public view returns (address);\n}\n\n// File: contracts/lib/platform/TokenDotFactory.sol\n\ncontract TokenDotFactory is Ownable {\n\n    CurrentCostInterface currentCost;\n    FactoryTokenInterface public reserveToken;\n    ZapCoordinatorInterface public coord;\n    TokenFactoryInterface public tokenFactory;\n    BondageInterface bondage;\n\n    bytes32 providerTitle; \n    mapping(bytes32 => address) public curves;\n\n    event DotTokenCreated(address tokenAddress);\n\n    constructor(\n        address coordinator, \n        address factory,\n        uint256 providerPubKey,\n        bytes32 providerTitle \n    ){\n        coord = ZapCoordinatorInterface(coordinator); \n        reserveToken = FactoryTokenInterface(coord.getContract(\"ZAP_TOKEN\"));\n        //always allow bondage to transfer from wallet\n        reserveToken.approve(coord.getContract(\"BONDAGE\"), ~uint256(0));\n        tokenFactory = TokenFactoryInterface(factory);\n\n        RegistryInterface registry = RegistryInterface(coord.getContract(\"REGISTRY\")); \n        registry.initiateProvider(providerPubKey, providerTitle);\n    }\n\n    function initializeCurve(\n        bytes32 specifier, \n        bytes32 symbol, \n        int256[] curve\n    ) public returns(address) {\n        \n        require(curves[specifier] == 0, \"Curve specifier already exists\");\n        \n        RegistryInterface registry = RegistryInterface(coord.getContract(\"REGISTRY\")); \n        require(registry.isProviderInitiated(address(this)), \"Provider not intiialized\");\n\n        registry.initiateProviderCurve(specifier, curve, address(this));\n        curves[specifier] = newToken(bytes32ToString(specifier), bytes32ToString(symbol));\n        \n        registry.setProviderParameter(specifier, toBytes(curves[specifier]));\n        \n        DotTokenCreated(curves[specifier]);\n        return curves[specifier];\n    }\n\n\n    event Bonded(bytes32 indexed specifier, uint256 indexed numDots, address indexed sender); \n\n    //whether this contract holds tokens or coming from msg.sender,etc\n    function bond(bytes32 specifier, uint numDots) public  {\n\n        bondage = BondageInterface(coord.getContract(\"BONDAGE\"));\n        uint256 issued = bondage.getDotsIssued(address(this), specifier);\n\n        CurrentCostInterface cost = CurrentCostInterface(coord.getContract(\"CURRENT_COST\"));\n        uint256 numReserve = cost._costOfNDots(address(this), specifier, issued + 1, numDots - 1);\n\n        require(\n            reserveToken.transferFrom(msg.sender, address(this), numReserve),\n            \"insufficient accepted token numDots approved for transfer\"\n        );\n\n        reserveToken.approve(address(bondage), numReserve);\n        bondage.bond(address(this), specifier, numDots);\n        FactoryTokenInterface(curves[specifier]).mint(msg.sender, numDots);\n        Bonded(specifier, numDots, msg.sender);\n\n    }\n\n    event Unbonded(bytes32 indexed specifier, uint256 indexed numDots, address indexed sender); \n\n    //whether this contract holds tokens or coming from msg.sender,etc\n    function unbond(bytes32 specifier, uint numDots) public {\n\n        bondage = BondageInterface(coord.getContract(\"BONDAGE\"));\n        uint issued = bondage.getDotsIssued(address(this), specifier);\n\n        currentCost = CurrentCostInterface(coord.getContract(\"CURRENT_COST\"));\n        uint reserveCost = currentCost._costOfNDots(address(this), specifier, issued + 1 - numDots, numDots - 1);\n\n        //unbond dots\n        bondage.unbond(address(this), specifier, numDots);\n        //burn dot backed token\n        FactoryTokenInterface curveToken = FactoryTokenInterface(curves[specifier]);\n        curveToken.burnFrom(msg.sender, numDots);\n\n        require(reserveToken.transfer(msg.sender, reserveCost), \"Error: Transfer failed\");\n        Unbonded(specifier, numDots, msg.sender);\n\n    }\n\n    function newToken(\n        string name,\n        string symbol\n    ) \n        public\n        returns (address tokenAddress) \n    {\n        FactoryTokenInterface token = tokenFactory.create(name, symbol);\n        tokenAddress = address(token);\n        return tokenAddress;\n    }\n\n    function getTokenAddress(bytes32 specifier) public view returns(address) {\n        RegistryInterface registry = RegistryInterface(coord.getContract(\"REGISTRY\")); \n        return bytesToAddr(registry.getProviderParameter(address(this), specifier));\n    }\n\n    function getProviderTitle() public view returns(bytes32) {\n        return providerTitle;\n    }\n\n    // https://ethereum.stackexchange.com/questions/884/how-to-convert-an-address-to-bytes-in-solidity\n    function toBytes(address x) public pure returns (bytes b) {\n        b = new bytes(20);\n        for (uint i = 0; i < 20; i++)\n            b[i] = byte(uint8(uint(x) / (2**(8*(19 - i)))));\n    }\n\n    //https://ethereum.stackexchange.com/questions/2519/how-to-convert-a-bytes32-to-string\n    function bytes32ToString(bytes32 x) public pure returns (string) {\n        bytes memory bytesString = new bytes(32);\n\n        bytesString = abi.encodePacked(x);\n\n        return string(bytesString);\n    }\n\n    //https://ethereum.stackexchange.com/questions/15350/how-to-convert-an-bytes-to-address-in-solidity\n    function bytesToAddr (bytes b) public pure returns (address) {\n        uint result = 0;\n        for (uint i = b.length-1; i+1 > 0; i--) {\n            uint c = uint(b[i]);\n            uint to_inc = c * ( 16 ** ((b.length - i-1) * 2));\n            result += to_inc;\n        }\n        return address(result);\n    }\n\n\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000b007eca49763f31edff95623ed6c23c8c1924a160000000000000000000000003c878962cbdd2055be6aa8ea76619c4cae02d4fb000000036b5252a719be12e4aa87faf67a410ce894d0f79a997fc21ee379ff3d546f6b656e446f74466163746f72790000000000000000000000000000000000"
}