{
  "address": "0xffcc30dad3570b97a3d24cca0333cac4cef5dbaf",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WipeProxy",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-01\n*/\n\npragma solidity ^0.5.0;\n\n\ninterface TubInterface {\n    function wipe(bytes32, uint) external;\n    function gov() external view returns (TokenInterface);\n    function sai() external view returns (TokenInterface);\n    function tab(bytes32) external returns (uint);\n    function rap(bytes32) external returns (uint);\n    function pep() external view returns (PepInterface);\n}\n\ninterface TokenInterface {\n    function allowance(address, address) external view returns (uint);\n    function balanceOf(address) external view returns (uint);\n    function approve(address, uint) external;\n    function transfer(address, uint) external returns (bool);\n    function transferFrom(address, address, uint) external returns (bool);\n}\n\ninterface PepInterface {\n    function peek() external returns (bytes32, bool);\n}\n\ninterface UniswapExchange {\n    function getEthToTokenOutputPrice(uint256 tokensBought) external view returns (uint256 ethSold);\n    function getTokenToEthOutputPrice(uint256 ethBought) external view returns (uint256 tokensSold);\n    function tokenToTokenSwapOutput(\n        uint256 tokensBought,\n        uint256 maxTokensSold,\n        uint256 maxEthSold,\n        uint256 deadline,\n        address tokenAddr\n        ) external returns (uint256  tokensSold);\n}\n\n\ncontract DSMath {\n\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, \"math-not-safe\");\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n\n}\n\n\ncontract WipeProxy is DSMath {\n\n    function getSaiTubAddress() public pure returns (address sai) {\n        sai = 0x448a5065aeBB8E423F0896E6c5D525C040f59af3;\n    }\n\n    function getUniswapMKRExchange() public pure returns (address ume) {\n        ume = 0x2C4Bd064b998838076fa341A83d007FC2FA50957;\n    }\n\n    function getUniswapDAIExchange() public pure returns (address ude) {\n        ude = 0x09cabEC1eAd1c0Ba254B09efb3EE13841712bE14;\n    }\n\n    function wipe(\n        uint cdpNum,\n        uint _wad\n    ) public \n    {\n        require(_wad > 0, \"no-wipe-no-dai\");\n\n        TubInterface tub = TubInterface(getSaiTubAddress());\n        UniswapExchange daiEx = UniswapExchange(getUniswapDAIExchange());\n        UniswapExchange mkrEx = UniswapExchange(getUniswapMKRExchange());\n        TokenInterface dai = tub.sai();\n        TokenInterface mkr = tub.gov();\n\n        bytes32 cup = bytes32(cdpNum);\n\n        setAllowance(dai, getSaiTubAddress());\n        setAllowance(mkr, getSaiTubAddress());\n        setAllowance(dai, getUniswapDAIExchange());\n\n        (bytes32 val, bool ok) = tub.pep().peek();\n\n        // MKR required for wipe = Stability fees accrued in Dai / MKRUSD value\n        uint mkrFee = wdiv(rmul(_wad, rdiv(tub.rap(cup), tub.tab(cup))), uint(val));\n\n        uint daiAmt = daiEx.getTokenToEthOutputPrice(mkrEx.getEthToTokenOutputPrice(mkrFee));\n        daiAmt = add(_wad, daiAmt);\n        require(dai.transferFrom(msg.sender, address(this), daiAmt), \"not-approved-yet\");\n\n        if (ok && val != 0) {\n            daiEx.tokenToTokenSwapOutput(\n                mkrFee,\n                daiAmt,\n                uint(999000000000000000000),\n                uint(1899063809), // 6th March 2030 GMT // no logic\n                address(mkr)\n            );\n        }\n\n        tub.wipe(cup, _wad);\n    }\n\n    function setAllowance(TokenInterface token_, address spender_) private {\n        if (token_.allowance(address(this), spender_) != uint(-1)) {\n            token_.approve(spender_, uint(-1));\n        }\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"getUniswapMKRExchange\",\"outputs\":[{\"name\":\"ume\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cdpNum\",\"type\":\"uint256\"},{\"name\":\"_wad\",\"type\":\"uint256\"}],\"name\":\"wipe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUniswapDAIExchange\",\"outputs\":[{\"name\":\"ude\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSaiTubAddress\",\"outputs\":[{\"name\":\"sai\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]",
  "bytecode": "608060405234801561001057600080fd5b50610f9e806100206000396000f3fe608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806394c4a12414610067578063d7bb5e0e146100be578063db5a5d9914610103578063f1d9a1501461015a575b600080fd5b34801561007357600080fd5b5061007c6101b1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156100ca57600080fd5b50610101600480360360408110156100e157600080fd5b8101908080359060200190929190803590602001909291905050506101cd565b005b34801561010f57600080fd5b50610118610b44565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561016657600080fd5b5061016f610b60565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000732c4bd064b998838076fa341a83d007fc2fa50957905090565b600081111515610245576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f6e6f2d776970652d6e6f2d64616900000000000000000000000000000000000081525060200191505060405180910390fd5b600061024f610b60565b9050600061025b610b44565b905060006102676101b1565b905060008373ffffffffffffffffffffffffffffffffffffffff16639166cba46040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156102cd57600080fd5b505afa1580156102e1573d6000803e3d6000fd5b505050506040513d60208110156102f757600080fd5b8101908080519060200190929190505050905060008473ffffffffffffffffffffffffffffffffffffffff166312d43a516040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561036e57600080fd5b505afa158015610382573d6000803e3d6000fd5b505050506040513d602081101561039857600080fd5b8101908080519060200190929190505050905060008760010290506103c4836103bf610b60565b610b7c565b6103d5826103d0610b60565b610b7c565b6103e6836103e1610b44565b610b7c565b6000808773ffffffffffffffffffffffffffffffffffffffff1663ace237f56040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561044b57600080fd5b505afa15801561045f573d6000803e3d6000fd5b505050506040513d602081101561047557600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff166359e02dd76040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016040805180830381600087803b1580156104e857600080fd5b505af11580156104fc573d6000803e3d6000fd5b505050506040513d604081101561051257600080fd5b8101908080519060200190929190805190602001909291905050509150915060006106a561069b8b6106968c73ffffffffffffffffffffffffffffffffffffffff16636f78ee0d896040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b1580156105ac57600080fd5b505af11580156105c0573d6000803e3d6000fd5b505050506040513d60208110156105d657600080fd5b81019080805190602001909291905050508d73ffffffffffffffffffffffffffffffffffffffff1663f7c8d6348a6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561065657600080fd5b505af115801561066a573d6000803e3d6000fd5b505050506040513d602081101561068057600080fd5b8101908080519060200190929190505050610d8c565b610dcc565b8460019004610e18565b905060008873ffffffffffffffffffffffffffffffffffffffff16632640f62c8973ffffffffffffffffffffffffffffffffffffffff166359e94862856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561073257600080fd5b505afa158015610746573d6000803e3d6000fd5b505050506040513d602081101561075c57600080fd5b81019080805190602001909291905050506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156107bd57600080fd5b505afa1580156107d1573d6000803e3d6000fd5b505050506040513d60208110156107e757600080fd5b810190808051906020019092919050505090506108048b82610e54565b90508673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156108dd57600080fd5b505af11580156108f1573d6000803e3d6000fd5b505050506040513d602081101561090757600080fd5b8101908080519060200190929190505050151561098c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f6e6f742d617070726f7665642d7965740000000000000000000000000000000081525060200191505060405180910390fd5b82801561099d575060006001028414155b15610aa7578873ffffffffffffffffffffffffffffffffffffffff1663b040d5458383683627e8f712373c00006371316a018b6040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808681526020018581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200195505050505050602060405180830381600087803b158015610a6a57600080fd5b505af1158015610a7e573d6000803e3d6000fd5b505050506040513d6020811015610a9457600080fd5b8101908080519060200190929190505050505b8973ffffffffffffffffffffffffffffffffffffffff166373b38101868d6040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015610b1e57600080fd5b505af1158015610b32573d6000803e3d6000fd5b50505050505050505050505050505050565b60007309cabec1ead1c0ba254b09efb3ee13841712be14905090565b600073448a5065aebb8e423f0896e6c5d525c040f59af3905090565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8273ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b158015610c6a57600080fd5b505afa158015610c7e573d6000803e3d6000fd5b505050506040513d6020811015610c9457600080fd5b8101908080519060200190929190505050141515610d88578173ffffffffffffffffffffffffffffffffffffffff1663095ea7b3827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015610d6f57600080fd5b505af1158015610d83573d6000803e3d6000fd5b505050505b5050565b600081610dba610da8856b033b2e3c9fd0803ce8000000610ed9565b600285811515610db457fe5b04610e54565b811515610dc357fe5b04905092915050565b60006b033b2e3c9fd0803ce8000000610e06610de88585610ed9565b60026b033b2e3c9fd0803ce8000000811515610e0057fe5b04610e54565b811515610e0f57fe5b04905092915050565b600081610e42610e3085670de0b6b3a7640000610ed9565b600285811515610e3c57fe5b04610e54565b811515610e4b57fe5b04905092915050565b60008282840191508110151515610ed3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6d6174682d6e6f742d736166650000000000000000000000000000000000000081525060200191505060405180910390fd5b92915050565b600080821480610ef857508282838502925082811515610ef557fe5b04145b1515610f6c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6d6174682d6e6f742d736166650000000000000000000000000000000000000081525060200191505060405180910390fd5b9291505056fea165627a7a723058201445d2ba7b9909198d4df2143c95d5e8f69754934af113f6230dc3ba905811360029"
}