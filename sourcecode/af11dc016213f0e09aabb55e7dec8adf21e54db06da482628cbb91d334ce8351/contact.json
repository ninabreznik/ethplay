{
  "address": "0xea699bce7603fcb8a26723e82ade3a5ff82a735e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Proxy",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-30\n*/\n\npragma solidity 0.4.24;\n\ncontract Delegatable {\n    address public empty1; // unknown slot\n    address public empty2; // unknown slot\n    address public empty3;  // unknown slot\n    address public owner;  // matches owner slot in controller\n    address public delegation; // matches thisAddr slot in controller\n\n    event DelegationTransferred(address indexed previousDelegate, address indexed newDelegation);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Sender is not the owner\");\n        _;\n    }\n\n    constructor() public {}\n\n    /**\n    * @dev Allows owner to transfer delegation of the contract to a newDelegation.\n    * @param _newDelegation The address to transfer delegation to.\n    */\n    function transferDelegation(address _newDelegation) public onlyOwner {\n        require(_newDelegation != address(0), \"Trying to transfer to address 0\");\n        emit DelegationTransferred(delegation, _newDelegation);\n        delegation = _newDelegation;\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param _newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address _newOwner) public onlyOwner {\n        require(_newOwner != address(0), \"Trying to transfer to address 0\");\n        emit OwnershipTransferred(owner, _newOwner);\n        owner = _newOwner;\n    }\n}\n\ncontract DelegateProxy {\n\n    constructor() public {}\n\n    /**\n    * @dev Performs a delegatecall and returns whatever is returned (entire context execution will return!)\n    * @param _dst Destination address to perform the delegatecall\n    * @param _calldata Calldata for the delegatecall\n    */\n    function delegatedFwd(address _dst, bytes _calldata) internal {\n        assembly {\n            let result := delegatecall(sub(gas, 10000), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0)\n            let size := returndatasize\n\n            let ptr := mload(0x40)\n            returndatacopy(ptr, 0, size)\n\n            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\n            // if the call returned error data, forward it\n            switch result case 0 { revert(ptr, size) }\n            default { return(ptr, size) }\n        }\n    }\n}\n\ncontract Proxy is Delegatable, DelegateProxy {\n\n    constructor() public {}\n\n    /**\n    * @dev Function to invoke all function that are implemented in controler\n    */\n    function () public {\n        require(delegation != address(0), \"Delegation is address 0, not initialized\");\n        delegatedFwd(delegation, msg.data);\n    }\n\n    /**\n    * @dev Function to initialize storage of proxy\n    * @param _controller The address of the controller to load the code from\n    */\n    function initialize(address _controller, uint256) public {\n        require(owner == 0, \"Already initialized\");\n        owner = msg.sender;\n        delegation = _controller;\n        delegatedFwd(_controller, msg.data);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50610b49806100206000396000f30060806040526004361061008e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806368690113146101e95780637babfffc146102405780638da5cb5b14610283578063994ebc43146102da578063ab63424e14610331578063cd6dc68714610388578063df5cf723146103d5578063f2fde38b1461042c575b34801561009a57600080fd5b50600073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515610188576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f44656c65676174696f6e206973206164647265737320302c206e6f7420696e6981526020017f7469616c697a656400000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6101e7600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000368080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505061046f565b005b3480156101f557600080fd5b506101fe610499565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561024c57600080fd5b50610281600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104bf565b005b34801561028f57600080fd5b506102986106e9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102e657600080fd5b506102ef61070f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561033d57600080fd5b50610346610734565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561039457600080fd5b506103d3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061075a565b005b3480156103e157600080fd5b506103ea6108cd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561043857600080fd5b5061046d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108f3565b005b600080825160208401856127105a03f43d604051816000823e8260008114610495578282f35b8282fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610584576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f53656e646572206973206e6f7420746865206f776e657200000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610629576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f547279696e6720746f207472616e7366657220746f206164647265737320300081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fd0f8e6a439689cb66a57cb879faad9da11c6b662caf1ec096fef086d15ea16c760405160405180910390a380600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561080a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f416c726561647920696e697469616c697a65640000000000000000000000000081525060200191505060405180910390fd5b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506108c9826000368080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505061046f565b5050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f53656e646572206973206e6f7420746865206f776e657200000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610a5d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f547279696e6720746f207472616e7366657220746f206164647265737320300081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a72305820423366d5c421e7d20a77fa14c9fc042705c64b8e35031a5f1060e5ae7396f4240029"
}