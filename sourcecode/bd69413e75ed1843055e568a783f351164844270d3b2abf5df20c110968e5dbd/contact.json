{
  "address": "0x4fe2b959e0a093c58067e00c62add84820f7dc43",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MUSystem",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-22\n*/\n\n/* MUSystem is a global Savings system \nbased of the mathematical algorithm created \nby the Mavrodi brothers - Sergey and Vyacheslav. \nThe solidity code was written by the enthusiast and devoted MMM participant.\nAccording to these rules MMM worked in Russia in the nineties.\n\nToday you help someone — Tomorrow you will be helped!\n\nMutual Uniting System (MUSystem):\nemail: [email protected]\nhttps://mutualunitingsystem.online/\n\n\"MMM IS A FINANCIAL NUCLEAR WEAPON.\nThey say Baba Vanga predicted, “Pyramid from Russia will travel the world.”\nWhen Sergey Mavrodi passed away, many people thought this prediction \nwasn't going to come true. What if it's just started to materialize?\"\n\nFinancial apocalypse is inevitable! Together we can do a lot!\nThank you Sergey Mavrodi. You've opened my eyes. */\n\npragma solidity 0.4.25;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c=a * b;\n    require(c / a == b);\n    return c;\n  }\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); \n    uint256 c=a / b;\n    return c;\n  }\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c=a - b;\n    return c;\n  }\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c=a + b;\n    require(c >= a);\n    return c;\n  }\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\ncontract MUSystem{\n    \n    using SafeMath for uint;\n    \n    string public constant name=\"Mutual Uniting System\";\n    string public constant symbol=\"MUS\";\n    uint public constant decimals=15;\n    uint public totalSupply;\n    address private creatorOwner;\n    mapping (address => uint) balances;\n    \n    struct User{\n        uint UserBuyFirstDate;\n        uint UserBuyFirstPack;\n        uint UserCycle;\n        uint UserBuyTokenPackNum;\n        uint UserFirstAmt;\n        uint UserBuyDate;\n        uint UserSellDate;\n        uint UserContinued;\n        uint UserTotalAmtDepositCurrentPack;\n        uint UserTotalAmtDeposit;\n        uint UserAmtDepositCurrentPackTRUE;\n        uint UserSellTokenPackNum;\n        uint UserTotalAmtWithdrawal;\n        uint UserTotalAmtWithdrawalCurrentPack;\n        uint UserWithdrawalFromFirstRefunded;\n        uint UserWithdrawalFromDisparity;\n    }\n    mapping (address => User) users;\n    \n    struct DepositTemp{\n        address useraddress;\n        uint p;\n        uint bonus;\n        uint userAmt;\n        uint amtToSend;\n        uint bonusAmount;\n        uint userBuyDate;\n        uint userSellDate;\n        uint userFirstAmt;\n        uint userContinued;\n        uint userAmtToStore;\n        uint availableTokens;\n        uint feeCompensation;\n        uint UserTokenObtain;\n        uint userBuyFirstPack;\n        uint userBuyFirstDate;\n        uint currentPackNumber;\n        uint amtForfirstRefund;\n        uint UserBuyTokenPackNum;\n        uint userTotalAmtDeposit;\n        uint bonusAmountRefunded;\n        uint currentPackStartDate;\n        uint userAmtOverloadToSend;\n        uint currentPackTokenPriceSellout;\n        uint userAmtDepositCurrentPackTRUE;\n        uint userTotalAmtDepositCurrentPack;\n    }\n    \n    struct WithdrawTemp{\n        address useraddress;\n        uint userTotalAmtWithdrawalCurrentPack;\n        uint UserTokensReturnAboveCurrentPack;\n        uint userWithdrawalFromFirstRefunded;\n        uint userTotalAmtDepositCurrentPack;\n        uint userAmtDepositCurrentPackTRUE;\n        uint UserTokensReturnToCurrentPack;\n        uint currentPackTokenPriceSellout;\n        uint currentPackTokenPriceBuyout;\n        uint withdrawAmtAboveCurrentPack;\n        uint userWithdrawalFromDisparity;\n        uint bonusTokensReturnDecrease;\n        bool returnTokenInCurrentPack;\n        uint withdrawAmtToCurrentPack;\n        uint remainsFromFirstRefunded;\n        uint overallDisparityAmounts;\n        uint userTotalAmtWithdrawal;\n        uint useFromFirstRefunded;\n        uint remainsFromDisparity;\n        uint TokensReturnDecrease;\n        uint currentPackStartDate;\n        uint userAvailableAmount;\n        uint currentPackDeposits;\n        uint currentPackNumber;\n        uint userBuyFirstPack;\n        uint UserTokensReturn;\n        uint useFromDisparity;\n        uint overallRefunded;\n        uint userSellDate;\n        uint userFirstAmt;\n        uint userBuyDate;\n        uint bonusToSend;\n        uint withdrawAmt;\n        uint wAtoStore;\n        uint thisBal;\n        uint bonus;\n        uint diff;\n        uint dsp;\n        bool ra;\n    }\n\n    uint private Cycle;\n    uint private PrevPackCost;\n    bool private feeTransfered;\n    uint private NextPackDelta;\n    uint private NextPackYield;\n    uint private CurrentPackFee;\n    uint private RestartModeDate;\n    uint private CurrentPackCost;\n    uint private OverallDeposits;\n    uint private OverallRefunded;\n    uint private PrevPackTotalAmt;\n    uint private CurrentPackYield;\n    uint private CurrentPackDelta;\n    bool private RestartMode=false;\n    uint private CurrentPackNumber;\n    uint private OverallWithdrawals;\n    uint private CurrentPackRestAmt;\n    uint private CurrentPackTotalAmt;\n    uint private CurrentPackDeposits;\n    uint private CurrentPackStartDate; \n    uint private CurrentPackTotalToPay;\n    uint private OverallDisparityAmounts;\n    uint private PrevPackTokenPriceBuyout; \n    uint private NextPackTokenPriceBuyout;\n    uint private PrevPackTokenPriceSellout;\n    uint private CurrentPackTokenPriceBuyout;\n    uint private CurrentPackDisparityAmounts;\n    uint private CurrentPackTokenPriceSellout;\n    uint private CurrentPackTotalToPayDisparity;\n    uint private CurrentPackTokenAvailablePercent;\n\n    constructor () public payable {\n        creatorOwner=msg.sender;\n        CurrentPackNumber=1;\n        Cycle=0;\n        mint(50000000000000000);\n        packSettings(CurrentPackNumber);\n    }\n\n    function packSettings (uint _currentPackNumber) internal {\n        CurrentPackNumber=_currentPackNumber;\n        if(_currentPackNumber==1){\n            CurrentPackTokenPriceSellout=10;\n            CurrentPackTokenPriceBuyout=10;\n            CurrentPackCost=500000000000000000;\n            CurrentPackFee=0;\n        }\n        if(_currentPackNumber==2){\n            PrevPackTotalAmt=CurrentPackCost;\n            CurrentPackDelta=0;\n            NextPackTokenPriceBuyout=CurrentPackTokenPriceSellout*110/100;\n            NextPackYield=NextPackTokenPriceBuyout/CurrentPackTokenPriceSellout;\n            NextPackDelta=NextPackYield;\n            CurrentPackTokenPriceSellout=NextPackTokenPriceBuyout+NextPackDelta;\n            CurrentPackTokenPriceBuyout=CurrentPackTokenPriceSellout;\n            CurrentPackCost=50000000000000000*CurrentPackTokenPriceSellout;\n            CurrentPackTotalAmt=CurrentPackCost+PrevPackTotalAmt;\n            CurrentPackFee=0;\n        }\n        if(_currentPackNumber>2){\n            PrevPackTokenPriceSellout=CurrentPackTokenPriceSellout;\n            PrevPackTokenPriceBuyout=CurrentPackTokenPriceBuyout;\n            PrevPackCost=CurrentPackCost;\n            PrevPackTotalAmt=CurrentPackTotalAmt;\n            CurrentPackDelta=NextPackDelta;\n            CurrentPackTokenPriceBuyout=NextPackTokenPriceBuyout;\n            NextPackTokenPriceBuyout=PrevPackTokenPriceSellout*110;\n            if(NextPackTokenPriceBuyout<=100){  \n                NextPackTokenPriceBuyout=PrevPackTokenPriceSellout*11/10;\n            }\n            if(NextPackTokenPriceBuyout>100){ \n                NextPackTokenPriceBuyout=NextPackTokenPriceBuyout*10**3;\n                NextPackTokenPriceBuyout=((NextPackTokenPriceBuyout/10000)+5)/10;\n            }\n            NextPackYield=NextPackTokenPriceBuyout-PrevPackTokenPriceSellout;\n            NextPackDelta=NextPackYield*101;\n            if(NextPackDelta<=100){ \n                NextPackDelta=CurrentPackDelta+(NextPackYield*101/100);\n            }\n            if(NextPackDelta>100){\n                NextPackDelta=NextPackDelta*10**3;\n                NextPackDelta=((NextPackDelta/10000)+5)/10;\n                NextPackDelta=CurrentPackDelta+NextPackDelta;\n            }\n            CurrentPackTokenPriceSellout=NextPackTokenPriceBuyout+NextPackDelta;\n            CurrentPackCost=50000000000000000*CurrentPackTokenPriceSellout;\n            CurrentPackTotalToPay=50000000000000000*CurrentPackTokenPriceBuyout;\n            CurrentPackTotalAmt=CurrentPackCost+PrevPackTotalAmt-CurrentPackTotalToPay;\n            CurrentPackFee=PrevPackTotalAmt-CurrentPackTotalToPay-(PrevPackCost*7/10);\n        }\n        CurrentPackDisparityAmounts=0;\n        CurrentPackDeposits=0;\n        CurrentPackTokenAvailablePercent=100;\n        CurrentPackStartDate=now;\n        emit NextPack(CurrentPackTokenPriceSellout, CurrentPackTokenPriceBuyout);\n    }\n\n    function aboutCurrentPack () public constant returns (uint num, uint bal, uint overallRefunded, uint dsp, uint availableTokens, uint availableTokensInPercentage, uint availableAmountToDepositInWei, uint tokenPriceSellout, uint tokenPriceBuyout, uint cycle, uint overallDeposits, uint overallWithdrawals, bool){\n        if(CurrentPackDeposits+OverallDisparityAmounts > CurrentPackDisparityAmounts+OverallRefunded){\n            dsp = CurrentPackDeposits+OverallDisparityAmounts-CurrentPackDisparityAmounts-OverallRefunded;\n        }else{\n            dsp=0;\n        }\n        return (CurrentPackNumber, address(this).balance, OverallRefunded, dsp, balances[address(this)], CurrentPackTokenAvailablePercent, balances[address(this)].mul(CurrentPackTokenPriceSellout), CurrentPackTokenPriceSellout, CurrentPackTokenPriceBuyout, Cycle, OverallDeposits, OverallWithdrawals, RestartMode);\n    }\n\n    function aboutUser () public constant returns (uint UserFirstAmt, uint remainsFromFirstRefunded, uint UserContinued, uint userTotalAmtDeposit, uint userTotalAmtWithdrawal, uint userAvailableAmount, uint userAvailableAmount1, uint remainsFromDisparity, uint depCP, uint witCP, uint userCycle, uint wAmtToCurrentPack, uint userBuyFirstDate){\n        if(users[msg.sender].UserBuyDate>CurrentPackStartDate && users[msg.sender].UserBuyTokenPackNum==CurrentPackNumber){\n            wAmtToCurrentPack=users[msg.sender].UserAmtDepositCurrentPackTRUE; \n        }else{\n            wAmtToCurrentPack=0;\n        }\n        if(users[msg.sender].UserSellDate>CurrentPackStartDate && users[msg.sender].UserSellTokenPackNum==CurrentPackNumber){    \n            witCP=users[msg.sender].UserTotalAmtWithdrawalCurrentPack;\n        }else{\n            witCP=0;\n        }\n        if(users[msg.sender].UserBuyDate>CurrentPackStartDate && users[msg.sender].UserBuyTokenPackNum==CurrentPackNumber){\n            depCP=users[msg.sender].UserTotalAmtDepositCurrentPack;\n        }else{\n            depCP=0;\n        }\n        remainsFromFirstRefunded=(users[msg.sender].UserFirstAmt*6/10).sub(users[msg.sender].UserWithdrawalFromFirstRefunded);\n        remainsFromDisparity=(users[msg.sender].UserFirstAmt*7/10).sub(users[msg.sender].UserWithdrawalFromDisparity);\n        userAvailableAmount=(balances[msg.sender]-((wAmtToCurrentPack)/CurrentPackTokenPriceSellout))*CurrentPackTokenPriceBuyout+wAmtToCurrentPack;\n        if(CurrentPackTokenAvailablePercent<10){userAvailableAmount+userAvailableAmount/100;}\n        if(userAvailableAmount>remainsFromDisparity){\n            userAvailableAmount=userAvailableAmount-remainsFromDisparity;\n        }else{\n            userAvailableAmount=0;\n        }\n        if (userAvailableAmount<10){\n            userAvailableAmount=0;\n        }\n        uint dsp=0;\n        if(CurrentPackDeposits+OverallDisparityAmounts>CurrentPackDisparityAmounts+OverallRefunded){\n            dsp = CurrentPackDeposits+OverallDisparityAmounts-CurrentPackDisparityAmounts-OverallRefunded;\n        }\n        if(address(this).balance>dsp){\n            userAvailableAmount1=address(this).balance-dsp;\n        }else{\n            userAvailableAmount1=0;\n        }\n        return (users[msg.sender].UserFirstAmt, remainsFromFirstRefunded, users[msg.sender].UserContinued, users[msg.sender].UserTotalAmtDeposit, users[msg.sender].UserTotalAmtWithdrawal, userAvailableAmount, userAvailableAmount1, remainsFromDisparity, depCP, witCP, userCycle, wAmtToCurrentPack, users[msg.sender].UserBuyFirstDate);\n    }\n\n    function nextPack (uint _currentPackNumber)internal{\n        transferFee();\n        feeTransfered=false;\n        CurrentPackNumber=_currentPackNumber+1;\n        if(_currentPackNumber>0){\n            mint(50000000000000000);\n        }\n        packSettings(CurrentPackNumber);\n    }\n\n    function restart(bool _rm)internal{\n        if(_rm==true){\n            if(RestartMode==false){\n                RestartMode=true;\n                RestartModeDate=now;\n            }else{\n                if(now>RestartModeDate+14*1 days){\n                    Cycle=Cycle+1;\n                    nextPack(0);\n                    RestartMode=false;\n                }\n            }\n        }else{\n            if(RestartMode==true){\n                RestartMode=false;\n                RestartModeDate=0;\n            }\n        }\n    }\n    \n    function transferFee()internal{\n        if(CurrentPackNumber>2 && feeTransfered==false && RestartMode==false){\n            if(address(this).balance>=CurrentPackFee){\n                feeTransfered=true;\n                creatorOwner.transfer(CurrentPackFee);\n            }\n        }\n    }\n\n    function deposit() public payable{ \n        require(msg.sender!=0x0 && msg.sender!=0);\n        DepositTemp memory d;\n        d.userAmt=msg.value;\n        d.useraddress=msg.sender;\n        require(d.userAmt<250 * 1 ether);\n        d.availableTokens=balances[address(this)];\n        d.currentPackTokenPriceSellout=CurrentPackTokenPriceSellout;\n        require(d.userAmt<=d.availableTokens.mul(d.currentPackTokenPriceSellout).add(d.availableTokens.mul(d.currentPackTokenPriceSellout).div(10)).add(10*1 finney)); \n        require(d.userAmt.div(d.currentPackTokenPriceSellout)>0);\n        d.currentPackNumber=CurrentPackNumber;\n        d.currentPackStartDate=CurrentPackStartDate;\n        d.UserBuyTokenPackNum=users[d.useraddress].UserBuyTokenPackNum;\n        d.userBuyFirstDate=users[d.useraddress].UserBuyFirstDate;\n        d.userBuyDate=users[d.useraddress].UserBuyDate;\n        d.userContinued=users[d.useraddress].UserContinued;\n        d.userTotalAmtDepositCurrentPack=users[d.useraddress].UserTotalAmtDepositCurrentPack;\n        d.userTotalAmtDeposit=users[d.useraddress].UserTotalAmtDeposit;\n        if(d.UserBuyTokenPackNum==d.currentPackNumber && d.userBuyDate>=d.currentPackStartDate){\n            require(d.userTotalAmtDepositCurrentPack.add(d.userAmt)<250*1 ether);\n            d.userAmtDepositCurrentPackTRUE=users[d.useraddress].UserAmtDepositCurrentPackTRUE;\n        }else{\n            d.userTotalAmtDepositCurrentPack=0;\n            d.userAmtDepositCurrentPackTRUE=0;\n        }\n        if(users[d.useraddress].UserSellTokenPackNum==d.currentPackNumber && users[d.useraddress].UserSellDate>=d.currentPackStartDate){\n            d.p=users[d.useraddress].UserTotalAmtWithdrawalCurrentPack/20;\n            require(d.userAmt>d.p);\n            d.userAmt=d.userAmt.sub(d.p);\n        }\n        d.UserTokenObtain=d.userAmt/d.currentPackTokenPriceSellout;\n        if(d.UserTokenObtain*d.currentPackTokenPriceSellout<d.userAmt){\n            d.UserTokenObtain=d.UserTokenObtain+1;\n        }\n        if(d.UserTokenObtain>d.availableTokens){\n            d.amtToSend=d.currentPackTokenPriceSellout*(d.UserTokenObtain-d.availableTokens);\n            d.userAmt=d.userAmt.sub(d.amtToSend);\n            d.UserTokenObtain=d.availableTokens;\n        }\n        if(d.userAmt>=100*1 finney){  \n            if(now<=(d.currentPackStartDate+1*1 days)){\n                d.bonus=d.UserTokenObtain*75/10000+1;\n            }else{\n                if(now<=(d.currentPackStartDate+2*1 days)){\n                    d.bonus=d.UserTokenObtain*50/10000+1;\n                }else{\n                    if(now<=(d.currentPackStartDate+3*1 days)){\n                        d.bonus=d.UserTokenObtain*25/10000+1;\n                    }\n                }\n            }\n        }\n        if(d.userContinued>=4 && now>=(d.userBuyFirstDate+1*1 weeks)){\n            d.bonus=d.bonus+d.UserTokenObtain/100+1;\n        }\n        if(d.bonus>0){\n            d.UserTokenObtain=d.UserTokenObtain.add(d.bonus);\n            if(d.UserTokenObtain>d.availableTokens){\n                d.userAmtOverloadToSend=d.currentPackTokenPriceSellout*(d.UserTokenObtain-d.availableTokens);\n                d.bonusAmountRefunded=d.userAmtOverloadToSend;\n                d.UserTokenObtain=d.availableTokens;\n                d.amtToSend=d.amtToSend.add(d.userAmtOverloadToSend);\n                d.bonus=0;\n            }else{\n                d.bonusAmount=d.bonus*d.currentPackTokenPriceSellout;\n            }\n        }\n        if(d.UserBuyTokenPackNum==0){\n            d.userContinued=1;\n            d.userBuyFirstDate=now;\n            d.userFirstAmt=d.userAmt.add(d.bonusAmount);\n            d.userBuyFirstPack=d.currentPackNumber;\n            d.amtForfirstRefund=d.userFirstAmt*6/10;\n            OverallDisparityAmounts=OverallDisparityAmounts+d.userFirstAmt*7/10;\n            CurrentPackDisparityAmounts=CurrentPackDisparityAmounts+d.userFirstAmt*7/10;\n            d.amtToSend=d.amtToSend.add(d.amtForfirstRefund);\n            d.feeCompensation=d.feeCompensation+2500000000000000;\n            OverallRefunded=OverallRefunded+d.amtForfirstRefund;\n        }else{\n            d.userFirstAmt=users[d.useraddress].UserFirstAmt;\n            d.userBuyFirstPack=users[d.useraddress].UserBuyFirstPack;\n            if(d.UserBuyTokenPackNum==d.currentPackNumber-1){\n                d.userContinued=d.userContinued+1;\n            }else{\n                d.userContinued=1;\n            }\n        }\n        d.userAmtToStore=d.userAmt.add(d.bonusAmount);\n        d.userTotalAmtDepositCurrentPack=d.userTotalAmtDepositCurrentPack.add(d.userAmtToStore);\n        d.userTotalAmtDeposit=d.userTotalAmtDeposit.add(d.userAmtToStore);\n        d.userAmtDepositCurrentPackTRUE=d.userAmtDepositCurrentPackTRUE.add(d.userAmtToStore);\n        CurrentPackDeposits=CurrentPackDeposits.add(d.userAmtToStore);\n        OverallDeposits=OverallDeposits.add(d.userAmtToStore);\n        transfer(address(this), d.useraddress, d.UserTokenObtain, false, 0, 0);\n        User storage user=users[d.useraddress];\n        user.UserBuyFirstDate=d.userBuyFirstDate;\n        user.UserBuyFirstPack=d.userBuyFirstPack;\n        user.UserBuyTokenPackNum=d.currentPackNumber;\n        user.UserBuyDate=now;\n        user.UserFirstAmt=d.userFirstAmt;\n        user.UserContinued=d.userContinued;\n        user.UserTotalAmtDepositCurrentPack=d.userTotalAmtDepositCurrentPack;\n        user.UserTotalAmtDeposit=d.userTotalAmtDeposit;\n        user.UserAmtDepositCurrentPackTRUE=d.userAmtDepositCurrentPackTRUE;\n        restart(false);\n        d.feeCompensation=d.feeCompensation+500000000000000;\n        if(balances[address(this)]==0){\n            nextPack(d.currentPackNumber);\n            d.feeCompensation=d.feeCompensation+1000000000000000;\n        }else{\n            CurrentPackTokenAvailablePercent=balances[address(this)]/500000000000000;\n        }\n        if(d.feeCompensation>0 && d.userAmt>d.feeCompensation){\n            d.amtToSend=d.amtToSend.add(d.feeCompensation);\n        }\n        emit Deposit(d.useraddress, d.userAmtToStore, d.amtForfirstRefund, d.bonusAmount, d.bonusAmountRefunded, d.feeCompensation, d.UserTokenObtain, d.bonus, d.currentPackNumber, d.amtToSend);\n        if(d.amtToSend>0){ \n            d.useraddress.transfer(d.amtToSend);\n        }\n    }\n\n    function withdraw(uint WithdrawAmount, uint WithdrawTokens, bool AllowToUseDisparity) public {\n        require(msg.sender!=0x0 && msg.sender!=0);\n        require(WithdrawTokens>0 || WithdrawAmount>0);\n        require(WithdrawTokens<=balances[msg.sender]);\n        WithdrawTemp memory w;\n        w.useraddress=msg.sender;\n        w.userFirstAmt=users[w.useraddress].UserFirstAmt;\n        w.userBuyFirstPack=users[w.useraddress].UserBuyFirstPack;\n        w.currentPackNumber=CurrentPackNumber;\n        w.currentPackStartDate=CurrentPackStartDate;\n        w.currentPackTokenPriceSellout=CurrentPackTokenPriceSellout;\n        w.currentPackTokenPriceBuyout=CurrentPackTokenPriceBuyout;\n        w.overallRefunded=OverallRefunded;\n        w.overallDisparityAmounts=OverallDisparityAmounts;\n        w.userTotalAmtWithdrawal=users[w.useraddress].UserTotalAmtWithdrawal;\n        w.userWithdrawalFromFirstRefunded=users[w.useraddress].UserWithdrawalFromFirstRefunded;\n        w.remainsFromFirstRefunded=(w.userFirstAmt*6/10).sub(w.userWithdrawalFromFirstRefunded);\n        w.userWithdrawalFromDisparity=users[w.useraddress].UserWithdrawalFromDisparity;\n        w.remainsFromDisparity=(w.userFirstAmt*7/10).sub(w.userWithdrawalFromDisparity);\n        w.thisBal=address(this).balance;\n        w.currentPackDeposits=CurrentPackDeposits;\n        if(users[w.useraddress].UserBuyTokenPackNum==w.currentPackNumber && users[w.useraddress].UserBuyDate>=w.currentPackStartDate){\n            w.userTotalAmtDepositCurrentPack=users[w.useraddress].UserTotalAmtDepositCurrentPack;\n            w.userAmtDepositCurrentPackTRUE=users[w.useraddress].UserAmtDepositCurrentPackTRUE;\n            w.withdrawAmtToCurrentPack=users[w.useraddress].UserAmtDepositCurrentPackTRUE;\n            w.returnTokenInCurrentPack=true;\n        }else{\n            w.returnTokenInCurrentPack=false;\n        }\n        if(users[w.useraddress].UserSellTokenPackNum==w.currentPackNumber && users[w.useraddress].UserSellDate>=w.currentPackStartDate){\n            w.userTotalAmtWithdrawalCurrentPack=users[w.useraddress].UserTotalAmtWithdrawalCurrentPack;\n        }\n        if(CurrentPackDeposits+OverallDisparityAmounts>CurrentPackDisparityAmounts+OverallRefunded){\n            w.dsp=CurrentPackDeposits+OverallDisparityAmounts-CurrentPackDisparityAmounts-OverallRefunded;\n        }else{\n            w.dsp=0;\n        }\n        w.userAvailableAmount=(balances[w.useraddress]-(w.withdrawAmtToCurrentPack/w.currentPackTokenPriceSellout))*w.currentPackTokenPriceBuyout+w.withdrawAmtToCurrentPack;\n        if(w.thisBal>=w.dsp){\n            if(w.userAvailableAmount>w.thisBal-w.dsp){\n                if(w.currentPackNumber==w.userBuyFirstPack){\n                    if(w.userAvailableAmount>w.thisBal-w.dsp+w.userAmtDepositCurrentPackTRUE){\n                        w.userAvailableAmount=w.thisBal-w.dsp+w.userAmtDepositCurrentPackTRUE;\n                    }\n                }else{\n                    if(w.userAvailableAmount>w.thisBal-w.dsp+w.remainsFromDisparity+w.userAmtDepositCurrentPackTRUE){\n                        w.userAvailableAmount=w.thisBal-w.dsp+w.remainsFromDisparity+w.userAmtDepositCurrentPackTRUE;\n                    }\n                }\n            }\n        }else{\n            if(w.userAmtDepositCurrentPackTRUE>w.remainsFromDisparity){\n                if(w.userAvailableAmount>w.userAmtDepositCurrentPackTRUE){\n                    w.userAvailableAmount=w.userAmtDepositCurrentPackTRUE;\n                }\n            }else{\n                if(w.userAvailableAmount>w.remainsFromDisparity){\n                    w.userAvailableAmount=w.remainsFromDisparity;\n                }\n            }\n            if(w.userAvailableAmount>w.thisBal+w.remainsFromFirstRefunded){\n                w.userAvailableAmount=w.thisBal+w.remainsFromFirstRefunded;\n            }\n            if(w.currentPackNumber>2){\n                w.ra=true;\n            }\n        }\n        if(WithdrawTokens>0 && WithdrawAmount==0){\n            w.UserTokensReturn=WithdrawTokens;\n            if(w.returnTokenInCurrentPack==true){\n                w.UserTokensReturnToCurrentPack=w.withdrawAmtToCurrentPack.div(w.currentPackTokenPriceSellout);\n                if(w.UserTokensReturn>w.UserTokensReturnToCurrentPack){\n                    w.UserTokensReturnAboveCurrentPack=w.UserTokensReturn.sub(w.UserTokensReturnToCurrentPack);\n                    w.withdrawAmtAboveCurrentPack=w.UserTokensReturnAboveCurrentPack.mul(w.currentPackTokenPriceBuyout);\n                }else{\n                    w.withdrawAmtToCurrentPack=w.UserTokensReturn.mul(w.currentPackTokenPriceSellout);\n                    w.UserTokensReturnToCurrentPack=w.UserTokensReturn;\n                    w.withdrawAmtAboveCurrentPack=0;\n                    w.UserTokensReturnAboveCurrentPack=0;\n                }\n            }else{\n                w.withdrawAmtToCurrentPack=0;\n                w.UserTokensReturnToCurrentPack=0;\n                w.UserTokensReturnAboveCurrentPack=w.UserTokensReturn;\n                w.withdrawAmtAboveCurrentPack=w.UserTokensReturnAboveCurrentPack.mul(w.currentPackTokenPriceBuyout);\n            }\n            w.withdrawAmt=w.withdrawAmtToCurrentPack.add(w.withdrawAmtAboveCurrentPack);\n        }else{\n            w.withdrawAmt=WithdrawAmount;\n        }\n        if(w.withdrawAmt>w.userAvailableAmount){\n            w.withdrawAmt=w.userAvailableAmount;\n        }\n        if(w.remainsFromDisparity>0){\n           if(w.userAvailableAmount>=w.remainsFromDisparity){\n                w.userAvailableAmount=w.userAvailableAmount-w.remainsFromDisparity;\n            }else{\n                w.userAvailableAmount=0;\n            }\n        }\n        if(w.userAvailableAmount<100){\n            w.userAvailableAmount=0;\n        }\n        if(AllowToUseDisparity==false && w.remainsFromDisparity>0){\n            if(w.withdrawAmt>w.userAvailableAmount){\n                w.withdrawAmt=w.userAvailableAmount;\n            }\n        }\n        if(w.returnTokenInCurrentPack==true){\n            w.UserTokensReturnToCurrentPack=w.withdrawAmtToCurrentPack.div(w.currentPackTokenPriceSellout);\n            if(w.withdrawAmt>w.withdrawAmtToCurrentPack){ \n                w.withdrawAmtAboveCurrentPack=w.withdrawAmt.sub(w.withdrawAmtToCurrentPack);\n                w.UserTokensReturnAboveCurrentPack=w.withdrawAmtAboveCurrentPack.div(w.currentPackTokenPriceBuyout);\n            }else{\n                w.withdrawAmtToCurrentPack=w.withdrawAmt;\n                w.UserTokensReturnToCurrentPack=w.withdrawAmtToCurrentPack.div(w.currentPackTokenPriceSellout);\n                w.withdrawAmtAboveCurrentPack=0;\n                w.UserTokensReturnAboveCurrentPack=0;\n            }\n        }else{\n            w.withdrawAmtToCurrentPack=0;\n            w.UserTokensReturnToCurrentPack=0;\n            w.withdrawAmtAboveCurrentPack=w.withdrawAmt;\n            w.UserTokensReturnAboveCurrentPack=w.withdrawAmtAboveCurrentPack.div(w.currentPackTokenPriceBuyout);\n        }\n        if(AllowToUseDisparity==true && w.remainsFromDisparity>0){\n            if(w.withdrawAmt>w.userAvailableAmount){\n                w.useFromDisparity=w.withdrawAmt-w.userAvailableAmount;\n                if(w.remainsFromDisparity<w.useFromDisparity){\n                    w.useFromDisparity=w.remainsFromDisparity;\n                }\n                w.userWithdrawalFromDisparity=w.userWithdrawalFromDisparity.add(w.useFromDisparity);\n                if(w.remainsFromFirstRefunded>0){\n                    if(w.useFromDisparity>w.remainsFromDisparity-w.remainsFromFirstRefunded){\n                        w.useFromFirstRefunded=w.useFromDisparity+w.remainsFromFirstRefunded-w.remainsFromDisparity;\n                        if (w.remainsFromFirstRefunded<w.useFromFirstRefunded){\n                            w.useFromFirstRefunded=w.remainsFromFirstRefunded;\n                        }\n                        w.userWithdrawalFromFirstRefunded=w.userWithdrawalFromFirstRefunded+w.useFromFirstRefunded;\n                        w.withdrawAmt=w.withdrawAmt.sub(w.useFromFirstRefunded);\n                    }\n                }\n            }\n        }\n        if(CurrentPackTokenAvailablePercent<10){\n            w.bonus=(w.withdrawAmt+w.useFromFirstRefunded)/100;\n            w.bonusToSend=w.bonus;\n        }\n        if(w.thisBal>w.dsp && w.bonus>0){\n            if(w.withdrawAmt+w.bonus>w.thisBal-w.dsp){\n                w.bonusToSend=0;\n                w.diff=w.bonus;\n                if(w.UserTokensReturnAboveCurrentPack>0){\n                    w.bonusTokensReturnDecrease=w.diff/w.currentPackTokenPriceBuyout;\n                    if(w.UserTokensReturnAboveCurrentPack>=w.bonusTokensReturnDecrease){\n                        w.UserTokensReturnAboveCurrentPack=w.UserTokensReturnAboveCurrentPack-w.bonusTokensReturnDecrease;\n                        \n                    }else{\n                        w.diff=w.bonusTokensReturnDecrease-w.UserTokensReturnAboveCurrentPack;\n                        w.UserTokensReturnAboveCurrentPack=0;\n                        w.bonusTokensReturnDecrease=w.diff*w.currentPackTokenPriceBuyout/w.currentPackTokenPriceSellout;\n                        w.UserTokensReturnToCurrentPack=w.UserTokensReturnToCurrentPack-w.bonusTokensReturnDecrease;\n                    }\n                }else{\n                    w.bonusTokensReturnDecrease=w.diff/w.currentPackTokenPriceSellout;\n                    if(w.UserTokensReturnToCurrentPack>=w.bonusTokensReturnDecrease){\n                        w.UserTokensReturnToCurrentPack=w.UserTokensReturnToCurrentPack-w.bonusTokensReturnDecrease;\n                    }\n                }\n            }\n        }\n        if(w.thisBal<=w.dsp){\n            if(w.bonus>0){\n                w.bonusToSend=0;\n                w.diff=w.bonus;\n                if(w.UserTokensReturnAboveCurrentPack>0){\n                    w.bonusTokensReturnDecrease=w.diff/w.currentPackTokenPriceBuyout;\n                    if(w.UserTokensReturnAboveCurrentPack>=w.bonusTokensReturnDecrease){\n                        w.UserTokensReturnAboveCurrentPack=w.UserTokensReturnAboveCurrentPack-w.bonusTokensReturnDecrease;\n                    }else{\n                        w.diff=w.bonusTokensReturnDecrease-w.UserTokensReturnAboveCurrentPack;\n                        w.UserTokensReturnAboveCurrentPack=0;\n                        w.bonusTokensReturnDecrease=w.diff*w.currentPackTokenPriceBuyout/w.currentPackTokenPriceSellout;\n                        w.UserTokensReturnToCurrentPack=w.UserTokensReturnToCurrentPack-w.bonusTokensReturnDecrease;\n                    }\n                }else{\n                    w.bonusTokensReturnDecrease=w.diff/w.currentPackTokenPriceSellout;\n                    if(w.UserTokensReturnToCurrentPack>=w.bonusTokensReturnDecrease){\n                        w.UserTokensReturnToCurrentPack=w.UserTokensReturnToCurrentPack-w.bonusTokensReturnDecrease;\n                    }\n                }\n            }\n            if(w.withdrawAmt>w.thisBal){\n                w.diff=w.withdrawAmt+100-w.thisBal;\n                if(w.UserTokensReturnAboveCurrentPack>0){\n                    w.TokensReturnDecrease=w.diff/w.currentPackTokenPriceBuyout;\n                    if(w.UserTokensReturnAboveCurrentPack>=w.TokensReturnDecrease){\n                        w.UserTokensReturnAboveCurrentPack=w.UserTokensReturnAboveCurrentPack-w.TokensReturnDecrease;\n                        w.withdrawAmtAboveCurrentPack=w.UserTokensReturnAboveCurrentPack*w.currentPackTokenPriceBuyout;\n                    }else{\n                        w.diff=w.TokensReturnDecrease-w.UserTokensReturnAboveCurrentPack;\n                        w.UserTokensReturnAboveCurrentPack=0;\n                        w.TokensReturnDecrease=w.diff*w.currentPackTokenPriceBuyout/w.currentPackTokenPriceSellout;\n                        w.UserTokensReturnToCurrentPack=w.UserTokensReturnToCurrentPack-w.TokensReturnDecrease;\n                    }\n                }else{\n                    w.TokensReturnDecrease=w.diff/w.currentPackTokenPriceSellout;\n                    if(w.UserTokensReturnToCurrentPack>=w.TokensReturnDecrease){\n                        w.UserTokensReturnToCurrentPack=w.UserTokensReturnToCurrentPack-w.TokensReturnDecrease;\n                        w.withdrawAmtToCurrentPack=w.UserTokensReturnToCurrentPack*w.currentPackTokenPriceSellout;\n                    }\n                }\n                w.withdrawAmt=w.withdrawAmtToCurrentPack+w.withdrawAmtAboveCurrentPack;\n                if(w.withdrawAmt>=w.useFromFirstRefunded){\n                    w.withdrawAmt=w.withdrawAmt-w.useFromFirstRefunded;\n                }else{\n                    w.diff=w.useFromFirstRefunded-w.withdrawAmt;\n                    w.withdrawAmt=0;\n                    w.useFromFirstRefunded=w.useFromFirstRefunded-w.diff;\n                }\n                if(w.withdrawAmt>w.thisBal){\n                    w.withdrawAmt=w.thisBal;\n                }\n            }\n        }\n        User storage user=users[w.useraddress];\n        if(w.userAmtDepositCurrentPackTRUE>w.withdrawAmtToCurrentPack){\n            user.UserAmtDepositCurrentPackTRUE=w.userAmtDepositCurrentPackTRUE-w.withdrawAmtToCurrentPack;\n        }else{\n            user.UserAmtDepositCurrentPackTRUE=0;\n        }\n        if(w.overallDisparityAmounts>w.useFromDisparity){\n            OverallDisparityAmounts=w.overallDisparityAmounts-w.useFromDisparity;\n        }else{\n            OverallDisparityAmounts=0;\n        }\n        if(w.userBuyFirstPack==w.currentPackNumber && users[w.useraddress].UserBuyFirstDate>=w.currentPackStartDate){\n            if(CurrentPackDisparityAmounts>w.useFromDisparity){\n                CurrentPackDisparityAmounts=CurrentPackDisparityAmounts-w.useFromDisparity;\n            }else{\n                CurrentPackDisparityAmounts=0;\n            }\n        }\n        if(w.overallRefunded>w.useFromFirstRefunded){\n            OverallRefunded=w.overallRefunded-w.useFromFirstRefunded;\n        }else{\n            OverallRefunded=0;\n        }\n        if(w.currentPackDeposits>w.withdrawAmtToCurrentPack){\n            CurrentPackDeposits=w.currentPackDeposits-w.withdrawAmtToCurrentPack;\n        }else{\n            CurrentPackDeposits=0;\n        }\n        w.UserTokensReturn=w.UserTokensReturnToCurrentPack+w.UserTokensReturnAboveCurrentPack;\n        w.wAtoStore=w.withdrawAmt+w.useFromFirstRefunded+w.bonusToSend;\n        w.userTotalAmtWithdrawal=w.userTotalAmtWithdrawal+w.wAtoStore;\n        w.userTotalAmtWithdrawalCurrentPack=w.userTotalAmtWithdrawalCurrentPack+w.wAtoStore;\n        OverallWithdrawals=OverallWithdrawals+w.wAtoStore;\n        user.UserSellTokenPackNum=w.currentPackNumber;\n        user.UserSellDate=now;\n        user.UserTotalAmtWithdrawal=w.userTotalAmtWithdrawal;\n        user.UserTotalAmtWithdrawalCurrentPack=w.userTotalAmtWithdrawalCurrentPack;\n        user.UserWithdrawalFromFirstRefunded=w.userWithdrawalFromFirstRefunded;\n        user.UserWithdrawalFromDisparity=w.userWithdrawalFromDisparity;\n        emit Withdraw(w.useraddress, w.wAtoStore, w.useFromFirstRefunded, w.bonus, w.bonusToSend, w.currentPackNumber, w.UserTokensReturn, w.UserTokensReturnToCurrentPack, w.bonusTokensReturnDecrease, w.TokensReturnDecrease);\n        if (w.UserTokensReturn==balances[w.useraddress]+1){\n            w.UserTokensReturn=balances[w.useraddress];\n            if (w.UserTokensReturnToCurrentPack==balances[w.useraddress]+1){\n                w.UserTokensReturnToCurrentPack=balances[w.useraddress];\n            }\n            if (w.UserTokensReturnAboveCurrentPack==balances[w.useraddress]+1){\n                w.UserTokensReturnAboveCurrentPack=balances[w.useraddress];\n            }\n        }\n        transfer(w.useraddress, address(this), w.UserTokensReturn, w.returnTokenInCurrentPack, w.UserTokensReturnToCurrentPack, w.UserTokensReturnAboveCurrentPack);\n        CurrentPackTokenAvailablePercent=balances[address(this)]/500000000000000;\n        if(w.ra==true){\n            restart(true);\n        }\n        if(w.withdrawAmt+w.bonus>0){\n            w.useraddress.transfer(w.withdrawAmt+w.bonusToSend);\n        }\n    }\n\n    function transfer(address _from, address _to, uint _value, bool _rttcp, uint _rtcp, uint _racp) internal returns (bool success) {\n        balances[_from]=balances[_from].sub(_value); \n        if(_to==address(this)){ \n            if(_rttcp==true){\n                balances[_to]=balances[_to].add(_rtcp);\n            }else{\n                balances[_to]=balances[_to];\n            }\n            totalSupply=totalSupply.sub(_racp);\n        }else{\n            balances[_to]=balances[_to].add(_value);\n        }\n        emit Transfer(_from, _to, _value); \n        return true;\n    }\n\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n        return balances[tokenOwner];\n    }\n\n    function mint(uint _value) internal returns (bool) {\n        balances[address(this)]=balances[address(this)].add(_value);\n        totalSupply=totalSupply.add(_value);\n        return true;\n    }\n    \n    event Deposit(address indexed addr, uint, uint, uint, uint, uint, uint, uint, uint, uint);\n    event Withdraw(address indexed addr, uint, uint, uint, uint, uint, uint, uint, uint, uint);\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event NextPack(uint indexed CurrentPackTokenPriceSellout, uint indexed CurrentPackTokenPriceBuyout);\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"WithdrawAmount\",\"type\":\"uint256\"},{\"name\":\"WithdrawTokens\",\"type\":\"uint256\"},{\"name\":\"AllowToUseDisparity\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aboutUser\",\"outputs\":[{\"name\":\"UserFirstAmt\",\"type\":\"uint256\"},{\"name\":\"remainsFromFirstRefunded\",\"type\":\"uint256\"},{\"name\":\"UserContinued\",\"type\":\"uint256\"},{\"name\":\"userTotalAmtDeposit\",\"type\":\"uint256\"},{\"name\":\"userTotalAmtWithdrawal\",\"type\":\"uint256\"},{\"name\":\"userAvailableAmount\",\"type\":\"uint256\"},{\"name\":\"userAvailableAmount1\",\"type\":\"uint256\"},{\"name\":\"remainsFromDisparity\",\"type\":\"uint256\"},{\"name\":\"depCP\",\"type\":\"uint256\"},{\"name\":\"witCP\",\"type\":\"uint256\"},{\"name\":\"userCycle\",\"type\":\"uint256\"},{\"name\":\"wAmtToCurrentPack\",\"type\":\"uint256\"},{\"name\":\"userBuyFirstDate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aboutCurrentPack\",\"outputs\":[{\"name\":\"num\",\"type\":\"uint256\"},{\"name\":\"bal\",\"type\":\"uint256\"},{\"name\":\"overallRefunded\",\"type\":\"uint256\"},{\"name\":\"dsp\",\"type\":\"uint256\"},{\"name\":\"availableTokens\",\"type\":\"uint256\"},{\"name\":\"availableTokensInPercentage\",\"type\":\"uint256\"},{\"name\":\"availableAmountToDepositInWei\",\"type\":\"uint256\"},{\"name\":\"tokenPriceSellout\",\"type\":\"uint256\"},{\"name\":\"tokenPriceBuyout\",\"type\":\"uint256\"},{\"name\":\"cycle\",\"type\":\"uint256\"},{\"name\":\"overallDeposits\",\"type\":\"uint256\"},{\"name\":\"overallWithdrawals\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"CurrentPackTokenPriceSellout\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"CurrentPackTokenPriceBuyout\",\"type\":\"uint256\"}],\"name\":\"NextPack\",\"type\":\"event\"}]",
  "bytecode": ""
}