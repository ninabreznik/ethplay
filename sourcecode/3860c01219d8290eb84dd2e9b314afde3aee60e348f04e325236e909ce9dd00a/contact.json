{
  "address": "0x9f284e1337a815fe77d2ff4ae46544645b20c5ff",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Evolution Land: Kryptonite",
  "contractName": "KTON",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-26\n*/\n\npragma solidity ^0.4.23;\n\ncontract DSAuthority {\n    function canCall(\n        address src, address dst, bytes4 sig\n    ) public view returns (bool);\n}\n\ncontract DSAuthEvents {\n    event LogSetAuthority (address indexed authority);\n    event LogSetOwner     (address indexed owner);\n}\n\ncontract DSAuth is DSAuthEvents {\n    DSAuthority  public  authority;\n    address      public  owner;\n\n    constructor() public {\n        owner = msg.sender;\n        emit LogSetOwner(msg.sender);\n    }\n\n    function setOwner(address owner_)\n        public\n        auth\n    {\n        owner = owner_;\n        emit LogSetOwner(owner);\n    }\n\n    function setAuthority(DSAuthority authority_)\n        public\n        auth\n    {\n        authority = authority_;\n        emit LogSetAuthority(authority);\n    }\n\n    modifier auth {\n        require(isAuthorized(msg.sender, msg.sig));\n        _;\n    }\n\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n        if (src == address(this)) {\n            return true;\n        } else if (src == owner) {\n            return true;\n        } else if (authority == DSAuthority(0)) {\n            return false;\n        } else {\n            return authority.canCall(src, this, sig);\n        }\n    }\n}\n\ncontract DSNote {\n    event LogNote(\n        bytes4   indexed  sig,\n        address  indexed  guy,\n        bytes32  indexed  foo,\n        bytes32  indexed  bar,\n        uint              wad,\n        bytes             fax\n    ) anonymous;\n\n    modifier note {\n        bytes32 foo;\n        bytes32 bar;\n\n        assembly {\n            foo := calldataload(4)\n            bar := calldataload(36)\n        }\n\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\n\n        _;\n    }\n}\n\ncontract DSStop is DSNote, DSAuth {\n\n    bool public stopped;\n\n    modifier stoppable {\n        require(!stopped);\n        _;\n    }\n    function stop() public auth note {\n        stopped = true;\n    }\n    function start() public auth note {\n        stopped = false;\n    }\n\n}\n\ncontract ERC20Events {\n    event Approval(address indexed src, address indexed guy, uint wad);\n    event Transfer(address indexed src, address indexed dst, uint wad);\n}\n\ncontract ERC20 is ERC20Events {\n    function totalSupply() public view returns (uint);\n    function balanceOf(address guy) public view returns (uint);\n    function allowance(address src, address guy) public view returns (uint);\n\n    function approve(address guy, uint wad) public returns (bool);\n    function transfer(address dst, uint wad) public returns (bool);\n    function transferFrom(\n        address src, address dst, uint wad\n    ) public returns (bool);\n}\n\ncontract DSMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x);\n    }\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    function min(uint x, uint y) internal pure returns (uint z) {\n        return x <= y ? x : y;\n    }\n    function max(uint x, uint y) internal pure returns (uint z) {\n        return x >= y ? x : y;\n    }\n    function imin(int x, int y) internal pure returns (int z) {\n        return x <= y ? x : y;\n    }\n    function imax(int x, int y) internal pure returns (int z) {\n        return x >= y ? x : y;\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    function rpow(uint x, uint n) internal pure returns (uint z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\n\ncontract DSTokenBase is ERC20, DSMath {\n    uint256                                            _supply;\n    mapping (address => uint256)                       _balances;\n    mapping (address => mapping (address => uint256))  _approvals;\n\n    constructor(uint supply) public {\n        _balances[msg.sender] = supply;\n        _supply = supply;\n    }\n\n    function totalSupply() public view returns (uint) {\n        return _supply;\n    }\n    function balanceOf(address src) public view returns (uint) {\n        return _balances[src];\n    }\n    function allowance(address src, address guy) public view returns (uint) {\n        return _approvals[src][guy];\n    }\n\n    function transfer(address dst, uint wad) public returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(address src, address dst, uint wad)\n        public\n        returns (bool)\n    {\n        if (src != msg.sender) {\n            _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\n        }\n\n        _balances[src] = sub(_balances[src], wad);\n        _balances[dst] = add(_balances[dst], wad);\n\n        emit Transfer(src, dst, wad);\n\n        return true;\n    }\n\n    function approve(address guy, uint wad) public returns (bool) {\n        _approvals[msg.sender][guy] = wad;\n\n        emit Approval(msg.sender, guy, wad);\n\n        return true;\n    }\n}\n\ncontract DSToken is DSTokenBase(0), DSStop {\n\n    bytes32  public  symbol;\n    uint256  public  decimals = 18; // standard token precision. override to customize\n\n    constructor(bytes32 symbol_) public {\n        symbol = symbol_;\n    }\n\n    event Mint(address indexed guy, uint wad);\n    event Burn(address indexed guy, uint wad);\n\n    function approve(address guy) public stoppable returns (bool) {\n        return super.approve(guy, uint(-1));\n    }\n\n    function approve(address guy, uint wad) public stoppable returns (bool) {\n        return super.approve(guy, wad);\n    }\n\n    function transferFrom(address src, address dst, uint wad)\n        public\n        stoppable\n        returns (bool)\n    {\n        if (src != msg.sender && _approvals[src][msg.sender] != uint(-1)) {\n            _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\n        }\n\n        _balances[src] = sub(_balances[src], wad);\n        _balances[dst] = add(_balances[dst], wad);\n\n        emit Transfer(src, dst, wad);\n\n        return true;\n    }\n\n    function push(address dst, uint wad) public {\n        transferFrom(msg.sender, dst, wad);\n    }\n    function pull(address src, uint wad) public {\n        transferFrom(src, msg.sender, wad);\n    }\n    function move(address src, address dst, uint wad) public {\n        transferFrom(src, dst, wad);\n    }\n\n    function mint(uint wad) public {\n        mint(msg.sender, wad);\n    }\n    function burn(uint wad) public {\n        burn(msg.sender, wad);\n    }\n    function mint(address guy, uint wad) public auth stoppable {\n        _balances[guy] = add(_balances[guy], wad);\n        _supply = add(_supply, wad);\n        emit Mint(guy, wad);\n    }\n    function burn(address guy, uint wad) public auth stoppable {\n        if (guy != msg.sender && _approvals[guy][msg.sender] != uint(-1)) {\n            _approvals[guy][msg.sender] = sub(_approvals[guy][msg.sender], wad);\n        }\n\n        _balances[guy] = sub(_balances[guy], wad);\n        _supply = sub(_supply, wad);\n        emit Burn(guy, wad);\n    }\n\n    // Optional token name\n    bytes32   public  name = \"\";\n\n    function setName(bytes32 name_) public auth {\n        name = name_;\n    }\n}\n\n /*\n * Contract that is working with ERC223 tokens\n * https://github.com/ethereum/EIPs/issues/223\n */\n\n/// @title ERC223ReceivingContract - Standard contract implementation for compatibility with ERC223 tokens.\ncontract ERC223ReceivingContract {\n\n    /// @dev Function that is called when a user or another contract wants to transfer funds.\n    /// @param _from Transaction initiator, analogue of msg.sender\n    /// @param _value Number of tokens to transfer.\n    /// @param _data Data containig a function signature and/or parameters\n    function tokenFallback(address _from, uint256 _value, bytes _data) public;\n\n}\n\n/// @dev The token controller contract must implement these functions\ncontract TokenController {\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n    /// @param _owner The address that sent the ether to create tokens\n    /// @return True if the ether is accepted, false if it throws\n    function proxyPayment(address _owner, bytes4 sig, bytes data) payable public returns (bool);\n\n    /// @notice Notifies the controller about a token transfer allowing the\n    ///  controller to react if desired\n    /// @param _from The origin of the transfer\n    /// @param _to The destination of the transfer\n    /// @param _amount The amount of the transfer\n    /// @return False if the controller does not authorize the transfer\n    function onTransfer(address _from, address _to, uint _amount) public returns (bool);\n\n    /// @notice Notifies the controller about an approval allowing the\n    ///  controller to react if desired\n    /// @param _owner The address that calls `approve()`\n    /// @param _spender The spender in the `approve()` call\n    /// @param _amount The amount in the `approve()` call\n    /// @return False if the controller does not authorize the approval\n    function onApprove(address _owner, address _spender, uint _amount) public returns (bool);\n}\n\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 _amount, address _token, bytes _data) public;\n}\n\ncontract ERC223 {\n    function transfer(address to, uint amount, bytes data) public returns (bool ok);\n\n    function transferFrom(address from, address to, uint256 amount, bytes data) public returns (bool ok);\n\n    event ERC223Transfer(address indexed from, address indexed to, uint amount, bytes data);\n}\n\ncontract KTON is DSToken(\"KTON\"), ERC223 {\n    address public controller;\n\n    constructor() public {\n        setName(\"Evolution Land Kryptonite\");\n        controller = msg.sender;\n    }\n\n//////////\n// Controller Methods\n//////////\n    /// @notice Changes the controller of the contract\n    /// @param _newController The new controller of the contract\n    function changeController(address _newController) auth {\n        controller = _newController;\n    }\n\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n    ///  is approved by `_from`\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return True if the transfer was successful\n    function transferFrom(address _from, address _to, uint256 _amount\n    ) public returns (bool success) {\n        // Alerts the token controller of the transfer\n        if (isContract(controller)) {\n            if (!TokenController(controller).onTransfer(_from, _to, _amount))\n               revert();\n        }\n\n        success = super.transferFrom(_from, _to, _amount);\n    }\n\n    /*\n     * ERC 223\n     * Added support for the ERC 223 \"tokenFallback\" method in a \"transfer\" function with a payload.\n     */\n    function transferFrom(address _from, address _to, uint256 _amount, bytes _data)\n        public\n        returns (bool success)\n    {\n        // Alerts the token controller of the transfer\n        if (isContract(controller)) {\n            if (!TokenController(controller).onTransfer(_from, _to, _amount))\n               revert();\n        }\n\n        require(super.transferFrom(_from, _to, _amount));\n\n        if (isContract(_to)) {\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n            receiver.tokenFallback(_from, _amount, _data);\n        }\n\n        emit ERC223Transfer(_from, _to, _amount, _data);\n\n        return true;\n    }\n\n    /*\n     * ERC 223\n     * Added support for the ERC 223 \"tokenFallback\" method in a \"transfer\" function with a payload.\n     * https://github.com/ethereum/EIPs/issues/223\n     * function transfer(address _to, uint256 _value, bytes _data) public returns (bool success);\n     */\n    /// @notice Send `_value` tokens to `_to` from `msg.sender` and trigger\n    /// tokenFallback if sender is a contract.\n    /// @dev Function that is called when a user or another contract wants to transfer funds.\n    /// @param _to Address of token receiver.\n    /// @param _amount Number of tokens to transfer.\n    /// @param _data Data to be sent to tokenFallback\n    /// @return Returns success of function call.\n    function transfer(\n        address _to,\n        uint256 _amount,\n        bytes _data)\n        public\n        returns (bool success)\n    {\n        return transferFrom(msg.sender, _to, _amount, _data);\n    }\n\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n    ///  its behalf. This is a modified version of the ERC20 approve function\n    ///  to be a little bit safer\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return True if the approval was successful\n    function approve(address _spender, uint256 _amount) returns (bool success) {\n        // Alerts the token controller of the approve function call\n        if (isContract(controller)) {\n            if (!TokenController(controller).onApprove(msg.sender, _spender, _amount))\n                revert();\n        }\n        \n        return super.approve(_spender, _amount);\n    }\n\n    function mint(address _guy, uint _wad) auth stoppable {\n        super.mint(_guy, _wad);\n\n        emit Transfer(0, _guy, _wad);\n    }\n    function burn(address _guy, uint _wad) auth stoppable {\n        super.burn(_guy, _wad);\n\n        emit Transfer(_guy, 0, _wad);\n    }\n\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n    ///  its behalf, and then a function is triggered in the contract that is\n    ///  being approved, `_spender`. This allows users to use their tokens to\n    ///  interact with contracts in one function call instead of two\n    /// @param _spender The address of the contract able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return True if the function call was successful\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n    ) returns (bool success) {\n        if (!approve(_spender, _amount)) revert();\n\n        ApproveAndCallFallBack(_spender).receiveApproval(\n            msg.sender,\n            _amount,\n            this,\n            _extraData\n        );\n\n        return true;\n    }\n\n    /// @dev Internal function to determine if an address is a contract\n    /// @param _addr The address being queried\n    /// @return True if `_addr` is a contract\n    function isContract(address _addr) constant internal returns(bool) {\n        uint size;\n        if (_addr == 0) return false;\n        assembly {\n            size := extcodesize(_addr)\n        }\n        return size>0;\n    }\n\n    /// @notice The fallback function: If the contract's controller has not been\n    ///  set to 0, then the `proxyPayment` method is called which relays the\n    ///  ether and creates tokens as described in the token controller contract\n    function ()  payable {\n        if (isContract(controller)) {\n            if (! TokenController(controller).proxyPayment.value(msg.value)(msg.sender, msg.sig, msg.data))\n                revert();\n        } else {\n            revert();\n        }\n    }\n\n//////////\n// Safety Methods\n//////////\n\n    /// @notice This method can be used by the owner to extract mistakenly\n    ///  sent tokens to this contract.\n    /// @param _token The address of the token contract that you want to recover\n    ///  set to 0 in case you want to extract ether.\n    function claimTokens(address _token) auth {\n        if (_token == 0x0) {\n            address(msg.sender).transfer(address(this).balance);\n            return;\n        }\n\n        ERC20 token = ERC20(_token);\n        uint balance = token.balanceOf(this);\n        token.transfer(address(msg.sender), balance);\n\n        emit ClaimedTokens(_token, address(msg.sender), balance);\n    }\n\n////////////////\n// Events\n////////////////\n\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n}",
  "bytecode": "6080604052601260065560006007553480156200001b57600080fd5b503360008181526001602052604080822082905581805560048054600160a060020a03191684179055517f4b544f4e0000000000000000000000000000000000000000000000000000000092917fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9491a2600555620000c27f45766f6c7574696f6e204c616e64204b727970746f6e69746500000000000000640100000000620000da810204565b60088054600160a060020a031916331790556200024b565b62000113337fffffffff000000000000000000000000000000000000000000000000000000006000351664010000000062000124810204565b15156200011f57600080fd5b600755565b6000600160a060020a038316301415620001415750600162000245565b600454600160a060020a0384811691161415620001615750600162000245565b600354600160a060020a031615156200017d5750600062000245565b600354604080517fb7009613000000000000000000000000000000000000000000000000000000008152600160a060020a0386811660048301523060248301527fffffffff00000000000000000000000000000000000000000000000000000000861660448301529151919092169163b70096139160648083019260209291908290030181600087803b1580156200021457600080fd5b505af115801562000229573d6000803e3d6000fd5b505050506040513d60208110156200024057600080fd5b505190505b92915050565b6118e8806200025b6000396000f30060806040526004361061018a5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461028857806307da68f5146102af578063095ea7b3146102c457806313af4035146102fc57806318160ddd1461031d57806323b872dd14610332578063313ce5671461035c5780633cebb8231461037157806340c10f191461039257806342966c68146103b65780635ac801fe146103ce57806370a08231146103e657806375f12b21146104075780637a9e5e4b1461041c5780638da5cb5b1461043d57806395d89b411461046e5780639dc29fac14610483578063a0712d68146104a7578063a9059cbb146104bf578063ab67aa58146104e3578063b753a98c14610552578063bb35783b14610576578063be45fd62146105a0578063be9a655514610609578063bf7e214f1461061e578063cae9ca5114610633578063daea85c51461069c578063dd62ed3e146106bd578063df8de3e7146106e4578063f2d5d56b14610705578063f77c479114610729575b60085461019f90600160a060020a031661073e565b15610281576008546040517f4a6a225e000000000000000000000000000000000000000000000000000000008152336004820181815260008035600160e060020a031916602485018190526060604486019081523660648701819052600160a060020a0390971696634a6a225e963496959394939192906084018484808284378201915050955050505050506020604051808303818588803b15801561024457600080fd5b505af1158015610258573d6000803e3d6000fd5b50505050506040513d602081101561026f57600080fd5b5051151561027c57600080fd5b610286565b600080fd5b005b34801561029457600080fd5b5061029d61076b565b60408051918252519081900360200190f35b3480156102bb57600080fd5b50610286610771565b3480156102d057600080fd5b506102e8600160a060020a036004351660243561080b565b604080519115158252519081900360200190f35b34801561030857600080fd5b50610286600160a060020a03600435166108e7565b34801561032957600080fd5b5061029d610965565b34801561033e57600080fd5b506102e8600160a060020a036004358116906024351660443561096b565b34801561036857600080fd5b5061029d610a49565b34801561037d57600080fd5b50610286600160a060020a0360043516610a4f565b34801561039e57600080fd5b50610286600160a060020a0360043516602435610a9f565b3480156103c257600080fd5b50610286600435610b26565b3480156103da57600080fd5b50610286600435610b33565b3480156103f257600080fd5b5061029d600160a060020a0360043516610b59565b34801561041357600080fd5b506102e8610b74565b34801561042857600080fd5b50610286600160a060020a0360043516610b84565b34801561044957600080fd5b50610452610c02565b60408051600160a060020a039092168252519081900360200190f35b34801561047a57600080fd5b5061029d610c11565b34801561048f57600080fd5b50610286600160a060020a0360043516602435610c17565b3480156104b357600080fd5b50610286600435610c9e565b3480156104cb57600080fd5b506102e8600160a060020a0360043516602435610ca8565b3480156104ef57600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526102e894600160a060020a038135811695602480359092169560443595369560849401918190840183828082843750949750610cb59650505050505050565b34801561055e57600080fd5b50610286600160a060020a0360043516602435610f59565b34801561058257600080fd5b50610286600160a060020a0360043581169060243516604435610f69565b3480156105ac57600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526102e8948235600160a060020a0316946024803595369594606494920191908190840183828082843750949750610f7a9650505050505050565b34801561061557600080fd5b50610286610f88565b34801561062a57600080fd5b5061045261101c565b34801561063f57600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526102e8948235600160a060020a031694602480359536959460649492019190819084018382808284375094975061102b9650505050505050565b3480156106a857600080fd5b506102e8600160a060020a0360043516611146565b3480156106c957600080fd5b5061029d600160a060020a036004358116906024351661116c565b3480156106f057600080fd5b50610286600160a060020a0360043516611197565b34801561071157600080fd5b50610286600160a060020a036004351660243561136b565b34801561073557600080fd5b50610452611376565b600080600160a060020a038316151561075a5760009150610765565b823b90506000811191505b50919050565b60075481565b61078733600035600160e060020a031916611385565b151561079257600080fd5b60408051348082526020820183815236938301849052600435936024359384938693339360008035600160e060020a031916949092606082018484808284376040519201829003965090945050505050a450506004805474ff0000000000000000000000000000000000000000191660a060020a179055565b60085460009061082390600160a060020a031661073e565b156108d457600854604080517fda682aeb000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a038681166024830152604482018690529151919092169163da682aeb9160648083019260209291908290030181600087803b15801561089d57600080fd5b505af11580156108b1573d6000803e3d6000fd5b505050506040513d60208110156108c757600080fd5b505115156108d457600080fd5b6108de8383611489565b90505b92915050565b6108fd33600035600160e060020a031916611385565b151561090857600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383811691909117918290556040519116907fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a250565b60005490565b60085460009061098390600160a060020a031661073e565b15610a3657600854604080517f4a393149000000000000000000000000000000000000000000000000000000008152600160a060020a03878116600483015286811660248301526044820186905291519190921691634a3931499160648083019260209291908290030181600087803b1580156109ff57600080fd5b505af1158015610a13573d6000803e3d6000fd5b505050506040513d6020811015610a2957600080fd5b50511515610a3657600080fd5b610a418484846114ad565b949350505050565b60065481565b610a6533600035600160e060020a031916611385565b1515610a7057600080fd5b6008805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b610ab533600035600160e060020a031916611385565b1515610ac057600080fd5b60045460a060020a900460ff1615610ad757600080fd5b610ae18282611610565b604080518281529051600160a060020a038416916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b610b303382610c17565b50565b610b4933600035600160e060020a031916611385565b1515610b5457600080fd5b600755565b600160a060020a031660009081526001602052604090205490565b60045460a060020a900460ff1681565b610b9a33600035600160e060020a031916611385565b1515610ba557600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383811691909117918290556040519116907f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada490600090a250565b600454600160a060020a031681565b60055481565b610c2d33600035600160e060020a031916611385565b1515610c3857600080fd5b60045460a060020a900460ff1615610c4f57600080fd5b610c5982826116d8565b604080518281529051600091600160a060020a038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b610b303382610a9f565b60006108de33848461096b565b6008546000908190610ccf90600160a060020a031661073e565b15610d8257600854604080517f4a393149000000000000000000000000000000000000000000000000000000008152600160a060020a03898116600483015288811660248301526044820188905291519190921691634a3931499160648083019260209291908290030181600087803b158015610d4b57600080fd5b505af1158015610d5f573d6000803e3d6000fd5b505050506040513d6020811015610d7557600080fd5b50511515610d8257600080fd5b610d8d8686866114ad565b1515610d9857600080fd5b610da18561073e565b15610e9857506040517fc0ee0b8a000000000000000000000000000000000000000000000000000000008152600160a060020a03868116600483019081526024830186905260606044840190815285516064850152855188949385169363c0ee0b8a938b938a938a9360840190602085019080838360005b83811015610e31578181015183820152602001610e19565b50505050905090810190601f168015610e5e5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610e7f57600080fd5b505af1158015610e93573d6000803e3d6000fd5b505050505b84600160a060020a031686600160a060020a03167f9bfafdc2ae8835972d7b64ef3f8f307165ac22ceffde4a742c52da5487f45fd186866040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610f12578181015183820152602001610efa565b50505050905090810190601f168015610f3f5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a350600195945050505050565b610f6433838361096b565b505050565b610f7483838361096b565b50505050565b6000610a4133858585610cb5565b610f9e33600035600160e060020a031916611385565b1515610fa957600080fd5b60408051348082526020820183815236938301849052600435936024359384938693339360008035600160e060020a031916949092606082018484808284376040519201829003965090945050505050a450506004805474ff000000000000000000000000000000000000000019169055565b600354600160a060020a031681565b6000611037848461080b565b151561104257600080fd5b6040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018690523060448401819052608060648501908152865160848601528651600160a060020a038a1695638f4ffcb195948a94938a939192909160a490910190602085019080838360005b838110156110d55781810151838201526020016110bd565b50505050905090810190601f1680156111025780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561112457600080fd5b505af1158015611138573d6000803e3d6000fd5b506001979650505050505050565b60045460009060a060020a900460ff161561116057600080fd5b6108e182600019611836565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b6000806111b033600035600160e060020a031916611385565b15156111bb57600080fd5b600160a060020a03831615156111fe576040513390303180156108fc02916000818181858888f193505050501580156111f8573d6000803e3d6000fd5b50610f64565b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051849350600160a060020a038416916370a082319160248083019260209291908290030181600087803b15801561126257600080fd5b505af1158015611276573d6000803e3d6000fd5b505050506040513d602081101561128c57600080fd5b5051604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018390529051919250600160a060020a0384169163a9059cbb916044808201926020929091908290030181600087803b1580156112fa57600080fd5b505af115801561130e573d6000803e3d6000fd5b505050506040513d602081101561132457600080fd5b50506040805182815290513391600160a060020a038616917ff931edb47c50b4b4104c187b5814a9aef5f709e17e2ecf9617e860cacade929c9181900360200190a3505050565b610f6482338361096b565b600854600160a060020a031681565b6000600160a060020a0383163014156113a0575060016108e1565b600454600160a060020a03848116911614156113be575060016108e1565b600354600160a060020a031615156113d8575060006108e1565b600354604080517fb7009613000000000000000000000000000000000000000000000000000000008152600160a060020a038681166004830152306024830152600160e060020a0319861660448301529151919092169163b70096139160648083019260209291908290030181600087803b15801561145657600080fd5b505af115801561146a573d6000803e3d6000fd5b505050506040513d602081101561148057600080fd5b505190506108e1565b60045460009060a060020a900460ff16156114a357600080fd5b6108de8383611836565b60045460009060a060020a900460ff16156114c757600080fd5b600160a060020a03841633148015906115055750600160a060020a038416600090815260026020908152604080832033845290915290205460001914155b1561155d57600160a060020a0384166000908152600260209081526040808320338452909152902054611538908361189c565b600160a060020a03851660009081526002602090815260408083203384529091529020555b600160a060020a038416600090815260016020526040902054611580908361189c565b600160a060020a0380861660009081526001602052604080822093909355908516815220546115af90836118ac565b600160a060020a0380851660008181526001602090815260409182902094909455805186815290519193928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35060019392505050565b61162633600035600160e060020a031916611385565b151561163157600080fd5b60045460a060020a900460ff161561164857600080fd5b600160a060020a03821660009081526001602052604090205461166b90826118ac565b600160a060020a0383166000908152600160205260408120919091555461169290826118ac565b600055604080518281529051600160a060020a038416917f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885919081900360200190a25050565b6116ee33600035600160e060020a031916611385565b15156116f957600080fd5b60045460a060020a900460ff161561171057600080fd5b600160a060020a038216331480159061174e5750600160a060020a038216600090815260026020908152604080832033845290915290205460001914155b156117a657600160a060020a0382166000908152600260209081526040808320338452909152902054611781908261189c565b600160a060020a03831660009081526002602090815260408083203384529091529020555b600160a060020a0382166000908152600160205260409020546117c9908261189c565b600160a060020a038316600090815260016020526040812091909155546117f0908261189c565b600055604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a25050565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b808203828111156108e157600080fd5b808201828110156108e157600080fd00a165627a7a72305820bd08a8d32c539f9eafee33cf04080989ca969044eaa0d4135373a7f77072a0bd0029"
}