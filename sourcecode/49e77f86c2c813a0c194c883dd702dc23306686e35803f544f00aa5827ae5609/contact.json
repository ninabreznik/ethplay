{
  "address": "0x420335d3deef2d5b87524ff9d0fb441f71ea621f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BitIndia",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-31\n*/\n\npragma solidity ^0.4.15;\n\n/**\n *  Standard Interface for ERC20 Contract\n */\ncontract IERC20 {\n    function totalSupply() constant returns (uint _totalSupply);\n    function balanceOf(address _owner) constant returns (uint balance);\n    function transfer(address _to, uint _value) returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) returns (bool success);\n    function approve(address _spender, uint _value) returns (bool success);\n    function allowance(address _owner, address _spender) constant returns (uint remaining);\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\n\n/**\n * Checking overflows for various operations\n */\nlibrary SafeMathLib {\n\n/**\n* Issue: Change to internal constant\n**/\n  function minus(uint a, uint b) internal constant returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n/**\n* Issue: Change to internal constant\n**/\n  function plus(uint a, uint b) internal constant returns (uint) {\n    uint c = a + b;\n    assert(c>=a && c>=b);\n    return c;\n  }\n\n}\n\n/**\n * @title Ownable\n * @notice The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n\n  address public owner;\n  mapping (address => bool) public accessHolder;\n\n  /**\n   * @notice The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n  /**\n   * @notice Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @notice Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    require(newOwner != address(0));\n    owner = newOwner;\n  }\n  \n  /**\n   * @notice Adds the provided addresses to Access List.\n   * @param user The address to user to whom access is to be granted.\n   */\n  function addToAccesslist(address user) onlyOwner {\n    accessHolder[user] = true;\n  }\n  \n}\n\n\n/**\n * @title BitIndia Coin\n * @notice The ERC20 Token for Cove Identity.\n */\ncontract BitIndia is IERC20, Ownable {\n    \n    using SafeMathLib for uint256;\n    \n    uint256 public constant totalTokenSupply = 180000000 * 10**18;\n\n    string public name;    // BitIndia\n    string public symbol;  // BitIndia\n    uint8 public constant decimals = 18;\n    \n    uint private publicTransferDealine = 1509494400; //11/01/2017 @ 12:00am (UTC)\n    bool private isPublicTransferAllowed = false;\n    \n    \n    mapping (address => uint256) public balances;\n    //approved[owner][spender]\n    mapping(address => mapping(address => uint256)) approved;\n    \n    function BitIndia(string tokenName, string tokenSymbol) {\n        \n        name = tokenName;\n        symbol = tokenSymbol;\n        balances[msg.sender] = totalTokenSupply;\n\n    }\n    \n    function totalSupply() constant returns (uint256 _totalSupply) {\n        return totalTokenSupply;\n    }\n    \n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n    \n    /* Internal transfer, only can be called by this contract */\n    function _transfer(address _from, address _to, uint256 _value) internal {\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n        require (balances[_from] >= _value);                 // Check if the sender has enough\n        require (balances[_to] + _value > balances[_to]);   // Check for overflows\n        balances[_from] = balances[_from].minus(_value);    // Subtract from the sender\n        balances[_to] = balances[_to].plus(_value);         // Add the same to the recipient\n        Transfer(_from, _to, _value);\n    }\n\n    /**\n     * @notice Send `_value` tokens to `_to` from your account\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n    \n    /**\n     * @notice Send `_value` tokens to `_to` on behalf of `_from`\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        require (_value <= approved[_from][msg.sender]);     // Check allowance\n        approved[_from][msg.sender] = approved[_from][msg.sender].minus(_value);\n        _transfer(_from, _to, _value);\n        return true;\n    }\n    \n    /**\n     * @notice Approve `_value` tokens for `_spender`\n     * @param _spender The address of the sender\n     * @param _value the amount to send\n     */\n    function approve(address _spender, uint256 _value) returns (bool success) {\n        if(balances[msg.sender] >= _value) {\n            approved[msg.sender][_spender] = _value;\n            Approval(msg.sender, _spender, _value);\n            return true;\n        }\n        return false;\n    }\n    \n    /**\n     * @notice Check `_value` tokens allowed to `_spender` by `_owner`\n     * @param _owner The address of the Owner\n     * @param _spender The address of the Spender\n     */\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return approved[_owner][_spender];\n    }\n    \n    /**\n     * @notice Function to allow the Token users to transfer\n     * among themselves.\n     */\n    function allowPublicTransfer() onlyOwner {\n        isPublicTransferAllowed = true;\n    }\n    \n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    \n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    \n}",
  "bytecode": "60606040526359f90e806004556000600560006101000a81548160ff02191690831515021790555034156200003357600080fd5b6040516200128538038062001285833981016040528080518201919060200180518201919050505b5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b8160029080519060200190620000b592919062000127565b508060039080519060200190620000ce92919062000127565b506a94e47b8d68171534000000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5050620001d6565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200016a57805160ff19168380011785556200019b565b828001600101855582156200019b579182015b828111156200019a5782518255916020019190600101906200017d565b5b509050620001aa9190620001ae565b5090565b620001d391905b80821115620001cf576000816000905550600101620001b5565b5090565b90565b61109f80620001e66000396000f300606060405236156100e4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100e9578063095ea7b31461017857806318160ddd146101d25780631ca8b6cb146101fb57806323b872dd1461022457806327e235e31461029d578063313ce567146102ea578063398958011461031957806349a86c9e1461032e57806370a0823114610367578063821648f4146103b45780638da5cb5b1461040557806395d89b411461045a578063a9059cbb146104e9578063dd62ed3e14610543578063f2fde38b146105af575b600080fd5b34156100f457600080fd5b6100fc6105e8565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561013d5780820151818401525b602081019050610121565b50505050905090810190601f16801561016a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561018357600080fd5b6101b8600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610686565b604051808215151515815260200191505060405180910390f35b34156101dd57600080fd5b6101e56107ca565b6040518082815260200191505060405180910390f35b341561020657600080fd5b61020e6107de565b6040518082815260200191505060405180910390f35b341561022f57600080fd5b610283600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506107ed565b604051808215151515815260200191505060405180910390f35b34156102a857600080fd5b6102d4600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506109a0565b6040518082815260200191505060405180910390f35b34156102f557600080fd5b6102fd6109b8565b604051808260ff1660ff16815260200191505060405180910390f35b341561032457600080fd5b61032c6109bd565b005b341561033957600080fd5b610365600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610a37565b005b341561037257600080fd5b61039e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610aee565b6040518082815260200191505060405180910390f35b34156103bf57600080fd5b6103eb600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610b38565b604051808215151515815260200191505060405180910390f35b341561041057600080fd5b610418610b58565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561046557600080fd5b61046d610b7d565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104ae5780820151818401525b602081019050610492565b50505050905090810190601f1680156104db5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104f457600080fd5b610529600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c1b565b604051808215151515815260200191505060405180910390f35b341561054e57600080fd5b610599600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c33565b6040518082815260200191505060405180910390f35b34156105ba57600080fd5b6105e6600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610cbb565b005b60028054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561067e5780601f106106535761010080835404028352916020019161067e565b820191906000526020600020905b81548152906001019060200180831161066157829003601f168201915b505050505081565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015156107bf5781600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190506107c4565b600090505b92915050565b60006a94e47b8d6817153400000090505b90565b6a94e47b8d6817153400000081565b6000600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561087a57600080fd5b61090982600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d9790919063ffffffff16565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610994848484610db1565b600190505b9392505050565b60066020528060005260406000206000915090505481565b601281565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a1857600080fd5b6001600560006101000a81548160ff0219169083151502179055505b5b565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a9257600080fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b5b50565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b60016020528060005260406000206000915054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c135780601f10610be857610100808354040283529160200191610c13565b820191906000526020600020905b815481529060010190602001808311610bf657829003601f168201915b505050505081565b6000610c28338484610db1565b600190505b92915050565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d1657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610d5257600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b50565b6000828211151515610da557fe5b81830390505b92915050565b60008273ffffffffffffffffffffffffffffffffffffffff1614151515610dd757600080fd5b80600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610e2557600080fd5b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401111515610eb357600080fd5b610f0581600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d9790919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f9a81600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461104890919063ffffffff16565b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35b505050565b60008082840190508381101580156110605750828110155b151561106857fe5b8091505b50929150505600a165627a7a723058208524dfefedbeccb2e05018d98936e2a8c4d62ccbeee9d564f32067c9264049940029000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000008426974696e6469610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008424954494e444941000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000008426974696e6469610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008424954494e444941000000000000000000000000000000000000000000000000"
}