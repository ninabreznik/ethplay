{
  "address": "0x4d81198dc71ffd13917da27d1a3f8599ac690535",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DSG_Dice",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-05\n*/\n\npragma solidity ^0.4.25;\n\ninterface DSG {\n    function gamingDividendsReception() payable external;\n}\n\ncontract DSG_Dice{\n    using SafeMath for uint256;\n    \n    address constant public DSG_ADDRESS = 0x696826C18A6Bc9Be4BBfe3c3A6BB9f5a69388687;\n    uint256 public totalDividends;\n    uint256 public totalWinnings;\n    uint256 public totalTurnover;\n    uint256 public totalPlayed;\n    uint256 public maxBet;\n    uint256 public minBet;\n    uint256 public minContractBalance;\n    uint256 public minBetForJackpot;\n    uint256 public jackpotBalance;\n    uint256 public nextPayout;\n    uint256 public ownerDeposit;\n    address[2] public owners;\n    address[2] public candidates;\n    bool public paused;\n    \n    mapping (address => Bet) private usersBets;\n    \n    struct Bet {\n        uint blockNumber;\n        uint bet;\n        bool[6] dice;\n    }\n    \n    modifier onlyOwners(){\n        require(msg.sender == owners[0] || msg.sender == owners[1]);\n        _;\n    }\n    modifier onlyUsers(){\n        require(tx.origin == msg.sender);\n        _;\n    }\n    modifier checkBlockNumber(){\n        uint256 blockNumber = usersBets[msg.sender].blockNumber;\n        if(block.number.sub(blockNumber) >= 250 && blockNumber > 0){\n            emit Result(msg.sender, 601, 0, jackpotBalance, usersBets[msg.sender].bet, usersBets[msg.sender].dice, 0);\n            delete usersBets[msg.sender];\n        }\n        else{\n            _;\n        }\n    }\n    constructor(address secondOwner) public payable{\n        owners[0]   = msg.sender;\n        owners[1]   = secondOwner;\n        ownerDeposit   = msg.value;\n        jackpotBalance = jackpotBalance.add(ownerDeposit.div(1000));\n    }\n    function play(bool dice1, bool dice2, bool dice3, bool dice4, bool dice5, bool dice6) public payable checkBlockNumber onlyUsers{\n        uint256 bet = msg.value;\n        require(checkSolvency(bet), \"Not enough ETH in contract\");\n        require(paused == false, \"Game was stopped\");\n        require(bet >= minBet && bet <= maxBet, \"Amount should be within range\");\n        require(usersBets[msg.sender].bet == 0, \"You have already bet\");\n        bool[6] memory dice = [dice1, dice2, dice3, dice4, dice5, dice6];\n        usersBets[msg.sender].bet = bet;\n        usersBets[msg.sender].blockNumber = block.number;\n        usersBets[msg.sender].dice = dice;\n        totalTurnover = totalTurnover.add(bet);\n        totalPlayed = totalPlayed.add(1);\n        emit PlaceBet(msg.sender, bet, dice, now);\n    }\n    function result() public checkBlockNumber onlyUsers{\n        require(blockhash(usersBets[msg.sender].blockNumber) != 0, \"Your time to determine the result has come out or not yet come\");\n        uint256 r = _random(601);\n        bool[6] memory dice = usersBets[msg.sender].dice;\n        uint256 bet = usersBets[msg.sender].bet;\n        uint256 rate = getXRate(dice);\n        uint256 totalWinAmount;\n        if(getDice(r) == 1 && dice[0] == true){\n            totalWinAmount = totalWinAmount.add(bet.mul(rate).div(100));\n\t\t}\n\t\telse if(getDice(r) == 2 && dice[1] == true){\n\t\t    totalWinAmount = totalWinAmount.add(bet.mul(rate).div(100));\n\t\t}\n\t\telse if(getDice(r) == 3 && dice[2] == true){\n\t\t    totalWinAmount = totalWinAmount.add(bet.mul(rate).div(100));\n\t\t}\n\t\telse if(getDice(r) == 4 && dice[3] == true){\n\t\t    totalWinAmount = totalWinAmount.add(bet.mul(rate).div(100));\n\t\t}\n\t\telse if(getDice(r) == 5 && dice[4] == true){\n\t\t    totalWinAmount = totalWinAmount.add(bet.mul(rate).div(100));\n\t\t}\n\t\telse if(getDice(r) == 6 && dice[5] == true){\n\t\t    totalWinAmount = totalWinAmount.add(bet.mul(rate).div(100));\n\t\t}\n\t\tif(bet >= minBetForJackpot && r == 0 && jackpotBalance > 0){\n\t\t    totalWinAmount = totalWinAmount.add(jackpotBalance);\n\t\t    emit Jackpot(msg.sender, jackpotBalance, now);\n            delete jackpotBalance;\n\t\t}\n\t\tif(totalWinAmount > 0){\n\t\t    msg.sender.transfer(totalWinAmount);\n\t    \ttotalWinnings = totalWinnings.add(totalWinAmount);\n\t\t}\n        jackpotBalance = jackpotBalance.add(bet.div(1000));\n\t\tdelete usersBets[msg.sender];\n\t\temit Result(msg.sender, r, totalWinAmount, jackpotBalance, bet, dice, rate);\n    }\n    function getXRate(bool[6] dice) public pure returns(uint){\n        uint sum;\n        for(uint i = 0; i < dice.length; i++){\n            if(dice[i] == true) sum = sum.add(1);\n        }\n\t\tif(sum == 1) return 580;\n\t\tif(sum == 2) return 290;\n\t\tif(sum == 3) return 195;\n\t\tif(sum == 4) return 147;\n\t\tif(sum == 5) return 117;\n\t}\n    function getDice(uint r) private pure returns (uint){\n\t\tif((r > 0 && r <= 50) || (r > 300 && r <= 350)){\n\t\t\treturn 1;\n\t\t}\n\t\telse if((r > 50 && r <= 100) || (r > 500 && r <= 550)){\n\t\t\treturn 2;\n\t\t}\n\t\telse if((r > 100 && r <= 150) || (r > 450 && r <= 500)){\n\t\t\treturn 3;\n\t\t}\n\t\telse if((r > 150 && r <= 200) || (r > 400 && r <= 450)){\n\t\t\treturn 4;\n\t\t}\n\t\telse if((r > 200 && r <= 250) || (r > 350 && r <= 400)){\n\t\t\treturn 5;\n\t\t}\n\t\telse if((r > 250 && r <= 300) || (r > 550 && r <= 600)){\n\t\t\treturn 6;\n\t\t}\n\t}\n    function checkSolvency(uint bet) view public returns(bool){\n        if(getContractBalance() > bet.add(bet.mul(500).div(100)).add(jackpotBalance)) return true;\n        else return false;\n    }\n    function sendDividends() public {\n        require(getContractBalance() > minContractBalance && now > nextPayout, \"You cannot send dividends\");\n        DSG DSG0 = DSG(DSG_ADDRESS);\n        uint256 balance = getContractBalance();\n        uint256 dividends  = balance.sub(minContractBalance);\n        nextPayout = now.add(7 days);\n        totalDividends = totalDividends.add(dividends);\n        DSG0.gamingDividendsReception.value(dividends)();\n        emit Dividends(balance, dividends, now);\n    }\n     function getContractBalance() public view returns (uint256){\n        return address(this).balance;\n    }\n    function _random(uint256 max) private view returns(uint256){\n        bytes32 hash = blockhash(usersBets[msg.sender].blockNumber);\n        return uint256(keccak256(abi.encode(hash, msg.sender))) % max;\n    }\n    function deposit() public payable onlyOwners{\n        ownerDeposit = ownerDeposit.add(msg.value);\n    }\n    function sendOwnerDeposit(address recipient) public onlyOwners{\n        require(paused == true, 'Game was not stopped');\n        uint256 contractBalance = getContractBalance();\n        if(contractBalance >= ownerDeposit){\n            recipient.transfer(ownerDeposit);\n        }\n        else{\n            recipient.transfer(contractBalance);\n        }\n        delete jackpotBalance;\n        delete ownerDeposit;\n    }\n    function pauseGame(bool option) public onlyOwners{\n        paused = option;\n    }\n    function setMinBet(uint256 eth) public onlyOwners{\n        minBet = eth;\n    }\n    function setMaxBet(uint256 eth) public onlyOwners{\n        maxBet = eth;\n    }\n    function setMinBetForJackpot(uint256 eth) public onlyOwners{\n        minBetForJackpot = eth;\n    }\n    function setMinContractBalance(uint256 eth) public onlyOwners{\n        minContractBalance = eth;\n    }\n    function transferOwnership(address newOwnerAddress, uint8 k) public onlyOwners{\n        candidates[k] = newOwnerAddress;\n    }\n    function confirmOwner(uint8 k) public{\n        require(msg.sender == candidates[k]);\n        owners[k] = candidates[k];\n    }\n    event Dividends(\n        uint256 balance,\n        uint256 dividends,\n        uint256 timestamp\n    );\n    event Jackpot(\n        address indexed player,\n        uint256 jackpot,\n        uint256 timestamp\n    );\n    event PlaceBet(\n        address indexed player,\n        uint256 bet,\n        bool[6] dice,\n        uint256 timestamp\n    );\n    event Result(\n        address indexed player,\n        uint256 indexed random,\n        uint256 totalWinAmount,\n        uint256 jackpotBalance,\n        uint256 bet,\n        bool[6] dice,\n        uint256 winRate\n    );\n}\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {  return 0; }\n        uint256 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n        uint256 c = a / b;\n        return c;\n    }\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n        return c;\n    }\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"setMinContractBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"setMinBetForJackpot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBetForJackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"candidates\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dice1\",\"type\":\"bool\"},{\"name\":\"dice2\",\"type\":\"bool\"},{\"name\":\"dice3\",\"type\":\"bool\"},{\"name\":\"dice4\",\"type\":\"bool\"},{\"name\":\"dice5\",\"type\":\"bool\"},{\"name\":\"dice6\",\"type\":\"bool\"}],\"name\":\"play\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"option\",\"type\":\"bool\"}],\"name\":\"pauseGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTurnover\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"result\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwnerAddress\",\"type\":\"address\"},{\"name\":\"k\",\"type\":\"uint8\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextPayout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sendOwnerDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"setMaxBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"setMinBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"bet\",\"type\":\"uint256\"}],\"name\":\"checkSolvency\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPlayed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWinnings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DSG_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"dice\",\"type\":\"bool[6]\"}],\"name\":\"getXRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"k\",\"type\":\"uint8\"}],\"name\":\"confirmOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"secondOwner\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dividends\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Dividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"jackpot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Jackpot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dice\",\"type\":\"bool[6]\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PlaceBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"random\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalWinAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"jackpotBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dice\",\"type\":\"bool[6]\"},{\"indexed\":false,\"name\":\"winRate\",\"type\":\"uint256\"}],\"name\":\"Result\",\"type\":\"event\"}]",
  "bytecode": "6080604052604051602080620018f68339810160405251600b805433600160a060020a031991821617909155600c8054909116600160a060020a03831617905534600a8190556200007e9062000066906103e8640100000000620000888102620016fa1704565b60085490640100000000620014c0620000ad82021704565b60085550620000c7565b6000808083116200009857600080fd5b8284811515620000a457fe5b04949350505050565b600082820183811015620000c057600080fd5b9392505050565b61181f80620000d76000396000f30060806040526004361061017f5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663025e7c278114610184578063040da8f4146101b85780630d9332e2146101df5780631ec8d4ef146101f95780632e5b21681461021157806330b1b62c146102265780633477ee2e1461023b5780633e32d0bf146102535780634f53126a146102795780635c975abb14610293578063618e9f7c146102bc57806365372147146102d157806369d54554146102e65780636c9740c1146102fb5780636f9fb98a146103225780637b1aa45f146103375780637f55d0d21461034c5780638608e58b14610361578063881eff1e1461038257806388ea41b91461039a5780639619367d146103b2578063997664d7146103c75780639e20b71c146103dc578063a06594d3146103f4578063a8fc32de14610409578063b72481f81461041e578063c1e1e5a914610433578063d0e30db014610448578063e16b503b14610450578063fb48625014610493575b600080fd5b34801561019057600080fd5b5061019c6004356104ae565b60408051600160a060020a039092168252519081900360200190f35b3480156101c457600080fd5b506101cd6104cb565b60408051918252519081900360200190f35b3480156101eb57600080fd5b506101f76004356104d1565b005b34801561020557600080fd5b506101f760043561050a565b34801561021d57600080fd5b506101cd610543565b34801561023257600080fd5b506101cd610549565b34801561024757600080fd5b5061019c60043561054f565b6101f76004351515602435151560443515156064351515608435151560a435151561055c565b34801561028557600080fd5b506101f7600435151561091f565b34801561029f57600080fd5b506102a8610966565b604080519115158252519081900360200190f35b3480156102c857600080fd5b506101cd61096f565b3480156102dd57600080fd5b506101f7610975565b3480156102f257600080fd5b506101cd610eeb565b34801561030757600080fd5b506101f7600160a060020a036004351660ff60243516610ef1565b34801561032e57600080fd5b506101cd610f66565b34801561034357600080fd5b506101cd610f6c565b34801561035857600080fd5b506101cd610f72565b34801561036d57600080fd5b506101f7600160a060020a0360043516610f78565b34801561038e57600080fd5b506101f76004356110a3565b3480156103a657600080fd5b506101f76004356110dc565b3480156103be57600080fd5b506101cd611115565b3480156103d357600080fd5b506101cd61111b565b3480156103e857600080fd5b506102a8600435611121565b34801561040057600080fd5b506101cd61117d565b34801561041557600080fd5b506101f7611183565b34801561042a57600080fd5b506101cd611314565b34801561043f57600080fd5b5061019c61131a565b6101f7611332565b34801561045c57600080fd5b506040805160c08181019092526101cd91369160049160c49190839060069083908390808284375093965061137e95505050505050565b34801561049f57600080fd5b506101f760ff60043516611422565b600b81600281106104bb57fe5b0154600160a060020a0316905081565b60085481565b600b60000154600160a060020a03163314806104fa5750600b60010154600160a060020a031633145b151561050557600080fd5b600655565b600b60000154600160a060020a03163314806105335750600b60010154600160a060020a031633145b151561053e57600080fd5b600755565b60045481565b60075481565b600d81600281106104bb57fe5b600061056661171d565b3360009081526010602052604090205460fa610588438363ffffffff6114a216565b101580156105965750600081115b156106765760085433600081815260106020908152604080832060018101548251858152938401879052918301829052610259957f592d72814610abce0f7b9602ec4426c096d1a26d33973a6a524351094a11c1d4949390929160020190849061012081018383606084015b825461010083900a900460ff161515815260206001928301818104948501949093039092029101808411610602575050509182525060405190819003602001945092505050a3336000908152601060205260408120818155600181018290559061066f600283018261173c565b5050610914565b32331461068257600080fd5b34925061068e83611121565b15156106e4576040805160e560020a62461bcd02815260206004820152601a60248201527f4e6f7420656e6f7567682045544820696e20636f6e7472616374000000000000604482015290519081900360640190fd5b600f5460ff161561073f576040805160e560020a62461bcd02815260206004820152601060248201527f47616d65207761732073746f7070656400000000000000000000000000000000604482015290519081900360640190fd5b600554831015801561075357506004548311155b15156107a9576040805160e560020a62461bcd02815260206004820152601d60248201527f416d6f756e742073686f756c642062652077697468696e2072616e6765000000604482015290519081900360640190fd5b3360009081526010602052604090206001015415610811576040805160e560020a62461bcd02815260206004820152601460248201527f596f75206861766520616c726561647920626574000000000000000000000000604482015290519081900360640190fd5b6040805160c0810182528a15158152891515602080830191909152891515828401528815156060830152871515608083015286151560a08301523360009081526010909152919091206001810185905543815590925061087690600201836006611743565b5060025461088a908463ffffffff6114c016565b6002556003546108a190600163ffffffff6114c016565b60035560405183815233907f59ef8f57e2184bcc23c2591f97a316e29bfa8e00da06b7d3762ac304221bb56490859085904290602081018360c080838360005b838110156108f95781810151838201526020016108e1565b50505050905001828152602001935050505060405180910390a25b505050505050505050565b600b60000154600160a060020a03163314806109485750600b60010154600160a060020a031633145b151561095357600080fd5b600f805460ff1916911515919091179055565b600f5460ff1681565b60025481565b600061097f61171d565b336000908152601060205260408120548190819060fa6109a5438363ffffffff6114a216565b101580156109b35750600081115b15610a935760085433600081815260106020908152604080832060018101548251858152938401879052918301829052610259957f592d72814610abce0f7b9602ec4426c096d1a26d33973a6a524351094a11c1d4949390929160020190849061012081018383606084015b825461010083900a900460ff161515815260206001928301818104948501949093039092029101808411610a1f575050509182525060405190819003602001945092505050a33360009081526010602052604081208181556001810182905590610a8c600283018261173c565b5050610ee3565b323314610a9f57600080fd5b33600090815260106020526040902054401515610b2c576040805160e560020a62461bcd02815260206004820152603e60248201527f596f75722074696d6520746f2064657465726d696e652074686520726573756c60448201527f742068617320636f6d65206f7574206f72206e6f742079657420636f6d650000606482015290519081900360840190fd5b610b376102596114d9565b33600090815260106020526040808220815160c081019283905293995060020191600691908390855b825461010083900a900460ff161515815260206001928301818104948501949093039092029101808411610b6057505033600090815260106020526040902060010154949950939750610bb9935088925061137e915050565b9250610bc486611580565b6001148015610bd65750845115156001145b15610c1357610c0c610bff6064610bf3878763ffffffff6116cc16565b9063ffffffff6116fa16565b839063ffffffff6114c016565b9150610d3d565b610c1c86611580565b6002148015610c315750602085015115156001145b15610c4e57610c0c610bff6064610bf3878763ffffffff6116cc16565b610c5786611580565b6003148015610c6c5750604085015115156001145b15610c8957610c0c610bff6064610bf3878763ffffffff6116cc16565b610c9286611580565b6004148015610ca75750606085015115156001145b15610cc457610c0c610bff6064610bf3878763ffffffff6116cc16565b610ccd86611580565b6005148015610ce25750608085015115156001145b15610cff57610c0c610bff6064610bf3878763ffffffff6116cc16565b610d0886611580565b6006148015610d1d575060a085015115156001145b15610d3d57610d3a610bff6064610bf3878763ffffffff6116cc16565b91505b6007548410158015610d4d575085155b8015610d5b57506000600854115b15610dbb57600854610d7490839063ffffffff6114c016565b60085460408051918252426020830152805192945033927f256609b3631a3103eba398fc72e575f7cc48472c00621c0a8d3dc8611cddd5fb9281900390910190a260006008555b6000821115610e0957604051339083156108fc029084906000818181858888f19350505050158015610df1573d6000803e3d6000fd5b50600154610e05908363ffffffff6114c016565b6001555b610e2d610e1e856103e863ffffffff6116fa16565b6008549063ffffffff6114c016565b6008553360009081526010602052604081208181556001810182905590610e57600283018261173c565b50508533600160a060020a03167f592d72814610abce0f7b9602ec4426c096d1a26d33973a6a524351094a11c1d484600854888a896040518086815260200185815260200184815260200183600660200280838360005b83811015610ec6578181015183820152602001610eae565b505050509050018281526020019550505050505060405180910390a35b505050505050565b60065481565b600b60000154600160a060020a0316331480610f1a5750600b60010154600160a060020a031633145b1515610f2557600080fd5b81600d60ff831660028110610f3657fe5b01805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555050565b30315b90565b600a5481565b60095481565b6000600b810154600160a060020a0316331480610fa25750600b60010154600160a060020a031633145b1515610fad57600080fd5b600f5460ff16151560011461100c576040805160e560020a62461bcd02815260206004820152601460248201527f47616d6520776173206e6f742073746f70706564000000000000000000000000604482015290519081900360640190fd5b611014610f66565b600a54909150811061105d57600a54604051600160a060020a0384169180156108fc02916000818181858888f19350505050158015611057573d6000803e3d6000fd5b50611095565b604051600160a060020a0383169082156108fc029083906000818181858888f19350505050158015611093573d6000803e3d6000fd5b505b505060006008819055600a55565b600b60000154600160a060020a03163314806110cc5750600b60010154600160a060020a031633145b15156110d757600080fd5b600455565b600b60000154600160a060020a03163314806111055750600b60010154600160a060020a031633145b151561111057600080fd5b600555565b60055481565b60005481565b60085460009061115e906111526111456064610bf3876101f463ffffffff6116cc16565b859063ffffffff6114c016565b9063ffffffff6114c016565b611166610f66565b111561117457506001611178565b5060005b919050565b60035481565b6000806000600654611193610f66565b1180156111a1575060095442115b15156111f7576040805160e560020a62461bcd02815260206004820152601960248201527f596f752063616e6e6f742073656e64206469766964656e647300000000000000604482015290519081900360640190fd5b73696826c18a6bc9be4bbfe3c3a6bb9f5a693886879250611216610f66565b915061122d600654836114a290919063ffffffff16565b90506112424262093a8063ffffffff6114c016565b600955600054611258908263ffffffff6114c016565b60008190555082600160a060020a0316639e0bb35e826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b1580156112b557600080fd5b505af11580156112c9573d6000803e3d6000fd5b50506040805186815260208101869052428183015290517ffac2f03c5230c97844f840b003856f39a2fc5a931281a1a4344bfc99986055e094509081900360600192509050a1505050565b60015481565b73696826c18a6bc9be4bbfe3c3a6bb9f5a6938868781565b600b60000154600160a060020a031633148061135b5750600b60010154600160a060020a031633145b151561136657600080fd5b600a54611379903463ffffffff6114c016565b600a55565b600080805b60068110156113c35783816006811061139857fe5b60200201511515600114156113bb576113b882600163ffffffff6114c016565b91505b600101611383565b81600114156113d657610244925061141b565b81600214156113e957610122925061141b565b81600314156113fb5760c3925061141b565b816004141561140d576093925061141b565b816005141561141b57607592505b5050919050565b600d60ff82166002811061143257fe5b0154600160a060020a0316331461144857600080fd5b600d60ff82166002811061145857fe5b0154600160a060020a0316600b60ff83166002811061147357fe5b01805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905550565b600080838311156114b257600080fd5b5050808203805b5092915050565b6000828201838110156114d257600080fd5b9392505050565b336000818152601060209081526040808320548151904081840181905281830195909552815180820383018152606090910191829052805193949386939192918291908401908083835b602083106115425780518252601f199092019160209182019101611523565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209250505081151561157857fe5b069392505050565b60008082118015611592575060328211155b806115ab575061012c821180156115ab575061015e8211155b156115b857506001611178565b6032821180156115c9575060648211155b806115e257506101f4821180156115e257506102268211155b156115ef57506002611178565b606482118015611600575060968211155b8061161957506101c28211801561161957506101f48211155b1561162657506003611178565b609682118015611637575060c88211155b8061165057506101908211801561165057506101c28211155b1561165d57506004611178565b60c88211801561166e575060fa8211155b80611687575061015e8211801561168757506101908211155b1561169457506005611178565b60fa821180156116a6575061012c8211155b806116bf5750610226821180156116bf57506102588211155b1561117857506006611178565b6000808315156116df57600091506114b9565b508282028284828115156116ef57fe5b04146114d257600080fd5b60008080831161170957600080fd5b828481151561171457fe5b04949350505050565b60c0604051908101604052806006906020820280388339509192915050565b5060009055565b6001830191839082156117c55791602002820160005b8382111561179657835183826101000a81548160ff0219169083151502179055509260200192600101602081600001049283019260010302611759565b80156117c35782816101000a81549060ff0219169055600101602081600001049283019260010302611796565b505b506117d19291506117d5565b5090565b610f6991905b808211156117d157805460ff191681556001016117db5600a165627a7a72305820273960111881fa839184019be8b6d06b60eae5ed827d32d7a07a09a912081e130029000000000000000000000000cf768464a08cd22b698758b5fe0de6b6216a886b",
  "constructorArguments": "000000000000000000000000Cf768464A08cd22b698758B5Fe0DE6b6216a886B"
}