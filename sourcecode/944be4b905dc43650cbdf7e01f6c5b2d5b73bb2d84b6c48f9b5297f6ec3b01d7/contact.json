{
  "address": "0xa1fb31fb49b6032a9b3b012ba21de5cedc38163b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "XPAAssets",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-14\n*/\n\npragma solidity ^0.4.21;\n\ninterface Token {\n    function totalSupply() constant external returns (uint256 ts);\n    function balanceOf(address _owner) constant external returns (uint256 balance);\n    function transfer(address _to, uint256 _value) external returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n    function approve(address _spender, uint256 _value) external returns (bool success);\n    function allowance(address _owner, address _spender) constant external returns (uint256 remaining);\n    \n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ninterface XPAAssetToken {\n    function create(address user_, uint256 amount_) external returns(bool success);\n    function burn(uint256 amount_) external returns(bool success);\n    function burnFrom(address user_, uint256 amount_) external returns(bool success);\n    function getDefaultExchangeRate() external returns(uint256);\n    function getSymbol() external returns(bytes32);\n}\n\ninterface Baliv {\n    function getPrice(address fromToken_, address toToken_) external view returns(uint256);\n}\n\ninterface FundAccount {\n    function burn(address Token_, uint256 Amount_) external view returns(bool);\n}\n\ninterface TokenFactory {\n    function createToken(string symbol_, string name_, uint256 defaultExchangeRate_) external returns(address);\n    function getPrice(address token_) external view returns(uint256);\n    function getAssetLength() external view returns(uint256);\n    function getAssetToken(uint256 index_) external view returns(address);\n}\n\ncontract SafeMath {\n    function safeAdd(uint x, uint y)\n        internal\n        pure\n    returns(uint) {\n        uint256 z = x + y;\n        require((z >= x) && (z >= y));\n        return z;\n    }\n\n    function safeSub(uint x, uint y)\n        internal\n        pure\n    returns(uint) {\n        require(x >= y);\n        uint256 z = x - y;\n        return z;\n    }\n\n    function safeMul(uint x, uint y)\n        internal\n        pure\n    returns(uint) {\n        uint z = x * y;\n        require((x == 0) || (z / x == y));\n        return z;\n    }\n    \n    function safeDiv(uint x, uint y)\n        internal\n        pure\n    returns(uint) {\n        require(y > 0);\n        return x / y;\n    }\n\n    function random(uint N, uint salt)\n        internal\n        view\n    returns(uint) {\n        bytes32 hash = keccak256(block.number, msg.sender, salt);\n        return uint(hash) % N;\n    }\n}\n\ncontract Authorization {\n    mapping(address => address) public agentBooks;\n    address public owner;\n    address public operator;\n    address public bank;\n    bool public powerStatus = true;\n    bool public forceOff = false;\n    function Authorization()\n        public\n    {\n        owner = msg.sender;\n        operator = msg.sender;\n        bank = msg.sender;\n    }\n    modifier onlyOwner\n    {\n        assert(msg.sender == owner);\n        _;\n    }\n    modifier onlyOperator\n    {\n        assert(msg.sender == operator || msg.sender == owner);\n        _;\n    }\n    modifier onlyActive\n    {\n        assert(powerStatus);\n        _;\n    }\n    function powerSwitch(\n        bool onOff_\n    )\n        public\n        onlyOperator\n    {\n        if(forceOff) {\n            powerStatus = false;\n        } else {\n            powerStatus = onOff_;\n        }\n    }\n    function transferOwnership(address newOwner_)\n        onlyOwner\n        public\n    {\n        owner = newOwner_;\n    }\n    \n    function assignOperator(address user_)\n        public\n        onlyOwner\n    {\n        operator = user_;\n        agentBooks[bank] = user_;\n    }\n    \n    function assignBank(address bank_)\n        public\n        onlyOwner\n    {\n        bank = bank_;\n    }\n    function assignAgent(\n        address agent_\n    )\n        public\n    {\n        agentBooks[msg.sender] = agent_;\n    }\n    function isRepresentor(\n        address representor_\n    )\n        public\n        view\n    returns(bool) {\n        return agentBooks[representor_] == msg.sender;\n    }\n    function getUser(\n        address representor_\n    )\n        internal\n        view\n    returns(address) {\n        return isRepresentor(representor_) ? representor_ : msg.sender;\n    }\n}\n\ncontract XPAAssets is SafeMath, Authorization {\n    string public version = \"0.5.0\";\n\n    // contracts\n    address public XPA = 0x0090528aeb3a2b736b780fd1b6c478bb7e1d643170;\n    address public oldXPAAssets = 0x00D0F7d665996B745b2399a127D5d84DAcd42D251f;\n    address public newXPAAssets = address(0);\n    address public tokenFactory = 0x001393F1fb2E243Ee68Efe172eBb6831772633A926;\n    // setting\n    uint256 public maxForceOffsetAmount = 1000000 ether;\n    uint256 public minForceOffsetAmount = 10000 ether;\n    \n    // events\n    event eMortgage(address, uint256);\n    event eWithdraw(address, address, uint256);\n    event eRepayment(address, address, uint256);\n    event eOffset(address, address, uint256);\n    event eExecuteOffset(uint256, address, uint256);\n    event eMigrate(address);\n    event eMigrateAmount(address);\n\n    //data\n    mapping(address => uint256) public fromAmountBooks;\n    mapping(address => mapping(address => uint256)) public toAmountBooks;\n    mapping(address => uint256) public forceOffsetBooks;\n    mapping(address => bool) public migrateBooks;\n    address[] public xpaAsset;\n    address public fundAccount;\n    uint256 public profit = 0;\n    mapping(address => uint256) public unPaidFundAccount;\n    uint256 public initCanOffsetTime = 0;\n    \n    //fee\n    uint256 public withdrawFeeRate = 0.02 ether; // 提領手續費\n    uint256 public offsetFeeRate = 0.02 ether;   // 平倉手續費\n    uint256 public forceOffsetBasicFeeRate = 0.02 ether; // 強制平倉基本費\n    uint256 public forceOffsetExecuteFeeRate = 0.01 ether;// 強制平倉執行費\n    uint256 public forceOffsetExtraFeeRate = 0.05 ether; // 強制平倉額外手續費\n    uint256 public forceOffsetExecuteMaxFee = 1000 ether; \n    \n    // constructor\n    function XPAAssets(\n        uint256 initCanOffsetTime_,\n        address XPAAddr,\n        address factoryAddr,\n        address oldXPAAssetsAddr\n    ) public {\n        initCanOffsetTime = initCanOffsetTime_;\n        XPA = XPAAddr;\n        tokenFactory = factoryAddr;\n        oldXPAAssets = oldXPAAssetsAddr;\n    }\n\n    function setFundAccount(\n        address fundAccount_\n    )\n        public\n        onlyOperator\n    {\n        if(fundAccount_ != address(0)) {\n            fundAccount = fundAccount_;\n        }\n    }\n\n    function createToken(\n        string symbol_,\n        string name_,\n        uint256 defaultExchangeRate_\n    )\n        public\n        onlyOperator \n    {\n        address newAsset = TokenFactory(tokenFactory).createToken(symbol_, name_, defaultExchangeRate_);\n        for(uint256 i = 0; i < xpaAsset.length; i++) {\n            if(xpaAsset[i] == newAsset){\n                return;\n            }\n        }\n        xpaAsset.push(newAsset);\n    }\n\n    //抵押 XPA\n    function mortgage(\n        address representor_\n    )\n        onlyActive\n        public\n    {\n        address user = getUser(representor_);\n        uint256 amount_ = Token(XPA).allowance(msg.sender, this); // get mortgage amount\n        if(\n            amount_ >= 100 ether && \n            Token(XPA).transferFrom(msg.sender, this, amount_) \n        ){\n            fromAmountBooks[user] = safeAdd(fromAmountBooks[user], amount_); // update books\n            emit eMortgage(user,amount_); // wirte event\n        }\n    }\n    \n    // 借出 XPA Assets, amount: 指定借出金額\n    function withdraw(\n        address token_,\n        uint256 amount_,\n        address representor_\n    ) \n        onlyActive \n        public \n    {\n        address user = getUser(representor_);\n        if(\n            token_ != XPA &&\n            amount_ > 0 &&\n            amount_ <= safeDiv(safeMul(safeDiv(safeMul(getUsableXPA(user), getPrice(token_)), 1 ether), getHighestMortgageRate()), 1 ether)\n        ){\n            toAmountBooks[user][token_] = safeAdd(toAmountBooks[user][token_],amount_);\n            uint256 withdrawFee = safeDiv(safeMul(amount_,withdrawFeeRate),1 ether); // calculate withdraw fee\n            XPAAssetToken(token_).create(user, safeSub(amount_, withdrawFee));\n            XPAAssetToken(token_).create(this, withdrawFee);\n            emit eWithdraw(user, token_, amount_); // write event\n        }\n    }\n    \n    // 領回 XPA, amount: 指定領回金額\n    function withdrawXPA(\n        uint256 amount_,\n        address representor_\n    )\n        onlyActive\n        public\n    {\n        address user = getUser(representor_);\n        if(\n            amount_ >= 100 ether && \n            amount_ <= getUsableXPA(user)\n        ){\n            fromAmountBooks[user] = safeSub(fromAmountBooks[user], amount_);\n            require(Token(XPA).transfer(user, amount_));\n            emit eWithdraw(user, XPA, amount_); // write event\n        }    \n    }\n    \n    // 檢查額度是否足夠借出 XPA Assets\n    /*function checkWithdraw(\n        address token_,\n        uint256 amount_,\n        address user_\n    ) \n        internal  \n        view\n    returns(bool) {\n        if(\n            token_ != XPA && \n            amount_ <= safeDiv(safeMul(safeDiv(safeMul(getUsableXPA(user_), getPrice(token_)), 1 ether), getHighestMortgageRate()), 1 ether)\n        ){\n            return true;\n        }else if(\n            token_ == XPA && \n            amount_ <= getUsableXPA(user_)\n        ){\n            return true;\n        }else{\n            return false;\n        }\n    }*/\n\n    // 還款 XPA Assets, amount: 指定還回金額\n    function repayment(\n        address token_,\n        uint256 amount_,\n        address representor_\n    )\n        onlyActive \n        public\n    {\n        address user = getUser(representor_);\n        if(\n            XPAAssetToken(token_).burnFrom(user, amount_)\n        ) {\n            toAmountBooks[user][token_] = safeSub(toAmountBooks[user][token_],amount_);\n            emit eRepayment(user, token_, amount_);\n        }\n    }\n    \n    // 平倉 / 強行平倉, user: 指定平倉對象\n    function offset(\n        address user_,\n        address token_\n    )\n        onlyActive\n        public\n    {\n        uint256 userFromAmount = fromAmountBooks[user_] >= maxForceOffsetAmount ? maxForceOffsetAmount : fromAmountBooks[user_];\n        require(block.timestamp > initCanOffsetTime);\n        require(userFromAmount > 0);\n        address user = getUser(user_);\n\n        if(\n            user_ == user &&\n            getLoanAmount(user, token_) > 0\n        ){\n            emit eOffset(user, user_, userFromAmount);\n            uint256 remainingXPA = executeOffset(user_, userFromAmount, token_, offsetFeeRate);\n            if(remainingXPA > 0){\n                require(Token(XPA).transfer(fundAccount, safeDiv(safeMul(safeSub(userFromAmount, remainingXPA), 1 ether), safeAdd(1 ether, offsetFeeRate)))); //轉帳至平倉基金\n            } else {\n                require(Token(XPA).transfer(fundAccount, safeDiv(safeMul(safeSub(userFromAmount, remainingXPA), safeSub(1 ether, offsetFeeRate)), 1 ether))); //轉帳至平倉基金\n            }\n            \n            fromAmountBooks[user_] = safeSub(fromAmountBooks[user_], safeSub(userFromAmount, remainingXPA));\n        }else if(\n            user_ != user && \n            block.timestamp > (forceOffsetBooks[user_] + 28800) &&\n            getMortgageRate(user_) >= getClosingLine()\n        ){\n            forceOffsetBooks[user_] = block.timestamp;\n                \n            uint256 punishXPA = getPunishXPA(user_); //get 10% xpa\n            emit eOffset(user, user_, punishXPA);\n\n            uint256[3] memory forceOffsetFee;\n            forceOffsetFee[0] = safeDiv(safeMul(punishXPA, forceOffsetBasicFeeRate), 1 ether); //基本手續費(收益)\n            forceOffsetFee[1] = safeDiv(safeMul(punishXPA, forceOffsetExtraFeeRate), 1 ether); //額外手續費(平倉基金)\n            forceOffsetFee[2] = safeDiv(safeMul(punishXPA, forceOffsetExecuteFeeRate), 1 ether);//執行手續費(執行者)\n            forceOffsetFee[2] = forceOffsetFee[2] > forceOffsetExecuteMaxFee ? forceOffsetExecuteMaxFee : forceOffsetFee[2];\n\n            profit = safeAdd(profit, forceOffsetFee[0]);\n            uint256 allFee = safeAdd(forceOffsetFee[2],safeAdd(forceOffsetFee[0], forceOffsetFee[1]));\n            remainingXPA = safeSub(punishXPA,allFee);\n\n            for(uint256 i = 0; i < xpaAsset.length; i++) {\n                if(getLoanAmount(user_, xpaAsset[i]) > 0){\n                    remainingXPA = executeOffset(user_, remainingXPA, xpaAsset[i],0);\n                    if(remainingXPA == 0){\n                        break;\n                    }\n                }\n            }\n                \n            fromAmountBooks[user_] = safeSub(fromAmountBooks[user_], safeSub(punishXPA, remainingXPA));\n            require(Token(XPA).transfer(fundAccount, safeAdd(forceOffsetFee[1],safeSub(safeSub(punishXPA, allFee), remainingXPA)))); //轉帳至平倉基金\n            require(Token(XPA).transfer(msg.sender, forceOffsetFee[2])); //執行手續費轉給執行者\n        }\n    }\n    \n    function executeOffset(\n        address user_,\n        uint256 xpaAmount_,\n        address xpaAssetToken,\n        uint256 feeRate\n    )\n        internal\n    returns(uint256){\n        uint256 fromXPAAsset = safeDiv(safeMul(xpaAmount_,getPrice(xpaAssetToken)),1 ether);\n        uint256 userToAmount = toAmountBooks[user_][xpaAssetToken];\n        uint256 fee = safeDiv(safeMul(userToAmount, feeRate), 1 ether);\n        uint256 burnXPA;\n        uint256 burnXPAAsset;\n        if(fromXPAAsset >= safeAdd(userToAmount, fee)){\n            burnXPA = safeDiv(safeMul(safeAdd(userToAmount, fee), 1 ether), getPrice(xpaAssetToken));\n            emit eExecuteOffset(burnXPA, xpaAssetToken, safeAdd(userToAmount, fee));\n            xpaAmount_ = safeSub(xpaAmount_, burnXPA);\n            toAmountBooks[user_][xpaAssetToken] = 0;\n            profit = safeAdd(profit, safeDiv(safeMul(fee,1 ether), getPrice(xpaAssetToken)));\n            if(\n                !FundAccount(fundAccount).burn(xpaAssetToken, userToAmount)\n            ){\n                unPaidFundAccount[xpaAssetToken] = safeAdd(unPaidFundAccount[xpaAssetToken],userToAmount);\n            }\n\n        }else{\n            \n            fee = safeDiv(safeMul(xpaAmount_, feeRate), 1 ether);\n            profit = safeAdd(profit, fee);\n            burnXPAAsset = safeDiv(safeMul(safeSub(xpaAmount_, fee),getPrice(xpaAssetToken)),1 ether);\n            toAmountBooks[user_][xpaAssetToken] = safeSub(userToAmount, burnXPAAsset);\n            emit eExecuteOffset(xpaAmount_, xpaAssetToken, burnXPAAsset);\n            \n            xpaAmount_ = 0;\n            if(\n                !FundAccount(fundAccount).burn(xpaAssetToken, burnXPAAsset)\n            ){\n                unPaidFundAccount[xpaAssetToken] = safeAdd(unPaidFundAccount[xpaAssetToken], burnXPAAsset);\n            }\n            \n        }\n        return xpaAmount_;\n    }\n    \n    function getPunishXPA(\n        address user_\n    )\n        internal\n        view \n    returns(uint256){\n        uint256 userFromAmount = fromAmountBooks[user_];\n        uint256 punishXPA = safeDiv(safeMul(userFromAmount, 0.1 ether),1 ether);\n        if(userFromAmount <= safeAdd(minForceOffsetAmount, 100 ether)){\n            return userFromAmount;\n        }else if(punishXPA < minForceOffsetAmount){\n            return minForceOffsetAmount;\n        }else if(punishXPA > maxForceOffsetAmount){\n            return maxForceOffsetAmount;\n        }else{\n            return punishXPA;\n        }\n    }\n    \n    // 取得用戶抵押率, user: 指定用戶\n    function getMortgageRate(\n        address user_\n    ) \n        public\n        view \n    returns(uint256){\n        if(fromAmountBooks[user_] != 0){\n            uint256 totalLoanXPA = 0;\n            for(uint256 i = 0; i < xpaAsset.length; i++) {\n                totalLoanXPA = safeAdd(totalLoanXPA, safeDiv(safeMul(getLoanAmount(user_,xpaAsset[i]), 1 ether), getPrice(xpaAsset[i])));\n            }\n            return safeDiv(safeMul(totalLoanXPA,1 ether),fromAmountBooks[user_]);\n        }else{\n            return 0;\n        }\n    }\n        \n    // 取得最高抵押率\n    function getHighestMortgageRate() \n        public\n        view \n    returns(uint256){\n        uint256 totalXPA = Token(XPA).totalSupply();\n        uint256 issueRate = safeDiv(safeMul(Token(XPA).balanceOf(this), 1 ether), totalXPA);\n        if(issueRate >= 0.7 ether){\n            return 0.7 ether;\n        }else if(issueRate >= 0.6 ether){\n            return 0.6 ether;\n        }else if(issueRate >= 0.5 ether){\n            return 0.5 ether;\n        }else if(issueRate >= 0.3 ether){\n            return 0.3 ether;\n        }else{\n            return 0.1 ether;\n        }\n    }\n    \n    // 取得平倉線\n    function getClosingLine() \n        public\n        view\n    returns(uint256){\n        uint256 highestMortgageRate = getHighestMortgageRate();\n        if(highestMortgageRate >= 0.6 ether){\n            return safeAdd(highestMortgageRate, 0.1 ether);\n        }else{\n            return 0.6 ether;\n        }\n    }\n    \n    // 取得 XPA Assets 匯率 \n    function getPrice(\n        address token_\n    ) \n        public\n        view\n    returns(uint256){\n        return TokenFactory(tokenFactory).getPrice(token_);\n    }\n    \n    // 取得用戶可提領的XPA(扣掉最高抵押率後的XPA)\n    function getUsableXPA(\n        address user_\n    )\n        public\n        view\n    returns(uint256) {\n        uint256 totalLoanXPA = 0;\n        for(uint256 i = 0; i < xpaAsset.length; i++) {\n            totalLoanXPA = safeAdd(totalLoanXPA, safeDiv(safeMul(getLoanAmount(user_,xpaAsset[i]), 1 ether), getPrice(xpaAsset[i])));\n        }\n        if(fromAmountBooks[user_] > safeDiv(safeMul(totalLoanXPA, 1 ether), getHighestMortgageRate())){\n            return safeSub(fromAmountBooks[user_], safeDiv(safeMul(totalLoanXPA, 1 ether), getHighestMortgageRate()));\n        }else{\n            return 0;\n        }\n    }\n    \n    // 取得用戶可借貸 XPA Assets 最大額度, user: 指定用戶\n    /*function getUsableAmount(\n        address user_,\n        address token_\n    ) \n        public\n        view\n    returns(uint256) {\n        uint256 amount = safeDiv(safeMul(fromAmountBooks[user_], getPrice(token_)), 1 ether);\n        return safeDiv(safeMul(amount, getHighestMortgageRate()), 1 ether);\n    }*/\n    \n    // 取得用戶已借貸 XPA Assets 數量, user: 指定用戶\n    function getLoanAmount(\n        address user_,\n        address token_\n    ) \n        public\n        view\n    returns(uint256) {\n        return toAmountBooks[user_][token_];\n    }\n    \n    // 取得用戶剩餘可借貸 XPA Assets 額度, user: 指定用戶\n    function getRemainingAmount(\n        address user_,\n        address token_\n    ) \n        public\n        view\n    returns(uint256) {\n        uint256 amount = safeDiv(safeMul(getUsableXPA(user_), getPrice(token_)), 1 ether);\n        return safeDiv(safeMul(amount, getHighestMortgageRate()), 1 ether);\n    }\n    \n    function burnFundAccount(\n        address token_,\n        uint256 amount_\n    )\n        onlyOperator\n        public\n    {\n        if(\n            FundAccount(fundAccount).burn(token_, amount_)\n        ){\n            unPaidFundAccount[token_] = safeSub(unPaidFundAccount[token_], amount_);\n        }\n    }\n\n    function transferProfit(\n        address token_,\n        uint256 amount_\n    )\n        onlyOperator \n        public\n    {\n        require(amount_ > 0);\n        if(\n            XPA != token_ && \n            Token(token_).balanceOf(this) >= amount_\n        ) {\n            require(Token(token_).transfer(bank, amount_));\n        }\n\n        if(\n            XPA == token_ && \n            Token(XPA).balanceOf(this) >= amount_\n        ) {\n            profit = safeSub(profit,amount_);\n            require(Token(token_).transfer(bank, amount_));\n        }\n\n    }\n        \n    function setFeeRate(\n        uint256 withDrawFeerate_,\n        uint256 offsetFeerate_,\n        uint256 forceOffsetBasicFeerate_,\n        uint256 forceOffsetExecuteFeerate_,\n        uint256 forceOffsetExtraFeerate_,\n        uint256 forceOffsetExecuteMaxFee_\n    )\n        onlyOperator \n        public\n    {\n        require(withDrawFeerate_ < 0.05 ether);\n        require(offsetFeerate_ < 0.05 ether);\n        require(forceOffsetBasicFeerate_ < 0.05 ether);\n        require(forceOffsetExecuteFeerate_ < 0.05 ether);\n        require(forceOffsetExtraFeerate_ < 0.05 ether);\n        withdrawFeeRate = withDrawFeerate_;\n        offsetFeeRate = offsetFeerate_;\n        forceOffsetBasicFeeRate = forceOffsetBasicFeerate_;\n        forceOffsetExecuteFeeRate = forceOffsetExecuteFeerate_;\n        forceOffsetExtraFeeRate = forceOffsetExtraFeerate_;\n        forceOffsetExecuteMaxFee = forceOffsetExecuteMaxFee_;\n    }\n    \n    function setForceOffsetAmount(\n        uint256 maxForceOffsetAmount_,\n        uint256 minForceOffsetAmount_\n    )\n        onlyOperator\n        public\n    {\n        maxForceOffsetAmount = maxForceOffsetAmount_;\n        minForceOffsetAmount = minForceOffsetAmount_;\n    }\n        \n    function migrate(\n        address newContract_\n    )\n        public\n        onlyOwner\n    {\n        require(newContract_ != address(0));\n        if(\n            newXPAAssets == address(0) &&\n            XPAAssets(newContract_).transferXPAAssetAndProfit(xpaAsset, profit) &&\n            Token(XPA).transfer(newContract_, Token(XPA).balanceOf(this))\n        ) {\n            forceOff = true;\n            powerStatus = false;\n            newXPAAssets = newContract_;\n            for(uint256 i = 0; i < xpaAsset.length; i++) {\n                XPAAssets(newContract_).transferUnPaidFundAccount(xpaAsset[i], unPaidFundAccount[xpaAsset[i]]);\n            }\n            emit eMigrate(newContract_);\n        }\n    }\n    \n    function transferXPAAssetAndProfit(\n        address[] xpaAsset_,\n        uint256 profit_\n    )\n        public\n        onlyOperator\n    returns(bool) {\n        require(msg.sender == oldXPAAssets);\n        xpaAsset = xpaAsset_;\n        profit = profit_;\n        return true;\n    }\n    \n    function transferUnPaidFundAccount(\n        address xpaAsset_,\n        uint256 unPaidAmount_\n    )\n        public\n        onlyOperator\n    returns(bool) {\n        require(msg.sender == oldXPAAssets);\n        unPaidFundAccount[xpaAsset_] = unPaidAmount_;\n        return true;\n    }\n    \n    function migratingAmountBooks(\n        address user_,\n        address newContract_\n    )\n        public\n        onlyOperator\n    {\n        XPAAssets(newContract_).migrateAmountBooks(user_); \n    }\n    \n    function migrateAmountBooks(\n        address user_\n    )\n        public\n        onlyOperator \n    {\n        require(msg.sender == oldXPAAssets);\n        require(!migrateBooks[user_]);\n\n        migrateBooks[user_] = true;\n        fromAmountBooks[user_] = safeAdd(fromAmountBooks[user_],XPAAssets(oldXPAAssets).getFromAmountBooks(user_));\n        forceOffsetBooks[user_] = XPAAssets(oldXPAAssets).getForceOffsetBooks(user_);\n        for(uint256 i = 0; i < xpaAsset.length; i++) {\n            toAmountBooks[user_][xpaAsset[i]] = safeAdd(toAmountBooks[user_][xpaAsset[i]], XPAAssets(oldXPAAssets).getLoanAmount(user_,xpaAsset[i]));\n        }\n        emit eMigrateAmount(user_);\n    }\n    \n    function getFromAmountBooks(\n        address user_\n    )\n        public\n        view \n    returns(uint256) {\n        return fromAmountBooks[user_];\n    }\n    \n    function getForceOffsetBooks(\n        address user_\n    )\n        public \n        view \n    returns(uint256) {\n        return forceOffsetBooks[user_];\n    }\n}",
  "bytecode": "606060409081526003805460a860020a60ff021960a060020a60ff021990911674010000000000000000000000000000000000000000171690558051908101604052600581527f302e352e300000000000000000000000000000000000000000000000000000006020820152600490805162000080929160200190620001f3565b5060058054600160a060020a03199081167390528aeb3a2b736b780fd1b6c478bb7e1d6431701790915560068054821673d0f7d665996b745b2399a127d5d84dacd42d251f179055600780548216905560088054909116731393f1fb2e243ee68efe172ebb6831772633a92617905569d3c21bcecceda100000060095569021e19e0c9bab2400000600a556000601181905560135566470de4df82000060148190556015819055601655662386f26fc1000060175566b1a2bc2ec50000601855683635c9adc5dea0000060195534156200015957600080fd5b604051608080620035e38339810160405280805191906020018051919060200180519190602001805160018054600160a060020a031990811633600160a060020a039081169182179093556002805483168217905560038054831690911790556013979097556005805488169682169690961790955560088054871694861694909417909355505060068054909316911617905562000298565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200023657805160ff191683800117855562000266565b8280016001018555821562000266579182015b828111156200026657825182559160200191906001019062000249565b506200027492915062000278565b5090565b6200029591905b808211156200027457600081556001016200027f565b90565b61333b80620002a86000396000f3006060604052600436106102a55763ffffffff60e060020a600035041663126f992c81146102aa5780631390df6c146102d157806320e979b1146103005780632539c8641461032157806328a20a2f146103525780632f8061d4146103a357806332d05c6d146103cc57806335ee2f8a146103ee57806341976e0914610401578063419a88b614610420578063426365ad1461043357806354fd4d501461044c578063570ca735146104d6578063590e2d3e146104e95780635b0605301461050e5780635fc6518f146105a357806366acdd34146105c257806366d16cc3146105d85780636790aee8146105eb57806369328dec1461060a5780636b1bfd33146106335780636bee9cfa1461065257806375ae51ce1461066557806375e88e3a14610678578063767eb6511461069757806376cdb03b146106bc57806379d007f7146106cf5780637ec4edbe146106e257806384385c6f146107075780638a8f5b79146107265780638da5cb5b146107395780638e543a121461074c5780639773489a146107715780639dbda90214610784578063a036f0f814610797578063a3e20d71146107b6578063a46c792c146107d8578063a4e02fcc146107f7578063b15fbfe614610819578063b37f17ee14610838578063b5afd61b1461085d578063b791f3bc14610870578063c40fec3a1461088f578063cc9a31a7146108a2578063ce5494bb146108c1578063ce9e673b146108e0578063ced0d31d146108f3578063d09119b414610918578063d0c2918e14610937578063d1376daa14610956578063d43a186714610969578063d7cd6c1314610988578063d9a8748c146109aa578063dd1219fd146109bd578063df9204b6146109d5578063e77772fe146109e8578063ea99e689146109fb578063f1da7e6314610a0e578063f2fde38b14610a2d575b600080fd5b34156102b557600080fd5b6102bd610a4c565b604051901515815260200160405180910390f35b34156102dc57600080fd5b6102e4610a6e565b604051600160a060020a03909116815260200160405180910390f35b341561030b57600080fd5b61031f600160a060020a0360043516610a7d565b005b341561032c57600080fd5b610340600160a060020a0360043516610ab7565b60405190815260200160405180910390f35b341561035d57600080fd5b6102bd60046024813581810190830135806020818102016040519081016040528093929190818152602001838360200280828437509496505093359350610ac992505050565b34156103ae57600080fd5b61031f600160a060020a036004358116906024359060443516610b38565b34156103d757600080fd5b61031f600435600160a060020a0360243516610c7f565b34156103f957600080fd5b610340610ddf565b341561040c57600080fd5b610340600160a060020a0360043516610de5565b341561042b57600080fd5b6102e4610e54565b341561043e57600080fd5b61031f600435602435610e63565b341561045757600080fd5b61045f610ea1565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561049b578082015183820152602001610483565b50505050905090810190601f1680156104c85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104e157600080fd5b6102e4610f3f565b34156104f457600080fd5b610340600160a060020a0360043581169060243516610f4e565b341561051957600080fd5b61031f60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405281815292919060208401838380828437509496505093359350610f6b92505050565b34156105ae57600080fd5b6102e4600160a060020a0360043516611168565b34156105cd57600080fd5b6102e4600435611183565b34156105e357600080fd5b6103406111ab565b34156105f657600080fd5b610340600160a060020a03600435166111b1565b341561061557600080fd5b61031f600160a060020a0360043581169060243590604435166111c3565b341561063e57600080fd5b61031f600160a060020a03600435166113f1565b341561065d57600080fd5b610340611452565b341561067057600080fd5b610340611458565b341561068357600080fd5b610340600160a060020a036004351661145e565b34156106a257600080fd5b610340600160a060020a0360043581169060243516611479565b34156106c757600080fd5b6102e46114ad565b34156106da57600080fd5b6103406114bc565b34156106ed57600080fd5b61031f600160a060020a03600435811690602435166114c2565b341561071257600080fd5b61031f600160a060020a0360043516611aed565b341561073157600080fd5b6102e4611b43565b341561074457600080fd5b6102e4611b52565b341561075757600080fd5b610340600160a060020a0360043581169060243516611b61565b341561077c57600080fd5b610340611b8c565b341561078f57600080fd5b610340611b92565b34156107a257600080fd5b610340600160a060020a0360043516611d03565b34156107c157600080fd5b6102bd600160a060020a0360043516602435611de6565b34156107e357600080fd5b61031f600160a060020a0360043516611e58565b341561080257600080fd5b61031f600160a060020a0360043516602435611e88565b341561082457600080fd5b610340600160a060020a03600435166120e3565b341561084357600080fd5b61031f600160a060020a03600435811690602435166120fe565b341561086857600080fd5b61034061218c565b341561087b57600080fd5b61031f600160a060020a0360043516612192565b341561089a57600080fd5b6103406124b4565b34156108ad57600080fd5b6102bd600160a060020a03600435166124ba565b34156108cc57600080fd5b61031f600160a060020a03600435166124dd565b34156108eb57600080fd5b610340612836565b34156108fe57600080fd5b61031f60043560243560443560643560843560a43561283c565b341561092357600080fd5b61031f600160a060020a03600435166128eb565b341561094257600080fd5b6102bd600160a060020a0360043516612aa0565b341561096157600080fd5b610340612ab5565b341561097457600080fd5b610340600160a060020a0360043516612afa565b341561099357600080fd5b61031f600160a060020a0360043516602435612b0c565b34156109b557600080fd5b6102e4612bf1565b34156109c857600080fd5b61031f6004351515612c00565b34156109e057600080fd5b6102bd612ca7565b34156109f357600080fd5b6102e4612cb7565b3415610a0657600080fd5b610340612cc6565b3415610a1957600080fd5b610340600160a060020a0360043516612ccc565b3415610a3857600080fd5b61031f600160a060020a0360043516612d59565b6003547501000000000000000000000000000000000000000000900460ff1681565b600654600160a060020a031681565b60015433600160a060020a03908116911614610a9557fe5b60038054600160a060020a031916600160a060020a0392909216919091179055565b60126020526000908152604090205481565b60025460009033600160a060020a0390811691161480610af7575060015433600160a060020a039081169116145b1515610aff57fe5b60065433600160a060020a03908116911614610b1a57600080fd5b600f838051610b2d929160200190613220565b505060115550600190565b60035460009060a060020a900460ff161515610b5057fe5b610b5982612d93565b905083600160a060020a03166379cc6790828560405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610baf57600080fd5b5af11515610bbc57600080fd5b5050506040518051905015610c7957600160a060020a038082166000908152600c6020908152604080832093881683529290522054610bfb9084612db0565b600160a060020a038083166000908152600c602090815260408083209389168352929052819020919091557ffa6a16645a395100c51e6445cb350ca9711662c961c9e4dbb6d41c45ab8691cd9082908690869051600160a060020a039384168152919092166020820152604080820192909252606001905180910390a15b50505050565b60035460009060a060020a900460ff161515610c9757fe5b610ca082612d93565b905068056bc75e2d631000008310158015610cc35750610cbf81611d03565b8311155b15610dda57600160a060020a0381166000908152600b6020526040902054610ceb9084612db0565b600160a060020a038083166000908152600b60205260409081902092909255600554169063a9059cbb90839086905160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610d5a57600080fd5b5af11515610d6757600080fd5b505050604051805190501515610d7c57600080fd5b6005547fc4e9fd0b0814b142a8dce2da2fb5bbbc63e23ecc9dc77fbdf7e6785b65821073908290600160a060020a031685604051600160a060020a039384168152919092166020820152604080820192909252606001905180910390a15b505050565b60135481565b600854600090600160a060020a03166341976e098360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610e3857600080fd5b5af11515610e4557600080fd5b50505060405180519392505050565b600554600160a060020a031681565b60025433600160a060020a0390811691161480610e8e575060015433600160a060020a039081169116145b1515610e9657fe5b600991909155600a55565b60048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f375780601f10610f0c57610100808354040283529160200191610f37565b820191906000526020600020905b815481529060010190602001808311610f1a57829003601f168201915b505050505081565b600254600160a060020a031681565b600c60209081526000928352604080842090915290825290205481565b600254600090819033600160a060020a0390811691161480610f9b575060015433600160a060020a039081169116145b1515610fa357fe5b600854600160a060020a0316635b0605308686866040518463ffffffff1660e060020a028152600401808060200180602001848152602001838103835286818151815260200191508051906020019080838360005b83811015611010578082015183820152602001610ff8565b50505050905090810190601f16801561103d5780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b8381101561107357808201518382015260200161105b565b50505050905090810190601f1680156110a05780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15156110c157600080fd5b5af115156110ce57600080fd5b5050506040518051925060009150505b600f548110156111295781600160a060020a0316600f8281548110151561110157fe5b600091825260209091200154600160a060020a0316141561112157611161565b6001016110de565b600f80546001810161113b8382613283565b5060009182526020909120018054600160a060020a031916600160a060020a0384161790555b5050505050565b600060208190529081526040902054600160a060020a031681565b600f80548290811061119157fe5b600091825260209091200154600160a060020a0316905081565b60115481565b600b6020526000908152604090205481565b600354600090819060a060020a900460ff1615156111dd57fe5b6111e683612d93565b600554909250600160a060020a038681169116148015906112075750600084115b801561124b575061124761123161123f61123161122386611d03565b61122c8a610de5565b612dc7565b670de0b6b3a7640000612df5565b61122c611b92565b8411155b1561116157600160a060020a038083166000908152600c60209081526040808320938916835292905220546112809085612e16565b600160a060020a038084166000908152600c60209081526040808320938a16835292905220556014546112b890611231908690612dc7565b905084600160a060020a0316630ecaea73836112d48785612db0565b60405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561131757600080fd5b5af1151561132457600080fd5b50505060405180515050600160a060020a038516630ecaea73308360405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561138257600080fd5b5af1151561138f57600080fd5b50505060405180519050507fc4e9fd0b0814b142a8dce2da2fb5bbbc63e23ecc9dc77fbdf7e6785b65821073828686604051600160a060020a039384168152919092166020820152604080820192909252606001905180910390a15050505050565b60025433600160a060020a039081169116148061141c575060015433600160a060020a039081169116145b151561142457fe5b600160a060020a0381161561144f5760108054600160a060020a031916600160a060020a0383161790555b50565b60155481565b600a5481565b600160a060020a03166000908152600d602052604090205490565b60008061149461123161148b86611d03565b61122c86610de5565b90506114a56112318261122c611b92565b949350505050565b600354600160a060020a031681565b60185481565b6000806000806114d06132a7565b600354600090819060a060020a900460ff1615156114ea57fe5b600954600160a060020a038a166000908152600b6020526040902054101561152a57600160a060020a0389166000908152600b602052604090205461152e565b6009545b601354909750421161153f57600080fd5b6000871161154c57600080fd5b61155589612d93565b955085600160a060020a031689600160a060020a03161480156115815750600061157f878a611b61565b115b15611795577fbf9f44ee4acb3e5987bb0eded9a112002728be975cd2547168a694a0cee856c0868a89604051600160a060020a039384168152919092166020820152604080820192909252606001905180910390a16115e489888a601554612e33565b945060008511156116a957600554601054600160a060020a039182169163a9059cbb911661163f6116266116188c8b612db0565b670de0b6b3a7640000612dc7565b61163a670de0b6b3a7640000601554612e16565b612df5565b60405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561168257600080fd5b5af1151561168f57600080fd5b5050506040518051905015156116a457600080fd5b61174b565b600554601054600160a060020a039182169163a9059cbb91166116e66112316116d28c8b612db0565b61122c670de0b6b3a7640000601554612db0565b60405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561172957600080fd5b5af1151561173657600080fd5b50505060405180519050151561174b57600080fd5b600160a060020a0389166000908152600b6020526040902054611777906117728988612db0565b612db0565b600160a060020a038a166000908152600b6020526040902055611ae2565b85600160a060020a031689600160a060020a0316141580156117d25750600160a060020a0389166000908152600d60205260409020546170800142115b80156117ed57506117e1612ab5565b6117ea8a612ccc565b10155b15611ae257600160a060020a0389166000908152600d602052604090204290556118168961319c565b93507fbf9f44ee4acb3e5987bb0eded9a112002728be975cd2547168a694a0cee856c0868a86604051600160a060020a039384168152919092166020820152604080820192909252606001905180910390a161187761123185601654612dc7565b835260185461188b90611231908690612dc7565b60208401526017546118a290611231908690612dc7565b604084019081526019549051116118bd5760408301516118c1565b6019545b60408401526011546118db908460005b6020020151612e16565b6011556118f860408401516118f385518660016118d1565b612e16565b91506119048483612db0565b9450600090505b600f5481101561198e5760006119448a600f8481548110151561192a57fe5b600091825260209091200154600160a060020a0316611b61565b1115611986576119788986600f8481548110151561195e57fe5b6000918252602082200154600160a060020a031690612e33565b94508415156119865761198e565b60010161190b565b600160a060020a0389166000908152600b60205260409020546119b5906117728688612db0565b600160a060020a03808b166000908152600b60205260409020919091556005546010549082169163a9059cbb9116611a0186600160200201516118f36119fb8a89612db0565b8b612db0565b60405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515611a4457600080fd5b5af11515611a5157600080fd5b505050604051805190501515611a6657600080fd5b600554600160a060020a031663a9059cbb33604086015160405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515611ac057600080fd5b5af11515611acd57600080fd5b505050604051805190501515611ae257600080fd5b505050505050505050565b60015433600160a060020a03908116911614611b0557fe5b60028054600160a060020a03928316600160a060020a0319918216811790925560035490921660009081526020819052604090208054909216179055565b600754600160a060020a031681565b600154600160a060020a031681565b600160a060020a039182166000908152600c6020908152604080832093909416825291909152205490565b60195481565b60055460009081908190600160a060020a03166318160ddd6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611bd857600080fd5b5af11515611be557600080fd5b5050506040518051600554909350611c749150611c6e90600160a060020a03166370a082313060405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515611c4957600080fd5b5af11515611c5657600080fd5b50505060405180519050670de0b6b3a7640000612dc7565b83612df5565b90506709b6e64a8ec600008110611c95576709b6e64a8ec600009250611cfe565b670853a0d2313c00008110611cb457670853a0d2313c00009250611cfe565b6706f05b59d3b200008110611cd3576706f05b59d3b200009250611cfe565b670429d069189e00008110611cf257670429d069189e00009250611cfe565b67016345785d8a000092505b505090565b600080805b600f54811015611d6557611d5b826118f3611d2f61161888600f8781548110151561192a57fe5b61163a600f86815481101515611d4157fe5b600091825260209091200154600160a060020a0316610de5565b9150600101611d08565b611d82611d7a83670de0b6b3a7640000612dc7565b61163a611b92565b600160a060020a0385166000908152600b60205260409020541115611dda57600160a060020a0384166000908152600b6020526040902054611dd390611772611d7a85670de0b6b3a7640000612dc7565b9250611ddf565b600092505b5050919050565b60025460009033600160a060020a0390811691161480611e14575060015433600160a060020a039081169116145b1515611e1c57fe5b60065433600160a060020a03908116911614611e3757600080fd5b50600160a060020a0391909116600090815260126020526040902055600190565b600160a060020a033381166000908152602081905260409020805491909216600160a060020a0319909116179055565b60025433600160a060020a0390811691161480611eb3575060015433600160a060020a039081169116145b1515611ebb57fe5b60008111611ec857600080fd5b600554600160a060020a03838116911614801590611f4a57508082600160a060020a03166370a082313060405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515611f3057600080fd5b5af11515611f3d57600080fd5b5050506040518051905010155b15611fcb57600354600160a060020a038084169163a9059cbb91168360405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515611fa957600080fd5b5af11515611fb657600080fd5b505050604051805190501515611fcb57600080fd5b600554600160a060020a03838116911614801561204f57506005548190600160a060020a03166370a082313060405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561203557600080fd5b5af1151561204257600080fd5b5050506040518051905010155b156120df5761206060115482612db0565b601155600354600160a060020a038084169163a9059cbb91168360405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156120bd57600080fd5b5af115156120ca57600080fd5b5050506040518051905015156120df57600080fd5b5050565b600160a060020a03166000908152600b602052604090205490565b60025433600160a060020a0390811691161480612129575060015433600160a060020a039081169116145b151561213157fe5b80600160a060020a031663b791f3bc8360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b151561217f57600080fd5b5af1151561116157600080fd5b60095481565b60025460009033600160a060020a03908116911614806121c0575060015433600160a060020a039081169116145b15156121c857fe5b60065433600160a060020a039081169116146121e357600080fd5b600160a060020a0382166000908152600e602052604090205460ff161561220957600080fd5b600160a060020a038083166000908152600e60209081526040808320805460ff19166001179055600b90915290819020546006546122a693919291169063b15fbfe69086905160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561228a57600080fd5b5af1151561229757600080fd5b50505060405180519050612e16565b600160a060020a038084166000908152600b6020526040908190209290925560065416906375e88e3a9084905160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561230e57600080fd5b5af1151561231b57600080fd5b5050506040518051600160a060020a0384166000908152600d60205260408120919091559150505b600f5481101561247357600160a060020a0382166000908152600c60205260408120600f805461241d9391908590811061237957fe5b6000918252602080832090910154600160a060020a039081168452908301939093526040909101902054600654600f805492939190911691638e543a12918791879081106123c357fe5b600091825260209091200154600160a060020a031660405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401602060405180830381600087803b151561228a57600080fd5b600160a060020a0383166000908152600c60205260408120600f80549192918590811061244657fe5b6000918252602080832090910154600160a060020a03168352820192909252604001902055600101612343565b7f901da904e758aa932aeb3ad6c6fec24fea73e68c638f5cf38a6f6e60677622ce82604051600160a060020a03909116815260200160405180910390a15050565b60175481565b600160a060020a0390811660009081526020819052604090205433821691161490565b60015460009033600160a060020a039081169116146124f857fe5b600160a060020a038216151561250d57600080fd5b600754600160a060020a03161580156125d4575081600160a060020a03166328a20a2f600f6011546040518363ffffffff1660e060020a0281526004018080602001838152602001828103825284818154815260200191508054801561259c57602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161257e575b50509350505050602060405180830381600087803b15156125bc57600080fd5b5af115156125c957600080fd5b505050604051805190505b80156126a45750600554600160a060020a031663a9059cbb83826370a082313060405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561263257600080fd5b5af1151561263f57600080fd5b5050506040518051905060405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561268c57600080fd5b5af1151561269957600080fd5b505050604051805190505b156120df575060038054750100000000000000000000000000000000000000000075ff000000000000000000000000000000000000000000199091161774ff00000000000000000000000000000000000000001916905560078054600160a060020a031916600160a060020a03831617905560005b600f548110156127f55781600160a060020a031663a3e20d71600f8381548110151561274157fe5b6000918252602082200154600f8054600160a060020a03909216926012929091908790811061276c57fe5b6000918252602080832090910154600160a060020a03168352820192909252604090810190912054905160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156127d657600080fd5b5af115156127e357600080fd5b50505060405180515050600101612719565b7f74c5cc2c641422a77f7ad46459e9490047d8cf74b928e77f6493d0ef90c772a482604051600160a060020a03909116815260200160405180910390a15050565b60165481565b60025433600160a060020a0390811691161480612867575060015433600160a060020a039081169116145b151561286f57fe5b66b1a2bc2ec50000861061288257600080fd5b66b1a2bc2ec50000851061289557600080fd5b66b1a2bc2ec5000084106128a857600080fd5b66b1a2bc2ec5000083106128bb57600080fd5b66b1a2bc2ec5000082106128ce57600080fd5b601495909555601593909355601691909155601755601855601955565b600354600090819060a060020a900460ff16151561290557fe5b61290e83612d93565b600554909250600160a060020a031663dd62ed3e333060405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401602060405180830381600087803b151561296957600080fd5b5af1151561297657600080fd5b505050604051805191505068056bc75e2d631000008110801590612a105750600554600160a060020a03166323b872dd33308460405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b15156129f857600080fd5b5af11515612a0557600080fd5b505050604051805190505b15610dda57600160a060020a0382166000908152600b6020526040902054612a389082612e16565b600160a060020a0383166000908152600b602052604090819020919091557f9bc0edc04558e16448c0601508fdc1d24850bfb6123399cd5b88777aea4b1d46908390839051600160a060020a03909216825260208201526040908101905180910390a1505050565b600e6020526000908152604090205460ff1681565b600080612ac0611b92565b9050670853a0d2313c00008110612aea57612ae38167016345785d8a0000612e16565b9150612af6565b670853a0d2313c000091505b5090565b600d6020526000908152604090205481565b60025433600160a060020a0390811691161480612b37575060015433600160a060020a039081169116145b1515612b3f57fe5b601054600160a060020a0316639dc29fac838360405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515612b9557600080fd5b5af11515612ba257600080fd5b50505060405180519050156120df57600160a060020a038216600090815260126020526040902054612bd49082612db0565b600160a060020a0383166000908152601260205260409020555050565b601054600160a060020a031681565b60025433600160a060020a0390811691161480612c2b575060015433600160a060020a039081169116145b1515612c3357fe5b6003547501000000000000000000000000000000000000000000900460ff1615612c7a576003805474ff00000000000000000000000000000000000000001916905561144f565b6003805482151560a060020a0274ff00000000000000000000000000000000000000001990911617905550565b60035460a060020a900460ff1681565b600854600160a060020a031681565b60145481565b600160a060020a0381166000908152600b60205260408120548190819015611dda575060009050805b600f54811015612d2657612d1c826118f3611d2f61161888600f8781548110151561192a57fe5b9150600101612cf5565b611dd3612d3b83670de0b6b3a7640000612dc7565b600160a060020a0386166000908152600b6020526040902054612df5565b60015433600160a060020a03908116911614612d7157fe5b60018054600160a060020a031916600160a060020a0392909216919091179055565b6000612d9e826124ba565b612da85733612daa565b815b92915050565b60008082841015612dc057600080fd5b5050900390565b6000828202831580612de35750828482811515612de057fe5b04145b1515612dee57600080fd5b9392505050565b6000808211612e0357600080fd5b8183811515612e0e57fe5b049392505050565b6000828201838110801590612de3575082811015612dee57600080fd5b600080600080600080612e4c6112318a61122c8b610de5565b600160a060020a03808c166000908152600c60209081526040808320938d16835292905220549095509350612e846112318589612dc7565b9250612e908484612e16565b851061301b57612eaf612ea66116188686612e16565b61163a8a610de5565b91507f6845940b5d385ddd8dccd32f8ecfa579f74efa6c1ca32e81fe928485cfb92c018289612ede8787612e16565b604051928352600160a060020a0390911660208301526040808301919091526060909101905180910390a1612f138983612db0565b600160a060020a03808c166000908152600c60209081526040808320938d16835292905290812055601154909950612f63906118f3612f5a86670de0b6b3a7640000612dc7565b61163a8c610de5565b601155601054600160a060020a0316639dc29fac898660405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515612fbc57600080fd5b5af11515612fc957600080fd5b50505060405180519050151561301657600160a060020a038816600090815260126020526040902054612ffc9085612e16565b600160a060020a0389166000908152601260205260409020555b61318e565b6130286112318a89612dc7565b925061303660115484612e16565b6011556130526112316130498b86612db0565b61122c8b610de5565b905061305e8482612db0565b600160a060020a03808c166000908152600c60209081526040808320938d168352929052819020919091557f6845940b5d385ddd8dccd32f8ecfa579f74efa6c1ca32e81fe928485cfb92c01908a908a90849051928352600160a060020a0390911660208301526040808301919091526060909101905180910390a160105460009950600160a060020a0316639dc29fac898360405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561313457600080fd5b5af1151561314157600080fd5b50505060405180519050151561318e57600160a060020a0388166000908152601260205260409020546131749082612e16565b600160a060020a0389166000908152601260205260409020555b509698975050505050505050565b600160a060020a0381166000908152600b6020526040812054816131cb6112318367016345785d8a0000612dc7565b90506131e2600a5468056bc75e2d63100000612e16565b82116131f057819250611ddf565b600a5481101561320457600a549250611ddf565b600954811115613218576009549250611ddf565b809250611ddf565b828054828255906000526020600020908101928215613277579160200282015b828111156132775782518254600160a060020a031916600160a060020a039190911617825560209290920191600190910190613240565b50612af69291506132ce565b815481835581811511610dda57600083815260209020610dda9181019083016132f5565b60606040519081016040526003815b60008152602001906001900390816132b65790505090565b6132f291905b80821115612af6578054600160a060020a03191681556001016132d4565b90565b6132f291905b80821115612af657600081556001016132fb5600a165627a7a72305820d88c1ba92341281bd30617da4cb406150b0c3084cb6b7144528361df0809c7170029000000000000000000000000000000000000000000000000000000005afe178000000000000000000000000090528aeb3a2b736b780fd1b6c478bb7e1d6431700000000000000000000000001393f1fb2e243ee68efe172ebb6831772633a926000000000000000000000000d0f7d665996b745b2399a127d5d84dacd42d251f",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000005afe178000000000000000000000000090528aeb3a2b736b780fd1b6c478bb7e1d6431700000000000000000000000001393f1fb2e243ee68efe172ebb6831772633a926000000000000000000000000d0f7d665996b745b2399a127d5d84dacd42d251f"
}