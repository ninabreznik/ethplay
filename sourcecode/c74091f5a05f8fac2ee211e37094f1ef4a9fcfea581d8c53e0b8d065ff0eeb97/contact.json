{
  "address": "0x232a46aa31a7914d5a6a3642ffb89f82854f0604",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GPAAirDrop",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-25\n*/\n\npragma solidity ^0.4.25;\n\n// File: node_modules\\openzeppelin-solidity\\contracts\\ownership\\Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: contracts\\GPAAirDrop.sol\n\n/**\n * @title GPA Token AirDrop\n * @dev The main GPA AirDrop contract\n */\ncontract GPAAirDrop is Ownable {\n  using SafeMath for uint256;\n\n  uint8 public decimals;\n\n  event AirdropTransferCompleted(uint256 _value);\n  event ChangeDecimals(uint8 _decimals);\n  event Fallback(address indexed _from, uint256 _value);\n\n  constructor() public {\n    decimals = 18;\n  }\n\n  function () public payable {\n    emit Fallback(msg.sender, msg.value);\n    //revert();\n  }\n\n  /*\n  * @dev Fix for the ERC20 short address attack\n  */\n  modifier onlyPayloadSize(uint size) {\n   assert(msg.data.length >= size + 4);\n   _;\n  }\n\n  function setDecimals(uint8 _decimals) public onlyOwner {\n    decimals = _decimals;\n    emit ChangeDecimals(decimals);\n  }\n\n  function _allowanceRemain(ERC20Interface _targetToken) internal view returns (uint256) {\n    return _targetToken.allowance(owner, this).div(10 ** uint256(decimals)) ;\n  }\n\n  function execAirDrop(address _tokenAddr, address[] addrList, uint256[] valList) public onlyOwner onlyPayloadSize(2 * 32) returns (uint256) {\n    uint256 i = 0;\n    uint256 allowanceValue = _allowanceRemain(ERC20Interface(_tokenAddr));\n\n    while (i < addrList.length) {\n      require(allowanceValue >= valList[i]);\n\n      require(ERC20Interface(_tokenAddr).transferFrom(msg.sender, addrList[i], valList[i].mul(10 ** uint256(decimals))));\n\n      allowanceValue.sub(valList[i]);\n      i++;\n    }\n\n    emit AirdropTransferCompleted(addrList.length);\n    return i;\n  }\n\n}\n\ncontract ERC20Interface {\n    function totalSupply() public constant returns (uint256);\n    function balanceOf(address tokenOwner) public constant returns (uint256 balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint256 remaining);\n    function transfer(address to, uint256 tokens) public returns (bool success);\n    function approve(address spender, uint256 tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n}",
  "bytecode": "608060405234801561001057600080fd5b506000805433600160a060020a03199091161760a060020a60ff0219167412000000000000000000000000000000000000000017815561071690819061005690396000f3006080604052600436106100775763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632083cbd881146100af578063313ce5671461015d578063715018a6146101885780637a1395aa1461019f5780638da5cb5b146101ba578063f2fde38b146101eb575b60408051348152905133917ffbf15a1bae5e021d024841007b692b167afd2a281a4ff0b44f47387eb388205c919081900360200190a2005b3480156100bb57600080fd5b5060408051602060046024803582810135848102808701860190975280865261014b968435600160a060020a031696369660449591949091019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975061020c9650505050505050565b60408051918252519081900360200190f35b34801561016957600080fd5b506101726103fc565b6040805160ff9092168252519081900360200190f35b34801561019457600080fd5b5061019d61041d565b005b3480156101ab57600080fd5b5061019d60ff60043516610489565b3480156101c657600080fd5b506101cf61051e565b60408051600160a060020a039092168252519081900360200190f35b3480156101f757600080fd5b5061019d600160a060020a036004351661052d565b6000805481908190600160a060020a0316331461022857600080fd5b6040604436101561023557fe5b6000925061024287610550565b91505b85518310156103bd57848381518110151561025c57fe5b6020908102909101015182101561027257600080fd5b86600160a060020a03166323b872dd33888681518110151561029057fe5b6020908102909101015160005489516102e59160ff7401000000000000000000000000000000000000000090910416600a0a908b908a9081106102cf57fe5b602090810290910101519063ffffffff61061d16565b604080517c010000000000000000000000000000000000000000000000000000000063ffffffff8716028152600160a060020a0394851660048201529290931660248301526044820152905160648083019260209291908290030181600087803b15801561035257600080fd5b505af1158015610366573d6000803e3d6000fd5b505050506040513d602081101561037c57600080fd5b5051151561038957600080fd5b6103b1858481518110151561039a57fe5b60209081029091010151839063ffffffff61064616565b50600190920191610245565b855160408051918252517f270000c72a4b5e1d3cfef78808663179ffc9740ba4191ad156c7c76a4981f9c09181900360200190a1509095945050505050565b60005474010000000000000000000000000000000000000000900460ff1681565b600054600160a060020a0316331461043457600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031633146104a057600080fd5b6000805460ff8084167401000000000000000000000000000000000000000090810274ff0000000000000000000000000000000000000000199093169290921792839055604080519290930416815290517f226be43817ca90183a68d739c5b8dd4837ebd5dac422a61c64cc7bb24e435c349181900360200190a150565b600054600160a060020a031681565b600054600160a060020a0316331461054457600080fd5b61054d81610658565b50565b60008054604080517fdd62ed3e000000000000000000000000000000000000000000000000000000008152600160a060020a03808416600483015230602483015291516106179374010000000000000000000000000000000000000000900460ff16600a0a9286169163dd62ed3e91604480830192602092919082900301818987803b1580156105df57600080fd5b505af11580156105f3573d6000803e3d6000fd5b505050506040513d602081101561060957600080fd5b50519063ffffffff6106d516565b92915050565b600082151561062e57506000610617565b5081810281838281151561063e57fe5b041461061757fe5b60008282111561065257fe5b50900390565b600160a060020a038116151561066d57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600081838115156106e257fe5b0493925050505600a165627a7a72305820c1a988b0dd71144586951c935d8fd4cd6659e39d13f2a2701d04aeba826f65890029"
}