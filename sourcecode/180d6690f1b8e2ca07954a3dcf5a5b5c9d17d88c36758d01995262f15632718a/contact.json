{
  "address": "0x5a02d2c4ab2b202b5d42402bb34abf9072d7581e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ChessMoney",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-04\n*/\n\npragma solidity ^0.4.19;\ncontract ChessMoney {\n \n    //CONSTANT\n    uint256 private maxTickets;\n    uint256 public ticketPrice; \n     \n    //LOTTO REGISTER\n    uint256 public lottoIndex;\n    uint256 lastTicketTime;\n    \n    //LOTTO VARIABLES\n\tuint8 _direction;\n    uint256 numtickets;\n    uint256 totalBounty;\n    \n    address worldOwner;   \n     \n    event NewTicket(address indexed fromAddress, bool success);\n    event LottoComplete(address indexed fromAddress, uint indexed lottoIndex, uint256 reward);\n    \n    /// Create a new Lotto\n    function ChessMoney() public \n    {\n        worldOwner = msg.sender; \n        \n        ticketPrice = 0.00064 * 10**18;\n        maxTickets = 320;\n        \n\t\t_direction = 0;\n        lottoIndex = 1;\n        lastTicketTime = 0;\n        \n        numtickets = 0;\n        totalBounty = 0;\n    }\n\n    \n    function getBalance() public view returns (uint256 balance)\n    {\n        balance = 0;\n        \n        if(worldOwner == msg.sender) balance = this.balance;\n        \n        return balance;\n    }\n    \n    \n\tfunction withdraw() public \n    {\n        require(worldOwner == msg.sender);  \n        \n\t\t//reset values\n        lottoIndex += 1;\n        numtickets = 0;\n        totalBounty = 0;\n\t\t\n\t\tworldOwner.transfer(this.balance); \n    }\n    \n    \n    function getLastTicketTime() public view returns (uint256 time)\n    {\n        time = lastTicketTime; \n        return time;\n    }\n    \n\t\n    function AddTicket() public payable \n    {\n        require(msg.value == ticketPrice); \n        require(numtickets < maxTickets);\n        \n\t\t//update bif\n\t\tlastTicketTime = now;\n        numtickets += 1;\n        totalBounty += ticketPrice;\n        bool success = numtickets == maxTickets;\n\t\t\n        NewTicket(msg.sender, success);\n        \n\t\t//check if winner\n        if(success) \n        {\n            PayWinner(msg.sender);\n        } \n    }\n    \n    \n    function PayWinner( address winner ) private \n    { \n        require(numtickets == maxTickets);\n        \n\t\t//calc reward\n        uint ownerTax = totalBounty / 10;\n        uint winnerPrice = totalBounty - ownerTax;\n        \n        LottoComplete(msg.sender, lottoIndex, winnerPrice);\n         \n\t\t//reset values\n        lottoIndex += 1;\n        numtickets = 0;\n        totalBounty = 0;\n\t\t\n\t\t//change max tickets to give unpredictability\n\t\tif(_direction == 0 && maxTickets < 10) maxTickets += 1;\n\t\tif(_direction == 1 && maxTickets > 20) maxTickets -= 1;\n\t\tif(_direction == 0 && maxTickets < 30) maxTickets += 1;\n\t\tif(_direction == 1 && maxTickets > 40) maxTickets -= 1;\n\t\tif(_direction == 0 && maxTickets < 50) maxTickets += 1;\n\t\tif(_direction == 1 && maxTickets > 60) maxTickets -= 1;\n\t\tif(_direction == 0 && maxTickets < 70) maxTickets += 1;\n\t\tif(_direction == 1 && maxTickets > 80) maxTickets -= 1;\n\t\tif(_direction == 0 && maxTickets < 90) maxTickets += 1;\n\t\tif(_direction == 1 && maxTickets > 100) maxTickets -= 1;\n\t\tif(_direction == 0 && maxTickets < 110) maxTickets += 1;\n\t\tif(_direction == 1 && maxTickets > 120) maxTickets -= 1;\n\t\tif(_direction == 0 && maxTickets < 130) maxTickets += 1;\n\t\tif(_direction == 1 && maxTickets > 140) maxTickets -= 1;\n\t\tif(_direction == 0 && maxTickets < 150) maxTickets += 1;\n\t\tif(_direction == 1 && maxTickets > 160) maxTickets -= 1;\n\t\tif(_direction == 0 && maxTickets < 170) maxTickets += 1;\n\t\tif(_direction == 1 && maxTickets > 180) maxTickets -= 1;\n\t\tif(_direction == 0 && maxTickets < 190) maxTickets += 1;\n\t\tif(_direction == 1 && maxTickets > 200) maxTickets -= 1;\n\t\tif(_direction == 0 && maxTickets < 210) maxTickets += 1;\n\t\tif(_direction == 1 && maxTickets > 220) maxTickets -= 1;\n\t\tif(_direction == 0 && maxTickets < 230) maxTickets += 1;\n\t\tif(_direction == 1 && maxTickets > 240) maxTickets -= 1;\n\t\tif(_direction == 0 && maxTickets < 250) maxTickets += 1;\n\t\tif(_direction == 1 && maxTickets > 260) maxTickets -= 1;\n\t\tif(_direction == 0 && maxTickets < 270) maxTickets += 1;\n\t\tif(_direction == 1 && maxTickets > 280) maxTickets -= 1;\n\t\tif(_direction == 0 && maxTickets < 290) maxTickets += 1;\n\t\tif(_direction == 1 && maxTickets > 300) maxTickets -= 1;\n\t\tif(_direction == 0 && maxTickets < 310) maxTickets += 1;\n\t\tif(_direction == 1 && maxTickets > 320) maxTickets -= 1;\n\t\tif(_direction == 0 && maxTickets == 10) _direction = 1;\n\t\tif(_direction == 1 && maxTickets == 20) _direction = 0;\n\t\tif(_direction == 0 && maxTickets == 30) _direction = 1;\n\t\tif(_direction == 1 && maxTickets == 40) _direction = 0;\n\t\tif(_direction == 0 && maxTickets == 50) _direction = 1;\n\t\tif(_direction == 1 && maxTickets == 60) _direction = 0;\n\t\tif(_direction == 0 && maxTickets == 70) _direction = 1;\n\t\tif(_direction == 1 && maxTickets == 80) _direction = 0;\n \t\tif(_direction == 0 && maxTickets == 90) _direction = 1;\n\t\tif(_direction == 1 && maxTickets == 100) _direction = 0;\n\t\tif(_direction == 0 && maxTickets == 110) _direction = 1;\n\t\tif(_direction == 1 && maxTickets == 120) _direction = 0;\n\t\tif(_direction == 0 && maxTickets == 130) _direction = 1;\n\t\tif(_direction == 1 && maxTickets == 140) _direction = 0;\n\t\tif(_direction == 0 && maxTickets == 150) _direction = 1;\n\t\tif(_direction == 1 && maxTickets == 160) _direction = 0;\n\t\tif(_direction == 0 && maxTickets == 170) _direction = 1;\n\t\tif(_direction == 1 && maxTickets == 180) _direction = 0;\n\t\tif(_direction == 0 && maxTickets == 190) _direction = 1;\n\t\tif(_direction == 1 && maxTickets == 200) _direction = 0;\n\t\tif(_direction == 0 && maxTickets == 210) _direction = 1;\n\t\tif(_direction == 1 && maxTickets == 220) _direction = 0;\n\t\tif(_direction == 0 && maxTickets == 230) _direction = 1;\n\t\tif(_direction == 1 && maxTickets == 240) _direction = 0;\n \t\tif(_direction == 0 && maxTickets == 250) _direction = 1;\n\t\tif(_direction == 1 && maxTickets == 260) _direction = 0;\n\t\tif(_direction == 0 && maxTickets == 270) _direction = 1;\n\t\tif(_direction == 1 && maxTickets == 280) _direction = 0;\n\t\tif(_direction == 0 && maxTickets == 290) _direction = 1;\n\t\tif(_direction == 1 && maxTickets == 300) _direction = 0;\n\t\tif(_direction == 0 && maxTickets == 310) _direction = 1;\n\t\tif(_direction == 1 && maxTickets == 320) _direction = 0;\n\t      \n\n        \n\t\t//give real money\n        worldOwner.transfer(ownerTax);\n        winner.transfer(winnerPrice); \n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b60078054600160a060020a033316600160a060020a0319909116179055660246139ca80000600190815561014060009081556004805460ff1916905560029190915560038190556005819055600655610ce58061006d6000396000f3006060604052600436106100775763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166312065fe0811461007c5780631209b1f6146100a157806319c97154146100b45780633ccfd60b146100c75780637a15eb8d146100dc578063b204bb5d146100ef575b600080fd5b341561008757600080fd5b61008f6100f7565b60405190815260200160405180910390f35b34156100ac57600080fd5b61008f610121565b34156100bf57600080fd5b61008f610127565b34156100d257600080fd5b6100da61012d565b005b34156100e757600080fd5b61008f610196565b6100da61019c565b60075460009033600160a060020a039081169116141561011e5750600160a060020a033016315b90565b60015481565b60035490565b60075433600160a060020a0390811691161461014857600080fd5b60028054600101905560006005819055600655600754600160a060020a039081169030163180156108fc0290604051600060405180830381858888f19350505050151561019457600080fd5b565b60025481565b60015460009034146101ad57600080fd5b600054600554106101bd57600080fd5b5042600355600580546001908101918290555460068054909101905560005414600160a060020a0333167f23de19158786940de5dda06fd0b7b6cb38f4a275de8e5aa97841291762e9892c82604051901515815260200160405180910390a2801561022b5761022b3361022e565b50565b6000805460055482911461024157600080fd5b5050600654600254600a82049182900390600160a060020a0333167fdc5dff36369474a27c3e9316fd6e5682d3eed3a3c023aa2a2ebcb553c954d3878360405190815260200160405180910390a36002805460010190556000600581905560065560045460ff161580156102b75750600a600054105b156102c6576000805460010190555b60045460ff1660011480156102dd57506014600054115b156102ed57600080546000190190555b60045460ff161580156103025750601e600054105b15610311576000805460010190555b60045460ff16600114801561032857506028600054115b1561033857600080546000190190555b60045460ff1615801561034d57506032600054105b1561035c576000805460010190555b60045460ff1660011480156103735750603c600054115b1561038357600080546000190190555b60045460ff1615801561039857506046600054105b156103a7576000805460010190555b60045460ff1660011480156103be57506050600054115b156103ce57600080546000190190555b60045460ff161580156103e35750605a600054105b156103f2576000805460010190555b60045460ff16600114801561040957506064600054115b1561041957600080546000190190555b60045460ff1615801561042e5750606e600054105b1561043d576000805460010190555b60045460ff16600114801561045457506078600054115b1561046457600080546000190190555b60045460ff1615801561047957506082600054105b15610488576000805460010190555b60045460ff16600114801561049f5750608c600054115b156104af57600080546000190190555b60045460ff161580156104c457506096600054105b156104d3576000805460010190555b60045460ff1660011480156104ea575060a0600054115b156104fa57600080546000190190555b60045460ff1615801561050f575060aa600054105b1561051e576000805460010190555b60045460ff166001148015610535575060b4600054115b1561054557600080546000190190555b60045460ff1615801561055a575060be600054105b15610569576000805460010190555b60045460ff166001148015610580575060c8600054115b1561059057600080546000190190555b60045460ff161580156105a5575060d2600054105b156105b4576000805460010190555b60045460ff1660011480156105cb575060dc600054115b156105db57600080546000190190555b60045460ff161580156105f0575060e6600054105b156105ff576000805460010190555b60045460ff166001148015610616575060f0600054115b1561062657600080546000190190555b60045460ff1615801561063b575060fa600054105b1561064a576000805460010190555b60045460ff1660011480156106625750610104600054115b1561067257600080546000190190555b60045460ff16158015610688575061010e600054105b15610697576000805460010190555b60045460ff1660011480156106af5750610118600054115b156106bf57600080546000190190555b60045460ff161580156106d55750610122600054105b156106e4576000805460010190555b60045460ff1660011480156106fc575061012c600054115b1561070c57600080546000190190555b60045460ff161580156107225750610136600054105b15610731576000805460010190555b60045460ff1660011480156107495750610140600054115b1561075957600080546000190190555b60045460ff1615801561076e5750600054600a145b15610781576004805460ff191660011790555b60045460ff16600114801561079857506000546014145b156107a8576004805460ff191690555b60045460ff161580156107bd5750600054601e145b156107d0576004805460ff191660011790555b60045460ff1660011480156107e757506000546028145b156107f7576004805460ff191690555b60045460ff1615801561080c57506000546032145b1561081f576004805460ff191660011790555b60045460ff1660011480156108365750600054603c145b15610846576004805460ff191690555b60045460ff1615801561085b57506000546046145b1561086e576004805460ff191660011790555b60045460ff16600114801561088557506000546050145b15610895576004805460ff191690555b60045460ff161580156108aa5750600054605a145b156108bd576004805460ff191660011790555b60045460ff1660011480156108d457506000546064145b156108e4576004805460ff191690555b60045460ff161580156108f95750600054606e145b1561090c576004805460ff191660011790555b60045460ff16600114801561092357506000546078145b15610933576004805460ff191690555b60045460ff1615801561094857506000546082145b1561095b576004805460ff191660011790555b60045460ff1660011480156109725750600054608c145b15610982576004805460ff191690555b60045460ff1615801561099757506000546096145b156109aa576004805460ff191660011790555b60045460ff1660011480156109c1575060005460a0145b156109d1576004805460ff191690555b60045460ff161580156109e6575060005460aa145b156109f9576004805460ff191660011790555b60045460ff166001148015610a10575060005460b4145b15610a20576004805460ff191690555b60045460ff16158015610a35575060005460be145b15610a48576004805460ff191660011790555b60045460ff166001148015610a5f575060005460c8145b15610a6f576004805460ff191690555b60045460ff16158015610a84575060005460d2145b15610a97576004805460ff191660011790555b60045460ff166001148015610aae575060005460dc145b15610abe576004805460ff191690555b60045460ff16158015610ad3575060005460e6145b15610ae6576004805460ff191660011790555b60045460ff166001148015610afd575060005460f0145b15610b0d576004805460ff191690555b60045460ff16158015610b22575060005460fa145b15610b35576004805460ff191660011790555b60045460ff166001148015610b4d5750600054610104145b15610b5d576004805460ff191690555b60045460ff16158015610b73575060005461010e145b15610b86576004805460ff191660011790555b60045460ff166001148015610b9e5750600054610118145b15610bae576004805460ff191690555b60045460ff16158015610bc45750600054610122145b15610bd7576004805460ff191660011790555b60045460ff166001148015610bef575060005461012c145b15610bff576004805460ff191690555b60045460ff16158015610c155750600054610136145b15610c28576004805460ff191660011790555b60045460ff166001148015610c405750600054610140145b15610c50576004805460ff191690555b600754600160a060020a031682156108fc0283604051600060405180830381858888f193505050501515610c8357600080fd5b600160a060020a03831681156108fc0282604051600060405180830381858888f193505050501515610cb457600080fd5b5050505600a165627a7a72305820df60ad60d9378f23ea047ec4ee775d6b145de96ec9a2d228280ca7ac5c4d537b0029"
}