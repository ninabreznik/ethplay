{
  "address": "0x79186ba0fc6fa49fd9db2f0ba34f36f8c24489c7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Token",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-20\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * Libraries\n */\n\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * Helper contracts\n */\n\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\ncontract Destructible is Ownable {\n\n  function Destructible() public payable { }\n\n  /**\n   * @dev Transfers the current balance to the owner and terminates the contract.\n   */\n  function destroy() onlyOwner public {\n    selfdestruct(owner);\n  }\n\n  function destroyAndSend(address _recipient) onlyOwner public {\n    selfdestruct(_recipient);\n  }\n}\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract DetailedERC20 is ERC20 {\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  function DetailedERC20(string _name, string _symbol, uint8 _decimals) public {\n    name = _name;\n    symbol = _symbol;\n    decimals = _decimals;\n  }\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    require(_value <= balances[msg.sender]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    address burner = msg.sender;\n    balances[burner] = balances[burner].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    Burn(burner, _value);\n  }\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n/**\n * Proxy\n */\n\ncontract Proxy is Ownable, Destructible, Pausable {\n    // crowdsale contract\n    Crowdsale public crowdsale;\n\n    function Proxy(Crowdsale _crowdsale) public {\n        setCrowdsale(_crowdsale);\n    }\n\n    function setCrowdsale(address _crowdsale) onlyOwner public {\n        require(_crowdsale != address(0));\n        crowdsale = Crowdsale(_crowdsale);\n    }\n\n    function () external whenNotPaused payable {\n        // buy tokens from crowdsale\n        crowdsale.buyTokens.value(msg.value)(msg.sender);\n    }\n}\n\n/**\n * Proxy\n */\n\ncontract Referral is Ownable, Destructible, Pausable {\n    using SafeMath for uint256;\n\n    Crowdsale public crowdsale;\n    Token public token;\n\n    address public beneficiary;\n\n    function Referral(address _crowdsale, address _token, address _beneficiary) public {\n        setCrowdsale(_crowdsale);\n        setToken(_token);\n        setBeneficiary(_beneficiary);\n    }\n\n    function setCrowdsale(address _crowdsale) onlyOwner public {\n        require(_crowdsale != address(0));\n        crowdsale = Crowdsale(_crowdsale);\n    }\n\n    function setToken(address _token) onlyOwner public {\n        require(_token != address(0));\n        token = Token(_token);\n    }\n\n    function setBeneficiary(address _beneficiary) onlyOwner public {\n        require(_beneficiary != address(0));\n        beneficiary = _beneficiary;\n    }\n\n    function () external whenNotPaused payable {\n        uint256 tokens = crowdsale.buyTokens.value(msg.value)(this);\n\n        uint256 baseAmount = crowdsale.getBaseAmount(msg.value);\n        uint256 refTokens = baseAmount.div(10);\n\n        // send 10% to referral\n        token.transfer(beneficiary, refTokens);\n\n        // remove 10%\n        tokens = tokens.sub(refTokens);\n\n        // send eth to buyer\n        token.transfer(msg.sender, tokens);\n    }\n}\n\n/**\n * CCOS Token\n */\n\ncontract Token is StandardToken, BurnableToken, DetailedERC20, Destructible {\n    function Token(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply)\n        DetailedERC20(_name, _symbol, _decimals) public\n        {\n\n        // covert to ether\n        _totalSupply = _totalSupply;\n\n        totalSupply_ = _totalSupply;\n\n        // give moneyz to us\n        balances[msg.sender] = totalSupply_;\n\n        // first event\n        Transfer(0x0, msg.sender, totalSupply_);\n    }\n}\n\n/**\n * CCOS Crowdsale\n */\n\ncontract Crowdsale is Ownable, Pausable, Destructible {\n    using SafeMath for uint256;\n\n    struct Vault {\n        uint256 tokenAmount;\n        uint256 weiValue;\n        address referralBeneficiary;\n    }\n\n    struct CustomContract {\n        bool isReferral;\n        bool isSpecial;\n        address referralAddress;\n    }\n\n    // Manual kill switch\n    bool crowdsaleConcluded = false;\n\n    // The token being sold\n    Token public token;\n\n    // start and end timestamps where investments are allowed (both inclusive)\n    uint256 public startTime;\n    uint256 public endTime;\n\n    // minimum investment\n    uint256 minimum_invest = 100000000000000;\n\n    // regular bonus amounts\n    uint256 week_1 = 20;\n    uint256 week_2 = 15;\n    uint256 week_3 = 10;\n    uint256 week_4 = 0;\n\n    // custom bonus amounts\n    uint256 week_special_1 = 40;\n    uint256 week_special_2 = 15;\n    uint256 week_special_3 = 10;\n    uint256 week_special_4 = 0;\n\n    uint256 week_referral_1 = 25;\n    uint256 week_referral_2 = 20;\n    uint256 week_referral_3 = 15;\n    uint256 week_referral_4 = 5;\n\n    // bonus ducks\n    mapping (address => CustomContract) public customBonuses;\n\n    // address where funds are collected\n    address public wallet;\n\n    // how many token units a buyer gets per wei\n    uint256 public rate;\n\n    // amount of raised in wei\n    uint256 public weiRaised;\n    uint256 public tokensSold;\n\n    // amount on hold for KYC\n    uint256 public tokensOnHold;\n\n    // high-ballers\n    mapping(address => Vault) ballers;\n\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n    function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, address _token) public {\n        require(_endTime >= _startTime);\n        require(_rate > 0);\n        require(_wallet != address(0));\n        require(_token != address(0));\n\n        startTime = _startTime;\n        endTime = _endTime;\n        rate = _rate;\n        wallet = _wallet;\n        token = Token(_token);\n    }\n\n    // fallback function can be used to buy tokens\n    function () external whenNotPaused payable {\n        buyTokens(msg.sender);\n    }\n\n    // low level token purchase function\n    function buyTokens(address _beneficiary) public whenNotPaused payable returns (uint256) {\n        require(!hasEnded());\n\n        // minimum investment\n        require(minimum_invest <= msg.value);\n\n        address beneficiary = _beneficiary;\n\n        require(beneficiary != address(0));\n        require(validPurchase());\n\n        uint256 weiAmount = msg.value;\n\n        // calculate token amount to be sent\n        var tokens = getTokenAmount(weiAmount);\n\n        // if we run out of tokens\n        bool isLess = false;\n        if (!hasEnoughTokensLeft(weiAmount)) {\n            isLess = true;\n\n            uint256 percentOfValue = tokensLeft().mul(100).div(tokens);\n            require(percentOfValue <= 100);\n\n            tokens = tokens.mul(percentOfValue).div(100);\n            weiAmount = weiAmount.mul(percentOfValue).div(100);\n\n            // send back unused ethers\n            beneficiary.transfer(msg.value.sub(weiAmount));\n        }\n\n        // update raised ETH amount\n        weiRaised = weiRaised.add(weiAmount);\n        tokensSold = tokensSold.add(tokens);\n\n        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n\n        // Require a KYC, but tokens on hold\n        if ((11 ether) <= weiAmount) {\n            // we have a KYC requirement\n            // add tokens to his/her vault to release/refund manually afterawards\n\n            tokensOnHold = tokensOnHold.add(tokens);\n\n            ballers[beneficiary].tokenAmount += tokens;\n            ballers[beneficiary].weiValue += weiAmount;\n            ballers[beneficiary].referralBeneficiary = address(0);\n\n            // set referral address if referral contract\n            if (customBonuses[msg.sender].isReferral == true) {\n              ballers[beneficiary].referralBeneficiary = customBonuses[msg.sender].referralAddress;\n            }\n\n            return (0);\n        }\n\n        token.transfer(beneficiary, tokens);\n\n        forwardFunds(weiAmount);\n\n        if (isLess == true) {\n          return (tokens);\n        }\n        return (tokens);\n    }\n\n    /**\n     * Release / Refund logics\n     */\n\n    function viewFunds(address _wallet) public view returns (uint256) {\n        return ballers[_wallet].tokenAmount;\n    }\n\n    function releaseFunds(address _wallet) onlyOwner public {\n        require(ballers[_wallet].tokenAmount > 0);\n        require(ballers[_wallet].weiValue <= this.balance);\n\n        // held tokens count for this buyer\n        uint256 tokens = ballers[_wallet].tokenAmount;\n\n        // remove from tokens on hold\n        tokensOnHold = tokensOnHold.sub(tokens);\n\n        // transfer ether to our wallet\n        forwardFunds(ballers[_wallet].weiValue);\n\n        // if it's a referral release give bonus tokens to referral\n        if (ballers[_wallet].referralBeneficiary != address(0)) {\n          uint256 refTokens = tokens.mul(10).div(100);\n          token.transfer(ballers[_wallet].referralBeneficiary, refTokens);\n\n          // subtract referral tokens from total\n          tokens = tokens.sub(refTokens);\n        }\n\n        // send tokens to buyer\n        token.transfer(_wallet, tokens);\n\n\n        // reset vault\n        ballers[_wallet].tokenAmount = 0;\n        ballers[_wallet].weiValue = 0;\n    }\n\n    function refundFunds(address _wallet) onlyOwner public {\n        require(ballers[_wallet].tokenAmount > 0);\n        require(ballers[_wallet].weiValue <= this.balance);\n\n        // remove from tokens on hold\n        tokensOnHold = tokensOnHold.sub(ballers[_wallet].tokenAmount);\n\n        _wallet.transfer(ballers[_wallet].weiValue);\n\n        weiRaised = weiRaised.sub(ballers[_wallet].weiValue);\n        tokensSold = tokensSold.sub(ballers[_wallet].tokenAmount);\n\n        ballers[_wallet].tokenAmount = 0;\n        ballers[_wallet].weiValue = 0;\n    }\n\n    /**\n     * Editors\n     */\n\n    function addOldInvestment(address _beneficiary, uint256 _weiAmount, uint256 _tokensWithDecimals) onlyOwner public {\n      require(_beneficiary != address(0));\n\n      // update sold tokens amount\n      weiRaised = weiRaised.add(_weiAmount);\n      tokensSold = tokensSold.add(_tokensWithDecimals);\n\n      token.transfer(_beneficiary, _tokensWithDecimals);\n\n      TokenPurchase(msg.sender, _beneficiary, _weiAmount, _tokensWithDecimals);\n    }\n\n    function setCustomBonus(address _contract, bool _isReferral, bool _isSpecial, address _referralAddress) onlyOwner public {\n      require(_contract != address(0));\n\n      customBonuses[_contract] = CustomContract({\n          isReferral: _isReferral,\n          isSpecial: _isSpecial,\n          referralAddress: _referralAddress\n      });\n    }\n\n    function addOnHold(uint256 _amount) onlyOwner public {\n      tokensOnHold = tokensOnHold.add(_amount);\n    }\n\n    function subOnHold(uint256 _amount) onlyOwner public {\n      tokensOnHold = tokensOnHold.sub(_amount);\n    }\n\n    function setMinInvestment(uint256 _investment) onlyOwner public {\n      require(_investment > 0);\n      minimum_invest = _investment;\n    }\n\n    function changeEndTime(uint256 _endTime) onlyOwner public {\n        require(_endTime > startTime);\n        endTime = _endTime;\n    }\n\n    function changeStartTime(uint256 _startTime) onlyOwner public {\n        require(endTime > _startTime);\n        startTime = _startTime;\n    }\n\n    function setWallet(address _wallet) onlyOwner public {\n        require(_wallet != address(0));\n        wallet = _wallet;\n    }\n\n    function setToken(address _token) onlyOwner public {\n        require(_token != address(0));\n        token = Token(_token);\n    }\n\n    /**\n     * End crowdsale manually\n     */\n\n    function endSale() onlyOwner public {\n      // close crowdsale\n      crowdsaleConcluded = true;\n\n      // burn all tokens left\n      token.burn(token.balanceOf(this));\n    }\n\n    /**\n     * When at risk, evacuate tokens\n     */\n\n    function evacuateTokens(address _wallet) onlyOwner public {\n      require(_wallet != address(0));\n      token.transfer(_wallet, token.balanceOf(this));\n    }\n\n    /**\n     * Calculations\n     */\n\n    // @return true if crowdsale event has ended\n    function hasEnded() public view returns (bool) {\n        return now > endTime || token.balanceOf(this) == 0 || crowdsaleConcluded;\n    }\n\n    function getBaseAmount(uint256 _weiAmount) public view returns (uint256) {\n        return _weiAmount.mul(rate);\n    }\n\n    // Override this method to have a way to add business logic to your crowdsale when buying\n    function getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n        uint256 tokens = getBaseAmount(_weiAmount);\n        uint256 percentage = 0;\n\n         // Special bonuses\n        if (customBonuses[msg.sender].isSpecial == true) {\n\n          if ( startTime <= now && now < startTime + 7 days ) {\n            percentage = week_special_1;\n          } else if ( startTime + 7 days <= now && now < startTime + 14 days ) {\n            percentage = week_special_2;\n          } else if ( startTime + 14 days <= now && now < startTime + 21 days ) {\n            percentage = week_special_3;\n          } else if ( startTime + 21 days <= now && now <= endTime ) {\n            percentage = week_special_4;\n          }\n\n        // Regular bonuses\n        } else {\n\n          if ( startTime <= now && now < startTime + 7 days ) {\n            percentage = week_1;\n          } else if ( startTime + 7 days <= now && now < startTime + 14 days ) {\n            percentage = week_2;\n          } else if ( startTime + 14 days <= now && now < startTime + 21 days ) {\n            percentage = week_3;\n          } else if ( startTime + 21 days <= now && now <= endTime ) {\n            percentage = week_4;\n          }\n\n          // Referral bonuses\n          if (customBonuses[msg.sender].isReferral == true) {\n            percentage += 15; // 5 for buyer, 10 for referrer\n          }\n\n        }\n\n        // Large contributors\n        if (msg.value >= 50 ether) {\n          percentage += 80;\n        } else if (msg.value >= 30 ether) {\n          percentage += 70;\n        } else if (msg.value >= 10 ether) {\n          percentage += 50;\n        } else if (msg.value >= 5 ether) {\n          percentage += 30;\n        } else if (msg.value >= 3 ether) {\n          percentage += 10;\n        }\n\n        tokens += tokens.mul(percentage).div(100);\n\n        assert(tokens > 0);\n\n        return (tokens);\n    }\n\n    // send ether to the fund collection wallet\n    function forwardFunds(uint256 _amount) internal {\n        wallet.transfer(_amount);\n    }\n\n    // @return true if the transaction can buy tokens\n    function validPurchase() internal view returns (bool) {\n        bool withinPeriod = now >= startTime && now <= endTime;\n        bool nonZeroPurchase = msg.value != 0;\n        return withinPeriod && nonZeroPurchase;\n    }\n\n    function tokensLeft() public view returns (uint256) {\n        return token.balanceOf(this).sub(tokensOnHold);\n    }\n\n    function hasEnoughTokensLeft(uint256 _weiAmount) public payable returns (bool) {\n        return tokensLeft().sub(_weiAmount) >= getBaseAmount(_weiAmount);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "606060405234156200001057600080fd5b60405162001a0138038062001a01833981016040528080518201919060200180518201919060200180519060200190919080519060200190919050508383838260039080519060200190620000679291906200018b565b508160049080519060200190620000809291906200018b565b5080600560006101000a81548160ff021916908360ff16021790555050505033600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550809050806001819055506001546000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6001546040518082815260200191505060405180910390a3505050506200023a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001ce57805160ff1916838001178555620001ff565b82800160010185558215620001ff579182015b82811115620001fe578251825591602001919060010190620001e1565b5b5090506200020e919062000212565b5090565b6200023791905b808211156200023357600081600090555060010162000219565b5090565b90565b6117b7806200024a6000396000f3006060604052600436106100e6576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100eb578063095ea7b31461017957806318160ddd146101d357806323b872dd146101fc578063313ce5671461027557806342966c68146102a457806366188463146102c757806370a082311461032157806383197ef01461036e5780638da5cb5b1461038357806395d89b41146103d8578063a9059cbb14610466578063d73dd623146104c0578063dd62ed3e1461051a578063f2fde38b14610586578063f5074f41146105bf575b600080fd5b34156100f657600080fd5b6100fe6105f8565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561013e578082015181840152602081019050610123565b50505050905090810190601f16801561016b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561018457600080fd5b6101b9600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610696565b604051808215151515815260200191505060405180910390f35b34156101de57600080fd5b6101e6610788565b6040518082815260200191505060405180910390f35b341561020757600080fd5b61025b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610792565b604051808215151515815260200191505060405180910390f35b341561028057600080fd5b610288610b4c565b604051808260ff1660ff16815260200191505060405180910390f35b34156102af57600080fd5b6102c56004808035906020019091905050610b5f565b005b34156102d257600080fd5b610307600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610cb1565b604051808215151515815260200191505060405180910390f35b341561032c57600080fd5b610358600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610f42565b6040518082815260200191505060405180910390f35b341561037957600080fd5b610381610f8a565b005b341561038e57600080fd5b610396611021565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156103e357600080fd5b6103eb611047565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561042b578082015181840152602081019050610410565b50505050905090810190601f1680156104585780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561047157600080fd5b6104a6600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506110e5565b604051808215151515815260200191505060405180910390f35b34156104cb57600080fd5b610500600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611304565b604051808215151515815260200191505060405180910390f35b341561052557600080fd5b610570600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611500565b6040518082815260200191505060405180910390f35b341561059157600080fd5b6105bd600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611587565b005b34156105ca57600080fd5b6105f6600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506116df565b005b60038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561068e5780601f106106635761010080835404028352916020019161068e565b820191906000526020600020905b81548152906001019060200180831161067157829003601f168201915b505050505081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600154905090565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156107cf57600080fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561081c57600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156108a757600080fd5b6108f8826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461175490919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061098b826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461176d90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a5c82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461175490919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600560009054906101000a900460ff1681565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610bae57600080fd5b339050610c02826000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461175490919063ffffffff16565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c598260015461175490919063ffffffff16565b6001819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a25050565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610dc2576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e56565b610dd5838261175490919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fe657600080fd5b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110dd5780601f106110b2576101008083540402835291602001916110dd565b820191906000526020600020905b8154815290600101906020018083116110c057829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561112257600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561116f57600080fd5b6111c0826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461175490919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611253826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461176d90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600061139582600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461176d90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115e357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561161f57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561173b57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16ff5b600082821115151561176257fe5b818303905092915050565b600080828401905083811015151561178157fe5b80915050929150505600a165627a7a72305820a5a874e7f17ffe61f8d5a6256a7a8a24631dc1615f6015d0969887c9906ae56b0029000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000019d971e4fe8401e74000000000000000000000000000000000000000000000000000000000000000000000c43726f7764436f696e6167650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000443434f5300000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000019d971e4fe8401e74000000000000000000000000000000000000000000000000000000000000000000000c43726f7764436f696e6167650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000443434f5300000000000000000000000000000000000000000000000000000000"
}