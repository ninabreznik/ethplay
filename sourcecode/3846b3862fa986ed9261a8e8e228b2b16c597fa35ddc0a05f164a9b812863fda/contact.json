{
  "address": "0xfca5a587b7d6e747737031b0e9d5eabc90ad7e68",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "grip",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-21\n*/\n\npragma solidity ^0.4.22;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ForeignToken {\n    function balanceOf(address _owner) constant public returns (uint256);\n    function transfer(address _to, uint256 _value) public returns (bool);\n}\n\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) public constant returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public constant returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface Token { \n    function distr(address _to, uint256 _value) external returns (bool);\n    function totalSupply() constant external returns (uint256 supply);\n    function balanceOf(address _owner) constant external returns (uint256 balance);\n}\n\ncontract grip is ERC20 {\n\n \n    \n    using SafeMath for uint256;\n    address owner = msg.sender;\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    mapping (address => bool) public blacklist;\n\n    string public constant name = \"grip\";\n    string public constant symbol = \"grip\";\n    uint public constant decimals = 18;\n    \nuint256 public totalSupply = 10000000000e18;\n    \nuint256 public totalDistributed = 5000000000e18;\n    \nuint256 public totalRemaining = totalSupply.sub(totalDistributed);\n    \nuint256 public free = 10000e18;\nuint256 public countfree = 1;\nuint256 public price = 0.0000016 ether;\nuint256 public minBuy = 0.03 ether;\nuint public bonus;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    \n    event Distr(address indexed to, uint256 amount);\n    event DistrFinished();\n    \n    event Burn(address indexed burner, uint256 value);\n\n    bool public distributionFinished = false;\n    \n    modifier canDistr() {\n        require(!distributionFinished);\n        _;\n    }\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    modifier onlyWhitelist() {\n        require(blacklist[msg.sender] == false);\n        _;\n    }\n    \n    function grip() public {\n        owner = msg.sender;\n        balances[owner] = totalDistributed;\n    }\n    function changeminBuy(uint min) onlyOwner public returns (bool){\n        minBuy = min;\n        return true;\n    }\n    function transferOwnership(address newOwner) onlyOwner public {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n    \n    function finishDistribution() onlyOwner canDistr public returns (bool) {\n        distributionFinished = true;\n        emit DistrFinished();\n        return true;\n    }\n    function setPrice(uint pricex) onlyOwner canDistr public returns (bool) {\n        price = pricex;\n        return true;\n    }\n    function distr(address _to, uint256 _amount) canDistr private returns (bool) {\n        totalDistributed = totalDistributed.add(_amount);\n        totalRemaining = totalRemaining.sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Distr(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n        return true;\n        \n        if (totalDistributed >= totalSupply) {\n            distributionFinished = true;\n        }\n    }\n    \n    function () external payable {\n        getTokens();\n     }\n    \n    function getTokens() payable canDistr  public {\n        address investor = msg.sender;\n        if (msg.value > minBuy) {\n            uint256 toGive = msg.value*10**18/price;\n            if(msg.value>=0.5 ether && msg.value < 1 ether){\n                toGive+= toGive*25/100;\n            }\n            if(msg.value>=1 ether){\n                toGive+= toGive*50/100;\n            }\n            distr(investor, toGive);\n          \n        }else if(msg.value==0 && countfree <=200){\n            require(blacklist[investor] == false);\n            distr(investor,free);\n            blacklist[investor] = true;\n            countfree++;\n        }else{\n            \n        }\n        \n        if (totalDistributed >= totalSupply) {\n            distributionFinished = true;\n        }\n        \n    }\n\n    function balanceOf(address _owner) constant public returns (uint256) {\n        return balances[_owner];\n    }\n\n    modifier onlyPayloadSize(uint size) {\n        assert(msg.data.length >= size + 4);\n        _;\n    }\n    \n    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\n        require(_to != address(0));\n        require(_amount <= balances[msg.sender]);\n        \n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n    \n    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\n        require(_to != address(0));\n        require(_amount <= balances[_from]);\n        require(_amount <= allowed[_from][msg.sender]);\n        \n        balances[_from] = balances[_from].sub(_amount);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(_from, _to, _amount);\n        return true;\n    }\n    \n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    function allowance(address _owner, address _spender) constant public returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n    \n    function getTokenBalance(address tokenAddress, address who) constant public returns (uint){\n        ForeignToken t = ForeignToken(tokenAddress);\n        uint bal = t.balanceOf(who);\n        return bal;\n    }\n    \n    function withdraw() onlyOwner public {\n        uint256 etherBalance = address(this).balance;\n        owner.transfer(etherBalance);\n    }\n    \n    function burn(uint256 _value) onlyOwner public {\n        require(_value <= balances[msg.sender]);\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        totalDistributed = totalDistributed.sub(_value);\n        emit Burn(burner, _value);\n    }\n    \n    function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\n        ForeignToken token = ForeignToken(_tokenContract);\n        uint256 amount = token.balanceOf(address(this));\n        return token.transfer(owner, amount);\n    }\n}",
  "bytecode": "608060405233600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506b204fce5e3e250261100000006005556b1027e72f1f1281308800000060065561008960065460055461018a64010000000002611e0d179091906401000000009004565b60075569021e19e0c9bab24000006008556001600955650174876e8000600a55666a94d74f430000600b556000600d60006101000a81548160ff0219169083151502179055503480156100db57600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060065460026000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506101a3565b600082821115151561019857fe5b818303905092915050565b611e70806101b26000396000f30060806040526004361061015f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610169578063095ea7b3146101f95780631370128e1461025e57806318160ddd1461028957806323b872dd146102b4578063313ce567146103395780633ccfd60b1461036457806342966c681461037b57806346aee903146103a857806370a08231146103ed5780637107d7a61461044457806375b4d78c1461046f57806391b7f5ed1461049a57806395d89b41146104df5780639b1cbccc1461056f578063a035b1fe1461059e578063a9059cbb146105c9578063aa6ca8081461062e578063ad4c337214610638578063c108d54214610663578063c489744b14610692578063d8a5436014610709578063dd62ed3e14610734578063e58fc54c146107ab578063efca2eed14610806578063f2fde38b14610831578063f9f92be414610874575b6101676108cf565b005b34801561017557600080fd5b5061017e610aa6565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101be5780820151818401526020810190506101a3565b50505050905090810190601f1680156101eb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020557600080fd5b50610244600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610adf565b604051808215151515815260200191505060405180910390f35b34801561026a57600080fd5b50610273610c6d565b6040518082815260200191505060405180910390f35b34801561029557600080fd5b5061029e610c73565b6040518082815260200191505060405180910390f35b3480156102c057600080fd5b5061031f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c79565b604051808215151515815260200191505060405180910390f35b34801561034557600080fd5b5061034e61104f565b6040518082815260200191505060405180910390f35b34801561037057600080fd5b50610379611054565b005b34801561038757600080fd5b506103a660048036038101908080359060200190929190505050611138565b005b3480156103b457600080fd5b506103d360048036038101908080359060200190929190505050611304565b604051808215151515815260200191505060405180910390f35b3480156103f957600080fd5b5061042e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611372565b6040518082815260200191505060405180910390f35b34801561045057600080fd5b506104596113bb565b6040518082815260200191505060405180910390f35b34801561047b57600080fd5b506104846113c1565b6040518082815260200191505060405180910390f35b3480156104a657600080fd5b506104c5600480360381019080803590602001909291905050506113c7565b604051808215151515815260200191505060405180910390f35b3480156104eb57600080fd5b506104f4611451565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610534578082015181840152602081019050610519565b50505050905090810190601f1680156105615780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561057b57600080fd5b5061058461148a565b604051808215151515815260200191505060405180910390f35b3480156105aa57600080fd5b506105b3611552565b6040518082815260200191505060405180910390f35b3480156105d557600080fd5b50610614600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611558565b604051808215151515815260200191505060405180910390f35b6106366108cf565b005b34801561064457600080fd5b5061064d611793565b6040518082815260200191505060405180910390f35b34801561066f57600080fd5b50610678611799565b604051808215151515815260200191505060405180910390f35b34801561069e57600080fd5b506106f3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506117ac565b6040518082815260200191505060405180910390f35b34801561071557600080fd5b5061071e611897565b6040518082815260200191505060405180910390f35b34801561074057600080fd5b50610795600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061189d565b6040518082815260200191505060405180910390f35b3480156107b757600080fd5b506107ec600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611924565b604051808215151515815260200191505060405180910390f35b34801561081257600080fd5b5061081b611b69565b6040518082815260200191505060405180910390f35b34801561083d57600080fd5b50610872600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b6f565b005b34801561088057600080fd5b506108b5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c46565b604051808215151515815260200191505060405180910390f35b600080600d60009054906101000a900460ff161515156108ee57600080fd5b339150600b5434111561098457600a54670de0b6b3a7640000340281151561091257fe5b0490506706f05b59d3b2000034101580156109345750670de0b6b3a764000034105b1561094e5760646019820281151561094857fe5b04810190505b670de0b6b3a7640000341015156109745760646032820281151561096e57fe5b04810190505b61097e8282611c66565b50610a79565b600034148015610997575060c860095411155b15610a775760001515600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156109fb57600080fd5b610a0782600854611c66565b506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600960008154809291906001019190505550610a78565b5b5b600554600654101515610aa2576001600d60006101000a81548160ff0219169083151502179055505b5050565b6040805190810160405280600481526020017f677269700000000000000000000000000000000000000000000000000000000081525081565b6000808214158015610b6e57506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b15610b7c5760009050610c67565b81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b60085481565b60055481565b6000606060048101600036905010151515610c9057fe5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515610ccc57600080fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548311151515610d1a57600080fd5b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548311151515610da557600080fd5b610df783600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e0d90919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ec983600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e0d90919063ffffffff16565b600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f9b83600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e2690919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b601281565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110b257600080fd5b3073ffffffffffffffffffffffffffffffffffffffff16319050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611134573d6000803e3d6000fd5b5050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561119657600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156111e457600080fd5b33905061123982600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e0d90919063ffffffff16565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061129182600554611e0d90919063ffffffff16565b6005819055506112ac82600654611e0d90919063ffffffff16565b6006819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a25050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561136257600080fd5b81600b8190555060019050919050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600b5481565b600c5481565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561142557600080fd5b600d60009054906101000a900460ff1615151561144157600080fd5b81600a8190555060019050919050565b6040805190810160405280600481526020017f677269700000000000000000000000000000000000000000000000000000000081525081565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114e857600080fd5b600d60009054906101000a900460ff1615151561150457600080fd5b6001600d60006101000a81548160ff0219169083151502179055507f7f95d919e78bdebe8a285e6e33357c2fcb65ccf66e72d7573f9f8f6caad0c4cc60405160405180910390a16001905090565b600a5481565b600060406004810160003690501015151561156f57fe5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156115ab57600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483111515156115f957600080fd5b61164b83600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e0d90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506116e083600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e2690919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191505092915050565b60095481565b600d60009054906101000a900460ff1681565b60008060008491508173ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561184f57600080fd5b505af1158015611863573d6000803e3d6000fd5b505050506040513d602081101561187957600080fd5b81019080805190602001909291905050509050809250505092915050565b60075481565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561198557600080fd5b8391508173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611a2357600080fd5b505af1158015611a37573d6000803e3d6000fd5b505050506040513d6020811015611a4d57600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611b2557600080fd5b505af1158015611b39573d6000803e3d6000fd5b505050506040513d6020811015611b4f57600080fd5b810190808051906020019092919050505092505050919050565b60065481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611bcb57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515611c435780600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b60046020528060005260406000206000915054906101000a900460ff1681565b6000600d60009054906101000a900460ff16151515611c8457600080fd5b611c9982600654611e2690919063ffffffff16565b600681905550611cb482600754611e0d90919063ffffffff16565b600781905550611d0c82600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e2690919063ffffffff16565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f8940c4b8e215f8822c5c8f0056c12652c746cbc57eedbd2a440b175971d47a77836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000828211151515611e1b57fe5b818303905092915050565b6000808284019050838110151515611e3a57fe5b80915050929150505600a165627a7a72305820774a77aede4997699bad31d0bd2feb6331fccd1ebb672a808a94f012733b7c2b0029"
}