{
  "address": "0x44f5a721e710cc7d1a7faf74f4fa294f435abf8c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WhiteListed",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-28\n*/\n\npragma solidity ^0.4.23;\n// produced by the Solididy File Flattener (c) David Appleton 2018\n// contact : [emailÂ protected]\n// released under Apache 2.0 licence\ncontract WhiteListedBasic {\n    function addWhiteListed(address[] addrs) external;\n    function removeWhiteListed(address addr) external;\n    function isWhiteListed(address addr) external view returns (bool);\n}\ncontract OperatableBasic {\n    function setMinter (address addr) external;\n    function setWhiteLister (address addr) external;\n}\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n}\n\ncontract Claimable is Ownable {\n  address public pendingOwner;\n\n  /**\n   * @dev Modifier throws if called by any account other than the pendingOwner.\n   */\n  modifier onlyPendingOwner() {\n    require(msg.sender == pendingOwner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to set the pendingOwner address.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    pendingOwner = newOwner;\n  }\n\n  /**\n   * @dev Allows the pendingOwner address to finalize the transfer.\n   */\n  function claimOwnership() onlyPendingOwner public {\n    emit OwnershipTransferred(owner, pendingOwner);\n    owner = pendingOwner;\n    pendingOwner = address(0);\n  }\n}\n\ncontract Operatable is Claimable, OperatableBasic {\n    address public minter;\n    address public whiteLister;\n    address public launcher;\n\n    event NewMinter(address newMinter);\n    event NewWhiteLister(address newwhiteLister);\n\n    modifier canOperate() {\n        require(msg.sender == minter || msg.sender == whiteLister || msg.sender == owner);\n        _;\n    }\n\n    constructor() public {\n        minter = owner;\n        whiteLister = owner;\n        launcher = owner;\n    }\n\n    function setMinter (address addr) external onlyOwner {\n        minter = addr;\n        emit NewMinter(minter);\n    }\n\n    function setWhiteLister (address addr) external onlyOwner {\n        whiteLister = addr;\n        emit NewWhiteLister(whiteLister);\n    }\n\n    modifier ownerOrMinter()  {\n        require ((msg.sender == minter) || (msg.sender == owner));\n        _;\n    }\n\n    modifier onlyLauncher()  {\n        require (msg.sender == launcher);\n        _;\n    }\n\n    modifier onlyWhiteLister()  {\n        require (msg.sender == whiteLister);\n        _;\n    }\n}\ncontract WhiteListed is Operatable, WhiteListedBasic {\n\n\n    uint public count;\n    mapping (address => bool) public whiteList;\n\n    event Whitelisted(address indexed addr, uint whitelistedCount, bool isWhitelisted);\n\n    function addWhiteListed(address[] addrs) external canOperate {\n        uint c = count;\n        for (uint i = 0; i < addrs.length; i++) {\n            if (!whiteList[addrs[i]]) {\n                whiteList[addrs[i]] = true;\n                c++;\n                emit Whitelisted(addrs[i], count, true);\n            }\n        }\n        count = c;\n    }\n\n    function removeWhiteListed(address addr) external canOperate {\n        require(whiteList[addr]);\n        whiteList[addr] = false;\n        count--;\n        emit Whitelisted(addr, count, false);\n    }\n\n    function isWhiteListed(address addr) external view returns (bool) {\n        return whiteList[addr];\n    }\n}",
  "bytecode": "60806040526000805433600160a060020a03199182161780835560028054600160a060020a039092169183168217905560038054831682179055600480549092161790556107c690819061005390396000f3006080604052600436106100da5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306661abd81146100df578063075461721461010657806316eebd1e14610137578063372c12b11461014c5780634e71e0c8146101815780636f9170f614610198578063715018a6146101b95780638da5cb5b146101ce5780639576bfbd146101e3578063aa64f3c614610204578063e30c397814610224578063ef12536014610239578063ef26e41d1461025a578063f2fde38b1461026f578063fca3b5aa14610290575b600080fd5b3480156100eb57600080fd5b506100f46102b1565b60408051918252519081900360200190f35b34801561011257600080fd5b5061011b6102b7565b60408051600160a060020a039092168252519081900360200190f35b34801561014357600080fd5b5061011b6102c6565b34801561015857600080fd5b5061016d600160a060020a03600435166102d5565b604080519115158252519081900360200190f35b34801561018d57600080fd5b506101966102ea565b005b3480156101a457600080fd5b5061016d600160a060020a0360043516610372565b3480156101c557600080fd5b50610196610390565b3480156101da57600080fd5b5061011b6103fc565b3480156101ef57600080fd5b50610196600160a060020a036004351661040b565b34801561021057600080fd5b506101966004803560248101910135610489565b34801561023057600080fd5b5061011b6105e3565b34801561024557600080fd5b50610196600160a060020a03600435166105f2565b34801561026657600080fd5b5061011b6106c7565b34801561027b57600080fd5b50610196600160a060020a03600435166106d6565b34801561029c57600080fd5b50610196600160a060020a036004351661071c565b60055481565b600254600160a060020a031681565b600454600160a060020a031681565b60066020526000908152604090205460ff1681565b600154600160a060020a0316331461030157600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600160a060020a031660009081526006602052604090205460ff1690565b600054600160a060020a031633146103a757600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031681565b600054600160a060020a0316331461042257600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03838116919091179182905560408051929091168252517f09ebea9685d3394fb080028f682138bd6bc97e571259a0cc21bedf3395096dfc916020908290030190a150565b6002546000908190600160a060020a03163314806104b15750600354600160a060020a031633145b806104c65750600054600160a060020a031633145b15156104d157600080fd5b505060055460005b828110156105db57600660008585848181106104f157fe5b60209081029290920135600160a060020a03168352508101919091526040016000205460ff1615156105d35760016006600086868581811061052f57fe5b60209081029290920135600160a060020a0316835250810191909152604001600020805460ff19169115159190911790556001919091019083838281811061057357fe5b90506020020135600160a060020a0316600160a060020a03167f318a9546314e6a3abbe16f664b7cb7fb9bf49386660e3c3005124b9a04d8fbc9600554600160405180838152602001821515151581526020019250505060405180910390a25b6001016104d9565b506005555050565b600154600160a060020a031681565b600254600160a060020a03163314806106155750600354600160a060020a031633145b8061062a5750600054600160a060020a031633145b151561063557600080fd5b600160a060020a03811660009081526006602052604090205460ff16151561065c57600080fd5b600160a060020a0381166000818152600660209081526040808320805460ff1916905560058054600019019081905581519081529182019290925281517f318a9546314e6a3abbe16f664b7cb7fb9bf49386660e3c3005124b9a04d8fbc9929181900390910190a250565b600354600160a060020a031681565b600054600160a060020a031633146106ed57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a0316331461073357600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03838116919091179182905560408051929091168252517f6adffd5c93085d835dac6f3b40adf7c242ca4b3284048d20c3d8a501748dc973916020908290030190a1505600a165627a7a72305820a5134500ed306fb90907a3efaea83fc9c0b1de5f25f488008a82b75eaaf44d860029"
}