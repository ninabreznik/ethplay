{
  "address": "0x212584d81254629a55b2c8b06abd0611119dee83",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RoboAiCoin",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-30\n*/\n\npragma solidity ^0.4.19;\n\ncontract Ownable {\n  address public owner;\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));      \n    owner = newOwner;\n  }\n}\n\nlibrary AddressUtils {\n  function isContract(address addr) internal view returns (bool) {\n    uint256 size;\n    assembly { size := extcodesize(addr) }\n    return size > 0;\n  }\n}\n\ninterface ERC165ReceiverInterface {\n  function tokensReceived(address _from, address _to, uint _amount, bytes _data) external returns (bool);\n}\n\ncontract supportERC165Basic {\n  bytes4 constant InvalidID = 0xffffffff;\n  bytes4 constant ERC165ID = 0x01ffc9a7;\n\t\n  function transfer_erc165(address to, uint256 value, bytes _data) public returns (bool);\n\n  function doesContractImplementInterface(address _contract, bytes4 _interfaceId) internal view returns (bool) {\n      uint256 success;\n      uint256 result;\n\n      (success, result) = noThrowCall(_contract, ERC165ID);\n      if ((success==0)||(result==0)) {\n          return false;\n      }\n  \n      (success, result) = noThrowCall(_contract, InvalidID);\n      if ((success==0)||(result!=0)) {\n          return false;\n      }\n\n      (success, result) = noThrowCall(_contract, _interfaceId);\n      if ((success==1)&&(result==1)) {\n          return true;\n      }\n      return false;\n  }\n\n  function noThrowCall(address _contract, bytes4 _interfaceId) constant internal returns (uint256 success, uint256 result) {\n      bytes4 erc165ID = ERC165ID;\n\n      assembly {\n              let x := mload(0x40)               // Find empty storage location using \"free memory pointer\"\n              mstore(x, erc165ID)                // Place signature at begining of empty storage\n              mstore(add(x, 0x04), _interfaceId) // Place first argument directly next to signature\n\n              success := staticcall(\n                                  30000,         // 30k gas\n                                  _contract,     // To addr\n                                  x,             // Inputs are stored at location x\n                                  0x20,          // Inputs are 32 bytes long\n                                  x,             // Store output over input (saves space)\n                                  0x20)          // Outputs are 32 bytes long\n\n              result := mload(x)                 // Load the result\n      }\n  }\t\n}\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\ncontract ERC20Basic is supportERC165Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n  using AddressUtils for address;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n  }\n    \n  /**\n  * transfer with ERC165 interface\n  **/\n  function transfer_erc165(address _to, uint256 _value, bytes _data) public returns (bool) {\n    transfer(_to, _value);\n      \n    if (!_to.isContract()) revert();\n    \n    ERC165ReceiverInterface i;\n    if(!doesContractImplementInterface(_to, i.tokensReceived.selector)) revert(); \n\n    ERC165ReceiverInterface app= ERC165ReceiverInterface(_to);\n    app.tokensReceived(msg.sender, _to, _value, _data);\n    \n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract RoboAiCoin is StandardToken, Ownable {\n\n  string public name = \"RoboAi Coin\";\n  string public symbol = \"R2R\";\n  uint public decimals = 8;\n    \n  function RoboAiCoin() public {\n    owner = msg.sender;\n    totalSupply_ = 0;\n    \n    totalSupply_= 1 * 10 ** (9+8);  //1 Billion\n\n    balances[owner] = totalSupply_;\n\tTransfer(address(0), owner, balances[owner]);\n  }\n}",
  "bytecode": "606060405260408051908101604052600b81527f526f626f416920436f696e0000000000000000000000000000000000000000006020820152600490805161004b929160200190610134565b5060408051908101604052600381527f523252000000000000000000000000000000000000000000000000000000000060208201526005908051610093929160200190610134565b50600860065534156100a457600080fd5b60038054600160a060020a03338116600160a060020a0319928316811790921690911780835567016345785d8a00006001819055908216600090815260208190526040808220929092559254909116808352818320549092917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91905190815260200160405180910390a36101cf565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061017557805160ff19168380011785556101a2565b828001600101855582156101a2579182015b828111156101a2578251825591602001919060010190610187565b506101ae9291506101b2565b5090565b6101cc91905b808211156101ae57600081556001016101b8565b90565b610cd0806101de6000396000f3006060604052600436106100cf5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100d4578063095ea7b31461015e57806318160ddd1461019457806323b872dd146101b9578063313ce567146101e157806366188463146101f457806370a08231146102165780638da5cb5b1461023557806395d89b41146102645780639886abc014610277578063a9059cbb146102dc578063d73dd623146102fe578063dd62ed3e14610320578063f2fde38b14610345575b600080fd5b34156100df57600080fd5b6100e7610366565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561012357808201518382015260200161010b565b50505050905090810190601f1680156101505780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561016957600080fd5b610180600160a060020a0360043516602435610404565b604051901515815260200160405180910390f35b341561019f57600080fd5b6101a7610470565b60405190815260200160405180910390f35b34156101c457600080fd5b610180600160a060020a0360043581169060243516604435610476565b34156101ec57600080fd5b6101a76105f6565b34156101ff57600080fd5b610180600160a060020a03600435166024356105fc565b341561022157600080fd5b6101a7600160a060020a03600435166106f6565b341561024057600080fd5b610248610711565b604051600160a060020a03909116815260200160405180910390f35b341561026f57600080fd5b6100e7610720565b341561028257600080fd5b61018060048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061078b95505050505050565b34156102e757600080fd5b610180600160a060020a036004351660243561091e565b341561030957600080fd5b610180600160a060020a0360043516602435610a2d565b341561032b57600080fd5b6101a7600160a060020a0360043581169060243516610ad1565b341561035057600080fd5b610364600160a060020a0360043516610afc565b005b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103fc5780601f106103d1576101008083540402835291602001916103fc565b820191906000526020600020905b8154815290600101906020018083116103df57829003601f168201915b505050505081565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60015490565b6000600160a060020a038316151561048d57600080fd5b600160a060020a0384166000908152602081905260409020548211156104b257600080fd5b600160a060020a03808516600090815260026020908152604080832033909416835292905220548211156104e557600080fd5b600160a060020a03841660009081526020819052604090205461050e908363ffffffff610b5b16565b600160a060020a038086166000908152602081905260408082209390935590851681522054610543908363ffffffff610b6d16565b600160a060020a0380851660009081526020818152604080832094909455878316825260028152838220339093168252919091522054610589908363ffffffff610b5b16565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b60065481565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561065957600160a060020a033381166000908152600260209081526040808320938816835292905290812055610690565b610669818463ffffffff610b5b16565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a031681565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103fc5780601f106103d1576101008083540402835291602001916103fc565b600080600061079a868661091e565b506107ad86600160a060020a0316610b83565b15156107b857600080fd5b6107e2867faf68638900000000000000000000000000000000000000000000000000000000610b8b565b15156107ed57600080fd5b5084600160a060020a03811663af686389338388886000604051602001526040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600160a060020a0316600160a060020a0316815260200184600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156108a9578082015183820152602001610891565b50505050905090810190601f1680156108d65780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15156108f757600080fd5b6102c65a03f1151561090857600080fd5b5050506040518051506001979650505050505050565b6000600160a060020a038316151561093557600080fd5b600160a060020a03331660009081526020819052604090205482111561095a57600080fd5b600160a060020a033316600090815260208190526040902054610983908363ffffffff610b5b16565b600160a060020a0333811660009081526020819052604080822093909355908516815220546109b8908363ffffffff610b6d16565b60008085600160a060020a0316600160a060020a031681526020019081526020016000208190555082600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a392915050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610a65908363ffffffff610b6d16565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a03908116911614610b1757600080fd5b600160a060020a0381161515610b2c57600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610b6757fe5b50900390565b600082820183811015610b7c57fe5b9392505050565b6000903b1190565b60008080610bb9857f01ffc9a700000000000000000000000000000000000000000000000000000000610c5a565b9092509050811580610bc9575080155b15610bd75760009250610c52565b610c01857fffffffff00000000000000000000000000000000000000000000000000000000610c5a565b9092509050811580610c1257508015155b15610c205760009250610c52565b610c2a8585610c5a565b9092509050600182148015610c3f5750806001145b15610c4d5760019250610c52565b600092505b505092915050565b6000807f01ffc9a70000000000000000000000000000000000000000000000000000000060405181815284600482015260208160208389617530fa935080519250505092509290505600a165627a7a723058207a30808a0272bd7d73b586901b59734de7f9f0b145d6b5393f5a8503d3888ece0029"
}