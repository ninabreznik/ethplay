{
  "address": "0x735bc9470d91787ec05f5953769bb712224a790f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MultiSend",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-26\n*/\n\npragma solidity ^0.5.4;\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract MultiSend {\n  function multiSend(address _token, address[] memory addresses, uint amount) public {\n    ERC20 token = ERC20(_token);\n    for(uint i = 0; i < addresses.length; i++) {\n      require(token.transferFrom(msg.sender, addresses[i], amount));\n    }\n  }\n  \n  function multiSendEth(address payable[] memory addresses, uint[] memory values) public payable {\n    for(uint i = 0; i < addresses.length; i++) {\n      addresses[i].transfer(values[i]);\n    }\n    msg.sender.transfer(address(this).balance);\n  }\n  \n  function multiSendEthEqual(address payable[] memory addresses, uint amount) public payable {\n    for(uint i = 0; i < addresses.length; i++) {\n      addresses[i].transfer(amount);\n    }\n    msg.sender.transfer(address(this).balance);\n  }\n}",
  "bytecode": "608060405234801561001057600080fd5b506106ac806100206000396000f3fe608060405260043610610051576000357c0100000000000000000000000000000000000000000000000000000000900480635b2a0e9614610056578063a3994cc714610145578063e702d7af14610207575b600080fd5b34801561006257600080fd5b506101436004803603606081101561007957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156100b657600080fd5b8201836020820111156100c857600080fd5b803590602001918460208302840111640100000000831117156100ea57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050610353565b005b6102056004803603604081101561015b57600080fd5b810190808035906020019064010000000081111561017857600080fd5b82018360208201111561018a57600080fd5b803590602001918460208302840111640100000000831117156101ac57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291905050506104af565b005b6103516004803603604081101561021d57600080fd5b810190808035906020019064010000000081111561023a57600080fd5b82018360208201111561024c57600080fd5b8035906020019184602083028401116401000000008311171561026e57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156102ce57600080fd5b8201836020820111156102e057600080fd5b8035906020019184602083028401116401000000008311171561030257600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929050505061058c565b005b600083905060008090505b83518110156104a8578173ffffffffffffffffffffffffffffffffffffffff166323b872dd33868481518110151561039257fe5b90602001906020020151866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561045557600080fd5b505af1158015610469573d6000803e3d6000fd5b505050506040513d602081101561047f57600080fd5b8101908080519060200190929190505050151561049b57600080fd5b808060010191505061035e565b5050505050565b60008090505b82518110156105295782818151811015156104cc57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505015801561051b573d6000803e3d6000fd5b5080806001019150506104b5565b503373ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610587573d6000803e3d6000fd5b505050565b60008090505b825181101561061d5782818151811015156105a957fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff166108fc83838151811015156105da57fe5b906020019060200201519081150290604051600060405180830381858888f1935050505015801561060f573d6000803e3d6000fd5b508080600101915050610592565b503373ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f1935050505015801561067b573d6000803e3d6000fd5b50505056fea165627a7a72305820f97ab13b447406253e6f1d7e5deff9a16d3af10203a03a7cb17381e106d46d8b0029"
}