{
  "address": "0xb80776700778e7415da08ef65fa389f75737fb95",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DigitalPrintImage",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-04\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title ERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface ERC165 {\n\n  /**\n   * @notice Query if a contract implements an interface\n   * @param _interfaceId The interface identifier, as specified in ERC-165\n   * @dev Interface identification is specified in ERC-165. This function\n   * uses less than 30,000 gas.\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool);\n}\n\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Basic is ERC165 {\n\n  bytes4 internal constant InterfaceId_ERC721 = 0x80ac58cd;\n  /*\n   * 0x80ac58cd ===\n   *   bytes4(keccak256('balanceOf(address)')) ^\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\n   *   bytes4(keccak256('approve(address,uint256)')) ^\n   *   bytes4(keccak256('getApproved(uint256)')) ^\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n   */\n\n  bytes4 internal constant InterfaceId_ERC721Exists = 0x4f558e79;\n  /*\n   * 0x4f558e79 ===\n   *   bytes4(keccak256('exists(uint256)'))\n   */\n\n  bytes4 internal constant InterfaceId_ERC721Enumerable = 0x780e9d63;\n  /**\n   * 0x780e9d63 ===\n   *   bytes4(keccak256('totalSupply()')) ^\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\n   */\n\n  bytes4 internal constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n  /**\n   * 0x5b5e139f ===\n   *   bytes4(keccak256('name()')) ^\n   *   bytes4(keccak256('symbol()')) ^\n   *   bytes4(keccak256('tokenURI(uint256)'))\n   */\n\n  event Transfer(\n    address indexed _from,\n    address indexed _to,\n    uint256 indexed _tokenId\n  );\n  event Approval(\n    address indexed _owner,\n    address indexed _approved,\n    uint256 indexed _tokenId\n  );\n  event ApprovalForAll(\n    address indexed _owner,\n    address indexed _operator,\n    bool _approved\n  );\n\n  function balanceOf(address _owner) public view returns (uint256 _balance);\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n  function exists(uint256 _tokenId) public view returns (bool _exists);\n\n  function approve(address _to, uint256 _tokenId) public;\n  function getApproved(uint256 _tokenId)\n    public view returns (address _operator);\n\n  function setApprovalForAll(address _operator, bool _approved) public;\n  function isApprovedForAll(address _owner, address _operator)\n    public view returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\n    public;\n\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public;\n}\n\n\ncontract IAssetManager {\n    function createAssetPack(bytes32 _packCover, string _name, uint[] _attributes, bytes32[] _ipfsHashes, uint _packPrice) public;\n    function createAsset(uint _attributes, bytes32 _ipfsHash, uint _packId) public;\n    function buyAssetPack(address _to, uint _assetPackId) public payable;\n    function getNumberOfAssets() public view returns (uint);\n    function getNumberOfAssetPacks() public view returns(uint);\n    function checkHasPermissionForPack(address _address, uint _packId) public view returns (bool);\n    function checkHashExists(bytes32 _ipfsHash) public view returns (bool);\n    function givePermission(address _address, uint _packId) public;\n    function pickUniquePacks(uint [] assetIds) public view returns (uint[]);\n    function getAssetInfo(uint id) public view returns (uint, uint, bytes32);\n    function getAssetPacksUserCreated(address _address) public view returns(uint[]);\n    function getAssetIpfs(uint _id) public view returns (bytes32);\n    function getAssetAttributes(uint _id) public view returns (uint);\n    function getIpfsForAssets(uint [] _ids) public view returns (bytes32[]);\n    function getAttributesForAssets(uint [] _ids) public view returns(uint[]);\n    function withdraw() public;\n    function getAssetPackData(uint _assetPackId) public view returns(string, uint[], uint[], bytes32[]);\n    function getAssetPackName(uint _assetPackId) public view returns (string);\n    function getAssetPackPrice(uint _assetPackId) public view returns (uint);\n    function getCoversForPacks(uint [] _packIds) public view returns (bytes32[]);\n}\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n\n\n\n\n\n\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Enumerable is ERC721Basic {\n  function totalSupply() public view returns (uint256);\n  function tokenOfOwnerByIndex(\n    address _owner,\n    uint256 _index\n  )\n    public\n    view\n    returns (uint256 _tokenId);\n\n  function tokenByIndex(uint256 _index) public view returns (uint256);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Metadata is ERC721Basic {\n  function name() external view returns (string _name);\n  function symbol() external view returns (string _symbol);\n  function tokenURI(uint256 _tokenId) public view returns (string);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n}\n\n\n\n\n\n\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ncontract ERC721Receiver {\n  /**\n   * @dev Magic value to be returned upon successful reception of an NFT\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n   */\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\n\n  /**\n   * @notice Handle the receipt of an NFT\n   * @dev The ERC721 smart contract calls this function on the recipient\n   * after a `safetransfer`. This function MAY throw to revert and reject the\n   * transfer. Return of other than the magic value MUST result in the\n   * transaction being reverted.\n   * Note: the contract address is always the message sender.\n   * @param _operator The address which called `safeTransferFrom` function\n   * @param _from The address which previously owned the token\n   * @param _tokenId The NFT identifier which is being transferred\n   * @param _data Additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n   */\n  function onERC721Received(\n    address _operator,\n    address _from,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public\n    returns(bytes4);\n}\n\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n\n\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary AddressUtils {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   * as the code is not actually created until after the constructor finishes.\n   * @param _addr address to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address _addr) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(_addr) }\n    return size > 0;\n  }\n\n}\n\n\n\n\n\n\n\n\n\n\n/**\n * @title SupportsInterfaceWithLookup\n * @author Matt Condon (@shrugs)\n * @dev Implements ERC165 using a lookup table.\n */\ncontract SupportsInterfaceWithLookup is ERC165 {\n\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\n  /**\n   * 0x01ffc9a7 ===\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\n   */\n\n  /**\n   * @dev a mapping of interface id to whether or not it's supported\n   */\n  mapping(bytes4 => bool) internal supportedInterfaces;\n\n  /**\n   * @dev A contract implementing SupportsInterfaceWithLookup\n   * implement ERC165 itself\n   */\n  constructor()\n    public\n  {\n    _registerInterface(InterfaceId_ERC165);\n  }\n\n  /**\n   * @dev implement supportsInterface(bytes4) using a lookup table\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool)\n  {\n    return supportedInterfaces[_interfaceId];\n  }\n\n  /**\n   * @dev private method for registering an interface\n   */\n  function _registerInterface(bytes4 _interfaceId)\n    internal\n  {\n    require(_interfaceId != 0xffffffff);\n    supportedInterfaces[_interfaceId] = true;\n  }\n}\n\n\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\n\n  using SafeMath for uint256;\n  using AddressUtils for address;\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n\n  // Mapping from token ID to owner\n  mapping (uint256 => address) internal tokenOwner;\n\n  // Mapping from token ID to approved address\n  mapping (uint256 => address) internal tokenApprovals;\n\n  // Mapping from owner to number of owned token\n  mapping (address => uint256) internal ownedTokensCount;\n\n  // Mapping from owner to operator approvals\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\n\n  constructor()\n    public\n  {\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(InterfaceId_ERC721);\n    _registerInterface(InterfaceId_ERC721Exists);\n  }\n\n  /**\n   * @dev Gets the balance of the specified address\n   * @param _owner address to query the balance of\n   * @return uint256 representing the amount owned by the passed address\n   */\n  function balanceOf(address _owner) public view returns (uint256) {\n    require(_owner != address(0));\n    return ownedTokensCount[_owner];\n  }\n\n  /**\n   * @dev Gets the owner of the specified token ID\n   * @param _tokenId uint256 ID of the token to query the owner of\n   * @return owner address currently marked as the owner of the given token ID\n   */\n  function ownerOf(uint256 _tokenId) public view returns (address) {\n    address owner = tokenOwner[_tokenId];\n    require(owner != address(0));\n    return owner;\n  }\n\n  /**\n   * @dev Returns whether the specified token exists\n   * @param _tokenId uint256 ID of the token to query the existence of\n   * @return whether the token exists\n   */\n  function exists(uint256 _tokenId) public view returns (bool) {\n    address owner = tokenOwner[_tokenId];\n    return owner != address(0);\n  }\n\n  /**\n   * @dev Approves another address to transfer the given token ID\n   * The zero address indicates there is no approved address.\n   * There can only be one approved address per token at a given time.\n   * Can only be called by the token owner or an approved operator.\n   * @param _to address to be approved for the given token ID\n   * @param _tokenId uint256 ID of the token to be approved\n   */\n  function approve(address _to, uint256 _tokenId) public {\n    address owner = ownerOf(_tokenId);\n    require(_to != owner);\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n    tokenApprovals[_tokenId] = _to;\n    emit Approval(owner, _to, _tokenId);\n  }\n\n  /**\n   * @dev Gets the approved address for a token ID, or zero if no address set\n   * @param _tokenId uint256 ID of the token to query the approval of\n   * @return address currently approved for the given token ID\n   */\n  function getApproved(uint256 _tokenId) public view returns (address) {\n    return tokenApprovals[_tokenId];\n  }\n\n  /**\n   * @dev Sets or unsets the approval of a given operator\n   * An operator is allowed to transfer all tokens of the sender on their behalf\n   * @param _to operator address to set the approval\n   * @param _approved representing the status of the approval to be set\n   */\n  function setApprovalForAll(address _to, bool _approved) public {\n    require(_to != msg.sender);\n    operatorApprovals[msg.sender][_to] = _approved;\n    emit ApprovalForAll(msg.sender, _to, _approved);\n  }\n\n  /**\n   * @dev Tells whether an operator is approved by a given owner\n   * @param _owner owner address which you want to query the approval of\n   * @param _operator operator address which you want to query the approval of\n   * @return bool whether the given operator is approved by the given owner\n   */\n  function isApprovedForAll(\n    address _owner,\n    address _operator\n  )\n    public\n    view\n    returns (bool)\n  {\n    return operatorApprovals[_owner][_operator];\n  }\n\n  /**\n   * @dev Transfers the ownership of a given token ID to another address\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    public\n  {\n    require(isApprovedOrOwner(msg.sender, _tokenId));\n    require(_from != address(0));\n    require(_to != address(0));\n\n    clearApproval(_from, _tokenId);\n    removeTokenFrom(_from, _tokenId);\n    addTokenTo(_to, _tokenId);\n\n    emit Transfer(_from, _to, _tokenId);\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   *\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    public\n  {\n    // solium-disable-next-line arg-overflow\n    safeTransferFrom(_from, _to, _tokenId, \"\");\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes data to send along with a safe transfer check\n   */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public\n  {\n    transferFrom(_from, _to, _tokenId);\n    // solium-disable-next-line arg-overflow\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n  }\n\n  /**\n   * @dev Returns whether the given spender can transfer a given token ID\n   * @param _spender address of the spender to query\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @return bool whether the msg.sender is approved for the given token ID,\n   *  is an operator of the owner, or is the owner of the token\n   */\n  function isApprovedOrOwner(\n    address _spender,\n    uint256 _tokenId\n  )\n    internal\n    view\n    returns (bool)\n  {\n    address owner = ownerOf(_tokenId);\n    // Disable solium check because of\n    // https://github.com/duaraghav8/Solium/issues/175\n    // solium-disable-next-line operator-whitespace\n    return (\n      _spender == owner ||\n      getApproved(_tokenId) == _spender ||\n      isApprovedForAll(owner, _spender)\n    );\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param _to The address that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    require(_to != address(0));\n    addTokenTo(_to, _tokenId);\n    emit Transfer(address(0), _to, _tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    clearApproval(_owner, _tokenId);\n    removeTokenFrom(_owner, _tokenId);\n    emit Transfer(_owner, address(0), _tokenId);\n  }\n\n  /**\n   * @dev Internal function to clear current approval of a given token ID\n   * Reverts if the given address is not indeed the owner of the token\n   * @param _owner owner of the token\n   * @param _tokenId uint256 ID of the token to be transferred\n   */\n  function clearApproval(address _owner, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _owner);\n    if (tokenApprovals[_tokenId] != address(0)) {\n      tokenApprovals[_tokenId] = address(0);\n    }\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    require(tokenOwner[_tokenId] == address(0));\n    tokenOwner[_tokenId] = _to;\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _from);\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n    tokenOwner[_tokenId] = address(0);\n  }\n\n  /**\n   * @dev Internal function to invoke `onERC721Received` on a target address\n   * The call is not executed if the target address is not a contract\n   * @param _from address representing the previous owner of the given token ID\n   * @param _to target address that will receive the tokens\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes optional data to send along with the call\n   * @return whether the call correctly returned the expected magic value\n   */\n  function checkAndCallSafeTransfer(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    internal\n    returns (bool)\n  {\n    if (!_to.isContract()) {\n      return true;\n    }\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\n      msg.sender, _from, _tokenId, _data);\n    return (retval == ERC721_RECEIVED);\n  }\n}\n\n\n\n\n/**\n * @title Full ERC721 Token\n * This implementation includes all the required and some optional functionality of the ERC721 standard\n * Moreover, it includes approve all functionality using operator terminology\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\n\n  // Token name\n  string internal name_;\n\n  // Token symbol\n  string internal symbol_;\n\n  // Mapping from owner to list of owned token IDs\n  mapping(address => uint256[]) internal ownedTokens;\n\n  // Mapping from token ID to index of the owner tokens list\n  mapping(uint256 => uint256) internal ownedTokensIndex;\n\n  // Array with all token ids, used for enumeration\n  uint256[] internal allTokens;\n\n  // Mapping from token id to position in the allTokens array\n  mapping(uint256 => uint256) internal allTokensIndex;\n\n  // Optional mapping for token URIs\n  mapping(uint256 => string) internal tokenURIs;\n\n  /**\n   * @dev Constructor function\n   */\n  constructor(string _name, string _symbol) public {\n    name_ = _name;\n    symbol_ = _symbol;\n\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(InterfaceId_ERC721Enumerable);\n    _registerInterface(InterfaceId_ERC721Metadata);\n  }\n\n  /**\n   * @dev Gets the token name\n   * @return string representing the token name\n   */\n  function name() external view returns (string) {\n    return name_;\n  }\n\n  /**\n   * @dev Gets the token symbol\n   * @return string representing the token symbol\n   */\n  function symbol() external view returns (string) {\n    return symbol_;\n  }\n\n  /**\n   * @dev Returns an URI for a given token ID\n   * Throws if the token ID does not exist. May return an empty string.\n   * @param _tokenId uint256 ID of the token to query\n   */\n  function tokenURI(uint256 _tokenId) public view returns (string) {\n    require(exists(_tokenId));\n    return tokenURIs[_tokenId];\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n   * @param _owner address owning the tokens list to be accessed\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n   */\n  function tokenOfOwnerByIndex(\n    address _owner,\n    uint256 _index\n  )\n    public\n    view\n    returns (uint256)\n  {\n    require(_index < balanceOf(_owner));\n    return ownedTokens[_owner][_index];\n  }\n\n  /**\n   * @dev Gets the total amount of tokens stored by the contract\n   * @return uint256 representing the total amount of tokens\n   */\n  function totalSupply() public view returns (uint256) {\n    return allTokens.length;\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of all the tokens in this contract\n   * Reverts if the index is greater or equal to the total number of tokens\n   * @param _index uint256 representing the index to be accessed of the tokens list\n   * @return uint256 token ID at the given index of the tokens list\n   */\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\n    require(_index < totalSupply());\n    return allTokens[_index];\n  }\n\n  /**\n   * @dev Internal function to set the token URI for a given token\n   * Reverts if the token ID does not exist\n   * @param _tokenId uint256 ID of the token to set its URI\n   * @param _uri string URI to assign\n   */\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\n    require(exists(_tokenId));\n    tokenURIs[_tokenId] = _uri;\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    super.addTokenTo(_to, _tokenId);\n    uint256 length = ownedTokens[_to].length;\n    ownedTokens[_to].push(_tokenId);\n    ownedTokensIndex[_tokenId] = length;\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    super.removeTokenFrom(_from, _tokenId);\n\n    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\n    // then delete the last slot.\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n\n    ownedTokens[_from][tokenIndex] = lastToken;\n    // This also deletes the contents at the last position of the array\n    ownedTokens[_from].length--;\n\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n    ownedTokensIndex[_tokenId] = 0;\n    ownedTokensIndex[lastToken] = tokenIndex;\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param _to address the beneficiary that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    super._mint(_to, _tokenId);\n\n    allTokensIndex[_tokenId] = allTokens.length;\n    allTokens.push(_tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param _owner owner of the token to burn\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    super._burn(_owner, _tokenId);\n\n    // Clear metadata (if any)\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\n      delete tokenURIs[_tokenId];\n    }\n\n    // Reorg all tokens array\n    uint256 tokenIndex = allTokensIndex[_tokenId];\n    uint256 lastTokenIndex = allTokens.length.sub(1);\n    uint256 lastToken = allTokens[lastTokenIndex];\n\n    allTokens[tokenIndex] = lastToken;\n    allTokens[lastTokenIndex] = 0;\n\n    allTokens.length--;\n    allTokensIndex[_tokenId] = 0;\n    allTokensIndex[lastToken] = tokenIndex;\n  }\n\n}\n\n\n\n\n\ncontract Functions {\n\n    bytes32[] public randomHashes;\n\n    function fillWithHashes() public {\n        require(randomHashes.length == 0);\n\n        for (uint i = block.number - 100; i < block.number; i++) {\n            randomHashes.push(blockhash(i));\n        }\n    }\n\n    /// @notice Function to calculate initial random seed based on our hashes\n    /// @param _randomHashIds are ids in our array of hashes\n    /// @param _timestamp is timestamp for that hash\n    /// @return uint representation of random seed\n    function calculateSeed(uint[] _randomHashIds, uint _timestamp) public view returns (uint) {\n        require(_timestamp != 0);\n        require(_randomHashIds.length == 10);\n\n        bytes32 randomSeed = keccak256(\n            abi.encodePacked(\n            randomHashes[_randomHashIds[0]], randomHashes[_randomHashIds[1]],\n            randomHashes[_randomHashIds[2]], randomHashes[_randomHashIds[3]],\n            randomHashes[_randomHashIds[4]], randomHashes[_randomHashIds[5]],\n            randomHashes[_randomHashIds[6]], randomHashes[_randomHashIds[7]],\n            randomHashes[_randomHashIds[8]], randomHashes[_randomHashIds[9]],\n            _timestamp\n            )\n        );\n\n        return uint(randomSeed);\n    }\n\n    function getRandomHashesLength() public view returns(uint) {\n        return randomHashes.length;\n    }\n\n    /// @notice Function which decodes bytes32 to array of integers\n    /// @param _potentialAssets are potential assets user would like to have\n    /// @return array of assetIds\n    function decodeAssets(bytes32[] _potentialAssets) public pure returns (uint[] assets) {\n        require(_potentialAssets.length > 0);\n\n        uint[] memory assetsCopy = new uint[](_potentialAssets.length*10);\n        uint numberOfAssets = 0;\n\n        for (uint j = 0; j < _potentialAssets.length; j++) {\n            uint input;\n            bytes32 pot = _potentialAssets[j];\n\n            assembly {\n                input := pot\n            }\n\n            for (uint i = 10; i > 0; i--) {\n                uint mask = (2 << ((i-1) * 24)) / 2;\n                uint b = (input & (mask * 16777215)) / mask;\n\n                if (b != 0) {\n                    assetsCopy[numberOfAssets] = b;\n                    numberOfAssets++;\n                }\n            }\n        }\n\n        assets = new uint[](numberOfAssets);\n        for (i = 0; i < numberOfAssets; i++) {\n            assets[i] = assetsCopy[i];\n        }\n    }\n\n    /// @notice Function to pick random assets from potentialAssets array\n    /// @param _finalSeed is final random seed\n    /// @param _potentialAssets is bytes32[] array of potential assets\n    /// @return uint[] array of randomly picked assets\n    function pickRandomAssets(uint _finalSeed, bytes32[] _potentialAssets) public pure returns(uint[] finalPicked) {\n        require(_finalSeed != 0);\n        require(_potentialAssets.length > 0);\n\n        uint[] memory assetIds = decodeAssets(_potentialAssets);\n        uint[] memory pickedIds = new uint[](assetIds.length);\n\n        uint finalSeedCopy = _finalSeed;\n        uint index = 0;\n\n        for (uint i = 0; i < assetIds.length; i++) {\n            finalSeedCopy = uint(keccak256(abi.encodePacked(finalSeedCopy, assetIds[i])));\n            if (finalSeedCopy % 2 == 0) {\n                pickedIds[index] = assetIds[i];\n                index++;\n            }\n        }\n\n        finalPicked = new uint[](index);\n        for (i = 0; i < index; i++) {\n            finalPicked[i] = pickedIds[i];\n        }\n    }\n\n    /// @notice Function to pick random assets from potentialAssets array\n    /// @param _finalSeed is final random seed\n    /// @param _potentialAssets is bytes32[] array of potential assets\n    /// @param _width of canvas\n    /// @param _height of canvas\n    /// @return arrays of randomly picked assets defining ids, coordinates, zoom, rotation and layers\n    function getImage(uint _finalSeed, bytes32[] _potentialAssets, uint _width, uint _height) public pure \n    returns(uint[] finalPicked, uint[] x, uint[] y, uint[] zoom, uint[] rotation, uint[] layers) {\n        require(_finalSeed != 0);\n        require(_potentialAssets.length > 0);\n\n        uint[] memory assetIds = decodeAssets(_potentialAssets);\n        uint[] memory pickedIds = new uint[](assetIds.length);\n        x = new uint[](assetIds.length);\n        y = new uint[](assetIds.length);\n        zoom = new uint[](assetIds.length);\n        rotation = new uint[](assetIds.length);\n        layers = new uint[](assetIds.length);\n\n        uint finalSeedCopy = _finalSeed;\n        uint index = 0;\n\n        for (uint i = 0; i < assetIds.length; i++) {\n            finalSeedCopy = uint(keccak256(abi.encodePacked(finalSeedCopy, assetIds[i])));\n            if (finalSeedCopy % 2 == 0) {\n                pickedIds[index] = assetIds[i];\n                (x[index], y[index], zoom[index], rotation[index], layers[index]) = pickRandomAssetPosition(finalSeedCopy, _width, _height);\n                index++;\n            }\n        }\n\n        finalPicked = new uint[](index);\n        for (i = 0; i < index; i++) {\n            finalPicked[i] = pickedIds[i];\n        }\n    }\n\n    /// @notice Function to pick random position for an asset\n    /// @param _randomSeed is random seed for that image\n    /// @param _width of canvas\n    /// @param _height of canvas\n    /// @return tuple of uints representing x,y,zoom,and rotation\n    function pickRandomAssetPosition(uint _randomSeed, uint _width, uint _height) public pure \n    returns (uint x, uint y, uint zoom, uint rotation, uint layer) {\n        \n        x = _randomSeed % _width;\n        y = _randomSeed % _height;\n        zoom = _randomSeed % 200 + 800;\n        rotation = _randomSeed % 360;\n        // using random number for now\n        // if two layers are same, sort by (keccak256(layer, assetId))\n        layer = _randomSeed % 1234567; \n    }\n\n    /// @notice Function to calculate final random seed for user\n    /// @param _randomSeed is initially given random seed\n    /// @param _iterations is number of iterations\n    /// @return final seed for user as uint\n    function getFinalSeed(uint _randomSeed, uint _iterations) public pure returns (bytes32) {\n        require(_randomSeed != 0);\n        require(_iterations != 0);\n        bytes32 finalSeed = bytes32(_randomSeed);\n\n        finalSeed = keccak256(abi.encodePacked(_randomSeed, _iterations));\n        for (uint i = 0; i < _iterations; i++) {\n            finalSeed = keccak256(abi.encodePacked(finalSeed, i));\n        }\n\n        return finalSeed;\n    }\n\n    function toHex(uint _randomSeed) public pure returns (bytes32) {\n        return bytes32(_randomSeed);\n    }\n}\n\n\n\n\n\ncontract UserManager {\n\n    struct User {\n        string username;\n        bytes32 hashToProfilePicture;\n        bool exists;\n    }\n\n    uint public numberOfUsers;\n\n    mapping(string => bool) internal usernameExists;\n    mapping(address => User) public addressToUser;\n\n    mapping(bytes32 => bool) public profilePictureExists;\n    mapping(string => address) internal usernameToAddress;\n\n    event NewUser(address indexed user, string username, bytes32 profilePicture);\n\n    function register(string _username, bytes32 _hashToProfilePicture) public {\n        require(usernameExists[_username] == false || \n                keccak256(abi.encodePacked(getUsername(msg.sender))) == keccak256(abi.encodePacked(_username))\n        );\n\n        if (usernameExists[getUsername(msg.sender)]) {\n            // if he already had username, that username is free now\n            usernameExists[getUsername(msg.sender)] = false;\n        } else {\n            numberOfUsers++;\n            emit NewUser(msg.sender, _username, _hashToProfilePicture);\n        }\n\n        addressToUser[msg.sender] = User({\n            username: _username,\n            hashToProfilePicture: _hashToProfilePicture,\n            exists: true\n        });\n\n        usernameExists[_username] = true;\n        profilePictureExists[_hashToProfilePicture] = true;\n        usernameToAddress[_username] = msg.sender;\n    }\n\n    function changeProfilePicture(bytes32 _hashToProfilePicture) public {\n        require(addressToUser[msg.sender].exists, \"User doesn't exists\");\n\n        addressToUser[msg.sender].hashToProfilePicture = _hashToProfilePicture;\n    }\n\n    function getUserInfo(address _address) public view returns(string, bytes32) {\n        User memory user = addressToUser[_address];\n        return (user.username, user.hashToProfilePicture);\n    }\n\n    function getUsername(address _address) public view returns(string) {\n        return addressToUser[_address].username;\n    } \n\n    function getProfilePicture(address _address) public view returns(bytes32) {\n        return addressToUser[_address].hashToProfilePicture;\n    }\n\n    function isUsernameExists(string _username) public view returns(bool) {\n        return usernameExists[_username];\n    }\n\n}\n\n\ncontract DigitalPrintImage is ERC721Token(\"DigitalPrintImage\", \"DPM\"), UserManager, Ownable {\n\n    struct ImageMetadata {\n        uint finalSeed;\n        bytes32[] potentialAssets;\n        uint timestamp;\n        address creator;\n        string ipfsHash;\n        string extraData;\n    }\n\n    mapping(uint => bool) public seedExists;\n    mapping(uint => ImageMetadata) public imageMetadata;\n    mapping(uint => string) public idToIpfsHash;\n\n    address public marketplaceContract;\n    IAssetManager public assetManager;\n    Functions public functions;\n\n    modifier onlyMarketplaceContract() {\n        require(msg.sender == address(marketplaceContract));\n        _;\n    }\n\n    event ImageCreated(uint indexed imageId, address indexed owner);\n    /// @dev only for testing purposes\n    // function createImageTest() public {\n    //     _mint(msg.sender, totalSupply());\n    // }\n\n    /// @notice Function will create new image\n    /// @param _randomHashIds is array of random hashes from our array\n    /// @param _timestamp is timestamp when image is created\n    /// @param _iterations is number of how many times he generated random asset positions until he liked what he got\n    /// @param _potentialAssets is set of all potential assets user selected for an image\n    /// @param _author is nickname of image owner\n    /// @param _ipfsHash is ipfsHash of the image .png\n    /// @param _extraData string containing ipfsHash that contains (frame,width,height,title,description)\n    /// @return returns id of created image\n    function createImage(\n        uint[] _randomHashIds,\n        uint _timestamp,\n        uint _iterations,\n        bytes32[] _potentialAssets,\n        string _author,\n        string _ipfsHash,\n        string _extraData) public payable {\n        require(_potentialAssets.length <= 5);\n        // if user exists send his username, if it doesn't check for some username that doesn't exists\n        require(msg.sender == usernameToAddress[_author] || !usernameExists[_author]);\n\n        // if user doesn't exists create that user with no profile picture\n        if (!usernameExists[_author]) {\n            register(_author, bytes32(0));\n        }\n\n        uint[] memory pickedAssets;\n        uint finalSeed;\n       \n        (pickedAssets, finalSeed) = getPickedAssetsAndFinalSeed(_potentialAssets, _randomHashIds, _timestamp, _iterations); \n        uint[] memory pickedAssetPacks = assetManager.pickUniquePacks(pickedAssets);\n        uint finalPrice = 0;\n\n        for (uint i = 0; i < pickedAssetPacks.length; i++) {\n            if (assetManager.checkHasPermissionForPack(msg.sender, pickedAssetPacks[i]) == false) {\n                finalPrice += assetManager.getAssetPackPrice(pickedAssetPacks[i]);\n\n                assetManager.buyAssetPack.value(assetManager.getAssetPackPrice(pickedAssetPacks[i]))(msg.sender, pickedAssetPacks[i]);\n            }\n        }\n        \n        require(msg.value >= finalPrice);\n\n        uint id = totalSupply();\n        _mint(msg.sender, id);\n\n        imageMetadata[id] = ImageMetadata({\n            finalSeed: finalSeed,\n            potentialAssets: _potentialAssets,\n            timestamp: _timestamp,\n            creator: msg.sender,\n            ipfsHash: _ipfsHash,\n            extraData: _extraData\n        });\n\n        idToIpfsHash[id] = _ipfsHash;\n        seedExists[finalSeed] = true;\n\n        emit ImageCreated(id, msg.sender);\n    }\n\n    /// @notice approving image to be taken from specific address\n    /// @param _from address from which we transfer image\n    /// @param _to address that we give permission to take image\n    /// @param _imageId we are willing to give\n    function transferFromMarketplace(address _from, address _to, uint256 _imageId) public onlyMarketplaceContract {\n        require(isApprovedOrOwner(_from, _imageId));\n\n        clearApproval(_from, _imageId);\n        removeTokenFrom(_from, _imageId);\n        addTokenTo(_to, _imageId);\n\n        emit Transfer(_from, _to, _imageId);\n    }\n\n    /// @notice adds marketplace address to contract only if it doesn't already exist\n    /// @param _marketplaceContract address of marketplace contract\n    function addMarketplaceContract(address _marketplaceContract) public onlyOwner {\n        require(address(marketplaceContract) == 0x0);\n        \n        marketplaceContract = _marketplaceContract;\n    }\n\n    /// @notice Function to add assetManager\n    /// @param _assetManager is address of assetManager contract\n    function addAssetManager(address _assetManager) public onlyOwner {\n        require(address(assetManager) == 0x0);\n\n        assetManager = IAssetManager(_assetManager);\n    }\n\n    /// @notice Function to add functions contract\n    /// @param _functions is address of functions contract\n    function addFunctions(address _functions) public onlyOwner {\n        require(address(functions) == 0x0);\n\n        functions = Functions(_functions);\n    }\n\n    /// @notice Function to calculate final price for an image based on selected assets\n    /// @param _pickedAssets is array of picked packs\n    /// @param _owner is address of image owner\n    /// @return finalPrice for the image\n    function calculatePrice(uint[] _pickedAssets, address _owner) public view returns (uint) {\n        if (_pickedAssets.length == 0) {\n            return 0;\n        }\n\n        uint[] memory pickedAssetPacks = assetManager.pickUniquePacks(_pickedAssets);\n        uint finalPrice = 0;\n        for (uint i = 0; i < pickedAssetPacks.length; i++) {\n            if (assetManager.checkHasPermissionForPack(_owner, pickedAssetPacks[i]) == false) {\n                finalPrice += assetManager.getAssetPackPrice(pickedAssetPacks[i]);\n            }\n        }\n\n        return finalPrice;\n    }\n\n    /// @notice Method returning informations needed for gallery page\n    /// @param _imageId id of image \n    function getGalleryData(uint _imageId) public view \n    returns(address, address, string, bytes32, string, string) {\n        require(_imageId < totalSupply());\n\n        return(\n            imageMetadata[_imageId].creator,\n            ownerOf(_imageId),\n            addressToUser[ownerOf(_imageId)].username,\n            addressToUser[ownerOf(_imageId)].hashToProfilePicture,\n            imageMetadata[_imageId].ipfsHash,\n            imageMetadata[_imageId].extraData\n        );\n\n    }\n\n    /// @notice returns metadata of image\n    /// @dev not possible to use public mapping because of array of bytes32\n    /// @param _imageId id of image\n    function getImageMetadata(uint _imageId) public view\n    returns(address, string, uint, string, uint, bytes32[]) {\n        ImageMetadata memory metadata = imageMetadata[_imageId];\n\n        return(\n            metadata.creator,\n            metadata.extraData,\n            metadata.finalSeed,\n            metadata.ipfsHash,\n            metadata.timestamp,\n            metadata.potentialAssets\n        );\n    }\n\n    /// @notice returns all images owned by _user\n    /// @param _user address of user\n    function getUserImages(address _user) public view returns(uint[]) {\n        return ownedTokens[_user];\n    }\n\n    /// @notice returns picked assets from potential assets and final seed\n    /// @param _potentialAssets array of all potential assets encoded in bytes32\n    /// @param _randomHashIds selected random hash ids from our contract\n    /// @param _timestamp timestamp of image creation\n    /// @param _iterations number of iterations to get to final seed\n    function getPickedAssetsAndFinalSeed(bytes32[] _potentialAssets, uint[] _randomHashIds, uint _timestamp, uint _iterations) internal view returns(uint[], uint) {\n        uint finalSeed = uint(functions.getFinalSeed(functions.calculateSeed(_randomHashIds, _timestamp), _iterations));\n\n        require(!seedExists[finalSeed]);\n\n        return (functions.pickRandomAssets(finalSeed, _potentialAssets), finalSeed);\n    }\n\n}",
  "bytecode": ""
}