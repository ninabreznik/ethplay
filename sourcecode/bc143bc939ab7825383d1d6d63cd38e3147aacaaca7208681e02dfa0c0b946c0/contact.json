{
  "address": "0xd321d87758e588438a5c3da5a6f1db076cd6c551",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "VIC",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-19\n*/\n\npragma solidity ^0.4.25;\n\n\ncontract VIC {\n    event CardsAdded(\n        address indexed user,\n        uint160 indexed root,\n        uint32 count\n    );\n    \n    event CardCompromised(\n        address indexed user,\n        uint160 indexed root,\n        uint32 index\n    );\n    \n    function publish(uint160 root, uint32 count) public {\n        _publish(msg.sender, root, count);\n    }\n    \n    function publishBySignature(address user, uint160 root, uint32 count, bytes32 r, bytes32 s, uint8 v) public {\n        bytes32 messageHash = keccak256(abi.encodePacked(root, count));\n        require(user == ecrecover(messageHash, 27 + v, r, s), \"Invalid signature\");\n        _publish(user, root, count);\n    }\n    \n    function report(uint160 root, uint32 index) public {\n        _report(msg.sender, root, index);\n    }\n    \n    function reportBySignature(address user, uint160 root, uint32 index, bytes32 r, bytes32 s, uint8 v) public {\n        bytes32 messageHash = keccak256(abi.encodePacked(root, index));\n        require(user == ecrecover(messageHash, 27 + v, r, s), \"Invalid signature\");\n        _report(user, root, index);\n    }\n    \n    function _publish(address user, uint160 root, uint32 count) public {\n        emit CardsAdded(user, root, count);\n    }\n    \n    function _report(address user, uint160 root, uint32 index) public {\n        emit CardCompromised(user, root, index);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b506105a2806100206000396000f30060806040526004361061005e5763ffffffff60e060020a6000350416631b404ecc81146100635780632dd1c96a1461008f578063314cc6d9146100bf5780633f5d3cf2146100fb578063c057d3301461012b578063c52f609e14610167575b600080fd5b34801561006f57600080fd5b5061008d600160a060020a036004351663ffffffff60243516610191565b005b34801561009b57600080fd5b5061008d600160a060020a036004358116906024351663ffffffff604435166101a0565b3480156100cb57600080fd5b5061008d600160a060020a036004358116906024351663ffffffff6044351660643560843560ff60a435166101ee565b34801561010757600080fd5b5061008d600160a060020a036004358116906024351663ffffffff6044351661038a565b34801561013757600080fd5b5061008d600160a060020a036004358116906024351663ffffffff6044351660643560843560ff60a435166103d8565b34801561017357600080fd5b5061008d600160a060020a036004351663ffffffff6024351661056b565b61019c3383836101a0565b5050565b6040805163ffffffff831681529051600160a060020a0380851692908616917f839b2f985f6aa44bc2a316e5eff63381a94c7659a3d081bfc3cfc830caec67159181900360200190a3505050565b604080516c01000000000000000000000000600160a060020a0388160260208083019190915260e060020a63ffffffff8816026034830152825160188184030181526038909201928390528151600093918291908401908083835b602083106102685780518252601f199092019160209182019101610249565b51815160209384036101000a6000190180199092169116179052604080519290940182900382206000808452838301808752829052601b8a0160ff1684870152606084018c9052608084018b905294519097506001965060a080840196509194601f19820194509281900390910191865af11580156102eb573d6000803e3d6000fd5b50505060206040510351600160a060020a031687600160a060020a031614151561037657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f496e76616c6964207369676e6174757265000000000000000000000000000000604482015290519081900360640190fd5b6103818787876101a0565b50505050505050565b6040805163ffffffff831681529051600160a060020a0380851692908616917ff835555bfbecae2f9b95eb8b0f189a4e213ae8f580c3e4f1bbba9f52005bcf279181900360200190a3505050565b604080516c01000000000000000000000000600160a060020a0388160260208083019190915260e060020a63ffffffff8816026034830152825160188184030181526038909201928390528151600093918291908401908083835b602083106104525780518252601f199092019160209182019101610433565b51815160209384036101000a6000190180199092169116179052604080519290940182900382206000808452838301808752829052601b8a0160ff1684870152606084018c9052608084018b905294519097506001965060a080840196509194601f19820194509281900390910191865af11580156104d5573d6000803e3d6000fd5b50505060206040510351600160a060020a031687600160a060020a031614151561056057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f496e76616c6964207369676e6174757265000000000000000000000000000000604482015290519081900360640190fd5b61038187878761038a565b61019c33838361038a5600a165627a7a72305820cbca464032e5c1f1bf5c456328bce95a91471327ae94f49f649feff64a1d70ad0029"
}