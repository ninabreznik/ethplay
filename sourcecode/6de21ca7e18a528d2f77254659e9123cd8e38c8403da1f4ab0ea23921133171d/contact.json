{
  "address": "0xafe60511341a37488de25bef351952562e31fcc1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "TbotToken",
  "contractName": "TBOT",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-09-22\n*/\n\npragma solidity ^0.4.11;\n\ncontract owned {\n    address public owner;\n\n    function owned() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner {\n        owner = newOwner;\n    }\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n\ncontract ParentToken {\n\n     /* library used for calculations */\n    using SafeMath for uint256; \n\n    /* Public variables of the token */\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n\n    mapping(address => uint) balances;\n    mapping(address => mapping(address=>uint)) allowance;        \n\n\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function ParentToken(uint256 currentSupply,\n        string tokenName,\n        uint8 decimalUnits,\n        string tokenSymbol){\n            \n       balances[msg.sender] =  currentSupply;    // Give the creator all initial tokens  \n       totalSupply = currentSupply;              // Update total supply \n       name = tokenName;                         // Set the name for display purposes\n       decimals = decimalUnits;                  // Decimals for the tokens\n       symbol = tokenSymbol;\t\t\t\t\t// Set the symbol for display purposes\t\n    }\n    \n    \n\n   ///@notice Transfer tokens to the beneficiary account\n   ///@param  to The beneficiary account\n   ///@param  value The amount of tokens to be transfered  \n       function transfer(address to, uint value) returns (bool success){\n        require(\n            balances[msg.sender] >= value \n            && value > 0 \n            );\n            balances[msg.sender] = balances[msg.sender].sub(value);    \n            balances[to] = balances[to].add(value);\n            return true;\n    }\n    \n\t///@notice Allow another contract to spend some tokens in your behalf\n\t///@param  spender The address authorized to spend \n\t///@param  value The amount to be approved \n    function approve(address spender, uint256 value)\n        returns (bool success) {\n        allowance[msg.sender][spender] = value;\n        return true;\n    }\n\n    ///@notice Approve and then communicate the approved contract in a single tx\n\t///@param  spender The address authorized to spend \n\t///@param  value The amount to be approved \n    function approveAndCall(address spender, uint256 value, bytes extraData)\n        returns (bool success) {    \n        tokenRecipient recSpender = tokenRecipient(spender);\n        if (approve(spender, value)) {\n            recSpender.receiveApproval(msg.sender, value, this, extraData);\n            return true;\n        }\n    }\n\n\n\n   ///@notice Transfer tokens between accounts\n   ///@param  from The benefactor/sender account.\n   ///@param  to The beneficiary account\n   ///@param  value The amount to be transfered  \n    function transferFrom(address from, address to, uint value) returns (bool success){\n        \n        require(\n            allowance[from][msg.sender] >= value\n            &&balances[from] >= value\n            && value > 0\n            );\n            \n            balances[from] = balances[from].sub(value);\n            balances[to] =  balances[to].add(value);\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n            return true;\n        }\n        \n}\n\n\ncontract TBOT is owned,ParentToken{\n\n     /* library used for calculations */\n    using SafeMath for uint256; \n\n     /* Public variables of the token */\n    string public standard = 'Token 0.1';  \n    uint256 public currentSupply= 3000000000000000;\n    string public constant symbol = \"TBT\";\n    string public constant tokenName = \"TBOT\";\n    uint8 public constant decimals = 8;\n\n    \n\n    mapping (address => bool) public frozenAccount;\n\n\n  ///@notice Default function used for any payments made.\n    function () payable {\n        acceptPayment();    \n    }\n   \n\n   ///@notice Accept payment and transfer to owner account. \n    function acceptPayment() payable {\n        require(msg.value>0);\n        \n        owner.transfer(msg.value);\n    }\n\n\n\n    function TBOT()ParentToken(currentSupply,tokenName,decimals,symbol){}\n\n\n   ///@notice Provides balance of the account requested \n   ///@param  add Address of the account for which balance is being enquired\n    function balanceOf(address add) constant returns (uint balance){\n       return balances[add];\n    }\n    \n    \n    \n   ///@notice Transfer tokens to the beneficiary account\n   ///@param  to The beneficiary account\n   ///@param  value The amount of tokens to be transfered \n        function transfer(address to, uint value) returns (bool success){\n        require(\n            balances[msg.sender] >= value \n            && value > 0 \n            && (!frozenAccount[msg.sender]) \t\t\t\t\t\t\t\t\t\t// Allow transfer only if account is not frozen\n            );\n            balances[msg.sender] = balances[msg.sender].sub(value);                 \n            balances[to] = balances[to].add(value);                               // Update the balance of beneficiary account\n\t\t\tTransfer(msg.sender,to,value);\n            return true;\n    }\n    \n    \n\n   ///@notice Transfer tokens between accounts\n   ///@param  from The benefactor/sender account.\n   ///@param  to The beneficiary account\n   ///@param  value The amount to be transfered  \n        function transferFrom(address from, address to, uint value) returns (bool success){\n        \n            require(\n            allowance[from][msg.sender] >= value\n            &&balances[from] >= value                                                 //Check if the benefactor has sufficient balance\n            && value > 0 \n            && (!frozenAccount[msg.sender])                                           // Allow transfer only if account is not frozen\n            );\n            \n            balances[from] = balances[from].sub(value);                               // Deduct from the benefactor account\n            balances[to] =  balances[to].add(value);                                  // Update the balance of beneficiary account\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n            Transfer(from,to,value);\n            return true;\n        }\n        \n    \n\n   ///@notice Increase the number of coins\n   ///@param  target The address of the account where the coins would be added.\n   ///@param  mintedAmount The amount of coins to be added\n        function mintToken(address target, uint256 mintedAmount) onlyOwner {\n        balances[target] = balances[target].add(mintedAmount);      //Add the amount of coins to be increased to the balance\n        currentSupply = currentSupply.add(mintedAmount);            //Add the amount of coins to be increased to the supply\n        Transfer(0, this, mintedAmount);\n        Transfer(this, target, mintedAmount);\n    }\n\n   ///@notice Freeze the account at the target address\n   ///@param  target The address of the account to be frozen\n    function freezeAccount(address target, bool freeze) onlyOwner {\n        require(freeze);                                             //Check if account has to be freezed\n        frozenAccount[target] = freeze;                              //Freeze the account  \n        FrozenFunds(target, freeze);\n    }\n\n\n   /// @notice Remove tokens from the system irreversibly\n    /// @param value The amount of money to burn\n    function burn(uint256 value) onlyOwner returns (bool success)  {\n        require (balances[msg.sender] > value && value>0);            // Check if the sender has enough balance\n        balances[msg.sender] = balances[msg.sender].sub(value);       // Deduct from the sender\n        currentSupply = currentSupply.sub(value);                     // Update currentSupply\n        Burn(msg.sender, value);\n        return true;\n    }\n\n    function burnFrom(address from, uint256 value) onlyOwner returns (bool success) {\n        require(balances[from] >= value);                                         // Check if the targeted balance is enough\n        require(value <= allowance[from][msg.sender]);                            // Check allowance\n        balances[from] = balances[from].sub(value);                               // Deduct from the targeted balance\n        allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);     // Deduct from the sender's allowance\n        currentSupply = currentSupply.sub(value);                                 // Update currentSupply\n        Burn(from, value);\n        return true;\n    }\n\n\n\n  /* This notifies clients about the amount transfered */\n\tevent Transfer(address indexed _from, address indexed _to,uint256 _value);     \n\n  /* This notifies clients about the amount approved */\n\tevent Approval(address indexed _owner, address indexed _spender,uint256 _value);\n\n  /* This notifies clients about the account freeze */\n\tevent FrozenFunds(address target, bool frozen);\n    \n  /* This notifies clients about the amount burnt */\n   event Burn(address indexed from, uint256 value);\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"add\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptPayment\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]",
  "bytecode": "60a0604052600960608190527f546f6b656e20302e310000000000000000000000000000000000000000000000608090815262000040916007919062000150565b50660aa87bee53800060085534156200005557fe5b5b600854604060405190810160405280600481526020017f54424f54000000000000000000000000000000000000000000000000000000008152506008604060405190810160405280600381526020017f54425400000000000000000000000000000000000000000000000000000000008152505b5b60008054600160a060020a03191633600160a060020a03161790555b600160a060020a0333166000908152600560209081526040909120859055600485905583516200011e916001919086019062000150565b506003805460ff191660ff841617905580516200014390600290602084019062000150565b505b505050505b620001fa565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200019357805160ff1916838001178555620001c3565b82800160010185558215620001c3579182015b82811115620001c3578251825591602001919060010190620001a6565b5b50620001d2929150620001d6565b5090565b620001f791905b80821115620001d25760008155600101620001dd565b5090565b90565b6110e7806200020a6000396000f3006060604052361561010f5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610120578063095ea7b3146101b057806318160ddd146101e357806323b872dd14610205578063313ce5671461023e57806342966c68146102645780635a3b7e421461028b5780636c02a9311461031b57806370a08231146103ab578063771282f6146103d957806379c65068146103fb57806379cc67901461041c5780638da5cb5b1461044f57806395d89b411461047b578063a9059cbb1461050b578063ae0aba8c1461053e578063b414d4b614610548578063cae9ca5114610578578063e724529c146105ef578063f2fde38b14610612575b61011e5b61011b610630565b5b565b005b341561012857fe5b610130610672565b604080516020808252835181830152835191928392908301918501908083838215610176575b80518252602083111561017657601f199092019160209182019101610156565b505050905090810190601f1680156101a25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101b857fe5b6101cf600160a060020a03600435166024356106ff565b604080519115158252519081900360200190f35b34156101eb57fe5b6101f3610730565b60408051918252519081900360200190f35b341561020d57fe5b6101cf600160a060020a0360043581169060243516604435610736565b604080519115158252519081900360200190f35b341561024657fe5b61024e6108c7565b6040805160ff9092168252519081900360200190f35b341561026c57fe5b6101cf6004356108cc565b604080519115158252519081900360200190f35b341561029357fe5b6101306109be565b604080516020808252835181830152835191928392908301918501908083838215610176575b80518252602083111561017657601f199092019160209182019101610156565b505050905090810190601f1680156101a25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561032357fe5b610130610a4c565b604080516020808252835181830152835191928392908301918501908083838215610176575b80518252602083111561017657601f199092019160209182019101610156565b505050905090810190601f1680156101a25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103b357fe5b6101f3600160a060020a0360043516610a83565b60408051918252519081900360200190f35b34156103e157fe5b6101f3610aa2565b60408051918252519081900360200190f35b341561040357fe5b61011e600160a060020a0360043516602435610aa8565b005b341561042457fe5b6101cf600160a060020a0360043516602435610b8a565b604080519115158252519081900360200190f35b341561045757fe5b61045f610cf5565b60408051600160a060020a039092168252519081900360200190f35b341561048357fe5b610130610d04565b604080516020808252835181830152835191928392908301918501908083838215610176575b80518252602083111561017657601f199092019160209182019101610156565b505050905090810190601f1680156101a25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561051357fe5b6101cf600160a060020a0360043516602435610d3b565b604080519115158252519081900360200190f35b61011e610630565b005b341561055057fe5b6101cf600160a060020a0360043516610e43565b604080519115158252519081900360200190f35b341561058057fe5b604080516020600460443581810135601f81018490048402850184019095528484526101cf948235600160a060020a0316946024803595606494929391909201918190840183828082843750949650610e5895505050505050565b604080519115158252519081900360200190f35b34156105f757fe5b61011e600160a060020a03600435166024351515610f92565b005b341561061a57fe5b61011e600160a060020a0360043516611021565b005b6000341161063e5760006000fd5b60008054604051600160a060020a03909116913480156108fc02929091818181858888f19350505050151561011b57fe5b5b565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106f75780601f106106cc576101008083540402835291602001916106f7565b820191906000526020600020905b8154815290600101906020018083116106da57829003601f168201915b505050505081565b600160a060020a03338116600090815260066020908152604080832093861683529290522081905560015b92915050565b60045481565b600160a060020a038084166000908152600660209081526040808320339094168352929052908120548290108015906107885750600160a060020a038416600090815260056020526040902054829010155b80156107945750600082115b80156107b95750600160a060020a03331660009081526009602052604090205460ff16155b15156107c55760006000fd5b600160a060020a0384166000908152600560205260409020546107ee908363ffffffff61106a16565b600160a060020a038086166000908152600560205260408082209390935590851681522054610823908363ffffffff61108116565b600160a060020a0380851660009081526005602090815260408083209490945587831682526006815283822033909316825291909152205461086b908363ffffffff61106a16565b600160a060020a0380861660008181526006602090815260408083203386168452825291829020949094558051868152905192871693919260008051602061109c833981519152929181900390910190a35060015b9392505050565b600881565b6000805433600160a060020a039081169116146108e95760006000fd5b600160a060020a03331660009081526005602052604090205482901180156109115750600082115b151561091d5760006000fd5b600160a060020a033316600090815260056020526040902054610946908363ffffffff61106a16565b600160a060020a033316600090815260056020526040902055600854610972908363ffffffff61106a16565b600855604080518381529051600160a060020a033316917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a25060015b5b919050565b6007805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106f75780601f106106cc576101008083540402835291602001916106f7565b820191906000526020600020905b8154815290600101906020018083116106da57829003601f168201915b505050505081565b60408051808201909152600481527f54424f5400000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a0381166000908152600560205260409020545b919050565b60085481565b60005433600160a060020a03908116911614610ac45760006000fd5b600160a060020a038216600090815260056020526040902054610aed908263ffffffff61108116565b600160a060020a038316600090815260056020526040902055600854610b19908263ffffffff61108116565b600855604080518281529051600160a060020a0330169160009160008051602061109c8339815191529181900360200190a381600160a060020a031630600160a060020a031660008051602061109c833981519152836040518082815260200191505060405180910390a35b5b5050565b6000805433600160a060020a03908116911614610ba75760006000fd5b600160a060020a03831660009081526005602052604090205482901015610bce5760006000fd5b600160a060020a0380841660009081526006602090815260408083203390941683529290522054821115610c025760006000fd5b600160a060020a038316600090815260056020526040902054610c2b908363ffffffff61106a16565b600160a060020a0380851660009081526005602090815260408083209490945560068152838220339093168252919091522054610c6e908363ffffffff61106a16565b600160a060020a0380851660009081526006602090815260408083203390941683529290522055600854610ca8908363ffffffff61106a16565b600855604080518381529051600160a060020a038516917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a25060015b5b92915050565b600054600160a060020a031681565b60408051808201909152600381527f5442540000000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a033316600090815260056020526040812054829010801590610d645750600082115b8015610d895750600160a060020a03331660009081526009602052604090205460ff16155b1515610d955760006000fd5b600160a060020a033316600090815260056020526040902054610dbe908363ffffffff61106a16565b600160a060020a033381166000908152600560205260408082209390935590851681522054610df3908363ffffffff61108116565b600160a060020a0380851660008181526005602090815260409182902094909455805186815290519193339093169260008051602061109c83398151915292918290030190a35060015b92915050565b60096020526000908152604090205460ff1681565b600083610e6581856106ff565b15610f895780600160a060020a0316638f4ffcb1338630876040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360008314610f29575b805182526020831115610f2957601f199092019160209182019101610f09565b505050905090810190601f168015610f555780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1515610f7357fe5b6102c65a03f11515610f8157fe5b505050600191505b5b509392505050565b60005433600160a060020a03908116911614610fae5760006000fd5b801515610fbb5760006000fd5b600160a060020a038216600081815260096020908152604091829020805460ff191685151590811790915582519384529083015280517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a59281900390910190a15b5b5050565b60005433600160a060020a0390811691161461103d5760006000fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b60008282111561107657fe5b508082035b92915050565b60008282018381101561109057fe5b8091505b50929150505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058204a48b5c92e1ffed9a48579bf5cad21475193b784c262bf540a5d5942c261e7880029"
}