{
  "address": "0x056017c55ae7ae32d12aef7c679df83a85ca75ff",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WyvernToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-07\n*/\n\npragma solidity ^0.4.13;\n\nlibrary MerkleProof {\n  /*\n   * @dev Verifies a Merkle proof proving the existence of a leaf in a Merkle tree. Assumes that each pair of leaves\n   * and each pair of pre-images is sorted.\n   * @param _proof Merkle proof containing sibling hashes on the branch from the leaf to the root of the Merkle tree\n   * @param _root Merkle root\n   * @param _leaf Leaf of Merkle tree\n   */\n  function verifyProof(bytes _proof, bytes32 _root, bytes32 _leaf) public pure returns (bool) {\n    // Check if proof length is a multiple of 32\n    if (_proof.length % 32 != 0) return false;\n\n    bytes32 proofElement;\n    bytes32 computedHash = _leaf;\n\n    for (uint256 i = 32; i <= _proof.length; i += 32) {\n      assembly {\n        // Load the current element of the proof\n        proofElement := mload(add(_proof, i))\n      }\n\n      if (computedHash < proofElement) {\n        // Hash(current computed hash + current element of the proof)\n        computedHash = keccak256(computedHash, proofElement);\n      } else {\n        // Hash(current element of the proof + current computed hash)\n        computedHash = keccak256(proofElement, computedHash);\n      }\n    }\n\n    // Check if the computed hash (root) is equal to the provided root\n    return computedHash == _root;\n  }\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract BurnableToken is StandardToken {\n\n    event Burn(address indexed burner, uint256 value);\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public {\n        require(_value > 0);\n        require(_value <= balances[msg.sender]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Burn(burner, _value);\n    }\n}\n\ncontract DelayedReleaseToken is StandardToken {\n\n    /* Temporary administrator address, only used for the initial token release, must be initialized by token constructor. */\n    address temporaryAdmin;\n\n    /* Whether or not the delayed token release has occurred. */\n    bool hasBeenReleased = false;\n\n    /* Number of tokens to be released, must be initialized by token constructor. */\n    uint numberOfDelayedTokens;\n\n    /* Event for convenience. */\n    event TokensReleased(address destination, uint numberOfTokens);\n\n    /**\n     * @dev Release the previously specified amount of tokens to the provided address\n     * @param destination Address for which tokens will be released (minted) \n     */\n    function releaseTokens(address destination) public {\n        require((msg.sender == temporaryAdmin) && (!hasBeenReleased));\n        hasBeenReleased = true;\n        balances[destination] = numberOfDelayedTokens;\n        Transfer(address(0), destination, numberOfDelayedTokens); \n        TokensReleased(destination, numberOfDelayedTokens);\n    }\n\n}\n\ncontract UTXORedeemableToken is StandardToken {\n\n    /* Root hash of the UTXO Merkle tree, must be initialized by token constructor. */\n    bytes32 public rootUTXOMerkleTreeHash;\n\n    /* Redeemed UTXOs. */\n    mapping(bytes32 => bool) redeemedUTXOs;\n\n    /* Multiplier - tokens per Satoshi, must be initialized by token constructor. */\n    uint public multiplier;\n\n    /* Total tokens redeemed so far. */\n    uint public totalRedeemed = 0;\n\n    /* Maximum redeemable tokens, must be initialized by token constructor. */\n    uint public maximumRedeemable;\n\n    /* Redemption event, containing all relevant data for later analysis if desired. */\n    event UTXORedeemed(bytes32 txid, uint8 outputIndex, uint satoshis, bytes proof, bytes pubKey, uint8 v, bytes32 r, bytes32 s, address indexed redeemer, uint numberOfTokens);\n\n    /**\n     * @dev Extract a bytes32 subarray from an arbitrary length bytes array.\n     * @param data Bytes array from which to extract the subarray\n     * @param pos Starting position from which to copy\n     * @return Extracted length 32 byte array\n     */\n    function extract(bytes data, uint pos) private pure returns (bytes32 result) { \n        for (uint i = 0; i < 32; i++) {\n            result ^= (bytes32(0xff00000000000000000000000000000000000000000000000000000000000000) & data[i + pos]) >> (i * 8);\n        }\n        return result;\n    }\n    \n    /**\n     * @dev Validate that a provided ECSDA signature was signed by the specified address\n     * @param hash Hash of signed data\n     * @param v v parameter of ECDSA signature\n     * @param r r parameter of ECDSA signature\n     * @param s s parameter of ECDSA signature\n     * @param expected Address claiming to have created this signature\n     * @return Whether or not the signature was valid\n     */\n    function validateSignature (bytes32 hash, uint8 v, bytes32 r, bytes32 s, address expected) public pure returns (bool) {\n        return ecrecover(hash, v, r, s) == expected;\n    }\n\n    /**\n     * @dev Validate that the hash of a provided address was signed by the ECDSA public key associated with the specified Ethereum address\n     * @param addr Address signed\n     * @param pubKey Uncompressed ECDSA public key claiming to have created this signature\n     * @param v v parameter of ECDSA signature\n     * @param r r parameter of ECDSA signature\n     * @param s s parameter of ECDSA signature\n     * @return Whether or not the signature was valid\n     */\n    function ecdsaVerify (address addr, bytes pubKey, uint8 v, bytes32 r, bytes32 s) public pure returns (bool) {\n        return validateSignature(sha256(addr), v, r, s, pubKeyToEthereumAddress(pubKey));\n    }\n\n    /**\n     * @dev Convert an uncompressed ECDSA public key into an Ethereum address\n     * @param pubKey Uncompressed ECDSA public key to convert\n     * @return Ethereum address generated from the ECDSA public key\n     */\n    function pubKeyToEthereumAddress (bytes pubKey) public pure returns (address) {\n        return address(uint(keccak256(pubKey)) & 0x000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n    }\n\n    /**\n     * @dev Calculate the Bitcoin-style address associated with an ECDSA public key\n     * @param pubKey ECDSA public key to convert\n     * @param isCompressed Whether or not the Bitcoin address was generated from a compressed key\n     * @return Raw Bitcoin address (no base58-check encoding)\n     */\n    function pubKeyToBitcoinAddress(bytes pubKey, bool isCompressed) public pure returns (bytes20) {\n        /* Helpful references:\n           - https://en.bitcoin.it/wiki/Technical_background_of_version_1_Bitcoin_addresses \n           - https://github.com/cryptocoinjs/ecurve/blob/master/lib/point.js\n        */\n\n        /* x coordinate - first 32 bytes of public key */\n        uint x = uint(extract(pubKey, 0));\n        /* y coordinate - second 32 bytes of public key */\n        uint y = uint(extract(pubKey, 32)); \n        uint8 startingByte;\n        if (isCompressed) {\n            /* Hash the compressed public key format. */\n            startingByte = y % 2 == 0 ? 0x02 : 0x03;\n            return ripemd160(sha256(startingByte, x));\n        } else {\n            /* Hash the uncompressed public key format. */\n            startingByte = 0x04;\n            return ripemd160(sha256(startingByte, x, y));\n        }\n    }\n\n    /**\n     * @dev Verify a Merkle proof using the UTXO Merkle tree\n     * @param proof Generated Merkle tree proof\n     * @param merkleLeafHash Hash asserted to be present in the Merkle tree\n     * @return Whether or not the proof is valid\n     */\n    function verifyProof(bytes proof, bytes32 merkleLeafHash) public constant returns (bool) {\n        return MerkleProof.verifyProof(proof, rootUTXOMerkleTreeHash, merkleLeafHash);\n    }\n\n    /**\n     * @dev Convenience helper function to check if a UTXO can be redeemed\n     * @param txid Transaction hash\n     * @param originalAddress Raw Bitcoin address (no base58-check encoding)\n     * @param outputIndex Output index of UTXO\n     * @param satoshis Amount of UTXO in satoshis\n     * @param proof Merkle tree proof\n     * @return Whether or not the UTXO can be redeemed\n     */\n    function canRedeemUTXO(bytes32 txid, bytes20 originalAddress, uint8 outputIndex, uint satoshis, bytes proof) public constant returns (bool) {\n        /* Calculate the hash of the Merkle leaf associated with this UTXO. */\n        bytes32 merkleLeafHash = keccak256(txid, originalAddress, outputIndex, satoshis);\n    \n        /* Verify the proof. */\n        return canRedeemUTXOHash(merkleLeafHash, proof);\n    }\n      \n    /**\n     * @dev Verify that a UTXO with the specified Merkle leaf hash can be redeemed\n     * @param merkleLeafHash Merkle tree hash of the UTXO to be checked\n     * @param proof Merkle tree proof\n     * @return Whether or not the UTXO with the specified hash can be redeemed\n     */\n    function canRedeemUTXOHash(bytes32 merkleLeafHash, bytes proof) public constant returns (bool) {\n        /* Check that the UTXO has not yet been redeemed and that it exists in the Merkle tree. */\n        return((redeemedUTXOs[merkleLeafHash] == false) && verifyProof(proof, merkleLeafHash));\n    }\n\n    /**\n     * @dev Redeem a UTXO, crediting a proportional amount of tokens (if valid) to the sending address\n     * @param txid Transaction hash\n     * @param outputIndex Output index of the UTXO\n     * @param satoshis Amount of UTXO in satoshis\n     * @param proof Merkle tree proof\n     * @param pubKey Uncompressed ECDSA public key to which the UTXO was sent\n     * @param isCompressed Whether the Bitcoin address was generated from a compressed public key\n     * @param v v parameter of ECDSA signature\n     * @param r r parameter of ECDSA signature\n     * @param s s parameter of ECDSA signature\n     * @return The number of tokens redeemed, if successful\n     */\n    function redeemUTXO (bytes32 txid, uint8 outputIndex, uint satoshis, bytes proof, bytes pubKey, bool isCompressed, uint8 v, bytes32 r, bytes32 s) public returns (uint tokensRedeemed) {\n\n        /* Calculate original Bitcoin-style address associated with the provided public key. */\n        bytes20 originalAddress = pubKeyToBitcoinAddress(pubKey, isCompressed);\n\n        /* Calculate the UTXO Merkle leaf hash. */\n        bytes32 merkleLeafHash = keccak256(txid, originalAddress, outputIndex, satoshis);\n\n        /* Verify that the UTXO can be redeemed. */\n        require(canRedeemUTXOHash(merkleLeafHash, proof));\n\n        /* Claimant must sign the Ethereum address to which they wish to remit the redeemed tokens. */\n        require(ecdsaVerify(msg.sender, pubKey, v, r, s));\n\n        /* Mark the UTXO as redeemed. */\n        redeemedUTXOs[merkleLeafHash] = true;\n\n        /* Calculate the redeemed tokens. */\n        tokensRedeemed = SafeMath.mul(satoshis, multiplier);\n\n        /* Track total redeemed tokens. */\n        totalRedeemed = SafeMath.add(totalRedeemed, tokensRedeemed);\n\n        /* Sanity check. */\n        require(totalRedeemed <= maximumRedeemable);\n\n        /* Credit the redeemer. */ \n        balances[msg.sender] = SafeMath.add(balances[msg.sender], tokensRedeemed);\n\n        /* Mark the transfer event. */\n        Transfer(address(0), msg.sender, tokensRedeemed);\n\n        /* Mark the UTXO redemption event. */\n        UTXORedeemed(txid, outputIndex, satoshis, proof, pubKey, v, r, s, msg.sender, tokensRedeemed);\n        \n        /* Return the number of tokens redeemed. */\n        return tokensRedeemed;\n\n    }\n\n}\n\ncontract WyvernToken is DelayedReleaseToken, UTXORedeemableToken, BurnableToken {\n\n    uint constant public decimals     = 18;\n    string constant public name       = \"Project Wyvern Token\";\n    string constant public symbol     = \"WYV\";\n\n    /* Amount of tokens per Wyvern. */\n    uint constant public MULTIPLIER       = 1;\n\n    /* Constant for conversion from satoshis to tokens. */\n    uint constant public SATS_TO_TOKENS   = MULTIPLIER * (10 ** decimals) / (10 ** 8);\n\n    /* Total mint amount, in tokens (will be reached when all UTXOs are redeemed). */\n    uint constant public MINT_AMOUNT      = 2000000 * MULTIPLIER * (10 ** decimals);\n\n    /**\n      * @dev Initialize the Wyvern token\n      * @param merkleRoot Merkle tree root of the UTXO set\n      * @param totalUtxoAmount Total satoshis of the UTXO set\n      */\n    function WyvernToken (bytes32 merkleRoot, uint totalUtxoAmount) public {\n        /* Total number of tokens that can be redeemed from UTXOs. */\n        uint utxoTokens = SATS_TO_TOKENS * totalUtxoAmount;\n\n        /* Configure DelayedReleaseToken. */\n        temporaryAdmin = msg.sender;\n        numberOfDelayedTokens = MINT_AMOUNT - utxoTokens;\n\n        /* Configure UTXORedeemableToken. */\n        rootUTXOMerkleTreeHash = merkleRoot;\n        totalSupply = MINT_AMOUNT;\n        maximumRedeemable = utxoTokens;\n        multiplier = SATS_TO_TOKENS;\n    }\n\n}",
  "bytecode": "",
  "constructorArguments": "bfdda2cdd0ddffbde454c05ba311161075f0baa7ee43681b8cd44669883ba4450000000000000000000000000000000000000000000000000000a92519f20ed2",
  "libraries": [
    {
      "name": "MerkleProof",
      "address": "0xcc3bf5a8e925f7b70238eda8dbe51b2a5ea8ae2c"
    }
  ]
}