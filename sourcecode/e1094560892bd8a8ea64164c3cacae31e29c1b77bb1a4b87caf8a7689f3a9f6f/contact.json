{
  "address": "0xe47405af3c470e91a02bfc46921c3632776f9c6b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EnsSubdomainFactory",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-19\n*/\n\npragma solidity ^0.4.24;\n\n// ---------------------------------------------------------------------------------------------------\n// EnsSubdomainFactory - allows creating and configuring custom ENS subdomains with one contract call.\n//\n// @author Radek Ostrowski / https://startonchain.com - MIT Licence.\n// Source: https://github.com/radek1st/ens-subdomain-factory\n// ---------------------------------------------------------------------------------------------------\n\n/**\n * @title EnsResolver\n * @dev Extract of the interface for ENS Resolver\n */\ncontract EnsResolver {\n\tfunction setAddr(bytes32 node, address addr) public;\n\tfunction addr(bytes32 node) public view returns (address);\n}\n\n/**\n * @title EnsRegistry\n * @dev Extract of the interface for ENS Registry\n */\ncontract EnsRegistry {\n\tfunction setOwner(bytes32 node, address owner) public;\n\tfunction setSubnodeOwner(bytes32 node, bytes32 label, address owner) public;\n\tfunction setResolver(bytes32 node, address resolver) public;\n\tfunction owner(bytes32 node) public view returns (address);\n\tfunction resolver(bytes32 node) public view returns (address);\n}\n\n/**\n * @title EnsSubdomainFactory\n * @dev Allows to create and configure a subdomain for Ethereum ENS in one call.\n * After deploying this contract, change the owner of the domain you want to use\n * to this deployed contract address. For example, transfer the ownership of \"startonchain.eth\"\n * so anyone can create subdomains like \"radek.startonchain.eth\".\n */\ncontract EnsSubdomainFactory {\n\taddress public owner;\n\tEnsRegistry public registry;\n\tEnsResolver public resolver;\n\tbool public locked;\n    bytes32 emptyNamehash = 0x00;\n\n\tevent SubdomainCreated(address indexed creator, address indexed owner, string subdomain, string domain, string topdomain);\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\tevent RegistryUpdated(address indexed previousRegistry, address indexed newRegistry);\n\tevent ResolverUpdated(address indexed previousResolver, address indexed newResolver);\n\tevent DomainTransfersLocked();\n\n\tconstructor(EnsRegistry _registry, EnsResolver _resolver) public {\n\t\towner = msg.sender;\n\t\tregistry = _registry;\n\t\tresolver = _resolver;\n\t\tlocked = false;\n\t}\n\n\t/**\n\t * @dev Throws if called by any account other than the owner.\n\t *\n\t */\n\tmodifier onlyOwner() {\n\t\trequire(msg.sender == owner);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Allows to create a subdomain (e.g. \"radek.startonchain.eth\"),\n\t * set its resolver and set its target address\n\t * @param _subdomain - sub domain name only e.g. \"radek\"\n\t * @param _domain - domain name e.g. \"startonchain\"\n\t * @param _topdomain - parent domain name e.g. \"eth\", \"xyz\"\n\t * @param _owner - address that will become owner of this new subdomain\n\t * @param _target - address that this new domain will resolve to\n\t */\n\tfunction newSubdomain(string _subdomain, string _domain, string _topdomain, address _owner, address _target) public {\n\t\t//create namehash for the topdomain\n\t\tbytes32 topdomainNamehash = keccak256(abi.encodePacked(emptyNamehash, keccak256(abi.encodePacked(_topdomain))));\n\t\t//create namehash for the domain\n\t\tbytes32 domainNamehash = keccak256(abi.encodePacked(topdomainNamehash, keccak256(abi.encodePacked(_domain))));\n\t\t//make sure this contract owns the domain\n\t\trequire(registry.owner(domainNamehash) == address(this), \"this contract should own the domain\");\n\t\t//create labelhash for the sub domain\n\t\tbytes32 subdomainLabelhash = keccak256(abi.encodePacked(_subdomain));\n\t\t//create namehash for the sub domain\n\t\tbytes32 subdomainNamehash = keccak256(abi.encodePacked(domainNamehash, subdomainLabelhash));\n\t\t//make sure it is free or owned by the sender\n\t\trequire(registry.owner(subdomainNamehash) == address(0) ||\n\t\t\tregistry.owner(subdomainNamehash) == msg.sender, \"sub domain already owned\");\n\t\t//create new subdomain, temporarily this smartcontract is the owner\n\t\tregistry.setSubnodeOwner(domainNamehash, subdomainLabelhash, address(this));\n\t\t//set public resolver for this domain\n\t\tregistry.setResolver(subdomainNamehash, resolver);\n\t\t//set the destination address\n\t\tresolver.setAddr(subdomainNamehash, _target);\n\t\t//change the ownership back to requested owner\n\t\tregistry.setOwner(subdomainNamehash, _owner);\n\n\t\temit SubdomainCreated(msg.sender, _owner, _subdomain, _domain, _topdomain);\n\t}\n\n\t/**\n\t * @dev Returns the owner of a domain (e.g. \"startonchain.eth\"),\n\t * @param _domain - domain name e.g. \"startonchain\"\n\t * @param _topdomain - parent domain name e.g. \"eth\" or \"xyz\"\n\t */\n\tfunction domainOwner(string _domain, string _topdomain) public view returns (address) {\n\t\tbytes32 topdomainNamehash = keccak256(abi.encodePacked(emptyNamehash, keccak256(abi.encodePacked(_topdomain))));\n\t\tbytes32 namehash = keccak256(abi.encodePacked(topdomainNamehash, keccak256(abi.encodePacked(_domain))));\n\t\treturn registry.owner(namehash);\n\t}\n\n\t/**\n\t * @dev Return the owner of a subdomain (e.g. \"radek.startonchain.eth\"),\n\t * @param _subdomain - sub domain name only e.g. \"radek\"\n\t * @param _domain - parent domain name e.g. \"startonchain\"\n\t * @param _topdomain - parent domain name e.g. \"eth\", \"xyz\"\n\t */\n\tfunction subdomainOwner(string _subdomain, string _domain, string _topdomain) public view returns (address) {\n\t\tbytes32 topdomainNamehash = keccak256(abi.encodePacked(emptyNamehash, keccak256(abi.encodePacked(_topdomain))));\n\t\tbytes32 domainNamehash = keccak256(abi.encodePacked(topdomainNamehash, keccak256(abi.encodePacked(_domain))));\n\t\tbytes32 subdomainNamehash = keccak256(abi.encodePacked(domainNamehash, keccak256(abi.encodePacked(_subdomain))));\n\t\treturn registry.owner(subdomainNamehash);\n\t}\n\n    /**\n    * @dev Return the target address where the subdomain is pointing to (e.g. \"0x12345...\"),\n    * @param _subdomain - sub domain name only e.g. \"radek\"\n    * @param _domain - parent domain name e.g. \"startonchain\"\n    * @param _topdomain - parent domain name e.g. \"eth\", \"xyz\"\n    */\n    function subdomainTarget(string _subdomain, string _domain, string _topdomain) public view returns (address) {\n        bytes32 topdomainNamehash = keccak256(abi.encodePacked(emptyNamehash, keccak256(abi.encodePacked(_topdomain))));\n        bytes32 domainNamehash = keccak256(abi.encodePacked(topdomainNamehash, keccak256(abi.encodePacked(_domain))));\n        bytes32 subdomainNamehash = keccak256(abi.encodePacked(domainNamehash, keccak256(abi.encodePacked(_subdomain))));\n        address currentResolver = registry.resolver(subdomainNamehash);\n        return EnsResolver(currentResolver).addr(subdomainNamehash);\n    }\n\n\t/**\n\t * @dev The contract owner can take away the ownership of any domain owned by this contract.\n\t * @param _node - namehash of the domain\n\t * @param _owner - new owner for the domain\n\t */\n\tfunction transferDomainOwnership(bytes32 _node, address _owner) public onlyOwner {\n\t\trequire(!locked);\n\t\tregistry.setOwner(_node, _owner);\n\t}\n\n\t/**\n\t * @dev The contract owner can lock and prevent any future domain ownership transfers.\n\t */\n\tfunction lockDomainOwnershipTransfers() public onlyOwner {\n\t\trequire(!locked);\n\t\tlocked = true;\n\t\temit DomainTransfersLocked();\n\t}\n\n\t/**\n\t * @dev Allows to update to new ENS registry.\n\t * @param _registry The address of new ENS registry to use.\n\t */\n\tfunction updateRegistry(EnsRegistry _registry) public onlyOwner {\n\t\trequire(registry != _registry, \"new registry should be different from old\");\n\t\temit RegistryUpdated(registry, _registry);\n\t\tregistry = _registry;\n\t}\n\n\t/**\n\t * @dev Allows to update to new ENS resolver.\n\t * @param _resolver The address of new ENS resolver to use.\n\t */\n\tfunction updateResolver(EnsResolver _resolver) public onlyOwner {\n\t\trequire(resolver != _resolver, \"new resolver should be different from old\");\n\t\temit ResolverUpdated(resolver, _resolver);\n\t\tresolver = _resolver;\n\t}\n\n\t/**\n\t * @dev Allows the current owner to transfer control of the contract to a new owner.\n\t * @param _owner The address to transfer ownership to.\n\t */\n\tfunction transferContractOwnership(address _owner) public onlyOwner {\n\t\trequire(_owner != address(0), \"cannot transfer to address(0)\");\n\t\temit OwnershipTransferred(owner, _owner);\n\t\towner = _owner;\n\t}\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000314159265dd8dbb310642f98f50c066173c1259b0000000000000000000000005ffc014343cd971b7eb70732021e26c35b744cc4"
}