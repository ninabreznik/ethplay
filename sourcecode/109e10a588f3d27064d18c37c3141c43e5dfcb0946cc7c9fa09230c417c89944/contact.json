{
  "address": "0xff5ebcf3904113ed5905918c2831d6e532330363",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "XLToken",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-26\n*/\n\npragma solidity >=0.4.22 <0.6.0;\n\n/**\n * @title SafeMath\n *  Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  *  Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n        return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  *  Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  *  Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  *  Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\ncontract Ownable {\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n}\n\ncontract TokenERC20 is Ownable {\n    using SafeMath for uint256;\n\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n\n    uint256 private _totalSupply;\n    uint256 public cap;\n\n    // This creates an array with all balances\n    mapping (address => uint256) private _balances;\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // This generates a public event on the blockchain that will notify clients\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    // This generates a public event on the blockchain that will notify clients\n    event Mint(address indexed to, uint256 amount);\n\n    /**\n     * @dev Fix for the ERC20 short address attack.\n     */\n    modifier onlyPayloadSize(uint size) {\n        require(msg.data.length >= size + 4);\n        _;\n    }\n\n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    constructor(\n        uint256 _cap,\n        uint256 _initialSupply,\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) public {\n        require(_cap >= _initialSupply);\n\n        cap = _cap;\n        name = _name;                                       // Set the cap of total supply\n        symbol = _symbol;                                   // Set the symbol for display purposes\n        decimals = _decimals;                               // Set the decimals\n\n        _totalSupply = _initialSupply;                      // Update total supply with the decimal amount\n        _balances[owner] = _totalSupply;                    // Give the creator all initial tokens\n        emit Transfer(address(0), owner, _totalSupply);\n    }\n\n    /**\n     * Total number of tokens in existence.\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * Gets the balance of the specified address.\n     * @param _owner The address to query the balance of.\n     * @return A uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address _owner) public view returns (uint256) {\n        return _balances[_owner];\n    }\n\n    /**\n     * Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return _allowed[_owner][_spender];\n    }\n\n    /**\n     * Transfer token to a specified address.\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     */\n    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) public returns (bool) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        _approve(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) public returns (bool) {\n        _transfer(_from, _to, _value);\n        _approve(_from, msg.sender, _allowed[_from][msg.sender].sub(_value));\n        return true;\n    }\n\n    /**\n     * Transfer token for a specified addresses.\n     * @param _from The address to transfer from.\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     */\n    function _transfer(address _from, address _to, uint256 _value) internal {\n        require(_to != address(0), \"ERC20: transfer to the zero address\");\n\n        _balances[_from] = _balances[_from].sub(_value);\n        _balances[_to] = _balances[_to].add(_value);\n        emit Transfer(_from, _to, _value);\n    }\n\n    /**\n     * Approve an address to spend another addresses' tokens.\n     * @param _owner The address that owns the tokens.\n     * @param _spender The address that will spend the tokens.\n     * @param _value The number of tokens that can be spent.\n     */\n    function _approve(address _owner, address _spender, uint256 _value) internal {\n        require(_owner != address(0), \"ERC20: approve from the zero address\");\n        require(_spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowed[_owner][_spender] = _value;\n        emit Approval(_owner, _spender, _value);\n    }\n\n    /**\n     * Function to mint tokens\n     * @param _to The address that will receive the minted tokens.\n     * @param _amount The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\n        require(_totalSupply.add(_amount) <= cap);\n\n        _totalSupply = _totalSupply.add(_amount);\n        _balances[_to] = _balances[_to].add(_amount);\n        emit Mint(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n        return true;\n    }\n\n    /**\n     * Transfer token to servral addresses.\n     * @param _tos The addresses to transfer to.\n     * @param _values The amounts to be transferred.\n     */\n    function transferBatch(address[] memory _tos, uint256[] memory _values) public returns (bool) {\n        require(_tos.length == _values.length);\n\n        for (uint256 i = 0; i < _tos.length; i++) {\n            transfer(_tos[i], _values[i]);\n        }\n        return true;\n    }\n}\n\n/******************************************/\n/*       XLToken TOKEN STARTS HERE       */\n/******************************************/\n\ncontract XLToken is TokenERC20 {\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    constructor() TokenERC20(18*10**16, 12*10**16, \"XL Token\", \"XL\", 8) public {}\n}",
  "bytecode": "608060405234801561001057600080fd5b5060408051808201825260088082527f584c20546f6b656e0000000000000000000000000000000000000000000000006020808401919091528351808501909452600284527f584c0000000000000000000000000000000000000000000000000000000000009084015260008054600160a060020a0319163317905567027f7d0bdb920000926701aa535d3d0c00009291600585905582516100b9906001906020860190610144565b5081516100cd906002906020850190610144565b506003805460ff191660ff8316179055600484905560008054600160a060020a039081168252600660209081526040808420889055835481518981529151931693927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a350505050506101df565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061018557805160ff19168380011785556101b2565b828001600101855582156101b2579182015b828111156101b2578251825591602001919060010190610197565b506101be9291506101c2565b5090565b6101dc91905b808211156101be57600081556001016101c8565b90565b610b4d806101ee6000396000f3fe6080604052600436106100c45763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100c9578063095ea7b31461015357806318160ddd146101a057806323b872dd146101c7578063313ce5671461020a578063355274ea146102355780633b3e672f1461024a57806340c10f191461037e57806370a08231146103b75780638da5cb5b146103ea57806395d89b411461041b578063a9059cbb14610430578063dd62ed3e14610469575b600080fd5b3480156100d557600080fd5b506100de6104a4565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610118578181015183820152602001610100565b50505050905090810190601f1680156101455780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015f57600080fd5b5061018c6004803603604081101561017657600080fd5b50600160a060020a038135169060200135610531565b604080519115158252519081900360200190f35b3480156101ac57600080fd5b506101b5610547565b60408051918252519081900360200190f35b3480156101d357600080fd5b5061018c600480360360608110156101ea57600080fd5b50600160a060020a0381358116916020810135909116906040013561054d565b34801561021657600080fd5b5061021f6105b5565b6040805160ff9092168252519081900360200190f35b34801561024157600080fd5b506101b56105be565b34801561025657600080fd5b5061018c6004803603604081101561026d57600080fd5b81019060208101813564010000000081111561028857600080fd5b82018360208201111561029a57600080fd5b803590602001918460208302840111640100000000831117156102bc57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561030c57600080fd5b82018360208201111561031e57600080fd5b8035906020019184602083028401116401000000008311171561034057600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506105c4945050505050565b34801561038a57600080fd5b5061018c600480360360408110156103a157600080fd5b50600160a060020a03813516906020013561062c565b3480156103c357600080fd5b506101b5600480360360208110156103da57600080fd5b5035600160a060020a0316610740565b3480156103f657600080fd5b506103ff61075b565b60408051600160a060020a039092168252519081900360200190f35b34801561042757600080fd5b506100de61076a565b34801561043c57600080fd5b5061018c6004803603604081101561045357600080fd5b50600160a060020a0381351690602001356107c2565b34801561047557600080fd5b506101b56004803603604081101561048c57600080fd5b50600160a060020a03813581169160200135166107df565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105295780601f106104fe57610100808354040283529160200191610529565b820191906000526020600020905b81548152906001019060200180831161050c57829003601f168201915b505050505081565b600061053e33848461080a565b50600192915050565b60045490565b60006060606436101561055f57600080fd5b61056a8585856109a5565b600160a060020a0385166000908152600760209081526040808320338085529252909120546105aa9187916105a5908763ffffffff610afc16565b61080a565b506001949350505050565b60035460ff1681565b60055481565b80518251600091146105d557600080fd5b60005b83518110156106225761061984828151811015156105f257fe5b90602001906020020151848381518110151561060a57fe5b906020019060200201516107c2565b506001016105d8565b5060019392505050565b60008054600160a060020a0316331461064457600080fd5b60055460045461065a908463ffffffff610b0e16565b111561066557600080fd5b600454610678908363ffffffff610b0e16565b600455600160a060020a0383166000908152600660205260409020546106a4908363ffffffff610b0e16565b600160a060020a038416600081815260066020908152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350600192915050565b600160a060020a031660009081526006602052604090205490565b600054600160a060020a031681565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156105295780601f106104fe57610100808354040283529160200191610529565b6000604060443610156107d457600080fd5b6106223385856109a5565b600160a060020a03918216600090815260076020908152604080832093909416825291909152205490565b600160a060020a03831615156108a657604080517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a038216151561094357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f7373000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a03808416600081815260076020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b600160a060020a0382161515610a4257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a038316600090815260066020526040902054610a6b908263ffffffff610afc16565b600160a060020a038085166000908152600660205260408082209390935590841681522054610aa0908263ffffffff610b0e16565b600160a060020a0380841660008181526006602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600082821115610b0857fe5b50900390565b81810182811015610b1b57fe5b9291505056fea165627a7a72305820dcda230b72f78a5b7e3cf05525e8820483ab9bd90876a9d0daf670922351cf7e0029"
}