{
  "address": "0xf6f07d38fdd28c1d4f1097d0a7c1759f44c6e928",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Wizards",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-23\n*/\n\npragma solidity ^0.5.0;\npragma experimental ABIEncoderV2;\n\ncontract IERC721 {\n  function balanceOf(address owner) public view returns (uint256 balance);\n  function ownerOf(uint256 tokenId) public view returns (address owner);\n\n  function approve(address to, uint256 tokenId) public;\n  function getApproved(uint256 tokenId) public view returns (address operator);\n\n  function setApprovalForAll(address operator, bool _approved) public;\n  function isApprovedForAll(address owner, address operator) public view returns (bool);\n\n  function transferFrom(address from, address to, uint256 tokenId) public;\n  function safeTransferFrom(address from, address to, uint256 tokenId) public;\n\n  function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n}\n\ncontract Wizards {\n\n  IERC721 internal constant wizards = IERC721(0x2F4Bdafb22bd92AA7b7552d270376dE8eDccbc1E);\n  uint8 internal constant ELEMENT_FIRE = 1;\n  uint8 internal constant ELEMENT_WIND = 2;\n  uint8 internal constant ELEMENT_WATER = 3;\n  uint256 internal constant MAX_WAIT = 86400; // 1 day timeout\n\n  uint256 public ids;\n\n  struct Game {\n    uint256 id;\n    // player 1\n    address player1;\n    uint256 player1TokenId;\n    bytes32 player1SpellHash;\n    uint8 player1Spell;\n    // player 2\n    address player2;\n    uint256 player2TokenId;\n    uint8 player2Spell;\n    uint256 timer;\n    // result\n    address winner;\n  }\n\n  mapping (uint256 => Game) public games;\n  \n  event GameUpdate(uint256 indexed gameId);\n\n  function start(uint256 tokenId, bytes32 spellHash) external {\n    // TODO: transfer wizard to this contract\n    // wizards.transferFrom(msg.sender, address(this), tokenId);\n    \n    // increment game ids\n    ids++;\n\n    // add game details\n    games[ids].id = ids;\n    games[ids].player1 = msg.sender;\n    games[ids].player1TokenId = tokenId;\n    games[ids].player1SpellHash = spellHash;\n    \n    emit GameUpdate(ids);\n  }\n\n  function join(uint256 gameId, uint256 tokenId, uint8 player2Spell) external {\n    Game storage game = games[gameId];\n\n    // player 1 must exist\n    require(game.player1 != address(0));\n\n    // player 2 must not exist\n    require(game.player2 == address(0));\n    \n    // player1 cannot be player2\n    require(game.player1 != game.player2);\n    \n    // spell must be valid\n    require(player2Spell > 0 && player2Spell < 4);\n    \n    // TODO: player 2 wizard power can only be equal to or greater than player 1 wizard\n   \n    // TODO: transfer wizard to this contract\n    // wizards.transferFrom(msg.sender, address(this), tokenId);\n\n    // update game details\n    game.player2 = msg.sender;\n    game.player2TokenId = tokenId;\n    game.player2Spell = player2Spell;\n    game.timer = now;\n    \n    emit GameUpdate(gameId);\n  }\n\n  function revealSpell(uint256 gameId, uint256 salt, uint8 player1Spell) external {\n    Game storage game = games[gameId];\n\n    // player 2 must exist\n    require(game.player2 != address(0));\n    \n    // game must not have ended\n    require(game.winner == address(0));\n    \n    // spell must be valid\n    require(player1Spell > 0 && player1Spell < 4);\n    \n    bytes32 revealHash = keccak256(abi.encodePacked(address(this), salt, player1Spell));\n\n    // revealed hash must match committed hash\n    require(revealHash == game.player1SpellHash);\n    \n    // set player 1 spell\n    game.player1Spell = player1Spell;\n    \n    uint8 player2Spell = game.player2Spell;\n    \n    emit GameUpdate(gameId);\n\n    if (player1Spell == player2Spell) {\n      // draw\n      game.winner = address(this);\n      // TODO: return wizards to rightful owners\n      // wizards.transferFrom(address(this), game.player1, game.player1TokenId);\n      // wizards.transferFrom(address(this), game.player2, game.player2TokenId);\n      return;\n    }\n\n    // Fire is effective against wind and weak to water\n    if (player1Spell == ELEMENT_FIRE) {\n      if (player2Spell == ELEMENT_WIND) {\n        // player 1 wins\n        _winner(gameId, game.player1);\n      } else {\n        // player 2 wins\n        _winner(gameId, game.player2);\n      }\n    }\n\n    // Water is effective against fire and weak to wind\n    if (player1Spell == ELEMENT_WATER) {\n      if (player2Spell == ELEMENT_FIRE) {\n        // player 1 wins\n        _winner(gameId, game.player1);\n      } else {\n        // player 2 wins\n        _winner(gameId, game.player2);\n      }\n    }\n\n    // Wind is effective against water and weak to fire\n    if (player1Spell == ELEMENT_WIND) {\n      if (player2Spell == ELEMENT_WATER) {\n        // player 1 wins\n        _winner(gameId, game.player1);\n      } else {\n        // player 2 wins\n        _winner(gameId, game.player2);\n      }\n    }\n  }\n\n  function timeout(uint256 gameId) public {\n    Game storage game = games[gameId];\n    \n    // game must not have ended\n    require(game.winner == address(0));\n    \n    // game timer must have started\n    require(game.timer != 0);\n\n    // game must have timed out\n    require(now - game.timer >= MAX_WAIT);\n\n    // if player 1 did not reveal their spell\n    // player2 wins automatically\n    _winner(gameId, game.player2);\n    \n    emit GameUpdate(gameId);\n  }\n\n  function _winner(uint256 gameId, address winner) internal {\n    Game storage game = games[gameId];\n    game.winner = winner;\n    // wizards.transferFrom(address(this), winner, game.player2TokenId);\n    // wizards.transferFrom(address(this), winner, game.player1TokenId);\n  }\n  \n  function getGames(uint256 from, uint256 limit, bool descending) public view returns (Game [] memory) {\n    Game [] memory gameArr = new Game[](limit);\n    if (descending) {\n      for (uint256 i = 0; i < limit; i++) {\n        gameArr[i] = games[from - i];\n      }\n    } else {\n      for (uint256 i = 0; i < limit; i++) {\n        gameArr[i] = games[from + i];\n      }\n    }\n    return gameArr;\n  }\n}",
  "bytecode": "608060405234801561001057600080fd5b506113f6806100206000396000f3fe60806040526004361061007d576000357c01000000000000000000000000000000000000000000000000000000009004806308148f7a14610082578063117a5b90146100ab57806316f3c030146100f157806328cd65541461012e578063c9d9d38814610157578063e7657e1514610180578063f5b938e2146101ab575b600080fd5b34801561008e57600080fd5b506100a960048036036100a49190810190610fd7565b6101d4565b005b3480156100b757600080fd5b506100d260048036036100cd9190810190610fd7565b6102d5565b6040516100e89a9998979695949392919061127b565b60405180910390f35b3480156100fd57600080fd5b506101186004803603610113919081019061103c565b6103a3565b604051610125919061123e565b60405180910390f35b34801561013a57600080fd5b506101556004803603610150919081019061108b565b610788565b005b34801561016357600080fd5b5061017e6004803603610179919081019061108b565b6109a7565b005b34801561018c57600080fd5b50610195610d93565b6040516101a29190611260565b60405180910390f35b3480156101b757600080fd5b506101d260048036036101cd9190810190611000565b610d99565b005b6000600160008381526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561024a57600080fd5b600081600701541415151561025e57600080fd5b62015180816007015442031015151561027657600080fd5b6102a4828260040160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610e89565b817f6a3ca207a2adb9eea136eff413ec2c22f745a146fe60eed5f593fbacb99347d360405160405180910390a25050565b60016020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040160009054906101000a900460ff16908060040160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050154908060060160009054906101000a900460ff16908060070154908060080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508a565b606080836040519080825280602002602001820160405280156103e057816020015b6103cd610ee8565b8152602001906001900390816103c55790505b50905082156105b55760008090505b848110156105af576001600082880381526020019081526020016000206101406040519081016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff1660ff1660ff1681526020016004820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900460ff1660ff1660ff168152602001600782015481526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050828281518110151561059557fe5b9060200190602002018190525080806001019150506103ef565b5061077d565b60008090505b8481101561077b576001600082880181526020019081526020016000206101406040519081016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff1660ff1660ff1681526020016004820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900460ff1660ff1660ff168152602001600782015481526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050828281518110151561076157fe5b9060200190602002018190525080806001019150506105bb565b505b809150509392505050565b6000600160008581526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156107ff57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168160040160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561085e57600080fd5b8060040160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156108e157600080fd5b60008260ff161180156108f7575060048260ff16105b151561090257600080fd5b338160040160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550828160050181905550818160060160006101000a81548160ff021916908360ff160217905550428160070181905550837f6a3ca207a2adb9eea136eff413ec2c22f745a146fe60eed5f593fbacb99347d360405160405180910390a250505050565b6000600160008581526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160040160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515610a1e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168160080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610a7d57600080fd5b60008260ff16118015610a93575060048260ff16105b1515610a9e57600080fd5b6000308484604051602001808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018381526020018260ff1660ff167f01000000000000000000000000000000000000000000000000000000000000000281526001019350505050604051602081830303815290604052805190602001209050816003015481141515610b4e57600080fd5b828260040160006101000a81548160ff021916908360ff16021790555060008260060160009054906101000a900460ff169050857f6a3ca207a2adb9eea136eff413ec2c22f745a146fe60eed5f593fbacb99347d360405160405180910390a28060ff168460ff161415610c0757308360080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050610d8e565b600160ff168460ff161415610c8857600260ff168160ff161415610c5857610c53868460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610e89565b610c87565b610c86868460040160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610e89565b5b5b600360ff168460ff161415610d0957600160ff168160ff161415610cd957610cd4868460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610e89565b610d08565b610d07868460040160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610e89565b5b5b600260ff168460ff161415610d8a57600360ff168160ff161415610d5a57610d55868460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610e89565b610d89565b610d88868460040160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610e89565b5b5b5050505b505050565b60005481565b600080815480929190600101919050555060005460016000805481526020019081526020016000206000018190555033600160008054815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160008054815260200190815260200160002060020181905550806001600080548152602001908152602001600020600301819055506000547f6a3ca207a2adb9eea136eff413ec2c22f745a146fe60eed5f593fbacb99347d360405160405180910390a25050565b6000600160008481526020019081526020016000209050818160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6101406040519081016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008019168152602001600060ff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600060ff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000610f93823561138f565b905092915050565b6000610fa7823561139b565b905092915050565b6000610fbb82356113a5565b905092915050565b6000610fcf82356113af565b905092915050565b600060208284031215610fe957600080fd5b6000610ff784828501610faf565b91505092915050565b6000806040838503121561101357600080fd5b600061102185828601610faf565b925050602061103285828601610f9b565b9150509250929050565b60008060006060848603121561105157600080fd5b600061105f86828701610faf565b935050602061107086828701610faf565b925050604061108186828701610f87565b9150509250925092565b6000806000606084860312156110a057600080fd5b60006110ae86828701610faf565b93505060206110bf86828701610faf565b92505060406110d086828701610fc3565b9150509250925092565b6110e38161133c565b82525050565b60006110f482611324565b80845260208401935061110683611317565b60005b828110156111395761111c868351611154565b6111258261132f565b915061014086019550600181019050611109565b50849250505092915050565b61114e8161134e565b82525050565b6101408201600082015161116b6000850182611220565b50602082015161117e60208501826110da565b5060408201516111916040850182611220565b5060608201516111a46060850182611145565b5060808201516111b7608085018261122f565b5060a08201516111ca60a08501826110da565b5060c08201516111dd60c0850182611220565b5060e08201516111f060e085018261122f565b50610100820151611205610100850182611220565b5061012082015161121a6101208501826110da565b50505050565b61122981611378565b82525050565b61123881611382565b82525050565b6000602082019050818103600083015261125881846110e9565b905092915050565b60006020820190506112756000830184611220565b92915050565b600061014082019050611291600083018d611220565b61129e602083018c6110da565b6112ab604083018b611220565b6112b8606083018a611145565b6112c5608083018961122f565b6112d260a08301886110da565b6112df60c0830187611220565b6112ec60e083018661122f565b6112fa610100830185611220565b6113086101208301846110da565b9b9a5050505050505050505050565b6000602082019050919050565b600081519050919050565b6000602082019050919050565b600061134782611358565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b600060ff8216905091905056fea265627a7a72305820f6df20f9a061c12544c831dadcca99d3aefc5664bc1ebcc37081a014e194e7726c6578706572696d656e74616cf50037"
}