{
  "address": "0x6a72b9813003dbda09b6c03ef9f2521086022585",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BackToLife",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-16\n*/\n\npragma solidity ^0.4.15;\n\n// File: contracts\\strings.sol\n\n/*\n * @title String & slice utility library for Solidity contracts.\n * @author Nick Johnson <[emailÂ protected]>\n *\n * @dev Functionality in this library is largely implemented using an\n *      abstraction called a 'slice'. A slice represents a part of a string -\n *      anything from the entire string to a single character, or even no\n *      characters at all (a 0-length slice). Since a slice only has to specify\n *      an offset and a length, copying and manipulating slices is a lot less\n *      expensive than copying and manipulating the strings they reference.\n *\n *      To further reduce gas costs, most functions on slice that need to return\n *      a slice modify the original one instead of allocating a new one; for\n *      instance, `s.split(\".\")` will return the text up to the first '.',\n *      modifying s to only contain the remainder of the string after the '.'.\n *      In situations where you do not want to modify the original slice, you\n *      can make a copy first with `.copy()`, for example:\n *      `s.copy().split(\".\")`. Try and avoid using this idiom in loops; since\n *      Solidity has no memory management, it will result in allocating many\n *      short-lived slices that are later discarded.\n *\n *      Functions that return two slices come in two versions: a non-allocating\n *      version that takes the second slice as an argument, modifying it in\n *      place, and an allocating version that allocates and returns the second\n *      slice; see `nextRune` for example.\n *\n *      Functions that have to copy string data will return strings rather than\n *      slices; these can be cast back to slices for further processing if\n *      required.\n *\n *      For convenience, some functions are provided with non-modifying\n *      variants that create a new slice and return both; for instance,\n *      `s.splitNew('.')` leaves s unmodified, and returns two values\n *      corresponding to the left and right parts of the string.\n */\n\npragma solidity ^0.4.14;\n\nlibrary strings {\n    struct slice {\n        uint _len;\n        uint _ptr;\n    }\n\n    function memcpy(uint dest, uint src, uint len) private pure {\n        // Copy word-length chunks while possible\n        for(; len >= 32; len -= 32) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n            dest += 32;\n            src += 32;\n        }\n\n        // Copy remaining bytes\n        uint mask = 256 ** (32 - len) - 1;\n        assembly {\n            let srcpart := and(mload(src), not(mask))\n            let destpart := and(mload(dest), mask)\n            mstore(dest, or(destpart, srcpart))\n        }\n    }\n\n    /*\n     * @dev Returns a slice containing the entire string.\n     * @param self The string to make a slice from.\n     * @return A newly allocated slice containing the entire string.\n     */\n    function toSlice(string self) internal pure returns (slice) {\n        uint ptr;\n        assembly {\n            ptr := add(self, 0x20)\n        }\n        return slice(bytes(self).length, ptr);\n    }\n\n    /*\n     * @dev Returns the length of a null-terminated bytes32 string.\n     * @param self The value to find the length of.\n     * @return The length of the string, from 0 to 32.\n     */\n    function len(bytes32 self) internal pure returns (uint) {\n        uint ret;\n        if (self == 0)\n            return 0;\n        if (self & 0xffffffffffffffffffffffffffffffff == 0) {\n            ret += 16;\n            self = bytes32(uint(self) / 0x100000000000000000000000000000000);\n        }\n        if (self & 0xffffffffffffffff == 0) {\n            ret += 8;\n            self = bytes32(uint(self) / 0x10000000000000000);\n        }\n        if (self & 0xffffffff == 0) {\n            ret += 4;\n            self = bytes32(uint(self) / 0x100000000);\n        }\n        if (self & 0xffff == 0) {\n            ret += 2;\n            self = bytes32(uint(self) / 0x10000);\n        }\n        if (self & 0xff == 0) {\n            ret += 1;\n        }\n        return 32 - ret;\n    }\n\n    /*\n     * @dev Returns a slice containing the entire bytes32, interpreted as a\n     *      null-terminated utf-8 string.\n     * @param self The bytes32 value to convert to a slice.\n     * @return A new slice containing the value of the input argument up to the\n     *         first null.\n     */\n    function toSliceB32(bytes32 self) internal pure returns (slice ret) {\n        // Allocate space for `self` in memory, copy it there, and point ret at it\n        assembly {\n            let ptr := mload(0x40)\n            mstore(0x40, add(ptr, 0x20))\n            mstore(ptr, self)\n            mstore(add(ret, 0x20), ptr)\n        }\n        ret._len = len(self);\n    }\n\n    /*\n     * @dev Returns a new slice containing the same data as the current slice.\n     * @param self The slice to copy.\n     * @return A new slice containing the same data as `self`.\n     */\n    function copy(slice self) internal pure returns (slice) {\n        return slice(self._len, self._ptr);\n    }\n\n    /*\n     * @dev Copies a slice to a new string.\n     * @param self The slice to copy.\n     * @return A newly allocated string containing the slice's text.\n     */\n    function toString(slice self) internal pure returns (string) {\n        string memory ret = new string(self._len);\n        uint retptr;\n        assembly { retptr := add(ret, 32) }\n\n        memcpy(retptr, self._ptr, self._len);\n        return ret;\n    }\n\n    /*\n     * @dev Returns the length in runes of the slice. Note that this operation\n     *      takes time proportional to the length of the slice; avoid using it\n     *      in loops, and call `slice.empty()` if you only need to know whether\n     *      the slice is empty or not.\n     * @param self The slice to operate on.\n     * @return The length of the slice in runes.\n     */\n    function len(slice self) internal pure returns (uint l) {\n        // Starting at ptr-31 means the LSB will be the byte we care about\n        uint ptr = self._ptr - 31;\n        uint end = ptr + self._len;\n        for (l = 0; ptr < end; l++) {\n            uint8 b;\n            assembly { b := and(mload(ptr), 0xFF) }\n            if (b < 0x80) {\n                ptr += 1;\n            } else if(b < 0xE0) {\n                ptr += 2;\n            } else if(b < 0xF0) {\n                ptr += 3;\n            } else if(b < 0xF8) {\n                ptr += 4;\n            } else if(b < 0xFC) {\n                ptr += 5;\n            } else {\n                ptr += 6;\n            }\n        }\n    }\n\n    /*\n     * @dev Returns true if the slice is empty (has a length of 0).\n     * @param self The slice to operate on.\n     * @return True if the slice is empty, False otherwise.\n     */\n    function empty(slice self) internal pure returns (bool) {\n        return self._len == 0;\n    }\n\n    /*\n     * @dev Returns a positive number if `other` comes lexicographically after\n     *      `self`, a negative number if it comes before, or zero if the\n     *      contents of the two slices are equal. Comparison is done per-rune,\n     *      on unicode codepoints.\n     * @param self The first slice to compare.\n     * @param other The second slice to compare.\n     * @return The result of the comparison.\n     */\n    function compare(slice self, slice other) internal pure returns (int) {\n        uint shortest = self._len;\n        if (other._len < self._len)\n            shortest = other._len;\n\n        uint selfptr = self._ptr;\n        uint otherptr = other._ptr;\n        for (uint idx = 0; idx < shortest; idx += 32) {\n            uint a;\n            uint b;\n            assembly {\n                a := mload(selfptr)\n                b := mload(otherptr)\n            }\n            if (a != b) {\n                // Mask out irrelevant bytes and check again\n                uint256 mask = uint256(-1); // 0xffff...\n                if(shortest < 32) {\n                    mask = ~(2 ** (8 * (32 - shortest + idx)) - 1);\n                }\n                uint256 diff = (a & mask) - (b & mask);\n                if (diff != 0)\n                    return int(diff);\n            }\n            selfptr += 32;\n            otherptr += 32;\n        }\n        return int(self._len) - int(other._len);\n    }\n\n    /*\n     * @dev Returns true if the two slices contain the same text.\n     * @param self The first slice to compare.\n     * @param self The second slice to compare.\n     * @return True if the slices are equal, false otherwise.\n     */\n    function equals(slice self, slice other) internal pure returns (bool) {\n        return compare(self, other) == 0;\n    }\n\n    /*\n     * @dev Extracts the first rune in the slice into `rune`, advancing the\n     *      slice to point to the next rune and returning `self`.\n     * @param self The slice to operate on.\n     * @param rune The slice that will contain the first rune.\n     * @return `rune`.\n     */\n    function nextRune(slice self, slice rune) internal pure returns (slice) {\n        rune._ptr = self._ptr;\n\n        if (self._len == 0) {\n            rune._len = 0;\n            return rune;\n        }\n\n        uint l;\n        uint b;\n        // Load the first byte of the rune into the LSBs of b\n        assembly { b := and(mload(sub(mload(add(self, 32)), 31)), 0xFF) }\n        if (b < 0x80) {\n            l = 1;\n        } else if(b < 0xE0) {\n            l = 2;\n        } else if(b < 0xF0) {\n            l = 3;\n        } else {\n            l = 4;\n        }\n\n        // Check for truncated codepoints\n        if (l > self._len) {\n            rune._len = self._len;\n            self._ptr += self._len;\n            self._len = 0;\n            return rune;\n        }\n\n        self._ptr += l;\n        self._len -= l;\n        rune._len = l;\n        return rune;\n    }\n\n    /*\n     * @dev Returns the first rune in the slice, advancing the slice to point\n     *      to the next rune.\n     * @param self The slice to operate on.\n     * @return A slice containing only the first rune from `self`.\n     */\n    function nextRune(slice self) internal pure returns (slice ret) {\n        nextRune(self, ret);\n    }\n\n    /*\n     * @dev Returns the number of the first codepoint in the slice.\n     * @param self The slice to operate on.\n     * @return The number of the first codepoint in the slice.\n     */\n    function ord(slice self) internal pure returns (uint ret) {\n        if (self._len == 0) {\n            return 0;\n        }\n\n        uint word;\n        uint length;\n        uint divisor = 2 ** 248;\n\n        // Load the rune into the MSBs of b\n        assembly { word:= mload(mload(add(self, 32))) }\n        uint b = word / divisor;\n        if (b < 0x80) {\n            ret = b;\n            length = 1;\n        } else if(b < 0xE0) {\n            ret = b & 0x1F;\n            length = 2;\n        } else if(b < 0xF0) {\n            ret = b & 0x0F;\n            length = 3;\n        } else {\n            ret = b & 0x07;\n            length = 4;\n        }\n\n        // Check for truncated codepoints\n        if (length > self._len) {\n            return 0;\n        }\n\n        for (uint i = 1; i < length; i++) {\n            divisor = divisor / 256;\n            b = (word / divisor) & 0xFF;\n            if (b & 0xC0 != 0x80) {\n                // Invalid UTF-8 sequence\n                return 0;\n            }\n            ret = (ret * 64) | (b & 0x3F);\n        }\n\n        return ret;\n    }\n\n    /*\n     * @dev Returns the keccak-256 hash of the slice.\n     * @param self The slice to hash.\n     * @return The hash of the slice.\n     */\n    function keccak(slice self) internal pure returns (bytes32 ret) {\n        assembly {\n            ret := keccak256(mload(add(self, 32)), mload(self))\n        }\n    }\n\n    /*\n     * @dev Returns true if `self` starts with `needle`.\n     * @param self The slice to operate on.\n     * @param needle The slice to search for.\n     * @return True if the slice starts with the provided text, false otherwise.\n     */\n    function startsWith(slice self, slice needle) internal pure returns (bool) {\n        if (self._len < needle._len) {\n            return false;\n        }\n\n        if (self._ptr == needle._ptr) {\n            return true;\n        }\n\n        bool equal;\n        assembly {\n            let length := mload(needle)\n            let selfptr := mload(add(self, 0x20))\n            let needleptr := mload(add(needle, 0x20))\n            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\n        }\n        return equal;\n    }\n\n    /*\n     * @dev If `self` starts with `needle`, `needle` is removed from the\n     *      beginning of `self`. Otherwise, `self` is unmodified.\n     * @param self The slice to operate on.\n     * @param needle The slice to search for.\n     * @return `self`\n     */\n    function beyond(slice self, slice needle) internal pure returns (slice) {\n        if (self._len < needle._len) {\n            return self;\n        }\n\n        bool equal = true;\n        if (self._ptr != needle._ptr) {\n            assembly {\n                let length := mload(needle)\n                let selfptr := mload(add(self, 0x20))\n                let needleptr := mload(add(needle, 0x20))\n                equal := eq(sha3(selfptr, length), sha3(needleptr, length))\n            }\n        }\n\n        if (equal) {\n            self._len -= needle._len;\n            self._ptr += needle._len;\n        }\n\n        return self;\n    }\n\n    /*\n     * @dev Returns true if the slice ends with `needle`.\n     * @param self The slice to operate on.\n     * @param needle The slice to search for.\n     * @return True if the slice starts with the provided text, false otherwise.\n     */\n    function endsWith(slice self, slice needle) internal pure returns (bool) {\n        if (self._len < needle._len) {\n            return false;\n        }\n\n        uint selfptr = self._ptr + self._len - needle._len;\n\n        if (selfptr == needle._ptr) {\n            return true;\n        }\n\n        bool equal;\n        assembly {\n            let length := mload(needle)\n            let needleptr := mload(add(needle, 0x20))\n            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\n        }\n\n        return equal;\n    }\n\n    /*\n     * @dev If `self` ends with `needle`, `needle` is removed from the\n     *      end of `self`. Otherwise, `self` is unmodified.\n     * @param self The slice to operate on.\n     * @param needle The slice to search for.\n     * @return `self`\n     */\n    function until(slice self, slice needle) internal pure returns (slice) {\n        if (self._len < needle._len) {\n            return self;\n        }\n\n        uint selfptr = self._ptr + self._len - needle._len;\n        bool equal = true;\n        if (selfptr != needle._ptr) {\n            assembly {\n                let length := mload(needle)\n                let needleptr := mload(add(needle, 0x20))\n                equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\n            }\n        }\n\n        if (equal) {\n            self._len -= needle._len;\n        }\n\n        return self;\n    }\n\n    event log_bytemask(bytes32 mask);\n\n    // Returns the memory address of the first byte of the first occurrence of\n    // `needle` in `self`, or the first byte after `self` if not found.\n    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {\n        uint ptr = selfptr;\n        uint idx;\n\n        if (needlelen <= selflen) {\n            if (needlelen <= 32) {\n                bytes32 mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));\n\n                bytes32 needledata;\n                assembly { needledata := and(mload(needleptr), mask) }\n\n                uint end = selfptr + selflen - needlelen;\n                bytes32 ptrdata;\n                assembly { ptrdata := and(mload(ptr), mask) }\n\n                while (ptrdata != needledata) {\n                    if (ptr >= end)\n                        return selfptr + selflen;\n                    ptr++;\n                    assembly { ptrdata := and(mload(ptr), mask) }\n                }\n                return ptr;\n            } else {\n                // For long needles, use hashing\n                bytes32 hash;\n                assembly { hash := sha3(needleptr, needlelen) }\n\n                for (idx = 0; idx <= selflen - needlelen; idx++) {\n                    bytes32 testHash;\n                    assembly { testHash := sha3(ptr, needlelen) }\n                    if (hash == testHash)\n                        return ptr;\n                    ptr += 1;\n                }\n            }\n        }\n        return selfptr + selflen;\n    }\n\n    // Returns the memory address of the first byte after the last occurrence of\n    // `needle` in `self`, or the address of `self` if not found.\n    function rfindPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {\n        uint ptr;\n\n        if (needlelen <= selflen) {\n            if (needlelen <= 32) {\n                bytes32 mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));\n\n                bytes32 needledata;\n                assembly { needledata := and(mload(needleptr), mask) }\n\n                ptr = selfptr + selflen - needlelen;\n                bytes32 ptrdata;\n                assembly { ptrdata := and(mload(ptr), mask) }\n\n                while (ptrdata != needledata) {\n                    if (ptr <= selfptr)\n                        return selfptr;\n                    ptr--;\n                    assembly { ptrdata := and(mload(ptr), mask) }\n                }\n                return ptr + needlelen;\n            } else {\n                // For long needles, use hashing\n                bytes32 hash;\n                assembly { hash := sha3(needleptr, needlelen) }\n                ptr = selfptr + (selflen - needlelen);\n                while (ptr >= selfptr) {\n                    bytes32 testHash;\n                    assembly { testHash := sha3(ptr, needlelen) }\n                    if (hash == testHash)\n                        return ptr + needlelen;\n                    ptr -= 1;\n                }\n            }\n        }\n        return selfptr;\n    }\n\n    /*\n     * @dev Modifies `self` to contain everything from the first occurrence of\n     *      `needle` to the end of the slice. `self` is set to the empty slice\n     *      if `needle` is not found.\n     * @param self The slice to search and modify.\n     * @param needle The text to search for.\n     * @return `self`.\n     */\n    function find(slice self, slice needle) internal pure returns (slice) {\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\n        self._len -= ptr - self._ptr;\n        self._ptr = ptr;\n        return self;\n    }\n\n    /*\n     * @dev Modifies `self` to contain the part of the string from the start of\n     *      `self` to the end of the first occurrence of `needle`. If `needle`\n     *      is not found, `self` is set to the empty slice.\n     * @param self The slice to search and modify.\n     * @param needle The text to search for.\n     * @return `self`.\n     */\n    function rfind(slice self, slice needle) internal pure returns (slice) {\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\n        self._len = ptr - self._ptr;\n        return self;\n    }\n\n    /*\n     * @dev Splits the slice, setting `self` to everything after the first\n     *      occurrence of `needle`, and `token` to everything before it. If\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n     *      and `token` is set to the entirety of `self`.\n     * @param self The slice to split.\n     * @param needle The text to search for in `self`.\n     * @param token An output parameter to which the first token is written.\n     * @return `token`.\n     */\n    function split(slice self, slice needle, slice token) internal pure returns (slice) {\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\n        token._ptr = self._ptr;\n        token._len = ptr - self._ptr;\n        if (ptr == self._ptr + self._len) {\n            // Not found\n            self._len = 0;\n        } else {\n            self._len -= token._len + needle._len;\n            self._ptr = ptr + needle._len;\n        }\n        return token;\n    }\n\n    /*\n     * @dev Splits the slice, setting `self` to everything after the first\n     *      occurrence of `needle`, and returning everything before it. If\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n     *      and the entirety of `self` is returned.\n     * @param self The slice to split.\n     * @param needle The text to search for in `self`.\n     * @return The part of `self` up to the first occurrence of `delim`.\n     */\n    function split(slice self, slice needle) internal pure returns (slice token) {\n        split(self, needle, token);\n    }\n\n    /*\n     * @dev Splits the slice, setting `self` to everything before the last\n     *      occurrence of `needle`, and `token` to everything after it. If\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n     *      and `token` is set to the entirety of `self`.\n     * @param self The slice to split.\n     * @param needle The text to search for in `self`.\n     * @param token An output parameter to which the first token is written.\n     * @return `token`.\n     */\n    function rsplit(slice self, slice needle, slice token) internal pure returns (slice) {\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\n        token._ptr = ptr;\n        token._len = self._len - (ptr - self._ptr);\n        if (ptr == self._ptr) {\n            // Not found\n            self._len = 0;\n        } else {\n            self._len -= token._len + needle._len;\n        }\n        return token;\n    }\n\n    /*\n     * @dev Splits the slice, setting `self` to everything before the last\n     *      occurrence of `needle`, and returning everything after it. If\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n     *      and the entirety of `self` is returned.\n     * @param self The slice to split.\n     * @param needle The text to search for in `self`.\n     * @return The part of `self` after the last occurrence of `delim`.\n     */\n    function rsplit(slice self, slice needle) internal pure returns (slice token) {\n        rsplit(self, needle, token);\n    }\n\n    /*\n     * @dev Counts the number of nonoverlapping occurrences of `needle` in `self`.\n     * @param self The slice to search.\n     * @param needle The text to search for in `self`.\n     * @return The number of occurrences of `needle` found in `self`.\n     */\n    function count(slice self, slice needle) internal pure returns (uint cnt) {\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr) + needle._len;\n        while (ptr <= self._ptr + self._len) {\n            cnt++;\n            ptr = findPtr(self._len - (ptr - self._ptr), ptr, needle._len, needle._ptr) + needle._len;\n        }\n    }\n\n    /*\n     * @dev Returns True if `self` contains `needle`.\n     * @param self The slice to search.\n     * @param needle The text to search for in `self`.\n     * @return True if `needle` is found in `self`, false otherwise.\n     */\n    function contains(slice self, slice needle) internal pure returns (bool) {\n        return rfindPtr(self._len, self._ptr, needle._len, needle._ptr) != self._ptr;\n    }\n\n    /*\n     * @dev Returns a newly allocated string containing the concatenation of\n     *      `self` and `other`.\n     * @param self The first slice to concatenate.\n     * @param other The second slice to concatenate.\n     * @return The concatenation of the two strings.\n     */\n    function concat(slice self, slice other) internal pure returns (string) {\n        string memory ret = new string(self._len + other._len);\n        uint retptr;\n        assembly { retptr := add(ret, 32) }\n        memcpy(retptr, self._ptr, self._len);\n        memcpy(retptr + self._len, other._ptr, other._len);\n        return ret;\n    }\n\n    /*\n     * @dev Joins an array of slices, using `self` as a delimiter, returning a\n     *      newly allocated string.\n     * @param self The delimiter to use.\n     * @param parts A list of slices to join.\n     * @return A newly allocated string containing all the slices in `parts`,\n     *         joined with `self`.\n     */\n    function join(slice self, slice[] parts) internal pure returns (string) {\n        if (parts.length == 0)\n            return \"\";\n\n        uint length = self._len * (parts.length - 1);\n        for(uint i = 0; i < parts.length; i++)\n            length += parts[i]._len;\n\n        string memory ret = new string(length);\n        uint retptr;\n        assembly { retptr := add(ret, 32) }\n\n        for(i = 0; i < parts.length; i++) {\n            memcpy(retptr, parts[i]._ptr, parts[i]._len);\n            retptr += parts[i]._len;\n            if (i < parts.length - 1) {\n                memcpy(retptr, self._ptr, self._len);\n                retptr += self._len;\n            }\n        }\n\n        return ret;\n    }\n}\n\n// File: contracts\\MyWill.sol\n\n/* https://github.com/Arachnid/solidity-stringutils */\n\n\ncontract MyWill {\n\n    using strings for *;\n\n    /* Back To Life SC address */\n    address sender;\n\n    /* The club address */\n    address club;\n\n    /* The contract creation cost in gas */\n    uint256 gasPrice;\n    uint256 gasCost;\n\n    /* The contract owner */\n    address owner;\n\n    /* The list of witnesses */\n    string listWitnesses;\n\n    /* The heirs with its respective percentages */\n    string listHeirs;\n    string listHeirsPercentages;\n\n    /* The current votes */\n    mapping (string => bool) mapHeirsVoteOwnerHasDied;\n\n    /* The status of the contract*/\n    enum Status {CREATED, ALIVE, DEAD, INIT}\n    Status status;\n\n    /* EVENTS */\n    event Deposit(address from, uint value);\n    event SingleTransact(address owner, uint value, address to, bytes data);\n\n    /* ***************** */\n    /* Contract creation */\n    /* ***************** */\n\n    function MyWill () {\n        sender = msg.sender;\n        status = Status.INIT;\n    }\n\n    function setParameters(address _owner, string _listHeirs, string _listHeirsPercentages, string _listWitnesses, address _club, uint256 _gasPrice, uint256 _gasCost) onlySender onlyInit {\n        status = Status.CREATED;\n\n        club = _club;\n        owner = _owner;\n        gasPrice = _gasPrice;\n        gasCost = _gasCost;\n        listHeirs = _listHeirs;\n        listHeirsPercentages = _listHeirsPercentages;\n        listWitnesses = _listWitnesses;\n\n        /* Check List Percentages */\n        var s = _listHeirsPercentages.toSlice().copy();\n        var delim = \";\".toSlice();\n        var parts = new uint256[](s.count(delim) + 1);\n\n        uint256 countPercentage;\n        for(uint i = 0; i < parts.length; i++) {\n            countPercentage = countPercentage + stringToUint(s.split(delim).toString());\n        }\n\n        require(countPercentage == 100000);\n    }\n\n    /* ********* */\n    /* Modifiers */\n    /* ********* */\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlySender() {\n        require(msg.sender == sender);\n        _;\n    }\n\n    modifier onlyInit() {\n        require(status == Status.INIT);\n        _;\n    }\n\n    modifier onlyAlive() {\n        require(status == Status.ALIVE || status == Status.CREATED);\n        _;\n    }\n\n    modifier onlyDead() {\n        require(status == Status.DEAD);\n        _;\n    }\n\n    modifier onlyHeir() {\n\n        var s = listHeirs.toSlice().copy();\n        var delim = \";\".toSlice();\n        string[] memory listOfHeirs = new string[](s.count(delim) + 1);\n        bool itsHeir = false;\n\n        string memory senderStringAddress = addressToString(msg.sender);\n\n        for(uint i = 0; i < listOfHeirs.length; i++) {\n\n            if(keccak256(senderStringAddress) == keccak256(s.split(delim).toString())){\n                itsHeir = true;\n                break;\n            }\n        }\n\n        require(itsHeir);\n\n        _;\n    }\n\n    modifier onlyWitness() {\n\n        var s = listWitnesses.toSlice().copy();\n        var delim = \";\".toSlice();\n        string[] memory arrayOfWitnesses = new string[](s.count(delim) + 1);\n        bool itsWitness = false;\n\n        string memory senderStringAddress = addressToString(msg.sender);\n\n        for(uint i = 0; i < arrayOfWitnesses.length; i++) {\n\n            if(keccak256(senderStringAddress) == keccak256(s.split(delim).toString())){\n                itsWitness = true;\n                break;\n            }\n        }\n\n        require(itsWitness);\n\n        _;\n    }\n\n    /* ********* */\n    /* Functions */\n    /* ********* */\n\n    /* Deposit ether to contract */\n    function () payable onlyAlive {\n        if (status == Status.CREATED) {\n            /* First time, provide witness with ether and pay the fee */\n\n            // Check if the minimum ammount is provided\n            var witnessesList = listWitnesses.toSlice().copy();\n            var witnessesLength = witnessesList.count(\";\".toSlice()) + 1;\n            var needed = getWitnessWeiCost() * witnessesLength + getCreationWeiCost();\n            require(msg.value > needed);\n\n            // Send contract creation cost to club\n            club.transfer(getCreationWeiCost());\n\n            // Send ether to witnesses\n            for (uint i = 0; i < witnessesLength; i++) {\n                var witnessAddress = parseAddr(witnessesList.split(\";\".toSlice()).toString());\n                witnessAddress.transfer(getWitnessWeiCost());\n            }\n\n            // Set the status to active\n            status = Status.ALIVE;\n\n            // Deposit event\n            Deposit(msg.sender, msg.value);\n        } else {\n            Deposit(msg.sender, msg.value);\n        }\n    }\n\n    /* Witness executes owner died */\n    function ownerDied() onlyWitness onlyAlive {\n\n        require (this.balance > 0);\n\n        //Set owner as died\n        mapHeirsVoteOwnerHasDied[addressToString(msg.sender)] = true;\n\n        var users = listWitnesses.toSlice().copy();\n        uint256 listLength = users.count(\";\".toSlice()) + 1;\n        uint8 count = 0;\n\n        for(uint i = 0; i < listLength; i++) {\n\n            if(mapHeirsVoteOwnerHasDied[users.split(\";\".toSlice()).toString()] == true){\n                count = count + 1;\n            }\n        }\n\n        if(count == listLength){\n\n            /* Execute the last will */\n\n            users = listHeirs.toSlice().copy();\n            var  percentages = listHeirsPercentages.toSlice().copy();\n            listLength = users.count(\";\".toSlice()) + 1;\n\n            for(i = 0; i < listLength - 1; i++) {\n                parseAddr(users.split(\";\".toSlice()).toString()).transfer(((this.balance * stringToUint(percentages.split(\";\".toSlice()).toString())) / 100000));\n            }\n\n            // Last one gets the remaining\n            parseAddr(users.split(\";\".toSlice()).toString()).transfer(this.balance);\n\n            status = Status.DEAD;\n        }\n    }\n\n    /* ******** */\n    /* Transfer */\n    /* ******** */\n\n    function execute(address _to, uint _value, bytes _data) external onlyOwner {\n        SingleTransact(msg.sender, _value, _to, _data);\n        _to.call.value(_value)(_data);\n    }\n\n    /* ******* */\n    /* Getters */\n    /* ******* */\n\n    function isOwner() returns (bool){\n        return msg.sender == owner;\n    }\n\n    function getStatus() returns (Status){\n        return status;\n    }\n\n    function getCreationWeiCost() returns (uint256) {\n        return gasPrice * gasCost;\n    }\n\n    function getWitnessWeiCost() returns (uint256) {\n        return (1000000 * gasPrice);\n    }\n\n    function getHeirs() returns (string, string) {\n        return (listHeirs, listHeirsPercentages);\n    }\n\n    function getWitnesses() returns (string) {\n        return listWitnesses;\n    }\n\n    function getWitnessesCount() returns (uint) {\n        return listWitnesses.toSlice().copy().count(\";\".toSlice()) + 1;\n    }\n\n    function getBalance() constant returns (uint) {\n        return  address(this).balance;\n    }\n\n    function hasVoted() returns (bool){\n        return mapHeirsVoteOwnerHasDied[addressToString(msg.sender)];\n    }\n\n    /* ***************** */\n    /* Utility Functions */\n    /* ***************** */\n\n    function stringToUint(string s) constant private returns (uint result) {\n        bytes memory b = bytes(s);\n        uint i;\n        result = 0;\n        for (i = 0; i < b.length; i++) {\n            uint c = uint(b[i]);\n            if (c >= 48 && c <= 57) {\n                result = result * 10 + (c - 48);\n            }\n        }\n    }\n\n    function addressToString(address x) private returns (string) {\n        bytes memory s = new bytes(42);\n        s[0] = \"0\";\n        s[1] = \"x\";\n        for (uint i = 0; i < 20; i++) {\n            byte b = byte(uint8(uint(x) / (2**(8*(19 - i)))));\n            byte hi = byte(uint8(b) / 16);\n            byte lo = byte(uint8(b) - 16 * uint8(hi));\n            s[2+2*i] = char(hi);\n            s[2+2*i+1] = char(lo);\n        }\n        return string(s);\n    }\n\n    function char(byte b) private returns (byte c) {\n        if (b < 10) return byte(uint8(b) + 0x30);\n        else return byte(uint8(b) + 0x57);\n    }\n\n\n    function parseAddr(string _a) internal returns (address){\n        bytes memory tmp = bytes(_a);\n        uint160 iaddr = 0;\n        uint160 b1;\n        uint160 b2;\n        for (uint i=2; i<2+2*20; i+=2){\n            iaddr *= 256;\n            b1 = uint160(tmp[i]);\n            b2 = uint160(tmp[i+1]);\n            if ((b1 >= 97)&&(b1 <= 102)) b1 -= 87;\n            else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;\n            if ((b2 >= 97)&&(b2 <= 102)) b2 -= 87;\n            else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;\n            iaddr += (b1*16+b2);\n        }\n        return address(iaddr);\n    }\n\n\n}\n\n// File: contracts\\BackToLife.sol\n\n/* https://github.com/Arachnid/solidity-stringutils */\n\n\n\ncontract BackToLife {\n\n    using strings for *;\n\n    address club;\n\n    mapping (address => string) mapOwnerStringContract;\n\n    /* Create base contract */\n    function BackToLife () {\n        club = msg.sender;\n    }\n\n    /* Create Last Will Contract */\n    function createLastWill (address _owner, string _listHeirs, string _listHeirsPercentages, string _listWitnesses, uint256 _gasPrice, uint256 _gasCost) {\n\n        address owner = _owner;\n\n        var s = _listHeirs.toSlice().copy();\n\n        if (!s.endsWith(\";\".toSlice())){\n            _listHeirs.toSlice().concat(\";\".toSlice());\n        }\n\n        s = _listWitnesses.toSlice().copy();\n        if (!s.endsWith(\";\".toSlice())){\n            _listWitnesses.toSlice().concat(\";\".toSlice());\n        }\n\n        s = _listHeirsPercentages.toSlice().copy();\n        if (!s.endsWith(\";\".toSlice())){\n            _listHeirsPercentages.toSlice().concat(\";\".toSlice());\n        }\n\n\n        /* Add contract to the list of each heirs */\n//        s = _listHeirs.toSlice().copy();\n//        var delim = \";\".toSlice();\n//        uint256 listHeirsLength = s.count(delim) + 1;\n//        string memory senderStringAddress = addressToString(owner);\n//        for(uint i = 0; i < listHeirsLength; i++) {\n//            address heirAddress = parseAddr(s.split(delim).toString());\n//            mapOwnerStringContract[heirAddress] =  mapOwnerStringContract[heirAddress].toSlice().concat(stringContractAddress.toSlice()).toSlice().concat(\";\".toSlice());\n//        }\n\n        /* Calculate number of witness */\n        s = _listWitnesses.toSlice().copy();\n        var delim = \";\".toSlice();\n        uint256 listWitnessLength = s.count(delim) + 1;\n\n        /* Create the My Will contract */\n        address myWillAddress = new MyWill();\n        MyWill myWillContract = MyWill(myWillAddress);\n        myWillContract.setParameters(owner, _listHeirs, _listHeirsPercentages, _listWitnesses, club, _gasPrice, _gasCost);\n        var myWillAddressString = addressToString(myWillAddress);\n        mapOwnerStringContract[owner] =  mapOwnerStringContract[owner].toSlice().concat(myWillAddressString.toSlice()).toSlice().concat(\";\".toSlice());\n    }\n\n    /* Get Address Contracts */\n    function getContracts(address owner) returns (string) {\n        return mapOwnerStringContract[owner];\n    }\n\n    function addressToString(address x) returns (string) {\n        bytes memory s = new bytes(42);\n        s[0] = \"0\";\n        s[1] = \"x\";\n        for (uint i = 0; i < 20; i++) {\n            byte b = byte(uint8(uint(x) / (2**(8*(19 - i)))));\n            byte hi = byte(uint8(b) / 16);\n            byte lo = byte(uint8(b) - 16 * uint8(hi));\n            s[2+2*i] = char(hi);\n            s[2+2*i+1] = char(lo);\n        }\n        return string(s);\n    }\n\n    function char(byte b) returns (byte c) {\n        if (b < 10) return byte(uint8(b) + 0x30);\n        else return byte(uint8(b) + 0x57);\n    }\n\n//    function parseAddr(string _a) internal returns (address){\n//        bytes memory tmp = bytes(_a);\n//        uint160 iaddr = 0;\n//        uint160 b1;\n//        uint160 b2;\n//        for (uint i=2; i<2+2*20; i+=2){\n//            iaddr *= 256;\n//            b1 = uint160(tmp[i]);\n//            b2 = uint160(tmp[i+1]);\n//            if ((b1 >= 97)&&(b1 <= 102)) b1 -= 87;\n//            else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;\n//            if ((b2 >= 97)&&(b2 <= 102)) b2 -= 87;\n//            else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;\n//            iaddr += (b1*16+b2);\n//        }\n//        return address(iaddr);\n//    }\n\n    function getBalance() constant returns (uint) {\n        return  address(this).balance;\n    }\n\n}",
  "bytecode": ""
}