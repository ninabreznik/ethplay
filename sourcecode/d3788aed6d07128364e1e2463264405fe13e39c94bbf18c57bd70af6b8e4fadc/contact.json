{
  "address": "0x1d4f123bda7614084094f75ac13fb217222c737b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "XetherToken",
  "compilerVersion": "v0.5.6+commit.b259423e",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-07\n*/\n\npragma solidity 0.5.6;\n\n/** \n * xether.io - is a gambling ecosystem, which makes a difference by caring about its users.\n * Itâ€™s our passion for perfection, as well as finding and creating neat solutions,\n * that keeps us driven towards our goals.\n*/\n\n/**\n * @title ERC20Detailed token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract ERC20Detailed {\n  string private _name;\n  string private _symbol;\n  uint8 private _decimals;\n\n  constructor (string memory name, string memory symbol, uint8 decimals) public {\n      _name = name;\n      _symbol = symbol;\n      _decimals = decimals;\n  }\n\n  /**\n   * @return the name of the token.\n   */\n  function name() public view returns (string memory) {\n      return _name;\n  }\n\n  /**\n   * @return the symbol of the token.\n   */\n  function symbol() public view returns (string memory) {\n      return _symbol;\n  }\n\n  /**\n   * @return the number of decimals of the token.\n   */\n  function decimals() public view returns (uint8) {\n      return _decimals;\n  }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract ERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n  mapping (address => mapping (address => uint256)) private _allowed;\n  uint256 private _totalSupply;\n\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n  /**\n   * @dev Total number of tokens in existence\n   */\n  function totalSupply() public view returns (uint256) {\n      return _totalSupply;\n  }\n\n  /**\n   * @dev Gets the balance of the specified address.\n   * @param owner The address to query the balance of.\n   * @return A uint256 representing the amount owned by the passed address.\n   */\n  function balanceOf(address owner) public view returns (uint256) {\n      return _balances[owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address owner, address spender) public view returns (uint256) {\n      return _allowed[owner][spender];\n  }\n\n  /**\n   * @dev Transfer token to a specified address\n   * @param to The address to transfer to.\n   * @param value The amount to be transferred.\n   */\n  function transfer(address to, uint256 value) public returns (bool) {\n      _transfer(msg.sender, to, value);\n      return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public returns (bool) {\n      _approve(msg.sender, spender, value);\n      return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another.\n   * Note that while this function emits an Approval event, this is not required as per the specification,\n   * and other compliant implementations may not emit the event.\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\n      _transfer(from, to, value);\n      _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n      return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * Emits an Approval event.\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n      _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n      return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * Emits an Approval event.\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n      _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n      return true;\n  }\n\n  /**\n   * @dev Transfer token for a specified addresses\n   * @param from The address to transfer from.\n   * @param to The address to transfer to.\n   * @param value The amount to be transferred.\n   */\n  function _transfer(address from, address to, uint256 value) internal {\n      require(to != address(0));\n\n      _balances[from] = _balances[from].sub(value);\n      _balances[to] = _balances[to].add(value);\n      emit Transfer(from, to, value);\n  }\n\n  /**\n   * @dev Internal function that mints an amount of the token and assigns it to\n   * an account. This encapsulates the modification of balances such that the\n   * proper events are emitted.\n   * @param account The account that will receive the created tokens.\n   * @param value The amount that will be created.\n   */\n  function _mint(address account, uint256 value) internal {\n      require(account != address(0));\n\n      _totalSupply = _totalSupply.add(value);\n      _balances[account] = _balances[account].add(value);\n      emit Transfer(address(0), account, value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burn(address account, uint256 value) internal {\n      require(account != address(0));\n\n      _totalSupply = _totalSupply.sub(value);\n      _balances[account] = _balances[account].sub(value);\n      emit Transfer(account, address(0), value);\n  }\n\n  /**\n   * @dev Approve an address to spend another addresses' tokens.\n   * @param owner The address that owns the tokens.\n   * @param spender The address that will spend the tokens.\n   * @param value The number of tokens that can be spent.\n   */\n  function _approve(address owner, address spender, uint256 value) internal {\n      require(spender != address(0));\n      require(owner != address(0));\n\n      _allowed[owner][spender] = value;\n      emit Approval(owner, spender, value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account, deducting from the sender's allowance for said account. Uses the\n   * internal burn function.\n   * Emits an Approval event (reflecting the reduced allowance).\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burnFrom(address account, uint256 value) internal {\n      _burn(account, value);\n      _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n  }\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract ERC20Burnable is ERC20 {\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param value The amount of token to be burned.\n   */\n  function burn(uint256 value) public {\n    _burn(msg.sender, value);\n  }\n\n  /**\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n   * @param from address The address which you want to send tokens from\n   * @param value uint256 The amount of token to be burned\n   */\n  function burnFrom(address from, uint256 value) public {\n    _burnFrom(from, value);\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() internal {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\nlibrary Percent {\n  // Solidity automatically throws when dividing by 0\n  struct percent {\n    uint num;\n    uint den;\n  }\n\n  // storage\n  function mul(percent storage p, uint a) internal view returns (uint) {\n    if (a == 0) {\n      return 0;\n    }\n    return a*p.num/p.den;\n  }\n\n  function div(percent storage p, uint a) internal view returns (uint) {\n    return a/p.num*p.den;\n  }\n\n  function sub(percent storage p, uint a) internal view returns (uint) {\n    uint b = mul(p, a);\n    if (b >= a) {\n      return 0;\n    }\n    return a - b;\n  }\n\n  function add(percent storage p, uint a) internal view returns (uint) {\n    return a + mul(p, a);\n  }\n\n  function toMemory(percent storage p) internal view returns (Percent.percent memory) {\n    return Percent.percent(p.num, p.den);\n  }\n\n  // memory\n  function mmul(percent memory p, uint a) internal pure returns (uint) {\n    if (a == 0) {\n      return 0;\n    }\n    return a*p.num/p.den;\n  }\n\n  function mdiv(percent memory p, uint a) internal pure returns (uint) {\n    return a/p.num*p.den;\n  }\n\n  function msub(percent memory p, uint a) internal pure returns (uint) {\n    uint b = mmul(p, a);\n    if (b >= a) {\n      return 0;\n    }\n    return a - b;\n  }\n\n  function madd(percent memory p, uint a) internal pure returns (uint) {\n    return a + mmul(p, a);\n  }\n}\n\n/**\n* @title XetherToken is a basic ERC20 Token\n*/\ncontract XetherToken is ERC20Detailed(\"XetherEcosystemToken\", \"XEET\", 18), ERC20Burnable, Ownable {\n  /**\n  * Modifiers\n  */\n  modifier onlyParticipant {\n    require(showMyTokens() > 0);\n    _;\n  }\n\n  modifier hasDividends {\n    require(showMyDividends(true) > 0);\n    _;\n  }\n\n  /**\n  * Events\n  */\n  event onTokenBuy(\n    address indexed customerAddress,\n    uint256 incomeEth,\n    uint256 tokensCreated,\n    address indexed ref,\n    uint timestamp,\n    uint256 startPrice,\n    uint256 newPrice\n  );\n\n  event onTokenSell(\n    address indexed customerAddress,\n    uint256 tokensBurned,\n    uint256 earnedEth,\n    uint timestamp,\n    uint256 startPrice,\n    uint256 newPrice\n  );\n\n  event onReinvestment(\n    address indexed customerAddress,\n    uint256 reinvestEth,\n    uint256 tokensCreated\n  );\n\n  event onWithdraw(\n    address indexed customerAddress,\n    uint256 withdrawEth\n  );\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 tokens\n  );\n\n  using Percent for Percent.percent;\n  using SafeMath for *;\n\n  /**\n  * @dev percents\n  */\n  Percent.percent private inBonus_p  = Percent.percent(10, 100);           //   10/100  *100% = 10%\n  Percent.percent private outBonus_p  = Percent.percent(4, 100);           //   4/100  *100% = 4%\n  Percent.percent private refBonus_p = Percent.percent(30, 100);           //   30/100  *100% = 30%\n  Percent.percent private transferBonus_p = Percent.percent(1, 100);       //   1/100  *100% = 1%\n\n  /**\n  * @dev initial variables\n  */\n  address constant DUMMY_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n  address public marketingAddress = DUMMY_ADDRESS;\n  uint256 constant internal tokenPriceInitial = 0.00005 ether;\n  uint256 constant internal tokenPriceIncremental = 0.0000000001 ether;\n  uint256 internal profitPerToken = 0;\n  uint256 internal decimalShift = 1e18;\n  uint256 internal currentTotalDividends = 0;\n\n  mapping(address => int256) internal payoutsTo;\n  mapping(address => uint256) internal refBalance;\n  mapping(address => address) internal referrals;\n\n  uint256 public actualTokenPrice = tokenPriceInitial;\n  uint256 public refMinBalanceReq = 50e18;\n\n  /**\n  * @dev Event to notify if transfer successful or failed\n  * after account approval verified\n  */\n  event TransferSuccessful(address indexed from_, address indexed to_, uint256 amount_);\n  event TransferFailed(address indexed from_, address indexed to_, uint256 amount_);\n  event debug(uint256 div1, uint256 div2);\n\n  /**\n  * @dev fallback function, buy tokens\n  */\n  function() payable external {\n    buyTokens(msg.sender, msg.value, referrals[msg.sender]);\n  }\n\n  /**\n  * Public\n  */\n  function setMarketingAddress(address newMarketingAddress) external onlyOwner {\n    marketingAddress = newMarketingAddress;\n  }\n\n  function ecosystemDividends() payable external {\n    uint dividends = msg.value;\n    uint256 toMarketingAmount = inBonus_p.mul(dividends);\n    uint256 toShareAmount = SafeMath.sub(dividends, toMarketingAmount);\n\n    buyTokens(marketingAddress, toMarketingAmount, address(0));\n    profitPerToken = profitPerToken.add(toShareAmount.mul(decimalShift).div(totalSupply()));\n  }\n\n  /**\n  * @dev main function to get/buy tokens\n  * @param _ref address of referal\n  */\n  function buy(address _ref) public payable returns (uint256) {\n    referrals[msg.sender] = _ref;\n    buyTokens(msg.sender, msg.value, _ref);\n  }\n\n  /**\n  * @dev main function to sell tokens\n  * @param _inRawTokens address of referal\n  */\n  function sell(uint256 _inRawTokens) onlyParticipant public {\n    sellTokens(_inRawTokens);\n  }\n\n  /**\n  * @dev function to withdraw balance\n  */\n  function withdraw() hasDividends public {\n    address payable _customerAddress = msg.sender;\n    uint256 _dividends = showMyDividends(false);\n\n    payoutsTo[_customerAddress] += (int256) (_dividends);\n    _dividends = _dividends.add(refBalance[_customerAddress]);\n    refBalance[_customerAddress] = 0;\n\n    _customerAddress.transfer(_dividends);\n\n    emit onWithdraw(_customerAddress, _dividends);\n  }\n\n  /**\n  * @dev function to withdraw balance\n  */\n  function withdraw(address customerAddress) internal {\n    uint256 _dividends = dividendsOf(customerAddress);\n\n    payoutsTo[customerAddress] += (int256) (_dividends);\n    _dividends = _dividends.add(refBalance[customerAddress]);\n    refBalance[customerAddress] = 0;\n\n    if (_dividends > 0) {\n      address payable _customerAddress = address(uint160(customerAddress));\n      _customerAddress.transfer(_dividends);\n\n      emit onWithdraw(customerAddress, _dividends);\n    }\n  }\n\n  function transfer(address to, uint256 value) public returns (bool) {\n    address _customerAddress = msg.sender;\n    require(value <= balanceOf(_customerAddress));\n    require(to != address(0));\n\n    if (showMyDividends(true) > 0) {\n      withdraw();\n    }\n\n    uint256 _tokenFee = transferBonus_p.mul(value);\n    uint256 _taxedTokens = value.sub(_tokenFee);\n    uint256 _dividends = tokensToEth(_tokenFee);\n\n    _transfer(_customerAddress, to, _taxedTokens);\n    _burn(_customerAddress, _tokenFee);\n\n    payoutsTo[_customerAddress] -= (int256) (profitPerToken.mul(value).div(decimalShift));\n    payoutsTo[to] += (int256) (profitPerToken.mul(_taxedTokens).div(decimalShift));\n    profitPerToken = profitPerToken.add(_dividends.mul(decimalShift).div(totalSupply()));\n\n    emit TransferSuccessful(_customerAddress, to, value);\n\n    return true;\n  }\n\n  function transferFrom(address from, address to, uint256 value)\n    public\n    returns (bool)\n  {\n    uint256 _tokenFee = transferBonus_p.mul(value);\n    uint256 _taxedTokens = value.sub(_tokenFee);\n    uint256 _dividends = tokensToEth(_tokenFee);\n\n    withdraw(from);\n\n    ERC20.transferFrom(from, to, _taxedTokens);\n    _burn(from, _tokenFee);\n\n    payoutsTo[from] -= (int256) (profitPerToken.mul(value).div(decimalShift));\n    payoutsTo[to] += (int256) (profitPerToken.mul(_taxedTokens).div(decimalShift));\n    profitPerToken = profitPerToken.add(_dividends.mul(decimalShift).div(totalSupply()));\n\n    emit TransferSuccessful(from, to, value);\n\n    return true;\n  }\n\n  /**\n  * @dev function to sell all tokens and withdraw balance\n  */\n  function exit() public {\n    address _customerAddress = msg.sender;\n    uint256 _tokens = balanceOf(_customerAddress);\n\n    if (_tokens > 0) sell(_tokens);\n\n    withdraw();\n  }\n\n  /**\n  * @dev function to reinvest of dividends\n  */\n  function reinvest() onlyParticipant public {\n    uint256 _dividends = showMyDividends(false);\n    address _customerAddress = msg.sender;\n\n    payoutsTo[_customerAddress] += (int256) (_dividends);\n    _dividends = _dividends.add(refBalance[_customerAddress]);\n    refBalance[_customerAddress] = 0;\n\n    uint256 _tokens = buyTokens(_customerAddress, _dividends, address(0));\n\n    emit onReinvestment(_customerAddress, _dividends, _tokens);\n  }\n\n  /**\n  * @dev show actual tokens price\n  */\n  function getActualTokenPrice() public view returns (uint256) {\n    return actualTokenPrice;\n  }\n\n  /**\n  * @dev show owner dividents\n  * @param _includeReferralBonus true/false\n  */\n  function showMyDividends(bool _includeReferralBonus) public view returns (uint256) {\n    address _customerAddress = msg.sender;\n    return _includeReferralBonus ? dividendsOf(_customerAddress).add(refBalance[_customerAddress]) : dividendsOf(_customerAddress) ;\n  }\n\n  /**\n  * @dev show owner tokens\n  */\n  function showMyTokens() public view returns (uint256) {\n      address _customerAddress = msg.sender;\n      return balanceOf(_customerAddress);\n  }\n\n  /**\n  * @dev show address dividents\n  * @param _customerAddress address to show dividends for\n  */\n  function dividendsOf(address _customerAddress) public view returns (uint256) {\n    return (uint256) ((int256) (profitPerToken.mul(balanceOf(_customerAddress)).div(decimalShift)) - payoutsTo[_customerAddress]);\n  }\n\n  /**\n * @dev function to show ether/tokens ratio\n * @param _eth eth amount\n */\n function showEthToTokens(uint256 _eth) public view returns (uint256 _tokensReceived, uint256 _newTokenPrice) {\n   uint256 b = actualTokenPrice.mul(2).sub(tokenPriceIncremental);\n   uint256 c = _eth.mul(2);\n   uint256 d = SafeMath.add(b**2, tokenPriceIncremental.mul(4).mul(c));\n\n   // d = b**2 + 4 * a * c;\n   // (-b + Math.sqrt(d)) / (2*a)\n   _tokensReceived = SafeMath.div(sqrt(d).sub(b).mul(decimalShift), tokenPriceIncremental.mul(2));\n   _newTokenPrice = actualTokenPrice.add(tokenPriceIncremental.mul(_tokensReceived).div(decimalShift));\n }\n\n /**\n * @dev function to show tokens/ether ratio\n * @param _tokens tokens amount\n */\n function showTokensToEth(uint256 _tokens) public view returns (uint256 _eth, uint256 _newTokenPrice) {\n   // (2 * a1 - delta * (n - 1)) / 2 * n\n   _eth = SafeMath.sub(actualTokenPrice.mul(2), tokenPriceIncremental.mul(_tokens.sub(1e18)).div(decimalShift)).div(2).mul(_tokens).div(decimalShift);\n   _newTokenPrice = actualTokenPrice.sub(tokenPriceIncremental.mul(_tokens).div(decimalShift));\n }\n\n function sqrt(uint x) pure private returns (uint y) {\n    uint z = (x + 1) / 2;\n    y = x;\n    while (z < y) {\n        y = z;\n        z = (x / z + z) / 2;\n    }\n }\n\n  /**\n  * Internals\n  */\n\n  /**\n  * @dev function to buy tokens, calculate bonus, dividends, fees\n  * @param _inRawEth eth amount\n  * @param _ref address of referal\n  */\n  function buyTokens(address customerAddress, uint256 _inRawEth, address _ref) internal returns (uint256) {\n      uint256 _dividends = inBonus_p.mul(_inRawEth);\n      uint256 _inEth = _inRawEth.sub(_dividends);\n      uint256 _tokens = 0;\n      uint256 startPrice = actualTokenPrice;\n\n      if (_ref != address(0) && _ref != customerAddress && balanceOf(_ref) >= refMinBalanceReq) {\n        uint256 _refBonus = refBonus_p.mul(_dividends);\n        _dividends = _dividends.sub(_refBonus);\n        refBalance[_ref] = refBalance[_ref].add(_refBonus);\n      }\n\n      uint256 _totalTokensSupply = totalSupply();\n\n      if (_totalTokensSupply > 0) {\n        _tokens = ethToTokens(_inEth);\n        require(_tokens > 0);\n        profitPerToken = profitPerToken.add(_dividends.mul(decimalShift).div(_totalTokensSupply));\n        _totalTokensSupply = _totalTokensSupply.add(_tokens);\n      } else {\n        // initial protect\n        if (!isOwner()) {\n            address(uint160(owner())).transfer(msg.value);\n            return 0;\n        }\n\n        _totalTokensSupply = ethToTokens(_inRawEth);\n        _tokens = _totalTokensSupply;\n      }\n\n      _mint(customerAddress, _tokens);\n      payoutsTo[customerAddress] += (int256) (profitPerToken.mul(_tokens).div(decimalShift));\n\n      emit onTokenBuy(customerAddress, _inEth, _tokens, _ref, now, startPrice, actualTokenPrice);\n\n      return _tokens;\n  }\n\n  /**\n  * @dev function to sell tokens, calculate dividends, fees\n  * @param _inRawTokens eth amount\n  */\n  function sellTokens(uint256 _inRawTokens) internal returns (uint256) {\n    address _customerAddress = msg.sender;\n    require(_inRawTokens <= balanceOf(_customerAddress));\n    uint256 _tokens = _inRawTokens;\n    uint256 _eth = 0;\n    uint256 startPrice = actualTokenPrice;\n\n    _eth = tokensToEth(_tokens);\n    _burn(_customerAddress, _tokens);\n\n    uint256 _dividends = outBonus_p.mul(_eth);\n    uint256 _ethTaxed = _eth.sub(_dividends);\n    int256 unlockPayout = (int256) (_ethTaxed.add((profitPerToken.mul(_tokens)).div(decimalShift)));\n\n    payoutsTo[_customerAddress] -= unlockPayout;\n    profitPerToken = profitPerToken.add(_dividends.mul(decimalShift).div(totalSupply()));\n\n    emit onTokenSell(_customerAddress, _tokens, _eth, now, startPrice, actualTokenPrice);\n  }\n\n  /**\n  * @dev function to calculate ether/tokens ratio\n  * @param _eth eth amount\n  */\n  function ethToTokens(uint256 _eth) internal returns (uint256 _tokensReceived) {\n    uint256 _newTokenPrice;\n    (_tokensReceived, _newTokenPrice) = showEthToTokens(_eth);\n    actualTokenPrice = _newTokenPrice;\n  }\n\n  /**\n  * @dev function to calculate tokens/ether ratio\n  * @param _tokens tokens amount\n  */\n  function tokensToEth(uint256 _tokens) internal returns (uint256 _eth) {\n    uint256 _newTokenPrice;\n    (_eth, _newTokenPrice) = showTokensToEth(_tokens);\n    actualTokenPrice = _newTokenPrice;\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showMyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"showEthToTokens\",\"outputs\":[{\"name\":\"_tokensReceived\",\"type\":\"uint256\"},{\"name\":\"_newTokenPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"actualTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refMinBalanceReq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ecosystemDividends\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMarketingAddress\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getActualTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"showTokensToEth\",\"outputs\":[{\"name\":\"_eth\",\"type\":\"uint256\"},{\"name\":\"_newTokenPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"showMyDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_inRawTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomeEth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensCreated\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"ref\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"onTokenBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"earnedEth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reinvestEth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensCreated\",\"type\":\"uint256\"}],\"name\":\"onReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"withdrawEth\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from_\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to_\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"TransferSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from_\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to_\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"TransferFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"div1\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"div2\",\"type\":\"uint256\"}],\"name\":\"debug\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "600a6080819052606460a081905260078290556008819055600460c081905260e0829052600981905591819055601e610100819052610120829052600b55600c8190556001610140819052610160829052600d55600e55600f80546001600160a01b03191673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee17905560006010819055670de0b6b3a76400006011556012818155652d79883d20006016556802b5e3af16b188000060175560146101808181527f58657468657245636f73797374656d546f6b656e0000000000000000000000006101a09081526102006040526101c09586527f58454554000000000000000000000000000000000000000000000000000000006101e0529094936200011c929091906200019c565b508151620001329060019060208501906200019c565b506002805460ff90921660ff199092169190911790555050600680546001600160a01b0319163317908190556040516001600160a01b0391909116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a362000241565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001df57805160ff19168380011785556200020f565b828001600101855582156200020f579182015b828111156200020f578251825591602001919060010190620001f2565b506200021d92915062000221565b5090565b6200023e91905b808211156200021d576000815560010162000228565b90565b611b2480620002516000396000f3fe6080604052600436106101ed5760003560e01c806379cc67901161010d578063b17decdf116100a0578063e4849b321161006f578063e4849b32146106f4578063e9fad8ee1461071e578063f088d54714610733578063f2fde38b14610759578063fdb5a03e1461078c576101ed565b8063b17decdf1461064e578063ba20e3c514610663578063dad1de6a1461068d578063dd62ed3e146106b9576101ed565b806395d89b41116100dc57806395d89b41146105b2578063a457c2d7146105c7578063a5ece94114610600578063a9059cbb14610615576101ed565b806379cc6790146105005780638da5cb5b146105395780638f32d59b1461056a578063906e9dd01461057f576101ed565b8063313ce567116101855780634b0d2bd1116101545780634b0d2bd11461049b5780635e78458e146104b057806370a08231146104b8578063715018a6146104eb576101ed565b8063313ce567146103f657806339509351146104215780633ccfd60b1461045a57806342966c6814610471576101ed565b806318160ddd116101c157806318160ddd14610346578063186737a51461035b5780631fc7e4871461039e57806323b872dd146103b3576101ed565b806265318b146102155780630680fa031461025a57806306fdde031461026f578063095ea7b3146102f9575b33600081815260156020526040902054610212919034906001600160a01b03166107a1565b50005b34801561022157600080fd5b506102486004803603602081101561023857600080fd5b50356001600160a01b0316610a11565b60408051918252519081900360200190f35b34801561026657600080fd5b50610248610a53565b34801561027b57600080fd5b50610284610a65565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102be5781810151838201526020016102a6565b50505050905090810190601f1680156102eb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561030557600080fd5b506103326004803603604081101561031c57600080fd5b506001600160a01b038135169060200135610afb565b604080519115158252519081900360200190f35b34801561035257600080fd5b50610248610b12565b34801561036757600080fd5b506103856004803603602081101561037e57600080fd5b5035610b18565b6040805192835260208301919091528051918290030190f35b3480156103aa57600080fd5b50610248610bfe565b3480156103bf57600080fd5b50610332600480360360608110156103d657600080fd5b506001600160a01b03813581169160208101359091169060400135610c04565b34801561040257600080fd5b5061040b610d44565b6040805160ff9092168252519081900360200190f35b34801561042d57600080fd5b506103326004803603604081101561044457600080fd5b506001600160a01b038135169060200135610d4d565b34801561046657600080fd5b5061046f610d8e565b005b34801561047d57600080fd5b5061046f6004803603602081101561049457600080fd5b5035610e7a565b3480156104a757600080fd5b50610248610e87565b61046f610e8d565b3480156104c457600080fd5b50610248600480360360208110156104db57600080fd5b50356001600160a01b0316610ee1565b3480156104f757600080fd5b5061046f610efc565b34801561050c57600080fd5b5061046f6004803603604081101561052357600080fd5b506001600160a01b038135169060200135610f57565b34801561054557600080fd5b5061054e610f65565b604080516001600160a01b039092168252519081900360200190f35b34801561057657600080fd5b50610332610f74565b34801561058b57600080fd5b5061046f600480360360208110156105a257600080fd5b50356001600160a01b0316610f85565b3480156105be57600080fd5b50610284610fb8565b3480156105d357600080fd5b50610332600480360360408110156105ea57600080fd5b506001600160a01b038135169060200135611018565b34801561060c57600080fd5b5061054e611054565b34801561062157600080fd5b506103326004803603604081101561063857600080fd5b506001600160a01b038135169060200135611063565b34801561065a57600080fd5b506102486111c9565b34801561066f57600080fd5b506103856004803603602081101561068657600080fd5b50356111cf565b34801561069957600080fd5b50610248600480360360208110156106b057600080fd5b5035151561126a565b3480156106c557600080fd5b50610248600480360360408110156106dc57600080fd5b506001600160a01b03813581169160200135166112b2565b34801561070057600080fd5b5061046f6004803603602081101561071757600080fd5b50356112dd565b34801561072a57600080fd5b5061046f6112fa565b6102486004803603602081101561074957600080fd5b50356001600160a01b031661131f565b34801561076557600080fd5b5061046f6004803603602081101561077c57600080fd5b50356001600160a01b0316611359565b34801561079857600080fd5b5061046f611373565b6000806107b560078563ffffffff61144116565b905060006107c9858363ffffffff61146816565b6016549091506000906001600160a01b038616158015906107fc5750876001600160a01b0316866001600160a01b031614155b8015610812575060175461080f87610ee1565b10155b1561088357600061082a600b8663ffffffff61144116565b905061083c858263ffffffff61146816565b6001600160a01b038816600090815260146020526040902054909550610868908263ffffffff61147d16565b6001600160a01b038816600090815260146020526040902055505b600061088d610b12565b905080156108fe5761089e8461148f565b9250600083116108ad57600080fd5b6108e46108d5826108c9601154896114a590919063ffffffff16565b9063ffffffff6114cc16565b6010549063ffffffff61147d16565b6010556108f7818463ffffffff61147d16565b9050610968565b610906610f74565b61095957610912610f65565b6001600160a01b03166108fc349081150290604051600060405180830381858888f1935050505015801561094a573d6000803e3d6000fd5b50600095505050505050610a0a565b6109628861148f565b90508092505b61097289846114ee565b61098d6011546108c9856010546114a590919063ffffffff16565b6001600160a01b03808b1660008181526013602090815260409182902080549095019094556016548151898152948501889052428583015260608501879052608085015251918a169290917fff885306bd27f603a3fac7621bd18304a24108a142c4407ff0cfec31816c40d29181900360a00190a3509093505050505b9392505050565b6001600160a01b038116600090815260136020526040812054601154610a4c906108c9610a3d86610ee1565b6010549063ffffffff6114a516565b0392915050565b600033610a5f81610ee1565b91505090565b60008054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610af15780601f10610ac657610100808354040283529160200191610af1565b820191906000526020600020905b815481529060010190602001808311610ad457829003601f168201915b5050505050905090565b6000610b08338484611598565b5060015b92915050565b60055490565b6000806000610b476305f5e100610b3b60026016546114a590919063ffffffff16565b9063ffffffff61146816565b90506000610b5c85600263ffffffff6114a516565b90506000610b916002840a610b8c84610b806305f5e100600463ffffffff6114a516565b9063ffffffff6114a516565b61147d565b9050610bc3610ba9601154610b8086610b3b86611620565b610bbe6305f5e100600263ffffffff6114a516565b6114cc565b9450610bf4610be56011546108c9886305f5e1006114a590919063ffffffff16565b6016549063ffffffff61147d16565b9350505050915091565b60165481565b600080610c18600d8463ffffffff61144116565b90506000610c2c848363ffffffff61146816565b90506000610c3983611651565b9050610c448761165d565b610c4f878784611743565b50610c5a8784611795565b610c756011546108c9876010546114a590919063ffffffff16565b6001600160a01b03881660009081526013602052604090208054919091039055601154601054610cb091906108c9908563ffffffff6114a516565b6001600160a01b038716600090815260136020526040902080549091019055610cf16108d5610cdd610b12565b6011546108c990859063ffffffff6114a516565b6010556040805186815290516001600160a01b0380891692908a16917fd6d3eb25a413c05d8107fc49deb2789bef7f612582b2482804c0b0423b6638ee9181900360200190a35060019695505050505050565b60025460ff1690565b3360008181526004602090815260408083206001600160a01b03871684529091528120549091610b08918590610d89908663ffffffff61147d16565b611598565b6000610d9a600161126a565b11610da457600080fd5b336000610db08161126a565b6001600160a01b03831660009081526013602090815260408083208054850190556014909152902054909150610ded90829063ffffffff61147d16565b6001600160a01b03831660008181526014602052604080822082905551929350909183156108fc0291849190818181858888f19350505050158015610e36573d6000803e3d6000fd5b506040805182815290516001600160a01b038416917fccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc919081900360200190a25050565b610e843382611795565b50565b60175481565b346000610ea160078363ffffffff61144116565b90506000610eaf8383611468565b600f54909150610eca906001600160a01b03168360006107a1565b50610ed96108d5610cdd610b12565b601055505050565b6001600160a01b031660009081526003602052604090205490565b610f04610f74565b610f0d57600080fd5b6006546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600680546001600160a01b0319169055565b610f61828261183e565b5050565b6006546001600160a01b031690565b6006546001600160a01b0316331490565b610f8d610f74565b610f9657600080fd5b600f80546001600160a01b0319166001600160a01b0392909216919091179055565b60018054604080516020601f60026000196101008789161502019095169490940493840181900481028201810190925282815260609390929091830182828015610af15780601f10610ac657610100808354040283529160200191610af1565b3360008181526004602090815260408083206001600160a01b03871684529091528120549091610b08918590610d89908663ffffffff61146816565b600f546001600160a01b031681565b60003361106f81610ee1565b83111561107b57600080fd5b6001600160a01b03841661108e57600080fd5b600061109a600161126a565b11156110a8576110a8610d8e565b60006110bb600d8563ffffffff61144116565b905060006110cf858363ffffffff61146816565b905060006110dc83611651565b90506110e9848884611883565b6110f38484611795565b61110e6011546108c9886010546114a590919063ffffffff16565b6001600160a01b0385166000908152601360205260409020805491909103905560115460105461114991906108c9908563ffffffff6114a516565b6001600160a01b0388166000908152601360205260409020805490910190556111766108d5610cdd610b12565b6010556040805187815290516001600160a01b03808a1692908716917fd6d3eb25a413c05d8107fc49deb2789bef7f612582b2482804c0b0423b6638ee9181900360200190a35060019695505050505050565b60165490565b6000806112326011546108c985610b8060026108c96111fa60026016546114a590919063ffffffff16565b60115461122d906108c961121c8e670de0b6b3a764000063ffffffff61146816565b6305f5e1009063ffffffff6114a516565b611468565b91506112636112546011546108c9866305f5e1006114a590919063ffffffff16565b6016549063ffffffff61146816565b9050915091565b600033826112805761127b81610a11565b610a0a565b6001600160a01b038116600090815260146020526040902054610a0a906112a683610a11565b9063ffffffff61147d16565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205490565b60006112e7610a53565b116112f157600080fd5b610f6181611950565b33600061130682610ee1565b9050801561131757611317816112dd565b610f61610d8e565b33600081815260156020526040812080546001600160a01b0319166001600160a01b038516179055906113539034846107a1565b50919050565b611361610f74565b61136a57600080fd5b610e8481611a89565b600061137d610a53565b1161138757600080fd5b6000611393600061126a565b3360008181526013602090815260408083208054860190556014909152902054919250906113c890839063ffffffff61147d16565b6001600160a01b03821660009081526014602052604081208190559092506113f18284836107a1565b9050816001600160a01b03167fbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab36153264588483604051808381526020018281526020019250505060405180910390a2505050565b60008161145057506000610b0c565b6001830154835483028161146057fe5b049392505050565b60008282111561147757600080fd5b50900390565b600082820183811015610a0a57600080fd5b60008061149b83610b18565b6016559392505050565b6000826114b457506000610b0c565b828202828482816114c157fe5b0414610a0a57600080fd5b60008082116114da57600080fd5b60008284816114e557fe5b04949350505050565b6001600160a01b03821661150157600080fd5b600554611514908263ffffffff61147d16565b6005556001600160a01b038216600090815260036020526040902054611540908263ffffffff61147d16565b6001600160a01b03831660008181526003602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b0382166115ab57600080fd5b6001600160a01b0383166115be57600080fd5b6001600160a01b03808416600081815260046020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b80600260018201045b818110156113535780915060028182858161164057fe5b04018161164957fe5b049050611629565b60008061149b836111cf565b600061166882610a11565b6001600160a01b038316600090815260136020908152604080832080548501905560149091529020549091506116a590829063ffffffff61147d16565b6001600160a01b03831660009081526014602052604081205590508015610f615760405182906001600160a01b0382169083156108fc029084906000818181858888f193505050501580156116fe573d6000803e3d6000fd5b506040805183815290516001600160a01b038516917fccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc919081900360200190a2505050565b6000611750848484611883565b6001600160a01b03841660009081526004602090815260408083203380855292529091205461178b918691610d89908663ffffffff61146816565b5060019392505050565b6001600160a01b0382166117a857600080fd5b6005546117bb908263ffffffff61146816565b6005556001600160a01b0382166000908152600360205260409020546117e7908263ffffffff61146816565b6001600160a01b0383166000818152600360209081526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050565b6118488282611795565b6001600160a01b038216600090815260046020908152604080832033808552925290912054610f61918491610d89908563ffffffff61146816565b6001600160a01b03821661189657600080fd5b6001600160a01b0383166000908152600360205260409020546118bf908263ffffffff61146816565b6001600160a01b0380851660009081526003602052604080822093909355908416815220546118f4908263ffffffff61147d16565b6001600160a01b0380841660008181526003602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60003361195c81610ee1565b83111561196857600080fd5b601654839060009061197983611651565b91506119858484611795565b600061199860098463ffffffff61144116565b905060006119ac848363ffffffff61146816565b905060006119db6119ce6011546108c9896010546114a590919063ffffffff16565b839063ffffffff61147d16565b6001600160a01b0388166000908152601360205260409020805482900390559050611a1e6108d5611a0a610b12565b6011546108c990879063ffffffff6114a516565b60105560165460408051888152602081018890524281830152606081018790526080810192909252516001600160a01b038916917fcda0e3e9928ea404aa9e25c490e9eec25fa1468e2f5cd3dfd7af4fa69ab08d0a919081900360a00190a250505050505050919050565b6001600160a01b038116611a9c57600080fd5b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b0319166001600160a01b039290921691909117905556fea165627a7a72305820b7bfd1ce1a92f9f2f8eb8556a113a82df62ecf88c9879e76f7c97fc6af7d74310029"
}