{
  "address": "0xcc9d177c3cefefc4fdbde2819dba27d6ee0ccf03",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WINNER",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-13\n*/\n\npragma solidity ^0.5.0;\n\n\n/*\n * Ownable\n *\n * Base contract with an owner.\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\n */\ncontract Ownable {\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        if (msg.sender != owner) {\n            revert();\n        }\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n\n}\n\n\n/*\n * ERC20 interface\n * see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n    uint public totalSupply;\n\n    function balanceOf(address who) public view returns (uint);\n\n    function allowance(address owner, address spender) public view returns (uint);\n\n    function transfer(address to, uint value) public returns (bool ok);\n\n    function transferFrom(address from, address to, uint value) public returns (bool ok);\n\n    function approve(address spender, uint value) public returns (bool ok);\n\n    event Transfer(address indexed from, address indexed to, uint value);\n    event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n\n\n/**\n * Math operations with safety checks\n */\ncontract SafeMath {\n    function safeMul(uint a, uint b) internal pure returns (uint) {\n        uint c = a * b;\n        assertThat(a == 0 || c / a == b);\n        return c;\n    }\n\n    function safeDiv(uint a, uint b) internal pure returns (uint) {\n        assertThat(b > 0);\n        uint c = a / b;\n        assertThat(a == b * c + a % b);\n        return c;\n    }\n\n    function safeSub(uint a, uint b) internal pure returns (uint) {\n        assertThat(b <= a);\n        return a - b;\n    }\n\n    function safeAdd(uint a, uint b) internal pure returns (uint) {\n        uint c = a + b;\n        assertThat(c >= a && c >= b);\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    function assertThat(bool assertion) internal pure {\n        if (!assertion) {\n            revert();\n        }\n    }\n}\n\n\n/**\n * Standard ERC20 token with Short Hand Attack and approve() race condition mitigation.\n *\n * Based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, SafeMath {\n\n    string public name;\n    string public symbol;\n    uint public decimals;\n\n    /* Actual balances of token holders */\n    mapping(address => uint) balances;\n\n    /* approve() allowances */\n    mapping(address => mapping(address => uint)) allowed;\n\n    /**\n     *\n     * Fix for the ERC20 short address attack\n     *\n     * http://vessenes.com/the-erc20-short-address-attack-explained/\n     */\n    modifier onlyPayloadSize(uint size) {\n        if (msg.data.length < size + 4) {\n            revert();\n        }\n        _;\n    }\n\n    function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) public returns (bool success) {\n        balances[msg.sender] = safeSub(balances[msg.sender], _value);\n        balances[_to] = safeAdd(balances[_to], _value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n        uint _allowance = allowed[_from][msg.sender];\n\n        balances[_to] = safeAdd(balances[_to], _value);\n        balances[_from] = safeSub(balances[_from], _value);\n        allowed[_from][msg.sender] = safeSub(_allowance, _value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint _value) public returns (bool success) {\n\n        // To change the approve amount you first have to reduce the addresses`\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) revert();\n\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = safeAdd(allowed[msg.sender][_spender], _addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = safeSub(oldValue, _subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}\n\n/**\n * @title Freezable\n * @dev Base contract which allows children to freeze the operations from a certain address in case of an emergency.\n */\ncontract Freezable is Ownable {\n\n    mapping(address => bool) internal frozenAddresses;\n\n    modifier ifNotFrozen() {\n        require(frozenAddresses[msg.sender] == false);\n        _;\n    }\n\n    function freezeAddress(address addr) public onlyOwner {\n        frozenAddresses[addr] = true;\n    }\n\n    function unfreezeAddress(address addr) public onlyOwner {\n        frozenAddresses[addr] = false;\n    }\n}\n\n/**\n * @title Freezable token\n * @dev StandardToken modified with freezable transfers.\n **/\ncontract FreezableToken is StandardToken, Freezable {\n\n    function transfer(address _to, uint256 _value) public ifNotFrozen returns (bool) {\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public ifNotFrozen returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function approve(address _spender, uint256 _value) public ifNotFrozen returns (bool) {\n        return super.approve(_spender, _value);\n    }\n\n    function increaseApproval(address _spender, uint _addedValue) public ifNotFrozen returns (bool success) {\n        return super.increaseApproval(_spender, _addedValue);\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public ifNotFrozen returns (bool success) {\n        return super.decreaseApproval(_spender, _subtractedValue);\n    }\n}\n\n/**\n * A a standard token with an anti-theft mechanism.\n * Is able to restore stolen funds to a new address where the corresponding private key is safe.\n *\n */\ncontract AntiTheftToken is FreezableToken {\n\n    function restoreFunds(address from, address to, uint amount) public onlyOwner {\n        //can only restore stolen funds from a frozen address\n        require(frozenAddresses[from] == true);\n        require(to != address(0));\n        require(amount <= balances[from]);\n\n        balances[from] = safeSub(balances[from], amount);\n        balances[to] = safeAdd(balances[to], amount);\n        emit Transfer(from, to, amount);\n    }\n}\n\ncontract BurnableToken is StandardToken {\n\n    /** How many tokens we burned */\n    event Burned(address burner, uint burnedAmount);\n\n    /**\n     * Burn extra tokens from a balance.\n     *\n     */\n    function burn(uint burnAmount) public {\n        address burner = msg.sender;\n        balances[burner] = safeSub(balances[burner], burnAmount);\n        totalSupply = safeSub(totalSupply, burnAmount);\n        emit Burned(burner, burnAmount);\n    }\n}\n\ncontract WINNER is BurnableToken, AntiTheftToken {\n\n    constructor() public {\n        symbol = \"WINNER\";\n        name = \"WINNER\";\n        decimals = 18;\n\n\n        totalSupply = 1000000000 * (10 ** (18));\n        balances[msg.sender] = totalSupply;\n        emit Transfer(address(0x0), msg.sender, totalSupply);\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"freezeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"unfreezeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"restoreFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"burnedAmount\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b50600680546001600160a01b03191633178155604080518082019091528181527f57494e4e455200000000000000000000000000000000000000000000000000006020909101908152610066916002919061010e565b506040805180820190915260068082527f57494e4e4552000000000000000000000000000000000000000000000000000060209092019182526100ab9160019161010e565b5060126003556b033b2e3c9fd0803ce800000060008181553380825260046020908152604080842085905580519485525191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a36101a9565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061014f57805160ff191683800117855561017c565b8280016001018555821561017c579182015b8281111561017c578251825591602001919060010190610161565b5061018892915061018c565b5090565b6101a691905b808211156101885760008155600101610192565b90565b610cb0806101b86000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806370a08231116100a2578063bfb8054711610071578063bfb8054714610314578063c731c5041461033a578063d73dd62314610370578063dd62ed3e1461039c578063f2fde38b146103ca5761010b565b806370a08231146102965780638da5cb5b146102bc57806395d89b41146102e0578063a9059cbb146102e85761010b565b8063313ce567116100de578063313ce5671461021d57806342966c681461022557806351e946d514610244578063661884631461026a5761010b565b806306fdde0314610110578063095ea7b31461018d57806318160ddd146101cd57806323b872dd146101e7575b600080fd5b6101186103f0565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561015257818101518382015260200161013a565b50505050905090810190601f16801561017f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101b9600480360360408110156101a357600080fd5b506001600160a01b03813516906020013561047d565b604080519115158252519081900360200190f35b6101d56104ab565b60408051918252519081900360200190f35b6101b9600480360360608110156101fd57600080fd5b506001600160a01b038135811691602081013590911690604001356104b1565b6101d56104e1565b6102426004803603602081101561023b57600080fd5b50356104e7565b005b6102426004803603602081101561025a57600080fd5b50356001600160a01b0316610573565b6101b96004803603604081101561028057600080fd5b506001600160a01b0381351690602001356105ae565b6101d5600480360360208110156102ac57600080fd5b50356001600160a01b03166105d5565b6102c46105f0565b604080516001600160a01b039092168252519081900360200190f35b6101186105ff565b6101b9600480360360408110156102fe57600080fd5b506001600160a01b038135169060200135610657565b6102426004803603602081101561032a57600080fd5b50356001600160a01b031661067e565b6102426004803603606081101561035057600080fd5b506001600160a01b038135811691602081013590911690604001356106b6565b6101b96004803603604081101561038657600080fd5b506001600160a01b0381351690602001356107dd565b6101d5600480360360408110156103b257600080fd5b506001600160a01b0381358116916020013516610804565b610242600480360360208110156103e057600080fd5b50356001600160a01b031661082f565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104755780601f1061044a57610100808354040283529160200191610475565b820191906000526020600020905b81548152906001019060200180831161045857829003601f168201915b505050505081565b3360009081526007602052604081205460ff161561049a57600080fd5b6104a48383610874565b9392505050565b60005481565b3360009081526007602052604081205460ff16156104ce57600080fd5b6104d9848484610918565b949350505050565b60035481565b336000818152600460205260409020546105019083610a15565b6001600160a01b038216600090815260046020526040812091909155546105289083610a15565b600055604080516001600160a01b03831681526020810184905281517f696de425f79f4a40bc6d2122ca50507f0efbeabbff86a84871b7196ab8ea8df7929181900390910190a15050565b6006546001600160a01b0316331461058a57600080fd5b6001600160a01b03166000908152600760205260409020805460ff19166001179055565b3360009081526007602052604081205460ff16156105cb57600080fd5b6104a48383610a29565b6001600160a01b031660009081526004602052604090205490565b6006546001600160a01b031681565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156104755780601f1061044a57610100808354040283529160200191610475565b3360009081526007602052604081205460ff161561067457600080fd5b6104a48383610b13565b6006546001600160a01b0316331461069557600080fd5b6001600160a01b03166000908152600760205260409020805460ff19169055565b6006546001600160a01b031633146106cd57600080fd5b6001600160a01b03831660009081526007602052604090205460ff1615156001146106f757600080fd5b6001600160a01b03821661070a57600080fd5b6001600160a01b03831660009081526004602052604090205481111561072f57600080fd5b6001600160a01b0383166000908152600460205260409020546107529082610a15565b6001600160a01b0380851660009081526004602052604080822093909355908416815220546107819082610bca565b6001600160a01b0380841660008181526004602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b3360009081526007602052604081205460ff16156107fa57600080fd5b6104a48383610be7565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205490565b6006546001600160a01b0316331461084657600080fd5b6001600160a01b0381161561087157600680546001600160a01b0319166001600160a01b0383161790555b50565b600081158015906108a757503360009081526005602090815260408083206001600160a01b038716845290915290205415155b156108b157600080fd5b3360008181526005602090815260408083206001600160a01b03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b6001600160a01b038084166000908152600560209081526040808320338452825280832054938616835260049091528120549091906109579084610bca565b6001600160a01b0380861660009081526004602052604080822093909355908716815220546109869084610a15565b6001600160a01b0386166000908152600460205260409020556109a98184610a15565b6001600160a01b03808716600081815260056020908152604080832033845282529182902094909455805187815290519288169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3506001949350505050565b6000610a2383831115610c7a565b50900390565b3360009081526005602090815260408083206001600160a01b038616845290915281205480831115610a7e573360009081526005602090815260408083206001600160a01b0388168452909152812055610aad565b610a888184610a15565b3360009081526005602090815260408083206001600160a01b03891684529091529020555b3360008181526005602090815260408083206001600160a01b0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600060406044361015610b2557600080fd5b33600090815260046020526040902054610b3f9084610a15565b33600090815260046020526040808220929092556001600160a01b03861681522054610b6b9084610bca565b6001600160a01b0385166000818152600460209081526040918290209390935580518681529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35060019392505050565b60008282016104a4848210801590610be25750838210155b610c7a565b3360009081526005602090815260408083206001600160a01b0386168452909152812054610c159083610bca565b3360008181526005602090815260408083206001600160a01b0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b8061087157600080fdfea165627a7a72305820fe16499509c44e0341aa59677e3139bbc4def7b66e6e7d019b06f450972418940029"
}