{
  "address": "0xc502c37f8b801e9144e785fcd7817b6a85529a95",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Crowdsale",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-14\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    \n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract DragonToken{\n  function transferFrom(address _from, address _to, uint256 _value) returns(bool success);\n}\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale.\n * Crowdsales have a start and end timestamps, where investors can make\n * token purchases and the crowdsale will assign them tokens based\n * on a token per ETH rate. Funds collected are forwarded to a wallet\n * as they arrive. The contract requires a MintableToken that will be\n * minted as contributions arrive, note that the crowdsale contract\n * must be owner of the token in order to be able to mint it.\n */\ncontract Crowdsale is Ownable{\n  using SafeMath for uint256;\n\n  // The token being sold\n  DragonToken public token;\n  \n  // The address of token reserves\n  address public tokenReserve;\n\n  // start and end timestamps where investments are allowed (both inclusive)\n  uint256 public startTime;\n  uint256 public endTime;\n\n  // address where funds are collected\n  address public wallet;\n\n  // token rate in wei\n  uint256 public rate;\n\n  // amount of raised money in wei\n  uint256 public weiRaised;\n  \n  uint256 public tokensSold;\n\n  /**\n   * event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   * @param releaseTime tokens unlock time\n   */\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount, uint256 releaseTime);\n  \n  /**\n   * event upon endTime updated\n   */\n  event EndTimeUpdated();\n  \n  /**\n   * Dragon token price updated\n   */\n  event DragonPriceUpdated();\n  \n  /**\n   * event for token releasing\n   * @param holder who is releasing his tokens\n   */\n  event TokenReleased(address indexed holder, uint256 amount);\n\n\n  function Crowdsale() public {\n  \n    owner = 0xF615Ac471E066b5ae4BD211CC5044c7a31E89C4e; // overriding owner\n    startTime = now;\n    endTime = 1521187200;\n    rate = 5000000000000000; // price in wei\n    wallet = 0xF615Ac471E066b5ae4BD211CC5044c7a31E89C4e;\n    token = DragonToken(0x814F67fA286f7572B041D041b1D99b432c9155Ee);\n    tokenReserve = 0xF615Ac471E066b5ae4BD211CC5044c7a31E89C4e;\n  }\n\n  // fallback function can be used to buy tokens\n  function () external payable {\n    buyTokens(msg.sender);\n  }\n\n  // low level token purchase function\n  function buyTokens(address beneficiary) public payable {\n    require(beneficiary != address(0));\n    require(validPurchase());\n\n    uint256 weiAmount = msg.value;\n\n    // calculate token amount to be created\n    uint256 tokens = getTokenAmount(weiAmount);\n\n    // update state\n    weiRaised = weiRaised.add(weiAmount);\n    tokensSold = tokensSold.add(tokens);\n\n    uint256 lockedFor = assignTokens(beneficiary, tokens);\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens, lockedFor);\n\n    forwardFunds();\n  }\n\n  // @return true if crowdsale event has ended\n  function hasEnded() public view returns (bool) {\n    return now > endTime;\n  }\n\n  function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\n    uint256 amount = weiAmount.div(rate);\n    return amount.mul(100000000); // multiply with decimals\n  }\n\n  // send ether to the fund collection wallet\n  function forwardFunds() internal {\n    wallet.transfer(msg.value);\n  }\n\n  // @return true if the transaction can buy tokens\n  function validPurchase() internal view returns (bool) {\n    bool withinPeriod = now >= startTime && now <= endTime;\n    bool nonZeroPurchase = msg.value != 0;\n    return withinPeriod && nonZeroPurchase;\n  }\n\n  function updateEndTime(uint256 newTime) onlyOwner external {\n    require(newTime > startTime);\n    endTime = newTime;\n    EndTimeUpdated();\n  }\n  \n  function updateDragonPrice(uint256 weiAmount) onlyOwner external {\n    require(weiAmount > 0);\n    rate = weiAmount;\n    DragonPriceUpdated();\n  }\n  \n  mapping(address => uint256) balances;\n  mapping(address => uint256) releaseTime;\n  function assignTokens(address beneficiary, uint256 amount) private returns(uint256 lockedFor){\n      lockedFor = now + 45 days;\n      balances[beneficiary] = balances[beneficiary].add(amount);\n      releaseTime[beneficiary] = lockedFor;\n  }\n  \n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n  \n\n  function unlockTime(address _owner) public view returns (uint256 time) {\n    return releaseTime[_owner];\n  }\n\n  /**\n   * @notice Transfers tokens held by timelock to beneficiary.\n   */\n  function releaseDragonTokens() public {\n    require(now >= releaseTime[msg.sender]);\n    \n    uint256 amount = balances[msg.sender];\n    require(amount > 0);\n    \n    balances[msg.sender] = 0;\n    if(!token.transferFrom(tokenReserve,msg.sender,amount)){\n        revert();\n    }\n\n    TokenReleased(msg.sender,amount);\n  }\n  \n}",
  "bytecode": "6060604052341561000f57600080fd5b6000805473f615ac471e066b5ae4bd211cc5044c7a31e89c4e600160a060020a031991821633600160a060020a03161782168117835542600355635aab79806004556611c37937e08000600655600580548316821790556001805473814f67fa286f7572b041d041b1d99b432c9155ee9084161790556002805490921617905561084890819061009f90396000f3006060604052600436106100f05763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632c4e722e81146100fb5780633197cbb6146101205780633f4b1401146101335780634042b66f146101465780634b1f15d114610159578063518ab2a81461016f578063521eb273146101825780636ab3846b146101b157806370a08231146101c757806376b467b7146101e657806378e97925146102055780638da5cb5b14610218578063cbcb31711461022b578063ec8ac4d81461023e578063ecb70fb714610252578063f2fde38b14610279578063fc0c546a14610298575b6100f9336102ab565b005b341561010657600080fd5b61010e610386565b60405190815260200160405180910390f35b341561012b57600080fd5b61010e61038c565b341561013e57600080fd5b6100f9610392565b341561015157600080fd5b61010e6104e6565b341561016457600080fd5b6100f96004356104ec565b341561017a57600080fd5b61010e610548565b341561018d57600080fd5b61019561054e565b604051600160a060020a03909116815260200160405180910390f35b34156101bc57600080fd5b6100f960043561055d565b34156101d257600080fd5b61010e600160a060020a03600435166105ba565b34156101f157600080fd5b61010e600160a060020a03600435166105d5565b341561021057600080fd5b61010e6105f0565b341561022357600080fd5b6101956105f6565b341561023657600080fd5b610195610605565b6100f9600160a060020a03600435166102ab565b341561025d57600080fd5b610265610614565b604051901515815260200160405180910390f35b341561028457600080fd5b6100f9600160a060020a036004351661061c565b34156102a357600080fd5b6101956106b7565b60008080600160a060020a03841615156102c457600080fd5b6102cc6106c6565b15156102d757600080fd5b3492506102e3836106f6565b6007549092506102f9908463ffffffff61072b16565b60075560085461030f908363ffffffff61072b16565b60085561031c8483610745565b905083600160a060020a031633600160a060020a03167efe0e12b43090c1fc19a34aefa5cc138a4eeafc60ab800f855c730b3fb9480e85858560405180848152602001838152602001828152602001935050505060405180910390a36103806107a4565b50505050565b60065481565b60045481565b600160a060020a0333166000908152600a60205260408120544210156103b757600080fd5b50600160a060020a0333166000908152600960205260408120549081116103dd57600080fd5b600160a060020a0333818116600090815260096020526040808220829055600154600254908516946323b872dd94911692909186919051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561048057600080fd5b6102c65a03f1151561049157600080fd5b5050506040518051905015156104a657600080fd5b33600160a060020a03167f9cf9e3ab58b33f06d81842ea0ad850b6640c6430d6396973312e1715792e7a918260405190815260200160405180910390a250565b60075481565b60005433600160a060020a0390811691161461050757600080fd5b6000811161051457600080fd5b60068190557f654f18b14316666e9e37df19a3db77bf7fde383ed1d1ec87aed7fd11370331f560405160405180910390a150565b60085481565b600554600160a060020a031681565b60005433600160a060020a0390811691161461057857600080fd5b600354811161058657600080fd5b60048190557f1f706c64bc1901188d691c1a6eaf487e94cdfb9e61a6c8a0ab3692712c4f6c8b60405160405180910390a150565b600160a060020a031660009081526009602052604090205490565b600160a060020a03166000908152600a602052604090205490565b60035481565b600054600160a060020a031681565b600254600160a060020a031681565b600454421190565b60005433600160a060020a0390811691161461063757600080fd5b600160a060020a038116151561064c57600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600154600160a060020a031681565b600080600060035442101580156106df57506004544211155b9150503415158180156106ef5750805b9250505090565b60008061070e600654846107da90919063ffffffff16565b9050610724816305f5e10063ffffffff6107f116565b9392505050565b60008282018381101561073a57fe5b8091505b5092915050565b600160a060020a038216600090815260096020526040902054623b5380420190610775908363ffffffff61072b16565b600160a060020a03909316600090815260096020908152604080832095909555600a9052929092208290555090565b600554600160a060020a03163480156108fc0290604051600060405180830381858888f1935050505015156107d857600080fd5b565b60008082848115156107e857fe5b04949350505050565b600080831515610804576000915061073e565b5082820282848281151561081457fe5b041461073a57fe00a165627a7a72305820b4429867eb8bcc65eb577a40a98c047f6fd9a1c925a70f3f6028d62963fdfa8f0029"
}