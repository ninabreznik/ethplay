{
  "address": "0x741f58cd68d24f361cc0ee0d3aaf7df2bf16132e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BlockonixToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-02\n*/\n\npragma solidity ^0.4.24;\n\n/*\n*\n*  Blockonix Tokens are governed by the Terms & Conditions separately notified to each existing token holder\n*  of Bitindia, and available on https://blockonix.com and https://blockonix.com/tokenswap\n*\n*/\n\n\n/**\n *  Standard Interface for ERC20 Contract\n */\ncontract IERC20 {\n    function totalSupply() public constant returns (uint _totalSupply);\n    function balanceOf(address _owner) public constant returns (uint balance);\n    function transfer(address _to, uint _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n    function approve(address _spender, uint _value) public returns (bool success);\n    function allowance(address _owner, address _spender) constant public returns (uint remaining);\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\n\n/**\n * Checking overflows for various operations\n */\nlibrary SafeMathLib {\n\n/**\n* Issue: Change to internal pure\n**/\n  function minus(uint a, uint b) internal pure returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n/**\n* Issue: Change to internal pure\n**/\n  function plus(uint a, uint b) internal pure returns (uint) {\n    uint c = a + b;\n    assert(c>=a && c>=b);\n    return c;\n  }\n\n}\n\n/**\n * @title Ownable\n * @notice The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n\n  address public owner;\n\n  /**\n   * @notice The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @notice Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @notice Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    owner = newOwner;\n  }\n    \n}\n\ncontract HasAddresses {\n    address founder1FirstLockup = 0xfC866793142059C79E924d537C26E5E68a3d0CB4;\n    address founder1SecondLockup = 0xa5c5EdA285866a89fbe9434BF85BC7249Fa98D45;\n    address founder1ThirdLockup = 0xBE2D892D27309EE50D53aa3460fB21A2762625d6;\n    \n    address founder2FirstLockup = 0x7aeFB5F308C60D6fD9f9D79D6BEb32e2BbEf8F3C;\n    address founder2SecondLockup = 0x9d92785510fadcBA9D0372e96882441536d6876a;\n    address founder2ThirdLockup = 0x0e0B9943Ea00393B596089631D520bF1489d4d2E;\n\n    address founder3FirstLockup = 0x8E06EdC382Dd2Bf3F2C36f7e2261Af2c7Eb84835;\n    address founder3SecondLockup = 0x6A5AebCd6fA054ff4D10c51bABce17F189A9998a;\n    address founder3ThirdLockup = 0xe10E613Be00a6383Dde52152Bc33007E5669e861;\n\n}\n\n\ncontract VestingPeriods{\n    uint firstLockup = 1544486400; // Human time (GMT): Tuesday, 11 December 2018 00:00:00  \n    uint secondLockup = 1560211200; // Human time (GMT): Tuesday, 11 June 2019 00:00:00\n    uint thirdLockup = 1576022400; // Human time (GMT): Wednesday, 11 December 2019 00:00:00\n}\n\n\ncontract Vestable {\n\n    mapping(address => uint) vestedAddresses ;    // Addresses vested till date\n    bool isVestingOver = false;\n    event AddVestingAddress(address vestingAddress, uint maturityTimestamp);\n\n    function addVestingAddress(address vestingAddress, uint maturityTimestamp) internal{\n        vestedAddresses[vestingAddress] = maturityTimestamp;\n        emit AddVestingAddress(vestingAddress, maturityTimestamp);\n    }\n\n    function checkVestingTimestamp(address testAddress) public view returns(uint){\n        return vestedAddresses[testAddress];\n    }\n\n    function checkVestingCondition(address sender) internal view returns(bool) {\n        uint vestingTimestamp = vestedAddresses[sender];\n        if(vestingTimestamp > 0) {\n            return (now > vestingTimestamp);\n        }\n        else {\n            return true;\n        }\n    }\n\n}\n\ncontract IsUpgradable{\n    address oldTokenAddress = 0x420335D3DEeF2D5b87524Ff9D0fB441F71EA621f;\n    uint upgradeDeadline = 1543536000;\n    address oldTokenBurnAddress = 0x30E055F7C16B753dbF77B57f38782C11A9f1C653;\n    IERC20 oldToken = IERC20(oldTokenAddress);\n\n\n}\n\n/**\n * @title BlockonixToken Token\n * @notice The ERC20 Token.\n */\ncontract BlockonixToken is IERC20, Ownable, Vestable, HasAddresses, VestingPeriods, IsUpgradable {\n    \n    using SafeMathLib for uint256;\n    \n    uint256 public constant totalTokenSupply = 1009208335 * 10**16;    // Total Supply:10,092,083.35\n\n    uint256 public burntTokens;\n\n    string public constant name = \"Blockonix\";    // Blockonix\n    string public constant symbol = \"BDT\";  // BDT\n    uint8 public constant decimals = 18;            \n\n    mapping (address => uint256) public balances;\n    mapping(address => mapping(address => uint256)) approved;\n    \n    event Upgraded(address _owner, uint256 amount); \n    constructor() public {\n        \n        uint256 lockedTokenPerAddress = 280335648611111000000000;   // Total Founder Tokens(LOCKED): 2,523,020.8375, divided equally in 9 chunks\n        balances[founder1FirstLockup] = lockedTokenPerAddress;\n        balances[founder2FirstLockup] = lockedTokenPerAddress;\n        balances[founder3FirstLockup] = lockedTokenPerAddress;\n        balances[founder1SecondLockup] = lockedTokenPerAddress;\n        balances[founder2SecondLockup] = lockedTokenPerAddress;\n        balances[founder3SecondLockup] = lockedTokenPerAddress;\n        balances[founder1ThirdLockup] = lockedTokenPerAddress;\n        balances[founder2ThirdLockup] = lockedTokenPerAddress;\n        balances[founder3ThirdLockup] = lockedTokenPerAddress;\n\n        emit Transfer(address(this), founder1FirstLockup, lockedTokenPerAddress);\n        emit Transfer(address(this), founder2FirstLockup, lockedTokenPerAddress);\n        emit Transfer(address(this), founder3FirstLockup, lockedTokenPerAddress);\n        \n        emit Transfer(address(this), founder1SecondLockup, lockedTokenPerAddress);\n        emit Transfer(address(this), founder2SecondLockup, lockedTokenPerAddress);\n        emit Transfer(address(this), founder3SecondLockup, lockedTokenPerAddress);\n\n        emit Transfer(address(this), founder1ThirdLockup, lockedTokenPerAddress);\n        emit Transfer(address(this), founder2ThirdLockup, lockedTokenPerAddress);\n        emit Transfer(address(this), founder3ThirdLockup, lockedTokenPerAddress);\n\n\n        addVestingAddress(founder1FirstLockup, firstLockup);\n        addVestingAddress(founder2FirstLockup, firstLockup);\n        addVestingAddress(founder3FirstLockup, firstLockup);\n\n        addVestingAddress(founder1SecondLockup, secondLockup);\n        addVestingAddress(founder2SecondLockup, secondLockup);\n        addVestingAddress(founder3SecondLockup, secondLockup);\n\n        addVestingAddress(founder1ThirdLockup, thirdLockup);\n        addVestingAddress(founder2ThirdLockup, thirdLockup);\n        addVestingAddress(founder3ThirdLockup, thirdLockup);\n\n    }\n\n    function burn(uint256 _value) public {\n        require (balances[msg.sender] >= _value);                 // Check if the sender has enough\n        balances[msg.sender] = balances[msg.sender].minus(_value);\n        burntTokens += _value;\n        emit BurnToken(msg.sender, _value);\n    } \n\n    \n    function totalSupply() view public returns (uint256 _totalSupply) {\n        return totalTokenSupply - burntTokens;\n    }\n    \n    function balanceOf(address _owner) view public returns (uint256 balance) {\n        return balances[_owner];\n    }\n    \n    /* Internal transfer, only can be called by this contract */\n    function _transfer(address _from, address _to, uint256 _value) internal {\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n        require (balances[_from] >= _value);                 // Check if the sender has enough\n        require (balances[_to] + _value > balances[_to]);   // Check for overflows\n        balances[_from] = balances[_from].minus(_value);    // Subtract from the sender\n        balances[_to] = balances[_to].plus(_value);         // Add the same to the recipient\n        emit Transfer(_from, _to, _value);\n    }\n\n    /**\n     * @notice Send `_value` tokens to `_to` from your account\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public returns (bool success){\n        require(checkVestingCondition(msg.sender));\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n    \n    /**\n     * @notice Send `_value` tokens to `_to` on behalf of `_from`\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(checkVestingCondition(_from));\n        require (_value <= approved[_from][msg.sender]);     // Check allowance\n        approved[_from][msg.sender] = approved[_from][msg.sender].minus(_value);\n        _transfer(_from, _to, _value);\n        return true;\n    }\n    \n    /**\n     * @notice Approve `_value` tokens for `_spender`\n     * @param _spender The address of the sender\n     * @param _value the amount to send\n     */\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        require(checkVestingCondition(_spender));\n        if(balances[msg.sender] >= _value) {\n            approved[msg.sender][_spender] = _value;\n            emit Approval(msg.sender, _spender, _value);\n            return true;\n        }\n        return false;\n    }\n        \n    /**\n     * @notice Check `_value` tokens allowed to `_spender` by `_owner`\n     * @param _owner The address of the Owner\n     * @param _spender The address of the Spender\n     */\n    function allowance(address _owner, address _spender) view public returns (uint256 remaining) {\n        return approved[_owner][_spender];\n    }\n        \n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    \n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    event BurnToken(address _owner, uint256 _value);\n    \n     /**\n     * Upgrade function, requires the owner to first approve tokens equal to their old token balance to this address \n     *\n     */\n    function upgrade() external {\n        require(now <=upgradeDeadline);\n        uint256 balance = oldToken.balanceOf(msg.sender);\n        require(balance>0);\n        oldToken.transferFrom(msg.sender, oldTokenBurnAddress, balance);\n        balances[msg.sender] += balance;\n        emit Transfer(this, msg.sender, balance);\n        emit Upgraded(msg.sender, balance);\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"testAddress\",\"type\":\"address\"}],\"name\":\"checkVestingTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burntTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"BurnToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"vestingAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"maturityTimestamp\",\"type\":\"uint256\"}],\"name\":\"AddVestingAddress\",\"type\":\"event\"}]",
  "bytecode": "60806040526000600260006101000a81548160ff02191690831515021790555073fc866793142059c79e924d537c26e5e68a3d0cb4600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073a5c5eda285866a89fbe9434bf85bc7249fa98d45600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073be2d892d27309ee50d53aa3460fb21a2762625d6600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550737aefb5f308c60d6fd9f9d79d6beb32e2bbef8f3c600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550739d92785510fadcba9d0372e96882441536d6876a600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550730e0b9943ea00393b596089631d520bf1489d4d2e600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550738e06edc382dd2bf3f2c36f7e2261af2c7eb84835600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550736a5aebcd6fa054ff4d10c51babce17f189a9998a600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073e10e613be00a6383dde52152bc33007e5669e861600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550635c0efe00600b55635cfeef00600c55635df03180600d5573420335d3deef2d5b87524ff9d0fb441f71ea621f600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550635c007d80600f557330e055f7c16b753dbf77b57f38782c11a9f1c653601060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156200045657600080fd5b506000336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550693b5d06a579e1ff62c60090508060136000600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508060136000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508060136000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508060136000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508060136000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508060136000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508060136000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508060136000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508060136000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a362000d3a600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600b5462000f39640100000000026401000000009004565b62000d79600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600b5462000f39640100000000026401000000009004565b62000db8600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600b5462000f39640100000000026401000000009004565b62000df7600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600c5462000f39640100000000026401000000009004565b62000e36600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600c5462000f39640100000000026401000000009004565b62000e75600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600c5462000f39640100000000026401000000009004565b62000eb4600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600d5462000f39640100000000026401000000009004565b62000ef3600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600d5462000f39640100000000026401000000009004565b62000f32600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600d5462000f39640100000000026401000000009004565b5062000fec565b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f6083bce9c127aa04637b3e74fecf58b653ac06ad973507b47aa04d6086f6e8bc8282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050565b6114e98062000ffc6000396000f3006080604052600436106100f1576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100f6578063095ea7b31461018657806318160ddd146101eb5780631ca8b6cb1461021657806323b872dd1461024157806327e235e3146102c6578063313ce5671461031d57806342966c681461034e5780636f64ccf51461037b57806370a08231146103d25780638da5cb5b1461042957806395d89b4114610480578063a9059cbb14610510578063d55ec69714610575578063dd62ed3e1461058c578063f2fde38b14610603578063fa20e77d14610646575b600080fd5b34801561010257600080fd5b5061010b610671565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561014b578082015181840152602081019050610130565b50505050905090810190601f1680156101785780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561019257600080fd5b506101d1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506106aa565b604051808215151515815260200191505060405180910390f35b3480156101f757600080fd5b50610200610802565b6040518082815260200191505060405180910390f35b34801561022257600080fd5b5061022b610819565b6040518082815260200191505060405180910390f35b34801561024d57600080fd5b506102ac600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610828565b604051808215151515815260200191505060405180910390f35b3480156102d257600080fd5b50610307600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506109ee565b6040518082815260200191505060405180910390f35b34801561032957600080fd5b50610332610a06565b604051808260ff1660ff16815260200191505060405180910390f35b34801561035a57600080fd5b5061037960048036038101908080359060200190929190505050610a0b565b005b34801561038757600080fd5b506103bc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b6c565b6040518082815260200191505060405180910390f35b3480156103de57600080fd5b50610413600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bb5565b6040518082815260200191505060405180910390f35b34801561043557600080fd5b5061043e610bfe565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561048c57600080fd5b50610495610c23565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104d55780820151818401526020810190506104ba565b50505050905090810190601f1680156105025780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561051c57600080fd5b5061055b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c5c565b604051808215151515815260200191505060405180910390f35b34801561058157600080fd5b5061058a610c87565b005b34801561059857600080fd5b506105ed600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061101a565b6040518082815260200191505060405180910390f35b34801561060f57600080fd5b50610644600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110a1565b005b34801561065257600080fd5b5061065b61117b565b6040518082815260200191505060405180910390f35b6040805190810160405280600981526020017f426c6f636b6f6e6978000000000000000000000000000000000000000000000081525081565b60006106b583611181565b15156106c057600080fd5b81601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015156107f75781601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190506107fc565b600090505b92915050565b60006012546a085914ef4523c8d84f000003905090565b6a085914ef4523c8d84f000081565b600061083384611181565b151561083e57600080fd5b601460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156108c957600080fd5b61095882601460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111e490919063ffffffff16565b601460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506109e38484846111fd565b600190509392505050565b60136020528060005260406000206000915090505481565b601281565b80601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610a5957600080fd5b610aab81601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111e490919063ffffffff16565b601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550806012600082825401925050819055507fe12923b90d8a6ca7dc57994322d2afba0be75f98e97e2b892fd34c0d7c6229693382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a150565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000601360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f424454000000000000000000000000000000000000000000000000000000000081525081565b6000610c6733611181565b1515610c7257600080fd5b610c7d3384846111fd565b6001905092915050565b6000600f544211151515610c9a57600080fd5b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610d5757600080fd5b505af1158015610d6b573d6000803e3d6000fd5b505050506040513d6020811015610d8157600080fd5b81019080805190602001909291905050509050600081111515610da357600080fd5b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015610ebe57600080fd5b505af1158015610ed2573d6000803e3d6000fd5b505050506040513d6020811015610ee857600080fd5b81019080805190602001909291905050505080601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a37f5887ab9161c3be2fe962b73e068a9f29082efb6daf2bfcbd3f064bc34d1ef1b73382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a150565b6000601460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110fc57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561113857600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60125481565b600080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111156111d95780421191506111de565b600191505b50919050565b60008282111515156111f257fe5b818303905092915050565b60008273ffffffffffffffffffffffffffffffffffffffff161415151561122357600080fd5b80601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561127157600080fd5b601360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054011115156112ff57600080fd5b61135181601360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111e490919063ffffffff16565b601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506113e681601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461149390919063ffffffff16565b601360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b60008082840190508381101580156114ab5750828110155b15156114b357fe5b80915050929150505600a165627a7a723058204230356494fdf773b05559f73591d400f2b89a06b4819e12295a7d7ba35456b50029"
}