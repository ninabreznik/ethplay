{
  "address": "0xd63a77fe246c4a0095796b13c33c15e55fea1f6c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "KYC",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-28\n*/\n\npragma solidity ^0.4.24;\n\n// AddrSet is an address set based on http://solidity.readthedocs.io/en/develop/contracts.html#libraries\nlibrary AddrSet {\n    // We define a new struct datatype that will be used to\n    // hold its data in the calling contract.\n    struct Data { mapping(address => bool) flags; }\n\n    // Note that the first parameter is of type \"storage\n    // reference\" and thus only its storage address and not\n    // its contents is passed as part of the call.  This is a\n    // special feature of library functions.  It is idiomatic\n    // to call the first parameter `self`, if the function can\n    // be seen as a method of that object.\n    function insert(Data storage self, address value) internal returns (bool) {\n        if (self.flags[value]) {\n            return false; // already there\n        }\n        self.flags[value] = true;\n        return true;\n    }\n\n    function remove(Data storage self, address value) internal returns (bool) {\n        if (!self.flags[value]) {\n            return false; // not there\n        }\n        self.flags[value] = false;\n        return true;\n    }\n\n    function contains(Data storage self, address value) internal view returns (bool) {\n        return self.flags[value];\n    }\n}\n\ncontract Owned {\n    \n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        owner = newOwner;\n    }\n}\n\n// Copyright 2017, 2018 Tensigma Ltd. All rights reserved.\n// Use of this source code is governed by Microsoft Reference Source\n// License (MS-RSL) that can be found in the LICENSE file.\n\n// KYC implements \"Know Your Customer\" storage for identity approvals by KYC providers.\ncontract KYC is Owned {\n\n    // Status corresponding to the state of approvement:\n    // * Unknown when an address has not been processed yet;\n    // * Approved when an address has been approved by contract owner or 3rd party KYC provider;\n    // * Suspended means a temporary or permanent suspension of all operations, any KYC providers may\n    // set this status when account needs to be re-verified due to legal events or blocked because of fraud.\n    enum Status {\n        unknown,\n        approved,\n        suspended\n    }\n\n    // Events emitted by this contract\n    event ProviderAdded(address indexed addr);\n    event ProviderRemoved(address indexed addr);\n    event AddrApproved(address indexed addr, address indexed by);\n    event AddrSuspended(address indexed addr, address indexed by);\n\n    // Contract state\n    AddrSet.Data private kycProviders;\n    mapping(address => Status) public kycStatus;\n\n    // registerProvider adds a new 3rd-party provider that is authorized to perform KYC.\n    function registerProvider(address addr) public onlyOwner {\n        require(AddrSet.insert(kycProviders, addr));\n        emit ProviderAdded(addr);\n    }\n\n    // removeProvider removes a 3rd-party provider that was authorized to perform KYC.\n    function removeProvider(address addr) public onlyOwner {\n        require(AddrSet.remove(kycProviders, addr));\n        emit ProviderRemoved(addr);\n    }\n\n    // isProvider returns true if the given address was authorized to perform KYC.\n    function isProvider(address addr) public view returns (bool) {\n        return addr == owner || AddrSet.contains(kycProviders, addr);\n    }\n\n    // getStatus returns the KYC status for a given address.\n    function getStatus(address addr) public view returns (Status) {\n        return kycStatus[addr];\n    }\n\n    // approveAddr sets the address status to Approved, see Status for details.\n    // Can be invoked by owner or authorized KYC providers only.\n    function approveAddr(address addr) public onlyAuthorized {\n        Status status = kycStatus[addr];\n        require(status != Status.approved);\n        kycStatus[addr] = Status.approved;\n        emit AddrApproved(addr, msg.sender);\n    }\n\n    // suspendAddr sets the address status to Suspended, see Status for details.\n    // Can be invoked by owner or authorized KYC providers only.\n    function suspendAddr(address addr) public onlyAuthorized {\n        Status status = kycStatus[addr];\n        require(status != Status.suspended);\n        kycStatus[addr] = Status.suspended;\n        emit AddrSuspended(addr, msg.sender);\n    }\n\n    // onlyAuthorized modifier restricts write access to contract owner and authorized KYC providers.\n    modifier onlyAuthorized() {\n        require(msg.sender == owner || AddrSet.contains(kycProviders, msg.sender));\n        _;\n    }\n}",
  "bytecode": "6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610bcd806100536000396000f300608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063055273c91461009e5780630e260016146100e157806330ccebb51461012457806346cc599e146101895780636b074a07146101ee5780638a355a57146102495780638da5cb5b1461028c578063996a6f82146102e3578063f2fde38b14610326575b600080fd5b3480156100aa57600080fd5b506100df600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610369565b005b3480156100ed57600080fd5b50610122600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061050c565b005b34801561013057600080fd5b50610165600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506105c3565b6040518082600281111561017557fe5b60ff16815260200191505060405180910390f35b34801561019557600080fd5b506101ca600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610619565b604051808260028111156101da57fe5b60ff16815260200191505060405180910390f35b3480156101fa57600080fd5b5061022f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610639565b604051808215151515815260200191505060405180910390f35b34801561025557600080fd5b5061028a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506106a4565b005b34801561029857600080fd5b506102a161075b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102ef57600080fd5b50610324600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610780565b005b34801561033257600080fd5b50610367600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610921565b005b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806103cd57506103cc6001336109bf565b5b15156103d857600080fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690506001600281111561043457fe5b81600281111561044057fe5b1415151561044d57600080fd5b6001600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360028111156104a957fe5b02179055503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fa3673b71ec0beba775defcf8c7ad027536fdbac996023d594b5efe0c4181acd060405160405180910390a35050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561056757600080fd5b610572600182610a18565b151561057d57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff167fae9c2c6481964847714ce58f65a7f6dcc41d0d8394449bacdf161b5920c4744a60405160405180910390a250565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60026020528060005260406000206000915054906101000a900460ff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16148061069d575061069c6001836109bf565b5b9050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156106ff57600080fd5b61070a600182610adc565b151561071557600080fd5b8073ffffffffffffffffffffffffffffffffffffffff167f1589f8555933761a3cff8aa925061be3b46e2dd43f621322ab611d300f62b1d960405160405180910390a250565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806107e457506107e36001336109bf565b5b15156107ef57600080fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905060028081111561084a57fe5b81600281111561085657fe5b1415151561086357600080fd5b60028060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360028111156108be57fe5b02179055503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc17dc8dc1039ea489e8aa5d0bd8bfc32c1afb87b98959710df9646cd80c331cb60405160405180910390a35050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561097c57600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610a775760009050610ad6565b60018360000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600190505b92915050565b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610b3c5760009050610b9b565b60008360000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600190505b929150505600a165627a7a7230582066807ec6504b12e37244e13a941342eb1485bdb7256a7d8b2f89bb3dc16c5ff60029"
}