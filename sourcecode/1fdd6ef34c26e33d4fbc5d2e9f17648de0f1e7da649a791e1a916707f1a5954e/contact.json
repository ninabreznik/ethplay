{
  "address": "0x6be1d18c8ab11f17c7cbadd99fd13c3b4fd2ab54",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AggregatedTokenSwap",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-28\n*/\n\npragma solidity ^0.5.0;\n\ninterface IGST2 {\n\n    function freeUpTo(uint256 value) external returns (uint256 freed);\n\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\n\n    function balanceOf(address who) external view returns (uint256);\n}\n\n\n\nlibrary ExternalCall {\n    // Source: https://github.com/gnosis/MultiSigWallet/blob/master/contracts/MultiSigWallet.sol\n    // call has been separated into its own function in order to take advantage\n    // of the Solidity's code generator to produce a loop that copies tx.data into memory.\n    function externalCall(address destination, uint value, bytes memory data, uint dataOffset, uint dataLength) internal returns(bool result) {\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            let x := mload(0x40)   // \"Allocate\" memory for output (0x40 is where \"free memory\" pointer is stored by convention)\n            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\n            result := call(\n                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting\n                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\n                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\n                destination,\n                value,\n                add(d, dataOffset),\n                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem\n                x,\n                0                  // Output is ignored, therefore the output size is zero\n            )\n        }\n    }\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n    /**\n     * Returns whether the target address is a contract\n     * @dev This function will return false if invoked during the constructor of a contract,\n     * as the code is not actually created until after the constructor finishes.\n     * @param account address of the account to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     * @notice Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must equal true).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n\n        require(address(token).isContract());\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success);\n\n        if (returndata.length > 0) { // Return data is optional\n            require(abi.decode(returndata, (bool)));\n        }\n    }\n}\n\n\n\ncontract TokenSpender is Ownable {\n\n    using SafeERC20 for IERC20;\n\n    function claimTokens(IERC20 token, address who, address dest, uint256 amount) external onlyOwner {\n        token.safeTransferFrom(who, dest, amount);\n    }\n\n}\n\n\n\n\n\ncontract AggregatedTokenSwap {\n\n    using SafeERC20 for IERC20;\n    using SafeMath for uint;\n    using ExternalCall for address;\n\n    address constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    TokenSpender public spender;\n    IGST2 gasToken;\n    address payable owner;\n    uint fee; // 10000 => 100%, 1 => 0.01%\n\n    event OneInchFeePaid(\n        IERC20 indexed toToken,\n        address indexed referrer,\n        uint256 fee\n    );\n\n    modifier onlyOwner {\n        require(\n            msg.sender == owner,\n            \"Only owner can call this function.\"\n        );\n        _;\n    }\n\n    constructor(\n        address payable _owner,\n        IGST2 _gasToken,\n        uint _fee\n    )\n    public\n    {\n        spender = new TokenSpender();\n        owner = _owner;\n        gasToken = _gasToken;\n        fee = _fee;\n    }\n\n    function setFee(uint _fee) public onlyOwner {\n\n        fee = _fee;\n    }\n\n    function aggregate(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint tokensAmount,\n        address[] memory callAddresses,\n        bytes memory callDataConcat,\n        uint[] memory starts,\n        uint[] memory values,\n        uint mintGasPrice,\n        uint minTokensAmount,\n        address payable referrer\n    )\n    public\n    payable\n    returns (uint returnAmount)\n    {\n        returnAmount = gasleft();\n        uint gasTokenBalance = gasToken.balanceOf(address(this));\n\n        require(callAddresses.length + 1 == starts.length);\n\n        if (address(fromToken) != ETH_ADDRESS) {\n\n            spender.claimTokens(fromToken, msg.sender, address(this), tokensAmount);\n        }\n\n        for (uint i = 0; i < starts.length - 1; i++) {\n\n            if (starts[i + 1] - starts[i] > 0) {\n\n                if (\n                    address(fromToken) != ETH_ADDRESS &&\n                    fromToken.allowance(address(this), callAddresses[i]) == 0\n                ) {\n\n                    fromToken.safeApprove(callAddresses[i], uint256(- 1));\n                }\n\n                require(\n                    callDataConcat[starts[i] + 0] != spender.claimTokens.selector[0] ||\n                    callDataConcat[starts[i] + 1] != spender.claimTokens.selector[1] ||\n                    callDataConcat[starts[i] + 2] != spender.claimTokens.selector[2] ||\n                    callDataConcat[starts[i] + 3] != spender.claimTokens.selector[3]\n                );\n                require(callAddresses[i].externalCall(values[i], callDataConcat, starts[i], starts[i + 1] - starts[i]));\n            }\n        }\n\n        if (address(toToken) == ETH_ADDRESS) {\n            require(address(this).balance >= minTokensAmount);\n        } else {\n            require(toToken.balanceOf(address(this)) >= minTokensAmount);\n        }\n\n        //\n\n        require(gasTokenBalance == gasToken.balanceOf(address(this)));\n        if (mintGasPrice > 0) {\n            audoRefundGas(returnAmount, mintGasPrice);\n        }\n\n        //\n\n        returnAmount = _balanceOf(toToken, address(this)) * fee / 10000;\n        if (referrer != address(0)) {\n            returnAmount /= 2;\n            if (!_transfer(toToken, referrer, returnAmount, true)) {\n                returnAmount *= 2;\n                emit OneInchFeePaid(toToken, address(0), returnAmount);\n            } else {\n                emit OneInchFeePaid(toToken, referrer, returnAmount / 2);\n            }\n        }\n\n        _transfer(toToken, owner, returnAmount, false);\n\n        returnAmount = _balanceOf(toToken, address(this));\n        _transfer(toToken, msg.sender, returnAmount, false);\n    }\n\n    function _balanceOf(IERC20 token, address who) internal view returns(uint256) {\n        if (address(token) == ETH_ADDRESS || token == IERC20(0)) {\n            return who.balance;\n        } else {\n            return token.balanceOf(who);\n        }\n    }\n\n    function _transfer(IERC20 token, address payable to, uint256 amount, bool allowFail) internal returns(bool) {\n        if (address(token) == ETH_ADDRESS || token == IERC20(0)) {\n            if (allowFail) {\n                return to.send(amount);\n            } else {\n                to.transfer(amount);\n                return true;\n            }\n        } else {\n            token.safeTransfer(to, amount);\n            return true;\n        }\n    }\n\n    function audoRefundGas(\n        uint startGas,\n        uint mintGasPrice\n    )\n    private\n    returns (uint freed)\n    {\n        uint MINT_BASE = 32254;\n        uint MINT_TOKEN = 36543;\n        uint FREE_BASE = 14154;\n        uint FREE_TOKEN = 6870;\n        uint REIMBURSE = 24000;\n\n        uint tokensAmount = ((startGas - gasleft()) + FREE_BASE) / (2 * REIMBURSE - FREE_TOKEN);\n        uint maxReimburse = tokensAmount * REIMBURSE;\n\n        uint mintCost = MINT_BASE + (tokensAmount * MINT_TOKEN);\n        uint freeCost = FREE_BASE + (tokensAmount * FREE_TOKEN);\n\n        uint efficiency = (maxReimburse * 100 * tx.gasprice) / (mintCost * mintGasPrice + freeCost * tx.gasprice);\n\n        if (efficiency > 100) {\n\n            return refundGas(\n                tokensAmount\n            );\n        } else {\n\n            return 0;\n        }\n    }\n\n    function refundGas(\n        uint tokensAmount\n    )\n    private\n    returns (uint freed)\n    {\n\n        if (tokensAmount > 0) {\n\n            uint safeNumTokens = 0;\n            uint gas = gasleft();\n\n            if (gas >= 27710) {\n                safeNumTokens = (gas - 27710) / (1148 + 5722 + 150);\n            }\n\n            if (tokensAmount > safeNumTokens) {\n                tokensAmount = safeNumTokens;\n            }\n\n            uint gasTokenBalance = IERC20(address(gasToken)).balanceOf(address(this));\n\n            if (tokensAmount > 0 && gasTokenBalance >= tokensAmount) {\n\n                return gasToken.freeUpTo(tokensAmount);\n            } else {\n\n                return 0;\n            }\n        } else {\n\n            return 0;\n        }\n    }\n\n    function() external payable {\n\n        if (msg.value == 0 && msg.sender == owner) {\n\n            IERC20 _gasToken = IERC20(address(gasToken));\n\n            owner.transfer(address(this).balance);\n            _gasToken.safeTransfer(owner, _gasToken.balanceOf(address(this)));\n        }\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b506040516060806116a18339810180604052606081101561003057600080fd5b508051602082015160409283015192519192909161004d906100b1565b604051809103906000f080158015610069573d6000803e3d6000fd5b50600080546001600160a01b03199081166001600160a01b039384161790915560028054821695831695909517909455600180549094169216919091179091556003556100be565b61041c8061128583390190565b6111b8806100cd6000396000f3fe6080604052600436106100345760003560e01c8063261fc7ef1461013157806369fe0e2d146103a2578063e8edc816146103cc575b3415801561004c57506002546001600160a01b031633145b1561012f576001546002546040516001600160a01b03928316929190911690303180156108fc02916000818181858888f19350505050158015610093573d6000803e3d6000fd5b5060025460408051600160e01b6370a08231028152306004820152905161012d926001600160a01b0390811692908516916370a0823191602480820192602092909190829003018186803b1580156100ea57600080fd5b505afa1580156100fe573d6000803e3d6000fd5b505050506040513d602081101561011457600080fd5b50516001600160a01b038416919063ffffffff6103fd16565b505b005b610390600480360361014081101561014857600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b81111561018257600080fd5b82018360208201111561019457600080fd5b803590602001918460208302840111600160201b831117156101b557600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561020457600080fd5b82018360208201111561021657600080fd5b803590602001918460018302840111600160201b8311171561023757600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561028957600080fd5b82018360208201111561029b57600080fd5b803590602001918460208302840111600160201b831117156102bc57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561030b57600080fd5b82018360208201111561031d57600080fd5b803590602001918460208302840111600160201b8311171561033e57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955050823593505050602081013590604001356001600160a01b0316610457565b60408051918252519081900360200190f35b3480156103ae57600080fd5b5061012f600480360360208110156103c557600080fd5b5035610b75565b3480156103d857600080fd5b506103e1610bc6565b604080516001600160a01b039092168252519081900360200190f35b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0316600160e01b63a9059cbb02179052610452908490610bd5565b505050565b60005a60015460408051600160e01b6370a0823102815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156104ae57600080fd5b505afa1580156104c2573d6000803e3d6000fd5b505050506040513d60208110156104d857600080fd5b505187518a519192506001909101146104f057600080fd5b6001600160a01b038c1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146105d5576000809054906101000a90046001600160a01b03166001600160a01b0316630a5ea4668d33308e6040518563ffffffff1660e01b815260040180856001600160a01b03166001600160a01b03168152602001846001600160a01b03166001600160a01b03168152602001836001600160a01b03166001600160a01b03168152602001828152602001945050505050600060405180830381600087803b1580156105bc57600080fd5b505af11580156105d0573d6000803e3d6000fd5b505050505b60005b60018851038110156108f25760008882815181106105f257fe5b602002602001015189836001018151811061060957fe5b60200260200101510311156108ea576001600160a01b038d1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee148015906106f157508c6001600160a01b031663dd62ed3e308c848151811061065c57fe5b60200260200101516040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b03168152602001826001600160a01b03166001600160a01b031681526020019250505060206040518083038186803b1580156106c357600080fd5b505afa1580156106d7573d6000803e3d6000fd5b505050506040513d60208110156106ed57600080fd5b5051155b15610729576107298a828151811061070557fe5b60200260200101516000198f6001600160a01b0316610cd19092919063ffffffff16565b8751600160f91b600502908a908a908490811061074257fe5b60200260200101516000018151811061075757fe5b602001015160f81c60f81b6001600160f81b0319161415806107ba57508751600160f91b602f02908a908a908490811061078d57fe5b6020026020010151600101815181106107a257fe5b602001015160f81c60f81b6001600160f81b03191614155b8061080657508751600160fa1b602902908a908a90849081106107d957fe5b6020026020010151600201815181106107ee57fe5b602001015160f81c60f81b6001600160f81b03191614155b8061085257508751600160f91b603302908a908a908490811061082557fe5b60200260200101516003018151811061083a57fe5b602001015160f81c60f81b6001600160f81b03191614155b61085b57600080fd5b6108e187828151811061086a57fe5b60200260200101518a8a848151811061087f57fe5b60200260200101518b858151811061089357fe5b60200260200101518c86600101815181106108aa57fe5b6020026020010151038e86815181106108bf57fe5b60200260200101516001600160a01b0316610db890949392919063ffffffff16565b6108ea57600080fd5b6001016105d8565b506001600160a01b038b1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee141561092b57303184111561092657600080fd5b6109ae565b60408051600160e01b6370a08231028152306004820152905185916001600160a01b038e16916370a0823191602480820192602092909190829003018186803b15801561097757600080fd5b505afa15801561098b573d6000803e3d6000fd5b505050506040513d60208110156109a157600080fd5b505110156109ae57600080fd5b60015460408051600160e01b6370a0823102815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156109fc57600080fd5b505afa158015610a10573d6000803e3d6000fd5b505050506040513d6020811015610a2657600080fd5b50518114610a3357600080fd5b8415610a4557610a438286610ddc565b505b612710600354610a558d30610e60565b0281610a5d57fe5b0491506001600160a01b03831615610b3157600282049150610a828b84846001610f33565b610add5760028202915060006001600160a01b03168b6001600160a01b03167f713f62c1c63c3bb59b28b58e8486c5992361993a21817d75472fe9f2abad24cf846040518082815260200191505060405180910390a3610b31565b826001600160a01b03168b6001600160a01b03167f713f62c1c63c3bb59b28b58e8486c5992361993a21817d75472fe9f2abad24cf60028581610b1c57fe5b60408051929091048252519081900360200190a35b600254610b4b908c906001600160a01b0316846000610f33565b50610b568b30610e60565b9150610b658b33846000610f33565b50509a9950505050505050505050565b6002546001600160a01b03163314610bc157604051600160e51b62461bcd02815260040180806020018281038252602281526020018061116b6022913960400191505060405180910390fd5b600355565b6000546001600160a01b031681565b610be7826001600160a01b0316611004565b610bf057600080fd5b60006060836001600160a01b0316836040518082805190602001908083835b60208310610c2e5780518252601f199092019160209182019101610c0f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610c90576040519150601f19603f3d011682016040523d82523d6000602084013e610c95565b606091505b509150915081610ca457600080fd5b805115610ccb57808060200190516020811015610cc057600080fd5b5051610ccb57600080fd5b50505050565b801580610d5a575060408051600160e11b636eb1769f0281523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015610d2c57600080fd5b505afa158015610d40573d6000803e3d6000fd5b505050506040513d6020811015610d5657600080fd5b5051155b610d6357600080fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0316600160e01b63095ea7b302179052610452908490610bd5565b600060405160208501600082858784018a8c6187965a03f198975050505050505050565b6000617dfe618ebf61374a611ad6615dc08561a0aa845a8b030181610dfd57fe5b0490508181028582028701848302860160003a8083028d8502019060649086020281610e2557fe5b0490506064811115610e4b57610e3a8561100e565b9a5050505050505050505050610e5a565b60009a50505050505050505050505b92915050565b60006001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1480610e9457506001600160a01b038316155b15610eaa57506001600160a01b03811631610e5a565b826001600160a01b03166370a08231836040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015610f0057600080fd5b505afa158015610f14573d6000803e3d6000fd5b505050506040513d6020811015610f2a57600080fd5b50519050610e5a565b60006001600160a01b03851673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1480610f6757506001600160a01b038516155b15610fde578115610f9e576040516001600160a01b0385169084156108fc029085906000818181858888f193505050509050610ffc565b6040516001600160a01b0385169084156108fc029085906000818181858888f19350505050158015610fd4573d6000803e3d6000fd5b5060019050610ffc565b610ff86001600160a01b038616858563ffffffff6103fd16565b5060015b949350505050565b803b15155b919050565b60008115611162576000805a9050616c3e811061103257611b6c616c3d1982010491505b8184111561103e578193505b60015460408051600160e01b6370a0823102815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561108c57600080fd5b505afa1580156110a0573d6000803e3d6000fd5b505050506040513d60208110156110b657600080fd5b5051905084158015906110c95750848110155b156111565760015460408051600160e11b6331b35c9b0281526004810188905290516001600160a01b0390921691636366b936916024808201926020929091908290030181600087803b15801561111f57600080fd5b505af1158015611133573d6000803e3d6000fd5b505050506040513d602081101561114957600080fd5b5051935061100992505050565b60009350505050611009565b50600061100956fe4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f6e2ea165627a7a7230582055907b5351114de76e997e15a1ed850b4477651d435fc7aa81f638e2b222326c002960806040819052600080546001600160a01b03191633178082556001600160a01b0316917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36103c5806100576000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630a5ea4661461005c578063715018a61461009a5780638da5cb5b146100a25780638f32d59b146100c6578063f2fde38b146100e2575b600080fd5b6100986004803603608081101561007257600080fd5b506001600160a01b03813581169160208101358216916040820135169060600135610108565b005b61009861013a565b6100aa610195565b604080516001600160a01b039092168252519081900360200190f35b6100ce6101a4565b604080519115158252519081900360200190f35b610098600480360360208110156100f857600080fd5b50356001600160a01b03166101b5565b6101106101a4565b61011957600080fd5b6101346001600160a01b03851684848463ffffffff6101d216565b50505050565b6101426101a4565b61014b57600080fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b6101bd6101a4565b6101c657600080fd5b6101cf8161022f565b50565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b0316600160e01b6323b872dd0217905261013490859061029d565b6001600160a01b03811661024257600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6102af826001600160a01b0316610393565b6102b857600080fd5b60006060836001600160a01b0316836040518082805190602001908083835b602083106102f65780518252601f1990920191602091820191016102d7565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610358576040519150601f19603f3d011682016040523d82523d6000602084013e61035d565b606091505b50915091508161036c57600080fd5b8051156101345780806020019051602081101561038857600080fd5b505161013457600080fd5b3b15159056fea165627a7a72305820527e51161d7752928ef3397f1ca34e4c247f84785325db9edb769475e7251f6a00290000000000000000000000004d37f28d2db99e8d35a6c725a5f1749a085850a30000000000000000000000000000000000b3f879cb30fe243b4dfee438691c040000000000000000000000000000000000000000000000000000000000000002",
  "constructorArguments": "0000000000000000000000004d37f28d2db99e8d35a6c725a5f1749a085850a30000000000000000000000000000000000b3f879cb30fe243b4dfee438691c040000000000000000000000000000000000000000000000000000000000000002"
}