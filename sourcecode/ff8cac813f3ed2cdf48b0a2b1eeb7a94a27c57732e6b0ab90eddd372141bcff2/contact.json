{
  "address": "0x7feca982557fe5519eb331d3af5b538b6c166fa9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Yihaa Token",
  "contractName": "Yiha",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-16\n*/\n\npragma solidity ^0.4.18;\n\n\n// ----------------------------------------------------------------------------\n\n// 'Yiha' contract\n\n// Mineable ERC20 Token using Proof Of Work\n\n//\n\n// Symbol      : YIHA\n\n// Name        : Yiha\n\n// Total supply: 250,000,000.00\n\n// Decimals    : 8\n\n//\n\n\n// ----------------------------------------------------------------------------\n\n\n\n// ----------------------------------------------------------------------------\n\n// Safe maths\n\n// ----------------------------------------------------------------------------\n\nlibrary SafeMath {\n\n    function add(uint a, uint b) internal pure returns (uint c) {\n\n        c = a + b;\n\n        require(c >= a);\n\n    }\n\n    function sub(uint a, uint b) internal pure returns (uint c) {\n\n        require(b <= a);\n\n        c = a - b;\n\n    }\n\n    function mul(uint a, uint b) internal pure returns (uint c) {\n\n        c = a * b;\n\n        require(a == 0 || c / a == b);\n\n    }\n\n    function div(uint a, uint b) internal pure returns (uint c) {\n\n        require(b > 0);\n\n        c = a / b;\n\n    }\n\n}\n\n\n\nlibrary ExtendedMath {\n\n\n    //return the smaller of the two inputs (a or b)\n    function limitLessThan(uint a, uint b) internal pure returns (uint c) {\n\n        if(a > b) return b;\n\n        return a;\n\n    }\n}\n\n// ----------------------------------------------------------------------------\n\n// ERC Token Standard #20 Interface\n\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n\n// ----------------------------------------------------------------------------\n\ncontract ERC20Interface {\n\n    function totalSupply() public constant returns (uint);\n\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n\n    function transfer(address to, uint tokens) public returns (bool success);\n\n    function approve(address spender, uint tokens) public returns (bool success);\n\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n\n}\n\n\n\n// ----------------------------------------------------------------------------\n\n// Contract function to receive approval and execute function in one call\n\n//\n\n// Borrowed from MiniMeToken\n\n// ----------------------------------------------------------------------------\n\ncontract ApproveAndCallFallBack {\n\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n\n}\n\n\n\n// ----------------------------------------------------------------------------\n\n// Owned contract\n\n// ----------------------------------------------------------------------------\n\ncontract Owned {\n\n    address public owner;\n\n    address public newOwner;\n\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n\n    function Owned() public {\n\n        owner = msg.sender;\n\n    }\n\n\n    modifier onlyOwner {\n\n        require(msg.sender == owner);\n\n        _;\n\n    }\n\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n\n        newOwner = _newOwner;\n\n    }\n\n    function acceptOwnership() public {\n\n        require(msg.sender == newOwner);\n\n        OwnershipTransferred(owner, newOwner);\n\n        owner = newOwner;\n\n        newOwner = address(0);\n\n    }\n\n}\n\n\n\n// ----------------------------------------------------------------------------\n\n// ERC20 Token, with the addition of symbol, name and decimals and an\n\n// initial fixed supply\n\n// ----------------------------------------------------------------------------\n\ncontract Yiha is ERC20Interface, Owned {\n\n    using SafeMath for uint;\n    using ExtendedMath for uint;\n\n\n    string public symbol;\n\n    string public  name;\n\n    uint8 public decimals;\n\n    uint public _totalSupply;\n\n\n\n     uint public latestDifficultyPeriodStarted;\n\n\n\n    uint public epochCount;//number of 'blocks' mined\n\n\n    uint public _BLOCKS_PER_READJUSTMENT = 1024;\n\n\n    //a little number\n    uint public  _MINIMUM_TARGET = 2**16;\n\n\n      //a big number is easier ; just find a solution that is smaller\n    //uint public  _MAXIMUM_TARGET = 2**224;  bitcoin uses 224\n    uint public  _MAXIMUM_TARGET = 2**234;\n    uint public _START_TARGET = 2**227;\n\n    uint public miningTarget;\n\n    bytes32 public challengeNumber;   //generate a new one when a new reward is minted\n\n\n\n    uint public rewardEra;\n    uint public maxSupplyForEra;\n\n\n    address public lastRewardTo;\n    uint public lastRewardAmount;\n    uint public lastRewardEthBlockNumber;\n\n    bool locked = false;\n\n    mapping(bytes32 => bytes32) solutionForChallenge;\n\n    uint public tokensMinted;\n\n    mapping(address => uint) balances;\n\n\n    mapping(address => mapping(address => uint)) allowed;\n\n\n    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\n\n    // ------------------------------------------------------------------------\n\n    // Constructor\n\n    // ------------------------------------------------------------------------\n\n    function Yiha() public onlyOwner{\n\n\n\n        symbol = \"YIHA\";\n\n        name = \"Yiha\";\n\n        decimals = 8;\n\n        _totalSupply = 250000000 * 10**uint(decimals);\n\n        if(locked) revert();\n        locked = true;\n\n        tokensMinted = 0;\n\n        rewardEra = 0;\n        maxSupplyForEra = _totalSupply.div(2);\n\n        miningTarget = _START_TARGET;\n\n        latestDifficultyPeriodStarted = block.number;\n\n        _startNewMiningEpoch();\n\n        balances[owner] = 50000000 * 10**uint(decimals);\n        Transfer(address(0), owner, 50000000 * 10**uint(decimals));\n\n    }\n\n\n\n\n        function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success) {\n\n\n            //the PoW must contain work that includes a recent ethereum block hash (challenge number) and the msg.sender's address to prevent MITM attacks\n            bytes32 digest =  keccak256(challengeNumber, msg.sender, nonce );\n\n            //the challenge digest must match the expected\n            if (digest != challenge_digest) revert();\n\n            //the digest must be smaller than the target\n            if(uint256(digest) > miningTarget) revert();\n\n\n            //only allow one reward for each challenge\n             bytes32 solution = solutionForChallenge[challengeNumber];\n             solutionForChallenge[challengeNumber] = digest;\n             if(solution != 0x0) revert();  //prevent the same answer from awarding twice\n\n\n            uint reward_amount = getMiningReward();\n\n            balances[msg.sender] = balances[msg.sender].add(reward_amount);\n\n            tokensMinted = tokensMinted.add(reward_amount);\n\n\n            //Cannot mint more tokens than there are\n            assert(tokensMinted <= maxSupplyForEra);\n\n            //set readonly diagnostics data\n            lastRewardTo = msg.sender;\n            lastRewardAmount = reward_amount;\n            lastRewardEthBlockNumber = block.number;\n\n\n             _startNewMiningEpoch();\n\n              Mint(msg.sender, reward_amount, epochCount, challengeNumber );\n\n           return true;\n\n        }\n\n\n    //a new 'block' to be mined\n    function _startNewMiningEpoch() internal {\n\n      //if max supply for the era will be exceeded next reward round then enter the new era before that happens\n\n      //40 is the final reward era, almost all tokens minted\n      //once the final era is reached, more tokens will not be given out because the assert function\n      if( tokensMinted.add(getMiningReward()) > maxSupplyForEra && rewardEra < 39)\n      {\n        rewardEra = rewardEra + 1;\n      }\n\n      //set the next minted supply at which the era will change\n      // total supply is 2100000000000000  because of 8 decimal places\n      maxSupplyForEra = _totalSupply - _totalSupply.div( 2**(rewardEra + 1));\n\n      epochCount = epochCount.add(1);\n\n      //every so often, readjust difficulty. Dont readjust when deploying\n      if(epochCount % _BLOCKS_PER_READJUSTMENT == 0)\n      {\n        _reAdjustDifficulty();\n      }\n\n\n      //make the latest ethereum block hash a part of the next challenge for PoW to prevent pre-mining future blocks\n      //do this last since this is a protection mechanism in the mint() function\n      challengeNumber = block.blockhash(block.number - 1);\n\n\n\n\n\n\n    }\n\n\n\n\n    //https://en.bitcoin.it/wiki/Difficulty#What_is_the_formula_for_difficulty.3F\n    //as of 2017 the bitcoin difficulty was up to 17 zeroes, it was only 8 in the early days\n\n    //readjust the target by 5 percent\n    function _reAdjustDifficulty() internal {\n\n\n        uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;\n        //assume 360 ethereum blocks per hour\n\n        //we want miners to spend 10 minutes to mine each 'block', about 60 ethereum blocks = one yiha epoch\n        uint epochsMined = _BLOCKS_PER_READJUSTMENT; //256\n\n        uint targetEthBlocksPerDiffPeriod = epochsMined * 60; //should be 60 times slower than ethereum\n\n        //if there were less eth blocks passed in time than expected\n        if( ethBlocksSinceLastDifficultyPeriod < targetEthBlocksPerDiffPeriod )\n        {\n          uint excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(100)).div( ethBlocksSinceLastDifficultyPeriod );\n\n          uint excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(1000);\n          // If there were 5% more blocks mined than expected then this is 5.  If there were 100% more blocks mined than expected then this is 100.\n\n          //make it harder\n          miningTarget = miningTarget.sub(miningTarget.div(2000).mul(excess_block_pct_extra));   //by up to 50 %\n        }else{\n          uint shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(100)).div( targetEthBlocksPerDiffPeriod );\n\n          uint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000); //always between 0 and 1000\n\n          //make it easier\n          miningTarget = miningTarget.add(miningTarget.div(2000).mul(shortage_block_pct_extra));   //by up to 50 %\n        }\n\n\n\n        latestDifficultyPeriodStarted = block.number;\n\n        if(miningTarget < _MINIMUM_TARGET) //very difficult\n        {\n          miningTarget = _MINIMUM_TARGET;\n        }\n\n        if(miningTarget > _MAXIMUM_TARGET) //very easy\n        {\n          miningTarget = _MAXIMUM_TARGET;\n        }\n    }\n\n\n    //this is a recent ethereum block hash, used to prevent pre-mining future blocks\n    function getChallengeNumber() public constant returns (bytes32) {\n        return challengeNumber;\n    }\n\n    //the number of zeroes the digest of the PoW solution requires.  Auto adjusts\n     function getMiningDifficulty() public constant returns (uint) {\n        return _MAXIMUM_TARGET.div(miningTarget);\n    }\n\n    function getMiningTarget() public constant returns (uint) {\n       return miningTarget;\n   }\n\n\n\n    //21m coins total\n    //reward begins at 50 and is cut in half every reward era (as tokens are mined)\n    function getMiningReward() public constant returns (uint) {\n        //once we get half way thru the coins, only get 25 per block\n\n         //every reward era, the reward amount halves.\n\n         return (50 * 10**uint(decimals) ).div( 2**rewardEra ) ;\n\n    }\n\n    //help debug mining software\n    function getMintDigest(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number) public view returns (bytes32 digesttest) {\n\n        bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\n\n        return digest;\n\n      }\n\n        //help debug mining software\n      function checkMintSolution(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number, uint testTarget) public view returns (bool success) {\n\n          bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\n\n          if(uint256(digest) > testTarget) revert();\n\n          return (digest == challenge_digest);\n\n        }\n\n\n\n    // ------------------------------------------------------------------------\n\n    // Total supply\n\n    // ------------------------------------------------------------------------\n\n    function totalSupply() public constant returns (uint) {\n\n        return _totalSupply  - balances[address(0)];\n\n    }\n\n\n\n    // ------------------------------------------------------------------------\n\n    // Get the token balance for account `tokenOwner`\n\n    // ------------------------------------------------------------------------\n\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n\n        return balances[tokenOwner];\n\n    }\n\n\n\n    // ------------------------------------------------------------------------\n\n    // Transfer the balance from token owner's account to `to` account\n\n    // - Owner's account must have sufficient balance to transfer\n\n    // - 0 value transfers are allowed\n\n    // ------------------------------------------------------------------------\n\n    function transfer(address to, uint tokens) public returns (bool success) {\n\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n\n        balances[to] = balances[to].add(tokens);\n\n        Transfer(msg.sender, to, tokens);\n\n        return true;\n\n    }\n\n\n\n    // ------------------------------------------------------------------------\n\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n\n    // from the token owner's account\n\n    //\n\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n\n    // recommends that there are no checks for the approval double-spend attack\n\n    // as this should be implemented in user interfaces\n\n    // ------------------------------------------------------------------------\n\n    function approve(address spender, uint tokens) public returns (bool success) {\n\n        allowed[msg.sender][spender] = tokens;\n\n        Approval(msg.sender, spender, tokens);\n\n        return true;\n\n    }\n\n\n\n    // ------------------------------------------------------------------------\n\n    // Transfer `tokens` from the `from` account to the `to` account\n\n    //\n\n    // The calling account must already have sufficient tokens approve(...)-d\n\n    // for spending from the `from` account and\n\n    // - From account must have sufficient balance to transfer\n\n    // - Spender must have sufficient allowance to transfer\n\n    // - 0 value transfers are allowed\n\n    // ------------------------------------------------------------------------\n\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n\n        balances[from] = balances[from].sub(tokens);\n\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n\n        balances[to] = balances[to].add(tokens);\n\n        Transfer(from, to, tokens);\n\n        return true;\n\n    }\n\n\n\n    // ------------------------------------------------------------------------\n\n    // Returns the amount of tokens approved by the owner that can be\n\n    // transferred to the spender's account\n\n    // ------------------------------------------------------------------------\n\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n\n        return allowed[tokenOwner][spender];\n\n    }\n\n\n\n    // ------------------------------------------------------------------------\n\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n\n    // from the token owner's account. The `spender` contract function\n\n    // `receiveApproval(...)` is then executed\n\n    // ------------------------------------------------------------------------\n\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n\n        allowed[msg.sender][spender] = tokens;\n\n        Approval(msg.sender, spender, tokens);\n\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n\n        return true;\n\n    }\n\n\n\n    // ------------------------------------------------------------------------\n\n    // Don't accept ETH\n\n    // ------------------------------------------------------------------------\n\n    function () public payable {\n\n        revert();\n\n    }\n\n\n\n    // ------------------------------------------------------------------------\n\n    // Owner can transfer out any accidentally sent ERC20 tokens\n\n    // ------------------------------------------------------------------------\n\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n\n    }\n\n}",
  "bytecode": "6080604052610400600855620100006009557d040000000000000000000000000000000000000000000000000000000000600a557c0800000000000000000000000000000000000000000000000000000000600b556000601360006101000a81548160ff0219169083151502179055503480156200007c57600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156200011957600080fd5b6040805190810160405280600481526020017f594948410000000000000000000000000000000000000000000000000000000081525060029080519060200190620001669291906200082f565b506040805190810160405280600481526020017f596968610000000000000000000000000000000000000000000000000000000081525060039080519060200190620001b49291906200082f565b506008600460006101000a81548160ff021916908360ff160217905550600460009054906101000a900460ff1660ff16600a0a630ee6b28002600581905550601360009054906101000a900460ff16156200020e57600080fd5b6001601360006101000a81548160ff02191690831515021790555060006015819055506000600e819055506200025f6002600554620003b66401000000000262001e72179091906401000000009004565b600f81905550600b54600c81905550436006819055506200028e620003dc640100000000026401000000009004565b600460009054906101000a900460ff1660ff16600a0a6302faf08002601660008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600460009054906101000a900460ff1660ff16600a0a6302faf080026040518082815260200191505060405180910390a3620008de565b60008082111515620003c757600080fd5b8183811515620003d357fe5b04905092915050565b600f546200041c620003fc620004e7640100000000026401000000009004565b6015546200052e6401000000000262001e96179091906401000000009004565b1180156200042c57506027600e54105b156200043f576001600e5401600e819055505b6200046c6001600e540160020a600554620003b66401000000000262001e72179091906401000000009004565b60055403600f819055506200049c60016007546200052e6401000000000262001e96179091906401000000009004565b6007819055506000600854600754811515620004b457fe5b061415620004d657620004d56200054b640100000000026401000000009004565b5b6001430340600d8160001916905550565b600062000529600e5460020a600460009054906101000a900460ff1660ff16600a0a603202620003b66401000000000262001e72179091906401000000009004565b905090565b600081830190508281101515156200054557600080fd5b92915050565b6000806000806000806000600654430396506008549550603c86029450848710156200067c57620005b7876200059a606488620007c06401000000000262002114179091906401000000009004565b620003b66401000000000262001e72179091906401000000009004565b9350620006016103e8620005e4606487620007f46401000000000262001f67179091906401000000009004565b620008116401000000000262002145179091906401000000009004565b9250620006706200065084620006336107d0600c54620003b66401000000000262001e72179091906401000000009004565b620007c06401000000000262002114179091906401000000009004565b600c54620007f46401000000000262001f67179091906401000000009004565b600c8190555062000782565b620006c285620006a560648a620007c06401000000000262002114179091906401000000009004565b620003b66401000000000262001e72179091906401000000009004565b91506200070c6103e8620006ef606485620007f46401000000000262001f67179091906401000000009004565b620008116401000000000262002145179091906401000000009004565b90506200077b6200075b826200073e6107d0600c54620003b66401000000000262001e72179091906401000000009004565b620007c06401000000000262002114179091906401000000009004565b600c546200052e6401000000000262001e96179091906401000000009004565b600c819055505b43600681905550600954600c541015620007a057600954600c819055505b600a54600c541115620007b757600a54600c819055505b50505050505050565b600081830290506000831480620007e25750818382811515620007df57fe5b04145b1515620007ee57600080fd5b92915050565b60008282111515156200080657600080fd5b818303905092915050565b600081831115620008255781905062000829565b8290505b92915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200087257805160ff1916838001178555620008a3565b82800160010185558215620008a3579182015b82811115620008a257825182559160200191906001019062000885565b5b509050620008b29190620008b6565b5090565b620008db91905b80821115620008d7576000816000905550600101620008bd565b5090565b90565b61218d80620008ee6000396000f3006080604052600436106101cd576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146101d2578063095ea7b314610262578063163aa00d146102c757806317da485f146102f25780631801fbe51461031d57806318160ddd1461037057806323b872dd1461039b5780632d38bf7a14610420578063313ce5671461044b57806332e997081461047c5780633eaaf86b146104a7578063490203a7146104d25780634ef37628146104fd5780634fa972e1146105305780636de9f32b1461055b5780636fd396d61461058657806370a08231146105dd57806379ba50971461063457806381269a561461064b578063829965cc146106b657806387a2a9d6146106e15780638a769d351461070c5780638ae0368b146107375780638da5cb5b1461076a57806395d89b41146107c157806397566aa014610851578063a9059cbb146108b6578063b5ade81b1461091b578063bafedcaa14610946578063cae9ca5114610971578063cb9ae70714610a1c578063d4ee1d9014610a47578063dc39d06d14610a9e578063dc6e9cf914610b03578063dc9590f014610b2e578063dd62ed3e14610b59578063f2fde38b14610bd0575b600080fd5b3480156101de57600080fd5b506101e7610c13565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561022757808201518184015260208101905061020c565b50505050905090810190601f1680156102545780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561026e57600080fd5b506102ad600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610cb1565b604051808215151515815260200191505060405180910390f35b3480156102d357600080fd5b506102dc610da3565b6040518082815260200191505060405180910390f35b3480156102fe57600080fd5b50610307610da9565b6040518082815260200191505060405180910390f35b34801561032957600080fd5b50610356600480360381019080803590602001909291908035600019169060200190929190505050610dc7565b604051808215151515815260200191505060405180910390f35b34801561037c57600080fd5b50610385611057565b6040518082815260200191505060405180910390f35b3480156103a757600080fd5b50610406600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506110a2565b604051808215151515815260200191505060405180910390f35b34801561042c57600080fd5b5061043561134d565b6040518082815260200191505060405180910390f35b34801561045757600080fd5b50610460611353565b604051808260ff1660ff16815260200191505060405180910390f35b34801561048857600080fd5b50610491611366565b6040518082815260200191505060405180910390f35b3480156104b357600080fd5b506104bc611370565b6040518082815260200191505060405180910390f35b3480156104de57600080fd5b506104e7611376565b6040518082815260200191505060405180910390f35b34801561050957600080fd5b506105126113ad565b60405180826000191660001916815260200191505060405180910390f35b34801561053c57600080fd5b506105456113b7565b6040518082815260200191505060405180910390f35b34801561056757600080fd5b506105706113bd565b6040518082815260200191505060405180910390f35b34801561059257600080fd5b5061059b6113c3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105e957600080fd5b5061061e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113e9565b6040518082815260200191505060405180910390f35b34801561064057600080fd5b50610649611432565b005b34801561065757600080fd5b5061069c6004803603810190808035906020019092919080356000191690602001909291908035600019169060200190929190803590602001909291905050506115d1565b604051808215151515815260200191505060405180910390f35b3480156106c257600080fd5b506106cb611666565b6040518082815260200191505060405180910390f35b3480156106ed57600080fd5b506106f661166c565b6040518082815260200191505060405180910390f35b34801561071857600080fd5b50610721611672565b6040518082815260200191505060405180910390f35b34801561074357600080fd5b5061074c611678565b60405180826000191660001916815260200191505060405180910390f35b34801561077657600080fd5b5061077f61167e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107cd57600080fd5b506107d66116a3565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156108165780820151818401526020810190506107fb565b50505050905090810190601f1680156108435780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561085d57600080fd5b506108986004803603810190808035906020019092919080356000191690602001909291908035600019169060200190929190505050611741565b60405180826000191660001916815260200191505060405180910390f35b3480156108c257600080fd5b50610901600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506117ba565b604051808215151515815260200191505060405180910390f35b34801561092757600080fd5b50610930611955565b6040518082815260200191505060405180910390f35b34801561095257600080fd5b5061095b61195b565b6040518082815260200191505060405180910390f35b34801561097d57600080fd5b50610a02600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611961565b604051808215151515815260200191505060405180910390f35b348015610a2857600080fd5b50610a31611bb0565b6040518082815260200191505060405180910390f35b348015610a5357600080fd5b50610a5c611bb6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610aaa57600080fd5b50610ae9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611bdc565b604051808215151515815260200191505060405180910390f35b348015610b0f57600080fd5b50610b18611d40565b6040518082815260200191505060405180910390f35b348015610b3a57600080fd5b50610b43611d46565b6040518082815260200191505060405180910390f35b348015610b6557600080fd5b50610bba600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d4c565b6040518082815260200191505060405180910390f35b348015610bdc57600080fd5b50610c11600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611dd3565b005b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ca95780601f10610c7e57610100808354040283529160200191610ca9565b820191906000526020600020905b815481529060010190602001808311610c8c57829003601f168201915b505050505081565b600081601760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60125481565b6000610dc2600c54600a54611e7290919063ffffffff16565b905090565b600080600080600d5433876040518084600019166000191681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140182815260200193505050506040518091039020925084600019168360001916141515610e5057600080fd5b600c5483600190041115610e6357600080fd5b60146000600d54600019166000191681526020019081526020016000205491508260146000600d5460001916600019168152602001908152602001600020816000191690555060006001028260001916141515610ebf57600080fd5b610ec7611376565b9050610f1b81601660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e9690919063ffffffff16565b601660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f7381601554611e9690919063ffffffff16565b601581905550600f5460155411151515610f8957fe5b33601060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060118190555043601281905550610fe0611eb2565b3373ffffffffffffffffffffffffffffffffffffffff167fcf6fbb9dcea7d07263ab4f5c3a92f53af33dffc421d9d121e1c74b307e68189d82600754600d54604051808481526020018381526020018260001916600019168152602001935050505060405180910390a26001935050505092915050565b6000601660008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460055403905090565b60006110f682601660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f6790919063ffffffff16565b601660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506111c882601760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f6790919063ffffffff16565b601760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061129a82601660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e9690919063ffffffff16565b601660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600e5481565b600460009054906101000a900460ff1681565b6000600c54905090565b60055481565b60006113a8600e5460020a600460009054906101000a900460ff1660ff16600a0a603202611e7290919063ffffffff16565b905090565b6000600d54905090565b600f5481565b60155481565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000601660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561148e57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000808333876040518084600019166000191681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401828152602001935050505060405180910390209050828160019004111561165057600080fd5b8460001916816000191614915050949350505050565b60075481565b600a5481565b600c5481565b600d5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117395780601f1061170e57610100808354040283529160200191611739565b820191906000526020600020905b81548152906001019060200180831161171c57829003601f168201915b505050505081565b6000808233866040518084600019166000191681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401828152602001935050505060405180910390209050809150509392505050565b600061180e82601660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f6790919063ffffffff16565b601660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506118a382601660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e9690919063ffffffff16565b601660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60085481565b60115481565b600082601760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a38373ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338530866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611b3e578082015181840152602081019050611b23565b50505050905090810190601f168015611b6b5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015611b8d57600080fd5b505af1158015611ba1573d6000803e3d6000fd5b50505050600190509392505050565b60065481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c3957600080fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611cfd57600080fd5b505af1158015611d11573d6000803e3d6000fd5b505050506040513d6020811015611d2757600080fd5b8101908080519060200190929190505050905092915050565b60095481565b600b5481565b6000601760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e2e57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008082111515611e8257600080fd5b8183811515611e8d57fe5b04905092915050565b60008183019050828110151515611eac57600080fd5b92915050565b600f54611ed1611ec0611376565b601554611e9690919063ffffffff16565b118015611ee057506027600e54105b15611ef2576001600e5401600e819055505b611f0f6001600e540160020a600554611e7290919063ffffffff16565b60055403600f81905550611f2f6001600754611e9690919063ffffffff16565b6007819055506000600854600754811515611f4657fe5b061415611f5657611f55611f83565b5b6001430340600d8160001916905550565b6000828211151515611f7857600080fd5b818303905092915050565b6000806000806000806000600654430396506008549550603c860294508487101561204257611fce87611fc060648861211490919063ffffffff16565b611e7290919063ffffffff16565b9350611ff86103e8611fea606487611f6790919063ffffffff16565b61214590919063ffffffff16565b9250612037612026846120186107d0600c54611e7290919063ffffffff16565b61211490919063ffffffff16565b600c54611f6790919063ffffffff16565b600c819055506120d8565b6120688561205a60648a61211490919063ffffffff16565b611e7290919063ffffffff16565b91506120926103e8612084606485611f6790919063ffffffff16565b61214590919063ffffffff16565b90506120d16120c0826120b26107d0600c54611e7290919063ffffffff16565b61211490919063ffffffff16565b600c54611e9690919063ffffffff16565b600c819055505b43600681905550600954600c5410156120f557600954600c819055505b600a54600c54111561210b57600a54600c819055505b50505050505050565b600081830290506000831480612134575081838281151561213157fe5b04145b151561213f57600080fd5b92915050565b6000818311156121575781905061215b565b8290505b929150505600a165627a7a72305820bb3014fe9702074a42e898b35599b7b4baf8b4091742020d491d321b1155d5020029"
}