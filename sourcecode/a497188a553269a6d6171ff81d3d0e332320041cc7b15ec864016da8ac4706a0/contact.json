{
  "address": "0x52494fbffe10f8c29411521040ae8618c334981e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Hedger.tech Token",
  "contractName": "Hedger",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-24\n*/\n\npragma solidity 0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20 {\n  function totalSupply()public view returns (uint total_Supply);\n  function balanceOf(address who)public view returns (uint256);\n  function allowance(address owner, address spender)public view returns (uint);\n  function transferFrom(address from, address to, uint value)public returns (bool ok);\n  function approve(address spender, uint value)public returns (bool ok);\n  function transfer(address to, uint value)public returns (bool ok);\n  event Transfer(address indexed from, address indexed to, uint value);\n  event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n\ncontract Hedger is ERC20\n{ using SafeMath for uint256;\n    // Name of the token\n    string public constant name = \"Hedger\";\n\n    // Symbol of token\n    string public constant symbol = \"HDR\";\n    uint8 public constant decimals = 18;\n    uint public Totalsupply;\n    address public owner;  // Owner of this contract\n    uint256 no_of_tokens;\n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) allowed;\n\n\n     modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    \n\n    constructor() public\n    {\n        owner = msg.sender;\n       \n    }\n  \n    //mint the tokens, can be called only by owner. total supply also increases\n    function mintTokens(address seller, uint256 _amount) external onlyOwner{\n        require(_amount > 0);\n        require( seller != 0x0 && _amount > 0);\n        balances[seller] = (balances[seller]).add(_amount);\n        Totalsupply = (Totalsupply).add(_amount);\n        emit Transfer(0, seller, _amount);\n       }\n    \n \n    \n     //burn the tokens, can be called only by owner total supply also decreasees\n    function burnTokens(uint256 _amount) external onlyOwner returns (bool success){\n        require(balances[msg.sender] >= _amount);\n        require( _amount > 0);\n        balances[msg.sender] = (balances[msg.sender]).sub(_amount);\n        Totalsupply = Totalsupply.sub(_amount);\n        emit Transfer(msg.sender, 0, _amount);\n        return true;\n    }\n    \n   \n    // what is the total supply of the ech tokens\n     function totalSupply() public view returns (uint256 total_Supply) {\n         total_Supply = Totalsupply;\n     }\n    \n    // What is the balance of a particular account?\n     function balanceOf(address _owner)public view returns (uint256 balance) {\n         return balances[_owner];\n     }\n    \n    // Send _value amount of tokens from address _from to address _to\n     // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n     // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\n     // fees in sub-currencies; the command should fail unless the _from account has\n     // deliberately authorized the sender of the message via some mechanism; we propose\n     // these standardized APIs for approval:\n     function transferFrom( address _from, address _to, uint256 _amount )public returns (bool success) {\n     require( _to != 0x0);\n     require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount >= 0);\n     balances[_from] = (balances[_from]).sub(_amount);\n     allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_amount);\n     balances[_to] = (balances[_to]).add(_amount);\n     emit Transfer(_from, _to, _amount);\n     return true;\n         }\n    \n   // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n     // If this function is called again it overwrites the current allowance with _value.\n     function approve(address _spender, uint256 _amount)public returns (bool success) {\n         require( _spender != 0x0);\n         allowed[msg.sender][_spender] = _amount;\n         emit Approval(msg.sender, _spender, _amount);\n         return true;\n     }\n  \n     function allowance(address _owner, address _spender)public view returns (uint256 remaining) {\n         require( _owner != 0x0 && _spender !=0x0);\n         return allowed[_owner][_spender];\n   }\n\n     // Transfer the balance from owner's account to another account\n     function transfer(address _to, uint256 _amount)public returns (bool success) {\n        require( _to != 0x0);\n        require(balances[msg.sender] >= _amount && _amount >= 0);\n        balances[msg.sender] = (balances[msg.sender]).sub(_amount);\n        balances[_to] = (balances[_to]).add(_amount);\n        emit Transfer(msg.sender, _to, _amount);\n             return true;\n         }\n    \n      //In case the ownership needs to be transferred\n\tfunction transferOwnership(address newOwner) external onlyOwner\n\t{\n\t    uint256 x = balances[owner];\n\t    require( newOwner != 0x0);\n\t    balances[newOwner] = (balances[newOwner]).add(balances[owner]);\n\t    balances[owner] = 0;\n\t    owner = newOwner;\n\t    emit Transfer(msg.sender, newOwner, x);\n\t}\n  \n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total_Supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Totalsupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b5060018054600160a060020a031916331790556109fa806100326000396000f3006080604052600436106100cf5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100d4578063095ea7b31461015e57806318160ddd1461019657806323b872dd146101bd578063313ce567146101e75780636d1b229d1461021257806370a082311461022a5780638da5cb5b1461024b57806395d89b411461027c5780639707f70814610291578063a9059cbb146102a6578063dd62ed3e146102ca578063f0dda65c146102f1578063f2fde38b14610317575b600080fd5b3480156100e057600080fd5b506100e9610338565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561012357818101518382015260200161010b565b50505050905090810190601f1680156101505780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561016a57600080fd5b50610182600160a060020a036004351660243561036f565b604080519115158252519081900360200190f35b3480156101a257600080fd5b506101ab6103ed565b60408051918252519081900360200190f35b3480156101c957600080fd5b50610182600160a060020a03600435811690602435166044356103f3565b3480156101f357600080fd5b506101fc610566565b6040805160ff9092168252519081900360200190f35b34801561021e57600080fd5b5061018260043561056b565b34801561023657600080fd5b506101ab600160a060020a0360043516610623565b34801561025757600080fd5b5061026061063e565b60408051600160a060020a039092168252519081900360200190f35b34801561028857600080fd5b506100e961064d565b34801561029d57600080fd5b506101ab610684565b3480156102b257600080fd5b50610182600160a060020a036004351660243561068a565b3480156102d657600080fd5b506101ab600160a060020a036004358116906024351661076a565b3480156102fd57600080fd5b50610315600160a060020a03600435166024356107c3565b005b34801561032357600080fd5b50610315600160a060020a0360043516610897565b60408051808201909152600681527f4865646765720000000000000000000000000000000000000000000000000000602082015281565b6000600160a060020a038316151561038657600080fd5b336000818152600460209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60005490565b6000600160a060020a038316151561040a57600080fd5b600160a060020a03841660009081526003602052604090205482118015906104555750600160a060020a03841660009081526004602090815260408083203384529091529020548211155b8015610462575060008210155b151561046d57600080fd5b600160a060020a038416600090815260036020526040902054610496908363ffffffff61098616565b600160a060020a03851660009081526003602090815260408083209390935560048152828220338352905220546104d3908363ffffffff61098616565b600160a060020a038086166000908152600460209081526040808320338452825280832094909455918616815260039091522054610517908363ffffffff61099816565b600160a060020a0380851660008181526003602090815260409182902094909455805186815290519193928816926000805160206109af83398151915292918290030190a35060019392505050565b601281565b600154600090600160a060020a0316331461058557600080fd5b336000908152600360205260409020548211156105a157600080fd5b600082116105ae57600080fd5b336000908152600360205260409020546105ce908363ffffffff61098616565b33600090815260036020526040812091909155546105f2908363ffffffff61098616565b600090815560408051848152905133916000805160206109af833981519152919081900360200190a3506001919050565b600160a060020a031660009081526003602052604090205490565b600154600160a060020a031681565b60408051808201909152600381527f4844520000000000000000000000000000000000000000000000000000000000602082015281565b60005481565b6000600160a060020a03831615156106a157600080fd5b3360009081526003602052604090205482118015906106c1575060008210155b15156106cc57600080fd5b336000908152600360205260409020546106ec908363ffffffff61098616565b3360009081526003602052604080822092909255600160a060020a0385168152205461071e908363ffffffff61099816565b600160a060020a0384166000818152600360209081526040918290209390935580518581529051919233926000805160206109af8339815191529281900390910190a350600192915050565b6000600160a060020a0383161580159061078c5750600160a060020a03821615155b151561079757600080fd5b50600160a060020a03918216600090815260046020908152604080832093909416825291909152205490565b600154600160a060020a031633146107da57600080fd5b600081116107e757600080fd5b600160a060020a038216158015906107ff5750600081115b151561080a57600080fd5b600160a060020a038216600090815260036020526040902054610833908263ffffffff61099816565b600160a060020a03831660009081526003602052604081209190915554610860908263ffffffff61099816565b6000908155604080518381529051600160a060020a03851692916000805160206109af833981519152919081900360200190a35050565b600154600090600160a060020a031633146108b157600080fd5b50600154600160a060020a0390811660009081526003602052604090205490821615156108dd57600080fd5b600154600160a060020a039081166000908152600360205260408082205492851682529020546109129163ffffffff61099816565b600160a060020a0380841660008181526003602090815260408083209590955560018054909416825284822091909155825473ffffffffffffffffffffffffffffffffffffffff1916821790925582518481529251909233926000805160206109af83398151915292918290030190a35050565b60008282111561099257fe5b50900390565b6000828201838110156109a757fe5b93925050505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820f4259c5d619dcbde88e5bb5449f60234aab4a392bb00df2bef179b8737257d2e0029"
}