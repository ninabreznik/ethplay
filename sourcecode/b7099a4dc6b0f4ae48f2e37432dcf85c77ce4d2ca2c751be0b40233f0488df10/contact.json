{
  "address": "0xd07241ffedcbb2f7deee7b1fd8ff74523e1524db",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HoardDeployer",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-22\n*/\n\npragma solidity ^0.5.8;\n\n\n/// @title ERC20 Token Interface\n/// @author Hoard Team\n/// @notice See https://github.com/ethereum/EIPs/issues/20\ncontract ERC20Token {\n\n    // PUBLIC INTERFACE\n\n    // /// @dev Returns total amount of tokens\n    // /// @notice params -> (uint256 totalSupply)\n    // It's implamented as a variable which doesn't override this method. Commented to prevent compilation error.\n    // function totalSupply    () constant public returns (uint256);\n\n    /// @dev Returns balance of specified account\n    /// @notice params -> (address _owner)\n    function balanceOf      (address) view public returns (uint256);\n\n    /// @dev  Transfers tokens from msg.sender to a specified address\n    /// @notice params -> (address _to, uint256 _value)\n    function transfer       (address, uint256) public returns (bool);\n\n    /// @dev  Allowance mechanism - delegated transfer\n    /// @notice params -> (address _from, address _to, uint256 _value)\n    function transferFrom   (address, address, uint256) public returns (bool);\n\n    /// @dev  Allowance mechanism - approve delegated transfer\n    /// @notice params -> (address _spender, uint256 _value)\n    function approve        (address, uint256) public returns (bool);\n\n    /// @dev  Allowance mechanism - set allowance for specified address\n    /// @notice params -> (address _owner, address _spender)\n    function allowance      (address, address) public view returns (uint256);\n\n\n    // EVENTS\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n}\n\n\n/// @title Safe Math\n/// @author Open Zeppelin\n/// @notice implementation from - https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\nlibrary SafeMath {\n  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n  \n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n\n}\n\n\n\n/// @title Standard ERC20 compliant token\n/// @author Hoard Team\n/// @notice Original taken from https://github.com/ethereum/EIPs/issues/20\n/// @notice SafeMath used as specified by OpenZeppelin\n/// @notice Comments and additional approval code from https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token\ncontract StandardToken is ERC20Token {\n\n    using SafeMath for uint256;\n\n    mapping (address => uint256) balances;\n\n    mapping (address => mapping (address => uint256)) allowed;\n\n    uint256 public totalSupply;\n\n   /// @dev transfer token for a specified address\n   /// @param _to The address to transfer to.\n   /// @param _value The amount to be transferred.\n   function transfer(address _to, uint256 _value) public returns (bool) {\n        balances[msg.sender] = balances[msg.sender].safeSub(_value);\n        balances[_to] = balances[_to].safeAdd(_value);\n\n        emit Transfer(msg.sender, _to, _value);            \n\n        return true;\n    }\n\n    /// @dev Transfer tokens from one address to another\n    /// @param _from address The address which you want to send tokens from\n    /// @param _to address The address which you want to transfer to\n    /// @param _value uint256 the amount of tokens to be transferred\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        uint256 _allowance = allowed[_from][msg.sender];\n\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n        // require (_value <= _allowance);        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n\n        balances[_to] = balances[_to].safeAdd(_value);\n        balances[_from] = balances[_from].safeSub(_value);\n        allowed[_from][msg.sender] = _allowance.safeSub(_value);\n\n        emit Transfer(_from, _to, _value);\n            \n        return true;\n    }\n\n    /// @dev Gets the balance of the specified address.\n    /// @param _owner The address to query the the balance of. \n    /// @return An uint256 representing the amount owned by the passed address.\n    function balanceOf(address _owner) view public returns (uint256) {\n        return balances[_owner];\n    }\n\n   /// @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   /// @param _spender The address which will spend the funds.\n   /// @param _value The amount of tokens to be spent.\n   function approve(address _spender, uint256 _value) public returns (bool) {\n        // To change the approve amount you first have to reduce the addresses`\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n        \n        allowed[msg.sender][_spender] = _value;\n\n        emit Approval(msg.sender, _spender, _value);\n\n        return true;\n    }\n\n   /// @dev Function to check the amount of tokens that an owner allowed to a spender.\n   /// @param _owner address The address which owns the funds.\n   /// @param _spender address The address which will spend the funds.\n   /// @return A uint256 specifying the amount of tokens still available for the spender.\n   function allowance(address _owner, address _spender) view public returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    /// @notice approve should be called when allowed[_spender] == 0. To increment\n    /// allowed value it is better to use this function to avoid 2 calls (and wait until \n    /// the first transaction is mined)\n    function increaseApproval (address _spender, uint256 _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].safeAdd(_addedValue);\n\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n    }\n\n    /// @notice approve should be called when allowed[_spender] == 0. To decrement\n    /// allowed value it is better to use this function to avoid 2 calls (and wait until \n    /// the first transaction is mined)\n    function decreaseApproval (address _spender, uint256 _subtractedValue) public returns (bool) {\n        uint256 oldValue = allowed[msg.sender][_spender];\n        \n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue - _subtractedValue;\n        }\n\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n    }\n\n}\n\n\n/// @title Migration Agent interface\n/// @author Hoard Team\n/// @notice Based on GNT implementation - https://github.com/golemfactory/golem-crowdfunding/blob/master/contracts/Token.sol\ncontract MigrationAgent {\n\n    /// @dev migrates tokens or other \"assets\" from one contract to another (not yet specified)\n    /// @notice parameters -> (address _from, uint _value)\n    function migrateFrom(address, uint256) public;\n}\n\n\n/// @title Mintable token interface\n/// @author Hoard Team\ncontract Mintable {\n\n    /// @dev Mint new tokens  \n    /// @notice params -> (address _recipient, uint256 _amount)\n    function mintTokens         (address, uint256) public;\n}\n\n\n/// @title Migratable entity interface\n/// @author Hoard Team\ncontract Migratable {\n\n    /// @dev Migrates tokens for msg.sender  \n    /// @notice params -> (uint256 _value)\n    function migrate            (uint256) public;\n\n\n    // EVENTS\n\n    event Migrate               (address indexed _from, address indexed _to, uint256 _value);\n}\n\n\n/// @title Standard ERC20 compliant token\n/// @author Hoard Team\ncontract ExtendedStandardToken is StandardToken, Migratable, Mintable {\n\n    address public migrationAgent;\n    uint256 public totalMigrated;\n\n\n    // MODIFIERS\n\n    modifier migrationAgentSet {\n        require(migrationAgent != address(0));\n        _;\n    }\n\n    modifier migrationAgentNotSet {\n        require(migrationAgent == address(0));\n        _;\n    }\n\n    /// @dev Internal constructor to prevent bare instances of this contract\n    constructor () internal {\n    }\n\n    // MIGRATION LOGIC\n\n    /// @dev Migrates tokens for msg.sender and burns them\n    /// @param _value amount of tokens to migrate\n    function migrate            (uint256 _value) public {\n\n        // Validate input value\n        require(_value > 0);\n    \n        //require(_value <= balances[msg.sender]);\n        //not necessary as safeSub throws in case the above condition does not hold\n    \n        balances[msg.sender] = balances[msg.sender].safeSub(_value);\n        totalSupply = totalSupply.safeSub(_value);\n        totalMigrated = totalMigrated.safeAdd(_value);\n\n        MigrationAgent(migrationAgent).migrateFrom(msg.sender, _value);\n\n        emit Migrate(msg.sender, migrationAgent, _value);\n    }\n\n\n    // MINTING LOGIC\n\n    /// @dev Mints additional tokens\n    /// @param _recipient owner of new tokens \n    /// @param _amount amount of tokens to mint\n    function mintTokens         (address _recipient, uint256 _amount) public {\n        require(_amount > 0);\n\n        balances[_recipient] = balances[_recipient].safeAdd(_amount);\n        totalSupply = totalSupply.safeAdd(_amount);\n\n        // Log token creation event\n        emit Transfer(address(0), msg.sender, _amount);\n    }\n\n\n    // CONTROL LOGIC\n\n    /// @dev Sets address of a new migration agent\n    /// @param _address address of new migration agent \n    function setMigrationAgent  (address _address) public {\n        migrationAgent = _address; \n    }\n\n}\n\n\n\n/// @title Hoard Token (HRD) - crowdfunding code for Hoard token\n/// @author Hoard Team\n/// @notice Based on MLN implementation - https://github.com/melonproject/melon/blob/master/contracts/tokens/MelonToken.sol\n/// @notice Based on GNT implementation - https://github.com/golemfactory/golem-crowdfunding/blob/master/contracts/Token.sol\ncontract HoardToken is ExtendedStandardToken {\n\n    // Token description fields\n    string public constant name = \"Hoard Token\";\n    string public constant symbol = \"HRD\";\n    uint256 public constant decimals = 18;  // 18 decimal places, the same as ETH\n\n    // contract supervision variables\n    address public creator;\n    address public hoard;\n    address public migrationMaster;\n\n\n    // MODIFIERS\n\n    modifier onlyCreator {\n        require(msg.sender == creator);\n        _;\n    }\n\n    modifier onlyHoard {\n        require(msg.sender == hoard);\n        _;\n    }\n\n    modifier onlyMigrationMaster {\n        require(msg.sender == migrationMaster);\n        _;\n    }\n\n    // CONSTRUCTION\n\n    /// @param _hoard Hoard multisig contract\n    /// @param _migrationMaster migration master\n    constructor (address _hoard, address _migrationMaster) public {\n        require(_hoard != address(0));\n        require(_migrationMaster != address(0));\n\n        creator = msg.sender;\n        hoard = _hoard;\n        migrationMaster = _migrationMaster;\n    }\n\n\n    // BASE CLASS IMPLEMENTATION\n\n    /// @notice ExtendedStandardToken is StandardToken\n    function transfer               (address _to, uint256 _value) public\n        returns (bool) \n    {\n        return super.transfer(_to, _value);\n    }\n\n\n    /// @notice ExtendedStandardToken is StandardToken\n    function transferFrom           (address _from, address _to, uint256 _value) public \n        returns (bool)\n    {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n\n    /// @notice ExtendedStandardToken is Migratable\n    function migrate                (uint256 _value) public migrationAgentSet {\n        super.migrate(_value);    \n    }\n\n    /// @notice ExtendedStandardToken\n    function setMigrationAgent      (address _address) public onlyMigrationMaster migrationAgentNotSet {\n        require(_address != address(0));\n\n        super.setMigrationAgent(_address);\n    }\n\n    /// @notice ExtendedStandardToken is Mintable\n    function mintTokens             (address _recipient, uint256 _amount) public onlyCreator {\n        super.mintTokens(_recipient, _amount);\n    }\n\n    // CONTROL LOGIC\n\n    /// @dev changes Hoard multisig address to another one\n    function changeHoardAddress     (address _address) onlyHoard external { hoard = _address; }\n\n    /// @dev changes migration master address to another one\n    function changeMigrationMaster  (address _address) onlyHoard external { migrationMaster = _address; }\n\n}\n\n\n\n/// @title HRD Allocation - time-locked vault of tokens allocated to developers and Hoard\n/// @notice Based on GNT implementation - https://github.com/golemfactory/golem-crowdfunding/blob/master/contracts/GNTAllocation.sol\ncontract HRDAllocation {\n\n    // Addresses of developer and the Hoard to allocations mapping.\n    mapping (address => uint256) allocations;\n\n    // Address of the token contract\n    HoardToken hoardToken;\n\n    // endowment accounts\n    address public constant ADDR_01 = 0x7D4f9442659A85c64dBc0fcD73C163bbD7CcEf84;\n    address public constant ADDR_02 = 0xa24697ff026a072acfBc2ad4baef3386deF89Fd9;\n    address public constant ADDR_03 = 0x5472e965d2Fe689C5cF20d8E72C3f8d116E95d30;\n    address public constant ADDR_04 = 0x90A62aa1f37f9B5A43E6768991dA1cd83526b89f;\n    address public constant ADDR_05 = 0xd0a93607f75B8Cf378c6C06A15bd664541849768;\n    address public constant ADDR_06 = 0xd0E1555b918f9b2E57b0fC8913C7181382ad9CB5;\n    address public constant ADDR_07 = 0x20845469fF9DDc56F98A66419B88A5435739707a;\n    address public constant ADDR_08 = 0x1AB9fc0928C80164B1bfE166527F82c759Ade114;\n    address public constant ADDR_09 = 0x11c1c4f3c6c725455e48f862e59407e5db7bd7A8;\n    address public constant ADDR_10 = 0x7165b273907F4Cc437224b5c50C50C70F8a355E0;\n    address public constant ADDR_11 = 0x625186d75dea6f90B37C1f3fb70acBaDD251371D;\n    address public constant ADDR_12 = 0xf2f6C59359958DB1C4dDD140c87C6a6e314f0267;\n    address public constant ADDR_13 = 0x274A87EEe6321a0c62230B1087048EB40b2C628e;\n    address public constant ADDR_14 = 0xB576274F6Be62Bb290F15a3B4D503a6c06f7cBbb;\n    address public constant ADDR_15 = 0x3C4D5be2fd91BD2B2cF8E1D4D2C1B54E8d29C83D;\n    address public constant ADDR_16 = 0x6803BcB68C0427d25B46a3ef7520F1460518C0Fb;\n    address public constant ADDR_17 = 0x52F540BE7d494075dA30b1ED67BAf46FdE30B7d9;\n    address public constant ADDR_18 = 0x0872dfA15E300496BadBB4c04c939F5E515DeedD;\n    address public constant ADDR_19 = 0xC8EcfFEAc244099809BB1480689A7A36d21a6091;\n    address public constant ADDR_20 = 0xE80b3ad9A170A608Eb07C460F231dA6c872dd5C4;\n    address public constant ADDR_21 = 0x077656617C26074BD54Fa636142CAD91d633C8Ac;\n    address public constant ADDR_22 = 0x572d0f9C8a2C783aDDfCaeAb68f2F60781edd5Df;\n    address public constant ADDR_23 = 0xaD1FA44CfBA1a3ca7b4dE016F857aBB30131A513;\n    address public constant ADDR_24 = 0x2A4331B02Ca0630b5f0C68ecB3E1732866864cc7;\n\n    // endowment amounts\n    uint256 public constant ALLOC_01  = 50000000 * 10 ** 18;\n    uint256 public constant ALLOC_02  = 10000000 * 10 ** 18;\n    uint256 public constant ALLOC_03  = 5000000 * 10 ** 18;\n    uint256 public constant ALLOC_04  = 20000000 * 10 ** 18;\n    uint256 public constant ALLOC_05  = 20000000 * 10 ** 18;\n    uint256 public constant ALLOC_06  = 6000000 * 10 ** 18;\n    uint256 public constant ALLOC_07  = 2000000 * 10 ** 18;\n    uint256 public constant ALLOC_08  = 3000000 * 10 ** 18;\n    uint256 public constant ALLOC_09  = 3000000 * 10 ** 18;\n    uint256 public constant ALLOC_10  = 3000000 * 10 ** 18;\n    uint256 public constant ALLOC_11  = 3000000 * 10 ** 18;\n    uint256 public constant ALLOC_12  = 3000000 * 10 ** 18;\n    uint256 public constant ALLOC_13  = 4000000 * 10 ** 18;\n    uint256 public constant ALLOC_14  = 3000000 * 10 ** 18;\n    uint256 public constant ALLOC_15  = 3000000 * 10 ** 18;\n    uint256 public constant ALLOC_16  = 3000000 * 10 ** 18;\n    uint256 public constant ALLOC_17  = 3000000 * 10 ** 18;\n    uint256 public constant ALLOC_18  = 4000000 * 10 ** 18;\n    uint256 public constant ALLOC_19  = 6000000 * 10 ** 18;\n    uint256 public constant ALLOC_20  = 3000000 * 10 ** 18;\n    uint256 public constant ALLOC_21  = 3000000 * 10 ** 18;\n    uint256 public constant ALLOC_22  = 2000000 * 10 ** 18;\n    uint256 public constant ALLOC_23  = 2000000 * 10 ** 18;\n    uint256 public constant ALLOC_24  = 2000000 * 10 ** 18;\n\n    // Vault configuration\n    uint256 unlockedAt;\n    uint256 tokensCreated = 0;\n\n\n    // MODIFIERS\n\n    modifier onlyIfUnlocked {\n        require(now >= unlockedAt);\n        _;\n    }\n\n\n    // CONSTRUCTION\n\n    /// @param _hoard Hoard multisig address\n    /// @param _hoardToken token address\n    /// @param _lockIntervalDuration how long endowment tokens are going to be locked\n    /// @notice Allow developer to unlock allocated tokens by transferring them\n    /// from HRDAllocation to developer's address.\n    constructor (address _hoard, address _hoardToken, uint256 _lockIntervalDuration, uint256 _totalHRD) public {\n        // Make sure that basic input invariants are satisfied \n        require(_hoard != address(0));\n        require(_hoardToken != address(0));\n        require(_lockIntervalDuration > 0);\n\n        // Sanity checks at the cost of slightly larger contract\n        uint256 ALLOC_01_05 = ALLOC_01 + ALLOC_02 + ALLOC_03 + ALLOC_04 + ALLOC_05;\n        uint256 ALLOC_06_10 = ALLOC_06 + ALLOC_07 + ALLOC_08 + ALLOC_09 + ALLOC_10;\n        uint256 ALLOC_11_15 = ALLOC_11 + ALLOC_12 + ALLOC_13 + ALLOC_14 + ALLOC_15;\n        uint256 ALLOC_16_20 = ALLOC_16 + ALLOC_17 + ALLOC_18 + ALLOC_19 + ALLOC_20;\n        uint256 ALLOC_21_24 = ALLOC_21 + ALLOC_22 + ALLOC_23 + ALLOC_24;\n\n        uint256 ALLOC_ALL = ALLOC_01_05 + ALLOC_06_10 + ALLOC_11_15 + ALLOC_16_20 + ALLOC_21_24;\n\n        // Called here so that the contract is not constructed if invalid number of tokens is specified\n        require(_totalHRD == ALLOC_ALL);\n\n        hoardToken = HoardToken(_hoardToken);\n        unlockedAt = 1556712000 + _lockIntervalDuration; // 05/01/2019 @ 12:00pm (UTC) + _lockIntervalDuration\n\n        // For developers and advisors\n        allocations[ADDR_01] = ALLOC_01;\n        allocations[ADDR_02] = ALLOC_02;\n        allocations[ADDR_03] = ALLOC_03;\n        allocations[ADDR_04] = ALLOC_04;\n        allocations[ADDR_05] = ALLOC_05;\n        allocations[ADDR_06] = ALLOC_06;\n        allocations[ADDR_07] = ALLOC_07;\n        allocations[ADDR_08] = ALLOC_08;\n        allocations[ADDR_09] = ALLOC_09;\n        allocations[ADDR_10] = ALLOC_10;\n        allocations[ADDR_11] = ALLOC_11;\n        allocations[ADDR_12] = ALLOC_12;\n        allocations[ADDR_13] = ALLOC_13;\n        allocations[ADDR_14] = ALLOC_14;\n        allocations[ADDR_15] = ALLOC_15;\n        allocations[ADDR_16] = ALLOC_16;\n        allocations[ADDR_17] = ALLOC_17;\n        allocations[ADDR_18] = ALLOC_18;\n        allocations[ADDR_19] = ALLOC_19;\n        allocations[ADDR_20] = ALLOC_20;\n        allocations[ADDR_21] = ALLOC_21;\n        allocations[ADDR_22] = ALLOC_22;\n        allocations[ADDR_23] = ALLOC_23;\n        allocations[ADDR_24] = ALLOC_24;\n    }\n\n    /// @notice Allow developer to unlock allocated tokens by transferring them\n    /// from HRDAllocation to developer's address.\n    function unlock() external onlyIfUnlocked {\n\n        // During first unlock attempt fetch total number of locked tokens.\n        if (tokensCreated == 0) {\n            tokensCreated = hoardToken.balanceOf(address(this));\n        }\n\n        uint256 hrdAllocation = allocations[msg.sender];\n        \n        require(hrdAllocation > 0);\n\n        allocations[msg.sender] = 0;\n        \n        hoardToken.transfer(msg.sender, hrdAllocation);\n    }\n}\n\n\n\n/// @title Hoard  Crowdfunding Logic \n/// @author Hoard Team\n/// @notice Based roughly on MLN implementation - https://github.com/melonproject/melon/blob/master/contracts/tokens/MelonToken.sol\ncontract HoardDeployer {\n\n    // configuration of time dependant logic\n    uint256 public constant endowmentLockDuration = 12 * 30 days; // duration of HRD endowment lock period (1 year)\n\n    // configuration of HRD generation logic\n    uint256 public constant totalHRD           = 1000000000 * 10 ** 18;                    // Fixed amount of tokens to be generated (decimals == decimals in HoardToken)\n\n    uint256 public constant totalDevHRD        = 166000000 * 10 ** 18;                     // Amount of tokens for the hoard company and the dev team\n    uint256 public constant totalPublicHRD     = totalHRD - totalDevHRD;                   // Amount of tokens for the Hoard at the beginning\n\n    // Hoard Token\n    HoardToken      public hoardToken;\n    HRDAllocation   public lockedAllocation;\n\n    // CONSTRUCTION\n\n    /// @param _hoard Hoard multisig contract\n    /// @param _migrationMaster migration master\n    /// @notice this is a two-phase process and after the contract is created, allocations have to be initialized\n    /// via an additional call\n    constructor (address _hoard, address _migrationMaster) public {\n        require(_hoard != address(0));\n        require(_migrationMaster != address(0));\n\n        hoardToken = new HoardToken(_hoard, _migrationMaster);\n        lockedAllocation = new HRDAllocation(_hoard, address(hoardToken), endowmentLockDuration, totalDevHRD);\n\n        // Generate endowment HRD and store it in a time-locked contract\n        hoardToken.mintTokens(address(lockedAllocation), totalDevHRD);\n\n        // At the beginning all tokens except endowmnet go to hoard\n        hoardToken.mintTokens(_hoard, totalPublicHRD);\n    }\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000c14f6e197f8116e5ee3dd5d6049635ba6d7060df000000000000000000000000c14f6e197f8116e5ee3dd5d6049635ba6d7060df"
}