{
  "address": "0x6c23237314a1106abb08ad99e209b9dfbc0c28fa",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DSSpell",
  "compilerVersion": "v0.5.6+commit.b259423e",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-12\n*/\n\n// hevm: flattened sources of src/spell.sol\npragma solidity >=0.4.23;\n\n////// lib/ds-exec/src/exec.sol\n// exec.sol - base contract used by anything that wants to do \"untyped\" calls\n\n// Copyright (C) 2017  DappHub, LLC\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity >=0.4.23; */\n\ncontract DSExec {\n    function tryExec( address target, bytes memory data, uint value)\n             internal\n             returns (bool ok)\n    {\n        assembly {\n            ok := call(gas, target, value, add(data, 0x20), mload(data), 0, 0)\n        }\n    }\n    function exec( address target, bytes memory data, uint value)\n             internal\n    {\n        if(!tryExec(target, data, value)) {\n            revert(\"ds-exec-call-failed\");\n        }\n    }\n\n    // Convenience aliases\n    function exec( address t, bytes memory c )\n        internal\n    {\n        exec(t, c, 0);\n    }\n    function exec( address t, uint256 v )\n        internal\n    {\n        bytes memory c; exec(t, c, v);\n    }\n    function tryExec( address t, bytes memory c )\n        internal\n        returns (bool)\n    {\n        return tryExec(t, c, 0);\n    }\n    function tryExec( address t, uint256 v )\n        internal\n        returns (bool)\n    {\n        bytes memory c; return tryExec(t, c, v);\n    }\n}\n\n////// lib/ds-note/src/note.sol\n/// note.sol -- the `note' modifier, for logging calls as events\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity >=0.4.23; */\n\ncontract DSNote {\n    event LogNote(\n        bytes4   indexed  sig,\n        address  indexed  guy,\n        bytes32  indexed  foo,\n        bytes32  indexed  bar,\n        uint256           wad,\n        bytes             fax\n    ) anonymous;\n\n    modifier note {\n        bytes32 foo;\n        bytes32 bar;\n        uint256 wad;\n\n        assembly {\n            foo := calldataload(4)\n            bar := calldataload(36)\n            wad := callvalue\n        }\n\n        emit LogNote(msg.sig, msg.sender, foo, bar, wad, msg.data);\n\n        _;\n    }\n}\n\n////// src/spell.sol\n// spell.sol - An un-owned object that performs one action one time only\n\n// Copyright (C) 2017, 2018 DappHub, LLC\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity >=0.4.23; */\n\n/* import \"ds-exec/exec.sol\"; */\n/* import \"ds-note/note.sol\"; */\n\ncontract DSSpell is DSExec, DSNote {\n    address public whom;\n    uint256 public mana;\n    bytes   public data;\n    bool    public done;\n\n    constructor(address whom_, uint256 mana_, bytes memory data_) public {\n        whom = whom_;\n        mana = mana_;\n        data = data_;\n    }\n    // Only marked 'done' if CALL succeeds (not exceptional condition).\n    function cast() public note {\n        require(!done, \"ds-spell-already-cast\");\n        exec(whom, data, mana);\n        done = true;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"data\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cast\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"done\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mana\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whom\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"whom_\",\"type\":\"address\"},{\"name\":\"mana_\",\"type\":\"uint256\"},{\"name\":\"data_\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b506040516105753803806105758339810180604052606081101561003357600080fd5b815160208301516040840180519294919382019264010000000081111561005957600080fd5b8201602081018481111561006c57600080fd5b815164010000000081118282018710171561008657600080fd5b5050600080546001600160a01b0319166001600160a01b038816179055600185905580519093506100c092506002915060208401906100c9565b50505050610164565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061010a57805160ff1916838001178555610137565b82800160010185558215610137579182015b8281111561013757825182559160200191906001019061011c565b50610143929150610147565b5090565b61016191905b80821115610143576000815560010161014d565b90565b610402806101736000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806373d4a13a1461005c57806396d373e5146100d9578063ae8421e1146100e3578063bdb001a7146100ff578063c5c0db0814610119575b600080fd5b61006461013d565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561009e578181015183820152602001610086565b50505050905090810190601f1680156100cb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6100e16101c8565b005b6100eb61033d565b604080519115158252519081900360200190f35b610107610346565b60408051918252519081900360200190f35b61012161034c565b604080516001600160a01b039092168252519081900360200190f35b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156101c05780601f10610195576101008083540402835291602001916101c0565b820191906000526020600020905b8154815290600101906020018083116101a357829003601f168201915b505050505081565b604080513480825260208201838152369383018490526004359360243593849286923392600080356001600160e01b03191693889391929060608201848480828437600083820152604051601f909101601f1916909201829003965090945050505050a460035460ff16156102875760408051600160e51b62461bcd02815260206004820152601560248201527f64732d7370656c6c2d616c72656164792d636173740000000000000000000000604482015290519081900360640190fd5b60005460028054604080516020601f6000196001861615610100020190941685900493840181900481028201810190925282815261032b946001600160a01b0316939092909183018282801561031e5780601f106102f35761010080835404028352916020019161031e565b820191906000526020600020905b81548152906001019060200180831161030157829003601f168201915b505050505060015461035b565b50506003805460ff1916600117905550565b60035460ff1681565b60015481565b6000546001600160a01b031681565b6103668383836103bf565b6103ba5760408051600160e51b62461bcd02815260206004820152601360248201527f64732d657865632d63616c6c2d6661696c656400000000000000000000000000604482015290519081900360640190fd5b505050565b600080600084516020860185885af194935050505056fea165627a7a723058202c3035b853e6e2b0499f20a8d2db577518740b91a4b5db9da9bb8c268fe0df550029000000000000000000000000f2c5369cffb8ea6284452b0326e326dbfdcb867c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000002469fe0e2d0000000000000000000000000000000000000000033b2e3ccfb79511633b878f00000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000f2c5369cffb8ea6284452b0326e326dbfdcb867c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000002469fe0e2d0000000000000000000000000000000000000000033b2e3ccfb79511633b878f00000000000000000000000000000000000000000000000000000000"
}