{
  "address": "0xb2125aef2ebf331103e837fe6ccdd59b703ca304",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SundayLottery",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-10\n*/\n\npragma solidity >0.4.99 <0.6.0;\n\nlibrary Zero {\n    function requireNotZero(address addr) internal pure {\n        require(addr != address(0), \"require not zero address\");\n    }\n\n    function requireNotZero(uint val) internal pure {\n        require(val != 0, \"require not zero value\");\n    }\n\n    function notZero(address addr) internal pure returns(bool) {\n        return !(addr == address(0));\n    }\n\n    function isZero(address addr) internal pure returns(bool) {\n        return addr == address(0);\n    }\n\n    function isZero(uint a) internal pure returns(bool) {\n        return a == 0;\n    }\n\n    function notZero(uint a) internal pure returns(bool) {\n        return a != 0;\n    }\n}\n\nlibrary Address {\n    function toAddress(bytes memory source) internal pure returns(address addr) {\n        assembly { addr := mload(add(source,0x14)) }\n        return addr;\n    }\n\n    function isNotContract(address addr) internal view returns(bool) {\n        uint length;\n        assembly { length := extcodesize(addr) }\n        return length == 0;\n    }\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        if (_a == 0) {\n            return 0;\n        }\n\n        uint256 c = _a * _b;\n        require(c / _a == _b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b > 0); // Solidity only automatically asserts when dividing by 0\n        uint256 c = _a / _b;\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b <= _a);\n        uint256 c = _a - _b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        uint256 c = _a + _b;\n        require(c >= _a);\n\n        return c;\n    }\n\n}\n\ncontract Accessibility {\n    address private owner;\n    event OwnerChanged(address indexed previousOwner, address indexed newOwner);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"access denied\");\n        _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function changeOwner(address _newOwner) onlyOwner public {\n        require(_newOwner != address(0));\n        emit OwnerChanged(owner, _newOwner);\n        owner = _newOwner;\n    }\n}\n\n\ncontract TicketsStorage is Accessibility  {\n    using SafeMath for uint;\n\n    struct Ticket {\n        address payable wallet;\n        bool isWinner;\n        uint numberTicket;\n    }\n\n    uint private entropyNumber = 121;\n\n    mapping (uint => uint) private countTickets;\n    // currentRound -> number ticket\n\n    mapping (uint => mapping (uint => Ticket)) private tickets;\n    // currentRound -> number ticket -> Ticket\n\n    mapping (uint => mapping (address => uint)) private balancePlayer;\n    // currentRound -> wallet -> balance player\n\n    mapping (address => mapping (uint => uint)) private balanceWinner;\n    // wallet -> balance winner\n\n    event LogHappyTicket(uint roundLottery, uint happyTicket);\n\n    function checkWinner(uint round, uint numberTicket) public view returns (bool) {\n        return tickets[round][numberTicket].isWinner;\n    }\n\n    function getBalancePlayer(uint round, address wallet) public view returns (uint) {\n        return balancePlayer[round][wallet];\n    }\n\n    function ticketInfo(uint round, uint index) public view returns(address payable wallet, bool isWinner, uint numberTicket) {\n        Ticket memory ticket = tickets[round][index];\n        wallet = ticket.wallet;\n        isWinner = ticket.isWinner;\n        numberTicket = ticket.numberTicket;\n    }\n\n    function newTicket(uint round, address payable wallet, uint priceOfToken) public onlyOwner {\n        countTickets[round]++;\n        Ticket storage ticket = tickets[round][countTickets[round]];\n        ticket.wallet = wallet;\n        ticket.numberTicket = countTickets[round];\n        balancePlayer[round][wallet] = balancePlayer[round][wallet].add(priceOfToken);\n    }\n\n    function clearRound(uint round) public {\n        countTickets[round] = 0;\n        if (entropyNumber == 330) {\n            entropyNumber = 121;\n        }\n    }\n\n    function getCountTickets(uint round) public view returns (uint) {\n        return countTickets[round];\n    }\n\n    function addBalanceWinner(uint round, uint amountPrize, uint happyNumber) public onlyOwner {\n        address walletTicket = tickets[round][happyNumber].wallet;\n        balanceWinner[walletTicket][round] = balanceWinner[walletTicket][round].add(amountPrize);\n        tickets[round][happyNumber].isWinner = true;\n    }\n\n    function getBalanceWinner(address wallet, uint round) public view returns (uint) {\n        return balanceWinner[wallet][round];\n    }\n\n    function findHappyNumber(uint round, uint typeStep) public onlyOwner returns(uint) {\n        require(countTickets[round] > 0, \"number of tickets must be greater than 0\");\n        uint happyNumber = 0;\n        if (typeStep == 3) {\n            happyNumber = getRandomNumber(11);\n        } else if (typeStep == 1) {\n            happyNumber = getRandomNumber(3);\n        } else if (typeStep == 2) {\n            happyNumber = getRandomNumber(6);\n        } else {\n            happyNumber = getRandomNumber(2);\n        }\n        emit LogHappyTicket(round, happyNumber);\n        return happyNumber;\n    }\n\n    function getRandomNumber(uint step) internal returns(uint) {\n        entropyNumber = entropyNumber.add(1);\n        uint randomFirst = maxRandom(block.number, msg.sender).div(now);\n        uint randomNumber = randomFirst.mul(entropyNumber) % (66);\n        randomNumber = randomNumber % step;\n        return randomNumber + 1;\n    }\n\n    function maxRandom(uint blockn, address entropyAddress) internal view returns (uint randomNumber) {\n        return uint(keccak256(\n                abi.encodePacked(\n                    blockhash(blockn),\n                    entropyAddress)\n            ));\n    }\n\n}\n\ncontract SundayLottery is Accessibility {\n    using SafeMath for uint;\n\n    using Address for *;\n    using Zero for *;\n\n    TicketsStorage private m_tickets;\n    mapping (address => bool) private notUnigue;\n\n    enum StepLottery {TWO, THREE, SIX, ELEVEN}\n    StepLottery stepLottery;\n    uint[] private step = [2, 3, 6, 11];\n    uint[] private priceTicket = [0.05 ether, 0.02 ether, 0.01 ether, 0.01 ether];\n    uint[] private prizePool = [0.09 ether, 0.05 ether, 0.05 ether, 0.1 ether];\n\n    address payable public administrationWallet;\n\n    uint private canBuyTickets = 0;\n\n    uint public priceOfToken = 0.01 ether;\n\n    uint private amountPrize;\n\n    uint public currentRound;\n    uint public totalEthRaised;\n    uint public totalTicketBuyed;\n\n    uint public uniquePlayer;\n\n    // more events for easy read from blockchain\n    event LogNewTicket(address indexed addr, uint when, uint round, uint price);\n    event LogBalanceChanged(uint when, uint balance);\n    event LogChangeTime(uint newDate, uint oldDate);\n    event LogRefundEth(address indexed player, uint value);\n    event LogWinnerDefine(uint roundLottery, address indexed wallet, uint happyNumber);\n    event ChangeAddressWallet(address indexed owner, address indexed newAddress, address indexed oldAddress);\n    event SendToAdministrationWallet(uint balanceContract);\n\n    modifier balanceChanged {\n        _;\n        emit LogBalanceChanged(getCurrentDate(), address(this).balance);\n    }\n\n    modifier notFromContract() {\n        require(msg.sender.isNotContract(), \"only externally accounts\");\n        _;\n    }\n\n    constructor(address payable _administrationWallet, uint _step) public {\n        require(_administrationWallet != address(0));\n        administrationWallet = _administrationWallet;\n        //administrationWallet = msg.sender; // for test's\n        m_tickets = new TicketsStorage();\n        currentRound = 1;\n        m_tickets.clearRound(currentRound);\n        setStepLottery(_step);\n    }\n\n    function() external payable {\n        if (msg.value >= priceOfToken) {\n            buyTicket(msg.sender);\n        } else {\n            refundEth(msg.sender, msg.value);\n        }\n    }\n\n    function buyTicket(address payable _addressPlayer) public payable notFromContract balanceChanged returns (uint buyTickets) {\n        uint investment = msg.value;\n        require(investment >= priceOfToken, \"investment must be >= PRICE OF TOKEN\");\n\n        uint tickets = investment.div(priceOfToken);\n        if (tickets > canBuyTickets) {\n            tickets = canBuyTickets;\n            canBuyTickets = 0;\n        } else {\n            canBuyTickets = canBuyTickets.sub(tickets);\n        }\n\n        uint requireEth = tickets.mul(priceOfToken);\n        if (investment > requireEth) {\n            refundEth(msg.sender, investment.sub(requireEth));\n        }\n\n        buyTickets = tickets;\n        if (tickets > 0) {\n            uint currentDate = now;\n            while (tickets != 0) {\n                m_tickets.newTicket(currentRound, _addressPlayer, priceOfToken);\n                emit LogNewTicket(_addressPlayer, currentDate, currentRound, priceOfToken);\n                totalTicketBuyed++;\n                tickets--;\n            }\n        }\n\n        if (!notUnigue[_addressPlayer]) {\n            notUnigue[_addressPlayer] = true;\n            uniquePlayer++;\n        }\n        totalEthRaised = totalEthRaised.add(requireEth);\n\n        if (canBuyTickets.isZero()) {\n            makeTwists();\n        }\n    }\n\n    function makeTwists() internal notFromContract {\n        play(currentRound);\n        sendToAdministration();\n        canBuyTickets = step[getStepLottery()];\n        currentRound++;\n        m_tickets.clearRound(currentRound);\n    }\n\n    function play(uint round) internal {\n        if (address(this).balance >= amountPrize) {\n            uint happyNumber = m_tickets.findHappyNumber(round, getStepLottery());\n            m_tickets.addBalanceWinner(currentRound, amountPrize, happyNumber);\n            (address payable wallet,,) =  m_tickets.ticketInfo(round, happyNumber);\n            wallet.transfer(amountPrize);\n            emit LogWinnerDefine(round, wallet, happyNumber);\n        }\n    }\n\n    function setStepLottery(uint newStep) public onlyOwner {\n        require(uint(StepLottery.ELEVEN) >= newStep);\n        require(getCountTickets(currentRound) == 0);\n        stepLottery = StepLottery(newStep);\n        initCanBuyTicket();\n    }\n\n    function getStepLottery() public view returns (uint currentStep) {\n        currentStep = uint(stepLottery);\n    }\n\n    function initCanBuyTicket() internal {\n        uint currentStepLottery = getStepLottery();\n        canBuyTickets = step[currentStepLottery];\n        priceOfToken = priceTicket[currentStepLottery];\n        amountPrize = prizePool[currentStepLottery];\n    }\n\n    function getTicketInfo(uint round, uint index) public view returns (address payable wallet, bool isWinner, uint numberTicket) {\n        (wallet, isWinner, numberTicket) =  m_tickets.ticketInfo(round, index);\n    }\n\n    function balanceETH() external view returns(uint) {\n        return address(this).balance;\n    }\n\n    function refundEth(address payable _player, uint _value) internal returns (bool) {\n        require(_player.notZero());\n        _player.transfer(_value);\n        emit LogRefundEth(_player, _value);\n    }\n\n    function getBalancePlayer(uint round, address wallet) external view returns (uint) {\n        return m_tickets.getBalancePlayer(round, wallet);\n    }\n\n    function getBalanceWinner(address wallet, uint round) external view returns (uint) {\n        return m_tickets.getBalanceWinner(wallet, round);\n    }\n\n    function checkWinner(uint round, uint numberTicket) public view returns (bool) {\n        return m_tickets.checkWinner(round, numberTicket);\n    }\n\n    function getCurrentDate() public view returns (uint) {\n        return now;\n    }\n\n    function getCountTickets(uint round) public view returns (uint countTickets) {\n        countTickets = m_tickets.getCountTickets(round);\n    }\n\n    function setAdministrationWallet(address payable _newWallet) external onlyOwner {\n        require(_newWallet != address(0));\n        address payable _oldWallet = administrationWallet;\n        administrationWallet = _newWallet;\n        emit ChangeAddressWallet(msg.sender, _newWallet, _oldWallet);\n    }\n\n    function sendToAdministration() internal {\n        require(administrationWallet != address(0), \"address of wallet is 0x0\");\n        uint amount = address(this).balance;\n\n        if (amount > 0) {\n            if (administrationWallet.send(amount)) {\n                emit SendToAdministrationWallet(amount);\n            }\n        }\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"getBalanceWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newStep\",\"type\":\"uint256\"}],\"name\":\"setStepLottery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"getCountTickets\",\"outputs\":[{\"name\":\"countTickets\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceOfToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"round\",\"type\":\"uint256\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTicketInfo\",\"outputs\":[{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"isWinner\",\"type\":\"bool\"},{\"name\":\"numberTicket\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStepLottery\",\"outputs\":[{\"name\":\"currentStep\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniquePlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"round\",\"type\":\"uint256\"},{\"name\":\"numberTicket\",\"type\":\"uint256\"}],\"name\":\"checkWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTicketBuyed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addressPlayer\",\"type\":\"address\"}],\"name\":\"buyTicket\",\"outputs\":[{\"name\":\"buyTickets\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"setAdministrationWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"administrationWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"round\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getBalancePlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_administrationWallet\",\"type\":\"address\"},{\"name\":\"_step\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"LogNewTicket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"LogBalanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newDate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldDate\",\"type\":\"uint256\"}],\"name\":\"LogChangeTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogRefundEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"roundLottery\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"happyNumber\",\"type\":\"uint256\"}],\"name\":\"LogWinnerDefine\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"ChangeAddressWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"balanceContract\",\"type\":\"uint256\"}],\"name\":\"SendToAdministrationWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "00000000000000000000000009c9ab524379b0e426ac71a060a04b4fc52a58a50000000000000000000000000000000000000000000000000000000000000003"
}