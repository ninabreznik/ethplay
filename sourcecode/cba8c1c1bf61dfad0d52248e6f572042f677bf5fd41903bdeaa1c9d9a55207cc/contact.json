{
  "address": "0x6ee2ee1a5a257e6e7ade7fe537617ead9c7bd3d2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BittechToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-22\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n    \n  mapping (address => uint256) balances;\n  uint256 totalSupply_;\n  \n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n  \n    /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  \n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n}\n\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    require(_value <= balances[msg.sender]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    address burner = msg.sender;\n    balances[burner] = balances[burner].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(burner, _value);\n    emit Transfer(burner, address(0), _value);\n  }\n}\n\ncontract StandardToken is ERC20, BurnableToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    \n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n  \n}\n\ncontract BittechToken is StandardToken {\n\n  string constant public name = \"Bittech Token\";\n  string constant public symbol = \"BTECH\";\n  uint256 constant public decimals = 18;\n\n  address constant public bountyWallet = 0x8E8d4cdADbc027b192DfF91c77382521B419E5A2;\n  uint256 public bountyPart = uint256(5000000).mul(10 ** decimals); \n  address constant public adviserWallet = 0x1B9D19Af310E8cB35D0d3B8977b65bD79C5bB299;\n  uint256 public adviserPart = uint256(1000000).mul(10 ** decimals);\n  address constant public reserveWallet = 0xa323DA182fDfC10861609C2c98894D9745ABAB91;\n  uint256 public reservePart = uint256(20000000).mul(10 ** decimals);\n  address constant public ICOWallet = 0x1ba99f4F5Aa56684423a122D72990A7851AaFD9e;\n  uint256 public ICOPart = uint256(60000000).mul(10 ** decimals);\n  uint256 public PreICOPart = uint256(5000000).mul(10 ** decimals);\n  address constant public teamWallet = 0x69548B7740EAf1200312d803f8bDd04F77523e09;\n  uint256 public teamPart = uint256(9000000).mul(10 ** decimals);\n\n  uint256 constant public yearSeconds = 31536000; // 60*60*24*365 = 31536000\n  uint256 constant public secsPerBlock = 15; // 1 block per 15 seconds\n  uint256 public INITIAL_SUPPLY = uint256(100000000).mul(10 ** decimals); // 100 000 000 tokens\n\n  uint256 public withdrawTokens = 0;\n  uint256 public startTime;\n\n  function BittechToken() public {\n    totalSupply_ = INITIAL_SUPPLY;\n\n    balances[bountyWallet] = bountyPart;\n    emit Transfer(this, bountyWallet, bountyPart);\n\n    balances[adviserWallet] = adviserPart;\n    emit Transfer(this, adviserWallet, adviserPart);\n\n    balances[reserveWallet] = reservePart;\n    emit Transfer(this, reserveWallet, reservePart);\n\n    balances[ICOWallet] = ICOPart;\n    emit Transfer(this, ICOWallet, ICOPart);\n\n    balances[msg.sender] = PreICOPart;\n    emit Transfer(this, msg.sender, PreICOPart);\n\n    balances[this] = teamPart;\n    emit Transfer(this, this, teamPart); \n\n    startTime = block.number;\n  }\n\n  modifier onlyTeam() {\n    require(msg.sender == teamWallet);\n    _;\n  }\n\n  function viewTeamTokens() public view returns (uint256) {\n\n    if (block.number >= startTime.add(yearSeconds.div(secsPerBlock))) {\n      return 3000000;\n    }\n\n    if (block.number >= startTime.add(yearSeconds.div(secsPerBlock).mul(2))) {\n      return 6000000;\n    }\n\n    if (block.number >= startTime.add(yearSeconds.div(secsPerBlock).mul(3))) {\n      return 9000000;\n    }\n\n  }\n\n  function getTeamTokens(uint256 _tokens) public onlyTeam {\n    uint256 tokens = _tokens.mul(10 ** decimals);\n    require(withdrawTokens.add(tokens) <= viewTeamTokens().mul(10 ** decimals));\n    transfer(teamWallet, tokens);\n    emit Transfer(this, teamWallet, tokens);\n    withdrawTokens = withdrawTokens.add(tokens);\n  }\n  \n}",
  "bytecode": "60806040526200002e6012600a0a624c4b406200061364010000000002620015d0179091906401000000009004565b6003556200005b6012600a0a620f42406200061364010000000002620015d0179091906401000000009004565b600455620000896012600a0a6301312d006200061364010000000002620015d0179091906401000000009004565b600555620000b76012600a0a63039387006200061364010000000002620015d0179091906401000000009004565b600655620000e46012600a0a624c4b406200061364010000000002620015d0179091906401000000009004565b600755620001116012600a0a628954406200061364010000000002620015d0179091906401000000009004565b6008556200013f6012600a0a6305f5e1006200061364010000000002620015d0179091906401000000009004565b6009556000600a553480156200015457600080fd5b50600954600181905550600354600080738e8d4cdadbc027b192dff91c77382521b419e5a273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550738e8d4cdadbc027b192dff91c77382521b419e5a273ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6003546040518082815260200191505060405180910390a3600454600080731b9d19af310e8cb35d0d3b8977b65bd79c5bb29973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550731b9d19af310e8cb35d0d3b8977b65bd79c5bb29973ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6004546040518082815260200191505060405180910390a360055460008073a323da182fdfc10861609c2c98894d9745abab9173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555073a323da182fdfc10861609c2c98894d9745abab9173ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6005546040518082815260200191505060405180910390a3600654600080731ba99f4f5aa56684423a122d72990a7851aafd9e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550731ba99f4f5aa56684423a122d72990a7851aafd9e73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6006546040518082815260200191505060405180910390a36007546000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6007546040518082815260200191505060405180910390a36008546000803073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6008546040518082815260200191505060405180910390a343600b819055506200064f565b60008083141562000628576000905062000649565b81830290508183828115156200063a57fe5b041415156200064557fe5b8090505b92915050565b611634806200065f6000396000f30060806040526004361061016a576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461016f578063095ea7b3146101ff57806318160ddd1461026457806323b872dd1461028f5780632ff2e9dc14610314578063309d82101461033f578063313ce5671461036a57806342966c681461039557806359927044146103c2578063704e74371461041957806370a082311461044457806378adf55e1461049b57806378e97925146104c65780637e7c16de146104f157806381a22bee1461051c57806387ae0dbe146105475780638812ec52146105725780638d8f2adb146105c957806395d89b41146105f45780639f9827fa14610684578063a9059cbb146106af578063ae764df314610714578063d45036c71461076b578063d72b11bd14610796578063dd083f20146107ed578063dd62ed3e14610818578063e57605201461088f578063efdcc0f8146108e6575b600080fd5b34801561017b57600080fd5b50610184610913565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101c45780820151818401526020810190506101a9565b50505050905090810190601f1680156101f15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020b57600080fd5b5061024a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061094c565b604051808215151515815260200191505060405180910390f35b34801561027057600080fd5b506102796109d9565b6040518082815260200191505060405180910390f35b34801561029b57600080fd5b506102fa600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506109e3565b604051808215151515815260200191505060405180910390f35b34801561032057600080fd5b50610329610d9d565b6040518082815260200191505060405180910390f35b34801561034b57600080fd5b50610354610da3565b6040518082815260200191505060405180910390f35b34801561037657600080fd5b5061037f610da9565b6040518082815260200191505060405180910390f35b3480156103a157600080fd5b506103c060048036038101908080359060200190929190505050610dae565b005b3480156103ce57600080fd5b506103d7610f66565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561042557600080fd5b5061042e610f7e565b6040518082815260200191505060405180910390f35b34801561045057600080fd5b50610485600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f84565b6040518082815260200191505060405180910390f35b3480156104a757600080fd5b506104b0610fcc565b6040518082815260200191505060405180910390f35b3480156104d257600080fd5b506104db610fd2565b6040518082815260200191505060405180910390f35b3480156104fd57600080fd5b50610506610fd8565b6040518082815260200191505060405180910390f35b34801561052857600080fd5b50610531610fdd565b6040518082815260200191505060405180910390f35b34801561055357600080fd5b5061055c610fe3565b6040518082815260200191505060405180910390f35b34801561057e57600080fd5b50610587610feb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105d557600080fd5b506105de611003565b6040518082815260200191505060405180910390f35b34801561060057600080fd5b50610609611009565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561064957808201518184015260208101905061062e565b50505050905090810190601f1680156106765780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561069057600080fd5b50610699611042565b6040518082815260200191505060405180910390f35b3480156106bb57600080fd5b506106fa600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611048565b604051808215151515815260200191505060405180910390f35b34801561072057600080fd5b50610729611267565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561077757600080fd5b5061078061127f565b6040518082815260200191505060405180910390f35b3480156107a257600080fd5b506107ab611368565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107f957600080fd5b50610802611380565b6040518082815260200191505060405180910390f35b34801561082457600080fd5b50610879600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611386565b6040518082815260200191505060405180910390f35b34801561089b57600080fd5b506108a461140d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156108f257600080fd5b5061091160048036038101908080359060200190929190505050611425565b005b6040805190810160405280600d81526020017f4269747465636820546f6b656e0000000000000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b6000600154905090565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610a2057600080fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610a6d57600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610af857600080fd5b610b49826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461158590919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610bdc826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115a190919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610cad82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115a190919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60095481565b60065481565b601281565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610dfd57600080fd5b339050610e51826000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115a190919063ffffffff16565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ea8826001546115a190919063ffffffff16565b6001819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a2600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35050565b7369548b7740eaf1200312d803f8bdd04f77523e0981565b60035481565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60075481565b600b5481565b600f81565b60055481565b6301e1338081565b731b9d19af310e8cb35d0d3b8977b65bd79c5bb29981565b600a5481565b6040805190810160405280600581526020017f425445434800000000000000000000000000000000000000000000000000000081525081565b60045481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561108557600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156110d257600080fd5b611123826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115a190919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506111b6826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461158590919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b731ba99f4f5aa56684423a122d72990a7851aafd9e81565b60006112ad61129c600f6301e133806115ba90919063ffffffff16565b600b5461158590919063ffffffff16565b431015156112c057622dc6c09050611365565b6112ff6112ee60026112e0600f6301e133806115ba90919063ffffffff16565b6115d090919063ffffffff16565b600b5461158590919063ffffffff16565b4310151561131257625b8d809050611365565b6113516113406003611332600f6301e133806115ba90919063ffffffff16565b6115d090919063ffffffff16565b600b5461158590919063ffffffff16565b4310151561136457628954409050611365565b5b90565b73a323da182fdfc10861609c2c98894d9745abab9181565b60085481565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b738e8d4cdadbc027b192dff91c77382521b419e5a281565b60007369548b7740eaf1200312d803f8bdd04f77523e0973ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561147557600080fd5b61148c6012600a0a836115d090919063ffffffff16565b90506114ac6012600a0a61149e61127f565b6115d090919063ffffffff16565b6114c182600a5461158590919063ffffffff16565b111515156114ce57600080fd5b6114ec7369548b7740eaf1200312d803f8bdd04f77523e0982611048565b507369548b7740eaf1200312d803f8bdd04f77523e0973ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a361157b81600a5461158590919063ffffffff16565b600a819055505050565b6000818301905082811015151561159857fe5b80905092915050565b60008282111515156115af57fe5b818303905092915050565b600081838115156115c757fe5b04905092915050565b6000808314156115e35760009050611602565b81830290508183828115156115f457fe5b041415156115fe57fe5b8090505b929150505600a165627a7a72305820ce69e8be8dd50503c21c904fdf6d652c1ebcfb98d0fd69382122664aa1a8e6000029"
}