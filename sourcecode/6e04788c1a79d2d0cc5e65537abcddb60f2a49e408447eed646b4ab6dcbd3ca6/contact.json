{
  "address": "0xf75fbfa2f681860b9a6d19fc3ff3d34cb322e2d6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CRYPTORIYA",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-27\n*/\n\npragma solidity ^0.4.21;\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   */\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function () public payable {\n    revert();\n  }\n\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract MintableToken is StandardToken, Ownable {\n    \n  event Mint(address indexed to, uint256 amount);\n  \n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n  address public saleAgent;\n\n  modifier notLocked() {\n    require(msg.sender == owner || msg.sender == saleAgent || mintingFinished);\n    _;\n  }\n\n  function setSaleAgent(address newSaleAgnet) public {\n    require(msg.sender == saleAgent || msg.sender == owner);\n    saleAgent = newSaleAgnet;\n  }\n\n  function mint(address _to, uint256 _amount) public returns (bool) {\n    require(msg.sender == saleAgent && !mintingFinished);\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() public returns (bool) {\n    require((msg.sender == saleAgent || msg.sender == owner) && !mintingFinished);\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n\n  function transfer(address _to, uint256 _value) public notLocked returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address from, address to, uint256 value) public notLocked returns (bool) {\n    return super.transferFrom(from, to, value);\n  }\n  \n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\ncontract CRYPTORIYA is MintableToken {\t\n    \n  string public constant name = \"CRYPTORIYA\";\n   \n  string public constant symbol = \"CIYA\";\n    \n  uint32 public constant decimals = 18;\n\n  mapping (address => uint) public locked;\n\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(locked[msg.sender] < now);\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(locked[_from] < now);\n    return super.transferFrom(_from, _to, _value);\n  }\n  \n  function lock(address addr, uint periodInDays) public {\n    require(locked[addr] < now && (msg.sender == saleAgent || msg.sender == addr));\n    locked[addr] = now + periodInDays * 1 days;\n  }\n\n}\n\ncontract StagedCrowdsale is Pausable {\n\n  using SafeMath for uint;\n\n  struct Stage {\n    uint hardcap;\n    uint price;\n    uint invested;\n    uint closed;\n  }\n\n  uint public start;\n\n  uint public period;\n\n  uint public totalHardcap;\n \n  uint public totalInvested;\n\n  Stage[] public stages;\n\n  function stagesCount() public constant returns(uint) {\n    return stages.length;\n  }\n\n  function setStart(uint newStart) public onlyOwner {\n    start = newStart;\n  }\n\n  function setPeriod(uint newPeriod) public onlyOwner {\n    period = newPeriod;\n  }\n\n  function addStage(uint hardcap, uint price) public onlyOwner {\n    require(hardcap > 0 && price > 0);\n    Stage memory stage = Stage(hardcap.mul(1 ether), price, 0, 0);\n    stages.push(stage);\n    totalHardcap = totalHardcap.add(stage.hardcap);\n  }\n\n  function removeStage(uint8 number) public onlyOwner {\n    require(number >=0 && number < stages.length);\n    Stage storage stage = stages[number];\n    totalHardcap = totalHardcap.sub(stage.hardcap);    \n    delete stages[number];\n    for (uint i = number; i < stages.length - 1; i++) {\n      stages[i] = stages[i+1];\n    }\n    stages.length--;\n  }\n\n  function changeStage(uint8 number, uint hardcap, uint price) public onlyOwner {\n    require(number >= 0 &&number < stages.length);\n    Stage storage stage = stages[number];\n    totalHardcap = totalHardcap.sub(stage.hardcap);    \n    stage.hardcap = hardcap.mul(1 ether);\n    stage.price = price;\n    totalHardcap = totalHardcap.add(stage.hardcap);    \n  }\n\n  function insertStage(uint8 numberAfter, uint hardcap, uint price) public onlyOwner {\n    require(numberAfter < stages.length);\n    Stage memory stage = Stage(hardcap.mul(1 ether), price, 0, 0);\n    totalHardcap = totalHardcap.add(stage.hardcap);\n    stages.length++;\n    for (uint i = stages.length - 2; i > numberAfter; i--) {\n      stages[i + 1] = stages[i];\n    }\n    stages[numberAfter + 1] = stage;\n  }\n\n  function clearStages() public onlyOwner {\n    for (uint i = 0; i < stages.length; i++) {\n      delete stages[i];\n    }\n    stages.length -= stages.length;\n    totalHardcap = 0;\n  }\n\n  function lastSaleDate() public constant returns(uint) {\n    return start + period * 1 days;\n  }\n\n  modifier saleIsOn() {\n    require(stages.length > 0 && now >= start && now < lastSaleDate());\n    _;\n  }\n  \n  modifier isUnderHardcap() {\n    require(totalInvested <= totalHardcap);\n    _;\n  }\n\n  function currentStage() public saleIsOn isUnderHardcap constant returns(uint) {\n    for(uint i=0; i < stages.length; i++) {\n      if(stages[i].closed == 0) {\n        return i;\n      }\n    }\n    revert();\n  }\n\n}\n\ncontract CommonSale is StagedCrowdsale {\n\n  address public masterWallet;\n\n  address public slaveWallet;\n  \n  address public directMintAgent;\n\n  uint public slaveWalletPercent = 30;\n\n  uint public percentRate = 100;\n\n  uint public minPrice;\n\n  uint public totalTokensMinted;\n  \n  bool public slaveWalletInitialized;\n  \n  bool public slaveWalletPercentInitialized;\n\n  CRYPTORIYA public token;\n  \n  modifier onlyDirectMintAgentOrOwner() {\n    require(directMintAgent == msg.sender || owner == msg.sender);\n    _;\n  }\n  \n  function setDirectMintAgent(address newDirectMintAgent) public onlyOwner {\n    directMintAgent = newDirectMintAgent;\n  }\n  \n  function setMinPrice(uint newMinPrice) public onlyOwner {\n    minPrice = newMinPrice;\n  }\n\n  function setSlaveWalletPercent(uint newSlaveWalletPercent) public onlyOwner {\n    require(!slaveWalletPercentInitialized);\n    slaveWalletPercent = newSlaveWalletPercent;\n    slaveWalletPercentInitialized = true;\n  }\n\n  function setMasterWallet(address newMasterWallet) public onlyOwner {\n    masterWallet = newMasterWallet;\n  }\n\n  function setSlaveWallet(address newSlaveWallet) public onlyOwner {\n    require(!slaveWalletInitialized);\n    slaveWallet = newSlaveWallet;\n    slaveWalletInitialized = true;\n  }\n  \n  function setToken(address newToken) public onlyOwner {\n    token = CRYPTORIYA(newToken);\n  }\n\n  function directMint(address to, uint investedWei) public onlyDirectMintAgentOrOwner saleIsOn {\n    mintTokens(to, investedWei);\n  }\n\n  function createTokens() public whenNotPaused payable {\n    require(msg.value >= minPrice);\n    uint masterValue = msg.value.mul(percentRate.sub(slaveWalletPercent)).div(percentRate);\n    uint slaveValue = msg.value.sub(masterValue);\n    masterWallet.transfer(masterValue);\n    slaveWallet.transfer(slaveValue);\n    mintTokens(msg.sender, msg.value);\n  }\n\n  function mintTokens(address to, uint weiInvested) internal {\n    uint stageIndex = currentStage();\n    Stage storage stage = stages[stageIndex];\n    uint tokens = weiInvested.mul(stage.price);\n    token.mint(this, tokens);\n    token.transfer(to, tokens);\n    totalTokensMinted = totalTokensMinted.add(tokens);\n    totalInvested = totalInvested.add(weiInvested);\n    stage.invested = stage.invested.add(weiInvested);\n    if(stage.invested >= stage.hardcap) {\n      stage.closed = now;\n    }\n  }\n\n  function() external payable {\n    createTokens();\n  }\n  \n  function retrieveTokens(address anotherToken, address to) public onlyOwner {\n    ERC20 alienToken = ERC20(anotherToken);\n    alienToken.transfer(to, alienToken.balanceOf(this));\n  }\n\n}\n\ncontract Presale is CommonSale {\n\n  Mainsale public mainsale;\n\n  function setMainsale(address newMainsale) public onlyOwner {\n    mainsale = Mainsale(newMainsale);\n  }\n\n  function finishMinting() public whenNotPaused onlyOwner {\n    token.setSaleAgent(mainsale);\n  }\n\n  function() external payable {\n    createTokens();\n  }\n\n}\n\ncontract Mainsale is CommonSale {\n\n  address public foundersTokensWallet;\n  \n  address public bountyTokensWallet;\n  \n  uint public foundersTokensPercent;\n  \n  uint public bountyTokensPercent;\n  \n  uint public lockPeriod;\n\n  function setLockPeriod(uint newLockPeriod) public onlyOwner {\n    lockPeriod = newLockPeriod;\n  }\n\n  function setFoundersTokensPercent(uint newFoundersTokensPercent) public onlyOwner {\n    foundersTokensPercent = newFoundersTokensPercent;\n  }\n\n  function setBountyTokensPercent(uint newBountyTokensPercent) public onlyOwner {\n    bountyTokensPercent = newBountyTokensPercent;\n  }\n\n  function setFoundersTokensWallet(address newFoundersTokensWallet) public onlyOwner {\n    foundersTokensWallet = newFoundersTokensWallet;\n  }\n\n  function setBountyTokensWallet(address newBountyTokensWallet) public onlyOwner {\n    bountyTokensWallet = newBountyTokensWallet;\n  }\n\n  function finishMinting() public whenNotPaused onlyOwner {\n    uint summaryTokensPercent = bountyTokensPercent + foundersTokensPercent;\n    uint mintedTokens = token.totalSupply();\n    uint totalSupply = mintedTokens.mul(percentRate).div(percentRate.sub(summaryTokensPercent));\n    uint foundersTokens = totalSupply.mul(foundersTokensPercent).div(percentRate);\n    uint bountyTokens = totalSupply.mul(bountyTokensPercent).div(percentRate);\n    token.mint(this, foundersTokens);\n    token.transfer(foundersTokensWallet, foundersTokens);\n    token.mint(this, bountyTokens);\n    token.transfer(bountyTokensWallet, bountyTokens);\n    totalTokensMinted = totalTokensMinted.add(foundersTokens).add(bountyTokens);\n    token.finishMinting();\n  }\n\n}",
  "bytecode": "60606040526000600360146101000a81548160ff02191690831515021790555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611dae8061006f6000396000f300606060405260043610610112576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305d2035b1461011757806306fdde0314610144578063095ea7b3146101d257806314133a7c1461022c57806318160ddd1461026557806323b872dd1461028e578063282d3fdf14610307578063313ce5671461034957806340c10f191461037e57806366188463146103d857806370a08231146104325780637d64bcb41461047f5780638da5cb5b146104ac57806395d89b4114610501578063a9059cbb1461058f578063b1d6a2f0146105e9578063cbf9fe5f1461063e578063d73dd6231461068b578063dd62ed3e146106e5578063f2fde38b14610751575b600080fd5b341561012257600080fd5b61012a61078a565b604051808215151515815260200191505060405180910390f35b341561014f57600080fd5b61015761079d565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561019757808201518184015260208101905061017c565b50505050905090810190601f1680156101c45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101dd57600080fd5b610212600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506107d6565b604051808215151515815260200191505060405180910390f35b341561023757600080fd5b610263600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506108c8565b005b341561027057600080fd5b6102786109c0565b6040518082815260200191505060405180910390f35b341561029957600080fd5b6102ed600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506109c6565b604051808215151515815260200191505060405180910390f35b341561031257600080fd5b610347600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a29565b005b341561035457600080fd5b61035c610b54565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b341561038957600080fd5b6103be600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b59565b604051808215151515815260200191505060405180910390f35b34156103e357600080fd5b610418600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610cd8565b604051808215151515815260200191505060405180910390f35b341561043d57600080fd5b610469600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610f69565b6040518082815260200191505060405180910390f35b341561048a57600080fd5b610492610fb2565b604051808215151515815260200191505060405180910390f35b34156104b757600080fd5b6104bf6110cf565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561050c57600080fd5b6105146110f5565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610554578082015181840152602081019050610539565b50505050905090810190601f1680156105815780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561059a57600080fd5b6105cf600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061112e565b604051808215151515815260200191505060405180910390f35b34156105f457600080fd5b6105fc61118f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561064957600080fd5b610675600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506111b5565b6040518082815260200191505060405180910390f35b341561069657600080fd5b6106cb600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506111cd565b604051808215151515815260200191505060405180910390f35b34156106f057600080fd5b61073b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506113c9565b6040518082815260200191505060405180910390f35b341561075c57600080fd5b610788600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611450565b005b600360149054906101000a900460ff1681565b6040805190810160405280600a81526020017f43525950544f524959410000000000000000000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806109715750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561097c57600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60005481565b600042600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515610a1557600080fd5b610a208484846115a8565b90509392505050565b42600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054108015610afa5750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610af957508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b5b1515610b0557600080fd5b6201518081024201600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b601281565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148015610bc55750600360149054906101000a900460ff16155b1515610bd057600080fd5b610be58260005461168990919063ffffffff16565b600081905550610c3d82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461168990919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a26001905092915050565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610de9576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e7d565b610dfc83826116a790919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061105d5750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b80156110765750600360149054906101000a900460ff16155b151561108157600080fd5b6001600360146101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600481526020017f434959410000000000000000000000000000000000000000000000000000000081525081565b600042600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151561117d57600080fd5b61118783836116c0565b905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60056020528060005260406000206000915090505481565b600061125e82600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461168990919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114ac57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156114e857600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806116535750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b8061166a5750600360149054906101000a900460ff165b151561167557600080fd5b61168084848461179f565b90509392505050565b600080828401905083811015151561169d57fe5b8091505092915050565b60008282111515156116b557fe5b818303905092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061176b5750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b806117825750600360149054906101000a900460ff165b151561178d57600080fd5b6117978383611b5e565b905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156117dc57600080fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561182a57600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156118b557600080fd5b61190782600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546116a790919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061199c82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461168990919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611a6e82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546116a790919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611b9b57600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515611be957600080fd5b611c3b82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546116a790919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611cd082600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461168990919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050929150505600a165627a7a7230582062252dbfeb1f23a26f7a42a7dac79031e1ee039fb40b5a931c4b6b5ccb3df9be0029"
}