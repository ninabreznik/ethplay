{
  "address": "0x5137a403dd25e48de528912a4af62881e625d801",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HuddlToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-18\n*/\n\npragma solidity 0.4.24;\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: contracts/IHuddlToken.sol\n\ncontract IHuddlToken is IERC20{\n\n    function mint(address to, uint256 value)external returns (bool);\n    \n    function decimals() public view returns(uint8);\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() internal {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\n// File: contracts/HuddlDistribution.sol\n\ncontract HuddlDistribution is Ownable {\n    \n    using SafeMath for uint256;\n\n    IHuddlToken token;\n    \n    uint256 lastReleasedQuarter;\n\n    address public usersPool;\n    address public contributorsPool;\n    address public reservePool;\n\n    uint256 public inflationRate;\n    //4% == 400 (supports upto 2 decimal places) for 4.5% enter 450\n    uint16 public constant INFLATION_RATE_OF_CHANGE = 400;\n\n    uint256 public contributorDistPercent;\n    uint256 public reserveDistPercent;\n\n    uint16 public contributorROC;\n    uint16 public reserveROC;\n\n    uint8 public lastQuarter;//last quarter for which tokens were released\n    \n    bool public launched;\n    \n    //1000,000,000 (considering 18 decimal places)\n    uint256 public constant MAX_SUPPLY = 1000000000000000000000000000;\n\n    uint256[] public quarterSchedule;\n\n    event DistributionLaunched();\n\n    event TokensReleased(\n        uint256 indexed userShare, \n        uint256 indexed reserveShare, \n        uint256 indexed contributorShare\n    );\n\n    event ReserveDistributionPercentChanged(uint256 indexed newPercent);\n\n    event ContributorDistributionPercentChanged(uint256 indexed newPercent);\n\n    event ReserveROCChanged(uint256 indexed newROC);\n\n    event ContributorROCChanged(uint256 indexed newROC);\n\n    modifier distributionLaunched() {\n        require(launched, \"Distribution not launched\");\n        _;\n    }\n\n    modifier quarterRunning() {\n        require(\n            lastQuarter < 72 && now >= quarterSchedule[lastQuarter],\n            \"Quarter not started\"\n        );\n        _;\n    }\n\n    constructor(\n        address huddlTokenAddress, \n        address _usersPool, \n        address _contributorsPool, \n        address _reservePool\n    )\n        public \n    {\n\n        require(\n            huddlTokenAddress != address(0), \n            \"Please provide valid huddl token address\"\n        );\n        require(\n            _usersPool != address(0), \n            \"Please provide valid user pool address\"\n        );\n        require(\n            _contributorsPool != address(0), \n            \"Please provide valid contributors pool address\"\n        );\n        require(\n            _reservePool != address(0), \n            \"Please provide valid reserve pool address\"\n        );\n        \n        usersPool = _usersPool;\n        contributorsPool = _contributorsPool;\n        reservePool = _reservePool;\n\n        //considering 18 decimal places (10 * (10**18) / 100) 10%\n        inflationRate = 100000000000000000;\n\n        //considering 18 decimal places (33.333 * (10**18) /100)\n        contributorDistPercent = 333330000000000000; \n        reserveDistPercent = 333330000000000000;\n        \n        //Supports upto 2 decimal places, for 1% enter 100, for 1.5% enter 150\n        contributorROC = 100;//1%\n        reserveROC = 100;//1%\n\n        token = IHuddlToken(huddlTokenAddress);\n\n        //Initialize 72 quarterly token release schedule for distribution. Hard-coding token release time for each quarter for precision as required\n        quarterSchedule.push(1554076800); // 04/01/2019 (MM/DD/YYYY)\n        quarterSchedule.push(1561939200); // 07/01/2019 (MM/DD/YYYY)\n        quarterSchedule.push(1569888000); // 10/01/2019 (MM/DD/YYYY)\n        quarterSchedule.push(1577836800); // 01/01/2020 (MM/DD/YYYY)\n        quarterSchedule.push(1585699200); // 04/01/2020 (MM/DD/YYYY)\n        quarterSchedule.push(1593561600); // 07/01/2020 (MM/DD/YYYY)\n        quarterSchedule.push(1601510400); // 10/01/2020 (MM/DD/YYYY)\n        quarterSchedule.push(1609459200); // 01/01/2021 (MM/DD/YYYY)\n        quarterSchedule.push(1617235200); // 04/01/2021 (MM/DD/YYYY)\n        quarterSchedule.push(1625097600); // 07/01/2021 (MM/DD/YYYY)\n        quarterSchedule.push(1633046400); // 10/01/2021 (MM/DD/YYYY)\n        quarterSchedule.push(1640995200); // 01/01/2022 (MM/DD/YYYY)\n        quarterSchedule.push(1648771200); // 04/01/2022 (MM/DD/YYYY)\n        quarterSchedule.push(1656633600); // 07/01/2022 (MM/DD/YYYY)\n        quarterSchedule.push(1664582400); // 10/01/2022 (MM/DD/YYYY)\n        quarterSchedule.push(1672531200); // 01/01/2023 (MM/DD/YYYY)\n        quarterSchedule.push(1680307200); // 04/01/2023 (MM/DD/YYYY)\n        quarterSchedule.push(1688169600); // 07/01/2023 (MM/DD/YYYY)\n        quarterSchedule.push(1696118400); // 10/01/2023 (MM/DD/YYYY)\n        quarterSchedule.push(1704067200); // 01/01/2024 (MM/DD/YYYY)\n        quarterSchedule.push(1711929600); // 04/01/2024 (MM/DD/YYYY)\n        quarterSchedule.push(1719792000); // 07/01/2024 (MM/DD/YYYY)\n        quarterSchedule.push(1727740800); // 10/01/2024 (MM/DD/YYYY)\n        quarterSchedule.push(1735689600); // 01/01/2025 (MM/DD/YYYY)\n        quarterSchedule.push(1743465600); // 04/01/2025 (MM/DD/YYYY)\n        quarterSchedule.push(1751328000); // 07/01/2025 (MM/DD/YYYY)\n        quarterSchedule.push(1759276800); // 10/01/2025 (MM/DD/YYYY)\n        quarterSchedule.push(1767225600); // 01/01/2026 (MM/DD/YYYY)\n        quarterSchedule.push(1775001600); // 04/01/2026 (MM/DD/YYYY)\n        quarterSchedule.push(1782864000); // 07/01/2026 (MM/DD/YYYY)\n        quarterSchedule.push(1790812800); // 10/01/2026 (MM/DD/YYYY)\n        quarterSchedule.push(1798761600); // 01/01/2027 (MM/DD/YYYY)\n        quarterSchedule.push(1806537600); // 04/01/2027 (MM/DD/YYYY)\n        quarterSchedule.push(1814400000); // 07/01/2027 (MM/DD/YYYY)\n        quarterSchedule.push(1822348800); // 10/01/2027 (MM/DD/YYYY)\n        quarterSchedule.push(1830297600); // 01/01/2028 (MM/DD/YYYY)\n        quarterSchedule.push(1838160000); // 04/01/2028 (MM/DD/YYYY)\n        quarterSchedule.push(1846022400); // 07/01/2028 (MM/DD/YYYY)\n        quarterSchedule.push(1853971200); // 10/01/2028 (MM/DD/YYYY)\n        quarterSchedule.push(1861920000); // 01/01/2029 (MM/DD/YYYY)\n        quarterSchedule.push(1869696000); // 04/01/2029 (MM/DD/YYYY)\n        quarterSchedule.push(1877558400); // 07/01/2029 (MM/DD/YYYY)\n        quarterSchedule.push(1885507200); // 10/01/2029 (MM/DD/YYYY)\n        quarterSchedule.push(1893456000); // 01/01/2030 (MM/DD/YYYY)\n        quarterSchedule.push(1901232000); // 04/01/2030 (MM/DD/YYYY)\n        quarterSchedule.push(1909094400); // 07/01/2030 (MM/DD/YYYY)\n        quarterSchedule.push(1917043200); // 10/01/2030 (MM/DD/YYYY)\n        quarterSchedule.push(1924992000); // 01/01/2031 (MM/DD/YYYY)\n        quarterSchedule.push(1932768000); // 04/01/2031 (MM/DD/YYYY)\n        quarterSchedule.push(1940630400); // 07/01/2031 (MM/DD/YYYY)\n        quarterSchedule.push(1948579200); // 10/01/2031 (MM/DD/YYYY)\n        quarterSchedule.push(1956528000); // 01/01/2032 (MM/DD/YYYY)\n        quarterSchedule.push(1964390400); // 04/01/2032 (MM/DD/YYYY)\n        quarterSchedule.push(1972252800); // 07/01/2032 (MM/DD/YYYY)\n        quarterSchedule.push(1980201600); // 10/01/2032 (MM/DD/YYYY)\n        quarterSchedule.push(1988150400); // 01/01/2033 (MM/DD/YYYY)\n        quarterSchedule.push(1995926400); // 04/01/2033 (MM/DD/YYYY)\n        quarterSchedule.push(2003788800); // 07/01/2033 (MM/DD/YYYY)\n        quarterSchedule.push(2011737600); // 10/01/2033 (MM/DD/YYYY)\n        quarterSchedule.push(2019686400); // 01/01/2034 (MM/DD/YYYY)\n        quarterSchedule.push(2027462400); // 04/01/2034 (MM/DD/YYYY)\n        quarterSchedule.push(2035324800); // 07/01/2034 (MM/DD/YYYY)\n        quarterSchedule.push(2043273600); // 10/01/2034 (MM/DD/YYYY)\n        quarterSchedule.push(2051222400); // 01/01/2035 (MM/DD/YYYY)\n        quarterSchedule.push(2058998400); // 04/01/2035 (MM/DD/YYYY)\n        quarterSchedule.push(2066860800); // 07/01/2035 (MM/DD/YYYY)\n        quarterSchedule.push(2074809600); // 10/01/2035 (MM/DD/YYYY)\n        quarterSchedule.push(2082758400); // 01/01/2036 (MM/DD/YYYY)\n        quarterSchedule.push(2090620800); // 04/01/2036 (MM/DD/YYYY)\n        quarterSchedule.push(2098483200); // 07/01/2036 (MM/DD/YYYY)\n        quarterSchedule.push(2106432000); // 10/01/2036 (MM/DD/YYYY)\n        quarterSchedule.push(2114380800); // 01/01/2037 (MM/DD/YYYY)\n\n    }\n\n    /** \n    * @dev When the distribution will start the initial set of tokens will be distributed amongst users, reserve and contributors as per specs\n    * Before calling this method the owner must transfer all the initial supply tokens to this distribution contract\n    */\n    function launchDistribution() external onlyOwner {\n\n        require(!launched, \"Distribution already launched\");\n\n        launched = true;\n\n        (\n            uint256 userShare, \n            uint256 reserveShare, \n            uint256 contributorShare\n        ) = getDistributionShares(token.totalSupply());\n\n        token.transfer(usersPool, userShare);\n        token.transfer(contributorsPool, contributorShare);\n        token.transfer(reservePool, reserveShare);\n        adjustDistributionPercentage();\n        emit DistributionLaunched();\n    } \n\n    /** \n    * @dev This method allows owner of the contract to release tokens for the quarter.\n    * So suppose current quarter is 5 and previously released quarter is 3 then owner will have to send 2 transaction to release all tokens upto this quarter.\n    * First transaction will release tokens for quarter 4 and Second transaction will release tokens for quarter 5. This is done to reduce complexity.\n    */\n    function releaseTokens()\n        external \n        onlyOwner \n        distributionLaunched\n        quarterRunning//1. Check if quarter date has been reached\n        returns(bool)\n    {   \n        \n        //2. Increment quarter. Overflow will never happen as maximum quarters can be 72\n        lastQuarter = lastQuarter + 1;\n\n        //3. Calculate amount of tokens to be released\n        uint256 amount = getTokensToMint();\n\n        //4. Check if amount is greater than 0\n        require(amount>0, \"No tokens to be released\");\n\n        //5. Calculate share of user, reserve and contributor\n        (\n            uint256 userShare, \n            uint256 reserveShare, \n            uint256 contributorShare\n        ) = getDistributionShares(amount);\n\n        //6. Change inflation rate, for next release/quarter\n        adjustInflationRate();\n\n        //7. Change distribution percentage for next quarter\n        adjustDistributionPercentage();\n\n        //8. Mint and transfer tokens to respective pools\n        token.mint(usersPool, userShare);\n        token.mint(contributorsPool, contributorShare);\n        token.mint(reservePool, reserveShare);\n\n        //9. Emit event\n        emit TokensReleased(\n            userShare, \n            reserveShare, \n            contributorShare\n        );\n    }\n   \n    /** \n    * @dev This method will return the release time for upcoming quarter\n    */\n    function nextReleaseTime() external view returns(uint256 time) {\n        time = quarterSchedule[lastQuarter];\n    }\n\n    /** \n    * @dev This method will returns whether the next quarter's token can be released now or not\n    */\n    function canRelease() external view returns(bool release) {\n        release = now >= quarterSchedule[lastQuarter];\n    }\n\n    /** \n    * @dev Returns current distribution percentage for user pool\n    */\n    function userDistributionPercent() external view returns(uint256) {\n        uint256 totalPercent = 1000000000000000000;\n        return(\n            totalPercent.sub(contributorDistPercent.add(reserveDistPercent))\n        );\n    }\n\n    /** \n    * @dev Allows owner to change reserve distribution percentage for next quarter\n    * Consequent calculations will be done on this basis\n    * @param newPercent New percentage. Ex for 45.33% pass (45.33 * (10**18) /100) = 453330000000000000\n    */\n    function changeReserveDistributionPercent(\n        uint256 newPercent\n    )\n        external \n        onlyOwner\n    {\n        reserveDistPercent = newPercent;\n        emit ReserveDistributionPercentChanged(newPercent);\n    }\n\n    /** \n    * @dev Allows owner to change contributor distribution percentage for next quarter\n    * Consequent calculations will be done on this basis\n    * @param newPercent New percentage. Ex for 45.33% pass (45.33 * (10**18) /100) = 453330000000000000\n    */\n    function changeContributorDistributionPercent(\n        uint256 newPercent\n    )\n        external \n        onlyOwner\n    {\n        contributorDistPercent = newPercent;\n        emit ContributorDistributionPercentChanged(newPercent);\n    }\n\n    /** \n    * @dev Allows owner to change ROC for reserve pool\n    * @dev newROC New ROC. Ex- for 1% enter 100, for 1.5% enter 150\n    */\n    function changeReserveROC(uint16 newROC) external onlyOwner {\n        reserveROC = newROC;\n        emit ReserveROCChanged(newROC);\n    }\n\n    /** \n    * @dev Allows owner to change ROC for contributor pool\n    * @dev newROC New ROC. Ex- for 1% enter 100, for 1.5% enter 150\n    */\n    function changeContributorROC(uint16 newROC) external onlyOwner {\n        contributorROC = newROC;\n        emit ContributorROCChanged(newROC);\n    }\n\n    /** \n    * @dev This method returns the share of user, reserve and contributors for given token amount as per current distribution\n    * @param amount The amount of tokens for which the shares have to be calculated\n    */\n    function getDistributionShares(\n        uint256 amount\n    )\n        public \n        view \n        returns(\n            uint256 userShare, \n            uint256 reserveShare, \n            uint256 contributorShare\n        )\n    {\n        contributorShare = contributorDistPercent.mul(\n            amount.div(10**uint256(token.decimals()))\n        );\n\n        reserveShare = reserveDistPercent.mul(\n            amount.div(10**uint256(token.decimals()))\n        );\n\n        userShare = amount.sub(\n            contributorShare.add(reserveShare)\n        );\n\n        assert(\n            contributorShare.add(reserveShare).add(userShare) == amount\n        );\n    }\n\n    \n    /** \n    * @dev Returns amount of tokens to be minted in next release(quarter)\n    */    \n    function getTokensToMint() public view returns(uint256 amount) {\n        \n        if (MAX_SUPPLY == token.totalSupply()){\n            return 0;\n        }\n\n        //dividing by decimal places(18) since that is already multiplied in inflation rate\n        amount = token.totalSupply().div(\n            10 ** uint256(token.decimals())\n        ).mul(inflationRate);\n\n        if (amount.add(token.totalSupply()) > MAX_SUPPLY){\n            amount = MAX_SUPPLY.sub(token.totalSupply());\n        }\n    }\n\n    function adjustDistributionPercentage() private {\n        contributorDistPercent = contributorDistPercent.sub(\n            contributorDistPercent.mul(contributorROC).div(10000)\n        );\n\n        reserveDistPercent = reserveDistPercent.sub(\n            reserveDistPercent.mul(reserveROC).div(10000)\n        );\n    }\n\n    function adjustInflationRate() private {\n        inflationRate = inflationRate.sub(\n            inflationRate.mul(INFLATION_RATE_OF_CHANGE).div(10000)\n        );\n    }\n\n    \n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract ERC20 is IERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n\n  mapping (address => mapping (address => uint256)) private _allowed;\n\n  uint256 private _totalSupply;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param owner The address to query the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function transfer(address to, uint256 value) public returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    require(value <= _allowed[from][msg.sender]);\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    _transfer(from, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n  * @dev Transfer token for a specified addresses\n  * @param from The address to transfer from.\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function _transfer(address from, address to, uint256 value) internal {\n    require(value <= _balances[from]);\n    require(to != address(0));\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n\n  /**\n   * @dev Internal function that mints an amount of the token and assigns it to\n   * an account. This encapsulates the modification of balances such that the\n   * proper events are emitted.\n   * @param account The account that will receive the created tokens.\n   * @param value The amount that will be created.\n   */\n  function _mint(address account, uint256 value) internal {\n    require(account != 0);\n    _totalSupply = _totalSupply.add(value);\n    _balances[account] = _balances[account].add(value);\n    emit Transfer(address(0), account, value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burn(address account, uint256 value) internal {\n    require(account != 0);\n    require(value <= _balances[account]);\n\n    _totalSupply = _totalSupply.sub(value);\n    _balances[account] = _balances[account].sub(value);\n    emit Transfer(account, address(0), value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account, deducting from the sender's allowance for said account. Uses the\n   * internal burn function.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burnFrom(address account, uint256 value) internal {\n    require(value <= _allowed[account][msg.sender]);\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n      value);\n    _burn(account, value);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/access/Roles.sol\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an account access to this role\n   */\n  function add(Role storage role, address account) internal {\n    require(account != address(0));\n    require(!has(role, account));\n\n    role.bearer[account] = true;\n  }\n\n  /**\n   * @dev remove an account's access to this role\n   */\n  function remove(Role storage role, address account) internal {\n    require(account != address(0));\n    require(has(role, account));\n\n    role.bearer[account] = false;\n  }\n\n  /**\n   * @dev check if an account has this role\n   * @return bool\n   */\n  function has(Role storage role, address account)\n    internal\n    view\n    returns (bool)\n  {\n    require(account != address(0));\n    return role.bearer[account];\n  }\n}\n\n// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol\n\ncontract MinterRole {\n  using Roles for Roles.Role;\n\n  event MinterAdded(address indexed account);\n  event MinterRemoved(address indexed account);\n\n  Roles.Role private minters;\n\n  constructor() internal {\n    _addMinter(msg.sender);\n  }\n\n  modifier onlyMinter() {\n    require(isMinter(msg.sender));\n    _;\n  }\n\n  function isMinter(address account) public view returns (bool) {\n    return minters.has(account);\n  }\n\n  function addMinter(address account) public onlyMinter {\n    _addMinter(account);\n  }\n\n  function renounceMinter() public {\n    _removeMinter(msg.sender);\n  }\n\n  function _addMinter(address account) internal {\n    minters.add(account);\n    emit MinterAdded(account);\n  }\n\n  function _removeMinter(address account) internal {\n    minters.remove(account);\n    emit MinterRemoved(account);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\n\n/**\n * @title ERC20Mintable\n * @dev ERC20 minting logic\n */\ncontract ERC20Mintable is ERC20, MinterRole {\n  /**\n   * @dev Function to mint tokens\n   * @param to The address that will receive the minted tokens.\n   * @param value The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address to,\n    uint256 value\n  )\n    public\n    onlyMinter\n    returns (bool)\n  {\n    _mint(to, value);\n    return true;\n  }\n}\n\n// File: contracts/HuddlToken.sol\n\n/** \n* @dev Mintable Huddl Token\n* Initially deployer of the contract is only valid minter. Later on when distribution contract is deployed following steps needs to be followed-:\n* 1. Make distribution contract a valid minter\n* 2. Renounce miniter role for the token deployer address\n* 3. Transfer initial supply tokens to distribution contract address\n* 4. At launch of distribution contract transfer tokens to users, contributors and reserve as per monetary policy\n*/\ncontract HuddlToken is ERC20Mintable{\n\n    using SafeMath for uint256;\n\n    string private _name;\n    string private _symbol ;\n    uint8 private _decimals;\n\n    constructor(\n        string name, \n        string symbol, \n        uint8 decimals, \n        uint256 totalSupply\n    )\n        public \n    {\n    \n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n        \n        //The initial supply of tokens will be given to the deployer. Deployer will later transfer it to distribution contract\n        //At launch distribution contract will give those tokens as per policy to the users, contributors and reserve\n        _mint(msg.sender, totalSupply.mul(10 ** uint256(decimals)));\n    }\n\n    \n    /**\n    * @return the name of the token.\n    */\n    function name() public view returns(string) {\n        return _name;\n    }\n\n    /**\n    * @return the symbol of the token.\n    */\n    function symbol() public view returns(string) {\n        return _symbol;\n    }\n\n    /**\n    * @return the number of decimals of the token.\n    */\n    function decimals() public view returns(uint8) {\n        return _decimals;\n    }\n\n}\n\n// File: contracts/Migrations.sol\n\ncontract Migrations {\n    address public owner;\n    uint public last_completed_migration;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier restricted() {\n        if (msg.sender == owner) \n            _;\n    }\n\n    function setCompleted(uint completed) public restricted {\n        last_completed_migration = completed;\n    }\n\n    function upgrade(address new_address) public restricted {\n        Migrations upgraded = Migrations(new_address);\n        upgraded.setCompleted(last_completed_migration);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\"},{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b5060405162001c6038038062001c608339810180604052810190808051820192919060200180518201929190602001805190602001909291908051906020019092919050505062000071336200010b640100000000026401000000009004565b83600490805190602001906200008992919062000490565b508260059080519060200190620000a292919062000490565b5081600660006101000a81548160ff021916908360ff1602179055506200010133620000ec8460ff16600a0a846200017564010000000002620016a7179091906401000000009004565b620001b7640100000000026401000000009004565b505050506200053f565b6200012f816003620003166401000000000262001548179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b60008060008414156200018c5760009150620001b0565b82840290508284828115156200019e57fe5b04141515620001ac57600080fd5b8091505b5092915050565b60008273ffffffffffffffffffffffffffffffffffffffff1614151515620001de57600080fd5b6200020381600254620003d964010000000002620012a1179091906401000000009004565b6002819055506200026a816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054620003d964010000000002620012a1179091906401000000009004565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156200035357600080fd5b6200036e8282620003fb640100000000026401000000009004565b1515156200037b57600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6000808284019050838110151515620003f157600080fd5b8091505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156200043957600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620004d357805160ff191683800117855562000504565b8280016001018555821562000504579182015b8281111562000503578251825591602001919060010190620004e6565b5b50905062000513919062000517565b5090565b6200053c91905b80821115620005385760008160009055506001016200051e565b5090565b90565b611711806200054f6000396000f3006080604052600436106100db576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100e0578063095ea7b31461017057806318160ddd146101d557806323b872dd14610200578063313ce5671461028557806339509351146102b657806340c10f191461031b57806370a082311461038057806395d89b41146103d7578063983b2d561461046757806398650275146104aa578063a457c2d7146104c1578063a9059cbb14610526578063aa271e1a1461058b578063dd62ed3e146105e6575b600080fd5b3480156100ec57600080fd5b506100f561065d565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561013557808201518184015260208101905061011a565b50505050905090810190601f1680156101625780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561017c57600080fd5b506101bb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506106ff565b604051808215151515815260200191505060405180910390f35b3480156101e157600080fd5b506101ea61082c565b6040518082815260200191505060405180910390f35b34801561020c57600080fd5b5061026b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610836565b604051808215151515815260200191505060405180910390f35b34801561029157600080fd5b5061029a6109e8565b604051808260ff1660ff16815260200191505060405180910390f35b3480156102c257600080fd5b50610301600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506109ff565b604051808215151515815260200191505060405180910390f35b34801561032757600080fd5b50610366600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c36565b604051808215151515815260200191505060405180910390f35b34801561038c57600080fd5b506103c1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c60565b6040518082815260200191505060405180910390f35b3480156103e357600080fd5b506103ec610ca8565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561042c578082015181840152602081019050610411565b50505050905090810190601f1680156104595780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561047357600080fd5b506104a8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d4a565b005b3480156104b657600080fd5b506104bf610d6a565b005b3480156104cd57600080fd5b5061050c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d75565b604051808215151515815260200191505060405180910390f35b34801561053257600080fd5b50610571600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610fac565b604051808215151515815260200191505060405180910390f35b34801561059757600080fd5b506105cc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fc3565b604051808215151515815260200191505060405180910390f35b3480156105f257600080fd5b50610647600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fe0565b6040518082815260200191505060405180910390f35b606060048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106f55780601f106106ca576101008083540402835291602001916106f5565b820191906000526020600020905b8154815290600101906020018083116106d857829003601f168201915b5050505050905090565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561073c57600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600254905090565b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156108c357600080fd5b61095282600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461106790919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506109dd848484611088565b600190509392505050565b6000600660009054906101000a900460ff16905090565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610a3c57600080fd5b610acb82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112a190919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000610c4133610fc3565b1515610c4c57600080fd5b610c5683836112c2565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d405780601f10610d1557610100808354040283529160200191610d40565b820191906000526020600020905b815481529060010190602001808311610d2357829003601f168201915b5050505050905090565b610d5333610fc3565b1515610d5e57600080fd5b610d6781611400565b50565b610d733361145a565b565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610db257600080fd5b610e4182600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461106790919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000610fb9338484611088565b6001905092915050565b6000610fd98260036114b490919063ffffffff16565b9050919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008083831115151561107957600080fd5b82840390508091505092915050565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481111515156110d557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561111157600080fd5b611162816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461106790919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506111f5816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112a190919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b60008082840190508381101515156112b857600080fd5b8091505092915050565b60008273ffffffffffffffffffffffffffffffffffffffff16141515156112e857600080fd5b6112fd816002546112a190919063ffffffff16565b600281905550611354816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112a190919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b61141481600361154890919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b61146e8160036115f890919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669260405160405180910390a250565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156114f157600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561158457600080fd5b61158e82826114b4565b15151561159a57600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561163457600080fd5b61163e82826114b4565b151561164957600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008060008414156116bc57600091506116de565b82840290508284828115156116cd57fe5b041415156116da57600080fd5b8091505b50929150505600a165627a7a72305820b9041394ac31af17d12ea8094b72ba7ede670a5ade36f00f4aebe61e12f32be50029000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000005f5e1000000000000000000000000000000000000000000000000000000000000000005487564646c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005485544444c000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000005f5e1000000000000000000000000000000000000000000000000000000000000000005487564646c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005485544444c000000000000000000000000000000000000000000000000000000"
}