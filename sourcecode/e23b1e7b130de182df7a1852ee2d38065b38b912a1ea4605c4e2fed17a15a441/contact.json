{
  "address": "0x702bcee7f521060eacde63e487a4c36ef7405f50",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PLAASCrowdsale",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-15\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0 uint256 c = a / b;\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n */\ncontract token { function transfer(address receiver, uint amount){  } }\ncontract PLAASCrowdsale {\n  using SafeMath for uint256;\n\n  \n  // address where funds are collected\n  address public wallet;\n  // token address\n  address public addressOfTokenUsedAsReward;\n\n  uint256 public price = 1000;\n\n  token tokenReward;\n\n  // mapping (address => uint) public contributions;\n  \n\n  // amount of raised money in wei\n  uint256 public weiRaised;\n\n  /**\n   * event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n\n  function PLAASCrowdsale() {\n    //You will change this to your wallet where you need the ETH \n    wallet = 0xA8dd9A671d64DB4380AcA5af8976aE6F863fF169;\n\n    //Here will come the checksum address we got\n    addressOfTokenUsedAsReward = 0x8d9626315e8025b81c3bdb926db4c51dde237f52;\n\n\n    tokenReward = token(addressOfTokenUsedAsReward);\n  }\n\n  bool public started = true;\n\n  function startSale(){\n    if (msg.sender != wallet) throw;\n    started = true;\n  }\n\n  function stopSale(){\n    if(msg.sender != wallet) throw;\n    started = false;\n  }\n\n  function setPrice(uint256 _price){\n    if(msg.sender != wallet) throw;\n    price = _price;\n  }\n  function changeWallet(address _wallet){\n  \tif(msg.sender != wallet) throw;\n  \twallet = _wallet;\n  }\n\n  function changeTokenReward(address _token){\n    if(msg.sender!=wallet) throw;\n    tokenReward = token(_token);\n    addressOfTokenUsedAsReward = _token;\n  }\n\n  // fallback function can be used to buy tokens\n  function () payable {\n    buyTokens(msg.sender);\n  }\n\n  // low level token purchase function\n  function buyTokens(address beneficiary) payable {\n    require(beneficiary != 0x0);\n    require(validPurchase());\n\n    uint256 weiAmount = msg.value;\n\n\n    // calculate token amount to be sent\n    uint256 tokens = ((weiAmount) * price);\n   \n    weiRaised = weiRaised.add(weiAmount);\n    \n   \n    tokenReward.transfer(beneficiary, tokens);\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n    forwardFunds();\n  }\n\n  // send ether to the fund collection wallet\n  // override to create custom fund forwarding mechanisms\n  function forwardFunds() internal {\n    // wallet.transfer(msg.value);\n    if (!wallet.send(msg.value)) {\n      throw;\n    }\n  }\n\n  // @return true if the transaction can buy tokens\n  function validPurchase() internal constant returns (bool) {\n    bool withinPeriod = started;\n    bool nonZeroPurchase = msg.value != 0;\n    return withinPeriod && nonZeroPurchase;\n  }\n\n  function withdrawTokens(uint256 _amount) {\n    if(msg.sender!=wallet) throw;\n    tokenReward.transfer(wallet,_amount);\n  }\n}",
  "bytecode": "60806040526103e86002556001600560006101000a81548160ff02191690831515021790555034801561003157600080fd5b5073a8dd9a671d64db4380aca5af8976ae6f863ff1696000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550738d9626315e8025b81c3bdb926db4c51dde237f52600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610a698061014d6000396000f3006080604052600436106100ba576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631f2698ab146100c5578063315a095d146100f457806336044ecc146101215780634042b66f14610164578063521eb2731461018f57806388adbf8f146101e657806391b7f5ed1461023d57806398b9a2dc1461026a578063a035b1fe146102ad578063b66a0e5d146102d8578063e36b0b37146102ef578063ec8ac4d814610306575b6100c33361033c565b005b3480156100d157600080fd5b506100da6104f4565b604051808215151515815260200191505060405180910390f35b34801561010057600080fd5b5061011f60048036038101908080359060200190929190505050610507565b005b34801561012d57600080fd5b50610162600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610663565b005b34801561017057600080fd5b50610179610743565b6040518082815260200191505060405180910390f35b34801561019b57600080fd5b506101a4610749565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101f257600080fd5b506101fb61076e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561024957600080fd5b5061026860048036038101908080359060200190929190505050610794565b005b34801561027657600080fd5b506102ab600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107f9565b005b3480156102b957600080fd5b506102c2610897565b6040518082815260200191505060405180910390f35b3480156102e457600080fd5b506102ed61089d565b005b3480156102fb57600080fd5b50610304610915565b005b61033a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061033c565b005b60008060008373ffffffffffffffffffffffffffffffffffffffff161415151561036557600080fd5b61036d61098d565b151561037857600080fd5b34915060025482029050610397826004546109bc90919063ffffffff16565b600481905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561046257600080fd5b505af1158015610476573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad188484604051808381526020018281526020019250505060405180910390a36104ef6109da565b505050565b600560009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561056257600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561064857600080fd5b505af115801561065c573d6000803e3d6000fd5b5050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156106be57600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60045481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107ef57600080fd5b8060028190555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561085457600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60025481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108f857600080fd5b6001600560006101000a81548160ff021916908315150217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561097057600080fd5b6000600560006101000a81548160ff021916908315150217905550565b6000806000600560009054906101000a900460ff169150600034141590508180156109b55750805b9250505090565b60008082840190508381101515156109d057fe5b8091505092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501515610a3b57600080fd5b5600a165627a7a723058205cbdb593522552dbf145f720a9be740e7031ea963dfc8c840ca8b094433337c80029"
}