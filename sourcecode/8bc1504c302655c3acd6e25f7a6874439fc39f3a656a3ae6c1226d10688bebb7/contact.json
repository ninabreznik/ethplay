{
  "address": "0x5f937f2556fda10f5ebac54a902a93e5e7504c3e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "INTToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-08\n*/\n\npragma solidity ^0.4.24;\n\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\ncontract ERC20 {\n\n    function name() public view returns (string);\n    function symbol() public view returns (string);\n    function decimals() public view returns (uint8);\n\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n\n}\n\ncontract ERC223 {\n    function transferdata(address to, uint value, bytes data) payable public;\n    event Transferdata(address indexed from, address indexed to, uint value, bytes indexed data);\n}\n\n\ncontract ERC223ReceivingContract {\n    function tokenFallback(address _from, uint _value, bytes _data) public;\n}\n\n\ncontract ERCAddressFrozenFund is ERC20{\n\n    using SafeMath for uint;\n\n    struct LockedWallet {\n        address owner; // the owner of the locked wallet, he/she must secure the private key\n        uint256 amount; //\n        uint256 start; // timestamp when \"lock\" function is executed\n        uint256 duration; // duration period in seconds. if we want to lock an amount for\n        uint256 release;  // release = start+duration\n        // \"start\" and \"duration\" is for bookkeeping purpose only. Only \"release\" will be actually checked once unlock function is called\n    }\n\n\n    address public owner;\n\n    uint256 _lockedSupply;\n\n    mapping (address => LockedWallet) addressFrozenFund; //address -> (deadline, amount),freeze fund of an address its so that no token can be transferred out until deadline\n\n    function mintToken(address _owner, uint256 amount) internal;\n    function burnToken(address _owner, uint256 amount) internal;\n\n    event LockBalance(address indexed addressOwner, uint256 releasetime, uint256 amount);\n    event LockSubBalance(address indexed addressOwner, uint256 index, uint256 releasetime, uint256 amount);\n    event UnlockBalance(address indexed addressOwner, uint256 releasetime, uint256 amount);\n    event UnlockSubBalance(address indexed addressOwner, uint256 index, uint256 releasetime, uint256 amount);\n\n    function lockedSupply() public view returns (uint256) {\n        return _lockedSupply;\n    }\n\n    function releaseTimeOf(address _owner) public view returns (uint256 releaseTime) {\n        return addressFrozenFund[_owner].release;\n    }\n\n    function lockedBalanceOf(address _owner) public view returns (uint256 lockedBalance) {\n        return addressFrozenFund[_owner].amount;\n    }\n\n    function lockBalance(uint256 duration, uint256 amount) public{\n\n        address _owner = msg.sender;\n\n        require(address(0) != _owner && amount > 0 && duration > 0 && balanceOf(_owner) >= amount);\n        require(addressFrozenFund[_owner].release <= now && addressFrozenFund[_owner].amount == 0);\n\n        addressFrozenFund[_owner].start = now;\n        addressFrozenFund[_owner].duration = duration;\n        addressFrozenFund[_owner].release = SafeMath.add(addressFrozenFund[_owner].start, duration);\n        addressFrozenFund[_owner].amount = amount;\n        burnToken(_owner, amount);\n        _lockedSupply = SafeMath.add(_lockedSupply, lockedBalanceOf(_owner));\n\n        emit LockBalance(_owner, addressFrozenFund[_owner].release, amount);\n    }\n\n    //_owner must call this function explicitly to release locked balance in a locked wallet\n    function releaseLockedBalance() public {\n\n        address _owner = msg.sender;\n\n        require(address(0) != _owner && lockedBalanceOf(_owner) > 0 && releaseTimeOf(_owner) <= now);\n        mintToken(_owner, lockedBalanceOf(_owner));\n        _lockedSupply = SafeMath.sub(_lockedSupply, lockedBalanceOf(_owner));\n\n        emit UnlockBalance(_owner, addressFrozenFund[_owner].release, lockedBalanceOf(_owner));\n\n        delete addressFrozenFund[_owner];\n    }\n\n}\n\ncontract INTToken is ERC223, ERCAddressFrozenFund {\n\n    using SafeMath for uint;\n\n    string internal _name;\n    string internal _symbol;\n    uint8 internal _decimals;\n    uint256 internal _totalSupply;\n    address public fundsWallet;\n    uint256 internal fundsWalletChanged;\n\n    mapping (address => uint256) internal balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n\n    constructor() public {\n        _symbol = 'INT';\n        _name = 'inChat Token';\n        _decimals = 8;\n        _totalSupply = 10000000000000000;\n        balances[msg.sender] = _totalSupply;\n        fundsWallet = msg.sender;\n\n        owner = msg.sender;\n\n        fundsWalletChanged = 0;\n    }\n\n    function changeFundsWallet(address newOwner) public{\n        require(msg.sender == fundsWallet && fundsWalletChanged == 0);\n\n        balances[newOwner] = balances[fundsWallet];\n        balances[fundsWallet] = 0;\n        fundsWallet = newOwner;\n        fundsWalletChanged = 1;\n    }\n\n    function name() public view returns (string) {\n        return _name;\n    }\n\n    function symbol() public view returns (string) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function mintToken(address _owner, uint256 amount) internal {\n        balances[_owner] = SafeMath.add(balances[_owner], amount);\n    }\n\n    function burnToken(address _owner, uint256 amount) internal {\n        balances[_owner] = SafeMath.sub(balances[_owner], amount);\n    }\n\n    function() payable public {\n\n        require(msg.sender == address(0));//disable ICO crowd sale 禁止ICO资金募集，因为本合约已经过了募集阶段\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        if(isContract(_to)) {\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n            bytes memory _data = new bytes(1);\n            receiver.tokenFallback(msg.sender, _value, _data);\n        }\n\n        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\n        balances[_to] = SafeMath.add(balances[_to], _value);\n        emit Transfer(msg.sender, _to, _value);\n\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        if(_from == fundsWallet){\n            require(_value <= balances[_from]);\n        }\n\n        if(isContract(_to)) {\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n            bytes memory _data = new bytes(1);\n            receiver.tokenFallback(msg.sender, _value, _data);\n        }\n\n        balances[_from] = SafeMath.sub(balances[_from], _value);\n        balances[_to] = SafeMath.add(balances[_to], _value);\n        allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);\n\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0)); \n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = SafeMath.add(allowed[msg.sender][_spender], _addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = SafeMath.sub(oldValue, _subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function transferdata(address _to, uint _value, bytes _data) public payable {\n        require(_value > 0 );\n        if(isContract(_to)) {\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n            receiver.tokenFallback(msg.sender, _value, _data);\n        }\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\n        emit Transferdata(msg.sender, _to, _value, _data);\n    }\n\n    function isContract(address _addr) private view returns (bool is_contract) {\n        uint length;\n        assembly {\n        //retrieve the size of the code on target address, this needs assembly\n            length := extcodesize(_addr)\n        }\n        return (length>0);\n    }\n\n    function transferMultiple(address[] _tos, uint256[] _values, uint count)  payable public returns (bool) {\n        uint256 total = 0;\n        uint256 total_prev = 0;\n        uint i = 0;\n\n        for(i=0;i<count;i++){\n            require(_tos[i] != address(0) && !isContract(_tos[i]));//_tos must no contain any contract address\n\n            if(isContract(_tos[i])) {\n                ERC223ReceivingContract receiver = ERC223ReceivingContract(_tos[i]);\n                bytes memory _data = new bytes(1);\n                receiver.tokenFallback(msg.sender, _values[i], _data);\n            }\n\n            total_prev = total;\n            total = SafeMath.add(total, _values[i]);\n            require(total >= total_prev);\n        }\n\n        require(total <= balances[msg.sender]);\n\n        for(i=0;i<count;i++){\n            balances[msg.sender] = SafeMath.sub(balances[msg.sender], _values[i]);\n            balances[_tos[i]] = SafeMath.add(balances[_tos[i]], _values[i]);\n            emit Transfer(msg.sender, _tos[i], _values[i]);\n        }\n\n        return true;\n    }\n}",
  "bytecode": "60806040523480156200001157600080fd5b506040805180820190915260038082527f494e54000000000000000000000000000000000000000000000000000000000060209092019182526200005891600491620000f3565b5060408051808201909152600c8082527f696e4368617420546f6b656e000000000000000000000000000000000000000060209092019182526200009f91600391620000f3565b506005805460ff19166008908117909155662386f26fc1000060068190553360008181526009602052604081209290925560078054600160a060020a03199081168317909155825416178155905562000198565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200013657805160ff191683800117855562000166565b8280016001018555821562000166579182015b828111156200016657825182559160200191906001019062000149565b506200017492915062000178565b5090565b6200019591905b808211156200017457600081556001016200017f565b90565b6116e780620001a86000396000f30060806040526004361061011c5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610129578063095ea7b3146101b357806318160ddd146101eb578063191723ed146102125780632194f3a21461022d57806323b872dd1461025e578063286c241a14610288578063313ce567146102a9578063323661f6146102d457806359355736146102e9578063661884631461030a57806370a082311461032e5780637d6f0d5f1461034f5780638da5cb5b146103705780638f5ab3ab1461038557806395d89b41146103e1578063a201ed8b146103f6578063a9059cbb14610479578063ca5c7b911461049d578063d73dd623146104b2578063dd62ed3e146104d6575b331561012757600080fd5b005b34801561013557600080fd5b5061013e6104fd565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610178578181015183820152602001610160565b50505050905090810190601f1680156101a55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101bf57600080fd5b506101d7600160a060020a0360043516602435610593565b604080519115158252519081900360200190f35b3480156101f757600080fd5b50610200610635565b60408051918252519081900360200190f35b34801561021e57600080fd5b5061012760043560243561063b565b34801561023957600080fd5b5061024261079b565b60408051600160a060020a039092168252519081900360200190f35b34801561026a57600080fd5b506101d7600160a060020a03600435811690602435166044356107aa565b34801561029457600080fd5b50610200600160a060020a0360043516610a70565b3480156102b557600080fd5b506102be610a8e565b6040805160ff9092168252519081900360200190f35b3480156102e057600080fd5b50610127610a97565b3480156102f557600080fd5b50610200600160a060020a0360043516610ba4565b34801561031657600080fd5b506101d7600160a060020a0360043516602435610bc2565b34801561033a57600080fd5b50610200600160a060020a0360043516610cac565b34801561035b57600080fd5b50610127600160a060020a0360043516610cc7565b34801561037c57600080fd5b50610242610d48565b604080516020600460443581810135601f8101849004840285018401909552848452610127948235600160a060020a0316946024803595369594606494920191908190840183828082843750949750610d579650505050505050565b3480156103ed57600080fd5b5061013e610f6f565b604080516020600480358082013583810280860185019096528085526101d795369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497505093359450610fd09350505050565b34801561048557600080fd5b506101d7600160a060020a0360043516602435611366565b3480156104a957600080fd5b50610200611561565b3480156104be57600080fd5b506101d7600160a060020a0360043516602435611567565b3480156104e257600080fd5b50610200600160a060020a03600435811690602435166115fa565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105895780601f1061055e57610100808354040283529160200191610589565b820191906000526020600020905b81548152906001019060200180831161056c57829003601f168201915b5050505050905090565b60008115806105c35750336000908152600a60209081526040808320600160a060020a0387168452909152902054155b15156105ce57600080fd5b336000818152600a60209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60065490565b33801580159061064b5750600082115b80156106575750600083115b801561066b57508161066882610cac565b10155b151561067657600080fd5b600160a060020a03811660009081526002602052604090206004015442108015906106ba5750600160a060020a038116600090815260026020526040902060010154155b15156106c557600080fd5b600160a060020a0381166000908152600260208190526040909120429181018290556003018490556106f79084611625565b600160a060020a03821660009081526002602052604090206004810191909155600101829055610727818361163b565b61073b60015461073683610ba4565b611625565b600155600160a060020a03811660008181526002602090815260409182902060040154825190815290810185905281517f4a5ed3c7d7f33c8c80b3444f04527e6d3bee954c19dac37176e4aa1a86ce8728929181900390910190a2505050565b600754600160a060020a031681565b6000806060600160a060020a03851615156107c457600080fd5b600160a060020a0386166000908152600960205260409020548411156107e957600080fd5b600160a060020a0386166000908152600a6020908152604080832033845290915290205484111561081957600080fd5b600754600160a060020a038781169116141561085457600160a060020a03861660009081526009602052604090205484111561085457600080fd5b61085d8561167e565b1561097357604080516001808252818301909252869350906020808301908038833950506040517fc0ee0b8a000000000000000000000000000000000000000000000000000000008152336004820181815260248301899052606060448401908152855160648501528551959650600160a060020a0388169563c0ee0b8a955092938a938893929160840190602085019080838360005b8381101561090c5781810151838201526020016108f4565b50505050905090810190601f1680156109395780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561095a57600080fd5b505af115801561096e573d6000803e3d6000fd5b505050505b600160a060020a0386166000908152600960205260409020546109969085611686565b600160a060020a0380881660009081526009602052604080822093909355908716815220546109c59085611625565b600160a060020a038087166000908152600960209081526040808320949094559189168152600a82528281203382529091522054610a039085611686565b600160a060020a038088166000818152600a6020908152604080832033845282529182902094909455805188815290519289169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a350600195945050505050565b600160a060020a031660009081526002602052604090206004015490565b60055460ff1690565b338015801590610aaf57506000610aad82610ba4565b115b8015610ac3575042610ac082610a70565b11155b1515610ace57600080fd5b610ae081610adb83610ba4565b611698565b610af4600154610aef83610ba4565b611686565b600155600160a060020a0381166000818152600260205260409020600401547ff2a470701c29165d36d10c35e36dac1dc397594484071f35785a55c8589be0fa90610b3e84610ba4565b6040805192835260208301919091528051918290030190a2600160a060020a031660009081526002602081905260408220805473ffffffffffffffffffffffffffffffffffffffff19168155600181018390559081018290556003810182905560040155565b600160a060020a031660009081526002602052604090206001015490565b336000908152600a60209081526040808320600160a060020a038616845290915281205480831115610c1757336000908152600a60209081526040808320600160a060020a0388168452909152812055610c46565b610c218184611686565b336000908152600a60209081526040808320600160a060020a03891684529091529020555b336000818152600a60209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526009602052604090205490565b600754600160a060020a031633148015610ce15750600854155b1515610cec57600080fd5b60078054600160a060020a0390811660009081526009602052604080822054948316808352818320959095558354909216815290812055805473ffffffffffffffffffffffffffffffffffffffff191690911790556001600855565b600054600160a060020a031681565b6000808311610d6557600080fd5b610d6e8461167e565b15610e6257506040517fc0ee0b8a0000000000000000000000000000000000000000000000000000000081523360048201818152602483018590526060604484019081528451606485015284518794600160a060020a0386169463c0ee0b8a9490938993899360840190602085019080838360005b83811015610dfb578181015183820152602001610de3565b50505050905090810190601f168015610e285780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610e4957600080fd5b505af1158015610e5d573d6000803e3d6000fd5b505050505b33600090815260096020526040902054610e82908463ffffffff61168616565b3360009081526009602052604080822092909255600160a060020a03861681522054610eb4908463ffffffff61162516565b600160a060020a0385166000908152600960209081526040918290209290925551835184928291908401908083835b60208310610f025780518252601f199092019160209182019101610ee3565b51815160209384036101000a6000190180199092169116179052604080519290940182900382208983529351939550600160a060020a038a16945033937f480cafb52588f1f935953a2921bf5b59fb3eb22fbb6bb8b3ed12739f8ed40c339350918290030190a450505050565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105895780601f1061055e57610100808354040283529160200191610589565b60008080808060605b868310156111e15788516000908a9085908110610ff257fe5b90602001906020020151600160a060020a031614158015611030575061102e898481518110151561101f57fe5b9060200190602002015161167e565b155b151561103b57600080fd5b61104c898481518110151561101f57fe5b156111a357888381518110151561105f57fe5b6020908102909101015160408051600180825281830190925291935081602001602082028038833901905050905081600160a060020a031663c0ee0b8a338a868151811015156110ab57fe5b90602001906020020151846040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561113c578181015183820152602001611124565b50505050905090810190601f1680156111695780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561118a57600080fd5b505af115801561119e573d6000803e3d6000fd5b505050505b8493506111c78589858151811015156111b857fe5b90602001906020020151611625565b9450838510156111d657600080fd5b600190920191610fd9565b336000908152600960205260409020548511156111fd57600080fd5b600092505b868310156113575733600090815260096020526040902054885161123c91908a908690811061122d57fe5b90602001906020020151611686565b3360009081526009602081905260408220929092558a5161129e9291908c908790811061126557fe5b90602001906020020151600160a060020a0316600160a060020a031681526020019081526020016000205489858151811015156111b857fe5b600960008b868151811015156112b057fe5b6020908102909101810151600160a060020a031682528101919091526040016000205588518990849081106112e157fe5b90602001906020020151600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8a8681518110151561132d57fe5b906020019060200201516040518082815260200191505060405180910390a3600190920191611202565b50600198975050505050505050565b6000806060600160a060020a038516151561138057600080fd5b3360009081526009602052604090205484111561139c57600080fd5b6113a58561167e565b156114bb57604080516001808252818301909252869350906020808301908038833950506040517fc0ee0b8a000000000000000000000000000000000000000000000000000000008152336004820181815260248301899052606060448401908152855160648501528551959650600160a060020a0388169563c0ee0b8a955092938a938893929160840190602085019080838360005b8381101561145457818101518382015260200161143c565b50505050905090810190601f1680156114815780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1580156114a257600080fd5b505af11580156114b6573d6000803e3d6000fd5b505050505b336000908152600960205260409020546114d59085611686565b3360009081526009602052604080822092909255600160a060020a038716815220546115019085611625565b600160a060020a0386166000818152600960209081526040918290209390935580518781529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3506001949350505050565b60015490565b336000908152600a60209081526040808320600160a060020a03861684529091528120546115959083611625565b336000818152600a60209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a039182166000908152600a6020908152604080832093909416825291909152205490565b60008282018381101561163457fe5b9392505050565b600160a060020a03821660009081526009602052604090205461165e9082611686565b600160a060020a0390921660009081526009602052604090209190915550565b6000903b1190565b60008282111561169257fe5b50900390565b600160a060020a03821660009081526009602052604090205461165e90826116255600a165627a7a723058205edc57843325aaec7e16d4809121ab15c143cd84716f2c7f57cf5a6bacc3cc5f0029"
}