{
  "address": "0x41C24232452057b9c812A94f84b8643Ee0253C44",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DAORegistry",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-21\n*/\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     * @notice Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: contracts/DAORegistry.sol\n\npragma solidity ^0.5.4;\n\n\ncontract DAORegistry is Ownable {\n\n    event Propose(address indexed _avatar);\n    event Register(address indexed _avatar, string _name);\n    event UnRegister(address indexed _avatar);\n\n    mapping(string=>bool) private registry;\n\n    constructor(address _owner) public {\n        transferOwnership(_owner);\n    }\n\n    function propose(address _avatar) public {\n        emit Propose(_avatar);\n    }\n\n    function register(address _avatar, string memory _name) public onlyOwner {\n        require(!registry[_name]);\n        registry[_name] = true;\n        emit Register(_avatar, _name);\n    }\n\n    function unRegister(address _avatar) public onlyOwner {\n        emit UnRegister(_avatar);\n    }\n\n    //This getter is needed because Dynamically-sized keys for public mappings are not supported.\n    function isRegister(string memory _name) public view returns(bool) {\n        return registry[_name];\n    }\n\n}",
  "bytecode": "608060405234801561001057600080fd5b506040516020806107e48339810180604052602081101561003057600080fd5b505160008054600160a060020a0319163317808255604051600160a060020a039190911691906000805160206107c4833981519152908290a361007b81640100000000610081810204565b50610121565b6100926401000000006100b2810204565b151561009d57600080fd5b6100af816401000000006100c3810204565b50565b600054600160a060020a0316331490565b600160a060020a03811615156100d857600080fd5b60008054604051600160a060020a03808516939216916000805160206107c483398151915291a360008054600160a060020a031916600160a060020a0392909216919091179055565b610694806101306000396000f3fe608060405234801561001057600080fd5b50600436106100a5576000357c010000000000000000000000000000000000000000000000000000000090048063715018a611610078578063715018a6146102685780638da5cb5b146102705780638f32d59b14610294578063f2fde38b1461029c576100a5565b806301267951146100aa578063178d680d146100d257806327c956251461018c57806332434a2e146101b2575b600080fd5b6100d0600480360360208110156100c057600080fd5b5035600160a060020a03166102c2565b005b610178600480360360208110156100e857600080fd5b81019060208101813564010000000081111561010357600080fd5b82018360208201111561011557600080fd5b8035906020019184600183028401116401000000008311171561013757600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506102f9945050505050565b604080519115158252519081900360200190f35b6100d0600480360360208110156101a257600080fd5b5035600160a060020a0316610364565b6100d0600480360360408110156101c857600080fd5b600160a060020a0382351691908101906040810160208201356401000000008111156101f357600080fd5b82018360208201111561020557600080fd5b8035906020019184600183028401116401000000008311171561022757600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506103ae945050505050565b6100d0610542565b6102786105ac565b60408051600160a060020a039092168252519081900360200190f35b6101786105bb565b6100d0600480360360208110156102b257600080fd5b5035600160a060020a03166105cc565b604051600160a060020a038216907fd16d50d8d566a5c6f1f5d89ffcfa821adc9d9f4e780d153563abc82e943ff0e390600090a250565b60006001826040518082805190602001908083835b6020831061032d5780518252601f19909201916020918201910161030e565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460ff16949350505050565b61036c6105bb565b151561037757600080fd5b604051600160a060020a038216907f630f28bb6372d0a747db8dcdb1a523bd9d875ddd96649c705325e60b239fc3c390600090a250565b6103b66105bb565b15156103c157600080fd5b6001816040518082805190602001908083835b602083106103f35780518252601f1990920191602091820191016103d4565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460ff16159150610430905057600080fd5b600180826040518082805190602001908083835b602083106104635780518252601f199092019160209182019101610444565b51815160209384036101000a6000190180199092169116179052920194855250604080519485900382018520805460ff1916961515969096179095558084528551848201528551600160a060020a038816957f6ba0831d2f62ae5cbf7214bcc1d79c5da1d705f12811efda0beaa840006f874e9588955093508392908301919085019080838360005b838110156105045781810151838201526020016104ec565b50505050905090810190601f1680156105315780820380516001836020036101000a031916815260200191505b509250505060405180910390a25050565b61054a6105bb565b151561055557600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031690565b600054600160a060020a0316331490565b6105d46105bb565b15156105df57600080fd5b6105e8816105eb565b50565b600160a060020a038116151561060057600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905556fea165627a7a723058205aee1695bcd8e69ce2eee9198df035cce172d920f0ec1196e516a0ec5b40bb1a00298be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0000000000000000000000000d3ba32dd207db75f535001fac749c925423d8a6f",
  "constructorArguments": "000000000000000000000000d3ba32dd207db75f535001fac749c925423d8a6f"
}