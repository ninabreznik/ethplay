{
  "address": "0xb06590e0b9fe47ff9abad84919a3e40bd59b16d4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AmmuNationStore",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-05\n*/\n\n// produced by the Solididy File Flattener (c) David Appleton 2018\n// contact : [emailÂ protected]\n// released under Apache 2.0 licence\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\ncontract Claimable is Ownable {\n  address public pendingOwner;\n\n  /**\n   * @dev Modifier throws if called by any account other than the pendingOwner.\n   */\n  modifier onlyPendingOwner() {\n    require(msg.sender == pendingOwner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to set the pendingOwner address.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    pendingOwner = newOwner;\n  }\n\n  /**\n   * @dev Allows the pendingOwner address to finalize the transfer.\n   */\n  function claimOwnership() onlyPendingOwner public {\n    emit OwnershipTransferred(owner, pendingOwner);\n    owner = pendingOwner;\n    pendingOwner = address(0);\n  }\n}\n\ncontract AmmuNationStore is Claimable{\n\n    using SafeMath for uint256;\n\n    GTAInterface public token;\n\n    uint256 private tokenSellPrice; //wei\n    uint256 private tokenBuyPrice; //wei\n    uint256 public buyDiscount; //%\n\n    event Buy(address buyer, uint256 amount, uint256 payed);\n    event Robbery(address robber);\n\n    constructor (address _tokenAddress) public {\n        token = GTAInterface(_tokenAddress);\n    }\n\n    /** Owner's operations to fill and empty the stock */\n\n    // Important! remember to call GoldenThalerToken(address).approve(this, amount)\n    // or this contract will not be able to do the transfer on your behalf.\n    function depositGTA(uint256 amount) onlyOwner public {\n        require(token.transferFrom(msg.sender, this, amount), \"Insufficient funds\");\n    }\n\n    function withdrawGTA(uint256 amount) onlyOwner public {\n        require(token.transfer(msg.sender, amount), \"Amount exceeds the available balance\");\n    }\n\n    function robCashier() onlyOwner public {\n        msg.sender.transfer(address(this).balance);\n        emit Robbery(msg.sender);\n    }\n\n    /** */\n\n    /**\n   * @dev Set the prices in wei for 1 GTA\n   * @param _newSellPrice The price people can sell GTA for\n   * @param _newBuyPrice The price people can buy GTA for\n   */\n    function setTokenPrices(uint256 _newSellPrice, uint256 _newBuyPrice) onlyOwner public {\n        tokenSellPrice = _newSellPrice;\n        tokenBuyPrice = _newBuyPrice;\n    }\n\n\n    function buy() payable public returns (uint256){\n        //note: the price of 1 GTA is in wei, but the token transfer expects the amount in 'token wei'\n        //so we're missing 10*18\n        uint256 value = msg.value.mul(1 ether);\n        uint256 _buyPrice = tokenBuyPrice;\n        if (buyDiscount > 0) {\n            //happy discount!\n            _buyPrice = _buyPrice.sub(_buyPrice.mul(buyDiscount).div(100));\n        }\n        uint256 amount = value.div(_buyPrice);\n        require(token.balanceOf(this) >= amount, \"Sold out\");\n        require(token.transfer(msg.sender, amount), \"Couldn't transfer token\");\n        emit Buy(msg.sender, amount, msg.value);\n        return amount;\n    }\n\n    // Important! remember to call GoldenThalerToken(address).approve(this, amount)\n    // or this contract will not be able to do the transfer on your behalf.\n    //TODO No sell at this moment\n    /*function sell(uint256 amount) public returns (uint256){\n        require(token.balanceOf(msg.sender) >= amount, \"Insufficient funds\");\n        require(token.transferFrom(msg.sender, this, amount), \"Couldn't transfer token\");\n        uint256 revenue = amount.mul(tokenSellPrice).div(1 ether);\n        msg.sender.transfer(revenue);\n        return revenue;\n    }*/\n\n    function applyDiscount(uint256 discount) onlyOwner public {\n        buyDiscount = discount;\n    }\n\n    function getTokenBuyPrice() public view returns (uint256) {\n        uint256 _buyPrice = tokenBuyPrice;\n        if (buyDiscount > 0) {\n            _buyPrice = _buyPrice.sub(_buyPrice.mul(buyDiscount).div(100));\n        }\n        return _buyPrice;\n    }\n\n    function getTokenSellPrice() public view returns (uint256) {\n        return tokenSellPrice;\n    }\n}\n\n/**\n * @title GTA contract interface\n */\ninterface GTAInterface {\n\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function balanceOf(address _owner) external view returns (uint256);\n\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051602080610a7d833981016040525160008054600160a060020a0319908116331790915560028054600160a060020a0390931692909116919091179055610a1e8061005f6000396000f3006080604052600436106100da5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663191b16a081146100df5780634e71e0c8146100fc5780636408dc49146101115780636ed5f88014610138578063715018a61461015057806388550b6a146101655780638da5cb5b1461017a578063a4453336146101ab578063a6f2ae3a146101c3578063c19418bb146101cb578063c9b3e736146101e0578063e30c3978146101f5578063f2fde38b1461020a578063fc0c546a1461022b578063fda9be1714610240575b600080fd5b3480156100eb57600080fd5b506100fa600435602435610258565b005b34801561010857600080fd5b506100fa61027a565b34801561011d57600080fd5b50610126610302565b60408051918252519081900360200190f35b34801561014457600080fd5b506100fa600435610308565b34801561015c57600080fd5b506100fa610436565b34801561017157600080fd5b506101266104a2565b34801561018657600080fd5b5061018f6104f3565b60408051600160a060020a039092168252519081900360200190f35b3480156101b757600080fd5b506100fa600435610502565b61012661060e565b3480156101d757600080fd5b506100fa61089c565b3480156101ec57600080fd5b50610126610916565b34801561020157600080fd5b5061018f61091c565b34801561021657600080fd5b506100fa600160a060020a036004351661092b565b34801561023757600080fd5b5061018f610971565b34801561024c57600080fd5b506100fa600435610980565b600054600160a060020a0316331461026f57600080fd5b600391909155600455565b600154600160a060020a0316331461029157600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b60055481565b600054600160a060020a0316331461031f57600080fd5b600254604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018490529051600160a060020a039092169163a9059cbb916044808201926020929091908290030181600087803b15801561038c57600080fd5b505af11580156103a0573d6000803e3d6000fd5b505050506040513d60208110156103b657600080fd5b50511515610433576040805160e560020a62461bcd028152602060048201526024808201527f416d6f756e7420657863656564732074686520617661696c61626c652062616c60448201527f616e636500000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b50565b600054600160a060020a0316331461044d57600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000806004549050600060055411156104ee576104eb6104de60646104d26005548561099c90919063ffffffff16565b9063ffffffff6109cb16565b829063ffffffff6109e016565b90505b919050565b600054600160a060020a031681565b600054600160a060020a0316331461051957600080fd5b600254604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018490529051600160a060020a03909216916323b872dd916064808201926020929091908290030181600087803b15801561058c57600080fd5b505af11580156105a0573d6000803e3d6000fd5b505050506040513d60208110156105b657600080fd5b50511515610433576040805160e560020a62461bcd02815260206004820152601260248201527f496e73756666696369656e742066756e64730000000000000000000000000000604482015290519081900360640190fd5b600080808061062b34670de0b6b3a764000063ffffffff61099c16565b925060045491506000600554111561066a5761066761065a60646104d26005548661099c90919063ffffffff16565b839063ffffffff6109e016565b91505b61067a838363ffffffff6109cb16565b600254604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519293508392600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b1580156106e557600080fd5b505af11580156106f9573d6000803e3d6000fd5b505050506040513d602081101561070f57600080fd5b50511015610767576040805160e560020a62461bcd02815260206004820152600860248201527f536f6c64206f7574000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600254604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018490529051600160a060020a039092169163a9059cbb916044808201926020929091908290030181600087803b1580156107d457600080fd5b505af11580156107e8573d6000803e3d6000fd5b505050506040513d60208110156107fe57600080fd5b50511515610856576040805160e560020a62461bcd02815260206004820152601760248201527f436f756c646e2774207472616e7366657220746f6b656e000000000000000000604482015290519081900360640190fd5b6040805133815260208101839052348183015290517f1cbc5ab135991bd2b6a4b034a04aa2aa086dac1371cb9b16b8b5e2ed6b036bed9181900360600190a19392505050565b600054600160a060020a031633146108b357600080fd5b6040513390303180156108fc02916000818181858888f193505050501580156108e0573d6000803e3d6000fd5b506040805133815290517f2a13f7ca2df5ff2b467d6a6d2c886cdf65a8903481ce3ffabd18d1f79a6b01549181900360200190a1565b60035490565b600154600160a060020a031681565b600054600160a060020a0316331461094257600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600254600160a060020a031681565b600054600160a060020a0316331461099757600080fd5b600555565b60008215156109ad575060006109c5565b508181028183828115156109bd57fe5b04146109c557fe5b92915050565b600081838115156109d857fe5b049392505050565b6000828211156109ec57fe5b509003905600a165627a7a723058201edcc5453441700f85a83f0bb1f5471e4a91c83c31440a94221c0068e621b0d00029000000000000000000000000ef26c2766972cbac10575aa85c0ab0691b967d20",
  "constructorArguments": "000000000000000000000000ef26c2766972cbac10575aa85c0ab0691b967d20"
}