{
  "address": "0xb57d80f8b9b00ac2f9d74252b82a05346dd42103",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BitFrank",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-23\n*/\n\n// BitFrank.com : The unstoppable on-chain exchange of ERC20 tokens\n// Copyright (c) 2018. All rights reserved.\n\npragma solidity ^0.4.20;\n\ncontract SafeMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x);\n    }\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n}\n\ncontract ERC20 {\n    function transfer(address dst, uint wad) public returns (bool);\n    function transferFrom(address src, address dst, uint wad) public returns (bool);\n}\n\ncontract BitFrank is SafeMath {\n    \n    address public admin;\n    \n    string public constant name = \"BitFrank v1\";\n    bool public suspendDeposit = false; // if we are upgrading to a new contract, deposit will be suspended, but you can still withdraw / trade\n \n    // market details for each TOKEN\n    struct TOKEN_DETAIL {\n        uint8 level; // 1 = listed, 2 = registered, 3 = verified (by admin), MAX = 9\n        uint fee; // fee for taker. 100 = 0.01%, 1000 = 0.1%, 10000 = 1%, 1000000 = 100%\n    }\n    uint public marketRegisterCost = 99 * (10 ** 16); // 0.99 ETH\n    uint public marketDefaultFeeLow = 2000; // 0.2%\n    uint public marketDefaultFeeHigh = 8000; // 0.8%\n    \n    mapping (address => TOKEN_DETAIL) public tokenMarket; // registered token details\n    address[] public tokenList; // list of registered tokens\n    \n    mapping (address => mapping (address => uint)) public balance; // balance[tokenAddr][userAddr]\n    mapping (address => mapping (address => uint)) public balanceLocked; // token locked in orders\n    \n    uint public globalOrderSerial = 100000; // always increasing\n    uint public PRICE_FACTOR = 10 ** 18; // all prices are multiplied by PRICE_FACTOR\n    \n    struct ORDER {\n        address token;\n        bool isBuy; // buy or sell\n        address user; // userMaker\n        uint wad;\n        uint wadFilled;\n        uint price; // all prices are multiplied by PRICE_FACTOR\n        uint listPosition; // position in orderList, useful when updating orderList\n    }\n    \n    mapping (uint => ORDER) public order; // [orderID] => ORDER\n    uint[] public orderList; // list of orderIDs\n\n    //============== EVENTS ==============\n    \n    event MARKET_CHANGE(address indexed token);\n    event DEPOSIT(address indexed user, address indexed token, uint wad, uint result);\n    event WITHDRAW(address indexed user, address indexed token, uint wad, uint result);\n    event ORDER_PLACE(address indexed user, address indexed token, bool isBuy, uint wad, uint price, uint indexed id);\n    event ORDER_CANCEL(address indexed user, address indexed token, uint indexed id);\n    event ORDER_MODIFY(address indexed user, address indexed token, uint indexed id, uint new_wad, uint new_price);\n    event ORDER_FILL(address indexed userTaker, address userMaker, address indexed token, bool isOriginalOrderBuy, uint fillAmt, uint price, uint indexed id);\n    event ORDER_DONE(address indexed userTaker, address userMaker, address indexed token, bool isOriginalOrderBuy, uint fillAmt, uint price, uint indexed id);\n    \n    //============== ORDER PLACEMENT & TRADE ==============\n    \n    // get order list count\n    \n    function getOrderCount() public constant returns (uint) {\n        return orderList.length;\n    }\n    \n    // limit order @ price (all prices are multiplied by PRICE_FACTOR)\n    \n    function orderPlace(address token, bool isBuy, uint wad, uint price) public {\n        \n        uint newLocked;\n        if (isBuy) { // buy token, lock ETH\n            newLocked = add(balanceLocked[0][msg.sender], mul(wad, price) / PRICE_FACTOR);\n            require(balance[0][msg.sender] >= newLocked);\n            balanceLocked[0][msg.sender] = newLocked;\n        } else { // sell token, lock token\n            newLocked = add(balanceLocked[token][msg.sender], wad);\n            require(balance[token][msg.sender] >= newLocked);\n            balanceLocked[token][msg.sender] = newLocked;\n        }\n        \n        // place order\n        ORDER memory o;\n        o.token = token;\n        o.isBuy = isBuy;\n        o.wad = wad;\n        o.price = price;\n        o.user = msg.sender;\n        o.listPosition = orderList.length; // position in orderList\n        order[globalOrderSerial] = o;\n        \n        // update order list with orderID = globalOrderSerial\n        orderList.push(globalOrderSerial);\n        \n        // event\n        ORDER_PLACE(msg.sender, token, isBuy, wad, price, globalOrderSerial);\n\n        globalOrderSerial++; // can never overflow\n    }\n    \n    // market order to take order @ price (all prices are multiplied by PRICE_FACTOR)\n    \n    function orderTrade(uint orderID, uint wad, uint price) public {\n        \n        ORDER storage o = order[orderID];\n        require(price == o.price); // price must match, because maker can modify price\n        \n        // fill amt\n        uint fillAmt = sub(o.wad, o.wadFilled);\n        if (fillAmt > wad) fillAmt = wad;\n        \n        // fill ETH and fee\n        uint fillETH = mul(fillAmt, price) / PRICE_FACTOR;\n        uint fee = mul(fillETH, tokenMarket[o.token].fee) / 1000000;\n    \n        uint newTakerBalance;\n        \n        if (o.isBuy) { // taker is selling token to maker\n            \n            // remove token from taker (check balance first)\n            newTakerBalance = sub(balance[o.token][msg.sender], fillAmt);\n            require(newTakerBalance >= balanceLocked[o.token][msg.sender]);\n            balance[o.token][msg.sender] = newTakerBalance;\n            \n            // remove ETH from maker\n            balance[0][o.user] = sub(balance[0][o.user], fillETH);\n            balanceLocked[0][o.user] = sub(balanceLocked[0][o.user], fillETH);\n            \n            // give token to maker\n            balance[o.token][o.user] = add(balance[o.token][o.user], fillAmt);\n            \n            // give ETH (after fee) to taker \n            balance[0][msg.sender] = add(balance[0][msg.sender], sub(fillETH, fee));\n            \n        } else { // taker is buying token from maker\n        \n            // remove ETH (with fee) from taker (check balance first)\n            newTakerBalance = sub(balance[0][msg.sender], add(fillETH, fee));\n            require(newTakerBalance >= balanceLocked[0][msg.sender]);\n            balance[0][msg.sender] = newTakerBalance;\n\n            // remove token from maker\n            balance[o.token][o.user] = sub(balance[o.token][o.user], fillAmt);\n            balanceLocked[o.token][o.user] = sub(balanceLocked[o.token][o.user], fillAmt);\n            \n            // give ETH to maker\n            balance[0][o.user] = add(balance[0][o.user], fillETH);\n\n            // give token to taker\n            balance[o.token][msg.sender] = add(balance[o.token][msg.sender], fillAmt);\n        }\n        \n        balance[0][admin] = add(balance[0][admin], fee);\n\n        // fill order\n        o.wadFilled = add(o.wadFilled, fillAmt);\n        \n        // remove filled order\n        if (o.wadFilled >= o.wad) {\n\n            // update order list\n            orderList[o.listPosition] = orderList[orderList.length - 1];\n            order[orderList[o.listPosition]].listPosition = o.listPosition; // update position in orderList\n            orderList.length--;\n            \n            // delete order\n            ORDER_DONE(msg.sender, o.user, o.token, o.isBuy, fillAmt, price, orderID);\n\n            delete order[orderID];\n            \n        } else {\n            ORDER_FILL(msg.sender, o.user, o.token, o.isBuy, fillAmt, price, orderID);\n        }\n    }\n    \n    function orderCancel(uint orderID) public {\n        // make sure the order is correct\n        ORDER memory o = order[orderID]; // o is not modified\n        require(o.user == msg.sender);\n\n        uint wadLeft = sub(o.wad, o.wadFilled);\n\n        // release remained amt\n        if (o.isBuy) { // release ETH\n            balanceLocked[0][msg.sender] = sub(balanceLocked[0][msg.sender], mul(o.price, wadLeft) / PRICE_FACTOR);\n        } else { // release token\n            balanceLocked[o.token][msg.sender] = sub(balanceLocked[o.token][msg.sender], wadLeft);\n        }\n\n        ORDER_CANCEL(msg.sender, o.token, orderID);\n        \n        // update order list\n        orderList[o.listPosition] = orderList[orderList.length - 1];\n        order[orderList[o.listPosition]].listPosition = o.listPosition; // update position in orderList\n        orderList.length--;\n        \n        // delete order\n        delete order[orderID];\n    }\n    \n    function orderModify(uint orderID, uint new_wad, uint new_price) public {\n        // make sure the order is correct\n        ORDER storage o = order[orderID]; // o is modified\n        require(o.user == msg.sender);\n        require(o.wadFilled == 0); // for simplicity, you can't change filled orders\n        \n        // change amount of locked assets\n        \n        uint newLocked;\n        if (o.isBuy) { // lock ETH\n            newLocked = sub(add(balanceLocked[0][msg.sender], mul(new_wad, new_price) / PRICE_FACTOR), mul(o.wad, o.price) / PRICE_FACTOR);\n            require(balance[0][msg.sender] >= newLocked);\n            balanceLocked[0][msg.sender] = newLocked;\n        } else { // lock token\n            newLocked = sub(add(balanceLocked[o.token][msg.sender], new_wad), o.wad);\n            require(balance[o.token][msg.sender] >= newLocked);\n            balanceLocked[o.token][msg.sender] = newLocked;\n        }\n    \n        // modify order\n        o.wad = new_wad;\n        o.price = new_price;\n        \n        ORDER_MODIFY(msg.sender, o.token, orderID, new_wad, new_price);\n    }\n  \n    //============== ADMINISTRATION ==============\n  \n    function BitFrank() public {\n        admin = msg.sender;\n        \n        adminSetMarket(0, 9, 0); // ETH, level 9, fee = 0\n    }\n    \n    // set admin\n    function adminSetAdmin(address newAdmin) public {\n        require(msg.sender == admin);\n        require(balance[0][newAdmin] > 0); // newAdmin must have deposits\n        admin = newAdmin;\n    }\n    \n    // suspend deposit (prepare for upgrading to a new contract)\n    function adminSuspendDeposit(bool status) public {\n        require(msg.sender == admin);\n        suspendDeposit = status;\n    }\n    \n    // set market details\n    function adminSetMarket(address token, uint8 level_, uint fee_) public {\n        require(msg.sender == admin);\n        require(level_ != 0);\n        require(level_ <= 9);\n        if (tokenMarket[token].level == 0) {\n            tokenList.push(token);\n        }\n        tokenMarket[token].level = level_;\n        tokenMarket[token].fee = fee_;\n        MARKET_CHANGE(token);\n    }\n    \n    // set register cost\n    function adminSetRegisterCost(uint cost_) public {\n        require(msg.sender == admin);\n        marketRegisterCost = cost_;\n    }\n    \n    // set default fee\n    function adminSetDefaultFee(uint marketDefaultFeeLow_, uint marketDefaultFeeHigh_) public {\n        require(msg.sender == admin);\n        marketDefaultFeeLow = marketDefaultFeeLow_;\n        marketDefaultFeeHigh = marketDefaultFeeHigh_;\n    }\n    \n    //============== MARKET REGISTRATION & HELPER ==============\n\n    // register token\n    function marketRegisterToken(address token) public payable {\n        require(tokenMarket[token].level == 1);\n        require(msg.value >= marketRegisterCost); // register cost\n        balance[0][admin] = add(balance[0][admin], msg.value);\n        \n        tokenMarket[token].level = 2;\n        tokenMarket[token].fee = marketDefaultFeeLow;\n        MARKET_CHANGE(token);\n    }\n    \n    // get token list count\n    function getTokenCount() public constant returns (uint) {\n        return tokenList.length;\n    }\n  \n    //============== DEPOSIT & WITHDRAW ==============\n  \n    function depositETH() public payable {\n        require(!suspendDeposit);\n        balance[0][msg.sender] = add(balance[0][msg.sender], msg.value);\n        DEPOSIT(msg.sender, 0, msg.value, balance[0][msg.sender]);\n    }\n\n    function depositToken(address token, uint wad) public {\n        require(!suspendDeposit);\n        // remember to call TOKEN(address).approve(this, wad) first\n        require(ERC20(token).transferFrom(msg.sender, this, wad)); // transfer token\n        \n        // add new token to list\n        if (tokenMarket[token].level == 0) {\n            tokenList.push(token);\n            tokenMarket[token].level = 1;\n            tokenMarket[token].fee = marketDefaultFeeHigh;\n            MARKET_CHANGE(token);\n        }\n        \n        balance[token][msg.sender] = add(balance[token][msg.sender], wad); // set balance\n        DEPOSIT(msg.sender, token, wad, balance[token][msg.sender]);\n    }\n\n    function withdrawETH(uint wad) public {\n        balance[0][msg.sender] = sub(balance[0][msg.sender], wad); // set amt first\n        require(balance[0][msg.sender] >= balanceLocked[0][msg.sender]); // can't withdraw locked ETH\n        msg.sender.transfer(wad); // send ETH\n        WITHDRAW(msg.sender, 0, wad, balance[0][msg.sender]);\n    }\n    \n    function withdrawToken(address token, uint wad) public {\n        require(token != 0); // not for withdrawing ETH\n        balance[token][msg.sender] = sub(balance[token][msg.sender], wad);\n        require(balance[token][msg.sender] >= balanceLocked[token][msg.sender]); // can't withdraw locked token\n        require(ERC20(token).transfer(msg.sender, wad)); // send token\n        WITHDRAW(msg.sender, token, wad, balance[token][msg.sender]);\n    }\n}",
  "bytecode": "60606040526000805460a060020a60ff0219169055670dbd2fc137a300006001556107d0600255611f40600355620186a0600855670de0b6b3a764000060095534156200004b57600080fd5b60008054600160a060020a03191633600160a060020a03161781556200008290600981640100000000620000888102620008c01704565b620001d0565b60005433600160a060020a03908116911614620000a457600080fd5b60ff82161515620000b457600080fd5b600960ff83161115620000c657600080fd5b600160a060020a03831660009081526004602052604090205460ff16151562000123576005805460018101620000fd838262000180565b5060009182526020909120018054600160a060020a031916600160a060020a0385161790555b600160a060020a03831660008181526004602052604090819020805460ff191660ff86161781556001018390557f9aeea806c0306ab18071f61955c6e0ff3404b04c00629788a3dfa7cbc4c7a371905160405180910390a2505050565b815481835581811511620001a757600083815260209020620001a7918101908301620001ac565b505050565b620001cd91905b80821115620001c95760008155600101620001b3565b5090565b90565b611ec080620001e06000396000f3006060604052600436106101665763ffffffff60e060020a60003504166302795b3a811461016b57806306fdde03146101a6578063118e1f2e1461023057806315fb21851461025557806321603f4314610276578063338b5dea146102d657806354d15347146102f8578063586facb4146103105780635d8c5b87146103385780636315592b1461036257806376d76b9d1461037e57806376f75e7f1461039157806378a89567146103a75780637c3e50ff146103ba5780637d8c0c7c146103df5780637f8fdcfb146103f55780638d0a5fbb1461041c5780639bc896f91461042f5780639e281a98146104455780639ead722214610467578063a5db83e414610499578063aacd5a85146104ad578063b203bb99146104c9578063c634fd83146104ee578063caf6cb3f14610507578063cd6d7f811461051a578063d380e0361461052d578063f14210a614610540578063f6326fb314610556578063f851a4401461055e575b600080fd5b341561017657600080fd5b61018a600160a060020a0360043516610571565b60405160ff909216825260208201526040908101905180910390f35b34156101b157600080fd5b6101b9610590565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101f55780820151838201526020016101dd565b50505050905090810190601f1680156102225780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561023b57600080fd5b6102436105c7565b60405190815260200160405180910390f35b341561026057600080fd5b610274600160a060020a03600435166105cd565b005b341561028157600080fd5b61028c60043561063a565b604051600160a060020a0397881681529515156020870152939095166040808601919091526060850192909252608084015260a083019390935260c082015260e001905180910390f35b34156102e157600080fd5b610274600160a060020a0360043516602435610683565b341561030357600080fd5b6102746004351515610876565b341561031b57600080fd5b610274600160a060020a036004351660ff602435166044356108c0565b341561034357600080fd5b610274600160a060020a036004351660243515156044356064356109b2565b341561036d57600080fd5b610274600435602435604435610c73565b341561038957600080fd5b610243610e8a565b341561039c57600080fd5b610243600435610e90565b34156103b257600080fd5b610243610eaf565b34156103c557600080fd5b610243600160a060020a0360043581169060243516610eb6565b34156103ea57600080fd5b610274600435610ed3565b341561040057600080fd5b610408610ef3565b604051901515815260200160405180910390f35b341561042757600080fd5b610243610f03565b341561043a57600080fd5b610274600435610f09565b341561045057600080fd5b610274600160a060020a03600435166024356111cd565b341561047257600080fd5b61047d600435611352565b604051600160a060020a03909116815260200160405180910390f35b610274600160a060020a036004351661137a565b34156104b857600080fd5b610274600435602435604435611462565b34156104d457600080fd5b610243600160a060020a0360043581169060243516611b5b565b34156104f957600080fd5b610274600435602435611b78565b341561051257600080fd5b610243611b9e565b341561052557600080fd5b610243611ba4565b341561053857600080fd5b610243611baa565b341561054b57600080fd5b610274600435611bb0565b610274611cc6565b341561056957600080fd5b61047d611d74565b6004602052600090815260409020805460019091015460ff9091169082565b60408051908101604052600b81527f4269744672616e6b207631000000000000000000000000000000000000000000602082015281565b60085481565b60005433600160a060020a039081169116146105e857600080fd5b600160a060020a0381166000908152600080516020611e7583398151915260205260408120541161061857600080fd5b60008054600160a060020a031916600160a060020a0392909216919091179055565b600a60205260009081526040902080546001820154600283015460038401546004850154600590950154600160a060020a038086169660a060020a90960460ff16959416939087565b60005460a060020a900460ff161561069a57600080fd5b81600160a060020a03166323b872dd33308460006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561070457600080fd5b6102c65a03f1151561071557600080fd5b50505060405180519050151561072a57600080fd5b600160a060020a03821660009081526004602052604090205460ff1615156107d757600580546001810161075e8382611dd1565b5060009182526020808320919091018054600160a060020a031916600160a060020a0386169081179091558083526004909152604091829020805460ff191660019081178255600354910155907f9aeea806c0306ab18071f61955c6e0ff3404b04c00629788a3dfa7cbc4c7a371905160405180910390a25b600160a060020a03808316600090815260066020908152604080832033909416835292905220546108089082611d83565b600160a060020a03838116600081815260066020908152604080832033909516808452949091529081902084905590927f7c003f8aed20c170d6c6117fdac59d8a80a7fb36b3e2f835993c4f3105f05782918591905191825260208201526040908101905180910390a35050565b60005433600160a060020a0390811691161461089157600080fd5b6000805491151560a060020a0274ff000000000000000000000000000000000000000019909216919091179055565b60005433600160a060020a039081169116146108db57600080fd5b60ff821615156108ea57600080fd5b600960ff831611156108fb57600080fd5b600160a060020a03831660009081526004602052604090205460ff16151561095557600580546001810161092f8382611dd1565b5060009182526020909120018054600160a060020a031916600160a060020a0385161790555b600160a060020a03831660008181526004602052604090819020805460ff191660ff86161781556001018390557f9aeea806c0306ab18071f61955c6e0ff3404b04c00629788a3dfa7cbc4c7a371905160405180910390a2505050565b60006109bc611dfa565b8415610a6c5733600160a060020a03166000908152600080516020611e558339815191526020526040902054600954610a0991906109fa8787611d99565b811515610a0357fe5b04611d83565b33600160a060020a03166000908152600080516020611e75833981519152602052604090205490925082901015610a3f57600080fd5b33600160a060020a03166000908152600080516020611e5583398151915260205260409020829055610afe565b600160a060020a0380871660009081526007602090815260408083203390941683529290522054610a9d9085611d83565b600160a060020a038088166000908152600660209081526040808320339094168352929052205490925082901015610ad457600080fd5b600160a060020a038087166000908152600760209081526040808320339094168352929052208290555b600160a060020a0380871682528515156020808401919091526060830186905260a0830185905233909116604080840191909152600b5460c08401526008546000908152600a9092529020819081518154600160a060020a031916600160a060020a03919091161781556020820151815490151560a060020a0274ff0000000000000000000000000000000000000000199091161781556040820151600182018054600160a060020a031916600160a060020a0392909216919091179055606082015181600201556080820151816003015560a0820151816004015560c082015160059091015550600b805460018101610bf88382611dd1565b50600091825260209091206008549101819055600160a060020a038088169033167fc08415b1c4b1cfed84cd4dd5a3ffabccb2b7b519a037a4a2cadd37bf40171e24888888604051921515835260208301919091526040808301919091526060909101905180910390a4505060088054600101905550505050565b6000838152600a60205260408120600181015490919033600160a060020a03908116911614610ca157600080fd5b600382015415610cb057600080fd5b815460a060020a900460ff1615610d835733600160a060020a03166000908152600080516020611e558339815191526020526040902054600954610d2091610cfc916109fa8888611d99565b600954610d1185600201548660040154611d99565b811515610d1a57fe5b04611dc1565b33600160a060020a03166000908152600080516020611e75833981519152602052604090205490915081901015610d5657600080fd5b33600160a060020a03166000908152600080516020611e5583398151915260205260409020819055610e29565b8154600160a060020a0390811660009081526007602090815260408083203390941683529290522054610dc490610dba9086611d83565b8360020154611dc1565b8254600160a060020a039081166000908152600660209081526040808320339094168352929052205490915081901015610dfd57600080fd5b8154600160a060020a039081166000908152600760209081526040808320339094168352929052208190555b600282018490556004820183905581548590600160a060020a039081169033167f80113832ebf85735659430d714537c66c7dc5b34b844df6d476e996812891bae878760405191825260208201526040908101905180910390a45050505050565b60015481565b600b805482908110610e9e57fe5b600091825260209091200154905081565b6005545b90565b600760209081526000928352604080842090915290825290205481565b60005433600160a060020a03908116911614610eee57600080fd5b600155565b60005460a060020a900460ff1681565b600b5490565b610f11611dfa565b6000828152600a60205260408082209060e0905190810160409081528254600160a060020a03808216845260a060020a90910460ff1615156020840152600184015481169183019182526002840154606084015260038401546080840152600484015460a084015260059093015460c0830152909350339091169051600160a060020a031614610fa057600080fd5b610fb282606001518360800151611dc1565b90508160200151156110255733600160a060020a03166000908152600080516020611e558339815191526020526040902054600954610ffa9190610d1160a086015185611d99565b33600160a060020a03166000908152600080516020611e5583398151915260205260409020556110aa565b611078600760008451600160a060020a0316600160a060020a03168152602001908152602001600020600033600160a060020a0316600160a060020a031681526020019081526020016000205482611dc1565b600760008451600160a060020a0390811682526020808301939093526040918201600090812033909216815292529020555b828251600160a060020a031633600160a060020a03167ff0b6e707ec38d6ec80daaa84f98a3aa6c7232cd2f9546b80f51bdb787318f4ee60405160405180910390a4600b805460001981019081106110fe57fe5b906000526020600020900154600b8360c001518154811061111b57fe5b60009182526020909120015560c0820151600a6000600b8560c001518154811061114157fe5b60009182526020808320909101548352820192909252604001902060050155600b805490611173906000198301611dd1565b5050506000908152600a60205260408120805474ffffffffffffffffffffffffffffffffffffffffff19168155600181018054600160a060020a031916905560028101829055600381018290556004810182905560050155565b600160a060020a03821615156111e257600080fd5b600160a060020a03808316600090815260066020908152604080832033909416835292905220546112139082611dc1565b600160a060020a03838116600081815260066020908152604080832033909516808452858352818420879055938352600782528083209383529281529190205491905290101561126257600080fd5b81600160a060020a031663a9059cbb338360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156112bf57600080fd5b6102c65a03f115156112d057600080fd5b5050506040518051905015156112e557600080fd5b600160a060020a038083166000818152600660209081526040808320339095168084529490915290819020549192917f9d7515416216ed5ea6b2db57c43c490feee25c78042b74e9befe142495c9189b918591905191825260208201526040908101905180910390a35050565b600580548290811061136057fe5b600091825260209091200154600160a060020a0316905081565b600160a060020a03811660009081526004602052604090205460ff166001146113a257600080fd5b6001543410156113b157600080fd5b60008054600160a060020a03168152600080516020611e7583398151915260205260409020546113e19034611d83565b60008054600160a060020a039081168252600080516020611e758339815191526020908152604080842094909455908416808352600490915290829020805460ff1916600290811782555460019190910155907f9aeea806c0306ab18071f61955c6e0ff3404b04c00629788a3dfa7cbc4c7a371905160405180910390a250565b6000838152600a602052604081206004810154909190819081908190861461148957600080fd5b61149b85600201548660030154611dc1565b9350868411156114a9578693505b6009546114b68588611d99565b8115156114bf57fe5b8654600160a060020a03166000908152600460205260409020600101549190049350620f4240906114f1908590611d99565b8115156114fa57fe5b8654919004925060a060020a900460ff1615611703578454600160a060020a03908116600090815260066020908152604080832033909416835292905220546115439085611dc1565b8554600160a060020a039081166000908152600760209081526040808320339094168352929052205490915081101561157b57600080fd5b8454600160a060020a0390811660009081526006602090815260408083203385168452825280832085905560018901549093168252600080516020611e75833981519152905220546115cd9084611dc1565b600186018054600160a060020a039081166000908152600080516020611e75833981519152602090815260408083209590955592549091168152600080516020611e5583398151915290915220546116259084611dc1565b600186018054600160a060020a039081166000908152600080516020611e5583398151915260209081526040808320959095558954831682526006815284822093549092168152919052205461167b9085611d83565b8554600160a060020a03908116600090815260066020908152604080832060018b015485168452825280832094909455339092168152600080516020611e7583398151915290915220546116d8906116d38585611dc1565b611d83565b33600160a060020a03166000908152600080516020611e7583398151915260205260409020556118f0565b33600160a060020a03166000908152600080516020611e75833981519152602052604090205461173c906117378585611d83565b611dc1565b33600160a060020a03166000908152600080516020611e55833981519152602052604090205490915081101561177157600080fd5b600160a060020a033381166000908152600080516020611e75833981519152602090815260408083208590558854841683526006825280832060018a0154909416835292905220546117c39085611dc1565b8554600160a060020a03908116600090815260066020908152604080832060018b018054861685529083528184209590955589548416835260078252808320945490931682529290925290205461181a9085611dc1565b8554600160a060020a03908116600090815260076020908152604080832060018b018054861685529083528184209590955593549092168152600080516020611e7583398151915290915220546118719084611d83565b6001860154600160a060020a039081166000908152600080516020611e758339815191526020908152604080832094909455885483168252600681528382203390931682529190915220546118c69085611d83565b8554600160a060020a03908116600090815260066020908152604080832033909416835292905220555b60008054600160a060020a03168152600080516020611e7583398151915260205260409020546119209083611d83565b60008054600160a060020a03168152600080516020611e75833981519152602052604090205560038501546119559085611d83565b6003860181905560028601549010611ad057600b8054600019810190811061197957fe5b906000526020600020900154600b866005015481548110151561199857fe5b9060005260206000209001819055508460050154600a6000600b88600501548154811015156119c357fe5b60009182526020808320909101548352820192909252604001902060050155600b8054906119f5906000198301611dd1565b50845460018601548991600160a060020a0380821692338216927fb7dc9d85e4f3d13c36cb6a5cc6a4073c67574e6736dd377641cd376538126670929091169060a060020a900460ff16898c604051600160a060020a039094168452911515602084015260408084019190915260608301919091526080909101905180910390a46000888152600a60205260408120805474ffffffffffffffffffffffffffffffffffffffffff19168155600181018054600160a060020a031916905560028101829055600381018290556004810182905560050155611b51565b845460018601548991600160a060020a0380821692338216927f9bfa1f330e5736ae34d611a75313affbea9327187d1db942585d10eb9b396bb0929091169060a060020a900460ff16898c604051600160a060020a039094168452911515602084015260408084019190915260608301919091526080909101905180910390a45b5050505050505050565b600660209081526000928352604080842090915290825290205481565b60005433600160a060020a03908116911614611b9357600080fd5b600291909155600355565b60035481565b60095481565b60025481565b33600160a060020a03166000908152600080516020611e758339815191526020526040902054611be09082611dc1565b600160a060020a0333166000908152600080516020611e7583398151915260208181526040808420859055600080516020611e558339815191528252909220549152901015611c2e57600080fd5b600160a060020a03331681156108fc0282604051600060405180830381858888f193505050501515611c5f57600080fd5b600160a060020a0333166000818152600080516020611e758339815191526020526040808220549192917f9d7515416216ed5ea6b2db57c43c490feee25c78042b74e9befe142495c9189b918591905191825260208201526040908101905180910390a350565b60005460a060020a900460ff1615611cdd57600080fd5b33600160a060020a03166000908152600080516020611e758339815191526020526040902054611d0d9034611d83565b600160a060020a0333166000818152600080516020611e75833981519152602052604080822084905590927f7c003f8aed20c170d6c6117fdac59d8a80a7fb36b3e2f835993c4f3105f05782913491905191825260208201526040908101905180910390a3565b600054600160a060020a031681565b80820182811015611d9357600080fd5b92915050565b6000811580611db6575050808202828282811515611db357fe5b04145b1515611d9357600080fd5b80820382811115611d9357600080fd5b815481835581811511611df557600083815260209020611df5918101908301611e36565b505050565b60e06040519081016040908152600080835260208301819052908201819052606082018190526080820181905260a0820181905260c082015290565b610eb391905b80821115611e505760008155600101611e3c565b509056006d5257204ebe7d88fd91ae87941cb2dd9d8062b64ae5a2bd2d28ec40b9fbf6df54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8a165627a7a72305820facd0c872b15cbb48c09d0871784fe313f877fedc4d29350ba775c5e1289f9250029"
}