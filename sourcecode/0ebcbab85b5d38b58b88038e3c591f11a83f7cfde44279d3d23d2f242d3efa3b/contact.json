{
  "address": "0xc74eb3da1dc60b26b327408238baf3cea857b667",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PrivatePaymentProcessor",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-29\n*/\n\npragma solidity ^0.4.24;\n\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\n// File: zeppelin-solidity/contracts/lifecycle/Destructible.sol\n\n/**\n * @title Destructible\n * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\n */\ncontract Destructible is Ownable {\n\n  function Destructible() payable { }\n\n  /**\n   * @dev Transfers the current balance to the owner and terminates the contract.\n   */\n  function destroy() onlyOwner public {\n    selfdestruct(owner);\n  }\n\n  function destroyAndSend(address _recipient) onlyOwner public {\n    selfdestruct(_recipient);\n  }\n}\n\n// File: zeppelin-solidity/contracts/ownership/Contactable.sol\n\n/**\n * @title Contactable token\n * @dev Basic version of a contactable contract, allowing the owner to provide a string with their\n * contact information.\n */\ncontract Contactable is Ownable{\n\n    string public contactInformation;\n\n    /**\n     * @dev Allows the owner to set a string with their contact information.\n     * @param info The contact information to attach to the contract.\n     */\n    function setContactInformation(string info) onlyOwner public {\n         contactInformation = info;\n     }\n}\n\n// File: contracts/Restricted.sol\n\n/** @title Restricted\n *  Exposes onlyMonetha modifier\n */\ncontract Restricted is Ownable {\n\n    //MonethaAddress set event\n    event MonethaAddressSet(\n        address _address,\n        bool _isMonethaAddress\n    );\n\n    mapping (address => bool) public isMonethaAddress;\n\n    /**\n     *  Restrict methods in such way, that they can be invoked only by monethaAddress account.\n     */\n    modifier onlyMonetha() {\n        require(isMonethaAddress[msg.sender]);\n        _;\n    }\n\n    /**\n     *  Allows owner to set new monetha address\n     */\n    function setMonethaAddress(address _address, bool _isMonethaAddress) onlyOwner public {\n        isMonethaAddress[_address] = _isMonethaAddress;\n\n        MonethaAddressSet(_address, _isMonethaAddress);\n    }\n}\n\n// File: contracts/ERC20.sol\n\n/**\n* @title ERC20 interface\n*/\ncontract ERC20 {\n    function totalSupply() public view returns (uint256);\n\n    function decimals() public view returns(uint256);\n\n    function balanceOf(address _who) public view returns (uint256);\n\n    function allowance(address _owner, address _spender)\n        public view returns (uint256);\n        \n    // Return type not defined intentionally since not all ERC20 tokens return proper result type\n    function transfer(address _to, uint256 _value) public;\n\n    function approve(address _spender, uint256 _value)\n        public returns (bool);\n\n    function transferFrom(address _from, address _to, uint256 _value)\n        public returns (bool);\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n// File: contracts/MonethaGateway.sol\n\n/**\n *  @title MonethaGateway\n *\n *  MonethaGateway forward funds from order payment to merchant's wallet and collects Monetha fee.\n */\ncontract MonethaGateway is Pausable, Contactable, Destructible, Restricted {\n\n    using SafeMath for uint256;\n    \n    string constant VERSION = \"0.5\";\n\n    /**\n     *  Fee permille of Monetha fee.\n     *  1 permille (‰) = 0.1 percent (%)\n     *  15‰ = 1.5%\n     */\n    uint public constant FEE_PERMILLE = 15;\n    \n    /**\n     *  Address of Monetha Vault for fee collection\n     */\n    address public monethaVault;\n\n    /**\n     *  Account for permissions managing\n     */\n    address public admin;\n\n    event PaymentProcessedEther(address merchantWallet, uint merchantIncome, uint monethaIncome);\n    event PaymentProcessedToken(address tokenAddress, address merchantWallet, uint merchantIncome, uint monethaIncome);\n\n    /**\n     *  @param _monethaVault Address of Monetha Vault\n     */\n    constructor(address _monethaVault, address _admin) public {\n        require(_monethaVault != 0x0);\n        monethaVault = _monethaVault;\n        \n        setAdmin(_admin);\n    }\n    \n    /**\n     *  acceptPayment accept payment from PaymentAcceptor, forwards it to merchant's wallet\n     *      and collects Monetha fee.\n     *  @param _merchantWallet address of merchant's wallet for fund transfer\n     *  @param _monethaFee is a fee collected by Monetha\n     */\n    function acceptPayment(address _merchantWallet, uint _monethaFee) external payable onlyMonetha whenNotPaused {\n        require(_merchantWallet != 0x0);\n        require(_monethaFee >= 0 && _monethaFee <= FEE_PERMILLE.mul(msg.value).div(1000)); // Monetha fee cannot be greater than 1.5% of payment\n        \n        uint merchantIncome = msg.value.sub(_monethaFee);\n\n        _merchantWallet.transfer(merchantIncome);\n        monethaVault.transfer(_monethaFee);\n\n        emit PaymentProcessedEther(_merchantWallet, merchantIncome, _monethaFee);\n    }\n\n    /**\n     *  acceptTokenPayment accept token payment from PaymentAcceptor, forwards it to merchant's wallet\n     *      and collects Monetha fee.\n     *  @param _merchantWallet address of merchant's wallet for fund transfer\n     *  @param _monethaFee is a fee collected by Monetha\n     *  @param _tokenAddress is the token address\n     *  @param _value is the order value\n     */\n    function acceptTokenPayment(\n        address _merchantWallet,\n        uint _monethaFee,\n        address _tokenAddress,\n        uint _value\n    )\n        external onlyMonetha whenNotPaused\n    {\n        require(_merchantWallet != 0x0);\n\n        // Monetha fee cannot be greater than 1.5% of payment\n        require(_monethaFee >= 0 && _monethaFee <= FEE_PERMILLE.mul(_value).div(1000));\n\n        uint merchantIncome = _value.sub(_monethaFee);\n        \n        ERC20(_tokenAddress).transfer(_merchantWallet, merchantIncome);\n        ERC20(_tokenAddress).transfer(monethaVault, _monethaFee);\n        \n        emit PaymentProcessedToken(_tokenAddress, _merchantWallet, merchantIncome, _monethaFee);\n    }\n\n    /**\n     *  changeMonethaVault allows owner to change address of Monetha Vault.\n     *  @param newVault New address of Monetha Vault\n     */\n    function changeMonethaVault(address newVault) external onlyOwner whenNotPaused {\n        monethaVault = newVault;\n    }\n\n    /**\n     *  Allows other monetha account or contract to set new monetha address\n     */\n    function setMonethaAddress(address _address, bool _isMonethaAddress) public {\n        require(msg.sender == admin || msg.sender == owner);\n\n        isMonethaAddress[_address] = _isMonethaAddress;\n\n        emit MonethaAddressSet(_address, _isMonethaAddress);\n    }\n\n    /**\n     *  setAdmin allows owner to change address of admin.\n     *  @param _admin New address of admin\n     */\n    function setAdmin(address _admin) public onlyOwner {\n        require(_admin != 0x0);\n        admin = _admin;\n    }\n}\n\n// File: contracts/SafeDestructible.sol\n\n/**\n * @title SafeDestructible\n * Base contract that can be destroyed by owner.\n * Can be destructed if there are no funds on contract balance.\n */\ncontract SafeDestructible is Ownable {\n    function destroy() onlyOwner public {\n        require(this.balance == 0);\n        selfdestruct(owner);\n    }\n}\n\n// File: contracts/MerchantWallet.sol\n\n/**\n *  @title MerchantWallet\n *  Serves as a public Merchant profile with merchant profile info,\n *      payment settings and latest reputation value.\n *  Also MerchantWallet accepts payments for orders.\n */\n\ncontract MerchantWallet is Pausable, SafeDestructible, Contactable, Restricted {\n\n    string constant VERSION = \"0.5\";\n\n    /// Address of merchant's account, that can withdraw from wallet\n    address public merchantAccount;\n\n    /// Address of merchant's fund address.\n    address public merchantFundAddress;\n\n    /// Unique Merchant identifier hash\n    bytes32 public merchantIdHash;\n\n    /// profileMap stores general information about the merchant\n    mapping (string=>string) profileMap;\n\n    /// paymentSettingsMap stores payment and order settings for the merchant\n    mapping (string=>string) paymentSettingsMap;\n\n    /// compositeReputationMap stores composite reputation, that compraises from several metrics\n    mapping (string=>uint32) compositeReputationMap;\n\n    /// number of last digits in compositeReputation for fractional part\n    uint8 public constant REPUTATION_DECIMALS = 4;\n\n    /**\n     *  Restrict methods in such way, that they can be invoked only by merchant account.\n     */\n    modifier onlyMerchant() {\n        require(msg.sender == merchantAccount);\n        _;\n    }\n\n    /**\n     *  Fund Address should always be Externally Owned Account and not a contract.\n     */\n    modifier isEOA(address _fundAddress) {\n        uint256 _codeLength;\n        assembly {_codeLength := extcodesize(_fundAddress)}\n        require(_codeLength == 0, \"sorry humans only\");\n        _;\n    }\n\n    /**\n     *  Restrict methods in such way, that they can be invoked only by merchant account or by monethaAddress account.\n     */\n    modifier onlyMerchantOrMonetha() {\n        require(msg.sender == merchantAccount || isMonethaAddress[msg.sender]);\n        _;\n    }\n\n    /**\n     *  @param _merchantAccount Address of merchant's account, that can withdraw from wallet\n     *  @param _merchantId Merchant identifier\n     *  @param _fundAddress Merchant's fund address, where amount will be transferred.\n     */\n    constructor(address _merchantAccount, string _merchantId, address _fundAddress) public isEOA(_fundAddress) {\n        require(_merchantAccount != 0x0);\n        require(bytes(_merchantId).length > 0);\n\n        merchantAccount = _merchantAccount;\n        merchantIdHash = keccak256(_merchantId);\n\n        merchantFundAddress = _fundAddress;\n    }\n\n    /**\n     *  Accept payment from MonethaGateway\n     */\n    function () external payable {\n    }\n\n    /**\n     *  @return profile info by string key\n     */\n    function profile(string key) external constant returns (string) {\n        return profileMap[key];\n    }\n\n    /**\n     *  @return payment setting by string key\n     */\n    function paymentSettings(string key) external constant returns (string) {\n        return paymentSettingsMap[key];\n    }\n\n    /**\n     *  @return composite reputation value by string key\n     */\n    function compositeReputation(string key) external constant returns (uint32) {\n        return compositeReputationMap[key];\n    }\n\n    /**\n     *  Set profile info by string key\n     */\n    function setProfile(\n        string profileKey,\n        string profileValue,\n        string repKey,\n        uint32 repValue\n    )\n        external onlyOwner\n    {\n        profileMap[profileKey] = profileValue;\n\n        if (bytes(repKey).length != 0) {\n            compositeReputationMap[repKey] = repValue;\n        }\n    }\n\n    /**\n     *  Set payment setting by string key\n     */\n    function setPaymentSettings(string key, string value) external onlyOwner {\n        paymentSettingsMap[key] = value;\n    }\n\n    /**\n     *  Set composite reputation value by string key\n     */\n    function setCompositeReputation(string key, uint32 value) external onlyMonetha {\n        compositeReputationMap[key] = value;\n    }\n\n    /**\n     *  Allows withdrawal of funds to beneficiary address\n     */\n    function doWithdrawal(address beneficiary, uint amount) private {\n        require(beneficiary != 0x0);\n        beneficiary.transfer(amount);\n    }\n\n    /**\n     *  Allows merchant to withdraw funds to beneficiary address\n     */\n    function withdrawTo(address beneficiary, uint amount) public onlyMerchant whenNotPaused {\n        doWithdrawal(beneficiary, amount);\n    }\n\n    /**\n     *  Allows merchant to withdraw funds to it's own account\n     */\n    function withdraw(uint amount) external onlyMerchant {\n        withdrawTo(msg.sender, amount);\n    }\n\n    /**\n     *  Allows merchant or Monetha to initiate exchange of funds by withdrawing funds to deposit address of the exchange\n     */\n    function withdrawToExchange(address depositAccount, uint amount) external onlyMerchantOrMonetha whenNotPaused {\n        doWithdrawal(depositAccount, amount);\n    }\n\n    /**\n     *  Allows merchant or Monetha to initiate exchange of funds by withdrawing all funds to deposit address of the exchange\n     */\n    function withdrawAllToExchange(address depositAccount, uint min_amount) external onlyMerchantOrMonetha whenNotPaused {\n        require (address(this).balance >= min_amount);\n        doWithdrawal(depositAccount, address(this).balance);\n    }\n\n    /**\n     *  Allows merchant or Monetha to initiate exchange of tokens by withdrawing all tokens to deposit address of the exchange\n     */\n    function withdrawAllTokensToExchange(address _tokenAddress, address _depositAccount, uint _minAmount) external onlyMerchantOrMonetha whenNotPaused {\n        require(_tokenAddress != address(0));\n        \n        uint balance = ERC20(_tokenAddress).balanceOf(address(this));\n        \n        require(balance >= _minAmount);\n        \n        ERC20(_tokenAddress).transfer(_depositAccount, balance);\n    }\n\n    /**\n     *  Allows merchant to change it's account address\n     */\n    function changeMerchantAccount(address newAccount) external onlyMerchant whenNotPaused {\n        merchantAccount = newAccount;\n    }\n\n    /**\n     *  Allows merchant to change it's fund address.\n     */\n    function changeFundAddress(address newFundAddress) external onlyMerchant isEOA(newFundAddress) {\n        merchantFundAddress = newFundAddress;\n    }\n}\n\n// File: contracts/PrivatePaymentProcessor.sol\n\ncontract PrivatePaymentProcessor is Pausable, Destructible, Contactable, Restricted {\n\n    using SafeMath for uint256;\n\n    string constant VERSION = \"0.5\";\n\n    // Order paid event\n    event OrderPaidInEther(\n        uint indexed _orderId,\n        address indexed _originAddress,\n        uint _price,\n        uint _monethaFee\n    );\n\n    event OrderPaidInToken(\n        uint indexed _orderId,\n        address indexed _originAddress,\n        address indexed _tokenAddress,\n        uint _price,\n        uint _monethaFee\n    );\n\n    // Payments have been processed event\n    event PaymentsProcessed(\n        address indexed _merchantAddress,\n        uint _amount,\n        uint _fee\n    );\n\n    // PaymentRefunding is an event when refunding initialized\n    event PaymentRefunding(\n        uint indexed _orderId,\n        address indexed _clientAddress,\n        uint _amount,\n        string _refundReason\n    );\n\n    // PaymentWithdrawn event is fired when payment is withdrawn\n    event PaymentWithdrawn(\n        uint indexed _orderId,\n        address indexed _clientAddress,\n        uint amount\n    );\n\n    /// MonethaGateway contract for payment processing\n    MonethaGateway public monethaGateway;\n\n    /// Address of MerchantWallet, where merchant reputation and funds are stored\n    MerchantWallet public merchantWallet;\n\n    /// Merchant identifier hash, that associates with the acceptor\n    bytes32 public merchantIdHash;\n\n    enum WithdrawState {Null, Pending, Withdrawn}\n\n    struct Withdraw {\n        WithdrawState state;\n        uint amount;\n        address clientAddress;\n    }\n\n    mapping (uint=>Withdraw) public withdrawals;\n\n    /**\n     *  Private Payment Processor sets Monetha Gateway and Merchant Wallet.\n     *  @param _merchantId Merchant of the acceptor\n     *  @param _monethaGateway Address of MonethaGateway contract for payment processing\n     *  @param _merchantWallet Address of MerchantWallet, where merchant reputation and funds are stored\n     */\n    constructor(\n        string _merchantId,\n        MonethaGateway _monethaGateway,\n        MerchantWallet _merchantWallet\n    )\n        public\n    {\n        require(bytes(_merchantId).length > 0);\n\n        merchantIdHash = keccak256(_merchantId);\n\n        setMonethaGateway(_monethaGateway);\n        setMerchantWallet(_merchantWallet);\n    }\n\n    /**\n     *  payForOrder is used by order wallet/client to pay for the order\n     *  @param _orderId Identifier of the order\n     *  @param _originAddress buyer address\n     *  @param _monethaFee is fee collected by Monetha\n     */\n    function payForOrder(\n        uint _orderId,\n        address _originAddress,\n        uint _monethaFee\n    )\n        external payable whenNotPaused\n    {\n        require(_orderId > 0);\n        require(_originAddress != 0x0);\n        require(msg.value > 0);\n\n        address fundAddress;\n        fundAddress = merchantWallet.merchantFundAddress();\n\n        if (fundAddress != address(0)) {\n            monethaGateway.acceptPayment.value(msg.value)(fundAddress, _monethaFee);\n        } else {\n            monethaGateway.acceptPayment.value(msg.value)(merchantWallet, _monethaFee);\n        }\n\n        // log payment event\n        emit OrderPaidInEther(_orderId, _originAddress, msg.value, _monethaFee);\n    }\n\n    /**\n     *  payForOrderInTokens is used by order wallet/client to pay for the order\n     *  This call requires that token's approve method has been called prior to this.\n     *  @param _orderId Identifier of the order\n     *  @param _originAddress buyer address\n     *  @param _monethaFee is fee collected by Monetha\n     *  @param _tokenAddress is tokens address\n     *  @param _orderValue is order amount\n     */\n    function payForOrderInTokens(\n        uint _orderId,\n        address _originAddress,\n        uint _monethaFee,\n        address _tokenAddress,\n        uint _orderValue\n    )\n        external whenNotPaused\n    {\n        require(_orderId > 0);\n        require(_originAddress != 0x0);\n        require(_orderValue > 0);\n        require(_tokenAddress != address(0));\n\n        address fundAddress;\n        fundAddress = merchantWallet.merchantFundAddress();\n\n        ERC20(_tokenAddress).transferFrom(msg.sender, address(this), _orderValue);\n        \n        ERC20(_tokenAddress).transfer(address(monethaGateway), _orderValue);\n\n        if (fundAddress != address(0)) {\n            monethaGateway.acceptTokenPayment(fundAddress, _monethaFee, _tokenAddress, _orderValue);\n        } else {\n            monethaGateway.acceptTokenPayment(merchantWallet, _monethaFee, _tokenAddress, _orderValue);\n        }\n        \n        // log payment event\n        emit OrderPaidInToken(_orderId, _originAddress, _tokenAddress, _orderValue, _monethaFee);\n    }\n\n    /**\n     *  refundPayment used in case order cannot be processed and funds need to be returned\n     *  This function initiate process of funds refunding to the client.\n     *  @param _orderId Identifier of the order\n     *  @param _clientAddress is an address of client\n     *  @param _refundReason Order refund reason\n     */\n    function refundPayment(\n        uint _orderId,\n        address _clientAddress,\n        string _refundReason\n    )\n        external payable onlyMonetha whenNotPaused\n    {\n        require(_orderId > 0);\n        require(_clientAddress != 0x0);\n        require(msg.value > 0);\n        require(WithdrawState.Null == withdrawals[_orderId].state);\n\n        // create withdraw\n        withdrawals[_orderId] = Withdraw({\n            state: WithdrawState.Pending,\n            amount: msg.value,\n            clientAddress: _clientAddress\n            });\n\n        // log refunding\n        emit PaymentRefunding(_orderId, _clientAddress, msg.value, _refundReason);\n    }\n\n    /**\n     *  refundTokenPayment used in case order cannot be processed and tokens need to be returned\n     *  This call requires that token's approve method has been called prior to this.\n     *  This function initiate process of refunding tokens to the client.\n     *  @param _orderId Identifier of the order\n     *  @param _clientAddress is an address of client\n     *  @param _refundReason Order refund reason\n     *  @param _tokenAddress is tokens address\n     *  @param _orderValue is order amount\n     */\n    function refundTokenPayment(\n        uint _orderId,\n        address _clientAddress,\n        string _refundReason,\n        uint _orderValue,\n        address _tokenAddress\n    )\n        external onlyMonetha whenNotPaused\n    {\n        require(_orderId > 0);\n        require(_clientAddress != 0x0);\n        require(_orderValue > 0);\n        require(_tokenAddress != address(0));\n        require(WithdrawState.Null == withdrawals[_orderId].state);\n\n        ERC20(_tokenAddress).transferFrom(msg.sender, address(this), _orderValue);\n        \n        // create withdraw\n        withdrawals[_orderId] = Withdraw({\n            state: WithdrawState.Pending,\n            amount: _orderValue,\n            clientAddress: _clientAddress\n            });\n\n        // log refunding\n        emit PaymentRefunding(_orderId, _clientAddress, _orderValue, _refundReason);\n    }\n\n    /**\n     *  withdrawRefund performs fund transfer to the client's account.\n     *  @param _orderId Identifier of the order\n     */\n    function withdrawRefund(uint _orderId)\n        external whenNotPaused\n    {\n        Withdraw storage withdraw = withdrawals[_orderId];\n        require(WithdrawState.Pending == withdraw.state);\n\n        address clientAddress = withdraw.clientAddress;\n        uint amount = withdraw.amount;\n\n        // changing withdraw state before transfer\n        withdraw.state = WithdrawState.Withdrawn;\n\n        // transfer fund to clients account\n        clientAddress.transfer(amount);\n\n        // log withdrawn\n        emit PaymentWithdrawn(_orderId, clientAddress, amount);\n    }\n\n    /**\n     *  withdrawTokenRefund performs token transfer to the client's account.\n     *  @param _orderId Identifier of the order\n     *  @param _tokenAddress token address\n     */\n    function withdrawTokenRefund(uint _orderId, address _tokenAddress)\n        external whenNotPaused\n    {\n        require(_tokenAddress != address(0));\n\n        Withdraw storage withdraw = withdrawals[_orderId];\n        require(WithdrawState.Pending == withdraw.state);\n\n        address clientAddress = withdraw.clientAddress;\n        uint amount = withdraw.amount;\n\n        // changing withdraw state before transfer\n        withdraw.state = WithdrawState.Withdrawn;\n\n        // transfer fund to clients account\n        ERC20(_tokenAddress).transfer(clientAddress, amount);\n\n        // log withdrawn\n        emit PaymentWithdrawn(_orderId, clientAddress, amount);\n    }\n\n    /**\n     *  setMonethaGateway allows owner to change address of MonethaGateway.\n     *  @param _newGateway Address of new MonethaGateway contract\n     */\n    function setMonethaGateway(MonethaGateway _newGateway) public onlyOwner {\n        require(address(_newGateway) != 0x0);\n\n        monethaGateway = _newGateway;\n    }\n\n    /**\n     *  setMerchantWallet allows owner to change address of MerchantWallet.\n     *  @param _newWallet Address of new MerchantWallet contract\n     */\n    function setMerchantWallet(MerchantWallet _newWallet) public onlyOwner {\n        require(address(_newWallet) != 0x0);\n        require(_newWallet.merchantIdHash() == merchantIdHash);\n\n        merchantWallet = _newWallet;\n    }\n}",
  "bytecode": "60806040526000805460a060020a60ff02191690553480156200002157600080fd5b50604051620018b5380380620018b5833981016040908152815160208301519183015160008054600160a060020a03191633178155919093018051909391106200006a57600080fd5b826040518082805190602001908083835b602083106200009c5780518252601f1990920191602091820191016200007b565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912060055550620000e19150839050640100000000620000fe810204565b620000f5816401000000006200014e810204565b50505062000236565b600054600160a060020a031633146200011657600080fd5b600160a060020a03811615156200012c57600080fd5b60038054600160a060020a031916600160a060020a0392909216919091179055565b600054600160a060020a031633146200016657600080fd5b600160a060020a03811615156200017c57600080fd5b6005546000191681600160a060020a031663f0daba016040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620001db57600080fd5b505af1158015620001f0573d6000803e3d6000fd5b505050506040513d60208110156200020757600080fd5b5051146200021457600080fd5b60048054600160a060020a031916600160a060020a0392909216919091179055565b61166f80620002466000396000f3006080604052600436106101325763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166331d41325811461013757806331d4fad41461016c57806336f7ab5e146101925780633f4ba83a1461021c5780635c975abb146102315780635cc07076146102465780636137412c146102a257806383197ef0146102d35780638456cb59146102e85780638da5cb5b146102fd5780639600f294146103125780639d1534951461034e5780639da3046714610366578063b440bf3914610397578063b5ac7c27146103b8578063b967a52e146103d2578063bc85e0641461042b578063c07e339114610440578063cee749bc14610466578063ddda66db1461048a578063f0daba01146104ab578063f2fde38b146104d2578063f5074f41146104f3575b600080fd5b34801561014357600080fd5b50610158600160a060020a0360043516610514565b604080519115158252519081900360200190f35b610190600480359060248035600160a060020a031691604435918201910135610529565b005b34801561019e57600080fd5b506101a76106a4565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101e15781810151838201526020016101c9565b50505050905090810190601f16801561020e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561022857600080fd5b50610190610731565b34801561023d57600080fd5b506101586107a7565b34801561025257600080fd5b5061025e6004356107b7565b6040518084600281111561026e57fe5b60ff16815260200183815260200182600160a060020a0316600160a060020a03168152602001935050505060405180910390f35b3480156102ae57600080fd5b506102b76107e5565b60408051600160a060020a039092168252519081900360200190f35b3480156102df57600080fd5b506101906107f4565b3480156102f457600080fd5b50610190610819565b34801561030957600080fd5b506102b7610894565b34801561031e57600080fd5b506101906004803590600160a060020a0360248035821692604435918201929101359060643590608435166108a3565b34801561035a57600080fd5b50610190600435610ace565b34801561037257600080fd5b50610190600435600160a060020a036024358116906044359060643516608435610bb0565b3480156103a357600080fd5b50610190600160a060020a0360043516610f58565b610190600435600160a060020a0360243516604435610fb3565b3480156103de57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101909436949293602493928401919081908401838280828437509497506112009650505050505050565b34801561043757600080fd5b506102b761122e565b34801561044c57600080fd5b50610190600160a060020a0360043516602435151561123d565b34801561047257600080fd5b50610190600435600160a060020a03602435166112b8565b34801561049657600080fd5b50610190600160a060020a03600435166113fc565b3480156104b757600080fd5b506104c06114eb565b60408051918252519081900360200190f35b3480156104de57600080fd5b50610190600160a060020a03600435166114f1565b3480156104ff57600080fd5b50610190600160a060020a0360043516611585565b60026020526000908152604090205460ff1681565b3360009081526002602052604090205460ff16151561054757600080fd5b60005460a060020a900460ff161561055e57600080fd5b6000841161056b57600080fd5b600160a060020a038316151561058057600080fd5b6000341161058d57600080fd5b60008481526006602052604090205460ff1660028111156105aa57fe5b156105b457600080fd5b6040805160608101909152806001815234602080830191909152600160a060020a038616604092830152600087815260069091522081518154829060ff1916600183600281111561060157fe5b021790555060208281015160018301556040928301516002909201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039384161790558251348082529181018481529381018590529186169287927f26e77179a69c2db5e1f39af4e228bc8c2205384ba14b8c1e3339049db4ee42c5929187918791606082018484808284376040519201829003965090945050505050a350505050565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107295780601f106106fe57610100808354040283529160200191610729565b820191906000526020600020905b81548152906001019060200180831161070c57829003601f168201915b505050505081565b600054600160a060020a0316331461074857600080fd5b60005460a060020a900460ff16151561076057600080fd5b6000805474ff0000000000000000000000000000000000000000191681556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b339190a1565b60005460a060020a900460ff1681565b60066020526000908152604090208054600182015460029092015460ff9091169190600160a060020a031683565b600354600160a060020a031681565b600054600160a060020a0316331461080b57600080fd5b600054600160a060020a0316ff5b600054600160a060020a0316331461083057600080fd5b60005460a060020a900460ff161561084757600080fd5b6000805474ff0000000000000000000000000000000000000000191660a060020a1781556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff6259190a1565b600054600160a060020a031681565b3360009081526002602052604090205460ff1615156108c157600080fd5b60005460a060020a900460ff16156108d857600080fd5b600086116108e557600080fd5b600160a060020a03851615156108fa57600080fd5b6000821161090757600080fd5b600160a060020a038116151561091c57600080fd5b60008681526006602052604090205460ff16600281111561093957fe5b1561094357600080fd5b604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018490529051600160a060020a038316916323b872dd9160648083019260209291908290030181600087803b1580156109b157600080fd5b505af11580156109c5573d6000803e3d6000fd5b505050506040513d60208110156109db57600080fd5b5050604080516060810190915280600181526020808201859052600160a060020a038816604092830152600089815260069091522081518154829060ff19166001836002811115610a2857fe5b021790555060208281015160018301556040928301516002909201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0393841617905582518581529081018381529281018690529087169188917f26e77179a69c2db5e1f39af4e228bc8c2205384ba14b8c1e3339049db4ee42c59186918991899190606082018484808284376040519201829003965090945050505050a3505050505050565b600080548190819060a060020a900460ff1615610aea57600080fd5b6000848152600660205260409020805490935060ff166002811115610b0b57fe5b600114610b1757600080fd5b50506002818101546001830154835460ff19169092178355604051600160a060020a03909116919082906108fc8315029083906000818181858888f19350505050158015610b69573d6000803e3d6000fd5b50604080518281529051600160a060020a0384169186917fbe85bf3b0a1e335a22c461f84cf759dfe589ec1539caf4dce60f999d72dd8e239181900360200190a350505050565b6000805460a060020a900460ff1615610bc857600080fd5b60008611610bd557600080fd5b600160a060020a0385161515610bea57600080fd5b60008211610bf757600080fd5b600160a060020a0383161515610c0c57600080fd5b60048054604080517f969596d60000000000000000000000000000000000000000000000000000000081529051600160a060020a039092169263969596d69282820192602092908290030181600087803b158015610c6957600080fd5b505af1158015610c7d573d6000803e3d6000fd5b505050506040513d6020811015610c9357600080fd5b5051604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018590529051919250600160a060020a038516916323b872dd916064808201926020929091908290030181600087803b158015610d0757600080fd5b505af1158015610d1b573d6000803e3d6000fd5b505050506040513d6020811015610d3157600080fd5b5050600354604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810185905290519185169163a9059cbb9160448082019260009290919082900301818387803b158015610da157600080fd5b505af1158015610db5573d6000803e3d6000fd5b50505050600160a060020a03811615610e6257600354604080517fcc4fbc43000000000000000000000000000000000000000000000000000000008152600160a060020a038481166004830152602482018890528681166044830152606482018690529151919092169163cc4fbc4391608480830192600092919082900301818387803b158015610e4557600080fd5b505af1158015610e59573d6000803e3d6000fd5b50505050610efc565b60035460048054604080517fcc4fbc43000000000000000000000000000000000000000000000000000000008152600160a060020a0392831693810193909352602483018890528682166044840152606483018690525192169163cc4fbc439160848082019260009290919082900301818387803b158015610ee357600080fd5b505af1158015610ef7573d6000803e3d6000fd5b505050505b82600160a060020a031685600160a060020a0316877fd6dc98331ad06baebe39c90f4fd554341ad121d55e4384bd046def391501a00f8588604051808381526020018281526020019250505060405180910390a4505050505050565b600054600160a060020a03163314610f6f57600080fd5b600160a060020a0381161515610f8457600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000805460a060020a900460ff1615610fcb57600080fd5b60008411610fd857600080fd5b600160a060020a0383161515610fed57600080fd5b60003411610ffa57600080fd5b60048054604080517f969596d60000000000000000000000000000000000000000000000000000000081529051600160a060020a039092169263969596d69282820192602092908290030181600087803b15801561105757600080fd5b505af115801561106b573d6000803e3d6000fd5b505050506040513d602081101561108157600080fd5b50519050600160a060020a0381161561112357600354604080517f2ac68b78000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301526024820186905291519190921691632ac68b7891349160448082019260009290919082900301818588803b15801561110557600080fd5b505af1158015611119573d6000803e3d6000fd5b50505050506111b0565b60035460048054604080517f2ac68b78000000000000000000000000000000000000000000000000000000008152600160a060020a03928316938101939093526024830186905251921691632ac68b78913491604480830192600092919082900301818588803b15801561119657600080fd5b505af11580156111aa573d6000803e3d6000fd5b50505050505b82600160a060020a0316847f80210c9e72c5c2b37454a6f335a4b2366b541c020558e680d7dab5cf4a6264363485604051808381526020018281526020019250505060405180910390a350505050565b600054600160a060020a0316331461121757600080fd5b805161122a9060019060208401906115a8565b5050565b600454600160a060020a031681565b600054600160a060020a0316331461125457600080fd5b600160a060020a038216600081815260026020908152604091829020805460ff191685151590811790915582519384529083015280517fa551de8741dbb2092ce6bc142fd0ff3af5dfbf87d0aa594619fccddb0141e6929281900390910190a15050565b600080548190819060a060020a900460ff16156112d457600080fd5b600160a060020a03841615156112e957600080fd5b6000858152600660205260409020805490935060ff16600281111561130a57fe5b60011461131657600080fd5b50506002818101546001830154835460ff19169092178355604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a039283166004820181905260248201859052915191939286169163a9059cbb9160448082019260009290919082900301818387803b15801561139d57600080fd5b505af11580156113b1573d6000803e3d6000fd5b5050604080518481529051600160a060020a03861693508892507fbe85bf3b0a1e335a22c461f84cf759dfe589ec1539caf4dce60f999d72dd8e239181900360200190a35050505050565b600054600160a060020a0316331461141357600080fd5b600160a060020a038116151561142857600080fd5b6005546000191681600160a060020a031663f0daba016040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561148657600080fd5b505af115801561149a573d6000803e3d6000fd5b505050506040513d60208110156114b057600080fd5b5051146114bc57600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60055481565b600054600160a060020a0316331461150857600080fd5b600160a060020a038116151561151d57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a0316331461159c57600080fd5b80600160a060020a0316ff5b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106115e957805160ff1916838001178555611616565b82800160010185558215611616579182015b828111156116165782518255916020019190600101906115fb565b50611622929150611626565b5090565b61164091905b80821115611622576000815560010161162c565b905600a165627a7a72305820013791d37375cc59de791c55a20a554010108f56b8878afed0807a894deb411600290000000000000000000000000000000000000000000000000000000000000060000000000000000000000000b79a44dd77859170f33af4639f0fe1e31973b757000000000000000000000000cb124295f7a25b8b042590f3f1959912b696a8ad00000000000000000000000000000000000000000000000000000000000000194c6561746865722048616e646d6164652050726f647563747300000000000000",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000b79a44dd77859170f33af4639f0fe1e31973b757000000000000000000000000cb124295f7a25b8b042590f3f1959912b696a8ad00000000000000000000000000000000000000000000000000000000000000194c6561746865722048616e646d6164652050726f647563747300000000000000"
}