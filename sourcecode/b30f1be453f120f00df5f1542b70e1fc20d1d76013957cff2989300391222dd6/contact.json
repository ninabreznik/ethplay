{
  "address": "0xb15ce49696881d3260f871f21c63fc787e6df3ae",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Boom3Lucky",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-14\n*/\n\npragma solidity 0.4.25;\n// <ORACLIZE_API>\n/*\nCopyright (c) 2015-2016 Oraclize SRL\nCopyright (c) 2016 Oraclize LTD\n\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\n\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n// This api is currently targeted at 0.4.18, please import oraclizeAPI_pre0.4.sol or oraclizeAPI_0.4 where necessary\n\npragma solidity >=0.4.18;// Incompatible compiler version... please select one stated within pragma solidity or use different oraclizeAPI version\n\ncontract OraclizeI {\n    address public cbAddress;\n    function query(uint _timestamp, string _datasource, string _arg) external payable returns (bytes32 _id);\n    function query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit) external payable returns (bytes32 _id);\n    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) public payable returns (bytes32 _id);\n    function query2_withGasLimit(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit) external payable returns (bytes32 _id);\n    function queryN(uint _timestamp, string _datasource, bytes _argN) public payable returns (bytes32 _id);\n    function queryN_withGasLimit(uint _timestamp, string _datasource, bytes _argN, uint _gaslimit) external payable returns (bytes32 _id);\n    function getPrice(string _datasource) public returns (uint _dsprice);\n    function getPrice(string _datasource, uint gaslimit) public returns (uint _dsprice);\n    function setProofType(byte _proofType) external;\n    function setCustomGasPrice(uint _gasPrice) external;\n    function randomDS_getSessionPubKeyHash() external constant returns(bytes32);\n}\n\ncontract OraclizeAddrResolverI {\n    function getAddress() public returns (address _addr);\n}\n\n/*\nBegin solidity-cborutils\n\nhttps://github.com/smartcontractkit/solidity-cborutils\n\nMIT License\n\nCopyright (c) 2018 SmartContract ChainLink, Ltd.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n */\n\nlibrary Buffer {\n    struct buffer {\n        bytes buf;\n        uint capacity;\n    }\n\n    function init(buffer memory buf, uint _capacity) internal pure {\n        uint capacity = _capacity;\n        if(capacity % 32 != 0) capacity += 32 - (capacity % 32);\n        // Allocate space for the buffer data\n        buf.capacity = capacity;\n        assembly {\n            let ptr := mload(0x40)\n            mstore(buf, ptr)\n            mstore(ptr, 0)\n            mstore(0x40, add(ptr, capacity))\n        }\n    }\n\n    function resize(buffer memory buf, uint capacity) private pure {\n        bytes memory oldbuf = buf.buf;\n        init(buf, capacity);\n        append(buf, oldbuf);\n    }\n\n    function max(uint a, uint b) private pure returns(uint) {\n        if(a > b) {\n            return a;\n        }\n        return b;\n    }\n\n    /**\n     * @dev Appends a byte array to the end of the buffer. Resizes if doing so\n     *      would exceed the capacity of the buffer.\n     * @param buf The buffer to append to.\n     * @param data The data to append.\n     * @return The original buffer.\n     */\n    function append(buffer memory buf, bytes data) internal pure returns(buffer memory) {\n        if(data.length + buf.buf.length > buf.capacity) {\n            resize(buf, max(buf.capacity, data.length) * 2);\n        }\n\n        uint dest;\n        uint src;\n        uint len = data.length;\n        assembly {\n            // Memory address of the buffer data\n            let bufptr := mload(buf)\n            // Length of existing buffer data\n            let buflen := mload(bufptr)\n            // Start address = buffer address + buffer length + sizeof(buffer length)\n            dest := add(add(bufptr, buflen), 32)\n            // Update buffer length\n            mstore(bufptr, add(buflen, mload(data)))\n            src := add(data, 32)\n        }\n\n        // Copy word-length chunks while possible\n        for(; len >= 32; len -= 32) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n            dest += 32;\n            src += 32;\n        }\n\n        // Copy remaining bytes\n        uint mask = 256 ** (32 - len) - 1;\n        assembly {\n            let srcpart := and(mload(src), not(mask))\n            let destpart := and(mload(dest), mask)\n            mstore(dest, or(destpart, srcpart))\n        }\n\n        return buf;\n    }\n\n    /**\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\n     * exceed the capacity of the buffer.\n     * @param buf The buffer to append to.\n     * @param data The data to append.\n     * @return The original buffer.\n     */\n    function append(buffer memory buf, uint8 data) internal pure {\n        if(buf.buf.length + 1 > buf.capacity) {\n            resize(buf, buf.capacity * 2);\n        }\n\n        assembly {\n            // Memory address of the buffer data\n            let bufptr := mload(buf)\n            // Length of existing buffer data\n            let buflen := mload(bufptr)\n            // Address = buffer address + buffer length + sizeof(buffer length)\n            let dest := add(add(bufptr, buflen), 32)\n            mstore8(dest, data)\n            // Update buffer length\n            mstore(bufptr, add(buflen, 1))\n        }\n    }\n\n    /**\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\n     * exceed the capacity of the buffer.\n     * @param buf The buffer to append to.\n     * @param data The data to append.\n     * @return The original buffer.\n     */\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\n        if(len + buf.buf.length > buf.capacity) {\n            resize(buf, max(buf.capacity, len) * 2);\n        }\n\n        uint mask = 256 ** len - 1;\n        assembly {\n            // Memory address of the buffer data\n            let bufptr := mload(buf)\n            // Length of existing buffer data\n            let buflen := mload(bufptr)\n            // Address = buffer address + buffer length + sizeof(buffer length) + len\n            let dest := add(add(bufptr, buflen), len)\n            mstore(dest, or(and(mload(dest), not(mask)), data))\n            // Update buffer length\n            mstore(bufptr, add(buflen, len))\n        }\n        return buf;\n    }\n}\n\nlibrary CBOR {\n    using Buffer for Buffer.buffer;\n\n    uint8 private constant MAJOR_TYPE_INT = 0;\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\n    uint8 private constant MAJOR_TYPE_STRING = 3;\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\n    uint8 private constant MAJOR_TYPE_MAP = 5;\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\n\n    function encodeType(Buffer.buffer memory buf, uint8 major, uint value) private pure {\n        if(value <= 23) {\n            buf.append(uint8((major << 5) | value));\n        } else if(value <= 0xFF) {\n            buf.append(uint8((major << 5) | 24));\n            buf.appendInt(value, 1);\n        } else if(value <= 0xFFFF) {\n            buf.append(uint8((major << 5) | 25));\n            buf.appendInt(value, 2);\n        } else if(value <= 0xFFFFFFFF) {\n            buf.append(uint8((major << 5) | 26));\n            buf.appendInt(value, 4);\n        } else if(value <= 0xFFFFFFFFFFFFFFFF) {\n            buf.append(uint8((major << 5) | 27));\n            buf.appendInt(value, 8);\n        }\n    }\n\n    function encodeIndefiniteLengthType(Buffer.buffer memory buf, uint8 major) private pure {\n        buf.append(uint8((major << 5) | 31));\n    }\n\n    function encodeUInt(Buffer.buffer memory buf, uint value) internal pure {\n        encodeType(buf, MAJOR_TYPE_INT, value);\n    }\n\n    function encodeInt(Buffer.buffer memory buf, int value) internal pure {\n        if(value >= 0) {\n            encodeType(buf, MAJOR_TYPE_INT, uint(value));\n        } else {\n            encodeType(buf, MAJOR_TYPE_NEGATIVE_INT, uint(-1 - value));\n        }\n    }\n\n    function encodeBytes(Buffer.buffer memory buf, bytes value) internal pure {\n        encodeType(buf, MAJOR_TYPE_BYTES, value.length);\n        buf.append(value);\n    }\n\n    function encodeString(Buffer.buffer memory buf, string value) internal pure {\n        encodeType(buf, MAJOR_TYPE_STRING, bytes(value).length);\n        buf.append(bytes(value));\n    }\n\n    function startArray(Buffer.buffer memory buf) internal pure {\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\n    }\n\n    function startMap(Buffer.buffer memory buf) internal pure {\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\n    }\n\n    function endSequence(Buffer.buffer memory buf) internal pure {\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\n    }\n}\n\n/*\nEnd solidity-cborutils\n */\n\ncontract usingOraclize {\n    uint constant day = 60*60*24;\n    uint constant week = 60*60*24*7;\n    uint constant month = 60*60*24*30;\n    byte constant proofType_NONE = 0x00;\n    byte constant proofType_TLSNotary = 0x10;\n    byte constant proofType_Ledger = 0x30;\n    byte constant proofType_Android = 0x40;\n    byte constant proofType_Native = 0xF0;\n    byte constant proofStorage_IPFS = 0x01;\n    uint8 constant networkID_auto = 0;\n    uint8 constant networkID_mainnet = 1;\n    uint8 constant networkID_testnet = 2;\n    uint8 constant networkID_morden = 2;\n    uint8 constant networkID_consensys = 161;\n\n    OraclizeAddrResolverI OAR;\n\n    OraclizeI oraclize;\n    modifier oraclizeAPI {\n        if((address(OAR)==0)||(getCodeSize(address(OAR))==0))\n            oraclize_setNetwork(networkID_auto);\n\n        if(address(oraclize) != OAR.getAddress())\n            oraclize = OraclizeI(OAR.getAddress());\n\n        _;\n    }\n    modifier coupon(string code){\n        oraclize = OraclizeI(OAR.getAddress());\n        _;\n    }\n\n    function oraclize_setNetwork(uint8 networkID) internal returns(bool){\n      return oraclize_setNetwork();\n      networkID; // silence the warning and remain backwards compatible\n    }\n    function oraclize_setNetwork() internal returns(bool){\n        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)>0){ //mainnet\n            OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);\n            oraclize_setNetworkName(\"eth_mainnet\");\n            return true;\n        }\n        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)>0){ //ropsten testnet\n            OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);\n            oraclize_setNetworkName(\"eth_ropsten3\");\n            return true;\n        }\n        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)>0){ //kovan testnet\n            OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);\n            oraclize_setNetworkName(\"eth_kovan\");\n            return true;\n        }\n        if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48)>0){ //rinkeby testnet\n            OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);\n            oraclize_setNetworkName(\"eth_rinkeby\");\n            return true;\n        }\n        if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)>0){ //ethereum-bridge\n            OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);\n            return true;\n        }\n        if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)>0){ //ether.camp ide\n            OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);\n            return true;\n        }\n        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)>0){ //browser-solidity\n            OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);\n            return true;\n        }\n        return false;\n    }\n\n    function __callback(bytes32 myid, string result) public {\n        __callback(myid, result, new bytes(0));\n    }\n    function __callback(bytes32 myid, string result, bytes proof) public {\n      return;\n      myid; result; proof; // Silence compiler warnings\n    }\n\n    function oraclize_getPrice(string datasource) oraclizeAPI internal returns (uint){\n        return oraclize.getPrice(datasource);\n    }\n\n    function oraclize_getPrice(string datasource, uint gaslimit) oraclizeAPI internal returns (uint){\n        return oraclize.getPrice(datasource, gaslimit);\n    }\n\n    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query.value(price)(0, datasource, arg);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query.value(price)(timestamp, datasource, arg);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);\n    }\n    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit);\n    }\n    function oraclize_query(string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query2.value(price)(0, datasource, arg1, arg2);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query2.value(price)(timestamp, datasource, arg1, arg2);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query2_withGasLimit.value(price)(timestamp, datasource, arg1, arg2, gaslimit);\n    }\n    function oraclize_query(string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query2_withGasLimit.value(price)(0, datasource, arg1, arg2, gaslimit);\n    }\n    function oraclize_query(string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        bytes memory args = stra2cbor(argN);\n        return oraclize.queryN.value(price)(0, datasource, args);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        bytes memory args = stra2cbor(argN);\n        return oraclize.queryN.value(price)(timestamp, datasource, args);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        bytes memory args = stra2cbor(argN);\n        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);\n    }\n    function oraclize_query(string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        bytes memory args = stra2cbor(argN);\n        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);\n    }\n    function oraclize_query(string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n\n    function oraclize_query(string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n\n    function oraclize_query(string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        bytes memory args = ba2cbor(argN);\n        return oraclize.queryN.value(price)(0, datasource, args);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        bytes memory args = ba2cbor(argN);\n        return oraclize.queryN.value(price)(timestamp, datasource, args);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        bytes memory args = ba2cbor(argN);\n        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        bytes memory args = ba2cbor(argN);\n        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n\n    function oraclize_query(string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n\n    function oraclize_query(string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n\n    function oraclize_cbAddress() oraclizeAPI internal returns (address){\n        return oraclize.cbAddress();\n    }\n    function oraclize_setProof(byte proofP) oraclizeAPI internal {\n        return oraclize.setProofType(proofP);\n    }\n    function oraclize_setCustomGasPrice(uint gasPrice) oraclizeAPI internal {\n        return oraclize.setCustomGasPrice(gasPrice);\n    }\n\n    function oraclize_randomDS_getSessionPubKeyHash() oraclizeAPI internal returns (bytes32){\n        return oraclize.randomDS_getSessionPubKeyHash();\n    }\n\n    function getCodeSize(address _addr) constant internal returns(uint _size) {\n        assembly {\n            _size := extcodesize(_addr)\n        }\n    }\n\n    function parseAddr(string _a) internal pure returns (address){\n        bytes memory tmp = bytes(_a);\n        uint160 iaddr = 0;\n        uint160 b1;\n        uint160 b2;\n        for (uint i=2; i<2+2*20; i+=2){\n            iaddr *= 256;\n            b1 = uint160(tmp[i]);\n            b2 = uint160(tmp[i+1]);\n            if ((b1 >= 97)&&(b1 <= 102)) b1 -= 87;\n            else if ((b1 >= 65)&&(b1 <= 70)) b1 -= 55;\n            else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;\n            if ((b2 >= 97)&&(b2 <= 102)) b2 -= 87;\n            else if ((b2 >= 65)&&(b2 <= 70)) b2 -= 55;\n            else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;\n            iaddr += (b1*16+b2);\n        }\n        return address(iaddr);\n    }\n\n    function strCompare(string _a, string _b) internal pure returns (int) {\n        bytes memory a = bytes(_a);\n        bytes memory b = bytes(_b);\n        uint minLength = a.length;\n        if (b.length < minLength) minLength = b.length;\n        for (uint i = 0; i < minLength; i ++)\n            if (a[i] < b[i])\n                return -1;\n            else if (a[i] > b[i])\n                return 1;\n        if (a.length < b.length)\n            return -1;\n        else if (a.length > b.length)\n            return 1;\n        else\n            return 0;\n    }\n\n    function indexOf(string _haystack, string _needle) internal pure returns (int) {\n        bytes memory h = bytes(_haystack);\n        bytes memory n = bytes(_needle);\n        if(h.length < 1 || n.length < 1 || (n.length > h.length))\n            return -1;\n        else if(h.length > (2**128 -1))\n            return -1;\n        else\n        {\n            uint subindex = 0;\n            for (uint i = 0; i < h.length; i ++)\n            {\n                if (h[i] == n[0])\n                {\n                    subindex = 1;\n                    while(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex])\n                    {\n                        subindex++;\n                    }\n                    if(subindex == n.length)\n                        return int(i);\n                }\n            }\n            return -1;\n        }\n    }\n\n    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n        bytes memory _ba = bytes(_a);\n        bytes memory _bb = bytes(_b);\n        bytes memory _bc = bytes(_c);\n        bytes memory _bd = bytes(_d);\n        bytes memory _be = bytes(_e);\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n        bytes memory babcde = bytes(abcde);\n        uint k = 0;\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n        return string(babcde);\n    }\n\n    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n        return strConcat(_a, _b, _c, _d, \"\");\n    }\n\n    function strConcat(string _a, string _b, string _c) internal pure returns (string) {\n        return strConcat(_a, _b, _c, \"\", \"\");\n    }\n\n    function strConcat(string _a, string _b) internal pure returns (string) {\n        return strConcat(_a, _b, \"\", \"\", \"\");\n    }\n\n    // parseInt\n    function parseInt(string _a) internal pure returns (uint) {\n        return parseInt(_a, 0);\n    }\n\n    // parseInt(parseFloat*10^_b)\n    function parseInt(string _a, uint _b) internal pure returns (uint) {\n        bytes memory bresult = bytes(_a);\n        uint mint = 0;\n        bool decimals = false;\n        for (uint i=0; i<bresult.length; i++){\n            if ((bresult[i] >= 48)&&(bresult[i] <= 57)){\n                if (decimals){\n                   if (_b == 0) break;\n                    else _b--;\n                }\n                mint *= 10;\n                mint += uint(bresult[i]) - 48;\n            } else if (bresult[i] == 46) decimals = true;\n        }\n        if (_b > 0) mint *= 10**_b;\n        return mint;\n    }\n\n    function uint2str(uint i) internal pure returns (string){\n        if (i == 0) return \"0\";\n        uint j = i;\n        uint len;\n        while (j != 0){\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len - 1;\n        while (i != 0){\n            bstr[k--] = byte(48 + i % 10);\n            i /= 10;\n        }\n        return string(bstr);\n    }\n\n    using CBOR for Buffer.buffer;\n    function stra2cbor(string[] arr) internal pure returns (bytes) {\n        safeMemoryCleaner();\n        Buffer.buffer memory buf;\n        Buffer.init(buf, 1024);\n        buf.startArray();\n        for (uint i = 0; i < arr.length; i++) {\n            buf.encodeString(arr[i]);\n        }\n        buf.endSequence();\n        return buf.buf;\n    }\n\n    function ba2cbor(bytes[] arr) internal pure returns (bytes) {\n        safeMemoryCleaner();\n        Buffer.buffer memory buf;\n        Buffer.init(buf, 1024);\n        buf.startArray();\n        for (uint i = 0; i < arr.length; i++) {\n            buf.encodeBytes(arr[i]);\n        }\n        buf.endSequence();\n        return buf.buf;\n    }\n\n    string oraclize_network_name;\n    function oraclize_setNetworkName(string _network_name) internal {\n        oraclize_network_name = _network_name;\n    }\n\n    function oraclize_getNetworkName() internal view returns (string) {\n        return oraclize_network_name;\n    }\n\n    function oraclize_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32){\n        require((_nbytes > 0) && (_nbytes <= 32));\n        // Convert from seconds to ledger timer ticks\n        _delay *= 10;\n        bytes memory nbytes = new bytes(1);\n        nbytes[0] = byte(_nbytes);\n        bytes memory unonce = new bytes(32);\n        bytes memory sessionKeyHash = new bytes(32);\n        bytes32 sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash();\n        assembly {\n            mstore(unonce, 0x20)\n            // the following variables can be relaxed\n            // check relaxed random contract under ethereum-examples repo\n            // for an idea on how to override and replace comit hash vars\n            mstore(add(unonce, 0x20), xor(blockhash(sub(number, 1)), xor(coinbase, timestamp)))\n            mstore(sessionKeyHash, 0x20)\n            mstore(add(sessionKeyHash, 0x20), sessionKeyHash_bytes32)\n        }\n        bytes memory delay = new bytes(32);\n        assembly {\n            mstore(add(delay, 0x20), _delay)\n        }\n\n        bytes memory delay_bytes8 = new bytes(8);\n        copyBytes(delay, 24, 8, delay_bytes8, 0);\n\n        bytes[4] memory args = [unonce, nbytes, sessionKeyHash, delay];\n        bytes32 queryId = oraclize_query(\"random\", args, _customGasLimit);\n\n        bytes memory delay_bytes8_left = new bytes(8);\n\n        assembly {\n            let x := mload(add(delay_bytes8, 0x20))\n            mstore8(add(delay_bytes8_left, 0x27), div(x, 0x100000000000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x26), div(x, 0x1000000000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x25), div(x, 0x10000000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x24), div(x, 0x100000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x23), div(x, 0x1000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x22), div(x, 0x10000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x21), div(x, 0x100000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x20), div(x, 0x1000000000000000000000000000000000000000000000000))\n\n        }\n\n        oraclize_randomDS_setCommitment(queryId, keccak256(delay_bytes8_left, args[1], sha256(args[0]), args[2]));\n        return queryId;\n    }\n\n    function oraclize_randomDS_setCommitment(bytes32 queryId, bytes32 commitment) internal {\n        oraclize_randomDS_args[queryId] = commitment;\n    }\n\n    mapping(bytes32=>bytes32) oraclize_randomDS_args;\n    mapping(bytes32=>bool) oraclize_randomDS_sessionKeysHashVerified;\n\n    function verifySig(bytes32 tosignh, bytes dersig, bytes pubkey) internal returns (bool){\n        bool sigok;\n        address signer;\n\n        bytes32 sigr;\n        bytes32 sigs;\n\n        bytes memory sigr_ = new bytes(32);\n        uint offset = 4+(uint(dersig[3]) - 0x20);\n        sigr_ = copyBytes(dersig, offset, 32, sigr_, 0);\n        bytes memory sigs_ = new bytes(32);\n        offset += 32 + 2;\n        sigs_ = copyBytes(dersig, offset+(uint(dersig[offset-1]) - 0x20), 32, sigs_, 0);\n\n        assembly {\n            sigr := mload(add(sigr_, 32))\n            sigs := mload(add(sigs_, 32))\n        }\n\n\n        (sigok, signer) = safer_ecrecover(tosignh, 27, sigr, sigs);\n        if (address(keccak256(pubkey)) == signer) return true;\n        else {\n            (sigok, signer) = safer_ecrecover(tosignh, 28, sigr, sigs);\n            return (address(keccak256(pubkey)) == signer);\n        }\n    }\n\n    function oraclize_randomDS_proofVerify__sessionKeyValidity(bytes proof, uint sig2offset) internal returns (bool) {\n        bool sigok;\n\n        // Step 6: verify the attestation signature, APPKEY1 must sign the sessionKey from the correct ledger app (CODEHASH)\n        bytes memory sig2 = new bytes(uint(proof[sig2offset+1])+2);\n        copyBytes(proof, sig2offset, sig2.length, sig2, 0);\n\n        bytes memory appkey1_pubkey = new bytes(64);\n        copyBytes(proof, 3+1, 64, appkey1_pubkey, 0);\n\n        bytes memory tosign2 = new bytes(1+65+32);\n        tosign2[0] = byte(1); //role\n        copyBytes(proof, sig2offset-65, 65, tosign2, 1);\n        bytes memory CODEHASH = hex\"fd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c\";\n        copyBytes(CODEHASH, 0, 32, tosign2, 1+65);\n        sigok = verifySig(sha256(tosign2), sig2, appkey1_pubkey);\n\n        if (sigok == false) return false;\n\n\n        // Step 7: verify the APPKEY1 provenance (must be signed by Ledger)\n        bytes memory LEDGERKEY = hex\"7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4\";\n\n        bytes memory tosign3 = new bytes(1+65);\n        tosign3[0] = 0xFE;\n        copyBytes(proof, 3, 65, tosign3, 1);\n\n        bytes memory sig3 = new bytes(uint(proof[3+65+1])+2);\n        copyBytes(proof, 3+65, sig3.length, sig3, 0);\n\n        sigok = verifySig(sha256(tosign3), sig3, LEDGERKEY);\n\n        return sigok;\n    }\n\n    modifier oraclize_randomDS_proofVerify(bytes32 _queryId, string _result, bytes _proof) {\n        // Step 1: the prefix has to match 'LP\\x01' (Ledger Proof version 1)\n        require((_proof[0] == \"L\") && (_proof[1] == \"P\") && (_proof[2] == 1));\n\n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\n        require(proofVerified);\n\n        _;\n    }\n\n    function oraclize_randomDS_proofVerify__returnCode(bytes32 _queryId, string _result, bytes _proof) internal returns (uint8){\n        // Step 1: the prefix has to match 'LP\\x01' (Ledger Proof version 1)\n        if ((_proof[0] != \"L\")||(_proof[1] != \"P\")||(_proof[2] != 1)) return 1;\n\n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\n        if (proofVerified == false) return 2;\n\n        return 0;\n    }\n\n    function matchBytes32Prefix(bytes32 content, bytes prefix, uint n_random_bytes) internal pure returns (bool){\n        bool match_ = true;\n\n        require(prefix.length == n_random_bytes);\n\n        for (uint256 i=0; i< n_random_bytes; i++) {\n            if (content[i] != prefix[i]) match_ = false;\n        }\n\n        return match_;\n    }\n\n    function oraclize_randomDS_proofVerify__main(bytes proof, bytes32 queryId, bytes result, string context_name) internal returns (bool){\n\n        // Step 2: the unique keyhash has to match with the sha256 of (context name + queryId)\n        uint ledgerProofLength = 3+65+(uint(proof[3+65+1])+2)+32;\n        bytes memory keyhash = new bytes(32);\n        copyBytes(proof, ledgerProofLength, 32, keyhash, 0);\n        if (!(keccak256(keyhash) == keccak256(sha256(context_name, queryId)))) return false;\n\n        bytes memory sig1 = new bytes(uint(proof[ledgerProofLength+(32+8+1+32)+1])+2);\n        copyBytes(proof, ledgerProofLength+(32+8+1+32), sig1.length, sig1, 0);\n\n        // Step 3: we assume sig1 is valid (it will be verified during step 5) and we verify if 'result' is the prefix of sha256(sig1)\n        if (!matchBytes32Prefix(sha256(sig1), result, uint(proof[ledgerProofLength+32+8]))) return false;\n\n        // Step 4: commitment match verification, keccak256(delay, nbytes, unonce, sessionKeyHash) == commitment in storage.\n        // This is to verify that the computed args match with the ones specified in the query.\n        bytes memory commitmentSlice1 = new bytes(8+1+32);\n        copyBytes(proof, ledgerProofLength+32, 8+1+32, commitmentSlice1, 0);\n\n        bytes memory sessionPubkey = new bytes(64);\n        uint sig2offset = ledgerProofLength+32+(8+1+32)+sig1.length+65;\n        copyBytes(proof, sig2offset-64, 64, sessionPubkey, 0);\n\n        bytes32 sessionPubkeyHash = sha256(sessionPubkey);\n        if (oraclize_randomDS_args[queryId] == keccak256(commitmentSlice1, sessionPubkeyHash)){ //unonce, nbytes and sessionKeyHash match\n            delete oraclize_randomDS_args[queryId];\n        } else return false;\n\n\n        // Step 5: validity verification for sig1 (keyhash and args signed with the sessionKey)\n        bytes memory tosign1 = new bytes(32+8+1+32);\n        copyBytes(proof, ledgerProofLength, 32+8+1+32, tosign1, 0);\n        if (!verifySig(sha256(tosign1), sig1, sessionPubkey)) return false;\n\n        // verify if sessionPubkeyHash was verified already, if not.. let's do it!\n        if (oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] == false){\n            oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = oraclize_randomDS_proofVerify__sessionKeyValidity(proof, sig2offset);\n        }\n\n        return oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash];\n    }\n\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n    function copyBytes(bytes from, uint fromOffset, uint length, bytes to, uint toOffset) internal pure returns (bytes) {\n        uint minLength = length + toOffset;\n\n        // Buffer too small\n        require(to.length >= minLength); // Should be a better way?\n\n        // NOTE: the offset 32 is added to skip the `size` field of both bytes variables\n        uint i = 32 + fromOffset;\n        uint j = 32 + toOffset;\n\n        while (i < (32 + fromOffset + length)) {\n            assembly {\n                let tmp := mload(add(from, i))\n                mstore(add(to, j), tmp)\n            }\n            i += 32;\n            j += 32;\n        }\n\n        return to;\n    }\n\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n    // Duplicate Solidity's ecrecover, but catching the CALL return value\n    function safer_ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal returns (bool, address) {\n        // We do our own memory management here. Solidity uses memory offset\n        // 0x40 to store the current end of memory. We write past it (as\n        // writes are memory extensions), but don't update the offset so\n        // Solidity will reuse it. The memory used here is only needed for\n        // this context.\n\n        // FIXME: inline assembly can't access return values\n        bool ret;\n        address addr;\n\n        assembly {\n            let size := mload(0x40)\n            mstore(size, hash)\n            mstore(add(size, 32), v)\n            mstore(add(size, 64), r)\n            mstore(add(size, 96), s)\n\n            // NOTE: we can reuse the request memory because we deal with\n            //       the return code\n            ret := call(3000, 1, 0, size, 128, size, 32)\n            addr := mload(size)\n        }\n\n        return (ret, addr);\n    }\n\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n    function ecrecovery(bytes32 hash, bytes sig) internal returns (bool, address) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        if (sig.length != 65)\n          return (false, 0);\n\n        // The signature format is a compact form of:\n        //   {bytes32 r}{bytes32 s}{uint8 v}\n        // Compact means, uint8 is not padded to 32 bytes.\n        assembly {\n            r := mload(add(sig, 32))\n            s := mload(add(sig, 64))\n\n            // Here we are loading the last 32 bytes. We exploit the fact that\n            // 'mload' will pad with zeroes if we overread.\n            // There is no 'mload8' to do this, but that would be nicer.\n            v := byte(0, mload(add(sig, 96)))\n\n            // Alternative solution:\n            // 'byte' is not working due to the Solidity parser, so lets\n            // use the second best option, 'and'\n            // v := and(mload(add(sig, 65)), 255)\n        }\n\n        // albeit non-transactional signatures are not specified by the YP, one would expect it\n        // to match the YP range of [27, 28]\n        //\n        // geth uses [0, 1] and some clients have followed. This might change, see:\n        //  https://github.com/ethereum/go-ethereum/issues/2053\n        if (v < 27)\n          v += 27;\n\n        if (v != 27 && v != 28)\n            return (false, 0);\n\n        return safer_ecrecover(hash, v, r, s);\n    }\n\n    function safeMemoryCleaner() internal pure {\n        assembly {\n            let fmem := mload(0x40)\n            codecopy(fmem, codesize, sub(msize, fmem))\n        }\n    }\n\n}\n// </ORACLIZE_API>\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract Ownable is usingOraclize {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner, 'only owner');\n        _;\n    }\n    modifier notOwner() {\n        require(msg.sender != owner, 'only not owner');\n        _;\n    }\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\ncontract Pausable is Ownable {\n    event Pause();\n    event Resume();\n\n    bool public paused = false;\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused, 'game is paused');\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() onlyOwner whenNotPaused public {\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n     * @dev called by the owner to resume, returns to normal state\n     */\n    function resume() onlyOwner whenPaused public {\n        paused = false;\n        emit Resume();\n    }\n}\n\ncontract Boom3Rule is Pausable{\n    using SafeMath for *;\n    \n    mapping(uint8 => uint16) public probabilityMap;\n    \n    constructor () public{\n        __initOdds();\n    }\n    \n    function __initOdds() internal{\n        // odds by 100 percent\n        probabilityMap[3] = uint16(21600); //sum3\n        probabilityMap[4] = uint16(7200); //sum4\n        probabilityMap[5] = uint16(3600); //sum5\n        probabilityMap[6] = uint16(2160); //sum6\n        probabilityMap[7] = uint16(1440); //sum7\n        probabilityMap[8] = uint16(1029); //sum8\n        probabilityMap[9] = uint16(864); //sum9\n        probabilityMap[10] = uint16(800); //sum10\n        probabilityMap[11] = uint16(800); //sum11\n        probabilityMap[12] = uint16(864); //sum12\n        probabilityMap[13] = uint16(1029); //sum13\n        probabilityMap[14] = uint16(1440); //sum14\n        probabilityMap[15] = uint16(2160); //sum15\n        probabilityMap[16] = uint16(3600); //sum16\n        probabilityMap[17] = uint16(7200); //sum17\n        probabilityMap[18] = uint16(21600); //sum18\n    }\n    \n     /**\n     * @dev judge user is bet right\n     * @param betNumbers user bet numbers\n     * @param resultSum sum of result three numbers\n     */\n    function isBetRight(uint8[] betNumbers, uint8 resultSum) public pure returns (bool){\n        for(uint8 i=0; i < betNumbers.length; i++){\n            if(betNumbers[i] == resultSum){\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    /**\n     * @dev calcu three numbers sum\n     * @param _numbers result numbers\n     */\n    function sum(uint8[3] _numbers) public pure returns(uint8){\n        return uint8(_numbers[0].add(_numbers[1]).add(_numbers[2]));\n    }\n    \n}\n\nlibrary Boom3datasets {\n    struct Player {\n        uint256 val;    // winnings vault\n        uint256 aff;    // invite rewards\n        uint256 lrnd;   // last round played\n        uint256 inum;   // invited user count\n        address laff;   // last affiliate address used\n    }\n    struct PlayerRounds {\n        uint256 eth;    // eth player has added to this round\n        uint256 keys;   // keys hold \n        uint256 mask;   // player mask in this round\n        uint256 ico;    // ICO phase investment\n        uint256 gen;    // boom share in this round\n        uint256 share;  // share in this round\n        uint256[] bets; // user bets\n    }\n    struct Bet {\n        address user;\n        uint256 time;\n        uint8[] numbers;   // sum numbers\n        uint16 odds;       // odds\n        uint256 value;\n        uint8[3] result;\n        bool refund;\n    }\n    struct Round {\n        uint256 start;        // time round started\n        uint256 end;          // time ended, 0 means not end\n        bool investEnded;     // has round end function been ran\n        uint256 eth;          // total eth in\n        uint256 pot;          // current eth to pot (during round) / final amount paid to holders (after boom)\n        uint256 gen;          // eth value share to keys holders\n        uint256 ico;          // invest value\n        uint256 keys;         // keys\n        uint256 mask;         // global mask\n        Bet[] bets;\n    }\n    struct Phase {\n        uint256 round;\n        uint256 start;       // time phase started\n        uint256 end;         // time ended, 0 means not end\n        uint256 eth;         // total eth invest\n        uint256 gen;\n        uint256 mask;\n        uint256 offset;      // offset: when eth not enough for all bet user, then use offset to decrease odds\n        uint8[3] numbers;    // the three lottery number in order\n    }\n}\n\ncontract Boom3Events is Boom3Rule {\n    \n\t// fired whenever theres a withdraw\n    event onWithdraw\n    (\n        address indexed playerAddress,\n        uint256 ethOut,\n        uint256 timeStamp\n    );\n    \n    event onUserValChange\n    (\n        bytes32 indexed reason,\n        address indexed playerAddress,\n        uint256 amount\n    );\n    \n}\n\ncontract Boom3Lucky is Boom3Events{\n    using SafeMath for *;\n    \n    string constant public name = \"Boom3Lucky\";\n    string constant public symbol = \"BOOM3\";\n    \n    uint256 public roundId; // round id\n    address public COMMUNITY_ADDRESS = 0xFF1d9dd4B37B879150e43fE364AbBc9310C508D5; // community distribution address\n    uint256 public INVEST_TIME = 48 hours;\n    uint256 public SINGLE_KEY_PRICE = 0.0005 ether; // fixed price for buy one ticket\n    uint256 public MIN_START_ETH_NUM = 30 ether; // when ico value got this, start game\n    uint256 public ORACLIZE_GAS_PRICE = 8000000000;\n    uint256 public ORACLIZE_GAS_LIMIT = 450000;\n    uint256 public ORACLIZE_QUERY_MAXTIME = 6 hours;\n    \n    //****************\n    // PLAYER DATA\n    //****************\n    mapping (address => Boom3datasets.Player) public playerInfo;   // (uAddr => data) player data\n    mapping (address => mapping(uint256 => Boom3datasets.PlayerRounds)) public playerRoundInfo;   // (pID => (rID => roundInfo)) holders info in one round\n    mapping (bytes32 => uint256[2]) public randomQueryMap;\n    \n    //****************\n    // ROUND DATA\n    //****************\n    mapping (uint256 => Boom3datasets.Round) public roundInfo;   // (rID => data) round data\n    \n    constructor () public{\n        __newRound(0);\n    }\n\n    /**\n     * @dev prevents contracts from interacting with this contract\n     */\n    modifier isHuman() {\n        address _addr = msg.sender;\n        uint256 _codeLength;\n\n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0, \"sorry humans only\");\n        _;\n    }\n    \n     /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenRoundStart() {\n        if(!roundInfo[roundId].investEnded && (block.timestamp - roundInfo[roundId].start) >= INVEST_TIME){\n            roundInfo[roundId].investEnded = true;\n        }\n        require(roundInfo[roundId].investEnded, 'round not start');\n        _;\n    }\n    \n    //****************\n    // Private Func\n    //****************\n    \n    /**\n     * @dev calcu keys by eth value\n     */\n    function __eth2keys(uint256 _eth) private view returns(uint256){\n        return _eth.mul(1000000000000000000) / SINGLE_KEY_PRICE;\n    }\n    \n    /**\n     * @dev add keys for user\n     * @param _roundId round id\n     * @param _user user address\n     * @param _keys keys amount to add\n     */\n    function __addKeys(address _user, uint256 _roundId, uint256 _keys) private{\n        playerRoundInfo[_user][_roundId].keys = playerRoundInfo[_user][_roundId].keys.add(_keys);\n        roundInfo[_roundId].keys = roundInfo[_roundId].keys.add(_keys);\n    }\n    \n    /**\n     * @dev add value for user\n     * @param reason  1 win, 2 gen, 3 aff, 4 boom\n     * @param _user user address\n     */\n    function __addVal(bytes32 reason, address _user, uint256 _value) private{\n        playerInfo[_user].val = playerInfo[_user].val.add(_value);\n        emit onUserValChange(reason, _user, _value);\n    }\n    \n    /**\n     * @dev distributes eth based on fees to com, aff\n     * @param _rID roundId\n     * @param _pID bet user address\n     * @param _aff bet value\n     */\n    function __dealInvite(address _pID, uint256 _rID, uint256 _aff) private {\n        address _affID = playerInfo[_pID].laff;\n        // decide what to do with affiliate share of fees\n        // affiliate must not be self, and must have a name registered\n        if (_affID != address(0)) {\n            __addVal('aff', _affID, _aff);\n            playerInfo[_affID].aff = playerInfo[_affID].aff.add(_aff);\n        } else {\n            // send aff to round pot\n            roundInfo[_rID].pot = roundInfo[_rID].pot.add(_aff);\n        }\n    }\n    \n    /**\n     * @dev user bet, return 100 times of real odds\n     * @param _numbers sum number list\n     */\n    function __calcuOdds(uint8[] _numbers) private view returns(uint16){\n        uint256 _t;\n        for(uint16 j = 0; j < _numbers.length; j++){\n            require(_numbers[j] >=3 && _numbers[j] <= 18, 'sum type error');\n            _t = _t.add(100000000 / probabilityMap[_numbers[j]]);\n        }\n        return uint16(70000000/ _t);\n    }\n    \n     /**\n     * @dev calcu user last round UnMaskedEarnings and add to balance\n     * @param _pID user address\n     */\n    function __dealLastRound(address _pID) private{\n        uint256 _rID = playerInfo[_pID].lrnd;\n        if( _rID == 0 || _rID == roundId ){\n            return;\n        }\n        if(playerRoundInfo[_pID][_rID].gen != 0){\n            return;\n        }\n        uint256 boomedValue = getBoomShare(_pID, _rID);\n        if(boomedValue > 0){\n            __addVal(\"boom\", _pID, boomedValue);\n            playerRoundInfo[_pID][_rID].gen = boomedValue;\n        }\n        __addShare(_pID, _rID);\n    }\n    \n    /**\n     * @dev calcu UnMaskedEarnings and add to balance\n     * @param _pID user address\n     * @param _rID roundId\n     */\n    function __addShare(address _pID, uint256 _rID) private{\n        uint256 _unMaskedEarnings = __calcUnMaskedEarnings(_pID, _rID);\n        if (_unMaskedEarnings > 0){\n            // zero out their earnings by updating mask\n            playerRoundInfo[_pID][_rID].mask = playerRoundInfo[_pID][_rID].mask.add(_unMaskedEarnings);\n            playerRoundInfo[_pID][_rID].share = playerRoundInfo[_pID][_rID].share.add(_unMaskedEarnings);\n            __addVal(\"share\", _pID, _unMaskedEarnings);\n        }\n    }\n    \n    /**\n     * @dev get result number for current phase\n     * @param _index global bet list index\n     */\n    function __sendRandomQuery(uint256 _index) private returns(bool){\n        oraclize_setCustomGasPrice(ORACLIZE_GAS_PRICE);\n        uint256 fee = oraclize_getPrice(\"URL\", ORACLIZE_GAS_LIMIT);\n        require(roundInfo[roundId].pot >= fee, 'pot balance not enough to use Oraclize');\n        bytes32 queryId = oraclize_query(\"URL\", \"json(https://api.random.org/json-rpc/1/invoke).result.random.data\",'\\n{\"jsonrpc\":\"2.0\",\"method\":\"generateIntegers\",\"params\":{\"apiKey\":\"00000000-0000-0000-0000-000000000000\",\"n\":3,\"min\":1,\"max\":6,\"replacement\":true,\"base\":10},\"id\":1}', ORACLIZE_GAS_LIMIT);\n        randomQueryMap[queryId] = [roundId, _index];\n        roundInfo[roundId].pot = roundInfo[roundId].pot.sub(fee);\n        return true;\n    }\n    \n    /**\n     * @dev get result number for current phase\n     * @param _roundId rid when bet\n     * @param betInfo Bet Detail\n     */\n    function __distributeBetValue(uint256 _roundId, Boom3datasets.Bet betInfo) private{\n        address _user = betInfo.user;\n        uint256 _value = betInfo.value;\n        playerRoundInfo[_user][_roundId].eth  = playerRoundInfo[_user][_roundId].eth.add(_value);\n        // 20% can used to buy key\n        uint256 _keys = __eth2keys(_value.mul(20)/100);\n        __addKeys(_user, _roundId, _keys);\n        // 10% to share\n        uint256 dust = __updateMasks(_user, _roundId, _value.mul(10)/100, _keys);\n        // 5% inviter rewards\n        __dealInvite(_user, _roundId,  _value.mul(5) / 100);\n        // pay 2% out to community rewards\n        COMMUNITY_ADDRESS.transfer(_value.mul(2) / 100);\n        // update invest total count in current phase\n        // 2% to community and 5% to inviter, 10% to share\n        uint256 realValue = _value.mul(83).div(100);\n        roundInfo[_roundId].eth = roundInfo[_roundId].eth.add(_value);\n        roundInfo[_roundId].pot = roundInfo[_roundId].pot.add(realValue.add(dust));\n    }\n    \n    /**\n     * @dev judge is right and deal relate things\n     * @param _roundId rid when bet\n     * @param betInfo Bet Detail\n     */\n    function __dealResult(uint256 _roundId, Boom3datasets.Bet memory betInfo) private returns (bool){\n        // deal user result\n        bool lucky = Boom3Rule.isBetRight(betInfo.numbers, Boom3Rule.sum(betInfo.result));\n        if (lucky) {\n            uint256 win = betInfo.odds.mul(betInfo.value).div(100);\n            if(roundInfo[_roundId].pot >= win){\n                roundInfo[_roundId].pot = roundInfo[_roundId].pot.sub(win);\n                __addVal(\"bet\", betInfo.user, win);\n            }else{\n                // send all value to user\n                __addVal(\"bet\", betInfo.user, roundInfo[_roundId].pot);\n                roundInfo[_roundId].pot = 0;\n            }\n        }\n        // check is got max or min balance\n        if(roundInfo[_roundId].pot <= roundInfo[roundId].ico.mul(5).div(10) || roundInfo[_roundId].pot >= roundInfo[roundId].ico.mul(3)){\n            __endRound();\n        }\n        return true;\n    }\n    \n    /**\n     * @dev ends the round\n     */\n    function __endRound() private {\n        uint256 _pot = roundInfo[roundId].pot;\n        if(_pot > 0 ){\n            uint256 _gen = _pot; // share all\n            uint256 _res = 0;\n            \n            // calculate ppt for round mask\n            uint256 _ppt = (_gen.mul(1000000000000000000)) / (roundInfo[roundId].keys);\n            uint256 _dust = _gen.sub((_ppt.mul(roundInfo[roundId].keys)) / 1000000000000000000);\n            if (_dust > 0){\n                _gen = _gen.sub(_dust);\n                _res = _res.add(_dust);\n            }\n            \n            // distribute pot to key holders\n            roundInfo[roundId].gen = _gen;\n            roundInfo[roundId].pot = 0;\n        }\n        \n        roundInfo[roundId].end = now;\n        __newRound(_res);\n    }\n    \n    /**\n     * @dev start new round\n     */\n    function __newRound(uint256 _res) private {\n        // start next round\n        roundId++;\n        roundInfo[roundId].start = now;\n        roundInfo[roundId].pot = _res;\n    }\n    \n\n    /**\n     * @dev updates masks for round and player when keys are bought, called when bet or withdrawn\n     * @return dust left over \n     */\n    function __updateMasks(address _user, uint256 _rID, uint256 _gen, uint256 _keys) private returns(uint256) {\n        // calc profit per key & round mask based on this buy:  (dust goes to pot)\n        uint256 _ppt = (_gen.mul(1000000000000000000)) / (roundInfo[_rID].keys);\n        roundInfo[_rID].mask = _ppt.add(roundInfo[_rID].mask);\n            \n        // calculate player earning from their own buy (only based on the keys\n        // they just bought).  & update player earnings mask\n        uint256 _pearn = (_ppt.mul(_keys)) / (1000000000000000000);\n        playerRoundInfo[_user][_rID].mask = (((roundInfo[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(playerRoundInfo[_user][_rID].mask);\n        \n        // calculate & return dust\n        return(_gen.sub((_ppt.mul(roundInfo[_rID].keys)) / (1000000000000000000)));\n    }\n    \n    /**\n     * @dev calculates unmasked earnings (just calculates, does not update mask)\n     * @param _roundId uint256\n     * @param _user user addres\n     * @return earnings in wei format\n     */\n    function __calcUnMaskedEarnings(address _user, uint256 _roundId) private view returns(uint256)\n    {\n        return(  (((roundInfo[_roundId].mask).mul(playerRoundInfo[_user][_roundId].keys)) / (1000000000000000000)).sub(playerRoundInfo[_user][_roundId].mask)  );\n    }\n    \n    //****************\n    // Public Write Func\n    //****************\n    \n    /**\n     * @dev init share invest\n     */\n    function invest(uint256 investValue) public payable isHuman whenNotPaused returns(bool){\n        require(roundInfo[roundId].investEnded == false, \"init invent ended\");\n        require( investValue >= 0.01 ether && investValue <= 2 ether, \"value not right\");\n        // calcu current roundId\n        uint256 period = (now - roundInfo[roundId].start) / INVEST_TIME;\n        if( roundInfo[roundId].ico == 0 && period > 0 ){\n            roundId = roundId + period;\n            roundInfo[roundId].start = roundInfo[roundId - period].start + period.mul(INVEST_TIME);\n        }else{\n            require(playerRoundInfo[msg.sender][roundId].ico < 2 ether, \"more than user max invent num\");\n        }\n        __dealLastRound(msg.sender);\n        require( msg.value.add(playerInfo[msg.sender].val) >= investValue, 'value not enough');\n        if(msg.value < investValue){\n            playerInfo[msg.sender].val = playerInfo[msg.sender].val.sub(investValue.sub(msg.value));\n        }\n        // add value\n        roundInfo[roundId].eth = roundInfo[roundId].eth.add(investValue);\n        roundInfo[roundId].pot = roundInfo[roundId].pot.add(investValue);\n        // send keys\n        __addKeys(msg.sender, roundId,  __eth2keys(investValue));\n        playerRoundInfo[msg.sender][roundId].eth = playerRoundInfo[msg.sender][roundId].eth.add(investValue);\n        playerRoundInfo[msg.sender][roundId].ico = playerRoundInfo[msg.sender][roundId].ico.add(investValue);\n        roundInfo[roundId].ico = roundInfo[roundId].ico.add(investValue);\n        // judge is start the game\n        if(roundInfo[roundId].pot >= MIN_START_ETH_NUM){\n            roundInfo[roundId].investEnded = true;\n        }\n        playerInfo[msg.sender].lrnd = roundId;\n        return true;\n    }\n    \n    /**\n     * @dev user bet\n     * @param _numbers , sum list\n     * @param inviter inviter address\n     */\n    function bet(uint8[] _numbers, uint256 betValue, address inviter) public payable isHuman whenNotPaused whenRoundStart returns(bool){\n        require( _numbers.length <= 16 , \"_numbers length error\");\n        require( betValue >= 0.05 ether, \"bet value error\");\n        __dealLastRound(msg.sender);\n        __addShare(msg.sender, roundId);\n        require( msg.value.add(playerInfo[msg.sender].val) >= betValue, 'value not enough');\n        if(msg.value < betValue){\n            playerInfo[msg.sender].val = playerInfo[msg.sender].val.sub(betValue.sub(msg.value));\n        }\n        // check value\n        playerInfo[msg.sender].lrnd = roundId;\n        uint _index = roundInfo[roundId].bets.length;\n        roundInfo[roundId].bets.push(\n            Boom3datasets.Bet({\n                user: msg.sender,\n                time: now,\n                numbers: _numbers,\n                odds: __calcuOdds(_numbers),\n                value: betValue,\n                result: [0, 0, 0],\n                refund: false\n            })\n        );\n        playerRoundInfo[msg.sender][roundId].bets.push(_index);\n        // save valid inviter if not inviter before\n        if (playerInfo[msg.sender].laff == address(0) && inviter != address(0) && inviter != msg.sender) {\n            playerInfo[msg.sender].laff = inviter;\n            playerInfo[inviter].inum++;\n        }\n        // use oraclize\n        __sendRandomQuery(_index);\n        return true;\n    }\n    \n     /**\n     * @dev user get his balance back\n     */\n    function withdraw() public isHuman whenNotPaused returns(bool){\n        address _pID = msg.sender;\n        // current round has do ico or bet\n        if(playerRoundInfo[_pID][roundId].keys > 0){\n            __addShare(_pID, roundId);\n        }\n        // last round\n        __dealLastRound(_pID);\n        \n        uint256 _val = playerInfo[_pID].val;\n        if (_val > 0){\n            playerInfo[_pID].val = 0;\n            // do transfer\n            msg.sender.transfer(_val);\n            // fire withdraw event\n            emit Boom3Events.onWithdraw(_pID, _val, now);\n        }\n        return true;\n    }\n    \n    /**\n     * @dev in case of oraclize query timeout or error, user can get they money back\n     * @param _roundId roundId\n     * @param _index betIndex\n     */\n    function refund(uint256 _roundId, uint256 _index) public isHuman whenNotPaused {\n        Boom3datasets.Bet memory betInfo = roundInfo[_roundId].bets[_index]; \n        require(block.timestamp - betInfo.time >= ORACLIZE_QUERY_MAXTIME\n\t\t\t&& (msg.sender == owner || msg.sender == betInfo.user)\n\t\t\t&& !betInfo.refund && betInfo.result[0] == 0);\n\t\troundInfo[_roundId].bets[_index].refund = true;\n\t\tbetInfo.user.transfer(betInfo.value);\n    }\n    \n    /**\n     * @dev callback func for oraclize\n     * @param _queryId oraclize queryId\n     * @param _numStr random.org response\n     */\n    function __callback(bytes32 _queryId, string _numStr) public {\n        if (msg.sender != oraclize_cbAddress()) revert();\n        uint256 _roundId = randomQueryMap[_queryId][0];\n        uint256 _index   = randomQueryMap[_queryId][1];\n        \n        // if user have get money back\n        if(roundInfo[_roundId].bets[_index].refund){\n            return;\n        }\n        \n        bytes32 _numBytes;\n        assembly {\n            _numBytes := mload(add(_numStr, 32))\n        }\n        uint8[3] memory _numbers = [uint8(_numBytes[1]) - 48, uint8(_numBytes[4]) - 48, uint8(_numBytes[7]) - 48];\n        roundInfo[_roundId].bets[_index].result = _numbers;\n        \n        Boom3datasets.Bet memory betInfo = roundInfo[_roundId].bets[_index];\n        \n        if(roundInfo[_roundId].end > 0){\n            // is boomed this round, return bet value to user\n            __addVal(\"refund\", betInfo.user, betInfo.value);\n            roundInfo[_roundId].bets[_index].refund = true;\n            return ;\n        }\n        \n        __distributeBetValue(_roundId, betInfo);\n        \n        __dealResult(_roundId, betInfo);\n    }\n    \n    //****************\n    // Public Read Func\n    //****************\n    \n   /**\n     * @dev returns player info based on address.  if no address is given, it will \n     * use msg.sender\n     * @param _addr address of the player you want to lookup \n     * @return general vault \n     * @return affiliate vault \n\t * @return player round eth\n     */\n    function getPlayerInfo(address _addr) public view isHuman returns(uint256, uint256, uint256, uint256, address)\n    {\n        if (_addr == address(0)){\n            _addr == msg.sender;\n        }\n        uint256 val;\n        if(playerRoundInfo[_addr][roundId].keys > 0){\n            // this round share\n            val = val.add(__calcUnMaskedEarnings( _addr, roundId));\n        }else{\n            uint256 _rID = playerInfo[msg.sender].lrnd;\n            if(_rID > 0){\n                val = val.add(__calcUnMaskedEarnings(_addr, _rID));\n                if(playerRoundInfo[_addr][_rID].gen == 0){\n                    val = val.add(getBoomShare(_addr, _rID));\n                }\n            }\n        }\n        \n        return (\n            playerInfo[_addr].val.add(val),\n            playerInfo[_addr].aff,\n            playerInfo[_addr].lrnd,\n            playerInfo[_addr].inum,\n            playerInfo[_addr].laff\n        );\n    }\n    \n    /**\n     * @dev return user share value in this round\n     * @param _addr address of the player you want to lookup \n     * @return share value\n     */\n    function getShare(address _addr, uint256 _roundId) public view isHuman returns(uint256)\n    {\n        if(_roundId == 0){\n            _roundId = roundId;\n        }\n        if (_addr == address(0)){\n            _addr == msg.sender;\n        }\n        return playerRoundInfo[_addr][_roundId].share + __calcUnMaskedEarnings(_addr, _roundId);\n    }\n    \n    /**\n     * @dev returns player info based on address.  if no address is given, it will \n     * use msg.sender\n     * @param _roundId roundId\n     * @param _addr address of the player you want to lookup \n     * @return general vault \n     */\n    function getBoomShare(address _addr, uint256 _roundId) public view returns(uint256)\n    {\n        if (_addr == address(0)){\n            _addr == msg.sender;\n        }\n        return (\n            roundInfo[_roundId].gen.mul(playerRoundInfo[_addr][_roundId].keys) / roundInfo[_roundId].keys\n        );\n    }\n    \n    /**\n     * @dev calculate round bet count\n     */\n    function getRoundBetCount(uint256 _roundId) public view returns (uint256){\n        return roundInfo[_roundId].bets.length;\n    }\n    \n    /**\n     * @dev get bet detail\n     */\n    function getRoundBetInfo(uint256 _roundId, uint256 _index) public view returns (address, uint256, uint8[], uint16, uint256, uint8[3], bool){\n        require(_index < roundInfo[_roundId].bets.length, 'param index error');\n        Boom3datasets.Bet memory _bet =  roundInfo[_roundId].bets[_index];\n        return (\n            _bet.user,\n            _bet.time,\n            _bet.numbers,\n            _bet.odds,\n            _bet.value,\n            _bet.result,\n            _bet.refund\n        );\n    }\n    \n    /**\n     * @dev get user bet count\n     */\n    function getUserBetCount(address _user, uint256 _roundId) public view returns (uint256){\n        return playerRoundInfo[_user][_roundId].bets.length;\n    }\n    \n    /**\n     * @dev get user bet info index list\n     */\n    function getUserBetList(address _user, uint256 _roundId, uint256 _start) public view returns (uint256[]){\n        uint256 n = playerRoundInfo[_user][_roundId].bets.length;\n        require(_start < n, '_start param error');\n        uint256[] memory list = new uint256[](_start < 20 ? _start + 1 : 20);\n        for(uint256 i = 0; i < 20; i++){\n            list[i] = playerRoundInfo[_user][_roundId].bets[_start];\n            if(_start > 0){\n                _start--;\n            }else{\n                break;\n            }\n        }\n        return list;\n    }\n    \n    //****************\n    // Admin Func\n    //****************\n    \n    function changeMinStartValue(uint256 _value) onlyOwner public returns (bool){\n        MIN_START_ETH_NUM = _value;\n        return true;\n    }\n    \n    function changeGasPrice(uint256 _price) onlyOwner public returns (bool){\n        ORACLIZE_GAS_PRICE = _price;\n        return true;\n    }\n    \n    /**\n     * @dev in case same situation, manager can share all pot to key holders\n     */\n    function makeBoomed() onlyOwner public returns (bool){\n        __endRound();\n        return true;\n    }\n}",
  "bytecode": ""
}