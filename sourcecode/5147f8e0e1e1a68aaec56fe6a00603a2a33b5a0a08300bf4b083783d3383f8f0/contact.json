{
  "address": "0xea28ef95e98195a322eb20d5f12a938581cc173b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ClaimHolderLibrary",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-22\n*/\n\npragma solidity ^0.4.24;\n\nlibrary KeyHolderLibrary {\n    event KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\n    event KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\n    event ExecutionRequested(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\n    event ExecutionFailed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\n    event Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\n    event Approved(uint256 indexed executionId, bool approved);\n\n    struct Key {\n        uint256[] purposes; //e.g., MANAGEMENT_KEY = 1, ACTION_KEY = 2, etc.\n        uint256 keyType; // e.g. 1 = ECDSA, 2 = RSA, etc.\n        bytes32 key;\n    }\n\n    struct KeyHolderData {\n        uint256 executionNonce;\n        mapping (bytes32 => Key) keys;\n        mapping (uint256 => bytes32[]) keysByPurpose;\n        mapping (uint256 => Execution) executions;\n    }\n\n    struct Execution {\n        address to;\n        uint256 value;\n        bytes data;\n        bool approved;\n        bool executed;\n    }\n\n    function init(KeyHolderData storage _keyHolderData)\n        public\n    {\n        bytes32 _key = keccak256(abi.encodePacked(msg.sender));\n        _keyHolderData.keys[_key].key = _key;\n        _keyHolderData.keys[_key].purposes.push(1);\n        _keyHolderData.keys[_key].keyType = 1;\n        _keyHolderData.keysByPurpose[1].push(_key);\n        emit KeyAdded(_key, 1, 1);\n    }\n\n    function getKey(KeyHolderData storage _keyHolderData, bytes32 _key)\n        public\n        view\n        returns(uint256[] purposes, uint256 keyType, bytes32 key)\n    {\n        return (\n            _keyHolderData.keys[_key].purposes,\n            _keyHolderData.keys[_key].keyType,\n            _keyHolderData.keys[_key].key\n        );\n    }\n\n    function getKeyPurposes(KeyHolderData storage _keyHolderData, bytes32 _key)\n        public\n        view\n        returns(uint256[] purposes)\n    {\n        return (_keyHolderData.keys[_key].purposes);\n    }\n\n    function getKeysByPurpose(KeyHolderData storage _keyHolderData, uint256 _purpose)\n        public\n        view\n        returns(bytes32[] _keys)\n    {\n        return _keyHolderData.keysByPurpose[_purpose];\n    }\n\n    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n        public\n        returns (bool success)\n    {\n        require(_keyHolderData.keys[_key].key != _key, \"Key already exists\"); // Key should not already exist\n        if (msg.sender != address(this)) {\n            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n        }\n\n        _keyHolderData.keys[_key].key = _key;\n        _keyHolderData.keys[_key].purposes.push(_purpose);\n        _keyHolderData.keys[_key].keyType = _type;\n\n        _keyHolderData.keysByPurpose[_purpose].push(_key);\n\n        emit KeyAdded(_key, _purpose, _type);\n\n        return true;\n    }\n\n    function addKeys(KeyHolderData storage _keyHolderData, bytes32[] _keys, uint256 _purpose, uint256 _type)\n        public\n        returns (bool success)\n    {\n        for (uint16 i = 0; i < _keys.length; i++) {\n            addKey(\n                _keyHolderData,\n                _keys[i],\n                _purpose,\n                _type\n            );\n        }\n\n        return true;\n    }\n\n    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\n        public\n        returns (bool success)\n    {\n        require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 2), \"Sender does not have action key\");\n        require(!_keyHolderData.executions[_id].executed, \"Already executed\");\n\n        emit Approved(_id, _approve);\n\n        if (_approve == true) {\n            _keyHolderData.executions[_id].approved = true;\n            success = _keyHolderData.executions[_id].to.call(_keyHolderData.executions[_id].data, 0);\n            if (success) {\n                _keyHolderData.executions[_id].executed = true;\n                emit Executed(\n                    _id,\n                    _keyHolderData.executions[_id].to,\n                    _keyHolderData.executions[_id].value,\n                    _keyHolderData.executions[_id].data\n                );\n                return;\n            } else {\n                emit ExecutionFailed(\n                    _id,\n                    _keyHolderData.executions[_id].to,\n                    _keyHolderData.executions[_id].value,\n                    _keyHolderData.executions[_id].data\n                );\n                return;\n            }\n        } else {\n            _keyHolderData.executions[_id].approved = false;\n        }\n        return true;\n    }\n\n    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n        public\n        returns (uint256 executionId)\n    {\n        require(!_keyHolderData.executions[_keyHolderData.executionNonce].executed, \"Already executed\");\n        _keyHolderData.executions[_keyHolderData.executionNonce].to = _to;\n        _keyHolderData.executions[_keyHolderData.executionNonce].value = _value;\n        _keyHolderData.executions[_keyHolderData.executionNonce].data = _data;\n\n        emit ExecutionRequested(_keyHolderData.executionNonce, _to, _value, _data);\n\n        if (keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)),1) || keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)),2)) {\n            approve(_keyHolderData, _keyHolderData.executionNonce, true);\n        }\n\n        _keyHolderData.executionNonce++;\n        return _keyHolderData.executionNonce-1;\n    }\n\n    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n        public\n        returns (bool success)\n    {\n        if (msg.sender != address(this)) {\n            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n        }\n\n        require(_keyHolderData.keys[_key].key == _key, \"No such key\");\n        emit KeyRemoved(_key, _purpose, _keyHolderData.keys[_key].keyType);\n\n        // Remove purpose from key\n        uint256[] storage purposes = _keyHolderData.keys[_key].purposes;\n        for (uint i = 0; i < purposes.length; i++) {\n            if (purposes[i] == _purpose) {\n                purposes[i] = purposes[purposes.length - 1];\n                delete purposes[purposes.length - 1];\n                purposes.length--;\n                break;\n            }\n        }\n\n        // If no more purposes, delete key\n        if (purposes.length == 0) {\n            delete _keyHolderData.keys[_key];\n        }\n\n        // Remove key from keysByPurpose\n        bytes32[] storage keys = _keyHolderData.keysByPurpose[_purpose];\n        for (uint j = 0; j < keys.length; j++) {\n            if (keys[j] == _key) {\n                keys[j] = keys[keys.length - 1];\n                delete keys[keys.length - 1];\n                keys.length--;\n                break;\n            }\n        }\n\n        return true;\n    }\n\n    function keyHasPurpose(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n        public\n        view\n        returns(bool result)\n    {\n        bool isThere;\n        if (_keyHolderData.keys[_key].key == 0) {\n            return false;\n        }\n\n        uint256[] storage purposes = _keyHolderData.keys[_key].purposes;\n        for (uint i = 0; i < purposes.length; i++) {\n            if (purposes[i] <= _purpose) {\n                isThere = true;\n                break;\n            }\n        }\n        return isThere;\n    }\n}\n\nlibrary ClaimHolderLibrary {\n    event ClaimAdded(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\n    event ClaimRemoved(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\n\n    struct Claim {\n        uint256 topic;\n        uint256 scheme;\n        address issuer; // msg.sender\n        bytes signature; // this.address + topic + data\n        bytes data;\n        string uri;\n    }\n\n    struct Claims {\n        mapping (bytes32 => Claim) byId;\n        mapping (uint256 => bytes32[]) byTopic;\n    }\n\n    function addClaim(\n        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n        Claims storage _claims,\n        uint256 _topic,\n        uint256 _scheme,\n        address _issuer,\n        bytes _signature,\n        bytes _data,\n        string _uri\n    )\n        public\n        returns (bytes32 claimRequestId)\n    {\n        if (msg.sender != address(this)) {\n            bytes32 sender = keccak256(abi.encodePacked(msg.sender));\n            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, sender, 1) ||\n                    KeyHolderLibrary.keyHasPurpose(_keyHolderData, sender, 3), \"Sender does not have claim signer key\");\n        }\n\n        bytes32 claimId = keccak256(abi.encodePacked(_issuer, _topic));\n\n        if (_claims.byId[claimId].issuer != _issuer) {\n            _claims.byTopic[_topic].push(claimId);\n        }\n\n        _claims.byId[claimId].topic = _topic;\n        _claims.byId[claimId].scheme = _scheme;\n        _claims.byId[claimId].issuer = _issuer;\n        _claims.byId[claimId].signature = _signature;\n        _claims.byId[claimId].data = _data;\n        _claims.byId[claimId].uri = _uri;\n\n        emit ClaimAdded(\n            claimId,\n            _topic,\n            _scheme,\n            _issuer,\n            _signature,\n            _data,\n            _uri\n        );\n\n        return claimId;\n    }\n\n    function addClaims(\n        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n        Claims storage _claims,\n        uint256[] _topic,\n        address[] _issuer,\n        bytes _signature,\n        bytes _data,\n        uint256[] _offsets\n    )\n        public\n    {\n        uint offset = 0;\n        for (uint16 i = 0; i < _topic.length; i++) {\n            addClaim(\n                _keyHolderData,\n                _claims,\n                _topic[i],\n                1,\n                _issuer[i],\n                getBytes(_signature, (i * 65), 65),\n                getBytes(_data, offset, _offsets[i]),\n                \"\"\n            );\n            offset += _offsets[i];\n        }\n    }\n\n    function removeClaim(\n        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n        Claims storage _claims,\n        bytes32 _claimId\n    )\n        public\n        returns (bool success)\n    {\n        if (msg.sender != address(this)) {\n            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\");\n        }\n\n        emit ClaimRemoved(\n            _claimId,\n            _claims.byId[_claimId].topic,\n            _claims.byId[_claimId].scheme,\n            _claims.byId[_claimId].issuer,\n            _claims.byId[_claimId].signature,\n            _claims.byId[_claimId].data,\n            _claims.byId[_claimId].uri\n        );\n\n        delete _claims.byId[_claimId];\n        return true;\n    }\n\n    function getClaim(Claims storage _claims, bytes32 _claimId)\n        public\n        view\n        returns(\n          uint256 topic,\n          uint256 scheme,\n          address issuer,\n          bytes signature,\n          bytes data,\n          string uri\n        )\n    {\n        return (\n            _claims.byId[_claimId].topic,\n            _claims.byId[_claimId].scheme,\n            _claims.byId[_claimId].issuer,\n            _claims.byId[_claimId].signature,\n            _claims.byId[_claimId].data,\n            _claims.byId[_claimId].uri\n        );\n    }\n\n    function getBytes(bytes _str, uint256 _offset, uint256 _length)\n        internal\n        pure\n        returns (bytes)\n    {\n        bytes memory sig = new bytes(_length);\n        uint256 j = 0;\n        for (uint256 k = _offset; k < _offset + _length; k++) {\n            sig[j] = _str[k];\n            j++;\n        }\n        return sig;\n    }\n}",
  "bytecode": "611302610030600b82828239805160001a6073146000811461002057610022565bfe5b5030600052607381538281f300730000000000000000000000000000000000000000301460806040526004361061005f5763ffffffff60e060020a600035041663428e59ee81146100645780635c02fae1146101b25780638522d0eb146101e4578063bd2d0c281461035d575b600080fd5b81801561007057600080fd5b5060408051602060046044358181013583810280860185019096528085526101b0958335956024803596369695606495939492019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506104609650505050505050565b005b8180156101be57600080fd5b506101d0600435602435604435610532565b604080519115158252519081900360200190f35b6101f260043560243561094a565b6040518087815260200186815260200185600160a060020a0316600160a060020a03168152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b8381101561025b578181015183820152602001610243565b50505050905090810190601f1680156102885780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b838110156102bb5781810151838201526020016102a3565b50505050905090810190601f1680156102e85780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b8381101561031b578181015183820152602001610303565b50505050905090810190601f1680156103485780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b81801561036957600080fd5b50604080516020600460a43581810135601f810184900484028501840190955284845261044e9482359460248035956044359560643595608435600160a060020a0316953695929460c494920191819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750610b4a9650505050505050565b60408051918252519081900360200190f35b6000805b86518161ffff161015610527576104fd8989898461ffff1681518110151561048857fe5b9060200190602002015160018a8661ffff168151811015156104a657fe5b906020019060200201516104c38b8860410261ffff1660416110fd565b6104e98b8a8c8b61ffff168151811015156104da57fe5b906020019060200201516110fd565b604080516020810190915260008152610b4a565b50828161ffff1681518110151561051057fe5b602090810290910101519190910190600101610464565b505050505050505050565b60003330146106f857738b747081cbda8c842bc3fbe1ae44600b4a66e78563d8188a4085336040516020018082600160a060020a0316600160a060020a03166c010000000000000000000000000281526014019150506040516020818303038152906040526040518082805190602001908083835b602083106105c65780518252601f1990920191602091820191016105a7565b51815160209384036101000a60001901801990921691161790526040805192909401829003822063ffffffff891660e060020a0283526004830197909752602482019690965260016044820152915160648084019695509093509183900390910190508186803b15801561063957600080fd5b505af415801561064d573d6000803e3d6000fd5b505050506040513d602081101561066357600080fd5b505115156106f857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f53656e64657220646f6573206e6f742068617665206d616e6167656d656e742060448201527f6b65790000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6000828152602084815260409182902060028082015482546001808501548751818152608097810188815260038801805494851615610100026000190190941696909604978101889052600160a060020a039094169792968a967f3cf57863a89432c61c4a27073c6ee39e8a764bff5a05aebfbcdcdc80b2e6130a96929593946004820194600590920193919290830190606084019060a0850190889080156107e25780601f106107b7576101008083540402835291602001916107e2565b820191906000526020600020905b8154815290600101906020018083116107c557829003601f168201915b50508481038352865460026000196101006001841615020190911604808252602090910190879080156108565780601f1061082b57610100808354040283529160200191610856565b820191906000526020600020905b81548152906001019060200180831161083957829003601f168201915b50508481038252855460026000196101006001841615020190911604808252602090910190869080156108ca5780601f1061089f576101008083540402835291602001916108ca565b820191906000526020600020905b8154815290600101906020018083116108ad57829003601f168201915b505097505050505050505060405180910390a460008281526020849052604081208181556001810182905560028101805473ffffffffffffffffffffffffffffffffffffffff191690559061092260038301826111f4565b6109306004830160006111f4565b61093e6005830160006111f4565b50600195945050505050565b60008181526020838152604080832080546001808301546002808501546003860180548851601f968216156101000260001901909116939093049485018990048902830189019097528382528897889760609788978897909695600160a060020a039095169492936004830193600590930192918591830182828015610a115780601f106109e657610100808354040283529160200191610a11565b820191906000526020600020905b8154815290600101906020018083116109f457829003601f168201915b5050855460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815295985087945092508401905082828015610a9f5780601f10610a7457610100808354040283529160200191610a9f565b820191906000526020600020905b815481529060010190602001808311610a8257829003601f168201915b5050845460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815295975086945092508401905082828015610b2d5780601f10610b0257610100808354040283529160200191610b2d565b820191906000526020600020905b815481529060010190602001808311610b1057829003601f168201915b505050505090509550955095509550955095509295509295509295565b60008080333014610db757604080516c01000000000000000000000000330260208083019190915282518083036014018152603490920192839052815191929182918401908083835b60208310610bb25780518252601f199092019160209182019101610b93565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209150738b747081cbda8c842bc3fbe1ae44600b4a66e78563d8188a408c8460016040518463ffffffff1660e060020a028152600401808481526020018360001916600019168152602001828152602001935050505060206040518083038186803b158015610c4c57600080fd5b505af4158015610c60573d6000803e3d6000fd5b505050506040513d6020811015610c7657600080fd5b505180610d245750604080517fd8188a40000000000000000000000000000000000000000000000000000000008152600481018d905260248101849052600360448201529051738b747081cbda8c842bc3fbe1ae44600b4a66e7859163d8188a40916064808301926020929190829003018186803b158015610cf757600080fd5b505af4158015610d0b573d6000803e3d6000fd5b505050506040513d6020811015610d2157600080fd5b50515b1515610db757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f53656e64657220646f6573206e6f74206861766520636c61696d207369676e6560448201527f72206b6579000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b86896040516020018083600160a060020a0316600160a060020a03166c01000000000000000000000000028152601401828152602001925050506040516020818303038152906040526040518082805190602001908083835b60208310610e2f5780518252601f199092019160209182019101610e10565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020905086600160a060020a03168a6000016000836000191660001916815260200190815260200160002060020160009054906101000a9004600160a060020a0316600160a060020a0316141515610ed05760008981526001808c01602090815260408320805492830181558352909120018190555b600081815260208b815260409091208a8155600181018a905560028101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038b161790558751610f279260039092019189019061123b565b50600081815260208b815260409091208651610f4b9260049092019188019061123b565b50600081815260208b815260409091208551610f6f9260059092019187019061123b565b5086600160a060020a03168982600019167f46149b18aa084502c3f12bc75e19eda8bda8d102b82cce8474677a6d0d5f43c58b8a8a8a60405180858152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015610ff0578181015183820152602001610fd8565b50505050905090810190601f16801561101d5780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b83811015611050578181015183820152602001611038565b50505050905090810190601f16801561107d5780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b838110156110b0578181015183820152602001611098565b50505050905090810190601f1680156110dd5780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a49a9950505050505050505050565b606080600080846040519080825280601f01601f191660200182016040528015611131578160200160208202803883390190505b509250600091508590505b8486018110156111e957868181518110151561115457fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000283838151811015156111ad57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506001918201910161113c565b509095945050505050565b50805460018160011615610100020316600290046000825580601f1061121a5750611238565b601f01602090049060005260206000209081019061123891906112b9565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061127c57805160ff19168380011785556112a9565b828001600101855582156112a9579182015b828111156112a957825182559160200191906001019061128e565b506112b59291506112b9565b5090565b6112d391905b808211156112b557600081556001016112bf565b905600a165627a7a723058207508f6bb7a2b69966ce4af83339dead424272228d13561f3c1e0894635edafc20029"
}