{
  "address": "0x757C363206f41eCf3EDB012c96b44bfE4DD5cC04",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "IDRTWallet",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "5000000",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-11\n*/\n\n// File: contracts/zos/Initializable.sol\n\n/**\n * The MIT License (MIT)\n *\n * ZeppelinOS (zos) <https://github.com/zeppelinos/zos>\n * Copyright (c) 2018 ZeppelinOS Global Limited.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy \n * of this software and associated documentation files (the \"Software\"), to deal \n * in the Software without restriction, including without limitation the rights \n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell \n * copies of the Software, and to permit persons to whom the Software is furnished to \n * do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all \n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN \n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\npragma solidity >=0.4.24 <0.6.0;\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool wasInitializing = initializing;\n    initializing = true;\n    initialized = true;\n\n    _;\n\n    initializing = wasInitializing;\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    uint256 cs;\n    assembly { cs := extcodesize(address) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\n// File: contracts/governance/wallet/MultiSigWallet.sol\n\n/**\n * Ethereum Multisignature Wallet <https://github.com/gnosis/MultiSigWallet>     \n * Copyright (c) 2016 Gnosis Ltd.\n * Modified for Rupiah Token by FengkieJ 2019.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n *\n * This file incorporates work covered by the following copyright and\n * permission notice:\n *     ZeppelinOS (zos) <https://github.com/zeppelinos/zos>\n *     Copyright (c) 2018 ZeppelinOS Global Limited.\n *\n *     The MIT License (MIT)\n *\n *     Permission is hereby granted, free of charge, to any person obtaining a copy \n *     of this software and associated documentation files (the \"Software\"), to deal \n *     in the Software without restriction, including without limitation the rights \n *     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell \n *     copies of the Software, and to permit persons to whom the Software is furnished to \n *     do so, subject to the following conditions:\n *\n *     The above copyright notice and this permission notice shall be included in all \n *     copies or substantial portions of the Software.\n *\n *     THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n *     WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN \n *     CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\npragma solidity 0.4.25;\n\n\n/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\n/// @author Stefan George - <[emailÂ protected]>\n/// Modified for Rupiah Token by FengkieJ 2019\n\ncontract MultiSigWallet is Initializable {\n    /*\n     *  Events\n     */\n    event Confirmation(address indexed sender, uint indexed transactionId);\n    event Revocation(address indexed sender, uint indexed transactionId);\n    event Submission(uint indexed transactionId);\n    event Execution(uint indexed transactionId);\n    event ExecutionFailure(uint indexed transactionId);\n    event Deposit(address indexed sender, uint value);\n    event OwnerAddition(address indexed owner);\n    event OwnerRemoval(address indexed owner);\n    event RequirementChange(uint required);\n\n    /*\n     *  Constants\n     */\n    uint constant public MAX_OWNER_COUNT = 50;\n\n    /*\n     *  Storage\n     */\n    mapping (uint => Transaction) public transactions;\n    mapping (uint => mapping (address => bool)) public confirmations;\n    mapping (address => bool) public isOwner;\n    address[] public owners;\n    uint public required;\n    uint public transactionCount;\n\n    struct Transaction {\n        address destination;\n        uint value;\n        bytes data;\n        bool executed;\n    }\n\n    /*\n     *  Modifiers\n     */\n    modifier onlyWallet() {\n        require(msg.sender == address(this));\n        _;\n    }\n\n    modifier ownerDoesNotExist(address owner) {\n        require(!isOwner[owner]);\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        require(isOwner[owner]);\n        _;\n    }\n\n    modifier transactionExists(uint transactionId) {\n        require(transactions[transactionId].destination != 0);\n        _;\n    }\n\n    modifier confirmed(uint transactionId, address owner) {\n        require(confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notConfirmed(uint transactionId, address owner) {\n        require(!confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notExecuted(uint transactionId) {\n        require(!transactions[transactionId].executed);\n        _;\n    }\n\n    modifier notNull(address _address) {\n        require(_address != 0);\n        _;\n    }\n\n    modifier validRequirement(uint ownerCount, uint _required) {\n        require(ownerCount <= MAX_OWNER_COUNT\n            && _required <= ownerCount\n            && _required != 0\n            && ownerCount != 0);\n        _;\n    }\n\n    /// @dev Fallback function allows to deposit ether.\n    function()\n        payable\n    {\n        if (msg.value > 0)\n            emit Deposit(msg.sender, msg.value);\n    }\n\n    /*\n     * Public functions\n     */\n    /// @dev Initializer sets initial owners and required number of confirmations.\n    /// @param _owners List of initial owners.\n    /// @param _required Number of required confirmations.\n    function initialize(address[] _owners, uint _required)\n        public\n        validRequirement(_owners.length, _required) initializer\n    {\n\tfor (uint i=0; i<_owners.length; i++) {\n            require(!isOwner[_owners[i]] && _owners[i] != 0);\n            isOwner[_owners[i]] = true;\n        }\n        owners = _owners;\n        required = _required;  \n    }\n\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of new owner.\n    function addOwner(address owner)\n        public\n        onlyWallet\n        ownerDoesNotExist(owner)\n        notNull(owner)\n        validRequirement(owners.length + 1, required)\n    {\n        isOwner[owner] = true;\n        owners.push(owner);\n        emit OwnerAddition(owner);\n    }\n\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner.\n    function removeOwner(address owner)\n        public\n        onlyWallet\n        ownerExists(owner)\n    {\n        isOwner[owner] = false;\n        for (uint i=0; i<owners.length - 1; i++)\n            if (owners[i] == owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        owners.length -= 1;\n        if (required > owners.length)\n            changeRequirement(owners.length);\n        emit OwnerRemoval(owner);\n    }\n\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner to be replaced.\n    /// @param newOwner Address of new owner.\n    function replaceOwner(address owner, address newOwner)\n        public\n        onlyWallet\n        ownerExists(owner)\n        ownerDoesNotExist(newOwner)\n    {\n        for (uint i=0; i<owners.length; i++)\n            if (owners[i] == owner) {\n                owners[i] = newOwner;\n                break;\n            }\n        isOwner[owner] = false;\n        isOwner[newOwner] = true;\n        emit OwnerRemoval(owner);\n        emit OwnerAddition(newOwner);\n    }\n\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\n    /// @param _required Number of required confirmations.\n    function changeRequirement(uint _required)\n        public\n        onlyWallet\n        validRequirement(owners.length, _required)\n    {\n        required = _required;\n        emit RequirementChange(_required);\n    }\n\n    /// @dev Allows an owner to submit and confirm a transaction.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function submitTransaction(address destination, uint value, bytes data)\n        public\n        returns (uint transactionId)\n    {\n        transactionId = addTransaction(destination, value, data);\n        confirmTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to confirm a transaction.\n    /// @param transactionId Transaction ID.\n    function confirmTransaction(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        transactionExists(transactionId)\n        notConfirmed(transactionId, msg.sender)\n    {\n        confirmations[transactionId][msg.sender] = true;\n        emit Confirmation(msg.sender, transactionId);\n        executeTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\n    /// @param transactionId Transaction ID.\n    function revokeConfirmation(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId)\n    {\n        confirmations[transactionId][msg.sender] = false;\n        emit Revocation(msg.sender, transactionId);\n    }\n\n    /// @dev Allows anyone to execute a confirmed transaction.\n    /// @param transactionId Transaction ID.\n    function executeTransaction(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId)\n    {\n        if (isConfirmed(transactionId)) {\n            Transaction storage txn = transactions[transactionId];\n            txn.executed = true;\n            if (external_call(txn.destination, txn.value, txn.data.length, txn.data))\n                emit Execution(transactionId);\n            else {\n                emit ExecutionFailure(transactionId);\n                txn.executed = false;\n            }\n        }\n    }\n\n    // call has been separated into its own function in order to take advantage\n    // of the Solidity's code generator to produce a loop that copies tx.data into memory.\n    function external_call(address destination, uint value, uint dataLength, bytes data) internal returns (bool) {\n        bool result;\n        assembly {\n            let x := mload(0x40)   // \"Allocate\" memory for output (0x40 is where \"free memory\" pointer is stored by convention)\n            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\n            result := call(\n                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting\n                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\n                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\n                destination,\n                value,\n                d,\n                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem\n                x,\n                0                  // Output is ignored, therefore the output size is zero\n            )\n        }\n        return result;\n    }\n\n    /// @dev Returns the confirmation status of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Confirmation status.\n    function isConfirmed(uint transactionId)\n        public\n        constant\n        returns (bool)\n    {\n        uint count = 0;\n        for (uint i=0; i<owners.length; i++) {\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n        }\n    }\n\n    /*\n     * Internal functions\n     */\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function addTransaction(address destination, uint value, bytes data)\n        internal\n        notNull(destination)\n        returns (uint transactionId)\n    {\n        transactionId = transactionCount;\n        transactions[transactionId] = Transaction({\n            destination: destination,\n            value: value,\n            data: data,\n            executed: false\n        });\n        transactionCount += 1;\n        emit Submission(transactionId);\n    }\n\n    /*\n     * Web3 call functions\n     */\n    /// @dev Returns number of confirmations of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Number of confirmations.\n    function getConfirmationCount(uint transactionId)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n    }\n\n    /// @dev Returns total number of transactions after filers are applied.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Total number of transactions after filters are applied.\n    function getTransactionCount(bool pending, bool executed)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i=0; i<transactionCount; i++)\n            if (   pending && !transactions[i].executed\n                || executed && transactions[i].executed)\n                count += 1;\n    }\n\n    /// @dev Returns list of owners.\n    /// @return List of owner addresses.\n    function getOwners()\n        public\n        constant\n        returns (address[])\n    {\n        return owners;\n    }\n\n    /// @dev Returns array with owner addresses, which confirmed transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Returns array of owner addresses.\n    function getConfirmations(uint transactionId)\n        public\n        constant\n        returns (address[] _confirmations)\n    {\n        address[] memory confirmationsTemp = new address[](owners.length);\n        uint count = 0;\n        uint i;\n        for (i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]]) {\n                confirmationsTemp[count] = owners[i];\n                count += 1;\n            }\n        _confirmations = new address[](count);\n        for (i=0; i<count; i++)\n            _confirmations[i] = confirmationsTemp[i];\n    }\n\n    /// @dev Returns list of transaction IDs in defined range.\n    /// @param from Index start position of transaction array.\n    /// @param to Index end position of transaction array.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Returns array of transaction IDs.\n    function getTransactionIds(uint from, uint to, bool pending, bool executed)\n        public\n        constant\n        returns (uint[] _transactionIds)\n    {\n        require(from < to);\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\n        uint count = 0;\n        uint i;\n        for (i=0; i<transactionCount; i++)\n            if (   pending && !transactions[i].executed\n                || executed && transactions[i].executed)\n            {\n                transactionIdsTemp[count] = i;\n                count += 1;\n            }\n        _transactionIds = new uint[](to - from);\n        for (i=from; i<to; i++)\n            _transactionIds[i - from] = transactionIdsTemp[i];\n    }\n}\n\n// File: contracts/governance/wallet/IDRTWalletV1.sol\n\n/**\n * Rupiah Token Smart Contract\n * Copyright (C) 2019 PT. Rupiah Token Indonesia <https://www.rupiahtoken.com/>. \n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * This file incorporates work covered by the following copyright and\n * permission notice:\n *\n *     Ethereum Multisignature Wallet <https://github.com/gnosis/MultiSigWallet>     \n *     Copyright (c) 2016 Gnosis Ltd.\n *     Modified for Rupiah Token by FengkieJ 2019.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU Lesser General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU Lesser General Public License for more details.\n *\n *     You should have received a copy of the GNU Lesser General Public License\n *     along with this program.  If not, see <http://www.gnu.org/licenses/>.\n *--------------------------------------------------------------------------------------------\n *     ZeppelinOS (zos) <https://github.com/zeppelinos/zos>\n *     Copyright (c) 2018 ZeppelinOS Global Limited.\n *\n *     The MIT License (MIT)\n *\n *     Permission is hereby granted, free of charge, to any person obtaining a copy \n *     of this software and associated documentation files (the \"Software\"), to deal \n *     in the Software without restriction, including without limitation the rights \n *     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell \n *     copies of the Software, and to permit persons to whom the Software is furnished to \n *     do so, subject to the following conditions:\n *\n *     The above copyright notice and this permission notice shall be included in all \n *     copies or substantial portions of the Software.\n *\n *     THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n *     WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN \n *     CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\npragma solidity 0.4.25;\n\n\ncontract IDRTWallet is MultiSigWallet {\n    uint256 internal _printLimit;\n    mapping (uint => bool) internal _requireFinalization;\n    address internal _superOwner; \n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n    \n    event PrintLimitChanged(\n        uint256 indexed oldValue,\n        uint256 indexed newValue\n    );\n    \n    event RequireFinalization(uint indexed transactionId);\n\n    event Finalized(uint indexed transactionId);\n\n    /**\n     * @dev Throws if called by any account other than _superOwner.\n     */\n    modifier onlySuperOwner() {\n        require(msg.sender == _superOwner);\n        _;\n    }\n    \n    /**\n     * @dev Initialize the smart contract to work with ZeppelinOS, can only be called once.\n     * @param admins list of the multisig contract admins.\n     * @param required number of required confirmations to execute a transaction.\n     * @param printLimit maximum amount of minting limit before _superOwner need to finalize.\n     */\n    function initialize(address[] admins, uint256 required, uint256 printLimit) public initializer {\n        MultiSigWallet.initialize(admins, required);\n        _superOwner = msg.sender;\n        _printLimit = printLimit;\n    }\n\n    /**\n     * @dev Get the function signature from call data.\n     * @param data the call data in bytes.\n     * @return function signature in bytes4.\n     */\n    function getFunctionSignature(bytes memory data) internal pure returns (bytes4 out) {\n        assembly {\n            out := mload(add(data, 0x20))\n        }\n    }\n\n    /**\n     * @dev Get the value to mint from call data.\n     * @param data the call data in bytes.\n     * @return value to mint in uint256.\n     */\n    function getValueToMint(bytes memory data) internal pure returns (uint256 value) {\n        bytes32 x;\n        assembly {\n            x := mload(add(data, 0x44))\n        }\n        value = uint256(x);\n    }\n    \n    /**\n     * @dev Allows an owner to submit and confirm a transaction.\n     * @param destination Transaction target address.\n     * @param value Transaction ether value.\n     * @param data Transaction data payload.\n     * @return the transaction ID.\n     */\n    function submitTransaction(address destination, uint value, bytes data)\n        public\n        returns (uint transactionId)\n    {\n        transactionId = addTransaction(destination, value, data);\n        bytes4 functionSignature = getFunctionSignature(data);\n\tif(\n            (functionSignature == 0x99a88ec4) || //ZeppelinOS ProxyAdmin.sol's upgrade function\n            (functionSignature == 0x9623609d) || //ZeppelinOS ProxyAdmin.sol's upgradeAndCall function\n            (functionSignature == 0xe20056e6) || //MultiSigWallet.sol's replaceOwner function\n            (functionSignature == 0x7065cb48) || //MultiSigWallet.sol's addOwner function\n            (functionSignature == 0x173825d9) || //MultiSigWallet.sol's removeOwner function\n            (functionSignature == 0x715018a6) || //ERC20 Ownable's renounceOwnership function\n            (functionSignature == 0xf2fde38b) || //ERC20 Ownable's transferOwnership function\n            ((functionSignature == 0x40c10f19) && (getValueToMint(data) > _printLimit)) //Calls mint function and value exceeds _printLimit  \n        ) {\n            _requireFinalization[transactionId] = true;\n            emit RequireFinalization(transactionId);\n        }\n        confirmTransaction(transactionId);\n    }\n    \n    /**\n     * @dev Allows anyone to execute a confirmed transaction.\n     * @param transactionId Transaction ID.\n     */\n    function executeTransaction(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId)\n    {\n        if(!_requireFinalization[transactionId]) {\n            super.executeTransaction(transactionId);\n        } else {\n            emit RequireFinalization(transactionId);\n        }\n    }\n\n    /** \n     * @dev Finalize tx by _superOwner.\n     * @param transactionId Transaction ID.\n     */\n    function finalizeTransaction(uint transactionId)\n        public\n        onlySuperOwner()\n        notExecuted(transactionId)\n    {\n        require(_requireFinalization[transactionId]);\n\t    require(isConfirmed(transactionId));\n\n        Transaction storage txn = transactions[transactionId];\n        txn.executed = true;\n        if (external_call(txn.destination, txn.value, txn.data.length, txn.data)) {\n            emit Execution(transactionId);\n            emit Finalized(transactionId);\n        } else {\n            emit ExecutionFailure(transactionId);\n            txn.executed = false;\n        }\n    }\n    \n    /**\n     * @dev Set new printLimit before _superOwner need to finalize.\n     * @param newLimit of print limit amount.\n     */\n    function setPrintLimit(uint256 newLimit)\n        public\n        onlySuperOwner()\n    {\n        emit PrintLimitChanged(_printLimit, newLimit);\n        _printLimit = newLimit;\n    }\n\n    /**\n     * @dev Set new _superOwner address.\n     * @param newAddress new address for _superOwner\n     */\n    function transferOwnership(address newAddress)\n        public\n        onlySuperOwner()\n    {\n        require(newAddress != address(0));\n\n        _superOwner = newAddress;\n        emit OwnershipTransferred(msg.sender, newAddress);\n    }\t\n\n    /**\n     * @dev Get current _superOwner address.\n     */\n    function superOwner()\n        public view\n        returns (address)\n    {\n        return _superOwner;\n    }   \n\n\n    /**\n     * @dev Get whether a transaction require finalization or not.\n     */\n    function requireFinalization(uint transactionId)\n        public view\n        returns (bool)\n    {\n        return _requireFinalization[transactionId];\n    }  \n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmations\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"finalizeTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setPrintLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pending\",\"type\":\"bool\"},{\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admins\",\"type\":\"address[]\"},{\"name\":\"required\",\"type\":\"uint256\"},{\"name\":\"printLimit\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owners\",\"type\":\"address[]\"},{\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"superOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmationCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"requireFinalization\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"executed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"uint256\"},{\"name\":\"pending\",\"type\":\"bool\"},{\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionIds\",\"outputs\":[{\"name\":\"_transactionIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmations\",\"outputs\":[{\"name\":\"_confirmations\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transactionCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"submitTransaction\",\"outputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_OWNER_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"replaceOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"PrintLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"RequireFinalization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Revocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Submission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Execution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"ExecutionFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"RequirementChange\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b50612618806100206000396000f3006080604052600436106101695763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663025e7c2781146101ab578063173825d9146101ec57806320ea8d861461021a5780632f54bf6e146102325780633411c81c146102745780634a57e1c9146102a557806352320d04146102bd57806354741525146102d55780635eae79591461030657806360b5bb3f146103645780637065cb48146103bb578063784547a7146103e957806387dcd2b6146104015780638b51d13f146104165780638ca803971461042e5780639ace38c214610446578063a0e67e2b1461051b578063a8abe69a14610580578063b5dc40c3146105a5578063b77bf600146105bd578063ba51a6df146105d2578063c01a8c84146105ea578063c642747414610602578063d74f8edd14610678578063dc8452cd1461068d578063e20056e6146106a2578063ee22610b146106d6578063f2fde38b146106ee575b60003411156101a95760408051348152905133917fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c919081900360200190a25b005b3480156101b757600080fd5b506101c360043561071c565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156101f857600080fd5b506101a973ffffffffffffffffffffffffffffffffffffffff60043516610751565b34801561022657600080fd5b506101a96004356109a8565b34801561023e57600080fd5b5061026073ffffffffffffffffffffffffffffffffffffffff60043516610a80565b604080519115158252519081900360200190f35b34801561028057600080fd5b5061026060043573ffffffffffffffffffffffffffffffffffffffff60243516610a95565b3480156102b157600080fd5b506101a9600435610ab5565b3480156102c957600080fd5b506101a9600435610d03565b3480156102e157600080fd5b506102f460043515156024351515610d5b565b60408051918252519081900360200190f35b34801561031257600080fd5b50604080516020600480358082013583810280860185019096528085526101a995369593946024949385019291829185019084908082843750949750508435955050506020909201359150610dc79050565b34801561037057600080fd5b50604080516020600480358082013583810280860185019096528085526101a9953695939460249493850192918291850190849080828437509497505093359450610f519350505050565b3480156103c757600080fd5b506101a973ffffffffffffffffffffffffffffffffffffffff60043516611209565b3480156103f557600080fd5b5061026060043561137e565b34801561040d57600080fd5b506101c361140f565b34801561042257600080fd5b506102f460043561142c565b34801561043a57600080fd5b506102606004356114a8565b34801561045257600080fd5b5061045e6004356114bd565b604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018060200183151515158152602001828103825284818151815260200191508051906020019080838360005b838110156104dd5781810151838201526020016104c5565b50505050905090810190601f16801561050a5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b34801561052757600080fd5b506105306115a7565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561056c578181015183820152602001610554565b505050509050019250505060405180910390f35b34801561058c57600080fd5b5061053060043560243560443515156064351515611616565b3480156105b157600080fd5b5061053060043561175b565b3480156105c957600080fd5b506102f4611908565b3480156105de57600080fd5b506101a960043561190e565b3480156105f657600080fd5b506101a960043561198d565b34801561060e57600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526102f494823573ffffffffffffffffffffffffffffffffffffffff16946024803595369594606494920191908190840183828082843750949750611a819650505050505050565b34801561068457600080fd5b506102f4611d7e565b34801561069957600080fd5b506102f4611d83565b3480156106ae57600080fd5b506101a973ffffffffffffffffffffffffffffffffffffffff60043581169060243516611d89565b3480156106e257600080fd5b506101a9600435611f99565b3480156106fa57600080fd5b506101a973ffffffffffffffffffffffffffffffffffffffff6004351661205c565b603680548290811061072a57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b600033301461075f57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8216600090815260356020526040902054829060ff16151561079557600080fd5b73ffffffffffffffffffffffffffffffffffffffff8316600090815260356020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905591505b6036547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01821015610918578273ffffffffffffffffffffffffffffffffffffffff1660368381548110151561083557fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16141561090d57603680547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190811061088d57fe5b6000918252602090912001546036805473ffffffffffffffffffffffffffffffffffffffff90921691849081106108c057fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610918565b6001909101906107e3565b603680547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01906109499082612476565b506036546037541115610962576036546109629061190e565b60405173ffffffffffffffffffffffffffffffffffffffff8416907f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9090600090a2505050565b3360008181526035602052604090205460ff1615156109c657600080fd5b60008281526034602090815260408083203380855292529091205483919060ff1615156109f257600080fd5b600084815260336020526040902060030154849060ff1615610a1357600080fd5b600085815260346020908152604080832033808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690555187927ff6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e991a35050505050565b60356020526000908152604090205460ff1681565b603460209081526000928352604080842090915290825290205460ff1681565b603b5460009073ffffffffffffffffffffffffffffffffffffffff163314610adc57600080fd5b600082815260336020526040902060030154829060ff1615610afd57600080fd5b6000838152603a602052604090205460ff161515610b1a57600080fd5b610b238361137e565b1515610b2e57600080fd5b6000838152603360209081526040918290206003810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001908117909155815481830154600280850180548851601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff97831615610100029790970190911692909204948501879004870282018701909752838152939750610c489573ffffffffffffffffffffffffffffffffffffffff90921694909391908390830182828015610c3e5780601f10610c1357610100808354040283529160200191610c3e565b820191906000526020600020905b815481529060010190602001808311610c2157829003601f168201915b5050505050612113565b15610ca85760405183907f33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed7590600090a260405183907f839cf22e1ba87ce2f5b9bbf46cf0175a09eed52febdfaac8852478e68203c76390600090a2610cfe565b60405183907f526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b7923690600090a26003820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690555b505050565b603b5473ffffffffffffffffffffffffffffffffffffffff163314610d2757600080fd5b6039546040518291907f9ff2af0856d9c4a963c0754c91648133254306ac6791245494febd8e20cfe99490600090a3603955565b6000805b603854811015610dc057838015610d88575060008181526033602052604090206003015460ff16155b80610dac5750828015610dac575060008181526033602052604090206003015460ff165b15610db8576001820191505b600101610d5f565b5092915050565b60008054610100900460ff1680610de15750610de1612136565b80610def575060005460ff16155b1515610e8257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560448201527f656e20696e697469616c697a6564000000000000000000000000000000000000606482015290519081900360840190fd5b506000805460016101007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff831681177fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016919091179092550460ff16610ee88484610f51565b603b80547fffffffffffffffffffffffff0000000000000000000000000000000000000000163317905560399190915560008054911515610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff9092169190911790555050565b600082518260328211158015610f675750818111155b8015610f7257508015155b8015610f7d57508115155b1515610f8857600080fd5b60008054610100900460ff1680610fa25750610fa2612136565b80610fb0575060005460ff16155b151561104357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560448201527f656e20696e697469616c697a6564000000000000000000000000000000000000606482015290519081900360840190fd5b506000805460016101007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff831681177fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169190911783559194500460ff165b85518410156111b3576035600087868151811015156110bd57fe5b602090810290910181015173ffffffffffffffffffffffffffffffffffffffff1682528101919091526040016000205460ff1615801561112b5750858481518110151561110657fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff16600014155b151561113657600080fd5b600160356000888781518110151561114a57fe5b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055600193909301926110a2565b85516111c690603690602089019061249a565b50603794909455505060008054921515610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909316929092179091555050565b33301461121557600080fd5b73ffffffffffffffffffffffffffffffffffffffff8116600090815260356020526040902054819060ff161561124a57600080fd5b8173ffffffffffffffffffffffffffffffffffffffff8116151561126d57600080fd5b6036805490506001016037546032821115801561128a5750818111155b801561129557508015155b80156112a057508115155b15156112ab57600080fd5b73ffffffffffffffffffffffffffffffffffffffff851660008181526035602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915560368054918201815583527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b80180547fffffffffffffffffffffffff00000000000000000000000000000000000000001684179055517ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d9190a25050505050565b600080805b60365481101561140857600084815260346020526040812060368054919291849081106113ac57fe5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16835282019290925260400190205460ff16156113ed576001820191505b6037548214156114005760019250611408565b600101611383565b5050919050565b603b5473ffffffffffffffffffffffffffffffffffffffff165b90565b6000805b6036548110156114a2576000838152603460205260408120603680549192918490811061145957fe5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16835282019290925260400190205460ff161561149a576001820191505b600101611430565b50919050565b6000908152603a602052604090205460ff1690565b603360209081526000918252604091829020805460018083015460028085018054885161010095821615959095027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff011691909104601f810187900487028401870190975286835273ffffffffffffffffffffffffffffffffffffffff9093169590949192918301828280156115945780601f1061156957610100808354040283529160200191611594565b820191906000526020600020905b81548152906001019060200180831161157757829003601f168201915b5050506003909301549192505060ff1684565b6060603680548060200260200160405190810160405280929190818152602001828054801561160c57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116115e1575b5050505050905090565b60608060008086881061162857600080fd5b603854604051908082528060200260200182016040528015611654578160200160208202803883390190505b50925060009150600090505b6038548110156116db57858015611689575060008181526033602052604090206003015460ff16155b806116ad57508480156116ad575060008181526033602052604090206003015460ff165b156116d3578083838151811015156116c157fe5b60209081029091010152600191909101905b600101611660565b878703604051908082528060200260200182016040528015611707578160200160208202803883390190505b5093508790505b8681101561175057828181518110151561172457fe5b906020019060200201518489830381518110151561173e57fe5b6020908102909101015260010161170e565b505050949350505050565b606080600080603680549050604051908082528060200260200182016040528015611790578160200160208202803883390190505b50925060009150600090505b60365481101561187457600085815260346020526040812060368054919291849081106117c557fe5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16835282019290925260400190205460ff161561186c57603680548290811061180d57fe5b600091825260209091200154835173ffffffffffffffffffffffffffffffffffffffff9091169084908490811061184057fe5b73ffffffffffffffffffffffffffffffffffffffff909216602092830290910190910152600191909101905b60010161179c565b8160405190808252806020026020018201604052801561189e578160200160208202803883390190505b509350600090505b818110156119005782818151811015156118bc57fe5b9060200190602002015184828151811015156118d457fe5b73ffffffffffffffffffffffffffffffffffffffff9092166020928302909101909101526001016118a6565b505050919050565b60385481565b33301461191a57600080fd5b603654816032821180159061192f5750818111155b801561193a57508015155b801561194557508115155b151561195057600080fd5b60378390556040805184815290517fa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a9181900360200190a1505050565b3360008181526035602052604090205460ff1615156119ab57600080fd5b600082815260336020526040902054829073ffffffffffffffffffffffffffffffffffffffff1615156119dd57600080fd5b60008381526034602090815260408083203380855292529091205484919060ff1615611a0857600080fd5b600085815260346020908152604080832033808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555187927f4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef91a3611a7a85611f99565b5050505050565b600080611a8f858585612140565b9150611a9a83612274565b90507f99a88ec4000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000082161480611b2d57507f9623609d000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008216145b80611b7957507fe20056e6000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008216145b80611bc557507f7065cb48000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008216145b80611c1157507f173825d9000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008216145b80611c5d57507f715018a6000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008216145b80611ca957507ff2fde38b000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008216145b80611d0957507f40c10f19000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008216148015611d095750603954611d078461227b565b115b15611d6d576000828152603a602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555183917f275d2acad3cd3bbd51bf21caf4d36b77567e6c97029a336a5297a4e741eba46e91a25b611d768261198d565b509392505050565b603281565b60375481565b6000333014611d9757600080fd5b73ffffffffffffffffffffffffffffffffffffffff8316600090815260356020526040902054839060ff161515611dcd57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8316600090815260356020526040902054839060ff1615611e0257600080fd5b600092505b603654831015611ec7578473ffffffffffffffffffffffffffffffffffffffff16603684815481101515611e3757fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff161415611ebc5783603684815481101515611e6f57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611ec7565b600190920191611e07565b73ffffffffffffffffffffffffffffffffffffffff80861660008181526035602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090811690915593881682528082208054909416600117909355915190917f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9091a260405173ffffffffffffffffffffffffffffffffffffffff8516907ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d90600090a25050505050565b3360008181526035602052604090205460ff161515611fb757600080fd5b60008281526034602090815260408083203380855292529091205483919060ff161515611fe357600080fd5b600084815260336020526040902060030154849060ff161561200457600080fd5b6000858152603a602052604090205460ff16151561202a5761202585612282565b611a7a565b60405185907f275d2acad3cd3bbd51bf21caf4d36b77567e6c97029a336a5297a4e741eba46e90600090a25050505050565b603b5473ffffffffffffffffffffffffffffffffffffffff16331461208057600080fd5b73ffffffffffffffffffffffffffffffffffffffff811615156120a257600080fd5b603b80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831690811790915560405133907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b6000806040516020840160008287838a8c6187965a03f198975050505050505050565b303b8015905b5090565b60008373ffffffffffffffffffffffffffffffffffffffff8116151561216557600080fd5b6038546040805160808101825273ffffffffffffffffffffffffffffffffffffffff888116825260208083018981528385018981526000606086018190528781526033845295909520845181547fffffffffffffffffffffffff000000000000000000000000000000000000000016941693909317835551600183015592518051949650919390926121fe926002850192910190612520565b5060609190910151600390910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001691151591909117905560388054600101905560405182907fc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e5190600090a2509392505050565b6020015190565b6044015190565b3360008181526035602052604081205490919060ff1615156122a357600080fd5b60008381526034602090815260408083203380855292529091205484919060ff1615156122cf57600080fd5b600085815260336020526040902060030154859060ff16156122f057600080fd5b6122f98661137e565b1561246e576000868152603360209081526040918290206003810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001908117909155815481830154600280850180548851601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff97831615610100029790970190911692909204948501879004870282018701909752838152939a506123e39573ffffffffffffffffffffffffffffffffffffffff90921694909391908390830182828015610c3e5780601f10610c1357610100808354040283529160200191610c3e565b156124185760405186907f33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed7590600090a261246e565b60405186907f526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b7923690600090a26003850180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690555b505050505050565b815481835581811115610cfe57600083815260209020610cfe918101908301612596565b828054828255906000526020600020908101928215612514579160200282015b8281111561251457825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9091161782556020909201916001909101906124ba565b5061213c9291506125b0565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061256157805160ff191683800117855561258e565b8280016001018555821561258e579182015b8281111561258e578251825591602001919060010190612573565b5061213c9291505b61142991905b8082111561213c576000815560010161259c565b61142991905b8082111561213c5780547fffffffffffffffffffffffff00000000000000000000000000000000000000001681556001016125b65600a165627a7a723058204aca39d5470ddf72dee16f196748bfb2ad54e85424ce2dd329626c77bfaa53b00029"
}