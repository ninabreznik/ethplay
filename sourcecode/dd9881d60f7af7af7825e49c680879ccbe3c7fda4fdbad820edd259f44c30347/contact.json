{
  "address": "0x7777776dd38fcf2a446297305981497f201f85ef",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DrunkardGame",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-13\n*/\n\npragma solidity ^ 0.5.7;\n\nlibrary SafeMath {\n\n    /**\n     * @dev Multiplies two numbers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n}\n\n\n/*\n * @title String & slice utility library for Solidity contracts.\n * @author Nick Johnson <[emailÂ protected]>\n *\n * @dev Functionality in this library is largely implemented using an\n *      abstraction called a 'slice'. A slice represents a part of a string -\n *      anything from the entire string to a single character, or even no\n *      characters at all (a 0-length slice). Since a slice only has to specify\n *      an offset and a length, copying and manipulating slices is a lot less\n *      expensive than copying and manipulating the strings they reference.\n *\n *      To further reduce gas costs, most functions on slice that need to return\n *      a slice modify the original one instead of allocating a new one; for\n *      instance, `s.split(\".\")` will return the text up to the first '.',\n *      modifying s to only contain the remainder of the string after the '.'.\n *      In situations where you do not want to modify the original slice, you\n *      can make a copy first with `.copy()`, for example:\n *      `s.copy().split(\".\")`. Try and avoid using this idiom in loops; since\n *      Solidity has no memory management, it will result in allocating many\n *      short-lived slices that are later discarded.\n *\n *      Functions that return two slices come in two versions: a non-allocating\n *      version that takes the second slice as an argument, modifying it in\n *      place, and an allocating version that allocates and returns the second\n *      slice; see `nextRune` for example.\n *\n *      Functions that have to copy string data will return strings rather than\n *      slices; these can be cast back to slices for further processing if\n *      required.\n *\n *      For convenience, some functions are provided with non-modifying\n *      variants that create a new slice and return both; for instance,\n *      `s.splitNew('.')` leaves s unmodified, and returns two values\n *      corresponding to the left and right parts of the string.\n */\nlibrary strings {\n    struct slice {\n        uint _len;\n        uint _ptr;\n    }\n\n    function memcpy(uint dest, uint src, uint len) private pure {\n        // Copy word-length chunks while possible\n        for(; len >= 32; len -= 32) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n            dest += 32;\n            src += 32;\n        }\n\n        // Copy remaining bytes\n        uint mask = 256 ** (32 - len) - 1;\n        assembly {\n            let srcpart := and(mload(src), not(mask))\n            let destpart := and(mload(dest), mask)\n            mstore(dest, or(destpart, srcpart))\n        }\n    }\n\n    /*\n     * @dev Returns a slice containing the entire string.\n     * @param self The string to make a slice from.\n     * @return A newly allocated slice containing the entire string.\n     */\n    function toSlice(string memory self) internal pure returns (slice memory) {\n        uint ptr;\n        assembly {\n            ptr := add(self, 0x20)\n        }\n        return slice(bytes(self).length, ptr);\n    }\n\n    /*\n     * @dev Returns a new slice containing the same data as the current slice.\n     * @param self The slice to copy.\n     * @return A new slice containing the same data as `self`.\n     */\n    function copy(slice memory self) internal pure returns (slice memory) {\n        return slice(self._len, self._ptr);\n    }\n\n    /*\n     * @dev Copies a slice to a new string.\n     * @param self The slice to copy.\n     * @return A newly allocated string containing the slice's text.\n     */\n    function toString(slice memory self) internal pure returns (string memory) {\n        string memory ret = new string(self._len);\n        uint retptr;\n        assembly { retptr := add(ret, 32) }\n\n        memcpy(retptr, self._ptr, self._len);\n        return ret;\n    }\n\n    /*\n     * @dev Returns the length in runes of the slice. Note that this operation\n     *      takes time proportional to the length of the slice; avoid using it\n     *      in loops, and call `slice.empty()` if you only need to know whether\n     *      the slice is empty or not.\n     * @param self The slice to operate on.\n     * @return The length of the slice in runes.\n     */\n    function len(slice memory self) internal pure returns (uint l) {\n        // Starting at ptr-31 means the LSB will be the byte we care about\n        uint ptr = self._ptr - 31;\n        uint end = ptr + self._len;\n        for (l = 0; ptr < end; l++) {\n            uint8 b;\n            assembly { b := and(mload(ptr), 0xFF) }\n            if (b < 0x80) {\n                ptr += 1;\n            } else if(b < 0xE0) {\n                ptr += 2;\n            } else if(b < 0xF0) {\n                ptr += 3;\n            } else if(b < 0xF8) {\n                ptr += 4;\n            } else if(b < 0xFC) {\n                ptr += 5;\n            } else {\n                ptr += 6;\n            }\n        }\n    }\n\n    /*\n     * @dev Returns true if the slice is empty (has a length of 0).\n     * @param self The slice to operate on.\n     * @return True if the slice is empty, False otherwise.\n     */\n    function empty(slice memory self) internal pure returns (bool) {\n        return self._len == 0;\n    }\n\n    /*\n     * @dev Returns a positive number if `other` comes lexicographically after\n     *      `self`, a negative number if it comes before, or zero if the\n     *      contents of the two slices are equal. Comparison is done per-rune,\n     *      on unicode codepoints.\n     * @param self The first slice to compare.\n     * @param other The second slice to compare.\n     * @return The result of the comparison.\n     */\n    function compare(slice memory self, slice memory other) internal pure returns (int) {\n        uint shortest = self._len;\n        if (other._len < self._len)\n            shortest = other._len;\n\n        uint selfptr = self._ptr;\n        uint otherptr = other._ptr;\n        for (uint idx = 0; idx < shortest; idx += 32) {\n            uint a;\n            uint b;\n            assembly {\n                a := mload(selfptr)\n                b := mload(otherptr)\n            }\n            if (a != b) {\n                // Mask out irrelevant bytes and check again\n                uint256 mask = uint256(-1); // 0xffff...\n                if(shortest < 32) {\n                  mask = ~(2 ** (8 * (32 - shortest + idx)) - 1);\n                }\n                uint256 diff = (a & mask) - (b & mask);\n                if (diff != 0)\n                    return int(diff);\n            }\n            selfptr += 32;\n            otherptr += 32;\n        }\n        return int(self._len) - int(other._len);\n    }\n\n    /*\n     * @dev Returns true if the two slices contain the same text.\n     * @param self The first slice to compare.\n     * @param self The second slice to compare.\n     * @return True if the slices are equal, false otherwise.\n     */\n    function equals(slice memory self, slice memory other) internal pure returns (bool) {\n        return compare(self, other) == 0;\n    }\n\n    /*\n     * @dev Extracts the first rune in the slice into `rune`, advancing the\n     *      slice to point to the next rune and returning `self`.\n     * @param self The slice to operate on.\n     * @param rune The slice that will contain the first rune.\n     * @return `rune`.\n     */\n    function nextRune(slice memory self, slice memory rune) internal pure returns (slice memory) {\n        rune._ptr = self._ptr;\n\n        if (self._len == 0) {\n            rune._len = 0;\n            return rune;\n        }\n\n        uint l;\n        uint b;\n        // Load the first byte of the rune into the LSBs of b\n        assembly { b := and(mload(sub(mload(add(self, 32)), 31)), 0xFF) }\n        if (b < 0x80) {\n            l = 1;\n        } else if(b < 0xE0) {\n            l = 2;\n        } else if(b < 0xF0) {\n            l = 3;\n        } else {\n            l = 4;\n        }\n\n        // Check for truncated codepoints\n        if (l > self._len) {\n            rune._len = self._len;\n            self._ptr += self._len;\n            self._len = 0;\n            return rune;\n        }\n\n        self._ptr += l;\n        self._len -= l;\n        rune._len = l;\n        return rune;\n    }\n\n    /*\n     * @dev Returns the first rune in the slice, advancing the slice to point\n     *      to the next rune.\n     * @param self The slice to operate on.\n     * @return A slice containing only the first rune from `self`.\n     */\n    function nextRune(slice memory self) internal pure returns (slice memory ret) {\n        nextRune(self, ret);\n    }\n\n    /*\n     * @dev Returns the number of the first codepoint in the slice.\n     * @param self The slice to operate on.\n     * @return The number of the first codepoint in the slice.\n     */\n    function ord(slice memory self) internal pure returns (uint ret) {\n        if (self._len == 0) {\n            return 0;\n        }\n\n        uint word;\n        uint length;\n        uint divisor = 2 ** 248;\n\n        // Load the rune into the MSBs of b\n        assembly { word:= mload(mload(add(self, 32))) }\n        uint b = word / divisor;\n        if (b < 0x80) {\n            ret = b;\n            length = 1;\n        } else if(b < 0xE0) {\n            ret = b & 0x1F;\n            length = 2;\n        } else if(b < 0xF0) {\n            ret = b & 0x0F;\n            length = 3;\n        } else {\n            ret = b & 0x07;\n            length = 4;\n        }\n\n        // Check for truncated codepoints\n        if (length > self._len) {\n            return 0;\n        }\n\n        for (uint i = 1; i < length; i++) {\n            divisor = divisor / 256;\n            b = (word / divisor) & 0xFF;\n            if (b & 0xC0 != 0x80) {\n                // Invalid UTF-8 sequence\n                return 0;\n            }\n            ret = (ret * 64) | (b & 0x3F);\n        }\n\n        return ret;\n    }\n\n    /*\n     * @dev Returns the keccak-256 hash of the slice.\n     * @param self The slice to hash.\n     * @return The hash of the slice.\n     */\n    function keccak(slice memory self) internal pure returns (bytes32 ret) {\n        assembly {\n            ret := keccak256(mload(add(self, 32)), mload(self))\n        }\n    }\n\n    /*\n     * @dev Returns true if `self` starts with `needle`.\n     * @param self The slice to operate on.\n     * @param needle The slice to search for.\n     * @return True if the slice starts with the provided text, false otherwise.\n     */\n    function startsWith(slice memory self, slice memory needle) internal pure returns (bool) {\n        if (self._len < needle._len) {\n            return false;\n        }\n\n        if (self._ptr == needle._ptr) {\n            return true;\n        }\n\n        bool equal;\n        assembly {\n            let length := mload(needle)\n            let selfptr := mload(add(self, 0x20))\n            let needleptr := mload(add(needle, 0x20))\n            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\n        }\n        return equal;\n    }\n\n    /*\n     * @dev If `self` starts with `needle`, `needle` is removed from the\n     *      beginning of `self`. Otherwise, `self` is unmodified.\n     * @param self The slice to operate on.\n     * @param needle The slice to search for.\n     * @return `self`\n     */\n    function beyond(slice memory self, slice memory needle) internal pure returns (slice memory) {\n        if (self._len < needle._len) {\n            return self;\n        }\n\n        bool equal = true;\n        if (self._ptr != needle._ptr) {\n            assembly {\n                let length := mload(needle)\n                let selfptr := mload(add(self, 0x20))\n                let needleptr := mload(add(needle, 0x20))\n                equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\n            }\n        }\n\n        if (equal) {\n            self._len -= needle._len;\n            self._ptr += needle._len;\n        }\n\n        return self;\n    }\n\n    /*\n     * @dev Returns true if the slice ends with `needle`.\n     * @param self The slice to operate on.\n     * @param needle The slice to search for.\n     * @return True if the slice starts with the provided text, false otherwise.\n     */\n    function endsWith(slice memory self, slice memory needle) internal pure returns (bool) {\n        if (self._len < needle._len) {\n            return false;\n        }\n\n        uint selfptr = self._ptr + self._len - needle._len;\n\n        if (selfptr == needle._ptr) {\n            return true;\n        }\n\n        bool equal;\n        assembly {\n            let length := mload(needle)\n            let needleptr := mload(add(needle, 0x20))\n            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\n        }\n\n        return equal;\n    }\n\n    /*\n     * @dev If `self` ends with `needle`, `needle` is removed from the\n     *      end of `self`. Otherwise, `self` is unmodified.\n     * @param self The slice to operate on.\n     * @param needle The slice to search for.\n     * @return `self`\n     */\n    function until(slice memory self, slice memory needle) internal pure returns (slice memory) {\n        if (self._len < needle._len) {\n            return self;\n        }\n\n        uint selfptr = self._ptr + self._len - needle._len;\n        bool equal = true;\n        if (selfptr != needle._ptr) {\n            assembly {\n                let length := mload(needle)\n                let needleptr := mload(add(needle, 0x20))\n                equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\n            }\n        }\n\n        if (equal) {\n            self._len -= needle._len;\n        }\n\n        return self;\n    }\n\n    // Returns the memory address of the first byte of the first occurrence of\n    // `needle` in `self`, or the first byte after `self` if not found.\n    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {\n        uint ptr = selfptr;\n        uint idx;\n\n        if (needlelen <= selflen) {\n            if (needlelen <= 32) {\n                bytes32 mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));\n\n                bytes32 needledata;\n                assembly { needledata := and(mload(needleptr), mask) }\n\n                uint end = selfptr + selflen - needlelen;\n                bytes32 ptrdata;\n                assembly { ptrdata := and(mload(ptr), mask) }\n\n                while (ptrdata != needledata) {\n                    if (ptr >= end)\n                        return selfptr + selflen;\n                    ptr++;\n                    assembly { ptrdata := and(mload(ptr), mask) }\n                }\n                return ptr;\n            } else {\n                // For long needles, use hashing\n                bytes32 hash;\n                assembly { hash := keccak256(needleptr, needlelen) }\n\n                for (idx = 0; idx <= selflen - needlelen; idx++) {\n                    bytes32 testHash;\n                    assembly { testHash := keccak256(ptr, needlelen) }\n                    if (hash == testHash)\n                        return ptr;\n                    ptr += 1;\n                }\n            }\n        }\n        return selfptr + selflen;\n    }\n\n    // Returns the memory address of the first byte after the last occurrence of\n    // `needle` in `self`, or the address of `self` if not found.\n    function rfindPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {\n        uint ptr;\n\n        if (needlelen <= selflen) {\n            if (needlelen <= 32) {\n                bytes32 mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));\n\n                bytes32 needledata;\n                assembly { needledata := and(mload(needleptr), mask) }\n\n                ptr = selfptr + selflen - needlelen;\n                bytes32 ptrdata;\n                assembly { ptrdata := and(mload(ptr), mask) }\n\n                while (ptrdata != needledata) {\n                    if (ptr <= selfptr)\n                        return selfptr;\n                    ptr--;\n                    assembly { ptrdata := and(mload(ptr), mask) }\n                }\n                return ptr + needlelen;\n            } else {\n                // For long needles, use hashing\n                bytes32 hash;\n                assembly { hash := keccak256(needleptr, needlelen) }\n                ptr = selfptr + (selflen - needlelen);\n                while (ptr >= selfptr) {\n                    bytes32 testHash;\n                    assembly { testHash := keccak256(ptr, needlelen) }\n                    if (hash == testHash)\n                        return ptr + needlelen;\n                    ptr -= 1;\n                }\n            }\n        }\n        return selfptr;\n    }\n\n    /*\n     * @dev Modifies `self` to contain everything from the first occurrence of\n     *      `needle` to the end of the slice. `self` is set to the empty slice\n     *      if `needle` is not found.\n     * @param self The slice to search and modify.\n     * @param needle The text to search for.\n     * @return `self`.\n     */\n    function find(slice memory self, slice memory needle) internal pure returns (slice memory) {\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\n        self._len -= ptr - self._ptr;\n        self._ptr = ptr;\n        return self;\n    }\n\n    /*\n     * @dev Modifies `self` to contain the part of the string from the start of\n     *      `self` to the end of the first occurrence of `needle`. If `needle`\n     *      is not found, `self` is set to the empty slice.\n     * @param self The slice to search and modify.\n     * @param needle The text to search for.\n     * @return `self`.\n     */\n    function rfind(slice memory self, slice memory needle) internal pure returns (slice memory) {\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\n        self._len = ptr - self._ptr;\n        return self;\n    }\n\n    /*\n     * @dev Splits the slice, setting `self` to everything after the first\n     *      occurrence of `needle`, and `token` to everything before it. If\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n     *      and `token` is set to the entirety of `self`.\n     * @param self The slice to split.\n     * @param needle The text to search for in `self`.\n     * @param token An output parameter to which the first token is written.\n     * @return `token`.\n     */\n    function split(slice memory self, slice memory needle, slice memory token) internal pure returns (slice memory) {\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\n        token._ptr = self._ptr;\n        token._len = ptr - self._ptr;\n        if (ptr == self._ptr + self._len) {\n            // Not found\n            self._len = 0;\n        } else {\n            self._len -= token._len + needle._len;\n            self._ptr = ptr + needle._len;\n        }\n        return token;\n    }\n\n    /*\n     * @dev Splits the slice, setting `self` to everything after the first\n     *      occurrence of `needle`, and returning everything before it. If\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n     *      and the entirety of `self` is returned.\n     * @param self The slice to split.\n     * @param needle The text to search for in `self`.\n     * @return The part of `self` up to the first occurrence of `delim`.\n     */\n    function split(slice memory self, slice memory needle) internal pure returns (slice memory token) {\n        split(self, needle, token);\n    }\n\n    /*\n     * @dev Splits the slice, setting `self` to everything before the last\n     *      occurrence of `needle`, and `token` to everything after it. If\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n     *      and `token` is set to the entirety of `self`.\n     * @param self The slice to split.\n     * @param needle The text to search for in `self`.\n     * @param token An output parameter to which the first token is written.\n     * @return `token`.\n     */\n    function rsplit(slice memory self, slice memory needle, slice memory token) internal pure returns (slice memory) {\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\n        token._ptr = ptr;\n        token._len = self._len - (ptr - self._ptr);\n        if (ptr == self._ptr) {\n            // Not found\n            self._len = 0;\n        } else {\n            self._len -= token._len + needle._len;\n        }\n        return token;\n    }\n\n    /*\n     * @dev Splits the slice, setting `self` to everything before the last\n     *      occurrence of `needle`, and returning everything after it. If\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n     *      and the entirety of `self` is returned.\n     * @param self The slice to split.\n     * @param needle The text to search for in `self`.\n     * @return The part of `self` after the last occurrence of `delim`.\n     */\n    function rsplit(slice memory self, slice memory needle) internal pure returns (slice memory token) {\n        rsplit(self, needle, token);\n    }\n\n    /*\n     * @dev Counts the number of nonoverlapping occurrences of `needle` in `self`.\n     * @param self The slice to search.\n     * @param needle The text to search for in `self`.\n     * @return The number of occurrences of `needle` found in `self`.\n     */\n    function count(slice memory self, slice memory needle) internal pure returns (uint cnt) {\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr) + needle._len;\n        while (ptr <= self._ptr + self._len) {\n            cnt++;\n            ptr = findPtr(self._len - (ptr - self._ptr), ptr, needle._len, needle._ptr) + needle._len;\n        }\n    }\n\n    /*\n     * @dev Returns True if `self` contains `needle`.\n     * @param self The slice to search.\n     * @param needle The text to search for in `self`.\n     * @return True if `needle` is found in `self`, false otherwise.\n     */\n    function contains(slice memory self, slice memory needle) internal pure returns (bool) {\n        return rfindPtr(self._len, self._ptr, needle._len, needle._ptr) != self._ptr;\n    }\n\n    /*\n     * @dev Returns a newly allocated string containing the concatenation of\n     *      `self` and `other`.\n     * @param self The first slice to concatenate.\n     * @param other The second slice to concatenate.\n     * @return The concatenation of the two strings.\n     */\n    function concat(slice memory self, slice memory other) internal pure returns (string memory) {\n        string memory ret = new string(self._len + other._len);\n        uint retptr;\n        assembly { retptr := add(ret, 32) }\n        memcpy(retptr, self._ptr, self._len);\n        memcpy(retptr + self._len, other._ptr, other._len);\n        return ret;\n    }\n\n    /*\n     * @dev Joins an array of slices, using `self` as a delimiter, returning a\n     *      newly allocated string.\n     * @param self The delimiter to use.\n     * @param parts A list of slices to join.\n     * @return A newly allocated string containing all the slices in `parts`,\n     *         joined with `self`.\n     */\n    function join(slice memory self, slice[] memory parts) internal pure returns (string memory) {\n        if (parts.length == 0)\n            return \"\";\n\n        uint length = self._len * (parts.length - 1);\n        for(uint i = 0; i < parts.length; i++)\n            length += parts[i]._len;\n\n        string memory ret = new string(length);\n        uint retptr;\n        assembly { retptr := add(ret, 32) }\n\n        for(uint i = 0; i < parts.length; i++) {\n            memcpy(retptr, parts[i]._ptr, parts[i]._len);\n            retptr += parts[i]._len;\n            if (i < parts.length - 1) {\n                memcpy(retptr, self._ptr, self._len);\n                retptr += self._len;\n            }\n        }\n\n        return ret;\n    }\n}\n\n\n/*\n\nORACLIZE_API\ngithub.com/oraclize/ethereum-api/oraclizeAPI.sol\n\n*/\n\ncontract solcChecker {\n    /* INCOMPATIBLE SOLC: import the following instead: \"github.com/oraclize/ethereum-api/oraclizeAPI_0.5.sol\" */ function f(bytes calldata x) external;\n}\n\ncontract OraclizeI {\n\n    address public cbAddress;\n\n    function setProofType(byte _proofType) external;\n    function setCustomGasPrice(uint _gasPrice) external;\n    function getPrice(string memory _datasource) public returns (uint _dsprice);\n    function randomDS_getSessionPubKeyHash() external view returns (bytes32 _sessionKeyHash);\n    function getPrice(string memory _datasource, uint _gasLimit) public returns (uint _dsprice);\n    function queryN(uint _timestamp, string memory _datasource, bytes memory _argN) public payable returns (bytes32 _id);\n    function query(uint _timestamp, string calldata _datasource, string calldata _arg) external payable returns (bytes32 _id);\n    function query2(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2) public payable returns (bytes32 _id);\n    function query_withGasLimit(uint _timestamp, string calldata _datasource, string calldata _arg, uint _gasLimit) external payable returns (bytes32 _id);\n    function queryN_withGasLimit(uint _timestamp, string calldata _datasource, bytes calldata _argN, uint _gasLimit) external payable returns (bytes32 _id);\n    function query2_withGasLimit(uint _timestamp, string calldata _datasource, string calldata _arg1, string calldata _arg2, uint _gasLimit) external payable returns (bytes32 _id);\n}\n\ncontract OraclizeAddrResolverI {\n    function getAddress() public returns (address _address);\n}\n\n/*\n\nBegin solidity-cborutils\n\n*/\nlibrary Buffer {\n\n    struct buffer {\n        bytes buf;\n        uint capacity;\n    }\n\n    function init(buffer memory _buf, uint _capacity) internal pure {\n        uint capacity = _capacity;\n        if (capacity % 32 != 0) {\n            capacity += 32 - (capacity % 32);\n        }\n        _buf.capacity = capacity; // Allocate space for the buffer data\n        assembly {\n            let ptr := mload(0x40)\n            mstore(_buf, ptr)\n            mstore(ptr, 0)\n            mstore(0x40, add(ptr, capacity))\n        }\n    }\n\n    function resize(buffer memory _buf, uint _capacity) private pure {\n        bytes memory oldbuf = _buf.buf;\n        init(_buf, _capacity);\n        append(_buf, oldbuf);\n    }\n\n    function max(uint _a, uint _b) private pure returns (uint _max) {\n        if (_a > _b) {\n            return _a;\n        }\n        return _b;\n    }\n    /**\n      * @dev Appends a byte array to the end of the buffer. Resizes if doing so\n      *      would exceed the capacity of the buffer.\n      * @param _buf The buffer to append to.\n      * @param _data The data to append.\n      * @return The original buffer.\n      *\n      */\n    function append(buffer memory _buf, bytes memory _data) internal pure returns (buffer memory _buffer) {\n        if (_data.length + _buf.buf.length > _buf.capacity) {\n            resize(_buf, max(_buf.capacity, _data.length) * 2);\n        }\n        uint dest;\n        uint src;\n        uint len = _data.length;\n        assembly {\n            let bufptr := mload(_buf) // Memory address of the buffer data\n            let buflen := mload(bufptr) // Length of existing buffer data\n            dest := add(add(bufptr, buflen), 32) // Start address = buffer address + buffer length + sizeof(buffer length)\n            mstore(bufptr, add(buflen, mload(_data))) // Update buffer length\n            src := add(_data, 32)\n        }\n        for(; len >= 32; len -= 32) { // Copy word-length chunks while possible\n            assembly {\n                mstore(dest, mload(src))\n            }\n            dest += 32;\n            src += 32;\n        }\n        uint mask = 256 ** (32 - len) - 1; // Copy remaining bytes\n        assembly {\n            let srcpart := and(mload(src), not(mask))\n            let destpart := and(mload(dest), mask)\n            mstore(dest, or(destpart, srcpart))\n        }\n        return _buf;\n    }\n    /**\n      *\n      * @dev Appends a byte to the end of the buffer. Resizes if doing so would\n      * exceed the capacity of the buffer.\n      * @param _buf The buffer to append to.\n      * @param _data The data to append.\n      * @return The original buffer.\n      *\n      */\n    function append(buffer memory _buf, uint8 _data) internal pure {\n        if (_buf.buf.length + 1 > _buf.capacity) {\n            resize(_buf, _buf.capacity * 2);\n        }\n        assembly {\n            let bufptr := mload(_buf) // Memory address of the buffer data\n            let buflen := mload(bufptr) // Length of existing buffer data\n            let dest := add(add(bufptr, buflen), 32) // Address = buffer address + buffer length + sizeof(buffer length)\n            mstore8(dest, _data)\n            mstore(bufptr, add(buflen, 1)) // Update buffer length\n        }\n    }\n    /**\n      *\n      * @dev Appends a byte to the end of the buffer. Resizes if doing so would\n      * exceed the capacity of the buffer.\n      * @param _buf The buffer to append to.\n      * @param _data The data to append.\n      * @return The original buffer.\n      *\n      */\n    function appendInt(buffer memory _buf, uint _data, uint _len) internal pure returns (buffer memory _buffer) {\n        if (_len + _buf.buf.length > _buf.capacity) {\n            resize(_buf, max(_buf.capacity, _len) * 2);\n        }\n        uint mask = 256 ** _len - 1;\n        assembly {\n            let bufptr := mload(_buf) // Memory address of the buffer data\n            let buflen := mload(bufptr) // Length of existing buffer data\n            let dest := add(add(bufptr, buflen), _len) // Address = buffer address + buffer length + sizeof(buffer length) + len\n            mstore(dest, or(and(mload(dest), not(mask)), _data))\n            mstore(bufptr, add(buflen, _len)) // Update buffer length\n        }\n        return _buf;\n    }\n}\n\nlibrary CBOR {\n\n    using Buffer for Buffer.buffer;\n\n    uint8 private constant MAJOR_TYPE_INT = 0;\n    uint8 private constant MAJOR_TYPE_MAP = 5;\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\n    uint8 private constant MAJOR_TYPE_STRING = 3;\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\n\n    function encodeType(Buffer.buffer memory _buf, uint8 _major, uint _value) private pure {\n        if (_value <= 23) {\n            _buf.append(uint8((_major << 5) | _value));\n        } else if (_value <= 0xFF) {\n            _buf.append(uint8((_major << 5) | 24));\n            _buf.appendInt(_value, 1);\n        } else if (_value <= 0xFFFF) {\n            _buf.append(uint8((_major << 5) | 25));\n            _buf.appendInt(_value, 2);\n        } else if (_value <= 0xFFFFFFFF) {\n            _buf.append(uint8((_major << 5) | 26));\n            _buf.appendInt(_value, 4);\n        } else if (_value <= 0xFFFFFFFFFFFFFFFF) {\n            _buf.append(uint8((_major << 5) | 27));\n            _buf.appendInt(_value, 8);\n        }\n    }\n\n    function encodeIndefiniteLengthType(Buffer.buffer memory _buf, uint8 _major) private pure {\n        _buf.append(uint8((_major << 5) | 31));\n    }\n\n    function encodeUInt(Buffer.buffer memory _buf, uint _value) internal pure {\n        encodeType(_buf, MAJOR_TYPE_INT, _value);\n    }\n\n    function encodeInt(Buffer.buffer memory _buf, int _value) internal pure {\n        if (_value >= 0) {\n            encodeType(_buf, MAJOR_TYPE_INT, uint(_value));\n        } else {\n            encodeType(_buf, MAJOR_TYPE_NEGATIVE_INT, uint(-1 - _value));\n        }\n    }\n\n    function encodeBytes(Buffer.buffer memory _buf, bytes memory _value) internal pure {\n        encodeType(_buf, MAJOR_TYPE_BYTES, _value.length);\n        _buf.append(_value);\n    }\n\n    function encodeString(Buffer.buffer memory _buf, string memory _value) internal pure {\n        encodeType(_buf, MAJOR_TYPE_STRING, bytes(_value).length);\n        _buf.append(bytes(_value));\n    }\n\n    function startArray(Buffer.buffer memory _buf) internal pure {\n        encodeIndefiniteLengthType(_buf, MAJOR_TYPE_ARRAY);\n    }\n\n    function startMap(Buffer.buffer memory _buf) internal pure {\n        encodeIndefiniteLengthType(_buf, MAJOR_TYPE_MAP);\n    }\n\n    function endSequence(Buffer.buffer memory _buf) internal pure {\n        encodeIndefiniteLengthType(_buf, MAJOR_TYPE_CONTENT_FREE);\n    }\n}\n/*\n\nEnd solidity-cborutils\n\n*/\ncontract usingOraclize {\n\n    using CBOR for Buffer.buffer;\n\n    OraclizeI oraclize;\n    OraclizeAddrResolverI OAR;\n\n    uint constant day = 60 * 60 * 24;\n    uint constant week = 60 * 60 * 24 * 7;\n    uint constant month = 60 * 60 * 24 * 30;\n\n    byte constant proofType_NONE = 0x00;\n    byte constant proofType_Ledger = 0x30;\n    byte constant proofType_Native = 0xF0;\n    byte constant proofStorage_IPFS = 0x01;\n    byte constant proofType_Android = 0x40;\n    byte constant proofType_TLSNotary = 0x10;\n\n    string oraclize_network_name;\n    uint8 constant networkID_auto = 0;\n    uint8 constant networkID_morden = 2;\n    uint8 constant networkID_mainnet = 1;\n    uint8 constant networkID_testnet = 2;\n    uint8 constant networkID_consensys = 161;\n\n    mapping(bytes32 => bytes32) oraclize_randomDS_args;\n    mapping(bytes32 => bool) oraclize_randomDS_sessionKeysHashVerified;\n\n    modifier oraclizeAPI {\n        if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {\n            oraclize_setNetwork(networkID_auto);\n        }\n        if (address(oraclize) != OAR.getAddress()) {\n            oraclize = OraclizeI(OAR.getAddress());\n        }\n        _;\n    }\n\n    modifier oraclize_randomDS_proofVerify(bytes32 _queryId, string memory _result, bytes memory _proof) {\n        // RandomDS Proof Step 1: The prefix has to match 'LP\\x01' (Ledger Proof version 1)\n        require((_proof[0] == \"L\") && (_proof[1] == \"P\") && (uint8(_proof[2]) == uint8(1)));\n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\n        require(proofVerified);\n        _;\n    }\n\n    function oraclize_setNetwork(uint8 _networkID) internal returns (bool _networkSet) {\n      return oraclize_setNetwork();\n      _networkID; // silence the warning and remain backwards compatible\n    }\n\n    function oraclize_setNetworkName(string memory _network_name) internal {\n        oraclize_network_name = _network_name;\n    }\n\n    function oraclize_getNetworkName() internal view returns (string memory _networkName) {\n        return oraclize_network_name;\n    }\n\n    function oraclize_setNetwork() internal returns (bool _networkSet) {\n        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0) { //mainnet\n            OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);\n            oraclize_setNetworkName(\"eth_mainnet\");\n            return true;\n        }\n        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) > 0) { //ropsten testnet\n            OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);\n            oraclize_setNetworkName(\"eth_ropsten3\");\n            return true;\n        }\n        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0) { //kovan testnet\n            OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);\n            oraclize_setNetworkName(\"eth_kovan\");\n            return true;\n        }\n        if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) > 0) { //rinkeby testnet\n            OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);\n            oraclize_setNetworkName(\"eth_rinkeby\");\n            return true;\n        }\n        if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) > 0) { //ethereum-bridge\n            OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);\n            return true;\n        }\n        if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) > 0) { //ether.camp ide\n            OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);\n            return true;\n        }\n        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) > 0) { //browser-solidity\n            OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);\n            return true;\n        }\n        return false;\n    }\n\n    function __callback(bytes32 _myid, string memory _result) public payable {\n        __callback(_myid, _result, new bytes(0));\n    }\n\n    function __callback(bytes32 _myid, string memory _result, bytes memory _proof) pure public {\n      return;\n      _myid; _result; _proof; // Silence compiler warnings\n    }\n\n    function oraclize_getPrice(string memory _datasource) oraclizeAPI internal returns (uint _queryPrice) {\n        return oraclize.getPrice(_datasource);\n    }\n\n    function oraclize_getPrice(string memory _datasource, uint _gasLimit) oraclizeAPI internal returns (uint _queryPrice) {\n        return oraclize.getPrice(_datasource, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, string memory _arg) oraclizeAPI internal returns (bytes32 _id) {\n        uint price = oraclize.getPrice(_datasource);\n        if (price > 1 ether + tx.gasprice * 200000) {\n            return 0; // Unexpectedly high price\n        }\n        return oraclize.query.value(price)(0, _datasource, _arg);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg) oraclizeAPI internal returns (bytes32 _id) {\n        uint price = oraclize.getPrice(_datasource);\n        if (price > 1 ether + tx.gasprice * 200000) {\n            return 0; // Unexpectedly high price\n        }\n        return oraclize.query.value(price)(_timestamp, _datasource, _arg);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        uint price = oraclize.getPrice(_datasource,_gasLimit);\n        if (price > 1 ether + tx.gasprice * _gasLimit) {\n            return 0; // Unexpectedly high price\n        }\n        return oraclize.query_withGasLimit.value(price)(_timestamp, _datasource, _arg, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, string memory _arg, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        uint price = oraclize.getPrice(_datasource, _gasLimit);\n        if (price > 1 ether + tx.gasprice * _gasLimit) {\n           return 0; // Unexpectedly high price\n        }\n        return oraclize.query_withGasLimit.value(price)(0, _datasource, _arg, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, string memory _arg1, string memory _arg2) oraclizeAPI internal returns (bytes32 _id) {\n        uint price = oraclize.getPrice(_datasource);\n        if (price > 1 ether + tx.gasprice * 200000) {\n            return 0; // Unexpectedly high price\n        }\n        return oraclize.query2.value(price)(0, _datasource, _arg1, _arg2);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2) oraclizeAPI internal returns (bytes32 _id) {\n        uint price = oraclize.getPrice(_datasource);\n        if (price > 1 ether + tx.gasprice * 200000) {\n            return 0; // Unexpectedly high price\n        }\n        return oraclize.query2.value(price)(_timestamp, _datasource, _arg1, _arg2);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        uint price = oraclize.getPrice(_datasource, _gasLimit);\n        if (price > 1 ether + tx.gasprice * _gasLimit) {\n            return 0; // Unexpectedly high price\n        }\n        return oraclize.query2_withGasLimit.value(price)(_timestamp, _datasource, _arg1, _arg2, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, string memory _arg1, string memory _arg2, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        uint price = oraclize.getPrice(_datasource, _gasLimit);\n        if (price > 1 ether + tx.gasprice * _gasLimit) {\n            return 0; // Unexpectedly high price\n        }\n        return oraclize.query2_withGasLimit.value(price)(0, _datasource, _arg1, _arg2, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, string[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {\n        uint price = oraclize.getPrice(_datasource);\n        if (price > 1 ether + tx.gasprice * 200000) {\n            return 0; // Unexpectedly high price\n        }\n        bytes memory args = stra2cbor(_argN);\n        return oraclize.queryN.value(price)(0, _datasource, args);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, string[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {\n        uint price = oraclize.getPrice(_datasource);\n        if (price > 1 ether + tx.gasprice * 200000) {\n            return 0; // Unexpectedly high price\n        }\n        bytes memory args = stra2cbor(_argN);\n        return oraclize.queryN.value(price)(_timestamp, _datasource, args);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, string[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        uint price = oraclize.getPrice(_datasource, _gasLimit);\n        if (price > 1 ether + tx.gasprice * _gasLimit) {\n            return 0; // Unexpectedly high price\n        }\n        bytes memory args = stra2cbor(_argN);\n        return oraclize.queryN_withGasLimit.value(price)(_timestamp, _datasource, args, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, string[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        uint price = oraclize.getPrice(_datasource, _gasLimit);\n        if (price > 1 ether + tx.gasprice * _gasLimit) {\n            return 0; // Unexpectedly high price\n        }\n        bytes memory args = stra2cbor(_argN);\n        return oraclize.queryN_withGasLimit.value(price)(0, _datasource, args, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, string[1] memory _args) oraclizeAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = _args[0];\n        return oraclize_query(_datasource, dynargs);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, string[1] memory _args) oraclizeAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = _args[0];\n        return oraclize_query(_timestamp, _datasource, dynargs);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, string[1] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = _args[0];\n        return oraclize_query(_timestamp, _datasource, dynargs, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, string[1] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = _args[0];\n        return oraclize_query(_datasource, dynargs, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, string[2] memory _args) oraclizeAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        return oraclize_query(_datasource, dynargs);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, string[2] memory _args) oraclizeAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        return oraclize_query(_timestamp, _datasource, dynargs);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, string[2] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        return oraclize_query(_timestamp, _datasource, dynargs, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, string[2] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        return oraclize_query(_datasource, dynargs, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, string[3] memory _args) oraclizeAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        return oraclize_query(_datasource, dynargs);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, string[3] memory _args) oraclizeAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        return oraclize_query(_timestamp, _datasource, dynargs);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, string[3] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        return oraclize_query(_timestamp, _datasource, dynargs, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, string[3] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        return oraclize_query(_datasource, dynargs, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, string[4] memory _args) oraclizeAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        return oraclize_query(_datasource, dynargs);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, string[4] memory _args) oraclizeAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        return oraclize_query(_timestamp, _datasource, dynargs);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, string[4] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        return oraclize_query(_timestamp, _datasource, dynargs, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, string[4] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        return oraclize_query(_datasource, dynargs, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, string[5] memory _args) oraclizeAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        dynargs[4] = _args[4];\n        return oraclize_query(_datasource, dynargs);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, string[5] memory _args) oraclizeAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        dynargs[4] = _args[4];\n        return oraclize_query(_timestamp, _datasource, dynargs);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, string[5] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        dynargs[4] = _args[4];\n        return oraclize_query(_timestamp, _datasource, dynargs, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, string[5] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        dynargs[4] = _args[4];\n        return oraclize_query(_datasource, dynargs, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, bytes[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {\n        uint price = oraclize.getPrice(_datasource);\n        if (price > 1 ether + tx.gasprice * 200000) {\n            return 0; // Unexpectedly high price\n        }\n        bytes memory args = ba2cbor(_argN);\n        return oraclize.queryN.value(price)(0, _datasource, args);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, bytes[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {\n        uint price = oraclize.getPrice(_datasource);\n        if (price > 1 ether + tx.gasprice * 200000) {\n            return 0; // Unexpectedly high price\n        }\n        bytes memory args = ba2cbor(_argN);\n        return oraclize.queryN.value(price)(_timestamp, _datasource, args);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, bytes[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        uint price = oraclize.getPrice(_datasource, _gasLimit);\n        if (price > 1 ether + tx.gasprice * _gasLimit) {\n            return 0; // Unexpectedly high price\n        }\n        bytes memory args = ba2cbor(_argN);\n        return oraclize.queryN_withGasLimit.value(price)(_timestamp, _datasource, args, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, bytes[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        uint price = oraclize.getPrice(_datasource, _gasLimit);\n        if (price > 1 ether + tx.gasprice * _gasLimit) {\n            return 0; // Unexpectedly high price\n        }\n        bytes memory args = ba2cbor(_argN);\n        return oraclize.queryN_withGasLimit.value(price)(0, _datasource, args, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, bytes[1] memory _args) oraclizeAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = _args[0];\n        return oraclize_query(_datasource, dynargs);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, bytes[1] memory _args) oraclizeAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = _args[0];\n        return oraclize_query(_timestamp, _datasource, dynargs);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, bytes[1] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = _args[0];\n        return oraclize_query(_timestamp, _datasource, dynargs, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, bytes[1] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = _args[0];\n        return oraclize_query(_datasource, dynargs, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, bytes[2] memory _args) oraclizeAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        return oraclize_query(_datasource, dynargs);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, bytes[2] memory _args) oraclizeAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        return oraclize_query(_timestamp, _datasource, dynargs);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, bytes[2] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        return oraclize_query(_timestamp, _datasource, dynargs, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, bytes[2] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        return oraclize_query(_datasource, dynargs, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, bytes[3] memory _args) oraclizeAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        return oraclize_query(_datasource, dynargs);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, bytes[3] memory _args) oraclizeAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        return oraclize_query(_timestamp, _datasource, dynargs);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, bytes[3] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        return oraclize_query(_timestamp, _datasource, dynargs, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, bytes[3] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        return oraclize_query(_datasource, dynargs, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, bytes[4] memory _args) oraclizeAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        return oraclize_query(_datasource, dynargs);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, bytes[4] memory _args) oraclizeAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        return oraclize_query(_timestamp, _datasource, dynargs);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, bytes[4] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        return oraclize_query(_timestamp, _datasource, dynargs, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, bytes[4] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        return oraclize_query(_datasource, dynargs, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, bytes[5] memory _args) oraclizeAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        dynargs[4] = _args[4];\n        return oraclize_query(_datasource, dynargs);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, bytes[5] memory _args) oraclizeAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        dynargs[4] = _args[4];\n        return oraclize_query(_timestamp, _datasource, dynargs);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, bytes[5] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        dynargs[4] = _args[4];\n        return oraclize_query(_timestamp, _datasource, dynargs, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, bytes[5] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        dynargs[4] = _args[4];\n        return oraclize_query(_datasource, dynargs, _gasLimit);\n    }\n\n    function oraclize_setProof(byte _proofP) oraclizeAPI internal {\n        return oraclize.setProofType(_proofP);\n    }\n\n\n    function oraclize_cbAddress() oraclizeAPI internal returns (address _callbackAddress) {\n        return oraclize.cbAddress();\n    }\n\n    function getCodeSize(address _addr) view internal returns (uint _size) {\n        assembly {\n            _size := extcodesize(_addr)\n        }\n    }\n\n    function oraclize_setCustomGasPrice(uint _gasPrice) oraclizeAPI internal {\n        return oraclize.setCustomGasPrice(_gasPrice);\n    }\n\n    function oraclize_randomDS_getSessionPubKeyHash() oraclizeAPI internal returns (bytes32 _sessionKeyHash) {\n        return oraclize.randomDS_getSessionPubKeyHash();\n    }\n\n    function parseAddr(string memory _a) internal pure returns (address _parsedAddress) {\n        bytes memory tmp = bytes(_a);\n        uint160 iaddr = 0;\n        uint160 b1;\n        uint160 b2;\n        for (uint i = 2; i < 2 + 2 * 20; i += 2) {\n            iaddr *= 256;\n            b1 = uint160(uint8(tmp[i]));\n            b2 = uint160(uint8(tmp[i + 1]));\n            if ((b1 >= 97) && (b1 <= 102)) {\n                b1 -= 87;\n            } else if ((b1 >= 65) && (b1 <= 70)) {\n                b1 -= 55;\n            } else if ((b1 >= 48) && (b1 <= 57)) {\n                b1 -= 48;\n            }\n            if ((b2 >= 97) && (b2 <= 102)) {\n                b2 -= 87;\n            } else if ((b2 >= 65) && (b2 <= 70)) {\n                b2 -= 55;\n            } else if ((b2 >= 48) && (b2 <= 57)) {\n                b2 -= 48;\n            }\n            iaddr += (b1 * 16 + b2);\n        }\n        return address(iaddr);\n    }\n\n    function strCompare(string memory _a, string memory _b) internal pure returns (int _returnCode) {\n        bytes memory a = bytes(_a);\n        bytes memory b = bytes(_b);\n        uint minLength = a.length;\n        if (b.length < minLength) {\n            minLength = b.length;\n        }\n        for (uint i = 0; i < minLength; i ++) {\n            if (a[i] < b[i]) {\n                return -1;\n            } else if (a[i] > b[i]) {\n                return 1;\n            }\n        }\n        if (a.length < b.length) {\n            return -1;\n        } else if (a.length > b.length) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    function indexOf(string memory _haystack, string memory _needle) internal pure returns (int _returnCode) {\n        bytes memory h = bytes(_haystack);\n        bytes memory n = bytes(_needle);\n        if (h.length < 1 || n.length < 1 || (n.length > h.length)) {\n            return -1;\n        } else if (h.length > (2 ** 128 - 1)) {\n            return -1;\n        } else {\n            uint subindex = 0;\n            for (uint i = 0; i < h.length; i++) {\n                if (h[i] == n[0]) {\n                    subindex = 1;\n                    while(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex]) {\n                        subindex++;\n                    }\n                    if (subindex == n.length) {\n                        return int(i);\n                    }\n                }\n            }\n            return -1;\n        }\n    }\n\n    function strConcat(string memory _a, string memory _b) internal pure returns (string memory _concatenatedString) {\n        return strConcat(_a, _b, \"\", \"\", \"\");\n    }\n\n    function strConcat(string memory _a, string memory _b, string memory _c) internal pure returns (string memory _concatenatedString) {\n        return strConcat(_a, _b, _c, \"\", \"\");\n    }\n\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d) internal pure returns (string memory _concatenatedString) {\n        return strConcat(_a, _b, _c, _d, \"\");\n    }\n\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory _concatenatedString) {\n        bytes memory _ba = bytes(_a);\n        bytes memory _bb = bytes(_b);\n        bytes memory _bc = bytes(_c);\n        bytes memory _bd = bytes(_d);\n        bytes memory _be = bytes(_e);\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n        bytes memory babcde = bytes(abcde);\n        uint k = 0;\n        uint i = 0;\n        for (i = 0; i < _ba.length; i++) {\n            babcde[k++] = _ba[i];\n        }\n        for (i = 0; i < _bb.length; i++) {\n            babcde[k++] = _bb[i];\n        }\n        for (i = 0; i < _bc.length; i++) {\n            babcde[k++] = _bc[i];\n        }\n        for (i = 0; i < _bd.length; i++) {\n            babcde[k++] = _bd[i];\n        }\n        for (i = 0; i < _be.length; i++) {\n            babcde[k++] = _be[i];\n        }\n        return string(babcde);\n    }\n\n    function safeParseInt(string memory _a) internal pure returns (uint _parsedInt) {\n        return safeParseInt(_a, 0);\n    }\n\n    function safeParseInt(string memory _a, uint _b) internal pure returns (uint _parsedInt) {\n        bytes memory bresult = bytes(_a);\n        uint mint = 0;\n        bool decimals = false;\n        for (uint i = 0; i < bresult.length; i++) {\n            if ((uint(uint8(bresult[i])) >= 48) && (uint(uint8(bresult[i])) <= 57)) {\n                if (decimals) {\n                   if (_b == 0) break;\n                    else _b--;\n                }\n                mint *= 10;\n                mint += uint(uint8(bresult[i])) - 48;\n            } else if (uint(uint8(bresult[i])) == 46) {\n                require(!decimals, 'More than one decimal encountered in string!');\n                decimals = true;\n            } else {\n                revert(\"Non-numeral character encountered in string!\");\n            }\n        }\n        if (_b > 0) {\n            mint *= 10 ** _b;\n        }\n        return mint;\n    }\n\n    function parseInt(string memory _a) internal pure returns (uint _parsedInt) {\n        return parseInt(_a, 0);\n    }\n\n    function parseInt(string memory _a, uint _b) internal pure returns (uint _parsedInt) {\n        bytes memory bresult = bytes(_a);\n        uint mint = 0;\n        bool decimals = false;\n        for (uint i = 0; i < bresult.length; i++) {\n            if ((uint(uint8(bresult[i])) >= 48) && (uint(uint8(bresult[i])) <= 57)) {\n                if (decimals) {\n                   if (_b == 0) {\n                       break;\n                   } else {\n                       _b--;\n                   }\n                }\n                mint *= 10;\n                mint += uint(uint8(bresult[i])) - 48;\n            } else if (uint(uint8(bresult[i])) == 46) {\n                decimals = true;\n            }\n        }\n        if (_b > 0) {\n            mint *= 10 ** _b;\n        }\n        return mint;\n    }\n\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\n        if (_i == 0) {\n            return \"0\";\n        }\n        uint j = _i;\n        uint len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len - 1;\n        while (_i != 0) {\n            bstr[k--] = byte(uint8(48 + _i % 10));\n            _i /= 10;\n        }\n        return string(bstr);\n    }\n\n    function stra2cbor(string[] memory _arr) internal pure returns (bytes memory _cborEncoding) {\n        safeMemoryCleaner();\n        Buffer.buffer memory buf;\n        Buffer.init(buf, 1024);\n        buf.startArray();\n        for (uint i = 0; i < _arr.length; i++) {\n            buf.encodeString(_arr[i]);\n        }\n        buf.endSequence();\n        return buf.buf;\n    }\n\n    function ba2cbor(bytes[] memory _arr) internal pure returns (bytes memory _cborEncoding) {\n        safeMemoryCleaner();\n        Buffer.buffer memory buf;\n        Buffer.init(buf, 1024);\n        buf.startArray();\n        for (uint i = 0; i < _arr.length; i++) {\n            buf.encodeBytes(_arr[i]);\n        }\n        buf.endSequence();\n        return buf.buf;\n    }\n\n    function oraclize_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32 _queryId) {\n        require((_nbytes > 0) && (_nbytes <= 32));\n        _delay *= 10; // Convert from seconds to ledger timer ticks\n        bytes memory nbytes = new bytes(1);\n        nbytes[0] = byte(uint8(_nbytes));\n        bytes memory unonce = new bytes(32);\n        bytes memory sessionKeyHash = new bytes(32);\n        bytes32 sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash();\n        assembly {\n            mstore(unonce, 0x20)\n            /*\n             The following variables can be relaxed.\n             Check the relaxed random contract at https://github.com/oraclize/ethereum-examples\n             for an idea on how to override and replace commit hash variables.\n            */\n            mstore(add(unonce, 0x20), xor(blockhash(sub(number, 1)), xor(coinbase, timestamp)))\n            mstore(sessionKeyHash, 0x20)\n            mstore(add(sessionKeyHash, 0x20), sessionKeyHash_bytes32)\n        }\n        bytes memory delay = new bytes(32);\n        assembly {\n            mstore(add(delay, 0x20), _delay)\n        }\n        bytes memory delay_bytes8 = new bytes(8);\n        copyBytes(delay, 24, 8, delay_bytes8, 0);\n        bytes[4] memory args = [unonce, nbytes, sessionKeyHash, delay];\n        bytes32 queryId = oraclize_query(\"random\", args, _customGasLimit);\n        bytes memory delay_bytes8_left = new bytes(8);\n        assembly {\n            let x := mload(add(delay_bytes8, 0x20))\n            mstore8(add(delay_bytes8_left, 0x27), div(x, 0x100000000000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x26), div(x, 0x1000000000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x25), div(x, 0x10000000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x24), div(x, 0x100000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x23), div(x, 0x1000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x22), div(x, 0x10000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x21), div(x, 0x100000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x20), div(x, 0x1000000000000000000000000000000000000000000000000))\n        }\n        oraclize_randomDS_setCommitment(queryId, keccak256(abi.encodePacked(delay_bytes8_left, args[1], sha256(args[0]), args[2])));\n        return queryId;\n    }\n\n    function oraclize_randomDS_setCommitment(bytes32 _queryId, bytes32 _commitment) internal {\n        oraclize_randomDS_args[_queryId] = _commitment;\n    }\n\n    function verifySig(bytes32 _tosignh, bytes memory _dersig, bytes memory _pubkey) internal returns (bool _sigVerified) {\n        bool sigok;\n        address signer;\n        bytes32 sigr;\n        bytes32 sigs;\n        bytes memory sigr_ = new bytes(32);\n        uint offset = 4 + (uint(uint8(_dersig[3])) - 0x20);\n        sigr_ = copyBytes(_dersig, offset, 32, sigr_, 0);\n        bytes memory sigs_ = new bytes(32);\n        offset += 32 + 2;\n        sigs_ = copyBytes(_dersig, offset + (uint(uint8(_dersig[offset - 1])) - 0x20), 32, sigs_, 0);\n        assembly {\n            sigr := mload(add(sigr_, 32))\n            sigs := mload(add(sigs_, 32))\n        }\n        (sigok, signer) = safer_ecrecover(_tosignh, 27, sigr, sigs);\n        if (address(uint160(uint256(keccak256(_pubkey)))) == signer) {\n            return true;\n        } else {\n            (sigok, signer) = safer_ecrecover(_tosignh, 28, sigr, sigs);\n            return (address(uint160(uint256(keccak256(_pubkey)))) == signer);\n        }\n    }\n\n    function oraclize_randomDS_proofVerify__sessionKeyValidity(bytes memory _proof, uint _sig2offset) internal returns (bool _proofVerified) {\n        bool sigok;\n        // Random DS Proof Step 6: Verify the attestation signature, APPKEY1 must sign the sessionKey from the correct ledger app (CODEHASH)\n        bytes memory sig2 = new bytes(uint(uint8(_proof[_sig2offset + 1])) + 2);\n        copyBytes(_proof, _sig2offset, sig2.length, sig2, 0);\n        bytes memory appkey1_pubkey = new bytes(64);\n        copyBytes(_proof, 3 + 1, 64, appkey1_pubkey, 0);\n        bytes memory tosign2 = new bytes(1 + 65 + 32);\n        tosign2[0] = byte(uint8(1)); //role\n        copyBytes(_proof, _sig2offset - 65, 65, tosign2, 1);\n        bytes memory CODEHASH = hex\"fd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c\";\n        copyBytes(CODEHASH, 0, 32, tosign2, 1 + 65);\n        sigok = verifySig(sha256(tosign2), sig2, appkey1_pubkey);\n        if (!sigok) {\n            return false;\n        }\n        // Random DS Proof Step 7: Verify the APPKEY1 provenance (must be signed by Ledger)\n        bytes memory LEDGERKEY = hex\"7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4\";\n        bytes memory tosign3 = new bytes(1 + 65);\n        tosign3[0] = 0xFE;\n        copyBytes(_proof, 3, 65, tosign3, 1);\n        bytes memory sig3 = new bytes(uint(uint8(_proof[3 + 65 + 1])) + 2);\n        copyBytes(_proof, 3 + 65, sig3.length, sig3, 0);\n        sigok = verifySig(sha256(tosign3), sig3, LEDGERKEY);\n        return sigok;\n    }\n\n    function oraclize_randomDS_proofVerify__returnCode(bytes32 _queryId, string memory _result, bytes memory _proof) internal returns (uint8 _returnCode) {\n        // Random DS Proof Step 1: The prefix has to match 'LP\\x01' (Ledger Proof version 1)\n        if ((_proof[0] != \"L\") || (_proof[1] != \"P\") || (uint8(_proof[2]) != uint8(1))) {\n            return 1;\n        }\n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\n        if (!proofVerified) {\n            return 2;\n        }\n        return 0;\n    }\n\n    function matchBytes32Prefix(bytes32 _content, bytes memory _prefix, uint _nRandomBytes) internal pure returns (bool _matchesPrefix) {\n        bool match_ = true;\n        require(_prefix.length == _nRandomBytes);\n        for (uint256 i = 0; i< _nRandomBytes; i++) {\n            if (_content[i] != _prefix[i]) {\n                match_ = false;\n            }\n        }\n        return match_;\n    }\n\n    function oraclize_randomDS_proofVerify__main(bytes memory _proof, bytes32 _queryId, bytes memory _result, string memory _contextName) internal returns (bool _proofVerified) {\n        // Random DS Proof Step 2: The unique keyhash has to match with the sha256 of (context name + _queryId)\n        uint ledgerProofLength = 3 + 65 + (uint(uint8(_proof[3 + 65 + 1])) + 2) + 32;\n        bytes memory keyhash = new bytes(32);\n        copyBytes(_proof, ledgerProofLength, 32, keyhash, 0);\n        if (!(keccak256(keyhash) == keccak256(abi.encodePacked(sha256(abi.encodePacked(_contextName, _queryId)))))) {\n            return false;\n        }\n        bytes memory sig1 = new bytes(uint(uint8(_proof[ledgerProofLength + (32 + 8 + 1 + 32) + 1])) + 2);\n        copyBytes(_proof, ledgerProofLength + (32 + 8 + 1 + 32), sig1.length, sig1, 0);\n        // Random DS Proof Step 3: We assume sig1 is valid (it will be verified during step 5) and we verify if '_result' is the _prefix of sha256(sig1)\n        if (!matchBytes32Prefix(sha256(sig1), _result, uint(uint8(_proof[ledgerProofLength + 32 + 8])))) {\n            return false;\n        }\n        // Random DS Proof Step 4: Commitment match verification, keccak256(delay, nbytes, unonce, sessionKeyHash) == commitment in storage.\n        // This is to verify that the computed args match with the ones specified in the query.\n        bytes memory commitmentSlice1 = new bytes(8 + 1 + 32);\n        copyBytes(_proof, ledgerProofLength + 32, 8 + 1 + 32, commitmentSlice1, 0);\n        bytes memory sessionPubkey = new bytes(64);\n        uint sig2offset = ledgerProofLength + 32 + (8 + 1 + 32) + sig1.length + 65;\n        copyBytes(_proof, sig2offset - 64, 64, sessionPubkey, 0);\n        bytes32 sessionPubkeyHash = sha256(sessionPubkey);\n        if (oraclize_randomDS_args[_queryId] == keccak256(abi.encodePacked(commitmentSlice1, sessionPubkeyHash))) { //unonce, nbytes and sessionKeyHash match\n            delete oraclize_randomDS_args[_queryId];\n        } else return false;\n        // Random DS Proof Step 5: Validity verification for sig1 (keyhash and args signed with the sessionKey)\n        bytes memory tosign1 = new bytes(32 + 8 + 1 + 32);\n        copyBytes(_proof, ledgerProofLength, 32 + 8 + 1 + 32, tosign1, 0);\n        if (!verifySig(sha256(tosign1), sig1, sessionPubkey)) {\n            return false;\n        }\n        // Verify if sessionPubkeyHash was verified already, if not.. let's do it!\n        if (!oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]) {\n            oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = oraclize_randomDS_proofVerify__sessionKeyValidity(_proof, sig2offset);\n        }\n        return oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash];\n    }\n    /*\n     The following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n    */\n    function copyBytes(bytes memory _from, uint _fromOffset, uint _length, bytes memory _to, uint _toOffset) internal pure returns (bytes memory _copiedBytes) {\n        uint minLength = _length + _toOffset;\n        require(_to.length >= minLength); // Buffer too small. Should be a better way?\n        uint i = 32 + _fromOffset; // NOTE: the offset 32 is added to skip the `size` field of both bytes variables\n        uint j = 32 + _toOffset;\n        while (i < (32 + _fromOffset + _length)) {\n            assembly {\n                let tmp := mload(add(_from, i))\n                mstore(add(_to, j), tmp)\n            }\n            i += 32;\n            j += 32;\n        }\n        return _to;\n    }\n    /*\n     The following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n     Duplicate Solidity's ecrecover, but catching the CALL return value\n    */\n    function safer_ecrecover(bytes32 _hash, uint8 _v, bytes32 _r, bytes32 _s) internal returns (bool _success, address _recoveredAddress) {\n        /*\n         We do our own memory management here. Solidity uses memory offset\n         0x40 to store the current end of memory. We write past it (as\n         writes are memory extensions), but don't update the offset so\n         Solidity will reuse it. The memory used here is only needed for\n         this context.\n         FIXME: inline assembly can't access return values\n        */\n        bool ret;\n        address addr;\n        assembly {\n            let size := mload(0x40)\n            mstore(size, _hash)\n            mstore(add(size, 32), _v)\n            mstore(add(size, 64), _r)\n            mstore(add(size, 96), _s)\n            ret := call(3000, 1, 0, size, 128, size, 32) // NOTE: we can reuse the request memory because we deal with the return code.\n            addr := mload(size)\n        }\n        return (ret, addr);\n    }\n    /*\n     The following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n    */\n    function ecrecovery(bytes32 _hash, bytes memory _sig) internal returns (bool _success, address _recoveredAddress) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        if (_sig.length != 65) {\n            return (false, address(0));\n        }\n        /*\n         The signature format is a compact form of:\n           {bytes32 r}{bytes32 s}{uint8 v}\n         Compact means, uint8 is not padded to 32 bytes.\n        */\n        assembly {\n            r := mload(add(_sig, 32))\n            s := mload(add(_sig, 64))\n            /*\n             Here we are loading the last 32 bytes. We exploit the fact that\n             'mload' will pad with zeroes if we overread.\n             There is no 'mload8' to do this, but that would be nicer.\n            */\n            v := byte(0, mload(add(_sig, 96)))\n            /*\n              Alternative solution:\n              'byte' is not working due to the Solidity parser, so lets\n              use the second best option, 'and'\n              v := and(mload(add(_sig, 65)), 255)\n            */\n        }\n        /*\n         albeit non-transactional signatures are not specified by the YP, one would expect it\n         to match the YP range of [27, 28]\n         geth uses [0, 1] and some clients have followed. This might change, see:\n         https://github.com/ethereum/go-ethereum/issues/2053\n        */\n        if (v < 27) {\n            v += 27;\n        }\n        if (v != 27 && v != 28) {\n            return (false, address(0));\n        }\n        return safer_ecrecover(_hash, v, r, s);\n    }\n\n    function safeMemoryCleaner() internal pure {\n        assembly {\n            let fmem := mload(0x40)\n            codecopy(fmem, codesize, sub(msize, fmem))\n        }\n    }\n}\n\n/*\n\nEND ORACLIZE_API\n\n*/\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n\n    address public owner;\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor()public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n}\n\n/*\nCryptocasino http://playtowin.io - all rights reserved\nGame drunkard\nGame results are calculated using the service http://oraclize.it based on a query to the https://www.random.org/\nThe creators of the project are not responsible for any material losses during the game, all bets are made by you at your own peril and risk.\nContract address 0x7777776dd38fcf2a446297305981497f201f85ef, making a bet you give an announcement that you are of age and you are 18 years old.\n*/\ncontract DrunkardGame is Ownable, usingOraclize {\n\n    using SafeMath for uint;\n    using strings for *;\n    //drunkard settings\n    address payable public marketing_address = 0x777777018285801412ec226229C6F6AE16445F89;\n    string public constant GAME_DRUNKARD_TITLE = 'drunkard';\n    uint public constant GAME_DRUNKARD_ID = 100;\n    uint public constant MARKETING_PERCENT = 3;\n    uint public constant MIN_STAKE = 0.05 ether;\n    uint public constant MAX_STAKE = 1 ether;\n    uint constant PERCENT_TO_WIN = 225; //bet+125%\n    uint public round_drunkard = 0;\n    uint custom_gas_limit;\n    //drunkard saving games to history\n    struct drunkard_game {\n        address payable from;\n        bytes32 queryId;\n        uint    round;\n        bool    winner;\n        uint    bet;\n        uint    choice;\n        uint    game_choice;\n        uint    timestamp;\n        uint    profit;\n        bool    status;\n        uint    serial;\n    }\n    mapping (bytes32 => drunkard_game) drunkard_game_hystory;\n    bytes32[] public oraclizedIndices;\n    //incomplete user games\n    mapping (address => uint) playerPendingWithdrawals;\n    bool public drunkard_status;\n    \n    constructor()public{\n        //set gas price to oraclize query\n        oraclize_setCustomGasPrice(10000000000 wei);\n        //set gas limit for oracle callback\n        custom_gas_limit = 235000;\n        //status game true: started, false: stopped\n        drunkard_status = true;\n    }\n\n    event Drunkard(\n        address indexed from,\n        uint round,\n        uint choice,\n        uint bet,\n        uint game_choice,\n        bool winner,\n        //uint timestamp,\n        uint profit,\n        bytes32 proof_hash\n    );\n\n    event Game(\n        address indexed from,\n        uint indexed block,\n        uint value,\n        string game,\n        bytes32 proof_hash\n    );\n    \n    //playing with contract wallets is prohibited\n    modifier isNotContract() {\n        uint size;\n        address addr = msg.sender;\n        assembly { size := extcodesize(addr) }\n        require(size == 0 && tx.origin == msg.sender);\n        _;\n    }\n    \n    modifier drunkardIsStarted() {\n        require(drunkard_status);\n        _;\n    }\n    \n    /*\n    only if game is active & bet is valid can query oraclize and set player vars     \n    */\n    function game_drunkard(uint _choice)drunkardIsStarted isNotContract external payable {\n       \n        require(_choice >=1 && _choice <=3, \"Invalid choice\");\n        require(msg.value >= MIN_STAKE && msg.value <= MAX_STAKE, 'Minimal stake 0.05 ether, max stake 1 ether');\n        \n        // Making oraclized query to random.org.\n        bytes32 oraclizeQueryId;\n        round_drunkard +=1;\n        string memory queryString1 = \"[URL] ['json(https://api.random.org/json-rpc/2/invoke).result.random[\\\"serialNumber\\\", \\\"data\\\", \\\"userData\\\"]', '\\\\n{\\\"jsonrpc\\\": \\\"2.0\\\", \\\"method\\\": \\\"generateSignedIntegers\\\", \\\"params\\\": { \\\"apiKey\\\": \\\"${[decrypt] BBrhDqQMkDMenw2av7Bl4vIPCmkF1jH+jj8R3vclZ8ar/Zi0jcvxdJ3cnOZquLE6+gxptFVY3RTZtjL/2hTppCA3dHCJpJ7KQHwWyfC9ZRkP94N/5LdNb4dLAtykAy2LZnHZGt1tSZOOjfndZZQzRgrvD9XF}\\\", \\\"n\\\": 1, \\\"min\\\": 1, \\\"max\\\": 3, \\\"userData\\\":\";\n        string memory queryString2 = uint2str(GAME_DRUNKARD_ID);\n        string memory queryString3 = \",\\\"replacement\\\": true, \\\"base\\\": 10${[identity] \\\"}\\\"}, \\\"id\\\":\";\n        string memory queryString4 = uint2str(round_drunkard);\n        string memory queryString5 = \"${[identity] \\\"}\\\"}']\";\n        string memory queryString1_2 = queryString1.toSlice().concat(queryString2.toSlice());\n        string memory queryString1_2_3 = queryString1_2.toSlice().concat(queryString3.toSlice());\n        string memory queryString1_2_3_4 = queryString1_2_3.toSlice().concat(queryString4.toSlice());\n        string memory queryString = queryString1_2_3_4.toSlice().concat(queryString5.toSlice());\n        \n        oraclizeQueryId = oraclize_query( \n          \"nested\", \n          queryString,\n          custom_gas_limit\n        ); \n        \n        // Recording the bet info for future reference.\n        drunkard_game_hystory[oraclizeQueryId].round = round_drunkard;\n        drunkard_game_hystory[oraclizeQueryId].winner = false;\n        drunkard_game_hystory[oraclizeQueryId].queryId = oraclizeQueryId;\n        drunkard_game_hystory[oraclizeQueryId].from = msg.sender;\n        drunkard_game_hystory[oraclizeQueryId].bet = msg.value;\n        drunkard_game_hystory[oraclizeQueryId].choice = _choice;\n        drunkard_game_hystory[oraclizeQueryId].status = true;\n        \n        // Recording oraclize indices.\n        oraclizedIndices.push(oraclizeQueryId) -1;\n        //Recording user bet\n        playerPendingWithdrawals[msg.sender] = playerPendingWithdrawals[msg.sender].add(msg.value);\n        emit Game(msg.sender, block.number, msg.value, GAME_DRUNKARD_TITLE, oraclizeQueryId);\n    }\n    \n    /*only oracle can call this method*/\n    function __callback(bytes32 myid, string memory result)public payable {\n        require (msg.sender == oraclize_cbAddress(), 'Only an oracle can call a method.');\n   \n        if(drunkard_game_hystory[myid].status){\n            /* map random result to player */\n            strings.slice memory oraclize_result = result.toSlice();\n            strings.slice memory part;\n            //serial number of request for random.org\n            uint serilal = parseInt(oraclize_result.split(\",\".toSlice(), part).toString()); \n            //random number from random.org\n            uint choices = parseInt(oraclize_result.split(\",\".toSlice(), part).toString()); \n            //game ID\n            uint game = parseInt(oraclize_result.split(\",\".toSlice(), part).toString());\n            \n            if(game == GAME_DRUNKARD_ID){\n                __drunkard_result(myid, serilal, choices);\n            }\n        }\n   }\n   \n   /*calculate winnings based on callback oraclize.io and random.org*/\n   function __drunkard_result(bytes32 _id, uint _serial, uint _random)internal {\n            address payable player = drunkard_game_hystory[_id].from;\n            uint choice = drunkard_game_hystory[_id].choice;\n            uint bet = drunkard_game_hystory[_id].bet;\n            bool winner = false;\n            uint profit;\n            \n            if(choice == _random){\n                winner = true;\n                //calculation of winnings: bet + 125% - 3% ccommission\n                uint start_profit = bet.mul(PERCENT_TO_WIN).div(100);\n                //system commission 3%\n                uint commission = start_profit.mul(MARKETING_PERCENT).div(100);\n                profit = start_profit - commission; \n                drunkard_game_hystory[_id].profit = profit;\n                marketing_address.transfer(commission);\n                player.transfer(profit);\n            }else{\n                drunkard_game_hystory[_id].profit = 0;\n            }\n            \n            drunkard_game_hystory[_id].timestamp = now;\n            drunkard_game_hystory[_id].game_choice = _random;\n            drunkard_game_hystory[_id].winner = winner;\n            drunkard_game_hystory[_id].status = false;\n            drunkard_game_hystory[_id].serial = _serial;\n            //delete the record of the pending user transaction\n            playerPendingWithdrawals[player] = playerPendingWithdrawals[player].sub(bet);\n            emit Drunkard(player, 1, choice, bet, _random, winner,  profit, _id);\n   }\n   \n   /*get game specific data*/\n   function getGame(bytes32 _game)public view returns(\n       address from,\n       bytes32 queryId,\n       uint round,\n       bool winner,\n       uint bet,\n       uint choice,\n       uint game_choice,\n       uint timestamp,\n       uint profit,\n       bool status,\n       uint serial) {\n        from = drunkard_game_hystory[_game].from;\n        queryId = drunkard_game_hystory[_game].queryId;\n        round = drunkard_game_hystory[_game].round;\n        winner = drunkard_game_hystory[_game].winner;\n        bet = drunkard_game_hystory[_game].bet;\n        choice = drunkard_game_hystory[_game].choice;\n        game_choice = drunkard_game_hystory[_game].game_choice;\n        timestamp = drunkard_game_hystory[_game].timestamp;\n        profit = drunkard_game_hystory[_game].profit;\n        status = drunkard_game_hystory[_game].status;\n        serial = drunkard_game_hystory[_game].serial;\n    }\n    \n    /*\n    All funds are on the contract and are not covered by the rate of cryptocasino property.\n    The casino pays 0.0044 broadcasts at each bet per call by random.org.\n    To cover the costs of maintaining servers and equipment, we must withdraw some of the money from the contract.\n    */\n    function returnRoyalty(uint _value) onlyOwner public {\n        uint value = _value.mul(1 ether);\n        if (address(this).balance >= value) {\n            marketing_address.transfer(value);\n        }\n    }\n    \n    /* start game */\n    function ownerStartGame() public onlyOwner {\n        drunkard_status = true;\n    }\n    \n    /* stop game */\n    function ownerStopGame() public onlyOwner {\n        drunkard_status = false;\n    }\n    \n    /* set gas price for oraclize callback */\n    function ownerSetCallbackGasPrice(uint _new_gas_price) public onlyOwner {\n        oraclize_setCustomGasPrice(_new_gas_price);\n    }\n    \n    /* set gas limit for oraclize query */\n    function ownerSetOraclizeSafeGas(uint32 _new_custom_gas_limit) public onlyOwner\t{\n    \tcustom_gas_limit = _new_custom_gas_limit;\n    }\n\n     function() external payable {\n\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_new_gas_price\",\"type\":\"uint256\"}],\"name\":\"ownerSetCallbackGasPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GAME_DRUNKARD_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_myid\",\"type\":\"bytes32\"},{\"name\":\"_result\",\"type\":\"string\"},{\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketing_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_choice\",\"type\":\"uint256\"}],\"name\":\"game_drunkard\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_game\",\"type\":\"bytes32\"}],\"name\":\"getGame\",\"outputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"queryId\",\"type\":\"bytes32\"},{\"name\":\"round\",\"type\":\"uint256\"},{\"name\":\"winner\",\"type\":\"bool\"},{\"name\":\"bet\",\"type\":\"uint256\"},{\"name\":\"choice\",\"type\":\"uint256\"},{\"name\":\"game_choice\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"profit\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"bool\"},{\"name\":\"serial\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GAME_DRUNKARD_TITLE\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerStartGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_STAKE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_STAKE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new_custom_gas_limit\",\"type\":\"uint32\"}],\"name\":\"ownerSetOraclizeSafeGas\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round_drunkard\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MARKETING_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"returnRoyalty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"drunkard_status\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerStopGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"oraclizedIndices\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"choice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"game_choice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"proof_hash\",\"type\":\"bytes32\"}],\"name\":\"Drunkard\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"game\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"proof_hash\",\"type\":\"bytes32\"}],\"name\":\"Game\",\"type\":\"event\"}]",
  "bytecode": ""
}