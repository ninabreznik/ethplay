{
  "address": "0xbd2db105b965d74e91deed64ec4b441beab9d498",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FoodNationToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-03\n*/\n\npragma solidity ^0.4.24;\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  uint256 internal totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  modifier hasMintPermission() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    public\n    hasMintPermission\n    canMint\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() public onlyOwner canMint returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/CappedToken.sol\n\n/**\n * @title Capped token\n * @dev Mintable token with a token cap.\n */\ncontract CappedToken is MintableToken {\n\n  uint256 public cap;\n\n  constructor(uint256 _cap) public {\n    require(_cap > 0);\n    cap = _cap;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    public\n    returns (bool)\n  {\n    require(totalSupply_.add(_amount) <= cap);\n\n    return super.mint(_to, _amount);\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/DetailedERC20.sol\n\n/**\n * @title DetailedERC20 token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract DetailedERC20 is ERC20 {\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  constructor(string _name, string _symbol, uint8 _decimals) public {\n    name = _name;\n    symbol = _symbol;\n    decimals = _decimals;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyOwner whenNotPaused {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyOwner whenPaused {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/PausableToken.sol\n\n/**\n * @title Pausable token\n * @dev StandardToken modified with pausable transfers.\n **/\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(\n    address _spender,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/access/rbac/Roles.sol\n\n/**\n * @title Roles\n * @author Francisco Giordano (@frangio)\n * @dev Library for managing addresses assigned to a Role.\n * See RBAC.sol for example usage.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an address access to this role\n   */\n  function add(Role storage _role, address _addr)\n    internal\n  {\n    _role.bearer[_addr] = true;\n  }\n\n  /**\n   * @dev remove an address' access to this role\n   */\n  function remove(Role storage _role, address _addr)\n    internal\n  {\n    _role.bearer[_addr] = false;\n  }\n\n  /**\n   * @dev check if an address has this role\n   * // reverts\n   */\n  function check(Role storage _role, address _addr)\n    internal\n    view\n  {\n    require(has(_role, _addr));\n  }\n\n  /**\n   * @dev check if an address has this role\n   * @return bool\n   */\n  function has(Role storage _role, address _addr)\n    internal\n    view\n    returns (bool)\n  {\n    return _role.bearer[_addr];\n  }\n}\n\n// File: openzeppelin-solidity/contracts/access/rbac/RBAC.sol\n\n/**\n * @title RBAC (Role-Based Access Control)\n * @author Matt Condon (@Shrugs)\n * @dev Stores and provides setters and getters for roles and addresses.\n * Supports unlimited numbers of roles and addresses.\n * See //contracts/mocks/RBACMock.sol for an example of usage.\n * This RBAC method uses strings to key roles. It may be beneficial\n * for you to write your own implementation of this interface using Enums or similar.\n */\ncontract RBAC {\n  using Roles for Roles.Role;\n\n  mapping (string => Roles.Role) private roles;\n\n  event RoleAdded(address indexed operator, string role);\n  event RoleRemoved(address indexed operator, string role);\n\n  /**\n   * @dev reverts if addr does not have role\n   * @param _operator address\n   * @param _role the name of the role\n   * // reverts\n   */\n  function checkRole(address _operator, string _role)\n    public\n    view\n  {\n    roles[_role].check(_operator);\n  }\n\n  /**\n   * @dev determine if addr has role\n   * @param _operator address\n   * @param _role the name of the role\n   * @return bool\n   */\n  function hasRole(address _operator, string _role)\n    public\n    view\n    returns (bool)\n  {\n    return roles[_role].has(_operator);\n  }\n\n  /**\n   * @dev add a role to an address\n   * @param _operator address\n   * @param _role the name of the role\n   */\n  function addRole(address _operator, string _role)\n    internal\n  {\n    roles[_role].add(_operator);\n    emit RoleAdded(_operator, _role);\n  }\n\n  /**\n   * @dev remove a role from an address\n   * @param _operator address\n   * @param _role the name of the role\n   */\n  function removeRole(address _operator, string _role)\n    internal\n  {\n    roles[_role].remove(_operator);\n    emit RoleRemoved(_operator, _role);\n  }\n\n  /**\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\n   * @param _role the name of the role\n   * // reverts\n   */\n  modifier onlyRole(string _role)\n  {\n    checkRole(msg.sender, _role);\n    _;\n  }\n\n  /**\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\n   * @param _roles the names of the roles to scope access to\n   * // reverts\n   *\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\n   *  see: https://github.com/ethereum/solidity/issues/2467\n   */\n  // modifier onlyRoles(string[] _roles) {\n  //     bool hasAnyRole = false;\n  //     for (uint8 i = 0; i < _roles.length; i++) {\n  //         if (hasRole(msg.sender, _roles[i])) {\n  //             hasAnyRole = true;\n  //             break;\n  //         }\n  //     }\n\n  //     require(hasAnyRole);\n\n  //     _;\n  // }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Superuser.sol\n\n/**\n * @title Superuser\n * @dev The Superuser contract defines a single superuser who can transfer the ownership\n * of a contract to a new address, even if he is not the owner.\n * A superuser can transfer his role to a new address.\n */\ncontract Superuser is Ownable, RBAC {\n  string public constant ROLE_SUPERUSER = \"superuser\";\n\n  constructor () public {\n    addRole(msg.sender, ROLE_SUPERUSER);\n  }\n\n  /**\n   * @dev Throws if called by any account that's not a superuser.\n   */\n  modifier onlySuperuser() {\n    checkRole(msg.sender, ROLE_SUPERUSER);\n    _;\n  }\n\n  modifier onlyOwnerOrSuperuser() {\n    require(msg.sender == owner || isSuperuser(msg.sender));\n    _;\n  }\n\n  /**\n   * @dev getter to determine if address has superuser role\n   */\n  function isSuperuser(address _addr)\n    public\n    view\n    returns (bool)\n  {\n    return hasRole(_addr, ROLE_SUPERUSER);\n  }\n\n  /**\n   * @dev Allows the current superuser to transfer his role to a newSuperuser.\n   * @param _newSuperuser The address to transfer ownership to.\n   */\n  function transferSuperuser(address _newSuperuser) public onlySuperuser {\n    require(_newSuperuser != address(0));\n    removeRole(msg.sender, ROLE_SUPERUSER);\n    addRole(_newSuperuser, ROLE_SUPERUSER);\n  }\n\n  /**\n   * @dev Allows the current superuser or owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwnerOrSuperuser {\n    _transferOwnership(_newOwner);\n  }\n}\n\n// File: contracts/upgrade/Recoverable.sol\n\n/**\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n *\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n */\n\npragma solidity ^0.4.24;\n\n\n\ncontract Recoverable is Ownable {\n\n    /// @dev Empty constructor (for now)\n    constructor() public{\n    }\n\n    /// @dev This will be invoked by the owner, when owner wants to rescue tokens\n    /// @param token Token which will we rescue to the owner from the contract\n    function recoverTokens(ERC20Basic token) public onlyOwner  {\n        token.transfer(owner, tokensToBeReturned(token));\n    }\n\n    /// @dev Interface function, can be overwritten by the superclass\n    /// @param token Token which balance we will check and return\n    /// @return The amount of tokens (in smallest denominator) the contract owns\n    function tokensToBeReturned(ERC20Basic token) public view returns (uint) {\n        return token.balanceOf(this);\n    }\n}\n\n// File: contracts/upgrade/UpgradeAgent.sol\n\n/**\n * Upgrade agent interface inspired by Lunyr.\n *\n * Upgrade agent transfers tokens to a new contract.\n * Upgrade agent itself can be the token contract, or just a middle man contract doing the heavy lifting.\n */\ncontract UpgradeAgent {\n\n    uint public originalSupply;\n\n    /** Interface marker */\n    function isUpgradeAgent() public pure returns (bool) {\n        return true;\n    }\n\n    function upgradeFrom(address _from, uint256 _value) public;\n\n}\n\n// File: contracts/token/UpgradeableToken.sol\n\n/**\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n *\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n */\n\npragma solidity ^0.4.24;\n\n\n\n\n\n/**\n * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\n *\n * First envisioned by Golem and Lunyr projects.\n */\ncontract UpgradeableToken is StandardToken, Recoverable {\n\n    /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\n    address public upgradeMaster;\n\n    /** The next contract where the tokens will be migrated. */\n    UpgradeAgent public upgradeAgent;\n\n    /** How many tokens we have upgraded by now. */\n    uint256 public totalUpgraded;\n\n    /**\n    * Upgrade states.\n    *\n    * - NotAllowed: The child contract has not reached a condition where the upgrade can bgun\n    * - WaitingForAgent: Token allows upgrade, but we don't have a new agent yet\n    * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet\n    * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\n    *\n    */\n    enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\n\n    /**\n    * Somebody has upgraded some of his tokens.\n    */\n    event Upgrade(address indexed _from, address indexed _to, uint256 _value);\n\n    /**\n    * New upgrade agent available.\n    */\n    event UpgradeAgentSet(address agent);\n\n    /**\n    * Do not allow construction without upgrade master set.\n    */\n    constructor() public {\n        upgradeMaster = msg.sender;\n    }\n\n    /**\n    * @dev Throws if called by any account other than the upgradeMaster.\n    */\n    modifier onlyUpgradeMaster() {\n        require(msg.sender == upgradeMaster, \"Sender not authorized.\");\n        _;\n    }\n\n    /**\n    * Allow the token holder to upgrade some of their tokens to a new contract.\n    */\n    function upgrade(uint256 value) public {\n        // Validate input value.\n        require(value != 0, \"Value parameter must be non-zero.\");\n\n        UpgradeState state = getUpgradeState();\n        require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading, \"Function called in a bad state\");\n\n        balances[msg.sender] = balances[msg.sender].sub(value);\n\n        // Take tokens out from circulation\n        totalSupply_ = totalSupply_.sub(value);\n        totalUpgraded = totalUpgraded.add(value);\n\n        // Upgrade agent reissues the tokens\n        upgradeAgent.upgradeFrom(msg.sender, value);\n        emit Upgrade(msg.sender, upgradeAgent, value);\n    }\n\n    /**\n    * Set an upgrade agent that handles\n    */\n    function setUpgradeAgent(address agent) external onlyUpgradeMaster {\n        // The token is not yet in a state that we could think upgrading\n        require(canUpgrade(), \"Upgrade not enabled.\");\n\n        // Upgrade has already begun for an agent\n        require(getUpgradeState() != UpgradeState.Upgrading, \"Updgrade has alredy begun.\");\n\n        upgradeAgent = UpgradeAgent(agent);\n\n        // Bad interface\n        require(upgradeAgent.isUpgradeAgent(), \"Not an upgrade Agent or bad interface\");\n        // Make sure that token supplies match in source and target\n        assert(upgradeAgent.originalSupply() == totalSupply_);\n\n        emit UpgradeAgentSet(upgradeAgent);\n    }\n\n    /**\n    * Get the state of the token upgrade.\n    */\n    function getUpgradeState() public view returns(UpgradeState) {\n        if(!canUpgrade()) return UpgradeState.NotAllowed;\n        else if(address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\n        else if(totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\n        else return UpgradeState.Upgrading;\n    }\n\n    /**\n    * Change the upgrade master.\n    *\n    * This allows us to set a new owner for the upgrade mechanism.\n    */\n    function setUpgradeMaster(address master) public onlyUpgradeMaster {\n        require(master != 0x0, \"New master cant be 0x0\");\n        upgradeMaster = master;\n    }\n\n    /**\n    * Child contract can enable to provide the condition when the upgrade can begun.\n    */\n    function canUpgrade() public pure returns(bool) {\n        return true;\n    }\n\n}\n\n// File: contracts/token/ReservableToken.sol\n\ncontract ReservableToken is MintableToken {\n\n    using SafeMath for uint256;\n    \n    //Reserved Tokens Data Structure\n    struct ReservedTokensData {\n        uint256 amount;\n        bool isReserved;\n        bool isDistributed;\n    }\n\n    //state variables for reserved token setting \n    mapping (address => ReservedTokensData) public reservedTokensList;\n    address[] public reservedTokensDestinations;\n    uint256 public reservedTokensDestinationsLen = 0;\n    bool reservedTokensDestinationsAreSet = false;\n\n    //state variables for reserved token distribution\n    bool reservedTokensAreDistributed = false;\n    uint256 public distributedReservedTokensDestinationsLen = 0;\n\n    constructor(\n        address[] addrs, \n        uint256[] amounts\n    ) \n        public \n    {\n        setReservedTokensListMultiple(addrs, amounts);\n    }\n\n    function isAddressReserved(address addr) public view returns (bool isReserved) {\n        return reservedTokensList[addr].isReserved;\n    }\n\n    function areTokensDistributedForAddress(address addr) public view returns (bool isDistributed) {\n        return reservedTokensList[addr].isDistributed;\n    }\n\n    function getReservedTokens(address addr) public view returns (uint256 amount) {\n        return reservedTokensList[addr].amount;\n    }\n\n    /// distributes reserved tokens\n    function distributeReservedTokens() public canMint onlyOwner returns (bool){\n        assert(!reservedTokensAreDistributed);\n        assert(distributedReservedTokensDestinationsLen < reservedTokensDestinationsLen);\n\n\n        uint startLooping = distributedReservedTokensDestinationsLen;\n        uint256 batch = reservedTokensDestinationsLen.sub(distributedReservedTokensDestinationsLen);\n        uint endLooping = startLooping + batch;\n\n        // move reserved tokens\n        for (uint j = startLooping; j < endLooping; j++) {\n            address reservedAddr = reservedTokensDestinations[j];\n            if (!areTokensDistributedForAddress(reservedAddr)) {\n                uint256 allocatedTokens = getReservedTokens(reservedAddr);\n\n                if (allocatedTokens > 0) {\n                    mint(reservedAddr, allocatedTokens);\n                }\n\n                finalizeReservedAddress(reservedAddr);\n                distributedReservedTokensDestinationsLen++;\n            }\n        }\n\n        if (distributedReservedTokensDestinationsLen == reservedTokensDestinationsLen) {\n            reservedTokensAreDistributed = true;\n        }\n        return true;\n    }\n\n    function setReservedTokensListMultiple(address[] addrs, uint256[] amounts) internal canMint onlyOwner {\n        require(!reservedTokensDestinationsAreSet, \"Reserved Tokens already set\");\n        require(addrs.length == amounts.length, \"Parameters must have the same length\");\n        for (uint iterator = 0; iterator < addrs.length; iterator++) {\n            if (addrs[iterator] != address(0)) {\n                setReservedTokensList(addrs[iterator], amounts[iterator]);\n            }\n        }\n        reservedTokensDestinationsAreSet = true;\n    }\n\n    function setReservedTokensList(address addr, uint256 amount) internal canMint onlyOwner {\n        assert(addr != address(0));\n        if (!isAddressReserved(addr)) {\n            reservedTokensDestinations.push(addr);\n            reservedTokensDestinationsLen++;\n        }\n\n        reservedTokensList[addr] = ReservedTokensData({\n            amount: amount,\n            isReserved: true,\n            isDistributed: false\n        });\n    }\n\n    function finalizeReservedAddress(address addr) internal onlyOwner {\n        ReservedTokensData storage reservedTokensData = reservedTokensList[addr];\n        reservedTokensData.isDistributed = true;\n    }\n}\n\n// File: contracts/FoodNationToken.sol\n\ncontract FoodNationToken is StandardToken, MintableToken, CappedToken, DetailedERC20, PausableToken, UpgradeableToken, ReservableToken, Superuser {\n\n    constructor(\n        string _name, \n        string _symbol, \n        uint8 _decimals, \n        uint256 _cap, \n        address[] _addrs, \n        uint256[] _amounts\n    )\n        DetailedERC20(_name, _symbol, _decimals)\n        CappedToken(_cap)\n        ReservableToken(_addrs, _amounts)\n        public\n    {\n\n    }\n}",
  "bytecode": "60806040526003805460a060020a60ff02191690556007805461ff00191690556000600c819055600d805461ffff19169055600e553480156200004157600080fd5b506040516200283a3803806200283a83398101604090815281516020830151918301516060840151608085015160a086015160038054600160a060020a03191633179055938601959485019492939192908101910181818787878760008111620000aa57600080fd5b6004558251620000c2906005906020860190620005f6565b508151620000d8906006906020850190620005f6565b506007805460ff191660ff92909216919091176201000060b060020a03191633620100000217905550620001189050828264010000000062000176810204565b50506200016a336040805190810160405280600981526020017f737570657275736572000000000000000000000000000000000000000000000081525062000362640100000000026401000000009004565b5050505050506200069b565b60035460009074010000000000000000000000000000000000000000900460ff1615620001a257600080fd5b600354600160a060020a03163314620001ba57600080fd5b600d5460ff16156200022d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f526573657276656420546f6b656e7320616c7265616479207365740000000000604482015290519081900360640190fd5b8151835114620002c357604080517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f506172616d6574657273206d7573742068617665207468652073616d65206c6560448201527f6e67746800000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b5060005b825181101562000350578251600090849083908110620002e357fe5b60209081029091010151600160a060020a03161462000347576200034783828151811015156200030f57fe5b9060200190602002015183838151811015156200032857fe5b9060200190602002015162000488640100000000026401000000009004565b600101620002c7565b5050600d805460ff1916600117905550565b620003de82600f836040518082805190602001908083835b602083106200039b5780518252601f1990920191602091820191016200037a565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922092915050640100000000620005b081026200211e1704565b81600160a060020a03167fbfec83d64eaa953f2708271a023ab9ee82057f8f3578d548c1a4ba0b5b700489826040518080602001828103825283818151815260200191508051906020019080838360005b83811015620004495781810151838201526020016200042f565b50505050905090810190601f168015620004775780820380516001836020036101000a031916815260200191505b509250505060405180910390a25050565b60035474010000000000000000000000000000000000000000900460ff1615620004b157600080fd5b600354600160a060020a03163314620004c957600080fd5b600160a060020a0382161515620004dc57fe5b620004f082640100000000620005d5810204565b15156200054d57600b8054600180820183556000929092527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9018054600160a060020a031916600160a060020a038516179055600c805490910190555b60408051606081018252918252600160208084018281526000858501818152600160a060020a039097168152600a90925292902092518355905191018054925115156101000261ff001992151560ff199094169390931791909116919091179055565b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b600160a060020a03166000908152600a602052604090206001015460ff1690565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200063957805160ff191683800117855562000669565b8280016001018555821562000669579182015b82811115620006695782518255916020019190600101906200064c565b50620006779291506200067b565b5090565b6200069891905b8082111562000677576000815560010162000682565b90565b61218f80620006ab6000396000f3006080604052600436106102005763ffffffff60e060020a60003504166305d2035b811461020557806306fdde031461022e578063095ea7b3146102b85780630988ca8c146102dc57806316114acd1461034557806318160ddd14610366578063217fe6c61461038d57806323b872dd146103f4578063313ce5671461041e578063355274ea146104495780633f4ba83a1461045e57806340c10f191461047357806345977d031461049757806351ed17a4146104af57806357c393fa146104f05780635c975abb146105115780635de4ccb014610526578063600440cb14610557578063612544b31461056c578063661884631461058d57806370a08231146105b1578063715018a6146105d25780637386f0a7146105e75780637d64bcb4146105ff5780638444b391146106145780638456cb591461064d5780638da5cb5b1461066257806395d89b411461067757806395fe6f1d1461068c5780639738968c146106ad578063a9059cbb146106c2578063b4ecb847146106e6578063bceee05e14610707578063c331051714610728578063c45d19db1461073d578063c71a7aea1461075e578063c752ff6214610773578063ca1aa5bb14610788578063d73dd6231461079d578063d7e7088a146107c1578063dd62ed3e146107e2578063ebb4f48414610809578063f2fde38b1461081e578063ffeb7d751461083f575b600080fd5b34801561021157600080fd5b5061021a610860565b604080519115158252519081900360200190f35b34801561023a57600080fd5b50610243610881565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561027d578181015183820152602001610265565b50505050905090810190601f1680156102aa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102c457600080fd5b5061021a600160a060020a036004351660243561090f565b3480156102e857600080fd5b5060408051602060046024803582810135601f8101859004850286018501909652858552610343958335600160a060020a03169536956044949193909101919081908401838280828437509497506109389650505050505050565b005b34801561035157600080fd5b50610343600160a060020a03600435166109a6565b34801561037257600080fd5b5061037b610a5d565b60408051918252519081900360200190f35b34801561039957600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261021a958335600160a060020a0316953695604494919390910191908190840183828082843750949750610a649650505050505050565b34801561040057600080fd5b5061021a600160a060020a0360043581169060243516604435610ad0565b34801561042a57600080fd5b50610433610afb565b6040805160ff9092168252519081900360200190f35b34801561045557600080fd5b5061037b610b04565b34801561046a57600080fd5b50610343610b0a565b34801561047f57600080fd5b5061021a600160a060020a0360043516602435610b6d565b3480156104a357600080fd5b50610343600435610b9c565b3480156104bb57600080fd5b506104d0600160a060020a0360043516610dc9565b604080519384529115156020840152151582820152519081900360600190f35b3480156104fc57600080fd5b50610343600160a060020a0360043516610dee565b34801561051d57600080fd5b5061021a610e8d565b34801561053257600080fd5b5061053b610e9b565b60408051600160a060020a039092168252519081900360200190f35b34801561056357600080fd5b5061053b610eaa565b34801561057857600080fd5b5061037b600160a060020a0360043516610ebf565b34801561059957600080fd5b5061021a600160a060020a0360043516602435610eda565b3480156105bd57600080fd5b5061037b600160a060020a0360043516610efc565b3480156105de57600080fd5b50610343610f17565b3480156105f357600080fd5b5061053b600435610f85565b34801561060b57600080fd5b5061021a610fad565b34801561062057600080fd5b50610629611053565b6040518082600481111561063957fe5b60ff16815260200191505060405180910390f35b34801561065957600080fd5b5061034361109e565b34801561066e57600080fd5b5061053b611104565b34801561068357600080fd5b50610243611113565b34801561069857600080fd5b5061021a600160a060020a036004351661116e565b3480156106b957600080fd5b5061021a61118f565b3480156106ce57600080fd5b5061021a600160a060020a0360043516602435611194565b3480156106f257600080fd5b5061021a600160a060020a03600435166111b6565b34801561071357600080fd5b5061021a600160a060020a03600435166111dc565b34801561073457600080fd5b5061037b611211565b34801561074957600080fd5b5061037b600160a060020a0360043516611217565b34801561076a57600080fd5b5061037b6112ad565b34801561077f57600080fd5b5061037b6112b3565b34801561079457600080fd5b5061021a6112b9565b3480156107a957600080fd5b5061021a600160a060020a03600435166024356113dd565b3480156107cd57600080fd5b50610343600160a060020a03600435166113ff565b3480156107ee57600080fd5b5061037b600160a060020a0360043581169060243516611727565b34801561081557600080fd5b50610243611752565b34801561082a57600080fd5b50610343600160a060020a0360043516611777565b34801561084b57600080fd5b50610343600160a060020a03600435166117a8565b60035474010000000000000000000000000000000000000000900460ff1681565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109075780601f106108dc57610100808354040283529160200191610907565b820191906000526020600020905b8154815290600101906020018083116108ea57829003601f168201915b505050505081565b600754600090610100900460ff161561092757600080fd5b61093183836118a7565b9392505050565b6109a282600f836040518082805190602001908083835b6020831061096e5780518252601f19909201916020918201910161094f565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092209291505061190d565b5050565b600354600160a060020a031633146109bd57600080fd5b600354600160a060020a038083169163a9059cbb91166109dc84611217565b6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610a2e57600080fd5b505af1158015610a42573d6000803e3d6000fd5b505050506040513d6020811015610a5857600080fd5b505050565b6001545b90565b600061093183600f846040518082805190602001908083835b60208310610a9c5780518252601f199092019160209182019101610a7d565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922092915050611922565b600754600090610100900460ff1615610ae857600080fd5b610af3848484611941565b949350505050565b60075460ff1681565b60045481565b600354600160a060020a03163314610b2157600080fd5b600754610100900460ff161515610b3757600080fd5b6007805461ff00191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b6000600454610b8783600154611ab690919063ffffffff16565b1115610b9257600080fd5b6109318383611ac3565b6000811515610c1b576040805160e560020a62461bcd02815260206004820152602160248201527f56616c756520706172616d65746572206d757374206265206e6f6e2d7a65726f60448201527f2e00000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b610c23611053565b90506003816004811115610c3357fe5b1480610c4a57506004816004811115610c4857fe5b145b1515610ca0576040805160e560020a62461bcd02815260206004820152601e60248201527f46756e6374696f6e2063616c6c656420696e2061206261642073746174650000604482015290519081900360640190fd5b33600090815260208190526040902054610cc0908363ffffffff611bde16565b33600090815260208190526040902055600154610ce3908363ffffffff611bde16565b600155600954610cf9908363ffffffff611ab616565b600955600854604080517f753e88e5000000000000000000000000000000000000000000000000000000008152336004820152602481018590529051600160a060020a039092169163753e88e59160448082019260009290919082900301818387803b158015610d6857600080fd5b505af1158015610d7c573d6000803e3d6000fd5b5050600854604080518681529051600160a060020a0390921693503392507f7e5c344a8141a805725cb476f76c6953b842222b967edd1f78ddb6e8b3f397ac919081900360200190a35050565b600a602052600090815260409020805460019091015460ff8082169161010090041683565b610e1b33604080519081016040528060098152602001600080516020612144833981519152815250610938565b600160a060020a0381161515610e3057600080fd5b610e5d33604080519081016040528060098152602001600080516020612144833981519152815250611bf0565b610e8a81604080519081016040528060098152602001600080516020612144833981519152815250611d01565b50565b600754610100900460ff1681565b600854600160a060020a031681565b600754620100009004600160a060020a031681565b600160a060020a03166000908152600a602052604090205490565b600754600090610100900460ff1615610ef257600080fd5b6109318383611dd3565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a03163314610f2e57600080fd5b600354604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26003805473ffffffffffffffffffffffffffffffffffffffff19169055565b600b805482908110610f9357fe5b600091825260209091200154600160a060020a0316905081565b600354600090600160a060020a03163314610fc757600080fd5b60035474010000000000000000000000000000000000000000900460ff1615610fef57600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600061105d61118f565b151561106b57506001610a61565b600854600160a060020a0316151561108557506002610a61565b600954151561109657506003610a61565b506004610a61565b600354600160a060020a031633146110b557600080fd5b600754610100900460ff16156110ca57600080fd5b6007805461ff0019166101001790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600354600160a060020a031681565b6006805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109075780601f106108dc57610100808354040283529160200191610907565b600160a060020a03166000908152600a602052604090206001015460ff1690565b600190565b600754600090610100900460ff16156111ac57600080fd5b6109318383611ec2565b600160a060020a03166000908152600a6020526040902060010154610100900460ff1690565b600061120b82604080519081016040528060098152602001600080516020612144833981519152815250610a64565b92915050565b600c5481565b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600091600160a060020a038416916370a082319160248082019260209290919082900301818787803b15801561127b57600080fd5b505af115801561128f573d6000803e3d6000fd5b505050506040513d60208110156112a557600080fd5b505192915050565b600e5481565b60095481565b6000806000806000806000600360149054906101000a900460ff161515156112e057600080fd5b600354600160a060020a031633146112f757600080fd5b600d54610100900460ff161561130957fe5b600c54600e541061131657fe5b600e54600c5490965061132f908763ffffffff611bde16565b945084860193508592505b838310156113b457600b80548490811061135057fe5b600091825260209091200154600160a060020a03169150611370826111b6565b15156113a95761137f82610ebf565b90506000811115611396576113948282610b6d565b505b61139f82611fa1565b600e805460010190555b60019092019161133a565b600c54600e5414156113d057600d805461ff0019166101001790555b6001965050505050505090565b600754600090610100900460ff16156113f557600080fd5b6109318383611fe5565b600754620100009004600160a060020a03163314611467576040805160e560020a62461bcd02815260206004820152601660248201527f53656e646572206e6f7420617574686f72697a65642e00000000000000000000604482015290519081900360640190fd5b61146f61118f565b15156114c5576040805160e560020a62461bcd02815260206004820152601460248201527f55706772616465206e6f7420656e61626c65642e000000000000000000000000604482015290519081900360640190fd5b60046114cf611053565b60048111156114da57fe5b1415611530576040805160e560020a62461bcd02815260206004820152601a60248201527f55706467726164652068617320616c7265647920626567756e2e000000000000604482015290519081900360640190fd5b6008805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038381169190911791829055604080517f61d3d7a6000000000000000000000000000000000000000000000000000000008152905192909116916361d3d7a6916004808201926020929091908290030181600087803b1580156115b457600080fd5b505af11580156115c8573d6000803e3d6000fd5b505050506040513d60208110156115de57600080fd5b5051151561165c576040805160e560020a62461bcd02815260206004820152602560248201527f4e6f7420616e2075706772616465204167656e74206f722062616420696e746560448201527f7266616365000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600154600860009054906101000a9004600160a060020a0316600160a060020a0316634b2ba0dd6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156116b257600080fd5b505af11580156116c6573d6000803e3d6000fd5b505050506040513d60208110156116dc57600080fd5b5051146116e557fe5b60085460408051600160a060020a039092168252517f7845d5aa74cc410e35571258d954f23b82276e160fe8c188fa80566580f279cc9181900360200190a150565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b6040805180820190915260098152600080516020612144833981519152602082015281565b600354600160a060020a03163314806117945750611794336111dc565b151561179f57600080fd5b610e8a8161207e565b600754620100009004600160a060020a03163314611810576040805160e560020a62461bcd02815260206004820152601660248201527f53656e646572206e6f7420617574686f72697a65642e00000000000000000000604482015290519081900360640190fd5b600160a060020a0381161515611870576040805160e560020a62461bcd02815260206004820152601660248201527f4e6577206d61737465722063616e742062652030783000000000000000000000604482015290519081900360640190fd5b60078054600160a060020a03909216620100000275ffffffffffffffffffffffffffffffffffffffff000019909216919091179055565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b6119178282611922565b15156109a257600080fd5b600160a060020a03166000908152602091909152604090205460ff1690565b600160a060020a03831660009081526020819052604081205482111561196657600080fd5b600160a060020a038416600090815260026020908152604080832033845290915290205482111561199657600080fd5b600160a060020a03831615156119ab57600080fd5b600160a060020a0384166000908152602081905260409020546119d4908363ffffffff611bde16565b600160a060020a038086166000908152602081905260408082209390935590851681522054611a09908363ffffffff611ab616565b600160a060020a03808516600090815260208181526040808320949094559187168152600282528281203382529091522054611a4b908363ffffffff611bde16565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b8181018281101561120b57fe5b600354600090600160a060020a03163314611add57600080fd5b60035474010000000000000000000000000000000000000000900460ff1615611b0557600080fd5b600154611b18908363ffffffff611ab616565b600155600160a060020a038316600090815260208190526040902054611b44908363ffffffff611ab616565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350600192915050565b600082821115611bea57fe5b50900390565b611c5a82600f836040518082805190602001908083835b60208310611c265780518252601f199092019160209182019101611c07565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220929150506120fc565b81600160a060020a03167fd211483f91fc6eff862467f8de606587a30c8fc9981056f051b897a418df803a826040518080602001828103825283818151815260200191508051906020019080838360005b83811015611cc3578181015183820152602001611cab565b50505050905090810190601f168015611cf05780820380516001836020036101000a031916815260200191505b509250505060405180910390a25050565b611d6b82600f836040518082805190602001908083835b60208310611d375780518252601f199092019160209182019101611d18565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092209291505061211e565b81600160a060020a03167fbfec83d64eaa953f2708271a023ab9ee82057f8f3578d548c1a4ba0b5b7004898260405180806020018281038252838181518152602001915080519060200190808383600083811015611cc3578181015183820152602001611cab565b336000908152600260209081526040808320600160a060020a0386168452909152812054808310611e2757336000908152600260209081526040808320600160a060020a0388168452909152812055611e5c565b611e37818463ffffffff611bde16565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b33600090815260208190526040812054821115611ede57600080fd5b600160a060020a0383161515611ef357600080fd5b33600090815260208190526040902054611f13908363ffffffff611bde16565b3360009081526020819052604080822092909255600160a060020a03851681522054611f45908363ffffffff611ab616565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600354600090600160a060020a03163314611fbb57600080fd5b50600160a060020a03166000908152600a60205260409020600101805461ff001916610100179055565b336000908152600260209081526040808320600160a060020a0386168452909152812054612019908363ffffffff611ab616565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a038116151561209357600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a0316600090815260209190915260409020805460ff19169055565b600160a060020a0316600090815260209190915260409020805460ff1916600117905556007375706572757365720000000000000000000000000000000000000000000000a165627a7a72305820f885ba7302184fcc64f695de0ccfebc370f2bc5290e8fb7a041fc3f56524bc80002900000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000033b2e3c9fd0803ce8000000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000000010466f6f644e6174696f6e20546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004464f4f44000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007000000000000000000000000fd484d0ba719a4df391cea2d13e041f8159ddaa7000000000000000000000000045fbc16f17f202ad3adb5ab06d486d9fbc0f10c0000000000000000000000004dad2c319456843fe00f41408b82fb952b70cecf000000000000000000000000e512dcf321f91cd8a523e090ce1697e74dc4042f000000000000000000000000ed63f6eebeddfb119ac27bd1cd417d1a101b5db1000000000000000000000000a47cb54bccebc194392bb025196953220976a142000000000000000000000000104e3ff34e809e4c89df75b05f77655ec2a0b5b10000000000000000000000000000000000000000000000000000000000000007000000000000000000000000000000000000000000295be96e6406697200000000000000000000000000000000000000000000000018d0bf423c03d8de00000000000000000000000000000000000000000000000018d0bf423c03d8de000000000000000000000000000000000000000000000000a56fa5b99019a5c8000000000000000000000000000000000000000000000000cecb8f27f4200f3a00000000000000000000000000000000000000000000000025391ee35a05c54d00000000000000000000000000000000000000000000000025391ee35a05c54d000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000033b2e3c9fd0803ce8000000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000000010466f6f644e6174696f6e20546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004464f4f44000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007000000000000000000000000fd484d0ba719a4df391cea2d13e041f8159ddaa7000000000000000000000000045fbc16f17f202ad3adb5ab06d486d9fbc0f10c0000000000000000000000004dad2c319456843fe00f41408b82fb952b70cecf000000000000000000000000e512dcf321f91cd8a523e090ce1697e74dc4042f000000000000000000000000ed63f6eebeddfb119ac27bd1cd417d1a101b5db1000000000000000000000000a47cb54bccebc194392bb025196953220976a142000000000000000000000000104e3ff34e809e4c89df75b05f77655ec2a0b5b10000000000000000000000000000000000000000000000000000000000000007000000000000000000000000000000000000000000295be96e6406697200000000000000000000000000000000000000000000000018d0bf423c03d8de00000000000000000000000000000000000000000000000018d0bf423c03d8de000000000000000000000000000000000000000000000000a56fa5b99019a5c8000000000000000000000000000000000000000000000000cecb8f27f4200f3a00000000000000000000000000000000000000000000000025391ee35a05c54d00000000000000000000000000000000000000000000000025391ee35a05c54d000000"
}