{
  "address": "0x449574c69f3a658794829ed81639a7a9ece041e1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NeoGold",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-27\n*/\n\npragma solidity ^0.4.9;\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal constant returns(uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal constant returns(uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal constant returns(uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal constant returns(uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\ncontract NeoGold {\n    using SafeMath for uint256;\n    mapping(address => mapping(address => uint256)) allowed;\n    mapping(address => uint256) balances;\n    uint256 public totalSupply;\n    uint256 public decimals;\n    address public owner;\n    bytes32 public symbol;\n    bool public fullSupplyUnlocked;\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed _owner, address indexed spender, uint256 value);\n\n    function NeoGold() \n    {\n        totalSupply = 100000000;\n        symbol = 'NEOG';\n        owner = 0x61DDb6704A84CD906ec8318576465b25aD2100fd;\n        balances[owner] = 50000000;\n        decimals = 0;\n    }\n    function unlockSupply() returns(bool)\n    {\n        require(msg.sender == owner);\n        require(!fullSupplyUnlocked);\n        balances[owner] = balances[owner].add(50000000);\n        fullSupplyUnlocked = true;\n        return true;\n    }\n    function balanceOf(address _owner) constant returns(uint256 balance)\n    {\n        return balances[_owner];\n    }\n\n    function allowance(address _owner, address _spender) constant returns(uint256 remaining)\n    {\n        return allowed[_owner][_spender];\n    }\n\n    function transfer(address _to, uint256 _value) returns(bool)\n    {\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) returns(bool) \n    {\n        var _allowance = allowed[_from][msg.sender];\n        balances[_to] = balances[_to].add(_value);\n        balances[_from] = balances[_from].sub(_value);\n        allowed[_from][msg.sender] = _allowance.sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) returns(bool) \n    {\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function() \n    {\n        revert();\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b6305f5e1006002819055507f4e454f4700000000000000000000000000000000000000000000000000000000600581600019169055507361ddb6704a84cd906ec8318576465b25ad2100fd600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506302faf08060016000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600381905550610c9b8061011b6000396000f3006060604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063095ea7b3146100bf57806318160ddd1461011957806323b872dd14610142578063313ce567146101bb57806370a08231146101e45780637c197c09146102315780638da5cb5b1461025e57806395d89b41146102b3578063a8dc824c146102e4578063a9059cbb14610311578063dd62ed3e1461036b575b34156100ba57600080fd5b600080fd5b34156100ca57600080fd5b6100ff600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506103d7565b604051808215151515815260200191505060405180910390f35b341561012457600080fd5b61012c61055c565b6040518082815260200191505060405180910390f35b341561014d57600080fd5b6101a1600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610562565b604051808215151515815260200191505060405180910390f35b34156101c657600080fd5b6101ce610810565b6040518082815260200191505060405180910390f35b34156101ef57600080fd5b61021b600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610816565b6040518082815260200191505060405180910390f35b341561023c57600080fd5b61024461085f565b604051808215151515815260200191505060405180910390f35b341561026957600080fd5b610271610872565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156102be57600080fd5b6102c6610898565b60405180826000191660001916815260200191505060405180910390f35b34156102ef57600080fd5b6102f761089e565b604051808215151515815260200191505060405180910390f35b341561031c57600080fd5b610351600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a17565b604051808215151515815260200191505060405180910390f35b341561037657600080fd5b6103c1600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610bb2565b6040518082815260200191505060405180910390f35b600080821480610462575060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b151561046d57600080fd5b816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60025481565b6000806000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905061063583600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c3890919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506106ca83600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c5690919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506107208382610c5690919063ffffffff16565b6000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b60035481565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600660009054906101000a900460ff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108fc57600080fd5b600660009054906101000a900460ff1615151561091857600080fd5b6109906302faf08060016000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c3890919063ffffffff16565b60016000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001600660006101000a81548160ff0219169083151502179055506001905090565b6000610a6b82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c5690919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b0082600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c3890919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000808284019050838110151515610c4c57fe5b8091505092915050565b6000828211151515610c6457fe5b8183039050929150505600a165627a7a7230582070d4adc3b70c4dd93890d43a218fb3d39a4ee8c336e855bf7811fdd709e08c010029"
}