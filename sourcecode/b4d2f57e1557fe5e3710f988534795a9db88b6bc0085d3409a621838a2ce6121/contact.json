{
  "address": "0x7fbd92f49f6f9b4f9b3b4d18761b0deb7253a8bf",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HotelCoin",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-28\n*/\n\npragma solidity 0.4.19;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        require(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) public balances;\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n        assert(token.transfer(to, value));\n    }\n\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n        assert(token.transferFrom(from, to, value));\n    }\n\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n        assert(token.approve(spender, value));\n    }\n}\n\n/**\n * @title TokenTimelock\n * @dev TokenTimelock is a token holder contract that will allow a\n * beneficiary to extract the tokens after a given release time\n */\ncontract TokenTimelock {\n    using SafeERC20 for ERC20Basic;\n\n    // ERC20 basic token contract being held\n    ERC20Basic public token;\n\n    // beneficiary of tokens after they are released\n    address public beneficiary;\n\n    // timestamp when token release is enabled\n    uint64 public releaseTime;\n\n    function TokenTimelock(ERC20Basic _token, address _beneficiary, uint64 _releaseTime) public {\n        require(_releaseTime > uint64(block.timestamp));\n        token = _token;\n        beneficiary = _beneficiary;\n        releaseTime = _releaseTime;\n    }\n\n    /**\n     * @notice Transfers tokens held by timelock to beneficiary.\n     */\n    function release() public {\n        require(uint64(block.timestamp) >= releaseTime);\n\n        uint256 amount = token.balanceOf(this);\n        require(amount > 0);\n\n        token.safeTransfer(beneficiary, amount);\n    }\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     */\n    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is StandardToken {\n\n    event Burn(address indexed burner, uint256 value);\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public {\n        require(_value > 0);\n        require(_value <= balances[msg.sender]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Burn(burner, _value);\n    }\n}\n\ncontract Owned {\n    address public owner;\n\n    function Owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n}\n\ncontract HotelCoin is BurnableToken, Owned {\n    string public constant name = \"Hotel Coin\";\n    string public constant symbol = \"HCI\";\n    uint8 public constant decimals = 8;\n\n    /// Maximum tokens to be allocated (350 million)\n    uint256 public constant HARD_CAP = 350000000 * 10**uint256(decimals);\n\n    /// The owner of this address is the HCI Liquidity Fund\n    address public liquidityFundAddress;\n\n    /// This address is used to keep the tokens for bonuses\n    address public communityTokensAddress;\n\n    /// When the sale is closed, no more tokens can be issued\n    uint64 public tokenSaleClosedTime = 0;\n\n    /// Trading opening date deadline (21/Jun/2018)\n    uint64 private constant date21Jun2018 = 1529517600;\n\n    /// Used to look up the locking contract for each locked tokens owner\n    mapping(address => address) public lockingContractAddresses;\n\n    /// Only allowed to execute before the sale is closed\n    modifier beforeEnd {\n        require(tokenSaleClosedTime == 0);\n        _;\n    }\n\n    function HotelCoin(address _liquidityFundAddress, address _communityTokensAddress) public {\n        require(_liquidityFundAddress != address(0));\n        require(_communityTokensAddress != address(0));\n\n        liquidityFundAddress = _liquidityFundAddress;\n        communityTokensAddress = _communityTokensAddress;\n\n        /// Tokens for sale, Partnership, Board of Advisors and team - 280 million HCI\n        uint256 saleTokens = 280000000 * 10**uint256(decimals);\n        totalSupply = saleTokens;\n        balances[owner] = saleTokens;\n        Transfer(0x0, owner, saleTokens);\n\n        /// Community and Affiliates pools tokens - 52.5 million\n        uint256 communityTokens = 52500000 * 10**uint256(decimals);\n        totalSupply = totalSupply.add(communityTokens);\n        balances[communityTokensAddress] = communityTokens;\n        Transfer(0x0, communityTokensAddress, communityTokens);\n\n        /// Liquidity tokens - 17.5 million\n        uint256 liquidityTokens = 17500000 * 10**uint256(decimals);\n        totalSupply = totalSupply.add(liquidityTokens);\n        balances[liquidityFundAddress] = liquidityTokens;\n        Transfer(0x0, liquidityFundAddress, liquidityTokens);\n    }\n\n    /// @dev start the trading countdown\n    function close() public onlyOwner beforeEnd {\n        require(totalSupply <= HARD_CAP);\n        tokenSaleClosedTime = uint64(block.timestamp);\n    }\n\n    /// @dev Transfer timelocked tokens; ignores _releaseTime if a timelock exists already\n    function transferLocking(address _to, uint256 _value, uint64 _releaseTime) public onlyOwner returns (bool) {\n        address timelockAddress = lockingContractAddresses[_to];\n        if(timelockAddress == address(0)) {\n            TokenTimelock timelock = new TokenTimelock(this, _to, _releaseTime);\n            timelockAddress = address(timelock);\n            lockingContractAddresses[_to] = timelockAddress;\n        }\n\n        return super.transfer(timelockAddress, _value);\n    }\n\n    /// @dev check the locked balance of an owner\n    function lockedBalanceOf(address _owner) public view returns (uint256) {\n        return balances[lockingContractAddresses[_owner]];\n    }\n\n    /// @dev get the TokenTimelock contract address for an owner\n    function timelockOf(address _owner) public view returns (address) {\n        return lockingContractAddresses[_owner];\n    }\n\n    /// @dev 21 days after the closing of the sale\n    function tradingOpen() public view returns (bool) {\n        return (tokenSaleClosedTime != 0 && block.timestamp > tokenSaleClosedTime + 60 * 60 * 24 * 21)\n        || block.timestamp > date21Jun2018;\n    }\n\n    /// @dev Trading limited - requires 3 weeks to have passed since the sale closed\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        if(tradingOpen() || msg.sender == owner || msg.sender == communityTokensAddress) {\n            return super.transferFrom(_from, _to, _value);\n        }\n        return false;\n    }\n\n    /// @dev Trading limited - requires 3 weeks to have passed since the sale closed\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        if(tradingOpen() || msg.sender == owner || msg.sender == communityTokensAddress) {\n            return super.transfer(_to, _value);\n        }\n        return false;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"communityTokensAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidityFundAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockingContractAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HARD_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"timelockOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_releaseTime\",\"type\":\"uint64\"}],\"name\":\"transferLocking\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSaleClosedTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_liquidityFundAddress\",\"type\":\"address\"},{\"name\":\"_communityTokensAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60606040526005805460a060020a60e060020a0319169055341561002257600080fd5b60405160408061140f833981016040528080519190602001805160038054600160a060020a03191633600160a060020a039081169190911790915590925060009150819081908516151561007557600080fd5b600160a060020a038416151561008a57600080fd5b60048054600160a060020a03808816600160a060020a031992831617909255600580548784169216919091179055666379da05b60000600081815560038054841682526001602052604080832084905590549296509190921691906000805160206113ef8339815191529086905190815260200160405180910390a36000546612a6d8e1122000925061012a9083640100000000610e226101ea82021704565b600090815560058054600160a060020a0390811683526001602052604080842086905591541691906000805160206113ef8339815191529085905190815260200160405180910390a3506000546606379da05b6000906101979082640100000000610e226101ea82021704565b600090815560048054600160a060020a0390811683526001602052604080842085905591541691906000805160206113ef8339815191529084905190815260200160405180910390a35050505050610203565b6000828201838110156101fc57600080fd5b9392505050565b6111dd806102126000396000f30060606040526004361061013d5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610142578063095ea7b3146101cc5780630f53b7ee1461020257806318160ddd146102315780631882d2671461025657806323b872dd1461026957806327e235e31461029157806330a0f5d3146102b0578063313ce567146102cf5780633a03171c146102f857806342966c681461030b57806343d726d6146103235780635935573614610336578063661884631461035557806370a08231146103775780638da5cb5b1461039657806395d89b41146103a9578063a9059cbb146103bc578063c1708ad4146103de578063d73dd623146103fd578063db74dc371461041f578063dd62ed3e1461044e578063f1bbc66314610473578063ffb54a99146104a3575b600080fd5b341561014d57600080fd5b6101556104b6565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610191578082015183820152602001610179565b50505050905090810190601f1680156101be5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101d757600080fd5b6101ee600160a060020a03600435166024356104ed565b604051901515815260200160405180910390f35b341561020d57600080fd5b61021561055a565b604051600160a060020a03909116815260200160405180910390f35b341561023c57600080fd5b610244610569565b60405190815260200160405180910390f35b341561026157600080fd5b61021561056f565b341561027457600080fd5b6101ee600160a060020a036004358116906024351660443561057e565b341561029c57600080fd5b610244600160a060020a03600435166105dc565b34156102bb57600080fd5b610215600160a060020a03600435166105ee565b34156102da57600080fd5b6102e2610609565b60405160ff909116815260200160405180910390f35b341561030357600080fd5b61024461060e565b341561031657600080fd5b610321600435610619565b005b341561032e57600080fd5b6103216106e2565b341561034157600080fd5b610244600160a060020a036004351661076e565b341561036057600080fd5b6101ee600160a060020a0360043516602435610799565b341561038257600080fd5b610244600160a060020a0360043516610893565b34156103a157600080fd5b6102156108ae565b34156103b457600080fd5b6101556108bd565b34156103c757600080fd5b6101ee600160a060020a03600435166024356108f4565b34156103e957600080fd5b610215600160a060020a036004351661094f565b341561040857600080fd5b6101ee600160a060020a036004351660243561096d565b341561042a57600080fd5b6101ee600160a060020a036004351660243567ffffffffffffffff60443516610a11565b341561045957600080fd5b610244600160a060020a0360043581169060243516610afc565b341561047e57600080fd5b610486610b27565b60405167ffffffffffffffff909116815260200160405180910390f35b34156104ae57600080fd5b6101ee610b3e565b60408051908101604052600a81527f486f74656c20436f696e00000000000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b600554600160a060020a031681565b60005481565b600454600160a060020a031681565b6000610588610b3e565b806105a1575060035433600160a060020a039081169116145b806105ba575060055433600160a060020a039081169116145b156105d1576105ca848484610b90565b90506105d5565b5060005b9392505050565b60016020526000908152604090205481565b600660205260009081526040902054600160a060020a031681565b600881565b667c58508723800081565b600080821161062757600080fd5b600160a060020a03331660009081526001602052604090205482111561064c57600080fd5b5033600160a060020a0381166000908152600160205260409020546106719083610d12565b600160a060020a0382166000908152600160205260408120919091555461069e908363ffffffff610d1216565b600055600160a060020a0381167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a25050565b60035433600160a060020a039081169116146106fd57600080fd5b60055460a060020a900467ffffffffffffffff161561071b57600080fd5b600054667c58508723800090111561073257600080fd5b600580547fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff1660a060020a4267ffffffffffffffff1602179055565b600160a060020a03908116600090815260066020908152604080832054909316825260019052205490565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054808311156107f657600160a060020a03338116600090815260026020908152604080832093881683529290529081205561082d565b610806818463ffffffff610d1216565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526001602052604090205490565b600354600160a060020a031681565b60408051908101604052600381527f4843490000000000000000000000000000000000000000000000000000000000602082015281565b60006108fe610b3e565b80610917575060035433600160a060020a039081169116145b80610930575060055433600160a060020a039081169116145b156109465761093f8383610d27565b9050610554565b50600092915050565b600160a060020a039081166000908152600660205260409020541690565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120546109a5908363ffffffff610e2216565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b6003546000908190819033600160a060020a03908116911614610a3357600080fd5b600160a060020a03808716600090815260066020526040902054169150811515610ae857308685610a62610e34565b600160a060020a03938416815291909216602082015267ffffffffffffffff90911660408083019190915260609091019051809103906000f0801515610aa757600080fd5b600160a060020a038781166000908152600660205260409020805473ffffffffffffffffffffffffffffffffffffffff191691831691909117905591508190505b610af28286610d27565b9695505050505050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60055460a060020a900467ffffffffffffffff1681565b60055460009060a060020a900467ffffffffffffffff1615801590610b7d5750600554621baf8067ffffffffffffffff60a060020a9092048216011642115b80610b8b5750635b2a962042115b905090565b6000600160a060020a0383161515610ba757600080fd5b600160a060020a038416600090815260016020526040902054821115610bcc57600080fd5b600160a060020a0380851660009081526002602090815260408083203390941683529290522054821115610bff57600080fd5b600160a060020a038416600090815260016020526040902054610c28908363ffffffff610d1216565b600160a060020a038086166000908152600160205260408082209390935590851681522054610c5d908363ffffffff610e2216565b600160a060020a03808516600090815260016020908152604080832094909455878316825260028152838220339093168252919091522054610ca5908363ffffffff610d1216565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b600082821115610d2157600080fd5b50900390565b6000600160a060020a0383161515610d3e57600080fd5b600160a060020a033316600090815260016020526040902054821115610d6357600080fd5b600160a060020a033316600090815260016020526040902054610d8c908363ffffffff610d1216565b600160a060020a033381166000908152600160205260408082209390935590851681522054610dc1908363ffffffff610e2216565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b6000828201838110156105d557600080fd5b60405161036d80610e458339019056006060604052341561000f57600080fd5b60405160608061036d8339810160405280805191906020018051919060200180519150506001604060020a034281169082161161004b57600080fd5b60008054600160a060020a0319908116600160a060020a0395861617825560018054909116939094169290921760a060020a60e060020a031916740100000000000000000000000000000000000000006001604060020a039290921691909102179091556102ae9081906100bf90396000f3006060604052600436106100485763ffffffff60e060020a60003504166338af3eed811461004d57806386d1a69f1461007c578063b91d400114610091578063fc0c546a146100c1575b600080fd5b341561005857600080fd5b6100606100d4565b604051600160a060020a03909116815260200160405180910390f35b341561008757600080fd5b61008f6100e3565b005b341561009c57600080fd5b6100a46101c6565b60405167ffffffffffffffff909116815260200160405180910390f35b34156100cc57600080fd5b6100606101ee565b600154600160a060020a031681565b60015460009067ffffffffffffffff74010000000000000000000000000000000000000000909104811642909116101561011c57600080fd5b60008054600160a060020a0316906370a082319030906040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561017757600080fd5b6102c65a03f1151561018857600080fd5b5050506040518051915050600081116101a057600080fd5b6001546000546101c391600160a060020a0391821691168363ffffffff6101fd16565b50565b60015474010000000000000000000000000000000000000000900467ffffffffffffffff1681565b600054600160a060020a031681565b82600160a060020a031663a9059cbb838360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561025a57600080fd5b6102c65a03f1151561026b57600080fd5b50505060405180519050151561027d57fe5b5050505600a165627a7a72305820bff7c6f968ee57af790be061eeddd73b2d2fc839ac9fedd7adf3bd5f5a6259d60029a165627a7a72305820cffb97395e6838d7fc80b625e39b41f839eb5db8700e3157cdae5a1574e86dbb0029ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef000000000000000000000000e3c5b5550c48335134666ceb59f445e39be6138e00000000000000000000000058444d2d36a8a3fc46d374980242850453c63492",
  "constructorArguments": "000000000000000000000000e3c5b5550c48335134666ceb59f445e39be6138e00000000000000000000000058444d2d36a8a3fc46d374980242850453c63492"
}