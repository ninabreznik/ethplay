{
  "address": "0xca19515a560229e2a6695b172810a7e6703fc5a0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ArtworkToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-21\n*/\n\npragma solidity ^0.4.24;\n\n// File: contracts/tokens/ERC721.sol\n\n/**\n * @dev ERC-721 non-fungible token standard. See https://goo.gl/pc9yoS.\n */\ninterface ERC721 {\n\n  /**\n   * @dev Emits when ownership of any NFT changes by any mechanism. This event emits when NFTs are\n   * created (`from` == 0) and destroyed (`to` == 0). Exception: during contract creation, any\n   * number of NFTs may be created and assigned without emitting Transfer. At the time of any\n   * transfer, the approved address for that NFT (if any) is reset to none.\n   */\n  event Transfer(\n    address indexed _from,\n    address indexed _to,\n    uint256 indexed _tokenId\n  );\n\n  /**\n   * @dev This emits when the approved address for an NFT is changed or reaffirmed. The zero\n   * address indicates there is no approved address. When a Transfer event emits, this also\n   * indicates that the approved address for that NFT (if any) is reset to none.\n   */\n  event Approval(\n    address indexed _owner,\n    address indexed _approved,\n    uint256 indexed _tokenId\n  );\n\n  /**\n   * @dev This emits when an operator is enabled or disabled for an owner. The operator can manage\n   * all NFTs of the owner.\n   */\n  event ApprovalForAll(\n    address indexed _owner,\n    address indexed _operator,\n    bool _approved\n  );\n\n  /**\n   * @dev Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are\n   * considered invalid, and this function throws for queries about the zero address.\n   * @param _owner Address for whom to query the balance.\n   */\n  function balanceOf(\n    address _owner\n  )\n    external\n    view\n    returns (uint256);\n\n  /**\n   * @dev Returns the address of the owner of the NFT. NFTs assigned to zero address are considered\n   * invalid, and queries about them do throw.\n   * @param _tokenId The identifier for an NFT.\n   */\n  function ownerOf(\n    uint256 _tokenId\n  )\n    external\n    view\n    returns (address);\n\n  /**\n   * @dev Transfers the ownership of an NFT from one address to another address.\n   * @notice Throws unless `msg.sender` is the current owner, an authorized operator, or the\n   * approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is\n   * the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this\n   * function checks if `_to` is a smart contract (code size > 0). If so, it calls `onERC721Received`\n   * on `_to` and throws if the return value is not `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`.\n   * @param _from The current owner of the NFT.\n   * @param _to The new owner.\n   * @param _tokenId The NFT to transfer.\n   * @param _data Additional data with no specified format, sent in call to `_to`.\n   */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    external;\n\n  /**\n   * @dev Transfers the ownership of an NFT from one address to another address.\n   * @notice This works identically to the other function with an extra data parameter, except this\n   * function just sets data to \"\"\n   * @param _from The current owner of the NFT.\n   * @param _to The new owner.\n   * @param _tokenId The NFT to transfer.\n   */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    external;\n\n  /**\n   * @dev Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\n   * address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero\n   * address. Throws if `_tokenId` is not a valid NFT.\n   * @notice The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\n   * they mayb be permanently lost.\n   * @param _from The current owner of the NFT.\n   * @param _to The new owner.\n   * @param _tokenId The NFT to transfer.\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    external;\n\n  /**\n   * @dev Set or reaffirm the approved address for an NFT.\n   * @notice The zero address indicates there is no approved address. Throws unless `msg.sender` is\n   * the current NFT owner, or an authorized operator of the current owner.\n   * @param _approved The new approved NFT controller.\n   * @param _tokenId The NFT to approve.\n   */\n  function approve(\n    address _approved,\n    uint256 _tokenId\n  )\n    external;\n\n  /**\n   * @dev Enables or disables approval for a third party (\"operator\") to manage all of\n   * `msg.sender`'s assets. It also emits the ApprovalForAll event.\n   * @notice The contract MUST allow multiple operators per owner.\n   * @param _operator Address to add to the set of authorized operators.\n   * @param _approved True if the operators is approved, false to revoke approval.\n   */\n  function setApprovalForAll(\n    address _operator,\n    bool _approved\n  )\n    external;\n\n  /**\n   * @dev Get the approved address for a single NFT.\n   * @notice Throws if `_tokenId` is not a valid NFT.\n   * @param _tokenId The NFT to find the approved address for.\n   */\n  function getApproved(\n    uint256 _tokenId\n  )\n    external\n    view\n    returns (address);\n\n  /**\n   * @dev Returns true if `_operator` is an approved operator for `_owner`, false otherwise.\n   * @param _owner The address that owns the NFTs.\n   * @param _operator The address that acts on behalf of the owner.\n   */\n  function isApprovedForAll(\n    address _owner,\n    address _operator\n  )\n    external\n    view\n    returns (bool);\n\n}\n\n// File: contracts/tokens/ERC721TokenReceiver.sol\n\n/**\n * @dev ERC-721 interface for accepting safe transfers. See https://goo.gl/pc9yoS.\n */\ninterface ERC721TokenReceiver {\n\n  /**\n   * @dev Handle the receipt of a NFT. The ERC721 smart contract calls this function on the\n   * recipient after a `transfer`. This function MAY throw to revert and reject the transfer. Return\n   * of other than the magic value MUST result in the transaction being reverted.\n   * Returns `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))` unless throwing.\n   * @notice The contract address is always the message sender. A wallet/broker/auction application\n   * MUST implement the wallet interface if it will accept safe transfers.\n   * @param _operator The address which called `safeTransferFrom` function.\n   * @param _from The address which previously owned the token.\n   * @param _tokenId The NFT identifier which is being transferred.\n   * @param _data Additional data with no specified format.\n   */\n  function onERC721Received(\n    address _operator,\n    address _from,\n    uint256 _tokenId,\n    bytes _data\n  )\n    external\n    returns(bytes4);\n    \n}\n\n// File: @0xcert/ethereum-utils/contracts/math/SafeMath.sol\n\n/**\n * @dev Math operations with safety checks that throw on error. This contract is based\n * on the source code at https://goo.gl/iyQsmU.\n */\nlibrary SafeMath {\n\n  /**\n   * @dev Multiplies two numbers, throws on overflow.\n   * @param _a Factor number.\n   * @param _b Factor number.\n   */\n  function mul(\n    uint256 _a,\n    uint256 _b\n  )\n    internal\n    pure\n    returns (uint256)\n  {\n    if (_a == 0) {\n      return 0;\n    }\n    uint256 c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n   * @dev Integer division of two numbers, truncating the quotient.\n   * @param _a Dividend number.\n   * @param _b Divisor number.\n   */\n  function div(\n    uint256 _a,\n    uint256 _b\n  )\n    internal\n    pure\n    returns (uint256)\n  {\n    uint256 c = _a / _b;\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n   * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n   * @param _a Minuend number.\n   * @param _b Subtrahend number.\n   */\n  function sub(\n    uint256 _a,\n    uint256 _b\n  )\n    internal\n    pure\n    returns (uint256)\n  {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n   * @dev Adds two numbers, throws on overflow.\n   * @param _a Number.\n   * @param _b Number.\n   */\n  function add(\n    uint256 _a,\n    uint256 _b\n  )\n    internal\n    pure\n    returns (uint256)\n  {\n    uint256 c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n\n}\n\n// File: @0xcert/ethereum-utils/contracts/utils/ERC165.sol\n\n/**\n * @dev A standard for detecting smart contract interfaces. See https://goo.gl/cxQCse.\n */\ninterface ERC165 {\n\n  /**\n   * @dev Checks if the smart contract includes a specific interface.\n   * @notice This function uses less than 30,000 gas.\n   * @param _interfaceID The interface identifier, as specified in ERC-165.\n   */\n  function supportsInterface(\n    bytes4 _interfaceID\n  )\n    external\n    view\n    returns (bool);\n\n}\n\n// File: @0xcert/ethereum-utils/contracts/utils/SupportsInterface.sol\n\n/**\n * @dev Implementation of standard for detect smart contract interfaces.\n */\ncontract SupportsInterface is\n  ERC165\n{\n\n  /**\n   * @dev Mapping of supported intefraces.\n   * @notice You must not set element 0xffffffff to true.\n   */\n  mapping(bytes4 => bool) internal supportedInterfaces;\n\n  /**\n   * @dev Contract constructor.\n   */\n  constructor()\n    public\n  {\n    supportedInterfaces[0x01ffc9a7] = true; // ERC165\n  }\n\n  /**\n   * @dev Function to check which interfaces are suported by this contract.\n   * @param _interfaceID Id of the interface.\n   */\n  function supportsInterface(\n    bytes4 _interfaceID\n  )\n    external\n    view\n    returns (bool)\n  {\n    return supportedInterfaces[_interfaceID];\n  }\n\n}\n\n// File: @0xcert/ethereum-utils/contracts/utils/AddressUtils.sol\n\n/**\n * @dev Utility library of inline functions on addresses.\n */\nlibrary AddressUtils {\n\n  /**\n   * @dev Returns whether the target address is a contract.\n   * @param _addr Address to check.\n   */\n  function isContract(\n    address _addr\n  )\n    internal\n    view\n    returns (bool)\n  {\n    uint256 size;\n\n    /**\n     * XXX Currently there is no better way to check if there is a contract in an address than to\n     * check the size of the code at that address.\n     * See https://ethereum.stackexchange.com/a/14016/36603 for more details about how this works.\n     * TODO: Check this again before the Serenity release, because all addresses will be\n     * contracts then.\n     */\n    assembly { size := extcodesize(_addr) } // solium-disable-line security/no-inline-assembly\n    return size > 0;\n  }\n\n}\n\n// File: contracts/tokens/NFToken.sol\n\n/**\n * @dev Implementation of ERC-721 non-fungible token standard.\n */\ncontract NFToken is\n  ERC721,\n  SupportsInterface\n{\n  using SafeMath for uint256;\n  using AddressUtils for address;\n\n  /**\n   * @dev A mapping from NFT ID to the address that owns it.\n   */\n  mapping (uint256 => address) internal idToOwner;\n\n  /**\n   * @dev Mapping from NFT ID to approved address.\n   */\n  mapping (uint256 => address) internal idToApprovals;\n\n   /**\n   * @dev Mapping from owner address to count of his tokens.\n   */\n  mapping (address => uint256) internal ownerToNFTokenCount;\n\n  /**\n   * @dev Mapping from owner address to mapping of operator addresses.\n   */\n  mapping (address => mapping (address => bool)) internal ownerToOperators;\n\n  /**\n   * @dev Magic value of a smart contract that can recieve NFT.\n   * Equal to: bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\")).\n   */\n  bytes4 constant MAGIC_ON_ERC721_RECEIVED = 0x150b7a02;\n\n  /**\n   * @dev Emits when ownership of any NFT changes by any mechanism. This event emits when NFTs are\n   * created (`from` == 0) and destroyed (`to` == 0). Exception: during contract creation, any\n   * number of NFTs may be created and assigned without emitting Transfer. At the time of any\n   * transfer, the approved address for that NFT (if any) is reset to none.\n   * @param _from Sender of NFT (if address is zero address it indicates token creation).\n   * @param _to Receiver of NFT (if address is zero address it indicates token destruction).\n   * @param _tokenId The NFT that got transfered.\n   */\n  event Transfer(\n    address indexed _from,\n    address indexed _to,\n    uint256 indexed _tokenId\n  );\n\n  /**\n   * @dev This emits when the approved address for an NFT is changed or reaffirmed. The zero\n   * address indicates there is no approved address. When a Transfer event emits, this also\n   * indicates that the approved address for that NFT (if any) is reset to none.\n   * @param _owner Owner of NFT.\n   * @param _approved Address that we are approving.\n   * @param _tokenId NFT which we are approving.\n   */\n  event Approval(\n    address indexed _owner,\n    address indexed _approved,\n    uint256 indexed _tokenId\n  );\n\n  /**\n   * @dev This emits when an operator is enabled or disabled for an owner. The operator can manage\n   * all NFTs of the owner.\n   * @param _owner Owner of NFT.\n   * @param _operator Address to which we are setting operator rights.\n   * @param _approved Status of operator rights(true if operator rights are given and false if\n   * revoked).\n   */\n  event ApprovalForAll(\n    address indexed _owner,\n    address indexed _operator,\n    bool _approved\n  );\n\n  /**\n   * @dev Guarantees that the msg.sender is an owner or operator of the given NFT.\n   * @param _tokenId ID of the NFT to validate.\n   */\n  modifier canOperate(\n    uint256 _tokenId\n  ) {\n    address tokenOwner = idToOwner[_tokenId];\n    require(tokenOwner == msg.sender || ownerToOperators[tokenOwner][msg.sender]);\n    _;\n  }\n\n  /**\n   * @dev Guarantees that the msg.sender is allowed to transfer NFT.\n   * @param _tokenId ID of the NFT to transfer.\n   */\n  modifier canTransfer(\n    uint256 _tokenId\n  ) {\n    address tokenOwner = idToOwner[_tokenId];\n    require(\n      tokenOwner == msg.sender\n      || getApproved(_tokenId) == msg.sender\n      || ownerToOperators[tokenOwner][msg.sender]\n    );\n\n    _;\n  }\n\n  /**\n   * @dev Guarantees that _tokenId is a valid Token.\n   * @param _tokenId ID of the NFT to validate.\n   */\n  modifier validNFToken(\n    uint256 _tokenId\n  ) {\n    require(idToOwner[_tokenId] != address(0));\n    _;\n  }\n\n  /**\n   * @dev Contract constructor.\n   */\n  constructor()\n    public\n  {\n    supportedInterfaces[0x80ac58cd] = true; // ERC721\n  }\n\n  /**\n   * @dev Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are\n   * considered invalid, and this function throws for queries about the zero address.\n   * @param _owner Address for whom to query the balance.\n   */\n  function balanceOf(\n    address _owner\n  )\n    external\n    view\n    returns (uint256)\n  {\n    require(_owner != address(0));\n    return ownerToNFTokenCount[_owner];\n  }\n\n  /**\n   * @dev Returns the address of the owner of the NFT. NFTs assigned to zero address are considered\n   * invalid, and queries about them do throw.\n   * @param _tokenId The identifier for an NFT.\n   */\n  function ownerOf(\n    uint256 _tokenId\n  )\n    external\n    view\n    returns (address _owner)\n  {\n    _owner = idToOwner[_tokenId];\n    require(_owner != address(0));\n  }\n\n  /**\n   * @dev Transfers the ownership of an NFT from one address to another address.\n   * @notice Throws unless `msg.sender` is the current owner, an authorized operator, or the\n   * approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is\n   * the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this\n   * function checks if `_to` is a smart contract (code size > 0). If so, it calls `onERC721Received`\n   * on `_to` and throws if the return value is not `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`.\n   * @param _from The current owner of the NFT.\n   * @param _to The new owner.\n   * @param _tokenId The NFT to transfer.\n   * @param _data Additional data with no specified format, sent in call to `_to`.\n   */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    external\n  {\n    _safeTransferFrom(_from, _to, _tokenId, _data);\n  }\n\n  /**\n   * @dev Transfers the ownership of an NFT from one address to another address.\n   * @notice This works identically to the other function with an extra data parameter, except this\n   * function just sets data to \"\"\n   * @param _from The current owner of the NFT.\n   * @param _to The new owner.\n   * @param _tokenId The NFT to transfer.\n   */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    external\n  {\n    _safeTransferFrom(_from, _to, _tokenId, \"\");\n  }\n\n  /**\n   * @dev Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\n   * address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero\n   * address. Throws if `_tokenId` is not a valid NFT.\n   * @notice The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\n   * they maybe be permanently lost.\n   * @param _from The current owner of the NFT.\n   * @param _to The new owner.\n   * @param _tokenId The NFT to transfer.\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    external\n    canTransfer(_tokenId)\n    validNFToken(_tokenId)\n  {\n    address tokenOwner = idToOwner[_tokenId];\n    require(tokenOwner == _from);\n    require(_to != address(0));\n\n    _transfer(_to, _tokenId);\n  }\n\n  /**\n   * @dev Set or reaffirm the approved address for an NFT.\n   * @notice The zero address indicates there is no approved address. Throws unless `msg.sender` is\n   * the current NFT owner, or an authorized operator of the current owner.\n   * @param _approved Address to be approved for the given NFT ID.\n   * @param _tokenId ID of the token to be approved.\n   */\n  function approve(\n    address _approved,\n    uint256 _tokenId\n  )\n    external\n    canOperate(_tokenId)\n    validNFToken(_tokenId)\n  {\n    address tokenOwner = idToOwner[_tokenId];\n    require(_approved != tokenOwner);\n\n    idToApprovals[_tokenId] = _approved;\n    emit Approval(tokenOwner, _approved, _tokenId);\n  }\n\n  /**\n   * @dev Enables or disables approval for a third party (\"operator\") to manage all of\n   * `msg.sender`'s assets. It also emits the ApprovalForAll event.\n   * @notice This works even if sender doesn't own any tokens at the time.\n   * @param _operator Address to add to the set of authorized operators.\n   * @param _approved True if the operators is approved, false to revoke approval.\n   */\n  function setApprovalForAll(\n    address _operator,\n    bool _approved\n  )\n    external\n  {\n    require(_operator != address(0));\n    ownerToOperators[msg.sender][_operator] = _approved;\n    emit ApprovalForAll(msg.sender, _operator, _approved);\n  }\n\n  /**\n   * @dev Get the approved address for a single NFT.\n   * @notice Throws if `_tokenId` is not a valid NFT.\n   * @param _tokenId ID of the NFT to query the approval of.\n   */\n  function getApproved(\n    uint256 _tokenId\n  )\n    public\n    view\n    validNFToken(_tokenId)\n    returns (address)\n  {\n    return idToApprovals[_tokenId];\n  }\n\n  /**\n   * @dev Checks if `_operator` is an approved operator for `_owner`.\n   * @param _owner The address that owns the NFTs.\n   * @param _operator The address that acts on behalf of the owner.\n   */\n  function isApprovedForAll(\n    address _owner,\n    address _operator\n  )\n    external\n    view\n    returns (bool)\n  {\n    require(_owner != address(0));\n    require(_operator != address(0));\n    return ownerToOperators[_owner][_operator];\n  }\n\n  /**\n   * @dev Actually perform the safeTransferFrom.\n   * @param _from The current owner of the NFT.\n   * @param _to The new owner.\n   * @param _tokenId The NFT to transfer.\n   * @param _data Additional data with no specified format, sent in call to `_to`.\n   */\n  function _safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    internal\n    canTransfer(_tokenId)\n    validNFToken(_tokenId)\n  {\n    address tokenOwner = idToOwner[_tokenId];\n    require(tokenOwner == _from);\n    require(_to != address(0));\n\n    _transfer(_to, _tokenId);\n\n    if (_to.isContract()) {\n      bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data);\n      require(retval == MAGIC_ON_ERC721_RECEIVED);\n    }\n  }\n\n  /**\n   * @dev Actually preforms the transfer.\n   * @notice Does NO checks.\n   * @param _to Address of a new owner.\n   * @param _tokenId The NFT that is being transferred.\n   */\n  function _transfer(\n    address _to,\n    uint256 _tokenId\n  )\n    private\n  {\n    address from = idToOwner[_tokenId];\n    clearApproval(_tokenId);\n\n    removeNFToken(from, _tokenId);\n    addNFToken(_to, _tokenId);\n\n    emit Transfer(from, _to, _tokenId);\n  }\n   \n  /**\n   * @dev Mints a new NFT.\n   * @notice This is a private function which should be called from user-implemented external\n   * mint function. Its purpose is to show and properly initialize data structures when using this\n   * implementation.\n   * @param _to The address that will own the minted NFT.\n   * @param _tokenId of the NFT to be minted by the msg.sender.\n   */\n  function _mint(\n    address _to,\n    uint256 _tokenId\n  )\n    internal\n  {\n    require(_to != address(0));\n    require(_tokenId != 0);\n    require(idToOwner[_tokenId] == address(0));\n\n    addNFToken(_to, _tokenId);\n\n    emit Transfer(address(0), _to, _tokenId);\n  }\n\n  /**\n   * @dev Burns a NFT.\n   * @notice This is a private function which should be called from user-implemented external\n   * burn function. Its purpose is to show and properly initialize data structures when using this\n   * implementation.\n   * @param _owner Address of the NFT owner.\n   * @param _tokenId ID of the NFT to be burned.\n   */\n  function _burn(\n    address _owner,\n    uint256 _tokenId\n  )\n    validNFToken(_tokenId)\n    internal\n  {\n    clearApproval(_tokenId);\n    removeNFToken(_owner, _tokenId);\n    emit Transfer(_owner, address(0), _tokenId);\n  }\n\n  /** \n   * @dev Clears the current approval of a given NFT ID.\n   * @param _tokenId ID of the NFT to be transferred.\n   */\n  function clearApproval(\n    uint256 _tokenId\n  )\n    private\n  {\n    if(idToApprovals[_tokenId] != 0)\n    {\n      delete idToApprovals[_tokenId];\n    }\n  }\n\n  /**\n   * @dev Removes a NFT from owner.\n   * @notice Use and override this function with caution. Wrong usage can have serious consequences.\n   * @param _from Address from wich we want to remove the NFT.\n   * @param _tokenId Which NFT we want to remove.\n   */\n  function removeNFToken(\n    address _from,\n    uint256 _tokenId\n  )\n   internal\n  {\n    require(idToOwner[_tokenId] == _from);\n    assert(ownerToNFTokenCount[_from] > 0);\n    ownerToNFTokenCount[_from] = ownerToNFTokenCount[_from] - 1;\n    delete idToOwner[_tokenId];\n  }\n\n  /**\n   * @dev Assignes a new NFT to owner.\n   * @notice Use and override this function with caution. Wrong usage can have serious consequences.\n   * @param _to Address to wich we want to add the NFT.\n   * @param _tokenId Which NFT we want to add.\n   */\n  function addNFToken(\n    address _to,\n    uint256 _tokenId\n  )\n    internal\n  {\n    require(idToOwner[_tokenId] == address(0));\n\n    idToOwner[_tokenId] = _to;\n    ownerToNFTokenCount[_to] = ownerToNFTokenCount[_to].add(1);\n  }\n\n}\n\n// File: contracts/tokens/ERC721Metadata.sol\n\n/**\n * @dev Optional metadata extension for ERC-721 non-fungible token standard.\n * See https://goo.gl/pc9yoS.\n */\ninterface ERC721Metadata {\n\n  /**\n   * @dev Returns a descriptive name for a collection of NFTs in this contract.\n   */\n  function name()\n    external\n    view\n    returns (string _name);\n\n  /**\n   * @dev Returns a abbreviated name for a collection of NFTs in this contract.\n   */\n  function symbol()\n    external\n    view\n    returns (string _symbol);\n\n  /**\n   * @dev Returns a distinct Uniform Resource Identifier (URI) for a given asset. It Throws if\n   * `_tokenId` is not a valid NFT. URIs are defined in RFC3986. The URI may point to a JSON file\n   * that conforms to the \"ERC721 Metadata JSON Schema\".\n   */\n  function tokenURI(uint256 _tokenId)\n    external\n    view\n    returns (string);\n\n}\n\n// File: contracts/tokens/NFTokenMetadata.sol\n\n/**\n * @dev Optional metadata implementation for ERC-721 non-fungible token standard.\n */\ncontract NFTokenMetadata is\n  NFToken,\n  ERC721Metadata\n{\n\n  /**\n   * @dev A descriptive name for a collection of NFTs.\n   */\n  string internal nftName;\n\n  /**\n   * @dev An abbreviated name for NFTokens.\n   */\n  string internal nftSymbol;\n\n  /**\n   * @dev Mapping from NFT ID to metadata uri.\n   */\n  mapping (uint256 => string) internal idToUri;\n\n  /**\n   * @dev Contract constructor.\n   * @notice When implementing this contract don't forget to set nftName and nftSymbol.\n   */\n  constructor()\n    public\n  {\n    supportedInterfaces[0x5b5e139f] = true; // ERC721Metadata\n  }\n\n  /**\n   * @dev Burns a NFT.\n   * @notice This is a internal function which should be called from user-implemented external\n   * burn function. Its purpose is to show and properly initialize data structures when using this\n   * implementation.\n   * @param _owner Address of the NFT owner.\n   * @param _tokenId ID of the NFT to be burned.\n   */\n  function _burn(\n    address _owner,\n    uint256 _tokenId\n  )\n    internal\n  {\n    super._burn(_owner, _tokenId);\n\n    if (bytes(idToUri[_tokenId]).length != 0) {\n      delete idToUri[_tokenId];\n    }\n  }\n\n  /**\n   * @dev Set a distinct URI (RFC 3986) for a given NFT ID.\n   * @notice this is a internal function which should be called from user-implemented external\n   * function. Its purpose is to show and properly initialize data structures when using this\n   * implementation.\n   * @param _tokenId Id for which we want uri.\n   * @param _uri String representing RFC 3986 URI.\n   */\n  function _setTokenUri(\n    uint256 _tokenId,\n    string _uri\n  )\n    validNFToken(_tokenId)\n    internal\n  {\n    idToUri[_tokenId] = _uri;\n  }\n\n  /**\n   * @dev Returns a descriptive name for a collection of NFTokens.\n   */\n  function name()\n    external\n    view\n    returns (string _name)\n  {\n    _name = nftName;\n  }\n\n  /**\n   * @dev Returns an abbreviated name for NFTokens.\n   */\n  function symbol()\n    external\n    view\n    returns (string _symbol)\n  {\n    _symbol = nftSymbol;\n  }\n\n  /**\n   * @dev A distinct URI (RFC 3986) for a given NFT.\n   * @param _tokenId Id for which we want uri.\n   */\n  function tokenURI(\n    uint256 _tokenId\n  )\n    validNFToken(_tokenId)\n    external\n    view\n    returns (string)\n  {\n    return idToUri[_tokenId];\n  }\n\n}\n\n// File: @0xcert/ethereum-utils/contracts/ownership/Ownable.sol\n\n/**\n * @dev The contract has an owner address, and provides basic authorization control whitch\n * simplifies the implementation of user permissions. This contract is based on the source code\n * at https://goo.gl/n2ZGVt.\n */\ncontract Ownable {\n  address public owner;\n\n  /**\n   * @dev An event which is triggered when the owner is changed.\n   * @param previousOwner The address of the previous owner.\n   * @param newOwner The address of the new owner.\n   */\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The constructor sets the original `owner` of the contract to the sender account.\n   */\n  constructor()\n    public\n  {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(\n    address _newOwner\n  )\n    onlyOwner\n    public\n  {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n\n}\n\n// File: contracts/tokens/ArtworkToken.sol\n\ncontract ArtworkToken is\n  NFTokenMetadata,\n  Ownable\n{\n\n  constructor(\n    string _name,\n    string _symbol\n  )\n    public\n  {\n    nftName = _name;\n    nftSymbol = _symbol;\n  }\n\n  function mint(\n    address _owner,\n    uint256 _id\n  )\n    onlyOwner\n    external\n  {\n    super._mint(_owner, _id);\n  }\n\n  function burn(\n    address _owner,\n    uint256 _tokenId\n  )\n    onlyOwner\n    external\n  {\n    super._burn(_owner, _tokenId);\n  }\n\n  function setTokenUri(\n    uint256 _tokenId,\n    string _uri\n  )\n    onlyOwner\n    external\n  {\n    super._setTokenUri(_tokenId, _uri);\n  }\n\n}",
  "bytecode": "60806040523480156200001157600080fd5b50604051620013fd380380620013fd83398101604052805160208083015160008083527f67be87c3ff9960ca1e9cfac5cab2ff4747269cf9ed20c9b7306235ac35a491c5805460ff1990811660019081179092557ff7815fccbf112960a73756e185887fedcb9fc64ca0a16cc5923b7960ed78080080548216831790557f5b5e139f000000000000000000000000000000000000000000000000000000009092527f9562381dfbc2d8b8b66e765249f330164b73e329e5f01670660643571d1974df805490921617905560088054600160a060020a031916331790559183018051909392909201916200010b91600591908501906200012a565b508051620001219060069060208401906200012a565b505050620001cf565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200016d57805160ff19168380011785556200019d565b828001600101855582156200019d579182015b828111156200019d57825182559160200191906001019062000180565b50620001ab929150620001af565b5090565b620001cc91905b80821115620001ab5760008155600101620001b6565b90565b61121e80620001df6000396000f3006080604052600436106100fb5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a7811461010057806306fdde031461014b578063081812fc146101d5578063095ea7b31461020957806323b872dd1461022f57806340c10f191461025957806342842e0e1461027d57806357f7789e146102a75780636352211e146102cb57806370a08231146102e35780638da5cb5b1461031657806395d89b411461032b5780639dc29fac14610340578063a22cb46514610364578063b88d4fde1461038a578063c87b56dd146103c3578063e985e9c5146103db578063f2fde38b14610402575b600080fd5b34801561010c57600080fd5b506101377bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1960043516610423565b604080519115158252519081900360200190f35b34801561015757600080fd5b5061016061045b565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561019a578181015183820152602001610182565b50505050905090810190601f1680156101c75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101e157600080fd5b506101ed6004356104f1565b60408051600160a060020a039092168252519081900360200190f35b34801561021557600080fd5b5061022d600160a060020a0360043516602435610533565b005b34801561023b57600080fd5b5061022d600160a060020a0360043581169060243516604435610644565b34801561026557600080fd5b5061022d600160a060020a036004351660243561072b565b34801561028957600080fd5b5061022d600160a060020a0360043581169060243516604435610750565b3480156102b357600080fd5b5061022d600480359060248035908101910135610771565b3480156102d757600080fd5b506101ed6004356107c2565b3480156102ef57600080fd5b50610304600160a060020a03600435166107e6565b60408051918252519081900360200190f35b34801561032257600080fd5b506101ed610819565b34801561033757600080fd5b50610160610828565b34801561034c57600080fd5b5061022d600160a060020a0360043516602435610889565b34801561037057600080fd5b5061022d600160a060020a036004351660243515156108aa565b34801561039657600080fd5b5061022d600160a060020a036004803582169160248035909116916044359160643590810191013561092d565b3480156103cf57600080fd5b50610160600435610970565b3480156103e757600080fd5b50610137600160a060020a0360043581169060243516610a38565b34801561040e57600080fd5b5061022d600160a060020a0360043516610a93565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19811660009081526020819052604090205460ff165b919050565b60058054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104e75780601f106104bc576101008083540402835291602001916104e7565b820191906000526020600020905b8154815290600101906020018083116104ca57829003601f168201915b5050505050905090565b6000818152600160205260408120548290600160a060020a0316151561051657600080fd5b5050600090815260026020526040902054600160a060020a031690565b6000818152600160205260408120548290600160a060020a03163381148061057e5750600160a060020a038116600090815260046020908152604080832033845290915290205460ff165b151561058957600080fd5b6000848152600160205260409020548490600160a060020a031615156105ae57600080fd5b600085815260016020526040902054600160a060020a03908116945086168414156105d857600080fd5b600085815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038a811691821790925591518893918816917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050505050565b6000818152600160205260408120548290600160a060020a03163381148061067c575033610671836104f1565b600160a060020a0316145b806106aa5750600160a060020a038116600090815260046020908152604080832033845290915290205460ff165b15156106b557600080fd5b6000848152600160205260409020548490600160a060020a031615156106da57600080fd5b600085815260016020526040902054600160a060020a0390811694508716841461070357600080fd5b600160a060020a038616151561071857600080fd5b6107228686610b28565b50505050505050565b600854600160a060020a0316331461074257600080fd5b61074c8282610ba3565b5050565b61076c8383836020604051908101604052806000815250610c2c565b505050565b600854600160a060020a0316331461078857600080fd5b61076c8383838080601f01602080910402602001604051908101604052809392919081815260200183838082843750610e89945050505050565b600081815260016020526040902054600160a060020a031680151561045657600080fd5b6000600160a060020a03821615156107fd57600080fd5b50600160a060020a031660009081526003602052604090205490565b600854600160a060020a031681565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104e75780601f106104bc576101008083540402835291602001916104e7565b600854600160a060020a031633146108a057600080fd5b61074c8282610ed3565b600160a060020a03821615156108bf57600080fd5b336000818152600460209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b61096985858585858080601f01602080910402602001604051908101604052809392919081815260200183838082843750610c2c945050505050565b5050505050565b6000818152600160205260409020546060908290600160a060020a0316151561099857600080fd5b60008381526007602090815260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529091830182828015610a2b5780601f10610a0057610100808354040283529160200191610a2b565b820191906000526020600020905b815481529060010190602001808311610a0e57829003601f168201915b5050505050915050919050565b6000600160a060020a0383161515610a4f57600080fd5b600160a060020a0382161515610a6457600080fd5b50600160a060020a03918216600090815260046020908152604080832093909416825291909152205460ff1690565b600854600160a060020a03163314610aaa57600080fd5b600160a060020a0381161515610abf57600080fd5b600854604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36008805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600081815260016020526040902054600160a060020a0316610b4982610f1b565b610b538183610f65565b610b5d8383610ff4565b8183600160a060020a031682600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600160a060020a0382161515610bb857600080fd5b801515610bc457600080fd5b600081815260016020526040902054600160a060020a031615610be657600080fd5b610bf08282610ff4565b6040518190600160a060020a038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60008281526001602052604081205481908490600160a060020a031633811480610c66575033610c5b836104f1565b600160a060020a0316145b80610c945750600160a060020a038116600090815260046020908152604080832033845290915290205460ff165b1515610c9f57600080fd5b6000868152600160205260409020548690600160a060020a03161515610cc457600080fd5b600087815260016020526040902054600160a060020a03908116955089168514610ced57600080fd5b600160a060020a0388161515610d0257600080fd5b610d0c8888610b28565b610d1e88600160a060020a0316611084565b15610e7e576040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a038c81166024850152604484018b90526080606485019081528a5160848601528a51918d169463150b7a0294938f938e938e93909160a490910190602085019080838360005b83811015610db6578181015183820152602001610d9e565b50505050905090810190601f168015610de35780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015610e0557600080fd5b505af1158015610e19573d6000803e3d6000fd5b505050506040513d6020811015610e2f57600080fd5b505193507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1984167f150b7a020000000000000000000000000000000000000000000000000000000014610e7e57600080fd5b505050505050505050565b6000828152600160205260409020548290600160a060020a03161515610eae57600080fd5b60008381526007602090815260409091208351610ecd92850190611117565b50505050565b610edd828261108c565b600081815260076020526040902054600260001961010060018416150201909116041561074c57600081815260076020526040812061074c91611195565b600081815260026020526040902054600160a060020a031615610f62576000818152600260205260409020805473ffffffffffffffffffffffffffffffffffffffff191690555b50565b600081815260016020526040902054600160a060020a03838116911614610f8b57600080fd5b600160a060020a03821660009081526003602052604081205411610fab57fe5b600160a060020a03909116600090815260036020908152604080832080546000190190559282526001905220805473ffffffffffffffffffffffffffffffffffffffff19169055565b600081815260016020526040902054600160a060020a03161561101657600080fd5b6000818152600160208181526040808420805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038816908117909155845260039091529091205461106491611101565b600160a060020a0390921660009081526003602052604090209190915550565b6000903b1190565b6000818152600160205260409020548190600160a060020a031615156110b157600080fd5b6110ba82610f1b565b6110c48383610f65565b6040518290600090600160a060020a038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a4505050565b60008282018381101561111057fe5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061115857805160ff1916838001178555611185565b82800160010185558215611185579182015b8281111561118557825182559160200191906001019061116a565b506111919291506111d5565b5090565b50805460018160011615610100020316600290046000825580601f106111bb5750610f62565b601f016020900490600052602060002090810190610f6291905b6111ef91905b8082111561119157600081556001016111db565b905600a165627a7a7230582043c446d08c0bf68545d3879c333efaaf701566b437534983066118d7b3abe9a9002900000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000c417274776f726b546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054152545754000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000c417274776f726b546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054152545754000000000000000000000000000000000000000000000000000000"
}