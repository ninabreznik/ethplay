{
  "address": "0x8934561259f1cb8b302aa7e1b05ed0d0676f54e3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenLogic",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-11\n*/\n\npragma solidity ^0.4.24;\n\nlibrary SafeMath {\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\t\tif (a == 0) {\n      \t\treturn 0;\n    \t}\n\n    \tc = a * b;\n    \tassert(c / a == b);\n    \treturn c;\n  \t}\n\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n    \treturn a / b;\n\t}\n\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    \tassert(b <= a);\n    \treturn a - b;\n\t}\n\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    \tc = a + b;\n    \tassert(c >= a);\n    \treturn c;\n\t}\n\t\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ncontract Ownable {\n    address internal _owner;\n    \n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    \n    constructor() public {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n    \n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(isOwner(), \"you are not the owner!\");\n        _;\n    }\n\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n    \n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n    \n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"cannot transfer ownership to ZERO address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ninterface ITokenStore {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns(uint256);\n    function transfer(address src, address dest, uint256 amount) external;\n    function approve(address owner, address spender, uint256 amount) external;\n    function mint(address dest, uint256 amount) external;\n    function burn(address dest, uint256 amount) external;\n}\n\n/*\n    TokenLogic\n*/\ninterface ITokenLogic {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function transfer(address from, address to, uint256 value) external returns (bool);\n    function approve(address spender, uint256 value, address owner) external returns (bool);\n    function transferFrom(address from, address to, uint256 value, address spender) external returns (bool);\n    function increaseAllowance(address spender, uint256 addedValue, address owner) external returns (bool);\n    function decreaseAllowance(address spender, uint256 subtractedValue, address owner) external returns (bool);\n}\n\ncontract TokenLogic is Ownable, ITokenLogic {\n    using SafeMath for uint256;\n    \n    ITokenStore private _tokenStore;\n    address private _tokenFront;\n    \n    constructor(ITokenStore tokenStore, address tokenFront) public {\n        _tokenStore = tokenStore;\n        _tokenFront = tokenFront;\n        _whiteList[msg.sender] = true;\n    }\n    \n    // getters and setters for tokenStore and tokenFront\n    function tokenStore() public view returns (address) {\n        return _tokenStore;\n    }\n    \n    function setTokenStore(ITokenStore newTokenStore) public onlyOwner {\n        _tokenStore = newTokenStore;\n    }\n    \n    function tokenFront() public view returns (address) {\n        return _tokenFront;\n    }\n    \n    function setTokenFront(address newTokenFront) public onlyOwner {\n        _tokenFront = newTokenFront;\n    }\n    \n    modifier onlyFront() {\n        require(msg.sender == _tokenFront, \"this method MUST be called by tokenFront\");\n        _;\n    }\n    \n    modifier onlyFrontOrOwner() {\n        require((msg.sender == _tokenFront) || isOwner(), \"this method MUST be called by tokenFront or owner\");\n        _;\n    }\n    \n    mapping(address => bool) private _whiteList;\n    mapping(address => bool) private _quitLock;\n    mapping(bytes32 => bool) private _batchRecord;\n    uint256[] private _tradingOpenTime;\n\n    // transfer ownership and balance\n    function transferOwnership(address newOwner) public onlyOwner {\n        _whiteList[newOwner] = true;\n        _tokenStore.transfer(msg.sender, newOwner, _tokenStore.balanceOf(msg.sender));\n        _whiteList[msg.sender] = false;\n        super.transferOwnership(newOwner);\n    }\n    \n    // whitelist\n    function inWhiteList(address account) public view returns (bool) {\n        return _whiteList[account];\n    }\n    \n    function setWhiteList(address[] addressArr, bool[] statusArr) public onlyOwner {\n        require(addressArr.length == statusArr.length, \"The length of address array is not equal to the length of status array!\");\n        \n        for(uint256 idx = 0; idx < addressArr.length; idx++) {\n            _whiteList[addressArr[idx]] = statusArr[idx];\n        }\n    }\n    \n    // trading time\n    function inTradingTime() public view returns (bool) {\n        for(uint256 idx = 0; idx < _tradingOpenTime.length; idx = idx+2) {\n            if(now > _tradingOpenTime[idx] && now < _tradingOpenTime[idx+1]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    function getTradingTime() public view returns (uint256[]) {\n        return _tradingOpenTime;\n    }\n    \n    function setTradingTime(uint256[] timeArr) public onlyOwner {\n        require(timeArr.length.mod(2) == 0, \"the length of time arr must be even number\");\n        \n        for(uint256 idx = 0; idx < timeArr.length; idx = idx+2) {\n            require(timeArr[idx] < timeArr[idx+1], \"end time must be greater than start time\");\n        }\n        _tradingOpenTime = timeArr;\n    }\n    \n    // quit\n    function inQuitLock(address account) public view returns (bool) {\n        return _quitLock[account];\n    }\n    \n    function setQuitLock(address account) public onlyOwner {\n        require(inWhiteList(account), \"account is not in whiteList\");\n        _quitLock[account] = true;\n    }\n    \n    function removeQuitAccount(address account) public onlyOwner {\n        require(inQuitLock(account), \"the account is not in quit lock status\");\n        \n        _tokenStore.transfer(account, msg.sender, _tokenStore.balanceOf(account));\n        _whiteList[account] = false;\n        _quitLock[account] = false;\n    }\n    \n    // implement for ITokenLogic\n    function totalSupply() external view returns (uint256) {\n        return _tokenStore.totalSupply();\n    }\n    \n    function balanceOf(address account) external view returns (uint256) {\n        return _tokenStore.balanceOf(account);\n    }\n    \n    function allowance(address owner, address spender) external view returns (uint256) {\n        return _tokenStore.allowance(owner, spender);\n    }\n    \n    function transfer(address from, address to, uint256 value) external onlyFront returns (bool) {\n        require(inWhiteList(from), \"sender is not in whiteList\");\n        require(inWhiteList(to), \"receiver is not in whiteList\");\n        \n        if(!inQuitLock(from) && from != owner()) {\n            require(inTradingTime(), \"now is not trading time\");\n        }\n        \n        _tokenStore.transfer(from, to, value);\n        return true;\n    }\n    \n    function forceTransferBalance(address from, address to, uint256 value) external onlyOwner returns (bool) {\n        require(inWhiteList(to), \"receiver is not in whiteList\");\n        _tokenStore.transfer(from, to, value);\n        return true;\n    }\n    \n    function approve(address spender, uint256 value, address owner) external onlyFront returns (bool) {\n        _tokenStore.approve(owner, spender, value);\n        return true;\n    }\n    \n    function transferFrom(address from, address to, uint256 value, address spender) external onlyFront returns (bool) {\n        require(inWhiteList(from), \"sender is not in whiteList\");\n        require(inWhiteList(to), \"receiver is not in whiteList\");\n        \n        if(!inQuitLock(from)) {\n            require(inTradingTime(), \"now is not trading time\");\n        }\n        \n        uint256 newAllowance = _tokenStore.allowance(from, spender).sub(value);\n        _tokenStore.approve(from, spender, newAllowance);\n        _tokenStore.transfer(from, to, value);\n        return true;\n    }\n    \n    function increaseAllowance(address spender, uint256 addedValue, address owner) external onlyFront returns (bool) {\n        uint256 newAllowance = _tokenStore.allowance(owner, spender).add(addedValue);\n        _tokenStore.approve(owner, spender, newAllowance);\n        \n        return true;\n    }\n    \n    function decreaseAllowance(address spender, uint256 subtractedValue, address owner) external onlyFront returns (bool) {\n        uint256 newAllowance = _tokenStore.allowance(owner, spender).sub(subtractedValue);\n        _tokenStore.approve(owner, spender, newAllowance);\n        \n        return true;\n    }\n    \n    // batch transfer\n    function batchTransfer(bytes32 batch, address[] addressArr, uint256[] valueArr) public onlyOwner {\n        require(addressArr.length == valueArr.length, \"The length of address array is not equal to the length of value array!\");\n        require(_batchRecord[batch] == false, \"This batch number has already been used!\");\n        \n        for(uint256 idx = 0; idx < addressArr.length; idx++) {\n            require(inWhiteList(addressArr[idx]), \"receiver is not in whiteList\");\n            \n            _tokenStore.transfer(msg.sender, addressArr[idx], valueArr[idx]);\n        }\n        \n        _batchRecord[batch] = true;\n    }\n    \n    // replace account\n    function replaceAccount(address oldAccount, address newAccount) public onlyOwner {\n        require(inWhiteList(oldAccount), \"old account is not in whiteList\");\n        _whiteList[newAccount] = true;\n        _tokenStore.transfer(oldAccount, newAccount, _tokenStore.balanceOf(oldAccount));\n        _whiteList[oldAccount] = false;\n    }\n}\n\n/*\n    TokenFront\n*/\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address who) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function transfer(address to, uint256 value) external returns (bool);\n    function approve(address spender, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}",
  "bytecode": "608060405234801561001057600080fd5b506040516040806140248339810180604052810190808051906020019092919080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a381600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050613e40806101e46000396000f300608060405260043610610154576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063063e1b78146101595780631271f09a146101bf57806318160ddd146102445780632b6e293f1461026f5780635fc9309c146102b25780636193063014610357578063659a7486146103ae57806369e0e346146103dd57806370a0823114610438578063796f62811461048f578063852dc589146104e657806387407993146105295780638da5cb5b146105845780638f32d59b146105db5780638fea1e4d1461060a578063a7ecce5f1461068f578063ad07220f146106d2578063beabacc814610757578063cc539eb1146107dc578063cc5fe3ab1461083f578063cdfdb7d6146108e8578063d55866471461096d578063dd62ed3e14610a24578063ddecc5d914610a9b578063e1e4d73714610b07578063f2fde38b14610b4a575b600080fd5b34801561016557600080fd5b506101bd60048036038101908080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050610b8d565b005b3480156101cb57600080fd5b5061022a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dbf565b604051808215151515815260200191505060405180910390f35b34801561025057600080fd5b50610259610fc8565b6040518082815260200191505060405180910390f35b34801561027b57600080fd5b506102b0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611090565b005b3480156102be57600080fd5b5061033d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611150565b604051808215151515815260200191505060405180910390f35b34801561036357600080fd5b5061036c611733565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103ba57600080fd5b506103c361175d565b604051808215151515815260200191505060405180910390f35b3480156103e957600080fd5b5061041e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506117d7565b604051808215151515815260200191505060405180910390f35b34801561044457600080fd5b50610479600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061182d565b6040518082815260200191505060405180910390f35b34801561049b57600080fd5b506104a461192e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104f257600080fd5b50610527600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611958565b005b34801561053557600080fd5b5061056a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611aac565b604051808215151515815260200191505060405180910390f35b34801561059057600080fd5b50610599611b02565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105e757600080fd5b506105f0611b2b565b604051808215151515815260200191505060405180910390f35b34801561061657600080fd5b50610675600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b82565b604051808215151515815260200191505060405180910390f35b34801561069b57600080fd5b506106d0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ecd565b005b3480156106de57600080fd5b5061073d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506122a7565b604051808215151515815260200191505060405180910390f35b34801561076357600080fd5b506107c2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506124be565b604051808215151515815260200191505060405180910390f35b3480156107e857600080fd5b5061083d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061288c565b005b34801561084b57600080fd5b506108e66004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050612c41565b005b3480156108f457600080fd5b50610953600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612e29565b604051808215151515815260200191505060405180910390f35b34801561097957600080fd5b50610a2260048036038101908080356000191690602001909291908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050613174565b005b348015610a3057600080fd5b50610a85600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506135a9565b6040518082815260200191505060405180910390f35b348015610aa757600080fd5b50610ab06136df565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610af3578082015181840152602081019050610ad8565b505050509050019250505060405180910390f35b348015610b1357600080fd5b50610b48600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613737565b005b348015610b5657600080fd5b50610b8b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506137f7565b005b6000610b97611b2b565b1515610c0b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f796f7520617265206e6f7420746865206f776e6572210000000000000000000081525060200191505060405180910390fd5b6000610c2260028451613b3790919063ffffffff16565b141515610cbd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001807f746865206c656e677468206f662074696d6520617272206d757374206265206581526020017f76656e206e756d6265720000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600090505b8151811015610da4578160018201815181101515610cdc57fe5b906020019060200201518282815181101515610cf457fe5b90602001906020020151101515610d99576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f656e642074696d65206d7573742062652067726561746572207468616e20737481526020017f6172742074696d6500000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600281019050610cc2565b8160069080519060200190610dba929190613da2565b505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610eac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f74686973206d6574686f64204d5553542062652063616c6c656420627920746f81526020017f6b656e46726f6e7400000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e1f21c678386866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b158015610fa557600080fd5b505af1158015610fb9573d6000803e3d6000fd5b50505050600190509392505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561105057600080fd5b505af1158015611064573d6000803e3d6000fd5b505050506040513d602081101561107a57600080fd5b8101908080519060200190929190505050905090565b611098611b2b565b151561110c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f796f7520617265206e6f7420746865206f776e6572210000000000000000000081525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561123e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f74686973206d6574686f64204d5553542062652063616c6c656420627920746f81526020017f6b656e46726f6e7400000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b611247866117d7565b15156112bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f73656e646572206973206e6f7420696e2077686974654c69737400000000000081525060200191505060405180910390fd5b6112c4856117d7565b1515611338576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f7265636569766572206973206e6f7420696e2077686974654c6973740000000081525060200191505060405180910390fd5b61134186611aac565b15156113c45761134f61175d565b15156113c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f6e6f77206973206e6f742074726164696e672074696d6500000000000000000081525060200191505060405180910390fd5b5b61150284600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e89876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b1580156114b957600080fd5b505af11580156114cd573d6000803e3d6000fd5b505050506040513d60208110156114e357600080fd5b8101908080519060200190929190505050613b5c90919063ffffffff16565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e1f21c678785846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b1580156115fd57600080fd5b505af1158015611611573d6000803e3d6000fd5b50505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663beabacc88787876040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561170e57600080fd5b505af1158015611722573d6000803e3d6000fd5b505050506001915050949350505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080600090505b6006805490508110156117ce5760068181548110151561178157fe5b9060005260206000200154421180156117b557506006600182018154811015156117a757fe5b906000526020600020015442105b156117c357600191506117d3565b600281019050611765565b600091505b5090565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156118ec57600080fd5b505af1158015611900573d6000803e3d6000fd5b505050506040513d602081101561191657600080fd5b81019080805190602001909291905050509050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611960611b2b565b15156119d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f796f7520617265206e6f7420746865206f776e6572210000000000000000000081525060200191505060405180910390fd5b6119dd816117d7565b1515611a51576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f6163636f756e74206973206e6f7420696e2077686974654c697374000000000081525060200191505060405180910390fd5b6001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c70576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f74686973206d6574686f64204d5553542062652063616c6c656420627920746f81526020017f6b656e46726f6e7400000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b611dae84600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e86896040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b158015611d6557600080fd5b505af1158015611d79573d6000803e3d6000fd5b505050506040513d6020811015611d8f57600080fd5b8101908080519060200190929190505050613b5c90919063ffffffff16565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e1f21c678487846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b158015611ea957600080fd5b505af1158015611ebd573d6000803e3d6000fd5b5050505060019150509392505050565b611ed5611b2b565b1515611f49576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f796f7520617265206e6f7420746865206f776e6572210000000000000000000081525060200191505060405180910390fd5b611f5281611aac565b1515611fec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f746865206163636f756e74206973206e6f7420696e2071756974206c6f636b2081526020017f737461747573000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663beabacc88233600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156120e957600080fd5b505af11580156120fd573d6000803e3d6000fd5b505050506040513d602081101561211357600080fd5b81019080805190602001909291905050506040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b1580156121dc57600080fd5b505af11580156121f0573d6000803e3d6000fd5b505050506000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60006122b1611b2b565b1515612325576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f796f7520617265206e6f7420746865206f776e6572210000000000000000000081525060200191505060405180910390fd5b61232e836117d7565b15156123a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f7265636569766572206973206e6f7420696e2077686974654c6973740000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663beabacc88585856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561249b57600080fd5b505af11580156124af573d6000803e3d6000fd5b50505050600190509392505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156125ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f74686973206d6574686f64204d5553542062652063616c6c656420627920746f81526020017f6b656e46726f6e7400000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6125b4846117d7565b1515612628576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f73656e646572206973206e6f7420696e2077686974654c69737400000000000081525060200191505060405180910390fd5b612631836117d7565b15156126a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f7265636569766572206973206e6f7420696e2077686974654c6973740000000081525060200191505060405180910390fd5b6126ae84611aac565b1580156126ee57506126be611b02565b73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614155b15612770576126fb61175d565b151561276f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f6e6f77206973206e6f742074726164696e672074696d6500000000000000000081525060200191505060405180910390fd5b5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663beabacc88585856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561286957600080fd5b505af115801561287d573d6000803e3d6000fd5b50505050600190509392505050565b612894611b2b565b1515612908576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f796f7520617265206e6f7420746865206f776e6572210000000000000000000081525060200191505060405180910390fd5b612911826117d7565b1515612985576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f6f6c64206163636f756e74206973206e6f7420696e2077686974654c6973740081525060200191505060405180910390fd5b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663beabacc88383600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015612ada57600080fd5b505af1158015612aee573d6000803e3d6000fd5b505050506040513d6020811015612b0457600080fd5b81019080805190602001909291905050506040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b158015612bcd57600080fd5b505af1158015612be1573d6000803e3d6000fd5b505050506000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6000612c4b611b2b565b1515612cbf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f796f7520617265206e6f7420746865206f776e6572210000000000000000000081525060200191505060405180910390fd5b81518351141515612d84576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260478152602001807f546865206c656e677468206f662061646472657373206172726179206973206e81526020017f6f7420657175616c20746f20746865206c656e677468206f662073746174757381526020017f206172726179210000000000000000000000000000000000000000000000000081525060600191505060405180910390fd5b600090505b8251811015612e24578181815181101515612da057fe5b90602001906020020151600360008584815181101515612dbc57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080600101915050612d89565b505050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612f17576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f74686973206d6574686f64204d5553542062652063616c6c656420627920746f81526020017f6b656e46726f6e7400000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b61305584600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e86896040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b15801561300c57600080fd5b505af1158015613020573d6000803e3d6000fd5b505050506040513d602081101561303657600080fd5b8101908080519060200190929190505050613b7590919063ffffffff16565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e1f21c678487846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561315057600080fd5b505af1158015613164573d6000803e3d6000fd5b5050505060019150509392505050565b600061317e611b2b565b15156131f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f796f7520617265206e6f7420746865206f776e6572210000000000000000000081525060200191505060405180910390fd5b815183511415156132b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260468152602001807f546865206c656e677468206f662061646472657373206172726179206973206e81526020017f6f7420657175616c20746f20746865206c656e677468206f662076616c75652081526020017f617272617921000000000000000000000000000000000000000000000000000081525060600191505060405180910390fd5b6000151560056000866000191660001916815260200190815260200160002060009054906101000a900460ff161515141515613381576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f54686973206261746368206e756d6265722068617320616c726561647920626581526020017f656e20757365642100000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600090505b825181101561356f576133af83828151811015156133a057fe5b906020019060200201516117d7565b1515613423576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f7265636569766572206973206e6f7420696e2077686974654c6973740000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663beabacc833858481518110151561347057fe5b90602001906020020151858581518110151561348857fe5b906020019060200201516040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561354a57600080fd5b505af115801561355e573d6000803e3d6000fd5b505050508080600101915050613386565b600160056000866000191660001916815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e84846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b15801561369c57600080fd5b505af11580156136b0573d6000803e3d6000fd5b505050506040513d60208110156136c657600080fd5b8101908080519060200190929190505050905092915050565b6060600680548060200260200160405190810160405280929190818152602001828054801561372d57602002820191906000526020600020905b815481526020019060010190808311613719575b5050505050905090565b61373f611b2b565b15156137b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f796f7520617265206e6f7420746865206f776e6572210000000000000000000081525060200191505060405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6137ff611b2b565b1515613873576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f796f7520617265206e6f7420746865206f776e6572210000000000000000000081525060200191505060405180910390fd5b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663beabacc83383600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156139c857600080fd5b505af11580156139dc573d6000803e3d6000fd5b505050506040513d60208110156139f257600080fd5b81019080805190602001909291905050506040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b158015613abb57600080fd5b505af1158015613acf573d6000803e3d6000fd5b505050506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550613b3481613b91565b50565b6000808214151515613b4857600080fd5b8183811515613b5357fe5b06905092915050565b6000828211151515613b6a57fe5b818303905092915050565b60008183019050828110151515613b8857fe5b80905092915050565b613b99611b2b565b1515613c0d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f796f7520617265206e6f7420746865206f776e6572210000000000000000000081525060200191505060405180910390fd5b613c1681613c19565b50565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515613ce4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001807f63616e6e6f74207472616e73666572206f776e65727368697020746f205a455281526020017f4f2061646472657373000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b828054828255906000526020600020908101928215613dde579160200282015b82811115613ddd578251825591602001919060010190613dc2565b5b509050613deb9190613def565b5090565b613e1191905b80821115613e0d576000816000905550600101613df5565b5090565b905600a165627a7a72305820f035742afecd1c2dffdb166bb76183b5f205cf10e16863dabd907734a9fab1cb002900000000000000000000000004eb7effeb62f66ce7bf106eff3168c6ef683921000000000000000000000000aa624cb73977c06a4a850f57b36208bc298f968c",
  "constructorArguments": "00000000000000000000000004eb7effeb62f66ce7bf106eff3168c6ef683921000000000000000000000000aa624cb73977c06a4a850f57b36208bc298f968c"
}