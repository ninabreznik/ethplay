{
  "address": "0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ArbitrageMainnet",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-02\n*/\n\n// File: contracts/IUniswapExchange.sol\n\npragma solidity ^0.5.0;\n\n// Solidity Interface\n\ncontract IUniswapExchange {\n    // Address of ERC20 token sold on this exchange\n    function tokenAddress() external view returns (address token);\n    // Address of Uniswap Factory\n    function factoryAddress() external view returns (address factory);\n    // Provide Liquidity\n    function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) external payable returns (uint256);\n    function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) external returns (uint256, uint256);\n    // Get Prices\n    function getEthToTokenInputPrice(uint256 eth_sold) external view returns (uint256 tokens_bought);\n    function getEthToTokenOutputPrice(uint256 tokens_bought) external view returns (uint256 eth_sold);\n    function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256 eth_bought);\n    function getTokenToEthOutputPrice(uint256 eth_bought) external view returns (uint256 tokens_sold);\n    // Trade ETH to ERC20\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256  tokens_bought);\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256  tokens_bought);\n    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external payable returns (uint256  eth_sold);\n    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external payable returns (uint256  eth_sold);\n    // Trade ERC20 to ETH\n    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external returns (uint256  eth_bought);\n    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_tokens, uint256 deadline, address recipient) external returns (uint256  eth_bought);\n    function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) external returns (uint256  tokens_sold);\n    function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external returns (uint256  tokens_sold);\n    // Trade ERC20 to ERC20\n    function tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external returns (uint256  tokens_bought);\n    function tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_bought);\n    function tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) external returns (uint256  tokens_sold);\n    function tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_sold);\n    // Trade ERC20 to Custom Pool\n    function tokenToExchangeSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address exchange_addr) external returns (uint256  tokens_bought);\n    function tokenToExchangeTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_bought);\n    function tokenToExchangeSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address exchange_addr) external returns (uint256  tokens_sold);\n    function tokenToExchangeTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_sold);\n    // ERC20 comaptibility for liquidity tokens\n    bytes32 public name;\n    bytes32 public symbol;\n    uint256 public decimals;\n    function transfer(address _to, uint256 _value) external returns (bool);\n    function transferFrom(address _from, address _to, uint256 value) external returns (bool);\n    function approve(address _spender, uint256 _value) external returns (bool);\n    function allowance(address _owner, address _spender) external view returns (uint256);\n    function balanceOf(address _owner) external view returns (uint256);\n    function totalSupply() public view returns (uint256);\n    // Never use\n    function setup(address token_addr) external;\n}\n\n// File: contracts/IUniswapFactory.sol\n\npragma solidity ^0.5.0;\n\n// Solidity Interface\n\ncontract IUniswapFactory {\n    // Public Variables\n    address public exchangeTemplate;\n    uint256 public tokenCount;\n    // Create Exchange\n    function createExchange(address token) external returns (address exchange);\n    // Get Exchange and Token Info\n    function getExchange(address token) external view returns (address exchange);\n    function getToken(address exchange) external view returns (address token);\n    function getTokenWithId(uint256 tokenId) external view returns (address token);\n    // Never use\n    function initializeFactory(address template) external;\n}\n\n// File: contracts/IDutchExchange.sol\n\npragma solidity ^0.5.0;\n\ncontract IDutchExchange {\n\n\n    mapping(address => mapping(address => uint)) public balances;\n\n    // Token => Token => auctionIndex => amount\n    mapping(address => mapping(address => mapping(uint => uint))) public extraTokens;\n\n    // Token => Token =>  auctionIndex => user => amount\n    mapping(address => mapping(address => mapping(uint => mapping(address => uint)))) public sellerBalances;\n    mapping(address => mapping(address => mapping(uint => mapping(address => uint)))) public buyerBalances;\n    mapping(address => mapping(address => mapping(uint => mapping(address => uint)))) public claimedAmounts;\n\n    \n    function ethToken() public view returns(address);\n    function claimBuyerFunds(address, address, address, uint) public returns(uint, uint);\n    function deposit(address tokenAddress, uint amount) public returns (uint);\n    function withdraw(address tokenAddress, uint amount) public returns (uint);\n    function getAuctionIndex(address token1, address token2) public returns(uint256);\n    function postBuyOrder(address token1, address token2, uint256 auctionIndex, uint256 amount) public returns(uint256);\n    function postSellOrder(address token1, address token2, uint256 auctionIndex, uint256 tokensBought) public returns(uint256, uint256);\n    function getCurrentAuctionPrice(address token1, address token2, uint256 auctionIndex) public view returns(uint256, uint256);\n    function claimAndWithdrawTokensFromSeveralAuctionsAsBuyer(address[] calldata, address[] calldata, uint[] calldata) external view returns(uint[] memory, uint);\n}\n\n// File: contracts/ITokenMinimal.sol\n\npragma solidity ^0.5.0;\n\ncontract ITokenMinimal {\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n    function balanceOf(address tokenOwner) public view returns (uint balance);\n    function deposit() public payable;\n    function withdraw(uint value) public;\n}\n\n// File: openzeppelin-solidity/contracts/utils/Address.sol\n\npragma solidity ^0.5.2;\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n    /**\n     * Returns whether the target address is a contract\n     * @dev This function will return false if invoked during the constructor of a contract,\n     * as the code is not actually created until after the constructor finishes.\n     * @param account address of the account to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/SafeERC20.sol\n\n/*\n\nSafeERC20 by daostack.\nThe code is based on a fix by SECBIT Team.\n\nUSE WITH CAUTION & NO WARRANTY\n\nREFERENCE & RELATED READING\n- https://github.com/ethereum/solidity/issues/4116\n- https://medium.com/@chris_77367/explaining-unexpected-reverts-starting-with-solidity-0-4-22-3ada6e82308c\n- https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\n- https://gist.github.com/BrendanChou/88a2eeb80947ff00bcf58ffdafeaeb61\n\n*/\npragma solidity ^0.5.0;\n\n\n\nlibrary SafeERC20 {\n    using Address for address;\n\n    bytes4 constant private TRANSFER_SELECTOR = bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\n    bytes4 constant private TRANSFERFROM_SELECTOR = bytes4(keccak256(bytes(\"transferFrom(address,address,uint256)\")));\n    bytes4 constant private APPROVE_SELECTOR = bytes4(keccak256(bytes(\"approve(address,uint256)\")));\n\n    function safeTransfer(address _erc20Addr, address _to, uint256 _value) internal {\n\n        // Must be a contract addr first!\n        require(_erc20Addr.isContract(), \"ERC20 is not a contract\");\n\n        (bool success, bytes memory returnValue) =\n        // solhint-disable-next-line avoid-low-level-calls\n        _erc20Addr.call(abi.encodeWithSelector(TRANSFER_SELECTOR, _to, _value));\n        // call return false when something wrong\n        require(success, \"safeTransfer must succeed\");\n        //check return value\n        require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)), \"safeTransfer must return nothing or true\");\n    }\n\n    function safeTransferFrom(address _erc20Addr, address _from, address _to, uint256 _value) internal {\n\n        // Must be a contract addr first!\n        require(_erc20Addr.isContract(), \"ERC20 is not a contract\");\n\n        (bool success, bytes memory returnValue) =\n        // solhint-disable-next-line avoid-low-level-calls\n        _erc20Addr.call(abi.encodeWithSelector(TRANSFERFROM_SELECTOR, _from, _to, _value));\n        // call return false when something wrong\n        require(success, \"safeTransferFrom must succeed\");\n        //check return value\n        require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)), \"safeTransferFrom must return nothing or true\");\n    }\n\n    function safeApprove(address _erc20Addr, address _spender, uint256 _value) internal {\n\n        // Must be a contract addr first!\n        require(_erc20Addr.isContract(), \"ERC20 is not a contract\");\n\n        // vvv\n        // This section has been commented out because it is not a necesarry safeguard\n        // vvv\n        /*\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero.\n        require((_value == 0) || (IERC20(_erc20Addr).allowance(address(this), _spender) == 0), \"safeApprove should only be called when setting an initial allowance, or when resetting it to zero.\");\n        */\n\n        (bool success, bytes memory returnValue) =\n        // solhint-disable-next-line avoid-low-level-calls\n        _erc20Addr.call(abi.encodeWithSelector(APPROVE_SELECTOR, _spender, _value));\n        // call return false when something wrong\n        require(success, \"safeApprove must succeed\");\n        //check return value\n        require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)),  \"safeApprove must return nothing or true\");\n    }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     * @notice Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: contracts/Arbitrage.sol\n\npragma solidity ^0.5.0;\n\n\n\n\n\n\n\n/// @title Uniswap Arbitrage - Executes arbitrage transactions between Uniswap and DutchX.\n/// @author Billy Rennekamp - <[email protected]>\ncontract Arbitrage is Ownable {\n\n    uint constant max = uint(-1);\n\n    IUniswapFactory public uniFactory;\n    IDutchExchange public dutchXProxy;\n\n    event Profit(uint profit, bool wasDutchOpportunity);\n\n    /// @dev Payable fallback function has nothing inside so it won't run out of gas with gas limited transfers\n    function() external payable {}\n\n    /// @dev Only owner can deposit contract Ether into the DutchX as WETH\n    function depositEther() public payable onlyOwner {\n\n        require(address(this).balance > 0, \"Balance must be greater than 0 to deposit\");\n        uint balance = address(this).balance;\n\n        // // Deposit balance to WETH\n        address weth = dutchXProxy.ethToken();\n        ITokenMinimal(weth).deposit.value(balance)();\n\n        uint wethBalance = ITokenMinimal(weth).balanceOf(address(this));\n        uint allowance = ITokenMinimal(weth).allowance(address(this), address(dutchXProxy));\n\n        if (allowance < wethBalance) {\n            // Approve max amount of WETH to be transferred by dutchX\n            // Keeping it max will have same or similar costs to making it exact over and over again\n            SafeERC20.safeApprove(weth, address(dutchXProxy), max);\n        }\n\n        // Deposit new amount on dutchX, confirm there's at least the amount we just deposited\n        uint newBalance = dutchXProxy.deposit(weth, balance);\n        require(newBalance >= balance, \"Deposit WETH to DutchX didn't work.\");\n    }\n\n    /// @dev Only owner can withdraw WETH from DutchX, convert to Ether and transfer to owner\n    /// @param amount The amount of Ether to withdraw\n    function withdrawEtherThenTransfer(uint amount) external onlyOwner {\n        _withdrawEther(amount);\n        address(uint160(owner())).transfer(amount);\n    }\n\n    /// @dev Only owner can transfer any Ether currently in the contract to the owner address.\n    /// @param amount The amount of Ether to withdraw\n    function transferEther(uint amount) external onlyOwner {\n        // If amount is zero, deposit the entire contract balance.\n        address(uint160(owner())).transfer(amount == 0 ? address(this).balance : amount);\n    }\n\n    /// @dev Only owner function to withdraw WETH from the DutchX, convert it to Ether and keep it in contract\n    /// @param amount The amount of WETH to withdraw and convert.\n    function withdrawEther(uint amount) external onlyOwner {\n        _withdrawEther(amount);\n    }\n\n    /// @dev Internal function to withdraw WETH from the DutchX, convert it to Ether and keep it in contract\n    /// @param amount The amount of WETH to withdraw and convert.\n    function _withdrawEther(uint amount) internal {\n        address weth = dutchXProxy.ethToken();\n        dutchXProxy.withdraw(weth, amount);\n        ITokenMinimal(weth).withdraw(amount);\n    }\n\n    /// @dev Only owner can withdraw a token from the DutchX\n    /// @param token The token address that is being withdrawn.\n    /// @param amount The amount of token to withdraw. Can be larger than available balance and maximum will be withdrawn.\n    /// @return Returns the amount actually withdrawn from the DutchX\n    function withdrawToken(address token, uint amount) external onlyOwner returns (uint) {\n        return dutchXProxy.withdraw(token, amount);\n    }\n\n    /// @dev Only owner can transfer tokens to the owner that belong to this contract\n    /// @param token The token address that is being transferred.\n    /// @param amount The amount of token to transfer.\n    function transferToken(address token, uint amount) external onlyOwner {\n        SafeERC20.safeTransfer(token, owner(), amount);\n    }\n\n    /// @dev Only owner can approve tokens to be used by the DutchX\n    /// @param token The token address to be approved for use\n    /// @param allowance The amount of tokens that should be approved\n    function approveToken(address token, uint allowance) external onlyOwner {\n        SafeERC20.safeApprove(token, address(dutchXProxy), allowance);\n    }\n\n    /// @dev Only owner can deposit token to the DutchX\n    /// @param token The token address that is being deposited.\n    /// @param amount The amount of token to deposit.\n    function depositToken(address token, uint amount) external onlyOwner {\n        _depositToken(token, amount);\n    }\n\n    /// @dev Internal function to deposit token to the DutchX\n    /// @param token The token address that is being deposited.\n    /// @param amount The amount of token to deposit.\n    function _depositToken(address token, uint amount) internal {\n\n        uint allowance = ITokenMinimal(token).allowance(address(this), address(dutchXProxy));\n        if (allowance < amount) {\n            SafeERC20.safeApprove(token, address(dutchXProxy), max);\n        }\n\n        // Confirm that the balance of the token on the DutchX is at least how much was deposited\n        uint newBalance = dutchXProxy.deposit(token, amount);\n        require(newBalance >= amount, \"deposit didn't work\");\n    }\n\n    /// @dev Executes a trade opportunity on dutchX. Assumes that there is a balance of WETH already on the dutchX\n    /// @param arbToken Address of the token that should be arbitraged.\n    /// @param amount Amount of Ether to use in arbitrage.\n    /// @return Returns if transaction can be executed.\n    function dutchOpportunity(address arbToken, uint256 amount) external onlyOwner {\n\n        address etherToken = dutchXProxy.ethToken();\n\n        // The order of parameters for getAuctionIndex don't matter\n        uint256 dutchAuctionIndex = dutchXProxy.getAuctionIndex(arbToken, etherToken);\n\n        // postBuyOrder(sellToken, buyToken, amount)\n        // results in a decrease of the amount the user owns of the second token\n        // which means the buyToken is what the buyer wants to get rid of.\n        // \"The buy token is what the buyer provides, the seller token is what the seller provides.\"\n        dutchXProxy.postBuyOrder(arbToken, etherToken, dutchAuctionIndex, amount);\n\n        (uint tokensBought, ) = dutchXProxy.claimBuyerFunds(arbToken, etherToken, address(this), dutchAuctionIndex);\n        dutchXProxy.withdraw(arbToken, tokensBought);\n\n        address uniswapExchange = uniFactory.getExchange(arbToken);\n\n        uint allowance = ITokenMinimal(arbToken).allowance(address(this), address(uniswapExchange));\n        if (allowance < tokensBought) {\n            // Approve Uniswap to transfer arbToken on contract's behalf\n            // Keeping it max will have same or similar costs to making it exact over and over again\n            SafeERC20.safeApprove(arbToken, address(uniswapExchange), max);\n        }\n\n        // tokenToEthSwapInput(inputToken, minimumReturn, timeToLive)\n        // minimumReturn is enough to make a profit (excluding gas)\n        // timeToLive is now because transaction is atomic\n        uint256 etherReturned = IUniswapExchange(uniswapExchange).tokenToEthSwapInput(tokensBought, 1, block.timestamp);\n\n        // gas costs were excluded because worse case scenario the tx fails and gas costs were spent up to here anyway\n        // best worst case scenario the profit from the trade alleviates part of the gas costs even if still no total profit\n        require(etherReturned >= amount, \"no profit\");\n        emit Profit(etherReturned, true);\n\n        // Ether is deposited as WETH\n        depositEther();\n    }\n\n    /// @dev Executes a trade opportunity on uniswap.\n    /// @param arbToken Address of the token that should be arbitraged.\n    /// @param amount Amount of Ether to use in arbitrage.\n    /// @return Returns if transaction can be executed.\n    function uniswapOpportunity(address arbToken, uint256 amount) external onlyOwner {\n\n        // WETH must be converted to Eth for Uniswap trade\n        // (Uniswap allows ERC20:ERC20 but most liquidity is on ETH:ERC20 markets)\n        _withdrawEther(amount);\n        require(address(this).balance >= amount, \"buying from uniswap takes real Ether\");\n\n        // ethToTokenSwapInput(minTokens, deadline)\n        // minTokens is 1 because it will revert without a profit regardless\n        // deadline is now since trade is atomic\n        // solium-disable-next-line security/no-block-members\n        uint256 tokensBought = IUniswapExchange(uniFactory.getExchange(arbToken)).ethToTokenSwapInput.value(amount)(1, block.timestamp);\n\n        // tokens need to be approved for the dutchX before they are deposited\n        _depositToken(arbToken, tokensBought);\n\n        address etherToken = dutchXProxy.ethToken();\n\n        // The order of parameters for getAuctionIndex don't matter\n        uint256 dutchAuctionIndex = dutchXProxy.getAuctionIndex(arbToken, etherToken);\n\n        // spend max amount of tokens currently on the dutch x (might be combined from previous remainders)\n        // max is automatically reduced to maximum available tokens because there may be\n        // token remainders from previous auctions which closed after previous arbitrage opportunities\n        dutchXProxy.postBuyOrder(etherToken, arbToken, dutchAuctionIndex, max);\n        // solium-disable-next-line no-unused-vars\n        (uint etherReturned, ) = dutchXProxy.claimBuyerFunds(etherToken, arbToken, address(this), dutchAuctionIndex);\n\n        // gas costs were excluded because worse case scenario the tx fails and gas costs were spent up to here anyway\n        // best worst case scenario the profit from the trade alleviates part of the gas costs even if still no total profit\n        require(etherReturned >= amount, \"no profit\");\n        emit Profit(etherReturned, false);\n        // Ether returned is already in dutchX balance where Ether is assumed to be stored when not being used.\n    }\n\n}\n\n// File: contracts/ArbitrageMainnet.sol\n\npragma solidity ^0.5.0;\n\n/// @title Uniswap Arbitrage Module - Executes arbitrage transactions between Uniswap and DutchX.\n/// @author Billy Rennekamp - <[email protected]>\ncontract ArbitrageMainnet is Arbitrage {\n    constructor() public {\n        uniFactory = IUniswapFactory(0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95);\n        dutchXProxy = IDutchExchange(0xb9812E2fA995EC53B5b6DF34d21f9304762C5497);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060008054600160a060020a0319163317808255604051600160a060020a039190911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a360018054600160a060020a031990811673c0a47dfe034b400b47bdad5fecda2621de6c4d95179091556002805490911673b9812e2fa995ec53b5b6df34d21f9304762c5497179055611e87806100b16000396000f3fe608060405260043610610110576000357c0100000000000000000000000000000000000000000000000000000000900480637b2682a3116100a757806398ea5fca1161007657806398ea5fca146103315780639e281a9814610339578063f2fde38b14610384578063ff0bd58b146103b757610110565b80637b2682a31461029057806389d12768146102ba5780638da5cb5b146102f35780638f32d59b1461030857610110565b806368a88b11116100e357806368a88b11146101e7578063715018a61461022057806373ffd5b71461023557806376771d4b1461025f57610110565b8063022fc88b146101125780631072cbea1461014b578063338b5dea146101845780633bed33ce146101bd575b005b34801561011e57600080fd5b506101106004803603604081101561013557600080fd5b50600160a060020a0381351690602001356103cc565b34801561015757600080fd5b506101106004803603604081101561016e57600080fd5b50600160a060020a0381351690602001356103fb565b34801561019057600080fd5b50610110600480360360408110156101a757600080fd5b50600160a060020a038135169060200135610420565b3480156101c957600080fd5b50610110600480360360208110156101e057600080fd5b503561043d565b3480156101f357600080fd5b506101106004803603604081101561020a57600080fd5b50600160a060020a03813516906020013561045c565b34801561022c57600080fd5b506101106108fa565b34801561024157600080fd5b506101106004803603602081101561025857600080fd5b5035610964565b34801561026b57600080fd5b506102746109c2565b60408051600160a060020a039092168252519081900360200190f35b34801561029c57600080fd5b50610110600480360360208110156102b357600080fd5b50356109d1565b3480156102c657600080fd5b50610110600480360360408110156102dd57600080fd5b50600160a060020a038135169060200135610a2d565b3480156102ff57600080fd5b50610274610fd5565b34801561031457600080fd5b5061031d610fe4565b604080519115158252519081900360200190f35b610110610ff5565b34801561034557600080fd5b506103726004803603604081101561035c57600080fd5b50600160a060020a038135169060200135611376565b60408051918252519081900360200190f35b34801561039057600080fd5b50610110600480360360208110156103a757600080fd5b5035600160a060020a031661142d565b3480156103c357600080fd5b50610274611449565b6103d4610fe4565b15156103df57600080fd5b6002546103f7908390600160a060020a031683611458565b5050565b610403610fe4565b151561040e57600080fd5b6103f78261041a610fd5565b83611713565b610428610fe4565b151561043357600080fd5b6103f782826119ce565b610445610fe4565b151561045057600080fd5b61045981611b89565b50565b610464610fe4565b151561046f57600080fd5b61047881611b89565b30318111156104bb5760405160e560020a62461bcd028152600401808060200182810382526024815260200180611d9d6024913960400191505060405180910390fd5b600154604080517f06f2bf62000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152915160009392909216916306f2bf6291602480820192602092909190829003018186803b15801561052557600080fd5b505afa158015610539573d6000803e3d6000fd5b505050506040513d602081101561054f57600080fd5b5051604080517ff39b5b9b000000000000000000000000000000000000000000000000000000008152600160048201524260248201529051600160a060020a039092169163f39b5b9b918591604480830192602092919082900301818588803b1580156105bb57600080fd5b505af11580156105cf573d6000803e3d6000fd5b50505050506040513d60208110156105e657600080fd5b505190506105f483826119ce565b6002546040805160e060020a637bf1a6270281529051600092600160a060020a031691637bf1a627916004808301926020929190829003018186803b15801561063c57600080fd5b505afa158015610650573d6000803e3d6000fd5b505050506040513d602081101561066657600080fd5b5051600254604080517f14584a9d000000000000000000000000000000000000000000000000000000008152600160a060020a0388811660048301528085166024830152915193945060009391909216916314584a9d91604480830192602092919082900301818787803b1580156106dd57600080fd5b505af11580156106f1573d6000803e3d6000fd5b505050506040513d602081101561070757600080fd5b5051600254604080517f5e7f22c2000000000000000000000000000000000000000000000000000000008152600160a060020a03868116600483015289811660248301526044820185905260001960648301529151939450911691635e7f22c2916084808201926020929091908290030181600087803b15801561078a57600080fd5b505af115801561079e573d6000803e3d6000fd5b505050506040513d60208110156107b457600080fd5b5050600254604080517fb0293850000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301528881166024830152306044830152606482018590528251600094919091169263b0293850926084808201939182900301818787803b15801561083157600080fd5b505af1158015610845573d6000803e3d6000fd5b505050506040513d604081101561085b57600080fd5b50519050848110156108b7576040805160e560020a62461bcd02815260206004820152600960248201527f6e6f2070726f6669740000000000000000000000000000000000000000000000604482015290519081900360640190fd5b604080518281526000602082015281517fc90a3c8cce5a6fc905b1c03c24729cd1e75337254f405872e01b21df6a5a123c929181900390910190a1505050505050565b610902610fe4565b151561090d57600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b61096c610fe4565b151561097757600080fd5b61097f610fd5565b600160a060020a03166108fc8215610997578261099a565b30315b6040518115909202916000818181858888f193505050501580156103f7573d6000803e3d6000fd5b600154600160a060020a031681565b6109d9610fe4565b15156109e457600080fd5b6109ed81611b89565b6109f5610fd5565b600160a060020a03166108fc829081150290604051600060405180830381858888f193505050501580156103f7573d6000803e3d6000fd5b610a35610fe4565b1515610a4057600080fd5b6002546040805160e060020a637bf1a6270281529051600092600160a060020a031691637bf1a627916004808301926020929190829003018186803b158015610a8857600080fd5b505afa158015610a9c573d6000803e3d6000fd5b505050506040513d6020811015610ab257600080fd5b5051600254604080517f14584a9d000000000000000000000000000000000000000000000000000000008152600160a060020a0387811660048301528085166024830152915193945060009391909216916314584a9d91604480830192602092919082900301818787803b158015610b2957600080fd5b505af1158015610b3d573d6000803e3d6000fd5b505050506040513d6020811015610b5357600080fd5b5051600254604080517f5e7f22c2000000000000000000000000000000000000000000000000000000008152600160a060020a038881166004830152868116602483015260448201859052606482018890529151939450911691635e7f22c2916084808201926020929091908290030181600087803b158015610bd557600080fd5b505af1158015610be9573d6000803e3d6000fd5b505050506040513d6020811015610bff57600080fd5b5050600254604080517fb0293850000000000000000000000000000000000000000000000000000000008152600160a060020a0387811660048301528581166024830152306044830152606482018590528251600094919091169263b0293850926084808201939182900301818787803b158015610c7c57600080fd5b505af1158015610c90573d6000803e3d6000fd5b505050506040513d6040811015610ca657600080fd5b5051600254604080517ff3fef3a3000000000000000000000000000000000000000000000000000000008152600160a060020a03898116600483015260248201859052915193945091169163f3fef3a3916044808201926020929091908290030181600087803b158015610d1957600080fd5b505af1158015610d2d573d6000803e3d6000fd5b505050506040513d6020811015610d4357600080fd5b5050600154604080517f06f2bf62000000000000000000000000000000000000000000000000000000008152600160a060020a038881166004830152915160009392909216916306f2bf6291602480820192602092909190829003018186803b158015610daf57600080fd5b505afa158015610dc3573d6000803e3d6000fd5b505050506040513d6020811015610dd957600080fd5b5051604080517fdd62ed3e000000000000000000000000000000000000000000000000000000008152306004820152600160a060020a03808416602483015291519293506000929189169163dd62ed3e91604480820192602092909190829003018186803b158015610e4a57600080fd5b505afa158015610e5e573d6000803e3d6000fd5b505050506040513d6020811015610e7457600080fd5b5051905082811015610e8d57610e8d8783600019611458565b600082600160a060020a03166395e3c50b856001426040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018381526020018281526020019350505050602060405180830381600087803b158015610f0257600080fd5b505af1158015610f16573d6000803e3d6000fd5b505050506040513d6020811015610f2c57600080fd5b5051905086811015610f88576040805160e560020a62461bcd02815260206004820152600960248201527f6e6f2070726f6669740000000000000000000000000000000000000000000000604482015290519081900360640190fd5b604080518281526001602082015281517fc90a3c8cce5a6fc905b1c03c24729cd1e75337254f405872e01b21df6a5a123c929181900390910190a1610fcb610ff5565b5050505050505050565b600054600160a060020a031690565b600054600160a060020a0316331490565b610ffd610fe4565b151561100857600080fd5b600030311161104b5760405160e560020a62461bcd028152600401808060200182810382526029815260200180611dc16029913960400191505060405180910390fd5b6002546040805160e060020a637bf1a6270281529051303192600092600160a060020a0390911691637bf1a62791600480820192602092909190829003018186803b15801561109957600080fd5b505afa1580156110ad573d6000803e3d6000fd5b505050506040513d60208110156110c357600080fd5b5051604080517fd0e30db00000000000000000000000000000000000000000000000000000000081529051919250600160a060020a0383169163d0e30db0918591600480830192600092919082900301818588803b15801561112457600080fd5b505af1158015611138573d6000803e3d6000fd5b5050604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905160009450600160a060020a03861693506370a0823192506024808301926020929190829003018186803b15801561119f57600080fd5b505afa1580156111b3573d6000803e3d6000fd5b505050506040513d60208110156111c957600080fd5b5051600254604080517fdd62ed3e000000000000000000000000000000000000000000000000000000008152306004820152600160a060020a03928316602482015290519293506000929185169163dd62ed3e91604480820192602092909190829003018186803b15801561123d57600080fd5b505afa158015611251573d6000803e3d6000fd5b505050506040513d602081101561126757600080fd5b505190508181101561128d5760025461128d908490600160a060020a0316600019611458565b600254604080517f47e7ef24000000000000000000000000000000000000000000000000000000008152600160a060020a03868116600483015260248201889052915160009392909216916347e7ef249160448082019260209290919082900301818787803b1580156112ff57600080fd5b505af1158015611313573d6000803e3d6000fd5b505050506040513d602081101561132957600080fd5b505190508481101561136f5760405160e560020a62461bcd028152600401808060200182810382526023815260200180611e126023913960400191505060405180910390fd5b5050505050565b6000611380610fe4565b151561138b57600080fd5b600254604080517ff3fef3a3000000000000000000000000000000000000000000000000000000008152600160a060020a038681166004830152602482018690529151919092169163f3fef3a39160448083019260209291908290030181600087803b1580156113fa57600080fd5b505af115801561140e573d6000803e3d6000fd5b505050506040513d602081101561142457600080fd5b50519392505050565b611435610fe4565b151561144057600080fd5b61045981611d17565b600254600160a060020a031681565b61146a83600160a060020a0316611d94565b15156114c0576040805160e560020a62461bcd02815260206004820152601760248201527f4552433230206973206e6f74206120636f6e7472616374000000000000000000604482015290519081900360640190fd5b604080518082018252601881527f617070726f766528616464726573732c75696e743235362900000000000000006020918201528151600160a060020a0385811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b3000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b6020831061159b5780518252601f19909201916020918201910161157c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146115fd576040519150601f19603f3d011682016040523d82523d6000602084013e611602565b606091505b509150915081151561165e576040805160e560020a62461bcd02815260206004820152601860248201527f73616665417070726f7665206d75737420737563636565640000000000000000604482015290519081900360640190fd5b805115806116d35750805160201480156116d3575080601f81518110151561168257fe5b6020910101517f010000000000000000000000000000000000000000000000000000000000000090819004027fff000000000000000000000000000000000000000000000000000000000000001615155b151561136f5760405160e560020a62461bcd028152600401808060200182810382526027815260200180611e356027913960400191505060405180910390fd5b61172583600160a060020a0316611d94565b151561177b576040805160e560020a62461bcd02815260206004820152601760248201527f4552433230206973206e6f74206120636f6e7472616374000000000000000000604482015290519081900360640190fd5b604080518082018252601981527f7472616e7366657228616464726573732c75696e7432353629000000000000006020918201528151600160a060020a0385811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b602083106118565780518252601f199092019160209182019101611837565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146118b8576040519150601f19603f3d011682016040523d82523d6000602084013e6118bd565b606091505b5091509150811515611919576040805160e560020a62461bcd02815260206004820152601960248201527f736166655472616e73666572206d757374207375636365656400000000000000604482015290519081900360640190fd5b8051158061198e57508051602014801561198e575080601f81518110151561193d57fe5b6020910101517f010000000000000000000000000000000000000000000000000000000000000090819004027fff000000000000000000000000000000000000000000000000000000000000001615155b151561136f5760405160e560020a62461bcd028152600401808060200182810382526028815260200180611dea6028913960400191505060405180910390fd5b600254604080517fdd62ed3e000000000000000000000000000000000000000000000000000000008152306004820152600160a060020a039283166024820152905160009285169163dd62ed3e916044808301926020929190829003018186803b158015611a3b57600080fd5b505afa158015611a4f573d6000803e3d6000fd5b505050506040513d6020811015611a6557600080fd5b5051905081811015611a8b57600254611a8b908490600160a060020a0316600019611458565b600254604080517f47e7ef24000000000000000000000000000000000000000000000000000000008152600160a060020a03868116600483015260248201869052915160009392909216916347e7ef249160448082019260209290919082900301818787803b158015611afd57600080fd5b505af1158015611b11573d6000803e3d6000fd5b505050506040513d6020811015611b2757600080fd5b5051905082811015611b83576040805160e560020a62461bcd02815260206004820152601360248201527f6465706f736974206469646e277420776f726b00000000000000000000000000604482015290519081900360640190fd5b50505050565b6002546040805160e060020a637bf1a6270281529051600092600160a060020a031691637bf1a627916004808301926020929190829003018186803b158015611bd157600080fd5b505afa158015611be5573d6000803e3d6000fd5b505050506040513d6020811015611bfb57600080fd5b5051600254604080517ff3fef3a3000000000000000000000000000000000000000000000000000000008152600160a060020a03808516600483015260248201879052915193945091169163f3fef3a3916044808201926020929091908290030181600087803b158015611c6e57600080fd5b505af1158015611c82573d6000803e3d6000fd5b505050506040513d6020811015611c9857600080fd5b5050604080517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018490529051600160a060020a03831691632e1a7d4d91602480830192600092919082900301818387803b158015611cfb57600080fd5b505af1158015611d0f573d6000803e3d6000fd5b505050505050565b600160a060020a0381161515611d2c57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000903b119056fe627579696e672066726f6d20756e69737761702074616b6573207265616c20457468657242616c616e6365206d7573742062652067726561746572207468616e203020746f206465706f736974736166655472616e73666572206d7573742072657475726e206e6f7468696e67206f7220747275654465706f736974205745544820746f20447574636858206469646e277420776f726b2e73616665417070726f7665206d7573742072657475726e206e6f7468696e67206f722074727565a165627a7a723058208a315b4119584545f5f4380ecb4454abacf269f013a945cee234d33318f0fdaf0029"
}