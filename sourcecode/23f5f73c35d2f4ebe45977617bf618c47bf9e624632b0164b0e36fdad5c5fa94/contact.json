{
  "address": "0x45d3ce9da80d2331627d8a87ae4f225320bbe30b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenSale",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-16\n*/\n\npragma solidity ^0.4.24;\ncontract YellowBetterToken\n{\n    string public constant name = \"Yellow Better\";\n    string public constant symbol = \"YBT\";\n    uint8 public constant decimals = 18;\n    uint public constant _totalSupply = 2000000000000000000000000000;\n    uint public totalSupply = _totalSupply;\n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) allowed;\n    event Transfer(address indexed, address indexed, uint);\n    event Approval(address indexed, address indexed, uint);\n    event Burn(address indexed, uint);\n    constructor()\n    {\n        balances[msg.sender] = totalSupply;\n    }\n    function sub(uint a, uint b) private pure returns (uint)\n    {\n        require(a >= b);\n        return a - b;\n    }\n    function balanceOf(address tokenOwner) view returns (uint)\n    {\n        return balances[tokenOwner];\n    }\n    function transfer(address to, uint tokens) returns (bool)\n    {\n        balances[msg.sender] = sub(balances[msg.sender], tokens);\n        balances[to] += tokens;\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n    function transferFrom(address from, address to, uint tokens) returns (bool)\n    {\n        // subtract tokens from both balance and allowance, fail if any is smaller\n        balances[from] = sub(balances[from], tokens);\n        allowed[from][msg.sender] = sub(allowed[from][msg.sender], tokens);\n        balances[to] += tokens;\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n    function approve(address spender, uint tokens) returns (bool)\n    {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n    function allowance(address tokenOwner, address spender) view returns (uint)\n    {\n        return allowed[tokenOwner][spender];\n    }\n    function burn(uint tokens)\n    {\n        balances[msg.sender] = sub(balances[msg.sender], tokens);\n        totalSupply -= tokens;\n        emit Burn(msg.sender, tokens);\n    }\n}\ncontract TokenSale\n{\n    address public creator;\n    address public tokenContract;\n    uint public tokenPrice; // in wei\n    uint public deadline;\n    constructor(address source)\n    {\n        creator = msg.sender;\n        tokenContract = source;\n    }\n    function setPrice(uint price)\n    {\n        if (msg.sender == creator) tokenPrice = price;\n    }\n    function setDeadline(uint timestamp)\n    {\n        if (msg.sender == creator) deadline = timestamp;\n    }\n    function buyTokens(address beneficiary) payable\n    {\n        require(\n            block.timestamp < deadline\n            && tokenPrice > 0\n            && YellowBetterToken(tokenContract).transfer(beneficiary, 1000000000000000000 * msg.value / tokenPrice));\n    }\n    function payout()\n    {\n        creator.transfer(this.balance);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060405160208061060683398101806040528101908080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610542806100c46000396000f30060806040526004361061008e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806302d05d3f14610093578063195199f6146100ea57806329dcb0cf1461011757806355a373d61461014257806363bd1d4a146101995780637ff9b596146101b057806391b7f5ed146101db578063ec8ac4d814610208575b600080fd5b34801561009f57600080fd5b506100a861023e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156100f657600080fd5b5061011560048036038101908080359060200190929190505050610263565b005b34801561012357600080fd5b5061012c6102c3565b6040518082815260200191505060405180910390f35b34801561014e57600080fd5b506101576102c9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101a557600080fd5b506101ae6102ef565b005b3480156101bc57600080fd5b506101c5610370565b6040518082815260200191505060405180910390f35b3480156101e757600080fd5b5061020660048036038101908080359060200190929190505050610376565b005b61023c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506103d6565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156102c057806003819055505b50565b60035481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f1935050505015801561036d573d6000803e3d6000fd5b50565b60025481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156103d357806002819055505b50565b600354421080156103e957506000600254115b80156105085750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8260025434670de0b6b3a76400000281151561044657fe5b046040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156104cc57600080fd5b505af11580156104e0573d6000803e3d6000fd5b505050506040513d60208110156104f657600080fd5b81019080805190602001909291905050505b151561051357600080fd5b505600a165627a7a723058204d71bebaf0e092fb24af3bdebeb10670c3dfc0b958abae0290ce5635a48c26790029000000000000000000000000395941e0c32d5bb7b6cf8e4627a7dd7b17fba880",
  "constructorArguments": "000000000000000000000000395941e0c32d5bb7b6cf8e4627a7dd7b17fba880"
}