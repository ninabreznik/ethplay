{
  "address": "0xd6bd97a26232ba02172ff86b055d5d7be789335b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "OrmeCash",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-20\n*/\n\ncontract TokenRecipient { \n\tfunction receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; \n} \n\ncontract IERC20Token {     \n\n\t/// @return total amount of tokens     \n\tfunction totalSupply() constant returns (uint256 totalSupply);     \n\n\t/// @param _owner The address from which the balance will be retrieved     \n\t/// @return The balance     \n\tfunction balanceOf(address _owner) constant returns (uint256 balance) {}     \n\n\t/// @notice send `_value` token to `_to` from `msg.sender`     \n\t/// @param _to The address of the recipient     \n\t/// @param _value The amount of token to be transferred     \n\t/// @return Whether the transfer was successful or not     \n\tfunction transfer(address _to, uint256 _value) returns (bool success) {}     \n\n\t/// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`     \n\t/// @param _from The address of the sender     \n\t/// @param _to The address of the recipient     \n\t/// @param _value The amount of token to be transferred     \n\t/// @return Whether the transfer was successful or not     \n\tfunction transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}     \n\n\t/// @notice `msg.sender` approves `_addr` to spend `_value` tokens     \n\t/// @param _spender The address of the account able to transfer the tokens     \n\t/// @param _value The amount of wei to be approved for transfer     \n\t/// @return Whether the approval was successful or not     \n\tfunction approve(address _spender, uint256 _value) returns (bool success) {}     \n\n\t/// @param _owner The address of the account owning tokens     \n\t/// @param _spender The address of the account able to transfer the tokens     \n\t/// @return Amount of remaining tokens allowed to spent     \n\tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining) {}       \n\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);     \n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value); \n} \n\ncontract OrmeCash is IERC20Token {         \n  \n\tstring public name = \"OrmeCash\";\n\tstring public symbol = \"OMC\";\n\tuint8 public decimals = 18;\n\tuint256 public tokenFrozenUntilBlock;\n\taddress public owner;\n\tuint public mintingCap = 2000000000 * 10**18;\n   \n\tuint256 supply = 0;\n\tmapping (address => uint256) balances;\n\tmapping (address => mapping (address => uint256)) allowances;\n\tmapping (address => bool) restrictedAddresses;\n   \n\tevent Mint(address indexed _to, uint256 _value);\n\tevent Burn(address indexed _from, uint256 _value);\n\tevent TokenFrozen(uint256 _frozenUntilBlock);\n\n\tmodifier onlyOwner {\n\t\trequire(msg.sender == owner);\n\t\t_;\n\t}\n\n\tfunction OrmeCash() public {\n\t\trestrictedAddresses[0x0] = true;\n\t\trestrictedAddresses[address(this)] = true;\n\t\towner = msg.sender;\n\t}         \n  \n\tfunction totalSupply() constant public returns (uint256 totalSupply) {         \n\t\treturn supply;     \n\t}         \n\n\tfunction balanceOf(address _owner) constant public returns (uint256 balance) {         \n\t\treturn balances[_owner];     \n\t}     \n \n\tfunction transfer(address _to, uint256 _value) public returns (bool success) {     \t\n\t\trequire (block.number >= tokenFrozenUntilBlock);\n\t\trequire (!restrictedAddresses[_to]);\n\t\trequire (balances[msg.sender] >= _value);\n\t\trequire (balances[_to] + _value > balances[_to]);\n\t\tbalances[msg.sender] -= _value;\n\t\tbalances[_to] += _value;\n\t\tTransfer(msg.sender, _to, _value);       \n\t\treturn true;\n\t}\n\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {     \t\n\t\trequire (block.number >= tokenFrozenUntilBlock);\n\t\tallowances[msg.sender][_spender] = _value;\n\t\tApproval(msg.sender, _spender, _value);\n\t\treturn true;     \n\t}     \n\n\tfunction approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {            \n\t\tTokenRecipient spender = TokenRecipient(_spender);      \n\t\tapprove(_spender, _value);\n\t\tspender.receiveApproval(msg.sender, _value, this, _extraData);    \n\t\treturn true;     \n\t}     \n\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {     \t\n\t\trequire (block.number >= tokenFrozenUntilBlock);\n\t\trequire (!restrictedAddresses[_to]);\n\t\trequire (balances[_from] >= _value); \n\t\trequire (balances[_to] + _value >= balances[_to]);     \n\t\trequire (_value <= allowances[_from][msg.sender]);     \n\t\tbalances[_from] -= _value;\n\t\tbalances[_to] += _value;    \n\t\tallowances[_from][msg.sender] -= _value; \n\t\tTransfer(_from, _to, _value);  \n\t\treturn true;\n\t}         \n\n\tfunction allowance(address _owner, address _spender) constant public returns (uint256 remaining) {         \n\t\treturn allowances[_owner][_spender];     \n\t}         \n    \n\tfunction mintTokens(address _to, uint256 _amount) onlyOwner public {\n\t\trequire (!restrictedAddresses[_to]);\n\t\trequire (_amount != 0);\n\t\trequire (balances[_to] + _amount > balances[_to]);\n\t\trequire (mintingCap >= supply + _amount);\n\t\tsupply += _amount;\n\t\tbalances[_to] += _amount;\n\t\tMint(_to, _amount);\n\t\tTransfer(0x0, _to, _amount);\n\t}\n\n\tfunction burnTokens(uint _amount) public {\n\t\trequire(_amount <= balanceOf(msg.sender));\n\t\tsupply -= _amount;\n\t\tbalances[msg.sender] -= _amount;\n\t\tTransfer(msg.sender, 0x0, _amount);\n\t\tBurn(msg.sender, _amount);\n\t}\n\n\tfunction freezeTransfersUntil(uint256 _frozenUntilBlock) onlyOwner public {     \t\n\t\ttokenFrozenUntilBlock = _frozenUntilBlock;     \t\n\t\tTokenFrozen(_frozenUntilBlock);     \n\t}     \n\n\tfunction editRestrictedAddress(address _newRestrictedAddress) onlyOwner public {\n\t\trestrictedAddresses[_newRestrictedAddress] = !restrictedAddresses[_newRestrictedAddress];\n\t}\n\n\tfunction isRestrictedAddress(address _querryAddress) constant public returns (bool answer){\n\t\treturn restrictedAddresses[_querryAddress];\n\t}\n\n\tfunction transferOwnership(address newOwner) onlyOwner public {\n\t\towner = newOwner;\n\t}\n\n\tfunction killContract() onlyOwner public {\n\t\tselfdestruct(msg.sender);\n\t}\n}",
  "bytecode": "60606040526040805190810160405280600881526020017f4f726d65436173680000000000000000000000000000000000000000000000008152506000908051906020019062000051929190620001be565b506040805190810160405280600381526020017f4f4d430000000000000000000000000000000000000000000000000000000000815250600190805190602001906200009f929190620001be565b506012600260006101000a81548160ff021916908360ff1602179055506b06765c793fa10079d000000060055560006006553415620000dd57600080fd5b6001600960008073ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200026d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200020157805160ff191683800117855562000232565b8280016001018555821562000232579182015b828111156200023157825182559160200191906001019062000214565b5b50905062000241919062000245565b5090565b6200026a91905b80821115620002665760008160009055506001016200024c565b5090565b90565b61184f806200027d6000396000f300606060405260043610610112576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806303c175ff1461011757806306fdde0314610168578063095ea7b3146101f657806318160ddd146102505780631c02708d1461027957806323b872dd1461028e578063313ce567146103075780633f23a566146103365780634ec883d11461035f5780636d1b229d1461039857806370a08231146103bb5780638da5cb5b1461040857806391a67e1e1461045d57806395d89b4114610486578063a9059cbb14610514578063bc01b7671461056e578063cae9ca5114610591578063dd62ed3e1461062e578063f0dda65c1461069a578063f2fde38b146106dc575b600080fd5b341561012257600080fd5b61014e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610715565b604051808215151515815260200191505060405180910390f35b341561017357600080fd5b61017b61076b565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101bb5780820151818401526020810190506101a0565b50505050905090810190601f1680156101e85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561020157600080fd5b610236600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610809565b604051808215151515815260200191505060405180910390f35b341561025b57600080fd5b61026361090c565b6040518082815260200191505060405180910390f35b341561028457600080fd5b61028c610916565b005b341561029957600080fd5b6102ed600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061098b565b604051808215151515815260200191505060405180910390f35b341561031257600080fd5b61031a610cf3565b604051808260ff1660ff16815260200191505060405180910390f35b341561034157600080fd5b610349610d06565b6040518082815260200191505060405180910390f35b341561036a57600080fd5b610396600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610d0c565b005b34156103a357600080fd5b6103b96004808035906020019091905050610e0f565b005b34156103c657600080fd5b6103f2600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610f24565b6040518082815260200191505060405180910390f35b341561041357600080fd5b61041b610f6d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561046857600080fd5b610470610f93565b6040518082815260200191505060405180910390f35b341561049157600080fd5b610499610f99565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104d95780820151818401526020810190506104be565b50505050905090810190601f1680156105065780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561051f57600080fd5b610554600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611037565b604051808215151515815260200191505060405180910390f35b341561057957600080fd5b61058f6004808035906020019091905050611288565b005b341561059c57600080fd5b610614600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611325565b604051808215151515815260200191505060405180910390f35b341561063957600080fd5b610684600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611495565b6040518082815260200191505060405180910390f35b34156106a557600080fd5b6106da600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061151c565b005b34156106e757600080fd5b610713600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611783565b005b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108015780601f106107d657610100808354040283529160200191610801565b820191906000526020600020905b8154815290600101906020018083116107e457829003601f168201915b505050505081565b6000600354431015151561081c57600080fd5b81600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600654905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561097257600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16ff5b6000600354431015151561099e57600080fd5b600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515156109f757600080fd5b81600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610a4557600080fd5b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540110151515610ad457600080fd5b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610b5f57600080fd5b81600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555081600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600260009054906101000a900460ff1681565b60055481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d6857600080fd5b600960008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b610e1833610f24565b8111151515610e2657600080fd5b8060066000828254039250508190555080600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555060003373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a33373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a250565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561102f5780601f106110045761010080835404028352916020019161102f565b820191906000526020600020905b81548152906001019060200180831161101257829003601f168201915b505050505081565b6000600354431015151561104a57600080fd5b600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515156110a357600080fd5b81600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156110f157600080fd5b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540111151561117f57600080fd5b81600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112e457600080fd5b806003819055507f74308730007d8ee5b3c18fad784efa3555f62695e36960f803f475eeb663d10e816040518082815260200191505060405180910390a150565b6000808490506113358585610809565b508073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561142b578082015181840152602081019050611410565b50505050905090810190601f1680156114585780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b151561147957600080fd5b5af1151561148657600080fd5b50505060019150509392505050565b6000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561157857600080fd5b600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515156115d157600080fd5b600081141515156115e157600080fd5b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540111151561166f57600080fd5b80600654016005541015151561168457600080fd5b8060066000828254019250508190555080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885826040518082815260200191505060405180910390a28173ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117df57600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a7230582085406c19c343816062711111e2034bb119cb831ea1653b8081d427485007ebf90029"
}