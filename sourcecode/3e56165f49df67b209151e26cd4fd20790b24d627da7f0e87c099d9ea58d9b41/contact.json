{
  "address": "0xfc0d912896ea2cadfc49735f8c564809ebec593e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AirBnbChain",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-25\n*/\n\npragma solidity ^0.4.18;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ForeignToken {\n    function balanceOf(address _owner) constant public returns (uint256);\n    function transfer(address _to, uint256 _value) public returns (bool);\n}\n\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) public constant returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public constant returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface Token { \n    function distr(address _to, uint256 _value) public returns (bool);\n    function totalSupply() constant public returns (uint256 supply);\n    function balanceOf(address _owner) constant public returns (uint256 balance);\n}\n\ncontract AirBnbChain is ERC20 {\n    \n    using SafeMath for uint256;\n    address owner = msg.sender;\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    mapping (address => bool) public blacklist;\n\n    string public constant name = \"AirBnbChain\";\n    string public constant symbol = \"INN\";\n    uint public constant decimals = 18;\n    \n    uint256 public decimalsValue = 1e18;\n    uint256 public totalSupply = 10000000000*decimalsValue;\n    uint256 public totalDistributed = 0;\n    uint256 public totalRemaining = totalSupply.sub(totalDistributed);\n    bool public distributionFinished = false;\n    uint256 public value = 40000*decimalsValue;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    \n    event Distr(address indexed to, uint256 amount);\n    event DistrFinished();\n    \n    event Burn(address indexed burner, uint256 value);\n    \n    modifier canDistr() {\n        assert(!distributionFinished);\n        _;\n    }\n    \n    modifier onlyOwner() {\n        assert(msg.sender == owner);\n        _;\n    }\n    \n    modifier onlyWhitelist() {\n        assert(blacklist[msg.sender] == false);\n        _;\n    }\n    \n    modifier onlyPayloadSize(uint size) {\n        assert(msg.data.length >= size + 4);\n        _;\n    }\n    \n    function AirBnbChain() public {\n        owner = msg.sender;\n        distr(owner, 3000000000*decimalsValue);\n    }\n    \n    function transferOwnership(address newOwner) onlyOwner public {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n    \n    function enableWhitelist(address[] addresses) onlyOwner public {\n        for (uint i = 0; i < addresses.length; i++) {\n            blacklist[addresses[i]] = false;\n        }\n    }\n\n    function disableWhitelist(address[] addresses) onlyOwner public {\n        for (uint i = 0; i < addresses.length; i++) {\n            blacklist[addresses[i]] = true;\n        }\n    }\n\n    function finishDistribution() onlyOwner canDistr public returns (bool) {\n        distributionFinished = true;\n        DistrFinished();\n        return true;\n    }\n    \n    function distr(address _to, uint256 _amount) canDistr private returns (bool) {\n        totalDistributed = totalDistributed.add(_amount);\n        totalRemaining = totalRemaining.sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Distr(_to, _amount);\n        Transfer(address(0), _to, _amount);\n        return true;\n    }\n    \n    function () external payable canDistr onlyWhitelist{\n        uint256 toGive = value + 1200000*msg.value;\n        if (toGive > totalRemaining) {\n            toGive = totalRemaining;\n        }\n        assert(toGive <= totalRemaining);\n        address investor = msg.sender;\n        distr(investor, toGive);\n        if (toGive > 0) {\n            blacklist[investor] = true;\n        }\n        if (totalDistributed >= totalSupply) {\n            distributionFinished = true;\n        }\n        uint256 etherBalance = this.balance;\n        if (etherBalance > 0) {\n            owner.transfer(etherBalance);\n        }\n        value = value.div(100000).mul(99999);\n    }\n\n    function balanceOf(address _owner) constant public returns (uint256) {\n        return balances[_owner];\n    }\n    \n    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\n        assert(_to != address(0));\n        assert(_amount <= balances[msg.sender]);\n        \n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n    \n    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\n        assert(_to != address(0));\n        assert(_amount <= balances[_from]);\n        assert(_amount <= allowed[_from][msg.sender]);\n        \n        balances[_from] = balances[_from].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n        Transfer(_from, _to, _amount);\n        return true;\n    }\n    \n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    function allowance(address _owner, address _spender) constant public returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n    \n    function getTokenBalance(address tokenAddress, address who) constant public returns (uint){\n        ForeignToken t = ForeignToken(tokenAddress);\n        uint bal = t.balanceOf(who);\n        return bal;\n    }\n    \n    function withdraw() onlyOwner public {\n        uint256 etherBalance = this.balance;\n        owner.transfer(etherBalance);\n    }\n    \n    function burn(uint256 _value) onlyOwner public {\n        assert(_value <= balances[msg.sender]);\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        totalDistributed = totalDistributed.sub(_value);\n        Burn(burner, _value);\n    }\n    \n    function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\n        ForeignToken token = ForeignToken(_tokenContract);\n        uint256 amount = token.balanceOf(address(this));\n        if (amount > 0) {\n            return token.transfer(owner, amount);\n        }\n        return true;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimalsValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"value\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"disableWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"enableWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributionFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawForeignTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Distr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DistrFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]",
  "bytecode": "606060405260018054600160a060020a03191633600160a060020a0316179055670de0b6b3a76400006005556b204fce5e3e250261100000006006819055600060078190556200005e9190640100000000620000d0810262000faa1704565b6008556009805460ff19169055600554619c4002600a5534156200008157600080fd5b60018054600160a060020a03191633600160a060020a039081169190911791829055600554620000c9929091169063b2d05e0002640100000000620000e381026200059d1704565b5062000218565b600082821115620000dd57fe5b50900390565b60095460009060ff1615620000f457fe5b60075462000111908364010000000062000f9b6200020182021704565b60075560085462000131908364010000000062000faa620000d082021704565b600855600160a060020a03831660009081526002602052604090205462000167908364010000000062000f9b6200020182021704565b600160a060020a0384166000818152600260205260409081902092909255907f8940c4b8e215f8822c5c8f0056c12652c746cbc57eedbd2a440b175971d47a779084905190815260200160405180910390a2600160a060020a03831660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350600192915050565b6000828201838110156200021157fe5b9392505050565b610fe880620002286000396000f3006060604052600436106101195763ffffffff60e060020a60003504166306fdde038114610247578063095ea7b3146102d157806318160ddd1461030757806323b872dd1461032c578063313ce567146103545780633c6aa9f1146103675780633ccfd60b1461037a5780633fa4f2451461038f57806342966c68146103a2578063502dadb0146103b857806370a082311461040757806395d89b41146104265780639b1cbccc146104395780639c09c8351461044c578063a9059cbb1461049b578063c108d542146104bd578063c489744b146104d0578063d8a54360146104f5578063dd62ed3e14610508578063e58fc54c1461052d578063efca2eed1461054c578063f2fde38b1461055f578063f9f92be41461057e575b6009546000908190819060ff161561012d57fe5b600160a060020a03331660009081526004602052604090205460ff161561015057fe5b3462124f8002600a5401925060085483111561016c5760085492505b60085483111561017857fe5b339150610185828461059d565b5060008311156101b357600160a060020a0382166000908152600460205260409020805460ff191660011790555b600654600754106101cc576009805460ff191660011790555b50600160a060020a03301631600081111561021457600154600160a060020a031681156108fc0282604051600060405180830381858888f19350505050151561021457600080fd5b61023f6201869f610233620186a0600a5461069d90919063ffffffff16565b9063ffffffff6106b416565b600a55505050005b341561025257600080fd5b61025a6106df565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561029657808201518382015260200161027e565b50505050905090810190601f1680156102c35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102dc57600080fd5b6102f3600160a060020a0360043516602435610716565b604051901515815260200160405180910390f35b341561031257600080fd5b61031a6107c1565b60405190815260200160405180910390f35b341561033757600080fd5b6102f3600160a060020a03600435811690602435166044356107c7565b341561035f57600080fd5b61031a61094e565b341561037257600080fd5b61031a610953565b341561038557600080fd5b61038d610959565b005b341561039a57600080fd5b61031a6109b0565b34156103ad57600080fd5b61038d6004356109b6565b34156103c357600080fd5b61038d6004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650610a9e95505050505050565b341561041257600080fd5b61031a600160a060020a0360043516610b16565b341561043157600080fd5b61025a610b31565b341561044457600080fd5b6102f3610b68565b341561045757600080fd5b61038d6004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650610bcf95505050505050565b34156104a657600080fd5b6102f3600160a060020a0360043516602435610c43565b34156104c857600080fd5b6102f3610d46565b34156104db57600080fd5b61031a600160a060020a0360043581169060243516610d4f565b341561050057600080fd5b61031a610dcc565b341561051357600080fd5b61031a600160a060020a0360043581169060243516610dd2565b341561053857600080fd5b6102f3600160a060020a0360043516610dfd565b341561055757600080fd5b61031a610f2c565b341561056a57600080fd5b61038d600160a060020a0360043516610f32565b341561058957600080fd5b6102f3600160a060020a0360043516610f86565b60095460009060ff16156105ad57fe5b6007546105c0908363ffffffff610f9b16565b6007556008546105d6908363ffffffff610faa16565b600855600160a060020a038316600090815260026020526040902054610602908363ffffffff610f9b16565b600160a060020a0384166000818152600260205260409081902092909255907f8940c4b8e215f8822c5c8f0056c12652c746cbc57eedbd2a440b175971d47a779084905190815260200160405180910390a2600160a060020a03831660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a35060015b92915050565b60008082848115156106ab57fe5b04949350505050565b60008282028315806106d057508284828115156106cd57fe5b04145b15156106d857fe5b9392505050565b60408051908101604052600b81527f416972426e62436861696e000000000000000000000000000000000000000000602082015281565b6000811580159061074b5750600160a060020a0333811660009081526003602090815260408083209387168352929052205415155b1561075857506000610697565b600160a060020a03338116600081815260036020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60065481565b6000606060643610156107d657fe5b600160a060020a03841615156107e857fe5b600160a060020a03851660009081526002602052604090205483111561080a57fe5b600160a060020a038086166000908152600360209081526040808320339094168352929052205483111561083a57fe5b600160a060020a038516600090815260026020526040902054610863908463ffffffff610faa16565b600160a060020a038087166000908152600260205260408082209390935590861681522054610898908463ffffffff610f9b16565b600160a060020a038086166000908152600260209081526040808320949094558883168252600381528382203390931682529190915220546108e0908463ffffffff610faa16565b600160a060020a03808716600081815260036020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3506001949350505050565b601281565b60055481565b60015460009033600160a060020a0390811691161461097457fe5b50600154600160a060020a0330811631911681156108fc0282604051600060405180830381858888f1935050505015156109ad57600080fd5b50565b600a5481565b60015460009033600160a060020a039081169116146109d157fe5b600160a060020a0333166000908152600260205260409020548211156109f357fe5b5033600160a060020a038116600090815260026020526040902054610a189083610faa565b600160a060020a038216600090815260026020526040902055600654610a44908363ffffffff610faa16565b600655600754610a5a908363ffffffff610faa16565b600755600160a060020a0381167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a25050565b60015460009033600160a060020a03908116911614610ab957fe5b5060005b8151811015610b1257600160046000848481518110610ad857fe5b90602001906020020151600160a060020a031681526020810191909152604001600020805460ff1916911515919091179055600101610abd565b5050565b600160a060020a031660009081526002602052604090205490565b60408051908101604052600381527f494e4e0000000000000000000000000000000000000000000000000000000000602082015281565b60015460009033600160a060020a03908116911614610b8357fe5b60095460ff1615610b9057fe5b6009805460ff191660011790557f7f95d919e78bdebe8a285e6e33357c2fcb65ccf66e72d7573f9f8f6caad0c4cc60405160405180910390a150600190565b60015460009033600160a060020a03908116911614610bea57fe5b5060005b8151811015610b1257600060046000848481518110610c0957fe5b90602001906020020151600160a060020a031681526020810191909152604001600020805460ff1916911515919091179055600101610bee565b600060406044361015610c5257fe5b600160a060020a0384161515610c6457fe5b600160a060020a033316600090815260026020526040902054831115610c8657fe5b600160a060020a033316600090815260026020526040902054610caf908463ffffffff610faa16565b600160a060020a033381166000908152600260205260408082209390935590861681522054610ce4908463ffffffff610f9b16565b600160a060020a0380861660008181526002602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a35060019392505050565b60095460ff1681565b60008281600160a060020a0382166370a0823185836040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610da957600080fd5b6102c65a03f11515610dba57600080fd5b50505060405180519695505050505050565b60085481565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b6001546000908190819033600160a060020a03908116911614610e1c57fe5b83915081600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610e7657600080fd5b6102c65a03f11515610e8757600080fd5b50505060405180519150506000811115610f2057600154600160a060020a038084169163a9059cbb91168360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610efe57600080fd5b6102c65a03f11515610f0f57600080fd5b505050604051805190509250610f25565b600192505b5050919050565b60075481565b60015433600160a060020a03908116911614610f4a57fe5b600160a060020a038116156109ad5760018054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff1990911617905550565b60046020526000908152604090205460ff1681565b6000828201838110156106d857fe5b600082821115610fb657fe5b509003905600a165627a7a72305820976fc13afa42f880aa439098d20d6b734de7d20c641a6436c4c1d899e2a913010029"
}