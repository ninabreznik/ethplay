{
  "address": "0xa3284ce13a58a60bbd900b9107c793579e5726e6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MasterDataProviderLock",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-16\n*/\n\npragma solidity ^0.4.24;\n\ncontract VerityToken {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\ncontract MasterDataProviderLock {\n  address public owner;\n  address public tokenAddress;\n  bool public allFundsCanBeUnlocked = false;\n  uint public lastLockingTime;\n\n  // amount => lockedUntil\n  mapping(uint => uint) public validLockingAmountToPeriod;\n  mapping(address => mapping(string => uint)) lockingData;\n\n  event Withdrawn(address indexed withdrawer, uint indexed withdrawnAmount);\n  event FundsLocked(\n    address indexed user,\n    uint indexed lockedAmount,\n    uint indexed lockedUntil\n  );\n  event AllFundsCanBeUnlocked(\n    uint indexed triggeredTimestamp,\n    bool indexed canAllFundsBeUnlocked\n  );\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  modifier onlyOnceLockingPeriodIsOver(address _user) {\n    require(\n      (now >= lockingData[_user][\"lockedUntil\"] || allFundsCanBeUnlocked)\n    );\n    _;\n  }\n\n  modifier checkValidLockingAmount(uint _funds) {\n    require(validLockingAmountToPeriod[_funds] != 0);\n    _;\n  }\n\n  modifier checkUsersTokenBalance(uint _fundsToTransfer) {\n    require(\n      _fundsToTransfer <= VerityToken(tokenAddress).balanceOf(msg.sender)\n    );\n    _;\n  }\n\n  modifier onlyOncePerUser(address _user) {\n    require(\n      lockingData[_user][\"amount\"] == 0 &&\n        lockingData[_user][\"lockedUntil\"] == 0\n    );\n    _;\n  }\n\n  modifier checkValidLockingTime() {\n    require(now <= lastLockingTime);\n    _;\n  }\n\n  modifier lastLockingTimeIsInTheFuture(uint _lastLockingTime) {\n    require(now < _lastLockingTime);\n    _;\n  }\n\n  modifier checkLockIsNotTerminated() {\n    require(allFundsCanBeUnlocked == false);\n    _;\n  }\n\n  constructor(\n    address _tokenAddress,\n    uint _lastLockingTime,\n    uint[3] _lockingAmounts,\n    uint[3] _lockingPeriods\n  )\n    public\n    lastLockingTimeIsInTheFuture(_lastLockingTime)\n  {\n    owner = msg.sender;\n    tokenAddress = _tokenAddress;\n    lastLockingTime = _lastLockingTime;\n\n    // expects \"ether\" format. Number is converted to wei:  num * 10**18\n    setValidLockingAmountToPeriod(_lockingAmounts, _lockingPeriods);\n  }\n\n  function lockFunds(uint _tokens)\n    public\n    checkValidLockingTime()\n    checkLockIsNotTerminated()\n    checkUsersTokenBalance(_tokens)\n    checkValidLockingAmount(_tokens)\n    onlyOncePerUser(msg.sender)\n  {\n    require(\n      VerityToken(tokenAddress).transferFrom(msg.sender, address(this), _tokens)\n    );\n\n    lockingData[msg.sender][\"amount\"] = _tokens;\n    lockingData[msg.sender][\"lockedUntil\"] = validLockingAmountToPeriod[_tokens];\n\n    emit FundsLocked(\n      msg.sender,\n      _tokens,\n      validLockingAmountToPeriod[_tokens]\n    );\n  }\n\n  function withdrawFunds()\n    public\n    onlyOnceLockingPeriodIsOver(msg.sender)\n  {\n    uint amountToBeTransferred = lockingData[msg.sender][\"amount\"];\n    lockingData[msg.sender][\"amount\"] = 0;\n    VerityToken(tokenAddress).transfer(msg.sender, amountToBeTransferred);\n\n    emit Withdrawn(\n      msg.sender,\n      amountToBeTransferred\n    );\n  }\n\n  function terminateTokenLock() public onlyOwner() {\n    allFundsCanBeUnlocked = true;\n\n    emit AllFundsCanBeUnlocked(\n      now,\n      allFundsCanBeUnlocked\n    );\n  }\n\n  function getUserData(address _user) public view returns (uint[2]) {\n    return [lockingData[_user][\"amount\"], lockingData[_user][\"lockedUntil\"]];\n  }\n\n  function setValidLockingAmountToPeriod(\n    uint[3] _lockingAmounts,\n    uint[3] _lockingPeriods\n  )\n  private\n  {\n    validLockingAmountToPeriod[_lockingAmounts[0] * 10 ** 18] = _lockingPeriods[0];\n    validLockingAmountToPeriod[_lockingAmounts[1] * 10 ** 18] = _lockingPeriods[1];\n    validLockingAmountToPeriod[_lockingAmounts[2] * 10 ** 18] = _lockingPeriods[2];\n  }\n}",
  "bytecode": "60806040526001805460a060020a60ff021916905534801561002057600080fd5b5060405161010080610925833981016040908152815160208301519092909181019060a0018242811161005257600080fd5b6000805433600160a060020a03199182161790915560018054909116600160a060020a0387161790556002849055610093838364010000000061009d810204565b50505050506100e2565b80518251670de0b6b3a7640000908102600090815260036020908152604080832094909455808501519086015183028252838220559282015193820151028252902055565b610834806100f16000396000f3006080604052600436106100985763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166324600fc3811461009d5780635a1a23e4146100b45780635ed31991146100de5780638c8f95fb146100f35780638da5cb5b1461010b5780639d76ea581461013c578063ae6e11dc14610151578063ce8bcae314610166578063ffc9896b1461018f575b600080fd5b3480156100a957600080fd5b506100b26101eb565b005b3480156100c057600080fd5b506100cc600435610375565b60408051918252519081900360200190f35b3480156100ea57600080fd5b506100cc610387565b3480156100ff57600080fd5b506100b260043561038d565b34801561011757600080fd5b5061012061065e565b60408051600160a060020a039092168252519081900360200190f35b34801561014857600080fd5b5061012061066d565b34801561015d57600080fd5b506100b261067c565b34801561017257600080fd5b5061017b610701565b604080519115158252519081900360200190f35b34801561019b57600080fd5b506101b0600160a060020a0360043516610722565b6040518082600260200280838360005b838110156101d85781810151838201526020016101c0565b5050505090500191505060405180910390f35b3360008181526004602052604080822081516000805160206107e98339815191528152600b810191909152905190819003602b019020549091904210158061024d575060015474010000000000000000000000000000000000000000900460ff165b151561025857600080fd5b33600081815260046020818152604080842081516000805160206107c98339815191528082526006808301849052845160269381900384018120548a8a528888529281529081019390935283519283900390910182208690556001547fa9059cbb00000000000000000000000000000000000000000000000000000000835294820196909652602481018690529051949650600160a060020a039092169363a9059cbb936044808501948390030190829087803b15801561031857600080fd5b505af115801561032c573d6000803e3d6000fd5b505050506040513d602081101561034257600080fd5b5050604051829033907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d590600090a35050565b60036020526000908152604090205481565b60025481565b60025442111561039c57600080fd5b60015474010000000000000000000000000000000000000000900460ff16156103c457600080fd5b600154604080517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015290518392600160a060020a0316916370a082319160248083019260209291908290030181600087803b15801561042957600080fd5b505af115801561043d573d6000803e3d6000fd5b505050506040513d602081101561045357600080fd5b505181111561046157600080fd5b6000828152600360205260409020548290151561047d57600080fd5b336000818152600460205260409081902081516000805160206107c9833981519152815260068101919091529051908190036026019020541580156105005750600160a060020a0381166000908152600460205260409081902081516000805160206107e98339815191528152600b810191909152905190819003602b01902054155b151561050b57600080fd5b600154604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018790529051600160a060020a03909216916323b872dd916064808201926020929091908290030181600087803b15801561057e57600080fd5b505af1158015610592573d6000803e3d6000fd5b505050506040513d60208110156105a857600080fd5b505115156105b557600080fd5b33600081815260046020818152604080842081516000805160206107c983398151915281526006810182905282519081900360260181208b90558a86526003808552838720548888529585526000805160206107e98339815191528252600b820192909252915191829003602b0182208490558985529091529092879290917fe52cdcd45f0913116ea4f3de9bab0401ca2bbb5593445d1f6736170f57db75e89190a450505050565b600054600160a060020a031681565b600154600160a060020a031681565b600054600160a060020a0316331461069357600080fd5b6001805474ff000000000000000000000000000000000000000019167401000000000000000000000000000000000000000090811791829055604051910460ff1615159042907fd1eeab1523249f14ee921a491896d8490e792d5525fc07e4bc05348b4a09cd9f90600090a3565b60015474010000000000000000000000000000000000000000900460ff1681565b61072a6107ad565b5060408051808201808352600160a060020a0384166000818152600460208181528683206000805160206107c9833981519152909552604686018590528651808703606601902054865292909152815283516000805160206107e98339815191528152600b810192909252925190819003602b0190205491810191909152919050565b604080518082018252906002908290803883395091929150505600616d6f756e7400000000000000000000000000000000000000000000000000006c6f636b6564556e74696c000000000000000000000000000000000000000000a165627a7a7230582017314b27302123949d58d9169df46496226d5426cd2a738ef21cfd39d408300400290000000000000000000000007ba8a5d59b21390a70b2ba968a183712e12a049c000000000000000000000000000000000000000000000000000000005b892dc00000000000000000000000000000000000000000000000000000000000000fa00000000000000000000000000000000000000000000000000000000000001f400000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000000000000000000000000000000000005b9cf440000000000000000000000000000000000000000000000000000000005bc48140000000000000000000000000000000000000000000000000000000005bec0e40",
  "constructorArguments": "0000000000000000000000007ba8a5d59b21390a70b2ba968a183712e12a049c000000000000000000000000000000000000000000000000000000005b892dc00000000000000000000000000000000000000000000000000000000000000fa00000000000000000000000000000000000000000000000000000000000001f400000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000000000000000000000000000000000005b9cf440000000000000000000000000000000000000000000000000000000005bc48140000000000000000000000000000000000000000000000000000000005bec0e40"
}