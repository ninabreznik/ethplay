{
  "address": "0x21f0f0fd3141ee9e11b3d7f13a1028cd515f459c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MrpToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-30\n*/\n\ncontract SafeMath {\n    \n    uint256 constant MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n    function safeAdd(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(x <= MAX_UINT256 - y);\n        return x + y;\n    }\n\n    function safeSub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(x >= y);\n        return x - y;\n    }\n\n    function safeMul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        if (y == 0) {\n            return 0;\n        }\n        require(x <= (MAX_UINT256 / y));\n        return x * y;\n    }\n}\ncontract TokenRecipientInterface {\n  function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;\n}\ncontract ERC20TokenInterface {\n  function totalSupply() public constant returns (uint256 _totalSupply);\n  function balanceOf(address _owner) public constant returns (uint256 balance);\n  function transfer(address _to, uint256 _value) public returns (bool success);\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n  function approve(address _spender, uint256 _value) public returns (bool success);\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract Owned {\n    address public owner;\n    address public newOwner;\n\n    function Owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        assert(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        require(_newOwner != owner);\n        newOwner = _newOwner;\n    }\n\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        OwnerUpdate(owner, newOwner);\n        owner = newOwner;\n        newOwner = 0x0;\n    }\n\n    event OwnerUpdate(address _prevOwner, address _newOwner);\n}\ncontract Lockable is Owned {\n\n    uint256 public lockedUntilBlock;\n\n    event ContractLocked(uint256 _untilBlock, string _reason);\n\n    modifier lockAffected {\n        require(block.number > lockedUntilBlock);\n        _;\n    }\n\n    function lockFromSelf(uint256 _untilBlock, string _reason) internal {\n        lockedUntilBlock = _untilBlock;\n        ContractLocked(_untilBlock, _reason);\n    }\n\n\n    function lockUntil(uint256 _untilBlock, string _reason) onlyOwner public {\n        lockedUntilBlock = _untilBlock;\n        ContractLocked(_untilBlock, _reason);\n    }\n}\n\n\n\n\n\n\ncontract ERC20Token is ERC20TokenInterface, SafeMath, Owned, Lockable {\n\n    /* Public variables of the token */\n    string public standard;\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n\n    bool mintingEnabled;\n\n    /* Private variables of the token */\n    uint256 supply = 0;\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowances;\n\n    event Mint(address indexed _to, uint256 _value);\n    event Burn(address indexed _from, uint _value);\n\n    /* Returns total supply of issued tokens */\n    function totalSupply() constant public returns (uint256) {\n        return supply;\n    }\n\n    /* Returns balance of address */\n    function balanceOf(address _owner) constant public returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    /* Transfers tokens from your address to other */\n    function transfer(address _to, uint256 _value) lockAffected public returns (bool success) {\n        require(_to != 0x0 && _to != address(this));\n        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);  // Deduct senders balance\n        balances[_to] = safeAdd(balanceOf(_to), _value);                // Add recivers blaance\n        Transfer(msg.sender, _to, _value);                              // Raise Transfer event\n        return true;\n    }\n\n    /* Approve other address to spend tokens on your account */\n    function approve(address _spender, uint256 _value) lockAffected public returns (bool success) {\n        allowances[msg.sender][_spender] = _value;        // Set allowance\n        Approval(msg.sender, _spender, _value);           // Raise Approval event\n        return true;\n    }\n\n    /* Approve and then communicate the approved contract in a single tx */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) lockAffected public returns (bool success) {\n        TokenRecipientInterface spender = TokenRecipientInterface(_spender);    // Cast spender to tokenRecipient contract\n        approve(_spender, _value);                                              // Set approval to contract for _value\n        spender.receiveApproval(msg.sender, _value, this, _extraData);          // Raise method on _spender contract\n        return true;\n    }\n\n    /* A contract attempts to get the coins */\n    function transferFrom(address _from, address _to, uint256 _value) lockAffected public returns (bool success) {\n        require(_to != 0x0 && _to != address(this));\n        balances[_from] = safeSub(balanceOf(_from), _value);                            // Deduct senders balance\n        balances[_to] = safeAdd(balanceOf(_to), _value);                                // Add recipient blaance\n        allowances[_from][msg.sender] = safeSub(allowances[_from][msg.sender], _value); // Deduct allowance for this address\n        Transfer(_from, _to, _value);                                                   // Raise Transfer event\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n        return allowances[_owner][_spender];\n    }\n\n    /* Owner can mint new tokens while minting is enabled */\n    function mint(address _to, uint256 _amount) onlyOwner public {\n        require(mintingEnabled);                       // Check if minting is enabled\n        supply = safeAdd(supply, _amount);              // Add new token count to totalSupply\n        balances[_to] = safeAdd(balances[_to], _amount);// Add tokens to recipients wallet\n        Mint(_to, _amount);                             // Raise event that anyone can see\n        Transfer(0x0, _to, _amount);                    // Raise transfer event\n    }\n\n    /* Anyone can destroy tokens on their walllet */\n    function burn(uint _amount) public {\n        balances[msg.sender] = safeSub(balanceOf(msg.sender), _amount);\n        supply = safeSub(supply, _amount);\n        Burn(msg.sender, _amount);\n        Transfer(msg.sender, 0x0, _amount);\n    }\n\n    /* Owner can salvage tokens that were accidentally sent to the smart contract address */\n    function salvageTokensFromContract(address _tokenAddress, address _to, uint _amount) onlyOwner public {\n        ERC20TokenInterface(_tokenAddress).transfer(_to, _amount);\n    }\n    \n    /* Owner can wipe all the data from the contract and disable all the methods */\n    function killContract() onlyOwner public {\n        selfdestruct(owner);\n    }\n\n    /* Owner can disable minting forever and ever */\n    function disableMinting() onlyOwner public {\n        mintingEnabled = false;\n    }\n}\n\n\n\n\ncontract MrpToken is ERC20Token {\n\n  /* Initializes contract */\n  function MrpToken() public {\n    standard = \"MoneyRebel token v1.0\";\n    name = \"MrpToken\";\n    symbol = \"MRP\";\n    decimals = 18;\n    mintingEnabled = true;\n    lockFromSelf(5010000, \"Lock before crowdsale starts\");\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"killContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"salvageTokensFromContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_untilBlock\",\"type\":\"uint256\"},{\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"lockUntil\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedUntilBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_untilBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"ContractLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "6060604052600060075534156200001557600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040805190810160405280601581526020017f4d6f6e6579526562656c20746f6b656e2076312e30000000000000000000000081525060039080519060200190620000a292919062000286565b506040805190810160405280600881526020017f4d7270546f6b656e00000000000000000000000000000000000000000000000081525060049080519060200190620000f092919062000286565b506040805190810160405280600381526020017f4d52500000000000000000000000000000000000000000000000000000000000815250600590805190602001906200013e92919062000286565b506012600660006101000a81548160ff021916908360ff1602179055506001600660016101000a81548160ff021916908315150217905550620001ce624c72506040805190810160405280601c81526020017f4c6f636b206265666f72652063726f776473616c652073746172747300000000815250620001d46401000000000262001afb176401000000009004565b62000335565b816002819055507f2c1bcb4f0c190ca2fcb1bb54323892ec36606ef7958dc7a4e1dc599fe2c1c0f082826040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156200024657808201518184015260208101905062000229565b50505050905090810190601f168015620002745780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002c957805160ff1916838001178555620002fa565b82800160010185558215620002fa579182015b82811115620002f9578251825591602001919060010190620002dc565b5b5090506200030991906200030d565b5090565b6200033291905b808211156200032e57600081600090555060010162000314565b5090565b90565b611bd680620003456000396000f300606060405260043610610128576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461012d578063095ea7b3146101bb57806318160ddd146102155780631c02708d1461023e57806323b872dd14610253578063313ce567146102cc57806340c10f19146102fb57806342966c681461033d5780635a3b7e421461036057806370a08231146103ee57806379ba50971461043b5780637e5cd5c1146104505780638da5cb5b1461046557806395d89b41146104ba578063a0929cda14610548578063a9059cbb146105a9578063b26eafe414610603578063cae9ca5114610669578063d4ee1d9014610706578063d8162db71461075b578063dd62ed3e14610784578063f2fde38b146107f0575b600080fd5b341561013857600080fd5b610140610829565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610180578082015181840152602081019050610165565b50505050905090810190601f1680156101ad5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101c657600080fd5b6101fb600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506108c7565b604051808215151515815260200191505060405180910390f35b341561022057600080fd5b6102286109c9565b6040518082815260200191505060405180910390f35b341561024957600080fd5b6102516109d3565b005b341561025e57600080fd5b6102b2600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a65565b604051808215151515815260200191505060405180910390f35b34156102d757600080fd5b6102df610cf5565b604051808260ff1660ff16815260200191505060405180910390f35b341561030657600080fd5b61033b600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610d08565b005b341561034857600080fd5b61035e6004808035906020019091905050610ebb565b005b341561036b57600080fd5b610373610fc3565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103b3578082015181840152602081019050610398565b50505050905090810190601f1680156103e05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103f957600080fd5b610425600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611061565b6040518082815260200191505060405180910390f35b341561044657600080fd5b61044e6110aa565b005b341561045b57600080fd5b610463611286565b005b341561047057600080fd5b6104786112fb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156104c557600080fd5b6104cd611320565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561050d5780820151818401526020810190506104f2565b50505050905090810190601f16801561053a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561055357600080fd5b6105a7600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506113be565b005b34156105b457600080fd5b6105e9600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506114e2565b604051808215151515815260200191505060405180910390f35b341561060e57600080fd5b610667600480803590602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061166b565b005b341561067457600080fd5b6106ec600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611772565b604051808215151515815260200191505060405180910390f35b341561071157600080fd5b6107196118f6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561076657600080fd5b61076e61191c565b6040518082815260200191505060405180910390f35b341561078f57600080fd5b6107da600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611922565b6040518082815260200191505060405180910390f35b34156107fb57600080fd5b610827600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506119a9565b005b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108bf5780601f10610894576101008083540402835291602001916108bf565b820191906000526020600020905b8154815290600101906020018083116108a257829003601f168201915b505050505081565b6000600254431115156108d957600080fd5b81600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600754905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a2b57fe5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b600060025443111515610a7757600080fd5b60008373ffffffffffffffffffffffffffffffffffffffff1614158015610aca57503073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b1515610ad557600080fd5b610ae7610ae185611061565b83611aa1565b600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b3c610b3684611061565b83611abd565b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c05600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611aa1565b600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600660009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d6057fe5b600660019054906101000a900460ff161515610d7b57600080fd5b610d8760075482611abd565b600781905550610dd6600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611abd565b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885826040518082815260200191505060405180910390a28173ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b610ecd610ec733611061565b82611aa1565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f1c60075482611aa1565b6007819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a260003373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110595780601f1061102e57610100808354040283529160200191611059565b820191906000526020600020905b81548152906001019060200180831161103c57829003601f168201915b505050505081565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561110657600080fd5b7f343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112de57fe5b6000600660016101000a81548160ff021916908315150217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113b65780601f1061138b576101008083540402835291602001916113b6565b820191906000526020600020905b81548152906001019060200180831161139957829003601f168201915b505050505081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561141657fe5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15156114c157600080fd5b6102c65a03f115156114d257600080fd5b5050506040518051905050505050565b6000600254431115156114f457600080fd5b60008373ffffffffffffffffffffffffffffffffffffffff161415801561154757503073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b151561155257600080fd5b61156461155e33611061565b83611aa1565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506115b96115b384611061565b83611abd565b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116c357fe5b816002819055507f2c1bcb4f0c190ca2fcb1bb54323892ec36606ef7958dc7a4e1dc599fe2c1c0f082826040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611733578082015181840152602081019050611718565b50505050905090810190601f1680156117605780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050565b6000806002544311151561178557600080fd5b84905061179285856108c7565b508073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561188857808201518184015260208101905061186d565b50505050905090810190601f1680156118b55780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15156118d657600080fd5b6102c65a03f115156118e757600080fd5b50505060019150509392505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b6000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611a0157fe5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611a5d57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000818310151515611ab257600080fd5b818303905092915050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038311151515611af057600080fd5b818301905092915050565b816002819055507f2c1bcb4f0c190ca2fcb1bb54323892ec36606ef7958dc7a4e1dc599fe2c1c0f082826040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611b6b578082015181840152602081019050611b50565b50505050905090810190601f168015611b985780820380516001836020036101000a031916815260200191505b50935050505060405180910390a150505600a165627a7a72305820f479d06491150596d827ad18ed9f7307e14353a204dd55ceaeac11c4e1bb72dc0029"
}