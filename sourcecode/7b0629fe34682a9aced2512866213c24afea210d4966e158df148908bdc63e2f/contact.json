{
  "address": "0x8bcd8dafc917bfe3c82313e05fc9738aeb72d555",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Token",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-30\n*/\n\npragma solidity 0.4.18;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n        if(a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    modifier onlyOwner() { require(msg.sender == owner); _; }\n\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        owner = newOwner;\n        OwnershipTransferred(owner, newOwner);\n    }\n}\n\ncontract Manageable is Ownable {\n    address[] public managers;\n\n    event ManagerAdded(address indexed manager);\n    event ManagerRemoved(address indexed manager);\n\n    modifier onlyManager() { require(isManager(msg.sender)); _; }\n\n    function countManagers() view public returns(uint) {\n        return managers.length;\n    }\n\n    function getManagers() view public returns(address[]) {\n        return managers;\n    }\n\n    function isManager(address _manager) view public returns(bool) {\n        for(uint i = 0; i < managers.length; i++) {\n            if(managers[i] == _manager) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function addManager(address _manager) onlyOwner public {\n        require(_manager != address(0));\n        require(!isManager(_manager));\n\n        managers.push(_manager);\n\n        ManagerAdded(_manager);\n    }\n\n    function removeManager(address _manager) onlyOwner public {\n        require(isManager(_manager));\n\n        uint index = 0;\n        for(uint i = 0; i < managers.length; i++) {\n            if(managers[i] == _manager) {\n                index = i;\n            }\n        }\n\n        for(; index < managers.length - 1; index++) {\n            managers[index] = managers[index + 1];\n        }\n        \n        managers.length--;\n        ManagerRemoved(_manager);\n    }\n}\n\ncontract Withdrawable is Ownable {\n    function withdrawEther(address _to, uint _value) onlyOwner public returns(bool) {\n        require(_to != address(0));\n        require(this.balance >= _value);\n\n        _to.transfer(_value);\n\n        return true;\n    }\n\n    function withdrawTokens(ERC20 _token, address _to, uint _value) onlyOwner public returns(bool) {\n        require(_to != address(0));\n\n        return _token.transfer(_to, _value);\n    }\n}\n\ncontract Pausable is Ownable {\n    bool public paused = false;\n\n    event Pause();\n    event Unpause();\n\n    modifier whenNotPaused() { require(!paused); _; }\n    modifier whenPaused() { require(paused); _; }\n\n    function pause() onlyOwner whenNotPaused public {\n        paused = true;\n        Pause();\n    }\n\n    function unpause() onlyOwner whenPaused public {\n        paused = false;\n        Unpause();\n    }\n}\n\ncontract ERC20 {\n    uint256 public totalSupply;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function balanceOf(address who) public view returns(uint256);\n    function transfer(address to, uint256 value) public returns(bool);\n    function transferFrom(address from, address to, uint256 value) public returns(bool);\n    function allowance(address owner, address spender) public view returns(uint256);\n    function approve(address spender, uint256 value) public returns(bool);\n}\n\ncontract StandardToken is ERC20 {\n    using SafeMath for uint256;\n\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n\n    mapping(address => uint256) balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    function StandardToken(string _name, string _symbol, uint8 _decimals) public {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n    }\n\n    function balanceOf(address _owner) public view returns(uint256 balance) {\n        return balances[_owner];\n    }\n\n    function transfer(address _to, uint256 _value) public returns(bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\n        Transfer(msg.sender, _to, _value);\n\n        return true;\n    }\n    \n    function multiTransfer(address[] _to, uint256[] _value) public returns(bool) {\n        require(_to.length == _value.length);\n\n        for(uint i = 0; i < _to.length; i++) {\n            transfer(_to[i], _value[i]);\n        }\n\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n        Transfer(_from, _to, _value);\n\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns(uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    function approve(address _spender, uint256 _value) public returns(bool) {\n        allowed[msg.sender][_spender] = _value;\n\n        Approval(msg.sender, _spender, _value);\n\n        return true;\n    }\n\n    function increaseApproval(address _spender, uint _addedValue) public returns(bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns(bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n\n        if(_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n    }\n}\n\ncontract MintableToken is StandardToken, Ownable {\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n\n    bool public mintingFinished = false;\n\n    modifier canMint() { require(!mintingFinished); _; }\n\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns(bool) {\n        totalSupply = totalSupply.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n\n        Mint(_to, _amount);\n        Transfer(address(0), _to, _amount);\n\n        return true;\n    }\n\n    function finishMinting() onlyOwner canMint public returns(bool) {\n        mintingFinished = true;\n\n        MintFinished();\n\n        return true;\n    }\n}\n\ncontract CappedToken is MintableToken {\n    uint256 public cap;\n\n    function CappedToken(uint256 _cap) public {\n        require(_cap > 0);\n        cap = _cap;\n    }\n\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns(bool) {\n        require(totalSupply.add(_amount) <= cap);\n\n        return super.mint(_to, _amount);\n    }\n}\n\ncontract BurnableToken is StandardToken {\n    event Burn(address indexed burner, uint256 value);\n\n    function burn(uint256 _value) public {\n        require(_value <= balances[msg.sender]);\n\n        address burner = msg.sender;\n\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n\n        Burn(burner, _value);\n    }\n}\n\ncontract Token is CappedToken, BurnableToken, Withdrawable {\n    function Token() CappedToken(10000000000e8) StandardToken(\"MIRAMIND Token\", \"MIRA\", 8) public {\n        \n    }\n}\n\ncontract Crowdsale is Manageable, Withdrawable, Pausable {\n    using SafeMath for uint;\n\n    Token public token;\n    bool public crowdsaleClosed = false;\n\n    event ExternalPurchase(address indexed holder, string tx, string currency, uint256 currencyAmount, uint256 rateToEther, uint256 tokenAmount);\n    event CrowdsaleClose();\n   \n    function Crowdsale() public {\n        token = new Token();\n\n        token.mint(0xaC69e2AAB7E244EA6150CF09DFA2D7546bF55e37, 1300000000e8);     // Miners 13%\n        token.mint(0xf75693a703cEfc0318602859A49caa20b32FF155, 500000000e8);      // Team 5%\n        token.mint(0x711D8fB2222498d1ACe3378da2e16CE50258b2Bf, 500000000e8);      // Partners 5%\n        token.mint(0xCf94b6bbc18F35d3fF99A03B8238dF467fc3351D, 300000000e8);      // Advisors 3%\n\n    }\n\n    function externalPurchase(address _to, string _tx, string _currency, uint _value, uint256 _rate, uint256 _tokens) whenNotPaused onlyManager public {\n        token.mint(_to, _tokens);\n        ExternalPurchase(_to, _tx, _currency, _value, _rate, _tokens);\n    }\n\n    function closeCrowdsale(address _to) onlyOwner public {\n        require(!crowdsaleClosed);\n\n        token.transferOwnership(_to);\n        crowdsaleClosed = true;\n\n        CrowdsaleClose();\n    }\n        \n}",
  "bytecode": "60606040526000600660146101000a81548160ff02191690831515021790555034156200002b57600080fd5b670de0b6b3a76400006040805190810160405280600e81526020017f4d4952414d494e4420546f6b656e0000000000000000000000000000000000008152506040805190810160405280600481526020017f4d4952410000000000000000000000000000000000000000000000000000000081525060088260019080519060200190620000ba92919062000151565b508160029080519060200190620000d392919062000151565b5080600360006101000a81548160ff021916908360ff16021790555050505033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000811115156200014357600080fd5b806007819055505062000200565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200019457805160ff1916838001178555620001c5565b82800160010185558215620001c5579182015b82811115620001c4578251825591602001919060010190620001a7565b5b509050620001d49190620001d8565b5090565b620001fd91905b80821115620001f9576000816000905550600101620001df565b5090565b90565b611f5f80620002106000396000f30060606040526004361061011d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305d2035b1461012257806306fdde031461014f578063095ea7b3146101dd57806318160ddd146102375780631e89d5451461026057806323b872dd14610312578063313ce5671461038b578063355274ea146103ba57806340c10f19146103e357806342966c681461043d578063522f6815146104605780635e35359e146104ba578063661884631461053357806370a082311461058d5780637d64bcb4146105da5780638da5cb5b1461060757806395d89b411461065c578063a9059cbb146106ea578063d73dd62314610744578063dd62ed3e1461079e578063f2fde38b1461080a575b600080fd5b341561012d57600080fd5b610135610843565b604051808215151515815260200191505060405180910390f35b341561015a57600080fd5b610162610856565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101a2578082015181840152602081019050610187565b50505050905090810190601f1680156101cf5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101e857600080fd5b61021d600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506108f4565b604051808215151515815260200191505060405180910390f35b341561024257600080fd5b61024a6109e6565b6040518082815260200191505060405180910390f35b341561026b57600080fd5b6102f8600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919050506109ec565b604051808215151515815260200191505060405180910390f35b341561031d57600080fd5b610371600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a5e565b604051808215151515815260200191505060405180910390f35b341561039657600080fd5b61039e610e1d565b604051808260ff1660ff16815260200191505060405180910390f35b34156103c557600080fd5b6103cd610e30565b6040518082815260200191505060405180910390f35b34156103ee57600080fd5b610423600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610e36565b604051808215151515815260200191505060405180910390f35b341561044857600080fd5b61045e6004808035906020019091905050610ee7565b005b341561046b57600080fd5b6104a0600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061103c565b604051808215151515815260200191505060405180910390f35b34156104c557600080fd5b610519600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611146565b604051808215151515815260200191505060405180910390f35b341561053e57600080fd5b610573600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506112af565b604051808215151515815260200191505060405180910390f35b341561059857600080fd5b6105c4600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611540565b6040518082815260200191505060405180910390f35b34156105e557600080fd5b6105ed611589565b604051808215151515815260200191505060405180910390f35b341561061257600080fd5b61061a611651565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561066757600080fd5b61066f611677565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106af578082015181840152602081019050610694565b50505050905090810190601f1680156106dc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156106f557600080fd5b61072a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611715565b604051808215151515815260200191505060405180910390f35b341561074f57600080fd5b610784600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611939565b604051808215151515815260200191505060405180910390f35b34156107a957600080fd5b6107f4600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611b35565b6040518082815260200191505060405180910390f35b341561081557600080fd5b610841600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611bbc565b005b600660149054906101000a900460ff1681565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108ec5780601f106108c1576101008083540402835291602001916108ec565b820191906000526020600020905b8154815290600101906020018083116108cf57829003601f168201915b505050505081565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b600080825184511415156109ff57600080fd5b600090505b8351811015610a5357610a458482815181101515610a1e57fe5b906020019060200201518483815181101515610a3657fe5b90602001906020020151611715565b508080600101915050610a04565b600191505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610a9b57600080fd5b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610ae957600080fd5b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610b7457600080fd5b610bc682600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d1490919063ffffffff16565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c5b82600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d2d90919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d2d82600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d1490919063ffffffff16565b600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600360009054906101000a900460ff1681565b60075481565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e9457600080fd5b600660149054906101000a900460ff16151515610eb057600080fd5b600754610ec883600054611d2d90919063ffffffff16565b11151515610ed557600080fd5b610edf8383611d4b565b905092915050565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610f3757600080fd5b339050610f8c82600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d1490919063ffffffff16565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610fe482600054611d1490919063ffffffff16565b6000819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a25050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561109a57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156110d657600080fd5b813073ffffffffffffffffffffffffffffffffffffffff1631101515156110fc57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050151561113c57600080fd5b6001905092915050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111a457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156111e057600080fd5b8373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561128b57600080fd5b6102c65a03f1151561129c57600080fd5b5050506040518051905090509392505050565b600080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808311156113c0576000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611454565b6113d38382611d1490919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115e757600080fd5b600660149054906101000a900460ff1615151561160357600080fd5b6001600660146101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561170d5780601f106116e25761010080835404028352916020019161170d565b820191906000526020600020905b8154815290600101906020018083116116f057829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561175257600080fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156117a057600080fd5b6117f282600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d1490919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061188782600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d2d90919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60006119ca82600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d2d90919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c1857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611c5457600080fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b6000828211151515611d2257fe5b818303905092915050565b6000808284019050838110151515611d4157fe5b8091505092915050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611da957600080fd5b600660149054906101000a900460ff16151515611dc557600080fd5b611dda82600054611d2d90919063ffffffff16565b600081905550611e3282600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d2d90919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050929150505600a165627a7a72305820e7d0a1749b9179a27fc34c7888e99c44b54e99ea39e90df36454bee56910b3ee0029"
}