{
  "address": "0x968f94b857afc6aae0166839a2f21abfc2036a0a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenSale",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-25\n*/\n\npragma solidity 0.4.25;\n\n// File: contracts/lib/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"only owner is able call this function\");\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: contracts/lib/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool private _paused;\n\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @return true if the contract is paused, false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused, \"must not be paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused, \"must be paused\");\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyOwner whenNotPaused {\n        _paused = true;\n        emit Pause();\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() onlyOwner whenPaused public {\n        _paused = false;\n        emit Unpause();\n    }\n}\n\n// File: contracts/lib/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: contracts/lib/Crowdsale.sol\n\n/**\n * @title Crowdsale - modified from zeppelin-solidity library\n * @dev Crowdsale is a base contract for managing a token crowdsale.\n * Crowdsales have a start and end timestamps, where investors can make\n * token purchases and the crowdsale will assign them tokens based\n * on a token per ETH rate. Funds collected are forwarded to a wallet\n * as they arrive.\n */\ncontract Crowdsale {\n    // start and end timestamps where investments are allowed (both inclusive)\n    uint256 public startTime;\n    uint256 public endTime;\n\n    // how many token units a buyer gets per wei\n    uint256 public rate;\n\n    // amount of raised money in wei\n    uint256 public weiRaised;\n\n\n    // event for token purchase logging\n    // purchaser who paid for the tokens\n    // beneficiary who got the tokens\n    // value weis paid for purchase\n    // amount amount of tokens purchased\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n    function initCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate) public {\n        require(\n            startTime == 0 && endTime == 0 && rate == 0,\n            \"Global variables must be empty when initializing crowdsale!\"\n        );\n        require(_startTime >= now, \"_startTime must be more than current time!\");\n        require(_endTime >= _startTime, \"_endTime must be more than _startTime!\");\n\n        startTime = _startTime;\n        endTime = _endTime;\n        rate = _rate;\n    }\n\n    // @return true if crowdsale event has ended\n    function hasEnded() public view returns (bool) {\n        return now > endTime;\n    }\n}\n\n// File: contracts/lib/FinalizableCrowdsale.sol\n\n/**\n * @title FinalizableCrowdsale\n * @dev Extension of Crowdsale where an owner can do extra work\n * after finishing.\n */\ncontract FinalizableCrowdsale is Crowdsale, Ownable {\n  using SafeMath for uint256;\n\n  bool public isFinalized = false;\n\n  event Finalized();\n\n  /**\n   * @dev Must be called after crowdsale ends, to do some extra finalization\n   * work. Calls the contract's finalization function.\n   */\n  function finalize() onlyOwner public {\n    require(!isFinalized);\n    require(hasEnded());\n\n    finalization();\n    emit Finalized();\n\n    isFinalized = true;\n  }\n\n  /**\n   * @dev Can be overridden to add finalization logic. The overriding function\n   * should call super.finalization() to ensure the chain of finalization is\n   * executed entirely.\n   */\n  function finalization() internal {\n  }\n}\n\n// File: contracts/lib/ERC20Plus.sol\n\n/**\n * @title ERC20 interface with additional functions\n * @dev it has added functions that deals to minting, pausing token and token information\n */\ncontract ERC20Plus {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // additonal functions\n    function mint(address _to, uint256 _amount) public returns (bool);\n    function owner() public view returns (address);\n    function transferOwnership(address newOwner) public;\n    function name() public view returns (string);\n    function symbol() public view returns (string);\n    function decimals() public view returns (uint8);\n    function paused() public view returns (bool);\n\n}\n\n// File: contracts/Whitelist.sol\n\n/**\n * @title Whitelist - crowdsale whitelist contract\n * @author Gustavo Guimaraes - <[emailÂ protected]>\n */\ncontract Whitelist is Ownable {\n    mapping(address => bool) public allowedAddresses;\n\n    event WhitelistUpdated(uint256 timestamp, string operation, address indexed member);\n\n    /**\n    * @dev Adds single address to whitelist.\n    * @param _address Address to be added to the whitelist\n    */\n    function addToWhitelist(address _address) external onlyOwner {\n        allowedAddresses[_address] = true;\n        emit WhitelistUpdated(now, \"Added\", _address);\n    }\n\n    /**\n     * @dev add various whitelist addresses\n     * @param _addresses Array of ethereum addresses\n     */\n    function addManyToWhitelist(address[] _addresses) external onlyOwner {\n        for (uint256 i = 0; i < _addresses.length; i++) {\n            allowedAddresses[_addresses[i]] = true;\n            emit WhitelistUpdated(now, \"Added\", _addresses[i]);\n        }\n    }\n\n    /**\n     * @dev remove whitelist addresses\n     * @param _addresses Array of ethereum addresses\n     */\n    function removeManyFromWhitelist(address[] _addresses) public onlyOwner {\n        for (uint256 i = 0; i < _addresses.length; i++) {\n            allowedAddresses[_addresses[i]] = false;\n            emit WhitelistUpdated(now, \"Removed\", _addresses[i]);\n        }\n    }\n}\n\n// File: contracts/TokenSaleInterface.sol\n\n/**\n * @title TokenSale contract interface\n */\ninterface TokenSaleInterface {\n    function init\n    (\n        uint256 _startTime,\n        uint256 _endTime,\n        address _whitelist,\n        address _starToken,\n        address _companyToken,\n        address _tokenOwnerAfterSale,\n        uint256 _rate,\n        uint256 _starRate,\n        address _wallet,\n        uint256 _softCap,\n        uint256 _crowdsaleCap,\n        bool    _isWeiAccepted,\n        bool    _isMinting\n    )\n    external;\n}\n\n// File: contracts/FundsSplitterInterface.sol\n\ncontract FundsSplitterInterface {\n    function splitFunds() public payable;\n    function splitStarFunds() public;\n}\n\n// File: contracts\\TokenSale.sol\n\n/**\n * @title Token Sale contract - crowdsale of company tokens.\n * @author Gustavo Guimaraes - <[emailÂ protected]>\n */\ncontract TokenSale is FinalizableCrowdsale, Pausable {\n    uint256 public softCap;\n    uint256 public crowdsaleCap;\n    uint256 public tokensSold;\n    // amount of raised money in STAR\n    uint256 public starRaised;\n    uint256 public starRate;\n    address public tokenOwnerAfterSale;\n    bool public isWeiAccepted;\n    bool public isMinting;\n\n    // external contracts\n    Whitelist public whitelist;\n    ERC20Plus public starToken;\n    FundsSplitterInterface public wallet;\n\n    // The token being sold\n    ERC20Plus public tokenOnSale;\n\n    event TokenRateChanged(uint256 previousRate, uint256 newRate);\n    event TokenStarRateChanged(uint256 previousStarRate, uint256 newStarRate);\n    event TokenPurchaseWithStar(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n    /**\n     * @dev initialization function\n     * @param _startTime The timestamp of the beginning of the crowdsale\n     * @param _endTime Timestamp when the crowdsale will finish\n     * @param _whitelist contract containing the whitelisted addresses\n     * @param _starToken STAR token contract address\n     * @param _companyToken ERC20 contract address that has minting capabilities\n     * @param _rate The token rate per ETH\n     * @param _starRate The token rate per STAR\n     * @param _wallet FundsSplitter wallet that redirects funds to client and Starbase.\n     * @param _softCap Soft cap of the token sale\n     * @param _crowdsaleCap Cap for the token sale\n     * @param _isWeiAccepted Bool for acceptance of ether in token sale\n     * @param _isMinting Bool that indicates whether token sale mints ERC20 tokens on sale or simply transfers them\n     */\n    function init(\n        uint256 _startTime,\n        uint256 _endTime,\n        address _whitelist,\n        address _starToken,\n        address _companyToken,\n        address _tokenOwnerAfterSale,\n        uint256 _rate,\n        uint256 _starRate,\n        address _wallet,\n        uint256 _softCap,\n        uint256 _crowdsaleCap,\n        bool    _isWeiAccepted,\n        bool    _isMinting\n    )\n        external\n    {\n        require(\n            whitelist == address(0) &&\n            starToken == address(0) &&\n            tokenOwnerAfterSale == address(0) &&\n            rate == 0 &&\n            starRate == 0 &&\n            tokenOnSale == address(0) &&\n            softCap == 0 &&\n            crowdsaleCap == 0 &&\n            wallet == address(0),\n            \"Global variables should not have been set before!\"\n        );\n\n        require(\n            _whitelist != address(0) &&\n            _starToken != address(0) &&\n            !(_rate == 0 && _starRate == 0) &&\n            _companyToken != address(0) &&\n            _softCap != 0 &&\n            _crowdsaleCap != 0 &&\n            _wallet != 0,\n            \"Parameter variables cannot be empty!\"\n        );\n\n        require(_softCap < _crowdsaleCap, \"SoftCap should be smaller than crowdsaleCap!\");\n\n        if (_isWeiAccepted) {\n            require(_rate > 0, \"Set a rate for Wei, when it is accepted for purchases!\");\n        } else {\n            require(_rate == 0, \"Only set a rate for Wei, when it is accepted for purchases!\");\n        }\n\n        initCrowdsale(_startTime, _endTime, _rate);\n        tokenOnSale = ERC20Plus(_companyToken);\n        whitelist = Whitelist(_whitelist);\n        starToken = ERC20Plus(_starToken);\n        wallet = FundsSplitterInterface(_wallet);\n        tokenOwnerAfterSale = _tokenOwnerAfterSale;\n        starRate = _starRate;\n        isWeiAccepted = _isWeiAccepted;\n        isMinting = _isMinting;\n        _owner = tx.origin;\n\n        softCap = _softCap.mul(10 ** 18);\n        crowdsaleCap = _crowdsaleCap.mul(10 ** 18);\n\n        if (isMinting) {\n            require(tokenOwnerAfterSale != address(0), \"TokenOwnerAftersale cannot be empty when minting tokens!\");\n            require(ERC20Plus(tokenOnSale).paused(), \"Company token must be paused upon initialization!\");\n        } else {\n            require(tokenOwnerAfterSale == address(0), \"TokenOwnerAftersale must be empty when minting tokens!\");\n        }\n\n        require(ERC20Plus(tokenOnSale).decimals() == 18, \"Only sales for tokens with 18 decimals are supported!\");\n    }\n\n    modifier isWhitelisted(address beneficiary) {\n        require(whitelist.allowedAddresses(beneficiary), \"Beneficiary not whitelisted!\");\n        _;\n    }\n\n    /**\n     * @dev override fallback function. cannot use it\n     */\n    function () external payable {\n        revert(\"No fallback function defined!\");\n    }\n\n    /**\n     * @dev change crowdsale ETH rate\n     * @param newRate Figure that corresponds to the new ETH rate per token\n     */\n    function setRate(uint256 newRate) external onlyOwner {\n        require(isWeiAccepted, \"Sale must allow Wei for purchases to set a rate for Wei!\");\n        require(newRate != 0, \"ETH rate must be more than 0!\");\n\n        emit TokenRateChanged(rate, newRate);\n        rate = newRate;\n    }\n\n    /**\n     * @dev change crowdsale STAR rate\n     * @param newStarRate Figure that corresponds to the new STAR rate per token\n     */\n    function setStarRate(uint256 newStarRate) external onlyOwner {\n        require(newStarRate != 0, \"Star rate must be more than 0!\");\n\n        emit TokenStarRateChanged(starRate, newStarRate);\n        starRate = newStarRate;\n    }\n\n    /**\n     * @dev allows sale to receive wei or not\n     */\n    function setIsWeiAccepted(bool _isWeiAccepted, uint256 _rate) external onlyOwner {\n        if (_isWeiAccepted) {\n            require(_rate > 0, \"When accepting Wei, you need to set a conversion rate!\");\n        } else {\n            require(_rate == 0, \"When not accepting Wei, you need to set a conversion rate of 0!\");\n        }\n\n        isWeiAccepted = _isWeiAccepted;\n        rate = _rate;\n    }\n\n    /**\n     * @dev function that allows token purchases with STAR or ETH\n     * @param beneficiary Address of the purchaser\n     */\n    function buyTokens(address beneficiary)\n        public\n        payable\n        whenNotPaused\n        isWhitelisted(beneficiary)\n    {\n        require(beneficiary != address(0));\n        require(validPurchase() && tokensSold < crowdsaleCap);\n        if (isMinting) {\n            require(tokenOnSale.owner() == address(this), \"The token owner must be contract address!\");\n        }\n\n        if (!isWeiAccepted) {\n            require(msg.value == 0);\n        } else if (msg.value > 0) {\n            buyTokensWithWei(beneficiary);\n        }\n\n        // beneficiary must allow TokenSale address to transfer star tokens on its behalf\n        uint256 starAllocationToTokenSale = starToken.allowance(beneficiary, this);\n        if (starAllocationToTokenSale > 0) {\n            // calculate token amount to be created\n            uint256 tokens = starAllocationToTokenSale.mul(starRate).div(1000);\n\n            // remainder logic\n            if (tokensSold.add(tokens) > crowdsaleCap) {\n                tokens = crowdsaleCap.sub(tokensSold);\n\n                starAllocationToTokenSale = tokens.div(starRate).div(1000);\n            }\n\n            // update state\n            starRaised = starRaised.add(starAllocationToTokenSale);\n\n            tokensSold = tokensSold.add(tokens);\n            sendPurchasedTokens(beneficiary, tokens);\n            emit TokenPurchaseWithStar(msg.sender, beneficiary, starAllocationToTokenSale, tokens);\n\n            // forward funds\n            starToken.transferFrom(beneficiary, wallet, starAllocationToTokenSale);\n            wallet.splitStarFunds();\n        }\n    }\n\n    /**\n     * @dev function that allows token purchases with Wei\n     * @param beneficiary Address of the purchaser\n     */\n    function buyTokensWithWei(address beneficiary)\n        internal\n    {\n        uint256 weiAmount = msg.value;\n        uint256 weiRefund = 0;\n\n        // calculate token amount to be created\n        uint256 tokens = weiAmount.mul(rate);\n\n        // remainder logic\n        if (tokensSold.add(tokens) > crowdsaleCap) {\n            tokens = crowdsaleCap.sub(tokensSold);\n            weiAmount = tokens.div(rate);\n\n            weiRefund = msg.value.sub(weiAmount);\n        }\n\n        // update state\n        weiRaised = weiRaised.add(weiAmount);\n\n        tokensSold = tokensSold.add(tokens);\n        sendPurchasedTokens(beneficiary, tokens);\n        emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n\n        address(wallet).transfer(weiAmount);\n        wallet.splitFunds();\n\n        if (weiRefund > 0) {\n            msg.sender.transfer(weiRefund);\n        }\n    }\n\n    // isMinting checker -- it either mints ERC20 token or transfers them\n    function sendPurchasedTokens(address _beneficiary, uint256 _tokens) internal {\n        isMinting ? tokenOnSale.mint(_beneficiary, _tokens) : tokenOnSale.transfer(_beneficiary, _tokens);\n    }\n\n    // check for softCap achievement\n    // @return true when softCap is reached\n    function hasReachedSoftCap() public view returns (bool) {\n        if (tokensSold >= softCap) {\n            return true;\n        }\n\n        return false;\n    }\n\n    // override Crowdsale#hasEnded to add cap logic\n    // @return true if crowdsale event has ended\n    function hasEnded() public view returns (bool) {\n        if (tokensSold >= crowdsaleCap) {\n            return true;\n        }\n\n        return super.hasEnded();\n    }\n\n    /**\n     * @dev override Crowdsale#validPurchase\n     * @return true if the transaction can buy tokens\n     */\n    function validPurchase() internal view returns (bool) {\n        return now >= startTime && now <= endTime;\n    }\n\n    /**\n     * @dev finalizes crowdsale\n     */\n    function finalization() internal {\n        uint256 remainingTokens = isMinting ? crowdsaleCap.sub(tokensSold) : tokenOnSale.balanceOf(address(this));\n\n        if (remainingTokens > 0) {\n            sendPurchasedTokens(wallet, remainingTokens);\n        }\n\n        if (isMinting) tokenOnSale.transferOwnership(tokenOwnerAfterSale);\n\n        super.finalization();\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"starRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasReachedSoftCap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_whitelist\",\"type\":\"address\"},{\"name\":\"_starToken\",\"type\":\"address\"},{\"name\":\"_companyToken\",\"type\":\"address\"},{\"name\":\"_tokenOwnerAfterSale\",\"type\":\"address\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_starRate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_softCap\",\"type\":\"uint256\"},{\"name\":\"_crowdsaleCap\",\"type\":\"uint256\"},{\"name\":\"_isWeiAccepted\",\"type\":\"bool\"},{\"name\":\"_isMinting\",\"type\":\"bool\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenOnSale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"initCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newStarRate\",\"type\":\"uint256\"}],\"name\":\"setStarRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"starToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isWeiAccepted\",\"type\":\"bool\"},{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setIsWeiAccepted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenOwnerAfterSale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isWeiAccepted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"starRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"TokenRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousStarRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newStarRate\",\"type\":\"uint256\"}],\"name\":\"TokenStarRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchaseWithStar\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]",
  "bytecode": "6080604081905260048054600160a860020a031916331790819055600160a060020a0316906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36004805460a860020a60ff021916905561238c8061006b6000396000f3006080604052600436106101925763ffffffff60e060020a6000350416630809532981146101e257806313a666a6146102095780632a8092df146102325780632c4e722e146102475780633197cbb61461025c57806334d8c24d1461027157806334fcf437146102cf5780633f4ba83a146102e75780634042b66f146102fc5780634951a18f146103115780634bb278f314610326578063518ab2a81461033b578063521eb273146103505780635c975abb1461038157806360e6a44014610396578063715018a6146103ab57806378e97925146103c05780638456cb59146103d55780638d4e4083146103ea5780638da5cb5b146103ff5780638f32d59b14610414578063906a26e01461042957806393e59dc11461043e5780639aa615ee14610453578063a00ec99314610471578063b2bdfa7b14610489578063b7ca51e81461049e578063ec8ac4d8146104b3578063ecb70fb7146104c7578063ef6da43c146104dc578063f07a1d62146104f9578063f2fde38b1461050e578063f5ba03dd1461052f578063fffae04414610544575b6040805160e560020a62461bcd02815260206004820152601d60248201527f4e6f2066616c6c6261636b2066756e6374696f6e20646566696e656421000000604482015290519081900360640190fd5b3480156101ee57600080fd5b506101f7610559565b60408051918252519081900360200190f35b34801561021557600080fd5b5061021e61055f565b604080519115158252519081900360200190f35b34801561023e57600080fd5b5061021e61057d565b34801561025357600080fd5b506101f761058d565b34801561026857600080fd5b506101f7610593565b34801561027d57600080fd5b506102cd600435602435600160a060020a0360443581169060643581169060843581169060a43581169060c4359060e4359061010435166101243561014435610164351515610184351515610599565b005b3480156102db57600080fd5b506102cd600435610d3a565b3480156102f357600080fd5b506102cd610eb9565b34801561030857600080fd5b506101f7610fc3565b34801561031d57600080fd5b506101f7610fc9565b34801561033257600080fd5b506102cd610fcf565b34801561034757600080fd5b506101f76110ad565b34801561035c57600080fd5b506103656110b3565b60408051600160a060020a039092168252519081900360200190f35b34801561038d57600080fd5b5061021e6110c2565b3480156103a257600080fd5b506103656110d2565b3480156103b757600080fd5b506102cd6110e1565b3480156103cc57600080fd5b506101f7611195565b3480156103e157600080fd5b506102cd61119b565b3480156103f657600080fd5b5061021e6112aa565b34801561040b57600080fd5b506103656112ba565b34801561042057600080fd5b5061021e6112c9565b34801561043557600080fd5b506101f76112da565b34801561044a57600080fd5b506103656112e0565b34801561045f57600080fd5b506102cd6004356024356044356112ef565b34801561047d57600080fd5b506102cd600435611491565b34801561049557600080fd5b50610365611587565b3480156104aa57600080fd5b50610365611596565b6102cd600160a060020a03600435166115a5565b3480156104d357600080fd5b5061021e611b49565b3480156104e857600080fd5b506102cd6004351515602435611b6d565b34801561050557600080fd5b50610365611d02565b34801561051a57600080fd5b506102cd600160a060020a0360043516611d11565b34801561053b57600080fd5b5061021e611d7a565b34801561055057600080fd5b506101f7611d8a565b60095481565b60006005546007541015156105765750600161057a565b5060005b90565b600a5460a860020a900460ff1681565b60025481565b60015481565b600b54600160a060020a03161580156105bb5750600c54600160a060020a0316155b80156105d05750600a54600160a060020a0316155b80156105dc5750600254155b80156105e85750600954155b80156105fd5750600e54600160a060020a0316155b80156106095750600554155b80156106155750600654155b801561062a5750600d54600160a060020a0316155b15156106a6576040805160e560020a62461bcd02815260206004820152603160248201527f476c6f62616c207661726961626c65732073686f756c64206e6f74206861766560448201527f206265656e20736574206265666f726521000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a038b16158015906106c65750600160a060020a038a1615155b80156106db5750861580156106d9575085155b155b80156106ef5750600160a060020a03891615155b80156106fa57508315155b801561070557508215155b80156107195750600160a060020a03851615155b1515610794576040805160e560020a62461bcd028152602060048201526024808201527f506172616d65746572207661726961626c65732063616e6e6f7420626520656d60448201527f7074792100000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b828410610811576040805160e560020a62461bcd02815260206004820152602c60248201527f536f66744361702073686f756c6420626520736d616c6c6572207468616e206360448201527f726f776473616c65436170210000000000000000000000000000000000000000606482015290519081900360840190fd5b811561089a5760008711610895576040805160e560020a62461bcd02815260206004820152603660248201527f5365742061207261746520666f72205765692c207768656e206974206973206160448201527f6363657074656420666f72207075726368617365732100000000000000000000606482015290519081900360840190fd5b610916565b8615610916576040805160e560020a62461bcd02815260206004820152603b60248201527f4f6e6c79207365742061207261746520666f72205765692c207768656e20697460448201527f20697320616363657074656420666f7220707572636861736573210000000000606482015290519081900360840190fd5b6109218d8d896112ef565b600e805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a038c811691909117909255600b805482168e8416179055600c805482168d8416179055600d80548216888416179055600a805460098a90558216928b169290921774ff0000000000000000000000000000000000000000191660a060020a851515021775ff000000000000000000000000000000000000000000191660a860020a8415150217909155600480543292169190911790556109ed84670de0b6b3a7640000611d90565b600555610a0883670de0b6b3a764000063ffffffff611d9016565b600655600a5460a860020a900460ff1615610ba557600a54600160a060020a03161515610aa5576040805160e560020a62461bcd02815260206004820152603860248201527f546f6b656e4f776e6572416674657273616c652063616e6e6f7420626520656d60448201527f707479207768656e206d696e74696e6720746f6b656e73210000000000000000606482015290519081900360840190fd5b600e60009054906101000a9004600160a060020a0316600160a060020a0316635c975abb6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610af857600080fd5b505af1158015610b0c573d6000803e3d6000fd5b505050506040513d6020811015610b2257600080fd5b50511515610ba0576040805160e560020a62461bcd02815260206004820152603160248201527f436f6d70616e7920746f6b656e206d757374206265207061757365642075706f60448201527f6e20696e697469616c697a6174696f6e21000000000000000000000000000000606482015290519081900360840190fd5b610c2c565b600a54600160a060020a031615610c2c576040805160e560020a62461bcd02815260206004820152603660248201527f546f6b656e4f776e6572416674657273616c65206d75737420626520656d707460448201527f79207768656e206d696e74696e6720746f6b656e732100000000000000000000606482015290519081900360840190fd5b600e60009054906101000a9004600160a060020a0316600160a060020a031663313ce5676040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610c7f57600080fd5b505af1158015610c93573d6000803e3d6000fd5b505050506040513d6020811015610ca957600080fd5b505160ff16601214610d2b576040805160e560020a62461bcd02815260206004820152603560248201527f4f6e6c792073616c657320666f7220746f6b656e73207769746820313820646560448201527f63696d616c732061726520737570706f72746564210000000000000000000000606482015290519081900360840190fd5b50505050505050505050505050565b610d426112c9565b1515610d97576040805160e560020a62461bcd0281526020600482015260256024820152600080516020612341833981519152604482015260d960020a6431ba34b7b702606482015290519081900360840190fd5b600a5460a060020a900460ff161515610e20576040805160e560020a62461bcd02815260206004820152603860248201527f53616c65206d75737420616c6c6f772057656920666f7220707572636861736560448201527f7320746f207365742061207261746520666f7220576569210000000000000000606482015290519081900360840190fd5b801515610e77576040805160e560020a62461bcd02815260206004820152601d60248201527f4554482072617465206d757374206265206d6f7265207468616e203021000000604482015290519081900360640190fd5b600254604080519182526020820183905280517f3eb3a3107021f12f1acd8d9afb35c4caac2bb3ccb9c53a0bc7f0950d3d2218849281900390910190a1600255565b610ec16112c9565b1515610f16576040805160e560020a62461bcd0281526020600482015260256024820152600080516020612341833981519152604482015260d960020a6431ba34b7b702606482015290519081900360840190fd5b60045460a860020a900460ff161515610f79576040805160e560020a62461bcd02815260206004820152600e60248201527f6d75737420626520706175736564000000000000000000000000000000000000604482015290519081900360640190fd5b6004805475ff000000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b60035481565b60065481565b610fd76112c9565b151561102c576040805160e560020a62461bcd0281526020600482015260256024820152600080516020612341833981519152604482015260d960020a6431ba34b7b702606482015290519081900360840190fd5b60045460a060020a900460ff161561104357600080fd5b61104b611b49565b151561105657600080fd5b61105e611dbf565b6040517f6823b073d48d6e3a7d385eeb601452d680e74bb46afe3255a7d778f3a9b1768190600090a16004805474ff0000000000000000000000000000000000000000191660a060020a179055565b60075481565b600d54600160a060020a031681565b60045460a860020a900460ff1690565b600e54600160a060020a031681565b6110e96112c9565b151561113e576040805160e560020a62461bcd0281526020600482015260256024820152600080516020612341833981519152604482015260d960020a6431ba34b7b702606482015290519081900360840190fd5b600454604051600091600160a060020a0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36004805473ffffffffffffffffffffffffffffffffffffffff19169055565b60005481565b6111a36112c9565b15156111f8576040805160e560020a62461bcd0281526020600482015260256024820152600080516020612341833981519152604482015260d960020a6431ba34b7b702606482015290519081900360840190fd5b60045460a860020a900460ff161561125a576040805160e560020a62461bcd02815260206004820152601260248201527f6d757374206e6f74206265207061757365640000000000000000000000000000604482015290519081900360640190fd5b6004805475ff000000000000000000000000000000000000000000191660a860020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b60045460a060020a900460ff1681565b600454600160a060020a031690565b600454600160a060020a0316331490565b60055481565b600b54600160a060020a031681565b6000541580156112ff5750600154155b801561130b5750600254155b1515611387576040805160e560020a62461bcd02815260206004820152603b60248201527f476c6f62616c207661726961626c6573206d75737420626520656d707479207760448201527f68656e20696e697469616c697a696e672063726f776473616c65210000000000606482015290519081900360840190fd5b42831015611405576040805160e560020a62461bcd02815260206004820152602a60248201527f5f737461727454696d65206d757374206265206d6f7265207468616e2063757260448201527f72656e742074696d652100000000000000000000000000000000000000000000606482015290519081900360840190fd5b82821015611483576040805160e560020a62461bcd02815260206004820152602660248201527f5f656e6454696d65206d757374206265206d6f7265207468616e205f7374617260448201527f7454696d65210000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600092909255600155600255565b6114996112c9565b15156114ee576040805160e560020a62461bcd0281526020600482015260256024820152600080516020612341833981519152604482015260d960020a6431ba34b7b702606482015290519081900360840190fd5b801515611545576040805160e560020a62461bcd02815260206004820152601e60248201527f537461722072617465206d757374206265206d6f7265207468616e2030210000604482015290519081900360640190fd5b600954604080519182526020820183905280517fa3a3786220b9fcec08d84273a10047267529eb8aa940c4afe7f1603d0c272df59281900390910190a1600955565b600454600160a060020a031681565b600c54600160a060020a031681565b600454600090819060a860020a900460ff161561160c576040805160e560020a62461bcd02815260206004820152601260248201527f6d757374206e6f74206265207061757365640000000000000000000000000000604482015290519081900360640190fd5b600b54604080517f4120657a000000000000000000000000000000000000000000000000000000008152600160a060020a038087166004830152915186939290921691634120657a916024808201926020929091908290030181600087803b15801561167757600080fd5b505af115801561168b573d6000803e3d6000fd5b505050506040513d60208110156116a157600080fd5b505115156116f9576040805160e560020a62461bcd02815260206004820152601c60248201527f42656e6566696369617279206e6f742077686974656c69737465642100000000604482015290519081900360640190fd5b600160a060020a038416151561170e57600080fd5b611716611f3d565b80156117255750600654600754105b151561173057600080fd5b600a5460a860020a900460ff161561185157600e54604080517f8da5cb5b00000000000000000000000000000000000000000000000000000000815290513092600160a060020a031691638da5cb5b9160048083019260209291908290030181600087803b1580156117a157600080fd5b505af11580156117b5573d6000803e3d6000fd5b505050506040513d60208110156117cb57600080fd5b5051600160a060020a031614611851576040805160e560020a62461bcd02815260206004820152602960248201527f54686520746f6b656e206f776e6572206d75737420626520636f6e747261637460448201527f2061646472657373210000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600a5460a060020a900460ff16151561187457341561186f57600080fd5b611886565b60003411156118865761188684611f55565b600c54604080517fdd62ed3e000000000000000000000000000000000000000000000000000000008152600160a060020a0387811660048301523060248301529151919092169163dd62ed3e9160448083019260209291908290030181600087803b1580156118f457600080fd5b505af1158015611908573d6000803e3d6000fd5b505050506040513d602081101561191e57600080fd5b505192506000831115611b43576119526103e861194660095486611d9090919063ffffffff16565b9063ffffffff61213216565b915060065461196c8360075461214790919063ffffffff16565b11156119a7576007546006546119879163ffffffff61215416565b91506119a46103e86119466009548561213290919063ffffffff16565b92505b6008546119ba908463ffffffff61214716565b6008556007546119d0908363ffffffff61214716565b6007556119dd8483612166565b60408051848152602081018490528151600160a060020a0387169233927f90fe662c246f8e3a039edad193aced7d2069ea86a7b8f27c3d27c83581da9591929081900390910190a3600c54600d54604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a038881166004830152928316602482015260448101879052905191909216916323b872dd9160648083019260209291908290030181600087803b158015611a9f57600080fd5b505af1158015611ab3573d6000803e3d6000fd5b505050506040513d6020811015611ac957600080fd5b5050600d54604080517f6178a8b10000000000000000000000000000000000000000000000000000000081529051600160a060020a0390921691636178a8b19160048082019260009290919082900301818387803b158015611b2a57600080fd5b505af1158015611b3e573d6000803e3d6000fd5b505050505b50505050565b6000600654600754101515611b605750600161057a565b611b686122b8565b905090565b611b756112c9565b1515611bca576040805160e560020a62461bcd0281526020600482015260256024820152600080516020612341833981519152604482015260d960020a6431ba34b7b702606482015290519081900360840190fd5b8115611c535760008111611c4e576040805160e560020a62461bcd02815260206004820152603660248201527f5768656e20616363657074696e67205765692c20796f75206e65656420746f2060448201527f736574206120636f6e76657273696f6e20726174652100000000000000000000606482015290519081900360840190fd5b611ccf565b8015611ccf576040805160e560020a62461bcd02815260206004820152603f60248201527f5768656e206e6f7420616363657074696e67205765692c20796f75206e65656460448201527f20746f20736574206120636f6e76657273696f6e2072617465206f6620302100606482015290519081900360840190fd5b600a805492151560a060020a0274ff00000000000000000000000000000000000000001990931692909217909155600255565b600a54600160a060020a031681565b611d196112c9565b1515611d6e576040805160e560020a62461bcd0281526020600482015260256024820152600080516020612341833981519152604482015260d960020a6431ba34b7b702606482015290519081900360840190fd5b611d77816122c0565b50565b600a5460a060020a900460ff1681565b60085481565b6000821515611da157506000611db9565b50818102818382811515611db157fe5b0414611db957fe5b92915050565b600a5460009060a860020a900460ff16611e6a57600e54604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b158015611e3957600080fd5b505af1158015611e4d573d6000803e3d6000fd5b505050506040513d6020811015611e6357600080fd5b5051611e7f565b600754600654611e7f9163ffffffff61215416565b90506000811115611ea057600d54611ea090600160a060020a031682612166565b600a5460a860020a900460ff1615611f3557600e54600a54604080517ff2fde38b000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201529051919092169163f2fde38b91602480830192600092919082900301818387803b158015611f1c57600080fd5b505af1158015611f30573d6000803e3d6000fd5b505050505b611d7761233e565b600080544210158015611b6857505060015442111590565b60025434906000908190611f7090849063ffffffff611d9016565b9050600654611f8a8260075461214790919063ffffffff16565b1115611fd157600754600654611fa59163ffffffff61215416565b9050611fbc6002548261213290919063ffffffff16565b9250611fce348463ffffffff61215416565b91505b600354611fe4908463ffffffff61214716565b600355600754611ffa908263ffffffff61214716565b6007556120078482612166565b60408051848152602081018390528151600160a060020a0387169233927f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad18929081900390910190a3600d54604051600160a060020a039091169084156108fc029085906000818181858888f19350505050158015612089573d6000803e3d6000fd5b50600d60009054906101000a9004600160a060020a0316600160a060020a0316631b814f026040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156120dd57600080fd5b505af11580156120f1573d6000803e3d6000fd5b505050506000821115611b4357604051339083156108fc029084906000818181858888f1935050505015801561212b573d6000803e3d6000fd5b5050505050565b6000818381151561213f57fe5b049392505050565b81810182811015611db957fe5b60008282111561216057fe5b50900390565b600a5460a860020a900460ff1661221757600e54604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b1580156121e657600080fd5b505af11580156121fa573d6000803e3d6000fd5b505050506040513d602081101561221057600080fd5b50516122b3565b600e54604080517f40c10f19000000000000000000000000000000000000000000000000000000008152600160a060020a03858116600483015260248201859052915191909216916340c10f199160448083019260209291908290030181600087803b15801561228657600080fd5b505af115801561229a573d6000803e3d6000fd5b505050506040513d60208110156122b057600080fd5b50515b505050565b600154421190565b600160a060020a03811615156122d557600080fd5b600454604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b56006f6e6c79206f776e65722069732061626c652063616c6c20746869732066756ea165627a7a72305820e57187008c70c7d9284a4b6d352e8a34931ee8fb5a5738348d88fc2c14cc829a0029"
}