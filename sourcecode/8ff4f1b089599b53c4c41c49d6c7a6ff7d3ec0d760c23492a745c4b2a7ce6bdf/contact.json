{
  "address": "0x541ea6be93d52ff8b890b6b079b5d5be673b1c79",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EtherGarden",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-12\n*/\n\n/**\n *\n * https://ethergarden.host\n *\n * Welcome to Ether Garden!\n * Here you can earn Ethereum, growing four kinds of vegetables. \n * You will get random kind of vegetable for growing with the first transaction.\n * One acre of garden field gives one vegetable per day. The more acres you have, the more vegetables they give.\n * Attention! Market value of each vegetable will be different. Less grown vegetables will be more expensive.\n * Also market value depends on contract balance, number of all bought acres and  number of all grown vegetables.\n *\n * Send from 0 to 0.00001 ether for sell your all grown vegetables or getting FREE acres, if you have no one acre.\n * Minimum invest amount for fields buying is 0.001 ETH.\n * Use 150000 of Gas limit for your transactions.\n *\n * Admin commissions: 4% for buying arces + 4% for selling vegetable\n * Referrer: 4%\n *\n */\n\npragma solidity ^0.4.25; \n\ncontract EtherGarden{\n\n\tmapping (uint8 => uint256) public VegetablesTradeBalance;\n\tmapping (address => uint8) public FarmerToFieldId;\n \tmapping (address => mapping (uint8 => uint256)) public FarmerVegetableStartGrowing;\n \tmapping (address => mapping (uint8 => uint256)) public FarmerVegetableFieldSize;\n\n\tuint256 MaxVegetables = 4;\n\tuint256 minimumInvest = 0.001 ether;\n\tuint256 growingSpeed = 1 days; \n\tbool public initialized=false;\n\taddress public admin;\n\t\n    /**\n     * @dev Ð¡onstructor Sets the original roles of the contract \n     */\n    constructor() public {\n        admin = msg.sender;\n    }\n\t\n    /**\n     * @dev Modifiers\n     */\t\n    modifier onlyAdmin() {\n        require(msg.sender == admin);\n        _;\n    }\n    modifier isInitialized() {\n        require(initialized);\n        _;\n    }\t\n\n    /**\n     * @dev Market functions\n     */\t\t\n    function() external payable {\n\t\t//Set random vegetale for a new farmer\t\n\n\n\t\tif (msg.value >= 0 && msg.value <= 0.00001 ether) {\n\t\t\tif (FarmerToFieldId[msg.sender] == 0) {\n\t\t\t\trollFieldId();\n\t\t\t\tgetFreeField();\n\t\t\t} else\n\t\t\t\tsellVegetables();\n        } \n\t\telse if (msg.value == 0.00001111 ether){\n\t\t\treInvest();\n        } \n\t\telse {\n\t\t\tif (FarmerToFieldId[msg.sender] == 0)\n\t\t\t\trollFieldId();\t\t\n            buyField();\n        }\t\t\n    }\t \n\n    function sellVegetables() internal isInitialized {\n\t\tuint8 _VegetableId = FarmerToFieldId[msg.sender];\n\t\t\n\t\tuint256 value = vegetablesValue(_VegetableId, msg.sender);\n        if (value > 0) {\n\t\t\tuint256 price = SafeMath.mul(vegetablePrice(_VegetableId),value);\n\t\t\tuint256 fee = devFee(price);\n\t\t\t\n\t\t\tFarmerVegetableStartGrowing[msg.sender][_VegetableId] = now;\n\t\t\t\n\t\t\t//Update market values\n\t\t\tVegetablesTradeBalance[_VegetableId] = SafeMath.add(VegetablesTradeBalance[_VegetableId],value);\n\t\t\t\n\t\t\tadmin.transfer(fee);\n\t\t\tmsg.sender.transfer(SafeMath.sub(price,fee));\n\t\t}\n    }\t \n\t\n    function buyField() internal isInitialized {\n\t\trequire(msg.value > minimumInvest, \"Too low ETH value\");\n\t\t\n\t\tuint8 _VegetableId = FarmerToFieldId[msg.sender];\n\t\t\n\t\t//Calculate acres number for buying\n\t\tuint256 acres = SafeMath.div(msg.value,fieldPrice(msg.value));\n        \n\t\tif (FarmerVegetableStartGrowing[msg.sender][_VegetableId] > 0)\n\t\t\tsellVegetables();\n\t\t\n\t\tFarmerVegetableStartGrowing[msg.sender][_VegetableId] = now;\n\t\tFarmerVegetableFieldSize[msg.sender][_VegetableId] = SafeMath.add(FarmerVegetableFieldSize[msg.sender][_VegetableId],acres);\n\t\t\n\t\t////Update market values\n\t\tVegetablesTradeBalance[_VegetableId] = SafeMath.add(VegetablesTradeBalance[_VegetableId], SafeMath.div(acres,5));\n\t\t\n        uint256 fee = devFee(msg.value);\n\t\tadmin.send(fee);\n\t\t\n        if (msg.data.length == 20) {\n            address _referrer = bytesToAddress(bytes(msg.data));\n\t\t\tif (_referrer != msg.sender && _referrer != address(0)) {\n\t\t\t\t _referrer.send(fee);\n\t\t\t}\n        }\t\t\n    }\n\t \n\tfunction reInvest() internal isInitialized {\n\t\tuint8 _VegetableId = FarmerToFieldId[msg.sender];\n\t\t\n\t\tuint256 value = vegetablesValue(_VegetableId, msg.sender);\n\t\trequire(value > 0, \"No grown vegetables for reinvest\");\n\t\t\n\t\t//Change one vegetable for one acre\n\t\tFarmerVegetableFieldSize[msg.sender][_VegetableId] = SafeMath.add(FarmerVegetableFieldSize[msg.sender][_VegetableId],value);\n\t\tFarmerVegetableStartGrowing[msg.sender][_VegetableId] = now;\n\t}\n\t\n    function getFreeField() internal isInitialized {\n\t\tuint8 _VegetableId = FarmerToFieldId[msg.sender];\n\t\trequire(FarmerVegetableFieldSize[msg.sender][_VegetableId] == 0);\n\t\t\n\t\tFarmerVegetableFieldSize[msg.sender][_VegetableId] = freeFieldSize();\n\t\tFarmerVegetableStartGrowing[msg.sender][_VegetableId] = now;\n\t\t\n    }\n\t\n    function initMarket(uint256 _init_value) public payable onlyAdmin{\n        require(!initialized);\n        initialized=true;\n\t\t\n\t\t//Set the first trade balance\n\t\tfor (uint8 _vegetableId = 1; _vegetableId <= MaxVegetables; _vegetableId++)\n\t\t\tVegetablesTradeBalance[_vegetableId] = _init_value;\n    }\t\n\t\n\tfunction rollFieldId() internal {\n\t    //Set random vegetables field for a new farmer\n\t\tFarmerToFieldId[msg.sender] = uint8(uint256(blockhash(block.number - 1)) % MaxVegetables + 1);\n\t}\n\t\n    /**\n     * @dev Referrer functions\n     */\t\t\n\n\tfunction bytesToAddress(bytes _source) internal pure returns(address parsedreferrer) {\n        assembly {\n            parsedreferrer := mload(add(_source,0x14))\n        }\n        return parsedreferrer;\n    }\t\n\t\n    /**\n     * @dev Views\n     */\t\t\n\t \n    function vegetablePrice(uint8 _VegetableId) public view returns(uint256){\n\t\treturn SafeMath.div(SafeMath.div(address(this).balance,MaxVegetables),VegetablesTradeBalance[_VegetableId]);\n    }\n\n    function vegetablesValue(uint8 _VegetableId, address _Farmer) public view returns(uint256){\n\t\t//ONE acre gives ONE vegetable per day. Many acres give vegetables faster.\n\t\treturn SafeMath.div(SafeMath.mul(FarmerVegetableFieldSize[_Farmer][_VegetableId], SafeMath.sub(now,FarmerVegetableStartGrowing[_Farmer][_VegetableId])),growingSpeed);\t\t\n    }\t\n\t\n    function fieldPrice(uint256 subValue) public view returns(uint256){\n\t    uint256 CommonTradeBalance;\n\t\t\n\t\tfor (uint8 _vegetableId = 1; _vegetableId <= MaxVegetables; _vegetableId++)\n\t\t\tCommonTradeBalance=SafeMath.add(CommonTradeBalance,VegetablesTradeBalance[_vegetableId]);\n\t\t\n\t\treturn SafeMath.div(SafeMath.sub(address(this).balance,subValue), CommonTradeBalance);\n    }\n\t\n\tfunction freeFieldSize() public view returns(uint256) {\n\t\treturn SafeMath.div(0.0005 ether,fieldPrice(0));\n\t}\n\t\n\tfunction devFee(uint256 _amount) internal pure returns(uint256){\n        return SafeMath.div(SafeMath.mul(_amount,4),100);\n    }\n\t\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}",
  "bytecode": "60806040526004805566038d7ea4c68000600555620151806006556000600760006101000a81548160ff02191690831515021790555034801561004157600080fd5b5033600760016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061134e806100926000396000f3006080604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631524a929146101ce578063158ef93e146102325780636f2553da14610261578063787fccc2146102be578063831d62fb14610302578063cb11213114610366578063de26abe2146103a7578063e41bd9f01461040b578063ed43526714610436578063f11db8451461047a578063f851a4401461049a575b600034101580156100c657506509184e72a0003411155b15610146576000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff1614156101385761012b6104f1565b610133610563565b610141565b6101406106f4565b5b6101cc565b650a1abf9a7c003414156101615761015c6108f1565b6101cb565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff1614156101c2576101c16104f1565b5b6101ca610afb565b5b5b005b3480156101da57600080fd5b5061021c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff169060200190929190505050610f17565b6040518082815260200191505060405180910390f35b34801561023e57600080fd5b50610247610f3c565b604051808215151515815260200191505060405180910390f35b34801561026d57600080fd5b506102a2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f4f565b604051808260ff1660ff16815260200191505060405180910390f35b3480156102ca57600080fd5b506102ec600480360381019080803560ff169060200190929190505050610f6f565b6040518082815260200191505060405180910390f35b34801561030e57600080fd5b50610350600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff169060200190929190505050610fbc565b6040518082815260200191505060405180910390f35b34801561037257600080fd5b5061039160048036038101908080359060200190929190505050610fe1565b6040518082815260200191505060405180910390f35b3480156103b357600080fd5b506103f5600480360381019080803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061105d565b6040518082815260200191505060405180910390f35b34801561041757600080fd5b50610420611131565b6040518082815260200191505060405180910390f35b34801561044257600080fd5b50610464600480360381019080803560ff169060200190929190505050611152565b6040518082815260200191505060405180910390f35b6104986004803603810190808035906020019092919050505061116a565b005b3480156104a657600080fd5b506104af611240565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600160045460014303406001900481151561050857fe5b0601600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff160217905550565b6000600760009054906101000a900460ff16151561058057600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008360ff1660ff1681526020019081526020016000205414151561063457600080fd5b61063c611131565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008360ff1660ff1681526020019081526020016000208190555042600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008360ff1660ff1681526020019081526020016000208190555050565b600080600080600760009054906101000a900460ff16151561071557600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16935061076e843361105d565b925060008311156108eb5761078b61078585610f6f565b84611266565b9150610796826112a1565b905042600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008660ff1660ff168152602001908152602001600020819055506108156000808660ff1660ff16815260200190815260200160002054846112bf565b6000808660ff1660ff16815260200190815260200160002081905550600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610899573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff166108fc6108be84846112dd565b9081150290604051600060405180830381858888f193505050501580156108e9573d6000803e3d6000fd5b505b50505050565b600080600760009054906101000a900460ff16151561090f57600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169150610968823361105d565b90506000811115156109e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4e6f2067726f776e20766567657461626c657320666f72207265696e7665737481525060200191505060405180910390fd5b610a42600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008460ff1660ff16815260200190815260200160002054826112bf565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008460ff1660ff1681526020019081526020016000208190555042600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008460ff1660ff168152602001908152602001600020819055505050565b600080600080600760009054906101000a900460ff161515610b1c57600080fd5b60055434111515610b95576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f546f6f206c6f77204554482076616c756500000000000000000000000000000081525060200191505060405180910390fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169350610bf634610bf134610fe1565b6112f6565b92506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008660ff1660ff168152602001908152602001600020541115610c6057610c5f6106f4565b5b42600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008660ff1660ff16815260200190815260200160002081905550610d1b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008660ff1660ff16815260200190815260200160002054846112bf565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008660ff1660ff16815260200190815260200160002081905550610da16000808660ff1660ff16815260200190815260200160002054610d9c8560056112f6565b6112bf565b6000808660ff1660ff16815260200190815260200160002081905550610dc6346112a1565b9150600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505050601460003690501415610f1157610e696000368080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050611311565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015610ed45750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b15610f10578073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050505b5b50505050565b6002602052816000526040600020602052806000526040600020600091509150505481565b600760009054906101000a900460ff1681565b60016020528060005260406000206000915054906101000a900460ff1681565b6000610fb5610f973073ffffffffffffffffffffffffffffffffffffffff16316004546112f6565b6000808560ff1660ff168152602001908152602001600020546112f6565b9050919050565b6003602052816000526040600020602052806000526040600020600091509150505481565b6000806000600190505b6004548160ff1611151561102a5761101b826000808460ff1660ff168152602001908152602001600020546112bf565b91508080600101915050610feb565b61105461104e3073ffffffffffffffffffffffffffffffffffffffff1631866112dd565b836112f6565b92505050919050565b6000611129611121600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008660ff1660ff1681526020019081526020016000205461111c42600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008960ff1660ff168152602001908152602001600020546112dd565b611266565b6006546112f6565b905092915050565b600061114d6601c6bf526340006111486000610fe1565b6112f6565b905090565b60006020528060005260406000206000915090505481565b6000600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111c857600080fd5b600760009054906101000a900460ff161515156111e457600080fd5b6001600760006101000a81548160ff021916908315150217905550600190505b6004548160ff1611151561123c57816000808360ff1660ff168152602001908152602001600020819055508080600101915050611204565b5050565b600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600084141561127b576000915061129a565b828402905082848281151561128c57fe5b0414151561129657fe5b8091505b5092915050565b60006112b86112b1836004611266565b60646112f6565b9050919050565b60008082840190508381101515156112d357fe5b8091505092915050565b60008282111515156112eb57fe5b818303905092915050565b600080828481151561130457fe5b0490508091505092915050565b6000601482015190508090509190505600a165627a7a723058206b53751f73c50169dfe255675f5cf577d884462071c0e5c69da2a6bf4bd7fa300029"
}