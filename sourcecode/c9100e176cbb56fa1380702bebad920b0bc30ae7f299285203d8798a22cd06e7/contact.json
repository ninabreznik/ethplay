{
  "address": "0x5cfaf9ad2cb84ce2bc40be1beb735bd12a075e99",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AbleDollarToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-08\n*/\n\npragma solidity ^0.4.24;\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n     * @dev Multiplies two numbers, throws on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n         // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n         // benefit is lost if 'b' is also tested.\n         // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n         if (a == 0) {\n                return 0;\n         }\n\n         c = a * b;\n         assert(c / a == b);\n         return c;\n    }\n\n    /**\n     * @dev Integer division of two numbers, truncating the quotient.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n         // assert(b > 0); // Solidity automatically throws when dividing by 0\n         // uint256 c = a / b;\n         // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n         return a / b;\n    }\n\n    /**\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n         assert(b <= a);\n         return a - b;\n    }\n\n    /**\n     * @dev Adds two numbers, throws on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n         c = a + b;\n         assert(c >= a);\n         return c;\n    }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n    \n    event OwnershipRenounced(address indexed previousOwner);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n         owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n         require(msg.sender == owner);\n         _;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n         emit OwnershipRenounced(owner);\n         owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address _newOwner) public onlyOwner {\n         _transferOwnership(_newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address _newOwner) internal {\n         require(_newOwner != address(0));\n         emit OwnershipTransferred(owner, _newOwner);\n         owner = _newOwner;\n    }\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender)\n         public view returns (uint256);\n\n    function transferFrom(address from, address to, uint256 value)\n         public returns (bool);\n\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n\n    uint256 totalSupply_;\n\n    /**\n     * @dev Total number of tokens in existence\n     */\n    function totalSupply() public view returns (uint256) {\n         return totalSupply_;\n    }\n\n    /**\n     * @dev Transfer token for a specified address\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n         require(_to != address(0));\n         require(_value <= balances[msg.sender]);\n\n         balances[msg.sender] = balances[msg.sender].sub(_value);\n         balances[_to] = balances[_to].add(_value);\n         emit Transfer(msg.sender, _to, _value);\n         return true;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param _owner The address to query the the balance of.\n     * @return An uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address _owner) public view returns (uint256) {\n         return balances[_owner];\n    }\n\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n         require(_to != address(0));\n         require(_value <= balances[_from]);\n         require(_value <= allowed[_from][msg.sender]);\n\n         balances[_from] = balances[_from].sub(_value);\n         balances[_to] = balances[_to].add(_value);\n         allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n         emit Transfer(_from, _to, _value);\n         return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n         allowed[msg.sender][_spender] = _value;\n         emit Approval(msg.sender, _spender, _value);\n         return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n         return allowed[_owner][_spender];\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\n         allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue));\n         emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n         return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\n         uint256 oldValue = allowed[msg.sender][_spender];\n         if (_subtractedValue > oldValue) {\n                allowed[msg.sender][_spender] = 0;\n         } else {\n                allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n         }\n         emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n         return true;\n    }\n}\n\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n    event Burn(address indexed burner, uint256 value);\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public {\n         _burn(msg.sender, _value);\n    }\n\n    function _burn(address _who, uint256 _value) internal {\n         require(_value <= balances[_who]);\n         // no need to require value <= totalSupply, since that would imply the\n         // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n         balances[_who] = balances[_who].sub(_value);\n         totalSupply_ = totalSupply_.sub(_value);\n         emit Burn(_who, _value);\n         emit Transfer(_who, address(0), _value);\n    }\n}\n\n\n/**\n * @title Standard Burnable Token\n * @dev Adds burnFrom method to ERC20 implementations\n */\ncontract StandardBurnableToken is BurnableToken, StandardToken {\n\n    /**\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n     * @param _from address The address which you want to send tokens from\n     * @param _value uint256 The amount of token to be burned\n     */\n    function burnFrom(address _from, uint256 _value) public {\n         require(_value <= allowed[_from][msg.sender]);\n         // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n         // this function needs to emit an event with the updated approval.\n         allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n         _burn(_from, _value);\n    }\n}\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n\n    bool public mintingFinished = false;\n\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n\n    modifier hasMintPermission() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param _to The address that will receive the minted tokens.\n     * @param _amount The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address _to, uint256 _amount) hasMintPermission canMint public returns (bool) {\n        totalSupply_ = totalSupply_.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Mint(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n        return true;\n    }\n\n    /**\n     * @dev Function to stop minting new tokens.\n     * @return True if the operation was successful.\n     */\n    function finishMinting() onlyOwner canMint public returns (bool) {\n        mintingFinished = true;\n        emit MintFinished();\n        return true;\n    }\n}\n\n\n/**\n * @title ABLE Dollar token\n *\n * @dev Implementation of the ABLE Dollar token \n */\ncontract AbleDollarToken is Ownable, StandardBurnableToken, MintableToken {\n\n    string public name = \"ABLE Dollar X Token\";\n    string public symbol = \"ABLD\";\n    uint8 public decimals = 18;\n    uint public INITIAL_SUPPLY = 1000000000000000000000000000;\n\n    mapping (address => bool) public frozenAccount;\n\n    event Freeze(address target, bool freezed);\n    event UnFreeze(address target, bool freezed);\n\n    /**\n     * @dev constructor for Able Dollar Token\n     */\n    constructor() public {\n        totalSupply_ = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n    }\n\n    /**\n     * @dev fallback function ***DO NOT OVERRIDE***\n     */\n    function () external payable {\n        revert();\n    }\n\n    /**\n     * @dev Function to freeze address\n     * @param _target The address that will be freezed.\n     */\n    function freezeAccount(address _target) onlyOwner public {\n        require(_target != address(0));\n        frozenAccount[_target] = true;\n        emit Freeze(_target, true);\n    }\n    \n    /**\n     * @dev Function to freeze address\n     * @param _target The address that will be freezed.\n     */\n    function unfreezeAccount(address _target) onlyOwner public {\n        require(_target != address(0));\n        frozenAccount[_target] = false;\n        emit UnFreeze(_target, false);\n    }\n\n    /**\n     * @dev Transfer token for a specified address\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(!frozenAccount[msg.sender]);        // Check if sender is frozen\n        require(!frozenAccount[_to]);               // Check if recipient is frozen\n        return super.transfer(_to,_value);\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(!frozenAccount[msg.sender]);        // Check if approved is frozen\n        require(!frozenAccount[_from]);             // Check if sender is frozen\n        require(!frozenAccount[_to]);               // Check if recipient is frozen\n        return super.transferFrom(_from, _to, _value);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"unfreezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"freezed\",\"type\":\"bool\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"freezed\",\"type\":\"bool\"}],\"name\":\"UnFreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "6003805460a060020a60ff021916905560c0604052601360808190527f41424c4520446f6c6c6172205820546f6b656e0000000000000000000000000060a0908152620000509160049190620000f6565b506040805180820190915260048082527f41424c440000000000000000000000000000000000000000000000000000000060209092019182526200009791600591620000f6565b506006805460ff191660121790556b033b2e3c9fd0803ce8000000600755348015620000c257600080fd5b5060038054600160a060020a031916339081179091556007546001819055600091825260208290526040909120556200019b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200013957805160ff191683800117855562000169565b8280016001018555821562000169579182015b82811115620001695782518255916020019190600101906200014c565b50620001779291506200017b565b5090565b6200019891905b8082111562000177576000815560010162000182565b90565b6110fa80620001ab6000396000f3006080604052600436106101325763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461013757806306fdde0314610160578063095ea7b3146101ea57806318160ddd1461020e57806323b872dd146102355780632ff2e9dc1461025f578063313ce5671461027457806340c10f191461029f57806342966c68146102c357806366188463146102dd57806370a0823114610301578063715018a614610322578063788649ea1461033757806379cc6790146103585780637d64bcb41461037c5780638da5cb5b1461039157806395d89b41146103c2578063a9059cbb146103d7578063b414d4b6146103fb578063d73dd6231461041c578063dd62ed3e14610440578063f26c159f14610467578063f2fde38b14610488575b600080fd5b34801561014357600080fd5b5061014c6104a9565b604080519115158252519081900360200190f35b34801561016c57600080fd5b506101756104ca565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101af578181015183820152602001610197565b50505050905090810190601f1680156101dc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101f657600080fd5b5061014c600160a060020a0360043516602435610558565b34801561021a57600080fd5b506102236105be565b60408051918252519081900360200190f35b34801561024157600080fd5b5061014c600160a060020a03600435811690602435166044356105c4565b34801561026b57600080fd5b50610223610640565b34801561028057600080fd5b50610289610646565b6040805160ff9092168252519081900360200190f35b3480156102ab57600080fd5b5061014c600160a060020a036004351660243561064f565b3480156102cf57600080fd5b506102db600435610758565b005b3480156102e957600080fd5b5061014c600160a060020a0360043516602435610765565b34801561030d57600080fd5b50610223600160a060020a0360043516610855565b34801561032e57600080fd5b506102db610870565b34801561034357600080fd5b506102db600160a060020a03600435166108de565b34801561036457600080fd5b506102db600160a060020a0360043516602435610967565b34801561038857600080fd5b5061014c6109fd565b34801561039d57600080fd5b506103a6610aa3565b60408051600160a060020a039092168252519081900360200190f35b3480156103ce57600080fd5b50610175610ab2565b3480156103e357600080fd5b5061014c600160a060020a0360043516602435610b0d565b34801561040757600080fd5b5061014c600160a060020a0360043516610b61565b34801561042857600080fd5b5061014c600160a060020a0360043516602435610b76565b34801561044c57600080fd5b50610223600160a060020a0360043581169060243516610c0f565b34801561047357600080fd5b506102db600160a060020a0360043516610c3a565b34801561049457600080fd5b506102db600160a060020a0360043516610cc8565b60035474010000000000000000000000000000000000000000900460ff1681565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105505780601f1061052557610100808354040283529160200191610550565b820191906000526020600020905b81548152906001019060200180831161053357829003601f168201915b505050505081565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60015490565b3360009081526008602052604081205460ff16156105e157600080fd5b600160a060020a03841660009081526008602052604090205460ff161561060757600080fd5b600160a060020a03831660009081526008602052604090205460ff161561062d57600080fd5b610638848484610ce8565b949350505050565b60075481565b60065460ff1681565b600354600090600160a060020a0316331461066957600080fd5b60035474010000000000000000000000000000000000000000900460ff161561069157600080fd5b6001546106a4908363ffffffff610e4d16565b600155600160a060020a0383166000908152602081905260409020546106d0908363ffffffff610e4d16565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000916000805160206110af8339815191529181900360200190a350600192915050565b6107623382610e60565b50565b336000908152600260209081526040808320600160a060020a0386168452909152812054808311156107ba57336000908152600260209081526040808320600160a060020a03881684529091528120556107ef565b6107ca818463ffffffff610f4f16565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a0316331461088757600080fd5b600354604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26003805473ffffffffffffffffffffffffffffffffffffffff19169055565b600354600160a060020a031633146108f557600080fd5b600160a060020a038116151561090a57600080fd5b600160a060020a0381166000818152600860209081526040808320805460ff1916905580519384529083019190915280517ec882bb0ec346719d39e4d69df3911721ce1506f4d83aa05ecdbbfdb2c235ff9281900390910190a150565b600160a060020a038216600090815260026020908152604080832033845290915290205481111561099757600080fd5b600160a060020a03821660009081526002602090815260408083203384529091529020546109cb908263ffffffff610f4f16565b600160a060020a03831660009081526002602090815260408083203384529091529020556109f98282610e60565b5050565b600354600090600160a060020a03163314610a1757600080fd5b60035474010000000000000000000000000000000000000000900460ff1615610a3f57600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600354600160a060020a031681565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105505780601f1061052557610100808354040283529160200191610550565b3360009081526008602052604081205460ff1615610b2a57600080fd5b600160a060020a03831660009081526008602052604090205460ff1615610b5057600080fd5b610b5a8383610f61565b9392505050565b60086020526000908152604090205460ff1681565b336000908152600260209081526040808320600160a060020a0386168452909152812054610baa908363ffffffff610e4d16565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600160a060020a03163314610c5157600080fd5b600160a060020a0381161515610c6657600080fd5b600160a060020a038116600081815260086020908152604091829020805460ff1916600190811790915582519384529083015280517ff022c1fbc00daf4d2e6cdc62e0338b967bd3be38ccc3d7f8e0168bd668c7bcfe9281900390910190a150565b600354600160a060020a03163314610cdf57600080fd5b61076281611030565b6000600160a060020a0383161515610cff57600080fd5b600160a060020a038416600090815260208190526040902054821115610d2457600080fd5b600160a060020a0384166000908152600260209081526040808320338452909152902054821115610d5457600080fd5b600160a060020a038416600090815260208190526040902054610d7d908363ffffffff610f4f16565b600160a060020a038086166000908152602081905260408082209390935590851681522054610db2908363ffffffff610e4d16565b600160a060020a03808516600090815260208181526040808320949094559187168152600282528281203382529091522054610df4908363ffffffff610f4f16565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391926000805160206110af833981519152929181900390910190a35060019392505050565b81810182811015610e5a57fe5b92915050565b600160a060020a038216600090815260208190526040902054811115610e8557600080fd5b600160a060020a038216600090815260208190526040902054610eae908263ffffffff610f4f16565b600160a060020a038316600090815260208190526040902055600154610eda908263ffffffff610f4f16565b600155604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a038516916000805160206110af8339815191529181900360200190a35050565b600082821115610f5b57fe5b50900390565b6000600160a060020a0383161515610f7857600080fd5b33600090815260208190526040902054821115610f9457600080fd5b33600090815260208190526040902054610fb4908363ffffffff610f4f16565b3360009081526020819052604080822092909255600160a060020a03851681522054610fe6908363ffffffff610e4d16565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233926000805160206110af8339815191529281900390910190a350600192915050565b600160a060020a038116151561104557600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058200c7e827e3fafb1cc9584d832b6df7bab06dc0b9fd0b9d9e00b3fb3ec7aa824fd0029"
}