{
  "address": "0x8c8e9197ee4576e3a349d292ba72a3eac1c9b71c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ODXPrivateSale",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-30\n*/\n\npragma solidity ^0.4.23;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\n/**\n * @title ERC20 interface\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic, Ownable {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n  \n  bool public stopped = false;\n  \n  event Stop(address indexed from);\n  \n  event Start(address indexed from);\n  \n  modifier isRunning {\n    assert (!stopped);\n    _;\n  }\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) isRunning public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 ownerBalance) {\n    return balances[_owner];\n  }\n  \n  function stop() onlyOwner public {\n    stopped = true;\n    emit Stop(msg.sender);\n  }\n\n  function start() onlyOwner public {\n    stopped = false;\n    emit Start(msg.sender);\n  }\n\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) isRunning public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) isRunning public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) isRunning public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) isRunning public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n\n/**\n * @title CappedMintableToken token\n */\ncontract CappedMintableToken is StandardToken {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n  event MintingAgentChanged(address addr, bool state);\n\n  uint256 public cap;\n\n  bool public mintingFinished = false;\n  mapping (address => bool) public mintAgents;\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n  \n  modifier onlyMintAgent() {\n    // crowdsale contracts or owner are allowed to mint new tokens\n    if(!mintAgents[msg.sender] && (msg.sender != owner)) {\n        revert();\n    }\n    _;\n  }\n\n\n  constructor(uint256 _cap) public {\n    require(_cap > 0);\n    cap = _cap;\n  }\n\n\n  /**\n   * Owner can allow a crowdsale contract to mint new tokens.\n   */\n  function setMintAgent(address addr, bool state) onlyOwner canMint public {\n    mintAgents[addr] = state;\n    emit MintingAgentChanged(addr, state);\n  }\n  \n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyMintAgent canMint isRunning public returns (bool) {\n    require(totalSupply_.add(_amount) <= cap);\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n/**\n * @title Standard Burnable Token\n * @dev Adds burnFrom method to ERC20 implementations\n */\ncontract StandardBurnableToken is BurnableToken, StandardToken {\n\n  /**\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n   * @param _from address The address which you want to send tokens from\n   * @param _value uint256 The amount of token to be burned\n   */\n  function burnFrom(address _from, uint256 _value) public {\n    require(_value <= allowed[_from][msg.sender]);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    _burn(_from, _value);\n  }\n}\n\n\n/**\n * @title ODXToken\n * @dev Simple ERC20 Token,   \n * Tokens are mintable and burnable.\n * No initial token upon creation\n * Added max token supply\n */\ncontract ODXToken is CappedMintableToken, StandardBurnableToken {\n\n  string public name; \n  string public symbol; \n  uint8 public decimals; \n\n  /**\n   * @dev set totalSupply_ = 0;\n   */\n  constructor(\n      string _name, \n      string _symbol, \n      uint8 _decimals, \n      uint256 _maxTokens\n  ) \n    public \n    CappedMintableToken(_maxTokens) \n  {\n    name = _name;\n    symbol = _symbol;\n    decimals = _decimals;\n    totalSupply_ = 0;\n  }\n  \n  function () payable public {\n      revert();\n  }\n\n}\n\n\n/**\n * @title PrivateSaleRules\n * @dev Specifically use for private sale with lockup.\n */\ncontract PrivateSaleRules is Ownable {\n  using SafeMath for uint256;\n\n  // private sale tracker of contribution\n  uint256 public weiRaisedDuringPrivateSale;\n\n  mapping(address => uint256[]) public lockedTokens;\n  \n  uint256[] public lockupTimes;\n  mapping(address => uint256) public privateSale;\n  \n  mapping (address => bool) public privateSaleAgents;\n\n  // The token being sold\n  ERC20 public token;\n\n  event AddLockedTokens(address indexed beneficiary, uint256 totalContributionAmount, uint256[] tokenAmount);\n  event UpdateLockedTokens(address indexed beneficiary, uint256 totalContributionAmount, uint256 lockedTimeIndex, uint256 tokenAmount);\n  event PrivateSaleAgentChanged(address addr, bool state);\n\n\n  modifier onlyPrivateSaleAgent() {\n    // crowdsale contracts or owner are allowed to whitelist address\n    require(privateSaleAgents[msg.sender] || msg.sender == owner);\n    _;\n  }\n  \n\n  /**\n   * @dev Constructor, sets lockupTimes and token address\n   * @param _lockupTimes arraylist of lockup times\n   * @param _token tokens to be minted\n   */\n  constructor(uint256[] _lockupTimes, ODXToken _token) public {\n    require(_lockupTimes.length > 0);\n    \n    lockupTimes = _lockupTimes;\n    token = _token;\n  }\n\n  /**\n   * Owner can add an address to the privatesaleagents.\n   */\n  function setPrivateSaleAgent(address addr, bool state) onlyOwner public {\n    privateSaleAgents[addr] = state;\n    emit PrivateSaleAgentChanged(addr, state);\n  }\n  \n  /**\n   * @dev Overrides delivery by minting tokens upon purchase.\n   * @param _beneficiary Token purchaser\n   * @param _tokenAmount Number of tokens to be minted\n   */\n  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n    require(ODXToken(token).mint(_beneficiary, _tokenAmount));\n  }\n  \n  /**\n   * @dev claim locked tokens only after lockup time.\n   */\n   \n  function claimLockedTokens() public {\n    for (uint i=0; i<lockupTimes.length; i++) {\n        uint256 lockupTime = lockupTimes[i];\n        if (lockupTime < now){\n            uint256 tokens = lockedTokens[msg.sender][i];\n            if (tokens>0){\n                lockedTokens[msg.sender][i] = 0;\n                _deliverTokens(msg.sender, tokens);    \n            }\n        }\n    }\n  }\n\n\n  /**\n   * @dev release locked tokens only after lockup time.\n   */\n  function releaseLockedTokensByIndex(address _beneficiary, uint256 _lockedTimeIndex) onlyOwner public {\n    require(lockupTimes[_lockedTimeIndex] < now);\n    uint256 tokens = lockedTokens[_beneficiary][_lockedTimeIndex];\n    if (tokens>0){\n        lockedTokens[_beneficiary][_lockedTimeIndex] = 0;\n        _deliverTokens(_beneficiary, tokens);    \n    }\n  }\n  \n  function releaseLockedTokens(address _beneficiary) public {\n    for (uint i=0; i<lockupTimes.length; i++) {\n        uint256 lockupTime = lockupTimes[i];\n        if (lockupTime < now){\n            uint256 tokens = lockedTokens[_beneficiary][i];\n            if (tokens>0){\n                lockedTokens[_beneficiary][i] = 0;\n                _deliverTokens(_beneficiary, tokens);    \n            }\n        }\n    }\n    \n  }\n  \n  function tokensReadyForRelease(uint256 releaseBatch) public view returns (bool) {\n      bool forRelease = false;\n      uint256 lockupTime = lockupTimes[releaseBatch];\n      if (lockupTime < now){\n        forRelease = true;\n      }\n      return forRelease;\n  }\n\n  /**\n   * @dev Returns the locked tokens of a specific user.\n   * @param _beneficiary Address whose locked tokens is to be checked\n   * @return locked tokens for individual user\n   */\n  function getTotalLockedTokensPerUser(address _beneficiary) public view returns (uint256) {\n    uint256 totalTokens = 0;\n    uint256[] memory lTokens = lockedTokens[_beneficiary];\n    for (uint i=0; i<lockupTimes.length; i++) {\n        totalTokens += lTokens[i];\n    }\n    return totalTokens;\n  }\n  \n  function getLockedTokensPerUser(address _beneficiary) public view returns (uint256[]) {\n    return lockedTokens[_beneficiary];\n  }\n\n  function addPrivateSaleWithMonthlyLockup(address _beneficiary, uint256[] _atokenAmount, uint256 _totalContributionAmount) onlyPrivateSaleAgent public {\n      require(_beneficiary != address(0));\n      require(_totalContributionAmount > 0);\n      require(_atokenAmount.length == lockupTimes.length);\n      \n      uint256 existingContribution = privateSale[_beneficiary];\n      if (existingContribution > 0){\n        revert();\n      }else{\n        lockedTokens[_beneficiary] = _atokenAmount;\n        privateSale[_beneficiary] = _totalContributionAmount;\n          \n        weiRaisedDuringPrivateSale = weiRaisedDuringPrivateSale.add(_totalContributionAmount);\n          \n        emit AddLockedTokens(\n          _beneficiary,\n          _totalContributionAmount,\n          _atokenAmount\n        );\n          \n      }\n      \n  }\n  \n  /*\n  function getTotalTokensPerArray(uint256[] _tokensArray) internal pure returns (uint256) {\n      uint256 totalTokensPerArray = 0;\n      for (uint i=0; i<_tokensArray.length; i++) {\n        totalTokensPerArray += _tokensArray[i];\n      }\n      return totalTokensPerArray;\n  }\n  */\n\n\n  /**\n   * @dev update locked tokens per user \n   * @param _beneficiary Token purchaser\n   * @param _lockedTimeIndex lockupTimes index\n   * @param _atokenAmount Amount of tokens to be minted\n   * @param _totalContributionAmount ETH equivalent of the contribution\n   */\n  function updatePrivateSaleWithMonthlyLockupByIndex(address _beneficiary, uint _lockedTimeIndex, uint256 _atokenAmount, uint256 _totalContributionAmount) onlyPrivateSaleAgent public {\n      require(_beneficiary != address(0));\n      require(_totalContributionAmount > 0);\n      //_lockedTimeIndex must be valid within the lockuptimes length\n      require(_lockedTimeIndex < lockupTimes.length);\n\n      \n      uint256 oldContributions = privateSale[_beneficiary];\n      //make sure beneficiary has existing contribution otherwise use addPrivateSaleWithMonthlyLockup\n      require(oldContributions > 0);\n\n      //make sure lockuptime of the index is less than now (tokens were not yet released)\n      require(!tokensReadyForRelease(_lockedTimeIndex));\n      \n      lockedTokens[_beneficiary][_lockedTimeIndex] = _atokenAmount;\n      \n      //subtract old contribution from weiRaisedDuringPrivateSale\n      weiRaisedDuringPrivateSale = weiRaisedDuringPrivateSale.sub(oldContributions);\n      \n      //add new contribution to weiRaisedDuringPrivateSale\n      privateSale[_beneficiary] = _totalContributionAmount;\n      weiRaisedDuringPrivateSale = weiRaisedDuringPrivateSale.add(_totalContributionAmount);\n            \n      emit UpdateLockedTokens(\n      _beneficiary,\n      _totalContributionAmount,\n      _lockedTimeIndex,\n      _atokenAmount\n    );\n  }\n\n\n}\n\n/**\n * @title ODXPrivateSale\n * @dev This is for the private sale of ODX.  \n */\ncontract ODXPrivateSale is PrivateSaleRules {\n\nuint256[] alockupTimes = [1556582400,1559174400,1561852800,1564444800,1567123200,1569801600,1572393600,1575072000,1577664000,1580342400];\n    \n  constructor(\n    ODXToken _token\n  )\n    public\n    PrivateSaleRules(alockupTimes, _token)\n  {  }\n  \n}",
  "bytecode": "608060405261014060405190810160405280635cc7900063ffffffff168152602001635cef1d0063ffffffff168152602001635d17fb8063ffffffff168152602001635d3f888063ffffffff168152602001635d68670063ffffffff168152602001635d91458063ffffffff168152602001635db8d28063ffffffff168152602001635de1b10063ffffffff168152602001635e093e0063ffffffff168152602001635e321c8063ffffffff16815250600790600a620000c1929190620001fb565b50348015620000cf57600080fd5b50604051602080620019288339810180604052810190808051906020019092919050505060078054806020026020016040519081016040528092919081815260200182805480156200014157602002820191906000526020600020905b8154815260200190600101908083116200012c575b505050505081336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600082511115156200019857600080fd5b8160039080519060200190620001b092919062000255565b5080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050620002cf565b82805482825590600052602060002090810192821562000242579160200282015b8281111562000241578251829063ffffffff169055916020019190600101906200021c565b5b509050620002519190620002a7565b5090565b82805482825590600052602060002090810192821562000294579160200282015b828111156200029357825182559160200191906001019062000276565b5b509050620002a39190620002a7565b5090565b620002cc91905b80821115620002c8576000816000905550600101620002ae565b5090565b90565b61164980620002df6000396000f3006080604052600436106100f1576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630cbfe979146100f657806315970cae1461015757806330f857f3146101825780633b9c7ac21461021257806340a1f87d1461022957806353719b6e1461028057806358259694146102e15780635cbee9ba1461033c57806387ac8ac01461037f5780638da5cb5b146103c0578063930e117314610417578063add2af691461045c578063c28c770a146104a9578063c739d31c14610541578063e7d53fcb14610590578063f2fde38b146105e7578063fc0c546a1461062a575b600080fd5b34801561010257600080fd5b50610155600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190505050610681565b005b34801561016357600080fd5b5061016c610930565b6040518082815260200191505060405180910390f35b34801561018e57600080fd5b50610210600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190929190505050610936565b005b34801561021e57600080fd5b50610227610be6565b005b34801561023557600080fd5b5061026a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610cfc565b6040518082815260200191505060405180910390f35b34801561028c57600080fd5b506102cb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ddc565b6040518082815260200191505060405180910390f35b3480156102ed57600080fd5b50610322600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e0c565b604051808215151515815260200191505060405180910390f35b34801561034857600080fd5b5061037d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e2c565b005b34801561038b57600080fd5b506103aa60048036038101908080359060200190929190505050610f43565b6040518082815260200191505060405180910390f35b3480156103cc57600080fd5b506103d5610f66565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561042357600080fd5b5061044260048036038101908080359060200190929190505050610f8b565b604051808215151515815260200191505060405180910390f35b34801561046857600080fd5b506104a7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610fc6565b005b3480156104b557600080fd5b506104ea600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611118565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561052d578082015181840152602081019050610512565b505050509050019250505060405180910390f35b34801561054d57600080fd5b5061058e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035151590602001909291905050506111af565b005b34801561059c57600080fd5b506105d1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112d4565b6040518082815260200191505060405180910390f35b3480156105f357600080fd5b50610628600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112ec565b005b34801561063657600080fd5b5061063f611441565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff168061072757506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561073257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415151561076e57600080fd5b60008211151561077d57600080fd5b6003805490508410151561079057600080fd5b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811115156107e157600080fd5b6107ea84610f8b565b1515156107f657600080fd5b82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208581548110151561084357fe5b90600052602060002001819055506108668160015461146790919063ffffffff16565b60018190555081600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506108c58260015461148090919063ffffffff16565b6001819055508473ffffffffffffffffffffffffffffffffffffffff167f3105a511686b9896c33bb27d5bfdd8973c8c41b43e64d2525657b717b10aaff683868660405180848152602001838152602001828152602001935050505060405180910390a25050505050565b60015481565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16806109dc57506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156109e757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515610a2357600080fd5b600082111515610a3257600080fd5b6003805490508351141515610a4657600080fd5b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811115610a9657600080fd5b82600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209080519060200190610ae99291906115ab565b5081600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b438260015461148090919063ffffffff16565b6001819055508373ffffffffffffffffffffffffffffffffffffffff167fa28933be8a98673bfb25a805a5fbac5ef1defacf5fd0d2f7787d8d89b177189283856040518083815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015610bcc578082015181840152602081019050610bb1565b50505050905001935050505060405180910390a250505050565b60008060008092505b600380549050831015610cf757600383815481101515610c0b57fe5b9060005260206000200154915042821015610cea57600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083815481101515610c6c57fe5b906000526020600020015490506000811115610ce9576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084815481101515610cd057fe5b9060005260206000200181905550610ce8338261149c565b5b5b8280600101935050610bef565b505050565b60008060606000809250600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610d8f57602002820191906000526020600020905b815481526020019060010190808311610d7b575b50505050509150600090505b600380549050811015610dd1578181815181101515610db657fe5b90602001906020020151830192508080600101915050610d9b565b829350505050919050565b600260205281600052604060002081815481101515610df757fe5b90600052602060002001600091509150505481565b60056020528060005260406000206000915054906101000a900460ff1681565b60008060008092505b600380549050831015610f3d57600383815481101515610e5157fe5b9060005260206000200154915042821015610f3057600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083815481101515610eb257fe5b906000526020600020015490506000811115610f2f576000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084815481101515610f1657fe5b9060005260206000200181905550610f2e848261149c565b5b5b8280600101935050610e35565b50505050565b600381815481101515610f5257fe5b906000526020600020016000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000809150600384815481101515610fa257fe5b9060005260206000200154905042811015610fbc57600191505b8192505050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561102357600080fd5b4260038381548110151561103357fe5b906000526020600020015410151561104a57600080fd5b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561109657fe5b906000526020600020015490506000811115611113576000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020838154811015156110fa57fe5b9060005260206000200181905550611112838261149c565b5b505050565b6060600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156111a357602002820191906000526020600020905b81548152602001906001019080831161118f575b50505050509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561120a57600080fd5b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f09eb06af788004f470f8c0c0cd3d5ce2195e919bca11044998e4206bd00cd8228282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a15050565b60046020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561134757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561138357600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600082821115151561147557fe5b818303905092915050565b6000818301905082811015151561149357fe5b80905092915050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1983836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561156157600080fd5b505af1158015611575573d6000803e3d6000fd5b505050506040513d602081101561158b57600080fd5b810190808051906020019092919050505015156115a757600080fd5b5050565b8280548282559060005260206000209081019282156115e7579160200282015b828111156115e65782518255916020019190600101906115cb565b5b5090506115f491906115f8565b5090565b61161a91905b808211156116165760008160009055506001016115fe565b5090565b905600a165627a7a7230582015cacc7baba75ab966509d25be09fc8d7ca5466852585d9fdc72d755d502896f00290000000000000000000000001f861e20d1599f7394dd0cdcf567aa2590bd997b",
  "constructorArguments": "0000000000000000000000001f861e20d1599f7394dd0cdcf567aa2590bd997b"
}