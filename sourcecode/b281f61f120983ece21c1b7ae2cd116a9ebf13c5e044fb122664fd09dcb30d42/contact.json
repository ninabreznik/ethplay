{
  "address": "0x98135aa7d498890176bfd34bc451b4dd36b4be01",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Spark",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-16\n*/\n\npragma solidity 0.4.19;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    //Variables\n    address public owner;\n\n    address public newOwner;\n\n    //    Modifiers\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address _newOwner) public onlyOwner {\n        require(_newOwner != address(0));\n        newOwner = _newOwner;\n\n    }\n\n    function acceptOwnership() public {\n        if (msg.sender == newOwner) {\n            owner = newOwner;\n        }\n    }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) public constant returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public constant returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n\n    using SafeMath for uint256;\n\n    mapping (address => uint256) public balances;\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood:\n        https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}\n\ncontract SparkERC20 is StandardToken, Ownable {\n\n    using SafeMath for uint256;\n\n    /* Public variables of the token */\n    uint256 public creationBlock;\n\n    uint8 public decimals;\n\n    string public name;\n\n    string public symbol;\n\n    string public standard;\n\n    bool public locked;\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function SparkERC20(\n        uint256 _totalSupply,\n        string _tokenName,\n        uint8 _decimalUnits,\n        string _tokenSymbol,\n        bool _transferAllSupplyToOwner,\n        bool _locked\n    ) public {\n        standard = \"ERC20 0.1\";\n        locked = _locked;\n        totalSupply = _totalSupply;\n\n        if (_transferAllSupplyToOwner) {\n            balances[msg.sender] = totalSupply;\n        } else {\n            balances[this] = totalSupply;\n        }\n        name = _tokenName;\n        // Set the name for display purposes\n        symbol = _tokenSymbol;\n        // Set the symbol for display purposes\n        decimals = _decimalUnits;\n        // Amount of decimals for display purposes\n        creationBlock = block.number;\n    }\n\n    /* public methods */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(locked == false);\n        return super.transfer(_to, _value);\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        if (locked) {\n            return false;\n        }\n        return super.approve(_spender, _value);\n    }\n\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\n        if (locked) {\n            return false;\n        }\n        return super.increaseApproval(_spender, _addedValue);\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\n        if (locked) {\n            return false;\n        }\n        return super.decreaseApproval(_spender, _subtractedValue);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        if (locked) {\n            return false;\n        }\n\n        return super.transferFrom(_from, _to, _value);\n    }\n\n}\n\n/*\nThis contract manages the minters and the modifier to allow mint to happen only if called by minters\nThis contract contains basic minting functionality though\n*/\ncontract MintingERC20 is SparkERC20 {\n\n    // Variables\n    uint256 public maxSupply;\n\n    mapping (address => bool) public minters;\n\n    // Modifiers\n    modifier onlyMinters() {\n        require(true == minters[msg.sender]);\n        _;\n    }\n\n    function MintingERC20(\n        uint256 _initialSupply,\n        uint256 _maxSupply,\n        string _tokenName,\n        uint8 _decimals,\n        string _symbol,\n        bool _transferAllSupplyToOwner,\n        bool _locked\n    ) public SparkERC20(\n        _initialSupply,\n        _tokenName,\n        _decimals,\n        _symbol,\n        _transferAllSupplyToOwner,\n        _locked\n    )\n    {\n        standard = \"MintingERC20 0.1\";\n        minters[msg.sender] = true;\n        maxSupply = _maxSupply;\n    }\n\n    function addMinter(address _newMinter) public onlyOwner {\n        minters[_newMinter] = true;\n    }\n\n    function removeMinter(address _minter) public onlyOwner {\n        minters[_minter] = false;\n    }\n\n    function mint(address _addr, uint256 _amount) public onlyMinters returns (uint256) {\n        if (_amount == uint256(0)) {\n            return uint256(0);\n        }\n\n        if (totalSupply.add(_amount) > maxSupply) {\n            return uint256(0);\n        }\n\n        totalSupply = totalSupply.add(_amount);\n        balances[_addr] = balances[_addr].add(_amount);\n        Transfer(address(0), _addr, _amount);\n\n        return _amount;\n    }\n\n}\n\ncontract Spark is MintingERC20 {\n\n    ICO public ico;\n\n    SparkDividends public dividends;\n\n    bool public transferFrozen = true;\n\n    function Spark(\n        string _tokenName,\n        uint8 _decimals,\n        string _symbol,\n        uint256 _maxSupply,\n        bool _locked\n    ) public MintingERC20(0, _maxSupply, _tokenName, _decimals, _symbol, false, _locked)\n    {\n        standard = \"Spark 0.1\";\n    }\n\n    function setICO(address _ico) public onlyOwner {\n        require(_ico != address(0));\n        ico = ICO(_ico);\n    }\n\n    function setSparkDividends(address _dividends) public onlyOwner {\n        require(address(0) != _dividends);\n        dividends = SparkDividends(_dividends);\n    }\n\n    function setLocked(bool _locked) public onlyOwner {\n        locked = _locked;\n    }\n\n    // prevent manual minting tokens when ICO is active;\n    function mint(address _addr, uint256 _amount) public onlyMinters returns (uint256) {\n        uint256 mintedAmount;\n        if (msg.sender == owner) {\n            require(address(ico) != address(0));\n            if (!ico.isActive() && block.timestamp >= ico.startTime()) {\n                mintedAmount = super.mint(_addr, _amount);\n            }\n        } else {\n            mintedAmount = super.mint(_addr, _amount);\n        }\n\n        if (mintedAmount == _amount) {\n            require(address(dividends) != address(0));\n            dividends.logAccount(_addr, _amount);\n        }\n\n        return mintedAmount;\n    }\n\n    // Allow token transfer.\n    function freezing(bool _transferFrozen) public onlyOwner {\n        if (address(ico) != address(0) && !ico.isActive() && block.timestamp >= ico.startTime()) {\n            transferFrozen = _transferFrozen;\n        }\n    }\n\n    // ERC20 functions\n    // =========================\n    function transfer(address _to, uint _value) public returns (bool) {\n        require(!transferFrozen);\n\n        bool status = super.transfer(_to, _value);\n        if (status) {\n            require(address(dividends) != address(0));\n            dividends.logAccount(msg.sender, 0);\n            dividends.logAccount(_to, 0);\n        }\n\n        return status;\n    }\n\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n        require(!transferFrozen);\n\n        bool status = super.transferFrom(_from, _to, _value);\n        if (status) {\n            require(address(dividends) != address(0));\n            dividends.logAccount(_from, 0);\n            dividends.logAccount(_to, 0);\n        }\n\n        return status;\n\n    }\n\n}\n\ncontract WhiteList is Ownable {\n\n    mapping (address => bool) public whitelist;\n\n    /* events */\n    event WhitelistSet(address contributorAddress);\n\n    event WhitelistUnset(address contributorAddress);\n\n    modifier onlyWhitelisted() {\n        require(true == whitelist[msg.sender]);\n        _;\n    }\n\n    function WhiteList() public {\n        whitelist[msg.sender] = true;\n    }\n\n    function addToWhitelist(address _address) public onlyOwner {\n        whitelist[_address] = true;\n        WhitelistSet(_address);\n    }\n\n    function removeFromWhitelist(address _address) public onlyOwner {\n        whitelist[_address] = false;\n        WhitelistUnset(_address);\n    }\n\n}\n\ncontract SparkDividends is Ownable {\n\n    using SafeMath for uint256;\n\n    Spark public spark;\n\n    ICO public ico;\n\n    address public treasuryAddress;\n\n    mapping(address => DividendData[]) public accounts;\n\n    FundsData[] public funds;\n\n    struct DividendData {\n        uint256 period;\n        uint256 day;\n        uint256 balance;\n    }\n\n    struct FundsData {\n        uint256 period;\n        uint256 ethersAmount;\n    }\n\n    event Disbursed(address indexed holder, uint256 value);\n\n    modifier onlySparkContracts() {\n        require(msg.sender == address(spark) || msg.sender == address(ico));\n        _;\n    }\n\n    function SparkDividends(\n        address _spark,\n        address _ico,\n        address _treasuryAddress\n    ) public {\n        require(_spark != address(0) && _ico != address(0) && _treasuryAddress != address(0));\n        spark = Spark(_spark);\n        ico = ICO(_ico);\n        treasuryAddress = _treasuryAddress;\n    }\n\n    function setSpark(address _spark) public onlyOwner {\n        require(_spark != address(0));\n        spark = Spark(_spark);\n    }\n\n    function setICO(address _ico) public onlyOwner {\n        require(_ico != address(0));\n        ico = ICO(_ico);\n    }\n\n    function setTreasuryAddress(address _treasuryAddress) public onlyOwner {\n        require(_treasuryAddress != address(0));\n        treasuryAddress = _treasuryAddress;\n    }\n\n    function transferEthers() public onlyOwner {\n        owner.transfer(this.balance);\n    }\n\n    function logAccount(address _address, uint256 _amount) public onlySparkContracts returns (bool) {\n        uint256 day = 0;\n        uint256 period = 1;\n\n        if (now > ico.endTime()) {\n            (period, day) = getPeriod(now);\n        }\n\n        if (_address != address(0) && period > 0) {\n            if (day != 0 && _amount > 0) {\n                logData(_address, period, 0, _amount);\n            }\n\n            logData(_address, period, day, 0);\n\n            return true;\n        }\n\n        return false;\n    }\n\n    function setEtherAmount() public payable returns (bool) {\n        if (msg.value == 0) {\n            return false;\n        }\n\n        uint256 day = 0;\n        uint256 period = 1;\n\n        if (now > ico.endTime()) {\n            (period, day) = getPeriod(now);\n        }\n\n        uint256 index = getFundsDataIndex(period);\n\n        if (index == funds.length) {\n            funds.push(FundsData(period, msg.value));\n        } else {\n            funds[index].ethersAmount = funds[index].ethersAmount.add(msg.value);\n        }\n\n        return true;\n    }\n\n    function claim() public returns (bool) {\n        uint256 currentDay;\n        uint256 currentPeriod;\n        bool status;\n        (currentPeriod, currentDay) = getPeriod(now);\n        if (currentPeriod == 1) {\n            return false;\n        }\n\n        uint256 dividendAmount;\n        uint256 outdatedAmount;\n        (dividendAmount, outdatedAmount) = calculateAmount(msg.sender, currentPeriod, currentDay);\n\n        if (dividendAmount == 0) {\n            return false;\n        }\n\n        msg.sender.transfer(dividendAmount);\n\n        if (outdatedAmount > 0) {\n            treasuryAddress.transfer(outdatedAmount);\n        }\n\n        if (cleanDividendsData(msg.sender, currentPeriod)) {\n            Disbursed(msg.sender, dividendAmount);\n            status = true;\n        }\n\n        require(status);\n        return true;\n    }\n\n    function calculateAmount(\n        address _address,\n        uint256 _currentPeriod,\n        uint256 _currentDay\n    ) public view returns (uint256 totalAmount, uint256 totalOutdated) {\n        for (uint256 i = 0; i < accounts[_address].length; i++) {\n            if (accounts[_address][i].period < _currentPeriod) {\n                uint256 index = getFundsDataIndex(accounts[_address][i].period);\n                if (index == funds.length) {\n                    continue;\n                }\n                uint256 dayEthers = funds[index].ethersAmount.div(90);\n                uint256 balance;\n                uint256 to = 90;\n\n                if (\n                    accounts[_address].length > i.add(1) &&\n                    accounts[_address][i.add(1)].period == accounts[_address][i].period\n                ) {\n                    to = accounts[_address][i.add(1)].day;\n                }\n\n                for (uint256 j = accounts[_address][i].day; j < to; j++) {\n                    balance = getBalanceByDay(_address, accounts[_address][i].period, j);\n                    if (_currentPeriod.sub(accounts[_address][i].period) > 1 && _currentDay > 2) {\n                        totalOutdated = totalOutdated.add(balance.mul(dayEthers).div(spark.maxSupply()));\n                    } else {\n                        totalAmount = totalAmount.add(balance.mul(dayEthers).div(spark.maxSupply()));\n                    }\n                }\n            }\n        }\n    }\n\n    function logData(address _address, uint256 _period, uint256 _day, uint256 _amount) internal {\n        uint256 index = getDividendDataIndex(_address, _period, _day);\n        if (accounts[_address].length == index) {\n            accounts[_address].push(DividendData(_period, _day, spark.balanceOf(_address).sub(_amount)));\n        } else if (_amount == 0) {\n            accounts[_address][index].balance = spark.balanceOf(_address);\n        }\n    }\n\n    function getPeriod(uint256 _time) internal view returns (uint256, uint256) {\n        uint256 day = uint(_time.sub(ico.endTime()) % 90 days).div(1 days);\n        uint256 period = _time.sub(ico.endTime()).div(90 days);\n\n        return (++period, day);\n    }\n\n    function cleanDividendsData(address _address, uint256 _currentPeriod) internal returns (bool) {\n        for (uint256 i = 0; i < accounts[_address].length; i++) {\n            if (accounts[_address][i].period < _currentPeriod) {\n                for (uint256 j = i; j < accounts[_address].length.sub(1); j++) {\n                    DividendData storage dividend = accounts[_address][j];\n\n                    dividend.period = accounts[_address][j.add(1)].period;\n                    dividend.day = accounts[_address][j.add(1)].day;\n                    dividend.balance = accounts[_address][j.add(1)].balance;\n                }\n                delete accounts[_address][accounts[_address].length.sub(1)];\n                accounts[_address].length--;\n                i--;\n            }\n        }\n\n        return true;\n    }\n\n    function getFundsDataIndex(uint256 _period) internal view returns (uint256) {\n        for (uint256 i = 0; i < funds.length; i++) {\n            if (funds[i].period == _period) {\n                return i;\n            }\n        }\n\n        return funds.length;\n    }\n\n    function getBalanceByDay(address _address, uint256 _period, uint256 _day) internal view returns (uint256) {\n        for (uint256 i = accounts[_address].length.sub(1); i >= 0; i--) {\n            if (accounts[_address][i].period == _period && accounts[_address][i].day <= _day) {\n                return accounts[_address][i].balance;\n            }\n        }\n\n        return 0;\n    }\n\n    function getDividendDataIndex(address _address, uint256 _period, uint256 _day) internal view returns (uint256) {\n        for (uint256 i = 0; i < accounts[_address].length; i++) {\n            if (accounts[_address][i].period == _period && accounts[_address][i].day == _day) {\n                return i;\n            }\n        }\n\n        return accounts[_address].length;\n    }\n\n}\n\ncontract Multivest is Ownable {\n    /* public variables */\n    mapping (address => bool) public allowedMultivests;\n\n    /* events */\n    event MultivestSet(address multivest);\n\n    event MultivestUnset(address multivest);\n\n    event Contribution(address holder, uint256 value, uint256 tokens);\n\n    modifier onlyAllowedMultivests(address _addresss) {\n        require(allowedMultivests[_addresss] == true);\n        _;\n    }\n\n    /* constructor */\n    function Multivest(address _multivest) public {\n        allowedMultivests[_multivest] = true;\n    }\n\n    function setAllowedMultivest(address _address) public onlyOwner {\n        allowedMultivests[_address] = true;\n        MultivestSet(_address);\n    }\n\n    function unsetAllowedMultivest(address _address) public onlyOwner {\n        allowedMultivests[_address] = false;\n        MultivestUnset(_address);\n    }\n\n    function multivestBuy(address _address, uint256 _value) public onlyAllowedMultivests(msg.sender) {\n        require(buy(_address, _value) == true);\n    }\n\n    function multivestBuy(\n        address _address,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    ) public payable onlyAllowedMultivests(verify(keccak256(msg.sender), _v, _r, _s)) {\n        require(_address == msg.sender && buy(msg.sender, msg.value) == true);\n    }\n\n    function verify(bytes32 _hash, uint8 _v, bytes32 _r, bytes32 _s) internal pure returns(address) {\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\n\n        return ecrecover(keccak256(prefix, _hash), _v, _r, _s);\n    }\n\n    function buy(address _address, uint256 value) internal returns (bool);\n\n}\n\ncontract SellableToken is Multivest {\n\n    using SafeMath for uint256;\n\n    // The token being sold\n    Spark public spark;\n\n    // start and end timestamps where investments are allowed (both inclusive)\n    uint256 public startTime;\n    uint256 public endTime;\n\n    // amount of sold tokens\n    uint256 public soldTokens;\n\n    // amount of raised money in wei\n    uint256 public collectedEthers;\n\n    // address where funds are collected\n    address public etherHolder;\n\n    address public tokensHolder;\n\n    Bonus[] public bonuses;\n\n    struct Bonus {\n        uint256 maxAmount;\n        uint256 bonus;\n    }\n\n    function SellableToken(\n        address _multivestAddress,\n        address _etherHolder,\n        address _tokensHolder,\n        address _spark,\n        uint256 _startTime,\n        uint256 _endTime\n    ) public Multivest(_multivestAddress)\n    {\n        require(_spark != address(0) && _etherHolder != address(0) && _tokensHolder != address(0));\n        spark = Spark(_spark);\n        etherHolder = _etherHolder;\n        tokensHolder = _tokensHolder;\n\n        require(_startTime < _endTime);\n\n        startTime = _startTime;\n        endTime = _endTime;\n    }\n\n    function setSpark(address _spark) public onlyOwner {\n        require(_spark != address(0));\n        spark = Spark(_spark);\n    }\n\n    function setEtherHolder(address _etherHolder) public onlyOwner {\n        require(_etherHolder != address(0));\n        etherHolder = _etherHolder;\n    }\n\n    function setTokenHolder(address _tokensHolder) public onlyOwner {\n        require(_tokensHolder != address(0));\n        tokensHolder = _tokensHolder;\n    }\n\n    function transferEthers() public onlyOwner {\n        etherHolder.transfer(this.balance);\n    }\n\n    // @return true if sale period is active\n    function isActive() public constant returns (bool) {\n        if (soldTokens == spark.maxSupply()) {\n            return false;\n        }\n        return withinPeriod();\n    }\n\n    // @return true if the transaction can buy tokens\n    function withinPeriod() public constant returns (bool) {\n        return block.timestamp >= startTime && block.timestamp <= endTime;\n    }\n}\n\ncontract ICO is SellableToken, WhiteList {\n\n    uint256 public price;\n\n    function ICO(\n        address _multivestAddress,\n        address _etherHolder,\n        address _tokensHolder,\n        address _spark,\n        uint256 _startTime,\n        uint256 _endTime,\n        uint256 _price\n    ) public SellableToken(\n        _multivestAddress,\n        _etherHolder,\n        _tokensHolder,\n        _spark,\n        _startTime,\n        _endTime\n    ) WhiteList() {\n        require(_price > 0);\n        price = _price;\n\n        bonuses.push(Bonus(uint(10000000).mul(uint(10) ** spark.decimals()), uint256(150)));\n        bonuses.push(Bonus(uint(15000000).mul(uint(10) ** spark.decimals()), uint256(125)));\n        bonuses.push(Bonus(uint(20000000).mul(uint(10) ** spark.decimals()), uint256(110)));\n    }\n\n    function() public payable onlyWhitelisted {\n        require(buy(msg.sender, msg.value) == true);\n    }\n\n    function allocateUnsoldTokens() public {\n        if (!isActive() && block.timestamp >= startTime) {\n            uint256 amount = spark.maxSupply().sub(soldTokens);\n            require(amount > 0 && spark.mint(tokensHolder, amount) == amount);\n            soldTokens = spark.maxSupply();\n        }\n    }\n\n    function calculateTokensAmount(uint256 _value) public view returns (uint256 amount) {\n        amount = _value.mul(uint(10) ** spark.decimals()).div(price);\n        amount = amount.add(calculateBonusAmount(amount));\n    }\n\n    function calculateEthersAmount(uint256 _tokens) public view returns (uint256 ethers, uint256 bonus) {\n        if (_tokens == 0) {\n            return (0, 0);\n        }\n\n        ethers = _tokens.mul(price).div(uint(10) ** spark.decimals());\n        bonus = calculateBonusAmount(_tokens);\n    }\n\n    function buy(address _address, uint256 _value) internal returns (bool) {\n        if (_value == 0) {\n            return false;\n        }\n\n        require(withinPeriod() && _address != address(0));\n\n        uint256 amount = calculateTokensAmount(_value);\n\n        require(amount > 0 && spark.mint(_address, amount) == amount);\n\n        collectedEthers = collectedEthers.add(_value);\n        soldTokens = soldTokens.add(amount);\n\n        Contribution(_address, _value, amount);\n\n        return true;\n    }\n\n    function calculateBonusAmount(uint256 _amount) internal view returns (uint256) {\n        uint256 newSoldTokens = soldTokens;\n        uint256 remainingValue = _amount;\n\n        for (uint i = 0; i < bonuses.length; i++) {\n\n            if (bonuses[i].maxAmount > soldTokens) {\n                uint256 amount = remainingValue.mul(bonuses[i].bonus).div(100);\n                if (newSoldTokens.add(amount) > bonuses[i].maxAmount) {\n                    uint256 diff = bonuses[i].maxAmount.sub(newSoldTokens);\n                    remainingValue = remainingValue.sub(diff.mul(100).div(bonuses[i].bonus));\n                    newSoldTokens = newSoldTokens.add(diff);\n                } else {\n                    remainingValue = 0;\n                    newSoldTokens = newSoldTokens.add(amount);\n                }\n\n                if (remainingValue == 0) {\n                    break;\n                }\n            }\n        }\n\n        return newSoldTokens.add(remainingValue).sub(soldTokens.add(_amount));\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_locked\",\"type\":\"bool\"}],\"name\":\"setLocked\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividends\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transferFrozen\",\"type\":\"bool\"}],\"name\":\"freezing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dividends\",\"type\":\"address\"}],\"name\":\"setSparkDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMinter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ico\",\"type\":\"address\"}],\"name\":\"setICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"name\":\"_locked\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "6060604052600e805460a060020a60ff0219167401000000000000000000000000000000000000000017905534156200003757600080fd5b604051620018d0380380620018d083398101604052808051820191906020018051919060200180518201919060200180519190602001805160038054600160a060020a03191633600160a060020a03161790559150600090508286868684868185858583856040805190810160405260098082527f455243323020302e3100000000000000000000000000000000000000000000006020830152908051620000e492916020019062000257565b50600a805460ff191682151517905560008690558115620001205760008054600160a060020a033316825260016020526040909120556200013c565b60008054600160a060020a033016825260016020526040909120555b60078580516200015192916020019062000257565b5060088380516200016792916020019062000257565b50506006805460ff191660ff949094169390931790925550504360055550604090508051908101604052601081527f4d696e74696e67455243323020302e310000000000000000000000000000000060208201526009908051620001d092916020019062000257565b505050600160a060020a0333166000908152600c602052604090819020805460ff19166001179055600b9490945550919250829150505190810160405260098082527f537061726b20302e31000000000000000000000000000000000000000000000060208301529080516200024b92916020019062000257565b505050505050620002fc565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200029a57805160ff1916838001178555620002ca565b82800160010185558215620002ca579182015b82811115620002ca578251825591602001919060010190620002ad565b50620002d8929150620002dc565b5090565b620002f991905b80821115620002d85760008155600101620002e3565b90565b6115c4806200030c6000396000f3006060604052600436106101715763ffffffff60e060020a60003504166306fdde038114610176578063095ea7b314610200578063176345141461023657806318160ddd1461025b578063211e28b61461026e57806323b872dd1461028857806327e235e3146102b05780633092afd5146102cf578063313ce567146102ee57806335d974051461031757806336a23dbf1461034657806340c10f191461035e5780635a3b7e42146103805780635d4522011461039357806366188463146103a657806370a08231146103c857806379ba5097146103e75780637ec2ae46146103fa5780638da5cb5b1461041957806395d89b411461042c578063983b2d561461043f578063a9059cbb1461045e578063ade4637a14610480578063b6f50c2914610493578063cf309012146104b2578063d4ee1d90146104c5578063d5abeb01146104d8578063d73dd623146104eb578063dd62ed3e1461050d578063f2fde38b14610532578063f46eccc414610551575b600080fd5b341561018157600080fd5b610189610570565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101c55780820151838201526020016101ad565b50505050905090810190601f1680156101f25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561020b57600080fd5b610222600160a060020a036004351660243561060e565b604051901515815260200160405180910390f35b341561024157600080fd5b610249610637565b60405190815260200160405180910390f35b341561026657600080fd5b61024961063d565b341561027957600080fd5b6102866004351515610643565b005b341561029357600080fd5b610222600160a060020a0360043581169060243516604435610671565b34156102bb57600080fd5b610249600160a060020a03600435166107b4565b34156102da57600080fd5b610286600160a060020a03600435166107c6565b34156102f957600080fd5b610301610802565b60405160ff909116815260200160405180910390f35b341561032257600080fd5b61032a61080b565b604051600160a060020a03909116815260200160405180910390f35b341561035157600080fd5b610286600435151561081a565b341561036957600080fd5b610249600160a060020a036004351660243561094e565b341561038b57600080fd5b610189610b3f565b341561039e57600080fd5b61032a610baa565b34156103b157600080fd5b610222600160a060020a0360043516602435610bb9565b34156103d357600080fd5b610249600160a060020a0360043516610bd9565b34156103f257600080fd5b610286610bf4565b341561040557600080fd5b610286600160a060020a0360043516610c3d565b341561042457600080fd5b61032a610c9c565b341561043757600080fd5b610189610cab565b341561044a57600080fd5b610286600160a060020a0360043516610d16565b341561046957600080fd5b610222600160a060020a0360043516602435610d55565b341561048b57600080fd5b610222610e73565b341561049e57600080fd5b610286600160a060020a0360043516610e83565b34156104bd57600080fd5b610222610ee2565b34156104d057600080fd5b61032a610eeb565b34156104e357600080fd5b610249610efa565b34156104f657600080fd5b610222600160a060020a0360043516602435610f00565b341561051857600080fd5b610249600160a060020a0360043581169060243516610f20565b341561053d57600080fd5b610286600160a060020a0360043516610f4b565b341561055c57600080fd5b610222600160a060020a0360043516610faa565b60078054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106065780601f106105db57610100808354040283529160200191610606565b820191906000526020600020905b8154815290600101906020018083116105e957829003601f168201915b505050505081565b600a5460009060ff161561062457506000610631565b61062e8383610fbf565b90505b92915050565b60055481565b60005481565b60035433600160a060020a0390811691161461065e57600080fd5b600a805460ff1916911515919091179055565b600e54600090819060a060020a900460ff161561068d57600080fd5b61069885858561102b565b905080156107ac57600e54600160a060020a031615156106b757600080fd5b600e54600160a060020a031663fc688e87866000806040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561071657600080fd5b6102c65a03f1151561072757600080fd5b50505060405180515050600e54600160a060020a031663fc688e87856000806040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561079057600080fd5b6102c65a03f115156107a157600080fd5b505050604051805150505b949350505050565b60016020526000908152604090205481565b60035433600160a060020a039081169116146107e157600080fd5b600160a060020a03166000908152600c60205260409020805460ff19169055565b60065460ff1681565b600e54600160a060020a031681565b60035433600160a060020a0390811691161461083557600080fd5b600d54600160a060020a0316158015906108af5750600d54600160a060020a03166322f3e2d46000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561089257600080fd5b6102c65a03f115156108a357600080fd5b50505060405180519050155b801561091d5750600d54600160a060020a03166378e979256000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156108fe57600080fd5b6102c65a03f1151561090f57600080fd5b505050604051805190504210155b1561094b57600e805474ff0000000000000000000000000000000000000000191660a060020a831515021790555b50565b600160a060020a0333166000908152600c6020526040812054819060ff16151560011461097a57600080fd5b60035433600160a060020a0390811691161415610a9157600d54600160a060020a031615156109a857600080fd5b600d54600160a060020a03166322f3e2d46000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156109f057600080fd5b6102c65a03f11515610a0157600080fd5b50505060405180519050158015610a7a5750600d54600160a060020a03166378e979256000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610a5b57600080fd5b6102c65a03f11515610a6c57600080fd5b505050604051805190504210155b15610a8c57610a89848461104c565b90505b610a9e565b610a9b848461104c565b90505b82811415610b3857600e54600160a060020a03161515610abd57600080fd5b600e54600160a060020a031663fc688e87858560006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610b1c57600080fd5b6102c65a03f11515610b2d57600080fd5b505050604051805150505b9392505050565b60098054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106065780601f106105db57610100808354040283529160200191610606565b600d54600160a060020a031681565b600a5460009060ff1615610bcf57506000610631565b61062e838361113f565b600160a060020a031660009081526001602052604090205490565b60045433600160a060020a0390811691161415610c3b576004546003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039092169190911790555b565b60035433600160a060020a03908116911614610c5857600080fd5b600160a060020a0381161515610c6d57600080fd5b600e805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600160a060020a031681565b60088054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106065780601f106105db57610100808354040283529160200191610606565b60035433600160a060020a03908116911614610d3157600080fd5b600160a060020a03166000908152600c60205260409020805460ff19166001179055565b600e54600090819060a060020a900460ff1615610d7157600080fd5b610d7b8484611239565b90508015610b3857600e54600160a060020a03161515610d9a57600080fd5b600e54600160a060020a031663fc688e87336000806040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610df957600080fd5b6102c65a03f11515610e0a57600080fd5b50505060405180515050600e54600160a060020a031663fc688e87856000806040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610b1c57600080fd5b600e5460a060020a900460ff1681565b60035433600160a060020a03908116911614610e9e57600080fd5b600160a060020a0381161515610eb357600080fd5b600d805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600a5460ff1681565b600454600160a060020a031681565b600b5481565b600a5460009060ff1615610f1657506000610631565b61062e8383611256565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a03908116911614610f6657600080fd5b600160a060020a0381161515610f7b57600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600c6020526000908152604090205460ff1681565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b600a5460009060ff161561104157506000610b38565b6107ac8484846112fa565b600160a060020a0333166000908152600c602052604081205460ff16151560011461107657600080fd5b81151561108557506000610631565b600b5460005461109b908463ffffffff61147c16565b11156110a957506000610631565b6000546110bc908363ffffffff61147c16565b6000908155600160a060020a0384168152600160205260409020546110e7908363ffffffff61147c16565b600160a060020a0384166000818152600160205260408082209390935590917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350919050565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561119c57600160a060020a0333811660009081526002602090815260408083209388168352929052908120556111d3565b6111ac818463ffffffff61148b16565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600a5460009060ff161561124c57600080fd5b61062e838361149d565b600160a060020a03338116600090815260026020908152604080832093861683529290529081205461128e908363ffffffff61147c16565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b6000600160a060020a038316151561131157600080fd5b600160a060020a03841660009081526001602052604090205482111561133657600080fd5b600160a060020a038085166000908152600260209081526040808320339094168352929052205482111561136957600080fd5b600160a060020a038416600090815260016020526040902054611392908363ffffffff61148b16565b600160a060020a0380861660009081526001602052604080822093909355908516815220546113c7908363ffffffff61147c16565b600160a060020a0380851660009081526001602090815260408083209490945587831682526002815283822033909316825291909152205461140f908363ffffffff61148b16565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b600082820183811015610b3857fe5b60008282111561149757fe5b50900390565b6000600160a060020a03831615156114b457600080fd5b600160a060020a0333166000908152600160205260409020548211156114d957600080fd5b600160a060020a033316600090815260016020526040902054611502908363ffffffff61148b16565b600160a060020a033381166000908152600160205260408082209390935590851681522054611537908363ffffffff61147c16565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a3506001929150505600a165627a7a723058209c17de793d6f708f92cc0b4bea1d1fb791d042f6707316c659f806a32946ffc8002900000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000014adf4b7320334b900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005535041524b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005535041524b000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000014adf4b7320334b900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005535041524b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005535041524b000000000000000000000000000000000000000000000000000000"
}