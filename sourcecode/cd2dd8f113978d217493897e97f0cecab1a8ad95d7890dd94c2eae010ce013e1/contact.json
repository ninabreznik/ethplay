{
  "address": "0x3420894bf786866a09937b0369d5b4781870c21f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ContributorPool",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-01\n*/\n\npragma solidity ^0.4.13;\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract Claimable is Ownable {\n  address public pendingOwner;\n\n  /**\n   * @dev Modifier throws if called by any account other than the pendingOwner.\n   */\n  modifier onlyPendingOwner() {\n    require(msg.sender == pendingOwner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to set the pendingOwner address.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    pendingOwner = newOwner;\n  }\n\n  /**\n   * @dev Allows the pendingOwner address to finalize the transfer.\n   */\n  function claimOwnership() onlyPendingOwner public {\n    OwnershipTransferred(owner, pendingOwner);\n    owner = pendingOwner;\n    pendingOwner = address(0);\n  }\n}\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract ContributorPool is Claimable {\n    LikeCoin public like = LikeCoin(0x0);\n    uint public mintCoolDown = 0;\n    uint256 public mintValue = 0;\n    uint public nextMintTime = 0;\n\n    function ContributorPool(address _likeAddr, uint _mintCoolDown, uint256 _mintValue) public {\n        require(_mintValue > 0);\n        require(_mintCoolDown > 0);\n        like = LikeCoin(_likeAddr);\n        mintCoolDown = _mintCoolDown;\n        mintValue = _mintValue;\n    }\n\n    function mint() onlyOwner public {\n        require(now > nextMintTime);\n        nextMintTime = now + mintCoolDown;\n        like.mintForContributorPool(mintValue);\n    }\n\n    function transfer(address _to, uint256 _value) onlyOwner public {\n        require(_value > 0);\n        like.transfer(_to, _value);\n    }\n}\n\ncontract HasOperator is Claimable {\n    address public operator;\n\n    function setOperator(address _operator) onlyOwner public {\n        operator = _operator;\n    }\n\n    modifier ownerOrOperator {\n        require(msg.sender == owner || msg.sender == operator);\n        _;\n    }\n}\n\ncontract LikeCoin is ERC20, HasOperator {\n    using SafeMath for uint256;\n\n    string constant public name = \"LikeCoin\";\n    string constant public symbol = \"LIKE\";\n\n    // Synchronized to Ether -> Wei ratio, which is important\n    uint8 constant public decimals = 18;\n\n    uint256 public supply = 0;\n    mapping(address => uint256) public balances;\n    mapping(address => mapping(address => uint256)) public allowed;\n\n    address public crowdsaleAddr = 0x0;\n    address public contributorPoolAddr = 0x0;\n    uint256 public contributorPoolMintQuota = 0;\n    address[] public creatorsPoolAddrs;\n    mapping(address => bool) isCreatorsPool;\n    uint256 public creatorsPoolMintQuota = 0;\n    mapping(address => uint256) public lockedBalances;\n    uint public unlockTime = 0;\n    SignatureChecker public signatureChecker = SignatureChecker(0x0);\n    bool public signatureCheckerFreezed = false;\n    address public signatureOwner = 0x0;\n    bool public allowDelegate = true;\n    mapping (address => mapping (uint256 => bool)) public usedNonce;\n    mapping (address => bool) public transferAndCallWhitelist;\n\n    event Lock(address indexed _addr, uint256 _value);\n    event SignatureCheckerChanged(address _newSignatureChecker);\n\n    function LikeCoin(uint256 _initialSupply, address _signatureOwner, address _sigCheckerAddr) public {\n        supply = _initialSupply;\n        balances[owner] = _initialSupply;\n        signatureOwner = _signatureOwner;\n        signatureChecker = SignatureChecker(_sigCheckerAddr);\n        Transfer(0x0, owner, _initialSupply);\n    }\n\n    function totalSupply() public constant returns (uint256) {\n        return supply;\n    }\n\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balances[_owner] + lockedBalances[_owner];\n    }\n\n    function _tryUnlockBalance(address _from) internal {\n        if (unlockTime != 0 && now >= unlockTime && lockedBalances[_from] > 0) {\n            balances[_from] = balances[_from].add(lockedBalances[_from]);\n            delete lockedBalances[_from];\n        }\n    }\n\n    function _transfer(address _from, address _to, uint256 _value) internal returns (bool success) {\n        _tryUnlockBalance(_from);\n        require(_from != 0x0);\n        require(_to != 0x0);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        return _transfer(msg.sender, _to, _value);\n    }\n\n    function transferAndLock(address _to, uint256 _value) public returns (bool success) {\n        require(msg.sender != 0x0);\n        require(_to != 0x0);\n        require(now < unlockTime);\n        require(msg.sender == crowdsaleAddr || msg.sender == owner || msg.sender == operator);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        lockedBalances[_to] = lockedBalances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        Lock(_to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    function _transferMultiple(address _from, address[] _addrs, uint256[] _values) internal returns (bool success) {\n        require(_from != 0x0);\n        require(_addrs.length > 0);\n        require(_values.length == _addrs.length);\n        _tryUnlockBalance(_from);\n        uint256 total = 0;\n        for (uint i = 0; i < _addrs.length; ++i) {\n            address addr = _addrs[i];\n            require(addr != 0x0);\n            uint256 value = _values[i];\n            balances[addr] = balances[addr].add(value);\n            total = total.add(value);\n            Transfer(_from, addr, value);\n        }\n        balances[_from] = balances[_from].sub(total);\n        return true;\n    }\n\n    function transferMultiple(address[] _addrs, uint256[] _values) public returns (bool success) {\n        return _transferMultiple(msg.sender, _addrs, _values);\n    }\n\n    function _isContract(address _addr) internal constant returns (bool) {\n        uint256 length;\n        assembly {\n            length := extcodesize(_addr)\n        }\n        return (length > 0);\n    }\n\n    function _transferAndCall(address _from, address _to, uint256 _value, bytes _data) internal returns (bool success) {\n        require(_isContract(_to));\n        require(transferAndCallWhitelist[_to]);\n        require(_transfer(_from, _to, _value));\n        TransferAndCallReceiver(_to).tokenCallback(_from, _value, _data);\n        return true;\n    }\n\n    function transferAndCall(address _to, uint256 _value, bytes _data) public returns (bool success) {\n        return _transferAndCall(msg.sender, _to, _value, _data);\n    }\n\n    function setSignatureChecker(address _sigCheckerAddr) public {\n        require(msg.sender == signatureOwner);\n        require(!signatureCheckerFreezed);\n        require(signatureChecker != _sigCheckerAddr);\n        signatureChecker = SignatureChecker(_sigCheckerAddr);\n        SignatureCheckerChanged(_sigCheckerAddr);\n    }\n\n    function freezeSignatureChecker() public {\n        require(msg.sender == signatureOwner);\n        require(!signatureCheckerFreezed);\n        signatureCheckerFreezed = true;\n    }\n\n    modifier isDelegated(address _from, uint256 _maxReward, uint256 _claimedReward, uint256 _nonce) {\n        require(allowDelegate);\n        require(_from != 0x0);\n        require(_claimedReward <= _maxReward);\n        require(!usedNonce[_from][_nonce]);\n        usedNonce[_from][_nonce] = true;\n        require(_transfer(_from, msg.sender, _claimedReward));\n        _;\n    }\n\n    function transferDelegated(\n        address _from,\n        address _to,\n        uint256 _value,\n        uint256 _maxReward,\n        uint256 _claimedReward,\n        uint256 _nonce,\n        bytes _signature\n    ) isDelegated(_from, _maxReward, _claimedReward, _nonce) public returns (bool success) {\n        require(signatureChecker.checkTransferDelegated(_from, _to, _value, _maxReward, _nonce, _signature));\n        return _transfer(_from, _to, _value);\n    }\n\n    function transferAndCallDelegated(\n        address _from,\n        address _to,\n        uint256 _value,\n        bytes _data,\n        uint256 _maxReward,\n        uint256 _claimedReward,\n        uint256 _nonce,\n        bytes _signature\n    ) isDelegated(_from, _maxReward, _claimedReward, _nonce) public returns (bool success) {\n        require(signatureChecker.checkTransferAndCallDelegated(_from, _to, _value, _data, _maxReward, _nonce, _signature));\n        return _transferAndCall(_from, _to, _value, _data);\n    }\n\n    function transferMultipleDelegated(\n        address _from,\n        address[] _addrs,\n        uint256[] _values,\n        uint256 _maxReward,\n        uint256 _claimedReward,\n        uint256 _nonce,\n        bytes _signature\n    ) isDelegated(_from, _maxReward, _claimedReward, _nonce) public returns (bool success) {\n        require(signatureChecker.checkTransferMultipleDelegated(_from, _addrs, _values, _maxReward, _nonce, _signature));\n        return _transferMultiple(_from, _addrs, _values);\n    }\n\n    function switchDelegate(bool _allowed) ownerOrOperator public {\n        require(allowDelegate != _allowed);\n        allowDelegate = _allowed;\n    }\n\n    function addTransferAndCallWhitelist(address _contract) ownerOrOperator public {\n        require(_isContract(_contract));\n        require(!transferAndCallWhitelist[_contract]);\n        transferAndCallWhitelist[_contract] = true;\n    }\n\n    function removeTransferAndCallWhitelist(address _contract) ownerOrOperator public {\n        require(transferAndCallWhitelist[_contract]);\n        delete transferAndCallWhitelist[_contract];\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        require(_value == 0 || allowed[msg.sender][_spender] == 0);\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    function burn(uint256 _value) public {\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        supply = supply.sub(_value);\n        Transfer(msg.sender, 0x0, _value);\n    }\n\n    function registerCrowdsales(address _crowdsaleAddr, uint256 _value, uint256 _privateFundUnlockTime) onlyOwner public {\n        require(crowdsaleAddr == 0x0);\n        require(_crowdsaleAddr != 0x0);\n        require(_isContract(_crowdsaleAddr));\n        require(_privateFundUnlockTime > now);\n        require(_value != 0);\n        unlockTime = _privateFundUnlockTime;\n        crowdsaleAddr = _crowdsaleAddr;\n        supply = supply.add(_value);\n        balances[_crowdsaleAddr] = balances[_crowdsaleAddr].add(_value);\n        Transfer(0x0, crowdsaleAddr, _value);\n    }\n\n    function registerContributorPool(address _contributorPoolAddr, uint256 _mintLimit) onlyOwner public {\n        require(contributorPoolAddr == 0x0);\n        require(_contributorPoolAddr != 0x0);\n        require(_isContract(_contributorPoolAddr));\n        require(_mintLimit != 0);\n        contributorPoolAddr = _contributorPoolAddr;\n        contributorPoolMintQuota = _mintLimit;\n    }\n\n    function mintForContributorPool(uint256 _value) public {\n        require(msg.sender == contributorPoolAddr);\n        require(_value != 0);\n        contributorPoolMintQuota = contributorPoolMintQuota.sub(_value);\n        supply = supply.add(_value);\n        balances[msg.sender] = balances[msg.sender].add(_value);\n        Transfer(0x0, msg.sender, _value);\n    }\n\n    function registerCreatorsPools(address[] _poolAddrs, uint256 _mintLimit) onlyOwner public {\n        require(creatorsPoolAddrs.length == 0);\n        require(_poolAddrs.length > 0);\n        require(_mintLimit > 0);\n        for (uint i = 0; i < _poolAddrs.length; ++i) {\n            require(_isContract(_poolAddrs[i]));\n            creatorsPoolAddrs.push(_poolAddrs[i]);\n            isCreatorsPool[_poolAddrs[i]] = true;\n        }\n        creatorsPoolMintQuota = _mintLimit;\n    }\n\n    function mintForCreatorsPool(uint256 _value) public {\n        require(isCreatorsPool[msg.sender]);\n        require(_value != 0);\n        creatorsPoolMintQuota = creatorsPoolMintQuota.sub(_value);\n        supply = supply.add(_value);\n        balances[msg.sender] = balances[msg.sender].add(_value);\n        Transfer(0x0, msg.sender, _value);\n    }\n}\n\ncontract SignatureChecker {\n    function checkTransferDelegated(\n        address _from,\n        address _to,\n        uint256 _value,\n        uint256 _maxReward,\n        uint256 _nonce,\n        bytes _signature\n    ) public constant returns (bool);\n\n    function checkTransferAndCallDelegated(\n        address _from,\n        address _to,\n        uint256 _value,\n        bytes _data,\n        uint256 _maxReward,\n        uint256 _nonce,\n        bytes _signature\n    ) public constant returns (bool);\n\n    function checkTransferMultipleDelegated(\n        address _from,\n        address[] _addrs,\n        uint256[] _values,\n        uint256 _maxReward,\n        uint256 _nonce,\n        bytes _signature\n    ) public constant returns (bool);\n}\n\ncontract TransferAndCallReceiver {\n    function tokenCallback(address _from, uint256 _value, bytes _data) public;\n}",
  "bytecode": "606060405260028054600160a060020a0319169055600060038190556004819055600555341561002e57600080fd5b6040516060806104d383398101604052808051919060200180519190602001805160008054600160a060020a03191633600160a060020a03161781559092508211905061007a57600080fd5b6000821161008757600080fd5b60028054600160a060020a031916600160a060020a039490941693909317909255600355600455610416806100bd6000396000f30060606040526004361061008a5763ffffffff60e060020a60003504166302c76d45811461008f5780631249c58b146100b45780634e71e0c8146100c957806389c77dfe146100dc5780638c4e8c21146100ef5780638da5cb5b14610102578063a523b88a14610131578063a9059cbb14610144578063e30c397814610166578063f2fde38b14610179575b600080fd5b341561009a57600080fd5b6100a2610198565b60405190815260200160405180910390f35b34156100bf57600080fd5b6100c761019e565b005b34156100d457600080fd5b6100c7610233565b34156100e757600080fd5b6100a26102c1565b34156100fa57600080fd5b6100a26102c7565b341561010d57600080fd5b6101156102cd565b604051600160a060020a03909116815260200160405180910390f35b341561013c57600080fd5b6101156102dc565b341561014f57600080fd5b6100c7600160a060020a03600435166024356102eb565b341561017157600080fd5b610115610391565b341561018457600080fd5b6100c7600160a060020a03600435166103a0565b60035481565b60005433600160a060020a039081169116146101b957600080fd5b60055442116101c757600080fd5b6003544201600555600254600454600160a060020a03909116906369dd312f9060405160e060020a63ffffffff84160281526004810191909152602401600060405180830381600087803b151561021d57600080fd5b6102c65a03f1151561022e57600080fd5b505050565b60015433600160a060020a0390811691161461024e57600080fd5b600154600054600160a060020a0391821691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b60045481565b60055481565b600054600160a060020a031681565b600254600160a060020a031681565b60005433600160a060020a0390811691161461030657600080fd5b6000811161031357600080fd5b600254600160a060020a031663a9059cbb838360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561037257600080fd5b6102c65a03f1151561038357600080fd5b505050604051805150505050565b600154600160a060020a031681565b60005433600160a060020a039081169116146103bb57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a723058201c745e10048fc1aeb8c3ff4bac675330bfa8f028d1f0a0433cc2090a629d780c002900000000000000000000000002f61fd266da6e8b102d4121f5ce7b992640cf98000000000000000000000000000000000000000000000000000000000076a7000000000000000000000000000000000000000000000a56fa5b99019a5c800000",
  "constructorArguments": "00000000000000000000000002f61fd266da6e8b102d4121f5ce7b992640cf98000000000000000000000000000000000000000000000000000000000076a7000000000000000000000000000000000000000000000a56fa5b99019a5c800000"
}