{
  "address": "0xa2e655dd84ffb827bb6ae1f23d7d3b4173b143b1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CryptoTycoonsVIPLib",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-22\n*/\n\n// solium-disable linebreak-style\npragma solidity ^0.5.0;\n\ncontract CryptoTycoonsVIPLib{\n    \n    address payable public owner;\n    \n    // Accumulated jackpot fund.\n    uint128 public jackpotSize;\n    uint128 public rankingRewardSize;\n    \n    mapping (address => uint) userExpPool;\n    mapping (address => bool) public callerMap;\n\n    event RankingRewardPayment(address indexed beneficiary, uint amount);\n\n    modifier onlyOwner {\n        require(msg.sender == owner, \"OnlyOwner methods called by non-owner.\");\n        _;\n    }\n\n    modifier onlyCaller {\n        bool isCaller = callerMap[msg.sender];\n        require(isCaller, \"onlyCaller methods called by non-caller.\");\n        _;\n    }\n\n    constructor() public{\n        owner = msg.sender;\n        callerMap[owner] = true;\n    }\n\n    // Fallback function deliberately left empty. It's primary use case\n    // is to top up the bank roll.\n    function () external payable {\n    }\n\n    function kill() external onlyOwner {\n        selfdestruct(owner);\n    }\n\n    function addCaller(address caller) public onlyOwner{\n        bool isCaller = callerMap[caller];\n        if (isCaller == false){\n            callerMap[caller] = true;\n        }\n    }\n\n    function deleteCaller(address caller) external onlyOwner {\n        bool isCaller = callerMap[caller];\n        if (isCaller == true) {\n            callerMap[caller] = false;\n        }\n    }\n\n    function addUserExp(address addr, uint256 amount) public onlyCaller{\n        uint exp = userExpPool[addr];\n        exp = exp + amount;\n        userExpPool[addr] = exp;\n    }\n\n    function getUserExp(address addr) public view returns(uint256 exp){\n        return userExpPool[addr];\n    }\n\n    function getVIPLevel(address user) public view returns (uint256 level) {\n        uint exp = userExpPool[user];\n\n        if(exp >= 25 ether && exp < 125 ether){\n            level = 1;\n        } else if(exp >= 125 ether && exp < 250 ether){\n            level = 2;\n        } else if(exp >= 250 ether && exp < 1250 ether){\n            level = 3;\n        } else if(exp >= 1250 ether && exp < 2500 ether){\n            level = 4;\n        } else if(exp >= 2500 ether && exp < 12500 ether){\n            level = 5;\n        } else if(exp >= 12500 ether && exp < 25000 ether){\n            level = 6;\n        } else if(exp >= 25000 ether && exp < 125000 ether){\n            level = 7;\n        } else if(exp >= 125000 ether && exp < 250000 ether){\n            level = 8;\n        } else if(exp >= 250000 ether && exp < 1250000 ether){\n            level = 9;\n        } else if(exp >= 1250000 ether){\n            level = 10;\n        } else{\n            level = 0;\n        }\n\n        return level;\n    }\n\n    function getVIPBounusRate(address user) public view returns (uint256 rate){\n        uint level = getVIPLevel(user);\n        return level;\n    }\n\n    // This function is used to bump up the jackpot fund. Cannot be used to lower it.\n    function increaseJackpot(uint increaseAmount) external onlyCaller {\n        require (increaseAmount <= address(this).balance, \"Increase amount larger than balance.\");\n        require (jackpotSize + increaseAmount <= address(this).balance, \"Not enough funds.\");\n        jackpotSize += uint128(increaseAmount);\n    }\n\n    function payJackpotReward(address payable to) external onlyCaller{\n        to.transfer(jackpotSize);\n        jackpotSize = 0;\n    }\n\n    function getJackpotSize() external view returns (uint256){\n        return jackpotSize;\n    }\n\n    function increaseRankingReward(uint amount) public onlyCaller{\n        require (amount <= address(this).balance, \"Increase amount larger than balance.\");\n        require (rankingRewardSize + amount <= address(this).balance, \"Not enough funds.\");\n        rankingRewardSize += uint128(amount);\n    }\n\n    function payRankingReward(address payable to) external onlyCaller {\n        uint128 prize = rankingRewardSize / 2;\n        rankingRewardSize = rankingRewardSize - prize;\n        if(to.send(prize)){\n            emit RankingRewardPayment(to, prize);\n        }\n    }\n\n    function getRankingRewardSize() external view returns (uint128){\n        return rankingRewardSize;\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseRankingReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"deleteCaller\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getVIPLevel\",\"outputs\":[{\"name\":\"level\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"payJackpotReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"addCaller\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getVIPBounusRate\",\"outputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRankingRewardSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addUserExp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"callerMap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserExp\",\"outputs\":[{\"name\":\"exp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"payRankingReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"increaseAmount\",\"type\":\"uint256\"}],\"name\":\"increaseJackpot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getJackpotSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rankingRewardSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RankingRewardPayment\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600360008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611707806100d96000396000f3fe60806040526004361061011b576000357c01000000000000000000000000000000000000000000000000000000009004806377e24446116100b2578063b98f593211610081578063b98f5932146104e5578063bab46bd31461054a578063d6d30a511461059b578063e78e0362146105d6578063e82c4abc146106015761011b565b806377e244461461037b5780638da5cb5b146103ca5780639232fdb514610421578063b4ddb3711461047c5761011b565b80635da47721116100ee5780635da477211461020f57806362b686fc14610274578063747293fb146102c5578063772c658b146103165761011b565b8063040448c61461011d578063258c0f1e1461015857806341c0e1b5146101a957806357246d23146101c0575b005b34801561012957600080fd5b506101566004803603602081101561014057600080fd5b8101908080359060200190929190505050610650565b005b34801561016457600080fd5b506101a76004803603602081101561017b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061088a565b005b3480156101b557600080fd5b506101be6109ec565b005b3480156101cc57600080fd5b506101d5610acd565b60405180826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561021b57600080fd5b5061025e6004803603602081101561023257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610aef565b6040518082815260200191505060405180910390f35b34801561028057600080fd5b506102c36004803603602081101561029757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d19565b005b3480156102d157600080fd5b50610314600480360360208110156102e857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e77565b005b34801561032257600080fd5b506103656004803603602081101561033957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fd9565b6040518082815260200191505060405180910390f35b34801561038757600080fd5b50610390610ff0565b60405180826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103d657600080fd5b506103df611016565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561042d57600080fd5b5061047a6004803603604081101561044457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061103b565b005b34801561048857600080fd5b506104cb6004803603602081101561049f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611177565b604051808215151515815260200191505060405180910390f35b3480156104f157600080fd5b506105346004803603602081101561050857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611197565b6040518082815260200191505060405180910390f35b34801561055657600080fd5b506105996004803603602081101561056d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111e0565b005b3480156105a757600080fd5b506105d4600480360360208110156105be57600080fd5b81019080803590602001909291905050506113d5565b005b3480156105e257600080fd5b506105eb61160f565b6040518082815260200191505060405180910390f35b34801561060d57600080fd5b50610616611647565b60405180826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690508015156106f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602881526020018061166a6028913960400191505060405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff1631821115151561076b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806116926024913960400191505060405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff163182600160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16011115151561082c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4e6f7420656e6f7567682066756e64732e00000000000000000000000000000081525060200191505060405180910390fd5b81600160108282829054906101000a90046fffffffffffffffffffffffffffffffff160192506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610931576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806116b66026913960400191505060405180910390fd5b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690506001151581151514156109e8576000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a93576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806116b66026913960400191505060405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b600160009054906101000a90046fffffffffffffffffffffffffffffffff1681565b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905068015af1d78b58c400008110158015610b5557506806c6b935b8bbd4000081105b15610b635760019150610d10565b6806c6b935b8bbd400008110158015610b845750680d8d726b7177a8000081105b15610b925760029150610d0f565b680d8d726b7177a800008110158015610bb357506843c33c19375648000081105b15610bc15760039150610d0e565b6843c33c1937564800008110158015610be2575068878678326eac90000081105b15610bf05760049150610d0d565b68878678326eac9000008110158015610c1257506902a5a058fc295ed0000081105b15610c205760059150610d0c565b6902a5a058fc295ed000008110158015610c43575069054b40b1f852bda0000081105b15610c515760069150610d0b565b69054b40b1f852bda000008110158015610c745750691a784379d99db420000081105b15610c825760079150610d0a565b691a784379d99db42000008110158015610ca557506934f086f3b33b6840000081105b15610cb35760089150610d09565b6934f086f3b33b684000008110158015610cd757506a0108b2a2c280290940000081105b15610ce55760099150610d08565b6a0108b2a2c280290940000081101515610d0257600a9150610d07565b600091505b5b5b5b5b5b5b5b5b5b81915050919050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050801515610dc2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602881526020018061166a6028913960400191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166108fc600160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff169081150290604051600060405180830381858888f19350505050158015610e38573d6000803e3d6000fd5b506000600160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f1e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806116b66026913960400191505060405180910390fd5b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050600015158115151415610fd5576001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b5050565b600080610fe583610aef565b905080915050919050565b6000600160109054906101000a90046fffffffffffffffffffffffffffffffff16905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690508015156110e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602881526020018061166a6028913960400191505060405180910390fd5b6000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828101905080600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050505050565b60036020528060005260406000206000915054906101000a900460ff1681565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050801515611289576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602881526020018061166a6028913960400191505060405180910390fd5b60006002600160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168115156112c757fe5b04905080600160109054906101000a90046fffffffffffffffffffffffffffffffff1603600160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff166108fc826fffffffffffffffffffffffffffffffff169081150290604051600060405180830381858888f19350505050156113d0578273ffffffffffffffffffffffffffffffffffffffff167fd4cdaf0711114daf8dfe052e9f5c2f4dfa2555c9760518a37a8948d9f056b8de8260405180826fffffffffffffffffffffffffffffffff16815260200191505060405180910390a25b505050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905080151561147e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602881526020018061166a6028913960400191505060405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff163182111515156114f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806116926024913960400191505060405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff163182600160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1601111515156115b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4e6f7420656e6f7567682066756e64732e00000000000000000000000000000081525060200191505060405180910390fd5b81600160008282829054906101000a90046fffffffffffffffffffffffffffffffff160192506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505050565b6000600160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16905090565b600160109054906101000a90046fffffffffffffffffffffffffffffffff168156fe6f6e6c7943616c6c6572206d6574686f64732063616c6c6564206279206e6f6e2d63616c6c65722e496e63726561736520616d6f756e74206c6172676572207468616e2062616c616e63652e4f6e6c794f776e6572206d6574686f64732063616c6c6564206279206e6f6e2d6f776e65722ea165627a7a7230582086cf7eebfda4c4b11c190f49015e10f99b41c70902a1d310f67f0d7b594e037c0029"
}