{
  "address": "0xd07f6b9dc4ab70d9a387b7573a805ea3970e53e5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AirDropKNToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-07\n*/\n\npragma solidity^0.4.21;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract Ownable {\n    mapping (uint256 => address) public owner;\n    address[] public allOwner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() public {\n        owner[0] = msg.sender;\n        allOwner.push(msg.sender);\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner[0] || msg.sender == owner[1] || msg.sender == owner[2]);\n        _;\n    }\n    \n    function addnewOwner(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        uint256 len = allOwner.length;\n        owner[len] = newOwner;\n        allOwner.push(newOwner);\n    }\n\n    function setNewOwner(address newOwner, uint position) public onlyOwner {\n        require(newOwner != address(0));\n        require(position == 1 || position == 2);\n        owner[position] = newOwner;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner[0], newOwner);\n        owner[0] = newOwner;\n    }\n\n}\n\ncontract ERC20 {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public;\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Burn(address indexed from, uint256 value);\n}\n\ncontract KNBaseToken is ERC20 {\n    using SafeMath for uint256;\n    \n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 totalSupply_;\n\n    mapping(address => uint256) balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    constructor(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply) public{\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        totalSupply_ = _totalSupply;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n\n    function _transfer(address _from, address _to, uint256 _value) internal {\n        require(_to != address(0));\n        require(balances[_from] >= _value);\n        require(balances[_to].add(_value) > balances[_to]);\n\n\n        uint256 previousBalances = balances[_from].add(balances[_to]);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(_from, _to, _value);\n\n        assert(balances[_from].add(balances[_to]) == previousBalances);\n    }\n\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_value <= allowed[_from][msg.sender]);     // Check allowance\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    function burn(uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balances[_from] >= _value);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n}\n\ncontract KnowToken is KNBaseToken(\"Know Token\", \"KN\", 18, 7795482309000000000000000000), Ownable {\n\n    uint256 internal privateToken = 389774115000000000000000000;\n    uint256 internal preSaleToken = 1169322346000000000000000000;\n    uint256 internal crowdSaleToken = 3897741155000000000000000000;\n    uint256 internal bountyToken;\n    uint256 internal foundationToken;\n    address public founderAddress;\n    bool public unlockAllTokens;\n\n    mapping (address => bool) public frozenAccount;\n\n    event FrozenFunds(address target, bool unfrozen);\n    event UnLockAllTokens(bool unlock);\n\n    constructor() public {\n        founderAddress = msg.sender;\n        balances[founderAddress] = totalSupply_;\n        emit Transfer(address(0), founderAddress, totalSupply_);\n    }\n\n    function _transfer(address _from, address _to, uint _value) internal {\n        require (_to != address(0));                               \n        require (balances[_from] >= _value);               \n        require (balances[_to].add(_value) >= balances[_to]); \n        require(!frozenAccount[_from] || unlockAllTokens);\n\n        balances[_from] = balances[_from].sub(_value);                  \n        balances[_to] = balances[_to].add(_value);                  \n        emit Transfer(_from, _to, _value);\n    }\n\n    function unlockAllTokens(bool _unlock) public onlyOwner {\n        unlockAllTokens = _unlock;\n        emit UnLockAllTokens(_unlock);\n    }\n\n    function freezeAccount(address target, bool freeze) public onlyOwner {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n}\n\ncontract AirDropKNToken is Ownable{\n    using SafeMath for uint256;\n\n    KnowToken public token;\n    address public wallet;\n    mapping (address => bool) internal receivedUser;\n\n    event ReceivedUser(address user);\n    event FinishAirDrop();\n\n    constructor() public {\n        wallet = msg.sender; //address of founder\n        token = KnowToken(0xbfd18F20423694a69e35d65cB9c9D74396CC2c2d);// address of KN Token\n    }\n\n    function remainTokens() public view returns(uint256) {\n        return token.balanceOf(this);\n    }\n\n    function finish() public onlyOwner {\n        uint256 reTokens = remainTokens();\n        token.transfer(owner[0], reTokens);\n        \n        emit FinishAirDrop();\n    }\n\n    function checkReceivedUser(address user) public view returns(bool){\n        return receivedUser[user];\n    }\n\n    function () public payable {\n        assert(msg.value == 0 ether);\n        assert(remainTokens() >= 500000000000000000000);\n        require(receivedUser[msg.sender] == false, \"Each address gets KN Airdrop only once time!\");\n\n        uint256 totalTokens = 500000000000000000000;\n        token.transfer(msg.sender, totalTokens);\n        token.freezeAccount(msg.sender, true);\n        receivedUser[msg.sender] = true;\n\n        emit ReceivedUser(msg.sender);\n    }  \n}",
  "bytecode": "608060405234801561001057600080fd5b503360008080815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060013390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073bfd18f20423694a69e35d65cb9c9d74396cc2c2d600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506112848061016d6000396000f3006080604052600436106100a4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632902b09314610444578063521eb273146104875780637091e0c5146104de578063a123c33e1461052b578063b7886b3714610598578063ce0befcf146105f3578063d56b28891461061e578063db08bf5114610635578063f2fde38b146106a2578063fc0c546a146106e5575b600080341415156100b157fe5b681b1ae4d6e2ef5000006100c361073c565b101515156100cd57fe5b60001515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156101bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001807f4561636820616464726573732067657473204b4e2041697264726f70206f6e6c81526020017f79206f6e63652074696d6521000000000000000000000000000000000000000081525060400191505060405180910390fd5b681b1ae4d6e2ef5000009050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561028c57600080fd5b505af11580156102a0573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e724529c3360016040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018215151515815260200192505050600060405180830381600087803b15801561036e57600080fd5b505af1158015610382573d6000803e3d6000fd5b505050506001600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f06fffbe6a87630990a2a5b5aaa4e1ee507537dcef8ecdf1fb996fff94de7ce0933604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150005b34801561045057600080fd5b50610485600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061083b565b005b34801561049357600080fd5b5061049c610a7a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104ea57600080fd5b50610529600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610aa0565b005b34801561053757600080fd5b5061055660048036038101908080359060200190929190505050610c89565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105a457600080fd5b506105d9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610cbc565b604051808215151515815260200191505060405180910390f35b3480156105ff57600080fd5b5061060861073c565b6040518082815260200191505060405180910390f35b34801561062a57600080fd5b50610633610d12565b005b34801561064157600080fd5b5061066060048036038101908080359060200190929190505050610f9a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106ae57600080fd5b506106e3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fd8565b005b3480156106f157600080fd5b506106fa611232565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156107fb57600080fd5b505af115801561080f573d6000803e3d6000fd5b505050506040513d602081101561082557600080fd5b8101908080519060200190929190505050905090565b600080600080815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061090757506000806001815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b8061097057506000806002815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561097b57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156109b757600080fd5b60018054905090508160008083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018290806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008080815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610b6a57506000806001815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b80610bd357506000806002815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515610bde57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610c1a57600080fd5b6001811480610c295750600281145b1515610c3457600080fd5b8160008083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b600080600080815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610dde57506000806001815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b80610e4757506000806002815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515610e5257600080fd5b610e5a61073c565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60008080815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015610f5357600080fd5b505af1158015610f67573d6000803e3d6000fd5b505050507f07a36b60294340287d5e77b59e15ebb293408c1b648ef5fdc75960e7caf2043160405160405180910390a150565b600181815481101515610fa957fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008080815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806110a257506000806001815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b8061110b57506000806002815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561111657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561115257600080fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008080815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a38060008080815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a7230582012525acc3a4695ffed40da29a8d1bbe9bcd9fe0ac71dc1b542962866a6d902190029"
}