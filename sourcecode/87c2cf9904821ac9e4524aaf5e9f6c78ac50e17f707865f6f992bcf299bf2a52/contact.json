{
  "address": "0x58b823abd4b0b5506a60df6a12ae681a350dab4c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FEXToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-03\n*/\n\npragma solidity ^0.4.24;\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract Owned {\n    address public owner;\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n} \n/* import \"./oraclizeAPI_0.5.sol\"; */\n\n\n\n\n\n\n\n\ncontract ERC20 is ERC20Basic {\n  // Optional token name\n  string  public  name = \"zeosX\";\n  string  public  symbol;\n  uint256  public  decimals = 18; // standard token precision. override to customize\n    \n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\n \nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  \n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  function multiTransfer(address[] _to,uint[] _value) public returns (bool);\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract BurnableToken is StandardToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    require(_value <= balances[msg.sender]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    address burner = msg.sender;\n    balances[burner] = balances[burner].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(burner, _value);\n    emit Transfer(burner, address(0), _value);\n  }\n}\n\n\n\n\ncontract KYCVerification is Owned{\n    \n    mapping(address => bool) public kycAddress;\n    \n    event LogKYCVerification(address _kycAddress,bool _status);\n    \n    constructor () public {\n        owner = msg.sender;\n    }\n\n    function updateVerifcationBatch(address[] _kycAddress,bool _status) onlyOwner public returns(bool)\n    {\n        for(uint tmpIndex = 0; tmpIndex < _kycAddress.length; tmpIndex++)\n        {\n            kycAddress[_kycAddress[tmpIndex]] = _status;\n            emit LogKYCVerification(_kycAddress[tmpIndex],_status);\n        }\n        \n        return true;\n    }\n    \n    function updateVerifcation(address _kycAddress,bool _status) onlyOwner public returns(bool)\n    {\n        kycAddress[_kycAddress] = _status;\n        \n        emit LogKYCVerification(_kycAddress,_status);\n        \n        return true;\n    }\n    \n    function isVerified(address _user) view public returns(bool)\n    {\n        return kycAddress[_user] == true; \n    }\n}\n\n\ncontract FEXToken is Owned, BurnableToken {\n\n    string public name = \"SUREBANQA UTILITY TOKEN\";\n    string public symbol = \"FEX\";\n    uint8 public decimals = 5;\n    \n    uint256 public initialSupply = 450000000 * (10 ** uint256(decimals));\n    uint256 public totalSupply = 2100000000 * (10 ** uint256(decimals));\n    uint256 public externalAuthorizePurchase = 0;\n    \n    mapping (address => bool) public frozenAccount;\n    mapping(address => uint8) authorizedCaller;\n    \n    KYCVerification public kycVerification;\n    bool public kycEnabled = true;\n\n    /*  Fund Allocation  */\n    uint allocatedEAPFund;\n    uint allocatedAirdropAndBountyFund;\n    uint allocatedMarketingFund;\n    uint allocatedCoreTeamFund;\n    uint allocatedTreasuryFund;\n    \n    uint releasedEAPFund;\n    uint releasedAirdropAndBountyFund;\n    uint releasedMarketingFund;\n    uint releasedCoreTeamFund;\n    uint releasedTreasuryFund;\n    \n    /* EAP Related Factors */\n    uint8 EAPMilestoneReleased = 0; /* Total 4 Milestones , one milestone each year */\n    uint8 EAPVestingPercent = 25; /* 25% */\n    \n    \n    /* Core Team Related Factors */\n    \n    uint8 CoreTeamMilestoneReleased = 0; /* Total 4 Milestones , one milestone each quater */\n    uint8 CoreTeamVestingPercent = 25; /* 25% */\n    \n    /* Distribution Address */\n    address public EAPFundReceiver = 0xD89c58BedFf2b59fcDDAE3D96aC32D777fa00bF4;\n    address public AirdropAndBountyFundReceiver = 0xE4bBCE2795e5C7fF4B7a40b91f7b611526B5613E;\n    address public MarketingFundReceiver = 0xbe4c8660ed5709dF4172936743e6868F11686DBe;\n    address public CoreTeamFundReceiver = 0x2c1Ab4B9E4dD402120ECe5DF08E35644d2efCd35;\n    address public TreasuryFundReceiver = 0xeB81295b4e60e52c60206B0D12C13F82a36Ac9B6;\n    \n    /* Token Vesting Events*/\n    \n    event EAPFundReleased(address _receiver,uint _amount,uint _milestone);\n    event CoreTeamFundReleased(address _receiver,uint _amount,uint _milestone);\n\n    bool public initialFundDistributed;\n    uint public tokenVestingStartedOn; \n\n\n    modifier onlyAuthCaller(){\n        require(authorizedCaller[msg.sender] == 1 || msg.sender == owner);\n        _;\n    }\n    \n    modifier kycVerified(address _guy) {\n      if(kycEnabled == true){\n          if(kycVerification.isVerified(_guy) == false)\n          {\n              revert(\"KYC Not Verified\");\n          }\n      }\n      _;\n    }\n    \n    modifier frozenVerified(address _guy) {\n        if(frozenAccount[_guy] == true)\n        {\n            revert(\"Account is freeze\");\n        }\n        _;\n    }\n    \n    /* KYC related events */    \n    event KYCMandateUpdate(bool _kycEnabled);\n    event KYCContractAddressUpdate(KYCVerification _kycAddress);\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event FrozenFunds(address target, bool frozen);\n    \n    /* Events */\n    event AuthorizedCaller(address caller);\n    event DeAuthorizedCaller(address caller);\n    \n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    constructor () public {\n        \n        owner = msg.sender;\n        balances[0xBcd5B67aaeBb9765beE438e4Ce137B9aE2181898] = totalSupply;\n        \n        emit Transfer(address(0x0), address(this), totalSupply);\n        emit Transfer(address(this), address(0xBcd5B67aaeBb9765beE438e4Ce137B9aE2181898), totalSupply);\n\n        authorizedCaller[msg.sender] = 1;\n        emit AuthorizedCaller(msg.sender);\n\n        tokenVestingStartedOn = now;\n        initialFundDistributed = false;\n    }\n\n    function initFundDistribution() public onlyOwner \n    {\n        require(initialFundDistributed == false);\n        \n        /* Reserved for Airdrops/Bounty: 125 Million. */\n        \n        allocatedAirdropAndBountyFund = 125000000 * (10 ** uint256(decimals));\n        _transfer(0xBcd5B67aaeBb9765beE438e4Ce137B9aE2181898,address(AirdropAndBountyFundReceiver),allocatedAirdropAndBountyFund);\n        releasedAirdropAndBountyFund = allocatedAirdropAndBountyFund;\n        \n        /* Reserved for Marketing/Partnerships: 70 Million. */\n        \n        allocatedMarketingFund = 70000000 * (10 ** uint256(decimals));\n        _transfer(0xBcd5B67aaeBb9765beE438e4Ce137B9aE2181898,address(MarketingFundReceiver),allocatedMarketingFund);\n        releasedMarketingFund = allocatedMarketingFund;\n        \n        \n        /* Reserved for EAPs/SLIPs : 125 Million released every year at the rate of 25% per yr. */\n        \n        allocatedEAPFund = 125000000 * (10 ** uint256(decimals));\n        \n        /* Core Team: 21 Million. Released quarterly at the rate of 25% of 21 Million per quarter.  */\n        \n        allocatedCoreTeamFund = 21000000 * (10 ** uint256(decimals));\n\n        /* Treasury: 2.1 Million Time Locked for 24 months */\n        \n        allocatedTreasuryFund = 2100000 * (10 ** uint256(decimals));\n        \n        initialFundDistributed = true;\n    }\n    \n    function updateKycContractAddress(KYCVerification _kycAddress) public onlyOwner returns(bool)\n    {\n      kycVerification = _kycAddress;\n      emit KYCContractAddressUpdate(_kycAddress);\n      return true;\n    }\n\n    function updateKycMandate(bool _kycEnabled) public onlyAuthCaller returns(bool)\n    {\n        kycEnabled = _kycEnabled;\n        emit KYCMandateUpdate(_kycEnabled);\n        return true;\n    }\n    \n    /* authorize caller */\n    function authorizeCaller(address _caller) public onlyOwner returns(bool) \n    {\n        authorizedCaller[_caller] = 1;\n        emit AuthorizedCaller(_caller);\n        return true;\n    }\n    \n    /* deauthorize caller */\n    function deAuthorizeCaller(address _caller) public onlyOwner returns(bool) \n    {\n        authorizedCaller[_caller] = 0;\n        emit DeAuthorizedCaller(_caller);\n        return true;\n    }\n    \n    function () public payable {\n        revert();\n        // buy();\n    }\n    \n    /* Internal transfer, only can be called by this contract */\n    function _transfer(address _from, address _to, uint _value) internal {\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n        require (balances[_from] > _value);                // Check if the sender has enough\n        require (balances[_to].add(_value) > balances[_to]); // Check for overflow\n        balances[_from] = balances[_from].sub(_value);                         // Subtract from the sender\n        balances[_to] = balances[_to].add(_value);                           // Add the same to the recipient\n        emit Transfer(_from, _to, _value);\n    }\n\n    /// @notice Create `mintedAmount` tokens and send it to `target`\n    /// @param target Address to receive the tokens\n    /// @param mintedAmount the amount of tokens it will receive\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n        balances[target] = balances[target].add(mintedAmount);\n        totalSupply = totalSupply.add(mintedAmount);\n        emit Transfer(0, this, mintedAmount);\n        emit Transfer(this, target, mintedAmount);\n    }\n    \n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n    /// @param target Address to be frozen\n    /// @param freeze either to freeze it or not\n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n\n    \n    function purchaseToken(address _receiver, uint _tokens) onlyAuthCaller public {\n        require(_tokens > 0);\n        require(initialSupply > _tokens);\n        \n        initialSupply = initialSupply.sub(_tokens);\n        _transfer(owner, _receiver, _tokens);              // makes the transfers\n        externalAuthorizePurchase = externalAuthorizePurchase.add(_tokens);\n    }\n    \n    /**\n      * @dev transfer token for a specified address\n      * @param _to The address to transfer to.\n      * @param _value The amount to be transferred.\n      */\n    function transfer(address _to, uint256 _value) public kycVerified(msg.sender) frozenVerified(msg.sender) returns (bool) {\n        _transfer(msg.sender,_to,_value);\n        return true;\n    }\n    \n    /*\n        Please make sure before calling this function from UI, Sender has sufficient balance for \n        All transfers \n    */\n    function multiTransfer(address[] _to,uint[] _value) public kycVerified(msg.sender) frozenVerified(msg.sender) returns (bool) {\n        require(_to.length == _value.length, \"Length of Destination should be equal to value\");\n        for(uint _interator = 0;_interator < _to.length; _interator++ )\n        {\n            _transfer(msg.sender,_to[_interator],_value[_interator]);\n        }\n        return true;    \n    }\n\n\n    /**\n      * @dev Release Treasury Fund Time Locked for 24 months   \n      *  Can only be called by authorized caller   \n      */\n    function releaseTreasuryFund() public onlyAuthCaller returns(bool)\n    {\n        require(now >= tokenVestingStartedOn.add(730 days));\n        require(allocatedTreasuryFund > 0);\n        require(releasedTreasuryFund <= 0);\n        \n        _transfer(address(this),TreasuryFundReceiver,allocatedTreasuryFund);   \n        \n        /* Complete funds are released */\n        releasedTreasuryFund = allocatedTreasuryFund;\n        \n        return true;\n    }\n    \n\n    /**\n      * @dev Release EAPs/SLIPs Fund Time Locked releasable every year at the rate of 25% per yr   \n      *  Can only be called by authorized caller   \n      */\n    function releaseEAPFund() public onlyAuthCaller returns(bool)\n    {\n        /* Only 4 Milestone are to be released */\n        require(EAPMilestoneReleased <= 4);\n        require(allocatedEAPFund > 0);\n        require(releasedEAPFund <= allocatedEAPFund);\n        \n        uint toBeReleased = 0 ;\n        \n        if(now <= tokenVestingStartedOn.add(365 days))\n        {\n            toBeReleased = allocatedEAPFund.mul(EAPVestingPercent).div(100);\n            EAPMilestoneReleased = 1;\n        }\n        else if(now <= tokenVestingStartedOn.add(730 days))\n        {\n            toBeReleased = allocatedEAPFund.mul(EAPVestingPercent).div(100);\n            EAPMilestoneReleased = 2;\n        }\n        else if(now <= tokenVestingStartedOn.add(1095 days))\n        {\n            toBeReleased = allocatedEAPFund.mul(EAPVestingPercent).div(100);\n            EAPMilestoneReleased = 3;\n        }\n        else if(now <= tokenVestingStartedOn.add(1460 days))\n        {\n            toBeReleased = allocatedEAPFund.mul(EAPVestingPercent).div(100);\n            EAPMilestoneReleased = 4;\n        }\n        /* If release request sent beyond 4 years , release remaining amount*/\n        else if(now > tokenVestingStartedOn.add(1460 days) && EAPMilestoneReleased != 4)\n        {\n            toBeReleased = allocatedEAPFund.sub(releasedEAPFund);\n            EAPMilestoneReleased = 4;\n        }\n        else\n        {\n            revert();\n        }\n        \n        if(toBeReleased > 0)\n        {\n            releasedEAPFund = releasedEAPFund.add(toBeReleased);\n            _transfer(address(this),EAPFundReceiver,toBeReleased);\n            \n            emit EAPFundReleased(EAPFundReceiver,toBeReleased,EAPMilestoneReleased);\n            \n            return true;\n        }\n        else\n        {\n            revert();\n        }\n    }\n    \n\n    /**\n      * @dev Release Core Team's Fund Time Locked releasable  quarterly at the rate of 25%    \n      *  Can only be called by authorized caller   \n      */\n    function releaseCoreTeamFund() public onlyAuthCaller returns(bool)\n    {\n        /* Only 4 Milestone are to be released */\n        require(CoreTeamMilestoneReleased <= 4);\n        require(allocatedCoreTeamFund > 0);\n        require(releasedCoreTeamFund <= allocatedCoreTeamFund);\n        \n        uint toBeReleased = 0 ;\n        \n        if(now <= tokenVestingStartedOn.add(90 days))\n        {\n            toBeReleased = allocatedCoreTeamFund.mul(CoreTeamVestingPercent).div(100);\n            CoreTeamMilestoneReleased = 1;\n        }\n        else if(now <= tokenVestingStartedOn.add(180 days))\n        {\n            toBeReleased = allocatedCoreTeamFund.mul(CoreTeamVestingPercent).div(100);\n            CoreTeamMilestoneReleased = 2;\n        }\n        else if(now <= tokenVestingStartedOn.add(270 days))\n        {\n            toBeReleased = allocatedCoreTeamFund.mul(CoreTeamVestingPercent).div(100);\n            CoreTeamMilestoneReleased = 3;\n        }\n        else if(now <= tokenVestingStartedOn.add(360 days))\n        {\n            toBeReleased = allocatedCoreTeamFund.mul(CoreTeamVestingPercent).div(100);\n            CoreTeamMilestoneReleased = 4;\n        }\n        /* If release request sent beyond 4 years , release remaining amount*/\n        else if(now > tokenVestingStartedOn.add(360 days) && CoreTeamMilestoneReleased != 4)\n        {\n            toBeReleased = allocatedCoreTeamFund.sub(releasedCoreTeamFund);\n            CoreTeamMilestoneReleased = 4;\n        }\n        else\n        {\n            revert();\n        }\n        \n        if(toBeReleased > 0)\n        {\n            releasedCoreTeamFund = releasedCoreTeamFund.add(toBeReleased);\n            _transfer(address(this),CoreTeamFundReceiver,toBeReleased);\n            \n            emit CoreTeamFundReleased(CoreTeamFundReceiver,toBeReleased,CoreTeamMilestoneReleased);\n            \n            return true;\n        }\n        else\n        {\n            revert();\n        }\n        \n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"releaseEAPFund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AirdropAndBountyFundReceiver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CoreTeamFundReceiver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EAPFundReceiver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"deAuthorizeCaller\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"purchaseToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"authorizeCaller\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initFundDistribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kycVerification\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenVestingStartedOn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TreasuryFundReceiver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kycAddress\",\"type\":\"address\"}],\"name\":\"updateKycContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"externalAuthorizePurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MarketingFundReceiver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kycEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialFundDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kycEnabled\",\"type\":\"bool\"}],\"name\":\"updateKycMandate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseTreasuryFund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseCoreTeamFund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_milestone\",\"type\":\"uint256\"}],\"name\":\"EAPFundReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_milestone\",\"type\":\"uint256\"}],\"name\":\"CoreTeamFundReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_kycEnabled\",\"type\":\"bool\"}],\"name\":\"KYCMandateUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_kycAddress\",\"type\":\"address\"}],\"name\":\"KYCContractAddressUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AuthorizedCaller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"DeAuthorizedCaller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60806040526040805190810160405280600581526020017f7a656f73580000000000000000000000000000000000000000000000000000008152506001908051906020019062000051929190620005f5565b5060126003556040805190810160405280601781526020017f5355524542414e5141205554494c49545920544f4b454e00000000000000000081525060079080519060200190620000a4929190620005f5565b506040805190810160405280600381526020017f464558000000000000000000000000000000000000000000000000000000000081525060089080519060200190620000f2929190620005f5565b506005600960006101000a81548160ff021916908360ff160217905550600960009054906101000a900460ff1660ff16600a0a631ad2748002600a55600960009054906101000a900460ff1660ff16600a0a637d2b750002600b556000600c556001600f60146101000a81548160ff0219169083151502179055506000601a60006101000a81548160ff021916908360ff1602179055506019601a60016101000a81548160ff021916908360ff1602179055506000601a60026101000a81548160ff021916908360ff1602179055506019601a60036101000a81548160ff021916908360ff16021790555073d89c58bedff2b59fcddae3d96ac32d777fa00bf4601a60046101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073e4bbce2795e5c7ff4b7a40b91f7b611526b5613e601b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073be4c8660ed5709df4172936743e6868f11686dbe601c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550732c1ab4b9e4dd402120ece5df08e35644d2efcd35601d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073eb81295b4e60e52c60206b0d12c13f82a36ac9b6601e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156200039357600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600b546004600073bcd5b67aaebb9765bee438e4ce137b9ae218189873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600b546040518082815260200191505060405180910390a373bcd5b67aaebb9765bee438e4ce137b9ae218189873ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600b546040518082815260200191505060405180910390a36001600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055507f8afeca650897be3183b7c0d24eba96a1b990f75c4bd74a0cfb2c0a71aec48e6133604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a142601f819055506000601e60146101000a81548160ff021916908315150217905550620006a4565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200063857805160ff191683800117855562000669565b8280016001018555821562000669579182015b82811115620006685782518255916020019190600101906200064b565b5b5090506200067891906200067c565b5090565b620006a191905b808211156200069d57600081600090555060010162000683565b5090565b90565b613ae380620006b46000396000f3006080604052600436106101d8576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806303aebefd146101dd57806306fdde031461020c57806307898cf71461029c57806307e1339b146102f3578063095ea7b31461034a5780630ea56988146103af57806318160ddd146104065780631bcd250a146104315780631cc2c9111461048c5780631e89d545146104d957806323b872dd1461059a5780632c388d5d1461061f5780632cb34c101461067a578063313ce56714610691578063378dc3dc146106c257806342966c68146106ed578063661884631461071a57806366911db01461077f57806370a08231146107d6578063711ff1e91461082d57806379c650681461085857806381d3bfed146108a5578063847191ca146108fc5780638da5cb5b146109575780638e058638146109ae57806395d89b41146109d957806398f6c95014610a69578063a6fcb05314610ac0578063a9059cbb14610aef578063b414d4b614610b54578063b8295c9214610baf578063ba99b87d14610bde578063d73dd62314610c25578063dd62ed3e14610c8a578063e338080e14610d01578063e724529c14610d30578063f2fde38b14610d7f578063ff43dde914610dc2575b600080fd5b3480156101e957600080fd5b506101f2610df1565b604051808215151515815260200191505060405180910390f35b34801561021857600080fd5b50610221611277565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610261578082015181840152602081019050610246565b50505050905090810190601f16801561028e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102a857600080fd5b506102b1611315565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102ff57600080fd5b5061030861133b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561035657600080fd5b50610395600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611361565b604051808215151515815260200191505060405180910390f35b3480156103bb57600080fd5b506103c4611453565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561041257600080fd5b5061041b611479565b6040518082815260200191505060405180910390f35b34801561043d57600080fd5b50610472600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061147f565b604051808215151515815260200191505060405180910390f35b34801561049857600080fd5b506104d7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506115a1565b005b3480156104e557600080fd5b5061058060048036038101908080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192905050506116db565b604051808215151515815260200191505060405180910390f35b3480156105a657600080fd5b50610605600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611a36565b604051808215151515815260200191505060405180910390f35b34801561062b57600080fd5b50610660600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611df5565b604051808215151515815260200191505060405180910390f35b34801561068657600080fd5b5061068f611f17565b005b34801561069d57600080fd5b506106a66120f2565b604051808260ff1660ff16815260200191505060405180910390f35b3480156106ce57600080fd5b506106d7612105565b6040518082815260200191505060405180910390f35b3480156106f957600080fd5b506107186004803603810190808035906020019092919050505061210b565b005b34801561072657600080fd5b50610765600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506122c6565b604051808215151515815260200191505060405180910390f35b34801561078b57600080fd5b50610794612557565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107e257600080fd5b50610817600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061257d565b6040518082815260200191505060405180910390f35b34801561083957600080fd5b506108426125c6565b6040518082815260200191505060405180910390f35b34801561086457600080fd5b506108a3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506125cc565b005b3480156108b157600080fd5b506108ba612790565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561090857600080fd5b5061093d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506127b6565b604051808215151515815260200191505060405180910390f35b34801561096357600080fd5b5061096c6128c0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156109ba57600080fd5b506109c36128e5565b6040518082815260200191505060405180910390f35b3480156109e557600080fd5b506109ee6128eb565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610a2e578082015181840152602081019050610a13565b50505050905090810190601f168015610a5b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610a7557600080fd5b50610a7e612989565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610acc57600080fd5b50610ad56129af565b604051808215151515815260200191505060405180910390f35b348015610afb57600080fd5b50610b3a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506129c2565b604051808215151515815260200191505060405180910390f35b348015610b6057600080fd5b50610b95600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612c33565b604051808215151515815260200191505060405180910390f35b348015610bbb57600080fd5b50610bc4612c53565b604051808215151515815260200191505060405180910390f35b348015610bea57600080fd5b50610c0b600480360381019080803515159060200190929190505050612c66565b604051808215151515815260200191505060405180910390f35b348015610c3157600080fd5b50610c70600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612d7b565b604051808215151515815260200191505060405180910390f35b348015610c9657600080fd5b50610ceb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612f77565b6040518082815260200191505060405180910390f35b348015610d0d57600080fd5b50610d16612ffe565b604051808215151515815260200191505060405180910390f35b348015610d3c57600080fd5b50610d7d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080351515906020019092919050505061313e565b005b348015610d8b57600080fd5b50610dc0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613263565b005b348015610dce57600080fd5b50610dd7613301565b604051808215151515815260200191505060405180910390f35b6000806001600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff161480610e9e57506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515610ea957600080fd5b6004601a60009054906101000a900460ff1660ff1611151515610ecb57600080fd5b6000601054111515610edc57600080fd5b60105460155411151515610eef57600080fd5b60009050610f0c6301e13380601f5461378590919063ffffffff16565b42111515610f7157610f4e6064610f40601a60019054906101000a900460ff1660ff166010546137a390919063ffffffff16565b6137de90919063ffffffff16565b90506001601a60006101000a81548160ff021916908360ff16021790555061116d565b610f8a6303c26700601f5461378590919063ffffffff16565b42111515610fef57610fcc6064610fbe601a60019054906101000a900460ff1660ff166010546137a390919063ffffffff16565b6137de90919063ffffffff16565b90506002601a60006101000a81548160ff021916908360ff16021790555061116c565b6110086305a39a80601f5461378590919063ffffffff16565b4211151561106d5761104a606461103c601a60019054906101000a900460ff1660ff166010546137a390919063ffffffff16565b6137de90919063ffffffff16565b90506003601a60006101000a81548160ff021916908360ff16021790555061116b565b611086630784ce00601f5461378590919063ffffffff16565b421115156110eb576110c860646110ba601a60019054906101000a900460ff1660ff166010546137a390919063ffffffff16565b6137de90919063ffffffff16565b90506004601a60006101000a81548160ff021916908360ff16021790555061116a565b611104630784ce00601f5461378590919063ffffffff16565b4211801561112557506004601a60009054906101000a900460ff1660ff1614155b15611164576111416015546010546137f990919063ffffffff16565b90506004601a60006101000a81548160ff021916908360ff160217905550611169565b600080fd5b5b5b5b5b600081111561126e5761118b8160155461378590919063ffffffff16565b6015819055506111be30601a60049054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683613812565b7f7575c2d3a7aa142808150d02431afe7d5c93cf1518b9c79c720fd44577c3c625601a60049054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682601a60009054906101000a900460ff16604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018260ff168152602001935050505060405180910390a160019150611273565b600080fd5b5090565b60078054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561130d5780601f106112e25761010080835404028352916020019161130d565b820191906000526020600020905b8154815290600101906020018083116112f057829003601f168201915b505050505081565b601b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b601a60049054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b5481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114dc57600080fd5b6000600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055507f9e8ca6ff03906e81e8a6a03d4f96b7edb0b97f0ed9d07ef1b699fff63438549682604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a160019050919050565b6001600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff16148061164b57506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561165657600080fd5b60008111151561166557600080fd5b80600a5411151561167557600080fd5b61168a81600a546137f990919063ffffffff16565b600a819055506116bc6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff168383613812565b6116d181600c5461378590919063ffffffff16565b600c819055505050565b6000803360011515600f60149054906101000a900460ff161515141561186e5760001515600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b9209e33836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156117bc57600080fd5b505af11580156117d0573d6000803e3d6000fd5b505050506040513d60208110156117e657600080fd5b81019080805190602001909291905050501515141561186d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f4b5943204e6f742056657269666965640000000000000000000000000000000081525060200191505060405180910390fd5b5b3360011515600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415611936576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4163636f756e7420697320667265657a6500000000000000000000000000000081525060200191505060405180910390fd5b845186511415156119d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001807f4c656e677468206f662044657374696e6174696f6e2073686f756c642062652081526020017f657175616c20746f2076616c756500000000000000000000000000000000000081525060400191505060405180910390fd5b600092505b8551831015611a2957611a1c3387858151811015156119f557fe5b906020019060200201518786815181101515611a0d57fe5b90602001906020020151613812565b82806001019350506119da565b6001935050505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611a7357600080fd5b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515611ac157600080fd5b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515611b4c57600080fd5b611b9e82600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546137f990919063ffffffff16565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611c3382600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461378590919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611d0582600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546137f990919063ffffffff16565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e5257600080fd5b6001600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055507f8afeca650897be3183b7c0d24eba96a1b990f75c4bd74a0cfb2c0a71aec48e6182604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a160019050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611f7257600080fd5b60001515601e60149054906101000a900460ff161515141515611f9457600080fd5b600960009054906101000a900460ff1660ff16600a0a630773594002601181905550611ff973bcd5b67aaebb9765bee438e4ce137b9ae2181898601b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16601154613812565b601154601681905550600960009054906101000a900460ff1660ff16600a0a63042c1d800260128190555061206773bcd5b67aaebb9765bee438e4ce137b9ae2181898601c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16601254613812565b601254601781905550600960009054906101000a900460ff1660ff16600a0a630773594002601081905550600960009054906101000a900460ff1660ff16600a0a6301406f4002601381905550600960009054906101000a900460ff1660ff16600a0a62200b20026014819055506001601e60146101000a81548160ff021916908315150217905550565b600960009054906101000a900460ff1681565b600a5481565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561215b57600080fd5b3390506121b082600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546137f990919063ffffffff16565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612208826005546137f990919063ffffffff16565b6005819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a2600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35050565b600080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808311156123d7576000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061246b565b6123ea83826137f990919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b601f5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561262757600080fd5b61267981600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461378590919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506126d181600b5461378590919063ffffffff16565b600b819055503073ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a38173ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b601e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561281357600080fd5b81600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f6db48a5f31a589c40a63205de78d2929b4c296f2ca791091ec96c337c57a76aa82604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a160019050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c5481565b60088054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156129815780601f1061295657610100808354040283529160200191612981565b820191906000526020600020905b81548152906001019060200180831161296457829003601f168201915b505050505081565b601c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600f60149054906101000a900460ff1681565b60003360011515600f60149054906101000a900460ff1615151415612b545760001515600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b9209e33836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015612aa257600080fd5b505af1158015612ab6573d6000803e3d6000fd5b505050506040513d6020811015612acc57600080fd5b810190808051906020019092919050505015151415612b53576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f4b5943204e6f742056657269666965640000000000000000000000000000000081525060200191505060405180910390fd5b5b3360011515600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415612c1c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4163636f756e7420697320667265657a6500000000000000000000000000000081525060200191505060405180910390fd5b612c27338686613812565b60019250505092915050565b600d6020528060005260406000206000915054906101000a900460ff1681565b601e60149054906101000a900460ff1681565b60006001600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff161480612d1257506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515612d1d57600080fd5b81600f60146101000a81548160ff0219169083151502179055507f62f573f515ef5989c8f83d4701c96be7ceddfa7954525fce545787a582cf3a0082604051808215151515815260200191505060405180910390a160019050919050565b6000612e0c82600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461378590919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60006001600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff1614806130aa57506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156130b557600080fd5b6130ce6303c26700601f5461378590919063ffffffff16565b42101515156130dc57600080fd5b60006014541115156130ed57600080fd5b6000601954111515156130ff57600080fd5b61312e30601e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16601454613812565b6014546019819055506001905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561319957600080fd5b80600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a58282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a15050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156132be57600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806001600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff1614806133ae57506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156133b957600080fd5b6004601a60029054906101000a900460ff1660ff16111515156133db57600080fd5b60006013541115156133ec57600080fd5b601354601854111515156133ff57600080fd5b6000905061341b6276a700601f5461378590919063ffffffff16565b421115156134805761345d606461344f601a60039054906101000a900460ff1660ff166013546137a390919063ffffffff16565b6137de90919063ffffffff16565b90506001601a60026101000a81548160ff021916908360ff16021790555061367b565b61349862ed4e00601f5461378590919063ffffffff16565b421115156134fd576134da60646134cc601a60039054906101000a900460ff1660ff166013546137a390919063ffffffff16565b6137de90919063ffffffff16565b90506002601a60026101000a81548160ff021916908360ff16021790555061367a565b613516630163f500601f5461378590919063ffffffff16565b4211151561357b57613558606461354a601a60039054906101000a900460ff1660ff166013546137a390919063ffffffff16565b6137de90919063ffffffff16565b90506003601a60026101000a81548160ff021916908360ff160217905550613679565b6135946301da9c00601f5461378590919063ffffffff16565b421115156135f9576135d660646135c8601a60039054906101000a900460ff1660ff166013546137a390919063ffffffff16565b6137de90919063ffffffff16565b90506004601a60026101000a81548160ff021916908360ff160217905550613678565b6136126301da9c00601f5461378590919063ffffffff16565b4211801561363357506004601a60029054906101000a900460ff1660ff1614155b156136725761364f6018546013546137f990919063ffffffff16565b90506004601a60026101000a81548160ff021916908360ff160217905550613677565b600080fd5b5b5b5b5b600081111561377c576136998160185461378590919063ffffffff16565b6018819055506136cc30601d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683613812565b7fc41fe3f9d38e736852e0d2d935961aeaa9e87eb4090e9e5810dafb10c701f833601d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682601a60029054906101000a900460ff16604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018260ff168152602001935050505060405180910390a160019150613781565b600080fd5b5090565b600080828401905083811015151561379957fe5b8091505092915050565b60008060008414156137b857600091506137d7565b82840290508284828115156137c957fe5b041415156137d357fe5b8091505b5092915050565b60008082848115156137ec57fe5b0490508091505092915050565b600082821115151561380757fe5b818303905092915050565b60008273ffffffffffffffffffffffffffffffffffffffff161415151561383857600080fd5b80600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411151561388557600080fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461391782600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461378590919063ffffffff16565b11151561392357600080fd5b61397581600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546137f990919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613a0a81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461378590919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050505600a165627a7a7230582057894bd745e5eda7b4e49c907dc70c774568d6241ed9412b611d29d9f68919040029"
}