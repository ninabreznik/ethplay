{
  "address": "0xa17d1bf14802e0eec8f84b3b8b638a9402d60e9e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RiskSharingToken",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-01\n*/\n\npragma solidity ^0.4.10;\n\ncontract IERC20Token {\n    function totalSupply() public constant returns ( uint256 supply ) { supply; }\n    function balanceOf( address _owner ) public constant returns ( uint256 balance ) { _owner; balance; }\n    function allowance( address _owner, address _spender ) public constant returns ( uint256 remaining ) { _owner; _spender; remaining; }\n\n  function transfer( address _to, uint256 _value ) public returns ( bool success );\n  function transferFrom( address _from, address _to, uint256 _value ) public returns ( bool success );\n  function approve( address _spender, uint256 _value ) public returns ( bool success );\n}\ncontract RegaUtils {\n  modifier validAddress( address _address ) {\n    require( _address != 0x0 );\n    _;\n  }\n\n  // Overflow checked math\n  function safeAdd( uint256 x, uint256 y ) internal returns( uint256 ) {\n    uint256 z = x + y;\n    assert( z >= x );\n    return z;\n  }\n\n  function safeSub( uint256 x, uint256 y ) internal returns( uint256 ) {\n    assert( x >= y);\n    return x - y;\n  }\n}\ncontract ERC20Token is IERC20Token, RegaUtils {\n  uint256 public totalSupply = 0;\n  mapping( address => uint256 ) public balanceOf;\n  mapping( address => mapping( address => uint256 ) ) public allowance;\n\n  event Transfer( address indexed _from, address indexed _to, uint256 _value );\n  event Approval( address indexed _owner, address indexed _spender, uint256 _value );\n\n  function transfer( address _to, uint256 _value ) validAddress( _to )\n    returns( bool success )\n  {\n    balanceOf[ msg.sender ] = safeSub( balanceOf[ msg.sender ], _value );\n    balanceOf[ _to ] = safeAdd( balanceOf[ _to ], _value );\n    Transfer( msg.sender, _to, _value );\n    return true;\n  }\n\n  function transferFrom( address _from, address _to, uint256 _value ) validAddress( _from ) validAddress( _to )\n    returns( bool success )\n  {\n    allowance[ _from ][ msg.sender ] = safeSub( allowance[ _from ][ msg.sender ], _value );\n    balanceOf[ _from] = safeSub( balanceOf[_from], _value );\n    balanceOf[ _to] = safeAdd( balanceOf[_to], _value );\n    Transfer( _from, _to, _value );\n    return true;\n  }\n\n  function approve( address _spender, uint256 _value ) validAddress( _spender )\n    returns( bool success)\n  {\n    require( _value == 0 || allowance[ msg.sender ][ _spender ] == 0 );\n\n    allowance[ msg.sender ][ _spender ] = _value;\n    Approval( msg.sender, _spender, _value );\n    return true;\n  }\n\n}\ncontract RSTBase is ERC20Token {\n  address public board;\n  address public owner;\n\n  address public votingData;\n  address public tokenData;\n  address public feesData;\n\n  uint256 public reserve;\n  uint32  public crr;         // per cent\n  uint256 public weiForToken; // current rate\n  uint8   public totalAccounts;\n\n  modifier boardOnly() {\n    require(msg.sender == board);\n    _;\n  }\n}\ncontract TokenControllerBase is RSTBase {\n  function init() public;\n  function isSellOpen() public constant returns(bool);\n  function isBuyOpen() public constant returns(bool);\n  function sell(uint value) public;\n  function buy() public payable;\n  function addToReserve() public payable;\n}\n\ncontract VotingControllerBase is RSTBase {\n  function voteFor() public;\n  function voteAgainst() public;\n  function startVoting() public;\n  function stopVoting() public;\n  function getCurrentVotingDescription() public constant returns (bytes32 vd) ;\n}\n\ncontract FeesControllerBase is RSTBase {\n  function init() public;\n  function withdrawFee() public;\n  function calculateFee() public;\n  function addPayee( address payee ) public;\n  function removePayee( address payee ) public;\n  function setRepayment( ) payable public;\n}\ncontract RiskSharingToken is RSTBase {\n  string public constant version = \"0.1\";\n  string public constant name = \"REGA Risk Sharing Token\";\n  string public constant symbol = \"RST\";\n  uint8 public constant decimals = 10;\n\n  TokenControllerBase public tokenController;\n  VotingControllerBase public votingController;\n  FeesControllerBase public feesController;\n\n  modifier ownerOnly() {\n    require( msg.sender == owner );\n    _;\n  }\n\n  modifier boardOnly() {\n    require( msg.sender == board );\n    _;\n  }\n\n  modifier authorized() {\n    require( msg.sender == owner || msg.sender == board);\n    _;\n  }\n\n\n  function RiskSharingToken( address _board ) {\n    board = _board;\n    owner = msg.sender;\n    tokenController = TokenControllerBase(0);\n    votingController = VotingControllerBase(0);\n    weiForToken = uint(10)**(18-1-decimals); // 0.1 Ether\n    reserve = 0;\n    crr = 20;\n    totalAccounts = 0;\n  }\n\n  function() payable {\n\n  }\n\n  function setTokenController( TokenControllerBase tc, address _tokenData ) public boardOnly {\n    tokenController = tc;\n    if( _tokenData != address(0) )\n      tokenData = _tokenData;\n    if( tokenController != TokenControllerBase(0) )\n      if( !tokenController.delegatecall(bytes4(sha3(\"init()\"))) )\n        revert();\n  }\n\n// Voting\n  function setVotingController( VotingControllerBase vc ) public boardOnly {\n    votingController = vc;\n  }\n\n  function startVoting( bytes32 /*description*/ ) public boardOnly validAddress(votingController) {\n    if( !votingController.delegatecall(msg.data) )\n      revert();\n  }\n\n  function stopVoting() public boardOnly validAddress(votingController) {\n    if( !votingController.delegatecall(msg.data) )\n      revert();\n  }\n\n  function voteFor() public validAddress(votingController) {\n    if( !votingController.delegatecall(msg.data) )\n      revert();\n  }\n\n  function voteAgainst() public validAddress(votingController) {\n    if( !votingController.delegatecall(msg.data) )\n      revert();\n  }\n\n// Tokens operations\n  function buy() public payable validAddress(tokenController) {\n    if( !tokenController.delegatecall(msg.data) )\n      revert();\n  }\n\n  function sell( uint /*value*/ ) public validAddress(tokenController) {\n    if( !tokenController.delegatecall(msg.data) )\n      revert();\n  }\n\n  function addToReserve( ) public payable validAddress(tokenController) {\n    if( !tokenController.delegatecall(msg.data) )\n      revert();\n  }\n\n// some amount ma be not the reserve\n  function withdraw( uint256 amount ) public boardOnly {\n    require(safeSub(this.balance, amount) >= reserve);\n    board.transfer( amount );\n  }\n\n  function issueToken( address /*holder*/, uint256 /*amount*/ ) public authorized {\n    if( !tokenController.delegatecall(msg.data) )\n      revert();\n  }\n\n  function issueTokens( uint256[] /*data*/ ) public ownerOnly {\n    if( !tokenController.delegatecall(msg.data) )\n      revert();\n  }\n\n  // fees operations\n\n  function setFeesController( FeesControllerBase fc ) public boardOnly {\n    feesController = fc;\n    if( !feesController.delegatecall(bytes4(sha3(\"init()\"))) )\n      revert();\n  }\n\n  function withdrawFee() public validAddress(feesController) {\n      if( !feesController.delegatecall(msg.data) )\n        revert();\n  }\n\n  function calculateFee() public validAddress(feesController) {\n      if( !feesController.delegatecall(msg.data) )\n        revert();\n  }\n  function addPayee( address /*payee*/ ) public validAddress(feesController) {\n      if( !feesController.delegatecall(msg.data) )\n        revert();\n  }\n  function removePayee( address /*payee*/ ) public validAddress(feesController) {\n      if( !feesController.delegatecall(msg.data) )\n        revert();\n  }\n  function setRepayment( ) payable public validAddress(feesController) {\n      if( !feesController.delegatecall(msg.data) )\n        revert();\n  }\n}",
  "bytecode": "606060405260008055341561001357600080fd5b60405160208061164c833981016040528080519150505b60038054600160a060020a03808416600160a060020a031992831617909255600480543390931692821692909217909155600b8054600c805490931690925562989680600a5560006008556009805463ffffffff19166014179055600160a860020a031990911690555b505b6115a7806100a56000396000f300606060405236156101d25763ffffffff60e060020a600035041663024fd65081146101d657806306fdde0314610205578063095ea7b314610290578063113e2088146102c657806318160ddd146102f55780631856e01b1461031a57806323b872dd1461033b5780632e1a7d4d14610377578063313ce5671461038f578063361228ea146103b85780633ed35855146103dd57806343e6cc40146103fe578063517afbcf1461044f57806354fd4d501461047e57806358451f971461050957806361c6130914610532578063682132561461055957806370a08231146105855780637cd3229a146105b65780638da5cb5b146105e557806395d89b41146106145780639f396cff1461069f578063a580a5b0146106b4578063a6f2ae3a146106be578063a9059cbb146106c8578063b682da3e146106fe578063b81f39a8146106be578063cd3293de14610737578063dce59c00146103dd578063dd62ed3e1461077d578063e4849b32146107b4578063e6af35f0146107cc578063e74a84ea146107e1578063e8997dbd14610805578063e8f6276414610826578063e941fa78146107cc578063ea19efb51461086a578063eddd9d8214610882578063fab2f86b146108b1578063ffaa36081461069f575b5b5b005b34156101e157600080fd5b6101e96108db565b604051600160a060020a03909116815260200160405180910390f35b341561021057600080fd5b6102186108ea565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156102555780820151818401525b60200161023c565b50505050905090810190601f1680156102825780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561029b57600080fd5b6102b2600160a060020a0360043516602435610921565b604051901515815260200160405180910390f35b34156102d157600080fd5b6101e96109e1565b604051600160a060020a03909116815260200160405180910390f35b341561030057600080fd5b6103086109f0565b60405190815260200160405180910390f35b341561032557600080fd5b6101d2600160a060020a03600435166109f6565b005b341561034657600080fd5b6102b2600160a060020a0360043581169060243516604435610a3e565b604051901515815260200160405180910390f35b341561038257600080fd5b6101d2600435610b74565b005b341561039a57600080fd5b6103a2610be9565b60405160ff909116815260200160405180910390f35b34156103c357600080fd5b610308610bee565b60405190815260200160405180910390f35b34156103e857600080fd5b6101d2600160a060020a0360043516610bf4565b005b341561040957600080fd5b6101d26004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650610c5295505050505050565b005b341561045a57600080fd5b6101e9610cb7565b604051600160a060020a03909116815260200160405180910390f35b341561048957600080fd5b610218610cc6565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156102555780820151818401525b60200161023c565b50505050905090810190601f1680156102825780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561051457600080fd5b6103a2610cfd565b60405160ff909116815260200160405180910390f35b341561053d57600080fd5b6101d2600160a060020a0360043581169060243516610d06565b005b341561056457600080fd5b61056c610e1f565b60405163ffffffff909116815260200160405180910390f35b341561059057600080fd5b610308600160a060020a0360043516610e2b565b60405190815260200160405180910390f35b34156105c157600080fd5b6101e9610e3d565b604051600160a060020a03909116815260200160405180910390f35b34156105f057600080fd5b6101e9610e4c565b604051600160a060020a03909116815260200160405180910390f35b341561061f57600080fd5b610218610e5b565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156102555780820151818401525b60200161023c565b50505050905090810190601f1680156102825780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156106aa57600080fd5b6101d2610e92565b005b6101d2610eef565b005b6101d2610f4c565b005b34156106d357600080fd5b6102b2600160a060020a0360043516602435610fb3565b604051901515815260200160405180910390f35b341561070957600080fd5b6101e9611082565b604051600160a060020a03909116815260200160405180910390f35b6101d2610f4c565b005b341561074257600080fd5b6103086110f8565b60405190815260200160405180910390f35b34156103e857600080fd5b6101d2600160a060020a0360043516610bf4565b005b341561078857600080fd5b610308600160a060020a036004358116906024351661115c565b60405190815260200160405180910390f35b34156107bf57600080fd5b6101d2600435611179565b005b34156106b457600080fd5b6101d2610eef565b005b34156107ec57600080fd5b6101d2600160a060020a036004351660243561123e565b005b341561081057600080fd5b6101d2600160a060020a03600435166112bf565b005b341561083157600080fd5b6101e961137a565b604051600160a060020a03909116815260200160405180910390f35b34156106b457600080fd5b6101d2610eef565b005b341561087557600080fd5b6101d26004356113e6565b005b341561088d57600080fd5b6101e9611460565b604051600160a060020a03909116815260200160405180910390f35b34156108bc57600080fd5b6101d2611474565b005b34156106aa57600080fd5b6101d2610e92565b005b600654600160a060020a031681565b60408051908101604052601781527f52454741205269736b2053686172696e6720546f6b656e000000000000000000602082015281565b600082600160a060020a038116151561093957600080fd5b8215806109695750600160a060020a03338116600090815260026020908152604080832093881683529290522054155b151561097457600080fd5b600160a060020a03338116600081815260026020908152604080832094891680845294909152908190208690557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259086905190815260200160405180910390a3600191505b5b5092915050565b600554600160a060020a031681565b60005481565b60035433600160a060020a03908116911614610a1157600080fd5b600c805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b600083600160a060020a0381161515610a5657600080fd5b83600160a060020a0381161515610a6c57600080fd5b600160a060020a0380871660009081526002602090815260408083203390941683529290522054610a9d908561154a565b600160a060020a038088166000818152600260209081526040808320339095168352938152838220949094559081526001909252902054610ade908561154a565b600160a060020a038088166000908152600160205260408082209390935590871681522054610b0d9085611561565b600160a060020a03808716600081815260016020526040908190209390935591908816907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9087905190815260200160405180910390a3600192505b5b505b509392505050565b60035433600160a060020a03908116911614610b8f57600080fd5b600854610ba630600160a060020a0316318361154a565b1015610bb157600080fd5b600354600160a060020a031681156108fc0282604051600060405180830381858888f193505050501515610a3a57600080fd5b5b5b50565b600a81565b600a5481565b600d54600160a060020a0316801515610c0c57600080fd5b600d54600160a060020a0316600036604051808383808284378201915050925050506000604051808303818561646e5a03f49150501515610c4c57600080fd5b5b5b5050565b60045433600160a060020a03908116911614610c6d57600080fd5b600b546101009004600160a060020a0316600036604051808383808284378201915050925050506000604051808303818561646e5a03f49150501515610a3a57600080fd5b5b5b50565b600c54600160a060020a031681565b60408051908101604052600381527f302e310000000000000000000000000000000000000000000000000000000000602082015281565b600b5460ff1681565b60035433600160a060020a03908116911614610d2157600080fd5b600b8054600160a060020a038085166101000274ffffffffffffffffffffffffffffffffffffffff001990921691909117909155811615610d85576006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b600b546101009004600160a060020a031615610c4c57600b546101009004600160a060020a03166040517f696e6974282900000000000000000000000000000000000000000000000000008152600601604051809103902060e060020a90046040518163ffffffff1660e060020a0281526004016000604051808303818661646e5a03f4925050501515610c4c57600080fd5b5b5b5b5050565b60095463ffffffff1681565b60016020526000908152604090205481565b600354600160a060020a031681565b600454600160a060020a031681565b60408051908101604052600381527f5253540000000000000000000000000000000000000000000000000000000000602082015281565b600c54600160a060020a0316801515610eaa57600080fd5b600c54600160a060020a0316600036604051808383808284378201915050925050506000604051808303818561646e5a03f49150501515610a3a57600080fd5b5b5b50565b600d54600160a060020a0316801515610f0757600080fd5b600d54600160a060020a0316600036604051808383808284378201915050925050506000604051808303818561646e5a03f49150501515610a3a57600080fd5b5b5b50565b600b546101009004600160a060020a0316801515610c6d57600080fd5b600b546101009004600160a060020a0316600036604051808383808284378201915050925050506000604051808303818561646e5a03f49150501515610a3a57600080fd5b5b5b50565b600082600160a060020a0381161515610fcb57600080fd5b600160a060020a033316600090815260016020526040902054610fee908461154a565b600160a060020a03338116600090815260016020526040808220939093559086168152205461101d9084611561565b600160a060020a0380861660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3600191505b5b5092915050565b600754600160a060020a031681565b600b546101009004600160a060020a0316801515610c6d57600080fd5b600b546101009004600160a060020a0316600036604051808383808284378201915050925050506000604051808303818561646e5a03f49150501515610a3a57600080fd5b5b5b50565b60085481565b600d54600160a060020a0316801515610c0c57600080fd5b600d54600160a060020a0316600036604051808383808284378201915050925050506000604051808303818561646e5a03f49150501515610c4c57600080fd5b5b5b5050565b600260209081526000928352604080842090915290825290205481565b600b546101009004600160a060020a031680151561119657600080fd5b600b546101009004600160a060020a0316600036604051808383808284378201915050925050506000604051808303818561646e5a03f49150501515610c4c57600080fd5b5b5b5050565b600d54600160a060020a0316801515610f0757600080fd5b600d54600160a060020a0316600036604051808383808284378201915050925050506000604051808303818561646e5a03f49150501515610a3a57600080fd5b5b5b50565b60045433600160a060020a0390811691161480611269575060035433600160a060020a039081169116145b151561119657600080fd5b600b546101009004600160a060020a0316600036604051808383808284378201915050925050506000604051808303818561646e5a03f49150501515610c4c57600080fd5b5b5b5050565b60035433600160a060020a039081169116146112da57600080fd5b600d805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038381169190911791829055166040517f696e6974282900000000000000000000000000000000000000000000000000008152600601604051809103902060e060020a90046040518163ffffffff1660e060020a0281526004016000604051808303818661646e5a03f4925050501515610a3a57600080fd5b5b5b50565b600d54600160a060020a031681565b600d54600160a060020a0316801515610f0757600080fd5b600d54600160a060020a0316600036604051808383808284378201915050925050506000604051808303818561646e5a03f49150501515610a3a57600080fd5b5b5b50565b60035433600160a060020a0390811691161461140157600080fd5b600c54600160a060020a031680151561141957600080fd5b600c54600160a060020a0316600036604051808383808284378201915050925050506000604051808303818561646e5a03f49150501515610c4c57600080fd5b5b5b505b50565b600b546101009004600160a060020a031681565b60035433600160a060020a03908116911614610e9257600080fd5b600c54600160a060020a0316801515610eaa57600080fd5b600c54600160a060020a0316600036604051808383808284378201915050925050506000604051808303818561646e5a03f49150501515610a3a57600080fd5b5b5b505b565b600c54600160a060020a0316801515610eaa57600080fd5b600c54600160a060020a0316600036604051808383808284378201915050925050506000604051808303818561646e5a03f49150501515610a3a57600080fd5b5b5b50565b60008183101561155657fe5b508082035b92915050565b60008282018381101561157057fe5b8091505b50929150505600a165627a7a72305820e9dde416aaca714bc4f94242a3d55f257c595e44bfe920a6ad0a35f5c5a5d60a002900000000000000000000000035752fddd201a191751623cea3e7065155fd741b",
  "constructorArguments": "00000000000000000000000035752fddd201a191751623cea3e7065155fd741b"
}