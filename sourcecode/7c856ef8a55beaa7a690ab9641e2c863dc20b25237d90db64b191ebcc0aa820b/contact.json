{
  "address": "0x96a51938cfb22565e0d40694fe103675c63ae218",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RegistryICAP",
  "compilerVersion": "v0.3.5-nightly.2016.7.1+commit.48238c9",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-02\n*/\n\n// This software is a subject to Ambisafe License Agreement.\n// No use or distribution is allowed without written permission from Ambisafe.\n// https://ambisafe.com/terms.pdf\n\ncontract Ambi {\n    function getNodeAddress(bytes32 _nodeName) constant returns(address);\n    function hasRelation(bytes32 _nodeName, bytes32 _relation, address _to) constant returns(bool);\n    function addNode(bytes32 _nodeName, address _nodeAddress) constant returns(bool);\n}\n\ncontract AmbiEnabled {\n    Ambi public ambiC;\n    bool public isImmortal;\n    bytes32 public name;\n\n    modifier checkAccess(bytes32 _role) {\n        if(address(ambiC) != 0x0 && ambiC.hasRelation(name, _role, msg.sender)){\n            _\n        }\n    }\n    \n    function getAddress(bytes32 _name) constant returns (address) {\n        return ambiC.getNodeAddress(_name);\n    }\n\n    function setAmbiAddress(address _ambi, bytes32 _name) returns (bool){\n        if(address(ambiC) != 0x0){\n            return false;\n        }\n        Ambi ambiContract = Ambi(_ambi);\n        if(ambiContract.getNodeAddress(_name)!=address(this)) {\n            if (!ambiContract.addNode(_name, address(this))){\n                return false;\n            }\n        }\n        name = _name;\n        ambiC = ambiContract;\n        return true;\n    }\n\n    function immortality() checkAccess(\"owner\") returns(bool) {\n        isImmortal = true;\n        return true;\n    }\n\n    function remove() checkAccess(\"owner\") returns(bool) {\n        if (isImmortal) {\n            return false;\n        }\n        selfdestruct(msg.sender);\n        return true;\n    }\n}\n\nlibrary StackDepthLib {\n    // This will probably work with a value of 390 but no need to cut it\n    // that close in the case that the optimizer changes slightly or\n    // something causing that number to rise slightly.\n    uint constant GAS_PER_DEPTH = 400;\n\n    function checkDepth(address self, uint n) constant returns(bool) {\n        if (n == 0) return true;\n        return self.call.gas(GAS_PER_DEPTH * n)(0x21835af6, n - 1);\n    }\n\n    function __dig(uint n) constant {\n        if (n == 0) return;\n        if (!address(this).delegatecall(0x21835af6, n - 1)) throw;\n    }\n}\n\ncontract Safe {\n    // Should always be placed as first modifier!\n    modifier noValue {\n        if (msg.value > 0) {\n            // Internal Out Of Gas/Throw: revert this transaction too;\n            // Call Stack Depth Limit reached: revert this transaction too;\n            // Recursive Call: safe, no any changes applied yet, we are inside of modifier.\n            _safeSend(msg.sender, msg.value);\n        }\n        _\n    }\n\n    modifier onlyHuman {\n        if (_isHuman()) {\n            _\n        }\n    }\n\n    modifier noCallback {\n        if (!isCall) {\n            _\n        }\n    }\n\n    modifier immutable(address _address) {\n        if (_address == 0) {\n            _\n        }\n    }\n\n    address stackDepthLib;\n    function setupStackDepthLib(address _stackDepthLib) immutable(address(stackDepthLib)) returns(bool) {\n        stackDepthLib = _stackDepthLib;\n        return true;\n    }\n\n    modifier requireStackDepth(uint16 _depth) {\n        if (stackDepthLib == 0x0) {\n            throw;\n        }\n        if (_depth > 1023) {\n            throw;\n        }\n        if (!stackDepthLib.delegatecall(0x32921690, stackDepthLib, _depth)) {\n            throw;\n        }\n        _\n    }\n\n    // Must not be used inside the functions that have noValue() modifier!\n    function _safeFalse() internal noValue() returns(bool) {\n        return false;\n    }\n\n    function _safeSend(address _to, uint _value) internal {\n        if (!_unsafeSend(_to, _value)) {\n            throw;\n        }\n    }\n\n    function _unsafeSend(address _to, uint _value) internal returns(bool) {\n        return _to.call.value(_value)();\n    }\n\n    function _isContract() constant internal returns(bool) {\n        return msg.sender != tx.origin;\n    }\n\n    function _isHuman() constant internal returns(bool) {\n        return !_isContract();\n    }\n\n    bool private isCall = false;\n    function _setupNoCallback() internal {\n        isCall = true;\n    }\n\n    function _finishNoCallback() internal {\n        isCall = false;\n    }\n}\n\ncontract RegistryICAP is AmbiEnabled, Safe {\n    function decodeIndirect(bytes _bban) constant returns(string, string, string) {\n        bytes memory asset = new bytes(3);\n        bytes memory institution = new bytes(4);\n        bytes memory client = new bytes(9);\n\n        uint8 k = 0;\n\n        for (uint8 i = 0; i < asset.length; i++) {\n            asset[i] = _bban[k++];\n        }\n        for (i = 0; i < institution.length; i++) {\n            institution[i] = _bban[k++];\n        }\n        for (i = 0; i < client.length; i++) {\n            client[i] = _bban[k++];\n        }\n        return (string(asset), string(institution), string(client));\n    }\n\n    function parse(bytes32 _icap) constant returns(address, bytes32, bool) {\n        // Should start with XE.\n        if (_icap[0] != 88 || _icap[1] != 69) {\n            return (0, 0, false);\n        }\n        // Should have 12 zero bytes at the end.\n        for (uint8 j = 20; j < 32; j++) {\n            if (_icap[j] != 0) {\n                return (0, 0, false);\n            }\n        }\n        bytes memory bban = new bytes(18);\n        for (uint8 i = 0; i < 16; i++) {\n             bban[i] = _icap[i + 4];\n        }\n        var (asset, institution, _) = decodeIndirect(bban);\n\n        bytes32 assetInstitutionHash = sha3(asset, institution);\n\n        uint8 parseChecksum = (uint8(_icap[2]) - 48) * 10 + (uint8(_icap[3]) - 48);\n        uint8 calcChecksum = 98 - mod9710(prepare(bban));\n        if (parseChecksum != calcChecksum) {\n            return (institutions[assetInstitutionHash], assets[sha3(asset)], false);\n        }\n        return (institutions[assetInstitutionHash], assets[sha3(asset)], registered[assetInstitutionHash]);\n    }\n\n    function prepare(bytes _bban) constant returns(bytes) {\n        for (uint8 i = 0; i < 16; i++) {\n            uint8 charCode = uint8(_bban[i]);\n            if (charCode >= 65 && charCode <= 90) {\n                _bban[i] = byte(charCode - 65 + 10);\n            }\n        }\n        _bban[16] = 33; // X\n        _bban[17] = 14; // E\n        //_bban[18] = 48; // 0\n        //_bban[19] = 48; // 0\n        return _bban;\n    }\n\n    function mod9710(bytes _prepared) constant returns(uint8) {\n        uint m = 0;\n        for (uint8 i = 0; i < 18; i++) {\n            uint8 charCode = uint8(_prepared[i]);\n            if (charCode >= 48) {\n                m *= 10;\n                m += charCode - 48; // number\n                m %= 97;\n            } else {\n                m *= 10;\n                m += charCode / 10; // part1\n                m %= 97;\n                m *= 10;\n                m += charCode % 10; // part2\n                m %= 97;\n            }\n        }\n        m *= 10;\n        //m += uint8(_prepared[18]) - 48;\n        m %= 97;\n        m *= 10;\n        //m += uint8(_prepared[19]) - 48;\n        m %= 97;\n        return uint8(m);\n    }\n\n    mapping(bytes32 => bool) public registered;\n    mapping(bytes32 => address) public institutions;\n    mapping(bytes32 => address) public institutionOwners;\n    mapping(bytes32 => bytes32) public assets;\n\n    modifier onlyInstitutionOwner(string _institution) {\n        if (msg.sender == institutionOwners[sha3(_institution)]) {\n            _\n        }\n    }\n\n    function changeInstitutionOwner(string _institution, address _address) noValue() onlyInstitutionOwner(_institution) returns(bool) {\n        institutionOwners[sha3(_institution)] = _address;\n        return true;\n    }\n\n    // web3js sendIBANTransaction interface\n    function addr(bytes32 _institution) constant returns(address) {\n        return institutions[sha3(\"ETH\", _institution[0], _institution[1], _institution[2], _institution[3])];\n    }\n\n    function registerInstitution(string _institution, address _address) noValue() checkAccess(\"admin\") returns(bool) {\n        if (bytes(_institution).length != 4) {\n            return false;\n        }\n        if (institutionOwners[sha3(_institution)] != 0) {\n            return false;\n        }\n        institutionOwners[sha3(_institution)] = _address;\n        return true;\n    }\n\n    function registerInstitutionAsset(string _asset, string _institution, address _address) noValue() onlyInstitutionOwner(_institution) returns(bool) {\n        if (!registered[sha3(_asset)]) {\n            return false;\n        }\n        bytes32 assetInstitutionHash = sha3(_asset, _institution);\n        if (registered[assetInstitutionHash]) {\n            return false;\n        }\n        registered[assetInstitutionHash] = true;\n        institutions[assetInstitutionHash] = _address;\n        return true;\n    }\n\n    function updateInstitutionAsset(string _asset, string _institution, address _address) noValue() onlyInstitutionOwner(_institution) returns(bool) {\n        bytes32 assetInstitutionHash = sha3(_asset, _institution);\n        if (!registered[assetInstitutionHash]) {\n            return false;\n        }\n        institutions[assetInstitutionHash] = _address;\n        return true;\n    }\n\n    function removeInstitutionAsset(string _asset, string _institution) noValue() onlyInstitutionOwner(_institution) returns(bool) {\n        bytes32 assetInstitutionHash = sha3(_asset, _institution);\n        if (!registered[assetInstitutionHash]) {\n            return false;\n        }\n        delete registered[assetInstitutionHash];\n        delete institutions[assetInstitutionHash];\n        return true;\n    }\n\n    function registerAsset(string _asset, bytes32 _symbol) noValue() checkAccess(\"admin\") returns(bool) {\n        if (bytes(_asset).length != 3) {\n            return false;\n        }\n        bytes32 asset = sha3(_asset);\n        if (registered[asset]) {\n            return false;\n        }\n        registered[asset] = true;\n        assets[asset] = _symbol;\n        return true;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stackDepthLib\",\"type\":\"address\"}],\"name\":\"setupStackDepthLib\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_institution\",\"type\":\"bytes32\"}],\"name\":\"addr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_icap\",\"type\":\"bytes32\"}],\"name\":\"parse\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ambiC\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"registered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_institution\",\"type\":\"string\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"changeInstitutionOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_asset\",\"type\":\"string\"},{\"name\":\"_institution\",\"type\":\"string\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateInstitutionAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isImmortal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ambi\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"setAmbiAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_asset\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"registerAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_asset\",\"type\":\"string\"},{\"name\":\"_institution\",\"type\":\"string\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"registerInstitutionAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"institutions\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"assets\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"remove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_institution\",\"type\":\"string\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"registerInstitution\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"institutionOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_asset\",\"type\":\"string\"},{\"name\":\"_institution\",\"type\":\"string\"}],\"name\":\"removeInstitutionAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bban\",\"type\":\"bytes\"}],\"name\":\"prepare\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_prepared\",\"type\":\"bytes\"}],\"name\":\"mod9710\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bban\",\"type\":\"bytes\"}],\"name\":\"decodeIndirect\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"immortality\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"}]",
  "bytecode": "60606040526002805460a060020a60ff0219169055611aef806100226000396000f3606060405236156101115760e060020a600035046306fdde03811461011357806312ab72421461011c57806321f8a721146101545780633b3b57de146101cc5780634f71ef811461027557806352959d16146103455780635524d5481461035757806365bdfd2e1461037257806367f10e8c146103fe57806377f18ed31461049f5780637948f523146104b25780637e32fc47146104d55780638f87b7861461053857806395829738146105d95780639fda5b66146105fa578063a7f4377914610612578063bd23cd30146106bf578063c221c62014610720578063cf82601b14610741578063d7768c47146107e0578063e98c7608146108c7578063ee9ce0901461096b578063f7c3ee7a14610ad4575b005b610b9560015481565b610ba7600435600254600090600160a060020a031680821415610db457505060028054600160a060020a031916821790556001610db6565b610bbb60043560408051600080547f2ade6c360000000000000000000000000000000000000000000000000000000083526004830185905292519092600160a060020a031691632ade6c36916024828101926020929190829003018187876161da5a03f115610002575050604051519150610db69050565b610bbb60043560006004818381505083811a60f860020a028460011a60f860020a028560021a60f860020a02866003604080517f45544800000000000000000000000000000000000000000000000000000000008152600160f860020a0319968716818401529486168589015292851660058501521a60f860020a0290921660068201528151908190036007019020909152602091909152902054600160a060020a0316610db6565b6040805160208181018352600080835283518083018552818152845180840186528281528551938401909552818352610bd89460043594929384938493849391928492908380807f58000000000000000000000000000000000000000000000000000000000000008d821a60f860020a02600160f860020a031916141580610331575060018d901a60f860020a02600160f860020a0319167f450000000000000000000000000000000000000000000000000000000000000014155b15610e665760009b508b9a508a9950610e56565b610bbb600054600160a060020a031681565b610ba760043560036020526000908152604090205460ff1681565b610ba76004808035906020019082018035906020019191908080601f016020809104026020016040519081016040528093929190818152602001838380828437509496505093359350505050600060003411156110925761109233345b611ae08282604051600090600160a060020a0384169083908381818185876185025a03f192505050905061108c565b610ba76004808035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843750506040805160208835808b0135601f810183900483028401830190945283835297999860449892975091909101945090925082915084018382808284375094965050933593505050506000600060003411156111885761118833346103cf565b610ba760005460a060020a900460ff1681565b610ba7600435602435600080548190600160a060020a031681146112bc5761108a565b610ba76004808035906020019082018035906020019191908080601f0160208091040260200160405190810160405280939291908181526020018383808284375094965050933593505050506000600060003411156113915761139133346103cf565b610ba76004808035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843750506040805160208835808b0135601f810183900483028401830190945283835297999860449892975091909101945090925082915084018382808284375094965050933593505050506000600060003411156114dd576114dd33346103cf565b610bbb600435600460205260009081526040902054600160a060020a031681565b610b9560043560066020526000908152604090205481565b610ba76000805460d960020a6437bbb732b90290600160a060020a0316821480159061069e575060408051835460015460e460020a630a1add5102835260048301526024820184905233600160a060020a039081166044840152925192169163a1add51091606481810192602092909190829003018188876161da5a03f1156100025750506040515190505b156116915760005460a060020a900460ff1615611696576000915050611693565b610ba76004808035906020019082018035906020019191908080601f016020809104026020016040519081016040528093929190818152602001838380828437509496505093359350505050600060003411156116a2576116a233346103cf565b610bbb600435600560205260009081526040902054600160a060020a031681565b610ba76004808035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843750506040805160208835808b0135601f81018390048302840183019094528383529799986044989297509190910194509092508291508401838280828437509496505050505050506000600060003411156118365761183633346103cf565b610c036004808035906020019082018035906020019191908080601f016020809104026020016040519081016040528093929190818152602001838380828437509496505050505050505b60408051602081019091526000808252805b60108260ff16101561197a57838260ff16815181101561000257016020015160f860020a908190048102049050604160ff8216108015906108825750605a8160ff1611155b156108bb5760418103600a0160f860020a02848360ff16815181101561000257906020010190600160f860020a031916908160001a9053505b6001919091019061083d565b610c716004808035906020019082018035906020019191908080601f016020809104026020016040519081016040528093929190818152602001838380828437509496505050505050505b60008080805b60128260ff1610156119bc57848260ff16815181101561000257016020015160f860020a908190048102049050603060ff8216106119d2576061600a93909302602f19820160ff160192909206916119fc565b610c886004808035906020019082018035906020019191908080601f016020809104026020016040519081016040528093929190818152602001838380828437509496505050505050505b6040805160208181018352600080835283518083018552818152845180840186528281528551808501875283815286518086018852848152875195860188528486529651959692959194909390918190600390805910610a135750595b908082528060200260200182016040525094506004604051805910610a355750595b908082528060200260200182016040525093506009604051805910610a575750595b9080825280602002602001820160405250925060009150600090505b84518160ff161015611a0857888280600101935060ff1681518110156100025790602001015160f860020a900460f860020a02858260ff16815181101561000257906020010190600160f860020a031916908160001a905350600101610a73565b610ba76000805460d960020a6437bbb732b90290600160a060020a03168214801590610b63575081546001546040805160e460020a630a1add5102815260048101929092526024820184905233600160a060020a039081166044840152905192169163a1add51091606481810192602092909190829003018188876161da5a03f1156100025750506040515190505b156116915750506000805474ff0000000000000000000000000000000000000000191660a060020a1790556001611693565b60408051918252519081900360200190f35b604080519115158252519081900360200190f35b60408051600160a060020a03929092168252519081900360200190f35b60408051600160a060020a039490941684526020840192909252151582820152519081900360600190f35b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f168015610c635780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6040805160ff929092168252519081900360200190f35b604051808060200180602001806020018481038452878181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f168015610cf05780820380516001836020036101000a031916815260200191505b508481038352868181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f168015610d495780820380516001836020036101000a031916815260200191505b508481038252858181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f168015610da25780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b505b919050565b60008381526004602081815260408084205490518a51600160a060020a03929092169460069490938c9383928583019282918591839186918b9190601f850104600f02600301f150905001915050604051809103902060001916815260200190815260200160002060005054600360005060008660001916815260200190815260200160002060009054906101000a900460ff169b509b509b505b5050505050505050509193909250565b601498505b60208960ff161015610eac578c8960ff166020811015610002571a60f860020a02600160f860020a031916600014610f295760009b508b9a508a9950610e56565b6012604051805910610ebb5750595b90808252806020026020018201604052509750600096505b60108760ff161015610f35578c8760040160ff166020811015610002571a60f860020a02888860ff16815181101561000257906020010190600160f860020a031916908160001a90535060019690960195610ed3565b60019890980197610e6b565b610f3e886109b6565b9550955095508585604051808380519060200190808383829060006004602084601f0104600f02600301f1509050018280519060200190808383829060006004602084601f0104600f02600301f150905001925050506040518091039020925060308d600360208110156100025760f860020a91901a810204602f1901908e60021a60f860020a0260f860020a900403600a02019150610fe061106b8961082b565b606203905060ff82811690821614610dbb5760008381526004602081815260408084205490518a51600160a060020a03929092169460069490938c9383928583019282918591839186918b9190601f850104600f02600301f15090500191505060405180910390206000191681526020019081526020016000206000505460009b509b509b50610e56565b610912565b600183815560008054600160a060020a0319168317905591505b505b92915050565b826005600050600082604051808280519060200190808383829060006004602084601f0104600f02600301f150905001915050604051809103902060001916815260200190815260200160002060009054906101000a9004600160a060020a0316600160a060020a031633600160a060020a0316141561108a57826005600050600086604051808280519060200190808383829060006004602084601f0104600f02600301f150905001915050604051809103902060001916815260200190815260200160002060006101000a815481600160a060020a0302191690830217905550600191505061108c565b505b509392505050565b836005600050600082604051808280519060200190808383829060006004602084601f0104600f02600301f150905001915050604051809103902060001916815260200190815260200160002060009054906101000a9004600160a060020a0316600160a060020a031633600160a060020a0316141561117e578585604051808380519060200190808383829060006004602084601f0104600f02600301f1509050018280519060200190808383829060006004602084601f0104600f02600301f1509050019250505060405180910390209150600360005060008360001916815260200190815260200160002060009054906101000a900460ff161515611294576000925050611180565b5060008181526004602052604090208054600160a060020a0319168417905560019150611180565b83905030600160a060020a031681600160a060020a0316632ade6c36856040518260e060020a02815260040180826000191681526020019150506020604051808303816000876161da5a03f11561000257505060405151600160a060020a031690911490506110705780600160a060020a0316637684937684306040518360e060020a028152600401808360001916815260200182600160a060020a03168152602001925050506020604051808303816000876161da5a03f1156100025750506040515115159050611070576000915061108a565b6000805460d960020a6430b236b4b70291600160a060020a03919091161480159061141f5750604080516000805460015460e460020a630a1add5102845260048401526024830185905233600160a060020a039081166044850152935193169263a1add5109260648181019360209392839003909101908290876161da5a03f1156100025750506040515190505b1561143757845160031461143f57600092505061108a565b505092915050565b84604051808280519060200190808383829060006004602084601f0104600f02600301f15090500191505060405180910390209150600360005060008360001916815260200190815260200160002060009054906101000a900460ff16156114ab57600092505061108a565b506000818152600360209081526040808320805460ff191660019081179091556006909252909120849055915061108a565b836005600050600082604051808280519060200190808383829060006004602084601f0104600f02600301f150905001915050604051809103902060001916815260200190815260200160002060009054906101000a9004600160a060020a0316600160a060020a031633600160a060020a0316141561117e576003600050600087604051808280519060200190808383829060006004602084601f0104600f02600301f150905001915050604051809103902060001916815260200190815260200160002060009054906101000a900460ff1615156115c1576000925050611180565b8585604051808380519060200190808383829060006004602084601f0104600f02600301f1509050018280519060200190808383829060006004602084601f0104600f02600301f1509050019250505060405180910390209150600360005060008360001916815260200190815260200160002060009054906101000a900460ff1615611652576000925050611180565b506000818152600360209081526040808320805460ff1916600190811790915560049092529091208054600160a060020a031916851790559150611180565b505b90565b33600160a060020a0316ff5b6000805460d960020a6430b236b4b70291600160a060020a0391909116148015906117305750604080516000805460015460e460020a630a1add5102845260048401526024830185905233600160a060020a039081166044850152935193169263a1add5109260648181019360209392839003909101908290876161da5a03f1156100025750506040515190505b1561108a57835160041461174857600091505061108c565b6005600050600085604051808280519060200190808383829060006004602084601f0104600f02600301f150905001915050604051809103902060001916815260200190815260200160002060009054906101000a9004600160a060020a0316600160a060020a031660001415156117c457600091505061108c565b826005600050600086604051808280519060200190808383829060006004602084601f0104600f02600301f150905001915050604051809103902060001916815260200190815260200160002060006101000a815481600160a060020a0302191690830217905550600191505061108c565b826005600050600082604051808280519060200190808383829060006004602084601f0104600f02600301f150905001915050604051809103902060001916815260200190815260200160002060009054906101000a9004600160a060020a0316600160a060020a031633600160a060020a03161415611437578484604051808380519060200190808383829060006004602084601f0104600f02600301f1509050018280519060200190808383829060006004602084601f0104600f02600301f1509050019250505060405180910390209150600360005060008360001916815260200190815260200160002060009054906101000a900460ff16151561194257600092505061108a565b506000818152600360209081526040808320805460ff19169055600490915290208054600160a060020a03191690556001915061108a565b602160f860020a02846010815181101561000257506021906030015350600e60f860020a0284601181518110156100025750600e906031015350929392505050565b50506061600a9182028190069091020692915050565b6061600a60ff83811682810682169083900490911695820295909501829006029390930192909206915b60019190910190610918565b5060005b83518160ff161015611a6d57888280600101935060ff1681518110156100025790602001015160f860020a900460f860020a02848260ff16815181101561000257906020010190600160f860020a031916908160001a905350600101611a0c565b5060005b82518160ff161015611ad257888280600101935060ff1681518110156100025790602001015160f860020a900460f860020a02838260ff16815181101561000257906020010190600160f860020a031916908160001a905350600101611a71565b509297919650945092505050565b1515611aeb57610002565b505056"
}