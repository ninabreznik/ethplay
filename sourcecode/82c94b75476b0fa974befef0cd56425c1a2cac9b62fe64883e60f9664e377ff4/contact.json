{
  "address": "0xffdf17652cca46eb98a214cb3e413c8661241e49",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "CryptoBeasties Token",
  "contractName": "CryptoBeastiesToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-27\n*/\n\npragma solidity ^0.4.24;\n\n// File: node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol\n\n/**\n * @title ERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface ERC165 {\n\n  /**\n   * @notice Query if a contract implements an interface\n   * @param _interfaceId The interface identifier, as specified in ERC-165\n   * @dev Interface identification is specified in ERC-165. This function\n   * uses less than 30,000 gas.\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool);\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Basic is ERC165 {\n  event Transfer(\n    address indexed _from,\n    address indexed _to,\n    uint256 indexed _tokenId\n  );\n  event Approval(\n    address indexed _owner,\n    address indexed _approved,\n    uint256 indexed _tokenId\n  );\n  event ApprovalForAll(\n    address indexed _owner,\n    address indexed _operator,\n    bool _approved\n  );\n\n  function balanceOf(address _owner) public view returns (uint256 _balance);\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n  function exists(uint256 _tokenId) public view returns (bool _exists);\n\n  function approve(address _to, uint256 _tokenId) public;\n  function getApproved(uint256 _tokenId)\n    public view returns (address _operator);\n\n  function setApprovalForAll(address _operator, bool _approved) public;\n  function isApprovedForAll(address _owner, address _operator)\n    public view returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\n    public;\n\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public;\n}\n\n// File: contracts/ERC721.sol\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Enumerable is ERC721Basic {\n    function totalSupply() public view returns (uint256);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Metadata is ERC721Basic {\n    function name() external view returns (string _name);\n    function symbol() external view returns (string _symbol);\n    function tokenURI(uint256 _tokenId) public view returns (string);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Receiver.sol\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ncontract ERC721Receiver {\n  /**\n   * @dev Magic value to be returned upon successful reception of an NFT\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n   */\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\n\n  /**\n   * @notice Handle the receipt of an NFT\n   * @dev The ERC721 smart contract calls this function on the recipient\n   * after a `safetransfer`. This function MAY throw to revert and reject the\n   * transfer. Return of other than the magic value MUST result in the \n   * transaction being reverted.\n   * Note: the contract address is always the message sender.\n   * @param _operator The address which called `safeTransferFrom` function\n   * @param _from The address which previously owned the token\n   * @param _tokenId The NFT identifier which is being transfered\n   * @param _data Additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n   */\n  function onERC721Received(\n    address _operator,\n    address _from,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public\n    returns(bytes4);\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/AddressUtils.sol\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary AddressUtils {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   * as the code is not actually created until after the constructor finishes.\n   * @param addr address to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address addr) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(addr) }\n    return size > 0;\n  }\n\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/introspection/SupportsInterfaceWithLookup.sol\n\n/**\n * @title SupportsInterfaceWithLookup\n * @author Matt Condon (@shrugs)\n * @dev Implements ERC165 using a lookup table.\n */\ncontract SupportsInterfaceWithLookup is ERC165 {\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\n  /**\n   * 0x01ffc9a7 ===\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\n   */\n\n  /**\n   * @dev a mapping of interface id to whether or not it's supported\n   */\n  mapping(bytes4 => bool) internal supportedInterfaces;\n\n  /**\n   * @dev A contract implementing SupportsInterfaceWithLookup\n   * implement ERC165 itself\n   */\n  constructor()\n    public\n  {\n    _registerInterface(InterfaceId_ERC165);\n  }\n\n  /**\n   * @dev implement supportsInterface(bytes4) using a lookup table\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool)\n  {\n    return supportedInterfaces[_interfaceId];\n  }\n\n  /**\n   * @dev private method for registering an interface\n   */\n  function _registerInterface(bytes4 _interfaceId)\n    internal\n  {\n    require(_interfaceId != 0xffffffff);\n    supportedInterfaces[_interfaceId] = true;\n  }\n}\n\n// File: contracts/ERC721BasicToken.sol\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\n\n    bytes4 private constant InterfaceId_ERC721 = 0x80ac58cd;\n    /*\n    * 0x80ac58cd ===\n    *   bytes4(keccak256('balanceOf(address)')) ^\n    *   bytes4(keccak256('ownerOf(uint256)')) ^\n    *   bytes4(keccak256('approve(address,uint256)')) ^\n    *   bytes4(keccak256('getApproved(uint256)')) ^\n    *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n    *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n    *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n    *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n    *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n    */\n\n    bytes4 private constant InterfaceId_ERC721Exists = 0x4f558e79;\n    /*\n    * 0x4f558e79 ===\n    *   bytes4(keccak256('exists(uint256)'))\n    */\n\n    using SafeMath for uint256;\n    using AddressUtils for address;\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n    bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n\n    // Mapping from token ID to owner\n    mapping (uint256 => address) internal tokenOwner;\n\n    // Mapping from token ID to approved address\n    mapping (uint256 => address) internal tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping (address => mapping (address => bool)) internal operatorApprovals;\n\n    /**\n    * @dev Guarantees msg.sender is owner of the given token\n    * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n    */\n    modifier onlyOwnerOf(uint256 _tokenId) {\n        require(ownerOf(_tokenId) == msg.sender);\n        _;\n    }\n\n    /**\n    * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\n    * @param _tokenId uint256 ID of the token to validate\n    */\n    modifier canTransfer(uint256 _tokenId) {\n        require(isApprovedOrOwner(msg.sender, _tokenId)); //, \"canTransfer\"\n        _;\n    }\n\n    constructor()\n        public\n    {\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(InterfaceId_ERC721);\n        _registerInterface(InterfaceId_ERC721Exists);\n    }\n\n    /**\n    * @dev Gets the balance of the specified address\n    * @param _owner address to query the balance of\n    * @return uint256 representing the amount owned by the passed address\n    */\n    function balanceOf(address _owner) public view returns (uint256);\n\n    /**\n    * @dev Gets the owner of the specified token ID\n    * @param _tokenId uint256 ID of the token to query the owner of\n    * @return owner address currently marked as the owner of the given token ID\n    */\n    function ownerOf(uint256 _tokenId) public view returns (address) {\n        address owner = tokenOwner[_tokenId];\n        require(owner != address(0));\n        return owner;\n    }\n\n    /**\n    * @dev Returns whether the specified token exists\n    * @param _tokenId uint256 ID of the token to query the existence of\n    * @return whether the token exists\n    */\n    function exists(uint256 _tokenId) public view returns (bool) {\n        address owner = tokenOwner[_tokenId];\n        return owner != address(0);\n    }\n\n    /**\n    * @dev Approves another address to transfer the given token ID\n    * The zero address indicates there is no approved address.\n    * There can only be one approved address per token at a given time.\n    * Can only be called by the token owner or an approved operator.\n    * @param _to address to be approved for the given token ID\n    * @param _tokenId uint256 ID of the token to be approved\n    */\n    function approve(address _to, uint256 _tokenId) public {\n        address owner = ownerOf(_tokenId);\n        require(_to != owner); //, \"_to eq owner\"\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n        tokenApprovals[_tokenId] = _to;\n        emit Approval(owner, _to, _tokenId);\n    }\n\n    /**\n    * @dev Gets the approved address for a token ID, or zero if no address set\n    * @param _tokenId uint256 ID of the token to query the approval of\n    * @return address currently approved for the given token ID\n    */\n    function getApproved(uint256 _tokenId) public view returns (address) {\n        return tokenApprovals[_tokenId];\n    }\n\n    /**\n    * @dev Sets or unsets the approval of a given operator\n    * An operator is allowed to transfer all tokens of the sender on their behalf\n    * @param _to operator address to set the approval\n    * @param _approved representing the status of the approval to be set\n    */\n    function setApprovalForAll(address _to, bool _approved) public {\n        require(_to != msg.sender);\n        operatorApprovals[msg.sender][_to] = _approved;\n        emit ApprovalForAll(msg.sender, _to, _approved);\n    }\n\n    /**\n    * @dev Tells whether an operator is approved by a given owner\n    * @param _owner owner address which you want to query the approval of\n    * @param _operator operator address which you want to query the approval of\n    * @return bool whether the given operator is approved by the given owner\n    */\n    function isApprovedForAll(\n        address _owner,\n        address _operator\n    )\n        public\n        view\n        returns (bool)\n    {\n        return operatorApprovals[_owner][_operator];\n    }\n\n    /**\n    * @dev Transfers the ownership of a given token ID to another address\n    * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n    * Requires the msg sender to be the owner, approved, or operator\n    * @param _from current owner of the token\n    * @param _to address to receive the ownership of the given token ID\n    * @param _tokenId uint256 ID of the token to be transferred\n    */\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    )\n        public\n        canTransfer(_tokenId)\n    {\n        require(_from != address(0)); //, \"transferFrom 1\"\n        require(_to != address(0)); //, \"transferFrom 2\"\n\n        clearApproval(_from, _tokenId);\n        removeTokenFrom(_from, _tokenId);\n        addTokenTo(_to, _tokenId);\n\n        emit Transfer(_from, _to, _tokenId);\n    }\n\n    /**\n    * @dev Safely transfers the ownership of a given token ID to another address\n    * If the target address is a contract, it must implement `onERC721Received`,\n    * which is called upon a safe transfer, and return the magic value\n    * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n    * the transfer is reverted.\n    *\n    * Requires the msg sender to be the owner, approved, or operator\n    * @param _from current owner of the token\n    * @param _to address to receive the ownership of the given token ID\n    * @param _tokenId uint256 ID of the token to be transferred\n    */\n    function safeTransferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    )\n        public\n        canTransfer(_tokenId)\n    {\n        // solium-disable-next-line arg-overflow\n        safeTransferFrom(_from, _to, _tokenId, \"\");\n    }\n\n    /**\n    * @dev Safely transfers the ownership of a given token ID to another address\n    * If the target address is a contract, it must implement `onERC721Received`,\n    * which is called upon a safe transfer, and return the magic value\n    * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n    * the transfer is reverted.\n    * Requires the msg sender to be the owner, approved, or operator\n    * @param _from current owner of the token\n    * @param _to address to receive the ownership of the given token ID\n    * @param _tokenId uint256 ID of the token to be transferred\n    * @param _data bytes data to send along with a safe transfer check\n    */\n    function safeTransferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId,\n        bytes _data\n    )\n        public\n        canTransfer(_tokenId)\n    {\n        transferFrom(_from, _to, _tokenId);\n        // solium-disable-next-line arg-overflow\n        require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n    }\n\n    /**\n    * @dev Returns whether the given spender can transfer a given token ID\n    * @param _spender address of the spender to query\n    * @param _tokenId uint256 ID of the token to be transferred\n    * @return bool whether the msg.sender is approved for the given token ID,\n    *  is an operator of the owner, or is the owner of the token\n    */\n    function isApprovedOrOwner(\n        address _spender,\n        uint256 _tokenId\n    )\n        internal\n        view\n        returns (bool)\n    {\n        address owner = ownerOf(_tokenId);\n        // Disable solium check because of\n        // https://github.com/duaraghav8/Solium/issues/175\n        // solium-disable-next-line operator-whitespace\n        return (\n        _spender == owner ||\n        getApproved(_tokenId) == _spender ||\n        isApprovedForAll(owner, _spender)\n        );\n    }\n\n    /**\n    * @dev Internal function to mint a new token\n    * Reverts if the given token ID already exists\n    * @param _to The address that will own the minted token\n    * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n    */\n    function _mint(address _to, uint256 _tokenId) internal {\n        require(_to != address(0));\n        addTokenTo(_to, _tokenId);\n        emit Transfer(address(0), _to, _tokenId);\n    }\n\n    /**\n    * @dev Internal function to burn a specific token\n    * Reverts if the token does not exist\n    * @param _tokenId uint256 ID of the token being burned by the msg.sender\n    */\n    function _burn(address _owner, uint256 _tokenId) internal {\n        clearApproval(_owner, _tokenId);\n        removeTokenFrom(_owner, _tokenId);\n        emit Transfer(_owner, address(0), _tokenId);\n    }\n\n    /**\n    * @dev Internal function to clear current approval of a given token ID\n    * Reverts if the given address is not indeed the owner of the token\n    * @param _owner owner of the token\n    * @param _tokenId uint256 ID of the token to be transferred\n    */\n    function clearApproval(address _owner, uint256 _tokenId) internal {\n        require(ownerOf(_tokenId) == _owner); //, \"clearApproval\"\n        if (tokenApprovals[_tokenId] != address(0)) {\n            tokenApprovals[_tokenId] = address(0);\n        }\n    }\n\n    /**\n    * @dev Internal function to add a token ID to the list of a given address\n    * @param _to address representing the new owner of the given token ID\n    * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n    */\n    function addTokenTo(address _to, uint256 _tokenId) internal {\n        require(tokenOwner[_tokenId] == address(0)); //, \"addTokenTo\"\n        tokenOwner[_tokenId] = _to;\n    }\n\n    /**\n    * @dev Internal function to remove a token ID from the list of a given address\n    * @param _from address representing the previous owner of the given token ID\n    * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n    */\n    function removeTokenFrom(address _from, uint256 _tokenId) internal {\n        require(ownerOf(_tokenId) == _from); //, \"removeTokenFrom\"\n        tokenOwner[_tokenId] = address(0);\n    }\n\n    /**\n    * @dev Internal function to invoke `onERC721Received` on a target address\n    * The call is not executed if the target address is not a contract\n    * @param _from address representing the previous owner of the given token ID\n    * @param _to target address that will receive the tokens\n    * @param _tokenId uint256 ID of the token to be transferred\n    * @param _data bytes optional data to send along with the call\n    * @return whether the call correctly returned the expected magic value\n    */\n    function checkAndCallSafeTransfer(\n        address _from,\n        address _to,\n        uint256 _tokenId,\n        bytes _data\n    )\n        internal\n        returns (bool)\n    {\n        if (!_to.isContract()) {\n            return true;\n        }\n        bytes4 retval = ERC721Receiver(_to).onERC721Received(\n        msg.sender, _from, _tokenId, _data);\n        return (retval == ERC721_RECEIVED);\n    }\n}\n\n// File: contracts/IEntityStorage.sol\n\ninterface IEntityStorage {\n    function storeBulk(uint256[] _tokenIds, uint256[] _attributes) external;\n    function store(uint256 _tokenId, uint256 _attributes, uint256[] _componentIds) external;\n    function remove(uint256 _tokenId) external;\n    function list() external view returns (uint256[] tokenIds);\n    function getAttributes(uint256 _tokenId) external view returns (uint256 attrs, uint256[] compIds);\n    function updateAttributes(uint256 _tokenId, uint256 _attributes, uint256[] _componentIds) external;\n    function totalSupply() external view returns (uint256);\n}\n\n// File: contracts/ERC721Token.sol\n\n/**\n * @title Full ERC721 Token\n * This implementation includes all the required and some optional functionality of the ERC721 standard\n * Moreover, it includes approve all functionality using operator terminology\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md Customized to support non-transferability.\n */\ncontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\n\n    IEntityStorage internal cbStorage;\n\n    bytes4 private constant InterfaceId_ERC721Enumerable = 0x780e9d63;\n    /**\n    * 0x780e9d63 ===\n    *   bytes4(keccak256('totalSupply()')) ^\n    *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n    *   bytes4(keccak256('tokenByIndex(uint256)'))\n    */\n\n    bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n    /**\n    * 0x5b5e139f ===\n    *   bytes4(keccak256('name()')) ^\n    *   bytes4(keccak256('symbol()')) ^\n    *   bytes4(keccak256('tokenURI(uint256)'))\n    */\n\n    string internal uriPrefix;\n\n    // Token name\n    string internal name_;\n\n    // Token symbol\n    string internal symbol_;\n\n    // Mapping from owner to list of owned token IDs\n    mapping(address => uint256[]) internal ownedTokens;\n\n    // Mapping to index within the ownedTokens array for the owner\n    mapping(uint256 => uint) internal ownedTokenIndexes;\n    \n    // Array with transferable Tokens\n    uint256[] internal transferableTokens;\n\n    // Mapping to index within the ownedTokens array for the owner\n    mapping(uint256 => uint) internal transferableIndexes;\n\n    /**\n    * @dev Constructor function\n    */\n    constructor(string _name, string _symbol, string _uriPrefix, address _storage) public {\n        require(_storage != address(0), \"Storage Address is required\");\n        name_ = _name;\n        symbol_ = _symbol;\n\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(InterfaceId_ERC721Enumerable);\n        _registerInterface(InterfaceId_ERC721Metadata);\n        cbStorage = IEntityStorage(_storage);\n        uriPrefix = _uriPrefix;\n    }\n\n    /**\n    * @dev Gets the token name\n    * @return string representing the token name\n    */\n    function name() external view returns (string) {\n        return name_;\n    }\n\n    /**\n    * @dev Gets the token symbol\n    * @return string representing the token symbol\n    */\n    function symbol() external view returns (string) {\n        return symbol_;\n    }\n\n    /**\n    * @dev Returns an URI for a given token ID\n    * Throws if the token ID does not exist. May return an empty string.\n    * @param _tokenId uint256 ID of the token to query\n    */\n    function tokenURI(uint256 _tokenId) public view returns (string) {\n        require(exists(_tokenId));\n        return strConcat(uriPrefix, uintToString(_tokenId));\n    }\n\n    /**\n    * @dev Gets the total amount of tokens stored by the contract\n    * @return uint256 representing the total amount of tokens\n    */\n    function totalSupply() public view returns (uint256) {\n        return cbStorage.totalSupply();\n    }\n\n    /**\n    * @dev Internal function to add a token ID to the list owned by a given address\n    * @param _to address representing the new owner of the token ID\n    * @param _tokenId uint256 ID of the token to be added \n    */\n    function addTokenTo(address _to, uint256 _tokenId) internal {\n        super.addTokenTo(_to, _tokenId);\n\n        ownedTokens[_to].push(_tokenId);\n        // index is +1 to avoid Solidity's zero default mapping value\n        ownedTokenIndexes[_tokenId] = ownedTokens[_to].length;\n    }\n\n    /**\n    * @dev Internal function to remove a token ID from the list owned by a given address\n    * @param _from address representing the previous owner of the token ID\n    * @param _tokenId uint256 ID of the token to be removed\n    */\n    function removeTokenFrom(address _from, uint256 _tokenId) internal {\n        uint lastTokenIndex = ownedTokens[_from].length;\n        require(lastTokenIndex > 0);\n        lastTokenIndex--;\n\n        super.removeTokenFrom(_from, _tokenId);\n\n        uint256 tokenIndex = ownedTokenIndexes[_tokenId].sub(1);\n        \n        // reorg the ownedTokens array for this address\n        uint256 lastTokenId = ownedTokens[_from][lastTokenIndex];\n\n        // reposition the last token to its new location\n        ownedTokens[_from][tokenIndex] = lastTokenId;\n\n        // fix the index mapping for the repositioned lastToken\n        ownedTokenIndexes[lastTokenId] = tokenIndex.add(1);\n\n        // empty out the last token position in the array\n        ownedTokens[_from][lastTokenIndex] = 0;\n        ownedTokens[_from].length--;\n    }\n\n    /**\n    * @dev Internal function to burn a specific token\n    * Reverts if the token does not exist, or is marked transferable\n    * @param _owner owner address of the token being burned\n    * @param _tokenId uint256 ID of the token being burned \n    */\n    function _burn(address _owner, uint256 _tokenId) internal {\n        // cannot burn a token that is up for sale\n        require(!isTransferable(_tokenId)); //, \"_burn\"\n        super._burn(_owner, _tokenId);\n        cbStorage.remove(_tokenId);\n    }\n\n    /**\n    * @dev Gets the number of tokens owned by the specified address\n    * @param _owner address of the token owner\n    * @return uint256 the number of tokens owned \n    */\n    function balanceOf(address _owner) public view returns (uint256) {\n        require(_owner != address(0));\n        return ownedTokens[_owner].length;\n    }\n\n        /**\n    * @dev List all token Ids that can be transfered\n    * @return array of token IDs\n    */\n    function listTransferableTokens() public view returns(uint256[]) {\n        return transferableTokens;\n    } \n\n    /**\n    * @dev Is Token Transferable\n    * @param _tokenId uint256 ID of the token\n    * @return bool is tokenId transferable \n    */\n    function isTransferable(uint256 _tokenId) public view returns (bool) {\n        return (transferableIndexes[_tokenId] > 0);\n    }\n\n    /**\n    * @dev Returns whether the given spender can transfer a given token ID\n    * @param _spender address of the spender to query\n    * @param _tokenId uint256 ID of the token to be transferred\n    * @return bool whether the token is transferable and msg.sender is approved for the given token ID,\n    *  is an operator of the owner, or is the owner of the token\n    */\n    function isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool) {\n        address owner = ownerOf(_tokenId);\n        if (isTransferable(_tokenId)) {\n            return (_spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender));\n        }\n        return false;\n    }\n\n    /**\n    * Converts a uint, such aa a token ID number, to a string\n    */\n    function uintToString(uint v) internal pure returns (string str) {\n        uint maxlength = 100;\n        bytes memory reversed = new bytes(maxlength);\n        uint i = 0;\n        while (v != 0) {\n            uint remainder = v % 10;\n            v = v / 10;\n            reversed[i++] = byte(48 + remainder);\n        }\n        bytes memory s = new bytes(i);\n        for (uint j = 0; j < i; j++) {\n            s[j] = reversed[i - 1 - j];\n        }\n        str = string(s);\n    }\n\n    /**\n    * Basic smashing together of strings.\n    */\n    function strConcat(string _a, string _b)internal pure returns (string) {\n        bytes memory _ba = bytes(_a);\n        bytes memory _bb = bytes(_b);\n        string memory ab = new string(_ba.length + _bb.length);\n        bytes memory ba = bytes(ab);\n        uint k = 0;\n        for (uint i = 0; i < _ba.length; i++) ba[k++] = _ba[i];\n        for (i = 0; i < _bb.length; i++) ba[k++] = _bb[i];\n        return string(ba);\n    }\n}\n\n// File: contracts/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n    address public newOwner;\n    \n    // mapping for creature Type to Sale\n    address[] internal controllers;\n    //mapping(address => address) internal controllers;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n   /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n    constructor() public {\n        owner = msg.sender;\n    }\n   \n    /**\n    * @dev Throws if called by any account that's not a superuser.\n    */\n    modifier onlyController() {\n        require(isController(msg.sender), \"only Controller\");\n        _;\n    }\n\n    modifier onlyOwnerOrController() {\n        require(msg.sender == owner || isController(msg.sender), \"only Owner Or Controller\");\n        _;\n    }\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"sender address must be the owner's address\");\n        _;\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param _newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address _newOwner) public onlyOwner {\n        require(address(0) != _newOwner, \"new owner address must not be the owner's address\");\n        newOwner = _newOwner;\n    }\n\n    /**\n    * @dev Allows the new owner to confirm that they are taking control of the contract..tr\n    */\n    function acceptOwnership() public {\n        require(msg.sender == newOwner, \"sender address must not be the new owner's address\");\n        emit OwnershipTransferred(owner, msg.sender);\n        owner = msg.sender;\n        newOwner = address(0);\n    }\n\n    function isController(address _controller) internal view returns(bool) {\n        for (uint8 index = 0; index < controllers.length; index++) {\n            if (controllers[index] == _controller) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function getControllers() public onlyOwner view returns(address[]) {\n        return controllers;\n    }\n\n    /**\n    * @dev Allows a new controllers to be added\n    * @param _controller The address controller.\n    */\n    function addController(address _controller) public onlyOwner {\n        require(address(0) != _controller, \"controller address must not be 0\");\n        require(_controller != owner, \"controller address must not be the owner's address\");\n        for (uint8 index = 0; index < controllers.length; index++) {\n            if (controllers[index] == _controller) {\n                return;\n            }\n        }\n        controllers.push(_controller);\n    }\n\n    /**\n    * @dev Allows a new controllers to be added\n    * @param _controller The address controller.\n    */\n    function removeController(address _controller) public onlyOwner {\n        require(address(0) != _controller, \"controller address must not be 0\");\n        for (uint8 index = 0; index < controllers.length; index++) {\n            if (controllers[index] == _controller) {\n                delete controllers[index];\n            }\n        }\n    }\n}\n\n// File: contracts/ICryptoBeastiesToken.sol\n\ninterface ICryptoBeastiesToken {\n    function bulk(uint256[] _tokenIds, uint256[] _attributes, address[] _owners) external;\n    function create(uint256 _tokenId, uint256 _attributes, uint256[] _componentIds, address _owner) external;\n    function tokensOfOwner(address _owner) external view returns (uint256[] tokens);\n    function getProperties(uint256 _tokenId) external view returns (uint256 attrs, uint256[] compIds); \n    function updateAttributes(uint256 _tokenId, uint256 _attributes, uint256[] _componentIds) external; \n    function updateStorage(address _storage) external;\n    function listTokens() external view returns (uint256[] tokens);\n    function setURI(string _uriPrefix) external;\n    function setTransferable(uint256 _tokenId) external;\n    function removeTransferable(uint256 _tokenId) external;\n}\n\n// File: contracts/CryptoBeastiesToken.sol\n\n/**\n * @title CryptoBeasties Full ERC721 Token\n * This implementation includes all the required and some optional functionality of the ERC721 standard,\n * plus references a separate storage contract for recording the game-specific data for each token. \n */\ncontract CryptoBeastiesToken is ERC721Token, Ownable, ICryptoBeastiesToken { \n    using SafeMath for uint256;\n\n    address proxyRegistryAddress;\n\n    /**\n    * @dev Constructor function\n    * @param _storage address for Creature Storage\n    * @param _uriPrefix string for url prefix\n    */\n    constructor(address _storage, string _uriPrefix) \n        ERC721Token(\"CryptoBeasties Token\", \"CRYB\", _uriPrefix, _storage) public {\n        proxyRegistryAddress = address(0);\n    }\n\n    /**\n    * @dev Set a Proxy Registry Address, to be used by 3rd-party marketplaces.\n    * @param _proxyRegistryAddress Address of the marketplace's proxy registry address\n    */\n    function setProxyRegistryAddress(address _proxyRegistryAddress) external onlyOwnerOrController {\n        proxyRegistryAddress = _proxyRegistryAddress;\n    }\n\n    /**\n    * @dev Bulk load a number of tokens, as a way of reducing gas fees and migration time.\n    * @param _tokenIds Array of tokenIds\n    * @param _attributes Matching array of CryptoBeasties attributes\n    * @param _owners Matching array of token owner addresses\n    */\n    function bulk(uint256[] _tokenIds, uint256[] _attributes, address[] _owners) external onlyOwnerOrController {\n        for (uint index = 0; index < _tokenIds.length; index++) {\n            \n            ownedTokens[_owners[index]].push(_tokenIds[index]);\n            ownedTokenIndexes[_tokenIds[index]] = ownedTokens[_owners[index]].length;\n\n            tokenOwner[_tokenIds[index]] = _owners[index];\n            emit Transfer(address(0), _owners[index], _tokenIds[index]);\n        }\n        cbStorage.storeBulk(_tokenIds, _attributes);\n    }\n\n    /**\n    * @dev Create CryptoBeasties Token \n    * @param _tokenId ID of the new token\n    * @param _attributes CryptoBeasties attributes\n    * @param _owner address of the token owner\n    */\n    function create(uint256 _tokenId, uint256 _attributes, uint256[] _componentIds, address _owner) external onlyOwnerOrController {\n        require(_owner != address(0));\n        require(_attributes > 0); \n        super._mint(_owner, _tokenId);\n        cbStorage.store(_tokenId, _attributes, _componentIds);\n    }\n\n   /**\n   * Override isApprovedForAll to whitelist a 3rd-party marketplace's proxy accounts to enable gas-less listings.\n   */\n    function isApprovedForAll(\n        address owner,\n        address operator\n    )\n    public\n    view\n    returns (bool)\n    {\n        if (proxyRegistryAddress != address(0)) {\n            ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\n            if (proxyRegistry.proxies(owner) == operator) {\n                return true;\n            }\n        }\n\n        return super.isApprovedForAll(owner, operator);\n    }\n\n    /**\n    * @dev List all token ids for a owner\n    * @param _owner address of the token owner\n    */\n    function tokensOfOwner(address _owner) external view returns (uint256[]) {\n        return ownedTokens[_owner];\n    }\n    \n    /**\n    * @dev List all token ids, an array of their attributes and an array componentIds (i.e. PowerStones)\n    * @param _owner address for the given token ID\n    */\n    function getOwnedTokenData(\n        address _owner\n        ) \n        public \n        view \n        returns \n        (\n            uint256[] tokens, \n            uint256[] attrs, \n            uint256[] componentIds, \n            bool[] isTransferable\n        ) {\n\n        uint256[] memory tokenIds = this.tokensOfOwner(_owner);\n        uint256[] memory attribs = new uint256[](tokenIds.length);\n        uint256[] memory firstCompIds = new uint256[](tokenIds.length);\n        bool[] memory transferable = new bool[](tokenIds.length);\n        \n        uint256[] memory compIds;\n\n        for (uint i = 0; i < tokenIds.length; i++) {\n            (attribs[i], compIds) = cbStorage.getAttributes(tokenIds[i]);\n            transferable[i] = this.isTransferable(tokenIds[i]);\n            if (compIds.length > 0)\n            {\n                firstCompIds[i] = compIds[0];\n            }\n        }\n        return (tokenIds, attribs, firstCompIds, transferable);\n    }\n\n    /**\n    * @dev Get attributes and Component Ids (i.e. PowerStones) CryptoBeastie\n    * @param _tokenId uint256 for the given token\n    */\n    function getProperties(uint256 _tokenId) external view returns (uint256 attrs, uint256[] compIds) {\n        return cbStorage.getAttributes(_tokenId);\n    }\n\n    /**\n    * @dev attributes and Component Ids (i.e. PowerStones) CryptoBeastie\n    * @param _tokenId uint256 for the given token\n    * @param _attributes Cryptobeasties attributes\n    * @param _componentIds Array of Cryptobeasties componentIds (i.e. PowerStones)\n    */\n    function updateAttributes(uint256 _tokenId, uint256 _attributes, uint256[] _componentIds) external {\n        require(ownerOf(_tokenId) == msg.sender || owner == msg.sender || isController(msg.sender)); //, \"token owner\"\n        cbStorage.updateAttributes(_tokenId, _attributes, _componentIds);\n    }\n\n    /**\n    * @dev Update the reference to the CryptoBeasties storage contract\n    * @param _storage address for CryptoBeasties storage contract\n    */\n    function updateStorage(address _storage) external  onlyOwnerOrController {\n        cbStorage = IEntityStorage(_storage);\n    }\n\n    /**\n    * @dev List all of the CryptoBeasties token Ids held in the Storage Contract\n    */\n    function listTokens() external view returns (uint256[] tokens) {\n        return cbStorage.list();\n    }\n\n    /**\n    * @dev Update the URI prefix\n    * @param _uriPrefix string for url prefix\n    */\n    function setURI(string _uriPrefix) external onlyOwnerOrController {\n        uriPrefix = _uriPrefix;\n    }\n\n    /**\n    * @dev Bulk setup of token Ids that can be transferred\n    * @param _tokenIds array of token Ids that will be set for transfer\n    */\n    function bulkTransferable(uint256[] _tokenIds) external {\n        address _owner = ownerOf(_tokenIds[0]);\n        require(_owner == msg.sender || owner == msg.sender || isController(msg.sender)); //, \"token owner\"\n        for (uint256 index = 0; index < _tokenIds.length; index++) {\n            if (_owner == msg.sender) {\n                require(ownerOf(_tokenIds[index]) == _owner); //, \"token owner\"\n            } \n            transferableTokens.push(_tokenIds[index]);\n            // save index as +1 to avoid Solidity's zero default mapping value\n            transferableIndexes[_tokenIds[index]] = transferableTokens.length;\n        }\n    }\n\n    /**\n    * @dev Set a Token Id that can be transfer\n    * @param _tokenId Token Id that will be set for transfer\n    */\n    function setTransferable(uint256 _tokenId) external {\n        require(ownerOf(_tokenId) == msg.sender || owner == msg.sender || isController(msg.sender)); //, \"token owner\"\n        transferableTokens.push(_tokenId);\n        // save index as +1 to avoid Solidity's zero default mapping value\n        transferableIndexes[_tokenId] = transferableTokens.length;        \n    }\n\n    /**\n    * @dev Bulk remove transferability of token Ids\n    * @param _tokenIds array of token Ids that will be removed for transfer\n    */\n    function bulkRemoveTransferable(uint256[] _tokenIds) external {\n        address _owner = ownerOf(_tokenIds[0]);\n        require(_owner == msg.sender || owner == msg.sender || isController(msg.sender)); //, \"token owner\"\n        for (uint256 index = 0; index < _tokenIds.length; index++) {\n            if (_owner == msg.sender) {\n                require(ownerOf(_tokenIds[index]) == _owner); //, \"token owner\"\n            }\n            _removeTransfer(_tokenIds[index]);\n        }\n    }\n\n    /**\n    * @dev A token Id that will be removed from transfer\n    * @param _tokenId Token Id that will be removed for transfer\n    */\n    function removeTransferable(uint256 _tokenId) external {\n        require(ownerOf(_tokenId) == msg.sender || owner == msg.sender || isController(msg.sender)); //, \"token owner\"\n        _removeTransfer(_tokenId);\n    }\n\n    /**\n    * @dev Internal function to remove transferability of a token Id\n    * @param _tokenId Token Id that will be removed for Transfer\n    */\n    function _removeTransfer(uint256 _tokenId) internal {\n        uint lastTokenIndex = transferableTokens.length;\n        require(lastTokenIndex > 0);\n        // reduce the index by 1 to make it zero-based\n        uint256 tokenIndex = transferableIndexes[_tokenId].sub(1);\n\n        // reorg transferableTokens array\n        lastTokenIndex--;\n        uint256 lastTokenId = transferableTokens[lastTokenIndex];\n\n        // reposition the last item\n        transferableTokens[tokenIndex] = lastTokenId;\n        transferableIndexes[lastTokenId] = tokenIndex.add(1);\n\n        // clear out the last item slot\n        transferableTokens[lastTokenIndex] = 0;\n        transferableTokens.length--;\n    }\n\n    /**\n    * @dev Support merging multiple tokens into one, to increase XP and level-up the target.\n    * @param _mergeTokenIds Array of tokens to be removed and merged into the target\n    * @param _targetTokenId The token whose attributes will be improved by the merge\n    * @param _targetAttributes The new improved attributes for the target token\n    */\n    function mergeTokens(uint256[] _mergeTokenIds, uint256 _targetTokenId, uint256 _targetAttributes) external {\n        address _owner = ownerOf(_targetTokenId);\n        require(_owner == msg.sender || owner == msg.sender || isController(msg.sender)); //, \"token owner\"\n        require(_mergeTokenIds.length > 0); //, \"mergeTokens\"\n        require(!isTransferable(_targetTokenId)); // cannot target a token that is up for sale\n\n\n        // remove merge material tokens\n        for (uint256 index = 0; index < _mergeTokenIds.length; index++) {\n            require(ownerOf(_mergeTokenIds[index]) == _owner); //, \"array\"\n            _burn(_owner, _mergeTokenIds[index]);\n        }\n\n        // update target token\n        uint256 attribs;\n        uint256[] memory compIds;\n        (attribs, compIds) = cbStorage.getAttributes(_targetTokenId);\n        cbStorage.updateAttributes(_targetTokenId, _targetAttributes, compIds);\n    }\n}\n\ncontract OwnableDelegateProxy { }\n\ncontract ProxyRegistry {\n    mapping(address => OwnableDelegateProxy) public proxies;\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000e8ec272d1d55f0c5e9b539c189915f9631cb693c0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002b68747470733a2f2f6170692e63727970746f62656173746965732e636f6d2f6170692f6f70656e7365612f000000000000000000000000000000000000000000"
}