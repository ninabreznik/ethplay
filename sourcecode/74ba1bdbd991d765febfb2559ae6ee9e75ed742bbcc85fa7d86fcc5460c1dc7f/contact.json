{
  "address": "0xad7615b0524849918aee77e6c2285dd7e8468650",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "RoboCalls: Old Token",
  "contractName": "Robocalls",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-12\n*/\n\npragma solidity ^0.4.24;\n\n// ----------------------------------------------------------------------------\n// Symbol      : RCALLS\n// Name        : Robocalls Token\n// Total supply: 240000000000.000000\n// Decimals    : 18\n// ----------------------------------------------------------------------------\n\n\n// ----------------------------------------------------------------------------\n// Safe maths\n// ----------------------------------------------------------------------------\ncontract SafeMath {\n    function safeAdd(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function safeSub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function safeMul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function safeDiv(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n\n// ----------------------------------------------------------------------------\n// Contract function to receive approval and execute function in one call\n//\n// Borrowed from MiniMeToken\n// ----------------------------------------------------------------------------\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n}\n\n\n// ----------------------------------------------------------------------------\n// Owned contract\n// ----------------------------------------------------------------------------\ncontract Owned {\n    address public owner;\n    address public newOwner;\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n}\n\n// ----------------------------------------------------------------------------\n// ERC20 Token, with the addition of symbol, name and decimals and assisted\n// token transfers\n// ----------------------------------------------------------------------------\ncontract Robocalls is ERC20Interface, Owned, SafeMath  {\n    string public symbol;\n    string public  name;\n    uint8  public decimals;\n    uint   public _totalSupply;\n    uint   public startDate;\n    uint   public bonusEnds;\n    uint   public endDate;\n\n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) allowed;\n\n\n    // ------------------------------------------------------------------------\n    // Constructor\n    // ------------------------------------------------------------------------\n    constructor() public {\n        symbol = \"RCALLS\";\n        name = \"Robocalls\";\n        decimals = 18;\n        bonusEnds = now + 4 weeks;\n        endDate = now + 10 weeks;\n        _totalSupply = 240000000000 * 10**uint(decimals);\n        balances[owner] = _totalSupply;\n        emit Transfer(address(0), owner, _totalSupply);\n\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Total supply\n    // ------------------------------------------------------------------------\n    function totalSupply() public constant returns (uint) {\n        return  _totalSupply;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Get the token balance for account `tokenOwner`\n    // ------------------------------------------------------------------------\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n        return balances[tokenOwner];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Transfer the balance from token owner's account to `to` account\n    // - Owner's account must have sufficient balance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transfer(address to, uint tokens) public returns (bool success) {\n        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n        balances[to] = safeAdd(balances[to], tokens);\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n    // from the token owner's account\n    //\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n    // recommends that there are no checks for the approval double-spend attack\n    // as this should be implemented in user interfaces\n    // ------------------------------------------------------------------------\n    function approve(address spender, uint tokens) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Transfer `tokens` from the `from` account to the `to` account\n    //\n    // The calling account must already have sufficient tokens approve(...)-d\n    // for spending from the `from` account and\n    // - From account must have sufficient balance to transfer\n    // - Spender must have sufficient allowance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n        balances[from] = safeSub(balances[from], tokens);\n        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n        balances[to] = safeAdd(balances[to], tokens);\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Returns the amount of tokens approved by the owner that can be\n    // transferred to the spender's account\n    // ------------------------------------------------------------------------\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n    // from the token owner's account. The `spender` contract function\n    // `receiveApproval(...)` is then executed\n    // ------------------------------------------------------------------------\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // CrowdSale Function 1,800,000 RCALLS Tokens per 1 ETH\n    // ------------------------------------------------------------------------\n    function () public payable {\n        require(now >= startDate && now <= endDate);\n        uint tokens;\n        if (now <= bonusEnds) {\n            tokens = msg.value * 2400000;\n        } else {\n            tokens = msg.value * 1800000;\n        }\n        balances[owner] = safeSub(balances[owner], tokens);\n        balances[msg.sender] = safeAdd(balances[msg.sender], tokens);\n        emit Transfer(owner, msg.sender, tokens);\n        owner.transfer(msg.value);\n    }\n\n    // ------------------------------------------------------------------------\n    // Bounty Transfer Function Owner only\n    // ------------------------------------------------------------------------\n\n    function transferBounty(address to, uint tokens) public returns (bool success) {\n        require(msg.sender==owner);\n        balances[owner] = safeSub(balances[owner], tokens);\n        balances[to] = safeAdd(balances[to], tokens);\n        emit Transfer(owner, to, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Owner can transfer out any accidentally sent ERC20 tokens\n    // ------------------------------------------------------------------------\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public returns (bool success) {\n        require(msg.sender==owner);\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060008054600160a060020a031916331790556040805180820190915260068082527f5243414c4c53000000000000000000000000000000000000000000000000000060209092019182526100679160029161013e565b506040805180820190915260098082527f526f626f63616c6c73000000000000000000000000000000000000000000000060209092019182526100ac9160039161013e565b5060048054601260ff199091161790819055426224ea008101600755625c49000160085560ff16600a0a6437e11d600002600581905560008054600160a060020a0390811682526009602090815260408084208590558354815195865290519216937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a36101d9565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061017f57805160ff19168380011785556101ac565b828001600101855582156101ac579182015b828111156101ac578251825591602001919060010190610191565b506101b89291506101bc565b5090565b6101d691905b808211156101b857600081556001016101c2565b90565b610c27806101e86000396000f3006080604052600436106101065763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610217578063095ea7b3146102a15780630b97bc86146102d957806318160ddd1461030057806323b872dd146103155780632f7442bb1461033f578063313ce567146103635780633eaaf86b1461038e57806340c65003146103a357806370a08231146103b85780638da5cb5b146103d957806395d89b411461040a578063a9059cbb1461041f578063c24a0f8b14610443578063cae9ca5114610458578063d4ee1d90146104c1578063dc39d06d146104d6578063dd62ed3e146104fa578063f2fde38b14610521575b6000600654421015801561011c57506008544211155b151561012757600080fd5b600754421161013c575062249f003402610144565b50621b774034025b60008054600160a060020a03168152600960205260409020546101679082610544565b60008054600160a060020a03168152600960205260408082209290925533815220546101939082610559565b336000818152600960209081526040808320949094559054835185815293519293600160a060020a0390911692600080516020610bdc833981519152929181900390910190a360008054604051600160a060020a03909116913480156108fc02929091818181858888f19350505050158015610213573d6000803e3d6000fd5b5050005b34801561022357600080fd5b5061022c61056f565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561026657818101518382015260200161024e565b50505050905090810190601f1680156102935780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102ad57600080fd5b506102c5600160a060020a03600435166024356105fd565b604080519115158252519081900360200190f35b3480156102e557600080fd5b506102ee610663565b60408051918252519081900360200190f35b34801561030c57600080fd5b506102ee610669565b34801561032157600080fd5b506102c5600160a060020a036004358116906024351660443561066f565b34801561034b57600080fd5b506102c5600160a060020a0360043516602435610756565b34801561036f57600080fd5b50610378610810565b6040805160ff9092168252519081900360200190f35b34801561039a57600080fd5b506102ee610819565b3480156103af57600080fd5b506102ee61081f565b3480156103c457600080fd5b506102ee600160a060020a0360043516610825565b3480156103e557600080fd5b506103ee610840565b60408051600160a060020a039092168252519081900360200190f35b34801561041657600080fd5b5061022c61084f565b34801561042b57600080fd5b506102c5600160a060020a03600435166024356108a7565b34801561044f57600080fd5b506102ee610939565b34801561046457600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526102c5948235600160a060020a031694602480359536959460649492019190819084018382808284375094975061093f9650505050505050565b3480156104cd57600080fd5b506103ee610aa0565b3480156104e257600080fd5b506102c5600160a060020a0360043516602435610aaf565b34801561050657600080fd5b506102ee600160a060020a0360043581169060243516610b6a565b34801561052d57600080fd5b50610542600160a060020a0360043516610b95565b005b60008282111561055357600080fd5b50900390565b8181018281101561056957600080fd5b92915050565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105f55780601f106105ca576101008083540402835291602001916105f5565b820191906000526020600020905b8154815290600101906020018083116105d857829003601f168201915b505050505081565b336000818152600a60209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60065481565b60055490565b600160a060020a0383166000908152600960205260408120546106929083610544565b600160a060020a038516600090815260096020908152604080832093909355600a8152828220338352905220546106c99083610544565b600160a060020a038086166000908152600a602090815260408083203384528252808320949094559186168152600990915220546107079083610559565b600160a060020a038085166000818152600960209081526040918290209490945580518681529051919392881692600080516020610bdc83398151915292918290030190a35060019392505050565b60008054600160a060020a0316331461076e57600080fd5b60008054600160a060020a03168152600960205260409020546107919083610544565b60008054600160a060020a03908116825260096020526040808320939093558516815220546107c09083610559565b600160a060020a038085166000818152600960209081526040808320959095559054845187815294519294931692600080516020610bdc833981519152929081900390910190a350600192915050565b60045460ff1681565b60055481565b60075481565b600160a060020a031660009081526009602052604090205490565b600054600160a060020a031681565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156105f55780601f106105ca576101008083540402835291602001916105f5565b336000908152600960205260408120546108c19083610544565b3360009081526009602052604080822092909255600160a060020a038516815220546108ed9083610559565b600160a060020a038416600081815260096020908152604091829020939093558051858152905191923392600080516020610bdc8339815191529281900390910190a350600192915050565b60085481565b336000818152600a60209081526040808320600160a060020a038816808552908352818420879055815187815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a36040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018690523060448401819052608060648501908152865160848601528651600160a060020a038a1695638f4ffcb195948a94938a939192909160a490910190602085019080838360005b83811015610a2f578181015183820152602001610a17565b50505050905090810190601f168015610a5c5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015610a7e57600080fd5b505af1158015610a92573d6000803e3d6000fd5b506001979650505050505050565b600154600160a060020a031681565b60008054600160a060020a03163314610ac757600080fd5b60008054604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810186905290519186169263a9059cbb926044808401936020939083900390910190829087803b158015610b3757600080fd5b505af1158015610b4b573d6000803e3d6000fd5b505050506040513d6020811015610b6157600080fd5b50519392505050565b600160a060020a039182166000908152600a6020908152604080832093909416825291909152205490565b600054600160a060020a03163314610bac57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058209735473264ed418585df08bec88a81c1d23624201ca4064cabdf71ec37b66a2e0029"
}