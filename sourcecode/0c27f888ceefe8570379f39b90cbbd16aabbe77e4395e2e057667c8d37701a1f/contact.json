{
  "address": "0xc77a91bef771a0b62a81ef776bc5071713025dde",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "POPToken",
  "compilerVersion": "v0.4.22+commit.4cb486ee",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-26\n*/\n\npragma solidity ^0.4.13;\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract Pausable is Ownable {\n    using SafeMath for uint256;\n\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n    address public crowdsale;\n\n    /*\n    * @dev Freezing certain number of tokens bought during bonus.\n    */\n    mapping (address => uint256) public frozen;\n    uint public unfreezeTimestamp;\n\n    function Pausable() public {\n        unfreezeTimestamp = now + 60 days; //default 60 days from contract deploy date as a defensive mechanism. Will be updated once the crowdsale starts.\n    }\n\n    function setUnfreezeTimestamp(uint _unfreezeTimestamp) onlyOwner public {\n        require(now < _unfreezeTimestamp);\n        unfreezeTimestamp = _unfreezeTimestamp;\n    }\n\n    function increaseFrozen(address _owner,uint256 _incrementalAmount) public returns (bool)  {\n        require(msg.sender == crowdsale || msg.sender == owner);\n        require(_incrementalAmount>0);\n        frozen[_owner] = frozen[_owner].add(_incrementalAmount);\n        return true;\n    }\n\n    function decreaseFrozen(address _owner,uint256 _incrementalAmount) public returns (bool)  {\n        require(msg.sender == crowdsale || msg.sender == owner);\n        require(_incrementalAmount>0);\n        frozen[_owner] = frozen[_owner].sub(_incrementalAmount);\n        return true;\n    }\n\n    function setCrowdsale(address _crowdsale) onlyOwner public {\n        crowdsale=_crowdsale;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when there are unfrozen tokens.\n     */\n    modifier frozenTransferCheck(address _to, uint256 _value, uint256 balance) {\n        if (now < unfreezeTimestamp){\n            require(_value <= balance.sub(frozen[msg.sender]) );\n        }\n        _;\n    }\n\n    modifier frozenTransferFromCheck(address _from, address _to, uint256 _value, uint256 balance) {\n        if(now < unfreezeTimestamp) {\n            require(_value <= balance.sub(frozen[_from]) );\n        }\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused. [Exception: crowdsale contract]\n     */\n    modifier whenNotPaused() {\n        require(!paused || msg.sender == crowdsale);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() onlyOwner whenNotPaused public {\n        require(msg.sender != address(0));\n        paused = true;\n        Pause();\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() onlyOwner whenPaused public {\n        require(msg.sender != address(0));\n        paused = false;\n        Unpause();\n    }\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n  \n\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public {\n        require(_value <= balances[msg.sender]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n    \n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Burn(burner, _value);\n    }\n\n}\n\ncontract PausableToken is StandardToken, Pausable {\n  using SafeMath for uint256;\n\n  function transfer(address _to, uint256 _value) public whenNotPaused frozenTransferCheck(_to, _value, balances[msg.sender]) returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused frozenTransferFromCheck(_from, _to, _value, balances[_from]) returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\ncontract POPToken is PausableToken {\n\n    string public constant name = \"PopCoin\";\n    string public constant symbol = \"POPCOIN\";\n    uint public constant decimals = 18;\n\n    uint256 public constant INITIAL_SUPPLY = 500000000*(10**decimals); // 500 million x 18 decimals to represent in wei (5000 for testing)\n\n    /**\n     * @dev Contructor that gives msg.sender all of existing tokens.\n     */\n    function POPToken() public {\n        totalSupply = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n        Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n    }\n}",
  "bytecode": "60806040526003805460a060020a60ff021916905534801561002057600080fd5b5060038054600160a060020a03191633600160a060020a031690811790915542624f1a00016006556b019d971e4fe8401e74000000600081815582815260016020908152604080832084905580519384525191927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a36110d2806100ae6000396000f3006080604052600436106101485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461014d578063095ea7b3146101d757806318160ddd1461020f57806323b872dd146102365780632ff2e9dc14610260578063313ce567146102755780633f4ba83a1461028a5780634185fdc5146102a157806342966c68146102c5578063483a20b2146102dd5780635b5416ca146102fe5780635c975abb14610313578063661884631461032857806370a082311461034c5780638456cb591461036d5780638da5cb5b1461038257806395d89b41146103b35780639c1e03a0146103c8578063a9059cbb146103dd578063b65c261114610401578063bfabd75414610419578063d05166501461043d578063d73dd6231461045e578063dd62ed3e14610482578063f2fde38b146104a9575b600080fd5b34801561015957600080fd5b506101626104ca565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561019c578181015183820152602001610184565b50505050905090810190601f1680156101c95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101e357600080fd5b506101fb600160a060020a0360043516602435610501565b604080519115158252519081900360200190f35b34801561021b57600080fd5b50610224610547565b60408051918252519081900360200190f35b34801561024257600080fd5b506101fb600160a060020a036004358116906024351660443561054d565b34801561026c57600080fd5b506102246105f9565b34801561028157600080fd5b50610224610609565b34801561029657600080fd5b5061029f61060e565b005b3480156102ad57600080fd5b506101fb600160a060020a036004351660243561069f565b3480156102d157600080fd5b5061029f600435610730565b3480156102e957600080fd5b5061029f600160a060020a03600435166107ed565b34801561030a57600080fd5b50610224610837565b34801561031f57600080fd5b506101fb61083d565b34801561033457600080fd5b506101fb600160a060020a036004351660243561084d565b34801561035857600080fd5b50610224600160a060020a036004351661088c565b34801561037957600080fd5b5061029f6108a7565b34801561038e57600080fd5b50610397610958565b60408051600160a060020a039092168252519081900360200190f35b3480156103bf57600080fd5b50610162610967565b3480156103d457600080fd5b5061039761099e565b3480156103e957600080fd5b506101fb600160a060020a03600435166024356109ad565b34801561040d57600080fd5b5061029f600435610a53565b34801561042557600080fd5b506101fb600160a060020a0360043516602435610a7f565b34801561044957600080fd5b50610224600160a060020a0360043516610aee565b34801561046a57600080fd5b506101fb600160a060020a0360043516602435610b00565b34801561048e57600080fd5b50610224600160a060020a0360043581169060243516610b3f565b3480156104b557600080fd5b5061029f600160a060020a0360043516610b6a565b60408051808201909152600781527f506f70436f696e00000000000000000000000000000000000000000000000000602082015281565b60035460009060a060020a900460ff16158061052b575060045433600160a060020a039081169116145b151561053657600080fd5b6105408383610c03565b9392505050565b60005481565b60035460009060a060020a900460ff161580610577575060045433600160a060020a039081169116145b151561058257600080fd5b600160a060020a038416600090815260016020526040902054600654859185918591904210156105e257600160a060020a0384166000908152600560205260409020546105d690829063ffffffff610c6d16565b8211156105e257600080fd5b6105ed888888610c7f565b98975050505050505050565b6b019d971e4fe8401e7400000081565b601281565b60035433600160a060020a0390811691161461062957600080fd5b60035460a060020a900460ff16151561064157600080fd5b33600160a060020a0316151561065657600080fd5b6003805474ff0000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b60045460009033600160a060020a03908116911614806106cd575060035433600160a060020a039081169116145b15156106d857600080fd5b600082116106e557600080fd5b600160a060020a03831660009081526005602052604090205461070e908363ffffffff610c6d16565b600160a060020a03841660009081526005602052604090205550600192915050565b600160a060020a03331660009081526001602052604081205482111561075557600080fd5b5033600160a060020a03811660009081526001602052604090205461077a9083610c6d565b600160a060020a038216600090815260016020526040812091909155546107a7908363ffffffff610c6d16565b600055604080518381529051600160a060020a038316917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a25050565b60035433600160a060020a0390811691161461080857600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60065481565b60035460a060020a900460ff1681565b60035460009060a060020a900460ff161580610877575060045433600160a060020a039081169116145b151561088257600080fd5b6105408383610e01565b600160a060020a031660009081526001602052604090205490565b60035433600160a060020a039081169116146108c257600080fd5b60035460a060020a900460ff1615806108e9575060045433600160a060020a039081169116145b15156108f457600080fd5b33600160a060020a0316151561090957600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600354600160a060020a031681565b60408051808201909152600781527f504f50434f494e00000000000000000000000000000000000000000000000000602082015281565b600454600160a060020a031681565b60035460009060a060020a900460ff1615806109d7575060045433600160a060020a039081169116145b15156109e257600080fd5b600160a060020a03331660009081526001602052604090205460065484918491421015610a3f57600160a060020a033316600090815260056020526040902054610a3390829063ffffffff610c6d16565b821115610a3f57600080fd5b610a498686610efa565b9695505050505050565b60035433600160a060020a03908116911614610a6e57600080fd5b428111610a7a57600080fd5b600655565b60045460009033600160a060020a0390811691161480610aad575060035433600160a060020a039081169116145b1515610ab857600080fd5b60008211610ac557600080fd5b600160a060020a03831660009081526005602052604090205461070e908363ffffffff610ff516565b60056020526000908152604090205481565b60035460009060a060020a900460ff161580610b2a575060045433600160a060020a039081169116145b1515610b3557600080fd5b6105408383611004565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a03908116911614610b8557600080fd5b600160a060020a0381161515610b9a57600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a03338116600081815260026020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b600082821115610c7957fe5b50900390565b6000600160a060020a0383161515610c9657600080fd5b600160a060020a038416600090815260016020526040902054821115610cbb57600080fd5b600160a060020a0380851660009081526002602090815260408083203390941683529290522054821115610cee57600080fd5b600160a060020a038416600090815260016020526040902054610d17908363ffffffff610c6d16565b600160a060020a038086166000908152600160205260408082209390935590851681522054610d4c908363ffffffff610ff516565b600160a060020a03808516600090815260016020908152604080832094909455878316825260028152838220339093168252919091522054610d94908363ffffffff610c6d16565b600160a060020a038086166000818152600260209081526040808320338616845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b600160a060020a03338116600090815260026020908152604080832093861683529290529081205480831115610e5e57600160a060020a033381166000908152600260209081526040808320938816835292905290812055610e95565b610e6e818463ffffffff610c6d16565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529482529182902054825190815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a35060019392505050565b6000600160a060020a0383161515610f1157600080fd5b600160a060020a033316600090815260016020526040902054821115610f3657600080fd5b600160a060020a033316600090815260016020526040902054610f5f908363ffffffff610c6d16565b600160a060020a033381166000908152600160205260408082209390935590851681522054610f94908363ffffffff610ff516565b600160a060020a038085166000818152600160209081526040918290209490945580518681529051919333909316927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a350600192915050565b60008282018381101561054057fe5b600160a060020a03338116600090815260026020908152604080832093861683529290529081205461103c908363ffffffff610ff516565b600160a060020a0333811660008181526002602090815260408083209489168084529482529182902085905581519485529051929391927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3506001929150505600a165627a7a72305820204f2801a2f6fd24450d84f6db3bf2be34f98b6effd2ab3ac3fdef747e96c08f0029"
}