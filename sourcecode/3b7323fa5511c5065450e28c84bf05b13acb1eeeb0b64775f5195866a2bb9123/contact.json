{
  "address": "0x3304a44aa16ec40fb53a5b8f086f230c237f683d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "mall",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-27\n*/\n\n/**\n * Copyright (C) 2017-2018 Hashfuture Inc. All rights reserved.\n */\n\n\npragma solidity ^0.4.19;\n\ncontract owned {\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\ncontract mall is owned {\n\n    /* Struct for one commodity */\n    struct Commodity {\n        uint commodityId;            // Unique id for a commodity\n        uint seedBlock;         // Block number whose hash as random seed\n        string MD5;         // MD5 of full content\n    }\n\n    uint commodityNum;\n    /* This notes all commodities and a map from commodityId to commodityIdx */\n    mapping(uint => Commodity) commodities;\n    mapping(uint => uint) indexMap;\n\n    /** constructor */\n    constructor() public {\n        commodityNum = 1;\n    }\n\n    /**\n     * Initialize a new Commodity\n     */\n    function newCommodity(uint commodityId, uint seedBlock, string MD5) onlyOwner public returns (uint commodityIndex) {\n        require(indexMap[commodityId] == 0);             // commodityId should be unique\n        commodityIndex = commodityNum++;\n        indexMap[commodityId] = commodityIndex;\n        commodities[commodityIndex] = Commodity(commodityId, seedBlock, MD5);\n    }\n\n    /**\n     * Get commodity info by index\n     * Only can be called by newOwner\n     */\n    function getCommodityInfoByIndex(uint commodityIndex) onlyOwner public view returns (uint commodityId, uint seedBlock, string MD5) {\n        require(commodityIndex < commodityNum);               // should exist\n        require(commodityIndex >= 1);                    // should exist\n        commodityId = commodities[commodityIndex].commodityId;\n        seedBlock = commodities[commodityIndex].seedBlock;\n        MD5 = commodities[commodityIndex].MD5;\n    }\n\n    /**\n     * Get commodity info by commodity id\n     * Only can be called by newOwner\n     */\n    function getCommodityInfoById(uint commodityId) public view returns (uint commodityIndex, uint seedBlock, string MD5) {\n        commodityIndex = indexMap[commodityId];\n        require(commodityIndex < commodityNum);              // should exist\n        require(commodityIndex >= 1);                   // should exist\n        seedBlock = commodities[commodityIndex].seedBlock;\n        MD5 = commodities[commodityIndex].MD5;\n    }\n\n    /**\n     * Get the number of commodities\n     */\n    function getCommodityNum() onlyOwner public view returns (uint num) {\n        num = commodityNum - 1;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"commodityIndex\",\"type\":\"uint256\"}],\"name\":\"getCommodityInfoByIndex\",\"outputs\":[{\"name\":\"commodityId\",\"type\":\"uint256\"},{\"name\":\"seedBlock\",\"type\":\"uint256\"},{\"name\":\"MD5\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCommodityNum\",\"outputs\":[{\"name\":\"num\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"commodityId\",\"type\":\"uint256\"},{\"name\":\"seedBlock\",\"type\":\"uint256\"},{\"name\":\"MD5\",\"type\":\"string\"}],\"name\":\"newCommodity\",\"outputs\":[{\"name\":\"commodityIndex\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"commodityId\",\"type\":\"uint256\"}],\"name\":\"getCommodityInfoById\",\"outputs\":[{\"name\":\"commodityIndex\",\"type\":\"uint256\"},{\"name\":\"seedBlock\",\"type\":\"uint256\"},{\"name\":\"MD5\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]",
  "bytecode": "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600180819055506108c0806100676000396000f300608060405260043610610078576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680638da5cb5b1461007d578063adaa650b146100d4578063db5753ac14610188578063e12688f4146101b3578063f2fde38b14610244578063f3818c2914610287575b600080fd5b34801561008957600080fd5b5061009261033b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156100e057600080fd5b506100ff60048036038101908080359060200190929190505050610360565b6040518084815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561014b578082015181840152602081019050610130565b50505050905090810190601f1680156101785780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561019457600080fd5b5061019d6104ca565b6040518082815260200191505060405180910390f35b3480156101bf57600080fd5b5061022e6004803603810190808035906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610531565b6040518082815260200191505060405180910390f35b34801561025057600080fd5b50610285600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610645565b005b34801561029357600080fd5b506102b2600480360381019080803590602001909291905050506106e3565b6040518084815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156102fe5780820151818401526020810190506102e3565b50505050905090810190601f16801561032b5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060606000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156103c057600080fd5b600154841015156103d057600080fd5b600184101515156103e057600080fd5b6002600085815260200190815260200160002060000154925060026000858152602001908152602001600020600101549150600260008581526020019081526020016000206002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104bc5780601f10610491576101008083540402835291602001916104bc565b820191906000526020600020905b81548152906001019060200180831161049f57829003601f168201915b505050505090509193909250565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561052757600080fd5b6001805403905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561058e57600080fd5b600060036000868152602001908152602001600020541415156105b057600080fd5b6001600081548092919060010191905055905080600360008681526020019081526020016000208190555060606040519081016040528085815260200184815260200183815250600260008381526020019081526020016000206000820151816000015560208201518160010155604082015181600201908051906020019061063a9291906107ef565b509050509392505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156106a057600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806060600360008581526020019081526020016000205492506001548310151561070e57600080fd5b6001831015151561071e57600080fd5b60026000848152602001908152602001600020600101549150600260008481526020019081526020016000206002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107e15780601f106107b6576101008083540402835291602001916107e1565b820191906000526020600020905b8154815290600101906020018083116107c457829003601f168201915b505050505090509193909250565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061083057805160ff191683800117855561085e565b8280016001018555821561085e579182015b8281111561085d578251825591602001919060010190610842565b5b50905061086b919061086f565b5090565b61089191905b8082111561088d576000816000905550600101610875565b5090565b905600a165627a7a723058208c23858a138c200590905c11d13438eeb0a39d9d2b44cdd830aae2a2fb715d480029"
}