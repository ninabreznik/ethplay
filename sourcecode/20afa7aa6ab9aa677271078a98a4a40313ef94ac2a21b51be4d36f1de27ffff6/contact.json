{
  "address": "0xfb71ab03d371c43f5e2f3747e5f790370399e778",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "OREO",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-02\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization\n *      control functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the\n     *      sender account.\n     */\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) onlyOwner public {\n        require(newOwner != address(0));\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\n\n\n/**\n * @title ERC223\n * @dev ERC223 contract interface with ERC20 functions and events\n *      Fully backward compatible with ERC20\n *      Recommended implementation used at https://github.com/Dexaran/ERC223-token-standard/tree/Recommended\n */\ncontract ERC223 {\n    uint public totalSupply;\n\n    // ERC223 and ERC20 functions and events\n    function balanceOf(address who) public view returns (uint);\n    function totalSupply() public view returns (uint256 _supply);\n    function transfer(address to, uint value) public returns (bool ok);\n    function transfer(address to, uint value, bytes data) public returns (bool ok);\n    function transfer(address to, uint value, bytes data, string customFallback) public returns (bool ok);\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n\n    // ERC223 functions\n    function name() public view returns (string _name);\n    function symbol() public view returns (string _symbol);\n    function decimals() public view returns (uint8 _decimals);\n\n    // ERC20 functions and events\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\n\n\n/**\n * @title ContractReceiver\n * @dev Contract that is working with ERC223 tokens\n */\n contract ContractReceiver {\n\n    struct TKN {\n        address sender;\n        uint value;\n        bytes data;\n        bytes4 sig;\n    }\n\n    function tokenFallback(address _from, uint _value, bytes _data) public pure {\n        TKN memory tkn;\n        tkn.sender = _from;\n        tkn.value = _value;\n        tkn.data = _data;\n        uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n        tkn.sig = bytes4(u);\n\n        /*\n         * tkn variable is analogue of msg variable of Ether transaction\n         * tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\n         * tkn.value the number of tokens that were sent   (analogue of msg.value)\n         * tkn.data is data of token transaction   (analogue of msg.data)\n         * tkn.sig is 4 bytes signature of function if data of token transaction is a function execution\n         */\n    }\n}\n\n\n\n\n/**\n * @title OREOCOIN\n * @author ANWAR\n * @dev OREOCOIN is an ERC223 Token with ERC20 functions and events\n *      Fully backward compatible with ERC20\n */\ncontract OREO is ERC223, Ownable {\n    using SafeMath for uint256;\n\n    string public name = \"OREOCOIN\";\n    string public symbol = \"OREO\";\n    string public constant AAcontributors = \"ANWAR\";\n    uint8 public decimals = 18;\n    uint256 public totalSupply = 1e9 * 1e18;\n    uint256 public distributeAmount = 0;\n    bool public mintingFinished = false;\n\n    address public founder = 0x6a240e115f04E8d4868DEB47951d95cA4D0Bd968;\n    address public developingFund = 0xdd1ab7b025961ddb0e9313d04933fa67f962293b;\n    address public activityFunds = 0x5998726b57f28da32414274764fb7bb32cc318cb;\n    address public lockedFundsForthefuture = 0x6a69563f627fd4ae48172f934c430542696b5b92;\n\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping (address => uint256)) public allowance;\n    mapping (address => bool) public frozenAccount;\n    mapping (address => uint256) public unlockUnixTime;\n\n    event FrozenFunds(address indexed target, bool frozen);\n    event LockedFunds(address indexed target, uint256 locked);\n    event Burn(address indexed from, uint256 amount);\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n\n\n    /**\n     * @dev Constructor is called only once and can not be called again\n     */\n    function OREO() public {\n        owner = activityFunds;\n\n        balanceOf[founder] = totalSupply.mul(25).div(100);\n        balanceOf[developingFund] = totalSupply.mul(55).div(100);\n        balanceOf[activityFunds] = totalSupply.mul(10).div(100);\n        balanceOf[lockedFundsForthefuture] = totalSupply.mul(10).div(100);\n    }\n\n\n    function name() public view returns (string _name) {\n        return name;\n    }\n\n    function symbol() public view returns (string _symbol) {\n        return symbol;\n    }\n\n    function decimals() public view returns (uint8 _decimals) {\n        return decimals;\n    }\n\n    function totalSupply() public view returns (uint256 _totalSupply) {\n        return totalSupply;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balanceOf[_owner];\n    }\n\n\n    /**\n     * @dev Prevent targets from sending or receiving tokens\n     * @param targets Addresses to be frozen\n     * @param isFrozen either to freeze it or not\n     */\n    function freezeAccounts(address[] targets, bool isFrozen) onlyOwner public {\n        require(targets.length > 0);\n\n        for (uint j = 0; j < targets.length; j++) {\n            require(targets[j] != 0x0);\n            frozenAccount[targets[j]] = isFrozen;\n            FrozenFunds(targets[j], isFrozen);\n        }\n    }\n\n    /**\n     * @dev Prevent targets from sending or receiving tokens by setting Unix times\n     * @param targets Addresses to be locked funds\n     * @param unixTimes Unix times when locking up will be finished\n     */\n    function lockupAccounts(address[] targets, uint[] unixTimes) onlyOwner public {\n        require(targets.length > 0\n                && targets.length == unixTimes.length);\n\n        for(uint j = 0; j < targets.length; j++){\n            require(unlockUnixTime[targets[j]] < unixTimes[j]);\n            unlockUnixTime[targets[j]] = unixTimes[j];\n            LockedFunds(targets[j], unixTimes[j]);\n        }\n    }\n\n\n    /**\n     * @dev Function that is called when a user or another contract wants to transfer funds\n     */\n    function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success) {\n        require(_value > 0\n                && frozenAccount[msg.sender] == false\n                && frozenAccount[_to] == false\n                && now > unlockUnixTime[msg.sender]\n                && now > unlockUnixTime[_to]);\n\n        if (isContract(_to)) {\n            require(balanceOf[msg.sender] >= _value);\n            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n            balanceOf[_to] = balanceOf[_to].add(_value);\n            assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\n            Transfer(msg.sender, _to, _value, _data);\n            Transfer(msg.sender, _to, _value);\n            return true;\n        } else {\n            return transferToAddress(_to, _value, _data);\n        }\n    }\n\n    function transfer(address _to, uint _value, bytes _data) public  returns (bool success) {\n        require(_value > 0\n                && frozenAccount[msg.sender] == false\n                && frozenAccount[_to] == false\n                && now > unlockUnixTime[msg.sender]\n                && now > unlockUnixTime[_to]);\n\n        if (isContract(_to)) {\n            return transferToContract(_to, _value, _data);\n        } else {\n            return transferToAddress(_to, _value, _data);\n        }\n    }\n\n    /**\n     * @dev Standard function transfer similar to ERC20 transfer with no _data\n     *      Added due to backwards compatibility reasons\n     */\n    function transfer(address _to, uint _value) public returns (bool success) {\n        require(_value > 0\n                && frozenAccount[msg.sender] == false\n                && frozenAccount[_to] == false\n                && now > unlockUnixTime[msg.sender]\n                && now > unlockUnixTime[_to]);\n\n        bytes memory empty;\n        if (isContract(_to)) {\n            return transferToContract(_to, _value, empty);\n        } else {\n            return transferToAddress(_to, _value, empty);\n        }\n    }\n\n    // assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n    function isContract(address _addr) private view returns (bool is_contract) {\n        uint length;\n        assembly {\n            //retrieve the size of the code on target address, this needs assembly\n            length := extcodesize(_addr)\n        }\n        return (length > 0);\n    }\n\n    // function that is called when transaction target is an address\n    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n        balanceOf[_to] = balanceOf[_to].add(_value);\n        Transfer(msg.sender, _to, _value, _data);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    // function that is called when transaction target is a contract\n    function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n        balanceOf[_to] = balanceOf[_to].add(_value);\n        ContractReceiver receiver = ContractReceiver(_to);\n        receiver.tokenFallback(msg.sender, _value, _data);\n        Transfer(msg.sender, _to, _value, _data);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n\n\n    /**\n     * @dev Transfer tokens from one address to another\n     *      Added due to backwards compatibility with ERC20\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_to != address(0)\n                && _value > 0\n                && balanceOf[_from] >= _value\n                && allowance[_from][msg.sender] >= _value\n                && frozenAccount[_from] == false\n                && frozenAccount[_to] == false\n                && now > unlockUnixTime[_from]\n                && now > unlockUnixTime[_to]);\n\n        balanceOf[_from] = balanceOf[_from].sub(_value);\n        balanceOf[_to] = balanceOf[_to].add(_value);\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Allows _spender to spend no more than _value tokens in your behalf\n     *      Added due to backwards compatibility with ERC20\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender\n     *      Added due to backwards compatibility with ERC20\n     * @param _owner address The address which owns the funds\n     * @param _spender address The address which will spend the funds\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowance[_owner][_spender];\n    }\n\n\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _from The address that will burn the tokens.\n     * @param _unitAmount The amount of token to be burned.\n     */\n    function burn(address _from, uint256 _unitAmount) onlyOwner public {\n        require(_unitAmount > 0\n                && balanceOf[_from] >= _unitAmount);\n\n        balanceOf[_from] = balanceOf[_from].sub(_unitAmount);\n        totalSupply = totalSupply.sub(_unitAmount);\n        Burn(_from, _unitAmount);\n    }\n\n\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param _to The address that will receive the minted tokens.\n     * @param _unitAmount The amount of tokens to mint.\n     */\n    function mint(address _to, uint256 _unitAmount) onlyOwner canMint public returns (bool) {\n        require(_unitAmount > 0);\n\n        totalSupply = totalSupply.add(_unitAmount);\n        balanceOf[_to] = balanceOf[_to].add(_unitAmount);\n        Mint(_to, _unitAmount);\n        Transfer(address(0), _to, _unitAmount);\n        return true;\n    }\n\n    /**\n     * @dev Function to stop minting new tokens.\n     */\n    function finishMinting() onlyOwner canMint public returns (bool) {\n        mintingFinished = true;\n        MintFinished();\n        return true;\n    }\n\n\n\n    /**\n     * @dev Function to distribute tokens to the list of addresses by the provided amount\n     */\n    function distributeAirdrop(address[] addresses, uint256 amount) public returns (bool) {\n        require(amount > 0\n                && addresses.length > 0\n                && frozenAccount[msg.sender] == false\n                && now > unlockUnixTime[msg.sender]);\n\n        amount = amount.mul(1e8);\n        uint256 totalAmount = amount.mul(addresses.length);\n        require(balanceOf[msg.sender] >= totalAmount);\n\n        for (uint j = 0; j < addresses.length; j++) {\n            require(addresses[j] != 0x0\n                    && frozenAccount[addresses[j]] == false\n                    && now > unlockUnixTime[addresses[j]]);\n\n            balanceOf[addresses[j]] = balanceOf[addresses[j]].add(amount);\n            Transfer(msg.sender, addresses[j], amount);\n        }\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(totalAmount);\n        return true;\n    }\n\n    function distributeAirdrop(address[] addresses, uint[] amounts) public returns (bool) {\n        require(addresses.length > 0\n                && addresses.length == amounts.length\n                && frozenAccount[msg.sender] == false\n                && now > unlockUnixTime[msg.sender]);\n\n        uint256 totalAmount = 0;\n\n        for(uint j = 0; j < addresses.length; j++){\n            require(amounts[j] > 0\n                    && addresses[j] != 0x0\n                    && frozenAccount[addresses[j]] == false\n                    && now > unlockUnixTime[addresses[j]]);\n\n            amounts[j] = amounts[j].mul(1e8);\n            totalAmount = totalAmount.add(amounts[j]);\n        }\n        require(balanceOf[msg.sender] >= totalAmount);\n\n        for (j = 0; j < addresses.length; j++) {\n            balanceOf[addresses[j]] = balanceOf[addresses[j]].add(amounts[j]);\n            Transfer(msg.sender, addresses[j], amounts[j]);\n        }\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(totalAmount);\n        return true;\n    }\n\n    /**\n     * @dev Function to collect tokens from the list of addresses\n     */\n    function collectTokens(address[] addresses, uint[] amounts) onlyOwner public returns (bool) {\n        require(addresses.length > 0\n                && addresses.length == amounts.length);\n\n        uint256 totalAmount = 0;\n\n        for (uint j = 0; j < addresses.length; j++) {\n            require(amounts[j] > 0\n                    && addresses[j] != 0x0\n                    && frozenAccount[addresses[j]] == false\n                    && now > unlockUnixTime[addresses[j]]);\n\n            amounts[j] = amounts[j].mul(1e8);\n            require(balanceOf[addresses[j]] >= amounts[j]);\n            balanceOf[addresses[j]] = balanceOf[addresses[j]].sub(amounts[j]);\n            totalAmount = totalAmount.add(amounts[j]);\n            Transfer(addresses[j], msg.sender, amounts[j]);\n        }\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(totalAmount);\n        return true;\n    }\n\n\n    function setDistributeAmount(uint256 _unitAmount) onlyOwner public {\n        distributeAmount = _unitAmount;\n    }\n\n    /**\n     * @dev Function to distribute tokens to the msg.sender automatically\n     *      If distributeAmount is 0, this function doesn't work\n     */\n    function autoDistribute() payable public {\n        require(distributeAmount > 0\n                && balanceOf[activityFunds] >= distributeAmount\n                && frozenAccount[msg.sender] == false\n                && now > unlockUnixTime[msg.sender]);\n        if(msg.value > 0) activityFunds.transfer(msg.value);\n\n        balanceOf[activityFunds] = balanceOf[activityFunds].sub(distributeAmount);\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(distributeAmount);\n        Transfer(activityFunds, msg.sender, distributeAmount);\n    }\n\n    /**\n     * @dev fallback function\n     */\n    function() payable public {\n        autoDistribute();\n     }\n\n}",
  "bytecode": "60c0604052600860808190527f4f52454f434f494e00000000000000000000000000000000000000000000000060a0908152620000409160029190620002e1565b506040805180820190915260048082527f4f52454f0000000000000000000000000000000000000000000000000000000060209092019182526200008791600391620002e1565b506004805460ff191660121790556b033b2e3c9fd0803ce8000000600555600060065560078054746a240e115f04e8d4868deb47951d95ca4d0bd96800600160a860020a031990911617905560088054600160a060020a031990811673dd1ab7b025961ddb0e9313d04933fa67f962293b17909155600980548216735998726b57f28da32414274764fb7bb32cc318cb179055600a8054909116736a69563f627fd4ae48172f934c430542696b5b921790553480156200014657600080fd5b5060018054600954600160a060020a031633600160a060020a031992831617909116179055600554620001a690606490620001919060196401000000006200028f8102620020481704565b906401000000006200241a620002c982021704565b6007546101009004600160a060020a03166000908152600b6020526040902055600554620001ec90606490620001919060376401000000006200028f8102620020481704565b600854600160a060020a03166000908152600b60205260409020556005546200022d906064906200019190600a640100000000620020486200028f82021704565b600954600160a060020a03166000908152600b60205260409020556005546200026e906064906200019190600a640100000000620020486200028f82021704565b600a54600160a060020a03166000908152600b602052604090205562000386565b600080831515620002a45760009150620002c2565b50828202828482811515620002b557fe5b0414620002be57fe5b8091505b5092915050565b6000808284811515620002d857fe5b04949350505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200032457805160ff191683800117855562000354565b8280016001018555821562000354579182015b828111156200035457825182559160200191906001019062000337565b506200036292915062000366565b5090565b6200038391905b808211156200036257600081556001016200036d565b90565b61247d80620003966000396000f30060806040526004361061017c5763ffffffff60e060020a60003504166305d2035b811461018657806306fdde03146101af578063095ea7b31461023957806318160ddd1461025d57806323b872dd14610284578063313ce567146102ae57806340c10f19146102d95780634537b7de146102fd5780634d853ee51461032e5780634f25eced146103435780635ab892481461035857806364ddc6051461036d57806370a08231146103fb5780637d64bcb41461041c57806385a156af146104315780638da5cb5b14610446578063945946251461045b57806395d89b41146104b25780639dc29fac146104c7578063a245b774146104eb578063a8f11eb91461017c578063a9059cbb14610500578063b414d4b614610524578063be45fd6214610545578063c341b9f6146105ae578063cbbe974b14610607578063d39b1d4814610628578063dd62ed3e14610640578063dd92459414610667578063f0dc4171146106f5578063f2fde38b14610783578063f6368f8a146107a4575b61018461084b565b005b34801561019257600080fd5b5061019b6109af565b604080519115158252519081900360200190f35b3480156101bb57600080fd5b506101c46109b8565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101fe5781810151838201526020016101e6565b50505050905090810190601f16801561022b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561024557600080fd5b5061019b600160a060020a0360043516602435610a4b565b34801561026957600080fd5b50610272610ab1565b60408051918252519081900360200190f35b34801561029057600080fd5b5061019b600160a060020a0360043581169060243516604435610ab7565b3480156102ba57600080fd5b506102c3610cbb565b6040805160ff9092168252519081900360200190f35b3480156102e557600080fd5b5061019b600160a060020a0360043516602435610cc4565b34801561030957600080fd5b50610312610dc4565b60408051600160a060020a039092168252519081900360200190f35b34801561033a57600080fd5b50610312610dd3565b34801561034f57600080fd5b50610272610de7565b34801561036457600080fd5b506101c4610ded565b34801561037957600080fd5b506040805160206004803580820135838102808601850190965280855261018495369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750610e249650505050505050565b34801561040757600080fd5b50610272600160a060020a0360043516610f88565b34801561042857600080fd5b5061019b610fa3565b34801561043d57600080fd5b50610312611009565b34801561045257600080fd5b50610312611018565b34801561046757600080fd5b506040805160206004803580820135838102808601850190965280855261019b9536959394602494938501929182918501908490808284375094975050933594506110279350505050565b3480156104be57600080fd5b506101c4611298565b3480156104d357600080fd5b50610184600160a060020a03600435166024356112f9565b3480156104f757600080fd5b506103126113de565b34801561050c57600080fd5b5061019b600160a060020a03600435166024356113ed565b34801561053057600080fd5b5061019b600160a060020a03600435166114b0565b34801561055157600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261019b948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506114c59650505050505050565b3480156105ba57600080fd5b50604080516020600480358082013583810280860185019096528085526101849536959394602494938501929182918501908490808284375094975050505091351515925061157e915050565b34801561061357600080fd5b50610272600160a060020a0360043516611688565b34801561063457600080fd5b5061018460043561169a565b34801561064c57600080fd5b50610272600160a060020a03600435811690602435166116b6565b34801561067357600080fd5b506040805160206004803580820135838102808601850190965280855261019b95369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506116e19650505050505050565b34801561070157600080fd5b506040805160206004803580820135838102808601850190965280855261019b95369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506119949650505050505050565b34801561078f57600080fd5b50610184600160a060020a0360043516611c74565b3480156107b057600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261019b948235600160a060020a031694602480359536959460649492019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750611d099650505050505050565b60006006541180156108795750600654600954600160a060020a03166000908152600b602052604090205410155b80156108955750336000908152600d602052604090205460ff16155b80156108af5750336000908152600e602052604090205442115b15156108ba57600080fd5b60003411156108fe57600954604051600160a060020a03909116903480156108fc02916000818181858888f193505050501580156108fc573d6000803e3d6000fd5b505b600654600954600160a060020a03166000908152600b602052604090205461092b9163ffffffff61202716565b600954600160a060020a03166000908152600b602052604080822092909255600654338252919020546109639163ffffffff61203916565b336000818152600b602090815260409182902093909355600954600654825190815291519293600160a060020a03909116926000805160206124328339815191529281900390910190a3565b60075460ff1681565b60028054604080516020601f6000196101006001871615020190941685900493840181900481028201810190925282815260609390929091830182828015610a415780601f10610a1657610100808354040283529160200191610a41565b820191906000526020600020905b815481529060010190602001808311610a2457829003601f168201915b5050505050905090565b336000818152600c60209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60055490565b6000600160a060020a03831615801590610ad15750600082115b8015610af55750600160a060020a0384166000908152600b60205260409020548211155b8015610b245750600160a060020a0384166000908152600c602090815260408083203384529091529020548211155b8015610b495750600160a060020a0384166000908152600d602052604090205460ff16155b8015610b6e5750600160a060020a0383166000908152600d602052604090205460ff16155b8015610b915750600160a060020a0384166000908152600e602052604090205442115b8015610bb45750600160a060020a0383166000908152600e602052604090205442115b1515610bbf57600080fd5b600160a060020a0384166000908152600b6020526040902054610be8908363ffffffff61202716565b600160a060020a038086166000908152600b60205260408082209390935590851681522054610c1d908363ffffffff61203916565b600160a060020a038085166000908152600b60209081526040808320949094559187168152600c82528281203382529091522054610c61908363ffffffff61202716565b600160a060020a038086166000818152600c602090815260408083203384528252918290209490945580518681529051928716939192600080516020612432833981519152929181900390910190a35060015b9392505050565b60045460ff1690565b600154600090600160a060020a03163314610cde57600080fd5b60075460ff1615610cee57600080fd5b60008211610cfb57600080fd5b600554610d0e908363ffffffff61203916565b600555600160a060020a0383166000908152600b6020526040902054610d3a908363ffffffff61203916565b600160a060020a0384166000818152600b6020908152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000916000805160206124328339815191529181900360200190a350600192915050565b600854600160a060020a031681565b6007546101009004600160a060020a031681565b60065481565b60408051808201909152600581527f414e574152000000000000000000000000000000000000000000000000000000602082015281565b600154600090600160a060020a03163314610e3e57600080fd5b60008351118015610e50575081518351145b1515610e5b57600080fd5b5060005b8251811015610f83578181815181101515610e7657fe5b90602001906020020151600e60008584815181101515610e9257fe5b6020908102909101810151600160a060020a031682528101919091526040016000205410610ebf57600080fd5b8181815181101515610ecd57fe5b90602001906020020151600e60008584815181101515610ee957fe5b6020908102909101810151600160a060020a03168252810191909152604001600020558251839082908110610f1a57fe5b90602001906020020151600160a060020a03167f1bd6fb9fa2c39ce5d0d2afa1eaba998963eb5f553fd862c94f131aa9e35c15778383815181101515610f5c57fe5b906020019060200201516040518082815260200191505060405180910390a2600101610e5f565b505050565b600160a060020a03166000908152600b602052604090205490565b600154600090600160a060020a03163314610fbd57600080fd5b60075460ff1615610fcd57600080fd5b6007805460ff191660011790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600954600160a060020a031681565b600154600160a060020a031681565b6000806000808411801561103c575060008551115b80156110585750336000908152600d602052604090205460ff16155b80156110725750336000908152600e602052604090205442115b151561107d57600080fd5b611091846305f5e10063ffffffff61204816565b93506110a785518561204890919063ffffffff16565b336000908152600b60205260409020549092508211156110c657600080fd5b5060005b845181101561125d5784818151811015156110e157fe5b90602001906020020151600160a060020a03166000141580156111395750600d6000868381518110151561111157fe5b6020908102909101810151600160a060020a031682528101919091526040016000205460ff16155b80156111805750600e6000868381518110151561115257fe5b90602001906020020151600160a060020a0316600160a060020a031681526020019081526020016000205442115b151561118b57600080fd5b6111d084600b600088858151811015156111a157fe5b6020908102909101810151600160a060020a03168252810191909152604001600020549063ffffffff61203916565b600b600087848151811015156111e257fe5b6020908102909101810151600160a060020a0316825281019190915260400160002055845185908290811061121357fe5b90602001906020020151600160a060020a031633600160a060020a0316600080516020612432833981519152866040518082815260200191505060405180910390a36001016110ca565b336000908152600b602052604090205461127d908363ffffffff61202716565b336000908152600b6020526040902055506001949350505050565b60038054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610a415780601f10610a1657610100808354040283529160200191610a41565b600154600160a060020a0316331461131057600080fd5b6000811180156113385750600160a060020a0382166000908152600b60205260409020548111155b151561134357600080fd5b600160a060020a0382166000908152600b602052604090205461136c908263ffffffff61202716565b600160a060020a0383166000908152600b6020526040902055600554611398908263ffffffff61202716565b600555604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a25050565b600a54600160a060020a031681565b600060606000831180156114115750336000908152600d602052604090205460ff16155b80156114365750600160a060020a0384166000908152600d602052604090205460ff16155b80156114505750336000908152600e602052604090205442115b80156114735750600160a060020a0384166000908152600e602052604090205442115b151561147e57600080fd5b61148784612073565b1561149e5761149784848361207b565b91506114a9565b6114978484836122bf565b5092915050565b600d6020526000908152604090205460ff1681565b600080831180156114e65750336000908152600d602052604090205460ff16155b801561150b5750600160a060020a0384166000908152600d602052604090205460ff16155b80156115255750336000908152600e602052604090205442115b80156115485750600160a060020a0384166000908152600e602052604090205442115b151561155357600080fd5b61155c84612073565b156115735761156c84848461207b565b9050610cb4565b61156c8484846122bf565b600154600090600160a060020a0316331461159857600080fd5b82516000106115a657600080fd5b5060005b8251811015610f835782818151811015156115c157fe5b60209081029091010151600160a060020a031615156115df57600080fd5b81600d600085848151811015156115f257fe5b602090810291909101810151600160a060020a03168252810191909152604001600020805460ff1916911515919091179055825183908290811061163257fe5b90602001906020020151600160a060020a03167f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a583604051808215151515815260200191505060405180910390a26001016115aa565b600e6020526000908152604090205481565b600154600160a060020a031633146116b157600080fd5b600655565b600160a060020a039182166000908152600c6020908152604080832093909416825291909152205490565b60008060008085511180156116f7575083518551145b80156117135750336000908152600d602052604090205460ff16155b801561172d5750336000908152600e602052604090205442115b151561173857600080fd5b5060009050805b845181101561189a576000848281518110151561175857fe5b906020019060200201511180156117905750848181518110151561177857fe5b90602001906020020151600160a060020a0316600014155b80156117d15750600d600086838151811015156117a957fe5b6020908102909101810151600160a060020a031682528101919091526040016000205460ff16155b80156118185750600e600086838151811015156117ea57fe5b90602001906020020151600160a060020a0316600160a060020a031681526020019081526020016000205442115b151561182357600080fd5b61184f6305f5e100858381518110151561183957fe5b602090810290910101519063ffffffff61204816565b848281518110151561185d57fe5b6020908102909101015283516118909085908390811061187957fe5b60209081029091010151839063ffffffff61203916565b915060010161173f565b336000908152600b60205260409020548211156118b657600080fd5b5060005b845181101561125d576118f084828151811015156118d457fe5b90602001906020020151600b600088858151811015156111a157fe5b600b6000878481518110151561190257fe5b6020908102909101810151600160a060020a0316825281019190915260400160002055845185908290811061193357fe5b90602001906020020151600160a060020a031633600160a060020a0316600080516020612432833981519152868481518110151561196d57fe5b906020019060200201516040518082815260200191505060405180910390a36001016118ba565b60015460009081908190600160a060020a031633146119b257600080fd5b600085511180156119c4575083518551145b15156119cf57600080fd5b5060009050805b8451811015611c5457600084828151811015156119ef57fe5b90602001906020020151118015611a2757508481815181101515611a0f57fe5b90602001906020020151600160a060020a0316600014155b8015611a685750600d60008683815181101515611a4057fe5b6020908102909101810151600160a060020a031682528101919091526040016000205460ff16155b8015611aaf5750600e60008683815181101515611a8157fe5b90602001906020020151600160a060020a0316600160a060020a031681526020019081526020016000205442115b1515611aba57600080fd5b611ad06305f5e100858381518110151561183957fe5b8482815181101515611ade57fe5b602090810290910101528351849082908110611af657fe5b90602001906020020151600b60008784815181101515611b1257fe5b6020908102909101810151600160a060020a03168252810191909152604001600020541015611b4057600080fd5b611b9c8482815181101515611b5157fe5b90602001906020020151600b60008885815181101515611b6d57fe5b6020908102909101810151600160a060020a03168252810191909152604001600020549063ffffffff61202716565b600b60008784815181101515611bae57fe5b6020908102909101810151600160a060020a03168252810191909152604001600020558351611be39085908390811061187957fe5b915033600160a060020a03168582815181101515611bfd57fe5b90602001906020020151600160a060020a03166000805160206124328339815191528684815181101515611c2d57fe5b906020019060200201516040518082815260200191505060405180910390a36001016119d6565b336000908152600b602052604090205461127d908363ffffffff61203916565b600154600160a060020a03163314611c8b57600080fd5b600160a060020a0381161515611ca057600080fd5b600154604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008084118015611d2a5750336000908152600d602052604090205460ff16155b8015611d4f5750600160a060020a0385166000908152600d602052604090205460ff16155b8015611d695750336000908152600e602052604090205442115b8015611d8c5750600160a060020a0385166000908152600e602052604090205442115b1515611d9757600080fd5b611da085612073565b1561201157336000908152600b6020526040902054841115611dc157600080fd5b336000908152600b6020526040902054611de1908563ffffffff61202716565b336000908152600b602052604080822092909255600160a060020a03871681522054611e13908563ffffffff61203916565b600160a060020a0386166000818152600b6020908152604080832094909455925185519293919286928291908401908083835b60208310611e655780518252601f199092019160209182019101611e46565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060e060020a9004903387876040518563ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a03168152602001838152602001828051906020019080838360005b83811015611ef7578181015183820152602001611edf565b50505050905090810190601f168015611f245780820380516001836020036101000a031916815260200191505b50935050505060006040518083038185885af193505050501515611f4457fe5b826040518082805190602001908083835b60208310611f745780518252601f199092019160209182019101611f55565b51815160209384036101000a6000190180199092169116179052604080519290940182900382208a83529351939550600160a060020a038b16945033937fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c169350918290030190a4604080518581529051600160a060020a0387169133916000805160206124328339815191529181900360200190a350600161201f565b61201c8585856122bf565b90505b949350505050565b60008282111561203357fe5b50900390565b600082820183811015610cb457fe5b60008083151561205b57600091506114a9565b5082820282848281151561206b57fe5b0414610cb457fe5b6000903b1190565b336000908152600b6020526040812054819084111561209957600080fd5b336000908152600b60205260409020546120b9908563ffffffff61202716565b336000908152600b602052604080822092909255600160a060020a038716815220546120eb908563ffffffff61203916565b600160a060020a0386166000818152600b602090815260408083209490945592517fc0ee0b8a0000000000000000000000000000000000000000000000000000000081523360048201818152602483018a90526060604484019081528951606485015289518c9850959663c0ee0b8a9693958c958c956084909101928601918190849084905b83811015612189578181015183820152602001612171565b50505050905090810190601f1680156121b65780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1580156121d757600080fd5b505af11580156121eb573d6000803e3d6000fd5b50505050826040518082805190602001908083835b6020831061221f5780518252601f199092019160209182019101612200565b51815160209384036101000a6000190180199092169116179052604080519290940182900382208a83529351939550600160a060020a038b16945033937fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c169350918290030190a4604080518581529051600160a060020a0387169133916000805160206124328339815191529181900360200190a3506001949350505050565b336000908152600b60205260408120548311156122db57600080fd5b336000908152600b60205260409020546122fb908463ffffffff61202716565b336000908152600b602052604080822092909255600160a060020a0386168152205461232d908463ffffffff61203916565b600160a060020a0385166000908152600b60209081526040918290209290925551835184928291908401908083835b6020831061237b5780518252601f19909201916020918201910161235c565b51815160209384036101000a6000190180199092169116179052604080519290940182900382208983529351939550600160a060020a038a16945033937fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c169350918290030190a4604080518481529051600160a060020a0386169133916000805160206124328339815191529181900360200190a35060019392505050565b600080828481151561242857fe5b049493505050505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058203cff6708d5ab0b0f5fcbf104149dd7bfc5adf1437267b4e3662f036dfbc8093d0029"
}