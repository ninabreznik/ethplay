{
  "address": "0x4513ab6a3b345276bbf59df54f770a635e208b70",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FiftyFifty",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-26\n*/\n\npragma solidity ^0.4.23;\n\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (_a == 0) {\n            return 0;\n        }\n\n        uint256 c = _a * _b;\n        require(c / _a == _b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b > 0); // Solidity only automatically asserts when dividing by 0\n        uint256 c = _a / _b;\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b <= _a);\n        uint256 c = _a - _b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        uint256 c = _a + _b;\n        require(c >= _a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ncontract FiftyFifty{\n    using SafeMath for uint; // using SafeMath\n    //rate to 0.125 ETH.  0.125:1, 0.250:2, 0.500:4, 1.00:8, 2.00:16, 4.00:32, 8.00: 64, 16.00:128, 32.00:256, 64.00:512\n    uint[11] betValues = [0.125 ether, 0.250 ether, 0.500 ether, 1.00 ether, 2.00 ether, 4.00 ether, 8.00 ether, 16.00 ether, 32.00 ether, 64.00 ether];\n    // return value is 95 % of two people.\n    uint[11] returnValues = [0.2375 ether, 0.475 ether, 0.950 ether, 1.90 ether, 3.80 ether, 7.60 ether, 15.20 ether, 30.40 ether, 60.80 ether, 121.60 ether];\n    // jackpot value is 4 % of total value\n    uint[11] jackpotValues = [0.05 ether, 0.010 ether, 0.020 ether, 0.04 ether, 0.08 ether, 0.16 ether, 0.32 ether, 0.64 ether, 1.28 ether, 2.56 ether];\n    // fee 1 %\n    uint[11] fees = [0.0025 ether, 0.005 ether, 0.010 ether, 0.020 ether, 0.040 ether, 0.080 ether, 0.16 ether, 0.32 ether, 0.64 ether, 1.28 ether];\n    uint roundNumber; // number of round that jackpot is paid\n    mapping(uint => uint) jackpot;\n    //round -> betValue -> user address\n    mapping(uint => mapping(uint => address[])) roundToBetValueToUsers;\n    //round -> betValue -> totalBet\n    mapping(uint => mapping(uint => uint)) roundToBetValueToTotalBet;\n    //round -> totalBet\n    mapping(uint => uint) public roundToTotalBet;\n    // current user who bet for the value\n    mapping(uint => address) currentUser;\n    address owner;\n    uint ownerDeposit;\n\n    // Event\n    event Jackpot(address indexed _user, uint _value, uint indexed _round, uint _now);\n    event Bet(address indexed _winner,address indexed _user,uint _bet, uint _payBack, uint _now);\n\n\n    constructor() public {\n        owner = msg.sender;\n        roundNumber = 1;\n    }\n\n    modifier onlyOwner () {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function changeOwner(address _owner) external onlyOwner{\n        owner = _owner;\n    }\n\n    // fallback function that\n\n    function() public payable {\n        // check if msg.value is equal to specified amount of value.\n        uint valueNumber = checkValue(msg.value);\n        /**\n            jackpot starts when block hash % 10000 < 0\n        */\n        uint randJackpot = (uint(blockhash(block.number - 1)) + roundNumber) % 10000;\n        if(jackpot[roundNumber] != 0 && randJackpot <= 1){\n            // Random number that is under contract total bet amount\n            uint randJackpotBetValue = uint(blockhash(block.number - 1)) % roundToTotalBet[roundNumber];\n            //betNum\n            uint betNum=0;\n            uint addBetValue = 0;\n            // Loop until addBetValue exceeds randJackpotBetValue\n            while(randJackpotBetValue > addBetValue){\n                // Select bet number which is equal to\n                addBetValue += roundToBetValueToTotalBet[roundNumber][betNum];\n                betNum++;\n            }\n            //  betNum.sub(1)のindexに含まれているuserの数未満のランダム番号を生成する\n            uint randJackpotUser = uint(blockhash(block.number - 1)) % roundToBetValueToUsers[roundNumber][betNum.sub(1)].length;\n            address user = roundToBetValueToUsers[roundNumber][valueNumber][randJackpotUser];\n            uint jp = jackpot[roundNumber];\n            user.transfer(jp);\n            emit Jackpot(user, jp, roundNumber, now);\n            roundNumber = roundNumber.add(1);\n        }\n        if(currentUser[valueNumber] == address(0)){\n            //when current user does not exists\n            currentUser[valueNumber] = msg.sender;\n            emit Bet(address(0), msg.sender, betValues[valueNumber], 0, now);\n        }else{\n            // when current user exists\n            uint rand = uint(blockhash(block.number-1)) % 2;\n            ownerDeposit = ownerDeposit.add(fees[valueNumber]);\n            if(rand == 0){\n                // When the first user win\n                currentUser[valueNumber].transfer(returnValues[valueNumber]);\n                emit Bet(currentUser[valueNumber], msg.sender, betValues[valueNumber], returnValues[valueNumber], now);\n            }else{\n                // When the last user win\n                msg.sender.transfer(returnValues[valueNumber]);\n                emit Bet(msg.sender, msg.sender, betValues[valueNumber], returnValues[valueNumber], now);\n            }\n            // delete current user\n            delete currentUser[valueNumber];\n        }\n        // common in each contracts\n        jackpot[roundNumber] = jackpot[roundNumber].add(jackpotValues[valueNumber]);\n        roundToBetValueToUsers[roundNumber][valueNumber].push(currentUser[valueNumber]);\n        roundToTotalBet[roundNumber] = roundToTotalBet[roundNumber].add(betValues[valueNumber]);\n        roundToBetValueToTotalBet[roundNumber][valueNumber] = roundToBetValueToTotalBet[roundNumber][valueNumber].add(betValues[valueNumber]);\n    }\n\n    /**\n        @param sendValue is ETH that is sent to this contract.\n        @return num is index that represent value that is sent.\n    */\n    function checkValue(uint sendValue) internal view returns(uint) {\n        /**\n            Check sendValue is match prepared values. Revert if sendValue doesn't match any values.\n        */\n        uint num = 0;\n        while (sendValue != betValues[num]){\n            if(num == 11){\n                revert();\n            }\n            num++;\n        }\n        return num;\n    }\n\n    function roundToBetValueToUsersLength(uint _roundNum, uint _betNum) public view returns(uint){\n        return roundToBetValueToUsers[_roundNum][_betNum].length;\n    }\n\n    function withdrawDeposit() public onlyOwner{\n        owner.transfer(ownerDeposit);\n        ownerDeposit = 0;\n    }\n\n    function currentJackpot() public view  returns(uint){\n        return jackpot[roundNumber];\n    }\n\n}",
  "bytecode": ""
}