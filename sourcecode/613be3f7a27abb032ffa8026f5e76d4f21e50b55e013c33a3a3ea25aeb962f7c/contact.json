{
  "address": "0x3c5e0c2aec958cd643445c15b1b535091cf1cae3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RealEstateToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-26\n*/\n\npragma solidity ^0.4.25;\n\n/* Real Estate Token . Жетоны недвижимости\n █ REAL ESTATE BLOCKCHAIN INNOVATIONS █ БЛОКЧЕЙН НЕДВИЖИМОСТИ ИННОВАЦИИ █\n \n Long-term and short-term investments █ Долгосрочные и краткосрочные инвестиции\n Benefits from 10% to 200%            █ Преимущества от 10% до 200%\n Invest in the ETH blockchain         █ Инвестируйте в блокчейн ETH\n Can be withdrawn at any time         █ Может быть отозван в любое время\n \n How to invest? █ Как инвестировать?\n \n Send minimum 0.01 ETH to Smart Contract █ Отправьте не менее 0,01 ETH на Smart Contract\n \n You have invested 0.01 ETH and got a Real Estate Token (RET) of 20,000\n Вы вложили 0,01 ETH и получили жетон недвижимости (RET) в размере 20 000\n \nHow to withdraw?\nSend 0 ETH to Contract after you get 20,000 RET\n\nКак снять?\nОтправьте 0 ETH на контракт после получения 20 000 RET\n\nWhere is the office located? █ Где находится офис?\n\nREAL is an initiative of Real Estate Token Pte. Ltd. UEN 201720446Z\t\nREAL является инициативой Real Estate Token Pte. Ltd. UEN 201720446Z\n \n\n\n\ncontract Multiplier {\n    //Address for promo expences\n    address constant private PROMO = 0x0000000000000000000000000000000000000000;\n    //Percent for promo expences\n    uint constant public PROMO_PERCENT = 7; //6 for advertizing, 1 for techsupport\n    //How many percent for your deposit to be multiplied\n    uint constant public MULTIPLIER = 121;\n\n    //The deposit structure holds all the info about the deposit made\n    struct Deposit {\n        address depositor; //The depositor address\n        uint128 deposit;   //The deposit amount\n        uint128 expect;    //How much we should pay out (initially it is 121% of deposit)\n    }\n\n    Deposit[] private queue;  //The queue\n    uint public currentReceiverIndex = 0; //The index of the first depositor in the queue. The receiver of investments!\n\n    //This function receives all the deposits\n    //stores them and make immediate payouts\n    function () public payable {\n        if(msg.value > 0){\n            require(gasleft() >= 220000, \"We require more gas!\"); //We need gas to process queue\n            require(msg.value <= 10 ether); //Do not allow too big investments to stabilize payouts\n\n            //Add the investor into the queue. Mark that he expects to receive 121% of deposit back\n            queue.push(Deposit(msg.sender, uint128(msg.value), uint128(msg.value*MULTIPLIER/100)));\n\n            //Send some promo to enable this contract to leave long-long time\n            uint promo = msg.value*PROMO_PERCENT/100;\n            PROMO.send(promo);\n\n            //Pay to first investors in line\n            pay();\n        }\n    }\n\n    //Used to pay to current investors\n    //Each new transaction processes 1 - 4+ investors in the head of queue \n    //depending on balance and gas left\n    function pay() private {\n        //Try to send all the money on contract to the first investors in line\n        uint128 money = uint128(address(this).balance);\n\n        //We will do cycle on the queue\n        for(uint i=0; i<queue.length; i++){\n\n            uint idx = currentReceiverIndex + i;  //get the index of the currently first investor\n\n            Deposit storage dep = queue[idx]; //get the info of the first investor\n\n            if(money >= dep.expect){  //If we have enough money on the contract to fully pay to investor\n                dep.depositor.send(dep.expect); //Send money to him\n                money -= dep.expect;            //update money left\n\n                //this investor is fully paid, so remove him\n                delete queue[idx];\n            }else{\n                //Here we don't have enough money so partially pay to investor\n                dep.depositor.send(money); //Send to him everything we have\n                dep.expect -= money;       //Update the expected amount\n                break;                     //Exit cycle\n            }\n\n            if(gasleft() <= 50000)         //Check the gas left. If it is low, exit the cycle\n                break;                     //The next investor will process the line further\n        }\n\n        currentReceiverIndex += i; //Update the index of the current first investor\n    }\n\n    //Get the deposit info by its index\n    //You can get deposit index from\n    function getDeposit(uint idx) public view returns (address depositor, uint deposit, uint expect){\n        Deposit storage dep = queue[idx];\n        return (dep.depositor, dep.deposit, dep.expect);\n    }\n\n    //Get the count of deposits of specific investor\n    function getDepositsCount(address depositor) public view returns (uint) {\n        uint c = 0;\n        for(uint i=currentReceiverIndex; i<queue.length; ++i){\n            if(queue[i].depositor == depositor)\n                c++;\n        }\n        return c;\n    }\n\n    //Get all deposits (index, deposit, expect) of a specific investor\n    function getDeposits(address depositor) public view returns (uint[] idxs, uint128[] deposits, uint128[] expects) {\n        uint c = getDepositsCount(depositor);\n\n        idxs = new uint[](c);\n        deposits = new uint128[](c);\n        expects = new uint128[](c);\n\n        if(c > 0) {\n            uint j = 0;\n            for(uint i=currentReceiverIndex; i<queue.length; ++i){\n                Deposit storage dep = queue[i];\n                if(dep.depositor == depositor){\n                    idxs[j] = i;\n                    deposits[j] = dep.deposit;\n                    expects[j] = dep.expect;\n                    j++;\n                }\n            }\n        }\n    }\n    \n    //Get current queue size\n    function getQueueLength() public view returns (uint) {\n        return queue.length - currentReceiverIndex;\n    }\n\n}\n\n*/\n\ncontract Token {\n\n    \n    function totalSupply() constant returns (uint256 supply) {}\n\n    \n    function balanceOf(address _owner) constant returns (uint256 balance) {}\n\n    function transfer(address _to, uint256 _value) returns (bool success) {}\n\n    \n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n\n    \n    function approve(address _spender, uint256 _value) returns (bool success) {}\n\n    \n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n}\n\ncontract StandardToken is Token {\n\n    function transfer(address _to, uint256 _value) returns (bool success) {\n        //Default assumes totalSupply can't be over max (2^256 - 1).\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n        //Replace the if with this one instead.\n        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n        if (balances[msg.sender] >= _value && _value > 0) {\n            balances[msg.sender] -= _value;\n            balances[_to] += _value;\n            Transfer(msg.sender, _to, _value);\n            return true;\n        } else { return false; }\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n            balances[_to] += _value;\n            balances[_from] -= _value;\n            allowed[_from][msg.sender] -= _value;\n            Transfer(_from, _to, _value);\n            return true;\n        } else { return false; }\n    }\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n    }\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    uint256 public totalSupply;\n}\n\ncontract RealEstateToken is StandardToken { \n    string public name;                   \n    uint8 public decimals;                \n    string public symbol;                 \n    string public version = 'H1.0'; \n    uint256 public unitsOneEthCanBuy;     \n    uint256 public totalEthInWei;           \n    address public fundsWallet;          \n\n    \n    function RealEstateToken() {\n        balances[msg.sender] = 201009982000000000000000000;               \n        name = \"Real Estate Token\";                                   \n        decimals = 18;                                              \n        symbol = \"RET\";                                             \n        unitsOneEthCanBuy = 2000000;                                      \n        fundsWallet = msg.sender;                                 \n    }\n\n    function() payable{\n        totalEthInWei = totalEthInWei + msg.value;\n        uint256 amount = msg.value * unitsOneEthCanBuy;\n        if (balances[fundsWallet] < amount) {\n            return;\n        }\n\n        balances[fundsWallet] = balances[fundsWallet] - amount;\n        balances[msg.sender] = balances[msg.sender] + amount;\n\n        Transfer(fundsWallet, msg.sender, amount); \n\n        \n        fundsWallet.transfer(msg.value);                               \n    }\n\n    \n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n\n        \n        if(!_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)) { throw; }\n        return true;\n    }\n}",
  "bytecode": "60c0604052600460808190527f48312e300000000000000000000000000000000000000000000000000000000060a090815261003e916006919061011d565b5034801561004b57600080fd5b5033600090815260208181526040918290206aa64584f572d7ac563800009055815180830190925260118083527f5265616c2045737461746520546f6b656e000000000000000000000000000000929091019182526100ac9160039161011d565b506004805460ff191660121790556040805180820190915260038082527f524554000000000000000000000000000000000000000000000000000000000060209092019182526100fe9160059161011d565b50621e848060075560098054600160a060020a031916331790556101b8565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061015e57805160ff191683800117855561018b565b8280016001018555821561018b579182015b8281111561018b578251825591602001919060010190610170565b5061019792915061019b565b5090565b6101b591905b8082111561019757600081556001016101a1565b90565b610994806101c76000396000f3006080604052600436106100b65763ffffffff60e060020a60003504166306fdde038114610198578063095ea7b31461022257806318160ddd1461025a5780632194f3a21461028157806323b872dd146102b2578063313ce567146102dc57806354fd4d501461030757806365f2bc2e1461031c57806370a0823114610331578063933ba4131461035257806395d89b4114610367578063a9059cbb1461037c578063cae9ca51146103a0578063dd62ed3e14610409575b6008805434908101909155600754600954600160a060020a03166000908152602081905260409020549102908111156100ee57610195565b60098054600160a060020a0390811660009081526020818152604080832080548790039055338084529281902080548701905593548451868152945192949316927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a3600954604051600160a060020a03909116903480156108fc02916000818181858888f19350505050158015610193573d6000803e3d6000fd5b505b50005b3480156101a457600080fd5b506101ad610430565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101e75781810151838201526020016101cf565b50505050905090810190601f1680156102145780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561022e57600080fd5b50610246600160a060020a03600435166024356104be565b604080519115158252519081900360200190f35b34801561026657600080fd5b5061026f610525565b60408051918252519081900360200190f35b34801561028d57600080fd5b5061029661052b565b60408051600160a060020a039092168252519081900360200190f35b3480156102be57600080fd5b50610246600160a060020a036004358116906024351660443561053a565b3480156102e857600080fd5b506102f1610625565b6040805160ff9092168252519081900360200190f35b34801561031357600080fd5b506101ad61062e565b34801561032857600080fd5b5061026f610689565b34801561033d57600080fd5b5061026f600160a060020a036004351661068f565b34801561035e57600080fd5b5061026f6106aa565b34801561037357600080fd5b506101ad6106b0565b34801561038857600080fd5b50610246600160a060020a036004351660243561070b565b3480156103ac57600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610246948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506107a29650505050505050565b34801561041557600080fd5b5061026f600160a060020a036004358116906024351661093d565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104b65780601f1061048b576101008083540402835291602001916104b6565b820191906000526020600020905b81548152906001019060200180831161049957829003601f168201915b505050505081565b336000818152600160209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a35060015b92915050565b60025481565b600954600160a060020a031681565b600160a060020a03831660009081526020819052604081205482118015906105855750600160a060020a03841660009081526001602090815260408083203384529091529020548211155b80156105915750600082115b1561061a57600160a060020a0380841660008181526020818152604080832080548801905593881680835284832080548890039055600182528483203384528252918490208054879003905583518681529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600161061e565b5060005b9392505050565b60045460ff1681565b6006805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104b65780601f1061048b576101008083540402835291602001916104b6565b60075481565b600160a060020a031660009081526020819052604090205490565b60085481565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104b65780601f1061048b576101008083540402835291602001916104b6565b33600090815260208190526040812054821180159061072a5750600082115b1561079a573360008181526020818152604080832080548790039055600160a060020a03871680845292819020805487019055805186815290519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a350600161051f565b50600061051f565b336000818152600160209081526040808320600160a060020a038816808552908352818420879055815187815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a383600160a060020a031660405180807f72656365697665417070726f76616c28616464726573732c75696e743235362c81526020017f616464726573732c627974657329000000000000000000000000000000000000815250602e019050604051809103902060e060020a9004338530866040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a03168152602001828051906020019080838360005b838110156108e25781810151838201526020016108ca565b50505050905090810190601f16801561090f5780820380516001836020036101000a031916815260200191505b509450505050506000604051808303816000875af192505050151561093357600080fd5b5060019392505050565b600160a060020a039182166000908152600160209081526040808320939094168252919091522054905600a165627a7a72305820f4c82b24fd7da7f1e0c4d9212c1b615d44dff6a7d81f68a02f89a3b78093c6490029"
}