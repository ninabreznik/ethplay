{
  "address": "0x502f1db98e2ae2fb6ae78ef346aa2af37608b458",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AdsNetworkPayment",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-19\n*/\n\npragma solidity ^0.4.25;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\ncontract ForeignToken {\n    function balanceOf(address _owner) constant public returns (uint256);\n    function transfer(address _to, uint256 _value) public returns (bool);\n}\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) public constant returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public constant returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\ncontract AdsNetworkPayment is ERC20 {\n    using SafeMath for uint256;\n    address owner = msg.sender;\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    string public constant name = 'AdsNetworkPayment';\n    string public constant symbol = 'ANP';\n    uint public constant decimals = 18;\n    uint256 public totalSupply = 1200000000e18;\n    uint256 public totalDistributed =  1200000000e18;    \n    uint256 public constant MIN_CONTRIBUTION = 1 ether / 100;\n    uint256 public tokensPerEth = 800000e18;\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event Distr(address indexed to, uint256 amount);\n    event DistrFinished();\n    event Airdrop(address indexed _owner, uint _amount, uint _balance);\n    event TokensPerEthUpdated(uint _tokensPerEth);\n    event Burn(address indexed burner, uint256 value);\n    bool public distributionFinished = false;\n    modifier canDistr() {\n        require(!distributionFinished);\n        _;\n    }\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    constructor () public {\n        owner = msg.sender;\n        distr(owner, totalDistributed);\n    }\n    function transferOwnership(address newOwner) onlyOwner public {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n    function finishDistribution() onlyOwner canDistr public returns (bool) {\n        distributionFinished = true;\n        emit DistrFinished();\n        return true;\n    }\n    function distr(address _to, uint256 _amount) canDistr private returns (bool) {\n        totalDistributed = totalDistributed.add(_amount);        \n        balances[_to] = balances[_to].add(_amount);\n        emit Distr(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n        return true;\n    }\n    function doAirdrop(address _participant, uint _amount) internal {\n        require(_amount > 0);      \n        require(totalDistributed < totalSupply);\n        balances[_participant] = balances[_participant].add(_amount);\n        totalDistributed = totalDistributed.add(_amount);\n        if (totalDistributed >= totalSupply) {\n            distributionFinished = true;\n        }\n        emit Airdrop(_participant, _amount, balances[_participant]);\n        emit Transfer(address(0), _participant, _amount);\n    }\n    function adminClaimAirdrop(address _participant, uint _amount) public onlyOwner {        \n        doAirdrop(_participant, _amount);\n    }\n    function adminClaimAirdropMultiple(address[] _addresses, uint _amount) public onlyOwner {        \n        for (uint i = 0; i < _addresses.length; i++) doAirdrop(_addresses[i], _amount);\n    }\n    function updateTokensPerEth(uint _tokensPerEth) public onlyOwner {        \n        tokensPerEth = _tokensPerEth;\n        emit TokensPerEthUpdated(_tokensPerEth);\n    }\n    function () external payable {\n        getTokens();\n    }\n    function getTokens() payable canDistr  public {\n        uint256 tokens = 0;\n        uint256 bonus = 0;\n        require(msg.value >= MIN_CONTRIBUTION);\n        require(msg.value > 0);\n        tokens = tokensPerEth.mul(msg.value) / 1 ether;        \n        address investor = msg.sender;\n        if (msg.value >= 0.05 ether) {\n            bonus = (tokens * 5) / 100;\n        }\n        if (msg.value >= 0.06 ether) {\n            bonus = (tokens * 6) / 100;\n        }\n       if (msg.value >= 0.07 ether) {\n            bonus = (tokens * 7) / 100;\n       }\n        if (msg.value >= 0.08 ether) {\n            bonus = (tokens * 8) / 100;\n        }\n        if (msg.value >= 0.09 ether) {\n            bonus = (tokens * 9) / 100;\n        }\n        if (msg.value >= 0.1 ether) {\n            bonus = (tokens * 10) / 100;\n        }\n        if (msg.value >= 0.2 ether) {\n            bonus = (tokens * 20) / 100;\n        }\n        if (msg.value >= 0.3 ether) {\n            bonus = (tokens * 30) / 100;\n        }\n        if (msg.value >= 0.4 ether) {\n            bonus = (tokens * 40) / 100;\n        }\n        if (msg.value >= 0.5 ether) {\n            bonus = (tokens * 50) / 100;\n        }\n        if (msg.value >= 0.6 ether) {\n            bonus = (tokens * 60) / 100;\n        }\n        if (msg.value >= 0.7 ether) {\n            bonus = (tokens * 70) / 100;\n        }\n        if (msg.value >= 0.8 ether) {\n            bonus = (tokens * 80) / 100;\n        }\n        if (msg.value >= 0.9 ether) {\n            bonus = (tokens * 90) / 100;\n        }\n        if (msg.value >= 1 ether) {\n            bonus = (tokens * 100) / 100;\n        }\n        if (tokens > 0) {\n            distr(investor, (tokens + bonus));\n        }\n        if (totalDistributed >= totalSupply) {\n            distributionFinished = true;\n        }\n    }\n    function balanceOf(address _owner) constant public returns (uint256) {\n        return balances[_owner];\n    }\n    modifier onlyPayloadSize(uint size) {\n        assert(msg.data.length >= size + 4);\n        _;\n    }\n    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\n        require(_to != address(0));\n        require(_amount <= balances[msg.sender]);\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\n        require(_to != address(0));\n        require(_amount <= balances[_from]);\n        require(_amount <= allowed[_from][msg.sender]);\n        balances[_from] = balances[_from].sub(_amount);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(_from, _to, _amount);\n        return true;\n    }\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    function allowance(address _owner, address _spender) constant public returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n    function getTokenBalance(address tokenAddress, address who) constant public returns (uint){\n        ForeignToken t = ForeignToken(tokenAddress);\n        uint bal = t.balanceOf(who);\n        return bal;\n    }\n    function withdraw() onlyOwner public {\n        address myAddress = this;\n        uint256 etherBalance = myAddress.balance;\n        owner.transfer(etherBalance);\n    }\n    function burn(uint256 _value) onlyOwner public {\n        require(_value <= balances[msg.sender]);\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        totalDistributed = totalDistributed.sub(_value);\n        emit Burn(burner, _value);\n    }\n    function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\n        ForeignToken token = ForeignToken(_tokenContract);\n        uint256 amount = token.balanceOf(address(this));\n        return token.transfer(owner, amount);\n    }\n}",
  "bytecode": "608060405260018054600160a060020a031916331790556b03e09de2596099e2b0000000600481905560055569a968163f0a57b40000006006556007805460ff1916905534801561004f57600080fd5b5060018054600160a060020a03191633179081905560055461008391600160a060020a031690640100000000610089810204565b50610198565b60075460009060ff161561009c57600080fd5b6005546100b6908364010000000061103a61018582021704565b600555600160a060020a0383166000908152600260205260409020546100e9908364010000000061103a61018582021704565b600160a060020a038416600081815260026020908152604091829020939093558051858152905191927f8940c4b8e215f8822c5c8f0056c12652c746cbc57eedbd2a440b175971d47a7792918290030190a2604080518381529051600160a060020a038516916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350600192915050565b8181018281101561019257fe5b92915050565b6111a6806101a76000396000f3006080604052600436106101325763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461013c578063095ea7b3146101c657806318160ddd146101fe57806323b872dd14610225578063313ce5671461024f5780633ccfd60b1461026457806340650c911461027957806342966c681461028e5780634a63464d146102a657806367220fd7146102ca57806370a082311461032157806395d89b41146103425780639b1cbccc146103575780639ea407be1461036c578063a9059cbb14610384578063aa6ca80814610132578063c108d542146103a8578063c489744b146103bd578063cbdd69b5146103e4578063dd62ed3e146103f9578063e58fc54c14610420578063efca2eed14610441578063f2fde38b14610456575b61013a610477565b005b34801561014857600080fd5b5061015161068a565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561018b578181015183820152602001610173565b50505050905090810190601f1680156101b85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101d257600080fd5b506101ea600160a060020a03600435166024356106c1565b604080519115158252519081900360200190f35b34801561020a57600080fd5b50610213610769565b60408051918252519081900360200190f35b34801561023157600080fd5b506101ea600160a060020a036004358116906024351660443561076f565b34801561025b57600080fd5b506102136108e2565b34801561027057600080fd5b5061013a6108e7565b34801561028557600080fd5b50610213610944565b34801561029a57600080fd5b5061013a60043561094f565b3480156102b257600080fd5b5061013a600160a060020a0360043516602435610a2e565b3480156102d657600080fd5b506040805160206004803580820135838102808601850190965280855261013a953695939460249493850192918291850190849080828437509497505093359450610a539350505050565b34801561032d57600080fd5b50610213600160a060020a0360043516610aa3565b34801561034e57600080fd5b50610151610abe565b34801561036357600080fd5b506101ea610af5565b34801561037857600080fd5b5061013a600435610b5b565b34801561039057600080fd5b506101ea600160a060020a0360043516602435610bad565b3480156103b457600080fd5b506101ea610c8c565b3480156103c957600080fd5b50610213600160a060020a0360043581169060243516610c95565b3480156103f057600080fd5b50610213610d46565b34801561040557600080fd5b50610213600160a060020a0360043581169060243516610d4c565b34801561042c57600080fd5b506101ea600160a060020a0360043516610d77565b34801561044d57600080fd5b50610213610ecb565b34801561046257600080fd5b5061013a600160a060020a0360043516610ed1565b6007546000908190819060ff161561048e57600080fd5b60009250829150662386f26fc100003410156104a957600080fd5b600034116104b657600080fd5b600654670de0b6b3a7640000906104d3903463ffffffff610f2316565b8115156104dc57fe5b04925033905066b1a2bc2ec5000034106104fa576064600584020491505b66d529ae9e8600003410610512576064600684020491505b66f8b0a10e470000341061052a576064600784020491505b67011c37937e0800003410610543576064600884020491505b67013fbe85edc90000341061055c576064600984020491505b67016345785d8a00003410610575576064600a84020491505b6702c68af0bb140000341061058e576064601484020491505b670429d069189e000034106105a7576064601e84020491505b67058d15e17628000034106105c0576064602884020491505b6706f05b59d3b2000034106105d9576064603284020491505b670853a0d2313c000034106105f2576064603c84020491505b6709b6e64a8ec60000341061060b576064604684020491505b670b1a2bc2ec5000003410610624576064605084020491505b670c7d713b49da0000341061063d576064605a84020491505b670de0b6b3a764000034106106555760648381020491505b600083111561066c5761066a81838501610f4c565b505b60045460055410610685576007805460ff191660011790555b505050565b60408051808201909152601181527f4164734e6574776f726b5061796d656e74000000000000000000000000000000602082015281565b600081158015906106f45750336000908152600360209081526040808320600160a060020a038716845290915290205415155b1561070157506000610763565b336000818152600360209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b60045481565b60006060606436101561077e57fe5b600160a060020a038416151561079357600080fd5b600160a060020a0385166000908152600260205260409020548311156107b857600080fd5b600160a060020a03851660009081526003602090815260408083203384529091529020548311156107e857600080fd5b600160a060020a038516600090815260026020526040902054610811908463ffffffff61102816565b600160a060020a038616600090815260026020908152604080832093909355600381528282203383529052205461084e908463ffffffff61102816565b600160a060020a038087166000908152600360209081526040808320338452825280832094909455918716815260029091522054610892908463ffffffff61103a16565b600160a060020a03808616600081815260026020908152604091829020949094558051878152905191939289169260008051602061115b83398151915292918290030190a3506001949350505050565b601281565b6001546000908190600160a060020a0316331461090357600080fd5b50506001546040513091823191600160a060020a03909116906108fc8315029083906000818181858888f19350505050158015610685573d6000803e3d6000fd5b662386f26fc1000081565b600154600090600160a060020a0316331461096957600080fd5b3360009081526002602052604090205482111561098557600080fd5b50336000818152600260205260409020546109a6908363ffffffff61102816565b600160a060020a0382166000908152600260205260409020556004546109d2908363ffffffff61102816565b6004556005546109e8908363ffffffff61102816565b600555604080518381529051600160a060020a038316917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a25050565b600154600160a060020a03163314610a4557600080fd5b610a4f8282611047565b5050565b600154600090600160a060020a03163314610a6d57600080fd5b5060005b825181101561068557610a9b8382815181101515610a8b57fe5b9060200190602002015183611047565b600101610a71565b600160a060020a031660009081526002602052604090205490565b60408051808201909152600381527f414e500000000000000000000000000000000000000000000000000000000000602082015281565b600154600090600160a060020a03163314610b0f57600080fd5b60075460ff1615610b1f57600080fd5b6007805460ff191660011790556040517f7f95d919e78bdebe8a285e6e33357c2fcb65ccf66e72d7573f9f8f6caad0c4cc90600090a150600190565b600154600160a060020a03163314610b7257600080fd5b60068190556040805182815290517ff7729fa834bbef70b6d3257c2317a562aa88b56c81b544814f93dc5963a2c0039181900360200190a150565b600060406044361015610bbc57fe5b600160a060020a0384161515610bd157600080fd5b33600090815260026020526040902054831115610bed57600080fd5b33600090815260026020526040902054610c0d908463ffffffff61102816565b3360009081526002602052604080822092909255600160a060020a03861681522054610c3f908463ffffffff61103a16565b600160a060020a03851660008181526002602090815260409182902093909355805186815290519192339260008051602061115b8339815191529281900390910190a35060019392505050565b60075460ff1681565b600080600084915081600160a060020a03166370a08231856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b158015610d1157600080fd5b505af1158015610d25573d6000803e3d6000fd5b505050506040513d6020811015610d3b57600080fd5b505195945050505050565b60065481565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b60015460009081908190600160a060020a03163314610d9557600080fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051859350600160a060020a038416916370a082319160248083019260209291908290030181600087803b158015610df957600080fd5b505af1158015610e0d573d6000803e3d6000fd5b505050506040513d6020811015610e2357600080fd5b5051600154604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810184905290519293509084169163a9059cbb916044808201926020929091908290030181600087803b158015610e9757600080fd5b505af1158015610eab573d6000803e3d6000fd5b505050506040513d6020811015610ec157600080fd5b5051949350505050565b60055481565b600154600160a060020a03163314610ee857600080fd5b600160a060020a03811615610f20576001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b6000821515610f3457506000610763565b50818102818382811515610f4457fe5b041461076357fe5b60075460009060ff1615610f5f57600080fd5b600554610f72908363ffffffff61103a16565b600555600160a060020a038316600090815260026020526040902054610f9e908363ffffffff61103a16565b600160a060020a038416600081815260026020908152604091829020939093558051858152905191927f8940c4b8e215f8822c5c8f0056c12652c746cbc57eedbd2a440b175971d47a7792918290030190a2604080518381529051600160a060020a0385169160009160008051602061115b8339815191529181900360200190a350600192915050565b60008282111561103457fe5b50900390565b8181018281101561076357fe5b6000811161105457600080fd5b6004546005541061106457600080fd5b600160a060020a03821660009081526002602052604090205461108d908263ffffffff61103a16565b600160a060020a0383166000908152600260205260409020556005546110b9908263ffffffff61103a16565b6005819055600454116110d4576007805460ff191660011790555b600160a060020a0382166000818152600260209081526040918290205482518581529182015281517fada993ad066837289fe186cd37227aa338d27519a8a1547472ecb9831486d272929181900390910190a2604080518281529051600160a060020a0384169160009160008051602061115b8339815191529181900360200190a350505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a7230582019379ee532543aeca9a314b5ef11b23de1f06252dea8cd354ba654252430fdba0029"
}