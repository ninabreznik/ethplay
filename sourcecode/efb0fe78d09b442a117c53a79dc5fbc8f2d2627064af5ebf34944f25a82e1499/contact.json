{
  "address": "0xf58a6e83c11487d5c702eec6e401cab463c2cd20",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BNSToken",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-08\n*/\n\npragma solidity ^0.4.21;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\ncontract ERC20 {\n    uint256 public totalSupply;\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\nlibrary SafeERC20 {\n    function safeTransfer(ERC20 token, address to, uint256 value) internal {\n        assert(token.transfer(to, value));\n    }\n\n    function safeTransferFrom(\n        ERC20 token,\n        address from,\n        address to,\n        uint256 value\n    )\n    internal\n    {\n        assert(token.transferFrom(from, to, value));\n    }\n\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n        assert(token.approve(spender, value));\n    }\n}\n\n\ncontract StandardToken is ERC20, Ownable {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    bool public transfersEnabled = false;\n\n\n    event Burn(address indexed burner, uint256 value);\n\n\n    modifier whenTransfersEnabled {\n        require(transfersEnabled || msg.sender == owner);\n        _;\n    }\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) whenTransfersEnabled public returns (bool) {\n        return _transfer(msg.sender, _to, _value);\n    }\n\n\n    function _transfer(address _from, address _to, uint256 _value)  internal returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) whenTransfersEnabled public returns (bool) {\n        require(_value <= allowed[_from][msg.sender]);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        return _transfer(_from, _to, _value);\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) whenTransfersEnabled public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender)  public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseApproval(address _spender, uint _addedValue) whenTransfersEnabled  public returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseApproval(address _spender, uint _subtractedValue) whenTransfersEnabled public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n\n    function enableTransfers() onlyOwner external {\n        transfersEnabled = true;\n    }\n\n\n    function burn(uint256 _value) external {\n        _burn(msg.sender, _value);\n    }\n\n    function _burn(address _who, uint256 _value) internal {\n        require(_value <= balances[_who]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        balances[_who] = balances[_who].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        emit Burn(_who, _value);\n        emit Transfer(_who, address(0), _value);\n    }\n\n}\n\n\ncontract BNSToken is StandardToken {\n    string public constant name = \"Basis Neuro System Token\";\n    string public constant symbol = \"BNST\";\n    uint8 public constant decimals = 18;\n\n\n    uint256 public constant INITIAL_SUPPLY = 3000000000  * (10 ** uint256(decimals));\n\n\n    function BNSToken() public {\n        totalSupply = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n    }\n}",
  "bytecode": "60606040526004805460ff19169055341561001957600080fd5b60018054600160a060020a03191633600160a060020a03169081179091556b09b18ab5df7180b6b800000060008181558281526002602052604080822083905590917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef915190815260200160405180910390a3610b238061009b6000396000f3006060604052600436106100f05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100f5578063095ea7b31461017f57806318160ddd146101b557806323b872dd146101da5780632ff2e9dc14610202578063313ce5671461021557806342966c681461023e578063661884631461025657806370a08231146102785780638da5cb5b1461029757806395d89b41146102c6578063a9059cbb146102d9578063af35c6c7146102fb578063bef97c871461030e578063d73dd62314610321578063dd62ed3e14610343578063f2fde38b14610368575b600080fd5b341561010057600080fd5b610108610387565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561014457808201518382015260200161012c565b50505050905090810190601f1680156101715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561018a57600080fd5b6101a1600160a060020a03600435166024356103be565b604051901515815260200160405180910390f35b34156101c057600080fd5b6101c8610454565b60405190815260200160405180910390f35b34156101e557600080fd5b6101a1600160a060020a036004358116906024351660443561045a565b341561020d57600080fd5b6101c861052b565b341561022057600080fd5b61022861053b565b60405160ff909116815260200160405180910390f35b341561024957600080fd5b610254600435610540565b005b341561026157600080fd5b6101a1600160a060020a036004351660243561054d565b341561028357600080fd5b6101c8600160a060020a0360043516610675565b34156102a257600080fd5b6102aa610690565b604051600160a060020a03909116815260200160405180910390f35b34156102d157600080fd5b61010861069f565b34156102e457600080fd5b6101a1600160a060020a03600435166024356106d6565b341561030657600080fd5b610254610715565b341561031957600080fd5b6101a161073f565b341561032c57600080fd5b6101a1600160a060020a0360043516602435610748565b341561034e57600080fd5b6101c8600160a060020a0360043581169060243516610817565b341561037357600080fd5b610254600160a060020a0360043516610842565b60408051908101604052601881527f4261736973204e6575726f2053797374656d20546f6b656e0000000000000000602082015281565b60045460009060ff16806103e0575060015433600160a060020a039081169116145b15156103eb57600080fd5b600160a060020a03338116600081815260036020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005481565b60045460009060ff168061047c575060015433600160a060020a039081169116145b151561048757600080fd5b600160a060020a03808516600090815260036020908152604080832033909416835292905220548211156104ba57600080fd5b600160a060020a03808516600090815260036020908152604080832033909416835292905220546104f1908363ffffffff6108dd16565b600160a060020a03808616600090815260036020908152604080832033909416835292905220556105238484846108ef565b949350505050565b6b09b18ab5df7180b6b800000081565b601281565b61054a33826109ea565b50565b600454600090819060ff1680610571575060015433600160a060020a039081169116145b151561057c57600080fd5b50600160a060020a03338116600090815260036020908152604080832093871683529290522054808311156105d857600160a060020a03338116600090815260036020908152604080832093881683529290529081205561060f565b6105e8818463ffffffff6108dd16565b600160a060020a033381166000908152600360209081526040808320938916835292905220555b600160a060020a0333811660008181526003602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526002602052604090205490565b600154600160a060020a031681565b60408051908101604052600481527f424e535400000000000000000000000000000000000000000000000000000000602082015281565b60045460009060ff16806106f8575060015433600160a060020a039081169116145b151561070357600080fd5b61070e3384846108ef565b9392505050565b60015433600160a060020a0390811691161461073057600080fd5b6004805460ff19166001179055565b60045460ff1681565b60045460009060ff168061076a575060015433600160a060020a039081169116145b151561077557600080fd5b600160a060020a033381166000908152600360209081526040808320938716835292905220546107ab908363ffffffff610ae816565b600160a060020a0333811660008181526003602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b60015433600160a060020a0390811691161461085d57600080fd5b600160a060020a038116151561087257600080fd5b600154600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000828211156108e957fe5b50900390565b6000600160a060020a038316151561090657600080fd5b600160a060020a03841660009081526002602052604090205482111561092b57600080fd5b600160a060020a038416600090815260026020526040902054610954908363ffffffff6108dd16565b600160a060020a038086166000908152600260205260408082209390935590851681522054610989908363ffffffff610ae816565b600160a060020a03808516600081815260026020526040908190209390935591908616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b600160a060020a038216600090815260026020526040902054811115610a0f57600080fd5b600160a060020a038216600090815260026020526040902054610a38908263ffffffff6108dd16565b600160a060020a03831660009081526002602052604081209190915554610a65908263ffffffff6108dd16565b600055600160a060020a0382167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58260405190815260200160405180910390a26000600160a060020a0383167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a35050565b60008282018381101561070e57fe00a165627a7a72305820015cbc20b4dfd2c5b33d84b0e05cbf3fda6d4fc51ab6b4dc55233783ff2394990029"
}