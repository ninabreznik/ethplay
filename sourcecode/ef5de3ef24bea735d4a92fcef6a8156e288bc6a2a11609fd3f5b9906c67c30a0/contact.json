{
  "address": "0xa759b460eb16d15b7e1f2623c638523d8a43cbd1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CbntCrowdsale",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-26\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(\n    ERC20Basic _token,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transfer(_to, _value));\n  }\n\n  function safeTransferFrom(\n    ERC20 _token,\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transferFrom(_from, _to, _value));\n  }\n\n  function safeApprove(\n    ERC20 _token,\n    address _spender,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.approve(_spender, _value));\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n/**\n * @title Roles\n * @author Francisco Giordano (@frangio)\n * @dev Library for managing addresses assigned to a Role.\n * See RBAC.sol for example usage.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an address access to this role\n   */\n  function add(Role storage _role, address _addr)\n    internal\n  {\n    _role.bearer[_addr] = true;\n  }\n\n  /**\n   * @dev remove an address' access to this role\n   */\n  function remove(Role storage _role, address _addr)\n    internal\n  {\n    _role.bearer[_addr] = false;\n  }\n\n  /**\n   * @dev check if an address has this role\n   * // reverts\n   */\n  function check(Role storage _role, address _addr)\n    internal\n    view\n  {\n    require(has(_role, _addr));\n  }\n\n  /**\n   * @dev check if an address has this role\n   * @return bool\n   */\n  function has(Role storage _role, address _addr)\n    internal\n    view\n    returns (bool)\n  {\n    return _role.bearer[_addr];\n  }\n}\n\n/**\n * @title RBAC (Role-Based Access Control)\n * @author Matt Condon (@Shrugs)\n * @dev Stores and provides setters and getters for roles and addresses.\n * Supports unlimited numbers of roles and addresses.\n * See //contracts/mocks/RBACMock.sol for an example of usage.\n * This RBAC method uses strings to key roles. It may be beneficial\n * for you to write your own implementation of this interface using Enums or similar.\n */\ncontract RBAC {\n  using Roles for Roles.Role;\n\n  mapping (string => Roles.Role) private roles;\n\n  event RoleAdded(address indexed operator, string role);\n  event RoleRemoved(address indexed operator, string role);\n\n  /**\n   * @dev reverts if addr does not have role\n   * @param _operator address\n   * @param _role the name of the role\n   * // reverts\n   */\n  function checkRole(address _operator, string _role)\n    public\n    view\n  {\n    roles[_role].check(_operator);\n  }\n\n  /**\n   * @dev determine if addr has role\n   * @param _operator address\n   * @param _role the name of the role\n   * @return bool\n   */\n  function hasRole(address _operator, string _role)\n    public\n    view\n    returns (bool)\n  {\n    return roles[_role].has(_operator);\n  }\n\n  /**\n   * @dev add a role to an address\n   * @param _operator address\n   * @param _role the name of the role\n   */\n  function addRole(address _operator, string _role)\n    internal\n  {\n    roles[_role].add(_operator);\n    emit RoleAdded(_operator, _role);\n  }\n\n  /**\n   * @dev remove a role from an address\n   * @param _operator address\n   * @param _role the name of the role\n   */\n  function removeRole(address _operator, string _role)\n    internal\n  {\n    roles[_role].remove(_operator);\n    emit RoleRemoved(_operator, _role);\n  }\n\n  /**\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\n   * @param _role the name of the role\n   * // reverts\n   */\n  modifier onlyRole(string _role)\n  {\n    checkRole(msg.sender, _role);\n    _;\n  }\n\n  /**\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\n   * @param _roles the names of the roles to scope access to\n   * // reverts\n   *\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\n   *  see: https://github.com/ethereum/solidity/issues/2467\n   */\n  // modifier onlyRoles(string[] _roles) {\n  //     bool hasAnyRole = false;\n  //     for (uint8 i = 0; i < _roles.length; i++) {\n  //         if (hasRole(msg.sender, _roles[i])) {\n  //             hasAnyRole = true;\n  //             break;\n  //         }\n  //     }\n\n  //     require(hasAnyRole);\n\n  //     _;\n  // }\n}\n\ncontract Crowdsale {\n using SafeMath for uint256;\n using SafeERC20 for ERC20;\n\n // The token being sold\n ERC20 public token;\n\n // Address where funds are collected\n address public wallet;\n\n // How many token units a buyer gets per wei.\n // The rate is the conversion between wei and the smallest and indivisible token unit.\n // So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK\n // 1 wei will give you 1 unit, or 0.001 TOK.\n uint256 public rate;\n\n // Amount of wei raised\n uint256 public weiRaised;\n\n /**\n  * Event for token purchase logging\n  * @param purchaser who paid for the tokens\n  * @param beneficiary who got the tokens\n  * @param value weis paid for purchase\n  * @param amount amount of tokens purchased\n  */\n event TokenPurchase(\n   address indexed purchaser,\n   address indexed beneficiary,\n   uint256 value,\n   uint256 amount\n );\n\n /**\n  * @param _rate Number of token units a buyer gets per wei\n  * @param _wallet Address where collected funds will be forwarded to\n  * @param _token Address of the token being sold\n  */\n constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n   require(_rate > 0);\n   require(_wallet != address(0));\n   require(_token != address(0));\n\n   rate = _rate;\n   wallet = _wallet;\n   token = _token;\n }\n\n // -----------------------------------------\n // Crowdsale external interface\n // -----------------------------------------\n\n /**\n  * @dev fallback function ***DO NOT OVERRIDE***\n  */\n function () external payable {\n   buyTokens(msg.sender);\n }\n\n /**\n  * @dev low level token purchase ***DO NOT OVERRIDE***\n  * @param _beneficiary Address performing the token purchase\n  */\n function buyTokens(address _beneficiary) public payable {\n\n   uint256 weiAmount = msg.value;\n   _preValidatePurchase(_beneficiary, weiAmount);\n\n   // calculate token amount to be created\n   uint256 tokens = _getTokenAmount(weiAmount);\n\n   // update state\n   weiRaised = weiRaised.add(weiAmount);\n\n   _processPurchase(_beneficiary, tokens);\n   emit TokenPurchase(\n     msg.sender,\n     _beneficiary,\n     weiAmount,\n     tokens\n   );\n\n   _updatePurchasingState(_beneficiary, weiAmount);\n\n   _forwardFunds();\n   _postValidatePurchase(_beneficiary, weiAmount);\n }\n\n // -----------------------------------------\n // Internal interface (extensible)\n // -----------------------------------------\n\n /**\n  * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.\n  * Example from CappedCrowdsale.sol's _preValidatePurchase method:\n  *   super._preValidatePurchase(_beneficiary, _weiAmount);\n  *   require(weiRaised.add(_weiAmount) <= cap);\n  * @param _beneficiary Address performing the token purchase\n  * @param _weiAmount Value in wei involved in the purchase\n  */\n function _preValidatePurchase(\n   address _beneficiary,\n   uint256 _weiAmount\n )\n   internal\n {\n   require(_beneficiary != address(0));\n   require(_weiAmount != 0);\n }\n\n /**\n  * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n  * @param _beneficiary Address performing the token purchase\n  * @param _weiAmount Value in wei involved in the purchase\n  */\n function _postValidatePurchase(\n   address _beneficiary,\n   uint256 _weiAmount\n )\n   internal\n {\n   // optional override\n }\n\n /**\n  * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n  * @param _beneficiary Address performing the token purchase\n  * @param _tokenAmount Number of tokens to be emitted\n  */\n function _deliverTokens(\n   address _beneficiary,\n   uint256 _tokenAmount\n )\n   internal\n {\n   token.safeTransfer(_beneficiary, _tokenAmount);\n }\n\n /**\n  * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n  * @param _beneficiary Address receiving the tokens\n  * @param _tokenAmount Number of tokens to be purchased\n  */\n function _processPurchase(\n   address _beneficiary,\n   uint256 _tokenAmount\n )\n   internal\n {\n   _deliverTokens(_beneficiary, _tokenAmount);\n }\n\n /**\n  * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n  * @param _beneficiary Address receiving the tokens\n  * @param _weiAmount Value in wei involved in the purchase\n  */\n function _updatePurchasingState(\n   address _beneficiary,\n   uint256 _weiAmount\n )\n   internal\n {\n   // optional override\n }\n\n /**\n  * @dev Override to extend the way in which ether is converted to tokens.\n  * @param _weiAmount Value in wei to be converted into tokens\n  * @return Number of tokens that can be purchased with the specified _weiAmount\n  */\n function _getTokenAmount(uint256 _weiAmount)\n   internal view returns (uint256)\n {\n   return _weiAmount.mul(rate);\n }\n\n /**\n  * @dev Determines how ETH is stored/forwarded on purchases.\n  */\n function _forwardFunds() internal {\n   wallet.transfer(msg.value);\n }\n}\n\ncontract TimedCrowdsale is Crowdsale {\n  using SafeMath for uint256;\n\n  uint256 public openingTime;\n  uint256 public closingTime;\n\n  /**\n   * @dev Reverts if not in crowdsale time range.\n   */\n  modifier onlyWhileOpen {\n    // solium-disable-next-line security/no-block-members\n    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n    _;\n  }\n\n  /**\n   * @dev Constructor, takes crowdsale opening and closing times.\n   * @param _openingTime Crowdsale opening time\n   * @param _closingTime Crowdsale closing time\n   */\n  constructor(uint256 _openingTime, uint256 _closingTime) public {\n    // solium-disable-next-line security/no-block-members\n    require(_openingTime >= block.timestamp);\n    require(_closingTime >= _openingTime);\n\n    openingTime = _openingTime;\n    closingTime = _closingTime;\n  }\n\n  /**\n   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n   * @return Whether crowdsale period has elapsed\n   */\n  function hasClosed() public view returns (bool) {\n    // solium-disable-next-line security/no-block-members\n    return block.timestamp > closingTime;\n  }\n\n  /**\n   * @dev Extend parent behavior requiring to be within contributing period\n   * @param _beneficiary Token purchaser\n   * @param _weiAmount Amount of wei contributed\n   */\n  function _preValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n    onlyWhileOpen\n  {\n    super._preValidatePurchase(_beneficiary, _weiAmount);\n  }\n\n}\n\ncontract Whitelist is Ownable, RBAC {\n  string public constant ROLE_WHITELISTED = \"whitelist\";\n\n  /**\n   * @dev Throws if operator is not whitelisted.\n   * @param _operator address\n   */\n  modifier onlyIfWhitelisted(address _operator) {\n    checkRole(_operator, ROLE_WHITELISTED);\n    _;\n  }\n\n  /**\n   * @dev add an address to the whitelist\n   * @param _operator address\n   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n   */\n  function addAddressToWhitelist(address _operator)\n    public\n    onlyOwner\n  {\n    addRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev getter to determine if address is in whitelist\n   */\n  function whitelist(address _operator)\n    public\n    view\n    returns (bool)\n  {\n    return hasRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev add addresses to the whitelist\n   * @param _operators addresses\n   * @return true if at least one address was added to the whitelist,\n   * false if all addresses were already in the whitelist\n   */\n  function addAddressesToWhitelist(address[] _operators)\n    public\n    onlyOwner\n  {\n    for (uint256 i = 0; i < _operators.length; i++) {\n      addAddressToWhitelist(_operators[i]);\n    }\n  }\n\n  /**\n   * @dev remove an address from the whitelist\n   * @param _operator address\n   * @return true if the address was removed from the whitelist,\n   * false if the address wasn't in the whitelist in the first place\n   */\n  function removeAddressFromWhitelist(address _operator)\n    public\n    onlyOwner\n  {\n    removeRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev remove addresses from the whitelist\n   * @param _operators addresses\n   * @return true if at least one address was removed from the whitelist,\n   * false if all addresses weren't in the whitelist in the first place\n   */\n  function removeAddressesFromWhitelist(address[] _operators)\n    public\n    onlyOwner\n  {\n    for (uint256 i = 0; i < _operators.length; i++) {\n      removeAddressFromWhitelist(_operators[i]);\n    }\n  }\n\n}\n\ncontract WhitelistedCrowdsale is Whitelist, Crowdsale {\n  /**\n   * @dev Extend parent behavior requiring beneficiary to be in whitelist.\n   * @param _beneficiary Token beneficiary\n   * @param _weiAmount Amount of wei contributed\n   */\n  function _preValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n    onlyIfWhitelisted(_beneficiary)\n  {\n    super._preValidatePurchase(_beneficiary, _weiAmount);\n  }\n\n}\n\ncontract CbntCrowdsale is TimedCrowdsale, WhitelistedCrowdsale {\n using SafeMath for uint256;\n\n\n struct FutureTransaction{\n   address beneficiary;\n   uint256 num;\n   uint32  times;\n   uint256 lastTime;\n }\n FutureTransaction[] public futureTrans;\n uint256 public oweCbnt;\n\n uint256[] public rateSteps;\n uint256[] public rateStepsValue;\n uint32[] public regularTransTime;\n uint32 public transTimes;\n\n uint256 public minInvest;\n\n/**\n  * @param _openingTime Crowdsale opening time\n  * @param _closingTime Crowdsale closing time\n  * @param _rate Number of token units a buyer gets per wei\n  * @param _wallet Address where collected funds will be forwarded to\n  * @param _token Address of the token being sold\n  */\n constructor(uint256 _openingTime, uint256 _closingTime, uint256 _rate, address _wallet, ERC20 _token) TimedCrowdsale(_openingTime,_closingTime) Crowdsale(_rate,_wallet, _token) public {\n  // Crowdsale(uint256(1),_wallet, _token);\n   //TimedCrowdsale(_openingTime,_closingTime);\n }\n\n /** external functions **/\n function triggerTransaction(uint256 beginIdx, uint256 endIdx) public returns (bool){\n   uint32 regularTime = findRegularTime();\n   require(regularTime > 0 && endIdx < futureTrans.length);\n\n   bool bRemove = false;\n   uint256 i = 0;\n   for(i = beginIdx; i<=endIdx && i<futureTrans.length; ){\n     bRemove = false;\n     if(futureTrans[i].lastTime < regularTime){  // need to set the regularTime again when it comes late than the last regularTime\n        uint256 transNum = futureTrans[i].num;\n        address beneficiary = futureTrans[i].beneficiary;\n        //update data\n\n        futureTrans[i].lastTime = now;\n        futureTrans[i].times = futureTrans[i].times - 1;\n        require(futureTrans[i].times <= transTimes);\n\n        // remove item if it is the last time transaction\n        if(futureTrans[i].times ==0 ){\n           bRemove = true;\n           futureTrans[i].beneficiary = futureTrans[futureTrans.length -1].beneficiary;\n           futureTrans[i].num = futureTrans[futureTrans.length -1].num;\n           futureTrans[i].lastTime = futureTrans[futureTrans.length -1].lastTime;\n           futureTrans[i].times = futureTrans[futureTrans.length -1].times;\n           futureTrans.length = futureTrans.length.sub(1);\n        }\n           // transfer token\n        oweCbnt = oweCbnt.sub(transNum);\n        _deliverTokens(beneficiary, transNum);\n     }\n\n     if(!bRemove){\n       i++;\n     }\n   }\n\n   return true;\n\n }\n function transferBonus(address _beneficiary, uint256 _tokenAmount) public onlyOwner returns(bool){\n   _deliverTokens(_beneficiary, _tokenAmount);\n   return true;\n }\n\n // need to set this param before start business\n function setMinInvest(uint256 _minInvest) public onlyOwner returns (bool){\n   minInvest = _minInvest;\n   return true;\n }\n\n // need to set this param before start business\n function setTransTimes(uint32 _times) public onlyOwner returns (bool){\n   transTimes = _times;\n   return true;\n }\n\n function setRegularTransTime(uint32[] _times) public onlyOwner returns (bool){\n   for (uint256 i = 0; i + 1 < _times.length; i++) {\n       require(_times[i] < _times[i+1]);\n   }\n\n   regularTransTime = _times;\n   return true;\n }\n\n // need to set this param before start business\n function setRateSteps(uint256[] _steps, uint256[] _stepsValue) public onlyOwner returns (bool){\n   require(_steps.length == _stepsValue.length);\n   for (uint256 i = 0; i + 1 < _steps.length; i++) {\n       require(_steps[i] > _steps[i+1]);\n   }\n\n   rateSteps = _steps;\n   rateStepsValue = _stepsValue;\n   return true;\n }\n\n // need to check these params before start business\n function normalCheck() public view returns (bool){\n   return (transTimes > 0 && regularTransTime.length > 0 && minInvest >0 && rateSteps.length >0);\n }\n\n function getFutureTransLength() public view returns(uint256) {\n     return futureTrans.length;\n }\n function getFutureTransByIdx(uint256 _idx) public view returns(address,uint256, uint32, uint256) {\n     return (futureTrans[_idx].beneficiary, futureTrans[_idx].num, futureTrans[_idx].times, futureTrans[_idx].lastTime);\n }\n function getFutureTransIdxByAddress(address _beneficiary) public view returns(uint256[]) {\n     uint256 i = 0;\n     uint256 num = 0;\n     for(i=0; i<futureTrans.length; i++){\n       if(futureTrans[i].beneficiary == _beneficiary){\n           num++;\n       }\n     }\n     uint256[] memory transList = new uint256[](num);\n\n     uint256 idx = 0;\n     for(i=0; i<futureTrans.length; i++){\n       if(futureTrans[i].beneficiary == _beneficiary){\n         transList[idx] = i;\n         idx++;\n       }\n     }\n     return transList;\n }\n\n /** internal functions **/\n /**\n  * @dev Returns the rate of tokens per wei.\n  * Note that, as price _increases_ with invest number, the rate _increases_.\n  * @param _weiAmount The value in wei to be converted into tokens\n  * @return The number of tokens a buyer gets per wei\n  */\n function getCurrentRate(uint256 _weiAmount) public view returns (uint256) {\n   for (uint256 i = 0; i < rateSteps.length; i++) {\n       if (_weiAmount >= rateSteps[i]) {\n           return rateStepsValue[i];\n       }\n   }\n   return 0;\n }\n\n /**\n  * @dev Overrides parent method taking into account variable rate.\n  * @param _weiAmount The value in wei to be converted into tokens\n  * @return The number of tokens _weiAmount wei will send at present time\n  */\n function _getTokenAmount(uint256 _weiAmount)\n   internal view returns (uint256)\n {\n   uint256 currentRate = getCurrentRate(_weiAmount);\n   return currentRate.mul(_weiAmount).div(transTimes);\n }\n\n /**\n  * @dev Extend parent behavior requiring to be within contributing period\n  * @param _beneficiary Token purchaser\n  * @param _weiAmount Amount of wei contributed\n  */\n function _preValidatePurchase(\n   address _beneficiary,\n   uint256 _weiAmount\n )\n   internal\n {\n   require(msg.value >= minInvest);\n   super._preValidatePurchase(_beneficiary, _weiAmount);\n }\n\n /**\n  * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n  * @param _beneficiary Address receiving the tokens\n  * @param _tokenAmount Number of tokens to be purchased\n  */\n function _processPurchase(\n   address _beneficiary,\n   uint256 _tokenAmount\n )\n   internal\n {\n   // update the future transactions for future using.\n   FutureTransaction memory tran = FutureTransaction(_beneficiary, _tokenAmount, transTimes-1, now); // the trtanstimes always lagger than 0\n   futureTrans.push(tran);\n\n   //update owe cbnt\n   oweCbnt = oweCbnt.add(_tokenAmount.mul(tran.times));\n   super._processPurchase(_beneficiary, _tokenAmount);\n }\n\n function findRegularTime() internal view returns (uint32) {\n   if(now < regularTransTime[0]){\n     return 0;\n   }\n\n   uint256 i = 0;\n   while(i<regularTransTime.length && now >= regularTransTime[i]){\n     i++;\n   }\n\n   return regularTransTime[i -1];\n\n }\n\n}",
  "bytecode": "608060405234801561001057600080fd5b5060405160a080611f3b8339810160409081528151602083015191830151606084015160809094015160008054600160a060020a031916331781559294919285908590859085908590831161006457600080fd5b600160a060020a038216151561007957600080fd5b600160a060020a038116151561008e57600080fd5b60049290925560038054600160a060020a03928316600160a060020a03199182161790915560028054929093169116179055428210156100cd57600080fd5b818110156100da57600080fd5b6006919091556007555050505050611e44806100f76000396000f3006080604052600436106101cc5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166304f30b3781146101d75780630988ca8c146102485780631515bc2b146102af57806318b919e9146102d8578063217fe6c61461036257806321c23836146103c957806324953eaa146103f3578063286dd3f5146104485780632c4e722e14610469578063335154ed1461047e5780634042b66f1461050c5780634b6753bc14610521578063521eb273146105365780635acee3d61461056757806363fd9e381461057c578063715018a6146105915780637b9417c8146105a65780638da5cb5b146105c757806391c27b2a146105dc5780639895dd78146105fa5780639b19251a1461064f578063b0669b2514610670578063b1fc739e14610688578063b7a8807c1461069d578063b88a529b146106b2578063b8fe6f93146106ca578063d0ae9aec146106e5578063d64e0cd9146106fd578063dd00b6051461074a578063e0e01eb51461075f578063e2ec6ec31461078d578063e7d11a44146107e2578063ec8ac4d8146107fa578063f2fde38b1461080e578063f9fb3c951461082f578063fc0c546a14610853578063fceb5ad414610868575b6101d533610880565b005b3480156101e357600080fd5b506101f8600160a060020a0360043516610922565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561023457818101518382015260200161021c565b505050509050019250505060405180910390f35b34801561025457600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526101d5958335600160a060020a0316953695604494919390910191908190840183828082843750949750610a299650505050505050565b3480156102bb57600080fd5b506102c4610a97565b604080519115158252519081900360200190f35b3480156102e457600080fd5b506102ed610aa0565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561032757818101518382015260200161030f565b50505050905090810190601f1680156103545780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561036e57600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526102c4958335600160a060020a0316953695604494919390910191908190840183828082843750949750610ac59650505050505050565b3480156103d557600080fd5b506103e1600435610b3a565b60408051918252519081900360200190f35b3480156103ff57600080fd5b50604080516020600480358082013583810280860185019096528085526101d595369593946024949385019291829185019084908082843750949750610b599650505050505050565b34801561045457600080fd5b506101d5600160a060020a0360043516610ba6565b34801561047557600080fd5b506103e1610bed565b34801561048a57600080fd5b50604080516020600480358082013583810280860185019096528085526102c495369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750610bf39650505050505050565b34801561051857600080fd5b506103e1610ca2565b34801561052d57600080fd5b506103e1610ca8565b34801561054257600080fd5b5061054b610cae565b60408051600160a060020a039092168252519081900360200190f35b34801561057357600080fd5b506103e1610cbd565b34801561058857600080fd5b506103e1610cc3565b34801561059d57600080fd5b506101d5610cc9565b3480156105b257600080fd5b506101d5600160a060020a0360043516610d35565b3480156105d357600080fd5b5061054b610d79565b3480156105e857600080fd5b506102c463ffffffff60043516610d88565b34801561060657600080fd5b50604080516020600480358082013583810280860185019096528085526102c495369593946024949385019291829185019084908082843750949750610dbf9650505050505050565b34801561065b57600080fd5b506102c4600160a060020a0360043516610e59565b34801561067c57600080fd5b506103e1600435610e88565b34801561069457600080fd5b506103e1610e96565b3480156106a957600080fd5b506103e1610e9c565b3480156106be57600080fd5b506103e1600435610ea2565b3480156106d657600080fd5b506102c4600435602435610f02565b3480156106f157600080fd5b506102c460043561129b565b34801561070957600080fd5b506107156004356112bc565b60408051600160a060020a039095168552602085019390935263ffffffff909116838301526060830152519081900360800190f35b34801561075657600080fd5b506102c4611304565b34801561076b57600080fd5b50610774611341565b6040805163ffffffff9092168252519081900360200190f35b34801561079957600080fd5b50604080516020600480358082013583810280860185019096528085526101d59536959394602494938501929182918501908490808284375094975061134d9650505050505050565b3480156107ee57600080fd5b5061071560043561139a565b6101d5600160a060020a0360043516610880565b34801561081a57600080fd5b506101d5600160a060020a0360043516611447565b34801561083b57600080fd5b506102c4600160a060020a0360043516602435611467565b34801561085f57600080fd5b5061054b611492565b34801561087457600080fd5b506107746004356114a1565b34600061088d83836114d9565b610896826114f2565b6005549091506108ac908363ffffffff61153216565b6005556108b9838261153f565b60408051838152602081018390528151600160a060020a0386169233927f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad18929081900390910190a361090b8383610a93565b610913611696565b61091d8383610a93565b505050565b606060008082815b60085484101561097f5785600160a060020a031660088581548110151561094d57fe5b6000918252602090912060049091020154600160a060020a03161415610974576001909201915b60019093019261092a565b826040519080825280602002602001820160405280156109a9578160200160208202803883390190505b50915060009050600093505b600854841015610a205785600160a060020a03166008858154811015156109d857fe5b6000918252602090912060049091020154600160a060020a03161415610a1557838282815181101515610a0757fe5b602090810290910101526001015b6001909301926109b5565b50949350505050565b610a93826001836040518082805190602001908083835b60208310610a5f5780518252601f199092019160209182019101610a40565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220929150506116cf565b5050565b60075442115b90565b6040805180820190915260098152600080516020611df9833981519152602082015281565b6000610b31836001846040518082805190602001908083835b60208310610afd5780518252601f199092019160209182019101610ade565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220929150506116e4565b90505b92915050565b600a805482908110610b4857fe5b600091825260209091200154905081565b60008054600160a060020a03163314610b7157600080fd5b5060005b8151811015610a9357610b9e8282815181101515610b8f57fe5b90602001906020020151610ba6565b600101610b75565b600054600160a060020a03163314610bbd57600080fd5b610bea81604080519081016040528060098152602001600080516020611df9833981519152815250611703565b50565b60045481565b600080548190600160a060020a03163314610c0d57600080fd5b8251845114610c1b57600080fd5b5060005b8351816001011015610c70578381600101815181101515610c3c57fe5b906020019060200201518482815181101515610c5457fe5b6020908102909101015111610c6857600080fd5b600101610c1f565b8351610c8390600a906020870190611c2a565b508251610c9790600b906020860190611c2a565b506001949350505050565b60055481565b60075481565b600354600160a060020a031681565b60085490565b600e5481565b600054600160a060020a03163314610ce057600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a03163314610d4c57600080fd5b610bea81604080519081016040528060098152602001600080516020611df9833981519152815250611814565b600054600160a060020a031681565b60008054600160a060020a03163314610da057600080fd5b50600d805463ffffffff831663ffffffff199091161790556001919050565b600080548190600160a060020a03163314610dd957600080fd5b5060005b8251816001011015610e3a578281600101815181101515610dfa57fe5b9060200190602002015163ffffffff168382815181101515610e1857fe5b6020908102909101015163ffffffff1610610e3257600080fd5b600101610ddd565b8251610e4d90600c906020860190611c71565b50600191505b50919050565b6000610b3482604080519081016040528060098152602001600080516020611df9833981519152815250610ac5565b600b805482908110610b4857fe5b60095481565b60065481565b6000805b600a54811015610ef957600a805482908110610ebe57fe5b906000526020600020015483101515610ef157600b805482908110610edf57fe5b90600052602060002001549150610e53565b600101610ea6565b50600092915050565b600080600080600080610f136118e6565b945060008563ffffffff16118015610f2c575060085487105b1515610f3757600080fd5b600093508792505b868311158015610f50575060085483105b1561128d57600093508463ffffffff16600884815481101515610f6f57fe5b906000526020600020906004020160030154101561127a576008805484908110610f9557fe5b9060005260206000209060040201600101549150600883815481101515610fb857fe5b600091825260209091206004909102015460088054600160a060020a039092169250429185908110610fe657fe5b906000526020600020906004020160030181905550600160088481548110151561100c57fe5b906000526020600020906004020160020160009054906101000a900463ffffffff160360088481548110151561103e57fe5b60009182526020909120600490910201600201805463ffffffff191663ffffffff928316179055600d54600880549190921691908590811061107c57fe5b600091825260209091206002600490920201015463ffffffff1611156110a157600080fd5b60088054849081106110af57fe5b600091825260209091206002600490920201015463ffffffff16151561125a57600880546001955060001981019081106110e557fe5b600091825260209091206004909102015460088054600160a060020a03909216918590811061111057fe5b60009182526020909120600490910201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905560088054600019810190811061115d57fe5b90600052602060002090600402016001015460088481548110151561117e57fe5b60009182526020909120600160049092020101556008805460001981019081106111a457fe5b9060005260206000209060040201600301546008848154811015156111c557fe5b60009182526020909120600360049092020101556008805460001981019081106111eb57fe5b60009182526020909120600260049092020101546008805463ffffffff909216918590811061121657fe5b60009182526020909120600490910201600201805463ffffffff191663ffffffff92831617905560085461124d916001906119bf16565b611258600882611d1c565b505b60095461126d908363ffffffff6119bf16565b60095561127a81836119d1565b831515611288576001909201915b610f3f565b506001979650505050505050565b60008054600160a060020a031633146112b357600080fd5b50600e55600190565b60088054829081106112ca57fe5b60009182526020909120600490910201805460018201546002830154600390930154600160a060020a0390921693509163ffffffff169084565b600d5460009063ffffffff16811080156113205750600c546000105b801561132e57506000600e54115b801561133c5750600a546000105b905090565b600d5463ffffffff1681565b60008054600160a060020a0316331461136557600080fd5b5060005b8151811015610a9357611392828281518110151561138357fe5b90602001906020020151610d35565b600101611369565b6000806000806008858154811015156113af57fe5b600091825260209091206004909102015460088054600160a060020a0390921691879081106113da57fe5b9060005260206000209060040201600101546008878154811015156113fb57fe5b60009182526020909120600260049092020101546008805463ffffffff909216918990811061142657fe5b90600052602060002090600402016003015493509350935093509193509193565b600054600160a060020a0316331461145e57600080fd5b610bea816119ee565b60008054600160a060020a0316331461147f57600080fd5b61148983836119d1565b50600192915050565b600254600160a060020a031681565b600c8054829081106114af57fe5b9060005260206000209060089182820401919006600402915054906101000a900463ffffffff1681565b600e543410156114e857600080fd5b610a938282611a6b565b6000806114fe83610ea2565b600d5490915061152b9063ffffffff9081169061151f9084908790611aa316565b9063ffffffff611acc16565b9392505050565b81810182811015610b3457fe5b611547611d48565b5060408051608081018252600160a060020a03848116825260208201848152600d5463ffffffff90811660001901811694840194855242606085019081526008805460018101825560009190915285517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee36004909202918201805473ffffffffffffffffffffffffffffffffffffffff1916919096161790945591517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee484015593517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee58301805463ffffffff1916918616918217905590517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee69092019190915590916116899161167a91859190611aa316565b6009549063ffffffff61153216565b60095561091d8383611ae1565b600354604051600160a060020a03909116903480156108fc02916000818181858888f19350505050158015610bea573d6000803e3d6000fd5b6116d982826116e4565b1515610a9357600080fd5b600160a060020a03166000908152602091909152604090205460ff1690565b61176d826001836040518082805190602001908083835b602083106117395780518252601f19909201916020918201910161171a565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922092915050611aeb565b81600160a060020a03167fd211483f91fc6eff862467f8de606587a30c8fc9981056f051b897a418df803a826040518080602001828103825283818151815260200191508051906020019080838360005b838110156117d65781810151838201526020016117be565b50505050905090810190601f1680156118035780820380516001836020036101000a031916815260200191505b509250505060405180910390a25050565b61187e826001836040518082805190602001908083835b6020831061184a5780518252601f19909201916020918201910161182b565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922092915050611b0d565b81600160a060020a03167fbfec83d64eaa953f2708271a023ab9ee82057f8f3578d548c1a4ba0b5b70048982604051808060200182810382528381815181526020019150805190602001908083836000838110156117d65781810151838201526020016117be565b600080600c60008154811015156118f957fe5b6000918252602090912060088204015460079091166004026101000a900463ffffffff1642101561192d57600091506119bb565b5060005b600c54811080156119735750600c80548290811061194b57fe5b6000918252602090912060088204015460079091166004026101000a900463ffffffff164210155b1561198057600101611931565b600c8054600019830190811061199257fe5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1691505b5090565b6000828211156119cb57fe5b50900390565b600254610a9390600160a060020a0316838363ffffffff611b3216565b600160a060020a0381161515611a0357600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b81611a9981604080519081016040528060098152602001600080516020611df9833981519152815250610a29565b61091d8383611be5565b6000821515611ab457506000610b34565b50818102818382811515611ac457fe5b0414610b3457fe5b60008183811515611ad957fe5b049392505050565b610a9382826119d1565b600160a060020a0316600090815260209190915260409020805460ff19169055565b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b82600160a060020a031663a9059cbb83836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015611bae57600080fd5b505af1158015611bc2573d6000803e3d6000fd5b505050506040513d6020811015611bd857600080fd5b5051151561091d57600080fd5b6006544210158015611bf957506007544211155b1515611c0457600080fd5b610a938282600160a060020a0382161515611c1e57600080fd5b801515610a9357600080fd5b828054828255906000526020600020908101928215611c65579160200282015b82811115611c65578251825591602001919060010190611c4a565b506119bb929150611d6f565b82805482825590600052602060002090600701600890048101928215611d105791602002820160005b83821115611cde57835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302611c9a565b8015611d0e5782816101000a81549063ffffffff0219169055600401602081600301049283019260010302611cde565b505b506119bb929150611d89565b81548183558181111561091d5760040281600402836000526020600020918201910161091d9190611daa565b60408051608081018252600080825260208201819052918101829052606081019190915290565b610a9d91905b808211156119bb5760008155600101611d75565b610a9d91905b808211156119bb57805463ffffffff19168155600101611d8f565b610a9d91905b808211156119bb57805473ffffffffffffffffffffffffffffffffffffffff1916815560006001820181905560028201805463ffffffff191690556003820155600401611db0560077686974656c6973740000000000000000000000000000000000000000000000a165627a7a723058204d0bb38b6bea67ad54e9d4d4062d0ee34443d78fb5b59e19a899aeab48a5d5270029000000000000000000000000000000000000000000000000000000005bab2060000000000000000000000000000000000000000000000000000000006e7ba4800000000000000000000000000000000000000000000000000000000000000001000000000000000000000000ed1fc57ec62d542e5fe926fde640d42eeeb3b3ec0000000000000000000000001274a04257f6de10fc71559c85e881187e43b10f",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000005bab2060000000000000000000000000000000000000000000000000000000006e7ba4800000000000000000000000000000000000000000000000000000000000000001000000000000000000000000ed1fc57ec62d542e5fe926fde640d42eeeb3b3ec0000000000000000000000001274a04257f6de10fc71559c85e881187e43b10f"
}