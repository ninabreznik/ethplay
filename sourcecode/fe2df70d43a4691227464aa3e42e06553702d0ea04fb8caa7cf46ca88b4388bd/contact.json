{
  "address": "0x4aa31350abd22345150f1b9f4e48e76a3bbb65f0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ICOTH",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-05\n*/\n\npragma solidity ^0.4.23;\n\ncontract ERC20 {\n    function totalSupply() public view returns (uint256);\n\n    function balanceOf(address who) public view returns (uint256);\n\n    function transfer(address to, uint256 value) public returns (bool);\n\n    function allowance(address owner, address spender) public view returns (uint256);\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n\n    function approve(address spender, uint256 value) public returns (bool);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\n/**\n * @title ERC827 interface, an extension of ERC20 token standard\n *\n * @dev Interface of a ERC827 token, following the ERC20 standard with extra\n * @dev methods to transfer value and data and execute calls in transfers and\n * @dev approvals.\n */\ncontract ERC827 is ERC20 {\n    function approveAndCall(address _spender, uint256 _value, bytes _data) public payable returns (bool);\n\n    function transferAndCall(address _to, uint256 _value, bytes _data) public payable returns (bool);\n\n    function transferFromAndCall(address _from, address _to, uint256 _value, bytes _data) public payable returns (bool);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two numbers, throws on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n    /**\n     * @dev Integer division of two numbers, truncating the quotient.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n    /**\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n    /**\n     * @dev Adds two numbers, throws on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title Standard ERC20 token\n *\n */\ncontract ERC20Token is ERC20 {\n    using SafeMath for uint256;\n    mapping(address => mapping(address => uint256)) internal allowed;\n    mapping(address => uint256) balances;\n    uint256 totalSupply_;\n    /**\n     * @dev total number of tokens in existence\n     */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n    /**\n     * @dev transfer token for a specified address\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param _owner The address to query the the balance of.\n     * @return An uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n}\n\n/**\n * @title ERC827, an extension of ERC20 token standard\n *\n * @dev Implementation the ERC827, following the ERC20 standard with extra\n * @dev methods to transfer value and data and execute calls in transfers and\n * @dev approvals.\n *\n * @dev Uses OpenZeppelin StandardToken.\n */\ncontract ERC827Token is ERC827, ERC20Token {\n    /**\n     * @dev Addition to ERC20 token methods. It allows to\n     * @dev approve the transfer of value and execute a call with the sent data.\n     *\n     * @dev Beware that changing an allowance with this method brings the risk that\n     * @dev someone may use both the old and the new allowance by unfortunate\n     * @dev transaction ordering. One possible solution to mitigate this race condition\n     * @dev is to first reduce the spender's allowance to 0 and set the desired value\n     * @dev afterwards:\n     * @dev https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * @param _spender The address that will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     * @param _data ABI-encoded contract call to call `_to` address.\n     *\n     * @return true if the call function was executed successfully\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _data) public payable returns (bool) {\n        require(_spender != address(this));\n        super.approve(_spender, _value);\n        // solium-disable-next-line security/no-call-value\n        require(_spender.call.value(msg.value)(_data));\n        return true;\n    }\n    /**\n     * @dev Addition to ERC20 token methods. Transfer tokens to a specified\n     * @dev address and execute a call with the sent data on the same transaction\n     *\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amout of tokens to be transfered\n     * @param _data ABI-encoded contract call to call `_to` address.\n     *\n     * @return true if the call function was executed successfully\n     */\n    function transferAndCall(address _to, uint256 _value, bytes _data) public payable returns (bool) {\n        require(_to != address(this));\n        super.transfer(_to, _value);\n        require(_to.call.value(msg.value)(_data));\n        return true;\n    }\n    /**\n     * @dev Addition to ERC20 token methods. Transfer tokens from one address to\n     * @dev another and make a contract call on the same transaction\n     *\n     * @param _from The address which you want to send tokens from\n     * @param _to The address which you want to transfer to\n     * @param _value The amout of tokens to be transferred\n     * @param _data ABI-encoded contract call to call `_to` address.\n     *\n     * @return true if the call function was executed successfully\n     */\n    function transferFromAndCall(address _from, address _to, uint256 _value, bytes _data) public payable returns (bool) {\n        require(_to != address(this));\n        super.transferFrom(_from, _to, _value);\n        require(_to.call.value(msg.value)(_data));\n        return true;\n    }\n    /**\n     * @dev Addition to StandardToken methods. Increase the amount of tokens that\n     * @dev an owner allowed to a spender and execute a call with the sent data.\n     *\n     * @dev approve should be called when allowed[_spender] == 0. To increment\n     * @dev allowed value is better to use this function to avoid 2 calls (and wait until\n     * @dev the first transaction is mined)\n     * @dev From MonolithDAO Token.sol\n     *\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     * @param _data ABI-encoded contract call to call `_spender` address.\n     */\n    function increaseApprovalAndCall(address _spender, uint _addedValue, bytes _data) public payable returns (bool) {\n        require(_spender != address(this));\n        super.increaseApproval(_spender, _addedValue);\n        require(_spender.call.value(msg.value)(_data));\n        return true;\n    }\n    /**\n     * @dev Addition to StandardToken methods. Decrease the amount of tokens that\n     * @dev an owner allowed to a spender and execute a call with the sent data.\n     *\n     * @dev approve should be called when allowed[_spender] == 0. To decrement\n     * @dev allowed value is better to use this function to avoid 2 calls (and wait until\n     * @dev the first transaction is mined)\n     * @dev From MonolithDAO Token.sol\n     *\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     * @param _data ABI-encoded contract call to call `_spender` address.\n     */\n    function decreaseApprovalAndCall(address _spender, uint _subtractedValue, bytes _data) public payable returns (bool) {\n        require(_spender != address(this));\n        super.decreaseApproval(_spender, _subtractedValue);\n        require(_spender.call.value(msg.value)(_data));\n        return true;\n    }\n}\n\n/**\n * @title  Burnable and Pause Token\n * @dev    StandardToken modified with pausable transfers.\n */\ncontract PauseBurnableERC827Token is ERC827Token, Ownable {\n    using SafeMath for uint256;\n    event Pause();\n    event Unpause();\n    event PauseOperatorTransferred(address indexed previousOperator, address indexed newOperator);\n    event Burn(address indexed burner, uint256 value);\n\n    bool public paused = false;\n    address public pauseOperator;\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyPauseOperator() {\n        require(msg.sender == pauseOperator || msg.sender == owner);\n        _;\n    }\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n    /**\n     * @dev The constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        pauseOperator = msg.sender;\n    }\n    /**\n     * @dev called by the operator to set the new operator to pause the token\n     */\n    function transferPauseOperator(address newPauseOperator) onlyPauseOperator public {\n        require(newPauseOperator != address(0));\n        emit PauseOperatorTransferred(pauseOperator, newPauseOperator);\n        pauseOperator = newPauseOperator;\n    }\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() onlyPauseOperator whenNotPaused public {\n        paused = true;\n        emit Pause();\n    }\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() onlyPauseOperator whenPaused public {\n        paused = false;\n        emit Unpause();\n    }\n\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n        return super.approve(_spender, _value);\n    }\n\n    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n        return super.increaseApproval(_spender, _addedValue);\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n        return super.decreaseApproval(_spender, _subtractedValue);\n    }\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public whenNotPaused {\n        _burn(msg.sender, _value);\n    }\n\n    function _burn(address _who, uint256 _value) internal {\n        require(_value <= balances[_who]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n        balances[_who] = balances[_who].sub(_value);\n        // Subtract from the sender\n        totalSupply_ = totalSupply_.sub(_value);\n        emit Burn(_who, _value);\n        emit Transfer(_who, address(0), _value);\n    }\n    /**\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n     * @param _from address The address which you want to send tokens from\n     * @param _value uint256 The amount of token to be burned\n     */\n    function burnFrom(address _from, uint256 _value) public whenNotPaused {\n        require(_value <= allowed[_from][msg.sender]);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        _burn(_from, _value);\n    }\n}\n\ncontract ICOTH is PauseBurnableERC827Token {\n    string  public constant name = \"ICOTH\";\n    string  public constant symbol = \"i\";\n    uint8   public constant decimals = 18;\n    uint256 public constant INITIAL_SUPPLY = 10000000000 * (10 ** uint256(decimals));\n    /**\n     * @dev Constructor that gives msg.sender all of existing tokens.\n     */\n    constructor() public {\n        totalSupply_ = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n    }\n    function batchTransfer(address[] _tos, uint256 _value) public whenNotPaused returns (bool) {\n        uint256 all = _value.mul(_tos.length);\n        require(balances[msg.sender] >= all);\n        for (uint i = 0; i < _tos.length; i++) {\n            require(_tos[i] != address(0));\n            require(_tos[i] != msg.sender);\n            balances[_tos[i]] = balances[_tos[i]].add(_value);\n            emit Transfer(msg.sender, _tos[i], _value);\n        }\n        balances[msg.sender] = balances[msg.sender].sub(all);\n        return true;\n    }\n\n    function multiTransfer(address[] _tos, uint256[] _values) public whenNotPaused returns (bool) {\n        require(_tos.length == _values.length);\n        uint256 all = 0;\n        for (uint i = 0; i < _tos.length; i++) {\n            require(_tos[i] != address(0));\n            require(_tos[i] != msg.sender);\n            all = all.add(_values[i]);\n            balances[_tos[i]] = balances[_tos[i]].add(_values[i]);\n            emit Transfer(msg.sender, _tos[i], _values[i]);\n        }\n        balances[msg.sender] = balances[msg.sender].sub(all);\n        return true;\n    }\n}",
  "bytecode": "60806040526003805460a060020a60ff021916905534801561002057600080fd5b506003805433600160a060020a0319918216811790925560048054909116821790556b204fce5e3e250261100000006002819055600082815260016020908152604080832084905580519384525191927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a36116f4806100aa6000396000f3006080604052600436106101695763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461016e578063095ea7b3146101f857806318160ddd146102305780631e89d5451461025757806323b872dd146102e55780632ff2e9dc1461030f578063313ce567146103245780633f4ba83a1461034f5780634000aea01461036657806342966c68146103c25780634afdcbde146103da5780635c975abb1461040b578063661884631461042057806370a082311461044457806379cc67901461046557806383f12fec146104895780638456cb59146104e05780638da5cb5b146104f557806390db623f1461050a57806395d89b4114610566578063a9059cbb1461057b578063c1d34b891461059f578063cae9ca5114610601578063cb3993be1461065d578063d73dd623146106b9578063dd62ed3e146106dd578063de223f6314610704578063f2fde38b14610725575b600080fd5b34801561017a57600080fd5b50610183610746565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101bd5781810151838201526020016101a5565b50505050905090810190601f1680156101ea5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020457600080fd5b5061021c600160a060020a036004351660243561077d565b604080519115158252519081900360200190f35b34801561023c57600080fd5b506102456107aa565b60408051918252519081900360200190f35b34801561026357600080fd5b506040805160206004803580820135838102808601850190965280855261021c95369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506107b09650505050505050565b3480156102f157600080fd5b5061021c600160a060020a03600435811690602435166044356109b2565b34801561031b57600080fd5b506102456109df565b34801561033057600080fd5b506103396109ef565b6040805160ff9092168252519081900360200190f35b34801561035b57600080fd5b506103646109f4565b005b604080516020600460443581810135601f810184900484028501840190955284845261021c948235600160a060020a0316946024803595369594606494920191908190840183828082843750949750610a839650505050505050565b3480156103ce57600080fd5b50610364600435610b33565b3480156103e657600080fd5b506103ef610b57565b60408051600160a060020a039092168252519081900360200190f35b34801561041757600080fd5b5061021c610b66565b34801561042c57600080fd5b5061021c600160a060020a0360043516602435610b76565b34801561045057600080fd5b50610245600160a060020a0360043516610b9a565b34801561047157600080fd5b50610364600160a060020a0360043516602435610bb5565b34801561049557600080fd5b506040805160206004803580820135838102808601850190965280855261021c953695939460249493850192918291850190849080828437509497505093359450610c5c9350505050565b3480156104ec57600080fd5b50610364610db9565b34801561050157600080fd5b506103ef610e4d565b604080516020600460443581810135601f810184900484028501840190955284845261021c948235600160a060020a0316946024803595369594606494920191908190840183828082843750949750610e5c9650505050505050565b34801561057257600080fd5b50610183610e7e565b34801561058757600080fd5b5061021c600160a060020a0360043516602435610eb5565b604080516020601f60643560048181013592830184900484028501840190955281845261021c94600160a060020a038135811695602480359092169560443595369560849401918190840183828082843750949750610ed99650505050505050565b604080516020600460443581810135601f810184900484028501840190955284845261021c948235600160a060020a0316946024803595369594606494920191908190840183828082843750949750610f8b9650505050505050565b604080516020600460443581810135601f810184900484028501840190955284845261021c948235600160a060020a0316946024803595369594606494920191908190840183828082843750949750610fad9650505050505050565b3480156106c557600080fd5b5061021c600160a060020a0360043516602435610fcf565b3480156106e957600080fd5b50610245600160a060020a0360043581169060243516610ff3565b34801561071057600080fd5b50610364600160a060020a036004351661101c565b34801561073157600080fd5b50610364600160a060020a03600435166110c8565b60408051808201909152600581527f49434f5448000000000000000000000000000000000000000000000000000000602082015281565b60035460009060a060020a900460ff161561079757600080fd5b6107a1838361115d565b90505b92915050565b60025490565b6003546000908190819060a060020a900460ff16156107ce57600080fd5b83518551146107dc57600080fd5b5060009050805b84518110156109735784516000908690839081106107fd57fe5b60209081029091010151600160a060020a0316141561081b57600080fd5b8451339086908390811061082b57fe5b60209081029091010151600160a060020a0316141561084957600080fd5b610871848281518110151561085a57fe5b60209081029091010151839063ffffffff6111c116565b91506108cf848281518110151561088457fe5b906020019060200201516001600088858151811015156108a057fe5b6020908102909101810151600160a060020a03168252810191909152604001600020549063ffffffff6111c116565b6001600087848151811015156108e157fe5b6020908102909101810151600160a060020a0316825281019190915260400160002055845185908290811061091257fe5b90602001906020020151600160a060020a031633600160a060020a03166000805160206116a9833981519152868481518110151561094c57fe5b906020019060200201516040518082815260200191505060405180910390a36001016107e3565b33600090815260016020526040902054610993908363ffffffff6111ce16565b3360009081526001602081905260409091209190915595945050505050565b60035460009060a060020a900460ff16156109cc57600080fd5b6109d78484846111e0565b949350505050565b6b204fce5e3e2502611000000081565b601281565b600454600160a060020a0316331480610a175750600354600160a060020a031633145b1515610a2257600080fd5b60035460a060020a900460ff161515610a3a57600080fd5b6003805474ff0000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b6000600160a060020a038416301415610a9b57600080fd5b610aa58484611342565b5083600160a060020a0316348360405180828051906020019080838360005b83811015610adc578181015183820152602001610ac4565b50505050905090810190601f168015610b095780820380516001836020036101000a031916815260200191505b5091505060006040518083038185875af1925050501515610b2957600080fd5b5060019392505050565b60035460a060020a900460ff1615610b4a57600080fd5b610b543382611413565b50565b600454600160a060020a031681565b60035460a060020a900460ff1681565b60035460009060a060020a900460ff1615610b9057600080fd5b6107a18383611502565b600160a060020a031660009081526001602052604090205490565b60035460a060020a900460ff1615610bcc57600080fd5b600160a060020a038216600090815260208181526040808320338452909152902054811115610bfa57600080fd5b600160a060020a038216600090815260208181526040808320338452909152902054610c2c908263ffffffff6111ce16565b600160a060020a038316600090815260208181526040808320338452909152902055610c588282611413565b5050565b6003546000908190819060a060020a900460ff1615610c7a57600080fd5b8451610c8d90859063ffffffff6115ea16565b33600090815260016020526040902054909250821115610cac57600080fd5b5060005b8451811015610973578451600090869083908110610cca57fe5b60209081029091010151600160a060020a03161415610ce857600080fd5b84513390869083908110610cf857fe5b60209081029091010151600160a060020a03161415610d1657600080fd5b610d2c846001600088858151811015156108a057fe5b600160008784815181101515610d3e57fe5b6020908102909101810151600160a060020a03168252810191909152604001600020558451859082908110610d6f57fe5b90602001906020020151600160a060020a031633600160a060020a03166000805160206116a9833981519152866040518082815260200191505060405180910390a3600101610cb0565b600454600160a060020a0316331480610ddc5750600354600160a060020a031633145b1515610de757600080fd5b60035460a060020a900460ff1615610dfe57600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600354600160a060020a031681565b6000600160a060020a038416301415610e7457600080fd5b610aa58484611613565b60408051808201909152600181527f6900000000000000000000000000000000000000000000000000000000000000602082015281565b60035460009060a060020a900460ff1615610ecf57600080fd5b6107a18383611342565b6000600160a060020a038416301415610ef157600080fd5b610efc8585856111e0565b5083600160a060020a0316348360405180828051906020019080838360005b83811015610f33578181015183820152602001610f1b565b50505050905090810190601f168015610f605780820380516001836020036101000a031916815260200191505b5091505060006040518083038185875af1925050501515610f8057600080fd5b506001949350505050565b6000600160a060020a038416301415610fa357600080fd5b610aa5848461115d565b6000600160a060020a038416301415610fc557600080fd5b610aa58484611502565b60035460009060a060020a900460ff1615610fe957600080fd5b6107a18383611613565b600160a060020a0391821660009081526020818152604080832093909416825291909152205490565b600454600160a060020a031633148061103f5750600354600160a060020a031633145b151561104a57600080fd5b600160a060020a038116151561105f57600080fd5b600454604051600160a060020a038084169216907f5705a19d157bea12552e53720dc7b75b73ea8b883da95f4af3b3b3bfbeab9b2790600090a36004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600160a060020a031633146110df57600080fd5b600160a060020a03811615156110f457600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b33600081815260208181526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b818101828110156107a457fe5b6000828211156111da57fe5b50900390565b6000600160a060020a03831615156111f757600080fd5b600160a060020a03841660009081526001602052604090205482111561121c57600080fd5b600160a060020a03841660009081526020818152604080832033845290915290205482111561124a57600080fd5b600160a060020a038416600090815260016020526040902054611273908363ffffffff6111ce16565b600160a060020a0380861660009081526001602052604080822093909355908516815220546112a8908363ffffffff6111c116565b600160a060020a03808516600090815260016020908152604080832094909455918716815280825282812033825290915220546112eb908363ffffffff6111ce16565b600160a060020a0380861660008181526020818152604080832033845282529182902094909455805186815290519287169391926000805160206116a9833981519152929181900390910190a35060019392505050565b6000600160a060020a038316151561135957600080fd5b3360009081526001602052604090205482111561137557600080fd5b33600090815260016020526040902054611395908363ffffffff6111ce16565b3360009081526001602052604080822092909255600160a060020a038516815220546113c7908363ffffffff6111c116565b600160a060020a0384166000818152600160209081526040918290209390935580518581529051919233926000805160206116a98339815191529281900390910190a350600192915050565b600160a060020a03821660009081526001602052604090205481111561143857600080fd5b600160a060020a038216600090815260016020526040902054611461908263ffffffff6111ce16565b600160a060020a03831660009081526001602052604090205560025461148d908263ffffffff6111ce16565b600255604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a038516916000805160206116a98339815191529181900360200190a35050565b33600090815260208181526040808320600160a060020a0386168452909152812054808311156115535733600090815260208181526040808320600160a060020a0388168452909152812055611586565b611563818463ffffffff6111ce16565b33600090815260208181526040808320600160a060020a03891684529091529020555b33600081815260208181526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b60008215156115fb575060006107a4565b5081810281838281151561160b57fe5b04146107a457fe5b33600090815260208181526040808320600160a060020a0386168452909152812054611645908363ffffffff6111c116565b33600081815260208181526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a3506001929150505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a7230582045ca3fca39771046566120bc4b458eb8ef6af88fb7ef9e70cc5b9cec6f8f12210029"
}