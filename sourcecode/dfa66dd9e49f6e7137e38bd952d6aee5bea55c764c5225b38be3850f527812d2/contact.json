{
  "address": "0xdf50a17bf58dea5039b73683a51c4026f3c7224e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenFunctions",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/* Copyright (C) 2017 NexusMutual.io\n\n  This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n    along with this program.  If not, see http://www.gnu.org/licenses/ */\n\npragma solidity 0.5.7;\n\nimport \"./NXMToken.sol\";\nimport \"./Governance.sol\";\n\n\ncontract TokenFunctions is Iupgradable {\n    using SafeMath for uint;\n\n    MCR internal m1;\n    MemberRoles internal mr;\n    NXMToken public tk;\n    TokenController internal tc;\n    TokenData internal td;\n    QuotationData internal qd;\n    ClaimsReward internal cr;\n    Governance internal gv;\n    PoolData internal pd;\n\n    uint private constant DECIMAL1E18 = uint(10) ** 18;\n\n    event BurnCATokens(uint claimId, address addr, uint amount);\n    \n    /**\n     * @dev Sends commission to underwriter on purchase of staked smart contract.\n     * @param _scAddress staker address.\n     * @param _premiumNXM premium of cover in NXM.\n     */\n    function updateStakerCommissions(address _scAddress, uint _premiumNXM) external onlyInternal {\n        uint commissionToBePaid = (_premiumNXM.mul(td.stakerCommissionPer())).div(100);\n        uint stakeLength = td.getStakedContractStakersLength(_scAddress);\n        address claimsRewardAddress = ms.getLatestAddress(\"CR\");\n        for (uint i = td.stakedContractCurrentCommissionIndex(_scAddress); i < stakeLength; i++) {\n            if (commissionToBePaid > 0) {\n                address stakerAddress;\n                uint stakeAmt;\n                uint stakerIndex;\n                (stakerAddress, ) = td.stakedContractStakers(_scAddress, i);\n                stakerIndex = td.getStakedContractStakerIndex(_scAddress, i);\n                stakeAmt = td.getStakerInitialStakedAmountOnContract(stakerAddress, stakerIndex);\n                uint maxCommission = (stakeAmt.mul(td.stakerMaxCommissionPer())).div(100);\n                uint commissionEarned;\n                commissionEarned = td.getStakerEarnedStakeCommission(stakerAddress, stakerIndex);\n                if (maxCommission > commissionEarned) {\n                    if (maxCommission >= commissionEarned.add(commissionToBePaid)) {\n                        td.pushEarnedStakeCommissions(stakerAddress, _scAddress, \n                            i, commissionToBePaid);\n                        tc.mint(claimsRewardAddress, commissionToBePaid);\n                        if (i > 0)\n                            td.setStakedContractCurrentCommissionIndex(_scAddress, i);\n                        commissionToBePaid = 0;\n                        break;\n                    } else {\n                        td.pushEarnedStakeCommissions(stakerAddress, _scAddress, i,\n                            maxCommission.sub(commissionEarned));\n                        tc.mint(claimsRewardAddress, maxCommission.sub(commissionEarned));\n                        commissionToBePaid = commissionToBePaid.sub(maxCommission.sub(commissionEarned));\n                    }\n                }\n            } else\n                break;\n        }\n        if (commissionToBePaid > 0 && stakeLength > 0)\n            td.setStakedContractCurrentCommissionIndex(_scAddress, stakeLength.sub(1));\n    }\n\n     /**\n     * @dev Burns tokens staked against a Smart Contract Cover.\n     * Called when a claim submitted against this cover is accepted.\n     * @param coverid Cover Id.\n     */\n    function burnStakerLockedToken(uint coverid, bytes4 curr, uint sumAssured) external onlyInternal {\n        address scAddress;\n        (, scAddress) = qd.getscAddressOfCover(coverid);\n        uint tokenPrice = m1.calculateTokenPrice(curr);\n        uint totalStaker = td.getStakedContractStakersLength(scAddress);\n        uint burnNXMAmount = sumAssured.mul(DECIMAL1E18).div(tokenPrice);\n        address stakerAddress;\n        uint stakerStakedNXM;\n        for (uint i = td.stakedContractCurrentBurnIndex(scAddress); i < totalStaker; i++) {\n            if (burnNXMAmount > 0) {\n                stakerAddress = td.getStakedContractStakerByIndex(scAddress, i);\n                uint stakerIndex = td.getStakedContractStakerIndex(\n                scAddress, i);\n                uint v;\n                (v, stakerStakedNXM) = _unlockableBeforeBurningAndCanBurn(stakerAddress, scAddress, stakerIndex);\n                td.pushUnlockableBeforeLastBurnTokens(stakerAddress, stakerIndex, v);\n                if (stakerStakedNXM > 0) {\n                    if (stakerStakedNXM >= burnNXMAmount) {\n                        _burnStakerTokenLockedAgainstSmartContract(\n                            stakerAddress, scAddress, i, burnNXMAmount);\n                        if (i > 0)\n                            td.setStakedContractCurrentBurnIndex(scAddress, i);\n                        burnNXMAmount = 0;\n                        break;\n                    } else {\n                        _burnStakerTokenLockedAgainstSmartContract(\n                            stakerAddress, scAddress, i, stakerStakedNXM);\n                        burnNXMAmount = burnNXMAmount.sub(stakerStakedNXM);\n                    }\n                }\n            } else\n                break;\n        }\n        if (burnNXMAmount > 0 && totalStaker > 0)\n            td.setStakedContractCurrentBurnIndex(scAddress, totalStaker.sub(1));\n    }\n\n    /**\n     * @dev Gets the total staked NXM tokens against\n     * Smart contract by all stakers\n     * @param _stakedContractAddress smart contract address.\n     * @return amount total staked NXM tokens.\n     */\n    function getTotalStakedTokensOnSmartContract(\n        address _stakedContractAddress\n    )\n        external\n        view\n        returns(uint amount)\n    {\n        uint stakedAmount = 0;\n        address stakerAddress;\n        uint staketLen = td.getStakedContractStakersLength(_stakedContractAddress);\n        for (uint i = 0; i < staketLen; i++) {\n            stakerAddress = td.getStakedContractStakerByIndex(_stakedContractAddress, i);\n            uint stakerIndex = td.getStakedContractStakerIndex(\n            _stakedContractAddress, i);\n            uint currentlyStaked;\n            (, currentlyStaked) = _unlockableBeforeBurningAndCanBurn(stakerAddress, \n            _stakedContractAddress, stakerIndex);\n            stakedAmount = stakedAmount.add(currentlyStaked);\n        } \n        amount = stakedAmount;\n    }\n\n    /**\n     * @dev Returns amount of NXM Tokens locked as Cover Note for given coverId.\n     * @param _of address of the coverHolder.\n     * @param _coverId coverId of the cover.\n     */\n    function getUserLockedCNTokens(address _of, uint _coverId) external view returns(uint) {\n        return _getUserLockedCNTokens(_of, _coverId);\n    } \n\n    /**\n     * @dev to get the all the cover locked tokens of a user \n     * @param _of is the user address in concern\n     * @return amount locked\n     */\n    function getUserAllLockedCNTokens(address _of) external view returns(uint amount) {\n        for (uint i = 0; i < qd.getUserCoverLength(_of); i++) {\n            amount = amount.add(_getUserLockedCNTokens(_of, qd.getAllCoversOfUser(_of)[i]));\n        }\n    }\n\n    /**\n     * @dev Returns amount of NXM Tokens locked as Cover Note against given coverId.\n     * @param _coverId coverId of the cover.\n     */\n    function getLockedCNAgainstCover(uint _coverId) external view returns(uint) {\n        return _getLockedCNAgainstCover(_coverId);\n    }\n\n    /**\n     * @dev Returns total amount of staked NXM Tokens on all smart contract .\n     * @param _stakerAddress address of the Staker.\n     */ \n    function getStakerAllLockedTokens(address _stakerAddress) external view returns (uint amount) {\n        uint stakedAmount = 0;\n        address scAddress;\n        uint scIndex;\n        for (uint i = 0; i < td.getStakerStakedContractLength(_stakerAddress); i++) {\n            scAddress = td.getStakerStakedContractByIndex(_stakerAddress, i);\n            scIndex = td.getStakerStakedContractIndex(_stakerAddress, i);\n            uint currentlyStaked;\n            (, currentlyStaked) = _unlockableBeforeBurningAndCanBurn(_stakerAddress, scAddress, i);\n            stakedAmount = stakedAmount.add(currentlyStaked);\n        }\n        amount = stakedAmount;\n    }\n\n    /**\n     * @dev Returns total unlockable amount of staked NXM Tokens on all smart contract .\n     * @param _stakerAddress address of the Staker.\n     */ \n    function getStakerAllUnlockableStakedTokens(\n        address _stakerAddress\n    )\n        external\n        view\n        returns (uint amount)\n    {\n        uint unlockableAmount = 0;\n        address scAddress;\n        uint scIndex;\n        for (uint i = 0; i < td.getStakerStakedContractLength(_stakerAddress); i++) {\n            scAddress = td.getStakerStakedContractByIndex(_stakerAddress, i);\n            scIndex = td.getStakerStakedContractIndex(_stakerAddress, i);\n            unlockableAmount = unlockableAmount.add(\n            _getStakerUnlockableTokensOnSmartContract(_stakerAddress, scAddress,\n            scIndex));\n        }\n        amount = unlockableAmount;\n    }\n\n    /**\n     * @dev Change Dependent Contract Address\n     */\n    function changeDependentContractAddress() public {\n        tk = NXMToken(ms.tokenAddress());\n        td = TokenData(ms.getLatestAddress(\"TD\"));\n        tc = TokenController(ms.getLatestAddress(\"TC\"));\n        cr = ClaimsReward(ms.getLatestAddress(\"CR\"));\n        qd = QuotationData(ms.getLatestAddress(\"QD\"));\n        m1 = MCR(ms.getLatestAddress(\"MC\"));\n        gv = Governance(ms.getLatestAddress(\"GV\"));\n        mr = MemberRoles(ms.getLatestAddress(\"MR\"));\n        pd = PoolData(ms.getLatestAddress(\"PD\"));\n    }\n\n    /**\n     * @dev Gets the Token price in a given currency\n     * @param curr Currency name.\n     * @return price Token Price.\n     */\n    function getTokenPrice(bytes4 curr) public view returns(uint price) {\n        price = m1.calculateTokenPrice(curr);\n    }\n\n    /**\n     * @dev Set the flag to check if cover note is deposited against the cover id\n     * @param coverId Cover Id.\n     */ \n    function depositCN(uint coverId) public onlyInternal returns (bool success) {\n        require(_getLockedCNAgainstCover(coverId) > 0, \"No cover note available\");\n        td.setDepositCN(coverId, true);\n        success = true;    \n    }\n\n    /**\n     * @param _of address of Member\n     * @param _coverId Cover Id\n     * @param _lockTime Pending Time + Cover Period 7*1 days\n     */ \n    function extendCNEPOff(address _of, uint _coverId, uint _lockTime) public onlyInternal {\n        uint timeStamp = now.add(_lockTime);\n        uint coverValidUntil = qd.getValidityOfCover(_coverId);\n        if (timeStamp >= coverValidUntil) {\n            bytes32 reason = keccak256(abi.encodePacked(\"CN\", _of, _coverId));\n            tc.extendLockOf(_of, reason, timeStamp);\n        } \n    }\n\n    /**\n     * @dev to burn the deposited cover tokens \n     * @param coverId is id of cover whose tokens have to be burned\n     * @return the status of the successful burning\n     */\n    function burnDepositCN(uint coverId) public onlyInternal returns (bool success) {\n        address _of = qd.getCoverMemberAddress(coverId);\n        uint amount;\n        (amount, ) = td.depositedCN(coverId);\n        amount = (amount.mul(50)).div(100);\n        bytes32 reason = keccak256(abi.encodePacked(\"CN\", _of, coverId));\n        tc.burnLockedTokens(_of, reason, amount);\n        success = true;\n    }\n\n    /**\n     * @dev Unlocks covernote locked against a given cover \n     * @param coverId id of cover\n     */ \n    function unlockCN(uint coverId) public onlyInternal {\n        address _of = qd.getCoverMemberAddress(coverId);\n        uint lockedCN = _getLockedCNAgainstCover(coverId);\n        if (lockedCN != 0) {\n            bytes32 reason = keccak256(abi.encodePacked(\"CN\", _of, coverId));\n            tc.releaseLockedTokens(_of, reason, lockedCN);\n        }\n    }\n\n    /** \n     * @dev Burns tokens used for fraudulent voting against a claim\n     * @param claimid Claim Id.\n     * @param _value number of tokens to be burned\n     * @param _of Claim Assessor's address.\n     */     \n    function burnCAToken(uint claimid, uint _value, address _of) public {\n\n        require(ms.checkIsAuthToGoverned(msg.sender));\n        tc.burnLockedTokens(_of, \"CLA\", _value);\n        emit BurnCATokens(claimid, _of, _value);\n    }\n\n    /**\n     * @dev to lock cover note tokens\n     * @param coverNoteAmount is number of tokens to be locked\n     * @param coverPeriod is cover period in concern\n     * @param coverId is the cover id of cover in concern\n     * @param _of address whose tokens are to be locked\n     */\n    function lockCN(\n        uint coverNoteAmount,\n        uint coverPeriod,\n        uint coverId,\n        address _of\n    )\n        public\n        onlyInternal\n    {\n        uint validity = now.add(coverPeriod * 1 days).add(td.lockTokenTimeAfterCoverExp());\n        bytes32 reason = keccak256(abi.encodePacked(\"CN\", _of, coverId));\n        td.setDepositCNAmount(coverId, coverNoteAmount);\n        tc.lockOf(_of, reason, coverNoteAmount, validity);\n    }\n\n    /**\n     * @dev Staking on contract.\n     * @param _scAddress smart contract address.\n     * @param _amount amount of NXM.\n     */ \n    function addStake(address _scAddress, uint _amount) public isMemberAndcheckPause {\n        uint scIndex = td.addStake(msg.sender, _scAddress, _amount);\n        uint validity = (td.scValidDays()).mul(1 days);\n        bytes32 reason = keccak256(abi.encodePacked(\"UW\", msg.sender, _scAddress, scIndex));\n        tc.lockOf(msg.sender, reason, _amount, validity);\n    }\n\n    /**\n     * @dev to check if a  member is locked for member vote \n     * @param _of is the member address in concern\n     * @return the boolean status\n     */\n    function isLockedForMemberVote(address _of) public view returns(bool) {\n        return now < tk.isLockedForMV(_of);\n    }\n\n    /**\n     * @dev Internal function to gets amount of locked NXM tokens,\n     * staked against smartcontract by index\n     * @param _stakerAddress address of user\n     * @param _stakedContractAddress staked contract address\n     * @param _stakedContractIndex index of staking\n     */\n    function getStakerLockedTokensOnSmartContract (\n        address _stakerAddress,\n        address _stakedContractAddress,\n        uint _stakedContractIndex\n    )\n        public\n        view\n        returns\n        (uint amount)\n    {   \n        amount = _getStakerLockedTokensOnSmartContract(_stakerAddress,\n            _stakedContractAddress, _stakedContractIndex);\n    }\n\n    /**\n     * @dev Function to gets unlockable amount of locked NXM \n     * tokens, staked against smartcontract by index\n     * @param stakerAddress address of staker\n     * @param stakedContractAddress staked contract address\n     * @param stakerIndex index of staking\n     */\n    function getStakerUnlockableTokensOnSmartContract (\n        address stakerAddress,\n        address stakedContractAddress,\n        uint stakerIndex\n    ) \n        public\n        view\n        returns (uint)\n    {\n        return _getStakerUnlockableTokensOnSmartContract(stakerAddress, stakedContractAddress,\n        td.getStakerStakedContractIndex(stakerAddress, stakerIndex));\n    }\n\n    /**\n     * @dev releases unlockable staked tokens to staker \n     */\n    function unlockStakerUnlockableTokens(address _stakerAddress) public onlyInternal {\n        uint unlockableAmount;\n        address scAddress;\n        bytes32 reason;\n        uint scIndex;\n        for (uint i = 0; i < td.getStakerStakedContractLength(_stakerAddress); i++) {\n            scAddress = td.getStakerStakedContractByIndex(_stakerAddress, i);\n            scIndex = td.getStakerStakedContractIndex(_stakerAddress, i);\n            unlockableAmount = _getStakerUnlockableTokensOnSmartContract(\n            _stakerAddress, scAddress,\n            scIndex);\n            td.setUnlockableBeforeLastBurnTokens(_stakerAddress, i, 0);\n            td.pushUnlockedStakedTokens(_stakerAddress, i, unlockableAmount);\n            reason = keccak256(abi.encodePacked(\"UW\", _stakerAddress, scAddress, scIndex));\n            tc.releaseLockedTokens(_stakerAddress, reason, unlockableAmount);\n        }\n    }\n\n    /**\n     * @dev to get tokens of staker locked before burning that are allowed to burn \n     * @param stakerAdd is the address of the staker \n     * @param stakedAdd is the address of staked contract in concern \n     * @param stakerIndex is the staker index in concern\n     * @return amount of unlockable tokens\n     * @return amount of tokens that can burn\n     */\n    function _unlockableBeforeBurningAndCanBurn(\n        address stakerAdd, \n        address stakedAdd, \n        uint stakerIndex\n    )\n    internal \n    view \n    returns\n    (uint amount, uint canBurn) {\n\n        uint dateAdd;\n        uint initialStake;\n        uint totalBurnt;\n        uint ub;\n        (, , dateAdd, initialStake, , totalBurnt, ub) = td.stakerStakedContracts(stakerAdd, stakerIndex);\n        canBurn = _calculateStakedTokens(initialStake, (now.sub(dateAdd)).div(1 days), td.scValidDays());\n        // Can't use SafeMaths for int.\n        int v = int(initialStake - (canBurn) - (totalBurnt) - (\n            td.getStakerUnlockedStakedTokens(stakerAdd, stakerIndex)) - (ub));\n        uint currentLockedTokens = _getStakerLockedTokensOnSmartContract(\n            stakerAdd, stakedAdd, td.getStakerStakedContractIndex(stakerAdd, stakerIndex));\n        if (v < 0)\n            v = 0;\n        amount = uint(v);\n        if (canBurn > currentLockedTokens.sub(amount).sub(ub))\n            canBurn = currentLockedTokens.sub(amount).sub(ub);\n    }\n\n    /**\n     * @dev to get tokens of staker that are unlockable\n     * @param _stakerAddress is the address of the staker \n     * @param _stakedContractAddress is the address of staked contract in concern \n     * @param _stakedContractIndex is the staked contract index in concern\n     * @return amount of unlockable tokens\n     */\n    function _getStakerUnlockableTokensOnSmartContract (\n        address _stakerAddress,\n        address _stakedContractAddress,\n        uint _stakedContractIndex\n    ) \n        internal\n        view\n        returns\n        (uint amount)\n    {   \n        uint initialStake;\n        uint stakerIndex = td.getStakedContractStakerIndex(\n            _stakedContractAddress, _stakedContractIndex);\n        uint burnt;\n        (, , , initialStake, , burnt,) = td.stakerStakedContracts(_stakerAddress, stakerIndex);\n        uint alreadyUnlocked = td.getStakerUnlockedStakedTokens(_stakerAddress, stakerIndex);\n        uint currentStakedTokens;\n        (, currentStakedTokens) = _unlockableBeforeBurningAndCanBurn(_stakerAddress, \n            _stakedContractAddress, stakerIndex);\n        amount = initialStake.sub(currentStakedTokens).sub(alreadyUnlocked).sub(burnt);\n    }\n\n    /**\n     * @dev Internal function to get the amount of locked NXM tokens,\n     * staked against smartcontract by index\n     * @param _stakerAddress address of user\n     * @param _stakedContractAddress staked contract address\n     * @param _stakedContractIndex index of staking\n     */\n    function _getStakerLockedTokensOnSmartContract (\n        address _stakerAddress,\n        address _stakedContractAddress,\n        uint _stakedContractIndex\n    )\n        internal\n        view\n        returns\n        (uint amount)\n    {   \n        bytes32 reason = keccak256(abi.encodePacked(\"UW\", _stakerAddress,\n            _stakedContractAddress, _stakedContractIndex));\n        amount = tc.tokensLocked(_stakerAddress, reason);\n    }\n\n    /**\n     * @dev Returns amount of NXM Tokens locked as Cover Note for given coverId.\n     * @param _coverId coverId of the cover.\n     */\n    function _getLockedCNAgainstCover(uint _coverId) internal view returns(uint) {\n        address coverHolder = qd.getCoverMemberAddress(_coverId);\n        bytes32 reason = keccak256(abi.encodePacked(\"CN\", coverHolder, _coverId));\n        return tc.tokensLockedAtTime(coverHolder, reason, now); \n    }\n\n    /**\n     * @dev Returns amount of NXM Tokens locked as Cover Note for given coverId.\n     * @param _of address of the coverHolder.\n     * @param _coverId coverId of the cover.\n     */\n    function _getUserLockedCNTokens(address _of, uint _coverId) internal view returns(uint) {\n        bytes32 reason = keccak256(abi.encodePacked(\"CN\", _of, _coverId));\n        return tc.tokensLockedAtTime(_of, reason, now); \n    }\n\n    /**\n     * @dev Internal function to gets remaining amount of staked NXM tokens,\n     * against smartcontract by index\n     * @param _stakeAmount address of user\n     * @param _stakeDays staked contract address\n     * @param _validDays index of staking\n     */\n    function _calculateStakedTokens(\n        uint _stakeAmount,\n        uint _stakeDays,\n        uint _validDays\n    ) \n        internal\n        pure \n        returns (uint amount)\n    {\n        if (_validDays > _stakeDays) {\n            uint rf = ((_validDays.sub(_stakeDays)).mul(100000)).div(_validDays);\n            amount = (rf.mul(_stakeAmount)).div(100000);\n        } else \n            amount = 0;\n    }\n\n    /**\n     * @dev Gets the total staked NXM tokens against Smart contract \n     * by all stakers\n     * @param _stakedContractAddress smart contract address.\n     * @return amount total staked NXM tokens.\n     */\n    function _burnStakerTokenLockedAgainstSmartContract(\n        address _stakerAddress,\n        address _stakedContractAddress,\n        uint _stakedContractIndex,\n        uint _amount\n    ) \n        internal\n    {\n        uint stakerIndex = td.getStakedContractStakerIndex(\n            _stakedContractAddress, _stakedContractIndex);\n        td.pushBurnedTokens(_stakerAddress, stakerIndex, _amount);\n        bytes32 reason = keccak256(abi.encodePacked(\"UW\", _stakerAddress,\n            _stakedContractAddress, _stakedContractIndex));\n        tc.burnLockedTokens(_stakerAddress, reason, _amount);\n    }\n\n}",
  "bytecode": "608060405234801561001057600080fd5b50613f3d806100206000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c806385f52204116100de578063ddcc90bd11610097578063f17a3bec11610071578063f17a3bec146104b9578063f57cb5a6146104c1578063f9acac08146104e7578063fb7cf2191461051a57610173565b8063ddcc90bd14610419578063e8ed92141461044f578063f075be1f1461048157610173565b806385f522041461034a578063a0b2d57f14610367578063ac5adaf61461036f578063ba90320214610395578063ccace7df146103c1578063d46655f4146103f357610173565b8063463c24a311610130578063463c24a31461025d5780634c14b3a81461028457806354d20439146102b55780636374299e146102db5780637b100ec9146103075780637dded30d1461032d57610173565b80630788e72b146101785780630ea9c984146101a6578063200537a4146101ae57806321f408be146101dd57806333cb73de14610201578063377a856c14610237575b600080fd5b6101a46004803603604081101561018e57600080fd5b506001600160a01b038135169060200135610540565b005b6101a4610e58565b6101cb600480360360208110156101c457600080fd5b503561139a565b60408051918252519081900360200190f35b6101e56113ab565b604080516001600160a01b039092168252519081900360200190f35b6101cb6004803603606081101561021757600080fd5b506001600160a01b038135811691602081013590911690604001356113ba565b6101cb6004803603602081101561024d57600080fd5b50356001600160a01b0316611457565b6101cb6004803603602081101561027357600080fd5b50356001600160e01b03191661162e565b6102a16004803603602081101561029a57600080fd5b50356116b8565b604080519115158252519081900360200190f35b6101cb600480360360208110156102cb57600080fd5b50356001600160a01b0316611813565b6101a4600480360360408110156102f157600080fd5b506001600160a01b0381351690602001356119b5565b6101cb6004803603602081101561031d57600080fd5b50356001600160a01b0316611cc1565b6102a16004803603602081101561034357600080fd5b5035611e81565b6101a46004803603602081101561036057600080fd5b50356120dc565b6101e56122ab565b6102a16004803603602081101561038557600080fd5b50356001600160a01b03166122ba565b6101cb600480360360408110156103ab57600080fd5b506001600160a01b038135169060200135612344565b6101a4600480360360608110156103d757600080fd5b50803590602081013590604001356001600160a01b0316612350565b6101a46004803603602081101561040957600080fd5b50356001600160a01b03166124a0565b6101cb6004803603606081101561042f57600080fd5b506001600160a01b0381358116916020810135909116906040013561252f565b6101a46004803603606081101561046557600080fd5b506001600160a01b03813516906020810135906040013561253c565b6101a46004803603608081101561049757600080fd5b50803590602081013590604081013590606001356001600160a01b0316612725565b6101e5612960565b6101cb600480360360208110156104d757600080fd5b50356001600160a01b031661296f565b6101a4600480360360608110156104fd57600080fd5b508035906001600160e01b03196020820135169060400135612b28565b6101a46004803603602081101561053057600080fd5b50356001600160a01b03166130f5565b60005460408051600160e21b6323c5b10702815233600482015290516001600160a01b0390921691638f16c41c91602480820192602092909190829003018186803b15801561058e57600080fd5b505afa1580156105a2573d6000803e3d6000fd5b505050506040513d60208110156105b857600080fd5b50516105c357600080fd5b60006106606064610654600660009054906101000a90046001600160a01b03166001600160a01b031663e22648506040518163ffffffff1660e01b815260040160206040518083038186803b15801561061b57600080fd5b505afa15801561062f573d6000803e3d6000fd5b505050506040513d602081101561064557600080fd5b5051859063ffffffff6134dc16565b9063ffffffff61350316565b60065460408051600160e11b637a4022a50281526001600160a01b0387811660048301529151939450600093919092169163f480454a916024808301926020929190829003018186803b1580156106b657600080fd5b505afa1580156106ca573d6000803e3d6000fd5b505050506040513d60208110156106e057600080fd5b50516000805460408051600160e31b6227050b028152600160f11b6121a9026004820152905193945091926001600160a01b03909116916301382858916024808301926020929190829003018186803b15801561073c57600080fd5b505afa158015610750573d6000803e3d6000fd5b505050506040513d602081101561076657600080fd5b505160065460408051600160e61b63020cb0b90281526001600160a01b0389811660048301529151939450600093919092169163832c2e40916024808301926020929190829003018186803b1580156107be57600080fd5b505afa1580156107d2573d6000803e3d6000fd5b505050506040513d60208110156107e857600080fd5b505190505b82811015610db0578315610da35760065460408051600160e11b635c752bc70281526001600160a01b03898116600483015260248201859052825160009485948594939091169263b8ea578e9260448083019392829003018186803b15801561085557600080fd5b505afa158015610869573d6000803e3d6000fd5b505050506040513d604081101561087f57600080fd5b505160065460408051600160e01b6324da7b690281526001600160a01b038d811660048301526024820189905291519396509116916324da7b6991604480820192602092909190829003018186803b1580156108da57600080fd5b505afa1580156108ee573d6000803e3d6000fd5b505050506040513d602081101561090457600080fd5b505160065460408051600160e01b6343148d230281526001600160a01b0387811660048301526024820185905291519394509116916343148d2391604480820192602092909190829003018186803b15801561095f57600080fd5b505afa158015610973573d6000803e3d6000fd5b505050506040513d602081101561098957600080fd5b505160065460408051600160e01b636a9644510281529051929450600092610a1d92606492610654926001600160a01b0390921691636a96445191600480820192602092909190829003018186803b1580156109e457600080fd5b505afa1580156109f8573d6000803e3d6000fd5b505050506040513d6020811015610a0e57600080fd5b5051869063ffffffff6134dc16565b60065460408051600160e31b63057844c50281526001600160a01b0388811660048301526024820187905291519394506000939190921691632bc22628916044808301926020929190829003018186803b158015610a7a57600080fd5b505afa158015610a8e573d6000803e3d6000fd5b505050506040513d6020811015610aa457600080fd5b5051905080821115610d9957610ac0818a63ffffffff61352516565b8210610c3d5760065460408051600160e01b6334f15b690281526001600160a01b0388811660048301528e81166024830152604482018a9052606482018d9052915191909216916334f15b6991608480830192600092919082900301818387803b158015610b2d57600080fd5b505af1158015610b41573d6000803e3d6000fd5b505060055460408051600160e01b6340c10f190281526001600160a01b038c81166004830152602482018f905291519190921693506340c10f199250604480830192600092919082900301818387803b158015610b9d57600080fd5b505af1158015610bb1573d6000803e3d6000fd5b505050506000861115610c2f5760065460408051600160e01b63c88587030281526001600160a01b038e81166004830152602482018a90529151919092169163c885870391604480830192600092919082900301818387803b158015610c1657600080fd5b505af1158015610c2a573d6000803e3d6000fd5b505050505b600098505050505050610db0565b6006546001600160a01b03166334f15b69868d89610c61878763ffffffff61353716565b6040518563ffffffff1660e01b815260040180856001600160a01b03166001600160a01b03168152602001846001600160a01b03166001600160a01b03168152602001838152602001828152602001945050505050600060405180830381600087803b158015610cd057600080fd5b505af1158015610ce4573d6000803e3d6000fd5b50506005546001600160a01b031691506340c10f19905088610d0c858563ffffffff61353716565b6040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050600060405180830381600087803b158015610d5b57600080fd5b505af1158015610d6f573d6000803e3d6000fd5b50505050610d96610d89828461353790919063ffffffff16565b8a9063ffffffff61353716565b98505b5050505050610da8565b610db0565b6001016107ed565b50600083118015610dc15750600082115b15610e51576006546001600160a01b031663c885870386610de985600163ffffffff61353716565b6040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050600060405180830381600087803b158015610e3857600080fd5b505af1158015610e4c573d6000803e3d6000fd5b505050505b5050505050565b6000809054906101000a90046001600160a01b03166001600160a01b0316639d76ea586040518163ffffffff1660e01b815260040160206040518083038186803b158015610ea557600080fd5b505afa158015610eb9573d6000803e3d6000fd5b505050506040513d6020811015610ecf57600080fd5b5051600480546001600160a01b0319166001600160a01b0392831617815560005460408051600160e31b6227050b028152600160f21b611511029381019390935251921691630138285891602480820192602092909190829003018186803b158015610f3a57600080fd5b505afa158015610f4e573d6000803e3d6000fd5b505050506040513d6020811015610f6457600080fd5b5051600680546001600160a01b0319166001600160a01b0392831617905560005460408051600160e31b6227050b028152600160f01b615443026004820152905191909216916301382858916024808301926020929190829003018186803b158015610fcf57600080fd5b505afa158015610fe3573d6000803e3d6000fd5b505050506040513d6020811015610ff957600080fd5b5051600580546001600160a01b0319166001600160a01b0392831617905560005460408051600160e31b6227050b028152600160f11b6121a9026004820152905191909216916301382858916024808301926020929190829003018186803b15801561106457600080fd5b505afa158015611078573d6000803e3d6000fd5b505050506040513d602081101561108e57600080fd5b5051600880546001600160a01b0319166001600160a01b0392831617905560005460408051600160e31b6227050b028152600160f21b611451026004820152905191909216916301382858916024808301926020929190829003018186803b1580156110f957600080fd5b505afa15801561110d573d6000803e3d6000fd5b505050506040513d602081101561112357600080fd5b5051600780546001600160a01b0319166001600160a01b0392831617905560005460408051600160e31b6227050b028152600160f01b614d43026004820152905191909216916301382858916024808301926020929190829003018186803b15801561118e57600080fd5b505afa1580156111a2573d6000803e3d6000fd5b505050506040513d60208110156111b857600080fd5b5051600280546001600160a01b0319166001600160a01b0392831617905560005460408051600160e31b6227050b028152600160f11b6123ab026004820152905191909216916301382858916024808301926020929190829003018186803b15801561122357600080fd5b505afa158015611237573d6000803e3d6000fd5b505050506040513d602081101561124d57600080fd5b5051600980546001600160a01b0319166001600160a01b0392831617905560005460408051600160e31b6227050b028152600160f11b6126a9026004820152905191909216916301382858916024808301926020929190829003018186803b1580156112b857600080fd5b505afa1580156112cc573d6000803e3d6000fd5b505050506040513d60208110156112e257600080fd5b5051600380546001600160a01b0319166001600160a01b0392831617905560005460408051600160e31b6227050b028152600160f21b611411026004820152905191909216916301382858916024808301926020929190829003018186803b15801561134d57600080fd5b505afa158015611361573d6000803e3d6000fd5b505050506040513d602081101561137757600080fd5b5051600a80546001600160a01b0319166001600160a01b03909216919091179055565b60006113a58261354c565b92915050565b6004546001600160a01b031681565b60065460408051600160e01b6379ade32f0281526001600160a01b03808716600483015260248201859052915160009361144d938893889391909216916379ade32f916044808301926020929190829003018186803b15801561141c57600080fd5b505afa158015611430573d6000803e3d6000fd5b505050506040513d602081101561144657600080fd5b505161369e565b90505b9392505050565b60065460408051600160e11b637a4022a50281526001600160a01b0384811660048301529151600093849384938493919092169163f480454a916024808301926020929190829003018186803b1580156114b057600080fd5b505afa1580156114c4573d6000803e3d6000fd5b505050506040513d60208110156114da57600080fd5b5051905060005b818110156116245760065460408051600160e51b63053961a90281526001600160a01b038981166004830152602482018590529151919092169163a72c3520916044808301926020929190829003018186803b15801561154057600080fd5b505afa158015611554573d6000803e3d6000fd5b505050506040513d602081101561156a57600080fd5b505160065460408051600160e01b6324da7b690281526001600160a01b038a8116600483015260248201869052915193965060009391909216916324da7b69916044808301926020929190829003018186803b1580156115c957600080fd5b505afa1580156115dd573d6000803e3d6000fd5b505050506040513d60208110156115f357600080fd5b505190506000611604858984613889565b91506116189050868263ffffffff61352516565b955050506001016114e1565b5091949350505050565b60025460408051600160e01b633cb23b2d0281526001600160e01b03198416600482015290516000926001600160a01b031691633cb23b2d916024808301926020929190829003018186803b15801561168657600080fd5b505afa15801561169a573d6000803e3d6000fd5b505050506040513d60208110156116b057600080fd5b505192915050565b6000805460408051600160e21b6323c5b10702815233600482015290516001600160a01b0390921691638f16c41c91602480820192602092909190829003018186803b15801561170757600080fd5b505afa15801561171b573d6000803e3d6000fd5b505050506040513d602081101561173157600080fd5b505161173c57600080fd5b60006117478361354c565b1161179c5760408051600160e51b62461bcd02815260206004820152601760248201527f4e6f20636f766572206e6f746520617661696c61626c65000000000000000000604482015290519081900360640190fd5b60065460408051600160e41b6308831d59028152600481018590526001602482015290516001600160a01b0390921691638831d5909160448082019260009290919082900301818387803b1580156117f357600080fd5b505af1158015611807573d6000803e3d6000fd5b50600195945050505050565b6000805b60075460408051600160e01b63544ef03d0281526001600160a01b0386811660048301529151919092169163544ef03d916024808301926020929190829003018186803b15801561186757600080fd5b505afa15801561187b573d6000803e3d6000fd5b505050506040513d602081101561189157600080fd5b50518110156119af5760075460408051600160e21b633f9f3eff0281526001600160a01b03808716600483015291516119a59361199893889391169163fe7cfbfc91602480820192600092909190829003018186803b1580156118f357600080fd5b505afa158015611907573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561193057600080fd5b81019080805164010000000081111561194857600080fd5b8201602081018481111561195b57600080fd5b815185602082028301116401000000008211171561197857600080fd5b5050929190505050848151811061198b57fe5b6020026020010151613b75565b839063ffffffff61352516565b9150600101611817565b50919050565b6000809054906101000a90046001600160a01b03166001600160a01b031663ff0938a76040518163ffffffff1660e01b815260040160206040518083038186803b158015611a0257600080fd5b505afa158015611a16573d6000803e3d6000fd5b505050506040513d6020811015611a2c57600080fd5b5051158015611ab6575060005460408051600160e21b63288c314902815233600482015290516001600160a01b039092169163a230c52491602480820192602092909190829003018186803b158015611a8457600080fd5b505afa158015611a98573d6000803e3d6000fd5b505050506040513d6020811015611aae57600080fd5b505115156001145b611abf57600080fd5b60065460408051600160e11b636fe168dd0281523360048201526001600160a01b038581166024830152604482018590529151600093929092169163dfc2d1ba9160648082019260209290919082900301818787803b158015611b2157600080fd5b505af1158015611b35573d6000803e3d6000fd5b505050506040513d6020811015611b4b57600080fd5b505160065460408051600160e21b63311eb06b0281529051929350600092611bdc9262015180926001600160a01b039091169163c47ac1ac91600480820192602092909190829003018186803b158015611ba457600080fd5b505afa158015611bb8573d6000803e3d6000fd5b505050506040513d6020811015611bce57600080fd5b50519063ffffffff6134dc16565b60408051600160f01b6155570260208083019190915233606081811b60228501526001600160a01b03808b1690911b6036850152604a80850189905285518086039091018152606a8501808752815191850191909120600554600160e01b63fa64f8c102909252606e860193909352608e850183905260ae85018a905260ce85018790529451959650909493169263fa64f8c19260ee8082019392918290030181600087803b158015611c8e57600080fd5b505af1158015611ca2573d6000803e3d6000fd5b505050506040513d6020811015611cb857600080fd5b50505050505050565b6000808080805b60065460408051600160e21b6338c97bdd0281526001600160a01b0389811660048301529151919092169163e325ef74916024808301926020929190829003018186803b158015611d1857600080fd5b505afa158015611d2c573d6000803e3d6000fd5b505050506040513d6020811015611d4257600080fd5b50518110156116245760065460408051600160e01b6396cf14550281526001600160a01b03898116600483015260248201859052915191909216916396cf1455916044808301926020929190829003018186803b158015611da257600080fd5b505afa158015611db6573d6000803e3d6000fd5b505050506040513d6020811015611dcc57600080fd5b505160065460408051600160e01b6379ade32f0281526001600160a01b038a811660048301526024820186905291519396509116916379ade32f91604480820192602092909190829003018186803b158015611e2757600080fd5b505afa158015611e3b573d6000803e3d6000fd5b505050506040513d6020811015611e5157600080fd5b505191506000611e62878584613889565b9150611e769050858263ffffffff61352516565b945050600101611cc8565b6000805460408051600160e21b6323c5b10702815233600482015290516001600160a01b0390921691638f16c41c91602480820192602092909190829003018186803b158015611ed057600080fd5b505afa158015611ee4573d6000803e3d6000fd5b505050506040513d6020811015611efa57600080fd5b5051611f0557600080fd5b60075460408051600160e01b633c2d4daf0281526004810185905290516000926001600160a01b031691633c2d4daf916024808301926020929190829003018186803b158015611f5457600080fd5b505afa158015611f68573d6000803e3d6000fd5b505050506040513d6020811015611f7e57600080fd5b505160065460408051600160e11b630ee098510281526004810187905281519394506000936001600160a01b0390931692631dc130a292602480840193919291829003018186803b158015611fd257600080fd5b505afa158015611fe6573d6000803e3d6000fd5b505050506040513d6040811015611ffc57600080fd5b50519050612016606461065483603263ffffffff6134dc16565b60408051600160f11b6121a7026020808301919091526001600160a01b03808716606081901b602285015260368085018b9052855180860390910181526056850180875281519190940120600554600160e01b637aef5b7302909452605a850191909152607a8401819052609a840186905293519495509293921691637aef5b739160ba8082019260009290919082900301818387803b1580156120b957600080fd5b505af11580156120cd573d6000803e3d6000fd5b50600198975050505050505050565b60005460408051600160e21b6323c5b10702815233600482015290516001600160a01b0390921691638f16c41c91602480820192602092909190829003018186803b15801561212a57600080fd5b505afa15801561213e573d6000803e3d6000fd5b505050506040513d602081101561215457600080fd5b505161215f57600080fd5b60075460408051600160e01b633c2d4daf0281526004810184905290516000926001600160a01b031691633c2d4daf916024808301926020929190829003018186803b1580156121ae57600080fd5b505afa1580156121c2573d6000803e3d6000fd5b505050506040513d60208110156121d857600080fd5b5051905060006121e78361354c565b905080156122a65760408051600160f11b6121a7026020808301919091526001600160a01b03808616606081901b60228501526036808501899052855180860390910181526056850180875281519190940120600554600160e11b634063ab0d02909452605a850191909152607a8401819052609a840186905293519116916380c7561a9160ba80830192600092919082900301818387803b15801561228c57600080fd5b505af11580156122a0573d6000803e3d6000fd5b50505050505b505050565b6000546001600160a01b031681565b6004805460408051600160e01b6398fd371f0281526001600160a01b03858116948201949094529051600093909216916398fd371f91602480820192602092909190829003018186803b15801561231057600080fd5b505afa158015612324573d6000803e3d6000fd5b505050506040513d602081101561233a57600080fd5b5051421092915050565b60006114508383613b75565b60005460408051600160e11b632c1a733d02815233600482015290516001600160a01b0390921691635834e67a91602480820192602092909190829003018186803b15801561239e57600080fd5b505afa1580156123b2573d6000803e3d6000fd5b505050506040513d60208110156123c857600080fd5b50516123d357600080fd5b60055460408051600160e01b637aef5b730281526001600160a01b038481166004830152600160e81b62434c410260248301526044820186905291519190921691637aef5b7391606480830192600092919082900301818387803b15801561243a57600080fd5b505af115801561244e573d6000803e3d6000fd5b5050604080518681526001600160a01b038516602082015280820186905290517fbe5088ade50b808020f6e22db338b1dc96918b163ce3cffedfcccfe68f08477f9350908190036060019150a1505050565b6000546001600160a01b031615612503576000546001600160a01b031633146125035760408051600160e51b62461bcd02815260206004820152600a6024820152600160b11b692737ba1036b0b9ba32b902604482015290519081900360640190fd5b600080546001600160a01b039092166001600160a01b0319928316811790915560018054909216179055565b600061144d848484613c14565b60005460408051600160e21b6323c5b10702815233600482015290516001600160a01b0390921691638f16c41c91602480820192602092909190829003018186803b15801561258a57600080fd5b505afa15801561259e573d6000803e3d6000fd5b505050506040513d60208110156125b457600080fd5b50516125bf57600080fd5b60006125d1428363ffffffff61352516565b60075460408051600160e11b63388d67c30281526004810187905290519293506000926001600160a01b039092169163711acf8691602480820192602092909190829003018186803b15801561262657600080fd5b505afa15801561263a573d6000803e3d6000fd5b505050506040513d602081101561265057600080fd5b50519050808210610e515760408051600160f11b6121a7026020808301919091526001600160a01b03808916606081901b602285015260368085018a90528551808603909101815260568501808752815191850191909120600554600160e11b631634ea0b02909252605a860192909252607a8501829052609a85018890529451909490911692632c69d4169260ba8083019391928290030181600087803b1580156126fb57600080fd5b505af115801561270f573d6000803e3d6000fd5b505050506040513d60208110156122a057600080fd5b60005460408051600160e21b6323c5b10702815233600482015290516001600160a01b0390921691638f16c41c91602480820192602092909190829003018186803b15801561277357600080fd5b505afa158015612787573d6000803e3d6000fd5b505050506040513d602081101561279d57600080fd5b50516127a857600080fd5b6000612848600660009054906101000a90046001600160a01b03166001600160a01b031663ce0a6d5f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156127fb57600080fd5b505afa15801561280f573d6000803e3d6000fd5b505050506040513d602081101561282557600080fd5b505161283c4262015180880263ffffffff61352516565b9063ffffffff61352516565b60408051600160f11b6121a7026020808301919091526001600160a01b0380871660601b60228401526036808401899052845180850390910181526056840180865281519190930120600654600160e01b634e71865902909352605a8401899052607a84018b905293519495509293921691634e71865991609a8082019260009290919082900301818387803b1580156128e157600080fd5b505af11580156128f5573d6000803e3d6000fd5b505060055460408051600160e01b63fa64f8c10281526001600160a01b03888116600483015260248201879052604482018c905260648201889052915191909216935063fa64f8c1925060848083019260209291908290030181600087803b1580156126fb57600080fd5b6001546001600160a01b031681565b6000808080805b60065460408051600160e21b6338c97bdd0281526001600160a01b0389811660048301529151919092169163e325ef74916024808301926020929190829003018186803b1580156129c657600080fd5b505afa1580156129da573d6000803e3d6000fd5b505050506040513d60208110156129f057600080fd5b50518110156116245760065460408051600160e01b6396cf14550281526001600160a01b03898116600483015260248201859052915191909216916396cf1455916044808301926020929190829003018186803b158015612a5057600080fd5b505afa158015612a64573d6000803e3d6000fd5b505050506040513d6020811015612a7a57600080fd5b505160065460408051600160e01b6379ade32f0281526001600160a01b038a811660048301526024820186905291519396509116916379ade32f91604480820192602092909190829003018186803b158015612ad557600080fd5b505afa158015612ae9573d6000803e3d6000fd5b505050506040513d6020811015612aff57600080fd5b50519150612b1e612b1187858561369e565b859063ffffffff61352516565b9350600101612976565b60005460408051600160e21b6323c5b10702815233600482015290516001600160a01b0390921691638f16c41c91602480820192602092909190829003018186803b158015612b7657600080fd5b505afa158015612b8a573d6000803e3d6000fd5b505050506040513d6020811015612ba057600080fd5b5051612bab57600080fd5b60075460408051600160e01b638d16a1050281526004810186905281516000936001600160a01b031692638d16a1059260248082019391829003018186803b158015612bf657600080fd5b505afa158015612c0a573d6000803e3d6000fd5b505050506040513d6040811015612c2057600080fd5b5060209081015160025460408051600160e01b633cb23b2d0281526001600160e01b03198816600482015290519294506000936001600160a01b0390921692633cb23b2d92602480840193919291829003018186803b158015612c8257600080fd5b505afa158015612c96573d6000803e3d6000fd5b505050506040513d6020811015612cac57600080fd5b505160065460408051600160e11b637a4022a50281526001600160a01b0386811660048301529151939450600093919092169163f480454a916024808301926020929190829003018186803b158015612d0457600080fd5b505afa158015612d18573d6000803e3d6000fd5b505050506040513d6020811015612d2e57600080fd5b505190506000612d508361065487670de0b6b3a764000063ffffffff6134dc16565b60065460408051600160e21b633dd739750281526001600160a01b038881166004830152915193945060009384938493169163f75ce5d4916024808301926020929190829003018186803b158015612da757600080fd5b505afa158015612dbb573d6000803e3d6000fd5b505050506040513d6020811015612dd157600080fd5b505190505b8481101561304a57831561303d5760065460408051600160e51b63053961a90281526001600160a01b038a81166004830152602482018590529151919092169163a72c3520916044808301926020929190829003018186803b158015612e3b57600080fd5b505afa158015612e4f573d6000803e3d6000fd5b505050506040513d6020811015612e6557600080fd5b505160065460408051600160e01b6324da7b690281526001600160a01b038b8116600483015260248201869052915193965060009391909216916324da7b69916044808301926020929190829003018186803b158015612ec457600080fd5b505afa158015612ed8573d6000803e3d6000fd5b505050506040513d6020811015612eee57600080fd5b505190506000612eff858a84613889565b60065460408051600160e21b63053c1ecf0281526001600160a01b038a811660048301526024820188905260448201869052915193985093945016916314f07b3c91606480830192600092919082900301818387803b158015612f6157600080fd5b505af1158015612f75573d6000803e3d6000fd5b5050505060008411156130365785841061301757612f95858a8589613cec565b821561300c5760065460408051600160e01b63eaf53c770281526001600160a01b038c81166004830152602482018790529151919092169163eaf53c7791604480830192600092919082900301818387803b158015612ff357600080fd5b505af1158015613007573d6000803e3d6000fd5b505050505b60009550505061304a565b613023858a8587613cec565b613033868563ffffffff61353716565b95505b5050613042565b61304a565b600101612dd6565b5060008311801561305b5750600084115b15610e4c576006546001600160a01b031663eaf53c778761308387600163ffffffff61353716565b6040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050600060405180830381600087803b1580156130d257600080fd5b505af11580156130e6573d6000803e3d6000fd5b50505050505050505050505050565b60005460408051600160e21b6323c5b10702815233600482015290516001600160a01b0390921691638f16c41c91602480820192602092909190829003018186803b15801561314357600080fd5b505afa158015613157573d6000803e3d6000fd5b505050506040513d602081101561316d57600080fd5b505161317857600080fd5b6000808080805b60065460408051600160e21b6338c97bdd0281526001600160a01b0389811660048301529151919092169163e325ef74916024808301926020929190829003018186803b1580156131cf57600080fd5b505afa1580156131e3573d6000803e3d6000fd5b505050506040513d60208110156131f957600080fd5b50518110156134d45760065460408051600160e01b6396cf14550281526001600160a01b03898116600483015260248201859052915191909216916396cf1455916044808301926020929190829003018186803b15801561325957600080fd5b505afa15801561326d573d6000803e3d6000fd5b505050506040513d602081101561328357600080fd5b505160065460408051600160e01b6379ade32f0281526001600160a01b038a811660048301526024820186905291519397509116916379ade32f91604480820192602092909190829003018186803b1580156132de57600080fd5b505afa1580156132f2573d6000803e3d6000fd5b505050506040513d602081101561330857600080fd5b5051915061331786858461369e565b60065460408051600160e31b631fdaafe30281526001600160a01b038a811660048301526024820186905260006044830181905292519499509092169263fed57f1892606480820193929182900301818387803b15801561337757600080fd5b505af115801561338b573d6000803e3d6000fd5b505060065460408051600160e61b63025d10350281526001600160a01b038b8116600483015260248201879052604482018b905291519190921693506397440d409250606480830192600092919082900301818387803b1580156133ee57600080fd5b505af1158015613402573d6000803e3d6000fd5b505060408051600160f01b615557026020808301919091526001600160a01b03808c16606081811b6022860152828c16901b6036850152604a8085018a905285518086039091018152606a850180875281519190940120600554600160e11b634063ab0d02909452606e850191909152608e840181905260ae84018c905293519398501693506380c7561a925060ce8082019260009290919082900301818387803b1580156134b057600080fd5b505af11580156134c4573d6000803e3d6000fd5b50506001909201915061317f9050565b505050505050565b6000826134eb575060006113a5565b828202828482816134f857fe5b041461145057600080fd5b600080821161351157600080fd5b600082848161351c57fe5b04949350505050565b60008282018381101561145057600080fd5b60008282111561354657600080fd5b50900390565b60075460408051600160e01b633c2d4daf02815260048101849052905160009283926001600160a01b0390911691633c2d4daf91602480820192602092909190829003018186803b1580156135a057600080fd5b505afa1580156135b4573d6000803e3d6000fd5b505050506040513d60208110156135ca57600080fd5b505160408051600160f11b6121a7026020828101919091526001600160a01b03808516606081901b602285015260368085018a90528551808603909101815260568501808752815191850191909120600554600160e01b63179e91f102909252605a860192909252607a850182905242609a86015294519596509493169263179e91f19260ba808201939291829003018186803b15801561366a57600080fd5b505afa15801561367e573d6000803e3d6000fd5b505050506040513d602081101561369457600080fd5b5051949350505050565b60065460408051600160e01b6324da7b690281526001600160a01b038581166004830152602482018590529151600093849384939116916324da7b6991604480820192602092909190829003018186803b1580156136fb57600080fd5b505afa15801561370f573d6000803e3d6000fd5b505050506040513d602081101561372557600080fd5b505160065460408051600160e21b63307b569d0281526001600160a01b038a81166004830152602482018590529151939450600093919092169163c1ed5a749160448083019260e0929190829003018186803b15801561378457600080fd5b505afa158015613798573d6000803e3d6000fd5b505050506040513d60e08110156137ae57600080fd5b50606081015160a090910151600654604080516001600160e21b62392ebf02031981526001600160a01b038c8116600483015260248201889052915194975092945060009391169163ff1b4504916044808301926020929190829003018186803b15801561381b57600080fd5b505afa15801561382f573d6000803e3d6000fd5b505050506040513d602081101561384557600080fd5b505190506000613856898986613889565b915061387c9050836138708481898663ffffffff61353716565b9063ffffffff61353716565b9998505050505050505050565b60065460408051600160e21b63307b569d0281526001600160a01b03868116600483015260248201859052915160009384938493849384938493169163c1ed5a749160448083019260e0929190829003018186803b1580156138ea57600080fd5b505afa1580156138fe573d6000803e3d6000fd5b505050506040513d60e081101561391457600080fd5b506040810151606082015160a083015160c090930151919650945090925090506139ce8361394f62015180610654428963ffffffff61353716565b600660009054906101000a90046001600160a01b03166001600160a01b031663c47ac1ac6040518163ffffffff1660e01b815260040160206040518083038186803b15801561399d57600080fd5b505afa1580156139b1573d6000803e3d6000fd5b505050506040513d60208110156139c757600080fd5b5051613eb3565b600654604080516001600160e21b62392ebf02031981526001600160a01b038d81166004830152602482018c905291519398506000938593929092169163ff1b450491604480820192602092909190829003018186803b158015613a3157600080fd5b505afa158015613a45573d6000803e3d6000fd5b505050506040513d6020811015613a5b57600080fd5b81019080805190602001909291905050508488870303030390506000613b208b8b600660009054906101000a90046001600160a01b03166001600160a01b03166379ade32f8f8e6040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b031681526020018281526020019250505060206040518083038186803b158015613aef57600080fd5b505afa158015613b03573d6000803e3d6000fd5b505050506040513d6020811015613b1957600080fd5b5051613c14565b90506000821215613b3057600091505b9096508690613b4983613870838563ffffffff61353716565b871115613b6757613b6483613870838b63ffffffff61353716565b96505b505050505050935093915050565b60408051600160f11b6121a7026020808301919091526001600160a01b03808616606081901b602285015260368085018790528551808603909101815260568501808752815191850191909120600554600160e01b63179e91f102909252605a860192909252607a850182905242609a86015294516000959194919092169263179e91f19260ba80840193829003018186803b15801561366a57600080fd5b60408051600160f01b615557026020808301919091526001600160a01b03808716606081811b6022860152828816901b6036850152604a80850187905285518086039091018152606a8501808752815191850191909120600554600160e21b631729236302909252606e860192909252608e8501829052945160009591949190921692635ca48d8c9260ae80840193829003018186803b158015613cb757600080fd5b505afa158015613ccb573d6000803e3d6000fd5b505050506040513d6020811015613ce157600080fd5b505195945050505050565b60065460408051600160e01b6324da7b690281526001600160a01b03868116600483015260248201869052915160009392909216916324da7b6991604480820192602092909190829003018186803b158015613d4757600080fd5b505afa158015613d5b573d6000803e3d6000fd5b505050506040513d6020811015613d7157600080fd5b505160065460408051600160e41b6248dc990281526001600160a01b0389811660048301526024820185905260448201879052915193945091169163048dc9909160648082019260009290919082900301818387803b158015613dd357600080fd5b505af1158015613de7573d6000803e3d6000fd5b505060408051600160f01b615557026020808301919091526001600160a01b03808b16606081811b6022860152828c16901b6036850152604a8085018b905285518086039091018152606a850180875281519190940120600554600160e01b637aef5b7302909452606e850191909152608e840181905260ae84018990529351939550169250637aef5b739160ce80830192600092919082900301818387803b158015613e9357600080fd5b505af1158015613ea7573d6000803e3d6000fd5b50505050505050505050565b600082821115613f07576000613ee683610654620186a0613eda838963ffffffff61353716565b9063ffffffff6134dc16565b9050613eff620186a0610654838863ffffffff6134dc16565b915050611450565b506000939250505056fea165627a7a72305820ca5bfd45959016beadc50e0eefceb26fa03c27934401dfc5ee77df7c5e4395640029"
}