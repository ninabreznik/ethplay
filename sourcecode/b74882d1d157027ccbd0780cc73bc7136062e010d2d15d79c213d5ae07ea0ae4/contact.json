{
  "address": "0xc2ee4954ea6e5164fa4ab8af4d326f6398c23299",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MasterDeposit",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-01\n*/\n\npragma solidity ^0.4.21;\n\n// File: contracts/Interfaces/MasterDepositInterface.sol\n\n/**\n * @dev Interface of MasterDeposit that should be used in child contracts \n * @dev this ensures that no duplication of code and implicit gasprice will be used for the dynamic creation of child contract\n */\ncontract MasterDepositInterface {\n    address public coldWallet1;\n    address public coldWallet2;\n    uint public percentage;\n    function fireDepositToChildEvent(uint _amount) public;\n}\n\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/ChildDeposit.sol\n\n/**\n* @dev Should be dinamically created from master contract \n* @dev multiple payers can contribute here \n*/\ncontract ChildDeposit {\n    \n    /**\n    * @dev prevents over and under flows\n    */\n    using SafeMath for uint;\n    \n    /**\n    * @dev import only the interface for low gas cost\n    */\n    // MasterDepositInterface public master;\n    address masterAddress;\n\n    function ChildDeposit() public {\n        masterAddress = msg.sender;\n        // master = MasterDepositInterface(msg.sender);\n    }\n\n    /**\n    * @dev any ETH income will fire a master deposit contract event\n    * @dev the redirect of ETH will be split in the two wallets provided by the master with respect to the share percentage set for wallet 1 \n    */\n    function() public payable {\n\n        MasterDepositInterface master = MasterDepositInterface(masterAddress);\n        // fire transfer event\n        master.fireDepositToChildEvent(msg.value);\n\n        // trasnfer of ETH\n        // with respect to the percentage set\n        uint coldWallet1Share = msg.value.mul(master.percentage()).div(100);\n        \n        // actual transfer\n        master.coldWallet1().transfer(coldWallet1Share);\n        master.coldWallet2().transfer(msg.value.sub(coldWallet1Share));\n    }\n\n    /**\n    * @dev function that can only be called by the creator of this contract\n    * @dev the actual condition of transfer is in the logic of the master contract\n    * @param _value ERC20 amount \n    * @param _tokenAddress ERC20 contract address \n    * @param _destination should be onbe of the 2 coldwallets\n    */\n    function withdraw(address _tokenAddress, uint _value, address _destination) public onlyMaster {\n        ERC20(_tokenAddress).transfer(_destination, _value);\n    }\n\n    modifier onlyMaster() {\n        require(msg.sender == address(masterAddress));\n        _;\n    }\n    \n}\n\n// File: zeppelin-solidity/contracts/ReentrancyGuard.sol\n\n/**\n * @title Helps contracts guard agains reentrancy attacks.\n * @author Remco Bloemen <[email protected]Ï€.com>\n * @notice If you mark a function `nonReentrant`, you should also\n * mark it `external`.\n */\ncontract ReentrancyGuard {\n\n  /**\n   * @dev We use a single lock for the whole contract.\n   */\n  bool private reentrancy_lock = false;\n\n  /**\n   * @dev Prevents a contract from calling itself, directly or indirectly.\n   * @notice If you mark a function `nonReentrant`, you should also\n   * mark it `external`. Calling one nonReentrant function from\n   * another is not supported. Instead, you can implement a\n   * `private` function doing the actual work, and a `external`\n   * wrapper marked as `nonReentrant`.\n   */\n  modifier nonReentrant() {\n    require(!reentrancy_lock);\n    reentrancy_lock = true;\n    _;\n    reentrancy_lock = false;\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/ownership/Claimable.sol\n\n/**\n * @title Claimable\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n * This allows the new owner to accept the transfer.\n */\ncontract Claimable is Ownable {\n  address public pendingOwner;\n\n  /**\n   * @dev Modifier throws if called by any account other than the pendingOwner.\n   */\n  modifier onlyPendingOwner() {\n    require(msg.sender == pendingOwner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to set the pendingOwner address.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    pendingOwner = newOwner;\n  }\n\n  /**\n   * @dev Allows the pendingOwner address to finalize the transfer.\n   */\n  function claimOwnership() onlyPendingOwner public {\n    OwnershipTransferred(owner, pendingOwner);\n    owner = pendingOwner;\n    pendingOwner = address(0);\n  }\n}\n\n// File: contracts/MasterDeposit.sol\n\n/**\n* @dev master contract that creates ChildDeposits. Responsible for controlling and setup of deposit chain.  \n* @dev all functions that should be called from child deposits are specified in the MasterDepositInterface \n*/\ncontract MasterDeposit is MasterDepositInterface, Claimable, ReentrancyGuard {\n    \n    /**\n    * @dev prevents over and under flows\n    */\n    using SafeMath for uint;\n\n    /**\n    * @dev mapping of all created child deposits\n    */\n    mapping (address => bool) public childDeposits;\n\n    /**\n    * @dev responsible for creating deposits (in this way the owner isn't exposed to a api/server security breach)\n    * @dev by loosing the depositCreator key an attacker can only create deposits that will not be a real threat and another depositCreator can be allocated\n    */\n    mapping (address => bool) public depositCreators;\n\n    /**\n    * @dev Fired at create time\n    * @param _depositAddress blockchain address of the newly created deposit contract\n    */\n    event CreatedDepositEvent (\n    address indexed _depositAddress\n    );\n    \n    /**\n    * @dev Fired at transfer time\n    * @dev Event that signals the transfer of an ETH amount \n    * @param _depositAddress blockchain address of the deposit contract that received ETH\n    * @param _amount of ETH\n    */\n    event DepositToChildEvent(\n    address indexed _depositAddress, \n    uint _amount\n    );\n\n\n    /**\n    * @param _wallet1 redirect of tokens (ERC20) or ETH\n    * @param _wallet2 redirect of tokens (ERC20) or eth\n    * @param _percentage _wallet1 split percentage \n    */\n    function MasterDeposit(address _wallet1, address _wallet2, uint _percentage) onlyValidPercentage(_percentage) public {\n        require(_wallet1 != address(0));\n        require(_wallet2 != address(0));\n        percentage = _percentage;\n        coldWallet1 = _wallet1;\n        coldWallet2 = _wallet2;\n    }\n\n    /**\n    * @dev creates a number of instances of ChildDeposit contracts\n    * @param _count creates a specified number of deposit contracts\n    */\n    function createChildDeposits(uint _count) public onlyDepositCreatorOrMaster {\n        for (uint i = 0; i < _count; i++) {\n            ChildDeposit childDeposit = new ChildDeposit();\n            childDeposits[address(childDeposit)] = true;\n            emit CreatedDepositEvent(address(childDeposit));    \n        }\n    }\n\n    /**\n    * @dev add an address that is responsible for creating deposits \n    */\n    function addDepositCreator(address _depositCreator) public onlyOwner {\n        require(_depositCreator != address(0));\n        depositCreators [_depositCreator] = true;\n    }\n\n    /**\n    * @dev add an address that is responsible for creating deposits \n    */\n    function removeDepositCreator(address _depositCreator) public onlyOwner {\n        require(_depositCreator != address(0));\n        depositCreators [_depositCreator] = false;\n    }\n\n    /**\n    * @dev Setter for the income percentage in the first coldwallet (not setting this the second wallet will receive all income)\n    */\n    function setColdWallet1SplitPercentage(uint _percentage) public onlyOwner onlyValidPercentage(_percentage) {\n        percentage = _percentage;\n    }\n\n    /**\n    * @dev function created to emit the ETH transfer event from the child contract only\n    * @param _amount ETH amount \n    */\n    function fireDepositToChildEvent(uint _amount) public onlyChildContract {\n        emit DepositToChildEvent(msg.sender, _amount);\n    }\n\n    /**\n    * @dev changes the coldwallet1 address\n    */\n    function setColdWallet1(address _coldWallet1) public onlyOwner {\n        require(_coldWallet1 != address(0));\n        coldWallet1 = _coldWallet1;\n    }\n\n    /**\n    * @dev changes the coldwallet2 address\n    */\n    function setColdWallet2(address _coldWallet2) public onlyOwner {\n        require(_coldWallet2 != address(0));\n        coldWallet2 = _coldWallet2;\n    }\n\n    /**\n    * @dev function that can be called only by deposit creator due to security reasons and will withdraw the amount of ERC20 tokens\n    * @dev from the deposit contract list to the cold wallets \n    * @dev transfers only the ERC20 tokens, ETH should be transferred automatically\n    * @param _deposits batch list with all deposit contracts that might hold ERC20 tokens\n    * @param _tokenContractAddress specifies what token to be transfered form each deposit from the batch to the cold wallets\n    */\n    function transferTokens(address[] _deposits, address _tokenContractAddress) public onlyDepositCreatorOrMaster nonReentrant {\n        for (uint i = 0; i < _deposits.length; i++) {\n            address deposit = _deposits[i];\n            uint erc20Balance = ERC20(_tokenContractAddress).balanceOf(deposit);\n\n            // if no balance found just skip\n            if (erc20Balance == 0) {\n                continue;\n            }\n            \n            // trasnfer of erc20 tokens\n            // with respect to the percentage set\n            uint coldWallet1Share = erc20Balance.mul(percentage).div(100);\n            uint coldWallet2Share = erc20Balance.sub(coldWallet1Share); \n            ChildDeposit(deposit).withdraw(_tokenContractAddress,coldWallet1Share, coldWallet1);\n            ChildDeposit(deposit).withdraw(_tokenContractAddress,coldWallet2Share, coldWallet2);\n        }\n    }\n\n    modifier onlyChildContract() {\n        require(childDeposits[msg.sender]);\n        _;\n    }\n\n    modifier onlyDepositCreatorOrMaster() {\n        require(msg.sender == owner || depositCreators[msg.sender]);\n        _;\n    }\n\n    modifier onlyValidPercentage(uint _percentage) {\n        require(_percentage >=0 && _percentage <= 100);\n        _;\n    }\n\n}",
  "bytecode": "60606040526000600460146101000a81548160ff021916908315150217905550341561002a57600080fd5b604051606080611aef8339810160405280805190602001909190805190602001909190805190602001909190505033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600081101580156100ac575060648111155b15156100b757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156100f357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561012f57600080fd5b81600281905550836000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050611925806101ca6000396000f3006060604052600436106100f1576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630424d979146100f65780630f2280871461012f5780631bbec4e7146101a857806341de4181146101fd5780634e71e0c81461022057806365a8a483146102355780638da5cb5b1461026e578063917180c7146102c35780639bc6f0ec146102e6578063a07ead7314610309578063bbfb968214610342578063c18a278014610393578063c78ad77f146103e4578063dc8ee41e1461040d578063e30c397814610462578063e894326c146104b7578063f2fde38b146104f0575b600080fd5b341561010157600080fd5b61012d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610529565b005b341561013a57600080fd5b6101a660048080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061061c565b005b34156101b357600080fd5b6101bb610a74565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561020857600080fd5b61021e6004808035906020019091905050610a9a565b005b341561022b57600080fd5b610233610b43565b005b341561024057600080fd5b61026c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ce4565b005b341561027957600080fd5b610281610dc0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156102ce57600080fd5b6102e46004808035906020019091905050610de6565b005b34156102f157600080fd5b6103076004808035906020019091905050610e6b565b005b341561031457600080fd5b610340600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ff8565b005b341561034d57600080fd5b610379600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506110d3565b604051808215151515815260200191505060405180910390f35b341561039e57600080fd5b6103ca600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506110f3565b604051808215151515815260200191505060405180910390f35b34156103ef57600080fd5b6103f7611113565b6040518082815260200191505060405180910390f35b341561041857600080fd5b610420611119565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561046d57600080fd5b61047561113e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156104c257600080fd5b6104ee600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611164565b005b34156104fb57600080fd5b610527600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611257565b005b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561058557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156105c157600080fd5b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000806000806000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806106c95750600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b15156106d457600080fd5b600460149054906101000a900460ff161515156106f057600080fd5b6001600460146101000a81548160ff021916908315150217905550600094505b8651851015610a5057868581518110151561072757fe5b9060200190602002015193508573ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15156107cd57600080fd5b5af115156107da57600080fd5b50505060405180519050925060008314156107f457610a43565b61081c606461080e600254866112f790919063ffffffff16565b61133290919063ffffffff16565b9150610831828461134d90919063ffffffff16565b90508373ffffffffffffffffffffffffffffffffffffffff166369328dec87846000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050600060405180830381600087803b151561092a57600080fd5b5af1151561093757600080fd5b5050508373ffffffffffffffffffffffffffffffffffffffff166369328dec8783600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050600060405180830381600087803b1515610a3257600080fd5b5af11515610a3f57600080fd5b5050505b8480600101955050610710565b6000600460146101000a81548160ff02191690831515021790555050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610af257600080fd5b3373ffffffffffffffffffffffffffffffffffffffff167f70c555f181d0128c29bbf733f11f75d7566cbe33746366f087d87f0f76b56d18826040518082815260200191505060405180910390a250565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b9f57600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d4057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610d7c57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e4257600080fd5b8060008110158015610e55575060648111155b1515610e6057600080fd5b816002819055505050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610f135750600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1515610f1e57600080fd5b600091505b82821015610ff357610f33611366565b604051809103906000f0801515610f4957600080fd5b90506001600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167f90b7e321d846c714c6c55eb0cc4aa8427ac9abe6ab643cd99c77eb1ffea547a660405160405180910390a28180600101925050610f23565b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561105457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561109057600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60066020528060005260406000206000915054906101000a900460ff1681565b60056020528060005260406000206000915054906101000a900460ff1681565b60025481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111c057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156111fc57600080fd5b6001600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112b357600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600084141561130c576000915061132b565b828402905082848281151561131d57fe5b0414151561132757fe5b8091505b5092915050565b600080828481151561134057fe5b0490508091505092915050565b600082821115151561135b57fe5b818303905092915050565b604051610583806113778339019056006060604052341561000f57600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506105258061005e6000396000f300606060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806369328dec1461030f575b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691508173ffffffffffffffffffffffffffffffffffffffff166341de4181346040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b15156100d657600080fd5b5af115156100e357600080fd5b50505061018560646101778473ffffffffffffffffffffffffffffffffffffffff1663c78ad77f6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151561015157600080fd5b5af1151561015e57600080fd5b505050604051805190503461037090919063ffffffff16565b6103ab90919063ffffffff16565b90508173ffffffffffffffffffffffffffffffffffffffff1663dc8ee41e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156101ea57600080fd5b5af115156101f757600080fd5b5050506040518051905073ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050151561024057600080fd5b8173ffffffffffffffffffffffffffffffffffffffff16631bbec4e76040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156102a357600080fd5b5af115156102b057600080fd5b5050506040518051905073ffffffffffffffffffffffffffffffffffffffff166108fc6102e683346103c690919063ffffffff16565b9081150290604051600060405180830381858888f19350505050151561030b57600080fd5b5050005b341561031a57600080fd5b61036e600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506103df565b005b600080600084141561038557600091506103a4565b828402905082848281151561039657fe5b041415156103a057fe5b8091505b5092915050565b60008082848115156103b957fe5b0490508091505092915050565b60008282111515156103d457fe5b818303905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561043a57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15156104dc57600080fd5b5af115156104e957600080fd5b50505060405180519050505050505600a165627a7a723058203aeb29121d6c05dfe4ee2b67ac37929cb292c1a5279a18561e9fc7b2e8673f1c0029a165627a7a72305820460b0df6a71d98e0bbcce0467805e79b0f9867d0bd6d2328418a300659708f0a0029000000000000000000000000191073bee4d7d115ea74bb1ec9611807671e6e960000000000000000000000006a626130798b7e9f6ca8d7a092e72cec4e78ac620000000000000000000000000000000000000000000000000000000000000032",
  "constructorArguments": "000000000000000000000000191073bee4d7d115ea74bb1ec9611807671e6e960000000000000000000000006a626130798b7e9f6ca8d7a092e72cec4e78ac620000000000000000000000000000000000000000000000000000000000000032"
}