{
  "address": "0xdee02d94be4929d26f67b64ada7acf1914007f10",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RUNEToken",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-08\n*/\n\n// compiler: 0.4.21+commit.dfe3193c.Emscripten.clang\npragma solidity ^0.4.21;\n\n// ERC20 Token with ERC223 Token compatibility\n// SafeMath from OpenZeppelin Standard\n// Added burn functions from Ethereum Token \n// - https://theethereum.wiki/w/index.php/ERC20_Token_Standard\n// - https://github.com/Dexaran/ERC23-tokens/blob/Recommended/ERC223_Token.sol\n// - https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n// - https://www.ethereum.org/token (uncontrolled, non-standard)\n\n\n// ERC223\ninterface ContractReceiver {\n  function tokenFallback( address from, uint value, bytes data ) external;\n}\n\n// SafeMath\ncontract SafeMath {\n\n    function safeSub(uint a, uint b) internal pure returns (uint) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function safeAdd(uint a, uint b) internal pure returns (uint) {\n        uint c = a + b;\n        assert(c >= a);\n        return c;\n    }\n    \n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n}\n}\n\n\ncontract RUNEToken is SafeMath\n{\n    \n    // Rune Characteristics\n  string  public name = \"Rune\";\n  string  public symbol  = \"RUNE\";\n  uint256   public decimals  = 18;\n  uint256 public totalSupply  = 1000000000 * (10 ** decimals);\n\n    // Mapping\n  mapping( address => uint256 ) balances_;\n  mapping( address => mapping(address => uint256) ) allowances_;\n  \n  // Minting event\n  function RUNEToken() public {\n        balances_[msg.sender] = totalSupply;\n            emit Transfer( address(0), msg.sender, totalSupply );\n    }\n\n  function() public payable { revert(); } // does not accept money\n  \n  // ERC20\n  event Approval( address indexed owner,\n                  address indexed spender,\n                  uint value );\n\n  event Transfer( address indexed from,\n                  address indexed to,\n                  uint256 value );\n\n\n  // ERC20\n  function balanceOf( address owner ) public constant returns (uint) {\n    return balances_[owner];\n  }\n\n  // ERC20\n  function approve( address spender, uint256 value ) public\n  returns (bool success)\n  {\n    allowances_[msg.sender][spender] = value;\n    emit Approval( msg.sender, spender, value );\n    return true;\n  }\n \n  // recommended fix for known attack on any ERC20\n  function safeApprove( address _spender,\n                        uint256 _currentValue,\n                        uint256 _value ) public\n                        returns (bool success) {\n\n    // If current allowance for _spender is equal to _currentValue, then\n    // overwrite it with _value and return true, otherwise return false.\n\n    if (allowances_[msg.sender][_spender] == _currentValue)\n      return approve(_spender, _value);\n\n    return false;\n  }\n\n  // ERC20\n  function allowance( address owner, address spender ) public constant\n  returns (uint256 remaining)\n  {\n    return allowances_[owner][spender];\n  }\n\n  // ERC20\n  function transfer(address to, uint256 value) public returns (bool success)\n  {\n    bytes memory empty; // null\n    _transfer( msg.sender, to, value, empty );\n    return true;\n  }\n\n  // ERC20\n  function transferFrom( address from, address to, uint256 value ) public\n  returns (bool success)\n  {\n    require( value <= allowances_[from][msg.sender] );\n\n    allowances_[from][msg.sender] -= value;\n    bytes memory empty;\n    _transfer( from, to, value, empty );\n\n    return true;\n  }\n\n  // ERC223 Transfer and invoke specified callback\n  function transfer( address to,\n                     uint value,\n                     bytes data,\n                     string custom_fallback ) public returns (bool success)\n  {\n    _transfer( msg.sender, to, value, data );\n\n    if ( isContract(to) )\n    {\n      ContractReceiver rx = ContractReceiver( to );\n      require( address(rx).call.value(0)(bytes4(keccak256(custom_fallback)),\n               msg.sender,\n               value,\n               data) );\n    }\n\n    return true;\n  }\n\n  // ERC223 Transfer to a contract or externally-owned account\n  function transfer( address to, uint value, bytes data ) public\n  returns (bool success)\n  {\n    if (isContract(to)) {\n      return transferToContract( to, value, data );\n    }\n\n    _transfer( msg.sender, to, value, data );\n    return true;\n  }\n\n  // ERC223 Transfer to contract and invoke tokenFallback() method\n  function transferToContract( address to, uint value, bytes data ) private\n  returns (bool success)\n  {\n    _transfer( msg.sender, to, value, data );\n\n    ContractReceiver rx = ContractReceiver(to);\n    rx.tokenFallback( msg.sender, value, data );\n\n    return true;\n  }\n\n  // ERC223 fetch contract size (must be nonzero to be a contract)\n  function isContract( address _addr ) private constant returns (bool)\n  {\n    uint length;\n    assembly { length := extcodesize(_addr) }\n    return (length > 0);\n  }\n\n  function _transfer( address from,\n                      address to,\n                      uint value,\n                      bytes data ) internal\n  {\n    require( to != 0x0 );\n    require( balances_[from] >= value );\n    require( balances_[to] + value > balances_[to] ); // catch overflow\n\n    balances_[from] -= value;\n    balances_[to] += value;\n\n    //Transfer( from, to, value, data ); ERC223-compat version\n    bytes memory empty;\n    empty = data;\n    emit Transfer( from, to, value ); // ERC20-compat version\n  }\n  \n  \n    // Ethereum Token\n  event Burn( address indexed from, uint256 value );\n  \n    // Ethereum Token\n  function burn( uint256 value ) public\n  returns (bool success)\n  {\n    require( balances_[msg.sender] >= value );\n    balances_[msg.sender] -= value;\n    totalSupply -= value;\n\n    emit Burn( msg.sender, value );\n    return true;\n  }\n\n  // Ethereum Token\n  function burnFrom( address from, uint256 value ) public\n  returns (bool success)\n  {\n    require( balances_[from] >= value );\n    require( value <= allowances_[from][msg.sender] );\n\n    balances_[from] -= value;\n    allowances_[from][msg.sender] -= value;\n    totalSupply -= value;\n\n    emit Burn( from, value );\n    return true;\n  }\n  \n  \n}",
  "bytecode": "606060405260408051908101604052600481527f52756e65000000000000000000000000000000000000000000000000000000006020820152600090805161004b92916020019061010e565b5060408051908101604052600481527f52554e45000000000000000000000000000000000000000000000000000000006020820152600190805161009392916020019061010e565b5060126002556b033b2e3c9fd0803ce800000060035534156100b457600080fd5b600354600160a060020a033316600081815260046020526040808220849055919290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91905190815260200160405180910390a36101a9565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061014f57805160ff191683800117855561017c565b8280016001018555821561017c579182015b8281111561017c578251825591602001919060010190610161565b5061018892915061018c565b5090565b6101a691905b808211156101885760008155600101610192565b90565b610b64806101b86000396000f3006060604052600436106100b65763ffffffff60e060020a60003504166306fdde0381146100bb578063095ea7b31461014557806318160ddd1461017b57806323b872dd146101a0578063313ce567146101c857806342966c68146101db57806370a08231146101f157806379cc67901461021057806395d89b4114610232578063a9059cbb14610245578063be45fd6214610267578063dd62ed3e146102cc578063f6368f8a146102f1578063f650366214610398575b600080fd5b34156100c657600080fd5b6100ce6103bd565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561010a5780820151838201526020016100f2565b50505050905090810190601f1680156101375780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015057600080fd5b610167600160a060020a036004351660243561045b565b604051901515815260200160405180910390f35b341561018657600080fd5b61018e6104c7565b60405190815260200160405180910390f35b34156101ab57600080fd5b610167600160a060020a03600435811690602435166044356104cd565b34156101d357600080fd5b61018e61054e565b34156101e657600080fd5b610167600435610554565b34156101fc57600080fd5b61018e600160a060020a03600435166105df565b341561021b57600080fd5b610167600160a060020a03600435166024356105fa565b341561023d57600080fd5b6100ce6106d6565b341561025057600080fd5b610167600160a060020a0360043516602435610741565b341561027257600080fd5b61016760048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061076195505050505050565b34156102d757600080fd5b61018e600160a060020a0360043581169060243516610796565b34156102fc57600080fd5b61016760048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405281815292919060208401838380828437509496506107c195505050505050565b34156103a357600080fd5b610167600160a060020a0360043516602435604435610909565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104535780601f1061042857610100808354040283529160200191610453565b820191906000526020600020905b81548152906001019060200180831161043657829003601f168201915b505050505081565b600160a060020a03338116600081815260056020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60035481565b60006104d7610b26565b600160a060020a038086166000908152600560209081526040808320339094168352929052205483111561050a57600080fd5b600160a060020a03808616600090815260056020908152604080832033909416835292905220805484900390556105438585858461094c565b506001949350505050565b60025481565b600160a060020a0333166000908152600460205260408120548290101561057a57600080fd5b600160a060020a03331660008181526004602052604090819020805485900390556003805485900390557fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a2506001919050565b600160a060020a031660009081526004602052604090205490565b600160a060020a0382166000908152600460205260408120548290101561062057600080fd5b600160a060020a038084166000908152600560209081526040808320339094168352929052205482111561065357600080fd5b600160a060020a038084166000818152600460209081526040808320805488900390556005825280832033909516835293905282902080548590039055600380548590039055907fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a250600192915050565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104535780601f1061042857610100808354040283529160200191610453565b600061074b610b26565b6107573385858461094c565b5060019392505050565b600061076c84610a26565b156107835761077c848484610a2e565b905061078f565b6107573385858561094c565b9392505050565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b6000806107d03387878761094c565b6107d986610a26565b156108fd575084600160a060020a0381166000846040518082805190602001908083835b6020831061081c5780518252601f1990920191602091820191016107fd565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902060e060020a9004903388886040518563ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a03168152602001838152602001828051906020019080838360005b838110156108ad578082015183820152602001610895565b50505050905090810190601f1680156108da5780820380516001836020036101000a031916815260200191505b50935050505060006040518083038185885af1935050505015156108fd57600080fd5b50600195945050505050565b600160a060020a0333811660009081526005602090815260408083209387168352929052908120548314156109425761077c848361045b565b5060009392505050565b610954610b26565b600160a060020a038416151561096957600080fd5b600160a060020a0385166000908152600460205260409020548390101561098f57600080fd5b600160a060020a038416600090815260046020526040902054838101116109b557600080fd5b50600160a060020a03808516600081815260046020526040808220805487900390559286168082529083902080548601905583929091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a35050505050565b6000903b1190565b600080610a3d3386868661094c565b5083600160a060020a03811663c0ee0b8a3386866040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610abe578082015183820152602001610aa6565b50505050905090810190601f168015610aeb5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1515610b0b57600080fd5b5af11515610b1857600080fd5b506001979650505050505050565b602060405190810160405260008152905600a165627a7a7230582058f19d6fe37fa22d082c7954a286b0e6d84bb7e7e6ec4f8c40f912a32265e5ee0029"
}