{
  "address": "0x51ee82641ac238bde34b9859f98f5f311d6e4954",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "IQTchainToken",
  "contractName": "IssueIQTToken",
  "compilerVersion": "v0.4.12+commit.194ff033",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-09-21\n*/\n\npragma solidity ^0.4.8;\n   \n  // ----------------------------------------------------------------------------------------------\n  // Sample fixed supply token contract\n  // Enjoy. (c) BokkyPooBah 2017. The MIT Licence.\n  // ----------------------------------------------------------------------------------------------\n   \n  // ERC Token Standard #20 Interface\n  // https://github.com/ethereum/EIPs/issues/20\n contract ERC20Interface {\n    // Get the total token supply\n     function totalSupply() constant returns (uint256 totalSupply);\n   \n      // Get the account balance of another account with address _owner\n      function balanceOf(address _owner) constant returns (uint256 balance);\n   \n      // Send _value amount of tokens to address _to\n    function transfer(address _to, uint256 _value) returns (bool success);\n   \n      // Send _value amount of tokens from address _from to address _to\n      function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n   \n      // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n      // If this function is called again it overwrites the current allowance with _value.\n      // this function is required for some DEX functionality\n     function approve(address _spender, uint256 _value) returns (bool success);\n  \n     // Returns the amount which _spender is still allowed to withdraw from _owner\n     function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n \n    // Triggered when tokens are transferred.\n     event Transfer(address indexed _from, address indexed _to, uint256 _value);\n   \n      // Triggered whenever approve(address _spender, uint256 _value) is called.\n      event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n  }\n   \n contract IssueIQTToken is ERC20Interface {\n      string public constant symbol = \"IQT\";\n      string public constant name = \"IQT Token\";\n      uint8 public constant decimals = 8;\n      uint256 _totalSupply = 10000000000000000;\n      \n      // Owner of this contract\n      address public owner;\n   \n      // Balances for each account\n      mapping(address => uint256) balances;\n   \n      // Owner of account approves the transfer of an amount to another account\n      mapping(address => mapping (address => uint256)) allowed;\n   \n      // Functions with this modifier can only be executed by the owner\n      modifier onlyOwner() {\n          require (msg.sender != owner);\n          _;\n      }\n   \n      // Constructor\n      function IssueIQTToken() {\n          owner = msg.sender;\n          balances[owner] = _totalSupply;\n      }\n   \n      function totalSupply() constant returns (uint256 totalSupply) {\n          totalSupply = _totalSupply;\n      }\n   \n      // What is the balance of a particular account?\n      function balanceOf(address _owner) constant returns (uint256 balance) {\n          return balances[_owner];\n      }\n   \n      // Transfer the balance from owner's account to another account\n      function transfer(address _to, uint256 _amount) returns (bool success) {\n          if (balances[msg.sender] >= _amount \n              && _amount > 0\n              && balances[_to] + _amount > balances[_to]) {\n              balances[msg.sender] -= _amount;\n              balances[_to] += _amount;\n              Transfer(msg.sender, _to, _amount);\n              return true;\n          } else {\n              return false;\n          }\n      }\n   \n      // Send _value amount of tokens from address _from to address _to\n      // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n      // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\n      // fees in sub-currencies; the command should fail unless the _from account has\n      // deliberately authorized the sender of the message via some mechanism; we propose\n      // these standardized APIs for approval:\n      function transferFrom(\n          address _from,\n          address _to,\n          uint256 _amount\n     ) returns (bool success) {\n         if (balances[_from] >= _amount\n             && allowed[_from][msg.sender] >= _amount\n             && _amount > 0\n             && balances[_to] + _amount > balances[_to]) {\n             balances[_from] -= _amount;\n            allowed[_from][msg.sender] -= _amount;\n            balances[_to] += _amount;\n            Transfer(_from, _to, _amount);\n            return true;\n         } else {\n             return false;\n         }\n    }\n     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n   // If this function is called again it overwrites the current allowance with _value.\n     function approve(address _spender, uint256 _amount) returns (bool success) {\n         allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n         return true;\n     }\n  \n     function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n         return allowed[_owner][_spender];\n     }\n }",
  "bytecode": "6060604052662386f26fc10000600055341561001a57600080fd5b5b60018054600160a060020a03191633600160a060020a03908116919091179182905560008054929091168152600260205260409020555b5b6106a2806100626000396000f300606060405236156100a15763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100a6578063095ea7b31461013157806318160ddd1461016757806323b872dd1461018c578063313ce567146101c857806370a08231146101f15780638da5cb5b1461022257806395d89b4114610251578063a9059cbb146102dc578063dd62ed3e14610312575b600080fd5b34156100b157600080fd5b6100b9610349565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156100f65780820151818401525b6020016100dd565b50505050905090810190601f1680156101235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561013c57600080fd5b610153600160a060020a0360043516602435610380565b604051901515815260200160405180910390f35b341561017257600080fd5b61017a6103ed565b60405190815260200160405180910390f35b341561019757600080fd5b610153600160a060020a03600435811690602435166044356103f4565b604051901515815260200160405180910390f35b34156101d357600080fd5b6101db610510565b60405160ff909116815260200160405180910390f35b34156101fc57600080fd5b61017a600160a060020a0360043516610515565b60405190815260200160405180910390f35b341561022d57600080fd5b610235610534565b604051600160a060020a03909116815260200160405180910390f35b341561025c57600080fd5b6100b9610543565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156100f65780820151818401525b6020016100dd565b50505050905090810190601f1680156101235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102e757600080fd5b610153600160a060020a036004351660243561057a565b604051901515815260200160405180910390f35b341561031d57600080fd5b61017a600160a060020a0360043581169060243516610649565b60405190815260200160405180910390f35b60408051908101604052600981527f49515420546f6b656e0000000000000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260036020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b6000545b90565b600160a060020a0383166000908152600260205260408120548290108015906104445750600160a060020a0380851660009081526003602090815260408083203390941683529290522054829010155b80156104505750600082115b80156104755750600160a060020a038316600090815260026020526040902054828101115b1561050457600160a060020a0380851660008181526002602081815260408084208054899003905560038252808420338716855282528084208054899003905594881680845291905290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a3506001610508565b5060005b5b9392505050565b600881565b600160a060020a0381166000908152600260205260409020545b919050565b600154600160a060020a031681565b60408051908101604052600381527f4951540000000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a0333166000908152600260205260408120548290108015906105a35750600082115b80156105c85750600160a060020a038316600090815260026020526040902054828101115b1561063a57600160a060020a033381166000818152600260205260408082208054879003905592861680825290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060016103e7565b5060006103e7565b5b92915050565b600160a060020a038083166000908152600360209081526040808320938516835292905220545b929150505600a165627a7a72305820e90d0a2bff2481c9a2bfde1c8cc308bbb046093f7931eef2a010a7cfb5b4cd610029"
}