{
  "address": "0x6630f77801e3d8ee4c624a628d0979ab9e7d111b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WalletSimple",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-05\n*/\n\npragma solidity ^0.4.14;\n\n/**\n * Contract that exposes the needed erc20 token functions\n */\n\ncontract ERC20Interface {\n  // Send _value amount of tokens to address _to\n  function transfer(address _to, uint256 _value) returns (bool success);\n  // Get the account balance of another account with address _owner\n  function balanceOf(address _owner) constant returns (uint256 balance);\n}\n\n/**\n * Contract that will forward any incoming Ether to its creator\n */\ncontract Forwarder {\n  // Address to which any funds sent to this contract will be forwarded\n  address public parentAddress;\n  event ForwarderDeposited(address from, uint value, bytes data);\n\n  event TokensFlushed(\n    address tokenContractAddress, // The contract address of the token\n    uint value // Amount of token sent\n  );\n\n  /**\n   * Create the contract, and set the destination address to that of the creator\n   */\n  function Forwarder() {\n    parentAddress = msg.sender;\n  }\n\n  /**\n   * Modifier that will execute internal code block only if the sender is a parent of the forwarder contract\n   */\n  modifier onlyParent {\n    if (msg.sender != parentAddress) {\n      throw;\n    }\n    _;\n  }\n\n  /**\n   * Default function; Gets called when Ether is deposited, and forwards it to the destination address\n   */\n  function() payable {\n    if (!parentAddress.call.value(msg.value)(msg.data))\n      throw;\n    // Fire off the deposited event if we can forward it  \n    ForwarderDeposited(msg.sender, msg.value, msg.data);\n  }\n\n  /**\n   * Execute a token transfer of the full balance from the forwarder token to the main wallet contract\n   * @param tokenContractAddress the address of the erc20 token contract\n   */\n  function flushTokens(address tokenContractAddress) onlyParent {\n    ERC20Interface instance = ERC20Interface(tokenContractAddress);\n    var forwarderAddress = address(this);\n    var forwarderBalance = instance.balanceOf(forwarderAddress);\n    if (forwarderBalance == 0) {\n      return;\n    }\n    if (!instance.transfer(parentAddress, forwarderBalance)) {\n      throw;\n    }\n    TokensFlushed(tokenContractAddress, forwarderBalance);\n  }\n\n  /**\n   * It is possible that funds were sent to this address before the contract was deployed.\n   * We can flush those funds to the destination address.\n   */\n  function flush() {\n    if (!parentAddress.call.value(this.balance)())\n      throw;\n  }\n}\n\n/**\n * Basic multi-signer wallet designed for use in a co-signing environment where 2 signatures are required to move funds.\n * Typically used in a 2-of-3 signing configuration. Uses ecrecover to allow for 2 signatures in a single transaction.\n */\ncontract WalletSimple {\n  // Events\n  event Deposited(address from, uint value, bytes data);\n  event SafeModeActivated(address msgSender);\n  event Transacted(\n    address msgSender, // Address of the sender of the message initiating the transaction\n    address otherSigner, // Address of the signer (second signature) used to initiate the transaction\n    bytes32 operation, // Operation hash (sha3 of toAddress, value, data, expireTime, sequenceId)\n    address toAddress, // The address the transaction was sent to\n    uint value, // Amount of Wei sent to the address\n    bytes data // Data sent when invoking the transaction\n  );\n  event TokenTransacted(\n    address msgSender, // Address of the sender of the message initiating the transaction\n    address otherSigner, // Address of the signer (second signature) used to initiate the transaction\n    bytes32 operation, // Operation hash (sha3 of toAddress, value, tokenContractAddress, expireTime, sequenceId)\n    address toAddress, // The address the transaction was sent to\n    uint value, // Amount of token sent\n    address tokenContractAddress // The contract address of the token\n  );\n\n  // Public fields\n  address[] public signers; // The addresses that can co-sign transactions on the wallet\n  bool public safeMode = false; // When active, wallet may only send to signer addresses\n\n  // Internal fields\n  uint constant SEQUENCE_ID_WINDOW_SIZE = 10;\n  uint[10] recentSequenceIds;\n\n  /**\n   * Modifier that will execute internal code block only if the sender is an authorized signer on this wallet\n   */\n  modifier onlysigner {\n    if (!isSigner(msg.sender)) {\n      throw;\n    }\n    _;\n  }\n\n  /**\n   * Set up a simple multi-sig wallet by specifying the signers allowed to be used on this wallet.\n   * 2 signers will be required to send a transaction from this wallet.\n   * Note: The sender is NOT automatically added to the list of signers.\n   * Signers CANNOT be changed once they are set\n   *\n   * @param allowedSigners An array of signers on the wallet\n   */\n  function WalletSimple(address[] allowedSigners) {\n    if (allowedSigners.length != 3) {\n      // Invalid number of signers\n      throw;\n    }\n    signers = allowedSigners;\n  }\n  \n    function init(address[] allowedSigners) {\n    if (allowedSigners.length != 3) {\n      // Invalid number of signers\n      throw;\n    }\n    signers = allowedSigners;\n  }\n\n  /**\n   * Gets called when a transaction is received without calling a method\n   */\n  function() payable {\n    if (msg.value > 0) {\n      // Fire deposited event if we are receiving funds\n      Deposited(msg.sender, msg.value, msg.data);\n    }\n  }\n\n  /**\n   * Create a new contract (and also address) that forwards funds to this contract\n   * returns address of newly created forwarder address\n   */\n  function createForwarder() onlysigner returns (address) {\n    return new Forwarder();\n  }\n\n  /**\n   * Execute a multi-signature transaction from this wallet using 2 signers: one from msg.sender and the other from ecrecover.\n   * The signature is a signed form (using eth.sign) of tightly packed toAddress, value, data, expireTime and sequenceId\n   * Sequence IDs are numbers starting from 1. They are used to prevent replay attacks and may not be repeated.\n   *\n   * @param toAddress the destination address to send an outgoing transaction\n   * @param value the amount in Wei to be sent\n   * @param data the data to send to the toAddress when invoking the transaction\n   * @param expireTime the number of seconds since 1970 for which this transaction is valid\n   * @param sequenceId the unique sequence id obtainable from getNextSequenceId\n   * @param signature the result of eth.sign on the operationHash sha3(toAddress, value, data, expireTime, sequenceId)\n   */\n  function sendMultiSig(address toAddress, uint value, bytes data, uint expireTime, uint sequenceId, bytes signature) onlysigner {\n    // Verify the other signer\n    var operationHash = sha3(\"ETHER\", toAddress, value, data, expireTime, sequenceId);\n    \n    var otherSigner = verifyMultiSig(toAddress, operationHash, signature, expireTime, sequenceId);\n\n    // Success, send the transaction\n    if (!(toAddress.call.value(value)(data))) {\n      // Failed executing transaction\n      throw;\n    }\n    Transacted(msg.sender, otherSigner, operationHash, toAddress, value, data);\n  }\n  \n  /**\n   * Execute a multi-signature token transfer from this wallet using 2 signers: one from msg.sender and the other from ecrecover.\n   * The signature is a signed form (using eth.sign) of tightly packed toAddress, value, tokenContractAddress, expireTime and sequenceId\n   * Sequence IDs are numbers starting from 1. They are used to prevent replay attacks and may not be repeated.\n   *\n   * @param toAddress the destination address to send an outgoing transaction\n   * @param value the amount in tokens to be sent\n   * @param tokenContractAddress the address of the erc20 token contract\n   * @param expireTime the number of seconds since 1970 for which this transaction is valid\n   * @param sequenceId the unique sequence id obtainable from getNextSequenceId\n   * @param signature the result of eth.sign on the operationHash sha3(toAddress, value, tokenContractAddress, expireTime, sequenceId)\n   */\n  function sendMultiSigToken(address toAddress, uint value, address tokenContractAddress, uint expireTime, uint sequenceId, bytes signature) onlysigner {\n    // Verify the other signer\n    var operationHash = sha3(\"ERC20\", toAddress, value, tokenContractAddress, expireTime, sequenceId);\n    \n    var otherSigner = verifyMultiSig(toAddress, operationHash, signature, expireTime, sequenceId);\n    \n    ERC20Interface instance = ERC20Interface(tokenContractAddress);\n    if (!instance.transfer(toAddress, value)) {\n        throw;\n    }\n    TokenTransacted(msg.sender, otherSigner, operationHash, toAddress, value, tokenContractAddress);\n  }\n\n  /**\n   * Execute a token flush from one of the forwarder addresses. This transfer needs only a single signature and can be done by any signer\n   *\n   * @param forwarderAddress the address of the forwarder address to flush the tokens from\n   * @param tokenContractAddress the address of the erc20 token contract\n   */\n  function flushForwarderTokens(address forwarderAddress, address tokenContractAddress) onlysigner {    \n    Forwarder forwarder = Forwarder(forwarderAddress);\n    forwarder.flushTokens(tokenContractAddress);\n  }  \n  \n  /**\n   * Do common multisig verification for both eth sends and erc20token transfers\n   *\n   * @param toAddress the destination address to send an outgoing transaction\n   * @param operationHash the sha3 of the toAddress, value, data/tokenContractAddress and expireTime\n   * @param signature the tightly packed signature of r, s, and v as an array of 65 bytes (returned by eth.sign)\n   * @param expireTime the number of seconds since 1970 for which this transaction is valid\n   * @param sequenceId the unique sequence id obtainable from getNextSequenceId\n   * returns address of the address to send tokens or eth to\n   */\n  function verifyMultiSig(address toAddress, bytes32 operationHash, bytes signature, uint expireTime, uint sequenceId) private returns (address) {\n\n    var otherSigner = recoverAddressFromSignature(operationHash, signature);\n\n    // Verify if we are in safe mode. In safe mode, the wallet can only send to signers\n    if (safeMode && !isSigner(toAddress)) {\n      // We are in safe mode and the toAddress is not a signer. Disallow!\n      throw;\n    }\n    // Verify that the transaction has not expired\n    if (expireTime < block.timestamp) {\n      // Transaction expired\n      throw;\n    }\n\n    // Try to insert the sequence ID. Will throw if the sequence id was invalid\n    tryInsertSequenceId(sequenceId);\n\n    if (!isSigner(otherSigner)) {\n      // Other signer not on this wallet or operation does not match arguments\n      throw;\n    }\n    if (otherSigner == msg.sender) {\n      // Cannot approve own transaction\n      throw;\n    }\n\n    return otherSigner;\n  }\n\n  /**\n   * Irrevocably puts contract into safe mode. When in this mode, transactions may only be sent to signing addresses.\n   */\n  function activateSafeMode() onlysigner {\n    safeMode = true;\n    SafeModeActivated(msg.sender);\n  }\n\n  /**\n   * Determine if an address is a signer on this wallet\n   * @param signer address to check\n   * returns boolean indicating whether address is signer or not\n   */\n  function isSigner(address signer) returns (bool) {\n    // Iterate through all signers on the wallet and\n    for (uint i = 0; i < signers.length; i++) {\n      if (signers[i] == signer) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Gets the second signer's address using ecrecover\n   * @param operationHash the sha3 of the toAddress, value, data/tokenContractAddress and expireTime\n   * @param signature the tightly packed signature of r, s, and v as an array of 65 bytes (returned by eth.sign)\n   * returns address recovered from the signature\n   */\n  function recoverAddressFromSignature(bytes32 operationHash, bytes signature) private returns (address) {\n    if (signature.length != 65) {\n      throw;\n    }\n    // We need to unpack the signature, which is given as an array of 65 bytes (from eth.sign)\n    bytes32 r;\n    bytes32 s;\n    uint8 v;\n    assembly {\n      r := mload(add(signature, 32))\n      s := mload(add(signature, 64))\n      v := and(mload(add(signature, 65)), 255)\n    }\n    if (v < 27) {\n      v += 27; // Ethereum versions are 27 or 28 as opposed to 0 or 1 which is submitted by some signing libs\n    }\n    return ecrecover(operationHash, v, r, s);\n  }\n\n  /**\n   * Verify that the sequence id has not been used before and inserts it. Throws if the sequence ID was not accepted.\n   * We collect a window of up to 10 recent sequence ids, and allow any sequence id that is not in the window and\n   * greater than the minimum element in the window.\n   * @param sequenceId to insert into array of stored ids\n   */\n  function tryInsertSequenceId(uint sequenceId) onlysigner private {\n    // Keep a pointer to the lowest value element in the window\n    uint lowestValueIndex = 0;\n    for (uint i = 0; i < SEQUENCE_ID_WINDOW_SIZE; i++) {\n      if (recentSequenceIds[i] == sequenceId) {\n        // This sequence ID has been used before. Disallow!\n        throw;\n      }\n      if (recentSequenceIds[i] < recentSequenceIds[lowestValueIndex]) {\n        lowestValueIndex = i;\n      }\n    }\n    if (sequenceId < recentSequenceIds[lowestValueIndex]) {\n      // The sequence ID being used is lower than the lowest value in the window\n      // so we cannot accept it as it may have been used before\n      throw;\n    }\n    if (sequenceId > (recentSequenceIds[lowestValueIndex] + 10000)) {\n      // Block sequence IDs which are much higher than the lowest value\n      // This prevents people blocking the contract by using very large sequence IDs quickly\n      throw;\n    }\n    recentSequenceIds[lowestValueIndex] = sequenceId;\n  }\n\n  /**\n   * Gets the next available sequence ID for signing when using executeAndConfirm\n   * returns the sequenceId one higher than the highest currently stored\n   */\n  function getNextSequenceId() returns (uint) {\n    uint highestSequenceId = 0;\n    for (uint i = 0; i < SEQUENCE_ID_WINDOW_SIZE; i++) {\n      if (recentSequenceIds[i] > highestSequenceId) {\n        highestSequenceId = recentSequenceIds[i];\n      }\n    }\n    return highestSequenceId + 1;\n  }\n}",
  "bytecode": "60806040526001805460ff1916905534801561001a57600080fd5b5060405161117f38038061117f83398101604052805101805160031461003f57600080fd5b8051610052906000906020840190610059565b50506100e5565b8280548282559060005260206000209081019282156100ae579160200282015b828111156100ae5782518254600160a060020a031916600160a060020a03909116178255602090920191600190910190610079565b506100ba9291506100be565b5090565b6100e291905b808211156100ba578054600160a060020a03191681556001016100c4565b90565b61108b806100f46000396000f3006080604052600436106100a35763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630dcd7a6c81146101225780632079fb9a1461019e5780632da03409146101d257806339125215146101f95780637df73e27146102ad578063a0b7967b146102e2578063a68a76cc14610309578063abe3219c1461031e578063c6044c4614610333578063fc0f392d14610388575b6000341115610120577f6e89d517057028190560dd200cf6bf792842861353d1173761dfa362e1c133f033346000366040518085600160a060020a0316600160a060020a03168152602001848152602001806020018281038252848482818152602001925080828437604051920182900397509095505050505050a15b005b34801561012e57600080fd5b50604080516020600460a43581810135601f8101849004840285018401909552848452610120948235600160a060020a039081169560248035966044359093169560643595608435953695929460c4949093920191819084018382808284375094975061039d9650505050505050565b3480156101aa57600080fd5b506101b6600435610556565b60408051600160a060020a039092168252519081900360200190f35b3480156101de57600080fd5b50610120600160a060020a036004358116906024351661057e565b34801561020557600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610120948235600160a060020a031694602480359536959460649492019190819084018382808284375050604080516020888301358a018035601f8101839004830284018301909452838352979a89359a8a8301359a919990985060609091019650919450908101925081908401838280828437509497506106169650505050505050565b3480156102b957600080fd5b506102ce600160a060020a036004351661088b565b604080519115158252519081900360200190f35b3480156102ee57600080fd5b506102f76108e9565b60408051918252519081900360200190f35b34801561031557600080fd5b506101b6610930565b34801561032a57600080fd5b506102ce610971565b34801561033f57600080fd5b50604080516020600480358082013583810280860185019096528085526101209536959394602494938501929182918501908490808284375094975061097a9650505050505050565b34801561039457600080fd5b5061012061099f565b60008060006103ab3361088b565b15156103b657600080fd5b604080517f455243323000000000000000000000000000000000000000000000000000000081526c01000000000000000000000000600160a060020a03808d1682026005840152601983018c90528a16026039820152604d8101889052606d8101879052905190819003608d019020925061043489848689896109f4565b915086905080600160a060020a031663a9059cbb8a8a6040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156104b557600080fd5b505af11580156104c9573d6000803e3d6000fd5b505050506040513d60208110156104df57600080fd5b505115156104ec57600080fd5b60408051338152600160a060020a038085166020830152818301869052808c166060830152608082018b9052891660a082015290517ff3574a20a6defd7fc26917e8013cdd578db5eaa4d9a3eb54f2bb0983ad8ab40d9181900360c00190a1505050505050505050565b600080548290811061056457fe5b600091825260209091200154600160a060020a0316905081565b60006105893361088b565b151561059457600080fd5b50604080517f3ef13367000000000000000000000000000000000000000000000000000000008152600160a060020a03838116600483015291518492831691633ef1336791602480830192600092919082900301818387803b1580156105f957600080fd5b505af115801561060d573d6000803e3d6000fd5b50505050505050565b6000806106223361088b565b151561062d57600080fd5b878787878760405180807f455448455200000000000000000000000000000000000000000000000000000081525060050186600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140185815260200184805190602001908083835b602083106106b65780518252601f199092019160209182019101610697565b51815160209384036101000a600019018019909216911617905292019485525083019190915250604080519182900301902094506106fd92508a91508490508588886109f4565b905087600160a060020a0316878760405180828051906020019080838360005b8381101561073557818101518382015260200161071d565b50505050905090810190601f1680156107625780820380516001836020036101000a031916815260200191505b5091505060006040518083038185875af192505050151561078257600080fd5b7f59bed9ab5d78073465dd642a9e3e76dfdb7d53bcae9d09df7d0b8f5234d5a8063382848b8b8b6040518087600160a060020a0316600160a060020a0316815260200186600160a060020a0316600160a060020a03168152602001856000191660001916815260200184600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561084257818101518382015260200161082a565b50505050905090810190601f16801561086f5780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a15050505050505050565b6000805b6000548110156108de5782600160a060020a03166000828154811015156108b257fe5b600091825260209091200154600160a060020a031614156108d657600191506108e3565b60010161088f565b600091505b50919050565b600080805b600a8110156109275781600282600a811061090557fe5b0154111561091f57600281600a811061091a57fe5b015491505b6001016108ee565b50600101919050565b600061093b3361088b565b151561094657600080fd5b61094e610bd8565b604051809103906000f08015801561096a573d6000803e3d6000fd5b5090505b90565b60015460ff1681565b805160031461098857600080fd5b805161099b906000906020840190610be8565b5050565b6109a83361088b565b15156109b357600080fd5b6001805460ff1916811790556040805133815290517f0909e8f76a4fd3e970f2eaef56c0ee6dfaf8b87c5b8d3f56ffce78e825a911579181900360200190a1565b600080610a018686610a70565b60015490915060ff168015610a1c5750610a1a8761088b565b155b15610a2657600080fd5b42841015610a3357600080fd5b610a3c83610b17565b610a458161088b565b1515610a5057600080fd5b600160a060020a038116331415610a6657600080fd5b9695505050505050565b60008060008084516041141515610a8657600080fd5b50505060208201516040830151604184015160ff16601b811015610aa857601b015b60408051600080825260208083018085528a905260ff8516838501526060830187905260808301869052925160019360a0808501949193601f19840193928390039091019190865af1158015610b02573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b600080610b233361088b565b1515610b2e57600080fd5b5060009050805b600a811015610b895782600282600a8110610b4c57fe5b01541415610b5957600080fd5b600282600a8110610b6657fe5b0154600282600a8110610b7557fe5b01541015610b81578091505b600101610b35565b600282600a8110610b9657fe5b0154831015610ba457600080fd5b600282600a8110610bb157fe5b015461271001831115610bc357600080fd5b82600283600a8110610bd157fe5b0155505050565b6040516103d480610c8c83390190565b828054828255906000526020600020908101928215610c4a579160200282015b82811115610c4a578251825473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909116178255602090920191600190910190610c08565b50610c56929150610c5a565b5090565b61096e91905b80821115610c5657805473ffffffffffffffffffffffffffffffffffffffff19168155600101610c605600608060405234801561001057600080fd5b5060008054600160a060020a031916331790556103a2806100326000396000f3006080604052600436106100555763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041662821de3811461010d5780633ef133671461013e5780636b9f96ea14610161575b60008054604051600160a060020a0390911691349136908083838082843782019150509250505060006040518083038185875af192505050151561009857600080fd5b7f69b31548dea9b3b707b4dff357d326e3e9348b24e7a6080a218a6edeeec48f9b33346000366040518085600160a060020a0316600160a060020a03168152602001848152602001806020018281038252848482818152602001925080828437604051920182900397509095505050505050a1005b34801561011957600080fd5b50610122610176565b60408051600160a060020a039092168252519081900360200190f35b34801561014a57600080fd5b5061015f600160a060020a0360043516610185565b005b34801561016d57600080fd5b5061015f610347565b600054600160a060020a031681565b6000805481908190600160a060020a031633146101a157600080fd5b83925030915082600160a060020a03166370a08231836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b15801561021b57600080fd5b505af115801561022f573d6000803e3d6000fd5b505050506040513d602081101561024557600080fd5b5051905080151561025557610341565b60008054604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810185905290519186169263a9059cbb926044808401936020939083900390910190829087803b1580156102c557600080fd5b505af11580156102d9573d6000803e3d6000fd5b505050506040513d60208110156102ef57600080fd5b505115156102fc57600080fd5b60408051600160a060020a03861681526020810183905281517f9401e4e79c19cbe2bd774cb70a94ba660e6718be1bac1298ab3b07f454a60821929181900390910190a15b50505050565b60008054604051600160a060020a03909116913031919081818185875af192505050151561037457600080fd5b5600a165627a7a723058200568f3377b8dcb735fefb5391c6f3f34fd50b8ffcc8cde24511d045ea6f12f0d0029a165627a7a7230582074375437aaf6c9a22bcae59bf22d9aa0a37a6b29a85a6d27f923f64f56f0baa70029000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000030000000000000000000000005a78292d3fbb9c26fb5bc2c7556da3a4b50e45bd000000000000000000000000da2b34d71034cd4cc7dd4049d56fff17260f6a66000000000000000000000000f8d3caf62fd3ae95c7c68ec659fa57a3b366d9ca",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000030000000000000000000000005a78292d3fbb9c26fb5bc2c7556da3a4b50e45bd000000000000000000000000da2b34d71034cd4cc7dd4049d56fff17260f6a66000000000000000000000000f8d3caf62fd3ae95c7c68ec659fa57a3b366d9ca"
}