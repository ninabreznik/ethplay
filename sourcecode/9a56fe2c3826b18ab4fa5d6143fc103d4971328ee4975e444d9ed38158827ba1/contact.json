{
  "address": "0xc20464e0c373486d2b3335576e83a218b1618a5e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DatariusToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-10\n*/\n\n// Datarius tokensale smart contract.\n// Developed by Phenom.Team <[emailÂ protected]>\npragma solidity ^0.4.15;\n\n/**\n *   @title SafeMath\n *   @dev Math operations with safety checks that throw on error\n */\n\nlibrary SafeMath {\n\n  function mul(uint a, uint b) internal constant returns (uint) {\n    if (a == 0) {\n      return 0;\n    }\n    uint c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint a, uint b) internal constant returns(uint) {\n    assert(b > 0);\n    uint c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n\n  function sub(uint a, uint b) internal constant returns(uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint a, uint b) internal constant returns(uint) {\n    uint c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n *   @title ERC20\n *   @dev Standart ERC20 token interface\n */\n\ncontract ERC20 {\n    uint public totalSupply = 0;\n\n    mapping(address => uint) balances;\n    mapping(address => mapping (address => uint)) allowed;\n\n    function balanceOf(address _owner) constant returns (uint);\n    function transfer(address _to, uint _value) returns (bool);\n    function transferFrom(address _from, address _to, uint _value) returns (bool);\n    function approve(address _spender, uint _value) returns (bool);\n    function allowance(address _owner, address _spender) constant returns (uint);\n\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n\n} \n\n\n/**\n *   @title DatariusToken\n *   @dev Datarius token contract\n */\ncontract DatariusToken is ERC20 {\n    using SafeMath for uint;\n    string public name = \"Datarius Credit\";\n    string public symbol = \"DTRC\";\n    uint public decimals = 18;\n\n    // Ico contract address\n    address public ico;\n    event Burn(address indexed from, uint value);\n    \n    // Tokens transfer ability status\n    bool public tokensAreFrozen = true;\n\n    // Allows execution by the owner only\n    modifier icoOnly { \n        require(msg.sender == ico); \n        _; \n    }\n\n   /**\n    *   @dev Contract constructor function sets Ico address\n    *   @param _ico          ico address\n    */\n    function DatariusToken(address _ico) public {\n       ico = _ico;\n    }\n\n   /**\n    *   @dev Function to mint tokens\n    *   @param _holder       beneficiary address the tokens will be issued to\n    *   @param _value        number of tokens to issue\n    */\n    function mintTokens(address _holder, uint _value) external icoOnly {\n       require(_value > 0);\n       balances[_holder] = balances[_holder].add(_value);\n       totalSupply = totalSupply.add(_value);\n       Transfer(0x0, _holder, _value);\n    }\n\n\n   /**\n    *   @dev Function to enable token transfers\n    */\n    function defrost() external icoOnly {\n       tokensAreFrozen = false;\n    }\n\n\n   /**\n    *   @dev Burn Tokens\n    *   @param _holder       token holder address which the tokens will be burnt\n    *   @param _value        number of tokens to burn\n    */\n    function burnTokens(address _holder, uint _value) external icoOnly {\n        require(balances[_holder] > 0);\n        totalSupply = totalSupply.sub(_value);\n        balances[_holder] = balances[_holder].sub(_value);\n        Burn(_holder, _value);\n    }\n\n   /**\n    *   @dev Get balance of tokens holder\n    *   @param _holder        holder's address\n    *   @return               balance of investor\n    */\n    function balanceOf(address _holder) constant returns (uint) {\n         return balances[_holder];\n    }\n\n   /**\n    *   @dev Send coins\n    *   throws on any error rather then return a false flag to minimize\n    *   user errors\n    *   @param _to           target address\n    *   @param _amount       transfer amount\n    *\n    *   @return true if the transfer was successful\n    */\n    function transfer(address _to, uint _amount) public returns (bool) {\n        require(!tokensAreFrozen);\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n\n   /**\n    *   @dev An account/contract attempts to get the coins\n    *   throws on any error rather then return a false flag to minimize user errors\n    *\n    *   @param _from         source address\n    *   @param _to           target address\n    *   @param _amount       transfer amount\n    *\n    *   @return true if the transfer was successful\n    */\n    function transferFrom(address _from, address _to, uint _amount) public returns (bool) {\n        require(!tokensAreFrozen);\n        balances[_from] = balances[_from].sub(_amount);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Transfer(_from, _to, _amount);\n        return true;\n     }\n\n\n   /**\n    *   @dev Allows another account/contract to spend some tokens on its behalf\n    *   throws on any error rather then return a false flag to minimize user errors\n    *\n    *   also, to minimize the risk of the approve/transferFrom attack vector\n    *   approve has to be called twice in 2 separate transactions - once to\n    *   change the allowance to 0 and secondly to change it to the new allowance\n    *   value\n    *\n    *   @param _spender      approved address\n    *   @param _amount       allowance amount\n    *\n    *   @return true if the approval was successful\n    */\n    function approve(address _spender, uint _amount) public returns (bool) {\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n   /**\n    *   @dev Function to check the amount of tokens that an owner allowed to a spender.\n    *\n    *   @param _owner        the address which owns the funds\n    *   @param _spender      the address which will spend the funds\n    *\n    *   @return              the amount of tokens still avaible for the spender\n    */\n    function allowance(address _owner, address _spender) constant returns (uint) {\n        return allowed[_owner][_spender];\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensAreFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"defrost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ico\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "6060604052600080556040805190810160405280600f81526020017f4461746172697573204372656469740000000000000000000000000000000000815250600390805190602001906200005592919062000135565b506040805190810160405280600481526020017f445452430000000000000000000000000000000000000000000000000000000081525060049080519060200190620000a392919062000135565b5060126005556001600660146101000a81548160ff0219169083151502179055503415620000d057600080fd5b604051602080620013858339810160405280805190602001909190505080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620001e4565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200017857805160ff1916838001178555620001a9565b82800160010185558215620001a9579182015b82811115620001a85782518255916020019190600101906200018b565b5b509050620001b89190620001bc565b5090565b620001e191905b80821115620001dd576000816000905550600101620001c3565b5090565b90565b61119180620001f46000396000f3006060604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100d5578063095ea7b3146101635780630d1118ce146101bd57806318160ddd146101ff57806323b872dd14610228578063313ce567146102a15780635d452201146102ca57806370a082311461031f57806395d89b411461036c578063a9059cbb146103fa578063ca67065f14610454578063dd62ed3e14610481578063f0dda65c146104ed578063f21cdf6f1461052f575b600080fd5b34156100e057600080fd5b6100e8610544565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561012857808201518184015260208101905061010d565b50505050905090810190601f1680156101555780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561016e57600080fd5b6101a3600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506105e2565b604051808215151515815260200191505060405180910390f35b34156101c857600080fd5b6101fd600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610769565b005b341561020a57600080fd5b610212610915565b6040518082815260200191505060405180910390f35b341561023357600080fd5b610287600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061091b565b604051808215151515815260200191505060405180910390f35b34156102ac57600080fd5b6102b4610be2565b6040518082815260200191505060405180910390f35b34156102d557600080fd5b6102dd610be8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561032a57600080fd5b610356600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c0e565b6040518082815260200191505060405180910390f35b341561037757600080fd5b61037f610c57565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103bf5780820151818401526020810190506103a4565b50505050905090810190601f1680156103ec5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561040557600080fd5b61043a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610cf5565b604051808215151515815260200191505060405180910390f35b341561045f57600080fd5b610467610eac565b604051808215151515815260200191505060405180910390f35b341561048c57600080fd5b6104d7600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ebf565b6040518082815260200191505060405180910390f35b34156104f857600080fd5b61052d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610f46565b005b341561053a57600080fd5b6105426110b5565b005b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105da5780601f106105af576101008083540402835291602001916105da565b820191906000526020600020905b8154815290600101906020018083116105bd57829003601f168201915b505050505081565b60008082148061066e57506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b151561067957600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107c557600080fd5b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411151561081357600080fd5b6108288160005461112e90919063ffffffff16565b60008190555061088081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461112e90919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a25050565b60005481565b6000600660149054906101000a900460ff1615151561093957600080fd5b61098b82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461112e90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a5d82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461112e90919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b2f82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461114790919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60055481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ced5780601f10610cc257610100808354040283529160200191610ced565b820191906000526020600020905b815481529060010190602001808311610cd057829003601f168201915b505050505081565b6000600660149054906101000a900460ff16151515610d1357600080fd5b610d6582600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461112e90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610dfa82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461114790919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600660149054906101000a900460ff1681565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fa257600080fd5b600081111515610fb157600080fd5b61100381600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461114790919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061105b8160005461114790919063ffffffff16565b6000819055508173ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561111157600080fd5b6000600660146101000a81548160ff021916908315150217905550565b600082821115151561113c57fe5b818303905092915050565b600080828401905083811015151561115b57fe5b80915050929150505600a165627a7a72305820857008d5c5c6ea1e8c4245ce7e5e64baf2e2ab3197c0bfa76f20d6663794ad9200290000000000000000000000005a8ffa5f2ce95b3a397bda16ad84781b6fde4f8b",
  "constructorArguments": "0000000000000000000000005a8FfA5f2Ce95B3A397Bda16aD84781B6FDe4f8b"
}