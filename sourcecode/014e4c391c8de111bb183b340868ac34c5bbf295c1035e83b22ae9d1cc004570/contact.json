{
  "address": "0xc15a399c4ea7815fe36857c9e290ee452a5d6b21",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "BoatPilot Token",
  "contractName": "BurnableCrowdsaleToken",
  "compilerVersion": "v0.4.17+commit.bdeb9e52",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-17\n*/\n\npragma solidity ^0.4.13;\n\n/**\n * Различные валидаторы\n */\n\ncontract ValidationUtil {\n    function requireNotEmptyAddress(address value) internal{\n        require(isAddressValid(value));\n    }\n\n    function isAddressValid(address value) internal constant returns (bool result){\n        return value != 0;\n    }\n}\n\n// File: contracts\\zeppelin\\contracts\\math\\SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function getOwner() returns(address){\n    return owner;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    require(newOwner != address(0));      \n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value) returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances. \n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) returns (bool) {\n    require(_to != address(0));\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) returns (bool);\n  function approve(address spender, uint256 value) returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n    require(_to != address(0));\n\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n  \n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until \n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval (address _spender, uint _addedValue) \n    returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue) \n    returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n/**\n * Шаблон для токена, который можно сжечь\n*/\ncontract BurnableToken is StandardToken, Ownable, ValidationUtil {\n    using SafeMath for uint;\n\n    address public tokenOwnerBurner;\n\n    /** Событие, сколько токенов мы сожгли */\n    event Burned(address burner, uint burnedAmount);\n\n    function setOwnerBurner(address _tokenOwnerBurner) public onlyOwner invalidOwnerBurner{\n        // Проверка, что адрес не пустой\n        requireNotEmptyAddress(_tokenOwnerBurner);\n\n        tokenOwnerBurner = _tokenOwnerBurner;\n    }\n\n    /**\n     * Сжигаем токены на балансе владельца токенов, вызвать может только tokenOwnerBurner\n     */\n    function burnOwnerTokens(uint burnAmount) public onlyTokenOwnerBurner validOwnerBurner{\n        burnTokens(tokenOwnerBurner, burnAmount);\n    }\n\n    /**\n     * Сжигаем токены на балансе адреса токенов, вызвать может только tokenOwnerBurner\n     */\n    function burnTokens(address _address, uint burnAmount) public onlyTokenOwnerBurner validOwnerBurner{\n        balances[_address] = balances[_address].sub(burnAmount);\n\n        // Вызываем событие\n        Burned(_address, burnAmount);\n    }\n\n    /**\n     * Сжигаем все токены на балансе владельца\n     */\n    function burnAllOwnerTokens() public onlyTokenOwnerBurner validOwnerBurner{\n        uint burnAmount = balances[tokenOwnerBurner];\n        burnTokens(tokenOwnerBurner, burnAmount);\n    }\n\n    /** Модификаторы\n     */\n    modifier onlyTokenOwnerBurner() {\n        require(msg.sender == tokenOwnerBurner);\n\n        _;\n    }\n\n    modifier validOwnerBurner() {\n        // Проверка, что адрес не пустой\n        requireNotEmptyAddress(tokenOwnerBurner);\n\n        _;\n    }\n\n    modifier invalidOwnerBurner() {\n        // Проверка, что адрес не пустой\n        require(!isAddressValid(tokenOwnerBurner));\n\n        _;\n    }\n}\n\n/**\n * Токен продаж\n *\n * ERC-20 токен, для ICO\n *\n */\n\ncontract CrowdsaleToken is StandardToken, Ownable {\n\n    /* Описание см. в конструкторе */\n    string public name;\n\n    string public symbol;\n\n    uint public decimals;\n\n    address public mintAgent;\n\n    /** Событие обновления токена (имя и символ) */\n    event UpdatedTokenInformation(string newName, string newSymbol);\n\n    /** Событие выпуска токенов */\n    event TokenMinted(uint amount, address toAddress);\n\n    /**\n     * Конструктор\n     *\n     * Токен должен быть создан только владельцем через кошелек (либо с мультиподписью, либо без нее)\n     *\n     * @param _name - имя токена\n     * @param _symbol - символ токена\n     * @param _decimals - кол-во знаков после запятой\n     */\n    function CrowdsaleToken(string _name, string _symbol, uint _decimals) {\n        owner = msg.sender;\n\n        name = _name;\n        symbol = _symbol;\n\n        decimals = _decimals;\n    }\n\n    /**\n     * Владелец должен вызвать эту функцию, чтобы выпустить токены на адрес\n     */\n    function mintToAddress(uint amount, address toAddress) onlyMintAgent{\n        // перевод токенов на аккаунт\n        balances[toAddress] = amount;\n\n        // вызываем событие\n        TokenMinted(amount, toAddress);\n    }\n\n    /**\n     * Владелец может обновить инфу по токену\n     */\n    function setTokenInformation(string _name, string _symbol) onlyOwner {\n        name = _name;\n        symbol = _symbol;\n\n        // Вызываем событие\n        UpdatedTokenInformation(name, symbol);\n    }\n\n    /**\n     * Только владелец может обновить агента для создания токенов\n     */\n    function setMintAgent(address _address) onlyOwner {\n        mintAgent =  _address;\n    }\n\n    modifier onlyMintAgent(){\n        require(msg.sender == mintAgent);\n\n        _;\n    }\n}\n\n/**\n * Шаблон для продаж токена, который можно сжечь\n *\n */\ncontract BurnableCrowdsaleToken is BurnableToken, CrowdsaleToken {\n\n    function BurnableCrowdsaleToken(string _name, string _symbol, uint _decimals) CrowdsaleToken(_name, _symbol, _decimals) BurnableToken(){\n\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenOwnerBurner\",\"type\":\"address\"}],\"name\":\"setOwnerBurner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"burnOwnerTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setTokenInformation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"mintToAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenOwnerBurner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setMintAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnAllOwnerTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"UpdatedTokenInformation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"TokenMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"burnedAmount\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "606060405234156200001057600080fd5b604051620011be380380620011be8339810160405280805182019190602001805182019190602001805160038054600160a060020a033316600160a060020a03199182168117909116179055915083905082826005838051620000789291602001906200009e565b5060068280516200008e9291602001906200009e565b5060075550620001439350505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000e157805160ff191683800117855562000111565b8280016001018555821562000111579182015b8281111562000111578251825591602001919060010190620000f4565b506200011f92915062000123565b5090565b6200014091905b808211156200011f57600081556001016200012a565b90565b61106b80620001536000396000f300606060405236156101305763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610135578063095ea7b3146101bf5780630d1118ce146101f55780630d3737b01461021957806318160ddd1461024857806323b872dd1461026d578063313ce5671461029557806337989eb6146102a857806349f9f4d0146102c75780634eee966f146102dd578063512b658d14610370578063661884631461039257806370a08231146103b4578063773531f3146103d3578063893d20e8146103e65780638da5cb5b146103f957806395d89b411461040c578063a9059cbb1461041f578063ab80250914610441578063d73dd62314610460578063dd62ed3e14610482578063e94200f1146104a7578063f2fde38b146104ba575b600080fd5b341561014057600080fd5b6101486104d9565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561018457808201518382015260200161016c565b50505050905090810190601f1680156101b15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101ca57600080fd5b6101e1600160a060020a0360043516602435610577565b604051901515815260200160405180910390f35b341561020057600080fd5b610217600160a060020a036004351660243561061d565b005b341561022457600080fd5b61022c6106dd565b604051600160a060020a03909116815260200160405180910390f35b341561025357600080fd5b61025b6106ec565b60405190815260200160405180910390f35b341561027857600080fd5b6101e1600160a060020a03600435811690602435166044356106f2565b34156102a057600080fd5b61025b61081c565b34156102b357600080fd5b610217600160a060020a0360043516610822565b34156102d257600080fd5b610217600435610894565b34156102e857600080fd5b61021760046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405281815292919060208401838380828437509496506108dd95505050505050565b341561037b57600080fd5b610217600435600160a060020a0360243516610a4b565b341561039d57600080fd5b6101e1600160a060020a0360043516602435610acb565b34156103bf57600080fd5b61025b600160a060020a0360043516610bc5565b34156103de57600080fd5b61022c610be0565b34156103f157600080fd5b61022c610bef565b341561040457600080fd5b61022c610bff565b341561041757600080fd5b610148610c0e565b341561042a57600080fd5b6101e1600160a060020a0360043516602435610c79565b341561044c57600080fd5b610217600160a060020a0360043516610d4f565b341561046b57600080fd5b6101e1600160a060020a0360043516602435610d99565b341561048d57600080fd5b61025b600160a060020a0360043581169060243516610e3d565b34156104b257600080fd5b610217610e68565b34156104c557600080fd5b610217600160a060020a0360043516610ec2565b60058054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561056f5780601f106105445761010080835404028352916020019161056f565b820191906000526020600020905b81548152906001019060200180831161055257829003601f168201915b505050505081565b60008115806105a95750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b15156105b457600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60045433600160a060020a0390811691161461063857600080fd5b60045461064d90600160a060020a0316610f5d565b600160a060020a038216600090815260016020526040902054610676908263ffffffff610f7116565b600160a060020a03831660009081526001602052604090819020919091557f696de425f79f4a40bc6d2122ca50507f0efbeabbff86a84871b7196ab8ea8df7908390839051600160a060020a03909216825260208201526040908101905180910390a15050565b600854600160a060020a031681565b60005481565b600080600160a060020a038416151561070a57600080fd5b50600160a060020a03808516600081815260026020908152604080832033909516835293815283822054928252600190529190912054610750908463ffffffff610f7116565b600160a060020a038087166000908152600160205260408082209390935590861681522054610785908463ffffffff610f8316565b600160a060020a0385166000908152600160205260409020556107ae818463ffffffff610f7116565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3506001949350505050565b60075481565b60035433600160a060020a0390811691161461083d57600080fd5b60045461085290600160a060020a0316610f99565b1561085c57600080fd5b61086581610f5d565b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60045433600160a060020a039081169116146108af57600080fd5b6004546108c490600160a060020a0316610f5d565b6004546108da90600160a060020a03168261061d565b50565b60035433600160a060020a039081169116146108f857600080fd5b600582805161090b929160200190610fa7565b50600681805161091f929160200190610fa7565b507fd131ab1e6f279deea74e13a18477e13e2107deb6dc8ae955648948be5841fb46600560066040516040808252835460026000196101006001841615020190911604908201819052819060208201906060830190869080156109c35780601f10610998576101008083540402835291602001916109c3565b820191906000526020600020905b8154815290600101906020018083116109a657829003601f168201915b5050838103825284546002600019610100600184161502019091160480825260209091019085908015610a375780601f10610a0c57610100808354040283529160200191610a37565b820191906000526020600020905b815481529060010190602001808311610a1a57829003601f168201915b505094505050505060405180910390a15050565b60085433600160a060020a03908116911614610a6657600080fd5b600160a060020a038116600090815260016020526040908190208390557f3a5398bda6f1f57d6c96834fa9bf02b5517bdc847d14312015a917ba421c31c9908390839051918252600160a060020a031660208201526040908101905180910390a15050565b600160a060020a03338116600090815260026020908152604080832093861683529290529081205480831115610b2857600160a060020a033381166000908152600260209081526040808320938816835292905290812055610b5f565b610b38818463ffffffff610f7116565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526001602052604090205490565b600454600160a060020a031681565b600354600160a060020a03165b90565b600354600160a060020a031681565b60068054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561056f5780601f106105445761010080835404028352916020019161056f565b6000600160a060020a0383161515610c9057600080fd5b600160a060020a033316600090815260016020526040902054610cb9908363ffffffff610f7116565b600160a060020a033381166000908152600160205260408082209390935590851681522054610cee908363ffffffff610f8316565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b60035433600160a060020a03908116911614610d6a57600080fd5b6008805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610dd1908363ffffffff610f8316565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60045460009033600160a060020a03908116911614610e8657600080fd5b600454610e9b90600160a060020a0316610f5d565b50600454600160a060020a0316600081815260016020526040902054906108da908261061d565b60035433600160a060020a03908116911614610edd57600080fd5b600160a060020a0381161515610ef257600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b610f6681610f99565b15156108da57600080fd5b600082821115610f7d57fe5b50900390565b600082820183811015610f9257fe5b9392505050565b600160a060020a0316151590565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610fe857805160ff1916838001178555611015565b82800160010185558215611015579182015b82811115611015578251825591602001919060010190610ffa565b50611021929150611025565b5090565b610bfc91905b80821115611021576000815560010161102b5600a165627a7a72305820f1e97ef454f605240669ab6b152ad5150ce048a99ce907a79b795c789a79493e0029000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000f426f617450696c6f7420546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044e41564900000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000f426f617450696c6f7420546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044e41564900000000000000000000000000000000000000000000000000000000"
}