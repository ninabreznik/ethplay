{
  "address": "0x57831a0c76ba6b4fdcbadd6cb48cb26e8fc15e93",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "CryptoKitties: Offers",
  "contractName": "Offers",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-04\n*/\n\npragma solidity ^0.4.24;\n\n/// @title Contract that manages addresses and access modifiers for certain operations.\n/// @author Dapper Labs Inc. (https://www.dapperlabs.com)\ncontract OffersAccessControl {\n\n    // The address of the account that can replace ceo, coo, cfo, lostAndFound\n    address public ceoAddress;\n    // The address of the account that can adjust configuration variables and fulfill offer\n    address public cooAddress;\n    // The address of the CFO account that receives all the fees\n    address public cfoAddress;\n    // The address where funds of failed \"push\"es go to\n    address public lostAndFoundAddress;\n\n    // The total amount of ether (in wei) in escrow owned by CFO\n    uint256 public totalCFOEarnings;\n    // The total amount of ether (in wei) in escrow owned by lostAndFound\n    uint256 public totalLostAndFoundBalance;\n\n    /// @notice Keeps track whether the contract is frozen.\n    ///  When frozen is set to be true, it cannot be set back to false again,\n    ///  and all whenNotFrozen actions will be blocked.\n    bool public frozen = false;\n\n    /// @notice Access modifier for CEO-only functionality\n    modifier onlyCEO() {\n        require(msg.sender == ceoAddress, \"only CEO is allowed to perform this operation\");\n        _;\n    }\n\n    /// @notice Access modifier for COO-only functionality\n    modifier onlyCOO() {\n        require(msg.sender == cooAddress, \"only COO is allowed to perform this operation\");\n        _;\n    }\n\n    /// @notice Access modifier for CFO-only functionality\n    modifier onlyCFO() {\n        require(\n            msg.sender == cfoAddress &&\n            msg.sender != address(0),\n            \"only CFO is allowed to perform this operation\"\n        );\n        _;\n    }\n\n    /// @notice Access modifier for CEO-only or CFO-only functionality\n    modifier onlyCeoOrCfo() {\n        require(\n            msg.sender != address(0) &&\n            (\n                msg.sender == ceoAddress ||\n                msg.sender == cfoAddress\n            ),\n            \"only CEO or CFO is allowed to perform this operation\"\n        );\n        _;\n    }\n\n    /// @notice Access modifier for LostAndFound-only functionality\n    modifier onlyLostAndFound() {\n        require(\n            msg.sender == lostAndFoundAddress &&\n            msg.sender != address(0),\n            \"only LostAndFound is allowed to perform this operation\"\n        );\n        _;\n    }\n\n    /// @notice Assigns a new address to act as the CEO. Only available to the current CEO.\n    /// @param _newCEO The address of the new CEO\n    function setCEO(address _newCEO) external onlyCEO {\n        require(_newCEO != address(0), \"new CEO address cannot be the zero-account\");\n        ceoAddress = _newCEO;\n    }\n\n    /// @notice Assigns a new address to act as the COO. Only available to the current CEO.\n    /// @param _newCOO The address of the new COO\n    function setCOO(address _newCOO) public onlyCEO {\n        require(_newCOO != address(0), \"new COO address cannot be the zero-account\");\n        cooAddress = _newCOO;\n    }\n\n    /// @notice Assigns a new address to act as the CFO. Only available to the current CEO.\n    /// @param _newCFO The address of the new CFO\n    function setCFO(address _newCFO) external onlyCEO {\n        require(_newCFO != address(0), \"new CFO address cannot be the zero-account\");\n        cfoAddress = _newCFO;\n    }\n\n    /// @notice Assigns a new address to act as the LostAndFound account. Only available to the current CEO.\n    /// @param _newLostAndFound The address of the new lostAndFound address\n    function setLostAndFound(address _newLostAndFound) external onlyCEO {\n        require(_newLostAndFound != address(0), \"new lost and found cannot be the zero-account\");\n        lostAndFoundAddress = _newLostAndFound;\n    }\n\n    /// @notice CFO withdraws the CFO earnings\n    function withdrawTotalCFOEarnings() external onlyCFO {\n        // Obtain reference\n        uint256 balance = totalCFOEarnings;\n        totalCFOEarnings = 0;\n        cfoAddress.transfer(balance);\n    }\n\n    /// @notice LostAndFound account withdraws all the lost and found amount\n    function withdrawTotalLostAndFoundBalance() external onlyLostAndFound {\n        // Obtain reference\n        uint256 balance = totalLostAndFoundBalance;\n        totalLostAndFoundBalance = 0;\n        lostAndFoundAddress.transfer(balance);\n    }\n\n    /// @notice Modifier to allow actions only when the contract is not frozen\n    modifier whenNotFrozen() {\n        require(!frozen, \"contract needs to not be frozen\");\n        _;\n    }\n\n    /// @notice Modifier to allow actions only when the contract is frozen\n    modifier whenFrozen() {\n        require(frozen, \"contract needs to be frozen\");\n        _;\n    }\n\n    /// @notice Called by CEO or CFO role to freeze the contract.\n    ///  Only intended to be used if a serious exploit is detected.\n    /// @notice Allow two C-level roles to call this function in case either CEO or CFO key is compromised.\n    /// @notice This is a one-way process; there is no un-freezing.\n    /// @dev A frozen contract will be frozen forever, there's no way to undo this action.\n    function freeze() external onlyCeoOrCfo whenNotFrozen {\n        frozen = true;\n    }\n\n}\n\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n/// @author Dieter Shirley <[emailÂ protected]> (https://github.com/dete)\ncontract ERC721 {\n    // Required methods\n    function totalSupply() public view returns (uint256 total);\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\n    function approve(address _to, uint256 _tokenId) external;\n    function transfer(address _to, uint256 _tokenId) external;\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n\n    // Events\n    event Transfer(address from, address to, uint256 tokenId);\n    event Approval(address owner, address approved, uint256 tokenId);\n\n    // Optional\n    // function name() public view returns (string name);\n    // function symbol() public view returns (string symbol);\n    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\n    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\n\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\n}\n\n/// @title Contract that manages configuration values and fee structure for offers.\n/// @author Dapper Labs Inc. (https://www.dapperlabs.com)\ncontract OffersConfig is OffersAccessControl {\n\n    /* ************************* */\n    /* ADJUSTABLE CONFIGURATIONS */\n    /* ************************* */\n\n    // The duration (in seconds) of all offers that are created. This parameter is also used in calculating\n    // new expiration times when extending offers.\n    uint256 public globalDuration;\n    // The global minimum offer value (price + offer fee, in wei)\n    uint256 public minimumTotalValue;\n    // The minimum overbid increment % (expressed in basis points, which is 1/100 of a percent)\n    // For basis points, values 0-10,000 map to 0%-100%\n    uint256 public minimumPriceIncrement;\n\n    /* *************** */\n    /* ADJUSTABLE FEES */\n    /* *************** */\n\n    // Throughout the various contracts there will be various symbols used for the purpose of a clear display\n    // of the underlying mathematical formulation. Specifically,\n    //\n    //          - T: This is the total amount of funds associated with an offer, comprised of 1) the offer\n    //                  price which the bidder is proposing the owner of the token receive, and 2) an amount\n    //                  that is the maximum the main Offers contract will ever take - this is when the offer\n    //                  is cancelled, or fulfilled. In other scenarios, the amount taken by the main contract\n    //                  may be less, depending on other configurations.\n    //\n    //          - S: This is called the offerCut, expressed as a basis point. This determines the maximum amount\n    //                  of ether the main contract can ever take in the various possible outcomes of an offer\n    //                  (cancelled, expired, overbid, fulfilled, updated).\n    //\n    //          - P: This simply refers to the price that the bidder is offering the owner receive, upon\n    //                  fulfillment of the offer process.\n    //\n    //          - Below is the formula that ties the symbols listed above together (S is % for brevity):\n    //                  T = P + S * P\n\n    // Flat fee (in wei) the main contract takes when offer has been expired or overbid. The fee serves as a\n    // disincentive for abuse and allows recoupment of ether spent calling batchRemoveExpired on behalf of users.\n    uint256 public unsuccessfulFee;\n    // This is S, the maximum % the main contract takes on each offer. S represents the total amount paid when\n    // an offer has been fulfilled or cancelled.\n    uint256 public offerCut;\n\n    /* ****** */\n    /* EVENTS */\n    /* ****** */\n\n    event GlobalDurationUpdated(uint256 value);\n    event MinimumTotalValueUpdated(uint256 value);\n    event MinimumPriceIncrementUpdated(uint256 value);\n    event OfferCutUpdated(uint256 value);\n    event UnsuccessfulFeeUpdated(uint256 value);\n\n    /* ********* */\n    /* FUNCTIONS */\n    /* ********* */\n\n    /// @notice Sets the minimumTotalValue value. This would impact offers created after this has been set, but\n    ///  not existing offers.\n    /// @notice Only callable by COO, when not frozen.\n    /// @param _newMinTotal The minimumTotalValue value to set\n    function setMinimumTotalValue(uint256 _newMinTotal) external onlyCOO whenNotFrozen {\n        _setMinimumTotalValue(_newMinTotal, unsuccessfulFee);\n        emit MinimumTotalValueUpdated(_newMinTotal);\n    }\n\n    /// @notice Sets the globalDuration value. All offers that are created or updated will compute a new expiration\n    ///  time based on this.\n    /// @notice Only callable by COO, when not frozen.\n    /// @dev Need to check for underflow since function argument is 256 bits, and the offer expiration time is\n    ///  packed into 64 bits in the Offer struct.\n    /// @param _newDuration The globalDuration value to set.\n    function setGlobalDuration(uint256 _newDuration) external onlyCOO whenNotFrozen {\n        require(_newDuration == uint256(uint64(_newDuration)), \"new globalDuration value must not underflow\");\n        globalDuration = _newDuration;\n        emit GlobalDurationUpdated(_newDuration);\n    }\n\n    /// @notice Sets the offerCut value. All offers will compute a fee taken by this contract based on this\n    ///  configuration.\n    /// @notice Only callable by COO, when not frozen.\n    /// @dev As this configuration is a basis point, the value to set must be less than or equal to 10000.\n    /// @param _newOfferCut The offerCut value to set.\n    function setOfferCut(uint256 _newOfferCut) external onlyCOO whenNotFrozen {\n        _setOfferCut(_newOfferCut);\n        emit OfferCutUpdated(_newOfferCut);\n    }\n\n    /// @notice Sets the unsuccessfulFee value. All offers that are unsuccessful (overbid or expired)\n    ///  will have a flat fee taken by the main contract before being refunded to bidders.\n    /// @notice Given Tmin (_minTotal), flat fee (_unsuccessfulFee),\n    ///  Tmin â¥ (2 * flat fee) guarantees that offer prices â¥ flat fee, always. This is important to prevent the\n    ///  existence of offers that, when overbid or expired, would result in the main contract taking too big of a cut.\n    ///  In the case of a sufficiently low offer price, eg. the same as unsuccessfulFee, the most the main contract can\n    ///  ever take is simply the amount of unsuccessfulFee.\n    /// @notice Only callable by COO, when not frozen.\n    /// @param _newUnsuccessfulFee The unsuccessfulFee value to set.\n    function setUnsuccessfulFee(uint256 _newUnsuccessfulFee) external onlyCOO whenNotFrozen {\n        require(minimumTotalValue >= (2 * _newUnsuccessfulFee), \"unsuccessful value must be <= half of minimumTotalValue\");\n        unsuccessfulFee = _newUnsuccessfulFee;\n        emit UnsuccessfulFeeUpdated(_newUnsuccessfulFee);\n    }\n\n    /// @notice Sets the minimumPriceIncrement value. All offers that are overbid must have a price greater\n    ///  than the minimum increment computed from this basis point.\n    /// @notice Only callable by COO, when not frozen.\n    /// @dev As this configuration is a basis point, the value to set must be less than or equal to 10000.\n    /// @param _newMinimumPriceIncrement The minimumPriceIncrement value to set.\n    function setMinimumPriceIncrement(uint256 _newMinimumPriceIncrement) external onlyCOO whenNotFrozen {\n        _setMinimumPriceIncrement(_newMinimumPriceIncrement);\n        emit MinimumPriceIncrementUpdated(_newMinimumPriceIncrement);\n    }\n\n    /// @notice Utility function used internally for the setMinimumTotalValue method.\n    /// @notice Given Tmin (_minTotal), flat fee (_unsuccessfulFee),\n    ///  Tmin â¥ (2 * flat fee) guarantees that offer prices â¥ flat fee, always. This is important to prevent the\n    ///  existence of offers that, when overbid or expired, would result in the main contract taking too big of a cut.\n    ///  In the case of a sufficiently low offer price, eg. the same as unsuccessfulFee, the most the main contract can\n    ///  ever take is simply the amount of unsuccessfulFee.\n    /// @param _newMinTotal The minimumTotalValue value to set.\n    /// @param _unsuccessfulFee The unsuccessfulFee value used to check if the _minTotal specified\n    ///  is too low.\n    function _setMinimumTotalValue(uint256 _newMinTotal, uint256 _unsuccessfulFee) internal {\n        require(_newMinTotal >= (2 * _unsuccessfulFee), \"minimum value must be >= 2 * unsuccessful fee\");\n        minimumTotalValue = _newMinTotal;\n    }\n\n    /// @dev As offerCut is a basis point, the value to set must be less than or equal to 10000.\n    /// @param _newOfferCut The offerCut value to set.\n    function _setOfferCut(uint256 _newOfferCut) internal {\n        require(_newOfferCut <= 1e4, \"offer cut must be a valid basis point\");\n        offerCut = _newOfferCut;\n    }\n\n    /// @dev As minimumPriceIncrement is a basis point, the value to set must be less than or equal to 10000.\n    /// @param _newMinimumPriceIncrement The minimumPriceIncrement value to set.\n    function _setMinimumPriceIncrement(uint256 _newMinimumPriceIncrement) internal {\n        require(_newMinimumPriceIncrement <= 1e4, \"minimum price increment must be a valid basis point\");\n        minimumPriceIncrement = _newMinimumPriceIncrement;\n    }\n}\n\n/// @title Base contract for CryptoKitties Offers. Holds all common structs, events, and base variables.\n/// @author Dapper Labs Inc. (https://www.dapperlabs.com)\ncontract OffersBase is OffersConfig {\n    /*** EVENTS ***/\n\n    /// @notice The OfferCreated event is emitted when an offer is created through\n    ///  createOffer method.\n    /// @param tokenId The token id that a bidder is offering to buy from the owner.\n    /// @param bidder The creator of the offer.\n    /// @param expiresAt The timestamp when the offer will be expire.\n    /// @param total The total eth value the bidder sent to the Offer contract.\n    /// @param offerPrice The eth price that the owner of the token will receive\n    ///  if the offer is accepted.\n    event OfferCreated(\n        uint256 tokenId,\n        address bidder,\n        uint256 expiresAt,\n        uint256 total,\n        uint256 offerPrice\n    );\n\n    /// @notice The OfferCancelled event is emitted when an offer is cancelled before expired.\n    /// @param tokenId The token id that the cancelled offer was offering to buy.\n    /// @param bidder The creator of the offer.\n    /// @param bidderReceived The eth amount that the bidder received as refund.\n    /// @param fee The eth amount that CFO received as the fee for the cancellation.\n    event OfferCancelled(\n        uint256 tokenId,\n        address bidder,\n        uint256 bidderReceived,\n        uint256 fee\n    );\n\n    /// @notice The OfferFulfilled event is emitted when an active offer has been fulfilled, meaning\n    ///  the bidder now owns the token, and the orignal owner receives the eth amount from the offer.\n    /// @param tokenId The token id that the fulfilled offer was offering to buy.\n    /// @param bidder The creator of the offer.\n    /// @param owner The original owner of the token who accepted the offer.\n    /// @param ownerReceived The eth amount that the original owner received from the offer\n    /// @param fee The eth amount that CFO received as the fee for the successfully fulfilling.\n    event OfferFulfilled(\n        uint256 tokenId,\n        address bidder,\n        address owner,\n        uint256 ownerReceived,\n        uint256 fee\n    );\n\n    /// @notice The OfferUpdated event is emitted when an active offer was either extended the expiry\n    ///  or raised the price.\n    /// @param tokenId The token id that the updated offer was offering to buy.\n    /// @param bidder The creator of the offer, also is whom updated the offer.\n    /// @param newExpiresAt The new expiry date of the updated offer.\n    /// @param totalRaised The total eth value the bidder sent to the Offer contract to raise the offer.\n    ///  if the totalRaised is 0, it means the offer was extended without raising the price.\n    event OfferUpdated(\n        uint256 tokenId,\n        address bidder,\n        uint256 newExpiresAt,\n        uint256 totalRaised\n    );\n\n    /// @notice The ExpiredOfferRemoved event is emitted when an expired offer gets removed. The eth value will\n    ///  be returned to the bidder's account, excluding the fee.\n    /// @param tokenId The token id that the removed offer was offering to buy\n    /// @param bidder The creator of the offer.\n    /// @param bidderReceived The eth amount that the bidder received from the offer.\n    /// @param fee The eth amount that CFO received as the fee.\n    event ExpiredOfferRemoved(\n      uint256 tokenId,\n      address bidder,\n      uint256 bidderReceived,\n      uint256 fee\n    );\n\n    /// @notice The BidderWithdrewFundsWhenFrozen event is emitted when a bidder withdrew their eth value of\n    ///  the offer when the contract is frozen.\n    /// @param tokenId The token id that withdrawed offer was offering to buy\n    /// @param bidder The creator of the offer, also is whom withdrawed the fund.\n    /// @param amount The total amount that the bidder received.\n    event BidderWithdrewFundsWhenFrozen(\n        uint256 tokenId,\n        address bidder,\n        uint256 amount\n    );\n\n\n    /// @dev The PushFundsFailed event is emitted when the Offer contract fails to send certain amount of eth\n    ///  to an address, e.g. sending the fund back to the bidder when the offer was overbidden by a higher offer.\n    /// @param tokenId The token id of an offer that the sending fund is involved.\n    /// @param to The address that is supposed to receive the fund but failed for any reason.\n    /// @param amount The eth amount that the receiver fails to receive.\n    event PushFundsFailed(\n        uint256 tokenId,\n        address to,\n        uint256 amount\n    );\n\n    /*** DATA TYPES ***/\n\n    /// @dev The Offer struct. The struct fits in two 256-bits words.\n    struct Offer {\n        // Time when offer expires\n        uint64 expiresAt;\n        // Bidder The creator of the offer\n        address bidder;\n        // Offer cut in basis points, which ranges from 0-10000.\n        // It's the cut that CFO takes when the offer is successfully accepted by the owner.\n        // This is stored in the offer struct so that it won't be changed if COO updates\n        // the `offerCut` for new offers.\n        uint16 offerCut;\n        // Total value (in wei) a bidder sent in msg.value to create the offer\n        uint128 total;\n        // Fee (in wei) that CFO takes when the offer is expired or overbid.\n        // This is stored in the offer struct so that it won't be changed if COO updates\n        // the `unsuccessfulFee` for new offers.\n        uint128 unsuccessfulFee;\n    }\n\n    /*** STORAGE ***/\n    /// @notice Mapping from token id to its corresponding offer.\n    /// @dev One token can only have one offer.\n    ///  Making it public so that solc-0.4.24 will generate code to query offer by a given token id.\n    mapping (uint256 => Offer) public tokenIdToOffer;\n\n    /// @notice computes the minimum offer price to overbid a given offer with its offer price.\n    ///  The new offer price has to be a certain percentage, which defined by `minimumPriceIncrement`,\n    ///  higher than the previous offer price.\n    /// @dev This won't overflow, because `_offerPrice` is in uint128, and `minimumPriceIncrement`\n    ///  is 16 bits max.\n    /// @param _offerPrice The amount of ether in wei as the offer price\n    /// @return The minimum amount of ether in wei to overbid the given offer price\n    function _computeMinimumOverbidPrice(uint256 _offerPrice) internal view returns (uint256) {\n        return _offerPrice * (1e4 + minimumPriceIncrement) / 1e4;\n    }\n\n    /// @notice Computes the offer price that the owner will receive if the offer is accepted.\n    /// @dev This is safe against overflow because msg.value and the total supply of ether is capped within 128 bits.\n    /// @param _total The total value of the offer. Also is the msg.value that the bidder sent when\n    ///  creating the offer.\n    /// @param _offerCut The percentage in basis points that will be taken by the CFO if the offer is fulfilled.\n    /// @return The offer price that the owner will receive if the offer is fulfilled.\n    function _computeOfferPrice(uint256 _total, uint256 _offerCut) internal pure returns (uint256) {\n        return _total * 1e4 / (1e4 + _offerCut);\n    }\n\n    /// @notice Check if an offer exists or not by checking the expiresAt field of the offer.\n    ///  True if exists, False if not.\n    /// @dev Assuming the expiresAt field is from the offer struct in storage.\n    /// @dev Since expiry check always come right after the offer existance check, it will save some gas by checking\n    /// both existance and expiry on one field, as it only reads from the storage once.\n    /// @param _expiresAt The time at which the offer we want to validate expires.\n    /// @return True or false (if the offer exists not).\n    function _offerExists(uint256 _expiresAt) internal pure returns (bool) {\n        return _expiresAt > 0;\n    }\n\n    /// @notice Check if an offer is still active by checking the expiresAt field of the offer. True if the offer is,\n    ///  still active, False if the offer has expired,\n    /// @dev Assuming the expiresAt field is from the offer struct in storage.\n    /// @param _expiresAt The time at which the offer we want to validate expires.\n    /// @return True or false (if the offer has expired or not).\n    function _isOfferActive(uint256 _expiresAt) internal view returns (bool) {\n        return now < _expiresAt;\n    }\n\n    /// @dev Try pushing the fund to an address.\n    /// @notice If sending the fund to the `_to` address fails for whatever reason, then the logic\n    ///  will continue and the amount will be kept under the LostAndFound account. Also an event `PushFundsFailed`\n    ///  will be emitted for notifying the failure.\n    /// @param _tokenId The token id for the offer.\n    /// @param _to The address the main contract is attempting to send funds to.\n    /// @param _amount The amount of funds (in wei) the main contract is attempting to send.\n    function _tryPushFunds(uint256 _tokenId, address _to, uint256 _amount) internal {\n        // Sending the amount of eth in wei, and handling the failure.\n        // The gas spent transferring funds has a set upper limit\n        bool success = _to.send(_amount);\n        if (!success) {\n            // If failed sending to the `_to` address, then keep the amount under the LostAndFound account by\n            // accumulating totalLostAndFoundBalance.\n            totalLostAndFoundBalance = totalLostAndFoundBalance + _amount;\n\n            // Emitting the event lost amount.\n            emit PushFundsFailed(_tokenId, _to, _amount);\n        }\n    }\n}\n\n/// @title Contract that manages funds from creation to fulfillment for offers made on any ERC-721 token.\n/// @author Dapper Labs Inc. (https://www.dapperlabs.com)\n/// @notice This generic contract interfaces with any ERC-721 compliant contract\ncontract Offers is OffersBase {\n\n    // This is the main Offers contract. In order to keep our code separated into logical sections,\n    // we've broken it up into multiple files using inheritance. This allows us to keep related code\n    // collocated while still avoiding a single large file, which would be harder to maintain. The breakdown\n    // is as follows:\n    //\n    //      - OffersBase: This contract defines the fundamental code that the main contract uses.\n    //              This includes our main data storage, data types, events, and internal functions for\n    //              managing offers in their lifecycle.\n    //\n    //      - OffersConfig: This contract manages the various configuration values that determine the\n    //              details of the offers that get created, cancelled, overbid, expired, and fulfilled,\n    //              as well as the fee structure that the offers will be operating with.\n    //\n    //      - OffersAccessControl: This contract manages the various addresses and constraints for\n    //              operations that can be executed only by specific roles. The roles are: CEO, CFO,\n    //              COO, and LostAndFound. Additionally, this contract exposes functions for the CFO\n    //              to withdraw earnings and the LostAndFound account to withdraw any lost funds.\n\n    /// @dev The ERC-165 interface signature for ERC-721.\n    ///  Ref: https://github.com/ethereum/EIPs/issues/165\n    ///  Ref: https://github.com/ethereum/EIPs/issues/721\n    bytes4 constant InterfaceSignature_ERC721 = bytes4(0x9a20483d);\n\n    // Reference to contract tracking NFT ownership\n    ERC721 public nonFungibleContract;\n\n    /// @notice Creates the main Offers smart contract instance and sets initial configuration values\n    /// @param _nftAddress The address of the ERC-721 contract managing NFT ownership\n    /// @param _cooAddress The address of the COO to set\n    /// @param _globalDuration The initial globalDuration value to set\n    /// @param _minimumTotalValue The initial minimumTotalValue value to set\n    /// @param _minimumPriceIncrement The initial minimumPriceIncrement value to set\n    /// @param _unsuccessfulFee The initial unsuccessfulFee value to set\n    /// @param _offerCut The initial offerCut value to set\n    constructor(\n      address _nftAddress,\n      address _cooAddress,\n      uint256 _globalDuration,\n      uint256 _minimumTotalValue,\n      uint256 _minimumPriceIncrement,\n      uint256 _unsuccessfulFee,\n      uint256 _offerCut\n    ) public {\n        // The creator of the contract is the ceo\n        ceoAddress = msg.sender;\n\n        // Get reference of the address of the NFT contract\n        ERC721 candidateContract = ERC721(_nftAddress);\n        require(candidateContract.supportsInterface(InterfaceSignature_ERC721), \"NFT Contract needs to support ERC721 Interface\");\n        nonFungibleContract = candidateContract;\n\n        setCOO(_cooAddress);\n\n        // Set initial claw-figuration values\n        globalDuration = _globalDuration;\n        unsuccessfulFee = _unsuccessfulFee;\n        _setOfferCut(_offerCut);\n        _setMinimumPriceIncrement(_minimumPriceIncrement);\n        _setMinimumTotalValue(_minimumTotalValue, _unsuccessfulFee);\n    }\n\n    /// @notice Creates an offer on a token. This contract receives bidders funds and refunds the previous bidder\n    ///  if this offer overbids a previously active (unexpired) offer.\n    /// @notice When this offer overbids a previously active offer, this offer must have a price greater than\n    ///  a certain percentage of the previous offer price, which the minimumOverbidPrice basis point specifies.\n    ///  A flat fee is also taken from the previous offer before refund the previous bidder.\n    /// @notice When there is a previous offer that has already expired but not yet been removed from storage,\n    ///  the new offer can be created with any total value as long as it is greater than the minimumTotalValue.\n    /// @notice Works only when contract is not frozen.\n    /// @param _tokenId The token a bidder wants to create an offer for.\n    function createOffer(uint256 _tokenId) external payable whenNotFrozen {\n        // T = msg.value\n        // Check that the total amount of the offer isn't below the meow-nimum\n        require(msg.value >= minimumTotalValue, \"offer total value must be above minimumTotalValue\");\n\n        uint256 _offerCut = offerCut;\n\n        // P, the price that owner will see and receive if the offer is accepted.\n        uint256 offerPrice = _computeOfferPrice(msg.value, _offerCut);\n\n        Offer storage previousOffer = tokenIdToOffer[_tokenId];\n        uint256 previousExpiresAt = previousOffer.expiresAt;\n\n        uint256 toRefund = 0;\n\n        // Check if tokenId already has an offer\n        if (_offerExists(previousExpiresAt)) {\n            uint256 previousOfferTotal = uint256(previousOffer.total);\n\n            // If the previous offer is still active, the new offer needs to match the previous offer's price\n            // plus a minimum required increment (minimumOverbidPrice).\n            // We calculate the previous offer's price, the corresponding minimumOverbidPrice, and check if the\n            // new offerPrice is greater than or equal to the minimumOverbidPrice\n            // The owner is fur-tunate to have such a desirable kitty\n            if (_isOfferActive(previousExpiresAt)) {\n                uint256 previousPriceForOwner = _computeOfferPrice(previousOfferTotal, uint256(previousOffer.offerCut));\n                uint256 minimumOverbidPrice = _computeMinimumOverbidPrice(previousPriceForOwner);\n                require(offerPrice >= minimumOverbidPrice, \"overbid price must match minimum price increment criteria\");\n            }\n\n            uint256 cfoEarnings = previousOffer.unsuccessfulFee;\n            // Bidder gets refund: T - flat fee\n            // The in-fur-ior offer gets refunded for free, how nice.\n            toRefund = previousOfferTotal - cfoEarnings;\n\n            totalCFOEarnings += cfoEarnings;\n        }\n\n        uint256 newExpiresAt = now + globalDuration;\n\n        // Get a reference of previous bidder address before overwriting with new offer.\n        // This is only needed if there is refund\n        address previousBidder;\n        if (toRefund > 0) {\n            previousBidder = previousOffer.bidder;\n        }\n\n        tokenIdToOffer[_tokenId] = Offer(\n            uint64(newExpiresAt),\n            msg.sender,\n            uint16(_offerCut),\n            uint128(msg.value),\n            uint128(unsuccessfulFee)\n        );\n\n        // Postpone the refund until the previous offer has been overwritten by the new offer.\n        if (toRefund > 0) {\n            // Finally, sending funds to this bidder. If failed, the fund will be kept in escrow\n            // under lostAndFound's address\n            _tryPushFunds(\n                _tokenId,\n                previousBidder,\n                toRefund\n            );\n        }\n\n        emit OfferCreated(\n            _tokenId,\n            msg.sender,\n            newExpiresAt,\n            msg.value,\n            offerPrice\n        );\n    }\n\n    /// @notice Cancels an offer that must exist and be active currently. This moves funds from this contract\n    ///  back to the the bidder, after a cut has been taken.\n    /// @notice Works only when contract is not frozen.\n    /// @param _tokenId The token specified by the offer a bidder wants to cancel\n    function cancelOffer(uint256 _tokenId) external whenNotFrozen {\n        // Check that offer exists and is active currently\n        Offer storage offer = tokenIdToOffer[_tokenId];\n        uint256 expiresAt = offer.expiresAt;\n        require(_offerExists(expiresAt), \"offer to cancel must exist\");\n        require(_isOfferActive(expiresAt), \"offer to cancel must not be expired\");\n\n        address bidder = offer.bidder;\n        require(msg.sender == bidder, \"caller must be bidder of offer to be cancelled\");\n\n        // T\n        uint256 total = uint256(offer.total);\n        // P = T - S; Bidder gets all of P, CFO gets all of T - P\n        uint256 toRefund = _computeOfferPrice(total, offer.offerCut);\n        uint256 cfoEarnings = total - toRefund;\n\n        // Remove offer from storage\n        delete tokenIdToOffer[_tokenId];\n\n        // Add to CFO's balance\n        totalCFOEarnings += cfoEarnings;\n\n        // Transfer money in escrow back to bidder\n        _tryPushFunds(_tokenId, bidder, toRefund);\n\n        emit OfferCancelled(\n            _tokenId,\n            bidder,\n            toRefund,\n            cfoEarnings\n        );\n    }\n\n    /// @notice Fulfills an offer that must exist and be active currently. This moves the funds of the\n    ///  offer held in escrow in this contract to the owner of the token, and atomically transfers the\n    ///  token from the owner to the bidder. A cut is taken by this contract.\n    /// @notice We also acknowledge the paw-sible difficulties of keeping in-sync with the Ethereum\n    ///  blockchain, and have allowed for fulfilling offers by specifying the _minOfferPrice at which the owner\n    ///  of the token is happy to accept the offer. Thus, the owner will always receive the latest offer\n    ///  price, which can only be at least the _minOfferPrice that was specified. Specifically, this\n    ///  implementation is designed to prevent the edge case where the owner accidentally accepts an offer\n    ///  with a price lower than intended. For example, this can happen when the owner fulfills the offer\n    ///  precisely when the offer expires and is subsequently replaced with a new offer priced lower.\n    /// @notice Works only when contract is not frozen.\n    /// @dev We make sure that the token is not on auction when we fulfill an offer, because the owner of the\n    ///  token would be the auction contract instead of the user. This function requires that this Offers contract\n    ///  is approved for the token in order to make the call to transfer token ownership. This is sufficient\n    ///  because approvals are cleared on transfer (including transfer to the auction).\n    /// @param _tokenId The token specified by the offer that will be fulfilled.\n    /// @param _minOfferPrice The minimum price at which the owner of the token is happy to accept the offer.\n    function fulfillOffer(uint256 _tokenId, uint128 _minOfferPrice) external whenNotFrozen {\n        // Check that offer exists and is active currently\n        Offer storage offer = tokenIdToOffer[_tokenId];\n        uint256 expiresAt = offer.expiresAt;\n        require(_offerExists(expiresAt), \"offer to fulfill must exist\");\n        require(_isOfferActive(expiresAt), \"offer to fulfill must not be expired\");\n\n        // Get the owner of the token\n        address owner = nonFungibleContract.ownerOf(_tokenId);\n\n        require(msg.sender == cooAddress || msg.sender == owner, \"only COO or the owner can fulfill order\");\n\n        // T\n        uint256 total = uint256(offer.total);\n        // P = T - S\n        uint256 offerPrice = _computeOfferPrice(total, offer.offerCut);\n\n        // Check if the offer price is below the minimum that the owner is happy to accept the offer for\n        require(offerPrice >= _minOfferPrice, \"cannot fulfill offer â offer price too low\");\n\n        // Get a reference of the bidder address befur removing offer from storage\n        address bidder = offer.bidder;\n\n        // Remove offer from storage\n        delete tokenIdToOffer[_tokenId];\n\n        // Transfer token on behalf of owner to bidder\n        nonFungibleContract.transferFrom(owner, bidder, _tokenId);\n\n        // NFT has been transferred! Now calculate fees and transfer fund to the owner\n        // T - P, the CFO's earnings\n        uint256 cfoEarnings = total - offerPrice;\n        totalCFOEarnings += cfoEarnings;\n\n        // Transfer money in escrow to owner\n        _tryPushFunds(_tokenId, owner, offerPrice);\n\n        emit OfferFulfilled(\n            _tokenId,\n            bidder,\n            owner,\n            offerPrice,\n            cfoEarnings\n        );\n    }\n\n    /// @notice Removes any existing and inactive (expired) offers from storage. In doing so, this contract\n    ///  takes a flat fee from the total amount attached to each offer before sending the remaining funds\n    ///  back to the bidder.\n    /// @notice Nothing will be done if the offer for a token is either non-existent or active.\n    /// @param _tokenIds The array of tokenIds that will be removed from storage\n    function batchRemoveExpired(uint256[] _tokenIds) external whenNotFrozen {\n        uint256 len = _tokenIds.length;\n\n        // Use temporary accumulator\n        uint256 cumulativeCFOEarnings = 0;\n\n        for (uint256 i = 0; i < len; i++) {\n            uint256 tokenId = _tokenIds[i];\n            Offer storage offer = tokenIdToOffer[tokenId];\n            uint256 expiresAt = offer.expiresAt;\n\n            // Skip the offer if not exist\n            if (!_offerExists(expiresAt)) {\n                continue;\n            }\n            // Skip if the offer has not expired yet\n            if (_isOfferActive(expiresAt)) {\n                continue;\n            }\n\n            // Get a reference of the bidder address before removing offer from storage\n            address bidder = offer.bidder;\n\n            // CFO gets the flat fee\n            uint256 cfoEarnings = uint256(offer.unsuccessfulFee);\n\n            // Bidder gets refund: T - flat\n            uint256 toRefund = uint256(offer.total) - cfoEarnings;\n\n            // Ensure the previous offer has been removed before refunding\n            delete tokenIdToOffer[tokenId];\n\n            // Add to cumulative balance of CFO's earnings\n            cumulativeCFOEarnings += cfoEarnings;\n\n            // Finally, sending funds to this bidder. If failed, the fund will be kept in escrow\n            // under lostAndFound's address\n            _tryPushFunds(\n                tokenId,\n                bidder,\n                toRefund\n            );\n\n            emit ExpiredOfferRemoved(\n                tokenId,\n                bidder,\n                toRefund,\n                cfoEarnings\n            );\n        }\n\n        // Add to CFO's balance if any expired offer has been removed\n        if (cumulativeCFOEarnings > 0) {\n            totalCFOEarnings += cumulativeCFOEarnings;\n        }\n    }\n\n    /// @notice Updates an existing and active offer by setting a new expiration time and, optionally, raise\n    ///  the price of the offer.\n    /// @notice As the offers are always using the configuration values currently in storage, the updated\n    ///  offer may be adhering to configuration values that are different at the time of its original creation.\n    /// @dev We check msg.value to determine if the offer price should be raised. If 0, only a new\n    ///  expiration time is set.\n    /// @param _tokenId The token specified by the offer that will be updated.\n    function updateOffer(uint256 _tokenId) external payable whenNotFrozen {\n        // Check that offer exists and is active currently\n        Offer storage offer = tokenIdToOffer[_tokenId];\n        uint256 expiresAt = uint256(offer.expiresAt);\n        require(_offerExists(expiresAt), \"offer to update must exist\");\n        require(_isOfferActive(expiresAt), \"offer to update must not be expired\");\n\n        require(msg.sender == offer.bidder, \"caller must be bidder of offer to be updated\");\n\n        uint256 newExpiresAt = now + globalDuration;\n\n        // Check if the caller wants to raise the offer as well\n        if (msg.value > 0) {\n            // Set the new price\n            offer.total += uint128(msg.value);\n        }\n\n        offer.expiresAt = uint64(newExpiresAt);\n\n        emit OfferUpdated(_tokenId, msg.sender, newExpiresAt, msg.value);\n\n    }\n\n    /// @notice Sends funds of each existing offer held in escrow back to bidders. The function is callable\n    ///  by anyone.\n    /// @notice Works only when contract is frozen. In this case, we want to allow all funds to be returned\n    ///  without taking any fees.\n    /// @param _tokenId The token specified by the offer a bidder wants to withdraw funds for.\n    function bidderWithdrawFunds(uint256 _tokenId) external whenFrozen {\n        // Check that offer exists\n        Offer storage offer = tokenIdToOffer[_tokenId];\n        require(_offerExists(offer.expiresAt), \"offer to withdraw funds from must exist\");\n        require(msg.sender == offer.bidder, \"only bidders can withdraw their funds in escrow\");\n\n        // Get a reference of the total to withdraw before removing offer from storage\n        uint256 total = uint256(offer.total);\n\n        delete tokenIdToOffer[_tokenId];\n\n        // Send funds back to bidders!\n        msg.sender.transfer(total);\n\n        emit BidderWithdrewFundsWhenFrozen(_tokenId, msg.sender, total);\n    }\n\n    /// @notice we don't accept any value transfer.\n    function() external payable {\n        revert(\"we don't accept any payments!\");\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchRemoveExpired\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newLostAndFound\",\"type\":\"address\"}],\"name\":\"setLostAndFound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOfferCut\",\"type\":\"uint256\"}],\"name\":\"setOfferCut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lostAndFoundAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMinimumPriceIncrement\",\"type\":\"uint256\"}],\"name\":\"setMinimumPriceIncrement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTotalLostAndFoundBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMinTotal\",\"type\":\"uint256\"}],\"name\":\"setMinimumTotalValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_minOfferPrice\",\"type\":\"uint128\"}],\"name\":\"fulfillOffer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"updateOffer\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCFOEarnings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumTotalValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLostAndFoundBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDuration\",\"type\":\"uint256\"}],\"name\":\"setGlobalDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTotalCFOEarnings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"createOffer\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"offerCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newUnsuccessfulFee\",\"type\":\"uint256\"}],\"name\":\"setUnsuccessfulFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unsuccessfulFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToOffer\",\"outputs\":[{\"name\":\"expiresAt\",\"type\":\"uint64\"},{\"name\":\"bidder\",\"type\":\"address\"},{\"name\":\"offerCut\",\"type\":\"uint16\"},{\"name\":\"total\",\"type\":\"uint128\"},{\"name\":\"unsuccessfulFee\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumPriceIncrement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nonFungibleContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"bidderWithdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelOffer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_nftAddress\",\"type\":\"address\"},{\"name\":\"_cooAddress\",\"type\":\"address\"},{\"name\":\"_globalDuration\",\"type\":\"uint256\"},{\"name\":\"_minimumTotalValue\",\"type\":\"uint256\"},{\"name\":\"_minimumPriceIncrement\",\"type\":\"uint256\"},{\"name\":\"_unsuccessfulFee\",\"type\":\"uint256\"},{\"name\":\"_offerCut\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"expiresAt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"offerPrice\",\"type\":\"uint256\"}],\"name\":\"OfferCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bidderReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"OfferCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ownerReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"OfferFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newExpiresAt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalRaised\",\"type\":\"uint256\"}],\"name\":\"OfferUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bidderReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"ExpiredOfferRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BidderWithdrewFundsWhenFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PushFundsFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"GlobalDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"MinimumTotalValueUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"MinimumPriceIncrementUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"OfferCutUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UnsuccessfulFeeUpdated\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "00000000000000000000000006012c8cf97bead5deae237070f9587f8e7a266d00000000000000000000000093ff7574636771a4ec31c5aedf6d11aaaf0b6ef5000000000000000000000000000000000000000000000000000000000000012c00000000000000000000000000000000000000000000000001833eec2884800000000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000000000000000000000000000001c6bf5263400000000000000000000000000000000000000000000000000000000000000000384"
}