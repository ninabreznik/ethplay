{
  "address": "0xf6ca4bde4f6df4d733090476e5052f26da37d8ff",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "IAO",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-20\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n/**\n * @title Helps contracts guard against reentrancy attacks.\n * @author Remco Bloemen <[email protected]π.com>, Eenae <[email protected]>\n * @dev If you mark a function `nonReentrant`, you should also\n * mark it `external`.\n */\ncontract ReentrancyGuard {\n\n  /// @dev Constant for unlocked guard state - non-zero to prevent extra gas costs.\n  /// See: https://github.com/OpenZeppelin/openzeppelin-solidity/issues/1056\n  uint private constant REENTRANCY_GUARD_FREE = 1;\n\n  /// @dev Constant for locked guard state\n  uint private constant REENTRANCY_GUARD_LOCKED = 2;\n\n  /**\n   * @dev We use a single lock for the whole contract.\n   */\n  uint private reentrancyLock = REENTRANCY_GUARD_FREE;\n\n  /**\n   * @dev Prevents a contract from calling itself, directly or indirectly.\n   * If you mark a function `nonReentrant`, you should also\n   * mark it `external`. Calling one `nonReentrant` function from\n   * another is not supported. Instead, you can implement a\n   * `private` function doing the actual work, and an `external`\n   * wrapper marked as `nonReentrant`.\n   */\n  modifier nonReentrant() {\n    require(reentrancyLock == REENTRANCY_GUARD_FREE);\n    reentrancyLock = REENTRANCY_GUARD_LOCKED;\n    _;\n    reentrancyLock = REENTRANCY_GUARD_FREE;\n  }\n\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n\n/**\n * @title DetailedERC20 token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract DetailedERC20 is ERC20 {\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  constructor(string _name, string _symbol, uint8 _decimals) public {\n    name = _name;\n    symbol = _symbol;\n    decimals = _decimals;\n  }\n}\n\n\n/// @dev The token controller contract must implement these functions\ncontract TokenController {\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n    /// @param _owner The address that sent the ether to create tokens\n    /// @return True if the ether is accepted, false if it throws\n    function proxyPayment(address _owner) public payable returns(bool);\n\n    /// @notice Notifies the controller about a token transfer allowing the\n    ///  controller to react if desired\n    /// @param _from The origin of the transfer\n    /// @param _to The destination of the transfer\n    /// @param _amount The amount of the transfer\n    /// @return False if the controller does not authorize the transfer\n    function onTransfer(address _from, address _to, uint _amount) public returns(bool);\n\n    /// @notice Notifies the controller about an approval allowing the\n    ///  controller to react if desired\n    /// @param _owner The address that calls `approve()`\n    /// @param _spender The spender in the `approve()` call\n    /// @param _amount The amount in the `approve()` call\n    /// @return False if the controller does not authorize the approval\n    function onApprove(address _owner, address _spender, uint _amount) public\n        returns(bool);\n}\n\n/*\n    Copyright 2016, Jordi Baylina\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/// @title MiniMeToken Contract\n/// @author Jordi Baylina\n/// @dev This token contract's goal is to make it easy for anyone to clone this\n///  token using the token distribution at a given block, this will allow DAO's\n///  and DApps to upgrade their features in a decentralized manner without\n///  affecting the original token\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\n\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 _amount, address _token, bytes _data) public;\n}\n\n/// @dev The actual token contract, the default owner is the msg.sender\n///  that deploys the contract, so usually this token will be deployed by a\n///  token owner contract, which Giveth will call a \"Campaign\"\ncontract MiniMeToken is Ownable {\n\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\n    uint8 public decimals;             //Number of decimals of the smallest unit\n    string public symbol;              //An identifier: e.g. REP\n    string public version = 'MMT_0.2'; //An arbitrary versioning scheme\n\n\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\n    ///  given value, the block number attached is the one that last changed the\n    ///  value\n    struct  Checkpoint {\n\n        // `fromBlock` is the block number that the value was generated from\n        uint128 fromBlock;\n\n        // `value` is the amount of tokens at a specific block number\n        uint128 value;\n    }\n\n    // `parentToken` is the Token address that was cloned to produce this token;\n    //  it will be 0x0 for a token that was not cloned\n    MiniMeToken public parentToken;\n\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\n    //  used to determine the initial distribution of the Clone Token\n    uint public parentSnapShotBlock;\n\n    // `creationBlock` is the block number that the Clone Token was created\n    uint public creationBlock;\n\n    // `balances` is the map that tracks the balance of each address, in this\n    //  contract when the balance changes the block number that the change\n    //  occurred is also included in the map\n    mapping (address => Checkpoint[]) balances;\n\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n    mapping (address => mapping (address => uint256)) allowed;\n\n    // Tracks the history of the `totalSupply` of the token\n    Checkpoint[] totalSupplyHistory;\n\n    // Flag that determines if the token is transferable or not.\n    bool public transfersEnabled;\n\n    // The factory used to create new clone tokens\n    MiniMeTokenFactory public tokenFactory;\n\n////////////////\n// Constructor\n////////////////\n\n    /// @notice Constructor to create a MiniMeToken\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\n    ///  will create the Clone token contracts, the token factory needs to be\n    ///  deployed first\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\n    ///  new token\n    /// @param _parentSnapShotBlock Block of the parent token that will\n    ///  determine the initial distribution of the clone token, set to 0 if it\n    ///  is a new token\n    /// @param _tokenName Name of the new token\n    /// @param _decimalUnits Number of decimals of the new token\n    /// @param _tokenSymbol Token Symbol for the new token\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\n    constructor(\n        address _tokenFactory,\n        address _parentToken,\n        uint _parentSnapShotBlock,\n        string _tokenName,\n        uint8 _decimalUnits,\n        string _tokenSymbol,\n        bool _transfersEnabled\n    ) public {\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n        name = _tokenName;                                 // Set the name\n        decimals = _decimalUnits;                          // Set the decimals\n        symbol = _tokenSymbol;                             // Set the symbol\n        parentToken = MiniMeToken(_parentToken);\n        parentSnapShotBlock = _parentSnapShotBlock;\n        transfersEnabled = _transfersEnabled;\n        creationBlock = block.number;\n    }\n\n\n///////////////////\n// ERC20 Methods\n///////////////////\n\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\n        require(transfersEnabled);\n        doTransfer(msg.sender, _to, _amount);\n        return true;\n    }\n\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n    ///  is approved by `_from`\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return True if the transfer was successful\n    function transferFrom(address _from, address _to, uint256 _amount\n    ) public returns (bool success) {\n\n        // The owner of this contract can move tokens around at will,\n        //  this is important to recognize! Confirm that you trust the\n        //  owner of this contract, which in most situations should be\n        //  another open source smart contract or 0x0\n        if (msg.sender != owner) {\n            require(transfersEnabled);\n\n            // The standard ERC 20 transferFrom functionality\n            require(allowed[_from][msg.sender] >= _amount);\n            allowed[_from][msg.sender] -= _amount;\n        }\n        doTransfer(_from, _to, _amount);\n        return true;\n    }\n\n    /// @dev This is the actual transfer function in the token contract, it can\n    ///  only be called by other functions in this contract.\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return True if the transfer was successful\n    function doTransfer(address _from, address _to, uint _amount\n    ) internal {\n\n           if (_amount == 0) {\n               emit Transfer(_from, _to, _amount);    // Follow the spec to louch the event when transfer 0\n               return;\n           }\n\n           require(parentSnapShotBlock < block.number);\n\n           // Do not allow transfer to 0x0 or the token contract itself\n           require((_to != 0) && (_to != address(this)));\n\n           // If the amount being transfered is more than the balance of the\n           //  account the transfer throws\n           uint previousBalanceFrom = balanceOfAt(_from, block.number);\n\n           require(previousBalanceFrom >= _amount);\n\n           // Alerts the token owner of the transfer\n           if (isContract(owner)) {\n               require(TokenController(owner).onTransfer(_from, _to, _amount));\n           }\n\n           // First update the balance array with the new value for the address\n           //  sending the tokens\n           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n\n           // Then update the balance array with the new value for the address\n           //  receiving the tokens\n           uint previousBalanceTo = balanceOfAt(_to, block.number);\n           require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\n\n           // An event to make the transfer easy to find on the blockchain\n           emit Transfer(_from, _to, _amount);\n\n    }\n\n    /// @param _owner The address that's balance is being requested\n    /// @return The balance of `_owner` at the current block\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balanceOfAt(_owner, block.number);\n    }\n\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n    ///  its behalf. This is a modified version of the ERC20 approve function\n    ///  to be a little bit safer\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return True if the approval was successful\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\n        require(transfersEnabled);\n\n        // To change the approve amount you first have to reduce the addresses`\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n\n        // Alerts the token owner of the approve function call\n        if (isContract(owner)) {\n            require(TokenController(owner).onApprove(msg.sender, _spender, _amount));\n        }\n\n        allowed[msg.sender][_spender] = _amount;\n        emit Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    /// @dev This function makes it easy to read the `allowed[]` map\n    /// @param _owner The address of the account that owns the token\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\n    ///  to spend\n    function allowance(address _owner, address _spender\n    ) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n    ///  its behalf, and then a function is triggered in the contract that is\n    ///  being approved, `_spender`. This allows users to use their tokens to\n    ///  interact with contracts in one function call instead of two\n    /// @param _spender The address of the contract able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return True if the function call was successful\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n    ) public returns (bool success) {\n        require(approve(_spender, _amount));\n\n        ApproveAndCallFallBack(_spender).receiveApproval(\n            msg.sender,\n            _amount,\n            this,\n            _extraData\n        );\n\n        return true;\n    }\n\n    /// @dev This function makes it easy to get the total number of tokens\n    /// @return The total number of tokens\n    function totalSupply() public constant returns (uint) {\n        return totalSupplyAt(block.number);\n    }\n\n\n////////////////\n// Query balance and totalSupply in History\n////////////////\n\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n    /// @param _owner The address from which the balance will be retrieved\n    /// @param _blockNumber The block number when the balance is queried\n    /// @return The balance at `_blockNumber`\n    function balanceOfAt(address _owner, uint _blockNumber) public constant\n        returns (uint) {\n\n        // These next few lines are used when the balance of the token is\n        //  requested before a check point was ever created for this token, it\n        //  requires that the `parentToken.balanceOfAt` be queried at the\n        //  genesis block for that token as this contains initial balance of\n        //  this token\n        if ((balances[_owner].length == 0)\n            || (balances[_owner][0].fromBlock > _blockNumber)) {\n            if (address(parentToken) != 0) {\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\n            } else {\n                // Has no parent\n                return 0;\n            }\n\n        // This will return the expected balance during normal situations\n        } else {\n            return getValueAt(balances[_owner], _blockNumber);\n        }\n    }\n\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\n    /// @param _blockNumber The block number when the totalSupply is queried\n    /// @return The total amount of tokens at `_blockNumber`\n    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\n\n        // These next few lines are used when the totalSupply of the token is\n        //  requested before a check point was ever created for this token, it\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\n        //  genesis block for this token as that contains totalSupply of this\n        //  token at this block number.\n        if ((totalSupplyHistory.length == 0)\n            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n            if (address(parentToken) != 0) {\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\n            } else {\n                return 0;\n            }\n\n        // This will return the expected totalSupply during normal situations\n        } else {\n            return getValueAt(totalSupplyHistory, _blockNumber);\n        }\n    }\n\n////////////////\n// Clone Token Method\n////////////////\n\n    /// @notice Creates a new clone token with the initial distribution being\n    ///  this token at `_snapshotBlock`\n    /// @param _cloneTokenName Name of the clone token\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\n    /// @param _cloneTokenSymbol Symbol of the clone token\n    /// @param _snapshotBlock Block when the distribution of the parent token is\n    ///  copied to set the initial distribution of the new clone token;\n    ///  if the block is zero than the actual block, the current block is used\n    /// @param _transfersEnabled True if transfers are allowed in the clone\n    /// @return The address of the new MiniMeToken Contract\n    function createCloneToken(\n        string _cloneTokenName,\n        uint8 _cloneDecimalUnits,\n        string _cloneTokenSymbol,\n        uint _snapshotBlock,\n        bool _transfersEnabled\n        ) public returns(address) {\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n            this,\n            _snapshotBlock,\n            _cloneTokenName,\n            _cloneDecimalUnits,\n            _cloneTokenSymbol,\n            _transfersEnabled\n            );\n\n        cloneToken.transferOwnership(msg.sender);\n\n        // An event to make the token easy to find on the blockchain\n        emit NewCloneToken(address(cloneToken), _snapshotBlock);\n        return address(cloneToken);\n    }\n\n////////////////\n// Generate and destroy tokens\n////////////////\n\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\n    /// @param _owner The address that will be assigned the new tokens\n    /// @param _amount The quantity of tokens generated\n    /// @return True if the tokens are generated correctly\n    function generateTokens(address _owner, uint _amount\n    ) public onlyOwner returns (bool) {\n        uint curTotalSupply = totalSupply();\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n        uint previousBalanceTo = balanceOf(_owner);\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n        emit Transfer(0, _owner, _amount);\n        return true;\n    }\n\n\n    /// @notice Burns `_amount` tokens from `_owner`\n    /// @param _owner The address that will lose the tokens\n    /// @param _amount The quantity of tokens to burn\n    /// @return True if the tokens are burned correctly\n    function destroyTokens(address _owner, uint _amount\n    ) onlyOwner public returns (bool) {\n        uint curTotalSupply = totalSupply();\n        require(curTotalSupply >= _amount);\n        uint previousBalanceFrom = balanceOf(_owner);\n        require(previousBalanceFrom >= _amount);\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n        emit Transfer(_owner, 0, _amount);\n        return true;\n    }\n\n////////////////\n// Enable tokens transfers\n////////////////\n\n\n    /// @notice Enables token holders to transfer their tokens freely if true\n    /// @param _transfersEnabled True if transfers are allowed in the clone\n    function enableTransfers(bool _transfersEnabled) public onlyOwner {\n        transfersEnabled = _transfersEnabled;\n    }\n\n////////////////\n// Internal helper functions to query and set a value in a snapshot array\n////////////////\n\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\n    /// @param checkpoints The history of values being queried\n    /// @param _block The block number to retrieve the value at\n    /// @return The number of tokens being queried\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n    ) constant internal returns (uint) {\n        if (checkpoints.length == 0) return 0;\n\n        // Shortcut for the actual value\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n            return checkpoints[checkpoints.length-1].value;\n        if (_block < checkpoints[0].fromBlock) return 0;\n\n        // Binary search of the value in the array\n        uint min = 0;\n        uint max = checkpoints.length-1;\n        while (max > min) {\n            uint mid = (max + min + 1)/ 2;\n            if (checkpoints[mid].fromBlock<=_block) {\n                min = mid;\n            } else {\n                max = mid-1;\n            }\n        }\n        return checkpoints[min].value;\n    }\n\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\n    ///  `totalSupplyHistory`\n    /// @param checkpoints The history of data being updated\n    /// @param _value The new number of tokens\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n    ) internal  {\n        if ((checkpoints.length == 0)\n        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\n               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n               newCheckPoint.fromBlock =  uint128(block.number);\n               newCheckPoint.value = uint128(_value);\n           } else {\n               Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\n               oldCheckPoint.value = uint128(_value);\n           }\n    }\n\n    /// @dev Internal function to determine if an address is a contract\n    /// @param _addr The address being queried\n    /// @return True if `_addr` is a contract\n    function isContract(address _addr) constant internal returns(bool) {\n        uint size;\n        if (_addr == 0) return false;\n        assembly {\n            size := extcodesize(_addr)\n        }\n        return size>0;\n    }\n\n    /// @dev Helper function to return a min betwen the two uints\n    function min(uint a, uint b) pure internal returns (uint) {\n        return a < b ? a : b;\n    }\n\n    /// @notice The fallback function: If the contract's owner has not been\n    ///  set to 0, then the `proxyPayment` method is called which relays the\n    ///  ether and creates tokens as described in the token owner contract\n    function () public payable {\n        require(isContract(owner));\n        require(TokenController(owner).proxyPayment.value(msg.value)(msg.sender));\n    }\n\n//////////\n// Safety Methods\n//////////\n\n    /// @notice This method can be used by the owner to extract mistakenly\n    ///  sent tokens to this contract.\n    /// @param _token The address of the token contract that you want to recover\n    ///  set to 0 in case you want to extract ether.\n    function claimTokens(address _token) public onlyOwner {\n        if (_token == 0x0) {\n            owner.transfer(address(this).balance);\n            return;\n        }\n\n        MiniMeToken token = MiniMeToken(_token);\n        uint balance = token.balanceOf(this);\n        token.transfer(owner, balance);\n        emit ClaimedTokens(_token, owner, balance);\n    }\n\n////////////////\n// Events\n////////////////\n    event ClaimedTokens(address indexed _token, address indexed _owner, uint _amount);\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _amount\n        );\n\n}\n\n\n////////////////\n// MiniMeTokenFactory\n////////////////\n\n/// @dev This contract is used to generate clone contracts from a contract.\n///  In solidity this is the way to create a contract from a contract of the\n///  same class\ncontract MiniMeTokenFactory {\n    event CreatedToken(string symbol, address addr);\n\n    /// @notice Update the DApp by creating a new token with new functionalities\n    ///  the msg.sender becomes the owner of this clone token\n    /// @param _parentToken Address of the token being cloned\n    /// @param _snapshotBlock Block of the parent token that will\n    ///  determine the initial distribution of the clone token\n    /// @param _tokenName Name of the new token\n    /// @param _decimalUnits Number of decimals of the new token\n    /// @param _tokenSymbol Token Symbol for the new token\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\n    /// @return The address of the new token contract\n    function createCloneToken(\n        address _parentToken,\n        uint _snapshotBlock,\n        string _tokenName,\n        uint8 _decimalUnits,\n        string _tokenSymbol,\n        bool _transfersEnabled\n    ) public returns (MiniMeToken) {\n        MiniMeToken newToken = new MiniMeToken(\n            this,\n            _parentToken,\n            _snapshotBlock,\n            _tokenName,\n            _decimalUnits,\n            _tokenSymbol,\n            _transfersEnabled\n            );\n\n        newToken.transferOwnership(msg.sender);\n        emit CreatedToken(_tokenSymbol, address(newToken));\n        return newToken;\n    }\n}\n\n/// @title Kyber Network interface\ninterface KyberNetworkProxyInterface {\n    function maxGasPrice() public view returns(uint);\n    function getUserCapInWei(address user) public view returns(uint);\n    function getUserCapInTokenWei(address user, DetailedERC20 token) public view returns(uint);\n    function enabled() public view returns(bool);\n    function info(bytes32 id) public view returns(uint);\n\n    function getExpectedRate(DetailedERC20 src, DetailedERC20 dest, uint srcQty) public view\n        returns (uint expectedRate, uint slippageRate);\n\n    function tradeWithHint(DetailedERC20 src, uint srcAmount, DetailedERC20 dest, address destAddress, uint maxDestAmount,\n        uint minConversionRate, address walletId, bytes hint) public payable returns(uint);\n}\n\n\ncontract IAO is Ownable, ReentrancyGuard, TokenController {\n    using SafeMath for uint256;\n\n    modifier onlyActive {\n        require(isActive, \"IAO is not active\");\n        _;\n    }\n\n    DetailedERC20 constant internal ETH_TOKEN_ADDRESS = DetailedERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\n\n    uint256 constant PRECISION = 10 ** 18; // we use 18 decimals\n    uint256 constant MAX_DONATION = 100 * (10 ** 18); // max donation is 100 DAI\n    uint256 constant KRO_RATE = 5 * (10 ** 17); // 1 DAI == 0.5 KRO\n    uint256 constant REFERRAL_BONUS = 10 * (10 ** 16); // 10% bonus for getting referred\n    address constant DAI_ADDR = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\n    address constant KYBER_ADDR = 0x818E6FECD516Ecc3849DAf6845e3EC868087B755;\n\n    address public kroAddr;\n    address public beneficiary;\n    bytes32 public secretHash;\n    bool public isActive;\n\n    event Register(address indexed _manager, uint256 indexed _block, uint256 _donationInDAI);\n\n\n    // admin & internal functions\n\n    constructor (address _kroAddr, address _beneficiary, bytes32 _secretHash) public {\n        kroAddr = _kroAddr;\n        beneficiary = _beneficiary;\n        secretHash = _secretHash;\n    }\n    \n\n    function setActive(bool _isActive) onlyOwner public {\n        isActive = _isActive;\n    }\n\n\n    function transferKROContractOwnership(address _newOwner, string _secret) public onlyOwner {\n        require(!isActive, \"IAO is not over\"); // can only transfer ownership when IAO is over\n        require(keccak256(abi.encodePacked(_secret)) == secretHash, \"Secret incorrect\"); // need to provide the correct secret\n\n        // transfer ownership\n        Ownable kro = Ownable(kroAddr);\n        kro.transferOwnership(_newOwner);\n    }\n\n\n    function _register(uint256 _donationInDAI, address _referrer) internal onlyActive {\n        require(_donationInDAI > 0 && _donationInDAI <= MAX_DONATION, \"Donation out of range\");\n        require(_referrer != msg.sender, \"Can't refer self\");\n\n        MiniMeToken kro = MiniMeToken(kroAddr);\n        require(kro.balanceOf(msg.sender) == 0, \"Already joined\"); // each address can only join the IAO once\n\n        // mint KRO for msg.sender\n        uint256 kroAmount = _donationInDAI.mul(KRO_RATE).div(PRECISION);\n        require(kro.generateTokens(msg.sender, kroAmount), \"Failed minting\");\n\n        // mint KRO for referral program\n        if (_referrer != address(0) && kro.balanceOf(_referrer) > 0) {\n            uint256 bonusAmount = kroAmount.mul(REFERRAL_BONUS).div(PRECISION);\n            require(kro.generateTokens(msg.sender, bonusAmount), \"Failed minting sender bonus\");\n            require(kro.generateTokens(_referrer, bonusAmount), \"Failed minting referrer bonus\");\n        }\n\n        // transfer DAI to beneficiary\n        DetailedERC20 dai = DetailedERC20(DAI_ADDR);\n        require(dai.transfer(beneficiary, _donationInDAI), \"Failed DAI transfer to beneficiary\");\n        \n        // emit events\n        emit Register(msg.sender, block.number, _donationInDAI);\n    }\n\n\n    // MiniMe TokenController functions, not used right now\n\n    function proxyPayment(address _owner) public payable returns(bool) {\n        return false;\n    }\n\n\n    function onTransfer(address _from, address _to, uint _amount) public returns(bool) {\n        return false;\n    }\n\n\n    function onApprove(address _owner, address _spender, uint _amount) public\n        returns(bool) {\n        return false;\n    }\n\n\n    // registration functions\n\n    function registerWithDAI(uint256 _donationInDAI, address _referrer) public nonReentrant {\n        DetailedERC20 dai = DetailedERC20(DAI_ADDR);\n        require(dai.transferFrom(msg.sender, this, _donationInDAI), \"Failed DAI transfer to IAO\");\n        _register(_donationInDAI, _referrer);\n    }\n\n\n    function registerWithETH(address _referrer) public payable nonReentrant {\n        DetailedERC20 dai = DetailedERC20(DAI_ADDR);\n        KyberNetworkProxyInterface kyber = KyberNetworkProxyInterface(KYBER_ADDR);\n        uint256 daiRate;\n        bytes memory hint;\n\n        // trade ETH for DAI\n        (,daiRate) = kyber.getExpectedRate(ETH_TOKEN_ADDRESS, dai, msg.value);\n        require(daiRate > 0, \"Zero price\");\n        uint256 receivedDAI = kyber.tradeWithHint.value(msg.value)(ETH_TOKEN_ADDRESS, msg.value, dai, this, MAX_DONATION * 2, daiRate, beneficiary, hint);\n        \n        // if DAI value is greater than maximum allowed, return excess DAI to msg.sender\n        if (receivedDAI > MAX_DONATION) {\n            require(dai.transfer(msg.sender, receivedDAI.sub(MAX_DONATION)), \"Excess DAI transfer failed\");\n            receivedDAI = MAX_DONATION;\n        }\n\n        // register new manager\n        _register(receivedDAI, _referrer);\n    }\n\n    // _donationInTokens should use the token's precision\n    function registerWithToken(address _token, uint256 _donationInTokens, address _referrer) public nonReentrant {\n        require(_token != address(0) && _token != address(ETH_TOKEN_ADDRESS) && _token != DAI_ADDR, \"Invalid token\");\n        DetailedERC20 token = DetailedERC20(_token);\n        require(token.totalSupply() > 0, \"Zero token supply\");\n\n        DetailedERC20 dai = DetailedERC20(DAI_ADDR);\n        KyberNetworkProxyInterface kyber = KyberNetworkProxyInterface(KYBER_ADDR);\n        uint256 daiRate;\n        bytes memory hint;\n\n        // transfer tokens to this contract\n        require(token.transferFrom(msg.sender, this, _donationInTokens), \"Failed token transfer to IAO\");\n\n        // trade tokens for DAI\n        (,daiRate) = kyber.getExpectedRate(token, dai, _donationInTokens);\n        require(daiRate > 0, \"Zero price\");\n        require(token.approve(KYBER_ADDR, 0), \"Token allowance prezeroing failed\");\n        require(token.approve(KYBER_ADDR, _donationInTokens), \"Token approval failed\");\n        uint256 receivedDAI = kyber.tradeWithHint(token, _donationInTokens, dai, this, MAX_DONATION * 2, daiRate, beneficiary, hint);\n        require(token.approve(KYBER_ADDR, 0), \"Token allowance postzeroing failed\");\n\n        // if DAI value is greater than maximum allowed, return excess DAI to msg.sender\n        if (receivedDAI > MAX_DONATION) {\n            require(dai.transfer(msg.sender, receivedDAI.sub(MAX_DONATION)), \"Excess DAI transfer failed\");\n            receivedDAI = MAX_DONATION;\n        }\n\n        // register new manager\n        _register(receivedDAI, _referrer);\n    }\n\n\n    function () public payable nonReentrant {\n        registerWithETH(address(0));\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"kroAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"onTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_donationInDAI\",\"type\":\"uint256\"},{\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"registerWithDAI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_donationInTokens\",\"type\":\"uint256\"},{\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"registerWithToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secretHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"registerWithETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"onApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"proxyPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"},{\"name\":\"_secret\",\"type\":\"string\"}],\"name\":\"transferKROContractOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_kroAddr\",\"type\":\"address\"},{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_secretHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_manager\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_block\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_donationInDAI\",\"type\":\"uint256\"}],\"name\":\"Register\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "60806040526001805534801561001457600080fd5b50604051606080611d9e83398101604090815281516020830151919092015160008054600160a060020a0319908116331790915560028054600160a060020a0395861690831617905560038054949093169316929092179055600455611d1f8061007f6000396000f3006080604052600436106100c15763ffffffff60e060020a6000350416630588e62281146100e457806322f3e2d41461011557806338af3eed1461013e5780634a39314914610153578063715018a61461017d5780638da5cb5b14610194578063a4619682146101a9578063acec338a146101cd578063ccfc8729146101e7578063d29e680314610212578063d2f03bf614610239578063da682aeb14610153578063f2fde38b1461024d578063f48c30541461026e578063fa1456a914610282575b60018054146100cf57600080fd5b60026001556100de60006102e9565b60018055005b3480156100f057600080fd5b506100f96106f3565b60408051600160a060020a039092168252519081900360200190f35b34801561012157600080fd5b5061012a610702565b604080519115158252519081900360200190f35b34801561014a57600080fd5b506100f961070b565b34801561015f57600080fd5b5061012a600160a060020a036004358116906024351660443561071a565b34801561018957600080fd5b50610192610723565b005b3480156101a057600080fd5b506100f961078f565b3480156101b557600080fd5b50610192600435600160a060020a036024351661079e565b3480156101d957600080fd5b5061019260043515156108c6565b3480156101f357600080fd5b50610192600160a060020a0360043581169060243590604435166108f0565b34801561021e57600080fd5b50610227611291565b60408051918252519081900360200190f35b610192600160a060020a03600435166102e9565b34801561025957600080fd5b50610192600160a060020a0360043516611297565b61012a600160a060020a03600435166112ba565b34801561028e57600080fd5b5060408051602060046024803582810135601f8101859004850286018501909652858552610192958335600160a060020a03169536956044949193909101919081908401838280828437509497506112c09650505050505050565b6000806000606060006001805414151561030257600080fd5b6002600155604080517f809a9e5500000000000000000000000000000000000000000000000000000000815273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee60048201527389d24a6b4ccb1b6faa2625fe562bdd9a2326035960248201819052346044830152825190975073818e6fecd516ecc3849daf6845e3ec868087b7559650869263809a9e5592606480820193918290030181600087803b1580156103ab57600080fd5b505af11580156103bf573d6000803e3d6000fd5b505050506040513d60408110156103d557600080fd5b5060200151925060008311610434576040805160e560020a62461bcd02815260206004820152600a60248201527f5a65726f20707269636500000000000000000000000000000000000000000000604482015290519081900360640190fd5b83600160a060020a03166329589f613473eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee34893068056bc75e2d631000006002028a600360009054906101000a9004600160a060020a03168b6040518a63ffffffff1660e060020a0281526004018089600160a060020a0316600160a060020a0316815260200188815260200187600160a060020a0316600160a060020a0316815260200186600160a060020a0316600160a060020a0316815260200185815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561054257818101518382015260200161052a565b50505050905090810190601f16801561056f5780820380516001836020036101000a031916815260200191505b5099505050505050505050506020604051808303818588803b15801561059457600080fd5b505af11580156105a8573d6000803e3d6000fd5b50505050506040513d60208110156105bf57600080fd5b5051905068056bc75e2d631000008111156106dd57600160a060020a03851663a9059cbb336105fd8468056bc75e2d6310000063ffffffff6114e016565b6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561064f57600080fd5b505af1158015610663573d6000803e3d6000fd5b505050506040513d602081101561067957600080fd5b505115156106d1576040805160e560020a62461bcd02815260206004820152601a60248201527f45786365737320444149207472616e73666572206661696c6564000000000000604482015290519081900360640190fd5b5068056bc75e2d631000005b6106e781876114f7565b50506001805550505050565b600254600160a060020a031681565b60055460ff1681565b600354600160a060020a031681565b60009392505050565b600054600160a060020a0316331461073a57600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031681565b60018054600091146107af57600080fd5b506002600155604080517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810184905290517389d24a6b4ccb1b6faa2625fe562bdd9a232603599182916323b872dd916064808201926020929091908290030181600087803b15801561083157600080fd5b505af1158015610845573d6000803e3d6000fd5b505050506040513d602081101561085b57600080fd5b505115156108b3576040805160e560020a62461bcd02815260206004820152601a60248201527f4661696c656420444149207472616e7366657220746f2049414f000000000000604482015290519081900360640190fd5b6108bd83836114f7565b50506001805550565b600054600160a060020a031633146108dd57600080fd5b6005805460ff1916911515919091179055565b600080600080606060006001805414151561090a57600080fd5b6002600155600160a060020a038916158015906109445750600160a060020a03891673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14155b801561096d5750600160a060020a0389167389d24a6b4ccb1b6faa2625fe562bdd9a2326035914155b15156109c3576040805160e560020a62461bcd02815260206004820152600d60248201527f496e76616c696420746f6b656e00000000000000000000000000000000000000604482015290519081900360640190fd5b889550600086600160a060020a03166318160ddd6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610a0657600080fd5b505af1158015610a1a573d6000803e3d6000fd5b505050506040513d6020811015610a3057600080fd5b505111610a87576040805160e560020a62461bcd02815260206004820152601160248201527f5a65726f20746f6b656e20737570706c79000000000000000000000000000000604482015290519081900360640190fd5b604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018a905290517389d24a6b4ccb1b6faa2625fe562bdd9a23260359965073818e6fecd516ecc3849daf6845e3ec868087b7559550600160a060020a038816916323b872dd9160648083019260209291908290030181600087803b158015610b2357600080fd5b505af1158015610b37573d6000803e3d6000fd5b505050506040513d6020811015610b4d57600080fd5b50511515610ba5576040805160e560020a62461bcd02815260206004820152601c60248201527f4661696c656420746f6b656e207472616e7366657220746f2049414f00000000604482015290519081900360640190fd5b604080517f809a9e55000000000000000000000000000000000000000000000000000000008152600160a060020a0388811660048301528781166024830152604482018b905282519087169263809a9e5592606480820193918290030181600087803b158015610c1457600080fd5b505af1158015610c28573d6000803e3d6000fd5b505050506040513d6040811015610c3e57600080fd5b5060200151925060008311610c9d576040805160e560020a62461bcd02815260206004820152600a60248201527f5a65726f20707269636500000000000000000000000000000000000000000000604482015290519081900360640190fd5b85600160a060020a031663095ea7b373818e6fecd516ecc3849daf6845e3ec868087b75560006040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610d1557600080fd5b505af1158015610d29573d6000803e3d6000fd5b505050506040513d6020811015610d3f57600080fd5b50511515610dbd576040805160e560020a62461bcd02815260206004820152602160248201527f546f6b656e20616c6c6f77616e6365207072657a65726f696e67206661696c6560448201527f6400000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b604080517f095ea7b300000000000000000000000000000000000000000000000000000000815273818e6fecd516ecc3849daf6845e3ec868087b7556004820152602481018a90529051600160a060020a0388169163095ea7b39160448083019260209291908290030181600087803b158015610e3957600080fd5b505af1158015610e4d573d6000803e3d6000fd5b505050506040513d6020811015610e6357600080fd5b50511515610ebb576040805160e560020a62461bcd02815260206004820152601560248201527f546f6b656e20617070726f76616c206661696c65640000000000000000000000604482015290519081900360640190fd5b83600160a060020a03166329589f61878a883068056bc75e2d6310000060020289600360009054906101000a9004600160a060020a03168a6040518963ffffffff1660e060020a0281526004018089600160a060020a0316600160a060020a0316815260200188815260200187600160a060020a0316600160a060020a0316815260200186600160a060020a0316600160a060020a0316815260200185815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610fb4578181015183820152602001610f9c565b50505050905090810190601f168015610fe15780820380516001836020036101000a031916815260200191505b509950505050505050505050602060405180830381600087803b15801561100757600080fd5b505af115801561101b573d6000803e3d6000fd5b505050506040513d602081101561103157600080fd5b5051604080517f095ea7b300000000000000000000000000000000000000000000000000000000815273818e6fecd516ecc3849daf6845e3ec868087b75560048201526000602482018190529151929350600160a060020a0389169263095ea7b392604480840193602093929083900390910190829087803b1580156110b657600080fd5b505af11580156110ca573d6000803e3d6000fd5b505050506040513d60208110156110e057600080fd5b5051151561115e576040805160e560020a62461bcd02815260206004820152602260248201527f546f6b656e20616c6c6f77616e636520706f73747a65726f696e67206661696c60448201527f6564000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b68056bc75e2d6310000081111561127857600160a060020a03851663a9059cbb336111988468056bc75e2d6310000063ffffffff6114e016565b6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156111ea57600080fd5b505af11580156111fe573d6000803e3d6000fd5b505050506040513d602081101561121457600080fd5b5051151561126c576040805160e560020a62461bcd02815260206004820152601a60248201527f45786365737320444149207472616e73666572206661696c6564000000000000604482015290519081900360640190fd5b5068056bc75e2d631000005b61128281886114f7565b50506001805550505050505050565b60045481565b600054600160a060020a031633146112ae57600080fd5b6112b781611c38565b50565b50600090565b60008054600160a060020a031633146112d857600080fd5b60055460ff1615611333576040805160e560020a62461bcd02815260206004820152600f60248201527f49414f206973206e6f74206f7665720000000000000000000000000000000000604482015290519081900360640190fd5b60045460001916826040516020018082805190602001908083835b6020831061136d5780518252601f19909201916020918201910161134e565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106113d05780518252601f1990920191602091820191016113b1565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141515611458576040805160e560020a62461bcd02815260206004820152601060248201527f53656372657420696e636f727265637400000000000000000000000000000000604482015290519081900360640190fd5b50600254604080517ff2fde38b000000000000000000000000000000000000000000000000000000008152600160a060020a03858116600483015291519190921691829163f2fde38b9160248082019260009290919082900301818387803b1580156114c357600080fd5b505af11580156114d7573d6000803e3d6000fd5b50505050505050565b6000828211156114ec57fe5b508082035b92915050565b60055460009081908190819060ff16151561155c576040805160e560020a62461bcd02815260206004820152601160248201527f49414f206973206e6f7420616374697665000000000000000000000000000000604482015290519081900360640190fd5b600086118015611575575068056bc75e2d631000008611155b15156115cb576040805160e560020a62461bcd02815260206004820152601560248201527f446f6e6174696f6e206f7574206f662072616e67650000000000000000000000604482015290519081900360640190fd5b600160a060020a03851633141561162c576040805160e560020a62461bcd02815260206004820152601060248201527f43616e27742072656665722073656c6600000000000000000000000000000000604482015290519081900360640190fd5b600254604080517f70a082310000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a03909216955085916370a08231916024808201926020929091908290030181600087803b15801561169557600080fd5b505af11580156116a9573d6000803e3d6000fd5b505050506040513d60208110156116bf57600080fd5b505115611716576040805160e560020a62461bcd02815260206004820152600e60248201527f416c7265616479206a6f696e6564000000000000000000000000000000000000604482015290519081900360640190fd5b611746670de0b6b3a764000061173a886706f05b59d3b2000063ffffffff611cb516565b9063ffffffff611cde16565b604080517f827f32c0000000000000000000000000000000000000000000000000000000008152336004820152602481018390529051919450600160a060020a0386169163827f32c0916044808201926020929091908290030181600087803b1580156117b257600080fd5b505af11580156117c6573d6000803e3d6000fd5b505050506040513d60208110156117dc57600080fd5b50511515611834576040805160e560020a62461bcd02815260206004820152600e60248201527f4661696c6564206d696e74696e67000000000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a038516158015906118d25750600084600160a060020a03166370a08231876040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b1580156118a457600080fd5b505af11580156118b8573d6000803e3d6000fd5b505050506040513d60208110156118ce57600080fd5b5051115b15611ace576118fb670de0b6b3a764000061173a8567016345785d8a000063ffffffff611cb516565b604080517f827f32c0000000000000000000000000000000000000000000000000000000008152336004820152602481018390529051919350600160a060020a0386169163827f32c0916044808201926020929091908290030181600087803b15801561196757600080fd5b505af115801561197b573d6000803e3d6000fd5b505050506040513d602081101561199157600080fd5b505115156119e9576040805160e560020a62461bcd02815260206004820152601b60248201527f4661696c6564206d696e74696e672073656e64657220626f6e75730000000000604482015290519081900360640190fd5b83600160a060020a031663827f32c086846040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015611a4c57600080fd5b505af1158015611a60573d6000803e3d6000fd5b505050506040513d6020811015611a7657600080fd5b50511515611ace576040805160e560020a62461bcd02815260206004820152601d60248201527f4661696c6564206d696e74696e6720726566657272657220626f6e7573000000604482015290519081900360640190fd5b50600354604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a03909216600483015260248201879052517389d24a6b4ccb1b6faa2625fe562bdd9a2326035991829163a9059cbb916044808201926020929091908290030181600087803b158015611b5157600080fd5b505af1158015611b65573d6000803e3d6000fd5b505050506040513d6020811015611b7b57600080fd5b50511515611bf9576040805160e560020a62461bcd02815260206004820152602260248201527f4661696c656420444149207472616e7366657220746f2062656e65666963696160448201527f7279000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b604080518781529051439133917f1d759fb22634fe2d322d688a4b46aaf185dd0a3db78ccf01a9218f00ac3df03f9181900360200190a3505050505050565b600160a060020a0381161515611c4d57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000821515611cc6575060006114f1565b50818102818382811515611cd657fe5b04146114f157fe5b60008183811515611ceb57fe5b0493925050505600a165627a7a723058208c1620f96f9e4d57af42bd237ca5dab2d4c5cca9da09c2c9f9f3e89bed22c565002900000000000000000000000013c03e7a1c944fa87ffcd657182616420c6ea1f9000000000000000000000000332d87209f7c8296389c307eae170c2440830a476b8ac3035968526b7e0b8f25ac116418e1caa44f4d6038ec522d597ba2dd2c58",
  "constructorArguments": "00000000000000000000000013c03e7a1c944fa87ffcd657182616420c6ea1f9000000000000000000000000332d87209f7c8296389c307eae170c2440830a476b8ac3035968526b7e0b8f25ac116418e1caa44f4d6038ec522d597ba2dd2c58"
}