{
  "address": "0x2a224e87b56eec82b744f2af3bbe753231ce3d87",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MinGov",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": true,
  "runs": "2",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-08\n*/\n\n/**\n * Copyright (c) 2018-present, Leap DAO (leapdao.org)\n *\n * This source code is licensed under the Mozilla Public License, version 2,\n * found in the LICENSE file in the root directory of this source tree.\n */\n\npragma solidity 0.5.2;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\npragma solidity ^0.5.0;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * Copyright (c) 2018-present, Leap DAO (leapdao.org)\n *\n * This source code is licensed under the Mozilla Public License, version 2,\n * found in the LICENSE file in the root directory of this source tree.\n */\n\n\npragma solidity 0.5.2;\n\n/**\n * @title Proxy\n * @dev Implements delegation of calls to other contracts, with proper\n * forwarding of return values and bubbling of failures.\n * It defines a fallback function that delegates all calls to the address\n * returned by the abstract _implementation() internal function.\n */\ncontract Proxy {\n  /**\n   * @dev Fallback function.\n   * Implemented entirely in `_fallback`.\n   */\n  function () external payable {\n    _fallback();\n  }\n\n  /**\n   * @return The Address of the implementation.\n   */\n  function _implementation() internal view returns (address);\n\n  /**\n   * @dev Delegates execution to an implementation contract.\n   * This is a low level function that doesn't return to its internal call site.\n   * It will return to the external caller whatever the implementation returns.\n   * @param implementation Address to delegate.\n   */\n  function _delegate(address implementation) internal {\n    assembly {\n      // Copy msg.data. We take full control of memory in this inline assembly\n      // block because it will not return to Solidity code. We overwrite the\n      // Solidity scratch pad at memory position 0.\n      calldatacopy(0, 0, calldatasize)\n\n      // Call the implementation.\n      // out and outsize are 0 because we don't know the size yet.\n      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\n\n      // Copy the returned data.\n      returndatacopy(0, 0, returndatasize)\n\n      switch result\n      // delegatecall returns 0 on error.\n      case 0 { revert(0, returndatasize) }\n      default { return(0, returndatasize) }\n    }\n  }\n\n  /**\n   * @dev Function that is run as the first thing in the fallback function.\n   * Can be redefined in derived contracts to add functionality.\n   * Redefinitions must call super._willFallback().\n   */\n  function _willFallback() internal {\n  }\n\n  /**\n   * @dev fallback implementation.\n   * Extracted to enable manual triggering.\n   */\n  function _fallback() internal {\n    _willFallback();\n    _delegate(_implementation());\n  }\n}\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n    /**\n     * Returns whether the target address is a contract\n     * @dev This function will return false if invoked during the constructor of a contract,\n     * as the code is not actually created until after the constructor finishes.\n     * @param account address of the account to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}\n\n/**\n * @title UpgradeabilityProxy\n * @dev This contract implements a proxy that allows to change the\n * implementation address to which it will delegate.\n * Such a change is called an implementation upgrade.\n */\ncontract UpgradeabilityProxy is Proxy {\n  /**\n   * @dev Emitted when the implementation is upgraded.\n   * @param implementation Address of the new implementation.\n   */\n  event Upgraded(address indexed implementation);\n\n  /**\n   * @dev Storage slot with the address of the current implementation.\n   * This is the keccak-256 hash of \"org.zeppelinos.proxy.implementation\", and is\n   * validated in the constructor.\n   */\n  bytes32 private constant IMPLEMENTATION_SLOT = 0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3;\n\n  /**\n   * @dev Contract constructor.\n   * @param _implementation Address of the initial implementation.\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\n   * It should include the signature and the parameters of the function to be called, as described in\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\n   */\n  constructor(address _implementation, bytes memory _data) public payable {\n    assert(IMPLEMENTATION_SLOT == keccak256(\"org.zeppelinos.proxy.implementation\"));\n    _setImplementation(_implementation);\n    if (_data.length > 0) {\n      bool rv;\n      (rv,) = _implementation.delegatecall(_data);\n      require(rv);\n    }\n  }\n\n  /**\n   * @dev Returns the current implementation.\n   * @return Address of the current implementation\n   */\n  function _implementation() internal view returns (address impl) {\n    bytes32 slot = IMPLEMENTATION_SLOT;\n    assembly {\n      impl := sload(slot)\n    }\n  }\n\n  /**\n   * @dev Upgrades the proxy to a new implementation.\n   * @param newImplementation Address of the new implementation.\n   */\n  function _upgradeTo(address newImplementation) internal {\n    _setImplementation(newImplementation);\n    emit Upgraded(newImplementation);\n  }\n\n  /**\n   * @dev Sets the implementation address of the proxy.\n   * @param newImplementation Address of the new implementation.\n   */\n  function _setImplementation(address newImplementation) private {\n    require(Address.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n    assembly {\n      sstore(slot, newImplementation)\n    }\n  }\n}\n\n/**\n * @title AdminUpgradeabilityProxy\n * @dev This contract combines an upgradeability proxy with an authorization\n * mechanism for administrative tasks.\n * All external functions in this contract must be guarded by the\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\n * feature proposal that would enable this to be done automatically.\n */\ncontract AdminUpgradeabilityProxy is UpgradeabilityProxy {\n  /**\n   * @dev Emitted when the administration has been transferred.\n   * @param previousAdmin Address of the previous admin.\n   * @param newAdmin Address of the new admin.\n   */\n  event AdminChanged(address previousAdmin, address newAdmin);\n\n  /**\n   * @dev Storage slot with the admin of the contract.\n   * This is the keccak-256 hash of \"org.zeppelinos.proxy.admin\", and is\n   * validated in the constructor.\n   */\n  bytes32 private constant ADMIN_SLOT = 0x10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b;\n\n  /**\n   * @dev Modifier to check whether the `msg.sender` is the admin.\n   * If it is, it will run the function. Otherwise, it will delegate the call\n   * to the implementation.\n   */\n  modifier ifAdmin() {\n    if (msg.sender == _admin()) {\n      _;\n    } else {\n      _fallback();\n    }\n  }\n\n  /**\n   * Contract constructor.\n   * It sets the `msg.sender` as the proxy administrator.\n   * @param _implementation address of the initial implementation.\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\n   * It should include the signature and the parameters of the function to be called, as described in\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\n   */\n  constructor(address _implementation, bytes memory _data) UpgradeabilityProxy(_implementation, _data) public payable {\n    assert(ADMIN_SLOT == keccak256(\"org.zeppelinos.proxy.admin\"));\n\n    _setAdmin(msg.sender);\n  }\n\n  /**\n   * @return The address of the proxy admin.\n   */\n  function admin() external ifAdmin returns (address) {\n    return _admin();\n  }\n\n  /**\n   * @return The address of the implementation.\n   */\n  function implementation() external ifAdmin returns (address) {\n    return _implementation();\n  }\n\n  /**\n   * @dev Changes the admin of the proxy.\n   * Only the current admin can call this function.\n   * @param newAdmin Address to transfer proxy administration to.\n   */\n  function changeAdmin(address newAdmin) external ifAdmin {\n    require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\n    emit AdminChanged(_admin(), newAdmin);\n    _setAdmin(newAdmin);\n  }\n\n  /**\n   * @dev Upgrade the backing implementation of the proxy.\n   * Only the admin can call this function.\n   * @param newImplementation Address of the new implementation.\n   */\n  function upgradeTo(address newImplementation) external ifAdmin {\n    _upgradeTo(newImplementation);\n  }\n\n  /**\n   * @dev Upgrade the backing implementation of the proxy and call a function\n   * on the new implementation.\n   * This is useful to initialize the proxied contract.\n   * @param newImplementation Address of the new implementation.\n   * @param data Data to send as msg.data in the low level call.\n   * It should include the signature and the parameters of the function to be called, as described in\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n   */\n  function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n    _upgradeTo(newImplementation);\n    bool rv;\n    (rv,) = newImplementation.delegatecall(data);\n    require(rv);\n  }\n\n  /**\n   * @return The admin slot.\n   */\n  function _admin() internal view returns (address adm) {\n    bytes32 slot = ADMIN_SLOT;\n    assembly {\n      adm := sload(slot)\n    }\n  }\n\n  /**\n   * @dev Sets the address of the proxy admin.\n   * @param newAdmin Address of the new proxy admin.\n   */\n  function _setAdmin(address newAdmin) internal {\n    bytes32 slot = ADMIN_SLOT;\n\n    assembly {\n      sstore(slot, newAdmin)\n    }\n  }\n\n  /**\n   * @dev Only fall back when the sender is not the admin.\n   */\n  function _willFallback() internal {\n    require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\n    super._willFallback();\n  }\n}\n\n/**\n * @title AdminUpgradeabilityProxy\n * @dev This contract combines an upgradeability proxy with an authorization\n * mechanism for administrative tasks.\n * All external functions in this contract must be guarded by the\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\n * feature proposal that would enable this to be done automatically.\n */\ncontract AdminableProxy is AdminUpgradeabilityProxy {\n\n  /**\n   * Contract constructor.\n   */\n  constructor(address _implementation, bytes memory _data) \n  AdminUpgradeabilityProxy(_implementation, _data) public payable {\n  }\n\n  /**\n   * @dev apply proposal.\n   */\n  function applyProposal(bytes calldata data) external ifAdmin returns (bool) {\n    bool rv;\n    (rv, ) = _implementation().delegatecall(data);\n    return rv;\n  }\n\n}\n\ncontract MinGov is Ownable {\n  \n  uint256 public proposalTime;\n  uint256 public first;\n  uint256 public size;\n  \n  struct Proposal {\n    address subject;\n    uint32 created;\n    bool canceled;\n    bytes msgData;\n  }\n  \n  mapping(uint256 => Proposal) public proposals;\n  \n  event NewProposal(uint256 indexed proposalId, address indexed subject, bytes msgData);\n  event Execution(uint256 indexed proposalId, address indexed subject, bytes msgData);\n  \n  constructor(uint256 _proposalTime) public {\n    proposalTime = _proposalTime;\n    first = 1;\n    size = 0;\n  }\n\n  function propose(address _subject, bytes memory _msgData) public onlyOwner {\n    require(size < 5);\n    proposals[first + size] = Proposal(\n      _subject,\n      uint32(now),\n      false,\n      _msgData\n    );\n    emit NewProposal(first + size, _subject, _msgData);\n    size++;\n  }\n  \n  function cancel(uint256 _proposalId) public onlyOwner() {\n    Proposal storage prop = proposals[_proposalId];\n    require(prop.created > 0);\n    require(prop.canceled == false);\n    prop.canceled = true;\n  }\n\n  function withdrawTax(address _token) public onlyOwner {\n    IERC20 token = IERC20(_token);\n    token.transfer(owner(), token.balanceOf(address(this)));\n  }\n\n  function finalize() public {\n    for (uint256 i = first; i < first + size; i++) {\n      Proposal memory prop = proposals[i];\n      if (prop.created + proposalTime <= now) {\n        if (!prop.canceled) {\n          bool rv;\n          bytes4 sig = getSig(prop.msgData);\n          // 0x8f283970 = changeAdmin(address)\n          // 0x3659cfe6 = upgradeTo(address)\n           // 0x983b2d56 = addMinter(address)\n          if (sig == 0x8f283970||sig == 0x3659cfe6||sig == 0x983b2d56) {\n            // this changes proxy parameters \n            (rv, ) = prop.subject.call(prop.msgData);\n          } else {\n            // this changes governance parameters to the implementation\n            rv = AdminableProxy(address(uint160(prop.subject))).applyProposal(prop.msgData);\n          }\n          if (rv) {\n            emit Execution(i, prop.subject, prop.msgData);\n          }\n        }\n        delete proposals[i];\n        first++;\n        size--;\n      }\n    }\n  }\n\n  // proxy function to manage validator slots without governance delay\n  function setSlot(uint256 _slotId, address, bytes32) public onlyOwner {\n    // extract subject\n    address payable subject = address(uint160(_slotId >> 96));\n    // strip out subject from data\n    bytes memory msgData = new bytes(100);\n    assembly {\n      calldatacopy(add(msgData, 32), 0, 4)\n      calldatacopy(add(msgData, 56), 24, 76)\n    }\n    // call subject\n    require(AdminableProxy(subject).applyProposal(msgData), \"setSlot call failed\");\n  }\n\n  function getSig(bytes memory _msgData) internal pure returns (bytes4) {\n    return bytes4(_msgData[3]) >> 24 | bytes4(_msgData[2]) >> 16 | bytes4(_msgData[1]) >> 8 | bytes4(_msgData[0]);\n  }\n\n}",
  "bytecode": "608060405234801561001057600080fd5b506040516020806110938339810180604052602081101561003057600080fd5b505160008054600160a060020a0319163317808255604051600160a060020a039190911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a360019081556002556000600355610ffc806100976000396000f3fe608060405234801561001057600080fd5b50600436106100b25760e060020a6000350463013cf08b81146100b7578063184a0ae9146101835780633df4ddf41461019d57806340e58ee5146101a55780634bb278f3146101c45780634c75b707146101cc578063715018a6146101f25780638da5cb5b146101fa5780638f32d59b1461021e578063949d225d1461023a5780639d48184814610242578063e3c9e9b3146102f6578063f2fde38b14610328575b600080fd5b6100d4600480360360208110156100cd57600080fd5b503561034e565b6040518085600160a060020a0316600160a060020a031681526020018463ffffffff1663ffffffff1681526020018315151515815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561014557818101518382015260200161012d565b50505050905090810190601f1680156101725780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b61018b610417565b60408051918252519081900360200190f35b61018b61041d565b6101c2600480360360208110156101bb57600080fd5b5035610423565b005b6101c261048d565b6101c2600480360360208110156101e257600080fd5b5035600160a060020a03166108b0565b6101c26109cd565b610202610a18565b60408051600160a060020a039092168252519081900360200190f35b610226610a28565b604080519115158252519081900360200190f35b61018b610a39565b6101c26004803603604081101561025857600080fd5b600160a060020a038235169190810190604081016020820135602060020a81111561028257600080fd5b82018360208201111561029457600080fd5b803590602001918460018302840111602060020a831117156102b557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610a3f945050505050565b6101c26004803603606081101561030c57600080fd5b50803590600160a060020a036020820135169060400135610bca565b6101c26004803603602081101561033e57600080fd5b5035600160a060020a0316610d45565b6004602090815260009182526040918290208054600180830180548651600261010094831615949094026000190190911692909204601f8101869004860283018601909652858252600160a060020a0383169560a060020a840463ffffffff169560c060020a90940460ff16949383018282801561040d5780601f106103e25761010080835404028352916020019161040d565b820191906000526020600020905b8154815290600101906020018083116103f057829003601f168201915b5050505050905084565b60015481565b60025481565b61042b610a28565b151561043657600080fd5b60008181526004602052604081208054909160a060020a90910463ffffffff161161046057600080fd5b805460c060020a900460ff161561047657600080fd5b805460c060020a60ff02191660c060020a17905550565b6002545b600354600254018110156108ad576104a7610eae565b60008281526004602090815260409182902082516080810184528154600160a060020a038116825260a060020a810463ffffffff168285015260c060020a900460ff16151581850152600180830180548651600261010094831615949094026000190190911692909204601f8101869004860283018601909652858252919492936060860193919291908301828280156105825780601f1061055757610100808354040283529160200191610582565b820191906000526020600020905b81548152906001019060200180831161056557829003601f168201915b505050505081525050905042600154826020015163ffffffff16011115156108a45780604001511515610864576000806105bf8360600151610d61565b905060e460020a6308f2839702600160e060020a0319821614806105f6575060e160020a631b2ce7f302600160e060020a03198216145b80610614575060e160020a634c1d96ab02600160e060020a03198216145b156106cd578260000151600160a060020a031683606001516040518082805190602001908083835b6020831061065b5780518252601f19909201916020918201910161063c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146106bd576040519150601f19603f3d011682016040523d82523d6000602084013e6106c2565b606091505b5050809250506107ae565b8251606084015160405160e060020a63a45fee5b028152602060048201818152835160248401528351600160a060020a039095169463a45fee5b949391928392604401919085019080838360005b8381101561073357818101518382015260200161071b565b50505050905090810190601f1680156107605780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561077f57600080fd5b505af1158015610793573d6000803e3d6000fd5b505050506040513d60208110156107a957600080fd5b505191505b8115610861578260000151600160a060020a0316847fb5e2e91f4481e1c86a926413e0619387b6cfe0561ebcbcac4d17e4a71aa7cfed85606001516040518080602001828103825283818151815260200191508051906020019080838360005b8381101561082657818101518382015260200161080e565b50505050905090810190601f1680156108535780820380516001836020036101000a031916815260200191505b509250505060405180910390a35b50505b60008281526004602052604081208054600160c860020a03191681559061088e6001830182610ed4565b5050600280546001019055600380546000190190555b50600101610491565b50565b6108b8610a28565b15156108c357600080fd5b80600160a060020a03811663a9059cbb6108db610a18565b6040805160e060020a6370a082310281523060048201529051600160a060020a038616916370a08231916024808301926020929190829003018186803b15801561092457600080fd5b505afa158015610938573d6000803e3d6000fd5b505050506040513d602081101561094e57600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260248301919091525160448083019260209291908290030181600087803b15801561099d57600080fd5b505af11580156109b1573d6000803e3d6000fd5b505050506040513d60208110156109c757600080fd5b50505050565b6109d5610a28565b15156109e057600080fd5b60008054604051600160a060020a0390911690600080516020610fb1833981519152908390a360008054600160a060020a0319169055565b600054600160a060020a03165b90565b600054600160a060020a0316331490565b60035481565b610a47610a28565b1515610a5257600080fd5b600354600511610a6157600080fd5b60408051608081018252600160a060020a0384811682524263ffffffff908116602080850191825260008587018181526060870189815260035460025401835260048452979091208651815494519251600160a060020a031990951696169590951760a060020a63ffffffff02191660a060020a91909416029290921760c060020a60ff02191660c060020a911515919091021782559251805192939192610b0f9260018501920190610f18565b5090505081600160a060020a0316600354600254017f92a3e91e7044e002eca61ed01441e362200afd3ece797ff6c52ac23e254c1520836040518080602001828103825283818151815260200191508051906020019080838360005b83811015610b83578181015183820152602001610b6b565b50505050905090810190601f168015610bb05780820380516001836020036101000a031916815260200191505b509250505060405180910390a35050600380546001019055565b610bd2610a28565b1515610bdd57600080fd5b60408051606480825260a08201909252606060020a85049160609190602082018180388339019050509050600460006020830137604c6018603883013760405160e060020a63a45fee5b028152602060048201818152835160248401528351600160a060020a0386169363a45fee5b9386939283926044019185019080838360005b83811015610c77578181015183820152602001610c5f565b50505050905090810190601f168015610ca45780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b158015610cc357600080fd5b505af1158015610cd7573d6000803e3d6000fd5b505050506040513d6020811015610ced57600080fd5b50511515610d3e576040805160e560020a62461bcd0281526020600482015260136024820152606a60020a721cd95d14db1bdd0818d85b1b0819985a5b195902604482015290519081900360640190fd5b5050505050565b610d4d610a28565b1515610d5857600080fd5b6108ad81610e50565b6000816000815181101515610d7257fe5b90602001015160f860020a900460f860020a02600160f860020a0319166008836001815181101515610da057fe5b90602001015160f860020a900460f860020a02600160f860020a031916600160e060020a031916908060020a82049150506010846002815181101515610de257fe5b90602001015160f860020a900460f860020a02600160f860020a031916600160e060020a031916908060020a82049150506018856003815181101515610e2457fe5b60209101015160029190910a60f860020a91829004909102600160f860020a0319160417171792915050565b600160a060020a0381161515610e6557600080fd5b60008054604051600160a060020a0380851693921691600080516020610fb183398151915291a360008054600160a060020a031916600160a060020a0392909216919091179055565b604080516080810182526000808252602082018190529181019190915260608082015290565b50805460018160011615610100020316600290046000825580601f10610efa57506108ad565b601f0160209004906000526020600020908101906108ad9190610f96565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610f5957805160ff1916838001178555610f86565b82800160010185558215610f86579182015b82811115610f86578251825591602001919060010190610f6b565b50610f92929150610f96565b5090565b610a2591905b80821115610f925760008155600101610f9c56fe8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0a165627a7a72305820242683a6731e739629bce6b30ad594e7e55cfada3dcfac61df0d79f7582ed73a00290000000000000000000000000000000000000000000000000000000000093a80",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000093a80"
}