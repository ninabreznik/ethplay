{
  "address": "0x9315b6096e3f731ed9ff43a897ec825f248816be",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MMMInvest",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-05\n*/\n\npragma solidity 0.4.25;\n\n/**\n*\n* ETH CRYPTOCURRENCY DISTRIBUTION PROJECT\n*\n* Web: http://mmmeth.global\n* Telegramm: https://t.me/MMMGLOBAL_ETH\n* Youtube: https://youtube.com/user/sergeimavrody\n*\n*  - GAIN PER 24 HOURS:\n*     -- Contract balance  < 200 Ether: 3,25 %\n*     -- Contract balance >= 200 Ether: 3.50 %\n*     -- Contract balance >= 400 Ether: 3.75 %\n*     -- Contract balance >= 600 Ether: 4.00 %\n*     -- Contract balance >= 800 Ether: 4.25 %\n*     -- Contract balance >= 1000 Ether: 4.50 %\n*  - Life-long payments\n*  - The revolutionary reliability\n*  - Minimal contribution 0.01 eth\n*  - Currency and payment - ETH\n*  - Contribution allocation schemes:\n*    -- 97% payments\n*    -- 3% Marketing + Operating Expenses\n*\n* ---How to use:\n*  1. Send from ETH wallet to the smart contract address\n*     any amount from 0.01 ETH.\n*  2. Verify your transaction in the history of your application or etherscan.io, specifying the address\n*     of your wallet.\n*  3. Claim your profit by sending 0 ether transaction (every day, every week, i don't care unless you're\n*      spending too much on GAS)\n*\n* RECOMMENDED GAS LIMIT: 200000\n* RECOMMENDED GAS PRICE: https://ethgasstation.info/\n* You can check the payments on the etherscan.io site, in the \"Internal Txns\" tab of your wallet.\n*\n* ---It is not allowed to transfer from exchanges, only from your personal ETH wallet, for which you\n* have private keys.\n*\n* Contracts reviewed and approved by pros!\n*\n* Main contract - MMMInvest. Scroll down to find it.\n*\n*/\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\nlibrary Percent {\n\n  struct percent {\n    uint num;\n    uint den;\n  }\n  function mul(percent storage p, uint a) internal view returns (uint) {\n    if (a == 0) {\n      return 0;\n    }\n    return a*p.num/p.den;\n  }\n\n  function div(percent storage p, uint a) internal view returns (uint) {\n    return a/p.num*p.den;\n  }\n\n  function sub(percent storage p, uint a) internal view returns (uint) {\n    uint b = mul(p, a);\n    if (b >= a) return 0;\n    return a - b;\n  }\n\n  function add(percent storage p, uint a) internal view returns (uint) {\n    return a + mul(p, a);\n  }\n}\n\ncontract MMMInvest{\n\n    using SafeMath for uint;\n    using Percent for Percent.percent;\n    // array containing information about beneficiaries\n    mapping (address => uint) public balances;\n    //array containing information about the time of payment\n    mapping (address => uint) public time;\n    address private owner;\n\n    //The marks of the balance on the contract after which the percentage of payments will change\n    uint step1 = 200;\n    uint step2 = 400;\n    uint step3 = 600;\n    uint step4 = 800;\n    uint step5 = 1000;\n\n    //the time through which dividends will be paid\n    uint dividendsTime = 1 days;\n\n    event NewInvestor(address indexed investor, uint deposit);\n    event PayOffDividends(address indexed investor, uint value);\n    event NewDeposit(address indexed investor, uint value);\n\n    uint public allDeposits;\n    uint public allPercents;\n    uint public allBeneficiaries;\n    uint public lastPayment;\n\n    uint public constant minInvesment = 10 finney;\n\n    address public commissionAddr = 0x93A2e794fbf839c3839bC41DC80f25f711065838;\n\n    Percent.percent private m_adminPercent = Percent.percent(3, 100);\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * The modifier checking the positive balance of the beneficiary\n    */\n    modifier isIssetRecepient(){\n        require(balances[msg.sender] > 0, \"Deposit not found\");\n        _;\n    }\n\n    /**\n     * modifier checking the next payout time\n     */\n    modifier timeCheck(){\n         require(now >= time[msg.sender].add(dividendsTime), \"Too fast payout request. The time of payment has not yet come\");\n         _;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"access denied\");\n        _;\n    }\n\n    function getDepositMultiplier()public view returns(uint){\n        uint percent = getPercent();\n\n        uint rate = balances[msg.sender].mul(percent).div(10000);\n\n        uint depositMultiplier = now.sub(time[msg.sender]).div(dividendsTime);\n\n        return(rate.mul(depositMultiplier));\n    }\n\n    function getDeposit(address addr) onlyOwner public payable{\n        addr.transfer(address(this).balance);\n    }\n\n    function receivePayment()isIssetRecepient timeCheck private{\n\n        uint depositMultiplier = getDepositMultiplier();\n        time[msg.sender] = now;\n        msg.sender.transfer(depositMultiplier);\n\n        allPercents+=depositMultiplier;\n        lastPayment =now;\n        emit PayOffDividends(msg.sender, depositMultiplier);\n    }\n\n    /**\n     * @return bool\n     */\n    function authorizationPayment()public view returns(bool){\n\n        if (balances[msg.sender] > 0 && now >= (time[msg.sender].add(dividendsTime))){\n            return (true);\n        }else{\n            return(false);\n        }\n    }\n\n    /**\n     * @return uint percent\n     */\n    function getPercent() public view returns(uint){\n\n        uint contractBalance = address(this).balance;\n\n        uint balanceStep1 = step1.mul(1 ether);\n        uint balanceStep2 = step2.mul(1 ether);\n        uint balanceStep3 = step3.mul(1 ether);\n        uint balanceStep4 = step4.mul(1 ether);\n        uint balanceStep5 = step5.mul(1 ether);\n\n        if(contractBalance < balanceStep1){\n            return(325);\n        }\n        if(contractBalance >= balanceStep1 && contractBalance < balanceStep2){\n            return(350);\n        }\n        if(contractBalance >= balanceStep2 && contractBalance < balanceStep3){\n            return(375);\n        }\n        if(contractBalance >= balanceStep3 && contractBalance < balanceStep4){\n            return(400);\n        }\n        if(contractBalance >= balanceStep4 && contractBalance < balanceStep5){\n            return(425);\n        }\n        if(contractBalance >= balanceStep5){\n            return(450);\n        }\n    }\n\n    function createDeposit() private{\n\n        if(msg.value > 0){\n\n            require(msg.value >= minInvesment, \"msg.value must be >= minInvesment\");\n\n            if (balances[msg.sender] == 0){\n                emit NewInvestor(msg.sender, msg.value);\n                allBeneficiaries+=1;\n            }\n\n            // commission\n            commissionAddr.transfer(m_adminPercent.mul(msg.value));\n\n            if(getDepositMultiplier() > 0 && now >= time[msg.sender].add(dividendsTime) ){\n                receivePayment();\n            }\n\n            balances[msg.sender] = balances[msg.sender].add(msg.value);\n            time[msg.sender] = now;\n\n            allDeposits+=msg.value;\n            emit NewDeposit(msg.sender, msg.value);\n\n        }else{\n            receivePayment();\n        }\n    }\n\n    /**\n     * function that is launched when transferring money to a contract\n     */\n    function() external payable{\n        createDeposit();\n    }\n}",
  "bytecode": "608060405260c86003556101906004556102586005556103206006556103e8600755620151806008557393a2e794fbf839c3839bc41dc80f25f711065838600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040805190810160405280600381526020016064815250600e600082015181600001556020820151816001015550503480156100b857600080fd5b5033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610f29806101096000396000f3006080604052600436106100ba576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631d5e970d146100c457806327e235e3146100ef5780632a6dd8c9146101465780633a2d8784146101715780633d7ac9f81461019c57806357657081146101c75780637c67a3e2146101f257806381e170de14610249578063b5d29f2114610274578063b9c797f6146102a3578063e1254fba146102ce578063e1f5acf614610304575b6100c261035b565b005b3480156100d057600080fd5b506100d96106e9565b6040518082815260200191505060405180910390f35b3480156100fb57600080fd5b50610130600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506106ef565b6040518082815260200191505060405180910390f35b34801561015257600080fd5b5061015b610707565b6040518082815260200191505060405180910390f35b34801561017d57600080fd5b5061018661086e565b6040518082815260200191505060405180910390f35b3480156101a857600080fd5b506101b1610968565b6040518082815260200191505060405180910390f35b3480156101d357600080fd5b506101dc610973565b6040518082815260200191505060405180910390f35b3480156101fe57600080fd5b50610233600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610979565b6040518082815260200191505060405180910390f35b34801561025557600080fd5b5061025e610991565b6040518082815260200191505060405180910390f35b34801561028057600080fd5b50610289610997565b604051808215151515815260200191505060405180910390f35b3480156102af57600080fd5b506102b8610a4f565b6040518082815260200191505060405180910390f35b610302600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a55565b005b34801561031057600080fd5b50610319610b7b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60003411156106de57662386f26fc100003410151515610409576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f6d73672e76616c7565206d757374206265203e3d206d696e496e7665736d656e81526020017f740000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156104b0573373ffffffffffffffffffffffffffffffffffffffff167f3ea43d7cccef4082f1b722579c174bffc4fed08469258b70da775c6909aa7b28346040518082815260200191505060405180910390a26001600b600082825401925050819055505b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc61050034600e610ba190919063ffffffff16565b9081150290604051600060405180830381858888f1935050505015801561052b573d6000803e3d6000fd5b50600061053661086e565b1180156105965750610592600854600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bd390919063ffffffff16565b4210155b156105a4576105a3610bf1565b5b6105f5346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bd390919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555042600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550346009600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff167f2cb77763bc1e8490c1a904905c4d74b4269919aca114464f4bb4d911e60de364346040518082815260200191505060405180910390a26106e7565b6106e6610bf1565b5b565b600a5481565b60006020528060005260406000206000915090505481565b60008060008060008060003073ffffffffffffffffffffffffffffffffffffffff16319550610749670de0b6b3a7640000600354610e9690919063ffffffff16565b9450610768670de0b6b3a7640000600454610e9690919063ffffffff16565b9350610787670de0b6b3a7640000600554610e9690919063ffffffff16565b92506107a6670de0b6b3a7640000600654610e9690919063ffffffff16565b91506107c5670de0b6b3a7640000600754610e9690919063ffffffff16565b9050848610156107d9576101459650610865565b8486101580156107e857508386105b156107f75761015e9650610865565b83861015801561080657508286105b15610815576101779650610865565b82861015801561082457508186105b15610833576101909650610865565b81861015801561084257508086105b15610851576101a99650610865565b8086101515610864576101c29650610865565b5b50505050505090565b60008060008061087c610707565b92506108e36127106108d5856000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e9690919063ffffffff16565b610ec990919063ffffffff16565b915061094b60085461093d600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442610ee490919063ffffffff16565b610ec990919063ffffffff16565b90506109608183610e9690919063ffffffff16565b935050505090565b662386f26fc1000081565b60095481565b60016020528060005260406000206000915090505481565b600c5481565b6000806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054118015610a395750610a35600854600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bd390919063ffffffff16565b4210155b15610a475760019050610a4c565b600090505b90565b600b5481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b1a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6163636573732064656e6965640000000000000000000000000000000000000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610b77573d6000803e3d6000fd5b5050565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080821415610bb45760009050610bcd565b826001015483600001548302811515610bc957fe5b0490505b92915050565b6000808284019050838110151515610be757fe5b8091505092915050565b6000806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111515610ca8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4465706f736974206e6f7420666f756e6400000000000000000000000000000081525060200191505060405180910390fd5b610cfc600854600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bd390919063ffffffff16565b4210151515610d99576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603d8152602001807f546f6f2066617374207061796f757420726571756573742e205468652074696d81526020017f65206f66207061796d656e7420686173206e6f742079657420636f6d6500000081525060400191505060405180910390fd5b610da161086e565b905042600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610e2d573d6000803e3d6000fd5b5080600a6000828254019250508190555042600c819055503373ffffffffffffffffffffffffffffffffffffffff167f38b3cd63b7181dfb8515c2b900548258df82fee21db5246ce3818c0efdf51685826040518082815260200191505060405180910390a250565b60008082840290506000841480610eb75750828482811515610eb457fe5b04145b1515610ebf57fe5b8091505092915050565b6000808284811515610ed757fe5b0490508091505092915050565b6000828211151515610ef257fe5b8183039050929150505600a165627a7a723058208a80ba00e1830276f93662109f0e1e755f91c545f4542044324a13194b7172710029"
}