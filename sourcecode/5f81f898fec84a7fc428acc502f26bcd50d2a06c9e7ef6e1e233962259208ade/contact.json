{
  "address": "0x59ce5fe417e08d53c87c2ac0ab526283524debf1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FilesFMToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-16\n*/\n\npragma solidity ^0.4.25;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\nlibrary SafeERC20 {\n  function safeTransfer(\n    ERC20Basic _token,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transfer(_to, _value));\n  }\n\n  function safeTransferFrom(\n    ERC20 _token,\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transferFrom(_from, _to, _value));\n  }\n\n  function safeApprove(\n    ERC20 _token,\n    address _spender,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.approve(_spender, _value));\n  }\n}\ncontract TokenRecoverable is Ownable {\n    using SafeERC20 for ERC20Basic;\n\n    function recoverTokens(ERC20Basic token, address to, uint256 amount) public onlyOwner {\n        uint256 balance = token.balanceOf(address(this));\n        require(balance >= amount);\n        token.safeTransfer(to, amount);\n    }\n}\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\ncontract ERC820Registry {\n    function getManager(address addr) public view returns(address);\n    function setManager(address addr, address newManager) public;\n    function getInterfaceImplementer(address addr, bytes32 iHash) public constant returns (address);\n    function setInterfaceImplementer(address addr, bytes32 iHash, address implementer) public;\n}\n\n\ncontract ERC820Implementer {\n    ERC820Registry erc820Registry = ERC820Registry(0x991a1bcb077599290d7305493c9A630c20f8b798);\n\n    function setInterfaceImplementation(string ifaceLabel, address impl) internal {\n        bytes32 ifaceHash = keccak256(abi.encodePacked(ifaceLabel));\n        erc820Registry.setInterfaceImplementer(this, ifaceHash, impl);\n    }\n\n    function interfaceAddr(address addr, string ifaceLabel) internal constant returns(address) {\n        bytes32 ifaceHash = keccak256(abi.encodePacked(ifaceLabel));\n        return erc820Registry.getInterfaceImplementer(addr, ifaceHash);\n    }\n\n    function delegateManagement(address newManager) internal {\n        erc820Registry.setManager(this, newManager);\n    }\n}\n\ncontract ERC20Token {\n    function name() public view returns (string);\n    function symbol() public view returns (string);\n    function decimals() public view returns (uint8);\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address owner) public view returns (uint256);\n    function transfer(address to, uint256 amount) public returns (bool);\n    function transferFrom(address from, address to, uint256 amount) public returns (bool);\n    function approve(address spender, uint256 amount) public returns (bool);\n    function allowance(address owner, address spender) public view returns (uint256);\n\n    // solhint-disable-next-line no-simple-event-func-name\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n}\n\ncontract ERC777Token {\n    function name() public view returns (string);\n    function symbol() public view returns (string);\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address owner) public view returns (uint256);\n    function granularity() public view returns (uint256);\n\n    function defaultOperators() public view returns (address[]);\n    function isOperatorFor(address operator, address tokenHolder) public view returns (bool);\n    function authorizeOperator(address operator) public;\n    function revokeOperator(address operator) public;\n\n    function send(address to, uint256 amount, bytes holderData) public;\n    function operatorSend(address from, address to, uint256 amount, bytes holderData, bytes operatorData) public;\n\n    function burn(uint256 amount, bytes holderData) public;\n    function operatorBurn(address from, uint256 amount, bytes holderData, bytes operatorData) public;\n\n    event Sent(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256 amount,\n        bytes holderData,\n        bytes operatorData\n    ); // solhint-disable-next-line separate-by-one-line-in-contract\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes operatorData);\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes holderData, bytes operatorData);\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\n}\n\n\ncontract ERC777TokensRecipient {\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint amount,\n        bytes userData,\n        bytes operatorData\n    ) public;\n}\n\n\ncontract ERC777TokensSender {\n    function tokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint amount,\n        bytes userData,\n        bytes operatorData\n    ) public;\n}\n\ncontract ERC777BaseToken is ERC777Token, ERC820Implementer {\n    using SafeMath for uint256;\n\n    string internal mName;\n    string internal mSymbol;\n    uint256 internal mGranularity;\n    uint256 internal mTotalSupply;\n\n\n    mapping(address => uint) internal mBalances;\n    mapping(address => mapping(address => bool)) internal mAuthorized;\n\n    address[] internal mDefaultOperators;\n    mapping(address => bool) internal mIsDefaultOperator;\n    mapping(address => mapping(address => bool)) internal mRevokedDefaultOperator;\n\n    /* -- Constructor -- */\n    //\n    /// @notice Constructor to create a ReferenceToken\n    /// @param _name Name of the new token\n    /// @param _symbol Symbol of the new token.\n    /// @param _granularity Minimum transferable chunk.\n    constructor(string _name, string _symbol, uint256 _granularity, address[] _defaultOperators) internal {\n        mName = _name;\n        mSymbol = _symbol;\n        mTotalSupply = 0;\n        require(_granularity >= 1);\n        mGranularity = _granularity;\n\n        mDefaultOperators = _defaultOperators;\n        for (uint i = 0; i < mDefaultOperators.length; i++) { mIsDefaultOperator[mDefaultOperators[i]] = true; }\n\n        setInterfaceImplementation(\"ERC777Token\", this);\n    }\n\n    /* -- ERC777 Interface Implementation -- */\n    //\n    /// @return the name of the token\n    function name() public view returns (string) { return mName; }\n\n    /// @return the symbol of the token\n    function symbol() public view returns (string) { return mSymbol; }\n\n    /// @return the granularity of the token\n    function granularity() public view returns (uint256) { return mGranularity; }\n\n    /// @return the total supply of the token\n    function totalSupply() public view returns (uint256) { return mTotalSupply; }\n\n    /// @notice Return the account balance of some account\n    /// @param _tokenHolder Address for which the balance is returned\n    /// @return the balance of `_tokenAddress`.\n    function balanceOf(address _tokenHolder) public view returns (uint256) { return mBalances[_tokenHolder]; }\n\n    /// @notice Return the list of default operators\n    /// @return the list of all the default operators\n    function defaultOperators() public view returns (address[]) { return mDefaultOperators; }\n\n    /// @notice Send `_amount` of tokens to address `_to` passing `_userData` to the recipient\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    function send(address _to, uint256 _amount, bytes _userData) public {\n        doSend(msg.sender, msg.sender, _to, _amount, _userData, \"\", true);\n    }\n\n    /// @notice Authorize a third party `_operator` to manage (send) `msg.sender`'s tokens.\n    /// @param _operator The operator that wants to be Authorized\n    function authorizeOperator(address _operator) public {\n        require(_operator != msg.sender);\n        if (mIsDefaultOperator[_operator]) {\n            mRevokedDefaultOperator[_operator][msg.sender] = false;\n        } else {\n            mAuthorized[_operator][msg.sender] = true;\n        }\n        emit AuthorizedOperator(_operator, msg.sender);\n    }\n\n    /// @notice Revoke a third party `_operator`'s rights to manage (send) `msg.sender`'s tokens.\n    /// @param _operator The operator that wants to be Revoked\n    function revokeOperator(address _operator) public {\n        require(_operator != msg.sender);\n        if (mIsDefaultOperator[_operator]) {\n            mRevokedDefaultOperator[_operator][msg.sender] = true;\n        } else {\n            mAuthorized[_operator][msg.sender] = false;\n        }\n        emit RevokedOperator(_operator, msg.sender);\n    }\n\n    /// @notice Check whether the `_operator` address is allowed to manage the tokens held by `_tokenHolder` address.\n    /// @param _operator address to check if it has the right to manage the tokens\n    /// @param _tokenHolder address which holds the tokens to be managed\n    /// @return `true` if `_operator` is authorized for `_tokenHolder`\n    function isOperatorFor(address _operator, address _tokenHolder) public view returns (bool) {\n        return (_operator == _tokenHolder\n            || mAuthorized[_operator][_tokenHolder]\n            || (mIsDefaultOperator[_operator] && !mRevokedDefaultOperator[_operator][_tokenHolder]));\n    }\n\n    /// @notice Send `_amount` of tokens on behalf of the address `from` to the address `to`.\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _userData Data generated by the user to be sent to the recipient\n    /// @param _operatorData Data generated by the operator to be sent to the recipient\n    function operatorSend(address _from, address _to, uint256 _amount, bytes _userData, bytes _operatorData) public {\n        require(isOperatorFor(msg.sender, _from));\n        doSend(msg.sender, _from, _to, _amount, _userData, _operatorData, true);\n    }\n\n    function burn(uint256 _amount, bytes _holderData) public {\n        doBurn(msg.sender, msg.sender, _amount, _holderData, \"\");\n    }\n\n    function operatorBurn(address _tokenHolder, uint256 _amount, bytes _holderData, bytes _operatorData) public {\n        require(isOperatorFor(msg.sender, _tokenHolder));\n        doBurn(msg.sender, _tokenHolder, _amount, _holderData, _operatorData);\n    }\n\n    /* -- Helper Functions -- */\n    //\n    /// @notice Internal function that ensures `_amount` is multiple of the granularity\n    /// @param _amount The quantity that want's to be checked\n    function requireMultiple(uint256 _amount) internal view {\n        require(_amount.div(mGranularity).mul(mGranularity) == _amount);\n    }\n\n    /// @notice Check whether an address is a regular address or not.\n    /// @param _addr Address of the contract that has to be checked\n    /// @return `true` if `_addr` is a regular address (not a contract)\n    function isRegularAddress(address _addr) internal view returns(bool) {\n        if (_addr == 0) { return false; }\n        uint size;\n        assembly { size := extcodesize(_addr) } // solhint-disable-line no-inline-assembly\n        return size == 0;\n    }\n\n    /// @notice Helper function actually performing the sending of tokens.\n    /// @param _operator The address performing the send\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _userData Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    /// @param _preventLocking `true` if you want this function to throw when tokens are sent to a contract not\n    ///  implementing `erc777_tokenHolder`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function doSend(\n        address _operator,\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes _userData,\n        bytes _operatorData,\n        bool _preventLocking\n    )\n        internal\n    {\n        requireMultiple(_amount);\n\n        callSender(_operator, _from, _to, _amount, _userData, _operatorData);\n\n        require(_to != address(0));          // forbid sending to 0x0 (=burning)\n        require(mBalances[_from] >= _amount); // ensure enough funds\n\n        mBalances[_from] = mBalances[_from].sub(_amount);\n        mBalances[_to] = mBalances[_to].add(_amount);\n\n        callRecipient(_operator, _from, _to, _amount, _userData, _operatorData, _preventLocking);\n\n        emit Sent(_operator, _from, _to, _amount, _userData, _operatorData);\n    }\n\n    /// @notice Helper function actually performing the burning of tokens.\n    /// @param _operator The address performing the burn\n    /// @param _tokenHolder The address holding the tokens being burn\n    /// @param _amount The number of tokens to be burnt\n    /// @param _holderData Data generated by the token holder\n    /// @param _operatorData Data generated by the operator\n    function doBurn(address _operator, address _tokenHolder, uint256 _amount, bytes _holderData, bytes _operatorData)\n        internal\n    {\n        requireMultiple(_amount);\n        require(balanceOf(_tokenHolder) >= _amount);\n\n        mBalances[_tokenHolder] = mBalances[_tokenHolder].sub(_amount);\n        mTotalSupply = mTotalSupply.sub(_amount);\n\n        callSender(_operator, _tokenHolder, 0x0, _amount, _holderData, _operatorData);\n        emit Burned(_operator, _tokenHolder, _amount, _holderData, _operatorData);\n    }\n\n    /// @notice Helper function that checks for ERC777TokensRecipient on the recipient and calls it.\n    ///  May throw according to `_preventLocking`\n    /// @param _operator The address performing the send or mint\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _userData Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    /// @param _preventLocking `true` if you want this function to throw when tokens are sent to a contract not\n    ///  implementing `ERC777TokensRecipient`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function callRecipient(\n        address _operator,\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes _userData,\n        bytes _operatorData,\n        bool _preventLocking\n    )\n        internal\n    {\n        address recipientImplementation = interfaceAddr(_to, \"ERC777TokensRecipient\");\n        if (recipientImplementation != 0) {\n            ERC777TokensRecipient(recipientImplementation).tokensReceived(\n                _operator, _from, _to, _amount, _userData, _operatorData);\n        } else if (_preventLocking) {\n            require(isRegularAddress(_to));\n        }\n    }\n\n    /// @notice Helper function that checks for ERC777TokensSender on the sender and calls it.\n    ///  May throw according to `_preventLocking`\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be sent\n    /// @param _userData Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    ///  implementing `ERC777TokensSender`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function callSender(\n        address _operator,\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes _userData,\n        bytes _operatorData\n    )\n        internal\n    {\n        address senderImplementation = interfaceAddr(_from, \"ERC777TokensSender\");\n        if (senderImplementation == 0) { return; }\n        ERC777TokensSender(senderImplementation).tokensToSend(_operator, _from, _to, _amount, _userData, _operatorData);\n    }\n}\n\n\ncontract ERC777ERC20BaseToken is ERC20Token, ERC777BaseToken {\n    bool internal mErc20compatible;\n\n    mapping(address => mapping(address => bool)) internal mAuthorized;\n    mapping(address => mapping(address => uint256)) internal mAllowed;\n\n    constructor(\n        string _name,\n        string _symbol,\n        uint256 _granularity,\n        address[] _defaultOperators\n    )\n        internal ERC777BaseToken(_name, _symbol, _granularity, _defaultOperators)\n    {\n        mErc20compatible = true;\n        setInterfaceImplementation(\"ERC20Token\", this);\n    }\n\n    /// @notice This modifier is applied to erc20 obsolete methods that are\n    ///  implemented only to maintain backwards compatibility. When the erc20\n    ///  compatibility is disabled, this methods will fail.\n    modifier erc20 () {\n        require(mErc20compatible);\n        _;\n    }\n\n    /// @notice For Backwards compatibility\n    /// @return The decimls of the token. Forced to 18 in ERC777.\n    function decimals() public erc20 view returns (uint8) { return uint8(18); }\n\n    /// @notice ERC20 backwards compatible transfer.\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be transferred\n    /// @return `true`, if the transfer can't be done, it should fail.\n    function transfer(address _to, uint256 _amount) public erc20 returns (bool success) {\n        doSend(msg.sender, msg.sender, _to, _amount, \"\", \"\", false);\n        return true;\n    }\n\n    /// @notice ERC20 backwards compatible transferFrom.\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be transferred\n    /// @return `true`, if the transfer can't be done, it should fail.\n    function transferFrom(address _from, address _to, uint256 _amount) public erc20 returns (bool success) {\n        require(_amount <= mAllowed[_from][msg.sender]);\n\n        // Cannot be after doSend because of tokensReceived re-entry\n        mAllowed[_from][msg.sender] = mAllowed[_from][msg.sender].sub(_amount);\n        doSend(msg.sender, _from, _to, _amount, \"\", \"\", false);\n        return true;\n    }\n\n    /// @notice ERC20 backwards compatible approve.\n    ///  `msg.sender` approves `_spender` to spend `_amount` tokens on its behalf.\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _amount The number of tokens to be approved for transfer\n    /// @return `true`, if the approve can't be done, it should fail.\n    function approve(address _spender, uint256 _amount) public erc20 returns (bool success) {\n        mAllowed[msg.sender][_spender] = _amount;\n        emit Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    /// @notice ERC20 backwards compatible allowance.\n    ///  This function makes it easy to read the `allowed[]` map\n    /// @param _owner The address of the account that owns the token\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\n    ///  to spend\n    function allowance(address _owner, address _spender) public erc20 view returns (uint256 remaining) {\n        return mAllowed[_owner][_spender];\n    }\n\n    function doSend(\n        address _operator,\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes _userData,\n        bytes _operatorData,\n        bool _preventLocking\n    )\n        internal\n    {\n        super.doSend(_operator, _from, _to, _amount, _userData, _operatorData, _preventLocking);\n        if (mErc20compatible) { emit Transfer(_from, _to, _amount); }\n    }\n\n    function doBurn(address _operator, address _tokenHolder, uint256 _amount, bytes _holderData, bytes _operatorData)\n        internal\n    {\n        super.doBurn(_operator, _tokenHolder, _amount, _holderData, _operatorData);\n        if (mErc20compatible) { emit Transfer(_tokenHolder, 0x0, _amount); }\n    }\n}\n\n\n/**\n * @title Eliptic curve signature operations\n *\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\n *\n * TODO Remove this library once solidity supports passing a signature to ecrecover.\n * See https://github.com/ethereum/solidity/issues/864\n *\n */\nlibrary ECRecovery {\n\n    /**\n    * @dev Recover signer address from a message by using their signature\n    * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n    * @param sig bytes signature, the signature is generated using web3.eth.sign()\n    */\n    function recover(bytes32 hash, bytes sig)\n        internal\n        pure\n        returns (address)\n    {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // Check the signature length\n        if (sig.length != 65) {\n            return (address(0));\n        }\n\n        // Divide the signature in r, s and v variables\n        // ecrecover takes the signature parameters, and the only way to get them\n        // currently is to use assembly.\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            r := mload(add(sig, 32))\n            s := mload(add(sig, 64))\n            v := byte(0, mload(add(sig, 96)))\n        }\n\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n        if (v < 27) {\n            v += 27;\n        }\n\n        // If the version is correct return the signer address\n        if (v != 27 && v != 28) {\n            return (address(0));\n        } else {\n        // solium-disable-next-line arg-overflow\n            return ecrecover(hash, v, r, s);\n        }\n    }\n\n    /**\n    * toEthSignedMessageHash\n    * @dev prefix a bytes32 value with \"\\x19Ethereum Signed Message:\"\n    * @dev and hash the result\n    */\n    function toEthSignedMessageHash(bytes32 hash)\n        internal\n        pure\n        returns (bytes32)\n    {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(\n            abi.encodePacked(\n                \"\\x19Ethereum Signed Message:\\n32\",\n                hash\n            )\n        );\n    }\n}\n\ncontract FilesFMToken is TokenRecoverable, ERC777ERC20BaseToken {\n    using SafeMath for uint256;\n    using ECRecovery for bytes32;\n\n    string private constant name_ = \"Files.fm Token\";\n    string private constant symbol_ = \"FFM\";\n    uint256 private constant granularity_ = 1;\n    \n    mapping(bytes => bool) private signatures;\n    address public tokenMinter;\n    address public tokenBag;\n    bool public throwOnIncompatibleContract = true;\n    bool public burnEnabled = false;\n    bool public transfersEnabled = false;\n    bool public defaultOperatorsComplete = false;\n\n    event TokenBagChanged(address indexed oldAddress, address indexed newAddress, uint256 balance);\n    event DefaultOperatorAdded(address indexed operator);\n    event DefaultOperatorRemoved(address indexed operator);\n    event DefaultOperatorsCompleted();\n\n    /// @notice Constructor to create a token\n    constructor() public ERC777ERC20BaseToken(name_, symbol_, granularity_, new address[](0)) {\n    }\n\n    modifier canTransfer(address from, address to) {\n        require(transfersEnabled || from == tokenBag || to == tokenBag);\n        _;\n    }\n\n    modifier canBurn() {\n        require(burnEnabled);\n        _;\n    }\n\n    modifier hasMintPermission() {\n        require(msg.sender == owner || msg.sender == tokenMinter, \"Only owner or token minter can mint tokens\");\n        _;\n    }\n\n    modifier canManageDefaultOperator() {\n        require(!defaultOperatorsComplete, \"Default operator list is not editable\");\n        _;\n    }\n\n    /// @notice Disables the ERC20 interface. This function can only be called\n    ///  by the owner.\n    function disableERC20() public onlyOwner {\n        mErc20compatible = false;\n        setInterfaceImplementation(\"ERC20Token\", 0x0);\n    }\n\n    /// @notice Re enables the ERC20 interface. This function can only be called\n    ///  by the owner.\n    function enableERC20() public onlyOwner {\n        mErc20compatible = true;\n        setInterfaceImplementation(\"ERC20Token\", this);\n    }\n\n    function send(address _to, uint256 _amount, bytes _userData) public canTransfer(msg.sender, _to) {\n        super.send(_to, _amount, _userData);\n    }\n\n    function operatorSend(\n        address _from, \n        address _to, \n        uint256 _amount, \n        bytes _userData, \n        bytes _operatorData) public canTransfer(_from, _to) {\n        super.operatorSend(_from, _to, _amount, _userData, _operatorData);\n    }\n\n    function transfer(address _to, uint256 _amount) public erc20 canTransfer(msg.sender, _to) returns (bool success) {\n        return super.transfer(_to, _amount);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _amount) public erc20 canTransfer(_from, _to) returns (bool success) {\n        return super.transferFrom(_from, _to, _amount);\n    }\n\n    /* -- Mint And Burn Functions (not part of the ERC777 standard, only the Events/tokensReceived call are) -- */\n    //\n    /// @notice Generates `_amount` tokens to be assigned to `_tokenHolder`\n    ///  Sample mint function to showcase the use of the `Minted` event and the logic to notify the recipient.\n    /// @param _tokenHolder The address that will be assigned the new tokens\n    /// @param _amount The quantity of tokens generated\n    /// @param _operatorData Data that will be passed to the recipient as a first transfer\n    function mint(address _tokenHolder, uint256 _amount, bytes _operatorData) public hasMintPermission {\n        doMint(_tokenHolder, _amount, _operatorData);\n    }\n\n    function mintToken(address _tokenHolder, uint256 _amount) public hasMintPermission {\n        doMint(_tokenHolder, _amount, \"\");\n    }\n\n    function mintTokens(address[] _tokenHolders, uint256[] _amounts) public hasMintPermission {\n        require(_tokenHolders.length > 0 && _tokenHolders.length <= 100);\n        require(_tokenHolders.length == _amounts.length);\n\n        for (uint256 i = 0; i < _tokenHolders.length; i++) {\n            doMint(_tokenHolders[i], _amounts[i], \"\");\n        }\n    }\n\n    /// @notice Burns `_amount` tokens from `_tokenHolder`\n    ///  Sample burn function to showcase the use of the `Burned` event.\n    /// @param _amount The quantity of tokens to burn\n    function burn(uint256 _amount, bytes _holderData) public canBurn {\n        super.burn(_amount, _holderData);\n    }\n\n    function permitTransfers() public onlyOwner {\n        require(!transfersEnabled);\n        transfersEnabled = true;\n    }\n\n    function setThrowOnIncompatibleContract(bool _throwOnIncompatibleContract) public onlyOwner {\n        throwOnIncompatibleContract = _throwOnIncompatibleContract;\n    }\n\n    function permitBurning(bool _enable) public onlyOwner {\n        burnEnabled = _enable;\n    }\n\n    function completeDefaultOperators() public onlyOwner canManageDefaultOperator {\n        defaultOperatorsComplete = true;\n        emit DefaultOperatorsCompleted();\n    }\n\n    function setTokenMinter(address _tokenMinter) public onlyOwner {\n        tokenMinter = _tokenMinter;\n    }\n\n    function setTokenBag(address _tokenBag) public onlyOwner {\n        uint256 balance = mBalances[tokenBag];\n        \n        if (_tokenBag == address(0)) {\n            require(balance == 0, \"Token Bag balance must be 0\");\n        } else if (balance > 0) {\n            doSend(msg.sender, tokenBag, _tokenBag, balance, \"\", \"\", false);\n        }\n\n        emit TokenBagChanged(tokenBag, _tokenBag, balance);\n        tokenBag = _tokenBag;\n    }\n    \n    function renounceOwnership() public onlyOwner {\n        tokenMinter = address(0);\n        super.renounceOwnership();\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        tokenMinter = address(0);\n        super.transferOwnership(_newOwner);\n    }\n\n    /// @notice sends tokens using signature to recover token sender\n    /// @param _to the address of the recepient\n    /// @param _amount tokens to send\n    /// @param _fee amound of tokens which goes to msg.sender\n    /// @param _data arbitrary user data\n    /// @param _nonce value to protect from replay attacks\n    /// @param _sig concatenated r,s,v values\n    /// @return `true` if the token transfer is success, otherwise should fail\n    function sendWithSignature(address _to, uint256 _amount, uint256 _fee, bytes _data, uint256 _nonce, bytes _sig) public returns (bool) {\n        doSendWithSignature(_to, _amount, _fee, _data, _nonce, _sig, true);\n        return true;\n    }\n\n    /// @notice transfers tokens in ERC20 compatible way using signature to recover token sender\n    /// @param _to the address of the recepient\n    /// @param _amount tokens to transfer\n    /// @param _fee amound of tokens which goes to msg.sender\n    /// @param _data arbitrary user data\n    /// @param _nonce value to protect from replay attacks\n    /// @param _sig concatenated r,s,v values\n    /// @return `true` if the token transfer is success, otherwise should fail\n    function transferWithSignature(address _to, uint256 _amount, uint256 _fee, bytes _data, uint256 _nonce, bytes _sig) public returns (bool) {\n        doSendWithSignature(_to, _amount, _fee, _data, _nonce, _sig, false);\n        return true;\n    }\n\n    function addDefaultOperator(address _operator) public onlyOwner canManageDefaultOperator {\n        require(_operator != address(0), \"Default operator cannot be set to address 0x0\");\n        require(mIsDefaultOperator[_operator] == false, \"This is already default operator\");\n        mDefaultOperators.push(_operator);\n        mIsDefaultOperator[_operator] = true;\n        emit DefaultOperatorAdded(_operator);\n    }\n\n    function removeDefaultOperator(address _operator) public onlyOwner canManageDefaultOperator {\n        require(mIsDefaultOperator[_operator] == true, \"This operator is not default operator\");\n        uint256 operatorIndex;\n        uint256 count = mDefaultOperators.length;\n        for (operatorIndex = 0; operatorIndex < count; operatorIndex++) {\n            if (mDefaultOperators[operatorIndex] == _operator) {\n                break;\n            }\n        }\n        if (operatorIndex + 1 < count) {\n            mDefaultOperators[operatorIndex] = mDefaultOperators[count - 1];\n        }\n        mDefaultOperators.length = mDefaultOperators.length - 1;\n        mIsDefaultOperator[_operator] = false;\n        emit DefaultOperatorRemoved(_operator);\n    }\n\n    function doMint(address _tokenHolder, uint256 _amount, bytes _operatorData) private {\n        require(_tokenHolder != address(0), \"Cannot mint to address 0x0\");\n        requireMultiple(_amount);\n\n        mTotalSupply = mTotalSupply.add(_amount);\n        mBalances[_tokenHolder] = mBalances[_tokenHolder].add(_amount);\n\n        callRecipient(msg.sender, address(0), _tokenHolder, _amount, \"\", _operatorData, false);\n\n        emit Minted(msg.sender, _tokenHolder, _amount, _operatorData);\n        if (mErc20compatible) { emit Transfer(address(0), _tokenHolder, _amount); }\n    }\n\n    function doSendWithSignature(address _to, uint256 _amount, uint256 _fee, bytes _data, uint256 _nonce, bytes _sig, bool _preventLocking) private {\n        require(_to != address(0));\n        require(_to != address(this)); // token contract does not accept own tokens\n\n        require(signatures[_sig] == false);\n        signatures[_sig] = true;\n\n        bytes memory packed;\n        if (_preventLocking) {\n            packed = abi.encodePacked(address(this), _to, _amount, _fee, _data, _nonce);\n        } else {\n            packed = abi.encodePacked(address(this), _to, _amount, _fee, _data, _nonce, \"ERC20Compat\");\n        }\n\n        address signer = keccak256(packed)\n            .toEthSignedMessageHash()\n            .recover(_sig); // same security considerations as in Ethereum TX\n        \n        require(signer != address(0));\n        require(transfersEnabled || signer == tokenBag || _to == tokenBag);\n\n        uint256 total = _amount.add(_fee);\n        require(mBalances[signer] >= total);\n\n        doSend(msg.sender, signer, _to, _amount, _data, \"\", _preventLocking);\n        if (_fee > 0) {\n            doSend(msg.sender, signer, msg.sender, _fee, \"\", \"\", _preventLocking);\n        }\n    }\n\n    /// @notice Helper function that checks for ERC777TokensRecipient on the recipient and calls it.\n    ///  May throw according to `_preventLocking`\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _userData Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    /// @param _preventLocking `true` if you want this function to throw when tokens are sent to a contract not\n    ///  implementing `ERC777TokensRecipient`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function callRecipient(\n        address _operator,\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes _userData,\n        bytes _operatorData,\n        bool _preventLocking\n    ) internal {\n        address recipientImplementation = interfaceAddr(_to, \"ERC777TokensRecipient\");\n        if (recipientImplementation != 0) {\n            ERC777TokensRecipient(recipientImplementation).tokensReceived(\n                _operator, _from, _to, _amount, _userData, _operatorData);\n        } else if (throwOnIncompatibleContract && _preventLocking) {\n            require(isRegularAddress(_to));\n        }\n    }\n}",
  "bytecode": ""
}