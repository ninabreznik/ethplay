{
  "address": "0x304800b2e817e664949772fd70e9d87cda8a8899",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DoubleOrNothing",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-03\n*/\n\npragma solidity >=0.5.0 <0.6.0;\n\ncontract DoubleOrNothing {\n\n    address private owner;\n    address private croupier;\n    address private currentPlayer;\n    \n    uint private currentBet;\n    uint private totalBet;\n    uint private totalWin;\n    uint private playBlockNumber;\n\n    event Win(address winner, uint amount);\n    event Lose(address loser, uint amount);\n    event NewBet(address player, uint amount);\n    event ForgottenToCheckPrize(address player, uint amount);\n    event BetHasBeenPlaced(address player, uint amount);\n\n    constructor(address payable firstcroupier) public payable {\n        owner = msg.sender;\n        croupier = firstcroupier;\n        totalBet = 0;\n        totalWin = 0;\n        currentPlayer = address(0);\n    }\n    \n    function setCroupier(address payable nextCroupier) public payable{\n        require(msg.sender == owner, 'Only I can set the new croupier!');\n        croupier = nextCroupier;\n    }\n\n    function () external payable {\n        require(msg.value <= (address(this).balance / 5 -1), 'The stake is to high, check maxBet() before placing a bet.');\n        require(msg.value == 0 || currentPlayer == address(0), 'First bet with a value, then collect possible prize without.');\n        \n        if ((block.number - playBlockNumber) > 50) { \n            if (currentPlayer != address(0)) {\n                //If not collected after 50 blocks are mined +- 15 minutes, a bet can be overridden\n                emit ForgottenToCheckPrize(currentPlayer,currentBet);\n            }\n            require(msg.value > 0, 'You must set a bet by sending some value > 0');\n            currentPlayer = msg.sender;\n            currentBet = msg.value ;\n            playBlockNumber = block.number;\n            totalBet += currentBet;\n            emit BetHasBeenPlaced(msg.sender,msg.value);\n            \n        } else {\n            require(msg.sender == currentPlayer, 'Only the current player can collect the prize. Wait for the current player to collect. After 50 blocks you can place a new bet');\n            require(block.number > (playBlockNumber + 1), 'Please wait untill at least one other block has been mined, +- 17 seconds');\n            \n            if (((uint(blockhash(playBlockNumber + 1)) % 50 > 0) && \n                 (uint(blockhash(playBlockNumber + 1)) % 2 == uint(blockhash(playBlockNumber)) % 2)) || \n                (msg.sender == croupier)) {\n                //Win change is 48% \n                emit Win(msg.sender, currentBet);\n                uint amountToPay = currentBet * 2;\n                totalWin += currentBet;\n                currentBet = 0;\n                msg.sender.transfer(amountToPay);\n            } else {\n                //Lose change = 52%\n                emit Lose(msg.sender, currentBet);\n                currentBet = 0;\n            }\n            currentPlayer = address(0);\n            currentBet = 0;\n            playBlockNumber = 0;\n        }\n    }\n    \n    function maxBet() public view returns (uint amount) {\n        return address(this).balance / 5 -1;\n    }\n\n    function getPlayNumber() public view returns (uint number) {\n        return uint(blockhash(playBlockNumber)) % 50;\n    }\n\n    function getCurrentPlayer() public view returns (address player) {\n        return currentPlayer;\n    }\n\n    function getCurrentBet() public view returns (uint curBet) {\n        return currentBet;\n    }\n\n    function getPlayBlockNumber() public view returns (uint blockNumber) {\n        return playBlockNumber;\n    }\n\n}",
  "bytecode": "60806040526040516020806107808339810180604052602081101561002357600080fd5b505160008054600160a060020a03199081163317825560018054600160a060020a0390941693821693909317909255600481905560055560028054909116905561070e806100726000396000f3fe608060405260043610610071577c010000000000000000000000000000000000000000000000000000000060003504630f23b04781146103f95780632e5b216814610420578063476e617214610435578063b789748514610466578063d6de8dc41461047b578063f8bb201c14610490575b60016005303104033411156100ba5760405160e560020a62461bcd02815260040180806020018281038252603a81526020018061057a603a913960400191505060405180910390fd5b3415806100d05750600254600160a060020a0316155b15156101105760405160e560020a62461bcd02815260040180806020018281038252603c815260200180610632603c913960400191505060405180910390fd5b60326006544303111561023057600254600160a060020a03161561017a5760025460035460408051600160a060020a039093168352602083019190915280517fbdd38a41c45be4d0dd65aca735f56ef2930cbdd228ccac5ea0c4a494363597c39281900390910190a15b600034116101bc5760405160e560020a62461bcd02815260040180806020018281038252602c8152602001806106b7602c913960400191505060405180910390fd5b6002805473ffffffffffffffffffffffffffffffffffffffff19163390811790915534600381905543600655600480548201905560408051928352602083019190915280517f603ca46559d3b44ba87ebc14f716536e86003349b9aea817ed1586ba2e0f299c9281900390910190a16103f7565b600254600160a060020a0316331461027c5760405160e560020a62461bcd02815260040180806020018281038252607e8152602001806105b4607e913960800191505060405180910390fd5b60065460010143116102c25760405160e560020a62461bcd02815260040180806020018281038252604981526020018061066e6049913960600191505060405180910390fd5b60065460009060329060010140061180156102e857506006546001808201408116914016145b806102fd5750600154600160a060020a031633145b1561038b5760035460408051338152602081019290925280517f6747c18256028de8cd2fa276e75d6b4193ac34c1b55fa8e71797ac132d32ad399281900390910190a1600380546005805482019055600091829055604051600290910291339183156108fc0291849190818181858888f19350505050158015610384573d6000803e3d6000fd5b50506103cf565b60035460408051338152602081019290925280517f1fb03e9599c87c5cac72b645424ca64f6bc62677569866c317244e3d0109b37f9281900390910190a160006003555b6002805473ffffffffffffffffffffffffffffffffffffffff19169055600060038190556006555b005b34801561040557600080fd5b5061040e6104b6565b60408051918252519081900360200190f35b34801561042c57600080fd5b5061040e6104c1565b34801561044157600080fd5b5061044a6104cd565b60408051600160a060020a039092168252519081900360200190f35b34801561047257600080fd5b5061040e6104dc565b34801561048757600080fd5b5061040e6104e2565b6103f7600480360360208110156104a657600080fd5b5035600160a060020a03166104e8565b600654603290400690565b60001960053031040190565b600254600160a060020a031690565b60035490565b60065490565b600054600160a060020a0316331461054a576040805160e560020a62461bcd02815260206004820181905260248201527f4f6e6c7920492063616e2073657420746865206e65772063726f757069657221604482015290519081900360640190fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905556fe546865207374616b6520697320746f20686967682c20636865636b206d61784265742829206265666f726520706c6163696e672061206265742e4f6e6c79207468652063757272656e7420706c617965722063616e20636f6c6c65637420746865207072697a652e205761697420666f72207468652063757272656e7420706c6179657220746f20636f6c6c6563742e20416674657220353020626c6f636b7320796f752063616e20706c6163652061206e657720626574466972737420626574207769746820612076616c75652c207468656e20636f6c6c65637420706f737369626c65207072697a6520776974686f75742e506c65617365207761697420756e74696c6c206174206c65617374206f6e65206f7468657220626c6f636b20686173206265656e206d696e65642c202b2d203137207365636f6e6473596f75206d757374207365742061206265742062792073656e64696e6720736f6d652076616c7565203e2030a165627a7a723058208b80dcc8584bfc032ef233a562c701330405684aa95f42693fce1d0736ac002f0029000000000000000000000000d2fbba627fe52f4c2149c224b5e77e3de1f2e25d",
  "constructorArguments": "000000000000000000000000d2fbba627fe52f4c2149c224b5e77e3de1f2e25d"
}