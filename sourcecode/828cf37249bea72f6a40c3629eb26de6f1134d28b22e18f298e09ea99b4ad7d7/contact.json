{
  "address": "0xf3988a1c4ed151cc0261e894fadbdcd3356fe688",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Bussiness",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-20\n*/\n\npragma solidity ^0.4.25;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract IERC721 {\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    function balanceOf(address owner) public view returns (uint256 balance);\n    function ownerOf(uint256 tokenId) public view returns (address owner);\n\n    function approve(address to, uint256 tokenId) public;\n    function getApproved(uint256 tokenId) public view returns (address operator);\n\n    function setApprovalForAll(address operator, bool _approved) public;\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\n\n    function transferFrom(address from, address to, uint256 tokenId) public;\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n}\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20BasicInterface {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    uint8 public decimals;\n}\ncontract Bussiness is Ownable {\n  IERC721 public erc721Address = IERC721(0x273f7f8e6489682df756151f5525576e322d51a3);\n  ERC20BasicInterface public usdtToken = ERC20BasicInterface(0xdAC17F958D2ee523a2206206994597C13D831ec7);\n  uint256 public ETHFee = 2;\n  uint256 public HBWALLETFee = 1;\n  uint256 public balance = address(this).balance;\n  constructor() public {}\n  struct Price {\n    address tokenOwner;\n    uint256 price;\n    uint256 fee;\n  }\n\n  mapping(uint256 => Price) public prices;\n  mapping(uint256 => Price) public usdtPrices;\n  function ownerOf(uint256 _tokenId) public view returns (address){\n      return erc721Address.ownerOf(_tokenId);\n  }\n  function setPrice(uint256 _tokenId, uint256 _ethPrice, uint256 _usdtPrice) public {\n      require(erc721Address.ownerOf(_tokenId) == msg.sender);\n      prices[_tokenId] = Price(msg.sender, _ethPrice, 0);\n      usdtPrices[_tokenId] = Price(msg.sender, _usdtPrice, 0);\n  }\n  function setPriceFeeEth(uint256 _tokenId, uint256 _ethPrice) public payable {\n      require(erc721Address.ownerOf(_tokenId) == msg.sender && prices[_tokenId].price != _ethPrice);\n      uint256 ethfee;\n      if(prices[_tokenId].price < _ethPrice) {\n          ethfee = (_ethPrice - prices[_tokenId].price) * ETHFee / 100;\n          require(msg.value == ethfee);\n          ethfee += prices[_tokenId].fee;\n      } else ethfee = _ethPrice * ETHFee / 100;\n      prices[_tokenId] = Price(msg.sender, _ethPrice, ethfee);\n  }\n  function removePrice(uint256 tokenId) public returns (uint256){\n      require(erc721Address.ownerOf(tokenId) == msg.sender);\n      if (prices[tokenId].fee > 0) msg.sender.transfer(prices[tokenId].fee);\n      resetPrice(tokenId);\n      return prices[tokenId].price;\n  }\n\n  function getPrice(uint256 tokenId) public returns (address, address, uint256, uint256){\n      address currentOwner = erc721Address.ownerOf(tokenId);\n      if(prices[tokenId].tokenOwner != currentOwner){\n           resetPrice(tokenId);\n       }\n      return (currentOwner, prices[tokenId].tokenOwner, prices[tokenId].price, usdtPrices[tokenId].price);\n\n  }\n\n  function setFee(uint256 _ethFee, uint256 _hbWalletFee) public view onlyOwner returns (uint256 ETHFee, uint256 HBWALLETFee){\n        require(_ethFee > 0 && _hbWalletFee > 0);\n        ETHFee = _ethFee;\n        HBWALLETFee = _hbWalletFee;\n        return (ETHFee, HBWALLETFee);\n    }\n  /**\n   * @dev Withdraw the amount of eth that is remaining in this contract.\n   * @param _address The address of EOA that can receive token from this contract.\n   */\n    function withdraw(address _address, uint256 amount) public onlyOwner {\n        require(_address != address(0) && amount > 0 && address(this).balance > amount);\n        _address.transfer(amount);\n    }\n\n  function buy(uint256 tokenId) public payable {\n    require(erc721Address.getApproved(tokenId) == address(this));\n    require(prices[tokenId].price > 0 && prices[tokenId].price == msg.value);\n    erc721Address.transferFrom(prices[tokenId].tokenOwner, msg.sender, tokenId);\n    prices[tokenId].tokenOwner.transfer(msg.value);\n    resetPrice(tokenId);\n  }\n  function buyByUsdt(uint256 tokenId) public {\n    require(usdtPrices[tokenId].price > 0 && erc721Address.getApproved(tokenId) == address(this));\n    require(usdtToken.transferFrom(msg.sender, usdtPrices[tokenId].tokenOwner, usdtPrices[tokenId].price));\n\n    erc721Address.transferFrom(usdtPrices[tokenId].tokenOwner, msg.sender, tokenId);\n    resetPrice(tokenId);\n\n  }\n  function resetPrice(uint256 tokenId) private {\n    prices[tokenId] = Price(address(0), 0, 0);\n    usdtPrices[tokenId] = Price(address(0), 0, 0);\n  }\n}",
  "bytecode": "608060405273273f7f8e6489682df756151f5525576e322d51a3600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073dac17f958d2ee523a2206206994597c13d831ec7600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260035560016004553073ffffffffffffffffffffffffffffffffffffffff16316005553480156100df57600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611c058061012f6000396000f3006080604052600436106100fc576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631029997b146101015780632352a8641461012c5780632619ba7f1461018357806352f7c988146101ae5780636352211e146102005780638da5cb5b1461026d57806395aaa5af146102c45780639c06561b146102f15780639cd0726a1461031b578063a98ad46c1461035c578063aa585d56146103b3578063b69ef8a8146103f4578063bc31c1c11461041f578063d96a094a1461049a578063e7572230146104ba578063f2fde38b14610568578063f3fef3a3146105ab578063f766297b146105f8575b600080fd5b34801561010d57600080fd5b50610116610673565b6040518082815260200191505060405180910390f35b34801561013857600080fd5b50610141610679565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561018f57600080fd5b5061019861069f565b6040518082815260200191505060405180910390f35b3480156101ba57600080fd5b506101e360048036038101908080359060200190929190803590602001909291905050506106a5565b604051808381526020018281526020019250505060405180910390f35b34801561020c57600080fd5b5061022b60048036038101908080359060200190929190505050610731565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561027957600080fd5b50610282610806565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102d057600080fd5b506102ef6004803603810190808035906020019092919050505061082b565b005b6103196004803603810190808035906020019092919080359060200190929190505050610c30565b005b34801561032757600080fd5b5061034660048036038101908080359060200190929190505050610e8c565b6040518082815260200191505060405180910390f35b34801561036857600080fd5b50610371611037565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103bf57600080fd5b506103f260048036038101908080359060200190929190803590602001909291908035906020019092919050505061105d565b005b34801561040057600080fd5b506104096112af565b6040518082815260200191505060405180910390f35b34801561042b57600080fd5b5061044a600480360381019080803590602001909291905050506112b5565b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390f35b6104b8600480360381019080803590602001909291905050506112ff565b005b3480156104c657600080fd5b506104e56004803603810190808035906020019092919050505061161a565b604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390f35b34801561057457600080fd5b506105a9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506117db565b005b3480156105b757600080fd5b506105f6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611930565b005b34801561060457600080fd5b5061062360048036038101908080359060200190929190505050611a40565b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390f35b60045481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561070357600080fd5b6000841180156107135750600083115b151561071e57600080fd5b8391508290508181915091509250929050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b1580156107c457600080fd5b505af11580156107d8573d6000803e3d6000fd5b505050506040513d60208110156107ee57600080fd5b81019080805190602001909291905050509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600760008381526020019081526020016000206001015411801561094757503073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663081812fc836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b1580156108f457600080fd5b505af1158015610908573d6000803e3d6000fd5b505050506040513d602081101561091e57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16145b151561095257600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd336007600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660076000868152602001908152602001600020600101546040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015610a9757600080fd5b505af1158015610aab573d6000803e3d6000fd5b505050506040513d6020811015610ac157600080fd5b81019080805190602001909291905050501515610add57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd6007600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b158015610c0c57600080fd5b505af1158015610c20573d6000803e3d6000fd5b50505050610c2d81611a8a565b50565b60003373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015610cda57600080fd5b505af1158015610cee573d6000803e3d6000fd5b505050506040513d6020811015610d0457600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16148015610d4e575081600660008581526020019081526020016000206001015414155b1515610d5957600080fd5b8160066000858152602001908152602001600020600101541015610dd05760646003546006600086815260200190815260200160002060010154840302811515610d9f57fe5b0490508034141515610db057600080fd5b600660008481526020019081526020016000206002015481019050610de4565b60646003548302811515610de057fe5b0490505b6060604051908101604052803373ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152506006600085815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155905050505050565b60003373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015610f3657600080fd5b505af1158015610f4a573d6000803e3d6000fd5b505050506040513d6020811015610f6057600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16141515610f9357600080fd5b600060066000848152602001908152602001600020600201541115611010573373ffffffffffffffffffffffffffffffffffffffff166108fc60066000858152602001908152602001600020600201549081150290604051600060405180830381858888f1935050505015801561100e573d6000803e3d6000fd5b505b61101982611a8a565b60066000838152602001908152602001600020600101549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561110557600080fd5b505af1158015611119573d6000803e3d6000fd5b505050506040513d602081101561112f57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614151561116257600080fd5b6060604051908101604052803373ffffffffffffffffffffffffffffffffffffffff16815260200183815260200160008152506006600085815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201559050506060604051908101604052803373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200160008152506007600085815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155905050505050565b60055481565b60066020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154905083565b3073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663081812fc836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b1580156113a757600080fd5b505af11580156113bb573d6000803e3d6000fd5b505050506040513d60208110156113d157600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614151561140457600080fd5b6000600660008381526020019081526020016000206001015411801561143f5750346006600083815260200190815260200160002060010154145b151561144a57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd6006600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561157957600080fd5b505af115801561158d573d6000803e3d6000fd5b505050506006600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f1935050505015801561160d573d6000803e3d6000fd5b5061161781611a8a565b50565b6000806000806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e876040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b1580156116b357600080fd5b505af11580156116c7573d6000803e3d6000fd5b505050506040513d60208110156116dd57600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff166006600088815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156117655761176486611a8a565b5b806006600088815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166006600089815260200190815260200160002060010154600760008a8152602001908152602001600020600101549450945094509450509193509193565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561183657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561187257600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561198b57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141580156119c85750600081115b80156119ea5750803073ffffffffffffffffffffffffffffffffffffffff1631115b15156119f557600080fd5b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611a3b573d6000803e3d6000fd5b505050565b60076020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154905083565b606060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152506006600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155905050606060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152506007600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155905050505600a165627a7a723058207926ac1911e44bad5cff66737118da5dfe22f522d6d89b7e09c470cb7a113a670029"
}