{
  "address": "0x6a4b41163688D4b397b47Ec293E6257e3536766f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BlockportDistributor",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-06\n*/\n\npragma solidity ^0.5.0;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * @title BlockportDistributor\n * @dev This contract can be used to distribute ether to multiple addresses\n * at once. \n */\ncontract BlockportDistributor {\n    using SafeMath for uint256;\n\n    event Distributed(address payable[] receivers, uint256 amount);\n\n    /**\n     * @dev Constructor\n     */\n    constructor () public {\n    }\n\n    /**\n     * @dev payable fallback\n     * dont accept pure ether: revert it.\n     */\n    function () external payable {\n        revert();\n    }\n\n    /**\n     * @dev distribute function, note that enough ether must be send (receivers.length * amount)\n     * @param receivers Addresses who should all receive amount.\n     * @param amount amount to distribute to each address, in wei.\n     * @return bool success\n     */\n    function distribute(address payable[] calldata receivers, uint256 amount) external payable returns (bool success) {\n        require(amount.mul(receivers.length) == msg.value);\n\n        for (uint256 i = 0; i < receivers.length; i++) {\n            receivers[i].transfer(amount);\n        }\n        emit Distributed(receivers, amount);\n        return true;\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50610279806100206000396000f3fe608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631826c11914610046575b600080fd5b6100c76004803603604081101561005c57600080fd5b810190808035906020019064010000000081111561007957600080fd5b82018360208201111561008b57600080fd5b803590602001918460208302840111640100000000831117156100ad57600080fd5b9091929391929390803590602001909291905050506100e1565b604051808215151515815260200191505060405180910390f35b6000346100fa858590508461020f90919063ffffffff16565b14151561010657600080fd5b60008090505b8484905081101561019557848482818110151561012557fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015610187573d6000803e3d6000fd5b50808060010191505061010c565b507f1c13dba3da1b8477d60661ae7cf496d243cf0c714ca646b70314b211ee9f3da284848460405180806020018381526020018281038252858582818152602001925060200280828437600081840152601f19601f82011690508083019250505094505050505060405180910390a1600190509392505050565b6000808314156102225760009050610247565b6000828402905082848281151561023557fe5b0414151561024257600080fd5b809150505b9291505056fea165627a7a7230582049366d581ff4edb3ef530cb67ab4d86b27ad38e41ad6ef39213ea2843fda4eea0029"
}