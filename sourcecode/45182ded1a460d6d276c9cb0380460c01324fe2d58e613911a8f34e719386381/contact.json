{
  "address": "0x222222de1914c2b303504e3b035cf46b11fcfc6c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "X2Bet_win",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-31\n*/\n\npragma solidity ^ 0.5.8;\n \n /**\n *  ╔═╗╔═╗╔═══╗╔══╗─╔═══╗╔════╗     ──────╔══╗╔═╗─╔╗\n *  ╚╗╚╝╔╝║╔═╗║║╔╗║─║╔══╝║╔╗╔╗║     ──────╚╣─╝║║╚╗║║\n *  ─╚╗╔╝─╚╝╔╝║║╚╝╚╗║╚══╗╚╝║║╚╝     ╔╗╔╗╔╗─║║─║╔╗╚╝║\n *  ─╔╝╚╗─╔═╝╔╝║╔═╗║║╔══╝──║║──     ║╚╝╚╝║─║║─║║╚╗║║\n *  ╔╝╔╗╚╗║║╚═╗║╚═╝║║╚══╗──║║──     ╚╗╔╗╔╝╔╣─╗║║─║║║\n *  ╚═╝╚═╝╚═══╝╚═══╝╚═══╝──╚╝──     ─╚╝╚╝─╚══╝╚╝─╚═╝\n *\n * \n * The contract of acceptance and withdrawal of funds in the first, fair and open gaming platform https://x2bet.win\n * Buying coins x2bet you agree that you have turned 18 years old and you realize the risk associated with gambling and slot machines\n * For the withdrawal of winnings from the system, a commission of 3% is charged.\n * The creator of the project is not responsible for the player’s financial losses when playing fair slot machines, all actions you do at your own risk.\n * The project team has the right to suspend withdrawal of funds, in case of detection of suspicious actions, until clarification of circumstances.\n */\n\ncontract X2Bet_win {\n    \n    using SafeMath\n    for uint;\n    \n    address public owner;\n    mapping(address => uint) public deposit;\n    mapping(address => uint) public withdrawal;\n    bool public status = true;\n    uint public min_payment = 0.05 ether;\n    uint public systemPercent = 0;\n    \n    constructor()public {\n        owner = msg.sender;\n    }\n    \n    event ByCoin(\n        address indexed from,\n        uint indexed block,\n        uint value,\n        uint user_id,\n        uint time\n    );\n    \n    event ReturnRoyalty(\n        address indexed from,\n        uint indexed block,\n        uint value, \n        uint withdrawal_id,\n        uint time\n    );\n    \n    modifier isNotContract(){\n        uint size;\n        address addr = msg.sender;\n        assembly { size := extcodesize(addr) }\n        require(size == 0 && tx.origin == msg.sender);\n        _;\n    }\n    \n    modifier contractIsOn(){\n        require(status);\n        _;\n    }\n    \n    modifier minPayment(){\n        require(msg.value >= min_payment);\n        _;\n    }\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    //Coin purchase method x2Bet.win\n    function byCoin(uint _user_id)contractIsOn isNotContract minPayment public payable{\n        deposit[msg.sender]+= msg.value;\n        emit ByCoin(msg.sender, block.number, msg.value, _user_id, now);\n        \n    }\n    \n    //Automatic withdrawal of winnings x2Bet.win\n    function pay_royaltie(address payable[] memory dests, uint256[] memory values, uint256[] memory ident) onlyOwner contractIsOn public returns(uint){\n        uint256 i = 0;\n        while (i < dests.length) {\n            uint transfer_value = values[i].sub(values[i].mul(3).div(100));\n            dests[i].transfer(transfer_value);\n            withdrawal[dests[i]]+=values[i];\n            emit ReturnRoyalty(dests[i], block.number, values[i], ident[i], now);\n            systemPercent += values[i].mul(3).div(100);\n            i += 1;\n        }\n        \n        return(i);\n    }\n    \n    function startProphylaxy()onlyOwner public {\n        status = false;\n    }\n    \n    function stopProphylaxy()onlyOwner public {\n        status = true;\n    }\n    \n    function() external payable {\n        \n    }\n    \n}\n\nlibrary SafeMath {\n\n    /**\n     * @dev Multiplies two numbers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopProphylaxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"systemPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user_id\",\"type\":\"uint256\"}],\"name\":\"byCoin\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startProphylaxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dests\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"},{\"name\":\"ident\",\"type\":\"uint256[]\"}],\"name\":\"pay_royaltie\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"min_payment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"user_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ByCoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"withdrawal_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ReturnRoyalty\",\"type\":\"event\"}]",
  "bytecode": "60806040526001600360006101000a81548160ff02191690831515021790555066b1a2bc2ec50000600455600060055534801561003b57600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610a748061008b6000396000f3fe6080604052600436106100915760003560e01c80639aaff037116100595780639aaff037146101c0578063e0d015e2146101ee578063f0450d5514610205578063f340fa0114610406578063fd6075941461046b57610091565b8063200d2ed21461009357806369b0551e146100c25780636bbe36bf146100d95780638da5cb5b14610104578063961310491461015b575b005b34801561009f57600080fd5b506100a8610496565b604051808215151515815260200191505060405180910390f35b3480156100ce57600080fd5b506100d76104a9565b005b3480156100e557600080fd5b506100ee61051f565b6040518082815260200191505060405180910390f35b34801561011057600080fd5b50610119610525565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561016757600080fd5b506101aa6004803603602081101561017e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061054a565b6040518082815260200191505060405180910390f35b6101ec600480360360208110156101d657600080fd5b8101908080359060200190929190505050610562565b005b3480156101fa57600080fd5b50610203610689565b005b34801561021157600080fd5b506103f06004803603606081101561022857600080fd5b810190808035906020019064010000000081111561024557600080fd5b82018360208201111561025757600080fd5b8035906020019184602083028401116401000000008311171561027957600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156102d957600080fd5b8201836020820111156102eb57600080fd5b8035906020019184602083028401116401000000008311171561030d57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561036d57600080fd5b82018360208201111561037f57600080fd5b803590602001918460208302840111640100000000831117156103a157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192905050506106ff565b6040518082815260200191505060405180910390f35b34801561041257600080fd5b506104556004803603602081101561042957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506109aa565b6040518082815260200191505060405180910390f35b34801561047757600080fd5b506104806109c2565b6040518082815260200191505060405180910390f35b600360009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461050257600080fd5b6001600360006101000a81548160ff021916908315150217905550565b60055481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915090505481565b600360009054906101000a900460ff1661057b57600080fd5b600080339050803b91506000821480156105c057503373ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16145b6105c957600080fd5b6004543410156105d857600080fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550433373ffffffffffffffffffffffffffffffffffffffff167fb4e398bd72835deff31a876fce7c996da3a425f31cf07991c7324349e83bd1ce34864260405180848152602001838152602001828152602001935050505060405180910390a3505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106e257600080fd5b6000600360006101000a81548160ff021916908315150217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461075a57600080fd5b600360009054906101000a900460ff1661077357600080fd5b60008090505b845181101561099f5760006107e36107c160646107b3600389878151811061079d57fe5b60200260200101516109c890919063ffffffff16565b610a0290919063ffffffff16565b8684815181106107cd57fe5b6020026020010151610a2890919063ffffffff16565b90508582815181106107f157fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561083e573d6000803e3d6000fd5b5084828151811061084b57fe5b60200260200101516002600088858151811061086357fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550438683815181106108bf57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff167f6338a5215340ceb21bf164f1587328f343ed5ce710f41ca1cf4d2e6fe313156f87858151811061090a57fe5b602002602001015187868151811061091e57fe5b60200260200101514260405180848152602001838152602001828152602001935050505060405180910390a36109846064610976600388868151811061096057fe5b60200260200101516109c890919063ffffffff16565b610a0290919063ffffffff16565b60056000828254019250508190555060018201915050610779565b809150509392505050565b60016020528060005260406000206000915090505481565b60045481565b6000808314156109db57600090506109fc565b60008284029050828482816109ec57fe5b04146109f757600080fd5b809150505b92915050565b6000808211610a1057600080fd5b6000828481610a1b57fe5b0490508091505092915050565b600082821115610a3757600080fd5b60008284039050809150509291505056fea165627a7a723058206baaf34d121390739b1afa9749f5797d26935b25c7abf723e25facccc2f1a5f30029"
}