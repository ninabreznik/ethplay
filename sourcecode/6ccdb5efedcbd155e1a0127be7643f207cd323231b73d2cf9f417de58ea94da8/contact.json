{
  "address": "0xd57d44ef81f6dd8c789cca982b24fa34a5553f5b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WizardPresale",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": true,
  "runs": "200",
  "evmVersion": "constantinople",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-18\n*/\n\n// File: openzeppelin-solidity/contracts/introspection/IERC165.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title IERC165\n * @dev https://eips.ethereum.org/EIPS/eip-165\n */\ninterface IERC165 {\n    /**\n     * @notice Query if a contract implements an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @dev Interface identification is specified in ERC-165. This function\n     * uses less than 30,000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\n\npragma solidity ^0.5.2;\n\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://eips.ethereum.org/EIPS/eip-721\n */\ncontract IERC721 is IERC165 {\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    function balanceOf(address owner) public view returns (uint256 balance);\n    function ownerOf(uint256 tokenId) public view returns (address owner);\n\n    function approve(address to, uint256 tokenId) public;\n    function getApproved(uint256 tokenId) public view returns (address operator);\n\n    function setApprovalForAll(address operator, bool _approved) public;\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\n\n    function transferFrom(address from, address to, uint256 tokenId) public;\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ncontract IERC721Receiver {\n    /**\n     * @notice Handle the receipt of an NFT\n     * @dev The ERC721 smart contract calls this function on the recipient\n     * after a `safeTransfer`. This function MUST return the function selector,\n     * otherwise the caller will revert the transaction. The selector to be\n     * returned can be obtained as `this.onERC721Received.selector`. This\n     * function MAY throw to revert and reject the transfer.\n     * Note: the ERC721 contract address is always the message sender.\n     * @param operator The address which called `safeTransferFrom` function\n     * @param from The address which previously owned the token\n     * @param tokenId The NFT identifier which is being transferred\n     * @param data Additional data with no specified format\n     * @return bytes4 `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\n    public returns (bytes4);\n}\n\n// File: openzeppelin-solidity/contracts/introspection/ERC165.sol\n\npragma solidity ^0.5.2;\n\n\n/**\n * @title ERC165\n * @author Matt Condon (@shrugs)\n * @dev Implements ERC165 using a lookup table.\n */\ncontract ERC165 is IERC165 {\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n    /*\n     * 0x01ffc9a7 ===\n     *     bytes4(keccak256('supportsInterface(bytes4)'))\n     */\n\n    /**\n     * @dev a mapping of interface id to whether or not it's supported\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    /**\n     * @dev A contract implementing SupportsInterfaceWithLookup\n     * implement ERC165 itself\n     */\n    constructor () internal {\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev implement supportsInterface(bytes4) using a lookup table\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev internal method for registering an interface\n     */\n    function _registerInterface(bytes4 interfaceId) internal {\n        require(interfaceId != 0xffffffff);\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/utils/Address.sol\n\npragma solidity ^0.5.2;\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n    /**\n     * Returns whether the target address is a contract\n     * @dev This function will return false if invoked during the constructor of a contract,\n     * as the code is not actually created until after the constructor finishes.\n     * @param account address of the account to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}\n\n// File: contracts/WizardPresaleNFT.sol\n\npragma solidity >=0.5.6 <0.6.0;\n\n\n\n\n\n\n/**\n * @title WizardPresaleNFT\n * @notice The basic ERC-721 functionality for storing the presale Wizard NFTs.\n *     Derived from: https://github.com/OpenZeppelin/openzeppelin-solidity/tree/v2.2.0\n */\ncontract WizardPresaleNFT is ERC165, IERC721 {\n\n    using Address for address;\n\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /// @notice Emitted when a wizard token is created.\n    event WizardSummoned(uint256 indexed tokenId, uint8 element, uint256 power);\n\n    /// @notice Emitted when a wizard change element. Should only happen once and for wizards\n    ///         that previously had the element undefined.\n    event WizardAlignmentAssigned(uint256 indexed tokenId, uint8 element);\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n    bytes4 internal constant _ERC721_RECEIVED = 0x150b7a02;\n\n    /// @dev The presale Wizard structure.\n    ///  Fits in one word\n    struct Wizard {\n        // NOTE: Changing the order or meaning of any of these fields requires an update\n        //   to the _createWizard() function which assumes a specific order for these fields.\n        uint8 affinity;\n        uint88 power;\n        address owner;\n    }\n\n    // Mapping from Wizard ID to Wizard struct\n    mapping (uint256 => Wizard) public _wizardsById;\n\n    // Mapping from token ID to approved address\n    mapping (uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to number of owned token\n    mapping (address => uint256) internal _ownedTokensCount;\n\n    // Mapping from owner to operator approvals\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n    /*\n     * 0x80ac58cd ===\n     *     bytes4(keccak256('balanceOf(address)')) ^\n     *     bytes4(keccak256('ownerOf(uint256)')) ^\n     *     bytes4(keccak256('approve(address,uint256)')) ^\n     *     bytes4(keccak256('getApproved(uint256)')) ^\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) ^\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n     */\n\n    constructor () public {\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721);\n    }\n\n    /**\n     * @dev Gets the balance of the specified address\n     * @param owner address to query the balance of\n     * @return uint256 representing the amount owned by the passed address\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _ownedTokensCount[owner];\n    }\n\n    /**\n     * @dev Gets the owner of the specified token ID\n     * @param tokenId uint256 ID of the token to query the owner of\n     * @return address currently marked as the owner of the given token ID\n     */\n    function ownerOf(uint256 tokenId) public view returns (address) {\n        address owner = _wizardsById[tokenId].owner;\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev Approves another address to transfer the given token ID\n     * The zero address indicates there is no approved address.\n     * There can only be one approved address per token at a given time.\n     * Can only be called by the token owner or an approved operator.\n     * @param to address to be approved for the given token ID\n     * @param tokenId uint256 ID of the token to be approved\n     */\n    function approve(address to, uint256 tokenId) public {\n        address owner = ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n        require(\n            msg.sender == owner || isApprovedForAll(owner, msg.sender),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _tokenApprovals[tokenId] = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Gets the approved address for a token ID, or zero if no address set\n     * Reverts if the token ID does not exist.\n     * @param tokenId uint256 ID of the token to query the approval of\n     * @return address currently approved for the given token ID\n     */\n    function getApproved(uint256 tokenId) public view returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Sets or unsets the approval of a given operator\n     * An operator is allowed to transfer all tokens of the sender on their behalf\n     * @param to operator address to set the approval\n     * @param approved representing the status of the approval to be set\n     */\n    function setApprovalForAll(address to, bool approved) public {\n        require(to != msg.sender, \"ERC721: approve to caller\");\n        _operatorApprovals[msg.sender][to] = approved;\n        emit ApprovalForAll(msg.sender, to, approved);\n    }\n\n    /**\n     * @dev Tells whether an operator is approved by a given owner\n     * @param owner owner address which you want to query the approval of\n     * @param operator operator address which you want to query the approval of\n     * @return bool whether the given operator is approved by the given owner\n     */\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev Transfers the ownership of a given token ID to another address\n     * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n     * Requires the msg.sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public {\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transferFrom(from, to, tokenId);\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * Requires the msg.sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * Requires the msg.sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes data to send along with a safe transfer check\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\n        transferFrom(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether the specified token exists\n     * @param tokenId uint256 ID of the token to query the existence of\n     * @return bool whether the token exists\n     */\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        address owner = _wizardsById[tokenId].owner;\n        return owner != address(0);\n    }\n\n    /**\n     * @dev Returns whether the given spender can transfer a given token ID\n     * @param spender address of the spender to query\n     * @param tokenId uint256 ID of the token to be transferred\n     * @return bool whether the msg.sender is approved for the given token ID,\n     * is an operator of the owner, or is the owner of the token\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Internal function to burn a specific token\n     * Reverts if the token does not exist\n     * Deprecated, use _burn(uint256) instead.\n     * @param owner owner of the token to burn\n     * @param tokenId uint256 ID of the token being burned\n     */\n    function _burn(address owner, uint256 tokenId) internal {\n        require(ownerOf(tokenId) == owner, \"ERC721: burn of token that is not own\");\n\n        _clearApproval(tokenId);\n\n        _ownedTokensCount[owner]--;\n        // delete the entire object to recover the most gas\n        delete _wizardsById[tokenId];\n\n        // required for ERC721 compatibility\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Internal function to burn a specific token\n     * Reverts if the token does not exist\n     * @param tokenId uint256 ID of the token being burned\n     */\n    function _burn(uint256 tokenId) internal {\n        _burn(ownerOf(tokenId), tokenId);\n    }\n\n    /**\n     * @dev Internal function to transfer ownership of a given token ID to another address.\n     * As opposed to transferFrom, this imposes no restrictions on msg.sender.\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\n        require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _clearApproval(tokenId);\n\n        _ownedTokensCount[from]--;\n        _ownedTokensCount[to]++;\n\n        _wizardsById[tokenId].owner = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke `onERC721Received` on a target address\n     * The call is not executed if the target address is not a contract\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n        internal returns (bool)\n    {\n        if (!to.isContract()) {\n            return true;\n        }\n\n        bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data);\n        return (retval == _ERC721_RECEIVED);\n    }\n\n    /**\n     * @dev Private function to clear current approval of a given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function _clearApproval(uint256 tokenId) private {\n        if (_tokenApprovals[tokenId] != address(0)) {\n            _tokenApprovals[tokenId] = address(0);\n        }\n    }\n}\n\n// File: contracts/WizardPresaleInterface.sol\n\npragma solidity >=0.5.6 <0.6.0;\n\n\n/// @title WizardPresaleInterface\n/// @notice This interface represents the single method that the final tournament and master Wizard contracts\n///         will use to import the presale wizards when those contracts have been finalized a released on\n///         mainnet. Once all presale Wizards have been absorbed, this temporary pre-sale contract can be\n///         destroyed.\ncontract WizardPresaleInterface {\n\n    // See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md on how\n    // to calculate this\n    bytes4 public constant _INTERFACE_ID_WIZARDPRESALE = 0x4df71efb;\n\n    /// @notice This function is used to bring a presale Wizard into the final contracts. It can\n    ///         ONLY be called by the official gatekeeper contract (as set by the Owner of the presale\n    ///         contract). It does a number of things:\n    ///            1. Check that the presale Wizard exists, and has not already been absorbed\n    ///            2. Transfer the Eth used to create the presale Wizard to the caller\n    ///            3. Mark the Wizard as having been absorbed, reclaiming the storage used by the presale info\n    ///            4. Return the Wizard information (its owner, minting price, and elemental alignment)\n    /// @param id the id of the presale Wizard to be absorbed\n    function absorbWizard(uint256 id) external returns (address owner, uint256 power, uint8 affinity);\n\n    /// @notice A convenience function that allows multiple Wizards to be moved to the final contracts\n    ///         simultaneously, works the same as the previous function, but in a batch.\n    /// @param ids An array of ids indicating which presale Wizards are to be absorbed\n    function absorbWizardMulti(uint256[] calldata ids) external\n        returns (address[] memory owners, uint256[] memory powers, uint8[] memory affinities);\n\n    function powerToCost(uint256 power) public pure returns (uint256 cost);\n    function costToPower(uint256 cost) public pure returns (uint256 power);\n}\n\n// File: contracts/AddressPayable.sol\n\npragma solidity >=0.5.6 <0.6.0;\n\n/**\n * Utility library of inline functions on address payables\n * Modified from original by OpenZeppelin\n */\ncontract AddressPayable {\n    /**\n     * Returns whether the target address is a contract\n     * @dev This function will return false if invoked during the constructor of a contract,\n     * as the code is not actually created until after the constructor finishes.\n     * @param account address of the account to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address payable account) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) } // solium-disable-line security/no-inline-assembly\n        return size > 0;\n    }\n}\n\n// File: contracts/WizardConstants.sol\n\npragma solidity >=0.5.6 <0.6.0;\n\n/// @title The master organization behind wizardry activity, where Wiz come from.\ncontract WizardConstants {\n    uint8 internal constant ELEMENT_NOTSET = 0;\n    // need to decide what neutral is because of price difference\n    uint8 internal constant ELEMENT_NEUTRAL = 1;\n    // no sense in defining these here as they are probably not fixed,\n    // all we need to know is that these are not neutral\n    uint8 internal constant ELEMENT_FIRE = 2;\n    uint8 internal constant ELEMENT_WIND = 3;\n    uint8 internal constant ELEMENT_WATER = 4;\n    uint8 internal constant MAX_ELEMENT = ELEMENT_WATER;\n}\n\n// File: contracts/WizardPresale.sol\n\npragma solidity >=0.5.6 <0.6.0;\n\n\n\n\n\n/// @title WizardPresale - Making Cheeze Wizards available for sale!\n/// @notice Allows for the creation and sale of Cheeze Wizards before the final tournament\n///         contract has been reviewed and released on mainnet. There are three main types\n///         of Wizards that are managed by this contract:\n///          - Neutral Wizards: Available in unlimited quantities and all have the same\n///             innate power. Don't have a natural affinity for any particular elemental\n///             spell... or the corresponding weakness!\n///          - Elemental Wizards: Available in unlimited quantities, but with a steadily increasing\n///             power; the power of an Elemental Wizard is always _slightly_ higher than the power\n///             of the previously created Elemental Wizard. Each Elemental Wizard has an Elemental\n///             Affinity that gives it a power multiplier when using the associated spell, but also\n///             gives it a weakness for the opposing element.\n///          - Exclusive Wizards: Only available in VERY limited quantities, with a hard cap set at\n///             contract creation time. Exclusive Wizards can ONLY be created by the Guild Master\n///             address (the address that created this contract), and are assigned the first N\n///             Wizard IDs, starting with 1 (where N is the hard cap on Exclusive Wizards). The first\n///             non-exclusive Wizard is assigned the ID N+1. Exclusive Wizards have no starting\n///             affinity, and their owners much choose an affinity before they can be entered into a\n///             Battle. The affinity CAN NOT CHANGE once it has been selected. The power of Exclusive\n///             Wizards is not set by the Guild Master and is not required to follow any pattern (although\n///             it can't be lower than the power of Neutral Wizards).\ncontract WizardPresale is AddressPayable, WizardPresaleNFT, WizardPresaleInterface, WizardConstants {\n\n    /// @dev The ratio between the cost of a Wizard (in wei) and the power of the wizard.\n    ///      power = cost / POWER_SCALE\n    ///      cost = power * POWER_SCALE\n    uint256 private constant POWER_SCALE = 1000;\n\n    /// @dev The unit conversion for tenths of basis points\n    uint256 private constant TENTH_BASIS_POINTS = 100000;\n\n    /// @dev The address used to create this smart contract, has permission to conjure Exclusive Wizards,\n    ///      set the gatekeeper address, and destroy this contract once the sale is finished and all Presale\n    ///      Wizards have been absorbed into the main contracts.\n    address payable public guildmaster;\n\n    /// @dev The start block and duration (in blocks) of the sale.\n    ///      ACT NOW! For a limited time only!\n    uint256 public saleStartBlock;\n    uint256 public saleDuration;\n\n    /// @dev The cost of Neutral Wizards (in wei).\n    uint256 public neutralWizardCost;\n\n    /// @dev The cost of the _next_ Elemental Wizard (in wei); increases with each Elemental Wizard sold\n    uint256 public elementalWizardCost;\n\n    /// @dev The increment ratio in price between sequential Elemental Wizards, multiplied by 100k for\n    ///      greater granularity (0 == 0% increase, 100000 == 100% increase, 100 = 0.1% increase, etc.)\n    ///      NOTE: This is NOT percentage points, or basis points. It's tenths of a basis point.\n    uint256 public elementalWizardIncrement;\n\n    /// @dev The hard cap on how many Exclusive Wizards can be created\n    uint256 public maxExclusives;\n\n    /// @dev The ID number of the next Wizard to be created (Neutral or Elemental)\n    uint256 public nextWizardId;\n\n    /// @dev The address of the Gatekeeper for the tournament, initially set to address(0).\n    ///      To be set by the Guild Master when the final Tournament Contract is deployed on mainnet\n    address payable public gatekeeper;\n\n    /// @notice Emitted whenever the start of the sale changes.\n    event StartBlockChanged(uint256 oldStartBlock, uint256 newStartBlock);\n\n    /// @param startingCost The minimum cost of a Wizard, used as the price for all Neutral Wizards, and the\n    ///        cost of the first Elemental Wizard. Also used as a minimum value for Exclusive Wizards.\n    /// @param costIncremement The rate (in tenths of a basis point) at which the price of Elemental Wizards increases\n    /// @param exclusiveCount The hard cap on Exclusive Wizards, also dictates the ID of the first non-Exclusive\n    /// @param startBlock The starting block of the presale.\n    /// @param duration The duration of the presale.  Not changeable!\n    constructor(uint128 startingCost,\n            uint16 costIncremement,\n            uint256 exclusiveCount,\n            uint128 startBlock,\n            uint128 duration) public\n    {\n        require(startBlock > block.number, \"start must be greater than current block\");\n\n        guildmaster = msg.sender;\n        saleStartBlock = startBlock;\n        saleDuration = duration;\n        neutralWizardCost = startingCost;\n        elementalWizardCost = startingCost;\n        elementalWizardIncrement = costIncremement;\n        maxExclusives = exclusiveCount;\n        nextWizardId = exclusiveCount + 1;\n\n        _registerInterface(_INTERFACE_ID_WIZARDPRESALE);\n    }\n\n    /// @dev Throws if called by any account other than the gatekeeper.\n    modifier onlyGatekeeper() {\n        require(msg.sender == gatekeeper, \"Must be gatekeeper\");\n        _;\n    }\n\n    /// @dev Throws if called by any account other than the guildmaster.\n    modifier onlyGuildmaster() {\n        require(msg.sender == guildmaster, \"Must be guildmaster\");\n        _;\n    }\n\n    /// @dev Checks to see that the current block number is within the range\n    ///      [saleStartBlock, saleStartBlock + saleDuraction) indicating that the sale\n    ///      is currently active\n    modifier onlyDuringSale() {\n        // The addtion of start and duration can't overflow since they can only be set from\n        // 128-bit arguments.\n        require(block.number >= saleStartBlock, \"Sale not open yet\");\n        require(block.number < saleStartBlock + saleDuration, \"Sale closed\");\n        _;\n    }\n\n    /// @dev Sets the address of the Gatekeeper contract once the final Tournament contract is live.\n    ///      Can only be set once.\n    /// @param gc The gatekeeper address to set\n    function setGatekeeper(address payable gc) external onlyGuildmaster {\n        require(gatekeeper == address(0) && gc != address(0), \"Can only set once and must not be zero\");\n        gatekeeper = gc;\n    }\n\n    /// @dev Updates the start block of the sale. The sale can only be postponed; it can't be made earlier.\n    /// @param newStart the new start block.\n    function postponeSale(uint128 newStart) external onlyGuildmaster {\n        require(block.number < saleStartBlock, \"Sale start time only adjustable before previous start time\");\n        require(newStart > saleStartBlock, \"New start time must be later than previous start time\");\n\n        emit StartBlockChanged(saleStartBlock, newStart);\n\n        saleStartBlock = newStart;\n    }\n\n    /// @dev Returns true iff the sale is currently active\n    function isDuringSale() external view returns (bool) {\n        return (block.number >= saleStartBlock && block.number < saleStartBlock + saleDuration);\n    }\n\n    /// @dev Convenience method for getting a presale wizard's data\n    /// @param id The wizard id\n    function getWizard(uint256 id) public view returns (address owner, uint88 power, uint8 affinity) {\n        Wizard memory wizard = _wizardsById[id];\n        (owner, power, affinity) = (wizard.owner, wizard.power, wizard.affinity);\n        require(wizard.owner != address(0), \"Wizard does not exist\");\n    }\n\n    /// @param cost The price of the wizard in wei\n    /// @return The power of the wizard (left as uint256)\n    function costToPower(uint256 cost) public pure returns (uint256 power) {\n        return cost / POWER_SCALE;\n    }\n\n    /// @param power The power of the wizard\n    /// @return The cost of the wizard in wei\n    function powerToCost(uint256 power) public pure returns (uint256 cost) {\n        return power * POWER_SCALE;\n    }\n\n    /// @notice This function is used to bring a presale Wizard into the final contracts. It can\n    ///         ONLY be called by the official gatekeeper contract (as set by the Owner of the presale\n    ///         contract). It does a number of things:\n    ///            1. Check that the presale Wizard exists, and has not already been absorbed\n    ///            2. Transfer the Eth used to create the presale Wizard to the caller\n    ///            3. Mark the Wizard as having been absorbed, reclaiming the storage used by the presale info\n    ///            4. Return the Wizard information (its owner, minting price, and elemental alignment)\n    /// @param id the id of the presale Wizard to be absorbed\n    function absorbWizard(uint256 id) external onlyGatekeeper returns (address owner, uint256 power, uint8 affinity) {\n        (owner, power, affinity) = getWizard(id);\n\n        // Free up the storage used by this wizard\n        _burn(owner, id);\n\n        // send the price paid to the gatekeeper to be used in the tournament prize pool\n        msg.sender.transfer(powerToCost(power));\n    }\n\n    /// @notice A convenience function that allows multiple Wizards to be moved to the final contracts\n    ///         simultaneously, works the same as the previous function, but in a batch.\n    /// @param ids An array of ids indicating which presale Wizards are to be absorbed\n    function absorbWizardMulti(uint256[] calldata ids) external onlyGatekeeper\n            returns (address[] memory owners, uint256[] memory powers, uint8[] memory affinities)\n    {\n        // allocate arrays\n        owners = new address[](ids.length);\n        powers = new uint256[](ids.length);\n        affinities = new uint8[](ids.length);\n\n        // The total eth to send (sent in a batch to save gas)\n        uint256 totalTransfer;\n\n        // Put the data for each Wizard into the returned arrays\n        for (uint256 i = 0; i < ids.length; i++) {\n            (owners[i], powers[i], affinities[i]) = getWizard(ids[i]);\n\n            // Free up the storage used by this wizard\n            _burn(owners[i], ids[i]);\n\n            // add the amount to transfer\n            totalTransfer += powerToCost(powers[i]);\n        }\n\n        // Send all the eth together\n        msg.sender.transfer(totalTransfer);\n    }\n\n    /// @dev Internal function to create a new Wizard; reverts if the Wizard ID is taken.\n    ///      NOTE: This function heavily depends on the internal format of the Wizard struct\n    ///      and should always be reassessed if anything about that structure changes.\n    /// @param tokenId ID of the new Wizard\n    /// @param owner The address that will own the newly conjured Wizard\n    /// @param power The power level associated with the new Wizard\n    /// @param affinity The elemental affinity of the new Wizard\n    function _createWizard(uint256 tokenId, address owner, uint256 power, uint8 affinity) internal {\n        require(!_exists(tokenId), \"Can't reuse Wizard ID\");\n        require(owner != address(0), \"Owner address must exist\");\n        require(power > 0, \"Wizard power must be non-zero\");\n        require(power < (1<<88), \"Wizard power must fit in 88 bits of storage.\");\n        require(affinity <= MAX_ELEMENT, \"Invalid elemental affinity\");\n\n        // Create the Wizard!\n        _wizardsById[tokenId] = Wizard(affinity, uint88(power), owner);\n        _ownedTokensCount[owner]++;\n\n        // Tell the world!\n        emit Transfer(address(0), owner, tokenId);\n        emit WizardSummoned(tokenId, affinity, power);\n    }\n\n    /// @dev A private utility function that refunds any overpayment to the sender; smart\n    ///      enough to only send the excess if the amount we are returning is more than the\n    ///      cost of sending it!\n    /// @dev Warning! This does not check for underflows (msg.value < actualPrice) - so\n    ///      be sure to call this with correct values!\n    /// @param actualPrice the actual price owed\n    function _transferRefund(uint256 actualPrice) private {\n        uint256 refund = msg.value - actualPrice;\n\n        // Make sure the amount we're trying to refund is less than the actual cost of sending it!\n        // See https://github.com/ethereum/wiki/wiki/Subtleties for magic values costs.  We can\n        // safley ignore the 25000 additional gas cost for new accounts, as msg.sender is\n        // guarunteed to exist at this point!\n        if (refund > (tx.gasprice * (9000+700))) {\n            msg.sender.transfer(refund);\n        }\n    }\n\n    /// @notice Conjures an Exclusive Wizard with a specific element and ID. This can only be done by\n    ///         the Guildmaster, who still has to pay for the power imbued in that Wizard! The power level\n    ///         is inferred by the amount of Eth sent. MUST ONLY BE USED FOR EXTERNAL OWNER ADDRESSES.\n    /// @param id The ID of the new Wizard; must be in the Exclusive range, and can't already be allocated\n    /// @param owner The address which will own the new Wizard\n    /// @param affinity The elemental affinity of the new Wizard, can be ELEMENT_NOTSET for Exclusives!\n    function conjureExclusiveWizard(uint256 id, address owner, uint8 affinity) public payable onlyGuildmaster {\n        require(id > 0 && id <= maxExclusives, \"Invalid exclusive ID\");\n        _createWizard(id, owner, costToPower(msg.value), affinity);\n    }\n\n    /// @notice Same as conjureExclusiveWizard(), but reverts if the owner address is a smart\n    ///         contract that is not ERC-721 aware.\n    /// @param id The ID of the new Wizard; must be in the Exclusive range, and can't already be allocated\n    /// @param owner The address which will own the new Wizard\n    /// @param affinity The elemental affinity of the new Wizard, can be ELEMENT_NOTSET for Exclusives!\n    function safeConjureExclusiveWizard(uint256 id, address owner, uint8 affinity) external payable onlyGuildmaster {\n        conjureExclusiveWizard(id, owner, affinity);\n        require(_checkOnERC721Received(address(0), owner, id, \"\"), \"must support erc721\");\n    }\n\n    /// @notice Allows for the batch creation of Exclusive Wizards. Same rules apply as above, but the\n    ///         powers are specified instead of being inferred. The message still needs to have enough\n    ///         value to pay for all the newly conjured Wizards!  MUST ONLY BE USED FOR EXTERNAL OWNER ADDRESSES.\n    /// @param ids An array of IDs of the new Wizards\n    /// @param owners An array of owners\n    /// @param powers An array of power levels\n    /// @param affinities An array of elemental affinities\n    function conjureExclusiveWizardMulti(\n        uint256[] calldata ids,\n        address[] calldata owners,\n        uint256[] calldata powers,\n        uint8[] calldata affinities) external payable onlyGuildmaster\n    {\n        // Ensure the arrays are all of the same length\n        require(\n            ids.length == owners.length &&\n            owners.length == powers.length &&\n            owners.length == affinities.length,\n            \"Must have equal array lengths\"\n        );\n\n        uint256 totalPower = 0;\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            require(ids[i] > 0 && ids[i] <= maxExclusives, \"Invalid exclusive ID\");\n            require(affinities[i] <= MAX_ELEMENT, \"Must choose a valid elemental affinity\");\n\n            _createWizard(ids[i], owners[i], powers[i], affinities[i]);\n\n            totalPower += powers[i];\n        }\n\n        // Ensure that the message includes enough eth to cover the total power of all Wizards\n        // If this check fails, all the Wizards that we just created will be deleted, and we'll just\n        // have wasted a bunch of gas. Don't be dumb, Guildmaster!\n        // If the guildMaster has managed to overflow totalPower, well done!\n        require(powerToCost(totalPower) <= msg.value, \"Must pay for power in all Wizards\");\n\n        // We don't return \"change\" if the caller overpays, because the caller is the Guildmaster and\n        // shouldn't be dumb like that. How many times do I have to say it? Don't be dumb, Guildmaster!\n    }\n\n    /// @notice Sets the affinity for a Wizard that doesn't already have its elemental affinity chosen.\n    ///         Only usable for Exclusive Wizards (all non-Exclusives must have their affinity chosen when\n    ///         conjured.) Even Exclusives can't change their affinity once it's been chosen.\n    /// @param wizardId The id of the wizard\n    /// @param newAffinity The new affinity of the wizard\n    function setAffinity(uint256 wizardId, uint8 newAffinity) external {\n        require(newAffinity > ELEMENT_NOTSET && newAffinity <= MAX_ELEMENT, \"Must choose a valid affinity\");\n        (address owner, , uint8 affinity) = getWizard(wizardId);\n        require(msg.sender == owner, \"Affinity can only be set by the owner\");\n        require(affinity == ELEMENT_NOTSET, \"Affinity can only be chosen once\");\n\n        _wizardsById[wizardId].affinity = newAffinity;\n\n        // Tell the world this wizards now has an affinity!\n        emit WizardAlignmentAssigned(wizardId, newAffinity);\n    }\n\n    /// @dev An internal convenience function used by conjureWizard and conjureWizardMulti that takes care\n    ///      of the work that is shared between them.\n    ///      The use of tempElementalWizardCost and updatedElementalWizardCost deserves some explanation here.\n    ///      Using elementalWizardCost directly would be very expensive in the case where this function is\n    ///      called repeatedly by conjureWizardMulti. Buying an elemental wizard would update the elementalWizardCost\n    ///      each time through this function _which would cost 5000 gas each time_. Of course, we don't actually\n    ///      need to store the new value each time, only once at the very end. So we go through this very annoying\n    ///      process of passing the elementalWizardCost in as an argument (tempElementalWizardCost) and returning\n    ///      the updated value as a return value (updatedElementalWizardCost). It's enough to make one want\n    ///      tear one's hair out. But! What's done is done, and hopefully SOMEONE will realize how much trouble\n    ///      we went to to save them _just that little bit_ of gas cost when they decided to buy a schwack of\n    ///      Wizards.\n    function _conjureWizard(\n        uint256 wizardId,\n        address owner,\n        uint8 affinity,\n        uint256 tempElementalWizardCost) private\n        returns (uint256 wizardCost, uint256 updatedElementalWizardCost)\n    {\n        // Check for a valid elemental affinity\n        require(affinity > ELEMENT_NOTSET && affinity <= MAX_ELEMENT, \"Non-exclusive Wizards need a real affinity\");\n\n        updatedElementalWizardCost = tempElementalWizardCost;\n\n        // Determine the price\n        if (affinity == ELEMENT_NEUTRAL) {\n            wizardCost = neutralWizardCost;\n        } else {\n            wizardCost = updatedElementalWizardCost;\n\n            // Update the elemental Wizard cost\n            // NOTE: This math can't overflow because the total Ether supply in wei is well less than\n            //       2^128. Multiplying a price in wei by some number <100k can't possibly overflow 256 bits.\n            updatedElementalWizardCost += (updatedElementalWizardCost * elementalWizardIncrement) / TENTH_BASIS_POINTS;\n        }\n\n        // Bring the new Wizard into existence!\n        _createWizard(wizardId, owner, costToPower(wizardCost), affinity);\n    }\n\n    /// @notice This is it folks, the main event! The way for the world to get new Wizards! Does\n    ///         pretty much what it says on the box: Let's you conjure a new Wizard with a specified\n    ///         elemental affinity. The call must include enough eth to cover the cost of the new\n    ///         Wizard, and any excess is refunded. The power of the Wizard is derived from\n    ///         the sale price. YOU CAN NOT PAY EXTRA TO GET MORE POWER. (But you always have the option\n    ///         to conjure some more Wizards!) Returns the ID of the newly conjured Wizard.\n    /// @param affinity The elemental affinity you want for your wizard.\n    function conjureWizard(uint8 affinity) external payable onlyDuringSale returns (uint256 wizardId) {\n\n        wizardId = nextWizardId;\n        nextWizardId++;\n\n        uint256 wizardCost;\n\n        (wizardCost, elementalWizardCost) = _conjureWizard(wizardId, msg.sender, affinity, elementalWizardCost);\n\n        require(msg.value >= wizardCost, \"Not enough eth to pay\");\n\n         // Refund any overpayment\n        _transferRefund(wizardCost);\n\n        // Ensure the Wizard is being assigned to an ERC-721 aware address (either an external address,\n        // or a smart contract that implements onERC721Reived())\n        require(_checkOnERC721Received(address(0), msg.sender, wizardId, \"\"), \"must support erc721\");\n    }\n\n    /// @notice A convenience function that allows you to get a whole bunch of Wizards at once! You know how\n    ///         there's \"a pride of lions\", \"a murder of crows\", and \"a parliament of owls\"? Well, with this\n    ///         here function you can conjure yourself \"a stench of Cheeze Wizards\"!\n    /// @dev This function is careful to bundle all of the external calls (the refund and onERC721Received)\n    ///         at the end of the function to limit the risk of reentrancy attacks.\n    /// @param affinities the elements of the wizards\n    function conjureWizardMulti(uint8[] calldata affinities) external payable onlyDuringSale\n            returns (uint256[] memory wizardIds)\n    {\n        // allocate result array\n        wizardIds = new uint256[](affinities.length);\n\n        uint256 totalCost = 0;\n\n        // We take these two storage variables, and turn them into local variables for the course\n        // of this loop to save about 10k gas per wizard. It's kind of ugly, but that's a lot of\n        // gas! Won't somebody please think of the children!!\n        uint256 tempWizardId = nextWizardId;\n        uint256 tempElementalWizardCost = elementalWizardCost;\n\n        for (uint256 i = 0; i < affinities.length; i++) {\n            wizardIds[i] = tempWizardId;\n            tempWizardId++;\n\n            uint256 wizardCost;\n\n            (wizardCost, tempElementalWizardCost) = _conjureWizard(\n                wizardIds[i],\n                msg.sender,\n                affinities[i],\n                tempElementalWizardCost);\n\n            totalCost += wizardCost;\n        }\n\n        elementalWizardCost = tempElementalWizardCost;\n        nextWizardId = tempWizardId;\n\n        // check to see if there's enough eth\n        require(msg.value >= totalCost, \"Not enough eth to pay\");\n\n        // Ensure the Wizard is being assigned to an ERC-721 aware address (either an external address,\n        // or a smart contract that implements onERC721Received()). We unwind the logic of _checkOnERC721Received\n        // because called address.isContract() every time through this loop can get reasonably expensive. We do\n        // need to call this function for each token created, however, because it's allowed for an ERC-721 receiving\n        // contract to reject the transfer based on the properties of the token.\n        if (isContract(msg.sender)) {\n            for (uint256 i = 0; i < wizardIds.length; i++) {\n                bytes4 retval = IERC721Receiver(msg.sender).onERC721Received(msg.sender, address(0), wizardIds[i], \"\");\n                require(retval == _ERC721_RECEIVED, \"Contract owner didn't accept ERC-721 transfer\");\n            }\n        }\n\n        // Refund any excess funds\n        _transferRefund(totalCost);\n    }\n\n    /// @dev Transfers the current balance to the owner and terminates the contract.\n    function destroy() external onlyGuildmaster {\n        selfdestruct(guildmaster);\n    }\n}",
  "bytecode": "60806040523480156200001157600080fd5b5060405160a08062002f0f833981018060405260a08110156200003357600080fd5b5080516020808301516040840151606085015160809095015193949193909262000083907f01ffc9a700000000000000000000000000000000000000000000000000000000906200017f811b901c565b6200009b6380ac58cd60e01b6200017f60201b60201c565b43826001600160801b031611620000fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602881526020018062002ee76028913960400191505060405180910390fd5b600580546001600160a01b031916331790556001600160801b038083166006558181166007558516600881905560095561ffff8416600a55600b83905560018301600c55620001747f4df71efb000000000000000000000000000000000000000000000000000000006200017f602090811b901c565b5050505050620001ec565b7fffffffff000000000000000000000000000000000000000000000000000000008082161415620001af57600080fd5b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152602081905260409020805460ff19166001179055565b612ceb80620001fc6000396000f3fe60806040526004361061020f5760003560e01c806383197ef011610118578063ce6991fd116100a0578063ec8cd3ce1161006f578063ec8cd3ce146109f5578063f1cb560614610a0a578063fac8eafc14610a3f578063fbb9795614610a9c578063ffc0b9ad14610acf5761020f565b8063ce6991fd146108bd578063dc9f1cdd1461097b578063e5a604bf14610990578063e985e9c5146109ba5761020f565b80639b025025116100e75780639b02502514610732578063a22cb46514610747578063a59c9c2714610782578063a7847c3a14610797578063b88d4fde146107ec5761020f565b806383197ef0146106a35780638be7310c146106b85780638ef0da6f146106cd57806398d7a414146106ff5761020f565b806348b92c201161019b57806363f3ce311161016a57806363f3ce31146105b45780636de9b6d81461061157806370a0823114610626578063795cfa9b146106595780637f7ca38e1461068e5761020f565b806348b92c201461050d578063565ca6dd14610537578063573f322f1461056a5780636352211e1461058a5761020f565b806323b872dd116101e257806323b872dd146103045780632447aee9146103475780633711d9fb1461035c57806342842e0e14610371578063476c4a5e146103b45761020f565b806301ffc9a714610214578063081812fc1461025c578063095ea7b3146102a257806320027275146102dd575b600080fd5b34801561022057600080fd5b506102486004803603602081101561023757600080fd5b50356001600160e01b031916610c2d565b604080519115158252519081900360200190f35b34801561026857600080fd5b506102866004803603602081101561027f57600080fd5b5035610c4c565b604080516001600160a01b039092168252519081900360200190f35b3480156102ae57600080fd5b506102db600480360360408110156102c557600080fd5b506001600160a01b038135169060200135610cb1565b005b3480156102e957600080fd5b506102f2610dc8565b60408051918252519081900360200190f35b34801561031057600080fd5b506102db6004803603606081101561032757600080fd5b506001600160a01b03813581169160208101359091169060400135610dce565b34801561035357600080fd5b506102f2610e26565b34801561036857600080fd5b506102f2610e2c565b34801561037d57600080fd5b506102db6004803603606081101561039457600080fd5b506001600160a01b03813581169160208101359091169060400135610e32565b3480156103c057600080fd5b5061042f600480360360208110156103d757600080fd5b810190602081018135600160201b8111156103f157600080fd5b82018360208201111561040357600080fd5b803590602001918460208302840111600160201b8311171561042457600080fd5b509092509050610e4d565b60405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b8381101561047757818101518382015260200161045f565b50505050905001848103835286818151815260200191508051906020019060200280838360005b838110156104b657818101518382015260200161049e565b50505050905001848103825285818151815260200191508051906020019060200280838360005b838110156104f55781810151838201526020016104dd565b50505050905001965050505050505060405180910390f35b34801561051957600080fd5b506102f26004803603602081101561053057600080fd5b5035611055565b34801561054357600080fd5b506102db6004803603602081101561055a57600080fd5b50356001600160801b031661105c565b6102f26004803603602081101561058057600080fd5b503560ff1661118e565b34801561059657600080fd5b50610286600480360360208110156105ad57600080fd5b503561132c565b3480156105c057600080fd5b506105de600480360360208110156105d757600080fd5b5035611390565b6040805160ff90941684526001600160581b0390921660208401526001600160a01b031682820152519081900360600190f35b34801561061d57600080fd5b506102486113c6565b34801561063257600080fd5b506102f26004803603602081101561064957600080fd5b50356001600160a01b03166113e4565b6102db6004803603606081101561066f57600080fd5b5080359060208101356001600160a01b0316906040013560ff1661144a565b34801561069a57600080fd5b50610286611514565b3480156106af57600080fd5b506102db611523565b3480156106c457600080fd5b506102f2611581565b3480156106d957600080fd5b506106e2611587565b604080516001600160e01b03199092168252519081900360200190f35b34801561070b57600080fd5b506102db6004803603604081101561072257600080fd5b508035906020013560ff16611595565b34801561073e57600080fd5b506102f2611716565b34801561075357600080fd5b506102db6004803603604081101561076a57600080fd5b506001600160a01b038135169060200135151561171c565b34801561078e57600080fd5b506102866117eb565b3480156107a357600080fd5b506107c1600480360360208110156107ba57600080fd5b50356117fa565b604080516001600160a01b039094168452602084019290925260ff1682820152519081900360600190f35b3480156107f857600080fd5b506102db6004803603608081101561080f57600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b81111561084957600080fd5b82018360208201111561085b57600080fd5b803590602001918460018302840111600160201b8311171561087c57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506118bb945050505050565b61092b600480360360208110156108d357600080fd5b810190602081018135600160201b8111156108ed57600080fd5b8201836020820111156108ff57600080fd5b803590602001918460208302840111600160201b8311171561092057600080fd5b509092509050611916565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561096757818101518382015260200161094f565b505050509050019250505060405180910390f35b34801561098757600080fd5b506102f2611c1d565b34801561099c57600080fd5b506102f2600480360360208110156109b357600080fd5b5035611c23565b3480156109c657600080fd5b50610248600480360360408110156109dd57600080fd5b506001600160a01b0381358116916020013516611c2b565b348015610a0157600080fd5b506102f2611c59565b6102db60048036036060811015610a2057600080fd5b5080359060208101356001600160a01b0316906040013560ff16611c5f565b348015610a4b57600080fd5b50610a6960048036036020811015610a6257600080fd5b5035611d2a565b604080516001600160a01b0390941684526001600160581b03909216602084015260ff1682820152519081900360600190f35b348015610aa857600080fd5b506102db60048036036020811015610abf57600080fd5b50356001600160a01b0316611de3565b6102db60048036036080811015610ae557600080fd5b810190602081018135600160201b811115610aff57600080fd5b820183602082011115610b1157600080fd5b803590602001918460208302840111600160201b83111715610b3257600080fd5b919390929091602081019035600160201b811115610b4f57600080fd5b820183602082011115610b6157600080fd5b803590602001918460208302840111600160201b83111715610b8257600080fd5b919390929091602081019035600160201b811115610b9f57600080fd5b820183602082011115610bb157600080fd5b803590602001918460208302840111600160201b83111715610bd257600080fd5b919390929091602081019035600160201b811115610bef57600080fd5b820183602082011115610c0157600080fd5b803590602001918460208302840111600160201b83111715610c2257600080fd5b509092509050611eb4565b6001600160e01b03191660009081526020819052604090205460ff1690565b6000610c578261213a565b610c9557604051600160e51b62461bcd02815260040180806020018281038252602c815260200180612b06602c913960400191505060405180910390fd5b506000908152600260205260409020546001600160a01b031690565b6000610cbc8261132c565b9050806001600160a01b0316836001600160a01b03161415610d1257604051600160e51b62461bcd028152600401808060200182810382526021815260200180612b5b6021913960400191505060405180910390fd5b336001600160a01b0382161480610d2e5750610d2e8133611c2b565b610d6c57604051600160e51b62461bcd028152600401808060200182810382526038815260200180612a7b6038913960400191505060405180910390fd5b60008281526002602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60065481565b610dd8338261215e565b610e1657604051600160e51b62461bcd028152600401808060200182810382526031815260200180612b7c6031913960400191505060405180910390fd5b610e21838383612205565b505050565b600a5481565b60075481565b610e21838383604051806020016040528060008152506118bb565b600d54606090819081906001600160a01b03163314610eae5760408051600160e51b62461bcd0281526020600482015260126024820152600160711b7126bab9ba1031329033b0ba32b5b2b2b832b902604482015290519081900360640190fd5b604080518581526020808702820101909152848015610ed7578160200160208202803883390190505b50604080518681526020808802820101909152909350848015610f04578160200160208202803883390190505b50604080518681526020808802820101909152909250848015610f31578160200160208202803883390190505b5090506000805b8581101561101e57610f5b878783818110610f4f57fe5b90506020020135611d2a565b816001600160581b03169150878481518110610f7357fe5b60200260200101878581518110610f8657fe5b60200260200101878681518110610f9957fe5b602002602001018360ff1660ff1681525083815250836001600160a01b03166001600160a01b0316815250505050610ff6858281518110610fd657fe5b6020026020010151888884818110610fea57fe5b90506020020135612339565b61101284828151811061100557fe5b6020026020010151611055565b90910190600101610f38565b50604051339082156108fc029083906000818181858888f1935050505015801561104c573d6000803e3d6000fd5b50509250925092565b6103e80290565b6005546001600160a01b031633146110ac5760408051600160e51b62461bcd0281526020600482015260136024820152600080516020612975833981519152604482015290519081900360640190fd5b60065443106110ef57604051600160e51b62461bcd02815260040180806020018281038252603a815260200180612c60603a913960400191505060405180910390fd5b600654816001600160801b03161161113b57604051600160e51b62461bcd028152600401808060200182810382526035815260200180612bad6035913960400191505060405180910390fd5b600654604080519182526001600160801b038316602083015280517f8774aa9221f02a7971c04902013456be92b6a521a2347a44ec6610e4b9a5d8fc9281900390910190a16001600160801b0316600655565b60006006544310156111e15760408051600160e51b62461bcd02815260206004820152601160248201526001607a1b7014d85b19481b9bdd081bdc195b881e595d02604482015290519081900360640190fd5b60075460065401431061122f5760408051600160e51b62461bcd02815260206004820152600b6024820152600160aa1b6a14d85b194818db1bdcd95902604482015290519081900360640190fd5b50600c805460018101909155600954600090611250908390339086906123fb565b6009559050348111156112ad5760408051600160e51b62461bcd02815260206004820152601560248201527f4e6f7420656e6f7567682065746820746f207061790000000000000000000000604482015290519081900360640190fd5b6112b68161249d565b6112d260003384604051806020016040528060008152506124de565b6113265760408051600160e51b62461bcd02815260206004820152601360248201527f6d75737420737570706f72742065726337323100000000000000000000000000604482015290519081900360640190fd5b50919050565b600081815260016020526040812054600160601b90046001600160a01b03168061138a57604051600160e51b62461bcd028152600401808060200182810382526029815260200180612add6029913960400191505060405180910390fd5b92915050565b60016020526000908152604090205460ff81169061010081046001600160581b031690600160601b90046001600160a01b031683565b600060065443101580156113df57506007546006540143105b905090565b60006001600160a01b03821661142e57604051600160e51b62461bcd02815260040180806020018281038252602a815260200180612ab3602a913960400191505060405180910390fd5b506001600160a01b031660009081526003602052604090205490565b6005546001600160a01b0316331461149a5760408051600160e51b62461bcd0281526020600482015260136024820152600080516020612975833981519152604482015290519081900360640190fd5b6000831180156114ac5750600b548311155b6115005760408051600160e51b62461bcd02815260206004820152601460248201527f496e76616c6964206578636c7573697665204944000000000000000000000000604482015290519081900360640190fd5b610e21838361150e34611c23565b84612617565b6005546001600160a01b031681565b6005546001600160a01b031633146115735760408051600160e51b62461bcd0281526020600482015260136024820152600080516020612975833981519152604482015290519081900360640190fd5b6005546001600160a01b0316ff5b60085481565b600160e01b634df71efb0281565b60ff8116158015906115ab5750600460ff821611155b6115ff5760408051600160e51b62461bcd02815260206004820152601c60248201527f4d7573742063686f6f736520612076616c696420616666696e69747900000000604482015290519081900360640190fd5b60008061160b84611d2a565b9250509150816001600160a01b0316336001600160a01b03161461166357604051600160e51b62461bcd028152600401808060200182810382526025815260200180612a566025913960400191505060405180910390fd5b60ff8116156116bc5760408051600160e51b62461bcd02815260206004820181905260248201527f416666696e6974792063616e206f6e6c792062652063686f73656e206f6e6365604482015290519081900360640190fd5b600084815260016020908152604091829020805460ff191660ff87169081179091558251908152915186927f0f0bc6913c78f45e890c2265a362fd955a202a954142552907cb83e4ef9f409a92908290030190a250505050565b600b5481565b6001600160a01b03821633141561177d5760408051600160e51b62461bcd02815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b3360008181526004602090815260408083206001600160a01b03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b600d546001600160a01b031681565b600d54600090819081906001600160a01b0316331461185b5760408051600160e51b62461bcd0281526020600482015260126024820152600160711b7126bab9ba1031329033b0ba32b5b2b2b832b902604482015290519081900360640190fd5b61186484611d2a565b9194506001600160581b03169250905061187e8385612339565b336108fc61188b84611055565b6040518115909202916000818181858888f193505050501580156118b3573d6000803e3d6000fd5b509193909250565b6118c6848484610dce565b6118d2848484846124de565b61191057604051600160e51b62461bcd0281526004018080602001828103825260328152602001806129436032913960400191505060405180910390fd5b50505050565b60606006544310156119695760408051600160e51b62461bcd02815260206004820152601160248201526001607a1b7014d85b19481b9bdd081bdc195b881e595d02604482015290519081900360640190fd5b6007546006540143106119b75760408051600160e51b62461bcd02815260206004820152600b6024820152600160aa1b6a14d85b194818db1bdcd95902604482015290519081900360640190fd5b6040805183815260208085028201019091528280156119e0578160200160208202803883390190505b50600c54600954919250600091825b85811015611a5c5782858281518110611a0457fe5b60200260200101818152505082806001019350506000611a4e868381518110611a2957fe5b6020026020010151338a8a86818110611a3e57fe5b9050602002013560ff16866123fb565b9501949250506001016119ef565b506009819055600c82905534831115611abf5760408051600160e51b62461bcd02815260206004820152601560248201527f4e6f7420656e6f7567682065746820746f207061790000000000000000000000604482015290519081900360640190fd5b611ac8336128df565b15611c0b5760005b8451811015611c09576000336001600160a01b031663150b7a02336000898681518110611af957fe5b60200260200101516040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b03168152602001836001600160a01b03166001600160a01b0316815260200182815260200180602001828103825260008152602001602001945050505050602060405180830381600087803b158015611b7d57600080fd5b505af1158015611b91573d6000803e3d6000fd5b505050506040513d6020811015611ba757600080fd5b505190506001600160e01b03198116600160e11b630a85bd010214611c0057604051600160e51b62461bcd02815260040180806020018281038252602d815260200180612c07602d913960400191505060405180910390fd5b50600101611ad0565b505b611c148361249d565b50505092915050565b600c5481565b6103e8900490565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205460ff1690565b60095481565b6005546001600160a01b03163314611caf5760408051600160e51b62461bcd0281526020600482015260136024820152600080516020612975833981519152604482015290519081900360640190fd5b611cba83838361144a565b611cd660008385604051806020016040528060008152506124de565b610e215760408051600160e51b62461bcd02815260206004820152601360248201527f6d75737420737570706f72742065726337323100000000000000000000000000604482015290519081900360640190fd5b6000806000611d37612922565b5050506000828152600160209081526040918290208251606081018452905460ff811680835261010082046001600160581b0316938301849052600160601b9091046001600160a01b0316938201849052929350909190836118b35760408051600160e51b62461bcd02815260206004820152601560248201527f57697a61726420646f6573206e6f742065786973740000000000000000000000604482015290519081900360640190fd5b6005546001600160a01b03163314611e335760408051600160e51b62461bcd0281526020600482015260136024820152600080516020612975833981519152604482015290519081900360640190fd5b600d546001600160a01b0316158015611e5457506001600160a01b03811615155b611e9257604051600160e51b62461bcd028152600401808060200182810382526026815260200180612c9a6026913960400191505060405180910390fd5b600d80546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b03163314611f045760408051600160e51b62461bcd0281526020600482015260136024820152600080516020612975833981519152604482015290519081900360640190fd5b8685148015611f1257508483145b8015611f1d57508481145b611f715760408051600160e51b62461bcd02815260206004820152601d60248201527f4d757374206861766520657175616c206172726179206c656e67746873000000604482015290519081900360640190fd5b6000805b888110156120e45760008a8a83818110611f8b57fe5b90506020020135118015611fb35750600b548a8a83818110611fa957fe5b9050602002013511155b6120075760408051600160e51b62461bcd02815260206004820152601460248201527f496e76616c6964206578636c7573697665204944000000000000000000000000604482015290519081900360640190fd5b600484848381811061201557fe5b9050602002013560ff1660ff16111561206257604051600160e51b62461bcd0281526004018080602001828103825260268152602001806129956026913960400191505060405180910390fd5b6120c28a8a8381811061207157fe5b9050602002013589898481811061208457fe5b905060200201356001600160a01b03168888858181106120a057fe5b905060200201358787868181106120b357fe5b9050602002013560ff16612617565b8585828181106120ce57fe5b6020029190910135929092019150600101611f75565b50346120ef82611055565b111561212f57604051600160e51b62461bcd028152600401808060200182810382526021815260200180612a356021913960400191505060405180910390fd5b505050505050505050565b600090815260016020526040902054600160601b90046001600160a01b0316151590565b60006121698261213a565b6121a757604051600160e51b62461bcd02815260040180806020018281038252602c815260200180612a09602c913960400191505060405180910390fd5b60006121b28361132c565b9050806001600160a01b0316846001600160a01b031614806121ed5750836001600160a01b03166121e284610c4c565b6001600160a01b0316145b806121fd57506121fd8185611c2b565b949350505050565b826001600160a01b03166122188261132c565b6001600160a01b03161461226057604051600160e51b62461bcd028152600401808060200182810382526029815260200180612b326029913960400191505060405180910390fd5b6001600160a01b0382166122a857604051600160e51b62461bcd0281526004018080602001828103825260248152602001806129e56024913960400191505060405180910390fd5b6122b1816128e5565b6001600160a01b03838116600081815260036020908152604080832080546000190190559386168083528483208054600190810190915586845290915283822080546bffffffffffffffffffffffff16600160601b83021790559251849392917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b816001600160a01b031661234c8261132c565b6001600160a01b03161461239457604051600160e51b62461bcd028152600401808060200182810382526025815260200180612be26025913960400191505060405180910390fd5b61239d816128e5565b6001600160a01b038216600081815260036020908152604080832080546000190190558483526001909152808220829055518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60008060ff8416158015906124145750600460ff851611155b61245257604051600160e51b62461bcd02815260040180806020018281038252602a8152602001806129bb602a913960400191505060405180910390fd5b508160ff84166001141561246a576008549150612480565b809150620186a0600a5482028161247d57fe5b04015b612494868661248e85611c23565b87612617565b94509492505050565b348190036125e43a028111156124da57604051339082156108fc029083906000818181858888f19350505050158015610e21573d6000803e3d6000fd5b5050565b60006124f2846001600160a01b03166128df565b6124fe575060016121fd565b604051600160e11b630a85bd0102815233600482018181526001600160a01b03888116602485015260448401879052608060648501908152865160848601528651600095928a169463150b7a029490938c938b938b939260a4019060208501908083838e5b8381101561257b578181015183820152602001612563565b50505050905090810190601f1680156125a85780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156125ca57600080fd5b505af11580156125de573d6000803e3d6000fd5b505050506040513d60208110156125f457600080fd5b50516001600160e01b031916600160e11b630a85bd010214915050949350505050565b6126208461213a565b156126755760408051600160e51b62461bcd02815260206004820152601560248201527f43616e27742072657573652057697a6172642049440000000000000000000000604482015290519081900360640190fd5b6001600160a01b0383166126d35760408051600160e51b62461bcd02815260206004820152601860248201527f4f776e65722061646472657373206d7573742065786973740000000000000000604482015290519081900360640190fd5b6000821161272b5760408051600160e51b62461bcd02815260206004820152601d60248201527f57697a61726420706f776572206d757374206265206e6f6e2d7a65726f000000604482015290519081900360640190fd5b600160581b821061277057604051600160e51b62461bcd02815260040180806020018281038252602c815260200180612c34602c913960400191505060405180910390fd5b600460ff821611156127cc5760408051600160e51b62461bcd02815260206004820152601a60248201527f496e76616c696420656c656d656e74616c20616666696e697479000000000000604482015290519081900360640190fd5b6040805160608101825260ff83811682526001600160581b0385811660208085019182526001600160a01b0389811686880181815260008d815260018086528a822099518a549751935160ff199098169916989098176bffffffffffffffffffffff0019166101009290971691909102959095176bffffffffffffffffffffffff16600160601b9490921693909302179094558082526003909352838120805490920190915591518692907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46040805160ff8316815260208101849052815186927f7c0fbd69c04ea8ef6f62724eebd9c311d984e86457a801d81c0cb52ec9039170928290030190a250505050565b3b151590565b6000818152600260205260409020546001600160a01b03161561291f57600081815260026020526040902080546001600160a01b03191690555b50565b60408051606081018252600080825260208201819052918101919091529056fe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724d757374206265206775696c646d6173746572000000000000000000000000004d7573742063686f6f736520612076616c696420656c656d656e74616c20616666696e6974794e6f6e2d6578636c75736976652057697a61726473206e6565642061207265616c20616666696e6974794552433732313a207472616e7366657220746f20746865207a65726f20616464726573734552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4d7573742070617920666f7220706f77657220696e20616c6c2057697a61726473416666696e6974792063616e206f6e6c792062652073657420627920746865206f776e65724552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665644e65772073746172742074696d65206d757374206265206c61746572207468616e2070726576696f75732073746172742074696d654552433732313a206275726e206f6620746f6b656e2074686174206973206e6f74206f776e436f6e7472616374206f776e6572206469646e277420616363657074204552432d373231207472616e7366657257697a61726420706f776572206d7573742066697420696e2038382062697473206f662073746f726167652e53616c652073746172742074696d65206f6e6c792061646a75737461626c65206265666f72652070726576696f75732073746172742074696d6543616e206f6e6c7920736574206f6e636520616e64206d757374206e6f74206265207a65726fa165627a7a723058200beadfe2372f5675c3aa5a195c6ba093f30c9613b11b8d9d2864314aceff2d5500297374617274206d7573742062652067726561746572207468616e2063757272656e7420626c6f636b00000000000000000000000000000000000000000000000000f8b0a10e470000000000000000000000000000000000000000000000000000000000000000008200000000000000000000000000000000000000000000000000000000000004d2000000000000000000000000000000000000000000000000000000000076b6b0000000000000000000000000000000000000000000000000000000000000b9ff",
  "constructorArguments": "7374617274206d7573742062652067726561746572207468616e2063757272656e7420626c6f636b00000000000000000000000000000000000000000000000000f8b0a10e470000000000000000000000000000000000000000000000000000000000000000008200000000000000000000000000000000000000000000000000000000000004d2000000000000000000000000000000000000000000000000000000000076b6b0000000000000000000000000000000000000000000000000000000000000b9ff"
}