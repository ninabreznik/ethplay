{
  "address": "0xc780e2bb5e8f1730cb50597731d4e8e715692ac0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CryptoDa",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-30\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error.\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        //        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        //        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n\ncontract ERC20Interface {\n\n    // Getters\n    function totalSupply() public view returns (uint);\n\n    function balanceOf(address tokenOwner) public view returns (uint balance);\n\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n\n    // Write the State\n    function transfer(address to, uint tokens) public returns (bool success);\n\n    function approve(address spender, uint tokens) public returns (bool success);\n\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    // Events\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n\n}\n\ncontract ERC20 is ERC20Interface {\n\n    // Link the SafeMath library\n    using SafeMath for uint;\n\n    // declare the storage\n    mapping(address => mapping(address => uint)) private _allowance;\n    mapping(address => uint) internal _balanceOf;\n\n    uint internal _totalSupply;\n\n    uint8 public constant decimals = 18;\n\n    function _transfer(address from, address to, uint tokens) private returns (bool success) {\n        _balanceOf[from] = _balanceOf[from].sub(tokens);\n        _balanceOf[to] = _balanceOf[to].add(tokens);\n\n        success = true;\n\n        emit Transfer(from, to, tokens);\n    }\n\n    // Getters\n    function totalSupply() public view returns (uint) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\n        balance = _balanceOf[tokenOwner];\n    }\n\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n        remaining = _allowance[tokenOwner][spender];\n        return remaining;\n    }\n\n    // Write the State\n    function transfer(address to, uint tokens) public returns (bool success) {\n        success = _transfer(msg.sender, to, tokens);\n    }\n\n    function approve(address spender, uint tokens) public returns (bool success) {\n        _allowance[msg.sender][spender] = tokens;\n\n        success = true;\n\n        emit Approval(msg.sender, spender, tokens);\n    }\n\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n        _allowance[from][msg.sender] = _allowance[from][msg.sender].sub(tokens);\n\n        success = _transfer(from, to, tokens);\n    }\n\n}\n\ncontract Ownerable {\n    address public owner;\n\n    constructor () public {\n        owner = msg.sender;\n    }\n\n    function setOwner(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner, \"Only owner can perform this tx.\");\n        _;\n    }\n}\n\ncontract CryptoDa is ERC20, Ownerable {\n    string public constant name = \"CryptoDa\";\n    string public constant symbol = \"CDA\";\n\n    address public issuer = address(0);\n\n    constructor (address _issuer) public {\n        _totalSupply = 5000000 ether;\n        issuer = _issuer;\n        _balanceOf[issuer] = _totalSupply;\n    }\n\n    function setIssuer(address newIssuer) public onlyOwner returns (bool success){\n        require(newIssuer != address(0), \"Cannot set 0x0 as a new issuer address.\");\n\n        if (issuer != address(0)) {\n            _balanceOf[newIssuer] = _balanceOf[issuer];\n            _balanceOf[issuer] = 0;\n        }\n\n        issuer = newIssuer;\n\n        success = true;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newIssuer\",\"type\":\"address\"}],\"name\":\"setIssuer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_issuer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "608060405260048054600160a060020a031916905534801561002057600080fd5b5060405160208061088783398101604090815290516003805433600160a060020a0319918216179091556a0422ca8b0a00a425000000600281905560048054909216600160a060020a039384161791829055911660009081526001602052918220556107f590819061009290396000f3006080604052600436106100c45763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100c9578063095ea7b31461015357806313af40351461018b57806318160ddd146101ae5780631d143848146101d557806323b872dd14610206578063313ce5671461023057806355cc4e571461025b57806370a082311461027c5780638da5cb5b1461029d57806395d89b41146102b2578063a9059cbb146102c7578063dd62ed3e146102eb575b600080fd5b3480156100d557600080fd5b506100de610312565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610118578181015183820152602001610100565b50505050905090810190601f1680156101455780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015f57600080fd5b50610177600160a060020a0360043516602435610349565b604080519115158252519081900360200190f35b34801561019757600080fd5b506101ac600160a060020a03600435166103a9565b005b3480156101ba57600080fd5b506101c3610451565b60408051918252519081900360200190f35b3480156101e157600080fd5b506101ea610457565b60408051600160a060020a039092168252519081900360200190f35b34801561021257600080fd5b50610177600160a060020a0360043581169060243516604435610466565b34801561023c57600080fd5b506102456104cd565b6040805160ff9092168252519081900360200190f35b34801561026757600080fd5b50610177600160a060020a03600435166104d2565b34801561028857600080fd5b506101c3600160a060020a0360043516610663565b3480156102a957600080fd5b506101ea61067e565b3480156102be57600080fd5b506100de61068d565b3480156102d357600080fd5b50610177600160a060020a03600435166024356106c4565b3480156102f757600080fd5b506101c3600160a060020a03600435811690602435166106d8565b60408051808201909152600881527f43727970746f4461000000000000000000000000000000000000000000000000602082015281565b33600081815260208181526040808320600160a060020a0387168085529083529281902085905580518581529051600194927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a392915050565b600354600160a060020a0316331461042257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4f6e6c79206f776e65722063616e20706572666f726d20746869732074782e00604482015290519081900360640190fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60025490565b600454600160a060020a031681565b600160a060020a038316600090815260208181526040808320338452909152812054610498908363ffffffff61070116565b600160a060020a0385166000908152602081815260408083203384529091529020556104c5848484610706565b949350505050565b601281565b600354600090600160a060020a0316331461054e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4f6e6c79206f776e65722063616e20706572666f726d20746869732074782e00604482015290519081900360640190fd5b600160a060020a03821615156105eb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f43616e6e6f7420736574203078302061732061206e657720697373756572206160448201527f6464726573732e00000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600454600160a060020a0316156106305760048054600160a060020a039081166000908152600160205260408082205486841683528183205592549091168152908120555b506004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055600190565b600160a060020a031660009081526001602052604090205490565b600354600160a060020a031681565b60408051808201909152600381527f4344410000000000000000000000000000000000000000000000000000000000602082015281565b60006106d1338484610706565b9392505050565b600160a060020a0391821660009081526020818152604080832093909416825291909152205490565b900390565b600160a060020a03831660009081526001602052604081205461072f908363ffffffff61070116565b600160a060020a038086166000908152600160205260408082209390935590851681522054610764908363ffffffff6107c516565b600160a060020a0380851660008181526001602081815260409283902095909555815187815291519095509193928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a39392505050565b01905600a165627a7a723058202345310cb9621095c51104ccc38f4a58b811973738ea4a74f49e8a78164c132e00290000000000000000000000006144fb94c0449d11a9855fba2c36a04c012fcbea",
  "constructorArguments": "0000000000000000000000006144fb94c0449d11a9855fba2c36a04c012fcbea"
}