{
  "address": "0x88eded244d147c6a96b2565a3831020462fed555",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WhaleToken",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-17\n*/\n\npragma solidity ^0.4.15;\n\n\n\nlibrary SafeMath {\n\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n        if (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tuint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a && c >= b);\n        return c;\n    }\n\t\n\tfunction sub(uint256 a, uint256 b) internal constant returns (uint256) {\n\t\tassert(b <= a);\n\t\treturn a - b;\n\t}\n\n}\n\n\n\ncontract Token {\n\n    uint256 public totalSupply;\n\n    function balanceOf(address _owner) constant returns (uint256 balance);\n    function transfer(address _to, uint256 _value) returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n    function approve(address _spender, uint256 _value) returns (bool success);\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n}\n\n\n\ncontract StandardToken is Token {\n\n    function transfer(address _to, uint256 _value) returns (bool success) {\n\t\trequire( msg.data.length >= (2 * 32) + 4 );\n\t\trequire( _value > 0 );\n\t\trequire( balances[msg.sender] >= _value );\n\t\trequire( balances[_to] + _value > balances[_to] );\n\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n\t\trequire( msg.data.length >= (3 * 32) + 4 );\n\t\trequire( _value > 0 );\n\t\trequire( balances[_from] >= _value );\n\t\trequire( allowed[_from][msg.sender] >= _value );\n\t\trequire( balances[_to] + _value > balances[_to] );\n\n        balances[_from] -= _value;\n\t\tallowed[_from][msg.sender] -= _value;\n\t\tbalances[_to] += _value;\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) returns (bool success) {\n\t\trequire( _value == 0 || allowed[msg.sender][_spender] == 0 );\n\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n\n}\n\n\n\ncontract WhaleToken is StandardToken {\n\n    using SafeMath for uint256;\n\n\tstring public constant name = \"WhaleFUND\";\t\t\t\t\t\t\t\t// WHALE tokens name\n    string public constant symbol = \"WHALE\";\t\t\t\t\t\t\t\t// WHALE tokens ticker\n    uint256 public constant decimals = 18;\t\t\t\t\t\t\t\t\t// WHALE tokens decimals\n\tstring public version = \"1.0\";\t\t\t\t\t\t\t\t\t\t\t// WHALE version\n\n\tuint256 public constant maximumSupply =  800 * (10**3) * 10**decimals;\t// Maximum 800k Whale tokens\n\tuint256 public constant operatingFund = 152 * (10**3) * 10**decimals;\t// 19% - 152k WHALE reserved for operating expenses\n\tuint256 public constant teamFund = 120 * (10**3) * 10**decimals;\t\t// 15% - 120k WHALE reserved for WhaleFUND team\n\tuint256 public constant partnersFund = 24 * (10**3) * 10**decimals;\t\t// 3% - 24k WHALE reserved for partner program\n\tuint256 public constant bountyFund = 24 * (10**3) * 10**decimals;\t\t// 3% - 24k WHALE reserved for bounty program\n\t\n\tuint256 public constant whaleExchangeRate = 100;\t\t\t\t\t\t// 100 WHALE tokens per 1 ETH\n\t\n\tuint256 public constant preIcoBonus = 15;\t\t\t\t\t\t\t\t// PreICO bonus 15%\n\tuint256 public constant icoThreshold1 = 420 * (10**3) * 10**decimals;\t// <100k sold WHALE tokens, without 152k+120k+24k+24k=320k reserved tokens\n\tuint256 public constant icoThreshold2 = 520 * (10**3) * 10**decimals;\t// >100k && <200k sold WHALE tokens, without 152k+120k+24k+24k=320k reserved tokens\n\tuint256 public constant icoThreshold3 = 620 * (10**3) * 10**decimals;\t// >200k && <300k sold WHALE tokens, without 152k+120k+24k+24k=320k reserved tokens\n\tuint256 public constant icoThresholdBonus1 = 10;\t\t\t\t\t\t// ICO threshold bonus 10%\n\tuint256 public constant icoThresholdBonus2 = 5;\t\t\t\t\t\t\t// ICO threshold bonus 5%\n\tuint256 public constant icoThresholdBonus3 = 3;\t\t\t\t\t\t\t// ICO threshold bonus 3%\n\tuint256 public constant icoAmountBonus1 = 2;\t\t\t\t\t\t\t// ICO amount bonus 2%\n\tuint256 public constant icoAmountBonus2 = 3;\t\t\t\t\t\t\t// ICO amount bonus 3%\n\tuint256 public constant icoAmountBonus3 = 5;\t\t\t\t\t\t\t// ICO amount bonus 5%\n\n    address public etherAddress;\n    address public operatingFundAddress;\n\taddress public teamFundAddress;\n\taddress public partnersFundAddress;\n\taddress public bountyFundAddress;\n\taddress public dividendFundAddress;\n\n    bool public isFinalized;\n\tuint256 public constant crowdsaleStart = 1511136000;\t\t\t\t\t// Monday, 20 November 2017, 00:00:00 UTC\n\tuint256 public constant crowdsaleEnd = 1513555200;\t\t\t\t\t\t// Monday, 18 December 2017, 00:00:00 UTC\n\n    event createWhaleTokens(address indexed _to, uint256 _value);\n\n\n    function WhaleToken(\n        address _etherAddress,\n        address _operatingFundAddress,\n\t\taddress _teamFundAddress,\n\t\taddress _partnersFundAddress,\n\t\taddress _bountyFundAddress,\n\t\taddress _dividendFundAddress\n\t)\n    {\n\n        isFinalized = false;\n\n        etherAddress = _etherAddress;\n        operatingFundAddress = _operatingFundAddress;\n\t\tteamFundAddress = _teamFundAddress;\n\t    partnersFundAddress = _partnersFundAddress;\n\t\tbountyFundAddress = _bountyFundAddress;\n\t\tdividendFundAddress = _dividendFundAddress;\n\t\t\n\t\ttotalSupply = totalSupply.add(operatingFund).add(teamFund).add(partnersFund).add(bountyFund);\n\n\t\tbalances[operatingFundAddress] = operatingFund;\t\t\t\t\t\t// Update operating funds balance\n\t\tcreateWhaleTokens(operatingFundAddress, operatingFund);\t\t\t\t// Create operating funds tokens\n\n\t\tbalances[teamFundAddress] = teamFund;\t\t\t\t\t\t\t\t// Update team funds balance\n\t\tcreateWhaleTokens(teamFundAddress, teamFund);\t\t\t\t\t\t// Create team funds tokens\n\n\t\tbalances[partnersFundAddress] = partnersFund;\t\t\t\t\t\t// Update partner program funds balance\n\t\tcreateWhaleTokens(partnersFundAddress, partnersFund);\t\t\t\t// Create partner program funds tokens\n\t\t\n\t\tbalances[bountyFundAddress] = bountyFund;\t\t\t\t\t\t\t// Update bounty program funds balance\n\t\tcreateWhaleTokens(bountyFundAddress, bountyFund);\t\t\t\t\t// Create bounty program funds tokens\n\n\t}\n\n\n    function makeTokens() payable  {\n\n\t\trequire( !isFinalized );\n\t\trequire( now >= crowdsaleStart );\n\t\trequire( now < crowdsaleEnd );\n\t\t\n\t\tif (now < crowdsaleStart + 7 days) {\n\t\t\trequire( msg.value >= 3000 finney );\n\t\t} else if (now >= crowdsaleStart + 7 days) {\n\t\t\trequire( msg.value >= 10 finney );\n\t\t}\n\n\n\t\tuint256 buyedTokens = 0;\n\t\tuint256 bonusTokens = 0;\n\t\tuint256 bonusThresholdTokens = 0;\n\t\tuint256 bonusAmountTokens = 0;\n\t\tuint256 tokens = 0;\n\n\n\t\tif (now < crowdsaleStart + 7 days) {\n\n\t\t\tbuyedTokens = msg.value.mul(whaleExchangeRate);\t\t\t\t\t\t\t\t// Buyed WHALE tokens without bonuses\n\t\t\tbonusTokens = buyedTokens.mul(preIcoBonus).div(100);\t\t\t\t\t\t// preICO bonus 15%\n\t\t\ttokens = buyedTokens.add(bonusTokens);\t\t\t\t\t\t\t\t\t\t// Buyed WHALE tokens with bonuses\n\t\n\t\t} else {\n\t\t\n\t\t\tbuyedTokens = msg.value.mul(whaleExchangeRate);\t\t\t\t\t\t\t\t// Buyed WHALE tokens without bonuses\n\n\t\t\tif (totalSupply <= icoThreshold1) {\n\t\t\t\tbonusThresholdTokens = buyedTokens.mul(icoThresholdBonus1).div(100);\t// ICO threshold bonus 10%\n\t\t\t} else if (totalSupply > icoThreshold1 && totalSupply <= icoThreshold2) {\n\t\t\t\tbonusThresholdTokens = buyedTokens.mul(icoThresholdBonus2).div(100);\t// ICO threshold bonus 5%\n\t\t\t} else if (totalSupply > icoThreshold2 && totalSupply <= icoThreshold3) {\n\t\t\t\tbonusThresholdTokens = buyedTokens.mul(icoThresholdBonus3).div(100);\t// ICO threshold bonus 3%\n\t\t\t} else if (totalSupply > icoThreshold3) {\n\t\t\t\tbonusThresholdTokens = 0;\t\t\t\t\t\t\t\t\t\t\t\t// ICO threshold bonus 0%\n\t\t\t}\n\n\t\t\tif (msg.value < 10000 finney) {\n\t\t\t\tbonusAmountTokens = 0;\t\t\t\t\t\t\t\t\t\t\t\t\t// ICO amount bonus 0%\n\t\t\t} else if (msg.value >= 10000 finney && msg.value < 100010 finney) {\n\t\t\t\tbonusAmountTokens = buyedTokens.mul(icoAmountBonus1).div(100);\t\t\t// ICO amount bonus 2%\n\t\t\t} else if (msg.value >= 100010 finney && msg.value < 300010 finney) {\n\t\t\t\tbonusAmountTokens = buyedTokens.mul(icoAmountBonus2).div(100);\t\t\t// ICO amount bonus 3%\n\t\t\t} else if (msg.value >= 300010 finney) {\n\t\t\t\tbonusAmountTokens = buyedTokens.mul(icoAmountBonus3).div(100);\t\t\t// ICO amount bonus 5%\n\t\t\t}\n\n\t\t\ttokens = buyedTokens.add(bonusThresholdTokens).add(bonusAmountTokens);\t\t// Buyed WHALE tokens with bonuses\n\n\t\t}\n\n\t    uint256 currentSupply = totalSupply.add(tokens);\n\n\t\trequire( maximumSupply >= currentSupply );\n\n        totalSupply = currentSupply;\n\n        balances[msg.sender] += tokens;\t\t\t\t\t\t\t\t\t\t// Update buyer balance \n        createWhaleTokens(msg.sender, tokens);\t\t\t\t\t\t\t\t// Create buyed tokens\n\t\t\n\t\tetherAddress.transfer(msg.value);\t\t\t\t\t\t\t\t\t// Transfer ETH to MultiSig Address\n\n    }\n\n\n    function() payable {\n\n        makeTokens();\n\n    }\n\n\n    function finalizeCrowdsale() external {\n\n\t\trequire( !isFinalized );\t\t\t\t\t\t\t\t\t\t\t// Required crowdsale state FALSE\n\t\trequire( msg.sender == teamFundAddress );\t\t\t\t\t\t\t// Required call from team fund address\n\t\trequire( now > crowdsaleEnd || totalSupply == maximumSupply );\t\t// Required crowdsale ended or maximum supply reached\n\t\t\n\t\tuint256 remainingSupply = maximumSupply.sub(totalSupply);\t\t\t// Remaining tokens to reach maximum supply\n\t\tif (remainingSupply > 0) {\n\t\t\tuint256 updatedSupply = totalSupply.add(remainingSupply);\t\t// New total supply\n\t\t\ttotalSupply = updatedSupply;\t\t\t\t\t\t\t\t\t// Update total supply\n\t\t\tbalances[dividendFundAddress] += remainingSupply;\t\t\t\t// Update dividend funds balance\n\t\t\tcreateWhaleTokens(dividendFundAddress, remainingSupply);\t\t// Create dividend funds tokens\n\t\t}\n\n        isFinalized = true;\t\t\t\t\t\t\t\t\t\t\t\t\t// Set crowdsale state TRUE\n\n    }\n\n}",
  "bytecode": "60606040526040805190810160405260038082527f312e30000000000000000000000000000000000000000000000000000000000060208301529080516200004c9291602001906200030e565b5034156200005957600080fd5b60405160c080620017cf8339810160405280805191906020018051919060200180519190602001805191906020018051919060200180519150505b6009805460048054600160a060020a0319908116600160a060020a038b8116919091179092556005805482168a841617905560068054821689841617905560078054821688841617905560088054909116868316179055600160a860020a031990911690831617905560005462000186906905150ae84a8cdf00000090620001479082908290691969368974c05b00000090829069202fefbf2d7c2f000000640100000000620002e481026200137c1704565b906401000000006200137c620002e482021704565b906401000000006200137c620002e482021704565b906401000000006200137c620002e482021704565b600090815560058054600160a060020a039081168352600160205260409283902069202fefbf2d7c2f0000009081905591541691600080516020620017af83398151915291905190815260200160405180910390a260068054600160a060020a0390811660009081526001602052604090819020691969368974c05b00000090819055925490911691600080516020620017af833981519152915190815260200160405180910390a260078054600160a060020a03908116600090815260016020526040908190206905150ae84a8cdf00000090819055925490911691600080516020620017af833981519152915190815260200160405180910390a260088054600160a060020a03908116600090815260016020526040908190206905150ae84a8cdf00000090819055925490911691600080516020620017af833981519152915190815260200160405180910390a25b505050505050620003b8565b6000828201838110801590620002fa5750828110155b15156200030357fe5b8091505b5092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200035157805160ff191683800117855562000381565b8280016001018555821562000381579182015b828111156200038157825182559160200191906001019062000364565b5b506200039092915062000394565b5090565b620003b591905b808211156200039057600081556001016200039b565b5090565b90565b6113e780620003c86000396000f300606060405236156101ca5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630480e58b81146101d657806306fdde03146101fb5780630786f72b14610286578063095ea7b3146102b557806309ceb7be146102eb5780630bf318a3146103105780630e6c04db1461032557806318160ddd1461034a57806323b872dd1461036f57806331225ad1146103ab578063313ce567146103d0578063444195a3146103f55780634d9aa42414610424578063536c9a7f146104495780635495699f1461047857806354fd4d501461049d57806361aa19d31461052857806362492e9d1461054d57806363d178061461057257806370a08231146105975780637fdb6720146105c85780638c1c7acc146105f75780638d4e40831461061c578063926f0c7b1461064357806395d89b4114610668578063a06ef4f2146106f3578063a9059cbb14610718578063ab7aa65d146106f3578063be28f5db146101ca578063c06c66ca14610643578063c668ee3d146107a2578063cc3bb31a146107d1578063d3363dd7146102eb578063dd62ed3e1461081b578063e1da413514610852578063e26534bf14610881578063f113c854146108a6575b5b6101d36108cb565b5b005b34156101e157600080fd5b6101e9610cb0565b60405190815260200160405180910390f35b341561020657600080fd5b61020e610cbe565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561024b5780820151818401525b602001610232565b50505050905090810190601f1680156102785780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561029157600080fd5b610299610cf5565b604051600160a060020a03909116815260200160405180910390f35b34156102c057600080fd5b6102d7600160a060020a0360043516602435610d04565b604051901515815260200160405180910390f35b34156102f657600080fd5b6101e9610dab565b60405190815260200160405180910390f35b341561031b57600080fd5b6101d3610db0565b005b341561033057600080fd5b6101e9610efb565b60405190815260200160405180910390f35b341561035557600080fd5b6101e9610f09565b60405190815260200160405180910390f35b341561037a57600080fd5b6102d7600160a060020a0360043581169060243516604435610f0f565b604051901515815260200160405180910390f35b34156103b657600080fd5b6101e9611039565b60405190815260200160405180910390f35b34156103db57600080fd5b6101e9611047565b60405190815260200160405180910390f35b341561040057600080fd5b61029961104c565b604051600160a060020a03909116815260200160405180910390f35b341561042f57600080fd5b6101e961105b565b60405190815260200160405180910390f35b341561045457600080fd5b610299611063565b604051600160a060020a03909116815260200160405180910390f35b341561048357600080fd5b6101e9611072565b60405190815260200160405180910390f35b34156104a857600080fd5b61020e611080565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561024b5780820151818401525b602001610232565b50505050905090810190601f1680156102785780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561053357600080fd5b6101e961111e565b60405190815260200160405180910390f35b341561055857600080fd5b6101e9611123565b60405190815260200160405180910390f35b341561057d57600080fd5b6101e9611128565b60405190815260200160405180910390f35b34156105a257600080fd5b6101e9600160a060020a0360043516611136565b60405190815260200160405180910390f35b34156105d357600080fd5b610299611155565b604051600160a060020a03909116815260200160405180910390f35b341561060257600080fd5b6101e9611164565b60405190815260200160405180910390f35b341561062757600080fd5b6102d7611172565b604051901515815260200160405180910390f35b341561064e57600080fd5b6101e9611193565b60405190815260200160405180910390f35b341561067357600080fd5b61020e6111a1565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561024b5780820151818401525b602001610232565b50505050905090810190601f1680156102785780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156106fe57600080fd5b6101e96111d8565b60405190815260200160405180910390f35b341561072357600080fd5b6102d7600160a060020a03600435166024356111dd565b604051901515815260200160405180910390f35b34156106fe57600080fd5b6101e96111d8565b60405190815260200160405180910390f35b6101d36108cb565b005b341561064e57600080fd5b6101e9611193565b60405190815260200160405180910390f35b34156107ad57600080fd5b6102996112c8565b604051600160a060020a03909116815260200160405180910390f35b34156107dc57600080fd5b6101e96112d7565b60405190815260200160405180910390f35b34156102f657600080fd5b6101e9610dab565b60405190815260200160405180910390f35b341561082657600080fd5b6101e9600160a060020a03600435811690602435166112e4565b60405190815260200160405180910390f35b341561085d57600080fd5b610299611311565b604051600160a060020a03909116815260200160405180910390f35b341561088c57600080fd5b6101e9611320565b60405190815260200160405180910390f35b34156108b157600080fd5b6101e9611325565b60405190815260200160405180910390f35b600080600080600080600960149054906101000a900460ff161515156108f057600080fd5b635a121b0042101561090157600080fd5b635a370500421061091157600080fd5b635a1b5580421015610937576729a2241af62c000034101561093257600080fd5b610956565b635a1b5580421061095657662386f26fc1000034101561095657600080fd5b5b5b60009550859450849350839250829150635a1b55804210156109c25761098534606463ffffffff61132a16565b95506109a9606461099d88600f63ffffffff61132a16565b9063ffffffff61136016565b94506109bb868663ffffffff61137c16565b9150610bef565b6109d334606463ffffffff61132a16565b6000549096506958f03ee118a13e8000009011610a1357610a0c606461099d88600a63ffffffff61132a16565b9063ffffffff61136016565b9350610adb565b6000546958f03ee118a13e80000090118015610a3c5750600054696e1d41a8f9ec350000009011155b15610a6a57610a0c606461099d88600563ffffffff61132a16565b9063ffffffff61136016565b9350610adb565b600054696e1d41a8f9ec3500000090118015610a93575060005469834a4470db372b8000009011155b15610ac157610a0c606461099d88600363ffffffff61132a16565b9063ffffffff61136016565b9350610adb565b60005469834a4470db372b800000901115610adb57600093505b5b5b5b678ac7230489e80000341015610af75760009250610bc9565b678ac7230489e800003410158015610b17575068056beae51fd2d1000034105b15610b4557610b3e606461099d88600263ffffffff61132a16565b9063ffffffff61136016565b9250610bc9565b68056beae51fd2d100003410158015610b66575068104379a17a98f1000034105b15610b9457610b3e606461099d88600363ffffffff61132a16565b9063ffffffff61136016565b9250610bc9565b68104379a17a98f100003410610bc957610bc6606461099d88600563ffffffff61132a16565b9063ffffffff61136016565b92505b5b5b5b610bec83610be0888763ffffffff61137c16565b9063ffffffff61137c16565b91505b600054610c02908363ffffffff61137c16565b905069a968163f0a57b400000081901015610c1c57600080fd5b6000818155600160a060020a0333168082526001602052604091829020805485019055907f683e70b6a9f424032d7674c2e5e89b26ce89b5fb05691f6ee777f89bb2ba831a9084905190815260200160405180910390a2600454600160a060020a03163480156108fc0290604051600060405180830381858888f193505050501515610ca757600080fd5b5b505050505050565b69a968163f0a57b400000081565b60408051908101604052600981527f5768616c6546554e440000000000000000000000000000000000000000000000602082015281565b600454600160a060020a031681565b6000811580610d365750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b1515610d4157600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b600381565b600954600090819074010000000000000000000000000000000000000000900460ff1615610ddd57600080fd5b60065433600160a060020a03908116911614610df857600080fd5b635a370500421180610e15575060005469a968163f0a57b4000000145b1515610e2057600080fd5b600054610e3e9069a968163f0a57b40000009063ffffffff6113a416565b91506000821115610ec157600054610e5c908363ffffffff61137c16565b600081815560098054600160a060020a0390811683526001602052604092839020805487019055905492935091909116907f683e70b6a9f424032d7674c2e5e89b26ce89b5fb05691f6ee777f89bb2ba831a9084905190815260200160405180910390a25b6009805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790555b5050565b6958f03ee118a13e80000081565b60005481565b60006064361015610f1f57600080fd5b60008211610f2c57600080fd5b600160a060020a03841660009081526001602052604090205482901015610f5257600080fd5b600160a060020a038085166000908152600260209081526040808320339094168352929052205482901015610f8657600080fd5b600160a060020a03831660009081526001602052604090205482810111610fac57600080fd5b600160a060020a0380851660008181526001602081815260408084208054899003905560028252808420338716855282528084208054899003905594881680845291905290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b9392505050565b69834a4470db372b80000081565b601281565b600754600160a060020a031681565b635a37050081565b600954600160a060020a031681565b691969368974c05b00000081565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111165780601f106110eb57610100808354040283529160200191611116565b820191906000526020600020905b8154815290600101906020018083116110f957829003601f168201915b505050505081565b600281565b600f81565b69202fefbf2d7c2f00000081565b600160a060020a0381166000908152600160205260409020545b919050565b600654600160a060020a031681565b696e1d41a8f9ec3500000081565b60095474010000000000000000000000000000000000000000900460ff1681565b6905150ae84a8cdf00000081565b60408051908101604052600581527f5748414c45000000000000000000000000000000000000000000000000000000602082015281565b600581565b600060443610156111ed57600080fd5b600082116111fa57600080fd5b600160a060020a0333166000908152600160205260409020548290101561122057600080fd5b600160a060020a0383166000908152600160205260409020548281011161124657600080fd5b600160a060020a033381166000818152600160205260408082208054879003905592861680825290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b92915050565b600581565b6905150ae84a8cdf00000081565b600554600160a060020a031681565b635a121b0081565b600381565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b600854600160a060020a031681565b606481565b600a81565b60008083151561133d5760009150611359565b5082820282848281151561134d57fe5b041461135557fe5b8091505b5092915050565b600080828481151561136e57fe5b0490508091505b5092915050565b60008282018381108015906113915750828110155b151561135557fe5b8091505b5092915050565b6000828211156113b057fe5b508082035b929150505600a165627a7a723058208456b4955223c2e7dffecc5c55ea9165d5acb591d236763a3b6bb3d122b76ee80029683e70b6a9f424032d7674c2e5e89b26ce89b5fb05691f6ee777f89bb2ba831a0000000000000000000000006e22c0e5300dc714c00d09daffd6924f7f255ad70000000000000000000000005160de406617e4c7a56bd0bf089be4c3f14c11a5000000000000000000000000c8f81e5e40ab052b3ae3c81551fd73a81d19c901000000000000000000000000967ab962819e7217b376e9e9682c51adee621b9f0000000000000000000000006e19d3c0ba458e2124c28e75065a56f1aaf4f5c30000000000000000000000006ab9ca2f8891264d6d801333d696f33827174ca5",
  "constructorArguments": "0000000000000000000000006e22c0e5300Dc714c00D09daFFD6924f7f255ad70000000000000000000000005160DE406617E4c7a56Bd0bf089Be4c3f14C11A5000000000000000000000000C8F81E5e40Ab052B3Ae3c81551fd73a81d19c901000000000000000000000000967Ab962819E7217B376e9e9682c51adEe621B9F0000000000000000000000006E19d3C0Ba458e2124c28E75065a56F1AAF4F5C30000000000000000000000006ab9cA2f8891264d6D801333d696F33827174CA5"
}