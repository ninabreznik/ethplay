{
  "address": "0xc1456a6bec0b8c8bbe89d5d022fab20b1b3e0e8f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GWCToken",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-26\n*/\n\npragma solidity ^0.4.12;\n \ncontract IMigrationContract {\n    function migrate(address addr, uint256 nas) returns (bool success);\n}\n \n/* 灵感来自于NAS  coin*/\ncontract SafeMath {\n \n \n    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\n        uint256 z = x + y;\n        assert((z >= x) && (z >= y));\n        return z;\n    }\n \n    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\n        assert(x >= y);\n        uint256 z = x - y;\n        return z;\n    }\n \n    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n        uint256 z = x * y;\n        assert((x == 0)||(z/x == y));\n        return z;\n    }\n \n}\n \ncontract Token {\n    uint256 public totalSupply;\n    function balanceOf(address _owner) constant returns (uint256 balance);\n    function transfer(address _to, uint256 _value) returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n    function approve(address _spender, uint256 _value) returns (bool success);\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n \n \n/*  ERC 20 token */\ncontract StandardToken is Token {\n \n    function transfer(address _to, uint256 _value) returns (bool success) {\n        if (balances[msg.sender] >= _value && _value > 0) {\n            balances[msg.sender] -= _value;\n            balances[_to] += _value;\n            Transfer(msg.sender, _to, _value);\n            return true;\n        } else {\n            return false;\n        }\n    }\n \n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n            balances[_to] += _value;\n            balances[_from] -= _value;\n            allowed[_from][msg.sender] -= _value;\n            Transfer(_from, _to, _value);\n            return true;\n        } else {\n            return false;\n        }\n    }\n \n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n \n    function approve(address _spender, uint256 _value) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n \n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n \n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n}\n \ncontract GWCToken is StandardToken, SafeMath {\n \n    // metadata\n    string  public constant name = \"GWC\";\n    string  public constant symbol = \"GWC\";\n    uint256 public constant decimals = 18;\n    string  public version = \"1.0\";\n \n    // contracts\n    address public ethFundDeposit;          // ETH存放地址\n    address public newContractAddr;         // token更新地址\n \n    uint256 public currentSupply;           // 正在售卖中的tokens数量\n    uint256 public tokenRaised = 0;         // 总的售卖数量token\n    uint256 public tokenMigrated = 0;     // 总的已经交易的 token\n    uint256 public tokenExchangeRate = 900;             // 625 BILIBILI 兑换 1 ETH\n \n    // events\n    event AllocateToken(address indexed _to, uint256 _value);   // 分配的私有交易token;\n    event IssueToken(address indexed _to, uint256 _value);      // 公开发行售卖的token;\n    event IncreaseSupply(uint256 _value);\n    event DecreaseSupply(uint256 _value);\n    event Migrate(address indexed _to, uint256 _value);\n \n    // 转换\n    function formatDecimals(uint256 _value) internal returns (uint256 ) {\n        return _value * 10 ** decimals;\n    }\n \n    // constructor\n    function GWCToken(\n        address _ethFundDeposit,\n        uint256 _currentSupply)\n    {\n        ethFundDeposit = _ethFundDeposit;\n        currentSupply = formatDecimals(_currentSupply);\n        totalSupply = formatDecimals(50000000);\n        balances[ethFundDeposit] = totalSupply;\n        if(currentSupply > totalSupply) throw;\n    }\n \n    modifier isOwner()  { require(msg.sender == ethFundDeposit); _; }\n \n    ///  设置token汇率\n    function setTokenExchangeRate(uint256 _tokenExchangeRate) isOwner external {\n        if (_tokenExchangeRate == 0) throw;\n        if (_tokenExchangeRate == tokenExchangeRate) throw;\n \n        tokenExchangeRate = _tokenExchangeRate;\n    }\n \n    /// @dev 超发token处理\n    function increaseSupply (uint256 _value) isOwner external {\n        uint256 value = formatDecimals(_value);\n        if (value + currentSupply > totalSupply) throw;\n        currentSupply = safeAdd(currentSupply, value);\n        IncreaseSupply(value);\n    }\n \n    /// @dev 被盗token处理\n    function decreaseSupply (uint256 _value) isOwner external {\n        uint256 value = formatDecimals(_value);\n        if (value + tokenRaised > currentSupply) throw;\n \n        currentSupply = safeSubtract(currentSupply, value);\n        DecreaseSupply(value);\n    }\n \n  \n    /// 开发了一个新的合同来接收token（或者更新token）\n    function setMigrateContract(address _newContractAddr) isOwner external {\n        if (_newContractAddr == newContractAddr) throw;\n        newContractAddr = _newContractAddr;\n    }\n \n    /// 设置新的所有者地址\n    function changeOwner(address _newFundDeposit) isOwner() external {\n        if (_newFundDeposit == address(0x0)) throw;\n        ethFundDeposit = _newFundDeposit;\n    }\n \n    ///转移token到新的合约\n    function migrate() external {\n        if(newContractAddr == address(0x0)) throw;\n \n        uint256 tokens = balances[msg.sender];\n        if (tokens == 0) throw;\n \n        balances[msg.sender] = 0;\n        tokenMigrated = safeAdd(tokenMigrated, tokens);\n \n        IMigrationContract newContract = IMigrationContract(newContractAddr);\n        if (!newContract.migrate(msg.sender, tokens)) throw;\n \n        Migrate(msg.sender, tokens);               // log it\n    }\n \n    /// 转账ETH 到BILIBILI团队\n    function transferETH() isOwner external {\n        if (this.balance == 0) throw;\n        if (!ethFundDeposit.send(this.balance)) throw;\n    }\n \n    ///  将BILIBILI token分配到预处理地址。\n    function allocateToken (address _addr, uint256 _eth) isOwner external {\n        if (_eth == 0) throw;\n        if (_addr == address(0x0)) throw;\n \n        uint256 tokens = safeMult(formatDecimals(_eth), tokenExchangeRate);\n        if (tokens + tokenRaised > currentSupply) throw;\n \n        tokenRaised = safeAdd(tokenRaised, tokens);\n        balances[_addr] += tokens;\n \n        AllocateToken(_addr, tokens);  // 记录token日志\n    }\n \n    /// 购买token\n    function () payable {\n\n        if (msg.value == 0) throw;\n\n        uint256 tokens = safeMult(msg.value, tokenExchangeRate);\n        if (tokens + tokenRaised > currentSupply) throw;\n\n        tokenRaised = safeAdd(tokenRaised, tokens);\n        balances[msg.sender] += tokens;\n        balances[ethFundDeposit] -= tokens;\n\n        IssueToken(msg.sender, tokens);  //记录日志\n    }\n}",
  "bytecode": "60606040526040805190810160405260038082527f312e30000000000000000000000000000000000000000000000000000000000060208301529080516200004c9291602001906200011f565b506000600755600060085561038460095534156200006957600080fd5b60405160408062000f1c833981016040528080519190602001805160048054600160a060020a031916600160a060020a0386161790559150620000bc90508164010000000062000112810262000cfb1704565b600655620000dc6302faf08064010000000062000cfb6200011282021704565b6000818155600454600160a060020a0316815260016020526040902081905560065411156200010a57600080fd5b5050620001c4565b670de0b6b3a76400000290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200016257805160ff191683800117855562000192565b8280016001018555821562000192579182015b828111156200019257825182559160200191906001019062000175565b50620001a0929150620001a4565b5090565b620001c191905b80821115620001a05760008155600101620001ab565b90565b610d4880620001d46000396000f30060606040526004361061013d5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146101e4578063095ea7b31461026e5780630a9ffdb7146102a457806318160ddd146102c857806323b872dd146102ed57806326a2157514610315578063313ce5671461032857806332513ce51461033b5780634172d0801461036a5780634a36df251461037d57806354fd4d501461039c5780636fe3a567146103af57806370a08231146103c2578063771282f6146103e15780638fd3ab80146103f457806395d89b41146101e457806398e52f9a14610407578063a6f9dae11461041d578063a81c3bdf1461043c578063a9059cbb1461044f578063b921e16314610471578063cb7b867314610487578063dd62ed3e1461049d578063e28d717b146104c2575b600034151561014b57600080fd5b610157346009546104d5565b90506006546007548201111561016c57600080fd5b61017860075482610500565b600755600160a060020a03338116600081815260016020526040808220805486019055600454909316815282902080548490039055907f7ba26a0f068612fb882b3272004674d21fed286c2c8c795cf653044690b32db49083905190815260200160405180910390a250005b34156101ef57600080fd5b6101f761051a565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561023357808201518382015260200161021b565b50505050905090810190601f1680156102605780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561027957600080fd5b610290600160a060020a0360043516602435610551565b604051901515815260200160405180910390f35b34156102af57600080fd5b6102c6600160a060020a03600435166024356105be565b005b34156102d357600080fd5b6102db61068d565b60405190815260200160405180910390f35b34156102f857600080fd5b610290600160a060020a0360043581169060243516604435610693565b341561032057600080fd5b6102db61078a565b341561033357600080fd5b6102db610790565b341561034657600080fd5b61034e610795565b604051600160a060020a03909116815260200160405180910390f35b341561037557600080fd5b6102db6107a4565b341561038857600080fd5b6102c6600160a060020a03600435166107aa565b34156103a757600080fd5b6101f761080f565b34156103ba57600080fd5b6102db6108ad565b34156103cd57600080fd5b6102db600160a060020a03600435166108b3565b34156103ec57600080fd5b6102db6108ce565b34156103ff57600080fd5b6102c66108d4565b341561041257600080fd5b6102c6600435610a14565b341561042857600080fd5b6102c6600160a060020a0360043516610a96565b341561044757600080fd5b61034e610af5565b341561045a57600080fd5b610290600160a060020a0360043516602435610b04565b341561047c57600080fd5b6102c6600435610ba7565b341561049257600080fd5b6102c6600435610c29565b34156104a857600080fd5b6102db600160a060020a0360043581169060243516610c64565b34156104cd57600080fd5b6102c6610c8f565b60008282028315806104f157508284828115156104ee57fe5b04145b15156104f957fe5b9392505050565b60008282018381108015906104f15750828110156104f957fe5b60408051908101604052600381527f4757430000000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60045460009033600160a060020a039081169116146105dc57600080fd5b8115156105e857600080fd5b600160a060020a03831615156105fd57600080fd5b61061161060983610cfb565b6009546104d5565b90506006546007548201111561062657600080fd5b61063260075482610500565b600755600160a060020a038316600081815260016020526040908190208054840190557f1aee3ddc9eba03c98b273cd914e999b78162e1ddd1c022045394f635a469e1059083905190815260200160405180910390a2505050565b60005481565b600160a060020a0383166000908152600160205260408120548290108015906106e35750600160a060020a0380851660009081526002602090815260408083203390941683529290522054829010155b80156106ef5750600082115b1561078057600160a060020a03808416600081815260016020908152604080832080548801905588851680845281842080548990039055600283528184203390961684529490915290819020805486900390559091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060016104f9565b5060009392505050565b60075481565b601281565b600554600160a060020a031681565b60095481565b60045433600160a060020a039081169116146107c557600080fd5b600554600160a060020a03828116911614156107e057600080fd5b6005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108a55780601f1061087a576101008083540402835291602001916108a5565b820191906000526020600020905b81548152906001019060200180831161088857829003601f168201915b505050505081565b60085481565b600160a060020a031660009081526001602052604090205490565b60065481565b6005546000908190600160a060020a031615156108f057600080fd5b600160a060020a033316600090815260016020526040902054915081151561091757600080fd5b600160a060020a03331660009081526001602052604081205560085461093d9083610500565b60085550600554600160a060020a03168063ad68ebf733846040517c010000000000000000000000000000000000000000000000000000000063ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156109b157600080fd5b5af115156109be57600080fd5b5050506040518051905015156109d357600080fd5b33600160a060020a03167fa59785389b00cbd19745afbe8d59b28e3161395c6b1e3525861a2b0dede0b90d8360405190815260200160405180910390a25050565b60045460009033600160a060020a03908116911614610a3257600080fd5b610a3b82610cfb565b905060065460075482011115610a5057600080fd5b610a5c60065482610d08565b6006557f9ecdebfa921d6ab8cecf7259ef30327664ad0d45d32fa3641089b00b533f2eee8160405190815260200160405180910390a15050565b60045433600160a060020a03908116911614610ab157600080fd5b600160a060020a0381161515610ac657600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600454600160a060020a031681565b600160a060020a033316600090815260016020526040812054829010801590610b2d5750600082115b15610b9f57600160a060020a033381166000818152600160205260408082208054879003905592861680825290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060016105b8565b5060006105b8565b60045460009033600160a060020a03908116911614610bc557600080fd5b610bce82610cfb565b905060005460065482011115610be357600080fd5b610bef60065482610500565b6006557ffaabf704b783af9e21c676de8e3e6e0c9c2260dce2ee299437ec9b70151ddaeb8160405190815260200160405180910390a15050565b60045433600160a060020a03908116911614610c4457600080fd5b801515610c5057600080fd5b600954811415610c5f57600080fd5b600955565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60045433600160a060020a03908116911614610caa57600080fd5b600160a060020a033016311515610cc057600080fd5b600454600160a060020a039081169030163180156108fc0290604051600060405180830381858888f193505050501515610cf957600080fd5b565b670de0b6b3a76400000290565b60008082841015610d1557fe5b50509003905600a165627a7a72305820aadcadc1ff47c5897bdba768196b6f7cb514d6165e2f1630b12468cda042d6990029000000000000000000000000b7b4f4ce7115b78045f7f8da17cddfa2ff65798f0000000000000000000000000000000000000000000000000000000002faf080",
  "constructorArguments": "000000000000000000000000b7b4f4ce7115b78045f7f8da17cddfa2ff65798f0000000000000000000000000000000000000000000000000000000002faf080"
}