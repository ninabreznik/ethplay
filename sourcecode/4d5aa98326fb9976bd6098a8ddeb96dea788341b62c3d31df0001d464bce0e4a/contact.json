{
  "address": "0xc5559887f94ea5c406b3f6d582dc738c4cf0eace",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ETHLottery",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-08-24\n*/\n\npragma solidity ^0.4.15;\n\ncontract ETHLotteryManagerInterface {\n    function register();\n}\n\ncontract ETHLotteryInterface {\n    function accumulate();\n}\n\ncontract ETHLottery {\n    bytes32 public name = 'ETHLottery - Last 1 Byte Lottery';\n    address public manager_address;\n    address public owner;\n    bool public open;\n    uint256 public jackpot;\n    uint256 public fee;\n    uint256 public owner_fee;\n    uint256 public create_block;\n    uint256 public result_block;\n    uint256 public winners_count;\n    bytes32 public result_hash;\n    bytes1 public result;\n    address public accumulated_from;\n    address public accumulate_to;\n\n    mapping (bytes1 => address[]) bettings;\n    mapping (address => uint256) credits;\n\n    event Balance(uint256 _balance);\n    event Result(bytes1 _result);\n    event Open(bool _open);\n    event Play(address indexed _sender, bytes1 _byte, uint256 _time);\n    event Withdraw(address indexed _sender, uint256 _amount, uint256 _time);\n    event Destroy();\n    event Accumulate(address _accumulate_to, uint256 _amount);\n\n    function ETHLottery(address _manager, uint256 _fee, uint256 _jackpot, uint256 _owner_fee, address _accumulated_from) {\n        owner = msg.sender;\n        open = true;\n        create_block = block.number;\n        manager_address = _manager;\n        fee = _fee;\n        jackpot = _jackpot;\n        owner_fee = _owner_fee;\n        // accumulate\n        if (_accumulated_from != owner) {\n            accumulated_from = _accumulated_from;\n            ETHLotteryInterface lottery = ETHLotteryInterface(accumulated_from);\n            lottery.accumulate();\n        }\n        // register with manager\n        ETHLotteryManagerInterface manager = ETHLotteryManagerInterface(manager_address);\n        manager.register();\n        Open(open);\n    }\n\n    modifier isOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier isOriginalOwner() {\n        // used tx.origin on purpose instead of\n        // msg.sender, as we want to get the original\n        // starter of the transaction to be owner\n        require(tx.origin == owner);\n        _;\n    }\n\n    modifier isOpen() {\n        require(open);\n        _;\n    }\n\n    modifier isClosed() {\n        require(!open);\n        _;\n    }\n\n    modifier isPaid() {\n        require(msg.value >= fee);\n        _;\n    }\n\n    modifier hasPrize() {\n        require(credits[msg.sender] > 0);\n        _;\n    }\n\n    modifier isAccumulated() {\n        require(result_hash != 0 && winners_count == 0);\n        _;\n    }\n\n    modifier hasResultHash() {\n        require(\n            block.number >= result_block &&\n            block.number <= result_block + 256 &&\n            block.blockhash(result_block) != result_hash\n            );\n        _;\n    }\n\n    function play(bytes1 _byte) payable isOpen isPaid returns (bool) {\n        bettings[_byte].push(msg.sender);\n        if (this.balance >= jackpot) {\n            uint256 owner_fee_amount = (this.balance * owner_fee) / 100;\n            // this is the transaction which\n            // will generate the block used\n            // to count until the 10th in order\n            // to get the lottery result.\n            if (!owner.send(owner_fee_amount)) {\n                return false;\n            }\n            open = false;\n            // block offset hardcoded to 10\n            result_block = block.number + 10;\n            Open(open);\n        }\n        Balance(this.balance);\n        Play(msg.sender, _byte, now);\n        return true;\n    }\n\n    // This method is only used if we miss the 256th block\n    // containing the result hash, lottery() should be used instead\n    // this method as this is duplicated from lottery()\n    function manual_lottery(bytes32 _result_hash) isClosed isOwner {\n        result_hash = _result_hash;\n        result = result_hash[31];\n        address[] storage winners = bettings[result];\n        winners_count = winners.length;\n        if (winners_count > 0) {\n            uint256 credit = this.balance / winners_count;\n            for (uint256 i = 0; i < winners_count; i++) {\n                credits[winners[i]] = credit;\n            }\n        }\n        Result(result);\n    }\n\n    function lottery() isClosed hasResultHash isOwner {\n        result_hash = block.blockhash(result_block);\n        // get last byte (31st) from block hash as result\n        result = result_hash[31];\n        address[] storage winners = bettings[result];\n        winners_count = winners.length;\n        if (winners_count > 0) {\n            uint256 credit = this.balance / winners_count;\n            for (uint256 i = 0; i < winners_count; i++) {\n                credits[winners[i]] = credit;\n            }\n        }\n        Result(result);\n    }\n\n    function withdraw() isClosed hasPrize returns (bool) {\n        uint256 credit = credits[msg.sender];\n        // zero credit before send preventing re-entrancy\n        // as msg.sender can be a contract and call us back\n        credits[msg.sender] = 0;\n        if (!msg.sender.send(credit)) {\n            // transfer failed, return credit for withdraw\n            credits[msg.sender] = credit;\n            return false;\n        }\n        Withdraw(msg.sender, credit, now);\n        return true;\n    }\n\n    function accumulate() isOriginalOwner isClosed isAccumulated {\n        accumulate_to = msg.sender;\n        if (msg.sender.send(this.balance)) {\n            Accumulate(msg.sender, this.balance);\n        }\n    }\n\n    function destruct() isClosed isOwner {\n        Destroy();\n        selfdestruct(owner);\n    }\n}",
  "bytecode": "60606040527f4554484c6f7474657279202d204c61737420312042797465204c6f7474657279600090600019169055341561003957600080fd5b60405160a0806117fb833981016040528080519060200190919080519060200190919080519060200190919080519060200190919080519060200190919050505b60008033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600260146101000a81548160ff0219169083151502179055504360068190555086600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550856004819055508460038190555083600581905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151561026b5782600a60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600a60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691508173ffffffffffffffffffffffffffffffffffffffff1663a53aeb4e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b151561025657600080fd5b6102c65a03f1151561026757600080fd5b5050505b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16631aa3a0086040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15156102f357600080fd5b6102c65a03f1151561030457600080fd5b5050507fc15f25c4eb6ac5b9dc23661b850cbdb3ee36aebed198ad870ab929bae77142de600260149054906101000a900460ff16604051808215151515815260200191505060405180910390a15b505050505050505b611492806103696000396000f30060606040523615610110576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461011557806309fca9511461014657806310e80ded1461019b57806314ce4059146101f05780631800ed8e146102195780632b68b9c61461026e5780633ccfd60b14610283578063494d93cc146102b05780634f01d77e146102d957806365372147146103005780636b31ee011461036d5780638da5cb5b1461039657806394e47e61146103eb578063a53aeb4e14610414578063ba13a57214610429578063be3e33d51461043e578063ca92a13614610490578063ddca3f43146104c1578063fbe6a9b2146104ea578063fcfff16f14610513575b600080fd5b341561012057600080fd5b610128610540565b60405180826000191660001916815260200191505060405180910390f35b341561015157600080fd5b610159610546565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156101a657600080fd5b6101ae61056c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156101fb57600080fd5b610203610592565b6040518082815260200191505060405180910390f35b341561022457600080fd5b61022c610598565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561027957600080fd5b6102816105be565b005b341561028e57600080fd5b6102966106a1565b604051808215151515815260200191505060405180910390f35b34156102bb57600080fd5b6102c361087e565b6040518082815260200191505060405180910390f35b34156102e457600080fd5b6102fe600480803560001916906020019091905050610884565b005b341561030b57600080fd5b610313610b8c565b60405180827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b341561037857600080fd5b610380610bbe565b6040518082815260200191505060405180910390f35b34156103a157600080fd5b6103a9610bc4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156103f657600080fd5b6103fe610bea565b6040518082815260200191505060405180910390f35b341561041f57600080fd5b610427610bf0565b005b341561043457600080fd5b61043c610daa565b005b61047660048080357effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190919050506110f1565b604051808215151515815260200191505060405180910390f35b341561049b57600080fd5b6104a36113f0565b60405180826000191660001916815260200191505060405180910390f35b34156104cc57600080fd5b6104d46113f6565b6040518082815260200191505060405180910390f35b34156104f557600080fd5b6104fd6113fc565b6040518082815260200191505060405180910390f35b341561051e57600080fd5b610526611402565b604051808215151515815260200191505060405180910390f35b60005481565b600a60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260149054906101000a900460ff161515156105da57600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561063657600080fd5b7ff58fef8e187ef8dfd7bef096c1ef3e4f3c54f98d95b8ad5659349b07e61204df60405160405180910390a1600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b5b5b565b600080600260149054906101000a900460ff161515156106c057600080fd5b6000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411151561070e57600080fd5b600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050151561081d5780600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060009150610878565b3373ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688242604051808381526020018281526020019250505060405180910390a2600191505b5b5b5090565b60075481565b6000806000600260149054906101000a900460ff161515156108a557600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561090157600080fd5b8360098160001916905550600954601f60208110151561091d57fe5b1a7f010000000000000000000000000000000000000000000000000000000000000002600a60006101000a81548160ff02191690837f010000000000000000000000000000000000000000000000000000000000000090040217905550600c6000600a60009054906101000a90047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000209250828054905060088190555060006008541115610ada576008543073ffffffffffffffffffffffffffffffffffffffff1631811515610a3b57fe5b049150600090505b600854811015610ad95781600d60008584815481101515610a6057fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8080600101915050610a43565b5b7fce2892841501496330839ba407f44943da10eb31b71db5c90df80c1ae1d7d1d3600a60009054906101000a90047f01000000000000000000000000000000000000000000000000000000000000000260405180827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390a15b5b5b50505050565b600a60009054906101000a90047f01000000000000000000000000000000000000000000000000000000000000000281565b60035481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16141515610c4c57600080fd5b600260149054906101000a900460ff16151515610c6857600080fd5b60006001026009546000191614158015610c8457506000600854145b1515610c8f57600080fd5b33600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f1935050505015610da4577f7e98bc8f89e5efd34c3306b5f212781ef818e91840831c7b7947cf060865ffc7333073ffffffffffffffffffffffffffffffffffffffff1631604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b5b5b5b5b565b6000806000600260149054906101000a900460ff16151515610dcb57600080fd5b6007544310158015610de35750610100600754014311155b8015610dfc575060095460001916600754406000191614155b1515610e0757600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e6357600080fd5b6007544060098160001916905550600954601f602081101515610e8257fe5b1a7f010000000000000000000000000000000000000000000000000000000000000002600a60006101000a81548160ff02191690837f010000000000000000000000000000000000000000000000000000000000000090040217905550600c6000600a60009054906101000a90047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020925082805490506008819055506000600854111561103f576008543073ffffffffffffffffffffffffffffffffffffffff1631811515610fa057fe5b049150600090505b60085481101561103e5781600d60008584815481101515610fc557fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8080600101915050610fa8565b5b7fce2892841501496330839ba407f44943da10eb31b71db5c90df80c1ae1d7d1d3600a60009054906101000a90047f01000000000000000000000000000000000000000000000000000000000000000260405180827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390a15b5b5b5b505050565b600080600260149054906101000a900460ff16151561110f57600080fd5b600454341015151561112057600080fd5b600c6000847effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002080548060010182816111899190611415565b916000526020600020900160005b33909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506003543073ffffffffffffffffffffffffffffffffffffffff16311015156112fb5760646005543073ffffffffffffffffffffffffffffffffffffffff16310281151561122257fe5b049050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050151561128b57600091506113e8565b6000600260146101000a81548160ff021916908315150217905550600a43016007819055507fc15f25c4eb6ac5b9dc23661b850cbdb3ee36aebed198ad870ab929bae77142de600260149054906101000a900460ff16604051808215151515815260200191505060405180910390a15b7fe8d947d7ebdd7b8b8fa2ad2022c7591418ac32d8c29c5f8a8fc9de52ffa540923073ffffffffffffffffffffffffffffffffffffffff16316040518082815260200191505060405180910390a13373ffffffffffffffffffffffffffffffffffffffff167fa59307e8fe3d4b654d8d230e2ca86c8cfd44a732b78879c2afed9c90c8f00c1a844260405180837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020018281526020019250505060405180910390a2600191505b5b5b50919050565b60095481565b60045481565b60085481565b600260149054906101000a900460ff1681565b81548183558181151161143c5781836000526020600020918201910161143b9190611441565b5b505050565b61146391905b8082111561145f576000816000905550600101611447565b5090565b905600a165627a7a723058209a9dd3e92d1f5db9b236d115510037038fdb6fd8f9559a796d00f54ae97e1e8500290000000000000000000000000fd692e0d7629f169230c513a52934b70f1911bc00000000000000000000000000000000000000000000000000005af3107a400000000000000000000000000000000000000000000000000000005af3107a400000000000000000000000000000000000000000000000000000000000000000020000000000000000000000003a44fc70077511f4ea72171dd000021a2133158e",
  "constructorArguments": "0000000000000000000000000fd692e0d7629f169230c513a52934b70f1911bc00000000000000000000000000000000000000000000000000005af3107a400000000000000000000000000000000000000000000000000000005af3107a400000000000000000000000000000000000000000000000000000000000000000020000000000000000000000003a44fc70077511f4ea72171dd000021a2133158e"
}