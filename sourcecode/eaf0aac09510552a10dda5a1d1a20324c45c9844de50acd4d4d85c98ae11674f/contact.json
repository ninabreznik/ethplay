{
  "address": "0x2590e9238811b929135a406f3de5d0351cdd1bac",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NbtToken",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-05\n*/\n\npragma solidity ^0.4.17;\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\npragma solidity ^0.4.21;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n\n    uint256 totalSupply_;\n\n    /**\n    * @dev total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n\n}\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}\n\n/**\n * @title Roles\n * @author Francisco Giordano (@frangio)\n * @dev Library for managing addresses assigned to a Role.\n *      See RBAC.sol for example usage.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an address access to this role\n     */\n    function add(Role storage role, address addr)\n    internal\n    {\n        role.bearer[addr] = true;\n    }\n\n    /**\n     * @dev remove an address' access to this role\n     */\n    function remove(Role storage role, address addr)\n    internal\n    {\n        role.bearer[addr] = false;\n    }\n\n    /**\n     * @dev check if an address has this role\n     * // reverts\n     */\n    function check(Role storage role, address addr)\n    view\n    internal\n    {\n        require(has(role, addr));\n    }\n\n    /**\n     * @dev check if an address has this role\n     * @return bool\n     */\n    function has(Role storage role, address addr)\n    view\n    internal\n    returns (bool)\n    {\n        return role.bearer[addr];\n    }\n}\n\ncontract RBAC {\n    using Roles for Roles.Role;\n\n    mapping (string => Roles.Role) private roles;\n\n    event RoleAdded(address addr, string roleName);\n    event RoleRemoved(address addr, string roleName);\n\n    /**\n     * @dev reverts if addr does not have role\n     * @param addr address\n     * @param roleName the name of the role\n     * // reverts\n     */\n    function checkRole(address addr, string roleName)\n    view\n    public\n    {\n        roles[roleName].check(addr);\n    }\n\n    /**\n     * @dev determine if addr has role\n     * @param addr address\n     * @param roleName the name of the role\n     * @return bool\n     */\n    function hasRole(address addr, string roleName)\n    view\n    public\n    returns (bool)\n    {\n        return roles[roleName].has(addr);\n    }\n\n    /**\n     * @dev add a role to an address\n     * @param addr address\n     * @param roleName the name of the role\n     */\n    function addRole(address addr, string roleName)\n    internal\n    {\n        roles[roleName].add(addr);\n        emit RoleAdded(addr, roleName);\n    }\n\n    /**\n     * @dev remove a role from an address\n     * @param addr address\n     * @param roleName the name of the role\n     */\n    function removeRole(address addr, string roleName)\n    internal\n    {\n        roles[roleName].remove(addr);\n        emit RoleRemoved(addr, roleName);\n    }\n\n    /**\n     * @dev modifier to scope access to a single role (uses msg.sender as addr)\n     * @param roleName the name of the role\n     * // reverts\n     */\n    modifier onlyRole(string roleName)\n    {\n        checkRole(msg.sender, roleName);\n        _;\n    }\n\n    /**\n     * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\n     * @param roleNames the names of the roles to scope access to\n     * // reverts\n     *\n     * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\n     *  see: https://github.com/ethereum/solidity/issues/2467\n     */\n    // modifier onlyRoles(string[] roleNames) {\n    //     bool hasAnyRole = false;\n    //     for (uint8 i = 0; i < roleNames.length; i++) {\n    //         if (hasRole(msg.sender, roleNames[i])) {\n    //             hasAnyRole = true;\n    //             break;\n    //         }\n    //     }\n\n    //     require(hasAnyRole);\n\n    //     _;\n    // }\n}\n\ncontract RBACWithAdmin is RBAC {\n    /**\n     * A constant role name for indicating admins.\n     */\n    string public constant ROLE_ADMIN = \"admin\";\n\n    /**\n     * @dev modifier to scope access to admins\n     * // reverts\n     */\n    modifier onlyAdmin()\n    {\n        checkRole(msg.sender, ROLE_ADMIN);\n        _;\n    }\n\n    /**\n     * @dev constructor. Sets msg.sender as admin by default\n     */\n    function RBACWithAdmin()\n    public\n    {\n        addRole(msg.sender, ROLE_ADMIN);\n    }\n\n    /**\n     * @dev add a role to an address\n     * @param addr address\n     * @param roleName the name of the role\n     */\n    function adminAddRole(address addr, string roleName)\n    onlyAdmin\n    public\n    {\n        addRole(addr, roleName);\n    }\n\n    /**\n     * @dev remove a role from an address\n     * @param addr address\n     * @param roleName the name of the role\n     */\n    function adminRemoveRole(address addr, string roleName)\n    onlyAdmin\n    public\n    {\n        removeRole(addr, roleName);\n    }\n}\n\ncontract NbtToken is StandardToken, Ownable, RBACWithAdmin {\n\n    /*** EVENTS ***/\n\n    event ExchangeableTokensInc(address indexed from, uint256 amount);\n    event ExchangeableTokensDec(address indexed to, uint256 amount);\n\n    event CirculatingTokensInc(address indexed from, uint256 amount);\n    event CirculatingTokensDec(address indexed to, uint256 amount);\n\n    event SaleableTokensInc(address indexed from, uint256 amount);\n    event SaleableTokensDec(address indexed to, uint256 amount);\n\n    event StockTokensInc(address indexed from, uint256 amount);\n    event StockTokensDec(address indexed to, uint256 amount);\n\n    event BbAddressUpdated(address indexed ethereum_address, string bb_address);\n\n    /*** CONSTANTS ***/\n\n    string public name = 'NiceBytes';\n    string public symbol = 'NBT';\n\n    uint256 public decimals = 8;\n\n    uint256 public INITIAL_SUPPLY = 10000000000 * 10**decimals; // One time total supply\n    uint256 public AIRDROP_START_AT = 1525780800; // May 8, 12:00 UTC\n    uint256 public AIRDROPS_COUNT = 82;\n    uint256 public AIRDROPS_PERIOD = 86400;\n    uint256 public CIRCULATING_BASE = 2000000000 * 10**decimals;\n    uint256 public MAX_AIRDROP_VOLUME = 2; // %\n    uint256 public INITIAL_EXCHANGEABLE_TOKENS_VOLUME = 1200000000 * 10**decimals;\n    uint256 public MAX_AIRDROP_TOKENS = 8000000000 * 10**decimals; // 8 billions\n    uint256 public MAX_SALE_VOLUME = 800000000 * 10**decimals;\n    uint256 public EXCHANGE_COMMISSION = 200 * 10**decimals; // NBT\n    uint256 public MIN_TOKENS_TO_EXCHANGE = 1000 * 10**decimals; // should be bigger than EXCHANGE_COMMISSION\n    uint256 public EXCHANGE_RATE = 1000;\n    string constant ROLE_EXCHANGER = \"exchanger\";\n\n\n    /*** STORAGE ***/\n\n    uint256 public exchangeableTokens;\n    uint256 public exchangeableTokensFromSale;\n    uint256 public exchangeableTokensFromStock;\n    uint256 public circulatingTokens;\n    uint256 public circulatingTokensFromSale;\n    uint256 public saleableTokens;\n    uint256 public stockTokens;\n    address public crowdsale;\n    address public exchange_commission_wallet;\n\n    mapping(address => uint256) exchangeBalances;\n    mapping(address => string) bbAddresses;\n\n    /*** MODIFIERS ***/\n\n    modifier onlyAdminOrExchanger()\n    {\n        require(\n            hasRole(msg.sender, ROLE_ADMIN) ||\n            hasRole(msg.sender, ROLE_EXCHANGER)\n        );\n        _;\n    }\n\n    modifier onlyCrowdsale()\n    {\n        require(\n            address(msg.sender) == address(crowdsale)\n        );\n        _;\n    }\n\n    /*** CONSTRUCTOR ***/\n\n    function NbtToken() public {\n        totalSupply_ = INITIAL_SUPPLY;\n        balances[this] = INITIAL_SUPPLY;\n        stockTokens = INITIAL_SUPPLY;\n        emit StockTokensInc(address(0), INITIAL_SUPPLY);\n        addRole(msg.sender, ROLE_EXCHANGER);\n    }\n\n    /*** PUBLIC AND EXTERNAL FUNCTIONS ***/\n\n    /*** getters  ***/\n\n    function getBbAddress(address _addr) public view returns (string _bbAddress) {\n        return bbAddresses[_addr];\n    }\n\n    function howMuchTokensAvailableForExchangeFromStock() public view returns (uint256) {\n        uint256 _volume = INITIAL_EXCHANGEABLE_TOKENS_VOLUME;\n        uint256 _airdrops = 0;\n\n        if (now > AIRDROP_START_AT) {\n            _airdrops = (now.sub(AIRDROP_START_AT)).div(AIRDROPS_PERIOD);\n            _airdrops = _airdrops.add(1);\n        }\n\n        if (_airdrops > AIRDROPS_COUNT) {\n            _airdrops = AIRDROPS_COUNT;\n        }\n\n        uint256 _from_airdrops = 0;\n        uint256 _base = CIRCULATING_BASE;\n        for (uint256 i = 1; i <= _airdrops; i++) {\n            _from_airdrops = _from_airdrops.add(_base.mul(MAX_AIRDROP_VOLUME).div(100));\n            _base = _base.add(_base.mul(MAX_AIRDROP_VOLUME).div(100));\n        }\n        if (_from_airdrops > MAX_AIRDROP_TOKENS) {\n            _from_airdrops = MAX_AIRDROP_TOKENS;\n        }\n\n        _volume = _volume.add(_from_airdrops);\n\n        return _volume;\n    }\n\n    /*** setters  ***/\n\n    function setBbAddress(string _bbAddress) public returns (bool) {\n        bbAddresses[msg.sender] = _bbAddress;\n        emit BbAddressUpdated(msg.sender, _bbAddress);\n        return true;\n    }\n\n    function setCrowdsaleAddress(address _addr) onlyAdmin public returns (bool) {\n        require(_addr != address(0) && _addr != address(this));\n        crowdsale = _addr;\n        return true;\n    }\n\n    function setExchangeCommissionAddress(address _addr) onlyAdmin public returns (bool) {\n        require(_addr != address(0) && _addr != address(this));\n        exchange_commission_wallet = _addr;\n        return true;\n    }\n\n    /*** sale methods  ***/\n\n    // For balancing of the sale limit between two networks\n    function moveTokensFromSaleToExchange(uint256 _amount) onlyAdminOrExchanger public returns (bool) {\n        require(_amount <= balances[crowdsale]);\n        balances[crowdsale] = balances[crowdsale].sub(_amount);\n        saleableTokens = saleableTokens.sub(_amount);\n        exchangeableTokensFromSale = exchangeableTokensFromSale.add(_amount);\n        balances[address(this)] = balances[address(this)].add(_amount);\n        exchangeableTokens = exchangeableTokens.add(_amount);\n        emit SaleableTokensDec(address(this), _amount);\n        emit ExchangeableTokensInc(address(crowdsale), _amount);\n        return true;\n    }\n\n    function moveTokensFromSaleToCirculating(address _to, uint256 _amount) onlyCrowdsale public returns (bool) {\n        saleableTokens = saleableTokens.sub(_amount);\n        circulatingTokensFromSale = circulatingTokensFromSale.add(_amount) ;\n        circulatingTokens = circulatingTokens.add(_amount) ;\n        emit SaleableTokensDec(_to, _amount);\n        emit CirculatingTokensInc(address(crowdsale), _amount);\n        return true;\n    }\n\n    /*** stock methods  ***/\n\n    function moveTokensFromStockToExchange(uint256 _amount) onlyAdminOrExchanger public returns (bool) {\n        require(_amount <= stockTokens);\n        require(exchangeableTokensFromStock + _amount <= howMuchTokensAvailableForExchangeFromStock());\n        stockTokens = stockTokens.sub(_amount);\n        exchangeableTokens = exchangeableTokens.add(_amount);\n        exchangeableTokensFromStock = exchangeableTokensFromStock.add(_amount);\n        emit StockTokensDec(address(this), _amount);\n        emit ExchangeableTokensInc(address(this), _amount);\n        return true;\n    }\n\n    function moveTokensFromStockToSale(uint256 _amount) onlyAdminOrExchanger public returns (bool) {\n        require(crowdsale != address(0) && crowdsale != address(this));\n        require(_amount <= stockTokens);\n        require(_amount + exchangeableTokensFromSale + saleableTokens + circulatingTokensFromSale <= MAX_SALE_VOLUME);\n\n        stockTokens = stockTokens.sub(_amount);\n        saleableTokens = saleableTokens.add(_amount);\n        balances[address(this)] = balances[address(this)].sub(_amount);\n        balances[crowdsale] = balances[crowdsale].add(_amount);\n\n        emit Transfer(address(this), crowdsale, _amount);\n        emit StockTokensDec(address(crowdsale), _amount);\n        emit SaleableTokensInc(address(this), _amount);\n        return true;\n    }\n\n    /*** exchange methods  ***/\n\n    function getTokensFromExchange(address _to, uint256 _amount) onlyAdminOrExchanger public returns (bool) {\n        require(_amount <= exchangeableTokens);\n        require(_amount <= balances[address(this)]);\n\n        exchangeableTokens = exchangeableTokens.sub(_amount);\n        circulatingTokens = circulatingTokens.add(_amount);\n\n        balances[address(this)] = balances[address(this)].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n\n        emit Transfer(address(this), _to, _amount);\n        emit ExchangeableTokensDec(_to, _amount);\n        emit CirculatingTokensInc(address(this), _amount);\n        return true;\n    }\n\n    function sendTokensToExchange(uint256 _amount) public returns (bool) {\n        require(_amount <= balances[msg.sender]);\n        require(_amount >= MIN_TOKENS_TO_EXCHANGE);\n        require(!stringsEqual(bbAddresses[msg.sender], ''));\n        require(exchange_commission_wallet != address(0) && exchange_commission_wallet != address(this));\n\n        balances[msg.sender] = balances[msg.sender].sub(_amount); // ! before sub(_commission)\n\n        uint256 _commission = EXCHANGE_COMMISSION + _amount % EXCHANGE_RATE;\n        _amount = _amount.sub(_commission);\n\n        circulatingTokens = circulatingTokens.sub(_amount);\n        exchangeableTokens = exchangeableTokens.add(_amount);\n        exchangeBalances[msg.sender] = exchangeBalances[msg.sender].add(_amount);\n\n        balances[address(this)] = balances[address(this)].add(_amount);\n        balances[exchange_commission_wallet] = balances[exchange_commission_wallet].add(_commission);\n\n        emit Transfer(msg.sender, address(exchange_commission_wallet), _commission);\n        emit Transfer(msg.sender, address(this), _amount);\n        emit CirculatingTokensDec(address(this), _amount);\n        emit ExchangeableTokensInc(msg.sender, _amount);\n        return true;\n    }\n\n    function exchangeBalanceOf(address _addr) public view returns (uint256 _tokens) {\n        return exchangeBalances[_addr];\n    }\n\n    function decExchangeBalanceOf(address _addr, uint256 _amount) onlyAdminOrExchanger public returns (bool) {\n        require (exchangeBalances[_addr] > 0);\n        require (exchangeBalances[_addr] >= _amount);\n        exchangeBalances[_addr] = exchangeBalances[_addr].sub(_amount);\n        return true;\n    }\n\n    /*** INTERNAL FUNCTIONS ***/\n\n    function stringsEqual(string storage _a, string memory _b) internal view returns (bool) {\n        bytes storage a = bytes(_a);\n        bytes memory b = bytes(_b);\n        if (a.length != b.length)\n            return false;\n        for (uint256 i = 0; i < a.length; i ++)\n            if (a[i] != b[i])\n                return false;\n        return true;\n    }\n}",
  "bytecode": "60c0604052600960808190527f4e6963654279746573000000000000000000000000000000000000000000000060a09081526200004091600591906200037f565b506040805180820190915260038082527f4e42540000000000000000000000000000000000000000000000000000000000602090920191825262000087916006916200037f565b5060086007819055670de0b6b3a76400009055635af191406009556052600a5562015180600b556702c68af0bb140000600c556002600d556701aa535d3d0c0000600e55670b1a2bc2ec500000600f5567011c37937e0800006010556404a817c80060115564174876e8006012556103e86013553480156200010857600080fd5b5060038054600160a060020a03191633600160a060020a0381169190911790915560408051808201909152600581527f61646d696e000000000000000000000000000000000000000000000000000000602082015262000172919064010000000062000224810204565b6008546001819055600160a060020a033016600090815260208181526040808320849055601a84905580519384525191927fe6490dc18ef83a2f46b07eaccef4f5a3ec93915ba3e82b90037ef360438044dd929081900390910190a26200021e336040805190810160405280600981526020017f65786368616e676572000000000000000000000000000000000000000000000081525062000224640100000000026401000000009004565b62000424565b620002a0826004836040518082805190602001908083835b602083106200025d5780518252601f1990920191602091820191016200023c565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220929150506401000000006200035a8102620025dc1704565b7fbfec83d64eaa953f2708271a023ab9ee82057f8f3578d548c1a4ba0b5b70048982826040518083600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b838110156200031a57818101518382015260200162000300565b50505050905090810190601f168015620003485780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050565b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003c257805160ff1916838001178555620003f2565b82800160010185558215620003f2579182015b82811115620003f2578251825591602001919060010190620003d5565b506200040092915062000404565b5090565b6200042191905b808211156200040057600081556001016200040b565b90565b61270580620004346000396000f3006080604052600436106102715763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461027657806307d3d94114610300578063095ea7b3146103275780630988ca8c1461035f57806314a8bd0d146103c857806318160ddd146103dd5780631991d6ac146103f25780631dd95a981461040a5780631f35bc401461041f57806320b4fc2914610440578063217fe6c61461049957806323b872dd146105005780632ff2e9dc1461052a578063313ce5671461053f5780633902b9fc1461055457806340cde4031461057557806341a1d66c14610596578063457ce032146105ae5780636095c2d5146105d257806366188463146105f35780636d399eb71461061757806370a082311461062c57806372e6e21a1461064d5780637c5bfe811461066257806388cee87e1461067757806388efedf4146106de5780638be97285146106f35780638da5cb5b14610708578063919203a01461073957806395d89b41146107515780639a586d26146107665780639c1e03a01461077b578063a870ddc214610790578063a9059cbb146107b4578063ab9d8b8b146107d8578063afa5e56a146107ed578063b25fa92c14610811578063b6a8933b14610878578063d391014b1461088d578063d422e810146108a2578063d73dd623146108b7578063daa6f417146108db578063dd62ed3e146108f0578063df41765e14610917578063e1ac48ad1461092c578063e69b9b6514610941578063eb8136f314610956578063ef2cc9771461096b578063f2fde38b14610980578063f3cbe7b5146109a1578063f7a084c0146109b6578063fa9ce7e7146109cb575b600080fd5b34801561028257600080fd5b5061028b6109e3565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102c55781810151838201526020016102ad565b50505050905090810190601f1680156102f25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561030c57600080fd5b50610315610a71565b60408051918252519081900360200190f35b34801561033357600080fd5b5061034b600160a060020a0360043516602435610a77565b604080519115158252519081900360200190f35b34801561036b57600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526103c6958335600160a060020a0316953695604494919390910191908190840183828082843750949750610ae29650505050505050565b005b3480156103d457600080fd5b50610315610b50565b3480156103e957600080fd5b50610315610b56565b3480156103fe57600080fd5b5061034b600435610b5d565b34801561041657600080fd5b50610315610d41565b34801561042b57600080fd5b5061034b600160a060020a0360043516610d47565b34801561044c57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261034b943694929360249392840191908190840183828082843750949750610dda9650505050505050565b3480156104a557600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261034b958335600160a060020a0316953695604494919390910191908190840183828082843750949750610eae9650505050505050565b34801561050c57600080fd5b5061034b600160a060020a0360043581169060243516604435610f21565b34801561053657600080fd5b5061031561108f565b34801561054b57600080fd5b50610315611095565b34801561056057600080fd5b5061028b600160a060020a036004351661109b565b34801561058157600080fd5b50610315600160a060020a0360043516611146565b3480156105a257600080fd5b5061034b600435611161565b3480156105ba57600080fd5b5061034b600160a060020a0360043516602435611445565b3480156105de57600080fd5b5061034b600160a060020a0360043516611638565b3480156105ff57600080fd5b5061034b600160a060020a03600435166024356116cb565b34801561062357600080fd5b506103156117c4565b34801561063857600080fd5b50610315600160a060020a03600435166117ca565b34801561065957600080fd5b506103156117e5565b34801561066e57600080fd5b506103156117eb565b34801561068357600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526103c6958335600160a060020a03169536956044949193909101919081908401838280828437509497506117f19650505050505050565b3480156106ea57600080fd5b50610315611825565b3480156106ff57600080fd5b5061031561182b565b34801561071457600080fd5b5061071d611831565b60408051600160a060020a039092168252519081900360200190f35b34801561074557600080fd5b5061034b600435611840565b34801561075d57600080fd5b5061028b611a6a565b34801561077257600080fd5b50610315611ac5565b34801561078757600080fd5b5061071d611acb565b34801561079c57600080fd5b5061034b600160a060020a0360043516602435611ada565b3480156107c057600080fd5b5061034b600160a060020a0360043516602435611bc4565b3480156107e457600080fd5b50610315611cab565b3480156107f957600080fd5b5061034b600160a060020a0360043516602435611cb1565b34801561081d57600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526103c6958335600160a060020a0316953695604494919390910191908190840183828082843750949750611dae9650505050505050565b34801561088457600080fd5b50610315611de2565b34801561089957600080fd5b5061028b611de8565b3480156108ae57600080fd5b5061071d611e0a565b3480156108c357600080fd5b5061034b600160a060020a0360043516602435611e19565b3480156108e757600080fd5b50610315611ebb565b3480156108fc57600080fd5b50610315600160a060020a0360043581169060243516611fc1565b34801561092357600080fd5b50610315611fec565b34801561093857600080fd5b50610315611ff2565b34801561094d57600080fd5b50610315611ff8565b34801561096257600080fd5b50610315611ffe565b34801561097757600080fd5b50610315612004565b34801561098c57600080fd5b506103c6600160a060020a036004351661200a565b3480156109ad57600080fd5b506103156120a3565b3480156109c257600080fd5b506103156120a9565b3480156109d757600080fd5b5061034b6004356120af565b6005805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610a695780601f10610a3e57610100808354040283529160200191610a69565b820191906000526020600020905b815481529060010190602001808311610a4c57829003601f168201915b505050505081565b600c5481565b600160a060020a03338116600081815260026020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b610b4c826004836040518082805190602001908083835b60208310610b185780518252601f199092019160209182019101610af9565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922092915050612208565b5050565b60135481565b6001545b90565b6000610b893360408051908101604052806005815260200160d960020a6430b236b4b702815250610eae565b80610bbc5750610bbc3360408051908101604052806009815260200160008051602061269a833981519152815250610eae565b1515610bc757600080fd5b601b54600160a060020a0316600090815260208190526040902054821115610bee57600080fd5b601b54600160a060020a0316600090815260208190526040902054610c19908363ffffffff61221d16565b601b54600160a060020a0316600090815260208190526040902055601954610c47908363ffffffff61221d16565b601955601554610c5d908363ffffffff61222f16565b601555600160a060020a033016600090815260208190526040902054610c89908363ffffffff61222f16565b600160a060020a033016600090815260208190526040902055601454610cb5908363ffffffff61222f16565b601455604080518381529051600160a060020a033016917ff83603201380cb82d40f5ec5247709121695277810904be461b54a50c2eaa769919081900360200190a2601b54604080518481529051600160a060020a03909216917f911175936b3ffc41904ba671fdedbc012ffacf996dd9b19c19564e9be836d1f79181900360200190a2506001919050565b600a5481565b6000610d733360408051908101604052806005815260200160d960020a6430b236b4b702815250610ae2565b600160a060020a03821615801590610d9d575030600160a060020a031682600160a060020a031614155b1515610da857600080fd5b50601b8054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff199091161790556001919050565b600160a060020a0333166000908152601e6020908152604082208351610e0292850190612601565b5033600160a060020a03167f3d8925c1c7e4996fa990c521127ea622328b933ff2d502e5e1cc87a2cbc1809a836040518080602001828103825283818151815260200191508051906020019080838360005b83811015610e6c578181015183820152602001610e54565b50505050905090810190601f168015610e995780820380516001836020036101000a031916815260200191505b509250505060405180910390a2506001919050565b6000610f1a836004846040518082805190602001908083835b60208310610ee65780518252601f199092019160209182019101610ec7565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092209291505061223c565b9392505050565b6000600160a060020a0383161515610f3857600080fd5b600160a060020a038416600090815260208190526040902054821115610f5d57600080fd5b600160a060020a0380851660009081526002602090815260408083203390941683529290522054821115610f9057600080fd5b600160a060020a038416600090815260208190526040902054610fb9908363ffffffff61221d16565b600160a060020a038086166000908152602081905260408082209390935590851681522054610fee908363ffffffff61222f16565b600160a060020a0380851660009081526020818152604080832094909455878316825260028152838220339093168252919091522054611034908363ffffffff61221d16565b600160a060020a038086166000818152600260209081526040808320338616845282529182902094909455805186815290519287169391926000805160206126ba833981519152929181900390910190a35060019392505050565b60085481565b60075481565b600160a060020a0381166000908152601e602090815260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084526060939283018282801561113a5780601f1061110f5761010080835404028352916020019161113a565b820191906000526020600020905b81548152906001019060200180831161111d57829003601f168201915b50505050509050919050565b600160a060020a03166000908152601d602052604090205490565b600160a060020a033316600090815260208190526040812054819083111561118857600080fd5b60125483101561119757600080fd5b600160a060020a0333166000908152601e6020908152604080832081519283019091529181526111c7919061225b565b156111d157600080fd5b601c54600160a060020a0316158015906111fa5750601c5430600160a060020a03908116911614155b151561120557600080fd5b600160a060020a03331660009081526020819052604090205461122e908463ffffffff61221d16565b600160a060020a0333166000908152602081905260409020556013548381151561125457fe5b60115491900601905061126d838263ffffffff61221d16565b601754909350611283908463ffffffff61221d16565b601755601454611299908463ffffffff61222f16565b601455600160a060020a0333166000908152601d60205260409020546112c5908463ffffffff61222f16565b600160a060020a033381166000908152601d6020908152604080832094909455309092168152908190522054611301908463ffffffff61222f16565b600160a060020a0330811660009081526020819052604080822093909355601c5490911681522054611339908263ffffffff61222f16565b601c8054600160a060020a0390811660009081526020818152604091829020949094559154825185815292519082169333909216926000805160206126ba83398151915292908290030190a330600160a060020a031633600160a060020a03166000805160206126ba833981519152856040518082815260200191505060405180910390a3604080518481529051600160a060020a033016917f824d08f0d500f68316027e046eb198c0de067df8df7cfcd57a19bbd2d9b4aa82919081900360200190a2604080518481529051600160a060020a033316917f911175936b3ffc41904ba671fdedbc012ffacf996dd9b19c19564e9be836d1f7919081900360200190a250600192915050565b60006114713360408051908101604052806005815260200160d960020a6430b236b4b702815250610eae565b806114a457506114a43360408051908101604052806009815260200160008051602061269a833981519152815250610eae565b15156114af57600080fd5b6014548211156114be57600080fd5b600160a060020a0330166000908152602081905260409020548211156114e357600080fd5b6014546114f6908363ffffffff61221d16565b60145560175461150c908363ffffffff61222f16565b601755600160a060020a033016600090815260208190526040902054611538908363ffffffff61221d16565b600160a060020a03308116600090815260208190526040808220939093559085168152205461156d908363ffffffff61222f16565b600160a060020a03808516600081815260208181526040918290209490945580518681529051919330909316926000805160206126ba83398151915292918290030190a3604080518381529051600160a060020a038516917f5250a1c4080bee0321c9806567821bdb0327d483d724a99acde6b2094932159b919081900360200190a2604080518381529051600160a060020a033016917f4792e0db799e0f504bad696edc9e62da637de65384b4540dfd8af67163bdb901919081900360200190a250600192915050565b60006116643360408051908101604052806005815260200160d960020a6430b236b4b702815250610ae2565b600160a060020a0382161580159061168e575030600160a060020a031682600160a060020a031614155b151561169957600080fd5b50601c8054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff199091161790556001919050565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561172857600160a060020a03338116600090815260026020908152604080832093881683529290529081205561175f565b611738818463ffffffff61221d16565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529482529182902054825190815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a35060019392505050565b600d5481565b600160a060020a031660009081526020819052604090205490565b60145481565b600e5481565b61181b3360408051908101604052806005815260200160d960020a6430b236b4b702815250610ae2565b610b4c828261237a565b600b5481565b60125481565b600354600160a060020a031681565b600061186c3360408051908101604052806005815260200160d960020a6430b236b4b702815250610eae565b8061189f575061189f3360408051908101604052806009815260200160008051602061269a833981519152815250610eae565b15156118aa57600080fd5b601b54600160a060020a0316158015906118d35750601b5430600160a060020a03908116911614155b15156118de57600080fd5b601a548211156118ed57600080fd5b60105460185460195460155485010101111561190857600080fd5b601a5461191b908363ffffffff61221d16565b601a55601954611931908363ffffffff61222f16565b601955600160a060020a03301660009081526020819052604090205461195d908363ffffffff61221d16565b600160a060020a0330811660009081526020819052604080822093909355601b5490911681522054611995908363ffffffff61222f16565b601b8054600160a060020a0390811660009081526020818152604091829020949094559154825186815292519082169330909216926000805160206126ba83398151915292908290030190a3601b54604080518481529051600160a060020a03909216917ff00f8a33da5065e7344fe6e4fcbf3020eee8a0277f15f53e8de7cdcdf42cc8039181900360200190a2604080518381529051600160a060020a033016917f2a3362f8e0da2d8a91cb7286704f2973b37c833af93af032e0c58736913a4514919081900360200190a2506001919050565b6006805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610a695780601f10610a3e57610100808354040283529160200191610a69565b60105481565b601b54600160a060020a031681565b601b5460009033600160a060020a03908116911614611af857600080fd5b601954611b0b908363ffffffff61221d16565b601955601854611b21908363ffffffff61222f16565b601855601754611b37908363ffffffff61222f16565b601755604080518381529051600160a060020a038516917ff83603201380cb82d40f5ec5247709121695277810904be461b54a50c2eaa769919081900360200190a2601b54604080518481529051600160a060020a03909216917f4792e0db799e0f504bad696edc9e62da637de65384b4540dfd8af67163bdb9019181900360200190a250600192915050565b6000600160a060020a0383161515611bdb57600080fd5b600160a060020a033316600090815260208190526040902054821115611c0057600080fd5b600160a060020a033316600090815260208190526040902054611c29908363ffffffff61221d16565b600160a060020a033381166000908152602081905260408082209390935590851681522054611c5e908363ffffffff61222f16565b600160a060020a03808516600081815260208181526040918290209490945580518681529051919333909316926000805160206126ba83398151915292918290030190a350600192915050565b60175481565b6000611cdd3360408051908101604052806005815260200160d960020a6430b236b4b702815250610eae565b80611d105750611d103360408051908101604052806009815260200160008051602061269a833981519152815250610eae565b1515611d1b57600080fd5b600160a060020a0383166000908152601d602052604081205411611d3e57600080fd5b600160a060020a0383166000908152601d6020526040902054821115611d6357600080fd5b600160a060020a0383166000908152601d6020526040902054611d8c908363ffffffff61221d16565b600160a060020a0384166000908152601d602052604090205550600192915050565b611dd83360408051908101604052806005815260200160d960020a6430b236b4b702815250610ae2565b610b4c828261249b565b60115481565b604080518082019091526005815260d960020a6430b236b4b702602082015281565b601c54600160a060020a031681565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054611e51908363ffffffff61222f16565b600160a060020a0333811660008181526002602090815260408083209489168084529482529182902085905581519485529051929391927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a350600192915050565b600080600080600080600e54945060009350600954421115611f1457611efe600b54611ef26009544261221d90919063ffffffff16565b9063ffffffff61257c16565b9350611f1184600163ffffffff61222f16565b93505b600a54841115611f2457600a5493505b5050600c546000915060015b838111611f9757611f61611f546064611ef2600d548661259190919063ffffffff16565b849063ffffffff61222f16565b9250611f8d611f806064611ef2600d548661259190919063ffffffff16565b839063ffffffff61222f16565b9150600101611f30565b600f54831115611fa757600f5492505b611fb7858463ffffffff61222f16565b9695505050505050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60185481565b60195481565b60155481565b601a5481565b600f5481565b60035433600160a060020a0390811691161461202557600080fd5b600160a060020a038116151561203a57600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60165481565b60095481565b60006120db3360408051908101604052806005815260200160d960020a6430b236b4b702815250610eae565b8061210e575061210e3360408051908101604052806009815260200160008051602061269a833981519152815250610eae565b151561211957600080fd5b601a5482111561212857600080fd5b612130611ebb565b6016548301111561214057600080fd5b601a54612153908363ffffffff61221d16565b601a55601454612169908363ffffffff61222f16565b60145560165461217f908363ffffffff61222f16565b601655604080518381529051600160a060020a033016917ff00f8a33da5065e7344fe6e4fcbf3020eee8a0277f15f53e8de7cdcdf42cc803919081900360200190a2604080518381529051600160a060020a033016917f911175936b3ffc41904ba671fdedbc012ffacf996dd9b19c19564e9be836d1f7919081900360200190a2506001919050565b612212828261223c565b1515610b4c57600080fd5b60008282111561222957fe5b50900390565b81810182811015610adc57fe5b600160a060020a03166000908152602091909152604090205460ff1690565b8051825460009184918491849160026000196101006001841615020190911604146122895760009350612371565b5060005b82546002600019610100600184161502019091160481101561236c5781818151811015156122b757fe5b90602001015160f860020a900460f860020a027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168382815460018160011615610100020316600290048110151561230b57fe5b81546001161561232a5790600052602060002090602091828204019190065b9054901a60f860020a027fff0000000000000000000000000000000000000000000000000000000000000016146123645760009350612371565b60010161228d565b600193505b50505092915050565b6123e4826004836040518082805190602001908083835b602083106123b05780518252601f199092019160209182019101612391565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220929150506125ba565b7fd211483f91fc6eff862467f8de606587a30c8fc9981056f051b897a418df803a82826040518083600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561245c578181015183820152602001612444565b50505050905090810190601f1680156124895780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050565b612505826004836040518082805190602001908083835b602083106124d15780518252601f1990920191602091820191016124b2565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220929150506125dc565b7fbfec83d64eaa953f2708271a023ab9ee82057f8f3578d548c1a4ba0b5b70048982826040518083600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360008381101561245c578181015183820152602001612444565b6000818381151561258957fe5b049392505050565b60008215156125a257506000610adc565b508181028183828115156125b257fe5b0414610adc57fe5b600160a060020a0316600090815260209190915260409020805460ff19169055565b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061264257805160ff191683800117855561266f565b8280016001018555821561266f579182015b8281111561266f578251825591602001919060010190612654565b5061267b92915061267f565b5090565b610b5a91905b8082111561267b5760008155600101612685560065786368616e6765720000000000000000000000000000000000000000000000ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820b43b29b34c59986b13e173b7360dd68cf23192b09bdd53d17f862dcfc85f52e40029"
}