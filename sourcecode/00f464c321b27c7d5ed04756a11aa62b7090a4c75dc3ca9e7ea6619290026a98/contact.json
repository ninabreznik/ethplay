{
  "address": "0x93aa3cb755eac961dd4767ce7cb3d5c6a65fdb7c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NaviCrowdSale",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-29\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract NaviCoin is Ownable, StandardToken {\n    // ERC20 requirements\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n\n    uint256 public totalSupply;\n\n    // 2 states: mintable (initial) and transferrable\n    bool public releasedForTransfer;\n\n    event Issue(address recepient, uint amount);\n\n    constructor() public {\n        name = \"NaviCoin\";\n        symbol = \"NAVI\";\n        decimals = 8;\n    }\n\n    function transfer(address _to, uint256 _value) public returns(bool) {\n        require(releasedForTransfer);\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n        require(releasedForTransfer);\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    // transfer the state from intable to transferrable\n    function release() public onlyOwner() {\n        releasedForTransfer = true;\n    }\n\n    // creates new amount of navis\n    function issue(address _recepient, uint256 _amount) public onlyOwner() {\n        require(!releasedForTransfer);\n        balances[_recepient] = balances[_recepient].add(_amount);\n        totalSupply = totalSupply.add(_amount);\n        emit Issue(_recepient, _amount);\n        emit Transfer(address(0), _recepient, _amount);\n    }\n}\n\ncontract NaviCrowdSale is Ownable {\n    using SafeMath for uint256;\n    \n    mapping(address => uint256) participants;\n\n    NaviCoin crowdsaleToken;\n\n    mapping (bytes4 => bool) inUse;\n\n    uint256 public maxSupply;\n    uint256 public totalCollected;\n\n    event SellToken(address recepient, uint tokensSold);\n\n    modifier preventReentrance {\n        require(!inUse[msg.sig]);\n        inUse[msg.sig] = true;\n        _;\n        inUse[msg.sig] = false;\n    }\n\n    constructor(\n        NaviCoin _token\n    )\n    public\n    {\n        maxSupply = 30000000000000000;\n        totalCollected = 1625000000000000;\n        crowdsaleToken = _token;\n    }\n\n    // returns address of the erc20 navi token\n    function getToken()\n    public view\n    returns(address)\n    {\n        return address(crowdsaleToken);\n    }\n\n    // transfers crowdsale token from mintable to transferrable state\n    function releaseTokens()\n    public\n    onlyOwner()             // manager is CrowdsaleController instance\n    {\n        crowdsaleToken.release();\n    }\n\n    // sels the project's token to buyers\n    function generate(\n        address _recepient, \n        uint256 _value\n    ) public\n        preventReentrance\n        onlyOwner()        // only manager can call it\n    {\n        uint256 newTotalCollected = totalCollected.add(_value);\n\n        require(maxSupply >= newTotalCollected);\n\n        // create new tokens for this buyer\n        crowdsaleToken.issue(_recepient, _value);\n\n        emit SellToken(_recepient, _value);\n\n        // remember the buyer so he/she/it may refund its ETH if crowdsale failed\n        participants[_recepient] = participants[_recepient].add(_value);\n\n        totalCollected = newTotalCollected;\n    }\n\n    // project's owner withdraws ETH funds\n    function withdraw(\n        uint256 _amount, // can be done partially,\n        address _recepient\n    )\n    public\n    onlyOwner()\n    {\n        require(_amount <= address(this).balance);\n        _recepient.transfer(_amount);\n    }\n\n}",
  "bytecode": "608060405234801561001057600080fd5b5060405160208061069c833981016040525160008054600160a060020a03199081163317909155666a94d74f4300006004556605c5edcbc2900060055560028054600160a060020a0390931692909116919091179055610627806100756000396000f3006080604052600436106100975763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041662f714ce811461009c57806321df0da7146100c25780633807aabd146100f3578063715018a6146101175780638da5cb5b1461012c578063a96f866814610141578063d5abeb0114610156578063e29eb8361461017d578063f2fde38b14610192575b600080fd5b3480156100a857600080fd5b506100c0600435600160a060020a03602435166101b3565b005b3480156100ce57600080fd5b506100d7610213565b60408051600160a060020a039092168252519081900360200190f35b3480156100ff57600080fd5b506100c0600160a060020a0360043516602435610222565b34801561012357600080fd5b506100c0610424565b34801561013857600080fd5b506100d7610490565b34801561014d57600080fd5b506100c061049f565b34801561016257600080fd5b5061016b61053c565b60408051918252519081900360200190f35b34801561018957600080fd5b5061016b610542565b34801561019e57600080fd5b506100c0600160a060020a0360043516610548565b600054600160a060020a031633146101ca57600080fd5b30318211156101d857600080fd5b604051600160a060020a0382169083156108fc029084906000818181858888f1935050505015801561020e573d6000803e3d6000fd5b505050565b600254600160a060020a031690565b600080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526003602052604081205460ff161561025e57600080fd5b600080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526003602052604081208054600160ff1990911617905554600160a060020a031633146102ae57600080fd5b6005546102c1908363ffffffff61056b16565b905080600454101515156102d457600080fd5b600254604080517f867904b4000000000000000000000000000000000000000000000000000000008152600160a060020a038681166004830152602482018690529151919092169163867904b491604480830192600092919082900301818387803b15801561034257600080fd5b505af1158015610356573d6000803e3d6000fd5b505060408051600160a060020a03871681526020810186905281517ff567b51b9deaa2fa38dd169801137cdc7532865d1e82192be079971d61e3ce869450908190039091019150a1600160a060020a0383166000908152600160205260409020546103c7908363ffffffff61056b16565b600160a060020a039093166000908152600160209081526040808320959095556005929092557bffffffffffffffffffffffffffffffffffffffffffffffffffffffff198135168152600390915291909120805460ff1916905550565b600054600160a060020a0316331461043b57600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031681565b600054600160a060020a031633146104b657600080fd5b600260009054906101000a9004600160a060020a0316600160a060020a03166386d1a69f6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801561052257600080fd5b505af1158015610536573d6000803e3d6000fd5b50505050565b60045481565b60055481565b600054600160a060020a0316331461055f57600080fd5b6105688161057e565b50565b8181018281101561057857fe5b92915050565b600160a060020a038116151561059357600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a72305820a13a7669e339296675faa5983ba9178a6cda3340c608dc059e8c679f38d1339a0029000000000000000000000000651adf2c769190e4601318f11416b8d0d0f904b4",
  "constructorArguments": "000000000000000000000000651adf2c769190e4601318f11416b8d0d0f904b4"
}