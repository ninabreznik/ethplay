{
  "address": "0x88583556156ec0d26a54472f33eba8d55d37dd6a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BlockCitiesVendingMachine",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-02\n*/\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: contracts/generators/ColourGenerator.sol\n\npragma solidity ^0.5.0;\n\n\ncontract ColourGenerator is Ownable {\n\n    uint256 internal randNonce = 0;\n\n    event Colours(uint256 exteriorColorway, uint256 backgroundColorway);\n\n    uint256 public exteriors = 20;\n    uint256 public backgrounds = 8;\n\n    function generate(address _sender)\n    external\n    returns (\n        uint256 exteriorColorway,\n        uint256 backgroundColorway\n    ) {\n        bytes32 hash = blockhash(block.number);\n\n        uint256 exteriorColorwayRandom = generate(hash, _sender, exteriors);\n        uint256 backgroundColorwayRandom = generate(hash, _sender, backgrounds);\n\n        emit Colours(exteriorColorwayRandom, backgroundColorwayRandom);\n\n        return (exteriorColorwayRandom, backgroundColorwayRandom);\n    }\n\n    function generate(bytes32 _hash, address _sender, uint256 _max) internal returns (uint256) {\n        randNonce++;\n        bytes memory packed = abi.encodePacked(_hash, _sender, randNonce);\n        return uint256(keccak256(packed)) % _max;\n    }\n\n    function updateExteriors(uint256 _exteriors) public onlyOwner {\n        exteriors = _exteriors;\n    }\n\n    function updateBackgrounds(uint256 _backgrounds) public onlyOwner {\n        backgrounds = _backgrounds;\n    }\n}\n\n// File: contracts/generators/LogicGenerator.sol\n\npragma solidity ^0.5.0;\n\n\ncontract LogicGenerator is Ownable {\n\n    uint256 internal randNonce = 0;\n\n    event Generated(\n        uint256 city,\n        uint256 building,\n        uint256 base,\n        uint256 body,\n        uint256 roof,\n        uint256 special\n    );\n\n    uint256[] public cityPercentages;\n\n    mapping(uint256 => uint256[]) public cityMappings;\n\n    mapping(uint256 => uint256[]) public buildingBaseMappings;\n    mapping(uint256 => uint256[]) public buildingBodyMappings;\n    mapping(uint256 => uint256[]) public buildingRoofMappings;\n\n    uint256 public specialModulo = 7;\n    uint256 public specialNo = 11;\n\n    function generate(address _sender)\n    external\n    returns (uint256 city, uint256 building, uint256 base, uint256 body, uint256 roof, uint256 special) {\n        bytes32 hash = blockhash(block.number);\n\n        uint256 aCity = cityPercentages[generate(hash, _sender, cityPercentages.length)];\n\n        uint256 aBuilding = cityMappings[aCity][generate(hash, _sender, cityMappings[aCity].length)];\n\n        uint256 aBase = buildingBaseMappings[aBuilding][generate(hash, _sender, buildingBaseMappings[aBuilding].length)];\n        uint256 aBody = buildingBodyMappings[aBuilding][generate(hash, _sender, buildingBodyMappings[aBuilding].length)];\n        uint256 aRoof = buildingRoofMappings[aBuilding][generate(hash, _sender, buildingRoofMappings[aBuilding].length)];\n        uint256 aSpecial = 0;\n\n        // 1 in X roughly\n        if (isSpecial(block.number)) {\n            aSpecial = generate(hash, _sender, specialNo);\n        }\n\n        emit Generated(aCity, aBuilding, aBase, aBody, aRoof, aSpecial);\n\n        return (aCity, aBuilding, aBase, aBody, aRoof, aSpecial);\n    }\n\n    function generate(bytes32 _hash, address _sender, uint256 _max) internal returns (uint256) {\n        randNonce++;\n        bytes memory packed = abi.encodePacked(_hash, _sender, randNonce);\n        return uint256(keccak256(packed)) % _max;\n    }\n\n    function isSpecial(uint256 _blocknumber) public view returns (bool) {\n        return (_blocknumber % specialModulo) == 0;\n    }\n\n    function updateBuildingBaseMappings(uint256 _building, uint256[] memory _params) public onlyOwner {\n        buildingBaseMappings[_building] = _params;\n    }\n\n    function updateBuildingBodyMappings(uint256 _building, uint256[] memory _params) public onlyOwner {\n        buildingBodyMappings[_building] = _params;\n    }\n\n    function updateBuildingRoofMappings(uint256 _building, uint256[] memory _params) public onlyOwner {\n        buildingRoofMappings[_building] = _params;\n    }\n\n    function updateSpecialModulo(uint256 _specialModulo) public onlyOwner {\n        specialModulo = _specialModulo;\n    }\n\n    function updateSpecialNo(uint256 _specialNo) public onlyOwner {\n        specialNo = _specialNo;\n    }\n\n    function updateCityPercentages(uint256[] memory _params) public onlyOwner {\n        cityPercentages = _params;\n    }\n\n    function updateCityMappings(uint256 _cityIndex, uint256[] memory _params) public onlyOwner {\n        cityMappings[_cityIndex] = _params;\n    }\n\n}\n\n// File: contracts/FundsSplitter.sol\n\npragma solidity ^0.5.0;\n\n\n\ncontract FundsSplitter is Ownable {\n    using SafeMath for uint256;\n\n    address payable public blockcities;\n    address payable public partner;\n\n    uint256 public partnerRate = 15;\n\n    constructor (address payable _blockcities, address payable _partner) public {\n        blockcities = _blockcities;\n        partner = _partner;\n    }\n\n    function splitFunds(uint256 _totalPrice) internal {\n        if (msg.value > 0) {\n            uint256 refund = msg.value.sub(_totalPrice);\n\n            // overpaid...\n            if (refund > 0) {\n                msg.sender.transfer(refund);\n            }\n\n            // work out the amount to split and send it\n            uint256 partnerAmount = _totalPrice.div(100).mul(partnerRate);\n            partner.transfer(partnerAmount);\n\n            // send remaining amount to blockCities wallet\n            uint256 remaining = _totalPrice.sub(partnerAmount);\n            blockcities.transfer(remaining);\n        }\n    }\n\n    function updatePartnerAddress(address payable _partner) onlyOwner public {\n        partner = _partner;\n    }\n\n    function updatePartnerRate(uint256 _techPartnerRate) onlyOwner public {\n        partnerRate = _techPartnerRate;\n    }\n\n    function updateBlockcitiesAddress(address payable _blockcities) onlyOwner public {\n        blockcities = _blockcities;\n    }\n}\n\n// File: contracts/libs/Strings.sol\n\npragma solidity ^0.5.0;\n\nlibrary Strings {\n\n    // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory _concatenatedString) {\n        bytes memory _ba = bytes(_a);\n        bytes memory _bb = bytes(_b);\n        bytes memory _bc = bytes(_c);\n        bytes memory _bd = bytes(_d);\n        bytes memory _be = bytes(_e);\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n        bytes memory babcde = bytes(abcde);\n        uint k = 0;\n        uint i = 0;\n        for (i = 0; i < _ba.length; i++) {\n            babcde[k++] = _ba[i];\n        }\n        for (i = 0; i < _bb.length; i++) {\n            babcde[k++] = _bb[i];\n        }\n        for (i = 0; i < _bc.length; i++) {\n            babcde[k++] = _bc[i];\n        }\n        for (i = 0; i < _bd.length; i++) {\n            babcde[k++] = _bd[i];\n        }\n        for (i = 0; i < _be.length; i++) {\n            babcde[k++] = _be[i];\n        }\n        return string(babcde);\n    }\n\n    function strConcat(string memory _a, string memory _b) internal pure returns (string memory) {\n        return strConcat(_a, _b, \"\", \"\", \"\");\n    }\n\n    function strConcat(string memory _a, string memory _b, string memory _c) internal pure returns (string memory) {\n        return strConcat(_a, _b, _c, \"\", \"\");\n    }\n\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\n        if (_i == 0) {\n            return \"0\";\n        }\n        uint j = _i;\n        uint len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len - 1;\n        while (_i != 0) {\n            bstr[k--] = byte(uint8(48 + _i % 10));\n            _i /= 10;\n        }\n        return string(bstr);\n    }\n}\n\n// File: contracts/IBlockCitiesCreator.sol\n\npragma solidity ^0.5.0;\n\ninterface IBlockCitiesCreator {\n    function createBuilding(\n        uint256 _exteriorColorway,\n        uint256 _backgroundColorway,\n        uint256 _city,\n        uint256 _building,\n        uint256 _base,\n        uint256 _body,\n        uint256 _roof,\n        uint256 _special,\n        address _architect\n    ) external returns (uint256 _tokenId);\n}\n\n// File: contracts/BlockCitiesVendingMachine.sol\n\npragma solidity ^0.5.0;\n\n\n\n\n\n\n\n\ncontract BlockCitiesVendingMachine is Ownable, FundsSplitter {\n    using SafeMath for uint256;\n\n    event VendingMachineTriggered(\n        uint256 indexed _tokenId,\n        address indexed _architect\n    );\n\n    event CreditAdded(address indexed _to, uint256 _amount);\n\n    event PriceDiscountBandsChanged(uint256[2] _priceDiscountBands);\n\n    event PriceStepInWeiChanged(\n        uint256 _oldPriceStepInWei,\n        uint256 _newPriceStepInWei\n    );\n\n    event PricePerBuildingInWeiChanged(\n        uint256 _oldPricePerBuildingInWei,\n        uint256 _newPricePerBuildingInWei\n    );\n\n    event FloorPricePerBuildingInWeiChanged(\n        uint256 _oldFloorPricePerBuildingInWei,\n        uint256 _newFloorPricePerBuildingInWei\n    );\n\n    event CeilingPricePerBuildingInWeiChanged(\n        uint256 _oldCeilingPricePerBuildingInWei,\n        uint256 _newCeilingPricePerBuildingInWei\n    );\n\n    event BlockStepChanged(\n        uint256 _oldBlockStep,\n        uint256 _newBlockStep\n    );\n\n    event LastSaleBlockChanged(\n        uint256 _oldLastSaleBlock,\n        uint256 _newLastSaleBlock\n    );\n\n    struct Colour {\n        uint256 exteriorColorway;\n        uint256 backgroundColorway;\n    }\n\n    struct Building {\n        uint256 city;\n        uint256 building;\n        uint256 base;\n        uint256 body;\n        uint256 roof;\n        uint256 special;\n    }\n\n    LogicGenerator public logicGenerator;\n\n    ColourGenerator public colourGenerator;\n\n    IBlockCitiesCreator public blockCities;\n\n    mapping(address => uint256) public credits;\n\n    uint256 public totalPurchasesInWei = 0;\n    uint256[2] public priceDiscountBands = [80, 70];\n\n    uint256 public floorPricePerBuildingInWei = 0.05 ether;\n\n    uint256 public ceilingPricePerBuildingInWei = 0.15 ether;\n\n    // use totalPrice() to calculate current weighted price\n    uint256 pricePerBuildingInWei = 0.075 ether;\n\n    uint256 public priceStepInWei = 0.0003 ether;\n\n    // 120 is approx 30 mins\n    uint256 public blockStep = 120;\n\n    uint256 public lastSaleBlock = 0;\n    uint256 public lastSalePrice = 0;\n\n    constructor (\n        LogicGenerator _logicGenerator,\n        ColourGenerator _colourGenerator,\n        IBlockCitiesCreator _blockCities,\n        address payable _blockCitiesAddress,\n        address payable _partnerAddress\n    ) public FundsSplitter(_blockCitiesAddress, _partnerAddress) {\n        logicGenerator = _logicGenerator;\n        colourGenerator = _colourGenerator;\n        blockCities = _blockCities;\n    }\n\n    function mintBuilding() public payable returns (uint256 _tokenId) {\n        uint256 currentPrice = totalPrice(1);\n        require(\n            credits[msg.sender] > 0 || msg.value >= currentPrice,\n            \"Must supply at least the required minimum purchase value or have credit\"\n        );\n\n        _adjustCredits(currentPrice, 1);\n\n        uint256 tokenId = _generate(msg.sender);\n\n        _stepIncrease();\n\n        return tokenId;\n    }\n\n    function mintBuildingTo(address _to) public payable returns (uint256 _tokenId) {\n        uint256 currentPrice = totalPrice(1);\n        require(\n            credits[msg.sender] > 0 || msg.value >= currentPrice,\n            \"Must supply at least the required minimum purchase value or have credit\"\n        );\n\n        _adjustCredits(currentPrice, 1);\n\n        uint256 tokenId = _generate(_to);\n\n        _stepIncrease();\n\n        return tokenId;\n    }\n\n    function mintBatch(uint256 _numberOfBuildings) public payable returns (uint256[] memory _tokenIds) {\n        uint256 currentPrice = totalPrice(_numberOfBuildings);\n        require(\n            credits[msg.sender] >= _numberOfBuildings || msg.value >= currentPrice,\n            \"Must supply at least the required minimum purchase value or have credit\"\n        );\n\n        _adjustCredits(currentPrice, _numberOfBuildings);\n\n        uint256[] memory generatedTokenIds = new uint256[](_numberOfBuildings);\n\n        for (uint i = 0; i < _numberOfBuildings; i++) {\n            generatedTokenIds[i] = _generate(msg.sender);\n        }\n\n        _stepIncrease();\n\n        return generatedTokenIds;\n    }\n\n    function mintBatchTo(address _to, uint256 _numberOfBuildings) public payable returns (uint256[] memory _tokenIds) {\n        uint256 currentPrice = totalPrice(_numberOfBuildings);\n        require(\n            credits[msg.sender] >= _numberOfBuildings || msg.value >= currentPrice,\n            \"Must supply at least the required minimum purchase value or have credit\"\n        );\n\n        _adjustCredits(currentPrice, _numberOfBuildings);\n\n        uint256[] memory generatedTokenIds = new uint256[](_numberOfBuildings);\n\n        for (uint i = 0; i < _numberOfBuildings; i++) {\n            generatedTokenIds[i] = _generate(_to);\n        }\n\n        _stepIncrease();\n\n        return generatedTokenIds;\n    }\n\n    function _generate(address _to) internal returns (uint256 _tokenId) {\n        Building memory building = _generateBuilding();\n        Colour memory colour = _generateColours();\n\n        uint256 tokenId = blockCities.createBuilding(\n            colour.exteriorColorway,\n            colour.backgroundColorway,\n            building.city,\n            building.building,\n            building.base,\n            building.body,\n            building.roof,\n            building.special,\n            _to\n        );\n\n        emit VendingMachineTriggered(tokenId, _to);\n\n        return tokenId;\n    }\n\n    function _generateColours() internal returns (Colour memory){\n        (uint256 _exteriorColorway, uint256 _backgroundColorway) = colourGenerator.generate(msg.sender);\n\n        return Colour({\n            exteriorColorway : _exteriorColorway,\n            backgroundColorway : _backgroundColorway\n            });\n    }\n\n    function _generateBuilding() internal returns (Building memory){\n        (uint256 _city, uint256 _building, uint256 _base, uint256 _body, uint256 _roof, uint256 _special) = logicGenerator.generate(msg.sender);\n\n        return Building({\n            city : _city,\n            building : _building,\n            base : _base,\n            body : _body,\n            roof : _roof,\n            special : _special\n            });\n    }\n\n    function _adjustCredits(uint256 _currentPrice, uint256 _numberOfBuildings) internal {\n        // use credits first\n        if (credits[msg.sender] >= _numberOfBuildings) {\n            credits[msg.sender] = credits[msg.sender].sub(_numberOfBuildings);\n\n            // refund msg.value when using up credits\n            if (msg.value > 0) {\n                msg.sender.transfer(msg.value);\n            }\n        } else {\n            splitFunds(_currentPrice);\n            totalPurchasesInWei = totalPurchasesInWei.add(_currentPrice);\n        }\n    }\n\n    function _stepIncrease() internal {\n        lastSalePrice = pricePerBuildingInWei;\n        lastSaleBlock = block.number;\n\n        pricePerBuildingInWei = pricePerBuildingInWei.add(priceStepInWei);\n\n        if (pricePerBuildingInWei >= ceilingPricePerBuildingInWei) {\n            pricePerBuildingInWei = ceilingPricePerBuildingInWei;\n        }\n    }\n\n    function totalPrice(uint256 _numberOfBuildings) public view returns (uint256) {\n\n        uint256 calculatedPrice = pricePerBuildingInWei;\n\n        uint256 blocksPassed = block.number - lastSaleBlock;\n        uint256 reduce = blocksPassed.div(blockStep).mul(priceStepInWei);\n\n        if (reduce > calculatedPrice) {\n            calculatedPrice = floorPricePerBuildingInWei;\n        }\n        else {\n            calculatedPrice = calculatedPrice.sub(reduce);\n        }\n\n        if (calculatedPrice < floorPricePerBuildingInWei) {\n            calculatedPrice = floorPricePerBuildingInWei;\n        }\n\n        if (_numberOfBuildings < 5) {\n            return _numberOfBuildings.mul(calculatedPrice);\n        }\n        else if (_numberOfBuildings < 10) {\n            return _numberOfBuildings.mul(calculatedPrice).div(100).mul(priceDiscountBands[0]);\n        }\n\n        return _numberOfBuildings.mul(calculatedPrice).div(100).mul(priceDiscountBands[1]);\n    }\n\n    function setPricePerBuildingInWei(uint256 _pricePerBuildingInWei) public onlyOwner returns (bool) {\n        emit PricePerBuildingInWeiChanged(pricePerBuildingInWei, _pricePerBuildingInWei);\n        pricePerBuildingInWei = _pricePerBuildingInWei;\n        return true;\n    }\n\n    function setPriceStepInWei(uint256 _priceStepInWei) public onlyOwner returns (bool) {\n        emit PriceStepInWeiChanged(priceStepInWei, _priceStepInWei);\n        priceStepInWei = _priceStepInWei;\n        return true;\n    }\n\n    function setPriceDiscountBands(uint256[2] memory _newPriceDiscountBands) public onlyOwner returns (bool) {\n        priceDiscountBands = _newPriceDiscountBands;\n\n        emit PriceDiscountBandsChanged(_newPriceDiscountBands);\n\n        return true;\n    }\n\n    function addCredit(address _to) public onlyOwner returns (bool) {\n        credits[_to] = credits[_to].add(1);\n\n        emit CreditAdded(_to, 1);\n\n        return true;\n    }\n\n    function addCreditAmount(address _to, uint256 _amount) public onlyOwner returns (bool) {\n        credits[_to] = credits[_to].add(_amount);\n\n        emit CreditAdded(_to, _amount);\n\n        return true;\n    }\n\n    function addCreditBatch(address[] memory _addresses, uint256 _amount) public onlyOwner returns (bool) {\n        for (uint i = 0; i < _addresses.length; i++) {\n            addCreditAmount(_addresses[i], _amount);\n        }\n\n        return true;\n    }\n\n    function setFloorPricePerBuildingInWei(uint256 _floorPricePerBuildingInWei) public onlyOwner returns (bool) {\n        emit FloorPricePerBuildingInWeiChanged(floorPricePerBuildingInWei, _floorPricePerBuildingInWei);\n        floorPricePerBuildingInWei = _floorPricePerBuildingInWei;\n        return true;\n    }\n\n    function setCeilingPricePerBuildingInWei(uint256 _ceilingPricePerBuildingInWei) public onlyOwner returns (bool) {\n        emit CeilingPricePerBuildingInWeiChanged(ceilingPricePerBuildingInWei, _ceilingPricePerBuildingInWei);\n        ceilingPricePerBuildingInWei = _ceilingPricePerBuildingInWei;\n        return true;\n    }\n\n    function setBlockStep(uint256 _blockStep) public onlyOwner returns (bool) {\n        emit BlockStepChanged(blockStep, _blockStep);\n        blockStep = _blockStep;\n        return true;\n    }\n\n    function setLastSaleBlock(uint256 _lastSaleBlock) public onlyOwner returns (bool) {\n        emit LastSaleBlockChanged(lastSaleBlock, _lastSaleBlock);\n        lastSaleBlock = _lastSaleBlock;\n        return true;\n    }\n\n    function setLogicGenerator(LogicGenerator _logicGenerator) public onlyOwner returns (bool) {\n        logicGenerator = _logicGenerator;\n        return true;\n    }\n\n    function setColourGenerator(ColourGenerator _colourGenerator) public onlyOwner returns (bool) {\n        colourGenerator = _colourGenerator;\n        return true;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"floorPricePerBuildingInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockcities\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockCities\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastSaleBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_numberOfBuildings\",\"type\":\"uint256\"}],\"name\":\"mintBatch\",\"outputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_numberOfBuildings\",\"type\":\"uint256\"}],\"name\":\"totalPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ceilingPricePerBuildingInWei\",\"type\":\"uint256\"}],\"name\":\"setCeilingPricePerBuildingInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"colourGenerator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"updatePartnerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addCreditAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPurchasesInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mintBuilding\",\"outputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_colourGenerator\",\"type\":\"address\"}],\"name\":\"setColourGenerator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_techPartnerRate\",\"type\":\"uint256\"}],\"name\":\"updatePartnerRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addCreditBatch\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"mintBuildingTo\",\"outputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blockStep\",\"type\":\"uint256\"}],\"name\":\"setBlockStep\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_floorPricePerBuildingInWei\",\"type\":\"uint256\"}],\"name\":\"setFloorPricePerBuildingInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"logicGenerator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"addCredit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastSalePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_logicGenerator\",\"type\":\"address\"}],\"name\":\"setLogicGenerator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blockcities\",\"type\":\"address\"}],\"name\":\"updateBlockcitiesAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPriceDiscountBands\",\"type\":\"uint256[2]\"}],\"name\":\"setPriceDiscountBands\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pricePerBuildingInWei\",\"type\":\"uint256\"}],\"name\":\"setPricePerBuildingInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lastSaleBlock\",\"type\":\"uint256\"}],\"name\":\"setLastSaleBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partnerRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceStepInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_priceStepInWei\",\"type\":\"uint256\"}],\"name\":\"setPriceStepInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockStep\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"priceDiscountBands\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_numberOfBuildings\",\"type\":\"uint256\"}],\"name\":\"mintBatchTo\",\"outputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceilingPricePerBuildingInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"credits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_logicGenerator\",\"type\":\"address\"},{\"name\":\"_colourGenerator\",\"type\":\"address\"},{\"name\":\"_blockCities\",\"type\":\"address\"},{\"name\":\"_blockCitiesAddress\",\"type\":\"address\"},{\"name\":\"_partnerAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_architect\",\"type\":\"address\"}],\"name\":\"VendingMachineTriggered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CreditAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_priceDiscountBands\",\"type\":\"uint256[2]\"}],\"name\":\"PriceDiscountBandsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldPriceStepInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newPriceStepInWei\",\"type\":\"uint256\"}],\"name\":\"PriceStepInWeiChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldPricePerBuildingInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newPricePerBuildingInWei\",\"type\":\"uint256\"}],\"name\":\"PricePerBuildingInWeiChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldFloorPricePerBuildingInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newFloorPricePerBuildingInWei\",\"type\":\"uint256\"}],\"name\":\"FloorPricePerBuildingInWeiChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldCeilingPricePerBuildingInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newCeilingPricePerBuildingInWei\",\"type\":\"uint256\"}],\"name\":\"CeilingPricePerBuildingInWeiChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldBlockStep\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newBlockStep\",\"type\":\"uint256\"}],\"name\":\"BlockStepChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldLastSaleBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newLastSaleBlock\",\"type\":\"uint256\"}],\"name\":\"LastSaleBlockChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "600f600355600060085560c060405260506080908152604660a0526200002a90600990600262000167565b5066b1a2bc2ec50000600b55670214e8348c4f0000600c5567010a741a46278000600d55660110d9316ec000600e556078600f55600060105560006011553480156200007557600080fd5b5060405160a08062001c7e833981018060405260a08110156200009757600080fd5b5080516020820151604080840151606085015160809095015160008054600160a060020a0319163317808255935195969495929493919284928492600160a060020a0391909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a360018054600160a060020a0319908116600160a060020a03948516179091556002805482169284169290921790915560048054821697831697909717909655600580548716958216959095179094555050600680549093169116179055620001cf565b82600281019282156200019d579160200282015b828111156200019d578251829060ff169055916020019190600101906200017b565b50620001ab929150620001af565b5090565b620001cc91905b80821115620001ab5760008155600101620001b6565b90565b611a9f80620001df6000396000f3fe6080604052600436106101e25763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630113ddea81146101e7578063068cc81e1461020e5780630bd3b6fd1461023f57806319a266ca1461025457806320e409b414610269578063221f2285146102d65780633249c5271461030057806342b9d5e01461033e57806344a71fbb1461035357806351b6bdb5146103885780635f1e98c7146103c15780636070e053146103d6578063624ab8be146103de57806369aa9b25146104115780636dd7bb4d1461043b5780636ff3117f146104ed578063715018a61461051357806371b8021a14610528578063722e92721461055257806373fbae5a1461057c5780637c334d0b1461059157806386f5960f146105c45780638972ec6f146105d95780638da5cb5b1461060c5780638f32d59b1461062157806393f27be914610636578063942bfa6e146106695780639fc1185e146106c1578063ad4a6e76146106eb578063b7be867e14610715578063bddd76551461072a578063be10862b1461073f578063c4844a8714610754578063cc11c3831461077e578063cc9a062f14610793578063d52da3ae146107bd578063d9689eeb146107e9578063f2fde38b146107fe578063fe5ff46814610831575b600080fd5b3480156101f357600080fd5b506101fc610864565b60408051918252519081900360200190f35b34801561021a57600080fd5b5061022361086a565b60408051600160a060020a039092168252519081900360200190f35b34801561024b57600080fd5b50610223610879565b34801561026057600080fd5b506101fc610888565b6102866004803603602081101561027f57600080fd5b503561088e565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102c25781810151838201526020016102aa565b505050509050019250505060405180910390f35b3480156102e257600080fd5b506101fc600480360360208110156102f957600080fd5b50356109a7565b34801561030c57600080fd5b5061032a6004803603602081101561032357600080fd5b5035610a81565b604080519115158252519081900360200190f35b34801561034a57600080fd5b50610223610adc565b34801561035f57600080fd5b506103866004803603602081101561037657600080fd5b5035600160a060020a0316610aeb565b005b34801561039457600080fd5b5061032a600480360360408110156103ab57600080fd5b50600160a060020a038135169060200135610b2d565b3480156103cd57600080fd5b506101fc610bc7565b6101fc610bcd565b3480156103ea57600080fd5b5061032a6004803603602081101561040157600080fd5b5035600160a060020a0316610c8c565b34801561041d57600080fd5b506103866004803603602081101561043457600080fd5b5035610cd3565b34801561044757600080fd5b5061032a6004803603604081101561045e57600080fd5b81019060208101813564010000000081111561047957600080fd5b82018360208201111561048b57600080fd5b803590602001918460208302840111640100000000831117156104ad57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505091359250610ceb915050565b6101fc6004803603602081101561050357600080fd5b5035600160a060020a0316610d40565b34801561051f57600080fd5b50610386610df8565b34801561053457600080fd5b5061032a6004803603602081101561054b57600080fd5b5035610e62565b34801561055e57600080fd5b5061032a6004803603602081101561057557600080fd5b5035610ebd565b34801561058857600080fd5b50610223610f18565b34801561059d57600080fd5b5061032a600480360360208110156105b457600080fd5b5035600160a060020a0316610f27565b3480156105d057600080fd5b506101fc610fc1565b3480156105e557600080fd5b5061032a600480360360208110156105fc57600080fd5b5035600160a060020a0316610fc7565b34801561061857600080fd5b5061022361100e565b34801561062d57600080fd5b5061032a61101d565b34801561064257600080fd5b506103866004803603602081101561065957600080fd5b5035600160a060020a031661102e565b34801561067557600080fd5b5061032a6004803603604081101561068c57600080fd5b604080518082018252918301929181830191839060029083908390808284376000920191909152509194506110709350505050565b3480156106cd57600080fd5b5061032a600480360360208110156106e457600080fd5b50356110f7565b3480156106f757600080fd5b5061032a6004803603602081101561070e57600080fd5b5035611152565b34801561072157600080fd5b506101fc6111ad565b34801561073657600080fd5b506101fc6111b3565b34801561074b57600080fd5b506102236111b9565b34801561076057600080fd5b5061032a6004803603602081101561077757600080fd5b50356111c8565b34801561078a57600080fd5b506101fc611223565b34801561079f57600080fd5b506101fc600480360360208110156107b657600080fd5b5035611229565b610286600480360360408110156107d357600080fd5b50600160a060020a03813516906020013561123d565b3480156107f557600080fd5b506101fc611355565b34801561080a57600080fd5b506103866004803603602081101561082157600080fd5b5035600160a060020a031661135b565b34801561083d57600080fd5b506101fc6004803603602081101561085457600080fd5b5035600160a060020a031661137a565b600b5481565b600154600160a060020a031681565b600654600160a060020a031681565b60105481565b6060600061089b836109a7565b33600090815260076020526040902054909150831115806108bc5750803410155b1515610928576040805160e560020a62461bcd0281526020600482015260476024820152600080516020611a548339815191526044820152600080516020611a148339815191526064820152600080516020611a34833981519152608482015290519081900360a40190fd5b610932818461138c565b60608360405190808252806020026020018201604052801561095e578160200160208202803883390190505b50905060005b848110156109955761097533611433565b828281518110151561098357fe5b60209081029091010152600101610964565b5061099e61158c565b9150505b919050565b600d54601054600e54600f546000939243039184916109de91906109d290859063ffffffff6115c116565b9063ffffffff6115e516565b9050828111156109f257600b549250610a05565b610a02838263ffffffff61161716565b92505b600b54831015610a1557600b5492505b6005851015610a3857610a2e858463ffffffff6115e516565b93505050506109a2565b600a851015610a6c57610a2e600960005b01546109d26064610a60898863ffffffff6115e516565b9063ffffffff6115c116565b610a7860096001610a49565b95945050505050565b6000610a8b61101d565b1515610a9657600080fd5b600c54604080519182526020820184905280517fe880581dd641cadbdef0f2e2356247b0c6a7dd93bb4a71729a50698f09a044a49281900390910190a150600c55600190565b600554600160a060020a031681565b610af361101d565b1515610afe57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000610b3761101d565b1515610b4257600080fd5b600160a060020a038316600090815260076020526040902054610b6b908363ffffffff61162c16565b600160a060020a038416600081815260076020908152604091829020939093558051858152905191927f648ec643b30463f72debf7027a0f9ff84bbdf4dc1a2a7ab973cb77dec532656892918290030190a25060015b92915050565b60085481565b600080610bda60016109a7565b336000908152600760205260408120549192501080610bf95750803410155b1515610c65576040805160e560020a62461bcd0281526020600482015260476024820152600080516020611a548339815191526044820152600080516020611a148339815191526064820152600080516020611a34833981519152608482015290519081900360a40190fd5b610c7081600161138c565b6000610c7b33611433565b9050610c8561158c565b9150505b90565b6000610c9661101d565b1515610ca157600080fd5b5060058054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff199091161790556001919050565b610cdb61101d565b1515610ce657600080fd5b600355565b6000610cf561101d565b1515610d0057600080fd5b60005b8351811015610d3657610d2d8482815181101515610d1d57fe5b9060200190602002015184610b2d565b50600101610d03565b5060019392505050565b600080610d4d60016109a7565b336000908152600760205260408120549192501080610d6c5750803410155b1515610dd8576040805160e560020a62461bcd0281526020600482015260476024820152600080516020611a548339815191526044820152600080516020611a148339815191526064820152600080516020611a34833981519152608482015290519081900360a40190fd5b610de381600161138c565b6000610dee84611433565b905061099e61158c565b610e0061101d565b1515610e0b57600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000610e6c61101d565b1515610e7757600080fd5b600f54604080519182526020820184905280517f373c614e2ae93ee4d5971274986bdb8d7ce56aa7d251d6732e841fddb3c7ff849281900390910190a150600f55600190565b6000610ec761101d565b1515610ed257600080fd5b600b54604080519182526020820184905280517f38ee7c735d6320ca1146e0d0f3f487300bc2ae465f66d6d7d8bc8ae3f47f17599281900390910190a150600b55600190565b600454600160a060020a031681565b6000610f3161101d565b1515610f3c57600080fd5b600160a060020a038216600090815260076020526040902054610f6690600163ffffffff61162c16565b600160a060020a03831660008181526007602090815260409182902093909355805160018152905191927f648ec643b30463f72debf7027a0f9ff84bbdf4dc1a2a7ab973cb77dec532656892918290030190a2506001919050565b60115481565b6000610fd161101d565b1515610fdc57600080fd5b5060048054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff199091161790556001919050565b600054600160a060020a031690565b600054600160a060020a0316331490565b61103661101d565b151561104157600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600061107a61101d565b151561108557600080fd5b611092600983600261196d565b507f3f6f57f4c984d98b526cc964d520ad73f29807ad468896e02c113d4b61725fca826040518082600260200280838360005b838110156110dd5781810151838201526020016110c5565b5050505090500191505060405180910390a1506001919050565b600061110161101d565b151561110c57600080fd5b600d54604080519182526020820184905280517f6eb4d51aa48070ba41a35eb953c66c728b4c501b8f861193e18c39999f0e12139281900390910190a150600d55600190565b600061115c61101d565b151561116757600080fd5b601054604080519182526020820184905280517f86270eaaec3b663b71c4b521c94db85667cc0b17e0a595fe7d0b2e2a423b20479281900390910190a150601055600190565b60035481565b600e5481565b600254600160a060020a031681565b60006111d261101d565b15156111dd57600080fd5b600e54604080519182526020820184905280517f37a3e83e0286b341a68ba76633b42dbb0a4a82fc4022b52a8d68fdda7a70004e9281900390910190a150600e55600190565b600f5481565b6009816002811061123657fe5b0154905081565b6060600061124a836109a7565b336000908152600760205260409020549091508311158061126b5750803410155b15156112d7576040805160e560020a62461bcd0281526020600482015260476024820152600080516020611a548339815191526044820152600080516020611a148339815191526064820152600080516020611a34833981519152608482015290519081900360a40190fd5b6112e1818461138c565b60608360405190808252806020026020018201604052801561130d578160200160208202803883390190505b50905060005b848110156113445761132486611433565b828281518110151561133257fe5b60209081029091010152600101611313565b5061134d61158c565b949350505050565b600c5481565b61136361101d565b151561136e57600080fd5b6113778161163e565b50565b60076020526000908152604090205481565b33600090815260076020526040902054811161140f57336000908152600760205260409020546113c2908263ffffffff61161716565b3360009081526007602052604081209190915534111561140a5760405133903480156108fc02916000818181858888f19350505050158015611408573d6000803e3d6000fd5b505b61142f565b611418826116bb565b60085461142b908363ffffffff61162c16565b6008555b5050565b600061143d6119ab565b6114456117bb565b905061144f6119e2565b6114576118b2565b60065481516020808401518651878301516040808a015160608b015160808c015160a08d015184517f90708008000000000000000000000000000000000000000000000000000000008152600481019a909a5260248a019790975260448901959095526064880193909352608487015260a486019190915260c485019190915260e4840191909152600160a060020a03898116610104850152905194955060009493169263907080089261012480820193929182900301818787803b15801561151f57600080fd5b505af1158015611533573d6000803e3d6000fd5b505050506040513d602081101561154957600080fd5b5051604051909150600160a060020a0386169082907f372a2d4d08206e1dfd3c166a68a3079282f2d28d305b51a31446b0452203253890600090a3949350505050565b600d54601181905543601055600e546115ab919063ffffffff61162c16565b600d819055600c54116115bf57600c54600d555b565b60008082116115cf57600080fd5b600082848115156115dc57fe5b04949350505050565b60008215156115f657506000610bc1565b82820282848281151561160557fe5b041461161057600080fd5b9392505050565b60008282111561162657600080fd5b50900390565b60008282018381101561161057600080fd5b600160a060020a038116151561165357600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60003411156113775760006116d6348363ffffffff61161716565b9050600081111561171057604051339082156108fc029083906000818181858888f1935050505015801561170e573d6000803e3d6000fd5b505b60035460009061172b906109d285606463ffffffff6115c116565b600254604051919250600160a060020a03169082156108fc029083906000818181858888f19350505050158015611766573d6000803e3d6000fd5b506000611779848363ffffffff61161716565b600154604051919250600160a060020a03169082156108fc029083906000818181858888f193505050501580156117b4573d6000803e3d6000fd5b5050505050565b6117c36119ab565b60048054604080517f2fa61cd800000000000000000000000000000000000000000000000000000000815233938101939093525160009283928392839283928392600160a060020a0390911691632fa61cd89160248083019260c092919082900301818787803b15801561183657600080fd5b505af115801561184a573d6000803e3d6000fd5b505050506040513d60c081101561186057600080fd5b50805160208083015160408085015160608087015160808089015160a0998a0151865160c081018852998a52978901969096529387019290925285015283015291810191909152965050505050505090565b6118ba6119e2565b600554604080517f2fa61cd800000000000000000000000000000000000000000000000000000000815233600482015281516000938493600160a060020a0390911692632fa61cd8926024808301939282900301818787803b15801561191f57600080fd5b505af1158015611933573d6000803e3d6000fd5b505050506040513d604081101561194957600080fd5b50805160209182015160408051808201909152918252918101919091529250505090565b826002810192821561199b579160200282015b8281111561199b578251825591602001919060010190611980565b506119a79291506119f9565b5090565b60c0604051908101604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604080518082019091526000808252602082015290565b610c8991905b808211156119a757600081556001016119ff56fe64206d696e696d756d2070757263686173652076616c7565206f72206861766520637265646974000000000000000000000000000000000000000000000000004d75737420737570706c79206174206c65617374207468652072657175697265a165627a7a7230582069b4b8d04fbe1cb3d8420ecfd06b26dc6caf2ce7ba812d1d1513e046609f03a60029000000000000000000000000b05ddbeb3b00cd84b647b9bb6c9931651dda04da000000000000000000000000723f0128d909f059e4bebbe9131ecfd02a85e4de0000000000000000000000002f2d5aa0efdb9ca3c9bb789693d06bebea88792f00000000000000000000000064c971d7e3c0483fa97a7714ec55d1e1943731c7000000000000000000000000860e21abcc3b9c10635a65c8a3bc7f1ba692211c",
  "constructorArguments": "000000000000000000000000b05ddbeb3b00cd84b647b9bb6c9931651dda04da000000000000000000000000723f0128d909f059e4bebbe9131ecfd02a85e4de0000000000000000000000002f2d5aa0efdb9ca3c9bb789693d06bebea88792f00000000000000000000000064c971d7e3c0483fa97a7714ec55d1e1943731c7000000000000000000000000860e21abcc3b9c10635a65c8a3bc7f1ba692211c"
}