{
  "address": "0x146d8d942048ad517479c9bab1788712af180fde",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "MIB Coin",
  "contractName": "MIBToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-13\n*/\n\npragma solidity ^0.4.24;\n\ncontract DMIBLog {\n    event MIBLog(bytes4 indexed sig, address indexed sender, uint _value) anonymous;\n\n    modifier mlog {\n        emit MIBLog(msg.sig, msg.sender, msg.value);\n        _;\n    }\n}\n\ncontract Ownable {\n    address public owner;\n\n    event OwnerLog(address indexed previousOwner, address indexed newOwner, bytes4 sig);\n\n    constructor() public { \n        owner = msg.sender; \n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner  public {\n        require(newOwner != address(0));\n        emit OwnerLog(owner, newOwner, msg.sig);\n        owner = newOwner;\n    }\n}\n\ncontract MIBStop is Ownable, DMIBLog {\n\n    bool public stopped;\n\n    modifier stoppable {\n        require (!stopped);\n        _;\n    }\n    function stop() onlyOwner mlog public {\n        stopped = true;\n    }\n    function start() onlyOwner mlog public {\n        stopped = false;\n    }\n}\n\nlibrary SafeMath {\n    \n    /**\n     * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n          return 0;\n        }\n\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n     * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function approve(address spender, uint256 value) public returns (bool);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract MIBToken is ERC20, MIBStop {\n    uint256 public _totalsupply;\n    string public constant name = \"Mobile Integrated Blockchain\";\n    string public constant symbol = \"MIB\";\n    uint public constant decimals = 18;\n    using SafeMath for uint256;\n\n    /* Actual balances of token holders */\n    mapping(address => uint256) public balances;\n    \n    mapping (address => mapping (address => uint256)) public allowed;    \n\n    event Burn(address indexed from, uint256 value);  \n\n    constructor (uint256 _totsupply) public {\n\t\t_totalsupply = _totsupply.mul(1e18);\n        balances[msg.sender] = _totalsupply;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalsupply;\n    }\n    \n    function balanceOf(address who) public view returns (uint256) {\n        return balances[who];\n    }\n\n    function transfer(address to, uint256 value) stoppable public returns (bool) {\n        require(to != address(0));\n\n        balances[to] = balances[to].add(value);\n        balances[msg.sender] = balances[msg.sender].sub(value);\n        \n        emit Transfer(msg.sender, to, value);\n\n        return true;\n    }\n    \n    function transferFrom(address from, address to, uint256 value) stoppable public returns (bool) {\n        require(to != address(0));\n\n        balances[from] = balances[from].sub(value);\n        balances[to] = balances[to].add(value);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\n        emit Transfer(from, to, value);\n        return true;\n    }\n      \n    function safeApprove(address _spender, uint256 _currentValue, uint256 _newValue)\n    public returns (bool success) {\n        if (allowance(msg.sender, _spender) == _currentValue)\n          return approve(_spender, _newValue);\n        else return false;\n    }\n    \n    function approve(address spender, uint256 value) stoppable public returns (bool success) {\n        allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n  \n    function allowance(address owner, address spender) public view returns (uint256) {\n        return allowed[owner][spender];\n    }\n    \n    function burn(uint256 value) public {\n        balances[msg.sender] = balances[msg.sender].sub(value);\n        _totalsupply = _totalsupply.sub(value);\n        emit Burn(msg.sender, value);\n    }\n    \n    function burnFrom(address who, uint256 value) public onlyOwner payable returns (bool success) {\n        \n        balances[who] = balances[who].sub(value);\n        balances[msg.sender] = balances[msg.sender].add(value);\n\n        emit Burn(who, value);\n        return true;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalsupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_currentValue\",\"type\":\"uint256\"},{\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"safeApprove\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_totsupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"MIBLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"OwnerLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b50604051602080610bf3833981016040525160008054600160a060020a0319163317905561005381670de0b6b3a7640000640100000000610af261006e82021704565b6001819055336000908152600260205260409020555061009d565b600082151561007f57506000610097565b5081810281838281151561008f57fe5b041461009757fe5b92915050565b610b47806100ac6000396000f3006080604052600436106101115763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461011657806307da68f5146101a0578063095ea7b3146101b757806318160ddd146101ef57806323b872dd1461021657806327e235e314610240578063313ce5671461026157806342966c68146102765780635c6581651461028e57806370a08231146102b557806375f12b21146102d657806379cc6790146102eb5780638da5cb5b1461030257806395d89b4114610333578063a393dc4414610348578063a9059cbb1461035d578063be9a655514610381578063dd62ed3e14610396578063f2fde38b146103bd578063f6503662146103de575b600080fd5b34801561012257600080fd5b5061012b610405565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561016557818101518382015260200161014d565b50505050905090810190601f1680156101925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101ac57600080fd5b506101b561043c565b005b3480156101c357600080fd5b506101db600160a060020a03600435166024356104b0565b604080519115158252519081900360200190f35b3480156101fb57600080fd5b50610204610530565b60408051918252519081900360200190f35b34801561022257600080fd5b506101db600160a060020a0360043581169060243516604435610536565b34801561024c57600080fd5b50610204600160a060020a0360043516610671565b34801561026d57600080fd5b50610204610683565b34801561028257600080fd5b506101b5600435610688565b34801561029a57600080fd5b50610204600160a060020a0360043581169060243516610707565b3480156102c157600080fd5b50610204600160a060020a0360043516610724565b3480156102e257600080fd5b506101db61073f565b6101db600160a060020a036004351660243561074f565b34801561030e57600080fd5b5061031761081c565b60408051600160a060020a039092168252519081900360200190f35b34801561033f57600080fd5b5061012b61082b565b34801561035457600080fd5b50610204610862565b34801561036957600080fd5b506101db600160a060020a0360043516602435610868565b34801561038d57600080fd5b506101b561094a565b3480156103a257600080fd5b50610204600160a060020a03600435811690602435166109b8565b3480156103c957600080fd5b506101b5600160a060020a03600435166109e3565b3480156103ea57600080fd5b506101db600160a060020a0360043516602435604435610aa7565b60408051808201909152601c81527f4d6f62696c6520496e746567726174656420426c6f636b636861696e00000000602082015281565b600054600160a060020a0316331461045357600080fd5b60408051348152905133917bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1960003516919081900360200190a26000805474ff0000000000000000000000000000000000000000191660a060020a179055565b6000805460a060020a900460ff16156104c857600080fd5b336000818152600360209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b60015490565b6000805460a060020a900460ff161561054e57600080fd5b600160a060020a038316151561056357600080fd5b600160a060020a03841660009081526002602052604090205461058c908363ffffffff610ad316565b600160a060020a0380861660009081526002602052604080822093909355908516815220546105c1908363ffffffff610ae516565b600160a060020a038085166000908152600260209081526040808320949094559187168152600382528281203382529091522054610605908363ffffffff610ad316565b600160a060020a03808616600081815260036020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060015b9392505050565b60026020526000908152604090205481565b601281565b336000908152600260205260409020546106a8908263ffffffff610ad316565b336000908152600260205260409020556001546106cb908263ffffffff610ad316565b60015560408051828152905133917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a250565b600360209081526000928352604080842090915290825290205481565b600160a060020a031660009081526002602052604090205490565b60005460a060020a900460ff1681565b60008054600160a060020a0316331461076757600080fd5b600160a060020a038316600090815260026020526040902054610790908363ffffffff610ad316565b600160a060020a0384166000908152600260205260408082209290925533815220546107c2908363ffffffff610ae516565b336000908152600260209081526040918290209290925580518481529051600160a060020a038616927fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5928290030190a250600192915050565b600054600160a060020a031681565b60408051808201909152600381527f4d49420000000000000000000000000000000000000000000000000000000000602082015281565b60015481565b6000805460a060020a900460ff161561088057600080fd5b600160a060020a038316151561089557600080fd5b600160a060020a0383166000908152600260205260409020546108be908363ffffffff610ae516565b600160a060020a0384166000908152600260205260408082209290925533815220546108f0908363ffffffff610ad316565b336000818152600260209081526040918290209390935580518581529051600160a060020a038716937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef928290030190a350600192915050565b600054600160a060020a0316331461096157600080fd5b60408051348152905133917bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1960003516919081900360200190a26000805474ff000000000000000000000000000000000000000019169055565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b600054600160a060020a031633146109fa57600080fd5b600160a060020a0381161515610a0f57600080fd5b60008054604080517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19933593909316835251600160a060020a03808516939216917f8cc3473d76f967279609ef0cfc0fd750b056bdc0d7c3969099c5f17c5699b3fe919081900360200190a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082610ab433866109b8565b1415610acb57610ac484836104b0565b905061066a565b50600061066a565b600082821115610adf57fe5b50900390565b8181018281101561052a57fe5b6000821515610b035750600061052a565b50818102818382811515610b1357fe5b041461052a57fe00a165627a7a72305820eeaef776489ceabf05cb8bf88e85cd113282ed5dee333d5117c762de14ab7c3200290000000000000000000000000000000000000000000000000000000011e1a300",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000011e1a300"
}