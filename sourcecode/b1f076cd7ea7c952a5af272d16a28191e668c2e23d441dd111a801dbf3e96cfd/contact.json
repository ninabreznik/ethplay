{
  "address": "0xf0ff750e5b500316d85c82c52eb9ac62e2ed6485",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ClarityCrowdsale",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-02\n*/\n\npragma solidity ^0.4.24;\n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(\n    IERC20 token,\n    address to,\n    uint256 value\n  )\n    internal\n  {\n    require(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(\n    IERC20 token,\n    address from,\n    address to,\n    uint256 value\n  )\n    internal\n  {\n    require(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(\n    IERC20 token,\n    address spender,\n    uint256 value\n  )\n    internal\n  {\n    require(token.approve(spender, value));\n  }\n}\n\n// File: openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale,\n * allowing investors to purchase tokens with ether. This contract implements\n * such functionality in its most fundamental form and can be extended to provide additional\n * functionality and/or custom behavior.\n * The external interface represents the basic interface for purchasing tokens, and conform\n * the base architecture for crowdsales. They are *not* intended to be modified / overridden.\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n * the methods to add functionality. Consider using 'super' where appropriate to concatenate\n * behavior.\n */\ncontract Crowdsale {\n  using SafeMath for uint256;\n  using SafeERC20 for IERC20;\n\n  // The token being sold\n  IERC20 private _token;\n\n  // Address where funds are collected\n  address private _wallet;\n\n  // How many token units a buyer gets per wei.\n  // The rate is the conversion between wei and the smallest and indivisible token unit.\n  // So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK\n  // 1 wei will give you 1 unit, or 0.001 TOK.\n  uint256 private _rate;\n\n  // Amount of wei raised\n  uint256 private _weiRaised;\n\n  /**\n   * Event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */\n  event TokensPurchased(\n    address indexed purchaser,\n    address indexed beneficiary,\n    uint256 value,\n    uint256 amount\n  );\n\n  /**\n   * @param rate Number of token units a buyer gets per wei\n   * @dev The rate is the conversion between wei and the smallest and indivisible\n   * token unit. So, if you are using a rate of 1 with a ERC20Detailed token\n   * with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.\n   * @param wallet Address where collected funds will be forwarded to\n   * @param token Address of the token being sold\n   */\n  constructor(uint256 rate, address wallet, IERC20 token) public {\n    require(rate > 0);\n    require(wallet != address(0));\n    require(token != address(0));\n\n    _rate = rate;\n    _wallet = wallet;\n    _token = token;\n  }\n\n  // -----------------------------------------\n  // Crowdsale external interface\n  // -----------------------------------------\n\n  /**\n   * @dev fallback function ***DO NOT OVERRIDE***\n   */\n  function () external payable {\n    buyTokens(msg.sender);\n  }\n\n  /**\n   * @return the token being sold.\n   */\n  function token() public view returns(IERC20) {\n    return _token;\n  }\n\n  /**\n   * @return the address where funds are collected.\n   */\n  function wallet() public view returns(address) {\n    return _wallet;\n  }\n\n  /**\n   * @return the number of token units a buyer gets per wei.\n   */\n  function rate() public view returns(uint256) {\n    return _rate;\n  }\n\n  /**\n   * @return the mount of wei raised.\n   */\n  function weiRaised() public view returns (uint256) {\n    return _weiRaised;\n  }\n\n  /**\n   * @dev low level token purchase ***DO NOT OVERRIDE***\n   * @param beneficiary Address performing the token purchase\n   */\n  function buyTokens(address beneficiary) public payable {\n\n    uint256 weiAmount = msg.value;\n    _preValidatePurchase(beneficiary, weiAmount);\n\n    // calculate token amount to be created\n    uint256 tokens = _getTokenAmount(weiAmount);\n\n    // update state\n    _weiRaised = _weiRaised.add(weiAmount);\n\n    _processPurchase(beneficiary, tokens);\n    emit TokensPurchased(\n      msg.sender,\n      beneficiary,\n      weiAmount,\n      tokens\n    );\n\n    _updatePurchasingState(beneficiary, weiAmount);\n\n    _forwardFunds();\n    _postValidatePurchase(beneficiary, weiAmount);\n  }\n\n  // -----------------------------------------\n  // Internal interface (extensible)\n  // -----------------------------------------\n\n  /**\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.\n   * Example from CappedCrowdsale.sol's _preValidatePurchase method:\n   *   super._preValidatePurchase(beneficiary, weiAmount);\n   *   require(weiRaised().add(weiAmount) <= cap);\n   * @param beneficiary Address performing the token purchase\n   * @param weiAmount Value in wei involved in the purchase\n   */\n  function _preValidatePurchase(\n    address beneficiary,\n    uint256 weiAmount\n  )\n    internal\n  {\n    require(beneficiary != address(0));\n    require(weiAmount != 0);\n  }\n\n  /**\n   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n   * @param beneficiary Address performing the token purchase\n   * @param weiAmount Value in wei involved in the purchase\n   */\n  function _postValidatePurchase(\n    address beneficiary,\n    uint256 weiAmount\n  )\n    internal\n  {\n    // optional override\n  }\n\n  /**\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n   * @param beneficiary Address performing the token purchase\n   * @param tokenAmount Number of tokens to be emitted\n   */\n  function _deliverTokens(\n    address beneficiary,\n    uint256 tokenAmount\n  )\n    internal\n  {\n    _token.safeTransfer(beneficiary, tokenAmount);\n  }\n\n  /**\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n   * @param beneficiary Address receiving the tokens\n   * @param tokenAmount Number of tokens to be purchased\n   */\n  function _processPurchase(\n    address beneficiary,\n    uint256 tokenAmount\n  )\n    internal\n  {\n    _deliverTokens(beneficiary, tokenAmount);\n  }\n\n  /**\n   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n   * @param beneficiary Address receiving the tokens\n   * @param weiAmount Value in wei involved in the purchase\n   */\n  function _updatePurchasingState(\n    address beneficiary,\n    uint256 weiAmount\n  )\n    internal\n  {\n    // optional override\n  }\n\n  /**\n   * @dev Override to extend the way in which ether is converted to tokens.\n   * @param weiAmount Value in wei to be converted into tokens\n   * @return Number of tokens that can be purchased with the specified _weiAmount\n   */\n  function _getTokenAmount(uint256 weiAmount)\n    internal view returns (uint256)\n  {\n    return weiAmount.mul(_rate);\n  }\n\n  /**\n   * @dev Determines how ETH is stored/forwarded on purchases.\n   */\n  function _forwardFunds() internal {\n    _wallet.transfer(msg.value);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol\n\n/**\n * @title TimedCrowdsale\n * @dev Crowdsale accepting contributions only within a time frame.\n */\ncontract TimedCrowdsale is Crowdsale {\n  using SafeMath for uint256;\n\n  uint256 private _openingTime;\n  uint256 private _closingTime;\n\n  /**\n   * @dev Reverts if not in crowdsale time range.\n   */\n  modifier onlyWhileOpen {\n    require(isOpen());\n    _;\n  }\n\n  /**\n   * @dev Constructor, takes crowdsale opening and closing times.\n   * @param openingTime Crowdsale opening time\n   * @param closingTime Crowdsale closing time\n   */\n  constructor(uint256 openingTime, uint256 closingTime) public {\n    // solium-disable-next-line security/no-block-members\n    require(openingTime >= block.timestamp);\n    require(closingTime >= openingTime);\n\n    _openingTime = openingTime;\n    _closingTime = closingTime;\n  }\n\n  /**\n   * @return the crowdsale opening time.\n   */\n  function openingTime() public view returns(uint256) {\n    return _openingTime;\n  }\n\n  /**\n   * @return the crowdsale closing time.\n   */\n  function closingTime() public view returns(uint256) {\n    return _closingTime;\n  }\n\n  /**\n   * @return true if the crowdsale is open, false otherwise.\n   */\n  function isOpen() public view returns (bool) {\n    // solium-disable-next-line security/no-block-members\n    return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\n  }\n\n  /**\n   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n   * @return Whether crowdsale period has elapsed\n   */\n  function hasClosed() public view returns (bool) {\n    // solium-disable-next-line security/no-block-members\n    return block.timestamp > _closingTime;\n  }\n\n  /**\n   * @dev Extend parent behavior requiring to be within contributing period\n   * @param beneficiary Token purchaser\n   * @param weiAmount Amount of wei contributed\n   */\n  function _preValidatePurchase(\n    address beneficiary,\n    uint256 weiAmount\n  )\n    internal\n    onlyWhileOpen\n  {\n    super._preValidatePurchase(beneficiary, weiAmount);\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/crowdsale/distribution/PostDeliveryCrowdsale.sol\n\n/**\n * @title PostDeliveryCrowdsale\n * @dev Crowdsale that locks tokens from withdrawal until it ends.\n */\ncontract PostDeliveryCrowdsale is TimedCrowdsale {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) private _balances;\n\n  /**\n   * @dev Withdraw tokens only after crowdsale ends.\n   * @param beneficiary Whose tokens will be withdrawn.\n   */\n  function withdrawTokens(address beneficiary) public {\n    require(hasClosed());\n    uint256 amount = _balances[beneficiary];\n    require(amount > 0);\n    _balances[beneficiary] = 0;\n    _deliverTokens(beneficiary, amount);\n  }\n\n  /**\n   * @return the balance of an account.\n   */\n  function balanceOf(address account) public view returns(uint256) {\n    return _balances[account];\n  }\n\n  /**\n   * @dev Overrides parent by storing balances instead of issuing tokens right away.\n   * @param beneficiary Token purchaser\n   * @param tokenAmount Amount of tokens purchased\n   */\n  function _processPurchase(\n    address beneficiary,\n    uint256 tokenAmount\n  )\n    internal\n  {\n    _balances[beneficiary] = _balances[beneficiary].add(tokenAmount);\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/crowdsale/distribution/FinalizableCrowdsale.sol\n\n/**\n * @title FinalizableCrowdsale\n * @dev Extension of Crowdsale with a one-off finalization action, where one\n * can do extra work after finishing.\n */\ncontract FinalizableCrowdsale is TimedCrowdsale {\n  using SafeMath for uint256;\n\n  bool private _finalized = false;\n\n  event CrowdsaleFinalized();\n\n  /**\n   * @return true if the crowdsale is finalized, false otherwise.\n   */\n  function finalized() public view returns (bool) {\n    return _finalized;\n  }\n\n  /**\n   * @dev Must be called after crowdsale ends, to do some extra finalization\n   * work. Calls the contract's finalization function.\n   */\n  function finalize() public {\n    require(!_finalized);\n    require(hasClosed());\n\n    _finalization();\n    emit CrowdsaleFinalized();\n\n    _finalized = true;\n  }\n\n  /**\n   * @dev Can be overridden to add finalization logic. The overriding function\n   * should call super._finalization() to ensure the chain of finalization is\n   * executed entirely.\n   */\n  function _finalization() internal {\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address private _owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    _owner = msg.sender;\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(_owner);\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\n// File: contracts/Whitelist.sol\n\ncontract Whitelist is Ownable {\n\n  mapping (address => bool) private whitelistedAddresses;\n\n  mapping (address => bool) private admins;\n\n  modifier onlyIfWhitelisted(address _addr) {\n    require(whitelistedAddresses[_addr] == true, \"Address not on the whitelist!\");\n    _;\n  }\n\n  modifier onlyAdmins() {\n    require(admins[msg.sender] == true || isOwner(), \"Not an admin!\");\n    _;\n  }\n\n  function addAdmin(address _addr)\n    external\n    onlyOwner\n  {\n    admins[_addr] = true;\n  }\n\n  function removeAdmin(address _addr)\n    external\n    onlyOwner\n  {\n    admins[_addr] = false;\n  }\n\n  function isAdmin(address _addr)\n    public\n    view\n    returns(bool)\n  {\n    return admins[_addr];\n  }\n\n  function addAddressToWhitelist(address _addr)\n    public\n    onlyAdmins\n  {\n    whitelistedAddresses[_addr] = true;\n  }\n\n  function whitelist(address _addr)\n    public\n    view\n    returns(bool)\n  {\n    return whitelistedAddresses[_addr];\n  }\n\n  function addAddressesToWhitelist(address[] _addrs)\n    public\n    onlyAdmins\n  {\n    for (uint256 i = 0; i < _addrs.length; i++) {\n      addAddressToWhitelist(_addrs[i]);\n    }\n  }\n\n  function removeAddressFromWhitelist(address _addr)\n    public\n    onlyAdmins\n  {\n    whitelistedAddresses[_addr] = false;\n  }\n\n  function removeAddressesFromWhitelist(address[] _addrs)\n    public\n    onlyAdmins\n  {\n    for (uint256 i = 0; i < _addrs.length; i++) {\n      removeAddressFromWhitelist(_addrs[i]);\n    }\n  }\n}\n\n// File: contracts/ClarityCrowdsale.sol\n\ncontract ClarityCrowdsale is\n  Crowdsale,\n  TimedCrowdsale,\n  PostDeliveryCrowdsale,\n  FinalizableCrowdsale,\n  Whitelist\n{\n\n  address private advisorWallet; // forward all phase one funds here\n\n  uint256 private phaseOneRate; // rate for phase one\n\n  uint256 private phaseTwoRate; // rate for phase teo\n\n  uint256 private phaseOneTokens = 10000000 * 10**18; // tokens available in phase one\n\n  uint256 private phaseTwoTokens = 30000000 * 10**18; // tokens available in phase two\n\n  mapping  (address => address) referrals; // Keep track of referrals for bonuses\n\n  modifier onlyFounders() {\n    require(msg.sender == super.wallet() || isOwner(), \"Not a founder!\");\n    _;\n  }\n\n  constructor(\n    uint256 _phaseOneRate,\n    uint256 _phaseTwoRate,\n    address _advisorWallet,\n    address _founderWallet,\n    uint256 _openingTime,\n    uint256 _closingTime,\n    IERC20 _token\n  )\n    Crowdsale(_phaseTwoRate, _founderWallet, _token)\n    TimedCrowdsale(_openingTime, _closingTime)\n    public\n  {\n      advisorWallet = _advisorWallet;\n      phaseOneRate = _phaseOneRate;\n      phaseTwoRate = _phaseTwoRate;\n  }\n\n  // overridden from Crowdsale parent contract\n  function _getTokenAmount(uint256 weiAmount)\n    internal view returns (uint256)\n  {\n    if (phaseOneTokens > 0) {\n      uint256 tokens = weiAmount.mul(phaseOneRate);\n      if (tokens > phaseOneTokens) {\n        uint256 weiRemaining = tokens.sub(phaseOneTokens).div(phaseOneRate);\n        tokens = phaseOneTokens.add(super._getTokenAmount(weiRemaining));\n      }\n      return tokens;\n    }\n\n    return super._getTokenAmount(weiAmount);\n  }\n\n  // overridden from Crowdsale parent contract\n  function _forwardFunds()\n    internal\n  {\n    uint256 tokens;\n    if (phaseOneTokens > 0) {\n      tokens = msg.value.mul(phaseOneRate);\n      if (tokens > phaseOneTokens) {\n        uint256 weiRemaining = tokens.sub(phaseOneTokens).div(phaseOneRate);\n        phaseOneTokens = 0;\n        advisorWallet.transfer(msg.value.sub(weiRemaining));\n        tokens = weiRemaining.mul(phaseTwoRate);\n        phaseTwoTokens = phaseTwoTokens.sub(tokens);\n        super.wallet().transfer(weiRemaining);\n      } else {\n        phaseOneTokens = phaseOneTokens.sub(tokens);\n        advisorWallet.transfer(msg.value);\n      }\n      return;\n    }\n\n    tokens = msg.value.mul(phaseTwoRate);\n    phaseTwoTokens = phaseTwoTokens.sub(tokens);\n    super._forwardFunds();\n  }\n\n  // overridden from Crowdsale parent contract\n  function _preValidatePurchase(\n    address beneficiary,\n    uint256 weiAmount\n  )\n    internal\n    onlyIfWhitelisted(beneficiary)\n  {\n    require(tokensLeft() >= _getTokenAmount(weiAmount), \"Insufficient number of tokens to complete purchase!\");\n    super._preValidatePurchase(beneficiary, weiAmount);\n  }\n\n  // overridden from Crowdsale parent contract\n  function _finalization()\n    internal\n    onlyFounders\n  {\n    super.token().safeTransfer(super.wallet(), tokensLeft());\n    super._finalization();\n  }\n\n  function tokensLeft()\n    public\n    view\n    returns (uint256)\n  {\n    return phaseOneTokens + phaseTwoTokens;\n  }\n\n  function addReferral(address beneficiary, address referrer)\n    external\n    onlyAdmins\n    onlyIfWhitelisted(referrer)\n    onlyIfWhitelisted(beneficiary)\n  {\n    referrals[beneficiary] = referrer;\n  }\n\n  // overridden from Crowdsale parent contract\n  function _processPurchase(\n    address beneficiary,\n    uint256 tokenAmount\n  )\n    internal\n  {\n    if (referrals[beneficiary] != 0) {\n      uint256 tokensAvailable = tokensLeft().sub(tokenAmount);\n      uint256 bonus = tokenAmount.mul(15).div(100);\n      if (bonus >= tokensAvailable) {\n        bonus = tokensAvailable;\n        phaseTwoTokens = phaseTwoTokens.sub(tokensAvailable);\n      } else {\n        phaseTwoTokens = phaseTwoTokens.sub(bonus);\n      }\n\n      if (bonus > 0) {\n        super._processPurchase(referrals[beneficiary], bonus);\n      }\n    }\n\n    super._processPurchase(beneficiary, tokenAmount);\n  }\n}",
  "bytecode": "60806040526007805460ff191690556a084595161401484a000000600d556a18d0bf423c03d8de000000600e5534801561003857600080fd5b5060405160e08061153383398101604090815281516020830151918301516060840151608085015160a086015160c090960151939592939192909182828786846000831161008557600080fd5b600160a060020a038216151561009a57600080fd5b600160a060020a03811615156100af57600080fd5b60029290925560018054600160a060020a03928316600160a060020a03199182161790915560008054929093169116179055428210156100ee57600080fd5b818110156100fb57600080fd5b60049190915560055550506007805461010060a860020a03191633610100021790555050600a8054600160a060020a031916600160a060020a0392909216919091179055600b91909155600c556113dc806101576000396000f30060806040526004361061015e5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630b5c3f8781146101695780631515bc2b146101905780631785f53c146101b957806324953eaa146101da57806324d7806c1461022f578063286dd3f5146102505780632c4e722e146102715780634042b66f1461029857806347535d7b146102ad57806349df728c146102c25780634b6753bc146102e35780634bb278f3146102f8578063521eb2731461030d578063704802751461033e57806370a082311461035f578063715018a6146103805780637b9417c8146103955780638da5cb5b146103b65780638f32d59b146103cb5780639b19251a146103e0578063b31f8f9314610401578063b3f05b9714610416578063b7a8807c1461042b578063e2ec6ec314610440578063ec8ac4d814610495578063f2fde38b146104a9578063fc0c546a146104ca575b610167336104df565b005b34801561017557600080fd5b50610167600160a060020a0360043581169060243516610581565b34801561019c57600080fd5b506101a5610716565b604080519115158252519081900360200190f35b3480156101c557600080fd5b50610167600160a060020a036004351661071e565b3480156101e657600080fd5b5060408051602060048035808201358381028086018501909652808552610167953695939460249493850192918291850190849080828437509497506107529650505050505050565b34801561023b57600080fd5b506101a5600160a060020a03600435166107f5565b34801561025c57600080fd5b50610167600160a060020a0360043516610813565b34801561027d57600080fd5b5061028661089e565b60408051918252519081900360200190f35b3480156102a457600080fd5b506102866108a4565b3480156102b957600080fd5b506101a56108aa565b3480156102ce57600080fd5b50610167600160a060020a03600435166108c5565b3480156102ef57600080fd5b50610286610923565b34801561030457600080fd5b50610167610929565b34801561031957600080fd5b5061032261098c565b60408051600160a060020a039092168252519081900360200190f35b34801561034a57600080fd5b50610167600160a060020a036004351661099b565b34801561036b57600080fd5b50610286600160a060020a03600435166109d2565b34801561038c57600080fd5b506101676109ed565b3480156103a157600080fd5b50610167600160a060020a0360043516610a5c565b3480156103c257600080fd5b50610322610aea565b3480156103d757600080fd5b506101a5610afe565b3480156103ec57600080fd5b506101a5600160a060020a0360043516610b14565b34801561040d57600080fd5b50610286610b32565b34801561042257600080fd5b506101a5610b3c565b34801561043757600080fd5b50610286610b45565b34801561044c57600080fd5b506040805160206004803580820135838102808601850190965280855261016795369593946024949385019291829185019084908082843750949750610b4b9650505050505050565b610167600160a060020a03600435166104df565b3480156104b557600080fd5b50610167600160a060020a0360043516610bea565b3480156104d657600080fd5b50610322610c09565b3460006104ec8383610c18565b6104f582610d26565b60035490915061050b908363ffffffff610db716565b6003556105188382610dd4565b60408051838152602081018390528151600160a060020a0386169233927f6faf93231a456e552dbc9961f58d9713ee4f2e69d15f1975b050ef0911053a7b929081900390910190a361056a83836107f1565b610572610ea4565b61057c83836107f1565b505050565b3360009081526009602052604090205460ff161515600114806105a757506105a7610afe565b15156105eb576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020611391833981519152604482015290519081900360640190fd5b600160a060020a038116600090815260086020526040902054819060ff161515600114610662576040805160e560020a62461bcd02815260206004820152601d60248201527f41646472657373206e6f74206f6e207468652077686974656c69737421000000604482015290519081900360640190fd5b600160a060020a038316600090815260086020526040902054839060ff1615156001146106d9576040805160e560020a62461bcd02815260206004820152601d60248201527f41646472657373206e6f74206f6e207468652077686974656c69737421000000604482015290519081900360640190fd5b5050600160a060020a039182166000908152600f60205260409020805473ffffffffffffffffffffffffffffffffffffffff191691909216179055565b600554421190565b610726610afe565b151561073157600080fd5b600160a060020a03166000908152600960205260409020805460ff19169055565b3360009081526009602052604081205460ff161515600114806107785750610778610afe565b15156107bc576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020611391833981519152604482015290519081900360640190fd5b5060005b81518110156107f1576107e982828151811015156107da57fe5b90602001906020020151610813565b6001016107c0565b5050565b600160a060020a031660009081526009602052604090205460ff1690565b3360009081526009602052604090205460ff161515600114806108395750610839610afe565b151561087d576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020611391833981519152604482015290519081900360640190fd5b600160a060020a03166000908152600860205260409020805460ff19169055565b60025490565b60035490565b600060045442101580156108c057506005544211155b905090565b60006108cf610716565b15156108da57600080fd5b50600160a060020a03811660009081526006602052604081205490811161090057600080fd5b600160a060020a0382166000908152600660205260408120556107f1828261103b565b60055490565b60075460ff161561093957600080fd5b610941610716565b151561094c57600080fd5b610954611058565b6040517f9270cc390c096600a1c17c44345a1ba689fafd99d97487b10cfccf86cf73183690600090a16007805460ff19166001179055565b600154600160a060020a031690565b6109a3610afe565b15156109ae57600080fd5b600160a060020a03166000908152600960205260409020805460ff19166001179055565b600160a060020a031660009081526006602052604090205490565b6109f5610afe565b1515610a0057600080fd5b600754604051610100909104600160a060020a0316907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26007805474ffffffffffffffffffffffffffffffffffffffff0019169055565b3360009081526009602052604090205460ff16151560011480610a825750610a82610afe565b1515610ac6576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020611391833981519152604482015290519081900360640190fd5b600160a060020a03166000908152600860205260409020805460ff19166001179055565b6007546101009004600160a060020a031690565b6007546101009004600160a060020a0316331490565b600160a060020a031660009081526008602052604090205460ff1690565b600e54600d540190565b60075460ff1690565b60045490565b3360009081526009602052604081205460ff16151560011480610b715750610b71610afe565b1515610bb5576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020611391833981519152604482015290519081900360640190fd5b5060005b81518110156107f157610be28282815181101515610bd357fe5b90602001906020020151610a5c565b600101610bb9565b610bf2610afe565b1515610bfd57600080fd5b610c068161110f565b50565b600054600160a060020a031690565b600160a060020a038216600090815260086020526040902054829060ff161515600114610c8f576040805160e560020a62461bcd02815260206004820152601d60248201527f41646472657373206e6f74206f6e207468652077686974656c69737421000000604482015290519081900360640190fd5b610c9882610d26565b610ca0610b32565b1015610d1c576040805160e560020a62461bcd02815260206004820152603360248201527f496e73756666696369656e74206e756d626572206f6620746f6b656e7320746f60448201527f20636f6d706c6574652070757263686173652100000000000000000000000000606482015290519081900360840190fd5b61057c8383611198565b600080600080600d541115610da457600b54610d4990859063ffffffff6111b516565b9150600d54821115610d9c57610d7c600b54610d70600d54856111e390919063ffffffff16565b9063ffffffff6111fa16565b9050610d99610d8a8261121d565b600d549063ffffffff610db716565b91505b819250610db0565b610dad8461121d565b92505b5050919050565b600082820183811015610dc957600080fd5b8091505b5092915050565b600160a060020a038083166000908152600f6020526040812054909182911615610e9457610e1083610e04610b32565b9063ffffffff6111e316565b9150610e286064610d7085600f63ffffffff6111b516565b9050818110610e4f5750600e548190610e47908263ffffffff6111e316565b600e55610e66565b600e54610e62908263ffffffff6111e316565b600e555b6000811115610e9457600160a060020a038085166000908152600f6020526040902054610e9491168261123a565b610e9e848461123a565b50505050565b6000806000600d54111561100657600b54610ec690349063ffffffff6111b516565b9150600d54821115610fb057610eed600b54610d70600d54856111e390919063ffffffff16565b6000600d55600a54909150600160a060020a03166108fc610f14348463ffffffff6111e316565b6040518115909202916000818181858888f19350505050158015610f3c573d6000803e3d6000fd5b50600c54610f5190829063ffffffff6111b516565b600e54909250610f67908363ffffffff6111e316565b600e55610f7261098c565b600160a060020a03166108fc829081150290604051600060405180830381858888f19350505050158015610faa573d6000803e3d6000fd5b50611001565b600d54610fc3908363ffffffff6111e316565b600d55600a54604051600160a060020a03909116903480156108fc02916000818181858888f19350505050158015610fff573d6000803e3d6000fd5b505b6107f1565b600c5461101a90349063ffffffff6111b516565b600e54909250611030908363ffffffff6111e316565b600e556107f1611283565b6000546107f190600160a060020a0316838363ffffffff6112bc16565b61106061098c565b600160a060020a031633600160a060020a031614806110825750611082610afe565b15156110d8576040805160e560020a62461bcd02815260206004820152600e60248201527f4e6f74206120666f756e64657221000000000000000000000000000000000000604482015290519081900360640190fd5b6111096110e361098c565b6110eb610b32565b6110f3610c09565b600160a060020a0316919063ffffffff6112bc16565b61110d5b565b600160a060020a038116151561112457600080fd5b600754604051600160a060020a0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360078054600160a060020a039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b6111a06108aa565b15156111ab57600080fd5b6107f1828261136f565b6000808315156111c85760009150610dcd565b508282028284828115156111d857fe5b0414610dc957600080fd5b600080838311156111f357600080fd5b5050900390565b60008080831161120957600080fd5b828481151561121457fe5b04949350505050565b6000611234600254836111b590919063ffffffff16565b92915050565b600160a060020a038216600090815260066020526040902054611263908263ffffffff610db716565b600160a060020a0390921660009081526006602052604090209190915550565b600154604051600160a060020a03909116903480156108fc02916000818181858888f19350505050158015610c06573d6000803e3d6000fd5b82600160a060020a031663a9059cbb83836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561133857600080fd5b505af115801561134c573d6000803e3d6000fd5b505050506040513d602081101561136257600080fd5b5051151561057c57600080fd5b600160a060020a038216151561138457600080fd5b8015156107f157600080fd004e6f7420616e2061646d696e2100000000000000000000000000000000000000a165627a7a72305820d6d37dd1c5db6313bd9b800d8fb0ed852b95dfe10ec30156e5460bfc39af3508002900000000000000000000000000000000000000000000000000000000000009c400000000000000000000000000000000000000000000000000000000000005dc0000000000000000000000006f3a7a39dac7428ced785f5bef9606ddf468eee500000000000000000000000033a8f2d1c594b1593810c968056959955ebe80b1000000000000000000000000000000000000000000000000000000005bdd8dc0000000000000000000000000000000000000000000000000000000005c3145000000000000000000000000005070dc5aa546e8e167c6dab0c45efac6348af74c",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000009c400000000000000000000000000000000000000000000000000000000000005dc0000000000000000000000006f3a7a39dac7428ced785f5bef9606ddf468eee500000000000000000000000033a8f2d1c594b1593810c968056959955ebe80b1000000000000000000000000000000000000000000000000000000005bdd8dc0000000000000000000000000000000000000000000000000000000005c3145000000000000000000000000005070dc5aa546e8e167c6dab0c45efac6348af74c"
}