{
  "address": "0xad0528aa8ffefb94a22c24720a431822591c1d38",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Lottery",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-10\n*/\n\npragma solidity 0.4.24;\n\ncontract Owned {\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        owner = newOwner;\n    }\n}\n\ncontract SafeMath {\n    function multiplication(uint a, uint b) internal pure returns (uint) {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function division(uint a, uint b) internal pure returns (uint) {\n        assert(b > 0);\n        uint c = a / b;\n        assert(a == b * c + a % b);\n        return c;\n    }\n\n    function subtraction(uint a, uint b) internal pure returns (uint) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function addition(uint a, uint b) internal pure returns (uint) {\n        uint c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract LottoEvents {\n    event BuyTicket(uint indexed _gameIndex, address indexed from, bytes numbers, uint _prizePool, uint _bonusPool);\n    event LockRound(uint indexed _gameIndex, uint _state, uint indexed _blockIndex);\n    event DrawRound(uint indexed _gameIndex, uint _state, uint indexed _blockIndex, string _blockHash, uint[] _winNumbers);\n    event EndRound(uint indexed _gameIndex, uint _state, uint _jackpot, uint _bonusAvg, address[] _jackpotWinners, address[] _goldKeyWinners, bool _autoStartNext);\n    event NewRound(uint indexed _gameIndex, uint _state, uint _initPrizeIn);\n    event DumpPrize(uint indexed _gameIndex, uint _jackpot);\n    event Transfer(uint indexed _gameIndex, uint value);\n    event Activated(uint indexed _gameIndex);\n    event Deactivated(uint indexed _gameIndex);\n    event SelfDestroy(uint indexed _gameIndex);\n}\n\nlibrary LottoModels {\n\n    // data struct hold each ticket info\n    struct Ticket {\n        uint rId;           // round identity\n        address player;     // the buyer\n        uint btime;         // buy time\n        uint[] numbers;     // buy numbers, idx 0,1,2,3,4 are red balls, idx 5 are blue balls\n        bool joinBonus;     // join bonus ?\n        bool useGoldKey;    // use gold key ?\n    }\n\n    // if round ended, each state is freeze, just for view\n    struct Round {\n        uint rId;            // current id\n        uint stime;          // start time\n        uint etime;          // end time\n        uint8 state;         // 0: live, 1: locked, 2: drawed, 7: ended\n\n        uint[] winNumbers;   // idx 0,1,2,3,4 are red balls, idx 5 are blue balls\n        address[] winners;   // the winner's addresses\n\n        uint ethIn;          // how much eth in this Round\n        uint prizePool;      // how much eth in prize pool, 40% of ethIn add init prize in\n        uint bonusPool;      // how much eth in bonus pool, 40% of ethIn\n        uint teamFee;        // how much eth to team, 20% of ethIn\n\n        uint btcBlockNoWhenLock; // the btc block no when lock this round\n        uint btcBlockNo;         // use for get win numbers, must higer than btcBlockNoWhenLock;\n        string btcBlockHash;     // use for get win numbers\n\n        uint bonusAvg;       // average bouns price for players\n        uint jackpot;        // the jackpot to pay\n        uint genGoldKeys;    // how many gold key gens\n    }\n}\n\ncontract Lottery is Owned, SafeMath, LottoEvents {\n    string constant version = \"1.0.1\";\n\n    uint constant private GOLD_KEY_CAP = 1500 ether;\n    uint constant private BUY_LIMIT_CAP = 100;\n    uint8 constant private ROUND_STATE_LIVE = 0;\n    uint8 constant private ROUND_STATE_LOCKED = 1;\n    uint8 constant private ROUND_STATE_DRAWED = 2;\n    uint8 constant private ROUND_STATE_ENDED = 7;\n\n    mapping (uint => LottoModels.Round) public rounds;       // all rounds, rid -> round\n    mapping (uint => LottoModels.Ticket[]) public tickets;   // all tickets, rid -> ticket array\n    mapping (address => uint) public goldKeyRepo;            // all gold key repo, keeper address -> key count\n    address[] private goldKeyKeepers;                           // all gold key keepers, just for clear mapping?!\n\n    uint public goldKeyCounter = 0;               // count for gold keys\n    uint public unIssuedGoldKeys = 0;             // un issued gold keys\n    uint public price = 0.03 ether;               // the price for each bet\n    bool public activated = false;                // contract live?\n    uint public rId;                              // current round id\n\n    constructor() public {\n        rId = 0;\n        activated = true;\n        internalNewRound(0, 0); // init with prize 0, bonus 0\n    }\n\n    // buy ticket\n    // WARNING!!!solidity only allow 16 local variables\n    function()\n        isHuman()\n        isActivated()\n        public\n        payable {\n\n        require(owner != msg.sender, \"owner cannot buy.\");\n        require(address(this) != msg.sender, \"contract cannot buy.\");\n        require(rounds[rId].state == ROUND_STATE_LIVE,  \"this round not start yet, please wait.\");\n        // data format check\n        require(msg.data.length > 9,  \"data struct not valid\");\n        require(msg.data.length % 9 == 1, \"data struct not valid\");\n        // price check\n        require(uint(msg.data[0]) < BUY_LIMIT_CAP, \"out of buy limit one time.\");\n        require(msg.value == uint(msg.data[0]) * price, \"price not right, please check.\");\n\n\n        uint i = 1;\n        while(i < msg.data.length) {\n            // fill data\n            // [0]: how many\n            // [1]: how many gold key use?\n            // [2]: join bonus?\n            // [3-7]: red balls, [8]: blue ball\n            uint _times = uint(msg.data[i++]);\n            uint _goldKeys = uint(msg.data[i++]);\n            bool _joinBonus = uint(msg.data[i++]) > 0;\n            uint[] memory _numbers = new uint[](6);\n            for(uint j = 0; j < 6; j++) {\n                _numbers[j] = uint(msg.data[i++]);\n            }\n\n            // every ticket\n            for (uint k = 0; k < _times; k++) {\n                bool _useGoldKey = false;\n                if (_goldKeys > 0 && goldKeyRepo[msg.sender] > 0) { // can use gold key?\n                    _goldKeys--; // reduce you keys you want\n                    goldKeyRepo[msg.sender]--; // reduce you keys in repo\n                    _useGoldKey = true;\n                }\n                tickets[rId].push(LottoModels.Ticket(rId, msg.sender,  now, _numbers, _joinBonus, _useGoldKey));\n            }\n        }\n\n        // update round data\n        rounds[rId].ethIn = addition(rounds[rId].ethIn, msg.value);\n        uint _amount = msg.value * 4 / 10;\n        rounds[rId].prizePool = addition(rounds[rId].prizePool, _amount); // 40% for prize\n        rounds[rId].bonusPool = addition(rounds[rId].bonusPool, _amount); // 40% for bonus\n        rounds[rId].teamFee = addition(rounds[rId].teamFee, division(_amount, 2));   // 20% for team\n        // check gen gold key?\n        internalIncreaseGoldKeyCounter(_amount);\n\n        emit BuyTicket(rId, msg.sender, msg.data, rounds[rId].prizePool, rounds[rId].bonusPool);\n    }\n\n\n    // core logic\n    //\n    // 1. lock the round, can't buy this round\n    // 2. on-chain calc win numbuers\n    // 3. off-chain calc jackpot, jackpot winners, goldkey winners, average bonus, blue number hits not share bonus.\n    // if compute on-chain, out of gas\n    // 4. end this round\n\n    // 1. lock the round, can't buy this round\n    function lockRound(uint btcBlockNo)\n    isActivated()\n    onlyOwner()\n    public {\n        require(rounds[rId].state == ROUND_STATE_LIVE, \"this round not live yet, no need lock\");\n        rounds[rId].btcBlockNoWhenLock = btcBlockNo;\n        rounds[rId].state = ROUND_STATE_LOCKED;\n        emit LockRound(rId, ROUND_STATE_LOCKED, btcBlockNo);\n    }\n\n    // 2. on-chain calc win numbuers\n    function drawRound(\n        uint  btcBlockNo,\n        string  btcBlockHash\n    )\n    isActivated()\n    onlyOwner()\n    public {\n        require(rounds[rId].state == ROUND_STATE_LOCKED, \"this round not locked yet, please lock it first\");\n        require(rounds[rId].btcBlockNoWhenLock < btcBlockNo,  \"the btc block no should higher than the btc block no when lock this round\");\n\n        // calculate winner\n        rounds[rId].winNumbers = calcWinNumbers(btcBlockHash);\n        rounds[rId].btcBlockHash = btcBlockHash;\n        rounds[rId].btcBlockNo = btcBlockNo;\n        rounds[rId].state = ROUND_STATE_DRAWED;\n\n        emit DrawRound(rId, ROUND_STATE_DRAWED, btcBlockNo, btcBlockHash, rounds[rId].winNumbers);\n    }\n\n    // 3. off-chain calc\n    // 4. end this round\n    function endRound(\n        uint jackpot,\n        uint bonusAvg,\n        address[] jackpotWinners,\n        address[] goldKeyWinners,\n        bool autoStartNext\n    )\n    isActivated()\n    onlyOwner()\n    public {\n        require(rounds[rId].state == ROUND_STATE_DRAWED, \"this round not drawed yet, please draw it first\");\n\n        // end this round\n        rounds[rId].state = ROUND_STATE_ENDED;\n        rounds[rId].etime = now;\n        rounds[rId].jackpot = jackpot;\n        rounds[rId].bonusAvg = bonusAvg;\n        rounds[rId].winners = jackpotWinners;\n\n        // if jackpot is this contract addr or owner addr, delete it\n\n        // if have winners, all keys will gone.\n        if (jackpotWinners.length > 0 && jackpot > 0) {\n            unIssuedGoldKeys = 0; // clear un issued gold keys\n            // clear players gold key\n            // no direct delete mapping in solidity\n            // we give an array to store gold key keepers\n            // clearing mapping from key keepers\n            // delete keepers\n            for (uint i = 0; i < goldKeyKeepers.length; i++) {\n                goldKeyRepo[goldKeyKeepers[i]] = 0;\n            }\n            delete goldKeyKeepers;\n        } else {\n            // else reward gold keys\n            if (unIssuedGoldKeys > 0) {\n                for (uint k = 0; k < goldKeyWinners.length; k++) {\n                    // update repo\n                    address _winner = goldKeyWinners[k];\n\n                    // except this address\n                    if (_winner == address(this)) {\n                        continue;\n                    }\n\n                    goldKeyRepo[_winner]++;\n\n                    // update keepers\n                    bool _hasKeeper = false;\n                    for (uint j = 0; j < goldKeyKeepers.length; j++) {\n                        if (goldKeyKeepers[j] == _winner) {\n                            _hasKeeper = true;\n                            break;\n                        }\n                    }\n                    if (!_hasKeeper) { // no keeper? push it in.\n                        goldKeyKeepers.push(_winner);\n                    }\n\n                    unIssuedGoldKeys--;\n                    if (unIssuedGoldKeys <= 0) { // no more gold keys, let's break;\n                        break;\n                    }\n\n                }\n            }\n            // move this round gen gold key to un issued gold keys\n            unIssuedGoldKeys = addition(unIssuedGoldKeys, rounds[rId].genGoldKeys);\n        }\n\n        emit EndRound(rId, ROUND_STATE_ENDED, jackpot, bonusAvg, jackpotWinners, goldKeyWinners, autoStartNext);\n        // round ended\n\n        // start next?\n        if (autoStartNext) {\n            newRound();\n        }\n    }\n\n    function newRound()\n    isActivated()\n    onlyOwner()\n    public {\n        // check this round is ended?\n        require(rounds[rId].state == ROUND_STATE_ENDED, \"this round not ended yet, please end it first\");\n\n        // lets start next round\n        // calculate prize to move, (prize pool - jackpot to pay)\n        uint _initPrizeIn = subtraction(rounds[rId].prizePool, rounds[rId].jackpot);\n        // move bonus pool, if no one share bonus(maybe)\n        uint _initBonusIn = rounds[rId].bonusPool;\n        if (rounds[rId].bonusAvg > 0) { // if someone share bonus, bonusAvg > 0, move 0\n            _initBonusIn = 0;\n        }\n        // move to new round\n        internalNewRound(_initPrizeIn, _initBonusIn);\n\n        emit NewRound(rId, ROUND_STATE_LIVE, _initPrizeIn);\n    }\n\n    function internalNewRound(uint _initPrizeIn, uint _initBonusIn) internal {\n        rId++;\n        rounds[rId].rId = rId;\n        rounds[rId].stime = now;\n        rounds[rId].state = ROUND_STATE_LIVE;\n        rounds[rId].prizePool = _initPrizeIn;\n        rounds[rId].bonusPool = _initBonusIn;\n    }\n    \n    function internalIncreaseGoldKeyCounter(uint _amount) internal {\n        goldKeyCounter = addition(goldKeyCounter, _amount);\n        if (goldKeyCounter >= GOLD_KEY_CAP) {\n            rounds[rId].genGoldKeys = addition(rounds[rId].genGoldKeys, 1);\n            goldKeyCounter = subtraction(goldKeyCounter, GOLD_KEY_CAP);\n        }\n    }\n\n    // utils\n    function calcWinNumbers(string blockHash)\n    public\n    pure\n    returns (uint[]) {\n        bytes32 random = keccak256(bytes(blockHash));\n        uint[] memory allRedNumbers = new uint[](40);\n        uint[] memory allBlueNumbers = new uint[](10);\n        uint[] memory winNumbers = new uint[](6);\n        for (uint i = 0; i < 40; i++) {\n            allRedNumbers[i] = i + 1;\n            if(i < 10) {\n                allBlueNumbers[i] = i;\n            }\n        }\n        for (i = 0; i < 5; i++) {\n            uint n = 40 - i;\n            uint r = (uint(random[i * 4]) + (uint(random[i * 4 + 1]) << 8) + (uint(random[i * 4 + 2]) << 16) + (uint(random[i * 4 + 3]) << 24)) % (n + 1);\n            winNumbers[i] = allRedNumbers[r];\n            allRedNumbers[r] = allRedNumbers[n - 1];\n        }\n        uint t = (uint(random[i * 4]) + (uint(random[i * 4 + 1]) << 8) + (uint(random[i * 4 + 2]) << 16) + (uint(random[i * 4 + 3]) << 24)) % 10;\n        winNumbers[5] = allBlueNumbers[t];\n        return winNumbers;\n    }\n\n    // for views\n    function getKeys() public view returns(uint) {\n        return goldKeyRepo[msg.sender];\n    }\n    \n    function getRoundByRId(uint _rId)\n    public\n    view\n    returns (uint[] res){\n        if(_rId > rId) return res;\n        res = new uint[](18);\n        uint k;\n        res[k++] = _rId;\n        res[k++] = uint(rounds[_rId].state);\n        res[k++] = rounds[_rId].ethIn;\n        res[k++] = rounds[_rId].prizePool;\n        res[k++] = rounds[_rId].bonusPool;\n        res[k++] = rounds[_rId].teamFee;\n        if (rounds[_rId].winNumbers.length == 0) {\n            for (uint j = 0; j < 6; j++)\n                res[k++] = 0;\n        } else {\n            for (j = 0; j < 6; j++)\n                res[k++] = rounds[_rId].winNumbers[j];\n        }\n        res[k++] = rounds[_rId].bonusAvg;\n        res[k++] = rounds[_rId].jackpot;\n        res[k++] = rounds[_rId].genGoldKeys;\n        res[k++] = rounds[_rId].btcBlockNo;\n        res[k++] = rounds[_rId].stime;\n        res[k++] = rounds[_rId].etime;\n    }\n\n    // --- danger ops ---\n\n    // angel send luck for players\n    function dumpPrize()\n    isActivated()\n    onlyOwner()\n    public\n    payable {\n        require(rounds[rId].state == ROUND_STATE_LIVE, \"this round not live yet.\");\n        rounds[rId].ethIn = addition(rounds[rId].ethIn, msg.value);\n        rounds[rId].prizePool = addition(rounds[rId].prizePool, msg.value);\n        // check gen gold key?\n        internalIncreaseGoldKeyCounter(msg.value);\n        emit DumpPrize(rId, msg.value);\n    }\n\n    function activate() public onlyOwner {\n        activated = true;\n        emit Activated(rId);\n    }\n\n    function deactivate() public onlyOwner {\n        activated = false;\n        emit Deactivated(rId);\n    }\n\n    function selfDestroy() public onlyOwner {\n        selfdestruct(msg.sender);\n        emit SelfDestroy(rId);\n    }\n\n    function transferToOwner(uint amount) public payable onlyOwner {\n        msg.sender.transfer(amount);\n        emit Transfer(rId, amount);\n    }\n    // --- danger ops end ---\n\n    // modifiers\n    modifier isActivated() {\n        require(activated == true, \"its not ready yet.\");\n        _;\n    }\n\n    modifier isHuman() {\n        address _addr = msg.sender;\n        require (_addr == tx.origin);\n\n        uint256 _codeLength;\n\n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0, \"sorry humans only\");\n        _;\n    }\n}",
  "bytecode": ""
}