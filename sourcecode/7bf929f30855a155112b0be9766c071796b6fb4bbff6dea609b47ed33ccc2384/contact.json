{
  "address": "0x6a498c4d31aec7dd076d81e73d564f33c9a07764",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BitchipWallet",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-19\n*/\n\npragma solidity ^0.4.11;\n\ncontract ERC20 {\n    function balanceOf(address tokenOwner) public view returns (uint256);\n    function transfer(address to, uint tokens) public;\n    function transferFrom(address from, address to, uint256 value) public;\n}\n\ncontract owned {\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\nlibrary SafeMath {\n    function mul(uint a, uint b) internal pure returns (uint) {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint a, uint b) internal pure returns (uint) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint a, uint b) internal pure returns (uint) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint a, uint b) internal pure returns (uint) {\n        uint c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n\n\ncontract BitchipWallet is owned{\n    address private ETH = 0x0000000000000000000000000000000000000000;\n    using SafeMath for uint;\n    constructor() public {\n    }\n    \n\n    function() external payable {\n    }\n\n    function withdrawToken(ERC20 token, uint amount, address sendTo) public onlyOwner {\n        token.transfer(sendTo, amount);\n    }\n\n    function withdrawEther(uint amount, address sendTo) public onlyOwner {\n        address(sendTo).transfer(amount);\n    }\n    function withdraw(address[] _to, address[] _token, uint[] _amount) public onlyOwner{\n        for(uint x = 0; x < _amount.length ; ++x){\n            require(_amount[x] > 0);\n        }\n        for(uint i = 0; i < _amount.length ; ++i){\n            _withdraw(_token[i], _amount[i], _to[i]);\n        }\n    }\n\n    function withdrawFrom(address[] _from, address[] _to, address[] _token, uint256[] _amount) public onlyOwner{\n        for(uint x = 0; x < _from.length ; ++x){\n            require(_amount[x] > 0);\n        }\n        for(uint i = 0; i < _from.length ; ++i){\n            ERC20(_token[i]).transferFrom(_from[i], _to[i], _amount[i]);\n        }\n    }\n    \n    function balanceOf(address coin) public view returns (uint balance){\n        if (coin == ETH) {\n            return address(this).balance;\n        }else{\n            return ERC20(coin).balanceOf(address(this));\n        }\n    }\n\n    function _withdraw(address coin, uint amount, address to) internal{\n        if (coin == ETH) {\n            to.transfer(amount);\n        }else{\n            ERC20(coin).transfer(to, amount);\n        }\n    }\n\n}",
  "bytecode": "608060405260018054600160a060020a031916905534801561002057600080fd5b5060008054600160a060020a031916331790556107a3806100426000396000f3006080604052600436106100695763ffffffff60e060020a6000350416633ccdbb28811461006b57806370a08231146100965780638da5cb5b146100c9578063c2faacaa146100fa578063ce56c454146101fa578063f2fde38b1461021e578063f7ece0cf1461023f575b005b34801561007757600080fd5b50610069600160a060020a036004358116906024359060443516610306565b3480156100a257600080fd5b506100b7600160a060020a036004351661039d565b60408051918252519081900360200190f35b3480156100d557600080fd5b506100de610453565b60408051600160a060020a039092168252519081900360200190f35b34801561010657600080fd5b506040805160206004803580820135838102808601850190965280855261006995369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506104629650505050505050565b34801561020657600080fd5b50610069600435600160a060020a03602435166105ca565b34801561022a57600080fd5b50610069600160a060020a036004351661061c565b34801561024b57600080fd5b506040805160206004803580820135838102808601850190965280855261006995369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506106629650505050505050565b600054600160a060020a0316331461031d57600080fd5b82600160a060020a031663a9059cbb82846040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050600060405180830381600087803b15801561038057600080fd5b505af1158015610394573d6000803e3d6000fd5b50505050505050565b600154600090600160a060020a03838116911614156103be5750303161044e565b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a038416916370a082319160248083019260209291908290030181600087803b15801561041f57600080fd5b505af1158015610433573d6000803e3d6000fd5b505050506040513d602081101561044957600080fd5b505190505b919050565b600054600160a060020a031681565b600080548190600160a060020a0316331461047c57600080fd5b600091505b85518210156104b9576000838381518110151561049a57fe5b60209081029091010151116104ae57600080fd5b816001019150610481565b5060005b85518110156105c25783818151811015156104d457fe5b90602001906020020151600160a060020a03166323b872dd87838151811015156104fa57fe5b90602001906020020151878481518110151561051257fe5b90602001906020020151868581518110151561052a57fe5b906020019060200201516040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183600160a060020a0316600160a060020a031681526020018281526020019350505050600060405180830381600087803b15801561059f57600080fd5b505af11580156105b3573d6000803e3d6000fd5b505050508060010190506104bd565b505050505050565b600054600160a060020a031633146105e157600080fd5b604051600160a060020a0382169083156108fc029084906000818181858888f19350505050158015610617573d6000803e3d6000fd5b505050565b600054600160a060020a0316331461063357600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600080548190600160a060020a0316331461067c57600080fd5b600091505b82518210156106b9576000838381518110151561069a57fe5b60209081029091010151116106ae57600080fd5b816001019150610681565b5060005b825181101561071e5761071684828151811015156106d757fe5b9060200190602002015184838151811015156106ef57fe5b90602001906020020151878481518110151561070757fe5b90602001906020020151610725565b6001016106bd565b5050505050565b600154600160a060020a038481169116141561031d57604051600160a060020a0382169083156108fc029084906000818181858888f19350505050158015610771573d6000803e3d6000fd5b506106175600a165627a7a72305820131ea9574224d6d6f82be64881b41acd73f7314b9cec101f3f520457c1db40230029"
}