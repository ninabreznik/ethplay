{
  "address": "0x8b56b863fca1c654c2ba1e1b6a23b8285a5e5d87",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WaraCoin",
  "compilerVersion": "v0.4.20-nightly.2018.1.29+commit.a668b9de",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-01\n*/\n\npragma solidity ^0.4.16;\n\ncontract owned {\n    address public owner;\n\n    function owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n}\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n\ncontract TokenERC20 {\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;\n    // 18 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply;\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function TokenERC20() public {\n        totalSupply = 200000000 * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = \"WaraCoin2\";                                   // Set the name for display purposes\n        symbol = \"WAC2\";                               // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` in behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n}\n\ncontract  WaraCoin is owned, TokenERC20 {\n    \n    uint256 public sale_step;\n    \n    address waracoin_corp;\n\n    /* Save product's genuine information */\n    struct Product_genuine\n    {\n        address m_made_from_who;  // who made this product \n        \n        string m_Product_GUID;    // product's unique code\n        string m_Product_Description; // product's description\n        address m_who_have;       // who have this product now\n        address m_send_to_who;    // when product move to agency - if it is different with seller, it means that seller have no genuine  \n        string m_hash;  // need to check hash of description\n        \n        uint256 m_moved_count;  // how many times moved this product\n    }\n    \n    mapping (address => mapping (uint256 => Product_genuine)) public MyProducts;\n    \n    \n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function WaraCoin() TokenERC20()  public \n    {\n        sale_step = 0;  // 0 : No sale, 1 : Presale, 2 : Crowdsale, 3 : Normalsale \n        waracoin_corp = msg.sender;\n    }\n    \n    function SetSaleStep(uint256 step) onlyOwner public\n    {\n        sale_step = step;\n    }\n\n    /* Set Waracoin sale price */\n    function () payable \n    {\n        require(sale_step!=0);\n        \n        if ( msg.sender != owner )  // If owner send Ether, it will use for dApp operation\n        {\n            uint amount = 0;\n            uint nowprice = 0;\n            \n            if ( sale_step == 1  )\n                nowprice = 10000;   // presale price\n            else\n                if ( sale_step == 2 )\n                    nowprice = 5000;    // crowdsale price\n                else\n                    nowprice = 1000;    // normalsale price\n                    \n            amount = msg.value * nowprice; \n            \n            require(balanceOf[waracoin_corp]>=amount);\n            \n            balanceOf[waracoin_corp] -= amount;\n            balanceOf[msg.sender] += amount;                  // adds the amount to buyer's balance\n            require(waracoin_corp.send(msg.value));\n            Transfer(this, msg.sender, amount);               // execute an event reflecting the change\n        }\n    }\n\n    /**\n     * Seller will send WaraCoin to buyer\n     *\n     * @param _to The address of backers who have WaraCoin\n     * @param coin_amount How many WaraCoin will send\n     */\n    function waraCoinTransfer(address _to, uint256 coin_amount) public\n    {\n        uint256 amount = coin_amount * 10 ** uint256(decimals);\n\n        require(balanceOf[msg.sender] >= amount);         // checks if the sender has enough to sell\n        balanceOf[msg.sender] -= amount;                  // subtracts the amount from seller's balance\n        balanceOf[_to] += amount;                  // subtracts the amount from seller's balance\n        Transfer(msg.sender, _to, amount);               // executes an event reflecting on the change\n    }\n\n    /**\n     * Owner will buy back WaraCoin from backers\n     *\n     * @param _from The address of backers who have WaraCoin\n     * @param coin_amount How many WaraCoin will buy back from him\n     */\n    function DestroyCoin(address _from, uint256 coin_amount) onlyOwner public \n    {\n        uint256 amount = coin_amount * 10 ** uint256(decimals);\n\n        require(balanceOf[_from] >= amount);         // checks if the sender has enough to sell\n        balanceOf[_from] -= amount;                  // subtracts the amount from seller's balance\n        Transfer(_from, this, amount);               // executes an event reflecting on the change\n    }    \n    \n    /**\n     * Here is WaraCoin's Genuine dApp functions\n    */\n    \n    /* When creator made product, must need to use this fuction for register his product first */\n    function registerNewProduct(uint256 product_idx,string new_guid,string product_descriptions,string hash) public returns(bool success)\n    {\n        uint256 amount = 1 * 10 ** uint256(decimals-2);        \n        \n        require(balanceOf[msg.sender]>=amount);   // Need to use one WaraCoin for make product code\n        \n        Product_genuine storage mine = MyProducts[msg.sender][product_idx];\n        \n        require(mine.m_made_from_who!=msg.sender);\n        \n        mine.m_made_from_who = msg.sender;\n        mine.m_who_have = msg.sender;\n        mine.m_Product_GUID = new_guid;\n        mine.m_Product_Description = product_descriptions;\n        mine.m_hash = hash;\n\n        balanceOf[msg.sender] -= amount;\n        return true;        \n    }\n    \n    /* If product's owner want to move, he need to use this fuction for setting receiver : must use by sender */  \n    function setMoveProductToWhom(address who_made_this,uint256 product_idx,address moveto) public returns (bool success)\n    {\n        Product_genuine storage mine = MyProducts[who_made_this][product_idx];\n        \n        require(mine.m_who_have==msg.sender);\n        \n        mine.m_send_to_who = moveto;\n\n        return true;\n    }\n    \n    /* Product's buyer need to use this function for save his genuine */\n    function moveProduct(address who_made_this,address who_have_this,uint256 product_idx) public returns (bool success)\n    {\n        uint256 amount = 1 * 10 ** uint256(decimals-2);        \n\n        require(balanceOf[msg.sender]>=amount);   // Need to use one WaraCoin for move product\n        \n        Product_genuine storage mine = MyProducts[who_made_this][product_idx];\n        \n        require(mine.m_who_have==who_have_this);    // if sender have no product, break\n        require(mine.m_send_to_who==msg.sender);    // if receiver is not me, break\n\n        mine.m_who_have = msg.sender;\n        mine.m_moved_count += 1;\n        \n        balanceOf[msg.sender] -= amount;\n        \n        return true;\n    }\n\n    /* Check Genuine of owner */\n    function checkProductGenuine(address who_made_this,address who_have_this,uint256 product_idx) public returns (bool success)\n    {\n        success = false;\n        \n        Product_genuine storage mine = MyProducts[who_made_this][product_idx];\n        if ( mine.m_who_have==who_have_this )    // if checker have no product, break\n            success = true;\n            \n        return success;\n    }\n    \n}",
  "bytecode": "60606040526012600360006101000a81548160ff021916908360ff16021790555034156200002c57600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900460ff1660ff16600a0a630bebc20002600481905550600454600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506040805190810160405280600981526020017f57617261436f696e3200000000000000000000000000000000000000000000008152506001908051906020019062000121929190620001bf565b506040805190810160405280600481526020017f5741433200000000000000000000000000000000000000000000000000000000815250600290805190602001906200016f929190620001bf565b50600060078190555033600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200026e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200020257805160ff191683800117855562000233565b8280016001018555821562000233579182015b828111156200023257825182559160200191906001019062000215565b5b50905062000242919062000246565b5090565b6200026b91905b80821115620002675760008160009055506001016200024d565b5090565b90565b6120d6806200027e6000396000f300606060405260043610610112576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146103b3578063095ea7b3146104415780630c9cbfee1461049b57806318160ddd146105145780631f6dc06c1461053d57806322412ded1461056057806323b872dd146107ea578063313ce567146108635780636cebd8851461089257806370a08231146108d45780637f5ba79f146109215780638da5cb5b14610a2557806395d89b4114610a7a5780639c7e8ef414610b08578063a9059cbb14610b31578063c046c69114610b73578063cae9ca5114610bec578063d3e0996a14610c89578063d68e0ff714610d02578063dd62ed3e14610d44575b60008060006007541415151561012757600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156103af5760009150600090506001600754141561019a5761271090506101b6565b600260075414156101af5761138890506101b5565b6103e890505b5b80340291508160056000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561022b57600080fd5b8160056000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050151561034957600080fd5b3373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35b5050005b34156103be57600080fd5b6103c6610db0565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104065780820151818401526020810190506103eb565b50505050905090810190601f1680156104335780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561044c57600080fd5b610481600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610e4e565b604051808215151515815260200191505060405180910390f35b34156104a657600080fd5b6104fa600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610edb565b604051808215151515815260200191505060405180910390f35b341561051f57600080fd5b61052761110a565b6040518082815260200191505060405180910390f35b341561054857600080fd5b61055e6004808035906020019091905050611110565b005b341561056b57600080fd5b6105a0600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611175565b604051808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200185815260200184810384528a8181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156106cd5780601f106106a2576101008083540402835291602001916106cd565b820191906000526020600020905b8154815290600101906020018083116106b057829003601f168201915b50508481038352898181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156107505780601f1061072557610100808354040283529160200191610750565b820191906000526020600020905b81548152906001019060200180831161073357829003601f168201915b50508481038252868181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156107d35780601f106107a8576101008083540402835291602001916107d3565b820191906000526020600020905b8154815290600101906020018083116107b657829003601f168201915b50509a505050505050505050505060405180910390f35b34156107f557600080fd5b610849600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611221565b604051808215151515815260200191505060405180910390f35b341561086e57600080fd5b61087661134e565b604051808260ff1660ff16815260200191505060405180910390f35b341561089d57600080fd5b6108d2600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611361565b005b34156108df57600080fd5b61090b600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506114cf565b6040518082815260200191505060405180910390f35b341561092c57600080fd5b610a0b600480803590602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506114e7565b604051808215151515815260200191505060405180910390f35b3415610a3057600080fd5b610a38611735565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610a8557600080fd5b610a8d61175a565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610acd578082015181840152602081019050610ab2565b50505050905090810190601f168015610afa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3415610b1357600080fd5b610b1b6117f8565b6040518082815260200191505060405180910390f35b3415610b3c57600080fd5b610b71600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506117fe565b005b3415610b7e57600080fd5b610bd2600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061180d565b604051808215151515815260200191505060405180910390f35b3415610bf757600080fd5b610c6f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061190f565b604051808215151515815260200191505060405180910390f35b3415610c9457600080fd5b610ce8600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611a8d565b604051808215151515815260200191505060405180910390f35b3415610d0d57600080fd5b610d42600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611b4e565b005b3415610d4f57600080fd5b610d9a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611cca565b6040518082815260200191505060405180910390f35b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e465780601f10610e1b57610100808354040283529160200191610e46565b820191906000526020600020905b815481529060010190602001808311610e2957829003601f168201915b505050505081565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b60008060006002600360009054906101000a900460ff160360ff16600a0a600102915081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610f4c57600080fd5b600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002090508473ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610ffc57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561105a57600080fd5b338160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001816006016000828254019250508190555081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001925050509392505050565b60045481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561116b57600080fd5b8060078190555050565b6009602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001019080600201908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600501908060060154905087565b6000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156112ae57600080fd5b81600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550611343848484611cef565b600190509392505050565b600360009054906101000a900460ff1681565b6000600360009054906101000a900460ff1660ff16600a0a8202905080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156113cb57600080fd5b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b60056020528060005260406000206000915090505481565b60008060006002600360009054906101000a900460ff160360ff16600a0a600102915081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561155857600080fd5b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600088815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561160957600080fd5b338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550338160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550858160010190805190602001906116a7929190612005565b50848160020190805190602001906116c0929190612005565b50838160050190805190602001906116d9929190612005565b5081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550600192505050949350505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117f05780601f106117c5576101008083540402835291602001916117f0565b820191906000526020600020905b8154815290600101906020018083116117d357829003601f168201915b505050505081565b60075481565b611809338383611cef565b5050565b600080600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156118c057600080fd5b828160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019150509392505050565b60008084905061191f8585610e4e565b15611a84578073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611a195780820151818401526020810190506119fe565b50505050905090810190601f168015611a465780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1515611a6757600080fd5b6102c65a03f11515611a7857600080fd5b50505060019150611a85565b5b509392505050565b60008060009150600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002090508373ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611b4357600191505b819150509392505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611bab57600080fd5b600360009054906101000a900460ff1660ff16600a0a8202905080600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515611c1357600080fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055503073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6006602052816000526040600020602052806000526040600020600091509150505481565b6000808373ffffffffffffffffffffffffffffffffffffffff1614151515611d1657600080fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515611d6457600080fd5b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401111515611df257600080fd5b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401905081600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a380600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401141515611fff57fe5b50505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061204657805160ff1916838001178555612074565b82800160010185558215612074579182015b82811115612073578251825591602001919060010190612058565b5b5090506120819190612085565b5090565b6120a791905b808211156120a357600081600090555060010161208b565b5090565b905600a165627a7a72305820ea34eab7d4c4fbd6ff3a49558bb3004932ecc4067c0be5728f2c94ef250b8b6c0029"
}