{
  "address": "0xb0e76ed283b011a7f74e0702a57d7ca8ef14e02b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ERACoin",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-23\n*/\n\npragma solidity ^0.5.2;\n \n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error.\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n \n        uint256 c = a * b;\n        require(c / a == b);\n \n        return c;\n    }\n \n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n \n        return c;\n    }\n \n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n \n        return c;\n    }\n \n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n \n        return c;\n    }\n \n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n \n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n \n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n \n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n \n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n \n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n \n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n \n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n \n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n \n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n \n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n \n    function balanceOf(address who) external view returns (uint256);\n \n    function allowance(address owner, address spender) external view returns (uint256);\n \n    function transfer(address to, uint256 value) external returns (bool);\n \n    function approve(address spender, uint256 value) external returns (bool);\n \n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n \n    event Transfer(address indexed from, address indexed to, uint256 value);\n \n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n \n/**\n * @title Helps contracts guard against reentrancy attacks.\n * @author Remco Bloemen <[email protected]π.com>, Eenae <[email protected]>\n * @dev If you mark a function `nonReentrant`, you should also\n * mark it `external`.\n */\ncontract ReentrancyGuard {\n    /// @dev counter to allow mutex lock with only one SSTORE operation\n    uint256 private _guardCounter;\n \n    constructor () internal {\n        // The counter starts at one to prevent changing it from zero to a non-zero\n        // value, which is a more expensive operation.\n        _guardCounter = 1;\n    }\n \n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _guardCounter += 1;\n        uint256 localCounter = _guardCounter;\n        _;\n        require(localCounter == _guardCounter);\n    }\n}\n \n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n    event Paused(address account);\n    event Unpaused(address account);\n \n    bool private _paused;\n \n    constructor () internal {\n        _paused = false;\n    }\n \n    /**\n     * @return True if the contract is paused, false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n \n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n \n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n \n    /**\n     * @dev Called by a pauser to pause, triggers stopped state.\n     */\n    function pause() public onlyOwner whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n \n    /**\n     * @dev Called by a pauser to unpause, returns to normal state.\n     */\n    function unpause() public onlyOwner whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n \n/**\n * @title ERACoin\n * @dev ERC20 Token \n */\ncontract ERACoin is IERC20, Ownable, ReentrancyGuard, Pausable  {\n   using SafeMath for uint256;\n   \n    mapping (address => uint256) private _balances;\n \n    mapping (address => mapping (address => uint256)) private _allowed;\n \n    uint256 private _totalSupply;\n    \n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n \n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n    \n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n \n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n        require(spender != address(0));\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n \n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {\n        require(spender != address(0));\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n \n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {\n        require(spender != address(0));\n        \n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n \n    /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n \n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n \n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n \n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n \n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n \n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n    }\n \n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n    uint256 private _initSupply;\n    \n    constructor (string memory name, string memory symbol, uint8 decimals, uint256 initSupply) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n        _initSupply = initSupply.mul(10 **uint256(decimals));\n        _mint(msg.sender, _initSupply);\n    }\n \n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n \n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n \n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n    \n    /**\n     * @return the initial Supply of the token.\n     */\n    function initSupply() public view returns (uint256) {\n        return _initSupply;\n    }\n   \n   mapping (address => bool) status; \n   \n   \n   // Address bounty Admin\n    address private _walletAdmin; \n   // Address where funds can be collected\n    address payable _walletBase90;\n    // Address where funds can be collected too\n    address payable _walletF5;\n    // Address where funds can be collected too\n    address payable _walletS5;\n    // How many token units a buyer gets per wei.\n    // The rate is the conversion between wei and the smallest and indivisible token unit.\n    // So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK\n    // 1 wei will give you 1 unit, or 0.001 TOK.\n    uint256 private _rate;\n    // _rate share index\n    uint256 private _y;\n    // Amount of wei raised\n    uint256 private _weiRaised;\n    // Min token*s qty required to buy  \n    uint256 private _MinTokenQty;\n    // Max token*s qty is available for transfer by bounty Admin \n    uint256 private _MaxTokenAdminQty;\n    \n   /**\n     * @dev Function to mint tokens\n     * @param to The address that will receive the minted tokens.\n     * @param value The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address to, uint256 value) public onlyOwner returns (bool) {\n        _mint(to, value);\n        return true;\n    }\n    \n   /**\n     * @dev Function to burn tokens\n     * @param to The address to burn tokens.\n     * @param value The amount of tokens to burn.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function burn(address to, uint256 value) public onlyOwner returns (bool) {\n        _burn(to, value);\n        return true;\n    }\n    \n    /**\n    * @dev Transfer token for a specified address.onlyOwner\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transferOwner(address to, uint256 value) public onlyOwner returns (bool) {\n      \n        _transfer(msg.sender, to, value);\n        return true;\n    }\n    \n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n      \n        _transfer(msg.sender, to, value);\n        return true;\n    }\n    \n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n      \n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n        return true;\n    }\n     \n   /**\n     * @dev check an account's status\n     * @return bool\n     */\n    function CheckStatus(address account) public view returns (bool) {\n        require(account != address(0));\n        bool currentStatus = status[account];\n        return currentStatus;\n    }\n    \n    /**\n     * @dev change an account's status. OnlyOwner\n     * @return bool\n     */\n    function ChangeStatus(address account) public  onlyOwner {\n        require(account != address(0));\n        bool currentStatus1 = status[account];\n       status[account] = (currentStatus1 == true) ? false : true;\n    }\n \n   /**\n     * @dev fallback function ***DO NOT OVERRIDE***\n     * Note that other contracts will transfer fund with a base gas stipend\n     * of 2300, which is not enough to call buyTokens. Consider calling\n     * buyTokens directly when purchasing tokens from a contract.\n     */\n    function () external payable {\n        buyTokens(msg.sender, msg.value);\n        }\n        \n    function buyTokens(address beneficiary, uint256 weiAmount) public nonReentrant payable {\n        require(beneficiary != address(0) && beneficiary !=_walletBase90 && beneficiary !=_walletF5 && beneficiary !=_walletS5);\n        require(weiAmount > 0);\n        address _walletTokenSale = owner();\n        require(_walletTokenSale != address(0));\n        require(_walletBase90 != address(0));\n        require(_walletF5 != address(0));\n        require(_walletS5 != address(0));\n        require(CheckStatus(beneficiary) != true);\n        // calculate token amount to be created\n        uint256 tokens = weiAmount.div(_y).mul(_rate);\n        // update min token amount to be buy by beneficiary\n        uint256 currentMinQty = MinTokenQty();\n        // check token amount to be transfered from _wallet\n        require(balanceOf(_walletTokenSale) > tokens);\n        // check token amount to be buy by beneficiary\n        require(tokens >= currentMinQty);\n        // update state\n        _weiRaised = _weiRaised.add(weiAmount);\n        // transfer tokens to beneficiary from CurrentFundWallet\n       _transfer(_walletTokenSale, beneficiary, tokens);\n       // transfer 90% weiAmount to _walletBase90\n       _walletBase90.transfer(weiAmount.div(100).mul(90));\n       // transfer 5% weiAmount to _walletF5\n       _walletF5.transfer(weiAmount.div(100).mul(5));\n       // transfer 5% weiAmount to _walletS5\n       _walletS5.transfer(weiAmount.div(100).mul(5));\n    }\n  \n    /**\n     * Set Rate. onlyOwner\n     */\n    function setRate(uint256 rate) public onlyOwner  {\n        require(rate >= 1);\n        _rate = rate;\n    }\n   \n    /**\n     * Set Y. onlyOwner\n     */\n    function setY(uint256 y) public onlyOwner  {\n        require(y >= 1);\n        _y = y;\n    }\n    \n    /**\n     * Set together the _walletBase90,_walletF5,_walletS5. onlyOwner\n     */\n    function setFundWallets(address payable B90Wallet,address payable F5Wallet,address payable S5Wallet) public onlyOwner  {\n        _walletBase90 = B90Wallet;\n         _walletF5 = F5Wallet;\n         _walletS5 = S5Wallet;\n    } \n    \n    /**\n     * Set the _walletBase90. onlyOwner\n     */\n    function setWalletB90(address payable B90Wallet) public onlyOwner  {\n        _walletBase90 = B90Wallet;\n    } \n    \n    /**\n     * @return the _walletBase90.\n     */\n    function WalletBase90() public view returns (address) {\n        return _walletBase90;\n    }\n    \n    /**\n     * Set the _walletF5. onlyOwner\n     */\n    function setWalletF5(address payable F5Wallet) public onlyOwner  {\n        _walletF5 = F5Wallet;\n    } \n    \n    /**\n     * @return the _walletF5.\n     */\n    function WalletF5() public view returns (address) {\n        return _walletF5;\n    }\n    \n     /**\n     * Set the _walletS5. onlyOwner\n     */\n    function setWalletS5(address payable S5Wallet) public onlyOwner  {\n        _walletS5 = S5Wallet;\n    } \n    \n    /**\n     * @return the _walletS5.\n     */\n    function WalletS5() public view returns (address) {\n        return _walletS5;\n    }\n    \n    /**\n     * Set the _walletTokenSale. onlyOwner\n     */\n    function setWalletAdmin(address WalletAdmin) public onlyOwner  {\n        _walletAdmin = WalletAdmin;\n    } \n    \n     /**\n     * @return the _walletTokenSale.\n     */\n    function WalletAdmin() public view returns (address) {\n        return _walletAdmin;\n    }\n    \n    /**\n     * @dev Throws if called by any account other than the admin.\n     */\n    modifier onlyAdmin() {\n        require(isAdmin());\n        _;\n    }\n \n    /**\n     * @return true if `msg.sender` is the admin of the contract.\n     */\n    function isAdmin() public view returns (bool) {\n        return msg.sender == _walletAdmin;\n    }\n \n    /**\n    * @dev Transfer token for a specified address.onlyOwner\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transferAdmin(address to, uint256 value) public onlyAdmin returns (bool) {\n        require(value <= MaxTokenAdminQty());\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n    \n    /**\n     * Set the _MinTokenQty. onlyOwner\n     */\n    function setMinTokenQty(uint256 MinTokenQty) public onlyOwner  {\n        _MinTokenQty = MinTokenQty;\n    } \n    \n    /**\n     * Set the _MinTokenQty. onlyOwner\n     */\n    function setMaxTokenAdminQty(uint256 MaxTokenAdminQty) public onlyOwner  {\n        _MaxTokenAdminQty = MaxTokenAdminQty;\n    } \n    \n    /**\n     * @return Rate.\n     */\n    function Rate() public view returns (uint256) {\n        return _rate;\n    }\n   \n    /**\n     * @return _Y.\n     */\n    function Y() public view returns (uint256) {\n        return _y;\n    }\n    \n    /**\n     * @return the number of wei income Total.\n     */\n    function WeiRaised() public view returns (uint256) {\n        return _weiRaised;\n    }\n    \n    /**\n     * @return _MinTokenQty.\n     */\n    function MinTokenQty() public view returns (uint256) {\n        return _MinTokenQty;\n    }\n    \n     /**\n     * @return _MinTokenQty.\n     */\n    function MaxTokenAdminQty() public view returns (uint256) {\n        return _MaxTokenAdminQty;\n    }\n    \n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WeiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"WalletAdmin\",\"type\":\"address\"}],\"name\":\"setWalletAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ChangeStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Y\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"MaxTokenAdminQty\",\"type\":\"uint256\"}],\"name\":\"setMaxTokenAdminQty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"B90Wallet\",\"type\":\"address\"},{\"name\":\"F5Wallet\",\"type\":\"address\"},{\"name\":\"S5Wallet\",\"type\":\"address\"}],\"name\":\"setFundWallets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WalletBase90\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MaxTokenAdminQty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"setY\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WalletS5\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MinTokenQty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"CheckStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"B90Wallet\",\"type\":\"address\"}],\"name\":\"setWalletB90\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WalletAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"S5Wallet\",\"type\":\"address\"}],\"name\":\"setWalletS5\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WalletF5\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"F5Wallet\",\"type\":\"address\"}],\"name\":\"setWalletF5\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"MinTokenQty\",\"type\":\"uint256\"}],\"name\":\"setMinTokenQty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\"},{\"name\":\"initSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b506040516200352f3803806200352f833981018060405260808110156200003757600080fd5b8101908080516401000000008111156200005057600080fd5b828101905060208101848111156200006757600080fd5b81518560018202830111640100000000821117156200008557600080fd5b50509291906020018051640100000000811115620000a257600080fd5b82810190506020810184811115620000b957600080fd5b8151856001820283011164010000000082111715620000d757600080fd5b50509291906020018051906020019092919080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600180819055506000600260006101000a81548160ff0219169083151502179055508360069080519060200190620001ec92919062000452565b5082600790805190602001906200020592919062000452565b5081600860006101000a81548160ff021916908360ff1602179055506200024a8260ff16600a0a826200027764010000000002620029fb179091906401000000009004565b6009819055506200026d33600954620002b9640100000000026401000000009004565b5050505062000501565b6000808314156200028c5760009050620002b3565b60008284029050828482811515620002a057fe5b04141515620002ae57600080fd5b809150505b92915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515620002f657600080fd5b6200031b81600554620004306401000000000262002a39179091906401000000009004565b6005819055506200038381600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054620004306401000000000262002a39179091906401000000009004565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008082840190508381101515156200044857600080fd5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200049557805160ff1916838001178555620004c6565b82800160010185558215620004c6579182015b82811115620004c5578251825591602001919060010190620004a8565b5b509050620004d59190620004d9565b5090565b620004fe91905b80821115620004fa576000816000905550600101620004e0565b5090565b90565b61301e80620005116000396000f3fe60806040526004361061028f576000357c010000000000000000000000000000000000000000000000000000000090048063715018a61161016c578063a2b903ea116100de578063c58a80d711610097578063c58a80d714610ea1578063dd62ed3e14610ef8578063dfc292e514610f7d578063dff1645414610fce578063e53c454814611009578063f2fde38b1461107c5761028f565b8063a2b903ea14610c93578063a315926114610ce4578063a457c2d714610d3b578063a6a21bd414610dae578063a9059cbb14610dff578063b6db75a014610e725761028f565b80638da5cb5b116101305780638da5cb5b14610a765780638f32d59b14610acd5780639451a1bd14610afc57806395d89b4114610b6557806397d63f9314610bf55780639dc29fac14610c205761028f565b8063715018a6146109535780637fb331701461096a5780638456cb59146109dd5780638577e693146109f4578063875044fd14610a4b5761028f565b80633950935111610205578063549965ef116101c9578063549965ef146107715780635712c0cc1461080257806357c273a3146108595780635c975abb1461088457806368d466b8146108b357806370a08231146108ee5761028f565b8063395093511461060e5780633f4ba83a1461068157806340c10f191461069857806345b3fe421461070b5780634fdb4932146107365761028f565b80631b8e94a1116102575780631b8e94a1146104425780631bc897141461046d57806323b872dd146104be57806329acb7f314610551578063313ce567146105a257806334fcf437146105d35761028f565b806306fdde031461029b5780630752881a1461032b578063095ea7b31461037957806318160ddd146103ec57806319af1bd914610417575b61029933346110cd565b005b3480156102a757600080fd5b506102b0611604565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102f05780820151818401526020810190506102d5565b50505050905090810190601f16801561031d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103776004803603604081101561034157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506110cd565b005b34801561038557600080fd5b506103d26004803603604081101561039c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506116a6565b604051808215151515815260200191505060405180910390f35b3480156103f857600080fd5b506104016117f0565b6040518082815260200191505060405180910390f35b34801561042357600080fd5b5061042c6117fa565b6040518082815260200191505060405180910390f35b34801561044e57600080fd5b50610457611804565b6040518082815260200191505060405180910390f35b34801561047957600080fd5b506104bc6004803603602081101561049057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061180e565b005b3480156104ca57600080fd5b50610537600480360360608110156104e157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611865565b604051808215151515815260200191505060405180910390f35b34801561055d57600080fd5b506105a06004803603602081101561057457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a89565b005b3480156105ae57600080fd5b506105b7611b99565b604051808260ff1660ff16815260200191505060405180910390f35b3480156105df57600080fd5b5061060c600480360360208110156105f657600080fd5b8101908080359060200190929190505050611bb0565b005b34801561061a57600080fd5b506106676004803603604081101561063157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611bdd565b604051808215151515815260200191505060405180910390f35b34801561068d57600080fd5b50610696611e31565b005b3480156106a457600080fd5b506106f1600480360360408110156106bb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611edf565b604051808215151515815260200191505060405180910390f35b34801561071757600080fd5b50610720611f08565b6040518082815260200191505060405180910390f35b34801561074257600080fd5b5061076f6004803603602081101561075957600080fd5b8101908080359060200190929190505050611f12565b005b34801561077d57600080fd5b506108006004803603606081101561079457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f2f565b005b34801561080e57600080fd5b5061081761200a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561086557600080fd5b5061086e612034565b6040518082815260200191505060405180910390f35b34801561089057600080fd5b5061089961203e565b604051808215151515815260200191505060405180910390f35b3480156108bf57600080fd5b506108ec600480360360208110156108d657600080fd5b8101908080359060200190929190505050612055565b005b3480156108fa57600080fd5b5061093d6004803603602081101561091157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612082565b6040518082815260200191505060405180910390f35b34801561095f57600080fd5b506109686120cb565b005b34801561097657600080fd5b506109c36004803603604081101561098d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061219d565b604051808215151515815260200191505060405180910390f35b3480156109e957600080fd5b506109f26121dd565b005b348015610a0057600080fd5b50610a0961228c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610a5757600080fd5b50610a606122b6565b6040518082815260200191505060405180910390f35b348015610a8257600080fd5b50610a8b6122c0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610ad957600080fd5b50610ae26122e9565b604051808215151515815260200191505060405180910390f35b348015610b0857600080fd5b50610b4b60048036036020811015610b1f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612340565b604051808215151515815260200191505060405180910390f35b348015610b7157600080fd5b50610b7a6123d7565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610bba578082015181840152602081019050610b9f565b50505050905090810190601f168015610be75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610c0157600080fd5b50610c0a612479565b6040518082815260200191505060405180910390f35b348015610c2c57600080fd5b50610c7960048036036040811015610c4357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612483565b604051808215151515815260200191505060405180910390f35b348015610c9f57600080fd5b50610ce260048036036020811015610cb657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506124ac565b005b348015610cf057600080fd5b50610cf9612503565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610d4757600080fd5b50610d9460048036036040811015610d5e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061252d565b604051808215151515815260200191505060405180910390f35b348015610dba57600080fd5b50610dfd60048036036020811015610dd157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612781565b005b348015610e0b57600080fd5b50610e5860048036036040811015610e2257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506127d8565b604051808215151515815260200191505060405180910390f35b348015610e7e57600080fd5b50610e8761280b565b604051808215151515815260200191505060405180910390f35b348015610ead57600080fd5b50610eb6612863565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610f0457600080fd5b50610f6760048036036040811015610f1b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061288d565b6040518082815260200191505060405180910390f35b348015610f8957600080fd5b50610fcc60048036036020811015610fa057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612914565b005b348015610fda57600080fd5b5061100760048036036020811015610ff157600080fd5b810190808035906020019092919050505061296b565b005b34801561101557600080fd5b506110626004803603604081101561102c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612988565b604051808215151515815260200191505060405180910390f35b34801561108857600080fd5b506110cb6004803603602081101561109f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506129b2565b005b6001806000828254019250508190555060006001549050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561116f5750600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b80156111c95750600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b80156112235750600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b151561122e57600080fd5b60008211151561123d57600080fd5b60006112476122c0565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561128557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156112e357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561134157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561139f57600080fd5b600115156113ac85612340565b1515141515156113bb57600080fd5b60006113e6600f546113d8601054876129d190919063ffffffff16565b6129fb90919063ffffffff16565b905060006113f26122b6565b9050816113fe84612082565b11151561140a57600080fd5b80821015151561141957600080fd5b61142e85601154612a3990919063ffffffff16565b60118190555061143f838784612a5a565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6114a2605a61149460648a6129d190919063ffffffff16565b6129fb90919063ffffffff16565b9081150290604051600060405180830381858888f193505050501580156114cd573d6000803e3d6000fd5b50600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc611531600561152360648a6129d190919063ffffffff16565b6129fb90919063ffffffff16565b9081150290604051600060405180830381858888f1935050505015801561155c573d6000803e3d6000fd5b50600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6115c060056115b260648a6129d190919063ffffffff16565b6129fb90919063ffffffff16565b9081150290604051600060405180830381858888f193505050501580156115eb573d6000803e3d6000fd5b50505050600154811415156115ff57600080fd5b505050565b606060068054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561169c5780601f106116715761010080835404028352916020019161169c565b820191906000526020600020905b81548152906001019060200180831161167f57829003601f168201915b5050505050905090565b6000600260009054906101000a900460ff161515156116c457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561170057600080fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600554905090565b6000601154905090565b6000600f54905090565b6118166122e9565b151561182157600080fd5b80600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600260009054906101000a900460ff1615151561188357600080fd5b61191282600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c2a90919063ffffffff16565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061199d848484612a5a565b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600190509392505050565b611a916122e9565b1515611a9c57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611ad857600080fd5b6000600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690506001151581151514611b3c576001611b3f565b60005b600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6000600860009054906101000a900460ff16905090565b611bb86122e9565b1515611bc357600080fd5b60018110151515611bd357600080fd5b80600f8190555050565b6000600260009054906101000a900460ff16151515611bfb57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611c3757600080fd5b611cc682600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612a3990919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b611e396122e9565b1515611e4457600080fd5b600260009054906101000a900460ff161515611e5f57600080fd5b6000600260006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b6000611ee96122e9565b1515611ef457600080fd5b611efe8383612c4c565b6001905092915050565b6000601054905090565b611f1a6122e9565b1515611f2557600080fd5b8060138190555050565b611f376122e9565b1515611f4257600080fd5b82600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000601354905090565b6000600260009054906101000a900460ff16905090565b61205d6122e9565b151561206857600080fd5b6001811015151561207857600080fd5b8060108190555050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6120d36122e9565b15156120de57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60006121a761280b565b15156121b257600080fd5b6121ba612034565b82111515156121c857600080fd5b6121d3338484612a5a565b6001905092915050565b6121e56122e9565b15156121f057600080fd5b600260009054906101000a900460ff1615151561220c57600080fd5b6001600260006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b6000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000601254905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561237d57600080fd5b6000600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905080915050919050565b606060078054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561246f5780601f106124445761010080835404028352916020019161246f565b820191906000526020600020905b81548152906001019060200180831161245257829003601f168201915b5050505050905090565b6000600954905090565b600061248d6122e9565b151561249857600080fd5b6124a28383612da2565b6001905092915050565b6124b46122e9565b15156124bf57600080fd5b80600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600260009054906101000a900460ff1615151561254b57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561258757600080fd5b61261682600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c2a90919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6127896122e9565b151561279457600080fd5b80600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600260009054906101000a900460ff161515156127f657600080fd5b612801338484612a5a565b6001905092915050565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b6000600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b61291c6122e9565b151561292757600080fd5b80600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6129736122e9565b151561297e57600080fd5b8060128190555050565b60006129926122e9565b151561299d57600080fd5b6129a8338484612a5a565b6001905092915050565b6129ba6122e9565b15156129c557600080fd5b6129ce81612ef8565b50565b600080821115156129e157600080fd5b600082848115156129ee57fe5b0490508091505092915050565b600080831415612a0e5760009050612a33565b60008284029050828482811515612a2157fe5b04141515612a2e57600080fd5b809150505b92915050565b6000808284019050838110151515612a5057600080fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612a9657600080fd5b612ae881600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c2a90919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612b7d81600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612a3990919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000828211151515612c3b57600080fd5b600082840390508091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612c8857600080fd5b612c9d81600554612a3990919063ffffffff16565b600581905550612cf581600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612a3990919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612dde57600080fd5b612df381600554612c2a90919063ffffffff16565b600581905550612e4b81600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c2a90919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612f3457600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505056fea165627a7a72305820a5683d9d44f85420df7c5f13abad6cc6953613192c248d962e9148f3a907cc0c0029000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000011e1a3000000000000000000000000000000000000000000000000000000000000000007455241436f696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034552410000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000011e1a3000000000000000000000000000000000000000000000000000000000000000007455241436f696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034552410000000000000000000000000000000000000000000000000000000000"
}