{
  "address": "0xc6ea98b258be9be21d88d6e501ae8728a8a09b35",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Gimmer: Old Token",
  "contractName": "GimmerToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-17\n*/\n\npragma solidity ^0.4.18;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\ncontract GimmerTokenSale is Pausable {\n    using SafeMath for uint256;\n\n    /**\n    * @dev Supporter structure, which allows us to track\n    * how much the user has bought so far, and if he's flagged as known\n    */\n    struct Supporter {\n        uint256 weiSpent; // the total amount of Wei this address has sent to this contract\n        bool hasKYC; // if the user has KYC flagged\n    }\n\n    // Variables\n    mapping(address => Supporter) public supportersMap; // Mapping with all the campaign supporters\n    GimmerToken public token; // ERC20 GMR Token contract address\n    address public fundWallet; // Wallet address to forward all Ether to\n    address public kycManagerWallet; // Wallet address that manages the approval of KYC\n    uint256 public tokensSold; // How many tokens sold have been sold in total\n    uint256 public weiRaised; // Total amount of raised money in Wei\n    uint256 public maxTxGas; // Maximum transaction gas price allowed for fair-chance transactions\n    uint256 public saleWeiLimitWithoutKYC; // The maximum amount of Wei an address can spend here without needing KYC approval during CrowdSale\n    bool public finished; // Flag denoting the owner has invoked finishContract()\n\n    uint256 public constant ONE_MILLION = 1000000; // One million for token cap calculation reference\n    uint256 public constant PRE_SALE_GMR_TOKEN_CAP = 15 * ONE_MILLION * 1 ether; // Maximum amount that can be sold during the Pre Sale period\n    uint256 public constant GMR_TOKEN_SALE_CAP = 100 * ONE_MILLION * 1 ether; // Maximum amount of tokens that can be sold by this contract\n    uint256 public constant MIN_ETHER = 0.1 ether; // Minimum ETH Contribution allowed during the crowd sale\n\n    /* Allowed Contribution in Ether */\n    uint256 public constant PRE_SALE_30_ETH = 30 ether; // Minimum 30 Ether to get 25% Bonus Tokens\n    uint256 public constant PRE_SALE_300_ETH = 300 ether; // Minimum 300 Ether to get 30% Bonus Tokens\n    uint256 public constant PRE_SALE_1000_ETH = 1000 ether; // Minimum 3000 Ether to get 40% Bonus Tokens\n\n    /* Bonus Tokens based on the ETH Contributed in single transaction */\n    uint256 public constant TOKEN_RATE_BASE_RATE = 2500; // Base Price for reference only\n    uint256 public constant TOKEN_RATE_05_PERCENT_BONUS = 2625; // 05% Bonus Tokens During Crowd Sale's Week 4\n    uint256 public constant TOKEN_RATE_10_PERCENT_BONUS = 2750; // 10% Bonus Tokens During Crowd Sale's Week 3\n    uint256 public constant TOKEN_RATE_15_PERCENT_BONUS = 2875; // 15% Bonus Tokens During Crowd Sale'sWeek 2\n    uint256 public constant TOKEN_RATE_20_PERCENT_BONUS = 3000; // 20% Bonus Tokens During Crowd Sale'sWeek 1\n    uint256 public constant TOKEN_RATE_25_PERCENT_BONUS = 3125; // 25% Bonus Tokens, During PreSale when >= 30 ETH & < 300 ETH\n    uint256 public constant TOKEN_RATE_30_PERCENT_BONUS = 3250; // 30% Bonus Tokens, During PreSale when >= 300 ETH & < 3000 ETH\n    uint256 public constant TOKEN_RATE_40_PERCENT_BONUS = 3500; // 40% Bonus Tokens, During PreSale when >= 3000 ETH\n\n    /* Timestamps where investments are allowed */\n    uint256 public constant PRE_SALE_START_TIME = 1516190400; // PreSale Start Time : UTC: Wednesday, 17 January 2018 12:00:00 \n    uint256 public constant PRE_SALE_END_TIME = 1517400000; // PreSale End Time : UTC: Wednesday, 31 January 2018 12:00:00\n    uint256 public constant START_WEEK_1 = 1517486400; // CrowdSale Start Week-1 : UTC: Thursday, 1 February 2018 12:00:00\n    uint256 public constant START_WEEK_2 = 1518091200; // CrowdSale Start Week-2 : UTC: Thursday, 8 February 2018 12:00:00\n    uint256 public constant START_WEEK_3 = 1518696000; // CrowdSale Start Week-3 : UTC: Thursday, 15 February 2018 12:00:00\n    uint256 public constant START_WEEK_4 = 1519300800; // CrowdSale Start Week-4 : UTC: Thursday, 22 February 2018 12:00:00\n    uint256 public constant SALE_END_TIME = 1519905600; // CrowdSale End Time : UTC: Thursday, 1 March 2018 12:00:00\n\n    /**\n    * @dev Modifier to only allow KYCManager Wallet\n    * to execute a function\n    */\n    modifier onlyKycManager() {\n        require(msg.sender == kycManagerWallet);\n        _;\n    }\n\n    /**\n    * Event for token purchase logging\n    * @param purchaser The wallet address that bought the tokens\n    * @param value How many Weis were paid for the purchase\n    * @param amount The amount of tokens purchased\n    */\n    event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\n\n    /**\n     * Event for kyc status change logging\n     * @param user User who has had his KYC status changed\n     * @param isApproved A boolean representing the KYC approval the user has been changed to\n     */\n    event KYC(address indexed user, bool isApproved);\n\n    /**\n     * Constructor\n     * @param _fundWallet Address to forward all received Ethers to\n     * @param _kycManagerWallet KYC Manager wallet to approve / disapprove user's KYC\n     * @param _saleWeiLimitWithoutKYC Maximum amount of Wei an address can spend in the contract without KYC during the crowdsale\n     * @param _maxTxGas Maximum gas price a transaction can have before being reverted\n     */\n    function GimmerTokenSale(\n        address _fundWallet, \n        address _kycManagerWallet,\n        uint256 _saleWeiLimitWithoutKYC, \n        uint256 _maxTxGas\n    )\n    public \n    {\n        require(_fundWallet != address(0));\n        require(_kycManagerWallet != address(0));\n        require(_saleWeiLimitWithoutKYC > 0);\n        require(_maxTxGas > 0);\n\n        fundWallet = _fundWallet;\n        kycManagerWallet = _kycManagerWallet;\n        saleWeiLimitWithoutKYC = _saleWeiLimitWithoutKYC;\n        maxTxGas = _maxTxGas;\n\n        token = new GimmerToken();\n    }\n\n    /* fallback function can be used to buy tokens */\n    function () public payable {\n        buyTokens();\n    }\n\n    /* low level token purchase function */\n    function buyTokens() public payable whenNotPaused {\n        // Do not allow if gasprice is bigger than the maximum\n        // This is for fair-chance for all contributors, so no one can\n        // set a too-high transaction price and be able to buy earlier\n        require(tx.gasprice <= maxTxGas);\n        // valid purchase identifies which stage the contract is at (PreState/Token Sale)\n        // making sure were inside the contribution period and the user\n        // is sending enough Wei for the stage's rules\n        require(validPurchase());\n\n        address sender = msg.sender;\n        uint256 weiAmountSent = msg.value;\n\n        // calculate token amount to be created\n        uint256 rate = getRate(weiAmountSent);\n        uint256 newTokens = weiAmountSent.mul(rate);\n\n        // look if we have not yet reached the cap\n        uint256 totalTokensSold = tokensSold.add(newTokens);\n        if (isCrowdSaleRunning()) {\n            require(totalTokensSold <= GMR_TOKEN_SALE_CAP);\n        } else if (isPreSaleRunning()) { \n            require(totalTokensSold <= PRE_SALE_GMR_TOKEN_CAP);\n        }\n\n        // update supporter state\n        Supporter storage sup = supportersMap[sender];\n        uint256 totalWei = sup.weiSpent.add(weiAmountSent);\n        sup.weiSpent = totalWei;\n\n        // update contract state\n        weiRaised = weiRaised.add(weiAmountSent);\n        tokensSold = totalTokensSold;\n\n        // mint the coins\n        token.mint(sender, newTokens);\n        TokenPurchase(sender, weiAmountSent, newTokens);\n\n        // forward the funds to the wallet\n        fundWallet.transfer(msg.value);\n    }\n\n    /**\n    * @dev Ends the operation of the contract\n    */\n    function finishContract() public onlyOwner {\n        // make sure the contribution period has ended\n        require(now > SALE_END_TIME);\n        require(!finished);\n\n        finished = true;\n\n        // send the 10% commission to Gimmer's fund wallet\n        uint256 tenPC = tokensSold.div(10);\n        token.mint(fundWallet, tenPC);\n\n        // finish the minting of the token, so the system allows transfers\n        token.finishMinting();\n\n        // transfer ownership of the token contract to the fund wallet,\n        // so it isn't locked to be a child of the crowd sale contract\n        token.transferOwnership(fundWallet);\n    }\n\n    function setSaleWeiLimitWithoutKYC(uint256 _newSaleWeiLimitWithoutKYC) public onlyKycManager {\n        require(_newSaleWeiLimitWithoutKYC > 0);\n        saleWeiLimitWithoutKYC = _newSaleWeiLimitWithoutKYC;\n    }\n\n    /**\n    * @dev Updates the maximum allowed transaction cost that can be received\n    * on the buyTokens() function.\n    * @param _newMaxTxGas The new maximum transaction cost\n    */\n    function updateMaxTxGas(uint256 _newMaxTxGas) public onlyKycManager {\n        require(_newMaxTxGas > 0);\n        maxTxGas = _newMaxTxGas;\n    }\n\n    /**\n    * @dev Flag an user as known\n    * @param _user The user to flag as known\n    */\n    function approveUserKYC(address _user) onlyKycManager public {\n        require(_user != address(0));\n\n        Supporter storage sup = supportersMap[_user];\n        sup.hasKYC = true;\n        KYC(_user, true);\n    }\n\n    /**\n     * @dev Flag an user as unknown/disapproved\n     * @param _user The user to flag as unknown / suspecious\n     */\n    function disapproveUserKYC(address _user) onlyKycManager public {\n        require(_user != address(0));\n        \n        Supporter storage sup = supportersMap[_user];\n        sup.hasKYC = false;\n        KYC(_user, false);\n    }\n\n    /**\n    * @dev Changes the KYC manager to a new address\n    * @param _newKYCManagerWallet The new address that will be managing KYC approval\n    */\n    function setKYCManager(address _newKYCManagerWallet) onlyOwner public {\n        require(_newKYCManagerWallet != address(0));\n        kycManagerWallet = _newKYCManagerWallet;\n    }\n    \n    /**\n    * @dev Returns true if any of the token sale stages are currently running\n    * @return A boolean representing the state of this contract\n    */\n    function isTokenSaleRunning() public constant returns (bool) {\n        return (isPreSaleRunning() || isCrowdSaleRunning());\n    }\n\n    /**\n    * @dev Returns true if the presale sale is currently running\n    * @return A boolean representing the state of the presale\n    */\n    function isPreSaleRunning() public constant returns (bool) {\n        return (now >= PRE_SALE_START_TIME && now < PRE_SALE_END_TIME);\n    }\n\n    /**\n    * @dev Returns true if the public sale is currently running\n    * @return A boolean representing the state of the crowd sale\n    */\n    function isCrowdSaleRunning() public constant returns (bool) {\n        return (now >= START_WEEK_1 && now <= SALE_END_TIME);\n    }\n\n    /**\n    * @dev Returns true if the public sale has ended\n    * @return A boolean representing if we are past the contribution date for this contract\n    */\n    function hasEnded() public constant returns (bool) {\n        return now > SALE_END_TIME;\n    }\n\n    /**\n    * @dev Returns true if the pre sale has ended\n    * @return A boolean representing if we are past the pre sale contribution dates\n    */\n    function hasPreSaleEnded() public constant returns (bool) {\n        return now > PRE_SALE_END_TIME;\n    }\n\n    /**\n    * @dev Returns if an user has KYC approval or not\n    * @return A boolean representing the user's KYC status\n    */\n    function userHasKYC(address _user) public constant returns (bool) {\n        return supportersMap[_user].hasKYC;\n    }\n\n    /**\n     * @dev Returns the weiSpent of a user\n     */\n    function userWeiSpent(address _user) public constant returns (uint256) {\n        return supportersMap[_user].weiSpent;\n    }\n\n    /**\n     * @dev Returns the rate the user will be paying at,\n     * based on the amount of Wei sent to the contract, and the current time\n     * @return An uint256 representing the rate the user will pay for the GMR tokens\n     */\n    function getRate(uint256 _weiAmount) internal constant returns (uint256) {   \n        if (isCrowdSaleRunning()) {\n            if (now >= START_WEEK_4) { return TOKEN_RATE_05_PERCENT_BONUS; }\n            else if (now >= START_WEEK_3) { return TOKEN_RATE_10_PERCENT_BONUS; }\n            else if (now >= START_WEEK_2) { return TOKEN_RATE_15_PERCENT_BONUS; }\n            else if (now >= START_WEEK_1) { return TOKEN_RATE_20_PERCENT_BONUS; }\n        }\n        else if (isPreSaleRunning()) {\n            if (_weiAmount >= PRE_SALE_1000_ETH) { return TOKEN_RATE_40_PERCENT_BONUS; }\n            else if (_weiAmount >= PRE_SALE_300_ETH) { return TOKEN_RATE_30_PERCENT_BONUS; }\n            else if (_weiAmount >= PRE_SALE_30_ETH) { return TOKEN_RATE_25_PERCENT_BONUS; }\n        }\n    }\n\n    /* @return true if the transaction can buy tokens, otherwise false */\n    function validPurchase() internal constant returns (bool) {\n        bool userHasKyc = userHasKYC(msg.sender);\n\n        if (isCrowdSaleRunning()) {\n            // crowdsale restrictions (KYC only needed after wei limit, minimum of 0.1 ETH tx)\n            if(!userHasKyc) {\n                Supporter storage sup = supportersMap[msg.sender];\n                uint256 ethContribution = sup.weiSpent.add(msg.value);\n                if (ethContribution > saleWeiLimitWithoutKYC) {\n                    return false;\n                }\n            }\n            return msg.value >= MIN_ETHER;\n        }\n        else if (isPreSaleRunning()) {\n            // presale restrictions (at least 30 eth, always KYC)\n            return userHasKyc && msg.value >= PRE_SALE_30_ETH;\n        } else {\n            return false;\n        }\n    }\n}\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\ncontract GimmerToken is MintableToken  {\n    // Constants\n    string public constant name = \"GimmerToken\";\n    string public constant symbol = \"GMR\";  \n    uint8 public constant decimals = 18;\n\n    /**\n    * @dev Modifier to only allow transfers after the minting has been done\n    */\n    modifier onlyWhenTransferEnabled() {\n        require(mintingFinished);\n        _;\n    }\n\n    modifier validDestination(address _to) {\n        require(_to != address(0x0));\n        require(_to != address(this));\n        _;\n    }\n\n    function GimmerToken() public {\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public        \n        onlyWhenTransferEnabled\n        validDestination(_to)         \n        returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function approve(address _spender, uint256 _value) public\n        onlyWhenTransferEnabled         \n        returns (bool) {\n        return super.approve(_spender, _value);\n    }\n\n    function increaseApproval (address _spender, uint _addedValue) public\n        onlyWhenTransferEnabled         \n        returns (bool) {\n        return super.increaseApproval(_spender, _addedValue);\n    }\n\n    function decreaseApproval (address _spender, uint _subtractedValue) public\n        onlyWhenTransferEnabled         \n        returns (bool) {\n        return super.decreaseApproval(_spender, _subtractedValue);\n    }\n\n    function transfer(address _to, uint256 _value) public\n        onlyWhenTransferEnabled\n        validDestination(_to)         \n        returns (bool) {\n        return super.transfer(_to, _value);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60606040526003805460a060020a60ff0219169055341561001f57600080fd5b60038054600160a060020a03191633600160a060020a0316179055610c9a806100496000396000f3006060604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b81146100ea57806306fdde0314610111578063095ea7b31461019b57806318160ddd146101bd57806323b872dd146101e2578063313ce5671461020a57806340c10f1914610233578063661884631461025557806370a08231146102775780637d64bcb4146102965780638da5cb5b146102a957806395d89b41146102d8578063a9059cbb146102eb578063d73dd6231461030d578063dd62ed3e1461032f578063f2fde38b14610354575b600080fd5b34156100f557600080fd5b6100fd610375565b604051901515815260200160405180910390f35b341561011c57600080fd5b610124610385565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610160578082015183820152602001610148565b50505050905090810190601f16801561018d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101a657600080fd5b6100fd600160a060020a03600435166024356103bc565b34156101c857600080fd5b6101d06103e8565b60405190815260200160405180910390f35b34156101ed57600080fd5b6100fd600160a060020a03600435811690602435166044356103ee565b341561021557600080fd5b61021d610454565b60405160ff909116815260200160405180910390f35b341561023e57600080fd5b6100fd600160a060020a0360043516602435610459565b341561026057600080fd5b6100fd600160a060020a0360043516602435610566565b341561028257600080fd5b6101d0600160a060020a036004351661058b565b34156102a157600080fd5b6100fd6105a6565b34156102b457600080fd5b6102bc610631565b604051600160a060020a03909116815260200160405180910390f35b34156102e357600080fd5b610124610640565b34156102f657600080fd5b6100fd600160a060020a0360043516602435610677565b341561031857600080fd5b6100fd600160a060020a03600435166024356106db565b341561033a57600080fd5b6101d0600160a060020a0360043581169060243516610700565b341561035f57600080fd5b610373600160a060020a036004351661072b565b005b60035460a060020a900460ff1681565b60408051908101604052600b81527f47696d6d6572546f6b656e000000000000000000000000000000000000000000602082015281565b60035460009060a060020a900460ff1615156103d757600080fd5b6103e183836107c6565b9392505050565b60005481565b60035460009060a060020a900460ff16151561040957600080fd5b82600160a060020a038116151561041f57600080fd5b30600160a060020a031681600160a060020a03161415151561044057600080fd5b61044b858585610832565b95945050505050565b601281565b60035460009033600160a060020a0390811691161461047757600080fd5b60035460a060020a900460ff161561048e57600080fd5b6000546104a1908363ffffffff6109b416565b6000908155600160a060020a0384168152600160205260409020546104cc908363ffffffff6109b416565b600160a060020a0384166000818152600160205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a2600160a060020a03831660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350600192915050565b60035460009060a060020a900460ff16151561058157600080fd5b6103e183836109c3565b600160a060020a031660009081526001602052604090205490565b60035460009033600160a060020a039081169116146105c457600080fd5b60035460a060020a900460ff16156105db57600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a150600190565b600354600160a060020a031681565b60408051908101604052600381527f474d520000000000000000000000000000000000000000000000000000000000602082015281565b60035460009060a060020a900460ff16151561069257600080fd5b82600160a060020a03811615156106a857600080fd5b30600160a060020a031681600160a060020a0316141515156106c957600080fd5b6106d38484610abd565b949350505050565b60035460009060a060020a900460ff1615156106f657600080fd5b6103e18383610bb8565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a0390811691161461074657600080fd5b600160a060020a038116151561075b57600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b6000600160a060020a038316151561084957600080fd5b600160a060020a03841660009081526001602052604090205482111561086e57600080fd5b600160a060020a03808516600090815260026020908152604080832033909416835292905220548211156108a157600080fd5b600160a060020a0384166000908152600160205260409020546108ca908363ffffffff610c5c16565b600160a060020a0380861660009081526001602052604080822093909355908516815220546108ff908363ffffffff6109b416565b600160a060020a03808516600090815260016020908152604080832094909455878316825260028152838220339093168252919091522054610947908363ffffffff610c5c16565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b6000828201838110156103e157fe5b600160a060020a03338116600090815260026020908152604080832093861683529290529081205480831115610a2057600160a060020a033381166000908152600260209081526040808320938816835292905290812055610a57565b610a30818463ffffffff610c5c16565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b6000600160a060020a0383161515610ad457600080fd5b600160a060020a033316600090815260016020526040902054821115610af957600080fd5b600160a060020a033316600090815260016020526040902054610b22908363ffffffff610c5c16565b600160a060020a033381166000908152600160205260408082209390935590851681522054610b57908363ffffffff6109b416565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610bf0908363ffffffff6109b416565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600082821115610c6857fe5b509003905600a165627a7a723058201ac325bac733b301be9caf938ec815dc67d52e429c98d7f91b8f5d835be8ebfb0029"
}