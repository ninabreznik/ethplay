{
  "address": "0xbd5cfa0e509b2981753da7a53ee18f5876f8631e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EthereumUltimate",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-11\n*/\n\npragma solidity ^0.4.18;\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n\ncontract EthereumUltimate {\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n    uint256 public funds;\n    address public director;\n    bool public saleClosed;\n    bool public directorLock;\n    uint256 public claimAmount;\n    uint256 public payAmount;\n    uint256 public feeAmount;\n    uint256 public epoch;\n    uint256 public retentionMax;\n\n    mapping (address => uint256) public balances;\n    mapping (address => mapping (address => uint256)) public allowance;\n    mapping (address => bool) public buried;\n    mapping (address => uint256) public claimed;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    \n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    event Burn(address indexed _from, uint256 _value);\n    \n    event Bury(address indexed _target, uint256 _value);\n    \n    event Claim(address indexed _target, address indexed _payout, address indexed _fee);\n\n    function EthereumUltimate() public {\n        director = msg.sender;\n        name = \"Ethereum Ultimate\";\n        symbol = \"ETHUT\";\n        decimals = 18;\n        saleClosed = false;\n        directorLock = false;\n        funds = 0;\n        totalSupply = 0;\n        \n        totalSupply += 1000000 * 10 ** uint256(decimals);\n        \n        // Assign reserved ETHUT supply to the director\n        balances[director] = totalSupply;\n        \n        // Define default values for Ethereum Ultimate functions\n        claimAmount = 5 * 10 ** (uint256(decimals) - 1);\n        payAmount = 4 * 10 ** (uint256(decimals) - 1);\n        feeAmount = 1 * 10 ** (uint256(decimals) - 1);\n        \n        // Seconds in a year\n        epoch = 31536000;\n        \n        retentionMax = 40 * 10 ** uint256(decimals);\n    }\n    \n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n    \n    modifier onlyDirector {\n        require(!directorLock);\n        \n        require(msg.sender == director);\n        _;\n    }\n    \n    modifier onlyDirectorForce {\n        require(msg.sender == director);\n        _;\n    }\n    \n\n    function transferDirector(address newDirector) public onlyDirectorForce {\n        director = newDirector;\n    }\n    \n\n    function withdrawFunds() public onlyDirectorForce {\n        director.transfer(this.balance);\n    }\n\n\t\n    function selfLock() public payable onlyDirector {\n        require(saleClosed);\n        \n        require(msg.value == 10 ether);\n        \n        directorLock = true;\n    }\n    \n    function amendClaim(uint8 claimAmountSet, uint8 payAmountSet, uint8 feeAmountSet, uint8 accuracy) public onlyDirector returns (bool success) {\n        require(claimAmountSet == (payAmountSet + feeAmountSet));\n        \n        claimAmount = claimAmountSet * 10 ** (uint256(decimals) - accuracy);\n        payAmount = payAmountSet * 10 ** (uint256(decimals) - accuracy);\n        feeAmount = feeAmountSet * 10 ** (uint256(decimals) - accuracy);\n        return true;\n    }\n    \n\n    function amendEpoch(uint256 epochSet) public onlyDirector returns (bool success) {\n        // Set the epoch\n        epoch = epochSet;\n        return true;\n    }\n    \n\n    function amendRetention(uint8 retentionSet, uint8 accuracy) public onlyDirector returns (bool success) {\n        // Set retentionMax\n        retentionMax = retentionSet * 10 ** (uint256(decimals) - accuracy);\n        return true;\n    }\n    \n\n    function closeSale() public onlyDirector returns (bool success) {\n        // The sale must be currently open\n        require(!saleClosed);\n        \n        // Lock the crowdsale\n        saleClosed = true;\n        return true;\n    }\n\n\n    function openSale() public onlyDirector returns (bool success) {\n        // The sale must be currently closed\n        require(saleClosed);\n        \n        // Unlock the crowdsale\n        saleClosed = false;\n        return true;\n    }\n    \n\n    function bury() public returns (bool success) {\n        // The address must be previously unburied\n        require(!buried[msg.sender]);\n        \n        // An address must have at least claimAmount to be buried\n        require(balances[msg.sender] >= claimAmount);\n        \n        // Prevent addresses with large balances from getting buried\n        require(balances[msg.sender] <= retentionMax);\n        \n        // Set buried state to true\n        buried[msg.sender] = true;\n        \n        // Set the initial claim clock to 1\n        claimed[msg.sender] = 1;\n        \n        // Execute an event reflecting the change\n        Bury(msg.sender, balances[msg.sender]);\n        return true;\n    }\n    \n\n    function claim(address _payout, address _fee) public returns (bool success) {\n        // The claimed address must have already been buried\n        require(buried[msg.sender]);\n        \n        // The payout and fee addresses must be different\n        require(_payout != _fee);\n        \n        // The claimed address cannot pay itself\n        require(msg.sender != _payout);\n        \n        // The claimed address cannot pay itself\n        require(msg.sender != _fee);\n        \n        // It must be either the first time this address is being claimed or atleast epoch in time has passed\n        require(claimed[msg.sender] == 1 || (block.timestamp - claimed[msg.sender]) >= epoch);\n        \n        // Check if the buried address has enough\n        require(balances[msg.sender] >= claimAmount);\n        \n        // Reset the claim clock to the current block time\n        claimed[msg.sender] = block.timestamp;\n        \n        // Save this for an assertion in the future\n        uint256 previousBalances = balances[msg.sender] + balances[_payout] + balances[_fee];\n        \n        // Remove claimAmount from the buried address\n        balances[msg.sender] -= claimAmount;\n        \n        // Pay the website owner that invoked the web node that found the ETHT seed key\n        balances[_payout] += payAmount;\n        \n        // Pay the broker node that unlocked the ETHUT\n        balances[_fee] += feeAmount;\n        \n        // Execute events to reflect the changes\n        Claim(msg.sender, _payout, _fee);\n        Transfer(msg.sender, _payout, payAmount);\n        Transfer(msg.sender, _fee, feeAmount);\n        \n        // Failsafe logic that should never be false\n        assert(balances[msg.sender] + balances[_payout] + balances[_fee] == previousBalances);\n        return true;\n    }\n    \n    /**\n     * Crowdsale function\n     */\n    function () public payable {\n        require(!saleClosed);\n        \n        // Minimum amount is 1 finney\n        require(msg.value >= 1 finney);\n        \n        // Price is 1 ETH = 10000 ETHT\n        uint256 amount = msg.value * 30000;\n        \n        // Supply cap may increase\n        require(totalSupply + amount <= (10000000 * 10 ** uint256(decimals)));\n        \n        // Increases the total supply\n        totalSupply += amount;\n        \n        // Adds the amount to the balance\n        balances[msg.sender] += amount;\n        \n        // Track ETH amount raised\n        funds += msg.value;\n        \n        // Execute an event reflecting the change\n        Transfer(this, msg.sender, amount);\n    }\n\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Sending addresses cannot be buried\n        require(!buried[_from]);\n        \n        // If the receiving address is buried, it cannot exceed retentionMax\n        if (buried[_to]) {\n            require(balances[_to] + _value <= retentionMax);\n        }\n        \n        require(_to != 0x0);\n        \n        require(balances[_from] >= _value);\n        \n        require(balances[_to] + _value > balances[_to]);\n        \n        uint256 previousBalances = balances[_from] + balances[_to];\n        \n        balances[_from] -= _value;\n        \n        balances[_to] += _value;\n        Transfer(_from, _to, _value);\n        \n        assert(balances[_from] + balances[_to] == previousBalances);\n    }\n\n\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        // Check allowance\n        require(_value <= allowance[_from][msg.sender]);\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        // Buried addresses cannot be approved\n        require(!buried[msg.sender]);\n        \n        allowance[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n\n    function burn(uint256 _value) public returns (bool success) {\n        // Buried addresses cannot be burnt\n        require(!buried[msg.sender]);\n        \n        // Check if the sender has enough\n        require(balances[msg.sender] >= _value);\n        \n        // Subtract from the sender\n        balances[msg.sender] -= _value;\n        \n        // Updates totalSupply\n        totalSupply -= _value;\n        Burn(msg.sender, _value);\n        return true;\n    }\n\n\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        // Buried addresses cannot be burnt\n        require(!buried[_from]);\n        \n        // Check if the targeted balance is enough\n        require(balances[_from] >= _value);\n        \n        // Check allowance\n        require(_value <= allowance[_from][msg.sender]);\n        \n        // Subtract from the targeted balance\n        balances[_from] -= _value;\n        \n        // Subtract from the sender's allowance\n        allowance[_from][msg.sender] -= _value;\n        \n        // Update totalSupply\n        totalSupply -= _value;\n        Burn(_from, _value);\n        return true;\n    }\n}",
  "bytecode": "606060405234156200001057600080fd5b33600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040805190810160405280601181526020017f457468657265756d20556c74696d617465000000000000000000000000000000815250600090805190602001906200009e92919062000277565b506040805190810160405280600581526020017f455448555400000000000000000000000000000000000000000000000000000081525060019080519060200190620000ec92919062000277565b506012600260006101000a81548160ff021916908360ff1602179055506000600560146101000a81548160ff0219169083151502179055506000600560156101000a81548160ff02191690831515021790555060006004819055506000600381905550600260009054906101000a900460ff1660ff16600a0a620f424002600360008282540192505081905550600354600b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001600260009054906101000a900460ff1660ff1603600a0a6005026006819055506001600260009054906101000a900460ff1660ff1603600a0a6004026007819055506001600260009054906101000a900460ff1660ff1603600a0a6001026008819055506301e13380600981905550600260009054906101000a900460ff1660ff16600a0a602802600a8190555062000326565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002ba57805160ff1916838001178555620002eb565b82800160010185558215620002eb579182015b82811115620002ea578251825591602001919060010190620002cd565b5b509050620002fa9190620002fe565b5090565b6200032391905b808211156200031f57600081600090555060010162000305565b5090565b90565b6128d980620003366000396000f3006060604052600436106101ac576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146102e9578063095ea7b314610377578063167ff46f146103d157806318160ddd146103fe57806321c0b3421461042757806322bb4f531461049757806323b872dd146104c057806324600fc31461053957806327e235e31461054e578063313ce5671461059b5780633f1199e6146105ca57806342966c681461061b578063549215a3146106565780635af82abf146106915780635f5f2aef146106e657806361161aae1461073057806369e154041461075d57806370a082311461078657806379cc6790146107d35780637dbc9fba1461082d578063830953ab1461088f578063900cf0cf146108b857806395d89b41146108e1578063a9059cbb1461096f578063b8c766b8146109b1578063c8705544146109de578063c884ef8314610a07578063c89f2ce414610a54578063cae9ca5114610a7d578063d1e7e81f14610b1a578063dd62ed3e14610b24578063ddd41ef614610b90578063ee55efee14610bc9578063ffe2d77e14610bf6575b6000600560149054906101000a900460ff161515156101ca57600080fd5b66038d7ea4c6800034101515156101e057600080fd5b61753034029050600260009054906101000a900460ff1660ff16600a0a629896800281600354011115151561021457600080fd5b8060036000828254019250508190555080600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550346004600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350005b34156102f457600080fd5b6102fc610c23565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561033c578082015181840152602081019050610321565b50505050905090810190601f1680156103695780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561038257600080fd5b6103b7600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610cc1565b604051808215151515815260200191505060405180910390f35b34156103dc57600080fd5b6103e4610e0c565b604051808215151515815260200191505060405180910390f35b341561040957600080fd5b610411610ec3565b6040518082815260200191505060405180910390f35b341561043257600080fd5b61047d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ec9565b604051808215151515815260200191505060405180910390f35b34156104a257600080fd5b6104aa6114cc565b6040518082815260200191505060405180910390f35b34156104cb57600080fd5b61051f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506114d2565b604051808215151515815260200191505060405180910390f35b341561054457600080fd5b61054c6115ff565b005b341561055957600080fd5b610585600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506116d6565b6040518082815260200191505060405180910390f35b34156105a657600080fd5b6105ae6116ee565b604051808260ff1660ff16815260200191505060405180910390f35b34156105d557600080fd5b610601600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611701565b604051808215151515815260200191505060405180910390f35b341561062657600080fd5b61063c6004808035906020019091905050611721565b604051808215151515815260200191505060405180910390f35b341561066157600080fd5b610677600480803590602001909190505061187e565b604051808215151515815260200191505060405180910390f35b341561069c57600080fd5b6106a4611908565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156106f157600080fd5b610716600480803560ff1690602001909190803560ff1690602001909190505061192e565b604051808215151515815260200191505060405180910390f35b341561073b57600080fd5b6107436119d8565b604051808215151515815260200191505060405180910390f35b341561076857600080fd5b610770611c04565b6040518082815260200191505060405180910390f35b341561079157600080fd5b6107bd600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611c0a565b6040518082815260200191505060405180910390f35b34156107de57600080fd5b610813600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611c53565b604051808215151515815260200191505060405180910390f35b341561083857600080fd5b610875600480803560ff1690602001909190803560ff1690602001909190803560ff1690602001909190803560ff16906020019091905050611ec6565b604051808215151515815260200191505060405180910390f35b341561089a57600080fd5b6108a2611fd4565b6040518082815260200191505060405180910390f35b34156108c357600080fd5b6108cb611fda565b6040518082815260200191505060405180910390f35b34156108ec57600080fd5b6108f4611fe0565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610934578082015181840152602081019050610919565b50505050905090810190601f1680156109615780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561097a57600080fd5b6109af600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061207e565b005b34156109bc57600080fd5b6109c461208d565b604051808215151515815260200191505060405180910390f35b34156109e957600080fd5b6109f16120a0565b6040518082815260200191505060405180910390f35b3415610a1257600080fd5b610a3e600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506120a6565b6040518082815260200191505060405180910390f35b3415610a5f57600080fd5b610a676120be565b6040518082815260200191505060405180910390f35b3415610a8857600080fd5b610b00600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506120c4565b604051808215151515815260200191505060405180910390f35b610b22612242565b005b3415610b2f57600080fd5b610b7a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612308565b6040518082815260200191505060405180910390f35b3415610b9b57600080fd5b610bc7600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061232d565b005b3415610bd457600080fd5b610bdc6123cd565b604051808215151515815260200191505060405180910390f35b3415610c0157600080fd5b610c09612485565b604051808215151515815260200191505060405180910390f35b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610cb95780601f10610c8e57610100808354040283529160200191610cb9565b820191906000526020600020905b815481529060010190602001808311610c9c57829003601f168201915b505050505081565b6000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515610d1c57600080fd5b81600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600560159054906101000a900460ff16151515610e2a57600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e8657600080fd5b600560149054906101000a900460ff161515610ea157600080fd5b6000600560146101000a81548160ff0219169083151502179055506001905090565b60035481565b600080600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610f2457600080fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515610f5f57600080fd5b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151515610f9a57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151515610fd557600080fd5b6001600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414806110665750600954600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054420310155b151561107157600080fd5b600654600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156110c157600080fd5b42600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401019050600654600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550600754600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600854600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fcac3ed26c9dd72a2c44999857298af9c72ba2d1ca9784f5dad48c933e2224c1160405160405180910390a48373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6007546040518082815260200191505060405180910390a38273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6008546040518082815260200191505060405180910390a380600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600b60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401011415156114c157fe5b600191505092915050565b600a5481565b6000600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561155f57600080fd5b81600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506115f4848484612498565b600190509392505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561165b57600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f1935050505015156116d457600080fd5b565b600b6020528060005260406000206000915090505481565b600260009054906101000a900460ff1681565b600d6020528060005260406000206000915054906101000a900460ff1681565b6000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561177c57600080fd5b81600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156117ca57600080fd5b81600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816003600082825403925050819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a260019050919050565b6000600560159054906101000a900460ff1615151561189c57600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118f857600080fd5b8160098190555060019050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600560159054906101000a900460ff1615151561194c57600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119a857600080fd5b8160ff16600260009054906101000a900460ff1660ff1603600a0a8360ff1602600a819055506001905092915050565b6000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515611a3357600080fd5b600654600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515611a8357600080fd5b600a54600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411151515611ad357600080fd5b6001600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167fc96e8fee6eb65975d592ca9a340f33200433df4c42b2f623dd9fc6d22984d495600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a26001905090565b60085481565b6000600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515611cae57600080fd5b81600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515611cfc57600080fd5b600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515611d8757600080fd5b81600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816003600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a26001905092915050565b6000600560159054906101000a900460ff16151515611ee457600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611f4057600080fd5b82840160ff168560ff16141515611f5657600080fd5b8160ff16600260009054906101000a900460ff1660ff1603600a0a8560ff16026006819055508160ff16600260009054906101000a900460ff1660ff1603600a0a8460ff16026007819055508160ff16600260009054906101000a900460ff1660ff1603600a0a8360ff160260088190555060019050949350505050565b60065481565b60095481565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156120765780601f1061204b57610100808354040283529160200191612076565b820191906000526020600020905b81548152906001019060200180831161205957829003601f168201915b505050505081565b612089338383612498565b5050565b600560149054906101000a900460ff1681565b60075481565b600e6020528060005260406000206000915090505481565b60045481565b6000808490506120d48585610cc1565b15612239578073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156121ce5780820151818401526020810190506121b3565b50505050905090810190601f1680156121fb5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b151561221c57600080fd5b6102c65a03f1151561222d57600080fd5b5050506001915061223a565b5b509392505050565b600560159054906101000a900460ff1615151561225e57600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156122ba57600080fd5b600560149054906101000a900460ff1615156122d557600080fd5b678ac7230489e80000341415156122eb57600080fd5b6001600560156101000a81548160ff021916908315150217905550565b600c602052816000526040600020602052806000526040600020600091509150505481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561238957600080fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600560159054906101000a900460ff161515156123eb57600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561244757600080fd5b600560149054906101000a900460ff1615151561246357600080fd5b6001600560146101000a81548160ff0219169083151502179055506001905090565b600560159054906101000a900460ff1681565b6000600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515156124f357600080fd5b600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561259857600a5482600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054011115151561259757600080fd5b5b60008373ffffffffffffffffffffffffffffffffffffffff16141515156125be57600080fd5b81600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561260c57600080fd5b600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540111151561269a57600080fd5b600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401905081600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a380600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600b60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054011415156128a757fe5b505050505600a165627a7a72305820bc60714f9cc93c115aec5baa7f840cd7446391b6923d543440344b8e4e79d7690029"
}