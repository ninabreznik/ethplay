{
  "address": "0x0000000000377d181a0ebd08590c6b399b272000",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MultiSigWallet",
  "compilerVersion": "v0.4.26+commit.4563c3fc",
  "optimization": true,
  "runs": "200",
  "evmVersion": "constantinople",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-21\n*/\n\npragma solidity 0.4.26; // optimization enabled, runs: 200, EVM version: constantinople\n\n\n/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\n/// @author Stefan George - <[emailÂ protected]>\ncontract MultiSigWallet {\n\n    /*\n     *  Events\n     */\n    event Confirmation(address indexed sender, uint indexed transactionId);\n    event Revocation(address indexed sender, uint indexed transactionId);\n    event Submission(uint indexed transactionId);\n    event Execution(uint indexed transactionId);\n    event ExecutionFailure(uint indexed transactionId);\n    event Deposit(address indexed sender, uint value);\n    event OwnerAddition(address indexed owner);\n    event OwnerRemoval(address indexed owner);\n    event RequirementChange(uint required);\n\n    /*\n     *  Constants\n     */\n    uint constant public MAX_OWNER_COUNT = 50;\n\n    /*\n     *  Storage\n     */\n    mapping (uint => Transaction) public transactions;\n    mapping (uint => mapping (address => bool)) public confirmations;\n    mapping (address => bool) public isOwner;\n    address[] public owners;\n    uint public required;\n    uint public transactionCount;\n\n    struct Transaction {\n        address destination;\n        uint value;\n        bytes data;\n        bool executed;\n    }\n\n    /*\n     *  Modifiers\n     */\n    modifier onlyWallet() {\n        require(msg.sender == address(this));\n        _;\n    }\n\n    modifier ownerDoesNotExist(address owner) {\n        require(!isOwner[owner]);\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        require(isOwner[owner]);\n        _;\n    }\n\n    modifier transactionExists(uint transactionId) {\n        require(transactions[transactionId].destination != 0);\n        _;\n    }\n\n    modifier confirmed(uint transactionId, address owner) {\n        require(confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notConfirmed(uint transactionId, address owner) {\n        require(!confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notExecuted(uint transactionId) {\n        require(!transactions[transactionId].executed);\n        _;\n    }\n\n    modifier notNull(address _address) {\n        require(_address != 0);\n        _;\n    }\n\n    modifier validRequirement(uint ownerCount, uint _required) {\n        require(ownerCount <= MAX_OWNER_COUNT\n            && _required <= ownerCount\n            && _required != 0\n            && ownerCount != 0);\n        _;\n    }\n\n    /// @dev Fallback function allows to deposit ether.\n    function()\n        payable\n    {\n        if (msg.value > 0)\n            Deposit(msg.sender, msg.value);\n    }\n\n    /*\n     * Public functions\n     */\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\n    /// @param _owners List of initial owners.\n    /// @param _required Number of required confirmations.\n    function MultiSigWallet(address[] _owners, uint _required)\n        public\n        validRequirement(_owners.length, _required)\n    {\n        for (uint i=0; i<_owners.length; i++) {\n            require(!isOwner[_owners[i]] && _owners[i] != 0);\n            isOwner[_owners[i]] = true;\n        }\n        owners = _owners;\n        required = _required;\n    }\n\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of new owner.\n    function addOwner(address owner)\n        public\n        onlyWallet\n        ownerDoesNotExist(owner)\n        notNull(owner)\n        validRequirement(owners.length + 1, required)\n    {\n        isOwner[owner] = true;\n        owners.push(owner);\n        OwnerAddition(owner);\n    }\n\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner.\n    function removeOwner(address owner)\n        public\n        onlyWallet\n        ownerExists(owner)\n    {\n        isOwner[owner] = false;\n        for (uint i=0; i<owners.length - 1; i++)\n            if (owners[i] == owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        owners.length -= 1;\n        if (required > owners.length)\n            changeRequirement(owners.length);\n        OwnerRemoval(owner);\n    }\n\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner to be replaced.\n    /// @param newOwner Address of new owner.\n    function replaceOwner(address owner, address newOwner)\n        public\n        onlyWallet\n        ownerExists(owner)\n        ownerDoesNotExist(newOwner)\n    {\n        for (uint i=0; i<owners.length; i++)\n            if (owners[i] == owner) {\n                owners[i] = newOwner;\n                break;\n            }\n        isOwner[owner] = false;\n        isOwner[newOwner] = true;\n        OwnerRemoval(owner);\n        OwnerAddition(newOwner);\n    }\n\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\n    /// @param _required Number of required confirmations.\n    function changeRequirement(uint _required)\n        public\n        onlyWallet\n        validRequirement(owners.length, _required)\n    {\n        required = _required;\n        RequirementChange(_required);\n    }\n\n    /// @dev Allows an owner to submit and confirm a transaction.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function submitTransaction(address destination, uint value, bytes data)\n        public\n        returns (uint transactionId)\n    {\n        transactionId = addTransaction(destination, value, data);\n        confirmTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to confirm a transaction.\n    /// @param transactionId Transaction ID.\n    function confirmTransaction(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        transactionExists(transactionId)\n        notConfirmed(transactionId, msg.sender)\n    {\n        confirmations[transactionId][msg.sender] = true;\n        Confirmation(msg.sender, transactionId);\n        executeTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\n    /// @param transactionId Transaction ID.\n    function revokeConfirmation(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId)\n    {\n        confirmations[transactionId][msg.sender] = false;\n        Revocation(msg.sender, transactionId);\n    }\n\n    /// @dev Allows anyone to execute a confirmed transaction.\n    /// @param transactionId Transaction ID.\n    function executeTransaction(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId)\n    {\n        if (isConfirmed(transactionId)) {\n            Transaction storage txn = transactions[transactionId];\n            txn.executed = true;\n            if (external_call(txn.destination, txn.value, txn.data.length, txn.data))\n                Execution(transactionId);\n            else {\n                ExecutionFailure(transactionId);\n                txn.executed = false;\n            }\n        }\n    }\n\n    // call has been separated into its own function in order to take advantage\n    // of the Solidity's code generator to produce a loop that copies tx.data into memory.\n    function external_call(address destination, uint value, uint dataLength, bytes data) internal returns (bool) {\n        bool result;\n        assembly {\n            let x := mload(0x40)   // \"Allocate\" memory for output (0x40 is where \"free memory\" pointer is stored by convention)\n            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\n            result := call(\n                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting\n                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\n                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\n                destination,\n                value,\n                d,\n                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem\n                x,\n                0                  // Output is ignored, therefore the output size is zero\n            )\n        }\n        return result;\n    }\n\n    /// @dev Returns the confirmation status of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Confirmation status.\n    function isConfirmed(uint transactionId)\n        public\n        constant\n        returns (bool)\n    {\n        uint count = 0;\n        for (uint i=0; i<owners.length; i++) {\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n        }\n    }\n\n    /*\n     * Internal functions\n     */\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function addTransaction(address destination, uint value, bytes data)\n        internal\n        notNull(destination)\n        returns (uint transactionId)\n    {\n        transactionId = transactionCount;\n        transactions[transactionId] = Transaction({\n            destination: destination,\n            value: value,\n            data: data,\n            executed: false\n        });\n        transactionCount += 1;\n        Submission(transactionId);\n    }\n\n    /*\n     * Web3 call functions\n     */\n    /// @dev Returns number of confirmations of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Number of confirmations.\n    function getConfirmationCount(uint transactionId)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n    }\n\n    /// @dev Returns total number of transactions after filers are applied.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Total number of transactions after filters are applied.\n    function getTransactionCount(bool pending, bool executed)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i=0; i<transactionCount; i++)\n            if (   pending && !transactions[i].executed\n                || executed && transactions[i].executed)\n                count += 1;\n    }\n\n    /// @dev Returns list of owners.\n    /// @return List of owner addresses.\n    function getOwners()\n        public\n        constant\n        returns (address[])\n    {\n        return owners;\n    }\n\n    /// @dev Returns array with owner addresses, which confirmed transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Returns array of owner addresses.\n    function getConfirmations(uint transactionId)\n        public\n        constant\n        returns (address[] _confirmations)\n    {\n        address[] memory confirmationsTemp = new address[](owners.length);\n        uint count = 0;\n        uint i;\n        for (i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]]) {\n                confirmationsTemp[count] = owners[i];\n                count += 1;\n            }\n        _confirmations = new address[](count);\n        for (i=0; i<count; i++)\n            _confirmations[i] = confirmationsTemp[i];\n    }\n\n    /// @dev Returns list of transaction IDs in defined range.\n    /// @param from Index start position of transaction array.\n    /// @param to Index end position of transaction array.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Returns array of transaction IDs.\n    function getTransactionIds(uint from, uint to, bool pending, bool executed)\n        public\n        constant\n        returns (uint[] _transactionIds)\n    {\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\n        uint count = 0;\n        uint i;\n        for (i=0; i<transactionCount; i++)\n            if (   pending && !transactions[i].executed\n                || executed && transactions[i].executed)\n            {\n                transactionIdsTemp[count] = i;\n                count += 1;\n            }\n        _transactionIds = new uint[](to - from);\n        for (i=from; i<to; i++)\n            _transactionIds[i - from] = transactionIdsTemp[i];\n    }\n}",
  "bytecode": "60806040523480156200001157600080fd5b50604051620016b9380380620016b983398101604052805160208201519101805190919060009082603282118015906200004b5750818111155b80156200005757508015155b80156200006357508115155b15156200006f57600080fd5b600092505b845183101562000147576002600086858151811015156200009157fe5b6020908102909101810151600160a060020a031682528101919091526040016000205460ff16158015620000e757508483815181101515620000cf57fe5b90602001906020020151600160a060020a0316600014155b1515620000f357600080fd5b60016002600087868151811015156200010857fe5b602090810291909101810151600160a060020a03168252810191909152604001600020805460ff19169115159190911790556001929092019162000074565b84516200015c9060039060208801906200016e565b50505060049190915550620002029050565b828054828255906000526020600020908101928215620001c6579160200282015b82811115620001c65782518254600160a060020a031916600160a060020a039091161782556020909201916001909101906200018f565b50620001d4929150620001d8565b5090565b620001ff91905b80821115620001d4578054600160a060020a0319168155600101620001df565b90565b6114a780620002126000396000f3006080604052600436106101005760003560e01c63ffffffff168063025e7c2714610142578063173825d91461017657806320ea8d86146101975780632f54bf6e146101af5780633411c81c146101e457806354741525146102085780637065cb4814610239578063784547a71461025a5780638b51d13f146102725780639ace38c21461028a578063a0e67e2b14610345578063a8abe69a146103aa578063b5dc40c3146103cf578063b77bf600146103e7578063ba51a6df146103fc578063c01a8c8414610414578063c64274741461042c578063d74f8edd14610495578063dc8452cd146104aa578063e20056e6146104bf578063ee22610b146104e6575b60003411156101405760408051348152905133917fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c919081900360200190a25b005b34801561014e57600080fd5b5061015a6004356104fe565b60408051600160a060020a039092168252519081900360200190f35b34801561018257600080fd5b50610140600160a060020a0360043516610526565b3480156101a357600080fd5b5061014060043561069d565b3480156101bb57600080fd5b506101d0600160a060020a0360043516610757565b604080519115158252519081900360200190f35b3480156101f057600080fd5b506101d0600435600160a060020a036024351661076c565b34801561021457600080fd5b506102276004351515602435151561078c565b60408051918252519081900360200190f35b34801561024557600080fd5b50610140600160a060020a03600435166107f8565b34801561026657600080fd5b506101d060043561091d565b34801561027e57600080fd5b506102276004356109a1565b34801561029657600080fd5b506102a2600435610a10565b6040518085600160a060020a0316600160a060020a031681526020018481526020018060200183151515158152602001828103825284818151815260200191508051906020019080838360005b838110156103075781810151838201526020016102ef565b50505050905090810190601f1680156103345780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b34801561035157600080fd5b5061035a610ace565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561039657818101518382015260200161037e565b505050509050019250505060405180910390f35b3480156103b657600080fd5b5061035a60043560243560443515156064351515610b31565b3480156103db57600080fd5b5061035a600435610c6a565b3480156103f357600080fd5b50610227610de3565b34801561040857600080fd5b50610140600435610de9565b34801561042057600080fd5b50610140600435610e68565b34801561043857600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610227948235600160a060020a0316946024803595369594606494920191908190840183828082843750949750610f339650505050505050565b3480156104a157600080fd5b50610227610f52565b3480156104b657600080fd5b50610227610f57565b3480156104cb57600080fd5b50610140600160a060020a0360043581169060243516610f5d565b3480156104f257600080fd5b506101406004356110e7565b600380548290811061050c57fe5b600091825260209091200154600160a060020a0316905081565b600033301461053457600080fd5b600160a060020a038216600090815260026020526040902054829060ff16151561055d57600080fd5b600160a060020a0383166000908152600260205260408120805460ff1916905591505b600354600019018210156106385782600160a060020a03166003838154811015156105a757fe5b600091825260209091200154600160a060020a0316141561062d576003805460001981019081106105d457fe5b60009182526020909120015460038054600160a060020a0390921691849081106105fa57fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a03160217905550610638565b600190910190610580565b60038054600019019061064b90826113ba565b5060035460045411156106645760035461066490610de9565b604051600160a060020a038416907f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9090600090a2505050565b3360008181526002602052604090205460ff1615156106bb57600080fd5b60008281526001602090815260408083203380855292529091205483919060ff1615156106e757600080fd5b600084815260208190526040902060030154849060ff161561070857600080fd5b6000858152600160209081526040808320338085529252808320805460ff191690555187927ff6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e991a35050505050565b60026020526000908152604090205460ff1681565b600160209081526000928352604080842090915290825290205460ff1681565b6000805b6005548110156107f1578380156107b9575060008181526020819052604090206003015460ff16155b806107dd57508280156107dd575060008181526020819052604090206003015460ff165b156107e9576001820191505b600101610790565b5092915050565b33301461080457600080fd5b600160a060020a038116600090815260026020526040902054819060ff161561082c57600080fd5b81600160a060020a038116151561084257600080fd5b6003805490506001016004546032821115801561085f5750818111155b801561086a57508015155b801561087557508115155b151561088057600080fd5b600160a060020a038516600081815260026020526040808220805460ff1916600190811790915560038054918201815583527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01805473ffffffffffffffffffffffffffffffffffffffff191684179055517ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d9190a25050505050565b600080805b60035481101561099a576000848152600160205260408120600380549192918490811061094b57fe5b6000918252602080832090910154600160a060020a0316835282019290925260400190205460ff161561097f576001820191505b600454821415610992576001925061099a565b600101610922565b5050919050565b6000805b600354811015610a0a57600083815260016020526040812060038054919291849081106109ce57fe5b6000918252602080832090910154600160a060020a0316835282019290925260400190205460ff1615610a02576001820191505b6001016109a5565b50919050565b6000602081815291815260409081902080546001808301546002808501805487516101009582161595909502600019011691909104601f8101889004880284018801909652858352600160a060020a0390931695909491929190830182828015610abb5780601f10610a9057610100808354040283529160200191610abb565b820191906000526020600020905b815481529060010190602001808311610a9e57829003601f168201915b5050506003909301549192505060ff1684565b60606003805480602002602001604051908101604052809291908181526020018280548015610b2657602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610b08575b505050505090505b90565b606080600080600554604051908082528060200260200182016040528015610b63578160200160208202803883390190505b50925060009150600090505b600554811015610bea57858015610b98575060008181526020819052604090206003015460ff16155b80610bbc5750848015610bbc575060008181526020819052604090206003015460ff165b15610be257808383815181101515610bd057fe5b60209081029091010152600191909101905b600101610b6f565b878703604051908082528060200260200182016040528015610c16578160200160208202803883390190505b5093508790505b86811015610c5f578281815181101515610c3357fe5b9060200190602002015184898303815181101515610c4d57fe5b60209081029091010152600101610c1d565b505050949350505050565b606080600080600380549050604051908082528060200260200182016040528015610c9f578160200160208202803883390190505b50925060009150600090505b600354811015610d5c5760008581526001602052604081206003805491929184908110610cd457fe5b6000918252602080832090910154600160a060020a0316835282019290925260400190205460ff1615610d54576003805482908110610d0f57fe5b6000918252602090912001548351600160a060020a0390911690849084908110610d3557fe5b600160a060020a03909216602092830290910190910152600191909101905b600101610cab565b81604051908082528060200260200182016040528015610d86578160200160208202803883390190505b509350600090505b81811015610ddb578281815181101515610da457fe5b906020019060200201518482815181101515610dbc57fe5b600160a060020a03909216602092830290910190910152600101610d8e565b505050919050565b60055481565b333014610df557600080fd5b6003548160328211801590610e0a5750818111155b8015610e1557508015155b8015610e2057508115155b1515610e2b57600080fd5b60048390556040805184815290517fa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a9181900360200190a1505050565b3360008181526002602052604090205460ff161515610e8657600080fd5b6000828152602081905260409020548290600160a060020a03161515610eab57600080fd5b60008381526001602090815260408083203380855292529091205484919060ff1615610ed657600080fd5b6000858152600160208181526040808420338086529252808420805460ff1916909317909255905187927f4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef91a3610f2c856110e7565b5050505050565b6000610f408484846112a7565b9050610f4b81610e68565b9392505050565b603281565b60045481565b6000333014610f6b57600080fd5b600160a060020a038316600090815260026020526040902054839060ff161515610f9457600080fd5b600160a060020a038316600090815260026020526040902054839060ff1615610fbc57600080fd5b600092505b60035483101561104d5784600160a060020a0316600384815481101515610fe457fe5b600091825260209091200154600160a060020a03161415611042578360038481548110151561100f57fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a0316021790555061104d565b600190920191610fc1565b600160a060020a03808616600081815260026020526040808220805460ff1990811690915593881682528082208054909416600117909355915190917f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9091a2604051600160a060020a038516907ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d90600090a25050505050565b3360008181526002602052604081205490919060ff16151561110857600080fd5b60008381526001602090815260408083203380855292529091205484919060ff16151561113457600080fd5b600085815260208190526040902060030154859060ff161561115557600080fd5b61115e8661091d565b1561129f576000868152602081815260409182902060038101805460ff19166001908117909155815481830154600280850180548851601f60001997831615610100029790970190911692909204948501879004870282018701909752838152939a5061123295600160a060020a03909216949093919083908301828280156112285780601f106111fd57610100808354040283529160200191611228565b820191906000526020600020905b81548152906001019060200180831161120b57829003601f168201915b5050505050611397565b156112675760405186907f33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed7590600090a261129f565b60405186907f526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b7923690600090a260038501805460ff191690555b505050505050565b600083600160a060020a03811615156112bf57600080fd5b60055460408051608081018252600160a060020a0388811682526020808301898152838501898152600060608601819052878152808452959095208451815473ffffffffffffffffffffffffffffffffffffffff19169416939093178355516001830155925180519496509193909261133f9260028501929101906113e3565b50606091909101516003909101805460ff191691151591909117905560058054600101905560405182907fc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e5190600090a2509392505050565b6000806040516020840160008287838a8c6187965a03f198975050505050505050565b8154818355818111156113de576000838152602090206113de918101908301611461565b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061142457805160ff1916838001178555611451565b82800160010185558215611451579182015b82811115611451578251825591602001919060010190611436565b5061145d929150611461565b5090565b610b2e91905b8082111561145d57600081556001016114675600a165627a7a723058205113505d00b2256aa6b68bfaf3746c3a674c057915d394d34dfea70c4f8d8dfe00290000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000003f458b658085118b22bf28bfe03c351aabc299a9",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000003f458b658085118b22bf28bfe03c351aabc299a9"
}