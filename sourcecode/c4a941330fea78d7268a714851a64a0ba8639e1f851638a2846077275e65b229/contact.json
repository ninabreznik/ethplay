{
  "address": "0x84055ac6916a2eb49f8b492c55a77248cde50a07",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "InstaUniswapPool",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-20\n*/\n\npragma solidity ^0.5.0;\n\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n    function approve(address spender, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address who) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n}\n\ninterface UniswapFactory {\n    // Get Exchange and Token Info\n    function getExchange(address token) external view returns (address exchange);\n}\n\ninterface UniswapPool {\n    // Address of ERC20 token sold on this exchange\n    function tokenAddress() external view returns (address token);\n    // Address of Uniswap Factory\n    function factoryAddress() external view returns (address factory);\n    // Provide Liquidity\n    function addLiquidity(uint256 minLiquidity, uint256 maxTokens, uint256 deadline) external payable returns (uint256);\n    // Remove Liquidity\n    function removeLiquidity(\n        uint256 amount,\n        uint256 minEth,\n        uint256 minTokens,\n        uint256 deadline\n        ) external returns (uint256, uint256);\n\n    // ERC20 comaptibility for liquidity tokens\n    function totalSupply() external view returns (uint);\n}\n\n\ncontract Helper {\n\n    /**\n     * @dev get Uniswap Proxy address\n     */\n    function getAddressUniFactory() public pure returns (address factory) {\n        factory = 0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95;\n        // factory = 0xf5D915570BC477f9B8D6C0E980aA81757A3AaC36; // Rinkeby\n    }\n\n    // Get Uniswap's Exchange address from Factory Contract\n    function getAddressPool(address _token) public view returns (address) {\n        return UniswapFactory(getAddressUniFactory()).getExchange(_token);\n    }\n\n    /**\n     * @dev get admin address\n     */\n    function getAddressAdmin() public pure returns (address admin) {\n        admin = 0x7284a8451d9a0e7Dc62B3a71C0593eA2eC5c5638;\n    }\n\n    /**\n     * @dev gets ETH & token balance\n     * @param src is the token being sold\n     * @return ethBal - if not erc20, eth balance\n     * @return tknBal - if not eth, erc20 balance\n     */\n    function getBal(address src, address _owner) internal view returns (uint, uint) {\n        uint tknBal = IERC20(src).balanceOf(address(_owner));\n        return (address(_owner).balance, tknBal);\n    }\n\n    /**\n     * @dev setting allowance to kyber for the \"user proxy\" if required\n     * @param token is the token address\n     */\n    function setApproval(address token, uint srcAmt, address to) internal {\n        IERC20 erc20Contract = IERC20(token);\n        uint tokenAllowance = erc20Contract.allowance(address(this), to);\n        if (srcAmt > tokenAllowance) {\n            erc20Contract.approve(to, 2**255);\n        }\n    }\n    \n}\n\n\ncontract Pool is Helper {\n\n    event LogAddLiquidity(\n        address token,\n        uint tokenAmt,\n        uint ethAmt,\n        uint poolTokenMinted,\n        address beneficiary\n    );\n\n    event LogRemoveLiquidity(\n        address token,\n        uint tokenReturned,\n        uint ethReturned,\n        uint poolTokenBurned,\n        address beneficiary\n    );\n\n    event LogShutPool(\n        address token,\n        uint tokenReturned,\n        uint ethReturned,\n        uint poolTokenBurned,\n        address beneficiary\n    );\n\n    /**\n     * @dev Uniswap's pool basic details\n     * @param token token address to get pool. Eg:- DAI address, MKR address, etc\n     * @param poolAddress Uniswap pool's address\n     * @param totalSupply total supply of pool token\n     * @param ethReserve Total ETH balance of uniswap's pool\n     * @param tokenReserve Total Token balance of uniswap's pool\n     */\n    function poolDetails(\n        address token\n    ) public view returns (\n        address poolAddress,\n        uint totalSupply,\n        uint ethReserve,\n        uint tokenReserve\n    )\n    {\n        poolAddress = getAddressPool(token);\n        totalSupply = IERC20(poolAddress).totalSupply();\n        (ethReserve, tokenReserve) = getBal(token, poolAddress);\n    }\n\n    /**\n     * @dev to add liquidity in pool. Payable function token qty to deposit is decided as per the ETH sent by the user\n     * @param token ERC20 address of Uniswap's pool (eg:- DAI address, MKR address, etc)\n     * @param maxDepositedTokens Max token to be deposited\n     */\n    function addLiquidity(address token, uint maxDepositedTokens) public payable returns (uint256 tokensMinted) {\n        address poolAddr = getAddressPool(token);\n        (uint ethReserve, uint tokenReserve) = getBal(token, poolAddr);\n        uint tokenToDeposit = msg.value * tokenReserve / ethReserve + 1;\n        require(tokenToDeposit < maxDepositedTokens, \"Token to deposit is greater than Max token to Deposit\");\n        IERC20(token).transferFrom(msg.sender, address(this), tokenToDeposit);\n        setApproval(token, tokenToDeposit, poolAddr);\n        tokensMinted = UniswapPool(poolAddr).addLiquidity.value(msg.value)(\n            uint(1),\n            tokenToDeposit,\n            uint(1899063809) // 6th March 2030 GMT // no logic\n        );\n        emit LogAddLiquidity(\n            token,\n            tokenToDeposit,\n            msg.value,\n            tokensMinted,\n            msg.sender\n        );\n    }\n\n    /**\n     * @dev to remove liquidity from pool. ETH and token quantity is decided as per the exchange token qty to burn\n     * @param token ERC20 address of Uniswap's pool (eg:- DAI address, MKR address, etc)\n     * @param amount Uniswap pool's ERC20 token QTY to burn\n     * @param minEth Min ETH user to be returned\n     * @param minTokens Min Tokens to be returned\n     */\n    function removeLiquidity(\n        address token,\n        uint amount,\n        uint minEth,\n        uint minTokens\n    ) public returns (uint ethReturned, uint tokenReturned)\n    {\n        address poolAddr = getAddressPool(token);\n\n        setApproval(poolAddr, amount, poolAddr);\n        (ethReturned, tokenReturned) = UniswapPool(poolAddr).removeLiquidity(\n            amount,\n            minEth,\n            minTokens,\n            uint(1899063809) // 6th March 2030 GMT // no logic\n        );\n        address(msg.sender).transfer(ethReturned);\n        IERC20(token).transfer(msg.sender, tokenReturned);\n        emit LogRemoveLiquidity(\n            token,\n            tokenReturned,\n            ethReturned,\n            amount,\n            msg.sender\n        );\n    }\n\n    /**\n     * @dev to remove all of the user's liquidity from pool. ETH and token quantity is decided as per the exchange token qty to burn\n     * @param token ERC20 address of Uniswap's pool (eg:- DAI address, MKR address, etc)\n     */\n    function shut(address token) public returns (uint ethReturned, uint tokenReturned) {\n        address poolAddr = getAddressPool(token);\n        uint userPoolBal = IERC20(poolAddr).balanceOf(address(this));\n\n        setApproval(poolAddr, userPoolBal, poolAddr);\n        (ethReturned, tokenReturned) = UniswapPool(poolAddr).removeLiquidity(\n            userPoolBal,\n            uint(1),\n            uint(1),\n            uint(1899063809) // 6th March 2030 GMT // no logic\n        );\n        address(msg.sender).transfer(ethReturned);\n        IERC20(token).transfer(msg.sender, tokenReturned);\n        emit LogShutPool(\n            token,\n            tokenReturned,\n            ethReturned,\n            userPoolBal,\n            msg.sender\n        );\n    }\n\n}\n\n\ncontract InstaUniswapPool is Pool {\n\n    uint public version;\n    \n    /**\n     * @dev setting up variables on deployment\n     * 1...2...3 versioning in each subsequent deployments\n     */\n    constructor(uint _version) public {\n        version = _version;\n    }\n\n    function() external payable {}\n\n}",
  "bytecode": "608060405234801561001057600080fd5b506040516020806113638339810180604052602081101561003057600080fd5b8101908080519060200190929190505050806000819055505061130b806100586000396000f3fe608060405260043610610088576000357c010000000000000000000000000000000000000000000000000000000090048063348868571461008a57806345529703146100f657806354fd4d501461014d5780635668870014610178578063791ff174146101da578063886a13761461028057806393ca2f8a14610311578063adbd80b01461039b575b005b34801561009657600080fd5b506100d9600480360360208110156100ad57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506103f2565b604051808381526020018281526020019250505060405180910390f35b34801561010257600080fd5b5061010b610799565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561015957600080fd5b506101626107b5565b6040518082815260200191505060405180910390f35b6101c46004803603604081101561018e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107bb565b6040518082815260200191505060405180910390f35b3480156101e657600080fd5b50610229600480360360208110156101fd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b25565b604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200194505050505060405180910390f35b34801561028c57600080fd5b506102cf600480360360208110156102a357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bee565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561031d57600080fd5b5061037e6004803603608081101561033457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190505050610cd2565b604051808381526020018281526020019250505060405180910390f35b3480156103a757600080fd5b506103b0610fa3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600080600061040084610bee565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561049d57600080fd5b505afa1580156104b1573d6000803e3d6000fd5b505050506040513d60208110156104c757600080fd5b810190808051906020019092919050505090506104e5828284610fbf565b8173ffffffffffffffffffffffffffffffffffffffff1663f88bf15a826001806371316a016040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808581526020018481526020018381526020018281526020019450505050506040805180830381600087803b15801561057057600080fd5b505af1158015610584573d6000803e3d6000fd5b505050506040513d604081101561059a57600080fd5b81019080805190602001909291908051906020019092919050505080945081955050503373ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051600060405180830381858888f19350505050158015610603573d6000803e3d6000fd5b508473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156106a757600080fd5b505af11580156106bb573d6000803e3d6000fd5b505050506040513d60208110156106d157600080fd5b8101908080519060200190929190505050507f73f45fd8326d8c3f3bcbe447e17d38be9f8dd22219429e95ea714af7b189dfa98584868433604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019550505050505060405180910390a15050915091565b600073c0a47dfe034b400b47bdad5fecda2621de6c4d95905090565b60005481565b6000806107c784610bee565b90506000806107d686846111df565b9150915060006001838334028115156107eb57fe5b04019050858110151561088c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260358152602001807f546f6b656e20746f206465706f7369742069732067726561746572207468616e81526020017f204d617820746f6b656e20746f204465706f736974000000000000000000000081525060400191505060405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561096357600080fd5b505af1158015610977573d6000803e3d6000fd5b505050506040513d602081101561098d57600080fd5b8101908080519060200190929190505050506109aa878286610fbf565b8373ffffffffffffffffffffffffffffffffffffffff1663422f1043346001846371316a016040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018084815260200183815260200182815260200193505050506020604051808303818588803b158015610a2e57600080fd5b505af1158015610a42573d6000803e3d6000fd5b50505050506040513d6020811015610a5957600080fd5b810190808051906020019092919050505094507f9b8217aa00ed46e167fe971f97db538e33072fc0260c9d44a930e84c734b6b728782348833604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019550505050505060405180910390a15050505092915050565b600080600080610b3485610bee565b93508373ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015610b9857600080fd5b505afa158015610bac573d6000803e3d6000fd5b505050506040513d6020811015610bc257600080fd5b81019080805190602001909291905050509250610bdf85856111df565b80925081935050509193509193565b6000610bf8610799565b73ffffffffffffffffffffffffffffffffffffffff166306f2bf62836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610c9057600080fd5b505afa158015610ca4573d6000803e3d6000fd5b505050506040513d6020811015610cba57600080fd5b81019080805190602001909291905050509050919050565b6000806000610ce087610bee565b9050610ced818783610fbf565b8073ffffffffffffffffffffffffffffffffffffffff1663f88bf15a8787876371316a016040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808581526020018481526020018381526020018281526020019450505050506040805180830381600087803b158015610d7757600080fd5b505af1158015610d8b573d6000803e3d6000fd5b505050506040513d6040811015610da157600080fd5b81019080805190602001909291908051906020019092919050505080935081945050503373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015610e0a573d6000803e3d6000fd5b508673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610eae57600080fd5b505af1158015610ec2573d6000803e3d6000fd5b505050506040513d6020811015610ed857600080fd5b8101908080519060200190929190505050507ffd80ed750cd1bf6e607c20103d8d61e1e6f5e44c9eed93423482ddfc5ded517a8783858933604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019550505050505060405180910390a15094509492505050565b6000737284a8451d9a0e7dc62b3a71c0593ea2ec5c5638905090565b600083905060008173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561109357600080fd5b505afa1580156110a7573d6000803e3d6000fd5b505050506040513d60208110156110bd57600080fd5b81019080805190602001909291905050509050808411156111d8578173ffffffffffffffffffffffffffffffffffffffff1663095ea7b3847f80000000000000000000000000000000000000000000000000000000000000006040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561119b57600080fd5b505af11580156111af573d6000803e3d6000fd5b505050506040513d60208110156111c557600080fd5b8101908080519060200190929190505050505b5050505050565b60008060008473ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561127d57600080fd5b505afa158015611291573d6000803e3d6000fd5b505050506040513d60208110156112a757600080fd5b810190808051906020019092919050505090508373ffffffffffffffffffffffffffffffffffffffff1631819250925050925092905056fea165627a7a72305820af2fae06ed905c68b711ee8454a154b727a812a32c94a60e4d4c9abf4611dbba00290000000000000000000000000000000000000000000000000000000000000001",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000001"
}