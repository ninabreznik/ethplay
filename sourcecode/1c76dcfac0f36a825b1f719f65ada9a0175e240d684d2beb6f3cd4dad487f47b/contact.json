{
  "address": "0x444b5b08a72ee164e5d574b4a24eb5c12c1d35fe",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ldoh",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-16\n*/\n\npragma solidity ^0.4.25;\n\n/**\n\n\n\t\t\t\t\t.----------------.  .----------------.  .----------------.  .----------------. \n\t\t\t\t\t| .--------------. || .--------------. || .--------------. || .--------------. |\n\t\t\t\t\t| |  ____  ____  | || |     ____     | || |   _____      | || |  ________    | |\n\t\t\t\t\t| | |_   ||   _| | || |   .'    `.   | || |  |_   _|     | || | |_   ___ `.  | |\n\t\t\t\t\t| |   | |__| |   | || |  /  .--.  \\  | || |    | |       | || |   | |   `. \\ | |\n\t\t\t\t\t| |   |  __  |   | || |  | |    | |  | || |    | |   _   | || |   | |    | | | |\n\t\t\t\t\t| |  _| |  | |_  | || |  \\  `--'  /  | || |   _| |__/ |  | || |  _| |___.' / | |\n\t\t\t\t\t| | |____||____| | || |   `.____.'   | || |  |________|  | || | |________.'  | |\n\t\t\t\t\t| |              | || |              | || |              | || |              | |\n\t\t\t\t\t| '--------------' || '--------------' || '--------------' || '--------------' |\n\t\t\t\t\t'----------------'  '----------------'  '----------------'  '----------------' \n\n**/\n\n\t/*==============================\n    =          Version 8.5        =\n    ==============================*/\n\t\ncontract EthereumSmartContract {    \n    address EthereumNodes; \n\t\n    constructor() public { \n        EthereumNodes = msg.sender;\n    }\n    modifier restricted() {\n        require(msg.sender == EthereumNodes);\n        _;\n    } \n\t\n    function GetEthereumNodes() public view returns (address owner) { return EthereumNodes; }\n}\n\ncontract ldoh is EthereumSmartContract {\n\t\n\t/*==============================\n    =            EVENTS            =\n    ==============================*/\n\t\n\tevent onCashbackCode\t(address indexed hodler, address cashbackcode);\t\t\n\tevent onAffiliateBonus\t(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\t\t\n\tevent onHoldplatform\t(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\n\tevent onUnlocktoken\t\t(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\n\tevent onReceiveAirdrop\t(address indexed hodler, uint256 amount, uint256 datetime);\t\t\n\tevent onHOLDdeposit\t\t(address indexed hodler, uint256 amount, uint256 newbalance, uint256 datetime);\t\n\tevent onHOLDwithdraw\t(address indexed hodler, uint256 amount, uint256 newbalance, uint256 datetime);\t\n\t\t\n\t\n\t/*==============================\n    =          VARIABLES           =\n    ==============================*/   \n\n\t//-------o Affiliate = 12% o-------o Cashback = 16% o-------o Total Receive = 88% o-------o Without Cashback = 72% o-------o\t\n\t//-------o Hold 24 Months, Unlock 3% Permonth\n\t\n\t// Struct Database\n\n    struct Safe {\n        uint256 id;\t\t\t\t\t\t// [01] -- > Registration Number\n        uint256 amount;\t\t\t\t\t// [02] -- > Total amount of contribution to this transaction\n        uint256 endtime;\t\t\t\t// [03] -- > The Expiration Of A Hold Platform Based On Unix Time\n        address user;\t\t\t\t\t// [04] -- > The ETH address that you are using\n        address tokenAddress;\t\t\t// [05] -- > The Token Contract Address That You Are Using\n\t\tstring  tokenSymbol;\t\t\t// [06] -- > The Token Symbol That You Are Using\n\t\tuint256 amountbalance; \t\t\t// [07] -- > 88% from Contribution / 72% Without Cashback\n\t\tuint256 cashbackbalance; \t\t// [08] -- > 16% from Contribution / 0% Without Cashback\n\t\tuint256 lasttime; \t\t\t\t// [09] -- > The Last Time You Withdraw Based On Unix Time\n\t\tuint256 percentage; \t\t\t// [10] -- > The percentage of tokens that are unlocked every month ( Default = 3% )\n\t\tuint256 percentagereceive; \t\t// [11] -- > The Percentage You Have Received\n\t\tuint256 tokenreceive; \t\t\t// [12] -- > The Number Of Tokens You Have Received\n\t\tuint256 lastwithdraw; \t\t\t// [13] -- > The Last Amount You Withdraw\n\t\taddress referrer; \t\t\t\t// [14] -- > Your ETH referrer address\n\t\tbool \tcashbackstatus; \t\t// [15] -- > Cashback Status\n    }\n\t\n\tuint256 private idnumber; \t\t\t\t\t\t\t\t\t\t// [01] -- > ID number ( Start from 500 )\t\t\t\t\n\tuint256 public  TotalUser; \t\t\t\t\t\t\t\t\t\t// [02] -- > Total Smart Contract User\t\t\t\t\t\n\tmapping(address => address) \t\tpublic cashbackcode; \t\t// [03] -- > Cashback Code \t\t\t\t\t\n\tmapping(address => uint256[]) \t\tpublic idaddress;\t\t\t// [04] -- > Search Address by ID\t\t\t\n\tmapping(address => address[]) \t\tpublic afflist;\t\t\t\t// [05] -- > Affiliate List by ID\t\t\t\t\t\n\tmapping(address => string) \t\t\tpublic ContractSymbol; \t\t// [06] -- > Contract Address Symbol\t\t\t\t\n\tmapping(uint256 => Safe) \t\t\tprivate _safes; \t\t\t// [07] -- > Struct safe database\t\n\tmapping(address => bool) \t\t\tpublic contractaddress; \t// [08] -- > Contract Address \t\n\n\n\tmapping (address => mapping (uint256 => uint256)) public Bigdata; \n\t\n/** Bigdata Mapping : \n[1] Percent (Monthly Unlocked tokens)\t\t[7] All Payments \t\t\t\t[13] Total TX Affiliate (Withdraw) \t\n[2] Holding Time (in seconds) \t\t\t\t[8] Active User \t\t\t\t[14] Current Price (USD)\t\n[3] Token Balance \t\t\t\t\t\t\t[9] Total User \t\t\t\t\t[15] ATH Price (USD)\n[4] Min Contribution \t\t\t\t\t\t[10] Total TX Hold \t\t\t\t[16] ATL Price (USD)\t\t\t\n[5] Max Contribution \t\t\t\t\t\t[11] Total TX Unlock \t\t\t[17] Current ETH Price (ETH) \t\t\n[6] All Contribution \t\t\t\t\t\t[12] Total TX Airdrop\t\t\t[18] Unique Code\t\t\t\t\t\t\t\n**/\n\n\tmapping (address => mapping (address => mapping (uint256 => uint256))) public Statistics;\n// Statistics = [1] LifetimeContribution [2] LifetimePayments [3] Affiliatevault [4] Affiliateprofit [5] ActiveContribution\n\t\n// Airdrop - Hold Platform (HOLD)\t\t\n\taddress public Holdplatform_address;\t\t\t\t\t\t// [01]\n\tuint256 public Holdplatform_balance; \t\t\t\t\t\t// [02]\n\tmapping(address => uint256) public Holdplatform_status;\t\t// [03]\n\tmapping(address => uint256) public Holdplatform_divider; \t// [04]\n\t\n\t\n\t/*==============================\n    =          CONSTRUCTOR         =\n    ==============================*/  \t\n   \n    constructor() public {     \t \t\n        idnumber \t\t\t\t= 500;\n\t\tHoldplatform_address\t= 0x23bAdee11Bf49c40669e9b09035f048e9146213e;\t//Change before deploy\n    }\n    \n\t\n\t/*==============================\n    =    AVAILABLE FOR EVERYONE    =\n    ==============================*/  \n\n//-------o Function 01 - Ethereum Payable\n    function () public payable {  \n\t\tif (msg.value == 0) {\n\t\t\ttothe_moon();\n\t\t} else { revert(); }\n    }\n    function tothemoon() public payable {  \n\t\tif (msg.value == 0) {\n\t\t\ttothe_moon();\n\t\t} else { revert(); }\n    }\n\tfunction tothe_moon() private {  \n\t\tfor(uint256 i = 1; i < idnumber; i++) {            \n\t\tSafe storage s = _safes[i];\n\t\t\tif (s.user == msg.sender) {\n\t\t\tUnlocktoken(s.tokenAddress, s.id);\n\t\t\t}\n\t\t}\n    }\n\t\n//-------o Function 02 - Cashback Code\n\n    function CashbackCode(address _cashbackcode, uint256 uniquecode) public {\t\t\n\t\trequire(_cashbackcode != msg.sender);\t\t\t\n\t\t\n\t\tif (cashbackcode[msg.sender] == 0x0000000000000000000000000000000000000000 && Bigdata[_cashbackcode][8] == 1 && Bigdata[_cashbackcode][18] != uniquecode ) { \n\t\t\n\t\tcashbackcode[msg.sender] = _cashbackcode; }\n\t\t\n\t\telse { cashbackcode[msg.sender] = EthereumNodes; }\t\n\n\t\tif (Bigdata[msg.sender][18] == 0 ) { \n\t\tBigdata[msg.sender][18]\t= uniquecode; }\n\t\t\n\temit onCashbackCode(msg.sender, _cashbackcode);\t\t\n    } \n\t\n//-------o Function 03 - Contribute \n\n\t//--o 01\n    function Holdplatform(address tokenAddress, uint256 amount) public {\n\t\trequire(amount >= 1 );\n\t\tuint256 holdamount\t= add(Statistics[msg.sender][tokenAddress][5], amount);\n\t\t\n\t\trequire(holdamount <= Bigdata[tokenAddress][5] );\n\t\t\n\t\tif (cashbackcode[msg.sender] == 0x0000000000000000000000000000000000000000 ) { \n\t\t\tcashbackcode[msg.sender] \t= EthereumNodes;\n\t\t\tBigdata[msg.sender][18]\t\t= 123456;\t\n\t\t} \n\t\t\n\t\tif (contractaddress[tokenAddress] == false) { revert(); } else { \n\n\t\tuint256 Finalamount \t\t\t= div(mul(amount, 98), 100);\t\n\t\tuint256 Burn \t\t\t\t\t= div(mul(amount, 2), 100);\t\n\t\taddress Burnaddress\t\t\t\t= 0x0000000000000000000000000000000000000000;\n\t\t\n\t\tERC20Interface token \t\t\t= ERC20Interface(tokenAddress);       \n        require(token.transferFrom(msg.sender, address(this), Finalamount));\t\n\t\trequire(token.transferFrom(msg.sender, Burnaddress, Burn));\t\n\t\t\n\t\tHodlTokens2(tokenAddress, amount);\n\t\tAirdrop(tokenAddress, amount, 1); \n\t\t}\t\t\t\t\t\t\t\n\t}\n\t\n\t//--o 02\t\n    function HodlTokens2(address ERC, uint256 amount) public {\n\t\t\n\t\taddress ref\t\t\t\t\t\t= cashbackcode[msg.sender];\n\t\tuint256 AvailableBalances \t\t= div(mul(amount, 72), 100);\n\t\tuint256\tAvailableCashback \t\t= div(mul(amount, 16), 100);\t\t\n\t\tuint256 affcomission \t\t\t= div(mul(amount, 10), 100); \t\t//test\n\t\tuint256 nodecomission \t\t\t= div(mul(amount, 26), 100);\t\t//test\n\t\t\t\n\t\tif (ref == EthereumNodes && Bigdata[msg.sender][8] == 0 ) { \n\t\t\tAvailableCashback \t\t\t= 0; \n\t\t\tStatistics[ref][ERC][3] \t= add(Statistics[ref][ERC][3], nodecomission); \n\t\t\tStatistics[ref][ERC][4] \t= add(Statistics[ref][ERC][4], nodecomission); \n\t\t\tBigdata[msg.sender][19]\t\t= 111; // Only Tracking ( Delete Before Deploy )\n\t\t\t\n\t\t} else { \n\t\t\n\t\t\tStatistics[ref][ERC][3] \t= add(Statistics[ref][ERC][3], affcomission); \n\t\t\tStatistics[ref][ERC][4] \t= add(Statistics[ref][ERC][4], affcomission); \n\t\t\tBigdata[msg.sender][19]\t\t= 222; // Only Tracking ( Delete Before Deploy )\t\n\t\t} \t\n\n\t\tHodlTokens3(ERC, amount, AvailableBalances, AvailableCashback, ref); \t\n\t}\n\t//--o 04\t\n    function HodlTokens3(address ERC, uint256 amount, uint256 AvailableBalances, uint256 AvailableCashback, address ref) public {\n\t    \n\t    ERC20Interface token \t= ERC20Interface(ERC); \t\n\t\tuint256 TokenPercent \t= Bigdata[ERC][1];\t\n\t\tuint256 TokenHodlTime \t= Bigdata[ERC][2];\t\n\t\tuint256 HodlTime\t\t= add(now, TokenHodlTime);\n\t\t\n\t\tuint256 AM = amount; \tuint256 AB = AvailableBalances;\t\tuint256 AC = AvailableCashback;\t\n\t\tamount \t= 0; AvailableBalances = 0; AvailableCashback = 0;\n\t\t\n\t\t_safes[idnumber] = Safe(idnumber, AM, HodlTime, msg.sender, ERC, token.symbol(), AB, AC, now, TokenPercent, 0, 0, 0, ref, false);\t\n\t\t\t\t\n\t\tStatistics[msg.sender][ERC][1]\t\t\t= add(Statistics[msg.sender][ERC][1], AM); \n\t\tStatistics[msg.sender][ERC][5]  \t\t= add(Statistics[msg.sender][ERC][5], AM); \t\t\t\n\t\tBigdata[ERC][6] \t\t\t\t\t\t= add(Bigdata[ERC][6], AM);   \t\n        Bigdata[ERC][3]\t\t\t\t\t\t\t= add(Bigdata[ERC][3], AM);  \n\n\t\tif(Bigdata[msg.sender][8] == 1 ) {\n        idaddress[msg.sender].push(idnumber); idnumber++; Bigdata[ERC][10]++;  }\t\t\n\t\telse { \n\t\tafflist[ref].push(msg.sender); idaddress[msg.sender].push(idnumber); idnumber++; Bigdata[ERC][9]++; Bigdata[ERC][10]++; TotalUser++;   }\n\t\t\n\t\tBigdata[msg.sender][8] \t\t\t\t\t= 1;  \t\n\t\t\n        emit onHoldplatform(msg.sender, ERC, token.symbol(), AM, HodlTime);\t\n\n\t\tBigdata[msg.sender][19]\t\t= 333; // Only Tracking ( Delete Before Deploy )\t\t\t\n\t\t\t\n\t}\n\n//-------o Function 05 - Claim Token That Has Been Unlocked\n    function Unlocktoken(address tokenAddress, uint256 id) public {\n        require(tokenAddress != 0x0);\n        require(id != 0);        \n        \n        Safe storage s = _safes[id];\n        require(s.user == msg.sender);  \n\t\trequire(s.tokenAddress == tokenAddress);\n\t\t\n\t\tif (s.amountbalance == 0) { revert(); } else { UnlockToken2(tokenAddress, id); }\n    }\n    //--o 01\n    function UnlockToken2(address ERC, uint256 id) private {\n        Safe storage s = _safes[id];      \n        require(s.id != 0);\n        require(s.tokenAddress == ERC);\n\n        uint256 eventAmount\t\t\t\t= s.amountbalance;\n        address eventTokenAddress \t\t= s.tokenAddress;\n        string memory eventTokenSymbol \t= s.tokenSymbol;\t\t\n\t\t     \n        if(s.endtime < now){ //--o  Hold Complete\n        \n\t\tuint256 amounttransfer \t\t\t\t\t= add(s.amountbalance, s.cashbackbalance);\n\t\tStatistics[msg.sender][ERC][5] \t\t\t= sub(Statistics[s.user][s.tokenAddress][5], s.amount); \t\t\n\t\ts.lastwithdraw \t\t\t\t\t\t\t= amounttransfer;   s.amountbalance = 0;   s.lasttime = now;  \t\t\n\t\tPayToken(s.user, s.tokenAddress, amounttransfer); \n\t\t\n\t\t    if(s.cashbackbalance > 0 && s.cashbackstatus == false || s.cashbackstatus == true) {\n            s.tokenreceive \t= div(mul(s.amount, 88), 100) ; \ts.percentagereceive = mul(1000000000000000000, 88);\n            }\n\t\t\telse {\n\t\t\ts.tokenreceive \t= div(mul(s.amount, 72), 100) ;     s.percentagereceive = mul(1000000000000000000, 72);\n\t\t\t}\n\t\t\t\n\t\ts.cashbackbalance = 0;\t\n\t\temit onUnlocktoken(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n\t\t\n        } else { UnlockToken3(ERC, s.id); }\n        \n    }   \n\t//--o 02\n\tfunction UnlockToken3(address ERC, uint256 id) private {\t\t\n\t\tSafe storage s = _safes[id];\n        \n        require(s.id != 0);\n        require(s.tokenAddress == ERC);\t\t\n\t\t\t\n\t\tuint256 timeframe  \t\t\t= sub(now, s.lasttime);\t\t\t                            \n\t\tuint256 CalculateWithdraw \t= div(mul(div(mul(s.amount, s.percentage), 100), timeframe), 2592000); // 2592000 = seconds30days\n\t\t\t\t\t\t\t//--o   = s.amount * s.percentage / 100 * timeframe / seconds30days\t;\n\t\t                         \n\t\tuint256 MaxWithdraw \t\t= div(s.amount, 10);\n\t\t\t\n\t\t//--o Maximum withdraw before unlocked, Max 10% Accumulation\n\t\t\tif (CalculateWithdraw > MaxWithdraw) { uint256 MaxAccumulation = MaxWithdraw; } else { MaxAccumulation = CalculateWithdraw; }\n\t\t\t\n\t\t//--o Maximum withdraw = User Amount Balance   \n\t\t\tif (MaxAccumulation > s.amountbalance) { uint256 realAmount1 = s.amountbalance; } else { realAmount1 = MaxAccumulation; }\n\t\t\t\n\t\tuint256 realAmount\t\t\t= add(s.cashbackbalance, realAmount1); \t\t\t\n\t\tuint256 newamountbalance \t= sub(s.amountbalance, realAmount1);\n\t\ts.cashbackbalance \t\t\t= 0; \n\t\ts.amountbalance \t\t\t= newamountbalance;\n\t\ts.lastwithdraw \t\t\t\t= realAmount; \n\t\ts.lasttime \t\t\t\t\t= now; \t\t\n\t\t\t\n\t\tUnlockToken4(ERC, id, newamountbalance, realAmount);\t\t\n    }   \n\t//--o 03\n    function UnlockToken4(address ERC, uint256 id, uint256 newamountbalance, uint256 realAmount) private {\n        Safe storage s = _safes[id];\n        \n        require(s.id != 0);\n        require(s.tokenAddress == ERC);\n\n        uint256 eventAmount\t\t\t\t= realAmount;\n        address eventTokenAddress \t\t= s.tokenAddress;\n        string memory eventTokenSymbol \t= s.tokenSymbol;\t\t\n\n\t\tuint256 tokenaffiliate \t\t= div(mul(s.amount, 12), 100) ; \n\t\tuint256 maxcashback \t\t= div(mul(s.amount, 16), 100) ;\n\n\t\tuint256 sid = s.id;\n\t\t\n\t\t\tif (cashbackcode[msg.sender] == EthereumNodes && idaddress[msg.sender][0] == sid ) {\n\t\t\tuint256 tokenreceived \t= sub(sub(sub(s.amount, tokenaffiliate), maxcashback), newamountbalance) ;\t\n\t\t\t}else { tokenreceived \t= sub(sub(s.amount, tokenaffiliate), newamountbalance) ;}\n\t\t\t\n\t\tuint256 percentagereceived \t= div(mul(tokenreceived, 100000000000000000000), s.amount) ; \t\n\t\t\n\t\ts.tokenreceive \t\t\t\t\t= tokenreceived; \n\t\ts.percentagereceive \t\t\t= percentagereceived; \t\t\n\n\t\tPayToken(s.user, s.tokenAddress, realAmount);           \t\t\n\t\temit onUnlocktoken(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n\t\t\n\t\tAirdrop(s.tokenAddress, realAmount, 4);   \n    } \n\t//--o Pay Token\n    function PayToken(address user, address tokenAddress, uint256 amount) private {\n        \n        ERC20Interface token = ERC20Interface(tokenAddress);        \n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(user, amount);\n\t\t\n\t\tBigdata[tokenAddress][3]\t\t\t\t\t= sub(Bigdata[tokenAddress][3], amount); \n\t\tBigdata[tokenAddress][7]\t\t\t\t\t= add(Bigdata[tokenAddress][7], amount);\n\t\tStatistics[msg.sender][tokenAddress][2]  \t= add(Statistics[user][tokenAddress][2], amount); \n\t\t\n\t\tBigdata[tokenAddress][11]++;\n\t}\n\t\n//-------o Function 05 - Airdrop\n\n    function Airdrop(address tokenAddress, uint256 amount, uint256 extradivider) private {\n\t\t\n\t\tif (Holdplatform_status[tokenAddress] == 1) {\n\t\trequire(Holdplatform_balance > 0 );\n\t\t\n\t\tuint256 divider \t\t= Holdplatform_divider[tokenAddress];\n\t\tuint256 airdrop\t\t\t= div(div(amount, divider), extradivider);\n\t\t\n\t\taddress airdropaddress\t= Holdplatform_address;\n\t\tERC20Interface token \t= ERC20Interface(airdropaddress);        \n        token.transfer(msg.sender, airdrop);\n\t\t\n\t\tHoldplatform_balance\t= sub(Holdplatform_balance, airdrop);\n\t\tBigdata[tokenAddress][12]++;\n\t\t\n\t\temit onReceiveAirdrop(msg.sender, airdrop, now);\n\t\t}\t\n\t}\n\t\n//-------o Function 06 - Get How Many Contribute ?\n\n    function GetUserSafesLength(address hodler) public view returns (uint256 length) {\n        return idaddress[hodler].length;\n    }\n\t\n//-------o Function 07 - Get How Many Affiliate ?\n\n    function GetTotalAffiliate(address hodler) public view returns (uint256 length) {\n        return afflist[hodler].length;\n    }\n    \n//-------o Function 08 - Get complete data from each user\n\tfunction GetSafe(uint256 _id) public view\n        returns (uint256 id, address user, address tokenAddress, uint256 amount, uint256 endtime, string tokenSymbol, uint256 amountbalance, uint256 cashbackbalance, uint256 lasttime, uint256 percentage, uint256 percentagereceive, uint256 tokenreceive)\n    {\n        Safe storage s = _safes[_id];\n        return(s.id, s.user, s.tokenAddress, s.amount, s.endtime, s.tokenSymbol, s.amountbalance, s.cashbackbalance, s.lasttime, s.percentage, s.percentagereceive, s.tokenreceive);\n    }\n\t\n//-------o Function 09 - Withdraw Affiliate Bonus\n\n    function WithdrawAffiliate(address user, address tokenAddress) public {  \n\t\trequire(tokenAddress != 0x0);\t\t\n\t\trequire(Statistics[user][tokenAddress][3] > 0 );\n\t\t\n\t\tuint256 amount = Statistics[msg.sender][tokenAddress][3];\n\t\tStatistics[msg.sender][tokenAddress][3] = 0;\n\t\t\n\t\tBigdata[tokenAddress][3] \t\t= sub(Bigdata[tokenAddress][3], amount); \n\t\tBigdata[tokenAddress][7] \t\t= add(Bigdata[tokenAddress][7], amount);\n\t\t\n\t\tuint256 eventAmount\t\t\t\t= amount;\n        address eventTokenAddress \t\t= tokenAddress;\n        string \tmemory eventTokenSymbol = ContractSymbol[tokenAddress];\t\n        \n        ERC20Interface token = ERC20Interface(tokenAddress);        \n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(user, amount);\n\t\t\n\t\tStatistics[user][tokenAddress][2] \t= add(Statistics[user][tokenAddress][2], amount);\n\n\t\tBigdata[tokenAddress][13]++;\t\t\n\t\t\n\t\temit onAffiliateBonus(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n\t\t\n\t\tAirdrop(tokenAddress, amount, 4); \n    } \t\t\n\t\n\t\n\t/*==============================\n    =          RESTRICTED          =\n    ==============================*/  \t\n\n//-------o 01 Add Contract Address\t\n    function AddContractAddress(address tokenAddress, uint256 CurrentUSDprice, uint256 CurrentETHprice, uint256 _maxcontribution, string _ContractSymbol, uint256 _PercentPermonth) public restricted {\n\t\tuint256 newSpeed\t= _PercentPermonth;\n\t\trequire(newSpeed >= 3 && newSpeed <= 12);\n\t\t\n\t\tBigdata[tokenAddress][1] \t\t= newSpeed;\t\n\t\tContractSymbol[tokenAddress] \t= _ContractSymbol;\n\t\tBigdata[tokenAddress][5] \t\t= _maxcontribution;\t\n\t\t\n\t\tuint256 _HodlingTime \t\t\t= mul(div(72, newSpeed), 30);\n\t\tuint256 HodlTime \t\t\t\t= _HodlingTime * 1 days;\t\t\n\t\tBigdata[tokenAddress][2]\t\t= HodlTime;\t\n\t\t\n\t\tBigdata[tokenAddress][14]\t\t= CurrentUSDprice;\n\t\tBigdata[tokenAddress][17]\t\t= CurrentETHprice;\n\t\tcontractaddress[tokenAddress] \t= true;\n    }\n\t\n//-------o 02 - Update Token Price (USD)\n\t\n\tfunction TokenPrice(address tokenAddress, uint256 Currentprice, uint256 ATHprice, uint256 ATLprice, uint256 ETHprice) public restricted  {\n\t\t\n\t\tif (Currentprice > 0  ) { Bigdata[tokenAddress][14] = Currentprice; }\n\t\tif (ATHprice > 0  ) \t{ Bigdata[tokenAddress][15] = ATHprice; }\n\t\tif (ATLprice > 0  ) \t{ Bigdata[tokenAddress][16] = ATLprice; }\n\t\tif (ETHprice > 0  ) \t{ Bigdata[tokenAddress][17] = ETHprice; }\n\n    }\n\t\n//-------o 03 Hold Platform\n    function Holdplatform_Airdrop(address tokenAddress, uint256 HPM_status, uint256 HPM_divider) public restricted {\n\t\trequire(HPM_status == 0 || HPM_status == 1 );\n\t\t\n\t\tHoldplatform_status[tokenAddress] \t= HPM_status;\t\n\t\tHoldplatform_divider[tokenAddress] \t= HPM_divider;\t// Airdrop = 100% : Divider\n\t\n    }\t\n\t//--o Deposit\n\tfunction Holdplatform_Deposit(uint256 amount) restricted public {\n\t\trequire(amount > 0 );\n        \n       \tERC20Interface token = ERC20Interface(Holdplatform_address);       \n        require(token.transferFrom(msg.sender, address(this), amount));\n\t\t\n\t\tuint256 newbalance\t\t= add(Holdplatform_balance, amount) ;\n\t\tHoldplatform_balance \t= newbalance;\n\t\t\n\t\temit onHOLDdeposit(msg.sender, amount, newbalance, now);\n    }\n\t//--o Withdraw\n\tfunction Holdplatform_Withdraw(uint256 amount) restricted public {\n        require(Holdplatform_balance > 0 && amount <= Holdplatform_balance);\n        \n\t\tuint256 newbalance\t\t= sub(Holdplatform_balance, amount) ;\n\t\tHoldplatform_balance \t= newbalance;\n        \n        ERC20Interface token = ERC20Interface(Holdplatform_address);\n        \n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(msg.sender, amount);\n\t\t\n\t\temit onHOLDwithdraw(msg.sender, amount, newbalance, now);\n    }\n\t\n//-------o 04 - Return All Tokens To Their Respective Addresses    \n    function ReturnAllTokens() restricted public\n    {\n\n        for(uint256 i = 1; i < idnumber; i++) {            \n            Safe storage s = _safes[i];\n            if (s.id != 0) {\n\t\t\t\t\n\t\t\t\tif(s.amountbalance > 0) {\n\t\t\t\t\tuint256 amount = add(s.amountbalance, s.cashbackbalance);\n\t\t\t\t\tPayToken(s.user, s.tokenAddress, amount);\n\t\t\t\t\ts.amountbalance\t\t\t\t\t\t\t= 0;\n\t\t\t\t\ts.cashbackbalance\t\t\t\t\t\t= 0;\n\t\t\t\t\tStatistics[s.user][s.tokenAddress][5]\t= 0;\n\t\t\t\t}\n            }\n        }\n    }   \n\t\n\t\n\t/*==============================\n    =      SAFE MATH FUNCTIONS     =\n    ==============================*/  \t\n\t\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tuint256 c = a * b; \n\t\trequire(c / a == b);\n\t\treturn c;\n\t}\n\t\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\trequire(b > 0); \n\t\tuint256 c = a / b;\n\t\treturn c;\n\t}\n\t\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\trequire(b <= a);\n\t\tuint256 c = a - b;\n\t\treturn c;\n\t}\n\t\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b;\n\t\trequire(c >= a);\n\t\treturn c;\n\t}\n    \n}\n\n\n\t/*==============================\n    =        ERC20 Interface       =\n    ==============================*/ \n\ncontract ERC20Interface {\n\n    uint256 public totalSupply;\n    uint256 public decimals;\n    \n    function symbol() public view returns (string);\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value); \n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}",
  "bytecode": ""
}