{
  "address": "0x0b564f0ad4dcb35cd43eff2f26bf96b670eabf5e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Withdraw",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-19\n*/\n\npragma solidity ^0.5.7;\n\n/**\n * Copy right (c) Donex UG (haftungsbeschraenkt)\n * All rights reserved\n * Version 0.2.1 (BETA)\n */\n\ncontract Withdraw {\n\n    function amountCreator\n    (\n        bool makerLong,\n        uint256 stakeMemory,\n        uint256 settlementPrice,\n        uint256 strikePrice,\n        uint256 totalStakeCounterparties\n    )\n        public\n        pure\n        returns (uint256)\n    {\n        uint256 profit;\n        // Long wins:\n        if (settlementPrice > strikePrice)\n        {\n            profit = ((settlementPrice * totalStakeCounterparties * 2) / strikePrice) - (totalStakeCounterparties * 2);\n            if (profit > totalStakeCounterparties)\n                profit = totalStakeCounterparties;\n            if (makerLong)\n            {\n                if (profit > (totalStakeCounterparties * 995) / 1000)\n                    profit = (totalStakeCounterparties * 995) / 1000;\n                return stakeMemory + profit;\n            }\n            else\n            {\n                return stakeMemory - profit;\n            }\n        }\n        // Short wins:\n        else\n        {\n            profit = (totalStakeCounterparties * 2) - ((settlementPrice * totalStakeCounterparties * 2) / strikePrice);\n            if (profit > totalStakeCounterparties)\n                profit = totalStakeCounterparties;\n            if (makerLong)\n            {\n                return stakeMemory - profit;\n            }\n            else\n            {\n                if (profit > (totalStakeCounterparties * 995) / 1000)\n                    profit = (totalStakeCounterparties * 995) / 1000;\n                return stakeMemory + profit;\n            }\n        }\n    }\n\n    function amountCounterparty\n    (\n        bool makerLong,\n        uint256 stakeMemory,\n        uint256 settlementPrice,\n        uint256 strikePrice\n    )\n        public\n        pure\n        returns (uint256)\n    {\n        uint256 profit;\n        // Long wins:\n        if (settlementPrice > strikePrice)\n        {\n            profit = ((settlementPrice * stakeMemory * 2) / strikePrice) - (stakeMemory * 2);\n            if (profit > stakeMemory)\n                profit = stakeMemory;\n            if (!makerLong)\n            {\n                return (stakeMemory + profit) - (stakeMemory / 200);\n            }\n            else\n            {\n                if (profit < (stakeMemory * 995) / 1000)\n                {\n                    if ((stakeMemory - profit) - (stakeMemory / 200) > 0)\n                        return (stakeMemory - profit) - (stakeMemory / 200) - 1;  // Compensate possible rounding errors\n                }\n            }\n        }\n        // Short wins:\n        else\n        {\n            profit = (stakeMemory * 2) - ((settlementPrice * stakeMemory * 2) / strikePrice);\n            if (profit > stakeMemory)\n                profit = stakeMemory;\n            if (!makerLong)\n            {\n                if (profit < (stakeMemory * 995) / 1000)\n                {\n                    if ((stakeMemory - profit) - (stakeMemory / 200) > 0)\n                        return (stakeMemory - profit) - (stakeMemory / 200) - 1;  // Compensate possible rounding errors\n                }\n            }\n            else\n            {\n                return (stakeMemory + profit) - (stakeMemory / 200);\n            }\n        }\n        return 0;\n    }\n\n}",
  "bytecode": "608060405234801561001057600080fd5b50610347806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806307e035261461003b57806382094021146100a7575b600080fd5b610091600480360360a081101561005157600080fd5b8101908080351515906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190929190505050610109565b6040518082815260200191505060405180910390f35b6100f3600480360360808110156100bd57600080fd5b810190808035151590602001909291908035906020019092919080359060200190929190803590602001909291905050506101e9565b6040518082815260200191505060405180910390f35b6000808385111561017c5760028302846002858802028161012657fe5b0403905082811115610136578290505b8615610171576103e86103e384028161014b57fe5b04811115610166576103e86103e384028161016257fe5b0490505b8086019150506101e0565b8086039150506101e0565b836002848702028161018a57fe5b04600284020390508281111561019e578290505b86156101af578086039150506101e0565b6103e86103e38402816101be57fe5b048111156101d9576103e86103e38402816101d557fe5b0490505b8086019150505b95945050505050565b600080828411156102805760028502836002878702028161020657fe5b0403905084811115610216578490505b856102325760c8858161022557fe5b0481860103915050610313565b6103e86103e386028161024157fe5b0481101561027b57600060c8868161025557fe5b0482870303111561027a57600160c8868161026c57fe5b048287030303915050610313565b5b61030d565b826002868602028161028e57fe5b0460028602039050848111156102a2578490505b856102f5576103e86103e38602816102b657fe5b048110156102f057600060c886816102ca57fe5b048287030311156102ef57600160c886816102e157fe5b048287030303915050610313565b5b61030c565b60c885816102ff57fe5b0481860103915050610313565b5b60009150505b94935050505056fea165627a7a72305820d4f4e84efb9fb671041ad9b4b0dc6ca7ea455aebb3668f2fa93c235c2bd3e7eb0029"
}