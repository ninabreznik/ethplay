{
  "address": "0xb007eca49763f31edff95623ed6c23c8c1924a16",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ZapCoordinator",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-30\n*/\n\npragma solidity ^0.4.24;\n\n// File: contracts/lib/ownership/Ownable.sol\n\ncontract Ownable {\n    address public owner;\n    event OwnershipTransferred(address indexed previousOwner,address indexed newOwner);\n\n    /// @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\n    constructor() public { owner = msg.sender; }\n\n    /// @dev Throws if called by any contract other than latest designated caller\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /// @dev Allows the current owner to transfer control of the contract to a newOwner.\n    /// @param newOwner The address to transfer ownership to.\n    function transferOwnership(address newOwner) public onlyOwner {\n       require(newOwner != address(0));\n       emit OwnershipTransferred(owner, newOwner);\n       owner = newOwner;\n    }\n}\n\n// File: contracts/lib/ownership/ZapCoordinatorInterface.sol\n\ncontract ZapCoordinatorInterface is Ownable {\n\tfunction addImmutableContract(string contractName, address newAddress) external;\n\tfunction updateContract(string contractName, address newAddress) external;\n\tfunction getContractName(uint index) public view returns (string);\n\tfunction getContract(string contractName) public view returns (address);\n\tfunction updateAllDependencies() external;\n}\n\n// File: contracts/lib/ownership/Upgradable.sol\n\npragma solidity ^0.4.24;\n\ncontract Upgradable {\n\n\taddress coordinatorAddr;\n\tZapCoordinatorInterface coordinator;\n\n\tconstructor(address c) public{\n\t\tcoordinatorAddr = c;\n\t\tcoordinator = ZapCoordinatorInterface(c);\n\t}\n\n    function updateDependencies() external coordinatorOnly {\n       _updateDependencies();\n    }\n\n    function _updateDependencies() internal;\n\n    modifier coordinatorOnly() {\n    \trequire(msg.sender == coordinatorAddr, \"Error: Coordinator Only Function\");\n    \t_;\n    }\n}\n\n// File: contracts/platform/database/DatabaseInterface.sol\n\ncontract DatabaseInterface is Ownable {\n\tfunction setStorageContract(address _storageContract, bool _allowed) public;\n\t/*** Bytes32 ***/\n\tfunction getBytes32(bytes32 key) external view returns(bytes32);\n\tfunction setBytes32(bytes32 key, bytes32 value) external;\n\t/*** Number **/\n\tfunction getNumber(bytes32 key) external view returns(uint256);\n\tfunction setNumber(bytes32 key, uint256 value) external;\n\t/*** Bytes ***/\n\tfunction getBytes(bytes32 key) external view returns(bytes);\n\tfunction setBytes(bytes32 key, bytes value) external;\n\t/*** String ***/\n\tfunction getString(bytes32 key) external view returns(string);\n\tfunction setString(bytes32 key, string value) external;\n\t/*** Bytes Array ***/\n\tfunction getBytesArray(bytes32 key) external view returns (bytes32[]);\n\tfunction getBytesArrayIndex(bytes32 key, uint256 index) external view returns (bytes32);\n\tfunction getBytesArrayLength(bytes32 key) external view returns (uint256);\n\tfunction pushBytesArray(bytes32 key, bytes32 value) external;\n\tfunction setBytesArrayIndex(bytes32 key, uint256 index, bytes32 value) external;\n\tfunction setBytesArray(bytes32 key, bytes32[] value) external;\n\t/*** Int Array ***/\n\tfunction getIntArray(bytes32 key) external view returns (int[]);\n\tfunction getIntArrayIndex(bytes32 key, uint256 index) external view returns (int);\n\tfunction getIntArrayLength(bytes32 key) external view returns (uint256);\n\tfunction pushIntArray(bytes32 key, int value) external;\n\tfunction setIntArrayIndex(bytes32 key, uint256 index, int value) external;\n\tfunction setIntArray(bytes32 key, int[] value) external;\n\t/*** Address Array ***/\n\tfunction getAddressArray(bytes32 key) external view returns (address[]);\n\tfunction getAddressArrayIndex(bytes32 key, uint256 index) external view returns (address);\n\tfunction getAddressArrayLength(bytes32 key) external view returns (uint256);\n\tfunction pushAddressArray(bytes32 key, address value) external;\n\tfunction setAddressArrayIndex(bytes32 key, uint256 index, address value) external;\n\tfunction setAddressArray(bytes32 key, address[] value) external;\n}\n\n// File: contracts/lib/ownership/ZapCoordinator.sol\n\ncontract ZapCoordinator is Ownable, ZapCoordinatorInterface {\n\n\tevent UpdatedContract(string name, address previousAddr, address newAddr);\n\tevent UpdatedDependencies(uint timestamp, string contractName, address contractAddr);\n\n\tmapping(string => address) contracts; \n\n\t// names of upgradable contracts\n\tstring[] public loadedContracts;\n\n\tDatabaseInterface public db;\n\n\t// used for adding contracts like Database and ZapToken\n\tfunction addImmutableContract(string contractName, address newAddress) external onlyOwner {\n\t\tassert(contracts[contractName] == address(0));\n\t\tcontracts[contractName] = newAddress;\n\n\t\t// Create DB object when Database is added to Coordinator\n\t\tbytes32 hash = keccak256(abi.encodePacked(contractName));\n\t\tif(hash == keccak256(abi.encodePacked(\"DATABASE\"))) db = DatabaseInterface(newAddress);\n\t}\n\n\t// used for modifying an existing contract or adding a new contract to the system\n\tfunction updateContract(string contractName, address newAddress) external onlyOwner {\n\t\taddress prev = contracts[contractName];\n\t\tif (prev == address(0) ) {\n\t\t\t// First time adding this contract\n\t\t\tloadedContracts.push(contractName);\n\t\t} else {\n\t\t\t// Deauth the old contract\n\t\t\tdb.setStorageContract(prev, false);\n\t\t}\n\t\t// give new contract database access permission\n\t\tdb.setStorageContract(newAddress, true);\n\n\t\temit UpdatedContract(contractName, prev, newAddress);\n\t\tcontracts[contractName] = newAddress;\n\t}\n\n\tfunction getContractName(uint index) public view returns (string) {\n\t\treturn loadedContracts[index];\n\t}\n\n\tfunction getContract(string contractName) public view returns (address) {\n\t\treturn contracts[contractName];\n\t}\n\n\tfunction updateAllDependencies() external onlyOwner {\n\t\tfor ( uint i = 0; i < loadedContracts.length; i++ ) {\n\t\t\taddress c = contracts[loadedContracts[i]];\n\t\t\tUpgradable(c).updateDependencies();\n\t\t\temit UpdatedDependencies(block.timestamp, loadedContracts[i], c);\n\t\t}\n\t}\n\n}",
  "bytecode": "6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061124e806100536000396000f300608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806321d8ad4c1461009e5780632944363f1461014457806329e63cd71461015b57806335817773146101b65780634d655aff1461025f578063697a60b3146102b65780638da5cb5b14610311578063ca8e2bdd14610368578063f2fde38b1461040e575b600080fd5b3480156100aa57600080fd5b506100c960048036038101908080359060200190929190505050610451565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101095780820151818401526020810190506100ee565b50505050905090810190601f1680156101365780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015057600080fd5b5061015961050c565b005b34801561016757600080fd5b506101b4600480360381019080803590602001908201803590602001919091929391929390803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107c2565b005b3480156101c257600080fd5b5061021d600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610a84565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561026b57600080fd5b50610274610b19565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102c257600080fd5b5061030f600480360381019080803590602001908201803590602001919091929391929390803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b3f565b005b34801561031d57600080fd5b50610326610f48565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561037457600080fd5b5061039360048036038101908080359060200190929190505050610f6d565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103d35780820151818401526020810190506103b8565b50505050905090810190601f1680156104005780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561041a57600080fd5b5061044f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611028565b005b606060028281548110151561046257fe5b906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105005780601f106104d557610100808354040283529160200191610500565b820191906000526020600020905b8154815290600101906020018083116104e357829003601f168201915b50505050509050919050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561056a57600080fd5b600091505b6002805490508210156107be57600160028381548110151561058d57fe5b9060005260206000200160405180828054600181600116156101000203166002900480156105f25780601f106105d05761010080835404028352918201916105f2565b820191906000526020600020905b8154815290600101906020018083116105de575b5050915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636e5ecdff6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801561068c57600080fd5b505af11580156106a0573d6000803e3d6000fd5b505050507ff16f69d181cb9b84ef2392d232ea0726dcf57689ccb091c7ff89e8b913148062426002848154811015156106d557fe5b906000526020600020018360405180848152602001806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281038252848181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156107a15780601f10610776576101008083540402835291602001916107a1565b820191906000526020600020905b81548152906001019060200180831161078457829003601f168201915b505094505050505060405180910390a1818060010192505061056f565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561081f57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166001858560405180838380828437820191505092505050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561089c57fe5b816001858560405180838380828437820191505092505050908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508383604051602001808383808284378201915050925050506040516020818303038152906040526040518082805190602001908083835b60208310151561095c5780518252602082019150602081019050602083039250610937565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020905060405160200180807f444154414241534500000000000000000000000000000000000000000000000081525060080190506040516020818303038152906040526040518082805190602001908083835b602083101515610a0057805182526020820191506020810190506020830392506109db565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191681600019161415610a7e5781600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50505050565b60006001826040518082805190602001908083835b602083101515610abe5780518252602082019150602081019050602083039250610a99565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b9c57600080fd5b6001848460405180838380828437820191505092505050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c60576002848490918060018154018082558091505090600182039060005260206000200160009091929390919293909192909192509190610c5992919061117d565b5050610d43565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a42b6bf18260006040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018215151515815260200192505050600060405180830381600087803b158015610d2a57600080fd5b505af1158015610d3e573d6000803e3d6000fd5b505050505b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a42b6bf18360016040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018215151515815260200192505050600060405180830381600087803b158015610e0d57600080fd5b505af1158015610e21573d6000803e3d6000fd5b505050507f1051b92bbfac380879e24c0529d529db8a2eec4e2f07c580112ebe1fd066c3c58484838560405180806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825286868281815260200192508082843782019150509550505050505060405180910390a1816001858560405180838380828437820191505092505050908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600281815481101515610f7c57fe5b906000526020600020016000915090508054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110205780601f10610ff557610100808354040283529160200191611020565b820191906000526020600020905b81548152906001019060200180831161100357829003601f168201915b505050505081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561108357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156110bf57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106111be57803560ff19168380011785556111ec565b828001600101855582156111ec579182015b828111156111eb5782358255916020019190600101906111d0565b5b5090506111f991906111fd565b5090565b61121f91905b8082111561121b576000816000905550600101611203565b5090565b905600a165627a7a723058203ff1b180fbb3db27d1828fdbef07edb950a2dae65450ff8fc5793418414ac2c10029"
}