{
  "address": "0xe97b5fd7056d38c85c5f6924461f7055588a53d9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Clans",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-05\n*/\n\npragma solidity ^0.4.25;\n\n/**\n * \n * World War Goo - Competitive Idle Game\n * \n * https://ethergoo.io\n * \n */\n \n \ninterface ERC721 {\n    function totalSupply() external view returns (uint256 tokens);\n    function balanceOf(address owner) external view returns (uint256 balance);\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n    function exists(uint256 tokenId) external view returns (bool tokenExists);\n    function approve(address to, uint256 tokenId) external;\n    function getApproved(uint256 tokenId) external view returns (address approvee);\n\n    function transferFrom(address from, address to, uint256 tokenId) external;\n    function tokensOf(address owner) external view returns (uint256[] tokens);\n    //function tokenByIndex(uint256 index) external view returns (uint256 token);\n\n    // Events\n    event Transfer(address from, address to, uint256 tokenId);\n    event Approval(address owner, address approved, uint256 tokenId);\n}\n\ninterface ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) external;\n}\n\n\ncontract Clans is ERC721, ApproveAndCallFallBack {\n    using SafeMath for uint256;\n\n    GooToken constant goo = GooToken(0xdf0960778c6e6597f197ed9a25f12f5d971da86c);\n    Army constant army = Army(0x98278eb74b388efd4d6fc81dd3f95b642ce53f2b);\n    WWGClanCoupons constant clanCoupons = WWGClanCoupons(0xe9fe4e530ebae235877289bd978f207ae0c8bb25); // For minting clans to initial owners (prelaunch buyers)\n\n    string public constant name = \"Goo Clan\";\n    string public constant symbol = \"GOOCLAN\";\n    uint224 numClans;\n    address owner; // Minor management\n\n    // ERC721 stuff\n    mapping (uint256 => address) public tokenOwner;\n    mapping (uint256 => address) public tokenApprovals;\n    mapping (address => uint256[]) public ownedTokens;\n    mapping(uint256 => uint256) public ownedTokensIndex;\n\n    mapping(address => UserClan) public userClan;\n    mapping(uint256 => uint224) public clanFee;\n    mapping(uint256 => uint224) public leaderFee;\n    mapping(uint256 => uint256) public clanMembers;\n    mapping(uint256 => mapping(uint256 => uint224)) public clanUpgradesOwned;\n    mapping(uint256 => uint256) public clanGoo;\n    mapping(uint256 => address) public clanToken; // i.e. BNB\n    mapping(uint256 => uint256) public baseTokenDenomination; // base value for token gains i.e. 0.000001 BNB\n    mapping(uint256 => uint256) public clanTotalArmyPower;\n\n    mapping(uint256 => uint224) public referalFee; // If invited to a clan how much % of player's divs go to referer\n    mapping(address => mapping(uint256 => address)) public clanReferer; // Address of who invited player to each clan\n\n    mapping(uint256 => Upgrade) public upgradeList;\n    mapping(address => bool) operator;\n\n    struct UserClan {\n        uint224 clanId;\n        uint32 clanJoinTime;\n    }\n\n    struct Upgrade {\n        uint256 upgradeId;\n        uint224 gooCost;\n        uint224 upgradeGain;\n        uint256 upgradeClass;\n        uint256 prerequisiteUpgrade;\n    }\n\n    // Events\n    event JoinedClan(uint256 clanId, address player, address referer);\n    event LeftClan(uint256 clanId, address player);\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function setOperator(address gameContract, bool isOperator) external {\n        require(msg.sender == owner);\n        operator[gameContract] = isOperator;\n    }\n\n    function totalSupply() external view returns (uint256) {\n        return numClans;\n    }\n\n    function balanceOf(address player) public view returns (uint256) {\n        return ownedTokens[player].length;\n    }\n\n    function ownerOf(uint256 clanId) external view returns (address) {\n        return tokenOwner[clanId];\n    }\n\n    function exists(uint256 clanId) public view returns (bool) {\n        return tokenOwner[clanId] != address(0);\n    }\n\n    function approve(address to, uint256 clanId) external {\n        require(tokenOwner[clanId] == msg.sender);\n        tokenApprovals[clanId] = to;\n        emit Approval(msg.sender, to, clanId);\n    }\n\n    function getApproved(uint256 clanId) external view returns (address) {\n        return tokenApprovals[clanId];\n    }\n\n    function tokensOf(address player) external view returns (uint256[] tokens) {\n         return ownedTokens[player];\n    }\n\n    function transferFrom(address from, address to, uint256 tokenId) public {\n        require(tokenApprovals[tokenId] == msg.sender || tokenOwner[tokenId] == msg.sender);\n\n        joinClanPlayer(to, uint224(tokenId), 0); // uint224 won't overflow due to tokenOwner check in removeTokenFrom()\n        removeTokenFrom(from, tokenId);\n        addTokenTo(to, tokenId);\n\n        delete tokenApprovals[tokenId]; // Clear approval\n        emit Transfer(from, to, tokenId);\n    }\n\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public {\n        transferFrom(from, to, tokenId);\n        checkERC721Recieved(from, to, tokenId, data);\n    }\n\n    function checkERC721Recieved(address from, address to, uint256 tokenId, bytes memory data) internal {\n        uint256 size;\n        assembly { size := extcodesize(to) }\n        if (size > 0) { // Recipient is contract so must confirm recipt\n            bytes4 successfullyRecieved = ERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, data);\n            require(successfullyRecieved == bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\")));\n        }\n    }\n\n    function removeTokenFrom(address from, uint256 tokenId) internal {\n        require(tokenOwner[tokenId] == from);\n        tokenOwner[tokenId] = address(0);\n\n        uint256 tokenIndex = ownedTokensIndex[tokenId];\n        uint256 lastTokenIndex = ownedTokens[from].length.sub(1);\n        uint256 lastToken = ownedTokens[from][lastTokenIndex];\n\n        ownedTokens[from][tokenIndex] = lastToken;\n        ownedTokens[from][lastTokenIndex] = 0;\n\n        ownedTokens[from].length--;\n        ownedTokensIndex[tokenId] = 0;\n        ownedTokensIndex[lastToken] = tokenIndex;\n    }\n\n    function addTokenTo(address to, uint256 tokenId) internal {\n        require(ownedTokens[to].length == 0); // Can't own multiple clans\n        tokenOwner[tokenId] = to;\n        ownedTokensIndex[tokenId] = ownedTokens[to].length;\n        ownedTokens[to].push(tokenId);\n    }\n\n    function updateClanFees(uint224 newClanFee, uint224 newLeaderFee, uint224 newReferalFee, uint256 clanId) external {\n        require(msg.sender == tokenOwner[clanId]);\n        require(newClanFee <= 25); // 25% max fee\n        require(newReferalFee <= 10); // 10% max refs\n        require(newLeaderFee <= newClanFee); // Clan gets fair cut\n        clanFee[clanId] = newClanFee;\n        leaderFee[clanId] = newLeaderFee;\n        referalFee[clanId] = newReferalFee;\n    }\n\n    function getPlayerFees(address player) external view returns (uint224 clansFee, uint224 leadersFee, address leader, uint224 referalsFee, address referer) {\n        uint256 usersClan = userClan[player].clanId;\n        clansFee = clanFee[usersClan];\n        leadersFee = leaderFee[usersClan];\n        leader = tokenOwner[usersClan];\n        referalsFee = referalFee[usersClan];\n        referer = clanReferer[player][usersClan];\n    }\n\n    function getPlayersClanUpgrade(address player, uint256 upgradeClass) external view returns (uint224 upgradeGain) {\n        upgradeGain = upgradeList[clanUpgradesOwned[userClan[player].clanId][upgradeClass]].upgradeGain;\n    }\n\n    function getClanUpgrade(uint256 clanId, uint256 upgradeClass) external view returns (uint224 upgradeGain) {\n        upgradeGain = upgradeList[clanUpgradesOwned[clanId][upgradeClass]].upgradeGain;\n    }\n\n    // Convienence function\n    function getClanDetailsForAttack(address player, address target) external view returns (uint256 clanId, uint256 targetClanId, uint224 playerLootingBonus) {\n        clanId = userClan[player].clanId;\n        targetClanId = userClan[target].clanId;\n        playerLootingBonus = upgradeList[clanUpgradesOwned[clanId][3]].upgradeGain; // class 3 = looting bonus\n    }\n\n    function joinClan(uint224 clanId, address referer) external {\n        require(exists(clanId));\n        joinClanPlayer(msg.sender, clanId, referer);\n    }\n\n    // Allows smarter invites/referals in future\n    function joinClanFromInvite(address player, uint224 clanId, address referer) external {\n        require(operator[msg.sender]);\n        joinClanPlayer(player, clanId, referer);\n    }\n\n    function joinClanPlayer(address player, uint224 clanId, address referer) internal {\n        require(ownedTokens[player].length == 0); // Owners can't join\n\n        (uint80 attack, uint80 defense,) = army.getArmyPower(player);\n\n        // Leave old clan\n        UserClan memory existingClan = userClan[player];\n        if (existingClan.clanId > 0) {\n            clanMembers[existingClan.clanId]--;\n            clanTotalArmyPower[existingClan.clanId] -= (attack + defense);\n            emit LeftClan(existingClan.clanId, player);\n        }\n\n        if (referer != address(0) && referer != player) {\n            require(userClan[referer].clanId == clanId);\n            clanReferer[player][clanId] = referer;\n        }\n\n        existingClan.clanId = clanId;\n        existingClan.clanJoinTime = uint32(now);\n\n        clanMembers[clanId]++;\n        clanTotalArmyPower[clanId] += (attack + defense);\n        userClan[player] = existingClan;\n        emit JoinedClan(clanId, player, referer);\n    }\n\n    function leaveClan() external {\n        require(ownedTokens[msg.sender].length == 0); // Owners can't leave\n\n        UserClan memory usersClan = userClan[msg.sender];\n        require(usersClan.clanId > 0);\n\n        (uint80 attack, uint80 defense,) = army.getArmyPower(msg.sender);\n        clanTotalArmyPower[usersClan.clanId] -= (attack + defense);\n\n        clanMembers[usersClan.clanId]--;\n        delete userClan[msg.sender];\n        emit LeftClan(usersClan.clanId, msg.sender);\n\n        // Cannot leave if player has unclaimed divs (edge case for clan fee abuse)\n        require(attack + defense == 0 || army.lastWarFundClaim(msg.sender) == army.getSnapshotDay());\n        require(usersClan.clanJoinTime + 24 hours < now);\n    }\n\n    function mintClan(address recipient, uint224 referalPercent, address clanTokenAddress, uint256 baseTokenReward) external {\n        require(operator[msg.sender]);\n        require(ERC20(clanTokenAddress).totalSupply() > 0);\n\n        numClans++;\n        uint224 clanId = numClans; // Starts from clanId 1\n\n        // Add recipient to clan\n        joinClanPlayer(recipient, clanId, 0);\n\n        require(tokenOwner[clanId] == address(0));\n        addTokenTo(recipient, clanId);\n        emit Transfer(address(0), recipient, clanId);\n\n        // Store clan token\n        clanToken[clanId] = clanTokenAddress;\n        baseTokenDenomination[clanId] = baseTokenReward;\n        referalFee[clanId] = referalPercent;\n\n        // Burn clan coupons from owner (prelaunch event)\n        if (clanCoupons.totalSupply() > 0) {\n            clanCoupons.burnCoupon(recipient, clanId);\n        }\n    }\n\n    function addUpgrade(uint256 id, uint224 gooCost, uint224 upgradeGain, uint256 upgradeClass, uint256 prereq) external {\n        require(operator[msg.sender]);\n        upgradeList[id] = Upgrade(id, gooCost, upgradeGain, upgradeClass, prereq);\n    }\n\n    // Incase an existing token becomes invalid (i.e. migrates away)\n    function updateClanToken(uint256 clanId, address newClanToken, bool shouldRetrieveOldTokens) external {\n        require(msg.sender == owner);\n        require(ERC20(newClanToken).totalSupply() > 0);\n\n        if (shouldRetrieveOldTokens) {\n            ERC20(clanToken[clanId]).transferFrom(this, owner, ERC20(clanToken[clanId]).balanceOf(this));\n        }\n\n        clanToken[clanId] = newClanToken;\n    }\n\n    // Incase need to tweak/balance attacking rewards (i.e. token moons so not viable to restock at current level)\n    function updateClanTokenGain(uint256 clanId, uint256 baseTokenReward) external {\n        require(msg.sender == owner);\n        baseTokenDenomination[clanId] = baseTokenReward;\n    }\n\n\n    // Clan member goo deposits\n    function receiveApproval(address player, uint256 amount, address, bytes) external {\n        uint256 clanId = userClan[player].clanId;\n        require(exists(clanId));\n        require(msg.sender == address(goo));\n\n        ERC20(msg.sender).transferFrom(player, address(0), amount);\n        clanGoo[clanId] += amount;\n    }\n\n    function buyUpgrade(uint224 upgradeId) external {\n        uint256 clanId = userClan[msg.sender].clanId;\n        require(msg.sender == tokenOwner[clanId]);\n\n        Upgrade memory upgrade = upgradeList[upgradeId];\n        require (upgrade.upgradeId > 0); // Valid upgrade\n\n        uint256 upgradeClass = upgrade.upgradeClass;\n        uint256 latestOwned = clanUpgradesOwned[clanId][upgradeClass];\n        require(latestOwned < upgradeId); // Haven't already purchased\n        require(latestOwned >= upgrade.prerequisiteUpgrade); // Own prequisite\n\n        // Clan discount\n        uint224 upgradeDiscount = clanUpgradesOwned[clanId][0]; // class 0 = upgrade discount\n        uint224 reducedUpgradeCost = upgrade.gooCost - ((upgrade.gooCost * upgradeDiscount) / 100);\n\n        clanGoo[clanId] = clanGoo[clanId].sub(reducedUpgradeCost);\n        army.depositSpentGoo(reducedUpgradeCost); // Transfer to goo bankroll\n\n        clanUpgradesOwned[clanId][upgradeClass] = upgradeId;\n    }\n\n    // Goo from divs etc.\n    function depositGoo(uint256 amount, uint256 clanId) external {\n        require(operator[msg.sender]);\n        require(exists(clanId));\n        clanGoo[clanId] += amount;\n    }\n\n\n    function increaseClanPower(address player, uint256 amount) external {\n        require(operator[msg.sender]);\n\n        uint256 clanId = userClan[player].clanId;\n        if (clanId > 0) {\n            clanTotalArmyPower[clanId] += amount;\n        }\n    }\n\n    function decreaseClanPower(address player, uint256 amount) external {\n        require(operator[msg.sender]);\n\n        uint256 clanId = userClan[player].clanId;\n        if (clanId > 0) {\n            clanTotalArmyPower[clanId] -= amount;\n        }\n    }\n\n\n    function stealGoo(address attacker, uint256 playerClanId, uint256 enemyClanId, uint80 lootingPower) external returns(uint256) {\n        require(operator[msg.sender]);\n\n        uint224 enemyGoo = uint224(clanGoo[enemyClanId]);\n        uint224 enemyGooStolen = (lootingPower > enemyGoo) ? enemyGoo : lootingPower;\n\n        clanGoo[enemyClanId] = clanGoo[enemyClanId].sub(enemyGooStolen);\n\n        uint224 clansShare = (enemyGooStolen * clanFee[playerClanId]) / 100;\n        uint224 referersFee = referalFee[playerClanId];\n        address referer = clanReferer[attacker][playerClanId];\n\n        if (clansShare > 0 || (referersFee > 0 && referer != address(0))) {\n            uint224 leaderShare = (enemyGooStolen * leaderFee[playerClanId]) / 100;\n\n            uint224 refsShare;\n            if (referer != address(0)) {\n                refsShare = (enemyGooStolen * referersFee) / 100;\n                goo.mintGoo(refsShare, referer);\n            }\n\n            clanGoo[playerClanId] += clansShare;\n            goo.mintGoo(leaderShare, tokenOwner[playerClanId]);\n            goo.mintGoo(enemyGooStolen - (clansShare + leaderShare + refsShare), attacker);\n        } else {\n            goo.mintGoo(enemyGooStolen, attacker);\n        }\n        return enemyGooStolen;\n    }\n\n\n    function rewardTokens(address attacker, uint256 playerClanId, uint80 lootingPower) external returns(uint256) {\n        require(operator[msg.sender]);\n\n        uint256 amount = baseTokenDenomination[playerClanId] * lootingPower;\n        ERC20(clanToken[playerClanId]).transfer(attacker, amount);\n        return amount;\n\n    }\n\n    // Daily clan dividends\n    function mintGoo(address player, uint256 amount) external {\n        require(operator[msg.sender]);\n        clanGoo[userClan[player].clanId] += amount;\n    }\n\n}\n\ncontract ERC20 {\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\n    function transfer(address to, uint tokens) external returns (bool success);\n    function totalSupply() external constant returns (uint);\n    function balanceOf(address tokenOwner) external constant returns (uint balance);\n}\n\ncontract GooToken {\n    function mintGoo(uint224 amount, address player) external;\n    function updatePlayersGooFromPurchase(address player, uint224 purchaseCost) external;\n}\n\ncontract Army {\n    mapping(address => uint256) public lastWarFundClaim; // Days (snapshot number)\n    function depositSpentGoo(uint224 amount) external;\n    function getArmyPower(address player) external view returns (uint80, uint80, uint80);\n    function getSnapshotDay() external view returns (uint256 snapshot);\n}\n\ncontract WWGClanCoupons {\n    function totalSupply() external view returns (uint256);\n    function burnCoupon(address clanOwner, uint256 tokenId) external;\n}\n\ncontract ERC721Receiver {\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes data) external returns(bytes4);\n}\n\n\n\n\n\n\n\n\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}",
  "bytecode": ""
}