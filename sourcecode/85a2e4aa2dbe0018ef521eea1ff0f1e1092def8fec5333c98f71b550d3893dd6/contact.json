{
  "address": "0x08c8fd266ff2afa795489ffe251a66980bc5220d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LikerCashCoin",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-12\n*/\n\npragma solidity ^0.4.18;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    \n    function Ownable() public {\n        owner = msg.sender;\n    }\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    function pause() onlyOwner whenNotPaused public {\n        paused = true;\n        Pause();\n    }\n\n    function unpause() onlyOwner whenPaused public {\n        paused = false;\n        Unpause();\n    }\n}\n\ncontract ERC20 {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract Token is ERC20, Pausable {\n\n    struct sUserInfo {\n        uint256 balance;\n        bool lock;\n        mapping(address => uint256) allowed;\n    }\n    \n    using SafeMath for uint256;\n\n    string public name;\n    string public symbol;\n    uint256 public decimals;\n    uint256 public totalSupply;\n\n    bool public restoreFinished = false;\n\n    mapping(address => sUserInfo) user;\n\n    event Mint(uint256 value);\n    event Burn(uint256 value);\n    event RestoreFinished();\n    \n    modifier canRestore() {\n        require(!restoreFinished);\n        _;\n    }\n    \n    function () public payable {\n        revert();\n    }\n    \n    function validTransfer(address _from, address _to, uint256 _value, bool _lockCheck) internal {\n        require(_to != address(this));\n        require(_to != address(0));\n        require(user[_from].balance >= _value);\n        if(_lockCheck) {\n            require(user[_from].lock == false);\n        }\n    }\n\n    function lock(address _owner) public onlyOwner returns (bool) {\n        require(user[_owner].lock == false);\n        user[_owner].lock = true;\n        return true;\n    }\n    function unlock(address _owner) public onlyOwner returns (bool) {\n        require(user[_owner].lock == true);\n        user[_owner].lock = false;\n       return true;\n    }\n \n    function burn(address _to, uint256 _value) public onlyOwner returns (bool) {\n        require(_value <= user[_to].balance);\n        user[_to].balance = user[_to].balance.sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Burn(_value);\n        return true;\n    }\n   \n    function distribute(address _to, uint256 _value) public onlyOwner returns (bool) {\n        validTransfer(msg.sender, _to, _value, false);\n       \n        user[msg.sender].balance = user[msg.sender].balance.sub(_value);\n        user[_to].balance = user[_to].balance.add(_value);\n       \n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n        require(_value > 0);\n        user[msg.sender].allowed[_spender] = _value; \n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n        validTransfer(_from, _to, _value, true);\n        require(_value <=  user[_from].allowed[msg.sender]);\n\n        user[_from].balance = user[_from].balance.sub(_value);\n        user[_to].balance = user[_to].balance.add(_value);\n\n        user[_from].allowed[msg.sender] = user[_from].allowed[msg.sender].sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n    \n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n        validTransfer(msg.sender, _to, _value, true);\n\n        user[msg.sender].balance = user[msg.sender].balance.sub(_value);\n        user[_to].balance = user[_to].balance.add(_value);\n\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n    \n    function transferRestore(address _from, address _to, uint256 _value) public onlyOwner canRestore returns (bool) {\n        validTransfer(_from, _to, _value, false);\n       \n        user[_from].balance = user[_from].balance.sub(_value);\n        user[_to].balance = user[_to].balance.add(_value);\n       \n        Transfer(_from, _to, _value);\n        return true;\n    }\n    \n    function finishRestore() public onlyOwner returns (bool) {\n        restoreFinished = true;\n        RestoreFinished();\n        return true;\n    }\n    \n    \n    function totalSupply() public view returns (uint256) {\n        return totalSupply;\n    }\n    function balanceOf(address _owner) public view returns (uint256) {\n        return user[_owner].balance;\n    }\n    function lockState(address _owner) public view returns (bool) {\n        return user[_owner].lock;\n    }\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return user[_owner].allowed[_spender];\n    }\n    \n}\n\ncontract LockBalance is Ownable {\n    \n    enum eLockType {None, Individual, GroupA, GroupB, GroupC, GroupD}\n    struct sGroupLockDate {\n        uint256[] lockTime;\n        uint256[] lockPercent;\n    }\n    struct sLockInfo {\n        uint256[] lockType;\n        uint256[] lockBalanceStandard;\n        uint256[] startTime;\n        uint256[] endTime;\n    }\n    \n    using SafeMath for uint256;\n\n    mapping(uint => sGroupLockDate) groupLockDate;\n    \n    mapping(address => sLockInfo) lockUser;\n\n    event Lock(address indexed from, uint256 value, uint256 endTime);\n    \n    function setLockUser(address _to, eLockType _lockType, uint256 _value, uint256 _endTime) internal {\n        lockUser[_to].lockType.push(uint256(_lockType));\n        lockUser[_to].lockBalanceStandard.push(_value);\n        lockUser[_to].startTime.push(now);\n        lockUser[_to].endTime.push(_endTime);\n\n        Lock(_to, _value, _endTime);\n    }\n\n    function lockBalanceGroup(address _owner, uint _index) internal view returns (uint256) {\n        uint256 percent = 0;\n        uint256 key = uint256(lockUser[_owner].lockType[_index]);\n\n        uint256 time = 99999999999;\n        for(uint256 i = 0 ; i < groupLockDate[key].lockTime.length; i++) {\n            if(now < groupLockDate[key].lockTime[i]) {\n                if(groupLockDate[key].lockTime[i] < time) {\n                    time = groupLockDate[key].lockTime[i];\n                    percent = groupLockDate[key].lockPercent[i];    \n                }\n            }\n        }\n        \n        if(percent == 0){\n            return 0;\n        } else {\n            return lockUser[_owner].lockBalanceStandard[_index].div(100).mul(uint256(percent));\n        }\n    }\n\n    function lockBalanceIndividual(address _owner, uint _index) internal view returns (uint256) {\n        if(now < lockUser[_owner].endTime[_index]) {\n            return lockUser[_owner].lockBalanceStandard[_index];\n        } else {\n            return 0;\n        }\n    }\n    \n    function clearLockUser(address _owner, uint _index) onlyOwner public {\n        require(lockUser[_owner].endTime.length >_index);\n        lockUser[_owner].endTime[_index] = 0;\n    }\n        \n    function addLockDate(eLockType _lockType, uint256 _second, uint256 _percent) onlyOwner public {\n        sGroupLockDate storage lockInfo = groupLockDate[uint256(_lockType)];\n        bool isExists = false;\n        for(uint256 i = 0; i < lockInfo.lockTime.length; i++) {\n            if(lockInfo.lockTime[i] == _second) {\n                revert();\n                break;\n            }\n        }\n        \n        if(isExists) {\n           revert();\n        } else {\n            lockInfo.lockTime.push(_second);\n            lockInfo.lockPercent.push(_percent);\n        }\n    }\n    \n    function deleteLockDate(eLockType _lockType, uint256 _lockTime) onlyOwner public {\n        sGroupLockDate storage lockDate = groupLockDate[uint256(_lockType)];\n        \n        bool isExists = false;\n        uint256 index = 0;\n        for(uint256 i = 0; i < lockDate.lockTime.length; i++) {\n            if(lockDate.lockTime[i] == _lockTime) {\n                isExists = true;\n                index = i;\n                break;\n            }\n        }\n        \n        if(isExists) {\n            for(uint256 k = index; k < lockDate.lockTime.length - 1; k++){\n                lockDate.lockTime[k] = lockDate.lockTime[k + 1];\n                lockDate.lockPercent[k] = lockDate.lockPercent[k + 1];\n            }\n            delete lockDate.lockTime[lockDate.lockTime.length - 1];\n            lockDate.lockTime.length--;\n            delete lockDate.lockPercent[lockDate.lockPercent.length - 1];\n            lockDate.lockPercent.length--;\n        } else {\n            revert();\n        }\n        \n    }\n\n\n    function lockTypeInfoGroup(eLockType _type) public view returns (uint256[], uint256[]) {\n        uint256 key = uint256(_type);\n        return (groupLockDate[key].lockTime, groupLockDate[key].lockPercent);\n    }\n    function lockUserInfo(address _owner) public view returns (uint256[], uint256[], uint256[], uint256[], uint256[]) {\n        \n        uint256[] memory balance = new uint256[](lockUser[_owner].lockType.length);\n        for(uint256 i = 0; i < lockUser[_owner].lockType.length; i++){\n            if(lockUser[_owner].lockType[i] == uint256(eLockType.Individual)) {\n                balance[i] = balance[i].add(lockBalanceIndividual(_owner, i));\n            } else if(lockUser[_owner].lockType[i] != uint256(eLockType.None)) {\n                balance[i] = balance[i].add(lockBalanceGroup(_owner, i));\n            }\n        }\n        \n        return (lockUser[_owner].lockType,\n        lockUser[_owner].lockBalanceStandard,\n        balance,\n        lockUser[_owner].startTime,\n        lockUser[_owner].endTime);\n    }\n    function lockBalanceAll(address _owner) public view returns (uint256) {\n        uint256 lockBalance = 0;\n        for(uint256 i = 0; i < lockUser[_owner].lockType.length; i++){\n            if(lockUser[_owner].lockType[i] == uint256(eLockType.Individual)) {\n                lockBalance = lockBalance.add(lockBalanceIndividual(_owner, i));\n            } else if(lockUser[_owner].lockType[i] != uint256(eLockType.None)) {\n                lockBalance = lockBalance.add(lockBalanceGroup(_owner, i));\n            }\n        }\n        return lockBalance;\n    }\n    \n}\n\ncontract LikerCashCoin is Token, LockBalance {\n\n    function LLikerCashCoin() public {\n        name = \"LIKER CASH\";\n        symbol = \"LKC\";\n        decimals = 18;\n        uint256 initialSupply = 300000000;\n        totalSupply = initialSupply * 10 ** uint(decimals);\n        user[owner].balance = totalSupply;\n        Transfer(address(0), owner, totalSupply);\n    }\n\n    function validTransfer(address _from, address _to, uint256 _value, bool _lockCheck) internal {\n        super.validTransfer(_from, _to, _value, _lockCheck);\n        if(_lockCheck) {\n            require(_value <= useBalanceOf(_from));\n        }\n    }\n\n    function setLockUsers(eLockType _type, address[] _to, uint256[] _value, uint256[] _endTime) onlyOwner public {  \n        require(_to.length > 0);\n        require(_to.length == _value.length);\n        require(_to.length == _endTime.length);\n        require(_type != eLockType.None);\n        \n        for(uint256 i = 0; i < _to.length; i++){\n            require(_value[i] <= useBalanceOf(_to[i]));\n            setLockUser(_to[i], _type, _value[i], _endTime[i]);\n        }\n    }\n    \n    function useBalanceOf(address _owner) public view returns (uint256) {\n        return balanceOf(_owner).sub(lockBalanceAll(_owner));\n    }\n    \n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"lockBalanceAll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"restoreFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockType\",\"type\":\"uint8\"},{\"name\":\"_lockTime\",\"type\":\"uint256\"}],\"name\":\"deleteLockDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferRestore\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"LLikerCashCoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"useBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"lockTypeInfoGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishRestore\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"lockState\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_type\",\"type\":\"uint8\"},{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"},{\"name\":\"_endTime\",\"type\":\"uint256[]\"}],\"name\":\"setLockUsers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockType\",\"type\":\"uint8\"},{\"name\":\"_second\",\"type\":\"uint256\"},{\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"addLockDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"clearLockUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"lockUserInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"lock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RestoreFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "606060405260008060146101000a81548160ff0219169083151502179055506000600560006101000a81548160ff021916908315150217905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506138ef806100886000396000f30060606040526004361061018b576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063015d200f1461019057806305c7400a146101dd57806306fdde031461020a5780630789a31314610298578063095ea7b3146102c757806318160ddd1461032157806323b872dd1461034a5780632f6c493c146103c3578063313ce567146104145780633f4ba83a1461043d5780634149953d146104525780635c975abb146104cb57806360f1deb5146104f857806369132d431461050d57806370a082311461055a5780638456cb59146105a75780638da5cb5b146105bc5780638e2833341461061157806390e99b09146106d457806394dbc70e1461070157806395d89b41146107525780639846d9de146107e05780639a713d05146108c65780639dc29fac146108fe578063a26a1bc914610958578063a9059cbb1461099a578063ac1a7175146109f4578063dd62ed3e14610ba2578063f2fde38b14610c0e578063f435f5a714610c47578063fb93210814610c98575b600080fd5b341561019b57600080fd5b6101c7600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610cf2565b6040518082815260200191505060405180910390f35b34156101e857600080fd5b6101f0610e83565b604051808215151515815260200191505060405180910390f35b341561021557600080fd5b61021d610e96565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561025d578082015181840152602081019050610242565b50505050905090810190601f16801561028a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102a357600080fd5b6102c5600480803560ff16906020019091908035906020019091905050610f34565b005b34156102d257600080fd5b610307600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611150565b604051808215151515815260200191505060405180910390f35b341561032c57600080fd5b61033461126f565b6040518082815260200191505060405180910390f35b341561035557600080fd5b6103a9600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611279565b604051808215151515815260200191505060405180910390f35b34156103ce57600080fd5b6103fa600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506115ec565b604051808215151515815260200191505060405180910390f35b341561041f57600080fd5b61042761170f565b6040518082815260200191505060405180910390f35b341561044857600080fd5b610450611715565b005b341561045d57600080fd5b6104b1600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506117d3565b604051808215151515815260200191505060405180910390f35b34156104d657600080fd5b6104de6119ff565b604051808215151515815260200191505060405180910390f35b341561050357600080fd5b61050b611a12565b005b341561051857600080fd5b610544600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611bbf565b6040518082815260200191505060405180910390f35b341561056557600080fd5b610591600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611beb565b6040518082815260200191505060405180910390f35b34156105b257600080fd5b6105ba611c37565b005b34156105c757600080fd5b6105cf611cf7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561061c57600080fd5b610635600480803560ff16906020019091905050611d1c565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561067c578082015181840152602081019050610661565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156106be5780820151818401526020810190506106a3565b5050505090500194505050505060405180910390f35b34156106df57600080fd5b6106e7611e16565b604051808215151515815260200191505060405180910390f35b341561070c57600080fd5b610738600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611ec1565b604051808215151515815260200191505060405180910390f35b341561075d57600080fd5b610765611f1a565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107a557808201518184015260208101905061078a565b50505050905090810190601f1680156107d25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156107eb57600080fd5b6108c4600480803560ff16906020019091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050611fb8565b005b34156108d157600080fd5b6108fc600480803560ff16906020019091908035906020019091908035906020019091905050612123565b005b341561090957600080fd5b61093e600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061225a565b604051808215151515815260200191505060405180910390f35b341561096357600080fd5b610998600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506123ff565b005b34156109a557600080fd5b6109da600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050612511565b604051808215151515815260200191505060405180910390f35b34156109ff57600080fd5b610a2b600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506126e0565b60405180806020018060200180602001806020018060200186810386528b818151815260200191508051906020019060200280838360005b83811015610a7e578082015181840152602081019050610a63565b5050505090500186810385528a818151815260200191508051906020019060200280838360005b83811015610ac0578082015181840152602081019050610aa5565b50505050905001868103845289818151815260200191508051906020019060200280838360005b83811015610b02578082015181840152602081019050610ae7565b50505050905001868103835288818151815260200191508051906020019060200280838360005b83811015610b44578082015181840152602081019050610b29565b50505050905001868103825287818151815260200191508051906020019060200280838360005b83811015610b86578082015181840152602081019050610b6b565b505050509050019a505050505050505050505060405180910390f35b3415610bad57600080fd5b610bf8600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612bbf565b6040518082815260200191505060405180910390f35b3415610c1957600080fd5b610c45600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612c49565b005b3415610c5257600080fd5b610c7e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612d9e565b604051808215151515815260200191505060405180910390f35b3415610ca357600080fd5b610cd8600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050612ec1565b604051808215151515815260200191505060405180910390f35b6000806000809150600090505b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000180549050811015610e795760016005811115610d5957fe5b600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000182815481101515610da857fe5b9060005260206000209001541415610ddd57610dd6610dc785836130d0565b836131a190919063ffffffff16565b9150610e6c565b60006005811115610dea57fe5b600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000182815481101515610e3957fe5b906000526020600020900154141515610e6b57610e68610e5985836131bf565b836131a190919063ffffffff16565b91505b5b8080600101915050610cff565b8192505050919050565b600560009054906101000a900460ff1681565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f2c5780601f10610f0157610100808354040283529160200191610f2c565b820191906000526020600020905b815481529060010190602001808311610f0f57829003601f168201915b505050505081565b60008060008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f9757600080fd5b60076000886005811115610fa757fe5b815260200190815260200160002094506000935060009250600091505b846000018054905082101561101057858560000183815481101515610fe557fe5b90600052602060002090015414156110035760019350819250611010565b8180600101925050610fc4565b8315611142578290505b60018560000180549050038110156110b957846000016001820181548110151561104057fe5b906000526020600020900154856000018281548110151561105d57fe5b906000526020600020900181905550846001016001820181548110151561108057fe5b906000526020600020900154856001018281548110151561109d57fe5b906000526020600020900181905550808060010191505061101a565b8460000160018660000180549050038154811015156110d457fe5b906000526020600020900160009055846000018054809190600190036110fa91906137b2565b5084600101600186600101805490500381548110151561111657fe5b9060005260206000209001600090558460010180548091906001900361113c91906137b2565b50611147565b600080fd5b50505050505050565b60008060149054906101000a900460ff1615151561116d57600080fd5b60008211151561117c57600080fd5b81600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600454905090565b60008060149054906101000a900460ff1615151561129657600080fd5b6112a384848460016133d1565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561133157600080fd5b61138682600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015461340190919063ffffffff16565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555061142182600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546131a190919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055506114f982600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461340190919063ffffffff16565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561164957600080fd5b60011515600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff1615151415156116ab57600080fd5b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160006101000a81548160ff02191690831515021790555060019050919050565b60035481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561177057600080fd5b600060149054906101000a900460ff16151561178b57600080fd5b60008060146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561183057600080fd5b600560009054906101000a900460ff1615151561184c57600080fd5b61185984848460006133d1565b6118ae82600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015461340190919063ffffffff16565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555061194982600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546131a190919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600060149054906101000a900460ff1681565b60006040805190810160405280600a81526020017f4c494b455220434153480000000000000000000000000000000000000000000081525060019080519060200190611a5f9291906137de565b506040805190810160405280600381526020017f4c4b43000000000000000000000000000000000000000000000000000000000081525060029080519060200190611aab9291906137de565b5060126003819055506311e1a3009050600354600a0a8102600481905550600454600660008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6004546040518082815260200191505060405180910390a350565b6000611be4611bcd83610cf2565b611bd684611beb565b61340190919063ffffffff16565b9050919050565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c9257600080fd5b600060149054906101000a900460ff16151515611cae57600080fd5b6001600060146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611d2461385e565b611d2c61385e565b6000836005811115611d3a57fe5b9050600760008281526020019081526020016000206000016007600083815260200190815260200160002060010181805480602002602001604051908101604052809291908181526020018280548015611db357602002820191906000526020600020905b815481526020019060010190808311611d9f575b5050505050915080805480602002602001604051908101604052809291908181526020018280548015611e0557602002820191906000526020600020905b815481526020019060010190808311611df1575b505050505090509250925050915091565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e7357600080fd5b6001600560006101000a81548160ff0219169083151502179055507f7187cbcbda53f626dba64b95bb4562770cbe3f2026eebce9d93b79a169f8460c60405160405180910390a16001905090565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff169050919050565b60028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611fb05780601f10611f8557610100808354040283529160200191611fb0565b820191906000526020600020905b815481529060010190602001808311611f9357829003601f168201915b505050505081565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561201557600080fd5b6000845111151561202557600080fd5b8251845114151561203557600080fd5b8151845114151561204557600080fd5b6000600581111561205257fe5b85600581111561205e57fe5b1415151561206b57600080fd5b600090505b835181101561211c57612099848281518110151561208a57fe5b90602001906020020151611bbf565b83828151811015156120a757fe5b90602001906020020151111515156120be57600080fd5b61210f84828151811015156120cf57fe5b906020019060200201518685848151811015156120e857fe5b90602001906020020151858581518110151561210057fe5b9060200190602002015161341a565b8080600101915050612070565b5050505050565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561218357600080fd5b6007600087600581111561219357fe5b8152602001908152602001600020925060009150600090505b82600001805490508110156121f1578483600001828154811015156121cd57fe5b90600052602060002090015414156121e457600080fd5b80806001019150506121ac565b81156121fc57600080fd5b8260000180548060010182816122129190613872565b91600052602060002090016000879091909150555082600101805480600101828161223d9190613872565b916000526020600020900160008690919091505550505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156122b757600080fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154821115151561230857600080fd5b61235d82600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015461340190919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055506123b88260045461340190919063ffffffff16565b6004819055507fb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb826040518082815260200191505060405180910390a16001905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561245a57600080fd5b80600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301805490501115156124ad57600080fd5b6000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301828154811015156124fe57fe5b9060005260206000209001819055505050565b60008060149054906101000a900460ff1615151561252e57600080fd5b61253b33848460016133d1565b61259082600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015461340190919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555061262b82600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546131a190919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6126e861385e565b6126f061385e565b6126f861385e565b61270061385e565b61270861385e565b61271061385e565b6000600860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805490506040518059106127655750595b90808252806020026020018201604052509150600090505b600860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905081101561295957600160058111156127d757fe5b600860008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018281548110151561282657fe5b906000526020600020900154141561288c5761286b61284589836130d0565b838381518110151561285357fe5b906020019060200201516131a190919063ffffffff16565b828281518110151561287957fe5b906020019060200201818152505061294c565b6000600581111561289957fe5b600860008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001828154811015156128e857fe5b90600052602060002090015414151561294b5761292e61290889836131bf565b838381518110151561291657fe5b906020019060200201516131a190919063ffffffff16565b828281518110151561293c57fe5b90602001906020020181815250505b5b808060010191505061277d565b600860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600860008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010183600860008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201600860008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030184805480602002602001604051908101604052809291908181526020018280548015612aad57602002820191906000526020600020905b815481526020019060010190808311612a99575b5050505050945083805480602002602001604051908101604052809291908181526020018280548015612aff57602002820191906000526020600020905b815481526020019060010190808311612aeb575b5050505050935081805480602002602001604051908101604052809291908181526020018280548015612b5157602002820191906000526020600020905b815481526020019060010190808311612b3d575b5050505050915080805480602002602001604051908101604052809291908181526020018280548015612ba357602002820191906000526020600020905b815481526020019060010190808311612b8f575b5050505050905096509650965096509650505091939590929450565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612ca457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612ce057600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612dfb57600080fd5b60001515600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff161515141515612e5d57600080fd5b6001600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160006101000a81548160ff02191690831515021790555060019050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612f1e57600080fd5b612f2b33848460006133d1565b612f8082600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015461340190919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555061301b82600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546131a190919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018281548110151561312157fe5b90600052602060002090015442101561319657600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018281548110151561318357fe5b906000526020600020900154905061319b565b600090505b92915050565b60008082840190508381101515156131b557fe5b8091505092915050565b6000806000806000809350600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018681548110151561321957fe5b906000526020600020900154925064174876e7ff9150600090505b600760008481526020019081526020016000206000018054905081101561333257600760008481526020019081526020016000206000018181548110151561327857fe5b906000526020600020900154421015613325578160076000858152602001908152602001600020600001828154811015156132af57fe5b90600052602060002090015410156133245760076000848152602001908152602001600020600001818154811015156132e457fe5b9060005260206000209001549150600760008481526020019081526020016000206001018181548110151561331557fe5b90600052602060002090015493505b5b8080600101915050613234565b600084141561334457600094506133c7565b6133c4846133b66064600860008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018a81548110151561339c57fe5b90600052602060002090015461362590919063ffffffff16565b61364090919063ffffffff16565b94505b5050505092915050565b6133dd8484848461367b565b80156133fb576133ec84611bbf565b82111515156133fa57600080fd5b5b50505050565b600082821115151561340f57fe5b818303905092915050565b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805480600101828161346e9190613872565b9160005260206000209001600085600581111561348757fe5b90919091505550600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010180548060010182816134e29190613872565b916000526020600020900160008490919091505550600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201805480600101828161354b9190613872565b916000526020600020900160004290919091505550600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030180548060010182816135b49190613872565b9160005260206000209001600083909190915055508373ffffffffffffffffffffffffffffffffffffffff167f49eaf4942f1237055eb4cfa5f31c9dfe50d5b4ade01e021f7de8be2fbbde557b8383604051808381526020018281526020019250505060405180910390a250505050565b600080828481151561363357fe5b0490508091505092915050565b60008060008414156136555760009150613674565b828402905082848281151561366657fe5b0414151561367057fe5b8091505b5092915050565b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156136b657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156136f257600080fd5b81600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541015151561374357600080fd5b80156137ac5760001515600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff1615151415156137ab57600080fd5b5b50505050565b8154818355818115116137d9578183600052602060002091820191016137d8919061389e565b5b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061381f57805160ff191683800117855561384d565b8280016001018555821561384d579182015b8281111561384c578251825591602001919060010190613831565b5b50905061385a919061389e565b5090565b602060405190810160405280600081525090565b81548183558181151161389957818360005260206000209182019101613898919061389e565b5b505050565b6138c091905b808211156138bc5760008160009055506001016138a4565b5090565b905600a165627a7a7230582055fb00fa76603e4a35e438934f0169776449d611305ac58f038deb5c08f257250029"
}