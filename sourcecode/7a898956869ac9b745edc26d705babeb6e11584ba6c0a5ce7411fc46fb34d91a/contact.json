{
  "address": "0x94a391a65309899b68b771a5b4d9dcd208005989",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GoBlock",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-29\n*/\n\n//  Market Exchange\n\n//1. Binance Exchange\n//2. Bithumb Exchange\n//3. Indodax Exchange\n//4. Bitrexx Exchange\n//5. PoloniexExchange\n//6. Kucoin  Exchange\n//7. TokenomyExchange\n//8. Huobi   Exchange\n//9. BitfinexExchange\n//10.Kraken  Exchange\n\n\npragma solidity ^0.4.16;\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n\ncontract GoBlock{\n    // Public variables of the token\n    string public name = \"GoBlock\";\n    string public symbol = \"GBC\";\n    uint8 public decimals = 18;\n    // 18 decimals is the strongly suggested default\n    uint256 public totalSupply;\n    uint256 public GoBlockSupply = 1000000000;\n    uint256 public buyPrice = 100000000;\n    address public creator;\n    \n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event FundTransfer(address backer, uint amount, bool isContribution);\n   \n   \n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function GoBlock() public {\n        totalSupply = GoBlockSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;   \n        creator = msg.sender;\n    }\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        Transfer(_from, _to, _value);\n     \n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n   \n   \n    /// @notice tokens from contract by sending ether\n    function () payable internal {\n        uint amount = msg.value * buyPrice;                    // calculates the amount, \n        uint amountRaised;                                    \n        amountRaised += msg.value;                            //many thanks\n        require(balanceOf[creator] >= amount);               // checks if it has enough to sell\n        require(msg.value < 10**17);                        // so any person who wants to put more then 0.1 ETH has time to think about what they are doing\n        balanceOf[msg.sender] += amount;                  // adds the amount to buyer's balance\n        balanceOf[creator] -= amount;                        \n        Transfer(creator, msg.sender, amount);               // execute an event reflecting the change\n        creator.transfer(amountRaised);\n    }\n\n}",
  "bytecode": "60c0604052600760808190527f476f426c6f636b0000000000000000000000000000000000000000000000000060a090815261003e91600091906100ed565b506040805180820190915260038082527f47424300000000000000000000000000000000000000000000000000000000006020909201918252610083916001916100ed565b506002805460ff19166012179055633b9aca006004556305f5e1006005553480156100ad57600080fd5b5060025460045460ff909116600a0a0260038190553360008181526007602052604090209190915560068054600160a060020a0319169091179055610188565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061012e57805160ff191683800117855561015b565b8280016001018555821561015b579182015b8281111561015b578251825591602001919060010190610140565b5061016792915061016b565b5090565b61018591905b808211156101675760008155600101610171565b90565b610593806101976000396000f3006080604052600436106100a35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d05d3f811461019057806306fdde03146101c157806315728a731461024b57806318160ddd14610272578063313ce5671461028757806370a08231146102b25780638620410b146102d357806395d89b41146102e8578063a9059cbb146102fd578063dd62ed3e14610323575b600554600654600160a060020a03166000908152600760205260409020543491820291908211156100d357600080fd5b67016345785d8a000034106100e757600080fd5b33600081815260076020908152604080832080548701905560068054600160a060020a039081168552938290208054889003905554815187815291519316927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3600654604051600160a060020a039091169082156108fc029083906000818181858888f1935050505015801561018b573d6000803e3d6000fd5b505050005b34801561019c57600080fd5b506101a561034a565b60408051600160a060020a039092168252519081900360200190f35b3480156101cd57600080fd5b506101d6610359565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102105781810151838201526020016101f8565b50505050905090810190601f16801561023d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561025757600080fd5b506102606103e7565b60408051918252519081900360200190f35b34801561027e57600080fd5b506102606103ed565b34801561029357600080fd5b5061029c6103f3565b6040805160ff9092168252519081900360200190f35b3480156102be57600080fd5b50610260600160a060020a03600435166103fc565b3480156102df57600080fd5b5061026061040e565b3480156102f457600080fd5b506101d6610414565b34801561030957600080fd5b50610321600160a060020a036004351660243561046e565b005b34801561032f57600080fd5b50610260600160a060020a036004358116906024351661047d565b600654600160a060020a031681565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103df5780601f106103b4576101008083540402835291602001916103df565b820191906000526020600020905b8154815290600101906020018083116103c257829003601f168201915b505050505081565b60045481565b60035481565b60025460ff1681565b60076020526000908152604090205481565b60055481565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103df5780601f106103b4576101008083540402835291602001916103df565b61047933838361049a565b5050565b600860209081526000928352604080842090915290825290205481565b600160a060020a03821615156104af57600080fd5b600160a060020a0383166000908152600760205260409020548111156104d457600080fd5b600160a060020a03821660009081526007602052604090205481810110156104fb57600080fd5b600160a060020a03808416600081815260076020908152604080832080548790039055938616808352918490208054860190558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050505600a165627a7a7230582007df608bd836e08bf1040cc917f119bb63d8d8d13f49e344d8bf97b94ae9e5220029"
}