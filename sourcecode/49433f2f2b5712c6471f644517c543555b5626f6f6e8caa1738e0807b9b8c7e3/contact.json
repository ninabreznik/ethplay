{
  "address": "0x6e14ccec454b12ab03ef1ca2cf0ef67d6bfd8a26",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FAS",
  "compilerVersion": "v0.4.26+commit.4563c3fc",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-21\n*/\n\npragma solidity ^0.4.20;\n\n\nlibrary safeMath\n{\n  function mul(uint256 a, uint256 b) internal pure returns (uint256)\n  {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n  function add(uint256 a, uint256 b) internal pure returns (uint256)\n  {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Variable\n{\n  string public name;\n  string public symbol;\n  uint256 public decimals;\n  uint256 public totalSupply;\n  address public owner;\n  address public watchdog;\n\n  uint256 internal _decimals;\n  bool internal transferLock;\n  bool internal depositLock;\n  mapping (address => bool) public allowedAddress;\n  mapping (address => bool) public blockedAddress;\n\n  mapping (address => uint256) public balanceOf;\n\n  constructor() public\n  {\n    name = \"FAS CHAIN\";\n    symbol = \"FAS\";\n    decimals = 18;\n    _decimals = 10 ** uint256(decimals);\n    totalSupply = _decimals * 3600000000;\n    transferLock = true;\n    depositLock = true;\n    owner =  msg.sender;\n    balanceOf[owner] = totalSupply;\n    allowedAddress[owner] = true;\n    watchdog = 0x1fbbf98b345c82325baa7514c37d2050d84bd949;\n  }\n}\n\ncontract Modifiers is Variable\n{\n  address public newWatchdog;\n  address public newOwner;\n\n  modifier isOwner\n  {\n    assert(owner == msg.sender);\n    _;\n  }\n\n  modifier isValidAddress\n  {\n    assert(0x0 != msg.sender);\n    _;\n  }\n\n  modifier isWatchdog\n  {\n    assert(watchdog == msg.sender);\n    _;\n  }\n\n  function transferOwnership(address _newOwner) public isWatchdog\n  {\n      newOwner = _newOwner;\n  }\n\n  function transferOwnershipWatchdog(address _newWatchdog) public isOwner\n  {\n      newWatchdog = _newWatchdog;\n  }\n\n  function acceptOwnership() public isOwner\n  {\n      require(newOwner != 0x0);\n      owner = newOwner;\n      newOwner = address(0);\n  }\n\n  function acceptOwnershipWatchdog() public isWatchdog\n  {\n      require(newWatchdog != 0x0);\n      watchdog = newWatchdog;\n      newWatchdog = address(0);\n  }\n}\n\ncontract Event\n{\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Deposit(address indexed sender, uint256 amount , string status);\n  event TokenBurn(address indexed from, uint256 value);\n  event TokenAdd(address indexed from, uint256 value);\n  event BlockedAddress(address blockedAddress);\n}\n\ncontract manageAddress is Variable, Modifiers, Event\n{\n  function add_allowedAddress(address _address) public isOwner\n  {\n    allowedAddress[_address] = true;\n  }\n\n  function add_blockedAddress(address _address) public isOwner\n  {\n    require(_address != owner);\n    blockedAddress[_address] = true;\n    emit BlockedAddress(_address);\n  }\n\n  function delete_allowedAddress(address _address) public isOwner\n  {\n    require(_address != owner);\n    allowedAddress[_address] = false;\n  }\n\n  function delete_blockedAddress(address _address) public isOwner\n  {\n    blockedAddress[_address] = false;\n  }\n}\n\ncontract Admin is Variable, Modifiers, Event\n{\n  function admin_tokenBurn(uint256 _value) public isOwner returns(bool success)\n  {\n    require(balanceOf[msg.sender] >= _value);\n    balanceOf[msg.sender] -= _value;\n    totalSupply -= _value;\n    emit TokenBurn(msg.sender, _value);\n    return true;\n  }\n  function admin_tokenAdd(uint256 _value) public isOwner returns(bool success)\n  {\n    balanceOf[msg.sender] += _value;\n    totalSupply += _value;\n    emit TokenAdd(msg.sender, _value);\n    return true;\n  }\n}\n\ncontract Get is Variable, Modifiers\n{\n  function get_transferLock() public view returns(bool)\n  {\n    return transferLock;\n  }\n  function get_depositLock() public view returns(bool)\n  {\n    return depositLock;\n  }\n}\n\ncontract Set is Variable, Modifiers, Event\n{\n  function setTransferLock(bool _transferLock) public isOwner returns(bool success)\n  {\n    transferLock = _transferLock;\n    return true;\n  }\n  function setDepositLock(bool _depositLock) public isOwner returns(bool success)\n  {\n    depositLock = _depositLock;\n    return true;\n  }\n}\n\ncontract FAS is Variable, Event, Get, Set, Admin, manageAddress\n{\n  using safeMath for uint256;\n\n  function() payable public\n  {\n    revert();\n  }\n  function transfer(address _to, uint256 _value) public isValidAddress\n  {\n    require(allowedAddress[msg.sender] || transferLock == false);\n    require(!blockedAddress[msg.sender] && !blockedAddress[_to]);\n    require(balanceOf[msg.sender] >= _value);\n    require((balanceOf[_to].add(_value)) >= balanceOf[_to]);\n    balanceOf[msg.sender] -= _value;\n    balanceOf[_to] += _value;\n    emit Transfer(msg.sender, _to, _value);\n  }\n}",
  "bytecode": "60c0604052600960808190527f46415320434841494e000000000000000000000000000000000000000000000060a090815261003e9160009190610137565b506040805180820190915260038082527f4641530000000000000000000000000000000000000000000000000000000000602090920191825261008391600191610137565b506012600255670de0b6b3a76400006006556b0ba1d9a70c21cda81000000060038190556007805461ff001960ff199182166001908117919091166101001790925560048054600160a060020a03199081163317808355600160a060020a039081166000908152600a60209081526040808320989098559354909116815260089092529390208054909116909117905560058054909116731fbbf98b345c82325baa7514c37d2050d84bd9491790556101d2565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061017857805160ff19168380011785556101a5565b828001600101855582156101a5579182015b828111156101a557825182559160200191906001019061018a565b506101b19291506101b5565b5090565b6101cf91905b808211156101b157600081556001016101bb565b90565b610ba2806101e16000396000f3006080604052600436106101535763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146101585780630d015e4b146101e25780630db7da1b1461020b57806318160ddd1461022e57806320d7611314610255578063271aedcf1461026d578063313ce5671461028e57806340908298146102a35780634ebb380e146102c457806351221873146102e55780635ebad250146103065780635eeb9ff91461033757806370a082311461034c57806379ba50971461036d5780638da5cb5b1461038257806395d89b4114610397578063a9059cbb146103ac578063bc990f72146103d0578063bff35618146103e5578063d016492e146103ff578063d4ee1d9014610420578063e6c4c2c714610435578063edcf60d61461044d578063f2fde38b14610462578063fd4a772c14610483578063fe4170bc146104a4575b600080fd5b34801561016457600080fd5b5061016d6104be565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101a757818101518382015260200161018f565b50505050905090810190601f1680156101d45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101ee57600080fd5b506101f761054c565b604080519115158252519081900360200190f35b34801561021757600080fd5b5061022c600160a060020a036004351661055a565b005b34801561023a57600080fd5b5061024361059d565b60408051918252519081900360200190f35b34801561026157600080fd5b506101f76004356105a3565b34801561027957600080fd5b5061022c600160a060020a0360043516610632565b34801561029a57600080fd5b506102436106bc565b3480156102af57600080fd5b506101f7600160a060020a03600435166106c2565b3480156102d057600080fd5b5061022c600160a060020a03600435166106d7565b3480156102f157600080fd5b5061022c600160a060020a036004351661070f565b34801561031257600080fd5b5061031b610744565b60408051600160a060020a039092168252519081900360200190f35b34801561034357600080fd5b506101f7610753565b34801561035857600080fd5b50610243600160a060020a036004351661075c565b34801561037957600080fd5b5061022c61076e565b34801561038e57600080fd5b5061031b6107cd565b3480156103a357600080fd5b5061016d6107dc565b3480156103b857600080fd5b5061022c600160a060020a0360043516602435610836565b3480156103dc57600080fd5b5061031b610968565b3480156103f157600080fd5b506101f76004351515610977565b34801561040b57600080fd5b5061022c600160a060020a03600435166109a5565b34801561042c57600080fd5b5061031b6109f5565b34801561044157600080fd5b506101f7600435610a04565b34801561045957600080fd5b5061022c610a75565b34801561046e57600080fd5b5061022c600160a060020a0360043516610ad4565b34801561048f57600080fd5b506101f7600160a060020a0360043516610b17565b3480156104b057600080fd5b506101f76004351515610b2c565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105445780601f1061051957610100808354040283529160200191610544565b820191906000526020600020905b81548152906001019060200180831161052757829003601f168201915b505050505081565b600754610100900460ff1690565b600454600160a060020a0316331461056e57fe5b600b805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60035481565b600454600090600160a060020a031633146105ba57fe5b336000908152600a60205260409020548211156105d657600080fd5b336000818152600a602090815260409182902080548690039055600380548690039055815185815291517fab85194d35c4ea153d0b51f3a304d1d22cb8023e499a6503fb6c28c5864ae90e9281900390910190a2506001919050565b600454600160a060020a0316331461064657fe5b600454600160a060020a038281169116141561066157600080fd5b600160a060020a038116600081815260096020908152604091829020805460ff19166001179055815192835290517f7cb7e15c856a47197090fbeff974b9b35b88aac9b4cca42de588af07b0fd7bd49281900390910190a150565b60025481565b60086020526000908152604090205460ff1681565b600454600160a060020a031633146106eb57fe5b600160a060020a03166000908152600860205260409020805460ff19166001179055565b600454600160a060020a0316331461072357fe5b600160a060020a03166000908152600960205260409020805460ff19169055565b600554600160a060020a031681565b60075460ff1690565b600a6020526000908152604090205481565b600454600160a060020a0316331461078257fe5b600c54600160a060020a0316151561079957600080fd5b600c80546004805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600454600160a060020a031681565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105445780601f1061051957610100808354040283529160200191610544565b33151561083f57fe5b3360009081526008602052604090205460ff1680610860575060075460ff16155b151561086b57600080fd5b3360009081526009602052604090205460ff161580156108a45750600160a060020a03821660009081526009602052604090205460ff16155b15156108af57600080fd5b336000908152600a60205260409020548111156108cb57600080fd5b600160a060020a0382166000908152600a60205260409020546108f4818363ffffffff610b6016565b10156108ff57600080fd5b336000818152600a6020908152604080832080548690039055600160a060020a03861680845292819020805486019055805185815290519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35050565b600b54600160a060020a031681565b600454600090600160a060020a0316331461098e57fe5b506007805460ff1916911515919091179055600190565b600454600160a060020a031633146109b957fe5b600454600160a060020a03828116911614156109d457600080fd5b600160a060020a03166000908152600860205260409020805460ff19169055565b600c54600160a060020a031681565b600454600090600160a060020a03163314610a1b57fe5b336000818152600a60209081526040918290208054860190556003805486019055815185815291517f0128aee808b8c93c89a4baaebb96c175a3853e59237bf506c56942a095016d1c9281900390910190a2506001919050565b600554600160a060020a03163314610a8957fe5b600b54600160a060020a03161515610aa057600080fd5b600b80546005805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600554600160a060020a03163314610ae857fe5b600c805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60096020526000908152604090205460ff1681565b600454600090600160a060020a03163314610b4357fe5b50600780548215156101000261ff00199091161790556001919050565b600082820183811015610b6f57fe5b93925050505600a165627a7a72305820b9ae42cf6e12a81e80ee7366d8ba38318ccbf42aad94a2487605b0a8bbca40650029"
}