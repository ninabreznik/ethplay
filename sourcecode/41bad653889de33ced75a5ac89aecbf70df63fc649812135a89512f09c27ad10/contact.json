{
  "address": "0x58f8c2bf72d993093d2e5aa5a1a04e21a5c946e4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MintableToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-24\n*/\n\npragma solidity ^0.4.11;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract TokenFreeze is Ownable, StandardToken {\n  uint256 public unfreeze_date;\n  \n  event FreezeDateChanged(string message, uint256 date);\n\n  function TokenFreeze() public {\n    unfreeze_date = now;\n  }\n\n  modifier freezed() {\n    require(unfreeze_date < now);\n    _;\n  }\n\n  function changeFreezeDate(uint256 datetime) onlyOwner public {\n    require(datetime != 0);\n    unfreeze_date = datetime;\n    FreezeDateChanged(\"Unfreeze Date: \", datetime);\n  }\n  \n  function transferFrom(address _from, address _to, uint256 _value) freezed public returns (bool) {\n    super.transferFrom(_from, _to, _value);\n  }\n\n  function transfer(address _to, uint256 _value) freezed public returns (bool) {\n    super.transfer(_to, _value);\n  }\n\n}\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is TokenFreeze {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n  \n  string public constant name = \"Neluns\";\n  string public constant symbol = \"NLS\";\n  uint8 public constant decimals = 0;  // 18 is the most common number of decimal places\n  \n  bool public mintingFinished = false;\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}",
  "bytecode": "60806040526005805460ff1916905560008054600160a060020a0319163317905542600455610c21806100336000396000f3006080604052600436106100fb5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b8114610100578063064cd77f1461012957806306fdde0314610143578063095ea7b3146101cd57806318160ddd146101f15780631adb69cc1461021857806323b872dd1461022d578063313ce5671461025757806340c10f191461028257806366188463146102a657806370a08231146102ca5780637d64bcb4146102eb5780638da5cb5b1461030057806395d89b4114610331578063a9059cbb14610346578063d73dd6231461036a578063dd62ed3e1461038e578063f2fde38b146103b5575b600080fd5b34801561010c57600080fd5b506101156103d6565b604080519115158252519081900360200190f35b34801561013557600080fd5b506101416004356103df565b005b34801561014f57600080fd5b50610158610470565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561019257818101518382015260200161017a565b50505050905090810190601f1680156101bf5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101d957600080fd5b50610115600160a060020a03600435166024356104a7565b3480156101fd57600080fd5b5061020661050d565b60408051918252519081900360200190f35b34801561022457600080fd5b50610206610513565b34801561023957600080fd5b50610115600160a060020a0360043581169060243516604435610519565b34801561026357600080fd5b5061026c61053e565b6040805160ff9092168252519081900360200190f35b34801561028e57600080fd5b50610115600160a060020a0360043516602435610543565b3480156102b257600080fd5b50610115600160a060020a0360043516602435610646565b3480156102d657600080fd5b50610206600160a060020a0360043516610738565b3480156102f757600080fd5b50610115610753565b34801561030c57600080fd5b506103156107b7565b60408051600160a060020a039092168252519081900360200190f35b34801561033d57600080fd5b506101586107c6565b34801561035257600080fd5b50610115600160a060020a03600435166024356107fd565b34801561037657600080fd5b50610115600160a060020a0360043516602435610819565b34801561039a57600080fd5b50610206600160a060020a03600435811690602435166108b2565b3480156103c157600080fd5b50610141600160a060020a03600435166108dd565b60055460ff1681565b600054600160a060020a031633146103f657600080fd5b80151561040257600080fd5b60048190556040805160208101839052818152600f818301527f556e667265657a6520446174653a200000000000000000000000000000000000606082015290517f0ae70adc145a110d2f2375f7d35486718657593a1d8dc170896cffa224e584b19181900360800190a150565b60408051808201909152600681527f4e656c756e730000000000000000000000000000000000000000000000000000602082015281565b336000818152600360209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60015481565b60045481565b60004260045410151561052b57600080fd5b610536848484610971565b509392505050565b600081565b60008054600160a060020a0316331461055b57600080fd5b60055460ff161561056b57600080fd5b60015461057e908363ffffffff610aea16565b600155600160a060020a0383166000908152600260205260409020546105aa908363ffffffff610aea16565b600160a060020a038416600081815260026020908152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350600192915050565b336000908152600360209081526040808320600160a060020a03861684529091528120548083111561069b57336000908152600360209081526040808320600160a060020a03881684529091528120556106d0565b6106ab818463ffffffff610b0016565b336000908152600360209081526040808320600160a060020a03891684529091529020555b336000818152600360209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a3600191505b5092915050565b600160a060020a031660009081526002602052604090205490565b60008054600160a060020a0316331461076b57600080fd5b60055460ff161561077b57600080fd5b6005805460ff191660011790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600054600160a060020a031681565b60408051808201909152600381527f4e4c530000000000000000000000000000000000000000000000000000000000602082015281565b60004260045410151561080f57600080fd5b6107318383610b12565b336000908152600360209081526040808320600160a060020a038616845290915281205461084d908363ffffffff610aea16565b336000818152600360209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b600054600160a060020a031633146108f457600080fd5b600160a060020a038116151561090957600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000600160a060020a038316151561098857600080fd5b600160a060020a0384166000908152600260205260409020548211156109ad57600080fd5b600160a060020a03841660009081526003602090815260408083203384529091529020548211156109dd57600080fd5b600160a060020a038416600090815260026020526040902054610a06908363ffffffff610b0016565b600160a060020a038086166000908152600260205260408082209390935590851681522054610a3b908363ffffffff610aea16565b600160a060020a038085166000908152600260209081526040808320949094559187168152600382528281203382529091522054610a7f908363ffffffff610b0016565b600160a060020a03808616600081815260036020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b600082820183811015610af957fe5b9392505050565b600082821115610b0c57fe5b50900390565b6000600160a060020a0383161515610b2957600080fd5b33600090815260026020526040902054821115610b4557600080fd5b33600090815260026020526040902054610b65908363ffffffff610b0016565b3360009081526002602052604080822092909255600160a060020a03851681522054610b97908363ffffffff610aea16565b600160a060020a0384166000818152600260209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3506001929150505600a165627a7a72305820c1fd60f7597bf684ff58f1cf95840ee45c3b783b478fc8fc50e58f4c0ddc308f0029"
}