{
  "address": "0xd214cfa712be84cf01ebde493c4c00129ce67842",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ANIMETOKEN",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-15\n*/\n\npragma solidity ^0.4.18;\n\n// math library\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\n// ownership\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization\n *      control functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the\n     *      sender account.\n     */\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) onlyOwner public {\n        require(newOwner != address(0));\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\n\n// ERC223\n/**\n * @title ERC223\n * @dev ERC223 contract interface with ERC20 functions and events\n *      Fully backward compatible with ERC20\n *      Recommended implementation used at https://github.com/Dexaran/ERC223-token-standard/tree/Recommended\n */\ncontract ERC223 {\n    uint public totalSupply;\n\n    // ERC223 and ERC20 functions and events\n    function balanceOf(address who) public view returns (uint);\n    function totalSupply() public view returns (uint256 _supply);\n    function transfer(address to, uint value) public returns (bool ok);\n    function transfer(address to, uint value, bytes data) public returns (bool ok);\n    function transfer(address to, uint value, bytes data, string customFallback) public returns (bool ok);\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n\n    // ERC223 functions\n    function name() public view returns (string _name);\n    function symbol() public view returns (string _symbol);\n    function decimals() public view returns (uint8 _decimals);\n\n    // ERC20 functions and events\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\n\n// contractReceiver\n/**\n * @title ContractReceiver\n * @dev Contract that is working with ERC223 tokens\n */\n contract ContractReceiver {\n\n    struct TKN {\n        address sender;\n        uint value;\n        bytes data;\n        bytes4 sig;\n    }\n\n    function tokenFallback(address _from, uint _value, bytes _data) public pure {\n        TKN memory tkn;\n        tkn.sender = _from;\n        tkn.value = _value;\n        tkn.data = _data;\n        uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n        tkn.sig = bytes4(u);\n        \n        /*\n         * tkn variable is analogue of msg variable of Ether transaction\n         * tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\n         * tkn.value the number of tokens that were sent   (analogue of msg.value)\n         * tkn.data is data of token transaction   (analogue of msg.data)\n         * tkn.sig is 4 bytes signature of function if data of token transaction is a function execution\n         */\n    }\n}\n\n// about animetoken\n/**\n * @title ANIMETOKEN\n * @author ANIMETOKEN Project\n * @dev ANIMETOKEN is an ERC223 Token with ERC20 functions and events\n *      Fully backward compatible with ERC20\n */\ncontract ANIMETOKEN is ERC223, Ownable {\n    using SafeMath for uint256;\n\n    string public name = \"ANIMETOKEN\";\n    string public symbol = \"ANIME\";\n    uint8 public decimals = 8;\n    uint256 public totalSupply = 50e9 * 1e8;\n    uint256 public distributeAmount = 0;\n    bool public mintingFinished = false;\n    \n    address public founder = 0xA0Ed4122f9624f60C77E13b3fD54906F803f9c0F;\n    address public development = 0xf97E3932C848EfFF4241FEdC3640F5b6913D4176;\n    address public marketing = 0xA71917ac766F0B64CCAF1575b5502311681e85Dd;\n    address public lockup = 0x76642f857aF9eFD19FA06eA307d2a61281c06FdF;\n\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping (address => uint256)) public allowance;\n    mapping (address => bool) public frozenAccount;\n    mapping (address => uint256) public unlockUnixTime;\n    \n    event FrozenFunds(address indexed target, bool frozen);\n    event LockedFunds(address indexed target, uint256 locked);\n    event Burn(address indexed from, uint256 amount);\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n\n\n    // constructor\n    /** \n     * @dev Constructor is called only once and can not be called again\n     */\n    function ANIMETOKEN() public {\n        owner = founder;\n        \n        balanceOf[founder] = totalSupply.mul(50).div(100);\n        balanceOf[development] = totalSupply.mul(20).div(100);\n        balanceOf[marketing] = totalSupply.mul(20).div(100);\n        balanceOf[lockup] = totalSupply.mul(10).div(100);\n    }\n\n\n    function name() public view returns (string _name) {\n        return name;\n    }\n\n    function symbol() public view returns (string _symbol) {\n        return symbol;\n    }\n\n    function decimals() public view returns (uint8 _decimals) {\n        return decimals;\n    }\n\n    function totalSupply() public view returns (uint256 _totalSupply) {\n        return totalSupply;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balanceOf[_owner];\n    }\n\n\n    // suspend\n    /**\n     * @dev Prevent targets from sending or receiving tokens\n     * @param targets Addresses to be frozen\n     * @param isFrozen either to freeze it or not\n     */\n    function freezeAccounts(address[] targets, bool isFrozen) onlyOwner public {\n        require(targets.length > 0);\n\n        for (uint j = 0; j < targets.length; j++) {\n            require(targets[j] != 0x0);\n            frozenAccount[targets[j]] = isFrozen;\n            FrozenFunds(targets[j], isFrozen);\n        }\n    }\n\n    // lockup\n    /**\n     * @dev Prevent targets from sending or receiving tokens by setting Unix times\n     * @param targets Addresses to be locked funds\n     * @param unixTimes Unix times when locking up will be finished\n     */\n    function lockupAccounts(address[] targets, uint[] unixTimes) onlyOwner public {\n        require(targets.length > 0\n                && targets.length == unixTimes.length);\n                \n        for(uint j = 0; j < targets.length; j++){\n            require(unlockUnixTime[targets[j]] < unixTimes[j]);\n            unlockUnixTime[targets[j]] = unixTimes[j];\n            LockedFunds(targets[j], unixTimes[j]);\n        }\n    }\n\n\n    // transfer\n    /**\n     * @dev Function that is called when a user or another contract wants to transfer funds\n     */\n    function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success) {\n        require(_value > 0\n                && frozenAccount[msg.sender] == false \n                && frozenAccount[_to] == false\n                && now > unlockUnixTime[msg.sender] \n                && now > unlockUnixTime[_to]);\n\n        if (isContract(_to)) {\n            require(balanceOf[msg.sender] >= _value);\n            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n            balanceOf[_to] = balanceOf[_to].add(_value);\n            assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\n            Transfer(msg.sender, _to, _value, _data);\n            Transfer(msg.sender, _to, _value);\n            return true;\n        } else {\n            return transferToAddress(_to, _value, _data);\n        }\n    }\n\n    function transfer(address _to, uint _value, bytes _data) public  returns (bool success) {\n        require(_value > 0\n                && frozenAccount[msg.sender] == false \n                && frozenAccount[_to] == false\n                && now > unlockUnixTime[msg.sender] \n                && now > unlockUnixTime[_to]);\n\n        if (isContract(_to)) {\n            return transferToContract(_to, _value, _data);\n        } else {\n            return transferToAddress(_to, _value, _data);\n        }\n    }\n\n    /**\n     * @dev Standard function transfer similar to ERC20 transfer with no _data\n     *      Added due to backwards compatibility reasons\n     */\n    function transfer(address _to, uint _value) public returns (bool success) {\n        require(_value > 0\n                && frozenAccount[msg.sender] == false \n                && frozenAccount[_to] == false\n                && now > unlockUnixTime[msg.sender] \n                && now > unlockUnixTime[_to]);\n\n        bytes memory empty;\n        if (isContract(_to)) {\n            return transferToContract(_to, _value, empty);\n        } else {\n            return transferToAddress(_to, _value, empty);\n        }\n    }\n\n    // assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n    function isContract(address _addr) private view returns (bool is_contract) {\n        uint length;\n        assembly {\n            //retrieve the size of the code on target address, this needs assembly\n            length := extcodesize(_addr)\n        }\n        return (length > 0);\n    }\n\n    // function that is called when transaction target is an address\n    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n        balanceOf[_to] = balanceOf[_to].add(_value);\n        Transfer(msg.sender, _to, _value, _data);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    // function that is called when transaction target is a contract\n    function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n        balanceOf[_to] = balanceOf[_to].add(_value);\n        ContractReceiver receiver = ContractReceiver(_to);\n        receiver.tokenFallback(msg.sender, _value, _data);\n        Transfer(msg.sender, _to, _value, _data);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n\n\n    /**\n     * @dev Transfer tokens from one address to another\n     *      Added due to backwards compatibility with ERC20\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_to != address(0)\n                && _value > 0\n                && balanceOf[_from] >= _value\n                && allowance[_from][msg.sender] >= _value\n                && frozenAccount[_from] == false \n                && frozenAccount[_to] == false\n                && now > unlockUnixTime[_from] \n                && now > unlockUnixTime[_to]);\n\n        balanceOf[_from] = balanceOf[_from].sub(_value);\n        balanceOf[_to] = balanceOf[_to].add(_value);\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Allows _spender to spend no more than _value tokens in your behalf\n     *      Added due to backwards compatibility with ERC20\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender\n     *      Added due to backwards compatibility with ERC20\n     * @param _owner address The address which owns the funds\n     * @param _spender address The address which will spend the funds\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowance[_owner][_spender];\n    }\n\n\n    // burn\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _from The address that will burn the tokens.\n     * @param _unitAmount The amount of token to be burned.\n     */\n    function burn(address _from, uint256 _unitAmount) onlyOwner public {\n        require(_unitAmount > 0\n                && balanceOf[_from] >= _unitAmount);\n\n        balanceOf[_from] = balanceOf[_from].sub(_unitAmount);\n        totalSupply = totalSupply.sub(_unitAmount);\n        Burn(_from, _unitAmount);\n    }\n\n\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n    \n    \n    // mint\n    /**\n     * @dev Function to mint tokens\n     * @param _to The address that will receive the minted tokens.\n     * @param _unitAmount The amount of tokens to mint.\n     */\n    function mint(address _to, uint256 _unitAmount) onlyOwner canMint public returns (bool) {\n        require(_unitAmount > 0);\n        \n        totalSupply = totalSupply.add(_unitAmount);\n        balanceOf[_to] = balanceOf[_to].add(_unitAmount);\n        Mint(_to, _unitAmount);\n        Transfer(address(0), _to, _unitAmount);\n        return true;\n    }\n\n    /**\n     * @dev Function to stop minting new tokens.\n     */\n    function finishMinting() onlyOwner canMint public returns (bool) {\n        mintingFinished = true;\n        MintFinished();\n        return true;\n    }\n\n\n    // multisend\n    /**\n     * @dev Function to distribute tokens to the list of addresses by the provided amount\n     */\n    function distributeAirdrop(address[] addresses, uint256 amount) public returns (bool) {\n        require(amount > 0 \n                && addresses.length > 0\n                && frozenAccount[msg.sender] == false\n                && now > unlockUnixTime[msg.sender]);\n\n        amount = amount.mul(1e8);\n        uint256 totalAmount = amount.mul(addresses.length);\n        require(balanceOf[msg.sender] >= totalAmount);\n        \n        for (uint j = 0; j < addresses.length; j++) {\n            require(addresses[j] != 0x0\n                    && frozenAccount[addresses[j]] == false\n                    && now > unlockUnixTime[addresses[j]]);\n\n            balanceOf[addresses[j]] = balanceOf[addresses[j]].add(amount);\n            Transfer(msg.sender, addresses[j], amount);\n        }\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(totalAmount);\n        return true;\n    }\n\n    function distributeAirdrop(address[] addresses, uint[] amounts) public returns (bool) {\n        require(addresses.length > 0\n                && addresses.length == amounts.length\n                && frozenAccount[msg.sender] == false\n                && now > unlockUnixTime[msg.sender]);\n                \n        uint256 totalAmount = 0;\n        \n        for(uint j = 0; j < addresses.length; j++){\n            require(amounts[j] > 0\n                    && addresses[j] != 0x0\n                    && frozenAccount[addresses[j]] == false\n                    && now > unlockUnixTime[addresses[j]]);\n                    \n            amounts[j] = amounts[j].mul(1e8);\n            totalAmount = totalAmount.add(amounts[j]);\n        }\n        require(balanceOf[msg.sender] >= totalAmount);\n        \n        for (j = 0; j < addresses.length; j++) {\n            balanceOf[addresses[j]] = balanceOf[addresses[j]].add(amounts[j]);\n            Transfer(msg.sender, addresses[j], amounts[j]);\n        }\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(totalAmount);\n        return true;\n    }\n\n    /**\n     * @dev Function to collect tokens from the list of addresses\n     */\n    function collectTokens(address[] addresses, uint[] amounts) onlyOwner public returns (bool) {\n        require(addresses.length > 0\n                && addresses.length == amounts.length);\n\n        uint256 totalAmount = 0;\n        \n        for (uint j = 0; j < addresses.length; j++) {\n            require(amounts[j] > 0\n                    && addresses[j] != 0x0\n                    && frozenAccount[addresses[j]] == false\n                    && now > unlockUnixTime[addresses[j]]);\n                    \n            amounts[j] = amounts[j].mul(1e8);\n            require(balanceOf[addresses[j]] >= amounts[j]);\n            balanceOf[addresses[j]] = balanceOf[addresses[j]].sub(amounts[j]);\n            totalAmount = totalAmount.add(amounts[j]);\n            Transfer(addresses[j], msg.sender, amounts[j]);\n        }\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(totalAmount);\n        return true;\n    }\n\n\n    function setDistributeAmount(uint256 _unitAmount) onlyOwner public {\n        distributeAmount = _unitAmount;\n    }\n    \n    /**\n     * @dev Function to distribute tokens to the msg.sender automatically\n     *      If distributeAmount is 0, this function doesn't work\n     */\n    function autoDistribute() payable public {\n        require(distributeAmount > 0\n                && balanceOf[founder] >= distributeAmount\n                && frozenAccount[msg.sender] == false\n                && now > unlockUnixTime[msg.sender]);\n        if(msg.value > 0) founder.transfer(msg.value);\n        \n        balanceOf[founder] = balanceOf[founder].sub(distributeAmount);\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(distributeAmount);\n        Transfer(founder, msg.sender, distributeAmount);\n    }\n\n    /**\n     * @dev fallback function\n     */\n    function() payable public {\n        autoDistribute();\n     }\n\n}",
  "bytecode": "60606040526040805190810160405280600a81526020017f414e494d45544f4b454e00000000000000000000000000000000000000000000815250600290805190602001906200005192919062000605565b506040805190810160405280600581526020017f414e494d45000000000000000000000000000000000000000000000000000000815250600390805190602001906200009f92919062000605565b506008600460006101000a81548160ff021916908360ff160217905550674563918244f4000060055560006006556000600760006101000a81548160ff02191690831515021790555073a0ed4122f9624f60c77e13b3fd54906f803f9c0f600760016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073f97e3932c848efff4241fedc3640f5b6913d4176600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073a71917ac766f0b64ccaf1575b5502311681e85dd600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507376642f857af9efd19fa06ea307d2a61281c06fdf600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034156200024857600080fd5b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620003356064620003186032600554620005aa6401000000000262003b0b179091906401000000009004565b620005e9640100000000026200420d179091906401000000009004565b600b6000600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550620003e36064620003c66014600554620005aa6401000000000262003b0b179091906401000000009004565b620005e9640100000000026200420d179091906401000000009004565b600b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550620004916064620004746014600554620005aa6401000000000262003b0b179091906401000000009004565b620005e9640100000000026200420d179091906401000000009004565b600b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506200053f606462000522600a600554620005aa6401000000000262003b0b179091906401000000009004565b620005e9640100000000026200420d179091906401000000009004565b600b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550620006b4565b6000806000841415620005c15760009150620005e2565b8284029050828482811515620005d357fe5b04141515620005de57fe5b8091505b5092915050565b6000808284811515620005f857fe5b0490508091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200064857805160ff191683800117855562000679565b8280016001018555821562000679579182015b82811115620006785782518255916020019190600101906200065b565b5b5090506200068891906200068c565b5090565b620006b191905b80821115620006ad57600081600090555060010162000693565b5090565b90565b61425480620006c46000396000f30060606040526004361061018b576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305d2035b1461019557806306490f47146101c257806306fdde0314610217578063095ea7b3146102a557806318160ddd146102ff57806323b872dd146103285780632d3e474a146103a1578063313ce567146103f657806340c10f19146104255780634d853ee51461047f5780634f25eced146104d457806364ddc605146104fd57806370a08231146105975780637b929c27146105e45780637d64bcb4146106395780638da5cb5b1461066657806394594625146106bb57806395d89b41146107365780639dc29fac146107c4578063a8f11eb914610806578063a9059cbb14610810578063b414d4b61461086a578063be45fd62146108bb578063c341b9f614610958578063cbbe974b146109bd578063d39b1d4814610a0a578063dd62ed3e14610a2d578063dd92459414610a99578063f0dc417114610b4b578063f2fde38b14610bfd578063f6368f8a14610c36575b610193610d16565b005b34156101a057600080fd5b6101a86110a5565b604051808215151515815260200191505060405180910390f35b34156101cd57600080fd5b6101d56110b8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561022257600080fd5b61022a6110de565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561026a57808201518184015260208101905061024f565b50505050905090810190601f1680156102975780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102b057600080fd5b6102e5600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611186565b604051808215151515815260200191505060405180910390f35b341561030a57600080fd5b610312611278565b6040518082815260200191505060405180910390f35b341561033357600080fd5b610387600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611282565b604051808215151515815260200191505060405180910390f35b34156103ac57600080fd5b6103b4611793565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561040157600080fd5b6104096117b9565b604051808260ff1660ff16815260200191505060405180910390f35b341561043057600080fd5b610465600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506117d0565b604051808215151515815260200191505060405180910390f35b341561048a57600080fd5b6104926119c7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156104df57600080fd5b6104e76119ed565b6040518082815260200191505060405180910390f35b341561050857600080fd5b610595600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919050506119f3565b005b34156105a257600080fd5b6105ce600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611bf7565b6040518082815260200191505060405180910390f35b34156105ef57600080fd5b6105f7611c40565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561064457600080fd5b61064c611c66565b604051808215151515815260200191505060405180910390f35b341561067157600080fd5b610679611d2e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156106c657600080fd5b61071c600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019091905050611d54565b604051808215151515815260200191505060405180910390f35b341561074157600080fd5b6107496121a3565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561078957808201518184015260208101905061076e565b50505050905090810190601f1680156107b65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156107cf57600080fd5b610804600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061224b565b005b61080e610d16565b005b341561081b57600080fd5b610850600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050612403565b604051808215151515815260200191505060405180910390f35b341561087557600080fd5b6108a1600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061259d565b604051808215151515815260200191505060405180910390f35b34156108c657600080fd5b61093e600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506125bd565b604051808215151515815260200191505060405180910390f35b341561096357600080fd5b6109bb600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091908035151590602001909190505061274e565b005b34156109c857600080fd5b6109f4600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506128f0565b6040518082815260200191505060405180910390f35b3415610a1557600080fd5b610a2b6004808035906020019091905050612908565b005b3415610a3857600080fd5b610a83600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061296e565b6040518082815260200191505060405180910390f35b3415610aa457600080fd5b610b31600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919050506129f5565b604051808215151515815260200191505060405180910390f35b3415610b5657600080fd5b610be360048080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050612efc565b604051808215151515815260200191505060405180910390f35b3415610c0857600080fd5b610c34600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506133cd565b005b3415610c4157600080fd5b610cfc600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050613525565b604051808215151515815260200191505060405180910390f35b6000600654118015610d8b5750600654600b6000600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015610de7575060001515600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b8015610e315750600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442115b1515610e3c57600080fd5b6000341115610ea857600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501515610ea757600080fd5b5b610f1e600654600b6000600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613ad490919063ffffffff16565b600b6000600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610fd7600654600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613aed90919063ffffffff16565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6006546040518082815260200191505060405180910390a3565b600760009054906101000a900460ff1681565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6110e66141e5565b60028054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561117c5780601f106111515761010080835404028352916020019161117c565b820191906000526020600020905b81548152906001019060200180831161115f57829003601f168201915b5050505050905090565b600081600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600554905090565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156112c05750600082115b801561130b575081600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015611393575081600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b80156113ef575060001515600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b801561144b575060001515600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b80156114955750600e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442115b80156114df5750600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442115b15156114ea57600080fd5b61153c82600b60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613ad490919063ffffffff16565b600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506115d182600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613aed90919063ffffffff16565b600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506116a382600c60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613ad490919063ffffffff16565b600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600460009054906101000a900460ff16905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561182e57600080fd5b600760009054906101000a900460ff1615151561184a57600080fd5b60008211151561185957600080fd5b61186e82600554613aed90919063ffffffff16565b6005819055506118c682600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613aed90919063ffffffff16565b600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611a5157600080fd5b60008351118015611a63575081518351145b1515611a6e57600080fd5b600090505b8251811015611bf2578181815181101515611a8a57fe5b90602001906020020151600e60008584815181101515611aa657fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515611af757600080fd5b8181815181101515611b0557fe5b90602001906020020151600e60008584815181101515611b2157fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508281815181101515611b7757fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff167f1bd6fb9fa2c39ce5d0d2afa1eaba998963eb5f553fd862c94f131aa9e35c15778383815181101515611bc657fe5b906020019060200201516040518082815260200191505060405180910390a28080600101915050611a73565b505050565b6000600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611cc457600080fd5b600760009054906101000a900460ff16151515611ce057600080fd5b6001600760006101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008084118015611d69575060008551115b8015611dc5575060001515600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b8015611e0f5750600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442115b1515611e1a57600080fd5b611e316305f5e10085613b0b90919063ffffffff16565b9350611e47855185613b0b90919063ffffffff16565b915081600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515611e9757600080fd5b600090505b84518110156121025760008582815181101515611eb557fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1614158015611f4a575060001515600d60008784815181101515611ef457fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b8015611fab5750600e60008683815181101515611f6357fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442115b1515611fb657600080fd5b61201f84600b60008885815181101515611fcc57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613aed90919063ffffffff16565b600b6000878481518110151561203157fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550848181518110151561208757fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a38080600101915050611e9c565b61215482600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613ad490919063ffffffff16565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060019250505092915050565b6121ab6141e5565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156122415780601f1061221657610100808354040283529160200191612241565b820191906000526020600020905b81548152906001019060200180831161222457829003601f168201915b5050505050905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156122a757600080fd5b6000811180156122f6575080600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b151561230157600080fd5b61235381600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613ad490919063ffffffff16565b600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506123ab81600554613ad490919063ffffffff16565b6005819055508173ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a25050565b600061240d6141f9565b60008311801561246d575060001515600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b80156124c9575060001515600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b80156125135750600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442115b801561255d5750600e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442115b151561256857600080fd5b61257184613b46565b1561258857612581848483613b59565b9150612596565b612593848483613f33565b91505b5092915050565b600d6020528060005260406000206000915054906101000a900460ff1681565b6000808311801561261e575060001515600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b801561267a575060001515600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b80156126c45750600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442115b801561270e5750600e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442115b151561271957600080fd5b61272284613b46565b1561273957612732848484613b59565b9050612747565b612744848484613f33565b90505b9392505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156127ac57600080fd5b600083511115156127bc57600080fd5b600090505b82518110156128eb57600083828151811015156127da57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff161415151561280757600080fd5b81600d6000858481518110151561281a57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550828181518110151561288357fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff167f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a583604051808215151515815260200191505060405180910390a280806001019150506127c1565b505050565b600e6020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561296457600080fd5b8060068190555050565b6000600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000806000808551118015612a0b575083518551145b8015612a67575060001515600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b8015612ab15750600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442115b1515612abc57600080fd5b60009150600090505b8451811015612c855760008482815181101515612ade57fe5b90602001906020020151118015612b23575060008582815181101515612b0057fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1614155b8015612b96575060001515600d60008784815181101515612b4057fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b8015612bf75750600e60008683815181101515612baf57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442115b1515612c0257600080fd5b612c306305f5e1008583815181101515612c1857fe5b90602001906020020151613b0b90919063ffffffff16565b8482815181101515612c3e57fe5b9060200190602002018181525050612c768482815181101515612c5d57fe5b9060200190602002015183613aed90919063ffffffff16565b91508080600101915050612ac5565b81600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515612cd357600080fd5b600090505b8451811015612e5b57612d618482815181101515612cf257fe5b90602001906020020151600b60008885815181101515612d0e57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613aed90919063ffffffff16565b600b60008784815181101515612d7357fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508481815181101515612dc957fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8684815181101515612e2f57fe5b906020019060200201516040518082815260200191505060405180910390a38080600101915050612cd8565b612ead82600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613ad490919063ffffffff16565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060019250505092915050565b6000806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612f5d57600080fd5b60008551118015612f6f575083518551145b1515612f7a57600080fd5b60009150600090505b845181101561332c5760008482815181101515612f9c57fe5b90602001906020020151118015612fe1575060008582815181101515612fbe57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1614155b8015613054575060001515600d60008784815181101515612ffe57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b80156130b55750600e6000868381518110151561306d57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442115b15156130c057600080fd5b6130ee6305f5e10085838151811015156130d657fe5b90602001906020020151613b0b90919063ffffffff16565b84828151811015156130fc57fe5b9060200190602002018181525050838181518110151561311857fe5b90602001906020020151600b6000878481518110151561313457fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561318657600080fd5b613206848281518110151561319757fe5b90602001906020020151600b600088858151811015156131b357fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613ad490919063ffffffff16565b600b6000878481518110151561321857fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061328a848281518110151561327157fe5b9060200190602002015183613aed90919063ffffffff16565b91503373ffffffffffffffffffffffffffffffffffffffff1685828151811015156132b157fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef868481518110151561330057fe5b906020019060200201516040518082815260200191505060405180910390a38080600101915050612f83565b61337e82600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613aed90919063ffffffff16565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060019250505092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561342957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561346557600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008084118015613586575060001515600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b80156135e2575060001515600d60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b801561362c5750600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442115b80156136765750600e60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442115b151561368157600080fd5b61368a85613b46565b15613abe5783600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156136dd57600080fd5b61372f84600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613ad490919063ffffffff16565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506137c484600b60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613aed90919063ffffffff16565b600b60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff166000836040518082805190602001908083835b6020831015156138565780518252602082019150602081019050602083039250613831565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207c01000000000000000000000000000000000000000000000000000000009004903387876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828051906020019080838360005b8381101561393757808201518184015260208101905061391c565b50505050905090810190601f1680156139645780820380516001836020036101000a031916815260200191505b50935050505060006040518083038185886187965a03f19350505050151561398857fe5b826040518082805190602001908083835b6020831015156139be5780518252602082019150602081019050602083039250613999565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16876040518082815260200191505060405180910390a48473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019050613acc565b613ac9858585613f33565b90505b949350505050565b6000828211151515613ae257fe5b818303905092915050565b6000808284019050838110151515613b0157fe5b8091505092915050565b6000806000841415613b205760009150613b3f565b8284029050828482811515613b3157fe5b04141515613b3b57fe5b8091505b5092915050565b600080823b905060008111915050919050565b60008083600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515613baa57600080fd5b613bfc84600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613ad490919063ffffffff16565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613c9184600b60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613aed90919063ffffffff16565b600b60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508490508073ffffffffffffffffffffffffffffffffffffffff1663c0ee0b8a3386866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015613d99578082015181840152602081019050613d7e565b50505050905090810190601f168015613dc65780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1515613de657600080fd5b6102c65a03f11515613df757600080fd5b505050826040518082805190602001908083835b602083101515613e305780518252602082019150602081019050602083039250613e0b565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16876040518082815260200191505060405180910390a48473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019150509392505050565b600082600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515613f8357600080fd5b613fd583600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613ad490919063ffffffff16565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061406a83600b60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613aed90919063ffffffff16565b600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816040518082805190602001908083835b6020831015156140e357805182526020820191506020810190506020830392506140be565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16866040518082815260200191505060405180910390a48373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600190509392505050565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b600080828481151561421b57fe5b04905080915050929150505600a165627a7a72305820d5ff02f315a2f598e9718f304ec4900fef8be84d67a836986505a94ca530f2da0029"
}