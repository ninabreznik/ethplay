{
  "address": "0x4a527d8fc13c5203ab24ba0944f4cb14658d1db6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MITx_Token",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-14\n*/\n\npragma solidity ^0.4.17;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner(){\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n   */\n  function transfer(address _to, uint256 _value) public returns (bool){\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n   */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  /**\n  * @dev Transfer tokens from one address to another\n  * @param _from address The address which you want to send tokens from\n  * @param _to address The address which you want to transfer to\n  * @param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n  * @param _spender The address which will spend the funds.\n  * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n  * @dev Function to check the amount of tokens that an owner allowed to a spender.\n  * @param _owner address The address which owns the funds.\n    * @param _spender address The address which will spend the funds.\n    * @return A uint256 specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n}\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n  * @dev Function to mint tokens\n  * @param _to The address that will recieve the minted tokens.\n    * @param _amount The amount of tokens to mint.\n    * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Transfer(0X0, _to, _amount);\n    return true;\n  }\n\n  /**\n  * @dev Function to stop minting new tokens.\n  * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\ncontract MITx_Token is MintableToken {\n  string public name = \"Morpheus Infrastructure Token\";\n  string public symbol = \"MITx\";\n  uint256 public decimals = 18;\n\n  bool public tradingStarted = false;\n\n  /**\n  * @dev modifier that throws if trading has not started yet\n   */\n  modifier hasStartedTrading() {\n    require(tradingStarted);\n    _;\n  }\n\n  /**\n  * @dev Allows the owner to enable the trading. This can not be undone\n  */\n  function startTrading() public onlyOwner {\n    tradingStarted = true;\n  }\n\n  /**\n   * @dev Allows anyone to transfer the MiT tokens once trading has started\n   * @param _to the recipient address of the tokens.\n   * @param _value number of tokens to be transfered.\n   */\n  function transfer(address _to, uint _value) hasStartedTrading public returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  /**\n  * @dev Allows anyone to transfer the MiT tokens once trading has started\n  * @param _from address The address which you want to send tokens from\n  * @param _to address The address which you want to transfer to\n  * @param _value uint the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint _value) hasStartedTrading public returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function emergencyERC20Drain( ERC20 oddToken, uint amount ) public {\n    oddToken.transfer(owner, amount);\n  }\n}\n\ncontract MITx_TokenSale is Ownable {\n  using SafeMath for uint256;\n\n  // The token being sold\n  MITx_Token public token;\n\n  uint256 public decimals;  \n  uint256 public oneCoin;\n\n  // start and end block where investments are allowed (both inclusive)\n  uint256 public startTimestamp;\n  uint256 public endTimestamp;\n   // timestamps for tiers\n  uint256 public tier1Timestamp;\n  uint256 public tier2Timestamp;\n  uint256 public tier3Timestamp;\n\n  // address where funds are collected\n  address public multiSig;\n\n  function setWallet(address _newWallet) public onlyOwner {\n    multiSig = _newWallet;\n  }\n\n  // These will be set by setTier()\n  uint256 public rate; // how many token units a buyer gets per wei\n  uint256 public minContribution = 0.0001 ether;  // minimum contributio to participate in tokensale\n  uint256 public maxContribution = 200000 ether;  // default limit to tokens that the users can buy\n\n  // ***************************\n\n  // amount of raised money in wei\n  uint256 public weiRaised;\n\n  // amount of raised tokens \n  uint256 public tokenRaised;\n\n  // maximum amount of tokens being created\n  uint256 public maxTokens;\n\n  // maximum amount of tokens for sale\n  uint256 public tokensForSale;  \n\n  // number of participants in presale\n  uint256 public numberOfPurchasers = 0;\n\n  //  for whitelist\n  address public cs;\n\n\n  // switch on/off the authorisation , default: true\n  bool    public freeForAll = true;\n\n  mapping (address => bool) public authorised; // just to annoy the heck out of americans\n\n  event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount);\n  event SaleClosed();\n\n  function MITx_TokenSale() public {\n    startTimestamp = 1518453797; // 1518453797 converts to Tuesday February 13, 2018 00:43:17 (am) in time zone Asia/Singapore (+08)\n        tier1Timestamp = 1519401599; //1519401599 converts to Friday February 23, 2018 23:59:59 (pm) in time zone Asia/Singapore (+08)\n        tier2Timestamp = 1520611199 ; //1520611199 converts to Friday March 09, 2018 23:59:59 (pm) in time zone Asia/Singapore (+08)\n        tier3Timestamp = 1521820799; // 1521820799 converts to Friday March 23, 2018 23:59:59 (pm) in time zone Asia/Singapore (+08)       \n    endTimestamp = 1523807999;   // 1523807999 converts to Sunday April 15, 2018 23:59:59 (pm) in time zone Asia/Singapore (+08)\n   \n    multiSig = 0xD00d085F125EAFEA9e8c5D3f4bc25e6D0c93Af0e;\n    rate = 8000;\n    token = new MITx_Token();\n    decimals = token.decimals();\n    oneCoin = 10 ** decimals;\n    maxTokens = 1000 * (10**6) * oneCoin;\n    tokensForSale = 375 * (10**6) * oneCoin;\n        \n  }\n\n /**\n  * @dev Calculates the amount of bonus coins the buyer gets\n  */\n  function setTier() internal {\n \n    if (now <= tier1Timestamp) {  // during 1th period they get 50% bonus\n      rate = 8000;\n      minContribution = 1 ether;\n      maxContribution = 1000000 ether;\n    } else if (now <= tier2Timestamp) { // during 2th period they get 35% bonus\n      rate = 10800;\n      minContribution = 0.001 ether;\n      maxContribution = 1000000 ether;\n    } else if (now <= tier3Timestamp) { // during 3th period they get 20% bonus\n      rate = 9600;\n      minContribution = 0.001 ether;\n      maxContribution = 1000000 ether;\n    } else { // during 4th period they get 0% bonus\n      rate = 8000;\n      minContribution = 0.001 ether;\n      maxContribution = 1000000 ether;\n    }\n  }\n  // @return true if crowdsale event has ended\n  function hasEnded() public constant returns (bool) {\n    if (now > endTimestamp)\n      return true;\n    if (tokenRaised >= tokensForSale)\n      return true; // if we reach the tokensForSale\n    return false;\n  }\n\n  /**\n  * @dev throws if person sending is not contract owner or cs role\n   */\n  modifier onlyCSorOwner() {\n    require((msg.sender == owner) || (msg.sender==cs));\n    _;\n  }\n   modifier onlyCS() {\n    require(msg.sender == cs);\n    _;\n  }\n\n  /**\n  * @dev throws if person sending is not authorised or sends nothing\n  */\n  modifier onlyAuthorised() {\n    require (authorised[msg.sender] || freeForAll);\n    require (now >= startTimestamp);\n    require (!(hasEnded()));\n    require (multiSig != 0x0);\n    require(tokensForSale > tokenRaised); // check we are not over the number of tokensForSale\n    _;\n  }\n\n  /**\n  * @dev authorise an account to participate\n  */\n  function authoriseAccount(address whom) onlyCSorOwner public {\n    authorised[whom] = true;\n  }\n\n  /**\n  * @dev authorise a lot of accounts in one go\n  */\n  function authoriseManyAccounts(address[] many) onlyCSorOwner public {\n    for (uint256 i = 0; i < many.length; i++) {\n      authorised[many[i]] = true;\n    }\n  }\n\n  /**\n  * @dev ban an account from participation (default)\n  */\n  function blockAccount(address whom) onlyCSorOwner public {\n    authorised[whom] = false;\n   }  \n    \n  /**\n  * @dev set a new CS representative\n  */\n  function setCS(address newCS) onlyOwner public {\n    cs = newCS;\n  }\n\n   /**\n  * @dev set a freeForAll to true ( in case you leave to anybody to send ethers)\n  */\n  function switchONfreeForAll() onlyCSorOwner public {\n    freeForAll = true;\n  }\n   /**\n  * @dev set a freeForAll to false ( in case you need to authorise the acconts)\n  */\n  function switchOFFfreeForAll() onlyCSorOwner public {\n    freeForAll = false;\n  }\n\n  function placeTokens(address beneficiary, uint256 _tokens) onlyCS public {\n    //check minimum and maximum amount\n    require(_tokens != 0);\n    require(!hasEnded());\n    require(tokenRaised <= maxTokens);\n    require(now <= endTimestamp);\n    uint256 amount = 0;\n    if (token.balanceOf(beneficiary) == 0) {\n      numberOfPurchasers++;\n    }\n    tokenRaised = tokenRaised.add(_tokens); // so we can go slightly over\n    token.mint(beneficiary, _tokens);\n    TokenPurchase(beneficiary, amount, _tokens);\n  }\n\n  // low level token purchase function\n  function buyTokens(address beneficiary, uint256 amount) onlyAuthorised internal {\n\n    setTier();   \n   \n    // calculate token amount to be created\n    uint256 tokens = amount.mul(rate);\n\n    // update state\n    weiRaised = weiRaised.add(amount);\n    if (token.balanceOf(beneficiary) == 0) {\n      numberOfPurchasers++;\n    }\n    tokenRaised = tokenRaised.add(tokens); // so we can go slightly over\n    token.mint(beneficiary, tokens);\n    TokenPurchase(beneficiary, amount, tokens);\n    multiSig.transfer(this.balance); // better in case any other ether ends up here\n  }\n\n  // transfer ownership of the token to the owner of the presale contract\n  function finishSale() public onlyOwner {\n    require(hasEnded());\n\n    // assign the rest of the 60M tokens to the reserve\n    uint unassigned;\n    if(maxTokens > tokenRaised) {\n      unassigned  = maxTokens.sub(tokenRaised);\n      token.mint(multiSig,unassigned);\n    }\n    token.finishMinting();\n    token.transferOwnership(owner);\n    SaleClosed();\n  }\n\n  // fallback function can be used to buy tokens\n  function () public payable {\n    buyTokens(msg.sender, msg.value);\n  }\n\n  function emergencyERC20Drain( ERC20 oddToken, uint amount ) public {\n    oddToken.transfer(owner, amount);\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradingStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oddToken\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyERC20Drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60606040526000600360146101000a81548160ff0219169083151502179055506040805190810160405280601d81526020017f4d6f72706865757320496e66726173747275637475726520546f6b656e000000815250600490805190602001906200006c92919062000122565b506040805190810160405280600481526020017f4d4954780000000000000000000000000000000000000000000000000000000081525060059080519060200190620000ba92919062000122565b5060126006556000600760006101000a81548160ff02191690831515021790555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001d1565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200016557805160ff191683800117855562000196565b8280016001018555821562000196579182015b828111156200019557825182559160200191906001019062000178565b5b509050620001a59190620001a9565b5090565b620001ce91905b80821115620001ca576000816000905550600101620001b0565b5090565b90565b6113ac80620001e16000396000f3006060604052600436106100f1576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305d2035b146100f657806306fdde0314610123578063095ea7b3146101b157806318160ddd1461020b57806323b872dd14610234578063293230b8146102ad578063313ce567146102c257806340c10f19146102eb5780635b4f472a1461034557806370a08231146103725780637d64bcb4146103bf5780638da5cb5b146103ec57806395d89b4114610441578063a9059cbb146104cf578063db0e16f114610529578063dd62ed3e1461056b578063f2fde38b146105d7575b600080fd5b341561010157600080fd5b610109610610565b604051808215151515815260200191505060405180910390f35b341561012e57600080fd5b610136610623565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561017657808201518184015260208101905061015b565b50505050905090810190601f1680156101a35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101bc57600080fd5b6101f1600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506106c1565b604051808215151515815260200191505060405180910390f35b341561021657600080fd5b61021e610848565b6040518082815260200191505060405180910390f35b341561023f57600080fd5b610293600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061084e565b604051808215151515815260200191505060405180910390f35b34156102b857600080fd5b6102c061087f565b005b34156102cd57600080fd5b6102d56108f8565b6040518082815260200191505060405180910390f35b34156102f657600080fd5b61032b600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506108fe565b604051808215151515815260200191505060405180910390f35b341561035057600080fd5b610358610a82565b604051808215151515815260200191505060405180910390f35b341561037d57600080fd5b6103a9600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610a95565b6040518082815260200191505060405180910390f35b34156103ca57600080fd5b6103d2610ade565b604051808215151515815260200191505060405180910390f35b34156103f757600080fd5b6103ff610b8a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561044c57600080fd5b610454610bb0565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610494578082015181840152602081019050610479565b50505050905090810190601f1680156104c15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104da57600080fd5b61050f600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c4e565b604051808215151515815260200191505060405180910390f35b341561053457600080fd5b610569600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c7d565b005b341561057657600080fd5b6105c1600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610d6a565b6040518082815260200191505060405180910390f35b34156105e257600080fd5b61060e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610df1565b005b600360149054906101000a900460ff1681565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106b95780601f1061068e576101008083540402835291602001916106b9565b820191906000526020600020905b81548152906001019060200180831161069c57829003601f168201915b505050505081565b60008082148061074d57506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b151561075857600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b6000600760009054906101000a900460ff16151561086b57600080fd5b610876848484610ec8565b90509392505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108db57600080fd5b6001600760006101000a81548160ff021916908315150217905550565b60065481565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561095c57600080fd5b600360149054906101000a900460ff1615151561097857600080fd5b61098d826000546111ae90919063ffffffff16565b6000819055506109e582600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111ae90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600760009054906101000a900460ff1681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b3c57600080fd5b6001600360146101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c465780601f10610c1b57610100808354040283529160200191610c46565b820191906000526020600020905b815481529060010190602001808311610c2957829003601f168201915b505050505081565b6000600760009054906101000a900460ff161515610c6b57600080fd5b610c7583836111cc565b905092915050565b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515610d4a57600080fd5b6102c65a03f11515610d5b57600080fd5b50505060405180519050505050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e4d57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515610ec55780600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610f0557600080fd5b610f5782600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111ae90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610fec82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461136790919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506110be82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461136790919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60008082840190508381101515156111c257fe5b8091505092915050565b600061122082600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461136790919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506112b582600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111ae90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600082821115151561137557fe5b8183039050929150505600a165627a7a723058209da26d1d76e3aac33806e1d39dd80690cd421b560f8b3b766fa5887c8c5843bf0029"
}