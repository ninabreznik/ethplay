{
  "address": "0x613011f70721573965515dc19360bff13c2cd5c3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NewsTokenContract",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-06\n*/\n\ncontract SafeMath {\n    \n    uint256 constant MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n    function safeAdd(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        require(x <= MAX_UINT256 - y);\n        return x + y;\n    }\n\n    function safeSub(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        require(x >= y);\n        return x - y;\n    }\n\n    function safeMul(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        if (y == 0) {\n            return 0;\n        }\n        require(x <= (MAX_UINT256 / y));\n        return x * y;\n    }\n}\ncontract Owned {\n    address public owner;\n    address public newOwner;\n\n    function Owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        assert(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        require(_newOwner != owner);\n        newOwner = _newOwner;\n    }\n\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        OwnerUpdate(owner, newOwner);\n        owner = newOwner;\n        newOwner = 0x0;\n    }\n\n    event OwnerUpdate(address _prevOwner, address _newOwner);\n}\n\ncontract Lockable is Owned {\n\n    uint256 public lockedUntilBlock;\n\n    event ContractLocked(uint256 _untilBlock, string _reason);\n\n    modifier lockAffected {\n        require(block.number > lockedUntilBlock);\n        _;\n    }\n\n    function lockFromSelf(uint256 _untilBlock, string _reason) internal {\n        lockedUntilBlock = _untilBlock;\n        ContractLocked(_untilBlock, _reason);\n    }\n\n\n    function lockUntil(uint256 _untilBlock, string _reason) onlyOwner public {\n        lockedUntilBlock = _untilBlock;\n        ContractLocked(_untilBlock, _reason);\n    }\n}\ncontract ERC20TokenInterface {\n  function totalSupply() public constant returns (uint256 _totalSupply);\n  function balanceOf(address _owner) public constant returns (uint256 balance);\n  function transfer(address _to, uint256 _value) public returns (bool success);\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n  function approve(address _spender, uint256 _value) public returns (bool success);\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\ncontract TokenRecipientInterface {\n  function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;\n}\n\ncontract ERC20Token is ERC20TokenInterface, SafeMath, Owned, Lockable {\n\n    /* Public variables of the token */\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n\n    bool mintingEnabled = true;\n\n    /* Private variables of the token */\n    uint256 supply = 0;\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowances;\n\n    event Mint(address indexed _to, uint256 _value);\n    event Burn(address indexed _from, uint _value);\n\n    /* Returns total supply of issued tokens */\n    function totalSupply() constant public returns (uint256) {\n        return supply;\n    }\n\n    /* Returns balance of address */\n    function balanceOf(address _owner) constant public returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    /* Transfers tokens from your address to other */\n    function transfer(address _to, uint256 _value) lockAffected public returns (bool success) {\n        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);  // Deduct senders balance\n        balances[_to] = safeAdd(balanceOf(_to), _value);                // Add recivers blaance\n        Transfer(msg.sender, _to, _value);                              // Raise Transfer event\n        return true;\n    }\n\n    /* Approve other address to spend tokens on your account */\n    function approve(address _spender, uint256 _value) lockAffected public returns (bool success) {\n        allowances[msg.sender][_spender] = _value;        // Set allowance\n        Approval(msg.sender, _spender, _value);           // Raise Approval event\n        return true;\n    }\n\n    /* Approve and then communicate the approved contract in a single tx */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) lockAffected public returns (bool success) {\n        TokenRecipientInterface spender = TokenRecipientInterface(_spender);    // Cast spender to tokenRecipient contract\n        approve(_spender, _value);                                              // Set approval to contract for _value\n        spender.receiveApproval(msg.sender, _value, this, _extraData);          // Raise method on _spender contract\n        return true;\n    }\n\n    /* A contract attempts to get the coins */\n    function transferFrom(address _from, address _to, uint256 _value) lockAffected public returns (bool success) {\n        balances[_from] = safeSub(balanceOf(_from), _value);                            // Deduct senders balance\n        balances[_to] = safeAdd(balanceOf(_to), _value);                                // Add recipient blaance\n        allowances[_from][msg.sender] = safeSub(allowances[_from][msg.sender], _value); // Deduct allowance for this address\n        Transfer(_from, _to, _value);                                                   // Raise Transfer event\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n        return allowances[_owner][_spender];\n    }\n\n    function mint(address _to, uint256 _amount) onlyOwner public {\n        require(mintingEnabled);\n        supply = safeAdd(supply, _amount);\n        balances[_to] = safeAdd(balances[_to], _amount);\n        Mint(_to, _amount);\n        Transfer(0x0, _to, _amount);\n    }\n\n    function disableMinting() onlyOwner public {\n        mintingEnabled = false;\n    }\n\n    function burn(uint _amount) public {\n        balances[msg.sender] = safeSub(balanceOf(msg.sender), _amount);\n        supply = safeSub(supply, _amount);\n        Burn(msg.sender, _amount);\n        Transfer(msg.sender, 0x0, _amount);\n    }\n\n    function salvageTokensFromContract(address _tokenAddress, address _to, uint _amount) onlyOwner public {\n        ERC20TokenInterface(_tokenAddress).transfer(_to, _amount);\n    }\n    \n    function killContract() onlyOwner public {\n        selfdestruct(owner);\n    }\n}\n\n\n\ncontract NewsTokenContract is ERC20Token {\n\n  /* Initializes contract */\n  function NewsTokenContract() public {\n    name = \"NewsToken\";\n    symbol = \"NWS\";\n    decimals = 18;\n    lockFromSelf(5170000, \"Lock before crowdsale starts\");\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"killContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"salvageTokensFromContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_untilBlock\",\"type\":\"uint256\"},{\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"lockUntil\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedUntilBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_untilBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"ContractLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60606040526001600560016101000a81548160ff021916908315150217905550600060065534156200003057600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040805190810160405280600981526020017f4e657773546f6b656e000000000000000000000000000000000000000000000081525060039080519060200190620000bd92919062000238565b506040805190810160405280600381526020017f4e57530000000000000000000000000000000000000000000000000000000000815250600490805190602001906200010b92919062000238565b506012600560006101000a81548160ff021916908360ff16021790555062000180624ee3506040805190810160405280601c81526020017f4c6f636b206265666f72652063726f776473616c652073746172747300000000815250620001866401000000000262001908176401000000009004565b620002e7565b816002819055507f2c1bcb4f0c190ca2fcb1bb54323892ec36606ef7958dc7a4e1dc599fe2c1c0f082826040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015620001f8578082015181840152602081019050620001db565b50505050905090810190601f168015620002265780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200027b57805160ff1916838001178555620002ac565b82800160010185558215620002ac579182015b82811115620002ab5782518255916020019190600101906200028e565b5b509050620002bb9190620002bf565b5090565b620002e491905b80821115620002e0576000816000905550600101620002c6565b5090565b90565b6119e380620002f76000396000f30060606040526004361061011d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610122578063095ea7b3146101b057806318160ddd1461020a5780631c02708d1461023357806323b872dd14610248578063313ce567146102c157806340c10f19146102f057806342966c681461033257806370a082311461035557806379ba5097146103a25780637e5cd5c1146103b75780638da5cb5b146103cc57806395d89b4114610421578063a0929cda146104af578063a9059cbb14610510578063b26eafe41461056a578063cae9ca51146105d0578063d4ee1d901461066d578063d8162db7146106c2578063dd62ed3e146106eb578063f2fde38b14610757575b600080fd5b341561012d57600080fd5b610135610790565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561017557808201518184015260208101905061015a565b50505050905090810190601f1680156101a25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101bb57600080fd5b6101f0600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061082e565b604051808215151515815260200191505060405180910390f35b341561021557600080fd5b61021d610930565b6040518082815260200191505060405180910390f35b341561023e57600080fd5b61024661093a565b005b341561025357600080fd5b6102a7600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506109cc565b604051808215151515815260200191505060405180910390f35b34156102cc57600080fd5b6102d4610bfe565b604051808260ff1660ff16815260200191505060405180910390f35b34156102fb57600080fd5b610330600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c11565b005b341561033d57600080fd5b6103536004808035906020019091905050610dc4565b005b341561036057600080fd5b61038c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ecc565b6040518082815260200191505060405180910390f35b34156103ad57600080fd5b6103b5610f15565b005b34156103c257600080fd5b6103ca6110f1565b005b34156103d757600080fd5b6103df611166565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561042c57600080fd5b61043461118b565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610474578082015181840152602081019050610459565b50505050905090810190601f1680156104a15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104ba57600080fd5b61050e600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611229565b005b341561051b57600080fd5b610550600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061134d565b604051808215151515815260200191505060405180910390f35b341561057557600080fd5b6105ce600480803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611478565b005b34156105db57600080fd5b610653600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061157f565b604051808215151515815260200191505060405180910390f35b341561067857600080fd5b610680611703565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156106cd57600080fd5b6106d5611729565b6040518082815260200191505060405180910390f35b34156106f657600080fd5b610741600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061172f565b6040518082815260200191505060405180910390f35b341561076257600080fd5b61078e600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506117b6565b005b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108265780601f106107fb57610100808354040283529160200191610826565b820191906000526020600020905b81548152906001019060200180831161080957829003601f168201915b505050505081565b60006002544311151561084057600080fd5b81600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600654905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561099257fe5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b6000600254431115156109de57600080fd5b6109f06109ea85610ecc565b836118ae565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a45610a3f84610ecc565b836118ca565b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b0e600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836118ae565b600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600560009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c6957fe5b600560019054906101000a900460ff161515610c8457600080fd5b610c90600654826118ca565b600681905550610cdf600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826118ca565b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885826040518082815260200191505060405180910390a28173ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b610dd6610dd033610ecc565b826118ae565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e25600654826118ae565b6006819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a260003373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f7157600080fd5b7f343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561114957fe5b6000600560016101000a81548160ff021916908315150217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112215780601f106111f657610100808354040283529160200191611221565b820191906000526020600020905b81548152906001019060200180831161120457829003601f168201915b505050505081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561128157fe5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561132c57600080fd5b6102c65a03f1151561133d57600080fd5b5050506040518051905050505050565b60006002544311151561135f57600080fd5b61137161136b33610ecc565b836118ae565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506113c66113c084610ecc565b836118ca565b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114d057fe5b816002819055507f2c1bcb4f0c190ca2fcb1bb54323892ec36606ef7958dc7a4e1dc599fe2c1c0f082826040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611540578082015181840152602081019050611525565b50505050905090810190601f16801561156d5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050565b6000806002544311151561159257600080fd5b84905061159f858561082e565b508073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561169557808201518184015260208101905061167a565b50505050905090810190601f1680156116c25780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15156116e357600080fd5b6102c65a03f115156116f457600080fd5b50505060019150509392505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b6000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561180e57fe5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561186a57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008183101515156118bf57600080fd5b818303905092915050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383111515156118fd57600080fd5b818301905092915050565b816002819055507f2c1bcb4f0c190ca2fcb1bb54323892ec36606ef7958dc7a4e1dc599fe2c1c0f082826040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561197857808201518184015260208101905061195d565b50505050905090810190601f1680156119a55780820380516001836020036101000a031916815260200191505b50935050505060405180910390a150505600a165627a7a72305820540fbf37e4772bbf82b7f124d7a44ed572b86d375ef6bca91d4cbb26b8eb453f0029"
}