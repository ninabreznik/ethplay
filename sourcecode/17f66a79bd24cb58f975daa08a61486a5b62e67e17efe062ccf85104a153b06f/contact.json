{
  "address": "0x6226caa1857afbc6dfb6ca66071eb241228031a1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Linkart",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-30\n*/\n\npragma solidity ^0.4.23;\n\n\n/**\n * @title IERC20Token - ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract IERC20Token {\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n\n    function balanceOf(address _owner) public constant returns (uint256 balance);\n\n    function transfer(address _to, uint256 _value) public returns (bool success);\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n    function approve(address _spender, uint256 _value) public returns (bool success);\n\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\ncontract SafeMath {\n    /**\n    * @dev constructor\n    */\n    constructor() public {\n    }\n\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(a >= b);\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title ERC20Token - ERC20 base implementation\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20Token is IERC20Token, SafeMath {\n    mapping(address => uint256) public balances;\n    mapping(address => mapping(address => uint256)) public allowed;\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(balances[msg.sender] >= _value);\n\n        balances[msg.sender] = safeSub(balances[msg.sender], _value);\n        balances[_to] = safeAdd(balances[_to], _value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n\n        balances[_to] = safeAdd(balances[_to], _value);\n        balances[_from] = safeSub(balances[_from], _value);\n        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public constant returns (uint256) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public constant returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n}\n\ncontract Linkart is ERC20Token {\n\n    uint256 public mintTotal;\n    address public owner;\n\n    event Mint(address _toAddress, uint256 _amount);\n\n    constructor(address _owner) public {\n        require(address(0) != _owner);\n\n        name = \"Linkart\";\n        symbol = \"LAR\";\n        decimals = 18;\n        totalSupply = 10 * 1000 * 1000 * 1000 * 10 ** uint256(decimals);\n\n        mintTotal = 0;\n        owner = _owner;\n    }\n\n    function mint(address _toAddress, uint256 _amount) public returns (bool) {\n        require(msg.sender == owner);\n        require(address(0) != _toAddress);\n        require(_amount >= 0);\n        require(safeAdd(_amount, mintTotal) <= totalSupply);\n\n        mintTotal = safeAdd(_amount, mintTotal);\n        balances[_toAddress] = safeAdd(balances[_toAddress], _amount);\n\n        emit Mint(_toAddress, _amount);\n        return (true);\n    }\n\n    function() public payable {\n        revert();\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051602080610a838339810160405251600160a060020a038116151561003757600080fd5b6040805180820190915260078082527f4c696e6b61727400000000000000000000000000000000000000000000000000602090920191825261007b9160009161010c565b506040805180820190915260038082527f4c4152000000000000000000000000000000000000000000000000000000000060209092019182526100c09160019161010c565b5060028054601260ff19909116179081905560ff16600a0a6402540be40002600355600060065560078054600160a060020a031916600160a060020a03929092169190911790556101a7565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061014d57805160ff191683800117855561017a565b8280016001018555821561017a579182015b8281111561017a57825182559160200191906001019061015f565b5061018692915061018a565b5090565b6101a491905b808211156101865760008155600101610190565b90565b6108cd806101b66000396000f3006080604052600436106100cf5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100d4578063095ea7b31461015e57806318160ddd1461019657806323b872dd146101bd57806327e235e3146101e7578063313ce5671461020857806340c10f19146102335780635c6581651461025757806370a082311461027e5780638da5cb5b1461029f57806395d89b41146102d0578063a9059cbb146102e5578063bca63e5014610309578063dd62ed3e1461031e575b600080fd5b3480156100e057600080fd5b506100e9610345565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561012357818101518382015260200161010b565b50505050905090810190601f1680156101505780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561016a57600080fd5b50610182600160a060020a03600435166024356103d3565b604080519115158252519081900360200190f35b3480156101a257600080fd5b506101ab61043d565b60408051918252519081900360200190f35b3480156101c957600080fd5b50610182600160a060020a0360043581169060243516604435610443565b3480156101f357600080fd5b506101ab600160a060020a03600435166105af565b34801561021457600080fd5b5061021d6105c1565b6040805160ff9092168252519081900360200190f35b34801561023f57600080fd5b50610182600160a060020a03600435166024356105ca565b34801561026357600080fd5b506101ab600160a060020a03600435811690602435166106b8565b34801561028a57600080fd5b506101ab600160a060020a03600435166106d5565b3480156102ab57600080fd5b506102b46106f0565b60408051600160a060020a039092168252519081900360200190f35b3480156102dc57600080fd5b506100e96106ff565b3480156102f157600080fd5b50610182600160a060020a0360043516602435610759565b34801561031557600080fd5b506101ab610848565b34801561032a57600080fd5b506101ab600160a060020a036004358116906024351661084e565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103cb5780601f106103a0576101008083540402835291602001916103cb565b820191906000526020600020905b8154815290600101906020018083116103ae57829003601f168201915b505050505081565b600160a060020a03338116600081815260056020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60035481565b6000600160a060020a038316151561045a57600080fd5b600160a060020a03841660009081526004602052604090205482118015906104a85750600160a060020a03808516600090815260056020908152604080832033909416835292905220548211155b15156104b357600080fd5b600160a060020a0383166000908152600460205260409020546104d69083610879565b600160a060020a038085166000908152600460205260408082209390935590861681522054610505908361088f565b600160a060020a0380861660009081526004602090815260408083209490945560058152838220339093168252919091522054610542908361088f565b600160a060020a038086166000818152600560209081526040808320338616845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b60046020526000908152604090205481565b60025460ff1681565b60075460009033600160a060020a039081169116146105e857600080fd5b600160a060020a03831615156105fd57600080fd5b600082101561060b57600080fd5b60035461061a83600654610879565b111561062557600080fd5b61063182600654610879565b600655600160a060020a0383166000908152600460205260409020546106579083610879565b600160a060020a03841660008181526004602090815260409182902093909355805191825291810184905281517f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885929181900390910190a150600192915050565b600560209081526000928352604080842090915290825290205481565b600160a060020a031660009081526004602052604090205490565b600754600160a060020a031681565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103cb5780601f106103a0576101008083540402835291602001916103cb565b6000600160a060020a038316151561077057600080fd5b600160a060020a03331660009081526004602052604090205482111561079557600080fd5b600160a060020a0333166000908152600460205260409020546107b8908361088f565b600160a060020a0333811660009081526004602052604080822093909355908516815220546107e79083610879565b600160a060020a038085166000818152600460209081526040918290209490945580518681529051919333909316927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a350600192915050565b60065481565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b60008282018381101561088857fe5b9392505050565b60008183101561089b57fe5b509003905600a165627a7a723058206193d9a378310c3a4a4dbeac0b147418083207c95097004077514bbf57eb95f600290000000000000000000000000d80fa00202e952fdc2de8918ae808ba3c91fb19",
  "constructorArguments": "0000000000000000000000000d80fa00202e952fdc2de8918ae808ba3c91fb19"
}