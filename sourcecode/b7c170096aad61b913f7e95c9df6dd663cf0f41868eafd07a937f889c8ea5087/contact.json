{
  "address": "0x3e752ffd5eff7b7f2715ef43d8339ecabd0e65b9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Slaughter3D",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-19\n*/\n\npragma solidity ^0.4.25;\n\ninterface Snip3DInterface  {\n    function() payable external;\n   function offerAsSacrifice(address MN)\n        external\n        payable\n        ;\n         function withdraw()\n        external\n        ;\n        function myEarnings()\n        external\n        view\n       \n        returns(uint256);\n        function tryFinalizeStage()\n        external;\n    function sendInSoldier(address masternode) external payable;\n    function fetchdivs(address toupdate) external;\n    function shootSemiRandom() external;\n}\n\n// ----------------------------------------------------------------------------\n// Owned contract\n// ----------------------------------------------------------------------------\ncontract Owned {\n    address public owner;\n    address public newOwner;\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    constructor() public {\n        owner = 0x0B0eFad4aE088a88fFDC50BCe5Fb63c6936b9220;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        owner = _newOwner;\n    }\n    \n}\n// ----------------------------------------------------------------------------\n// Safe maths\n// ----------------------------------------------------------------------------\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\n// Snip3dbridge contract\ncontract Slaughter3D is  Owned {\n    using SafeMath for uint;\n    Snip3DInterface constant Snip3Dcontract_ = Snip3DInterface(0xb172BB8BAae74F27Ade3211E0c145388d3b4f8d8);// change to real address\n    uint256 public toSlaughter;\n    function harvestableBalance()\n        view\n        public\n        returns(uint256)\n    {\n        uint256 toReturn = address(this).balance.sub(toSlaughter);\n        return ( toReturn)  ;\n    }\n    function unfetchedVault()\n        view\n        public\n        returns(uint256)\n    {\n        return ( Snip3Dcontract_.myEarnings())  ;\n    }\n    function sacUp ()  public payable {\n       \n        toSlaughter = toSlaughter.add(msg.value);\n    }\n    function sacUpto (address masternode)  public {\n        require(toSlaughter> 0.1 ether);\n        toSlaughter = toSlaughter.sub(0.1 ether);\n        Snip3Dcontract_.offerAsSacrifice.value(0.1 ether)(masternode);\n    }\n    function validate ()  public {\n       \n        Snip3Dcontract_.tryFinalizeStage();\n    }\n    function fetchvault () public {\n      \n        Snip3Dcontract_.withdraw();\n    }\n    function fetchBalance () onlyOwner public {\n      uint256 tosend = address(this).balance.sub(toSlaughter);\n        msg.sender.transfer(tosend);\n    }\n    function () external payable{} // needs for divs\n}",
  "bytecode": "608060405260008054600160a060020a031916730b0efad4ae088a88ffdc50bce5fb63c6936b922017905561051d806100396000396000f3006080604052600436106100955763ffffffff60e060020a6000350416632157c46a8114610097578063373420d9146100ac578063489d874a146100d35780635ce093de146100e85780636901f668146100f05780638da5cb5b14610105578063984a2df11461013657806399d28efc1461014b578063d4ee1d901461016c578063d69ff35214610181578063f2fde38b14610196575b005b3480156100a357600080fd5b506100956101b7565b3480156100b857600080fd5b506100c1610218565b60408051918252519081900360200190f35b3480156100df57600080fd5b506100c1610238565b61009561023e565b3480156100fc57600080fd5b50610095610256565b34801561011157600080fd5b5061011a6102c2565b60408051600160a060020a039092168252519081900360200190f35b34801561014257600080fd5b506100956102d1565b34801561015757600080fd5b50610095600160a060020a0360043516610323565b34801561017857600080fd5b5061011a6103f2565b34801561018d57600080fd5b506100c1610401565b3480156101a257600080fd5b50610095600160a060020a0360043516610486565b60008054600160a060020a031633146101cf57600080fd5b6002546101e49030319063ffffffff6104cc16565b604051909150339082156108fc029083906000818181858888f19350505050158015610214573d6000803e3d6000fd5b5050565b60025460009081906102329030319063ffffffff6104cc16565b92915050565b60025481565b600254610251903463ffffffff6104e116565b600255565b73b172bb8baae74f27ade3211e0c145388d3b4f8d8600160a060020a031663a73598fd6040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156102a857600080fd5b505af11580156102bc573d6000803e3d6000fd5b50505050565b600054600160a060020a031681565b73b172bb8baae74f27ade3211e0c145388d3b4f8d8600160a060020a0316633ccfd60b6040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156102a857600080fd5b60025467016345785d8a00001061033957600080fd5b6002546103549067016345785d8a000063ffffffff6104cc16565b600255604080517f680478b1000000000000000000000000000000000000000000000000000000008152600160a060020a0383166004820152905173b172bb8baae74f27ade3211e0c145388d3b4f8d89163680478b19167016345785d8a00009160248082019260009290919082900301818588803b1580156103d657600080fd5b505af11580156103ea573d6000803e3d6000fd5b505050505050565b600154600160a060020a031681565b600073b172bb8baae74f27ade3211e0c145388d3b4f8d8600160a060020a031663ffe6bbd86040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561045557600080fd5b505af1158015610469573d6000803e3d6000fd5b505050506040513d602081101561047f57600080fd5b5051905090565b600054600160a060020a0316331461049d57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000828211156104db57600080fd5b50900390565b8181018281101561023257600080fd00a165627a7a72305820849491e0f39b9e476cd85fd3f7e0586825ffaf8111a1a0e5672e92bc96e52a950029"
}