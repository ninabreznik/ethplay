{
  "address": "0x777860247bd50f124e11b86e1d7327f77099b0e4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RflexCoin",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-22\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\n\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n/**\n * @title Standard Burnable Token\n * @dev Adds burnFrom method to ERC20 implementations\n */\n\ncontract StandardBurnableToken is BurnableToken, StandardToken {\n\n  /**\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n   * @param _from address The address which you want to send tokens from\n   * @param _value uint256 The amount of token to be burned\n   */\n  function burnFrom(address _from, uint256 _value) public {\n    require(_value <= allowed[_from][msg.sender]);\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    _burn(_from, _value);\n  }\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n/**\n * @title Pausable token\n * @dev StandardToken modified with pausable transfers.\n **/\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(\n    address _spender,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\n/**\n * @title RflexCoin token\n **/\n contract RflexCoin is StandardBurnableToken, PausableToken {\n    using SafeMath for uint256;\n    string public constant name = \"Rflexcoin\";\n    string public constant symbol = \"RFC\";\n    uint8 public constant decimals = 8;\n    uint256 public constant INITIAL_SUPPLY = 1e10 * (10 ** uint256(decimals));\n\n    struct lockedUserInfo{\n        address lockedUserAddress;\n        uint firstUnlockTime;\n        uint secondUnlockTime;\n        uint thirdUnlockTime;\n        uint256 firstUnlockValue;\n        uint256 secondUnlockValue;\n        uint256 thirdUnlockValue;\n    }\n\n    mapping(address => lockedUserInfo) private lockedUserEntity;\n    mapping(address => bool) private supervisorEntity;\n    mapping(address => bool) private lockedWalletEntity;\n\n    modifier onlySupervisor() {\n        require(owner == msg.sender || supervisorEntity[msg.sender]);\n        _;\n    }\n\n    event Unlock(\n        address indexed lockedUser,\n        uint lockPeriod,\n        uint256 firstUnlockValue,\n        uint256 secondUnlockValueUnlockValue,\n        uint256 thirdUnlockValue\n    );\n\n    event PrintLog(\n        address indexed sender,\n        string _logName,\n        uint256 _value\n    );\n\n    constructor() public {\n        totalSupply_ = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n    }\n\n    function transfer( address _to, uint256 _value ) public whenNotPaused returns (bool) {\n        require(!isLockedWalletEntity(msg.sender));\n        require(msg.sender != _to,\"Check your address!!\");\n\n        uint256 availableValue = getAvailableWithdrawableCount(msg.sender, _value);\n        emit PrintLog(_to, \"availableResultValue\", availableValue);\n        require(availableValue > 0);\n\n        return super.transfer(_to, availableValue);\n    }\n\n    function burn(uint256 _value) onlySupervisor public {\n        super._burn(msg.sender, _value);\n    }\n\n    function transferToLockedBalance(\n        address _to,\n        uint _firstUnlockTime,\n        uint256 _firstUnlockValue,\n        uint _secondUnlockTime,\n        uint256 _secondUnlockValue,\n        uint _thirdUnlockTime,\n        uint256 _thirdUnlockValue\n    ) onlySupervisor whenNotPaused public returns (bool) {\n        require(msg.sender != _to,\"Check your address!!\");\n        require(_firstUnlockTime > now && _firstUnlockValue > 0, \"Check your First input values!!;\");\n\n        uint256 totalLockSendCount = totalLockSendCount.add(_firstUnlockValue);\n\n        if(_secondUnlockTime > now && _secondUnlockValue > 0){\n            require(_secondUnlockTime > _firstUnlockTime, \"Second Unlock time must be greater than First Unlock Time!!\");\n\n            totalLockSendCount = totalLockSendCount.add(_secondUnlockValue);\n        }\n\n        if(_thirdUnlockTime > now && _thirdUnlockValue > 0){\n            require(_thirdUnlockTime > _secondUnlockTime && _secondUnlockTime > now &&  _secondUnlockValue > 0,\n                    \"Check your third Unlock Time or Second input values!!\");\n            totalLockSendCount = totalLockSendCount.add(_thirdUnlockValue);\n        }\n\n        if (transfer(_to, totalLockSendCount)) {\n            lockedUserEntity[_to].lockedUserAddress = _to;\n            lockedUserEntity[_to].firstUnlockTime = _firstUnlockTime;\n            lockedUserEntity[_to].firstUnlockValue = _firstUnlockValue;\n\n            if(_secondUnlockTime > now && _secondUnlockValue > 0){\n                lockedUserEntity[_to].secondUnlockTime = _secondUnlockTime;\n                lockedUserEntity[_to].secondUnlockValue = _secondUnlockValue;\n            }\n\n            if(_thirdUnlockTime > now && _thirdUnlockValue > 0){\n                lockedUserEntity[_to].thirdUnlockTime  = _thirdUnlockTime;\n                lockedUserEntity[_to].thirdUnlockValue = _thirdUnlockValue;\n            }\n\n            return true;\n        }\n    }\n\n    function setLockTime(address _to, uint _time, uint256 _lockTime) onlySupervisor public returns(bool){\n        require(_to !=address(0) && _time > 0 && _time < 4 && _lockTime > now);\n\n        (   uint firstUnlockTime,\n            uint secondUnlockTime,\n            uint thirdUnlockTime\n        ) = getLockedTimeUserInfo(_to);\n\n        if(_time == 1 && firstUnlockTime !=0){\n            if(secondUnlockTime ==0 || _lockTime < secondUnlockTime){\n                lockedUserEntity[_to].firstUnlockTime = _lockTime;\n                return true;\n            }\n        }else if(_time == 2 && secondUnlockTime !=0){\n            if(_lockTime > firstUnlockTime && (thirdUnlockTime ==0 || _lockTime < thirdUnlockTime)){\n                lockedUserEntity[_to].secondUnlockTime = _lockTime;\n                return true;\n            }\n        }else if(_time == 3 && thirdUnlockTime !=0 && _lockTime > secondUnlockTime){\n            lockedUserEntity[_to].thirdUnlockTime = _lockTime;\n            return true;\n        }\n        return false;\n    }\n\n    function getLockedUserInfo(address _address) view public returns (uint,uint256,uint,uint256,uint,uint256){\n        require(msg.sender == _address || msg.sender == owner || supervisorEntity[msg.sender]);\n        return (\n                    lockedUserEntity[_address].firstUnlockTime,\n                    lockedUserEntity[_address].firstUnlockValue,\n                    lockedUserEntity[_address].secondUnlockTime,\n                    lockedUserEntity[_address].secondUnlockValue,\n                    lockedUserEntity[_address].thirdUnlockTime,\n                    lockedUserEntity[_address].thirdUnlockValue\n                );\n    }\n\n    function setSupervisor(address _address) onlyOwner public returns (bool){\n        require(_address !=address(0) && !supervisorEntity[_address]);\n        supervisorEntity[_address] = true;\n        emit PrintLog(_address, \"isSupervisor\",  1);\n        return true;\n    }\n\n    function removeSupervisor(address _address) onlyOwner public returns (bool){\n        require(_address !=address(0) && supervisorEntity[_address]);\n        delete supervisorEntity[_address];\n        emit PrintLog(_address, \"isSupervisor\",  0);\n        return true;\n    }\n\n    function setLockedWalletEntity(address _address) onlySupervisor public returns (bool){\n        require(_address !=address(0) && !lockedWalletEntity[_address]);\n        lockedWalletEntity[_address] = true;\n        emit PrintLog(_address, \"isLockedWalletEntity\",  1);\n        return true;\n    }\n\n    function removeLockedWalletEntity(address _address) onlySupervisor public returns (bool){\n        require(_address !=address(0) && lockedWalletEntity[_address]);\n        delete lockedWalletEntity[_address];\n        emit PrintLog(_address, \"isLockedWalletEntity\",  0);\n        return true;\n    }\n\n    function getLockedTimeUserInfo(address _address) view private returns (uint,uint,uint){\n        require(msg.sender == _address || msg.sender == owner || supervisorEntity[msg.sender]);\n        return (\n                    lockedUserEntity[_address].firstUnlockTime,\n                    lockedUserEntity[_address].secondUnlockTime,\n                    lockedUserEntity[_address].thirdUnlockTime\n                );\n    }\n\n    function isSupervisor() view onlyOwner private returns (bool){\n        return supervisorEntity[msg.sender];\n    }\n\n    function isLockedWalletEntity(address _from) view private returns (bool){\n        return lockedWalletEntity[_from];\n    }\n\n    function getAvailableWithdrawableCount( address _from , uint256 _sendOrgValue) private returns (uint256) {\n        uint256 availableValue = 0;\n\n        if(lockedUserEntity[_from].lockedUserAddress == address(0)){\n            availableValue = _sendOrgValue;\n        }else{\n                (\n                    uint firstUnlockTime, uint256 firstUnlockValue,\n                    uint secondUnlockTime, uint256 secondUnlockValue,\n                    uint thirdUnlockTime, uint256 thirdUnlockValue\n                ) = getLockedUserInfo(_from);\n\n                if(now < firstUnlockTime) {\n                    availableValue = balances[_from].sub(firstUnlockValue.add(secondUnlockValue).add(thirdUnlockValue));\n                    if(_sendOrgValue > availableValue){\n                        availableValue = 0;\n                    }else{\n                        availableValue = _sendOrgValue;\n                    }\n                }else if(firstUnlockTime <= now && secondUnlockTime ==0){\n                    availableValue = balances[_from];\n                    if(_sendOrgValue > availableValue){\n                        availableValue = 0;\n                    }else{\n                        availableValue = _sendOrgValue;\n                        delete lockedUserEntity[_from];\n                        emit Unlock(_from, 1, firstUnlockValue, secondUnlockValue, thirdUnlockValue);\n                    }\n                }else if(firstUnlockTime <= now && secondUnlockTime !=0 && now < secondUnlockTime){\n                    availableValue = balances[_from].sub(secondUnlockValue.add(thirdUnlockValue));\n                    if(_sendOrgValue > availableValue){\n                        availableValue = 0;\n                    }else{\n                        availableValue = _sendOrgValue;\n                        lockedUserEntity[_from].firstUnlockValue = 0;\n                        emit Unlock(_from, 1, firstUnlockValue, secondUnlockValue, thirdUnlockValue);\n                    }\n                }else if(secondUnlockTime !=0 && secondUnlockTime <= now && thirdUnlockTime ==0){\n                    availableValue = balances[_from];\n                    if(_sendOrgValue > availableValue){\n                        availableValue = 0;\n                    }else{\n                        availableValue =_sendOrgValue;\n                        delete lockedUserEntity[_from];\n                        emit Unlock(_from, 2, firstUnlockValue, secondUnlockValue, thirdUnlockValue);\n                    }\n                }else if(secondUnlockTime !=0 && secondUnlockTime <= now && thirdUnlockTime !=0 && now < thirdUnlockTime){\n                    availableValue = balances[_from].sub(thirdUnlockValue);\n                    if(_sendOrgValue > availableValue){\n                        availableValue = 0;\n                    }else{\n                        availableValue = _sendOrgValue;\n                        lockedUserEntity[_from].firstUnlockValue = 0;\n                        lockedUserEntity[_from].secondUnlockValue = 0;\n                        emit Unlock(_from, 2, firstUnlockValue, secondUnlockValue, thirdUnlockValue);\n                    }\n                }else if(thirdUnlockTime !=0 && thirdUnlockTime <= now){\n                    availableValue = balances[_from];\n                    if(_sendOrgValue > availableValue){\n                        availableValue = 0;\n                    }else if(_sendOrgValue <= availableValue){\n                        availableValue = _sendOrgValue;\n                        delete lockedUserEntity[_from];\n                        emit Unlock(_from, 3, firstUnlockValue, secondUnlockValue, thirdUnlockValue);\n                    }\n                }\n        }\n        return availableValue;\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeSupervisor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getLockedUserInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSupervisor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_time\",\"type\":\"uint256\"},{\"name\":\"_lockTime\",\"type\":\"uint256\"}],\"name\":\"setLockTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeLockedWalletEntity\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setLockedWalletEntity\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_firstUnlockTime\",\"type\":\"uint256\"},{\"name\":\"_firstUnlockValue\",\"type\":\"uint256\"},{\"name\":\"_secondUnlockTime\",\"type\":\"uint256\"},{\"name\":\"_secondUnlockValue\",\"type\":\"uint256\"},{\"name\":\"_thirdUnlockTime\",\"type\":\"uint256\"},{\"name\":\"_thirdUnlockValue\",\"type\":\"uint256\"}],\"name\":\"transferToLockedBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"lockedUser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"lockPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"firstUnlockValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"secondUnlockValueUnlockValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"thirdUnlockValue\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_logName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"PrintLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60806040526003805460a060020a60ff021916905534801561002057600080fd5b5060038054600160a060020a03191633908117909155670de0b6b3a7640000600181905560008281526020818152604080832084905580519384525191927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a3611f5c806100986000396000f30060806040526004361061015e5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610163578063095ea7b3146101ed57806318160ddd1461022557806323b872dd1461024c5780632ff2e9dc14610276578063313ce5671461028b5780633f4ba83a146102b657806342966c68146102cd5780635c975abb146102e557806366188463146102fa57806370a082311461031e5780637128defb1461033f578063715018a61461036057806379cc6790146103755780638456cb59146103995780638477a3f4146103ae5780638da5cb5b146104025780639299eb301461043357806395d89b4114610454578063997fdb1f14610469578063a9059cbb14610490578063b74467df146104b4578063d73dd623146104d5578063dd62ed3e146104f9578063eb7ee54814610520578063f2fde38b14610541578063fae860db14610562575b600080fd5b34801561016f57600080fd5b50610178610595565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101b257818101518382015260200161019a565b50505050905090810190601f1680156101df5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101f957600080fd5b50610211600160a060020a03600435166024356105cc565b604080519115158252519081900360200190f35b34801561023157600080fd5b5061023a6105f7565b60408051918252519081900360200190f35b34801561025857600080fd5b50610211600160a060020a03600435811690602435166044356105fd565b34801561028257600080fd5b5061023a61062a565b34801561029757600080fd5b506102a0610636565b6040805160ff9092168252519081900360200190f35b3480156102c257600080fd5b506102cb61063b565b005b3480156102d957600080fd5b506102cb6004356106b3565b3480156102f157600080fd5b506102116106f3565b34801561030657600080fd5b50610211600160a060020a0360043516602435610703565b34801561032a57600080fd5b5061023a600160a060020a0360043516610727565b34801561034b57600080fd5b50610211600160a060020a0360043516610742565b34801561036c57600080fd5b506102cb610814565b34801561038157600080fd5b506102cb600160a060020a0360043516602435610882565b3480156103a557600080fd5b506102cb610918565b3480156103ba57600080fd5b506103cf600160a060020a0360043516610995565b604080519687526020870195909552858501939093526060850191909152608084015260a0830152519081900360c00190f35b34801561040e57600080fd5b50610417610a2d565b60408051600160a060020a039092168252519081900360200190f35b34801561043f57600080fd5b50610211600160a060020a0360043516610a3c565b34801561046057600080fd5b50610178610b13565b34801561047557600080fd5b50610211600160a060020a0360043516602435604435610b4a565b34801561049c57600080fd5b50610211600160a060020a0360043516602435610ccb565b3480156104c057600080fd5b50610211600160a060020a0360043516610dde565b3480156104e157600080fd5b50610211600160a060020a0360043516602435610ecc565b34801561050557600080fd5b5061023a600160a060020a0360043581169060243516610ef0565b34801561052c57600080fd5b50610211600160a060020a0360043516610f1b565b34801561054d57600080fd5b506102cb600160a060020a036004351661100e565b34801561056e57600080fd5b50610211600160a060020a036004351660243560443560643560843560a43560c4356110a3565b60408051808201909152600981527f52666c6578636f696e0000000000000000000000000000000000000000000000602082015281565b60035460009060a060020a900460ff16156105e657600080fd5b6105f08383611403565b9392505050565b60015490565b60035460009060a060020a900460ff161561061757600080fd5b610622848484611469565b949350505050565b670de0b6b3a764000081565b600881565b600354600160a060020a0316331461065257600080fd5b60035460a060020a900460ff16151561066a57600080fd5b6003805474ff0000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b600354600160a060020a03163314806106db57503360009081526005602052604090205460ff165b15156106e657600080fd5b6106f033826115e0565b50565b60035460a060020a900460ff1681565b60035460009060a060020a900460ff161561071d57600080fd5b6105f083836116e1565b600160a060020a031660009081526020819052604090205490565b600354600090600160a060020a0316331461075c57600080fd5b600160a060020a0382161580159061078c5750600160a060020a03821660009081526005602052604090205460ff165b151561079757600080fd5b600160a060020a0382166000818152600560209081526040808320805460ff19169055805191820192909252818152600c818301527f697353757065727669736f72000000000000000000000000000000000000000060608201529051600080516020611ef18339815191529181900360800190a2506001919050565b600354600160a060020a0316331461082b57600080fd5b600354604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26003805473ffffffffffffffffffffffffffffffffffffffff19169055565b600160a060020a03821660009081526002602090815260408083203384529091529020548111156108b257600080fd5b600160a060020a03821660009081526002602090815260408083203384529091529020546108e6908263ffffffff6117d116565b600160a060020a038316600090815260026020908152604080832033845290915290205561091482826115e0565b5050565b600354600160a060020a0316331461092f57600080fd5b60035460a060020a900460ff161561094657600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b6000808080808033600160a060020a03881614806109bd5750600354600160a060020a031633145b806109d757503360009081526005602052604090205460ff165b15156109e257600080fd5b50505050600160a060020a0392909216600090815260046020819052604090912060018101549181015460028201546005830154600384015460069094015494979296509094509290565b600354600160a060020a031681565b600354600090600160a060020a03163314610a5657600080fd5b600160a060020a03821615801590610a875750600160a060020a03821660009081526005602052604090205460ff16155b1515610a9257600080fd5b600160a060020a038216600081815260056020908152604091829020805460ff19166001908117909155825191820152818152600c818301527f697353757065727669736f72000000000000000000000000000000000000000060608201529051600080516020611ef18339815191529181900360800190a2506001919050565b60408051808201909152600381527f5246430000000000000000000000000000000000000000000000000000000000602082015281565b600354600090819081908190600160a060020a0316331480610b7b57503360009081526005602052604090205460ff165b1515610b8657600080fd5b600160a060020a03871615801590610b9e5750600086115b8015610baa5750600486105b8015610bb557504285115b1515610bc057600080fd5b610bc9876117e3565b925092509250856001148015610bde57508215155b15610c2057811580610bef57508185105b15610c1b57600160a060020a038716600090815260046020526040902060019081018690559350610cc1565b610cbc565b856002148015610c2f57508115155b15610c76578285118015610c4a5750801580610c4a57508085105b15610c1b57600160a060020a038716600090815260046020526040902060020185905560019350610cc1565b856003148015610c8557508015155b8015610c9057508185115b15610cbc57600160a060020a038716600090815260046020526040902060030185905560019350610cc1565b600093505b5050509392505050565b600354600090819060a060020a900460ff1615610ce757600080fd5b610cf03361185b565b15610cfa57600080fd5b33600160a060020a0385161415610d5b576040805160e560020a62461bcd02815260206004820152601460248201527f436865636b20796f757220616464726573732121000000000000000000000000604482015290519081900360640190fd5b610d653384611879565b60408051602081018390528181526014818301527f617661696c61626c65526573756c7456616c756500000000000000000000000060608201529051919250600160a060020a03861691600080516020611ef18339815191529181900360800190a260008111610dd457600080fd5b6106228482611d43565b600354600090600160a060020a0316331480610e0957503360009081526005602052604090205460ff165b1515610e1457600080fd5b600160a060020a03821615801590610e445750600160a060020a03821660009081526006602052604090205460ff165b1515610e4f57600080fd5b600160a060020a0382166000818152600660209081526040808320805460ff191690558051918201929092528181526014818301527f69734c6f636b656457616c6c6574456e7469747900000000000000000000000060608201529051600080516020611ef18339815191529181900360800190a2506001919050565b60035460009060a060020a900460ff1615610ee657600080fd5b6105f08383611d67565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600090600160a060020a0316331480610f4657503360009081526005602052604090205460ff165b1515610f5157600080fd5b600160a060020a03821615801590610f825750600160a060020a03821660009081526006602052604090205460ff16155b1515610f8d57600080fd5b600160a060020a038216600081815260066020908152604091829020805460ff191660019081179091558251918201528181526014818301527f69734c6f636b656457616c6c6574456e7469747900000000000000000000000060608201529051600080516020611ef18339815191529181900360800190a2506001919050565b600354600160a060020a0316331461102557600080fd5b600160a060020a038116151561103a57600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6003546000908190600160a060020a03163314806110d057503360009081526005602052604090205460ff165b15156110db57600080fd5b60035460a060020a900460ff16156110f257600080fd5b33600160a060020a038a161415611153576040805160e560020a62461bcd02815260206004820152601460248201527f436865636b20796f757220616464726573732121000000000000000000000000604482015290519081900360640190fd5b42881180156111625750600087115b15156111b8576040805160e560020a62461bcd02815260206004820181905260248201527f436865636b20796f757220466972737420696e7075742076616c75657321213b604482015290519081900360640190fd5b6111c8818863ffffffff611e0016565b905042861180156111d95750600085115b1561126e5787861161125b576040805160e560020a62461bcd02815260206004820152603b60248201527f5365636f6e6420556e6c6f636b2074696d65206d75737420626520677265617460448201527f6572207468616e20466972737420556e6c6f636b2054696d6521210000000000606482015290519081900360840190fd5b61126b818663ffffffff611e0016565b90505b428411801561127d5750600083115b1561132b57858411801561129057504286115b801561129c5750600085115b1515611318576040805160e560020a62461bcd02815260206004820152603560248201527f436865636b20796f757220746869726420556e6c6f636b2054696d65206f722060448201527f5365636f6e6420696e7075742076616c75657321210000000000000000000000606482015290519081900360840190fd5b611328818463ffffffff611e0016565b90505b6113358982610ccb565b156113f757600160a060020a0389166000818152600460208190526040909120805473ffffffffffffffffffffffffffffffffffffffff19169092178255600182018a905501879055428611801561138d5750600085115b156113b857600160a060020a0389166000908152600460205260409020600281018790556005018590555b42841180156113c75750600083115b156113f257600160a060020a0389166000908152600460205260409020600381018590556006018390555b600191505b50979650505050505050565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b6000600160a060020a038316151561148057600080fd5b600160a060020a0384166000908152602081905260409020548211156114a557600080fd5b600160a060020a03841660009081526002602090815260408083203384529091529020548211156114d557600080fd5b600160a060020a0384166000908152602081905260409020546114fe908363ffffffff6117d116565b600160a060020a038086166000908152602081905260408082209390935590851681522054611533908363ffffffff611e0016565b600160a060020a03808516600090815260208181526040808320949094559187168152600282528281203382529091522054611575908363ffffffff6117d116565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b600160a060020a03821660009081526020819052604090205481111561160557600080fd5b600160a060020a03821660009081526020819052604090205461162e908263ffffffff6117d116565b600160a060020a03831660009081526020819052604090205560015461165a908263ffffffff6117d116565b600155604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b336000908152600260209081526040808320600160a060020a03861684529091528120548083111561173657336000908152600260209081526040808320600160a060020a038816845290915281205561176b565b611746818463ffffffff6117d116565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b6000828211156117dd57fe5b50900390565b6000808033600160a060020a03851614806118085750600354600160a060020a031633145b8061182257503360009081526005602052604090205460ff165b151561182d57600080fd5b505050600160a060020a03166000908152600460205260409020600181015460028201546003909201549092565b600160a060020a031660009081526006602052604090205460ff1690565b600160a060020a03828116600090815260046020526040812054909182918291829182918291829182911615156118b257889650611d35565b6118bb8a610995565b95509550955095509550955085421015611933576119176118f2826118e6888763ffffffff611e0016565b9063ffffffff611e0016565b600160a060020a038c166000908152602081905260409020549063ffffffff6117d116565b96508689111561192a576000965061192e565b8896505b611d35565b428611158015611941575083155b15611a0b57600160a060020a038a16600090815260208190526040902054965086891115611972576000965061192e565b600160a060020a038a166000818152600460208181526040808420805473ffffffffffffffffffffffffffffffffffffffff19168155600180820186905560028201869055600382018690559381018590556005810185905560060193909355825191825281018890528082018690526060810184905290518b9950600080516020611f118339815191529181900360800190a2611d35565b428611158015611a1a57508315155b8015611a2557508342105b15611aac57611a3d6118f2848363ffffffff611e0016565b965086891115611a50576000965061192e565b600160a060020a038a1660008181526004602081815260408084209092019290925580516001815291820188905281810186905260608201849052518b9950600080516020611f118339815191529181900360800190a2611d35565b8315801590611abb5750428411155b8015611ac5575081155b15611b8f57600160a060020a038a16600090815260208190526040902054965086891115611af6576000965061192e565b600160a060020a038a166000818152600460208181526040808420805473ffffffffffffffffffffffffffffffffffffffff19168155600181018590556002808201869055600382018690559381018590556005810185905560060193909355825191825281018890528082018690526060810184905290518b9950600080516020611f118339815191529181900360800190a2611d35565b8315801590611b9e5750428411155b8015611ba957508115155b8015611bb457508142105b15611c5957600160a060020a038a16600090815260208190526040902054611be2908263ffffffff6117d116565b965086891115611bf5576000965061192e565b600160a060020a038a16600081815260046020818152604080842092830184905560059092019290925580516002815291820188905281810186905260608201849052518b9950600080516020611f118339815191529181900360800190a2611d35565b8115801590611c685750428211155b15611d3557600160a060020a038a16600090815260208190526040902054965086891115611c995760009650611d35565b868911611d3557600160a060020a038a166000818152600460208181526040808420805473ffffffffffffffffffffffffffffffffffffffff19168155600181018590556002810185905560038082018690559381018590556005810185905560060193909355825191825281018890528082018690526060810184905290518b9950600080516020611f118339815191529181900360800190a25b509498975050505050505050565b60035460009060a060020a900460ff1615611d5d57600080fd5b6105f08383611e0f565b336000908152600260209081526040808320600160a060020a0386168452909152812054611d9b908363ffffffff611e0016565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b6000828201838110156105f057fe5b6000600160a060020a0383161515611e2657600080fd5b33600090815260208190526040902054821115611e4257600080fd5b33600090815260208190526040902054611e62908363ffffffff6117d116565b3360009081526020819052604080822092909255600160a060020a03851681522054611e94908363ffffffff611e0016565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35060019291505056008c5488c20f72c8e1e70d2fb015bb3f71075f6b62981493b11d7bc228dcd3dc98980777260da3f0d408d254061ab7b8b17939801e6b26745b33b74d99ab8074b8a165627a7a723058208e1d171ab16be4f9f1baddb1f94ba0c53418ac8fb372277670430812f5fd10760029"
}