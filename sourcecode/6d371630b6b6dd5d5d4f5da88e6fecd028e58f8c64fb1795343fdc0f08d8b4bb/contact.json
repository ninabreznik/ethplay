{
  "address": "0x42a952ac23d020610355cf425d0dfa58295287be",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DBToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-22\n*/\n\npragma solidity ^0.4.24;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a==0) {\n            return 0;\n        }\n        uint c = a * b;\n        require(c / a == b);\n        return c;\n    }\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n        uint256 c = a / b;\n        return c;\n    }\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        return a - b;\n    }\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n}\n\ncontract owned {\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\n\ncontract DBTBase {\n    using SafeMath for uint256;\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 12;\n    // 18 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply;\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n    \n    event Approved(address indexed from,address spender, uint256 value);\n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    constructor(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from].add(balanceOf[_to]);\n        // Subtract from the sender\n        balanceOf[_from] = balanceOf[_from].sub(_value);\n        // Add the same to the recipient\n        balanceOf[_to] = balanceOf[_to].add(_value);\n        emit Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` in behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approved(msg.sender,_spender,_value);\n        return true;\n    }\n\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public returns (bool success) {\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);            // Subtract from the sender\n        totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    /**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the targeted balance\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);             // Subtract from the sender's allowance\n        totalSupply = totalSupply.sub(_value);                              // Update totalSupply\n        emit Burn(_from, _value);\n        return true;\n    }\n}\n\n/******************************************/\n/*       ADVANCED TOKEN STARTS HERE       */\n/******************************************/\n\ncontract DBToken is owned, DBTBase {\n\n    /* Lock allcoins */\n    mapping (address => bool) public frozenAccount;\n    /* Lock specified number of coins */\n    mapping (address => uint256) public balancefrozen;\n    /*Lock acccout with time and value */\n    mapping (address => uint256[][]) public frozeTimeValue;\n    /* Locked total with time and value*/\n    mapping (address => uint256) public balancefrozenTime;\n\n\n    bool public isPausedTransfer = false;\n\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event FrozenFunds(address target, bool frozen);\n\n    event FronzeValue(address target,uint256 value);\n\n    event FronzeTimeValue(address target,uint256 value);\n\n    event PauseChanged(bool ispause);\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    constructor(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) DBTBase(initialSupply, tokenName, tokenSymbol) public {\n        \n    }\n\n    /* Internal transfer, only can be called by this contract */\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(!isPausedTransfer);\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n        require(balanceOf[_from]>=_value);\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n        //Check FronzenValue\n        require(balanceOf[_from].sub(_value)>=balancefrozen[_from]);\n\n        require(accountNoneFrozenAvailable(_from) >=_value);\n\n        balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the sender\n        balanceOf[_to] = balanceOf[_to].add(_value);                           // Add the same to the recipient\n        emit Transfer(_from, _to, _value);\n    }\n\n    function pauseTransfer(bool ispause) onlyOwner public {\n        isPausedTransfer = ispause;\n        emit PauseChanged(ispause);\n    }\n\n    /// @notice Create `mintedAmount` tokens and send it to `target`\n    /// @param target Address to receive the tokens\n    /// @param mintedAmount the amount of tokens it will receive\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n        uint256 newmint=mintedAmount.mul(10 ** uint256(decimals));\n        balanceOf[target] = balanceOf[target].add(newmint);\n        totalSupply = totalSupply.add(newmint);\n       emit Transfer(0, this, mintedAmount);\n       emit Transfer(this, target, mintedAmount);\n    }\n\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n    /// @param target Address to be frozen\n    /// @param freeze either to freeze it or not\n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n    \n    function freezeAccountTimeAndValue(address target, uint256[] times, uint256[] values) onlyOwner public {\n        require(times.length >=1 );\n        require(times.length == values.length);\n        require(times.length<=10);\n        uint256[2][] memory timevalue=new uint256[2][](10);\n        uint256 lockedtotal=0;\n        for(uint i=0;i<times.length;i++)\n        {\n            uint256 value=values[i].mul(10 ** uint256(decimals));\n            timevalue[i]=[times[i],value];\n            lockedtotal=lockedtotal.add(value);\n        }\n        frozeTimeValue[target] = timevalue;\n        balancefrozenTime[target]=lockedtotal;\n        emit FronzeTimeValue(target,lockedtotal);\n    }\n\n    function unfreezeAccountTimeAndValue(address target) onlyOwner public {\n\n        uint256[][] memory lockedTimeAndValue=frozeTimeValue[target];\n        \n        if(lockedTimeAndValue.length>0)\n        {\n           delete frozeTimeValue[target];\n        }\n        balancefrozenTime[target]=0;\n    }\n\n    function freezeByValue(address target,uint256 value) public onlyOwner {\n       balancefrozen[target]=value.mul(10 ** uint256(decimals));\n       emit FronzeValue(target,value);\n    }\n\n    function increaseFreezeValue(address target,uint256 value)  onlyOwner public {\n       balancefrozen[target]= balancefrozen[target].add(value.mul(10 ** uint256(decimals)));\n       emit FronzeValue(target,value);\n    }\n\n    function decreaseFreezeValue(address target,uint256 value) onlyOwner public {\n            uint oldValue = balancefrozen[target];\n            uint newvalue=value.mul(10 ** uint256(decimals));\n            if (newvalue >= oldValue) {\n                balancefrozen[target] = 0;\n            } else {\n                balancefrozen[target] = oldValue.sub(newvalue);\n            }\n            \n        emit FronzeValue(target,value);      \n    }\n\n     function accountNoneFrozenAvailable(address target) public returns (uint256)  {\n        \n        uint256[][] memory lockedTimeAndValue=frozeTimeValue[target];\n\n        uint256 avail=0;\n       \n        if(lockedTimeAndValue.length>0)\n        {\n           uint256 unlockedTotal=0;\n           uint256 now1 = block.timestamp;\n           uint256 lockedTotal=0;           \n           for(uint i=0;i<lockedTimeAndValue.length;i++)\n           {\n               \n               uint256 unlockTime = lockedTimeAndValue[i][0];\n               uint256 unlockvalue=lockedTimeAndValue[i][1];\n               \n               if(now1>=unlockTime && unlockvalue>0)\n               {\n                  unlockedTotal=unlockedTotal.add(unlockvalue);\n               }\n               if(unlockvalue>0)\n               {\n                   lockedTotal=lockedTotal.add(unlockvalue);\n               }\n           }\n           //checkunlockvalue\n\n           if(lockedTotal > unlockedTotal)\n           {\n               balancefrozenTime[target]=lockedTotal.sub(unlockedTotal);\n           }\n           else \n           {\n               balancefrozenTime[target]=0;\n           }\n           \n           if(balancefrozenTime[target]==0)\n           {\n              delete frozeTimeValue[target];\n           }\n           if(balanceOf[target]>balancefrozenTime[target])\n           {\n               avail=balanceOf[target].sub(balancefrozenTime[target]);\n           }\n           else\n           {\n               avail=0;\n           }\n           \n        }\n        else\n        {\n            avail=balanceOf[target];\n        }\n\n        return avail ;\n    }\n\n\n}",
  "bytecode": "60806040526003805460ff19908116600c17909155600b805490911690553480156200002a57600080fd5b50604051620018be380380620018be83398101604090815281516020808401518385015160008054600160a060020a03191633908117825560035460ff16600a0a86026004819055908252600585529590209490945584018051929490930191849184918491620000a191600191850190620000c4565b508051620000b7906002906020840190620000c4565b5050505050505062000169565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200010757805160ff191683800117855562000137565b8280016001018555821562000137579182015b82811115620001375782518255916020019190600101906200011a565b506200014592915062000149565b5090565b6200016691905b8082111562000145576000815560010162000150565b90565b61174580620001796000396000f30060806040526004361061015e5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663028c6013811461016357806306fdde031461018c578063095ea7b31461021657806318160ddd1461023a5780631ecc17c41461026157806323b872dd1461027d578063313ce567146102a757806342966c68146102d257806348f001e6146102ea578063505f5a8c1461030e578063572994341461033257806358634110146103535780635b56af1e14610374578063615f09af1461041057806370a082311461043757806379c650681461045857806379cc67901461047c57806383988ef5146104a05780638da5cb5b146104c157806395d89b41146104f2578063a9059cbb14610507578063b414d4b61461052b578063c286ba5b1461054c578063c6c839f01461056d578063dd62ed3e14610591578063e724529c146105b8578063f2fde38b146105de575b600080fd5b34801561016f57600080fd5b506101786105ff565b604080519115158252519081900360200190f35b34801561019857600080fd5b506101a1610608565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101db5781810151838201526020016101c3565b50505050905090810190601f1680156102085780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561022257600080fd5b50610178600160a060020a0360043516602435610695565b34801561024657600080fd5b5061024f610700565b60408051918252519081900360200190f35b34801561026d57600080fd5b5061027b6004351515610706565b005b34801561028957600080fd5b50610178600160a060020a0360043581169060243516604435610764565b3480156102b357600080fd5b506102bc6107d1565b6040805160ff9092168252519081900360200190f35b3480156102de57600080fd5b506101786004356107da565b3480156102f657600080fd5b5061027b600160a060020a036004351660243561085e565b34801561031a57600080fd5b5061027b600160a060020a0360043516602435610949565b34801561033e57600080fd5b5061024f600160a060020a03600435166109d6565b34801561035f57600080fd5b5061024f600160a060020a03600435166109e8565b34801561038057600080fd5b5060408051602060046024803582810135848102808701860190975280865261027b968435600160a060020a031696369660449591949091019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506109fa9650505050505050565b34801561041c57600080fd5b5061024f600160a060020a0360043516602435604435610ba9565b34801561044357600080fd5b5061024f600160a060020a0360043516610bf1565b34801561046457600080fd5b5061027b600160a060020a0360043516602435610c03565b34801561048857600080fd5b50610178600160a060020a0360043516602435610d0d565b3480156104ac57600080fd5b5061024f600160a060020a0360043516610e4a565b3480156104cd57600080fd5b506104d6611114565b60408051600160a060020a039092168252519081900360200190f35b3480156104fe57600080fd5b506101a1611123565b34801561051357600080fd5b5061027b600160a060020a036004351660243561117b565b34801561053757600080fd5b50610178600160a060020a036004351661118a565b34801561055857600080fd5b5061027b600160a060020a036004351661119f565b34801561057957600080fd5b5061027b600160a060020a03600435166024356112a4565b34801561059d57600080fd5b5061024f600160a060020a03600435811690602435166112fe565b3480156105c457600080fd5b5061027b600160a060020a0360043516602435151561131b565b3480156105ea57600080fd5b5061027b600160a060020a0360043516611396565b600b5460ff1681565b60018054604080516020600284861615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561068d5780601f106106625761010080835404028352916020019161068d565b820191906000526020600020905b81548152906001019060200180831161067057829003601f168201915b505050505081565b336000818152600660209081526040808320600160a060020a038716808552908352818420869055815190815291820185905280519293927f80da462ebfbe41cfc9bc015e7a9a3c7a2a73dbccede72d8ceb583606c27f8f909281900390910190a250600192915050565b60045481565b600054600160a060020a0316331461071d57600080fd5b600b805482151560ff19909116811790915560408051918252517f8fb6c181ee25a520cf3dd6565006ef91229fcfe5a989566c2a3b8c115570cec59181900360200190a150565b600160a060020a0383166000908152600660209081526040808320338452909152812054610798908363ffffffff6113dc16565b600160a060020a03851660009081526006602090815260408083203384529091529020556107c78484846113f1565b5060019392505050565b60035460ff1681565b336000908152600560205260408120546107fa908363ffffffff6113dc16565b3360009081526005602052604090205560045461081d908363ffffffff6113dc16565b60045560408051838152905133917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2506001919050565b600080548190600160a060020a0316331461087857600080fd5b600160a060020a0384166000908152600860205260409020546003549092506108ae90849060ff16600a0a63ffffffff61159616565b90508181106108d557600160a060020a0384166000908152600860205260408120556108ff565b6108e5828263ffffffff6113dc16565b600160a060020a0385166000908152600860205260409020555b60408051600160a060020a03861681526020810185905281517fb1a6da319df251ebf551be2ae3dda41f042e93a610a205d4555684575a338f6e929181900390910190a150505050565b600054600160a060020a0316331461096057600080fd5b60035461097a90829060ff16600a0a63ffffffff61159616565b600160a060020a03831660008181526008602090815260409182902093909355805191825291810183905281517fb1a6da319df251ebf551be2ae3dda41f042e93a610a205d4555684575a338f6e929181900390910190a15050565b600a6020526000908152604090205481565b60086020526000908152604090205481565b600080546060919081908190600160a060020a03163314610a1a57600080fd5b855160011115610a2957600080fd5b8451865114610a3757600080fd5b8551600a1015610a4657600080fd5b60408051600a808252610160820190925290816020015b610a656115e1565b815260200190600190039081610a5d57905050935060009250600091505b8551821015610b21576003548551610abe9160ff16600a0a90879085908110610aa857fe5b602090810290910101519063ffffffff61159616565b905060408051908101604052808784815181101515610ad957fe5b906020019060200201518152602001828152508483815181101515610afa57fe5b60209081029091010152610b14838263ffffffff6115cf16565b9250600190910190610a83565b600160a060020a03871660009081526009602090815260409091208551610b4a928701906115fc565b50600160a060020a0387166000818152600a60209081526040918290208690558151928352820185905280517fbf98ac1014bdf9ad3787912e80f265b3faefb2a47119caf6e24770c3a960727f9281900390910190a150505050505050565b600960205282600052604060002082815481101515610bc457fe5b9060005260206000200181815481101515610bdb57fe5b9060005260206000200160009250925050505481565b60056020526000908152604090205481565b60008054600160a060020a03163314610c1b57600080fd5b600354610c3590839060ff16600a0a63ffffffff61159616565b600160a060020a038416600090815260056020526040902054909150610c61908263ffffffff6115cf16565b600160a060020a038416600090815260056020526040902055600454610c8d908263ffffffff6115cf16565b60045560408051838152905130916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3604080518381529051600160a060020a0385169130917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3505050565b600160a060020a038216600090815260056020526040812054821115610d3257600080fd5b600160a060020a0383166000908152600660209081526040808320338452909152902054821115610d6257600080fd5b600160a060020a038316600090815260056020526040902054610d8b908363ffffffff6113dc16565b600160a060020a0384166000908152600560209081526040808320939093556006815282822033835290522054610dc8908363ffffffff6113dc16565b600160a060020a0384166000908152600660209081526040808320338452909152902055600454610dff908363ffffffff6113dc16565b600455604080518381529051600160a060020a038516917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a250600192915050565b600060606000806000806000806000600960008b600160a060020a0316600160a060020a03168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610f0a57600084815260209081902083018054604080518285028101850190915281815292830182828015610ef657602002820191906000526020600020905b815481526020019060010190808311610ee2575b505050505081526020019060010190610e9e565b505050509750600096506000885111156110ea576000955042945060009350600092505b8751831015610fea578783815181101515610f4557fe5b906020019060200201516000815181101515610f5d57fe5b9060200190602002015191508783815181101515610f7757fe5b906020019060200201516001815181101515610f8f57fe5b906020019060200201519050818510158015610fab5750600081115b15610fc357610fc0868263ffffffff6115cf16565b95505b6000811115610fdf57610fdc848263ffffffff6115cf16565b93505b600190920191610f2e565b8584111561102057611002848763ffffffff6113dc16565b600160a060020a038b166000908152600a602052604090205561103a565b600160a060020a038a166000908152600a60205260408120555b600160a060020a038a166000908152600a6020526040902054151561107a57600160a060020a038a16600090815260096020526040812061107a91611653565b600160a060020a038a166000908152600a602090815260408083205460059092529091205411156110e057600160a060020a038a166000908152600a60209081526040808320546005909252909120546110d99163ffffffff6113dc16565b96506110e5565b600096505b611106565b600160a060020a038a1660009081526005602052604090205496505b509498975050505050505050565b600054600160a060020a031681565b6002805460408051602060018416156101000260001901909316849004601f8101849004840282018401909252818152929183018282801561068d5780601f106106625761010080835404028352916020019161068d565b6111863383836113f1565b5050565b60076020526000908152604090205460ff1681565b600054606090600160a060020a031633146111b957600080fd5b600160a060020a038216600090815260096020908152604080832080548251818502810185019093528083529193909284015b828210156112585760008481526020908190208301805460408051828502810185019091528181529283018282801561124457602002820191906000526020600020905b815481526020019060010190808311611230575b5050505050815260200190600101906111ec565b50505050905060008151111561128957600160a060020a038216600090815260096020526040812061128991611653565b50600160a060020a03166000908152600a6020526040812055565b600054600160a060020a031633146112bb57600080fd5b60035461097a906112d990839060ff16600a0a63ffffffff61159616565b600160a060020a0384166000908152600860205260409020549063ffffffff6115cf16565b600660209081526000928352604080842090915290825290205481565b600054600160a060020a0316331461133257600080fd5b600160a060020a038216600081815260076020908152604091829020805460ff191685151590811790915582519384529083015280517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a59281900390910190a15050565b600054600160a060020a031633146113ad57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000828211156113eb57600080fd5b50900390565b600b5460ff161561140157600080fd5b600160a060020a038216151561141657600080fd5b600160a060020a03831660009081526005602052604090205481111561143b57600080fd5b600160a060020a03831660009081526007602052604090205460ff161561146157600080fd5b600160a060020a03821660009081526007602052604090205460ff161561148757600080fd5b600160a060020a0383166000908152600860209081526040808320546005909252909120546114bc908363ffffffff6113dc16565b10156114c757600080fd5b806114d184610e4a565b10156114dc57600080fd5b600160a060020a038316600090815260056020526040902054611505908263ffffffff6113dc16565b600160a060020a03808516600090815260056020526040808220939093559084168152205461153a908263ffffffff6115cf16565b600160a060020a0380841660008181526005602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000808315156115a957600091506115c8565b508282028284828115156115b957fe5b04146115c457600080fd5b8091505b5092915050565b6000828201838110156115c457600080fd5b60408051808201825290600290829080388339509192915050565b828054828255906000526020600020908101928215611643579160200282015b828111156116435782516116339083906002611674565b509160200191906001019061161c565b5061164f9291506116bb565b5090565b508054600082559060005260206000209081019061167191906116bb565b50565b8280548282559060005260206000209081019282156116af579160200282015b828111156116af578251825591602001919060010190611694565b5061164f9291506116e1565b6116de91905b8082111561164f5760006116d582826116fb565b506001016116c1565b90565b6116de91905b8082111561164f57600081556001016116e7565b508054600082559060005260206000209081019061167191906116e15600a165627a7a723058200c0c66a99fc88bdac7ccba31359bf93a1848cc84758b62c6e04c3ea7b9179e8c0029000000000000000000000000000000000000000000000000000000012a05f200000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000c442d42616e6b20546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000344424d0000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000012a05f200000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000c442d42616e6b20546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000344424d0000000000000000000000000000000000000000000000000000000000"
}