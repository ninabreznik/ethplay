{
  "address": "0xeeae9c7a726f5c9d52c45494577221054a2805b2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Bingo",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-18\n*/\n\npragma solidity ^0.4.24;\n\nlibrary SafeMath {\n\n/**\n* @dev Multiplies two numbers, throws on overflow.\n*/\n    function mul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256 c)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        require(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        require(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256 c)\n    {\n        c = a + b;\n        require(c >= a);\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add2(uint8 a, uint8 b)\n        internal\n        pure\n        returns (uint8 c)\n    {\n        c = a + b;\n        require(c >= a);\n        return c;\n    }\n\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n      // assert(b > 0); // Solidity automatically throws when dividing by 0\n      // uint256 c = a / b;\n      // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n    /**\n     * @dev gives square root of given x.\n     */\n    function sqrt(uint256 x)\n        internal\n        pure\n        returns (uint256 y)\n    {\n        uint256 z = ((add(x,1)) / 2);\n        y = x;\n        while (z < y)\n        {\n            y = z;\n            z = ((add((x / z),z)) / 2);\n        }\n    }\n\n    /**\n     * @dev gives square. multiplies x by x\n     */\n    function sq(uint256 x)\n        internal\n        pure\n        returns (uint256)\n    {\n        return (mul(x,x));\n    }\n\n    /**\n     * @dev x to the power of y\n     */\n    function pwr(uint256 x, uint256 y)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (x==0)\n            return (0);\n        else if (y==0)\n            return (1);\n        else\n        {\n            uint256 z = x;\n            for (uint256 i=1; i < y; i++)\n                z = mul(z,x);\n            return (z);\n        }\n    }\n}\n\n/* solhint-disable var-name-mixedcase */\n/* solhint-disable const-name-snakecase */\n/* solhint-disable code-complexity */\n/* solhint-disable max-line-length */\n/* solhint-disable func-name-mixedcase */\n/* solhint-disable use-forbidden-name */\n\n/*\n    .___           ___.                  .__\n  __| _/____   __ _\\_ |__   ___________  |__| ____\n / __ |\\__  \\ |  |  \\ __ \\_/ __ \\_  __ \\ |  |/  _ \\\n/ /_/ | / __ \\|  |  / \\_\\ \\  ___/|  | \\/ |  (  <_> )\n\\____ |(____  /____/|___  /\\___  >__| /\\ |__|\\____/\n     \\/     \\/          \\/     \\/     \\/\n\nB-I-N-G-O\n\nfor everyone....\n\n[x] Fair\n[x] Open Source\n[x] Better than grandma's bingo\n[x] made with <3.add(hate)\n\nPlay it!\n\nOr don't?\n\nNobody cares.\n*/\n\ncontract Bingo {\n    using SafeMath for uint;\n\n    MegaballInterface constant public megaballContract = MegaballInterface(address(0x3Fe2B3e8FEB33ed523cE8F786c22Cb6556f8A33F));\n    DiviesInterface constant private Divies = DiviesInterface(address(0xc7029Ed9EBa97A096e72607f4340c34049C7AF48));\n    uint256 constant public AGENT_END_BLOCK = 232;\n    uint256 constant public ICO_BLOCK = 200;\n    uint256 constant public ICO_TIME = 3600;\n\n    event CardCreated(address indexed ticketOwner, uint indexed playerTicket, uint indexed stage);\n    event Payment(address indexed customerAddress, uint indexed stage);\n    event NumberCalled(uint indexed number, uint indexed stage, uint indexed total);\n    /* user withdraw event */\n    event OnWithdraw(address indexed customerAddress, uint256 ethereumWithdrawn);\n    event StageCreated(uint indexed stageNumber);\n\n    /* modifiers */\n    modifier hasBalance() {\n        require(bingoVault[msg.sender] > 0);\n        _;\n    }\n\n    struct Splits {\n        uint256 INCOMING_FIFTYFIVE_PERCENT;\n        uint256 INCOMING_EIGHTEEN_PERCENT;\n        uint256 INCOMING_TEN_PERCENT;\n        uint256 INCOMING_SIX_PERCENT;\n        uint256 INCOMING_FIVE_PERCENT;\n        uint256 INCOMING_ONE_PERCENT;\n        uint256 INCOMING_TWO_PERCENT;\n        uint256 INCOMING_DENOMINATION;\n    }\n\n    /*\n    fund allocation\n    */\n    uint256 public numberCallerPot = 0;\n    uint256 public mainBingoPot = 0;\n    uint256 public progressiveBingoPot = 0;\n    uint256 public paybackPot = 0;\n    uint256 public outboundToMegaball = 0;\n    uint256 public buyP3dFunds = 0;\n    uint256 public nextRoundSeed = 0;\n    uint256 public prevDrawBlock = 0;\n\n/* stages manage drawings, tickets, and peg round denominations */\n    struct Stage {\n        bool stageCompleted;\n        bool allowTicketPurchases;\n        uint256 startBlock;\n        uint256 endBlock;\n        uint256 nextDrawBlock;\n        uint256 nextDrawTime;\n        Splits stageSplits;\n      //  address[] numberCallers;\n        mapping(uint8 => CallStatus) calledNumbers;\n        mapping(address => Card[]) playerCards;\n    }\n\n    struct CallStatus {\n        bool isCalled;\n        uint8 num;\n    }\n\n    struct Card {\n        Row B;\n        Row I;\n        Row N;\n        Row G;\n        Row O;\n        address owner;\n    }\n\n    struct Row {\n        uint8 N1;\n        uint8 N2;\n        uint8 N3;\n        uint8 N4;\n        uint8 N5;\n    }\n\n    mapping(uint256 => address[]) public numberCallers;\n    mapping(uint256 => Stage) public stages;\n    address public owner;\n    uint256 public numberOfStages = 0;\n    uint8 public numbersCalledThisStage = 0;\n    bool public resetDirty = false;\n    uint256 public numberOfCardsThisStage = 0;\n\n    mapping(uint256 => address[]) public entrants;\n\n    uint256 public DENOMINATION = 7000000000000000;\n\n    mapping (address => uint256) private bingoVault;\n\n    address[] public paybackQueue;\n    uint256 public paybackQueueCount = 0;\n    uint256 public nextPayback = 0;\n\n    address public lastCaller;\n    uint8 public lastNumber;\n\n    address public lastRef;\n\n    constructor() public\n    {\n        owner = msg.sender;\n        //initFirstStage();\n    }\n\n    function seedMain()\n    public\n    payable\n    {\n        require(msg.value >= 100000000000000000);\n        mainBingoPot = mainBingoPot.add(msg.value);\n    }\n\n\n    function seedProgressive()\n    public\n    payable\n    {\n        require(msg.value >= 100000000000000000);\n        progressiveBingoPot = progressiveBingoPot.add(msg.value);\n    }\n\n\n    function seedMegball()\n    internal\n    {\n        if (outboundToMegaball > 10000000000000000000) {\n            uint256 value = outboundToMegaball;\n            outboundToMegaball = 0;\n            megaballContract.seedJackpot.value(value)();\n        }\n    }\n\n    function withdrawFromMB()\n    internal\n    {\n        uint256 amount = megaballContract.getMoneyballBalance();\n        if (amount > 10000000000000000) {\n            mainBingoPot = mainBingoPot.add(amount);\n            megaballContract.withdraw();\n        }\n    }\n\n    function()\n    public\n    payable\n    {\n\n    }\n\n    function getMBbalance()\n    public\n    view\n    returns (uint)\n    {\n      return megaballContract.getMoneyballBalance();\n    }\n\n    function withdraw()\n    external\n    hasBalance\n    {\n        uint256 amount = bingoVault[msg.sender];\n        bingoVault[msg.sender] = 0;\n\n        emit OnWithdraw(msg.sender, amount);\n        msg.sender.transfer(amount);\n    }\n\n    function initFirstStage()\n    public\n    {\n        require(numberOfStages == 0);\n        CreateStage();\n    }\n\n    function sendDivi()\n    private\n    {\n\n        uint256 lsend = buyP3dFunds;\n        if (lsend > 0) {\n            buyP3dFunds = 0;\n            Divies.deposit.value(lsend)();\n        }\n    }\n\n    function getStageDrawTime(uint256 _stage)\n    public\n    view\n    returns (uint256, uint256)\n    {\n        return (stages[_stage].nextDrawTime, stages[_stage].nextDrawBlock);\n    }\n\n    function isCallNumberAvailable(uint256 _stage)\n    public\n    view\n    returns (bool, uint256, uint256)\n    {\n        if (stages[_stage].nextDrawBlock < block.number && stages[_stage].nextDrawTime < now)\n        {\n            return (true, 0, 0);\n        }\n        uint256 blocks = stages[_stage].nextDrawBlock.sub(block.number);\n        uint256 time = stages[_stage].nextDrawTime.sub(now);\n        return (false, blocks, time);\n    }\n\n    function stageMoveDetail(uint256 _stage)\n    public\n    view\n    returns (uint, uint)\n    {\n        uint256 blocks = 0;\n        uint256 time = 0;\n\n        if (stages[_stage].nextDrawBlock > block.number)\n        {\n            blocks = stages[_stage].nextDrawBlock.sub(block.number);\n            blocks.add(1);\n        }\n\n        if (stages[_stage].nextDrawTime > now)\n        {\n            time = stages[_stage].nextDrawTime.sub(now);\n            time.add(1);\n        }\n\n        return ( blocks, time );\n    }\n\n    function getMegaballStatus()\n    public\n    view\n    returns (bool)\n    {\n        uint256 _stage = megaballContract.numberOfStages();\n        _stage = _stage.sub(1);\n        (uint256 sm1, uint256 sm2) = megaballContract.stageMoveDetail(_stage);\n        if (sm1.add(sm2) == 0) {\n            return true;\n        }\n        return false;\n    }\n\n    function updateMegaballStatus()\n    private\n    {\n        uint256 _stage = megaballContract.numberOfStages();\n        _stage = _stage.sub(1);\n        (bool b1, bool b2, bool b3, bool b4) = megaballContract.getStageStatus(_stage);\n        require(b1 == false);\n        require(b3 == false);\n        if (b4 == true) {\n            if (megaballContract.getPlayerRaffleTickets() >= 10 && megaballContract.getRafflePlayerCount(_stage) > 7)\n            {\n                megaballContract.addPlayerToRaffle(address(this));\n            }\n            megaballContract.setDrawBlocks(_stage);\n        }\n\n        if (b4 == false && b2 == true) {\n            if (megaballContract.isFinalizeValid(_stage)) {\n                megaballContract.finalizeStage(_stage);\n            }\n        }\n    }\n\n    function callNumbers(uint256 _stage)\n    public\n    {\n        require(stages[_stage].nextDrawBlock < block.number);\n        require(stages[_stage].nextDrawTime <= now);\n        require(numberOfCardsThisStage >= 2);\n        require(stages[_stage].stageCompleted == false);\n\n        if (numbersCalledThisStage == 0) {\n            stages[_stage].allowTicketPurchases = false;\n            stages[_stage].startBlock = stages[_stage].startBlock.add(block.number);\n            stages[_stage].endBlock = block.number.add(AGENT_END_BLOCK);\n        }\n\n\n        if (getMegaballStatus()) {\n            updateMegaballStatus();\n            paybackQueue.push(msg.sender);\n        }\n\n\n        lastCaller = msg.sender;\n\n        numberCallers[_stage].push(msg.sender);\n\n        uint8 n1 = SafeMath.add2(1, (uint8(blockhash(stages[_stage].nextDrawBlock)) % 74));\n\n        uint8 resetCounter = 0;\n        if (isNumberCalled(_stage, n1) == false) {\n            callNumber(_stage, n1);\n            resetCounter++;\n        }\n\n        uint8 n2 = SafeMath.add2(1, (uint8(blockhash(stages[_stage].nextDrawBlock.sub(1))) % 74));\n        if (isNumberCalled(_stage, n2) == false && resetCounter == 0) {\n            callNumber(_stage, n2);\n            resetCounter++;\n        }\n\n        uint8 n3 = SafeMath.add2(1, (uint8(blockhash(stages[_stage].nextDrawBlock.sub(2))) % 74));\n        if (isNumberCalled(_stage, n3) == false && resetCounter == 0) {\n            callNumber(_stage, n3);\n            resetCounter++;\n        }\n\n        if (resetCounter == 0) {\n            resetDrawBlocks(_stage);\n            resetDirty = true;\n        }\n    }\n\n\n    function roundTimeout(uint256 _stage) public {\n        require(stages[_stage].endBlock < block.number);\n        require(stages[_stage].nextDrawTime < now);\n        require(stages[_stage].stageCompleted == false);\n        stages[_stage].stageCompleted = true;\n        CreateStage();\n    }\n\n    function resetDrawBlocks(uint256 _stage)\n    private\n    {\n        prevDrawBlock = stages[_stage].nextDrawBlock;\n        stages[_stage].nextDrawBlock = block.number.add(3);\n        stages[_stage].nextDrawTime = now.add(30);\n    }\n\n    function callNumber(uint256 _stage, uint8 num)\n    internal\n    {\n        require(num > 0);\n        require(num < 76);\n        stages[_stage].calledNumbers[num] = CallStatus(true, num);\n        numbersCalledThisStage = SafeMath.add2(numbersCalledThisStage, 1);\n        lastNumber = num;\n        resetDrawBlocks(_stage);\n        emit NumberCalled(num, numberOfStages.sub(1), numbersCalledThisStage);\n    }\n\n    function getCalledNumbers(uint256 _stage, uint8 _position)\n    public\n    view\n    returns (uint8)\n    {\n        return (stages[_stage].calledNumbers[_position].num);\n    }\n\n\n    function isNumberCalled(uint256 _stage, uint8 num)\n    public\n    view\n    returns (bool)\n    {\n        return (stages[_stage].calledNumbers[num].isCalled);\n    }\n\n    function CreateStage()\n    private\n    {\n\n        if (numberOfStages > 20) {\n            DENOMINATION = megaballContract.DENOMINATION();\n        }\n\n        uint256 ONE_PERCENT = calculateOnePercentTicketCostSplit(DENOMINATION);\n        uint256 INCOMING_FIFTYFIVE_PERCENT = calculatePayoutDenomination(ONE_PERCENT, 55);\n        uint256 INCOMING_EIGHTEEN_PERCENT = calculatePayoutDenomination(ONE_PERCENT, 18);\n        uint256 INCOMING_TEN_PERCENT = calculatePayoutDenomination(ONE_PERCENT, 10);\n        uint256 INCOMING_SIX_PERCENT = calculatePayoutDenomination(ONE_PERCENT, 6);\n        uint256 INCOMING_FIVE_PERCENT = calculatePayoutDenomination(ONE_PERCENT, 5);\n        uint256 INCOMING_TWO_PERCENT = calculatePayoutDenomination(ONE_PERCENT, 2);\n        uint256 INCOMING_ONE_PERCENT = calculatePayoutDenomination(ONE_PERCENT, 1);\n\n        Splits memory stageSplits = Splits(\n        INCOMING_FIFTYFIVE_PERCENT,\n        INCOMING_EIGHTEEN_PERCENT,\n        INCOMING_TEN_PERCENT,\n        INCOMING_SIX_PERCENT,\n        INCOMING_FIVE_PERCENT,\n        INCOMING_TWO_PERCENT,\n        INCOMING_ONE_PERCENT,\n        DENOMINATION);\n\n\n        stages[numberOfStages] = Stage(\n        false,\n        true,\n        block.number.add(ICO_BLOCK),\n        block.number.add(AGENT_END_BLOCK),\n        block.number.add(ICO_BLOCK),\n        now.add(ICO_TIME),\n        stageSplits);\n\n        numbersCalledThisStage = 0;\n        numberOfCardsThisStage = 0;\n        prevDrawBlock = block.number.add(ICO_BLOCK);\n\n        if (numberOfStages > 0) {\n            uint256 value = nextRoundSeed;\n            nextRoundSeed = 0;\n            mainBingoPot = mainBingoPot.add(value);\n            processPaybackQueue(numberOfStages);\n       }\n\n        withdrawFromMB();\n        seedMegball();\n        sendDivi();\n        numberOfStages = numberOfStages.add(1);\n        resetDirty = false;\n        emit StageCreated(numberOfStages);\n    }\n\n    /* get stage blocks */\n    function getStageBlocks(uint256 _stage)\n    public\n    view\n    returns (uint, uint)\n    {\n        return (stages[_stage].startBlock, stages[_stage].endBlock);\n    }\n\n    /*\n     this function is used for other things name it better\n    */\n    function calculatePayoutDenomination(uint256 _denomination, uint256 _multiple)\n    private\n    pure\n    returns (uint256)\n    {\n        return SafeMath.mul(_denomination, _multiple);\n    }\n\n    /* 1% split of denomination */\n    function calculateOnePercentTicketCostSplit(uint256 _denomination)\n    private\n    pure\n    returns (uint256)\n    {\n        return SafeMath.div(_denomination, 100);\n    }\n\n    function sort_array(uint8[5] arr_) internal pure returns (uint8[5] )\n    {\n        uint8 l = 5;\n        uint8[5] memory arr;\n\n        for (uint8 i=0; i<l; i++)\n        {\n            arr[i] = arr_[i];\n        }\n\n        for (i = 0; i < l; i++)\n        {\n            for (uint8 j=i+1; j < l; j++)\n            {\n                if (arr[i] < arr[j])\n                {\n                    uint8 temp = arr[j];\n                    arr[j] = arr[i];\n                    arr[i] = temp;\n                }\n          }\n        }\n\n        return arr;\n    }\n\n    function random(uint8 startNumber, uint8 offset, uint256 _seed, uint8 blockOffset) private view returns (uint8) {\n        uint b = block.number.sub(blockOffset);\n        b = b.sub(offset);\n        uint256 seed = uint256(keccak256(abi.encodePacked(blockhash(b))));\n        seed.add(_seed);\n\n        uint8 number = SafeMath.add2(startNumber, (uint8(uint256(keccak256(abi.encodePacked(seed))) % 14)));\n        return number;\n    }\n\n    function referralSpot(uint256 _stage)\n    public\n    view\n    returns(uint)\n    {\n        uint b = block.number.sub(1);\n\n        uint256 seed = uint256(keccak256(abi.encodePacked(\n            (block.timestamp).add\n            (block.difficulty).add\n            ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (now)).add\n            (block.gaslimit).add\n            ((uint256(keccak256(abi.encodePacked(msg.sender)))) / (now)).add\n            (block.number)\n        )));\n\n        uint256 number = (uint256(keccak256(abi.encodePacked(blockhash(b), seed))) % entrants[_stage].length);\n        return number;\n\n    }\n\n\n    function randomArr(uint8 n1, uint256 _seed, uint8 blockOffset) private view returns (uint8[5]) {\n        uint8[5] memory arr = [0, 0, 0, 0, 0];\n\n        uint8 count = 0;\n        arr[0] = random(n1, count, _seed, blockOffset);\n\n        count = SafeMath.add2(count, 1);\n        while (arr[1] == 0) {\n            if (random(n1, count, _seed, blockOffset) != arr[0]) {\n                arr[1] = random(n1, count, _seed, blockOffset);\n            }\n            count = SafeMath.add2(count, 1);\n        }\n\n        while (arr[2] == 0) {\n            if (random(n1, count, _seed, blockOffset) != arr[0] && random(n1, count, _seed, blockOffset) != arr[1]) {\n                arr[2] = random(n1, count, _seed, blockOffset);\n            }\n            count = SafeMath.add2(count, 1);\n        }\n\n        while (arr[3] == 0) {\n            if (random(n1, count, _seed, blockOffset) != arr[0] && random(n1, count, _seed, blockOffset) != arr[1]) {\n                if (random(n1, count, _seed, blockOffset) != arr[2]) {\n                    arr[3] = random(n1, count, _seed, blockOffset);\n                }\n            }\n            count = SafeMath.add2(count, 1);\n        }\n\n        while (arr[4] == 0) {\n            if (random(n1, count, _seed, blockOffset) != arr[0] && random(n1, count, _seed, blockOffset) != arr[1]) {\n                if (random(n1, count, _seed, blockOffset) != arr[2] && random(n1, count, _seed, blockOffset) != arr[3]) {\n                    arr[4] = random(n1, count, _seed, blockOffset);\n                }\n              }\n            count = SafeMath.add2(count, 1);\n        }\n        require(count < 60);\n        /**/\n        return arr;\n    }\n\n\n    function makeRow(uint8 n1, uint256 _seed, uint8 blockOffset) private view returns (Row) {\n        uint8[5] memory mem = randomArr(n1, _seed, blockOffset);\n        uint8[5] memory mem2 = sort_array(mem);\n\n        return Row(mem2[4], mem2[3], mem2[2], mem2[1], mem2[0]);\n    }\n\n    function makeCard(uint256 _seed) private view returns (Card) {\n\n        return Card(\n        makeRow(1, _seed, 0),\n        makeRow(16, _seed, 15),\n        makeRow(31, _seed, 30),\n        makeRow(46, _seed, 45),\n        makeRow(61, _seed, 60),\n        msg.sender);\n    }\n\n\n    /* get stage denom */\n    function getStageDenomination(uint256 _stage)\n    public\n    view\n    returns (uint)\n    {\n        return stages[_stage].stageSplits.INCOMING_DENOMINATION;\n    }\n\n    function getStageStatus(uint256 _stage)\n    public\n    view\n    returns (bool)\n    {\n        return (stages[_stage].allowTicketPurchases);\n    }\n\n    function getEntrant(uint256 _stage, uint256 _pos)\n    public\n    view\n    returns (address)\n    {\n        return entrants[_stage][_pos];\n    }\n\n    //entrants[_stage][_pos]\n\n    function createCard(uint256 _stage, uint256 _seed, uint8 team)\n    external\n    payable\n    {\n        require(stages[_stage].allowTicketPurchases);\n        require(msg.value == stages[_stage].stageSplits.INCOMING_DENOMINATION);\n        require(_seed > 0);\n        require(team > 0);\n        require(team < 4);\n        numberOfCardsThisStage = numberOfCardsThisStage.add(1);\n\n        /* alpha */\n        if (team == 1) {\n            mainBingoPot = mainBingoPot.add(stages[_stage].stageSplits.INCOMING_FIFTYFIVE_PERCENT);\n            numberCallerPot = numberCallerPot.add(stages[_stage].stageSplits.INCOMING_EIGHTEEN_PERCENT);\n            progressiveBingoPot = progressiveBingoPot.add(stages[_stage].stageSplits.INCOMING_TEN_PERCENT);\n            nextRoundSeed = nextRoundSeed.add(stages[_stage].stageSplits.INCOMING_SIX_PERCENT);\n            paybackPot = paybackPot.add(stages[_stage].stageSplits.INCOMING_FIVE_PERCENT);\n            buyP3dFunds = buyP3dFunds.add(stages[_stage].stageSplits.INCOMING_TWO_PERCENT);\n            outboundToMegaball = outboundToMegaball.add(stages[_stage].stageSplits.INCOMING_ONE_PERCENT);\n        }\n\n        /* beta */\n        if (team == 2) {\n            mainBingoPot = mainBingoPot.add(stages[_stage].stageSplits.INCOMING_FIFTYFIVE_PERCENT);\n            paybackPot = paybackPot.add(stages[_stage].stageSplits.INCOMING_EIGHTEEN_PERCENT);\n            numberCallerPot = numberCallerPot.add(stages[_stage].stageSplits.INCOMING_TEN_PERCENT);\n            progressiveBingoPot = progressiveBingoPot.add(stages[_stage].stageSplits.INCOMING_SIX_PERCENT);\n            buyP3dFunds = buyP3dFunds.add(stages[_stage].stageSplits.INCOMING_FIVE_PERCENT);\n            nextRoundSeed = nextRoundSeed.add(stages[_stage].stageSplits.INCOMING_TWO_PERCENT);\n            outboundToMegaball = outboundToMegaball.add(stages[_stage].stageSplits.INCOMING_ONE_PERCENT);\n        }\n\n        /* omega */\n        if (team == 3) {\n            mainBingoPot = mainBingoPot.add(stages[_stage].stageSplits.INCOMING_FIFTYFIVE_PERCENT);\n            mainBingoPot = mainBingoPot.add(stages[_stage].stageSplits.INCOMING_EIGHTEEN_PERCENT);\n            numberCallerPot = numberCallerPot.add(stages[_stage].stageSplits.INCOMING_TEN_PERCENT);\n            progressiveBingoPot = progressiveBingoPot.add(stages[_stage].stageSplits.INCOMING_TWO_PERCENT);\n            outboundToMegaball = outboundToMegaball.add(stages[_stage].stageSplits.INCOMING_SIX_PERCENT);\n            buyP3dFunds = buyP3dFunds.add(stages[_stage].stageSplits.INCOMING_FIVE_PERCENT);\n            nextRoundSeed = nextRoundSeed.add(stages[_stage].stageSplits.INCOMING_ONE_PERCENT);\n        }\n\n\n          //THERES A MYSTERY 3% we assume and done store cuz of stack depth problems w/ struct\n\n        if (entrants[_stage].length > 5) {\n        //    uint256 aa = 20;\n            address az = getEntrant(_stage, referralSpot(_stage));\n            lastRef = az;\n            payReferral(az, stages[_stage].stageSplits.INCOMING_TWO_PERCENT);\n            payReferral(az, stages[_stage].stageSplits.INCOMING_ONE_PERCENT);\n        }\n\n        if (entrants[_stage].length <= 5) {\n            payReferral(msg.sender, stages[_stage].stageSplits.INCOMING_TWO_PERCENT);\n            payReferral(msg.sender, stages[_stage].stageSplits.INCOMING_ONE_PERCENT);\n        }\n\n\n        /* push ticket into users stage def */\n        stages[_stage].playerCards[msg.sender].push(makeCard(_seed));\n        entrants[_stage].push(msg.sender);\n        stages[_stage].nextDrawTime = stages[_stage].nextDrawTime.add(1);\n        emit CardCreated(msg.sender, stages[_stage].playerCards[msg.sender].length, numberOfStages);\n\n    }\n\n\n    function payReferral(address _player, uint256 _amount)\n    private\n    {\n        bingoVault[_player] = bingoVault[_player].add(_amount);\n    }\n\n    /* contract balance */\n    function getContractBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n\n    function claimBingo(uint256 _stage, uint256 _position)\n    external\n    {\n        require(stages[_stage].stageCompleted == false, \"stage must be incomplete\");\n        if (checkBingo(_stage, _position) == true) {\n            stages[_stage].stageCompleted = true;\n            stages[_stage].endBlock = block.number;\n            payTicket(_stage, msg.sender);\n            payProgressive(_stage, msg.sender);\n            payCaller(_stage);\n            repayment(_stage, msg.sender);\n            processPaybackQueue(_stage);\n            CreateStage();\n        }\n    }\n\n    function processPaybackQueue(uint256 _stage)\n    private\n    {\n        uint256 paybackLength = paybackQueue.length;\n        uint256 value = paybackPot;\n        if (paybackLength > nextPayback) {\n            if (value > DENOMINATION) {\n                paybackPot = paybackPot.sub(DENOMINATION);\n                address _player = paybackQueue[nextPayback];\n                nextPayback = nextPayback.add(1);\n                bingoVault[_player] = bingoVault[_player].add(DENOMINATION);\n                emit Payment(_player, _stage);\n            }\n        }\n    }\n\n\n    function payCaller(uint256 _stage)\n    private\n    {\n        if (numberCallerPot > 0) {\n            uint256 amount = numberCallerPot;\n            numberCallerPot = 0;\n            uint256 callerCount = numberCallers[_stage].length;\n            uint256 n1 = (uint256(blockhash(prevDrawBlock)) % callerCount);\n            address a1 = numberCallers[_stage][n1];\n            bingoVault[a1] = bingoVault[a1].add(amount);\n            emit Payment(a1, _stage);\n        }\n    }\n\n    function payProgressive(uint256 _stage, address _player)\n    private\n    {\n        if (numbersCalledThisStage <= 10 && resetDirty == false) {\n            uint256 progressiveLocal = progressiveBingoPot;\n            uint256 ONE_PERCENT = calculateOnePercentTicketCostSplit(progressiveLocal);\n            uint256 amount = calculatePayoutDenomination(ONE_PERCENT, 50);\n            if (numbersCalledThisStage == 5) {\n                amount = calculatePayoutDenomination(ONE_PERCENT, 100);\n            }\n            if (numbersCalledThisStage == 6) {\n                amount = calculatePayoutDenomination(ONE_PERCENT, 90);\n            }\n            if (numbersCalledThisStage == 7) {\n                amount = calculatePayoutDenomination(ONE_PERCENT, 80);\n            }\n            if (numbersCalledThisStage == 8) {\n                amount = calculatePayoutDenomination(ONE_PERCENT, 70);\n            }\n            progressiveBingoPot = progressiveBingoPot.sub(amount);\n            bingoVault[_player] = bingoVault[_player].add(amount);\n            emit Payment(_player, _stage);\n        }\n    }\n\n    function payTicket(uint256 _stage, address _player)\n    private\n    {\n        if (mainBingoPot > 0) {\n            uint256 amount = mainBingoPot;\n            mainBingoPot = 0;\n            bingoVault[_player] = bingoVault[_player].add(amount);\n            emit Payment(_player, _stage);\n        }\n    }\n\n    function repayment(uint256 _stage, address _player)\n    private\n    {\n        if (numberOfCardsThisStage == 2) {\n            addToPaybacks(_stage, _player, 2);\n        }\n\n        if (numberOfCardsThisStage == 3) {\n            addToPaybacks(_stage, _player, 3);\n        }\n\n        if (numberOfCardsThisStage == 4) {\n            addToPaybacks(_stage, _player, 4);\n        }\n\n        if (numberOfCardsThisStage == 5) {\n            addToPaybacks(_stage, _player, 5);\n        }\n\n        if (numberOfCardsThisStage > 5) {\n            uint256 playerCount = entrants[_stage].length;\n            uint256 n1 = (uint256(blockhash(prevDrawBlock)) % playerCount);\n            paybackQueue.push(entrants[_stage][n1]);\n        }\n\n    }\n\n    function addToPaybacks(uint256 _stage, address _player, uint8 _max)\n    private\n    {\n        for (uint8 x = 0; x < _max; x++) {\n            if (entrants[_stage][x] != _player && entrants[_stage][x] != lastCaller) {paybackQueue.push(entrants[_stage][x]);}\n        }\n\n    }\n\n    /* get number of players in raffle drawing */\n\n    function getNumberCallersCount(uint256 _stage)\n    public\n    view\n    returns (uint)\n    {\n        return numberCallers[_stage].length;\n    }\n\n\n    /* get number of players in raffle drawing */\n    function getPaybackPlayerCount()\n    public\n    view\n    returns (uint)\n    {\n        return paybackQueue.length;\n    }\n\n    /* get number of players in raffle drawing */\n    function getEntrantsPlayerCount(uint256 _stage)\n    public\n    view\n    returns (uint)\n    {\n        return entrants[_stage].length;\n    }\n\n    /*\n    *  balance functions\n    *  players main game balance\n    */\n    function getBingoBalance() public view returns (uint) {\n        return bingoVault[msg.sender];\n    }\n\n\n    function checkBingo(uint256 _stage, uint256 _position)\n    public\n    view\n    returns (bool)\n    {\n\n        if (checkB(_stage, _position) == 5) { return true;}\n        if (checkI(_stage, _position) == 5) { return true;}\n        if (checkN(_stage, _position) == 5) { return true;}\n        if (checkG(_stage, _position) == 5) { return true;}\n        if (checkO(_stage, _position) == 5) { return true;}\n        if (checkH1(_stage, _position) == 5) { return true;}\n        if (checkH2(_stage, _position) == 5) { return true;}\n        if (checkH3(_stage, _position) == 5) { return true;}\n        if (checkH4(_stage, _position) == 5) { return true;}\n        if (checkH5(_stage, _position) == 5) { return true;}\n        if (checkD1(_stage, _position) == 5) { return true;}\n        if (checkD2(_stage, _position) == 5) { return true;}\n        return false;\n    }\n\n    function checkD1(uint256 _stage, uint256 _position)\n    internal\n    view\n    returns (uint8) {\n        require(_stage <= SafeMath.sub(numberOfStages, 1));\n        uint8 count = 0;\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].B.N1)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].I.N2)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].N.N3)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].G.N4)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].O.N5)) {count = SafeMath.add2(count, 1);}\n        return count;\n    }\n\n    function checkD2(uint256 _stage, uint256 _position)\n    internal\n    view\n    returns (uint8) {\n        require(_stage <= SafeMath.sub(numberOfStages, 1));\n        uint8 count = 0;\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].B.N5)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].I.N4)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].N.N3)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].G.N2)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].O.N1)) {count = SafeMath.add2(count, 1);}\n        return count;\n    }\n\n    function checkB(uint256 _stage, uint256 _position)\n    internal\n    view\n    returns (uint8) {\n        require(_stage <= SafeMath.sub(numberOfStages, 1));\n        uint8 count = 0;\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].B.N1)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].B.N2)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].B.N3)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].B.N4)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].B.N5)) {count = SafeMath.add2(count, 1);}\n        return count;\n    }\n\n    function checkI(uint256 _stage, uint256 _position)\n    internal\n    view\n    returns (uint8) {\n        require(_stage <= SafeMath.sub(numberOfStages, 1));\n        uint8 count = 0;\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].I.N1)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].I.N2)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].I.N3)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].I.N4)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].I.N5)) {count = SafeMath.add2(count, 1);}\n        return count;\n    }\n\n    function checkN(uint256 _stage, uint256 _position)\n    internal\n    view\n    returns (uint8)  {\n        require(_stage <= SafeMath.sub(numberOfStages, 1));\n        uint8 count = 0;\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].N.N1)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].N.N2)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].N.N3)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].N.N4)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].N.N5)) {count = SafeMath.add2(count, 1);}\n        return count;\n    }\n\n    function checkG(uint256 _stage, uint256 _position) public view returns (uint8)  {\n        require(_stage <= SafeMath.sub(numberOfStages, 1));\n        uint8 count = 0;\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].G.N1)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].G.N2)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].G.N3)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].G.N4)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].G.N5)) {count = SafeMath.add2(count, 1);}\n        return count;\n    }\n\n    function checkO(uint256 _stage, uint256 _position)\n    internal\n    view\n    returns (uint8)  {\n        require(_stage <= SafeMath.sub(numberOfStages, 1));\n        uint8 count = 0;\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].O.N1)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].O.N2)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].O.N3)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].O.N4)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].O.N5)) {count = SafeMath.add2(count, 1);}\n        return count;\n    }\n\n    function checkH1(uint256 _stage, uint256 _position)\n    internal\n    view\n    returns (uint8) {\n        require(_stage <= SafeMath.sub(numberOfStages, 1));\n        uint8 count = 0;\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].B.N1)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].I.N1)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].N.N1)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].G.N1)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].O.N1)) {count = SafeMath.add2(count, 1);}\n        return count;\n    }\n\n    function checkH2(uint256 _stage, uint256 _position)\n    internal\n    view\n    returns (uint8) {\n        require(_stage <= SafeMath.sub(numberOfStages, 1));\n        uint8 count = 0;\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].B.N2)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].I.N2)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].N.N2)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].G.N2)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].O.N2)) {count = SafeMath.add2(count, 1);}\n        return count;\n    }\n\n    function checkH3(uint256 _stage, uint256 _position)\n    internal\n    view\n    returns (uint8) {\n        require(_stage <= SafeMath.sub(numberOfStages, 1));\n        uint8 count = 0;\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].B.N3)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].I.N3)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].N.N3)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].G.N3)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].O.N3)) {count = SafeMath.add2(count, 1);}\n        return count;\n    }\n\n\n    function checkH4(uint256 _stage, uint256 _position)\n    internal\n    view\n    returns (uint8) {\n        require(_stage <= SafeMath.sub(numberOfStages, 1));\n        uint8 count = 0;\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].B.N4)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].I.N4)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].N.N4)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].G.N4)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].O.N4)) {count = SafeMath.add2(count, 1);}\n        return count;\n    }\n\n    function checkH5(uint256 _stage, uint256 _position)\n    internal\n    view\n    returns (uint8) {\n        require(_stage <= SafeMath.sub(numberOfStages, 1));\n        uint8 count = 0;\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].B.N5)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].I.N5)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].N.N5)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].G.N5)) {count = SafeMath.add2(count, 1);}\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].O.N5)) {count = SafeMath.add2(count, 1);}\n        return count;\n    }\n\n    function isWithinBounds(uint8 num, uint8 min, uint8 max) internal pure returns (bool) {\n        if (num >= min && num <= max) {return true;}\n        return false;\n    }\n\n    function getPlayerCardsThisStage(uint256 _stage)\n    public\n    view\n    returns (uint)\n    {\n        return (stages[_stage].playerCards[msg.sender].length);\n    }\n\n    function nextPaybacks(uint256 offset)\n    public\n    view\n    returns (address)\n    {\n        require(offset.add(nextPayback) < paybackQueue.length);\n        return (paybackQueue[nextPayback.add(offset)]);\n    }\n\n    function getCardRowB(uint256 _stage, uint256 _position)\n    public\n    view\n    returns (uint, uint, uint, uint, uint)\n    {\n        require(_stage <= SafeMath.sub(numberOfStages, 1));\n        address _player = msg.sender;\n        return (stages[_stage].playerCards[_player][_position].B.N1,\n        stages[_stage].playerCards[_player][_position].B.N2,\n        stages[_stage].playerCards[_player][_position].B.N3,\n        stages[_stage].playerCards[_player][_position].B.N4,\n        stages[_stage].playerCards[_player][_position].B.N5);\n    }\n\n    function getCardRowI(uint256 _stage, uint256 _position)\n    public\n    view\n    returns (uint, uint, uint, uint, uint)\n    {\n        require(_stage <= SafeMath.sub(numberOfStages, 1));\n        address _player = msg.sender;\n        return (stages[_stage].playerCards[_player][_position].I.N1,\n        stages[_stage].playerCards[_player][_position].I.N2,\n        stages[_stage].playerCards[_player][_position].I.N3,\n        stages[_stage].playerCards[_player][_position].I.N4,\n        stages[_stage].playerCards[_player][_position].I.N5);\n    }\n\n    function getCardRowN(uint256 _stage, uint256 _position)\n    public\n    view\n    returns (uint, uint, uint, uint, uint)\n    {\n        require(_stage <= SafeMath.sub(numberOfStages, 1));\n        address _player = msg.sender;\n        return (stages[_stage].playerCards[_player][_position].N.N1,\n        stages[_stage].playerCards[_player][_position].N.N2,\n        stages[_stage].playerCards[_player][_position].N.N3,\n        stages[_stage].playerCards[_player][_position].N.N4,\n        stages[_stage].playerCards[_player][_position].N.N5);\n    }\n\n    function getCardRowG(uint256 _stage, uint256 _position)\n    public\n    view\n    returns (uint, uint, uint, uint, uint)\n    {\n        require(_stage <= SafeMath.sub(numberOfStages, 1));\n        address _player = msg.sender;\n        return (stages[_stage].playerCards[_player][_position].G.N1,\n        stages[_stage].playerCards[_player][_position].G.N2,\n        stages[_stage].playerCards[_player][_position].G.N3,\n        stages[_stage].playerCards[_player][_position].G.N4,\n        stages[_stage].playerCards[_player][_position].G.N5);\n    }\n\n    function getCardRowO(uint256 _stage, uint256 _position)\n    public\n    view\n    returns (uint, uint, uint, uint, uint)\n    {\n        require(_stage <= SafeMath.sub(numberOfStages, 1));\n        address _player = msg.sender;\n        return (stages[_stage].playerCards[_player][_position].O.N1,\n        stages[_stage].playerCards[_player][_position].O.N2,\n        stages[_stage].playerCards[_player][_position].O.N3,\n        stages[_stage].playerCards[_player][_position].O.N4,\n        stages[_stage].playerCards[_player][_position].O.N5);\n    }\n}\n\ninterface MegaballInterface {\n    function seedJackpot() external payable;\n    function getMoneyballBalance() external view returns (uint);\n    function withdraw() external;\n    function getRafflePlayerCount(uint256 _stage) external view returns (uint);\n    function setDrawBlocks(uint256 _stage) external;\n    function isFinalizeValid(uint256 _stage) external view returns (bool);\n    function finalizeStage(uint256 _stage) external;\n    function numberOfStages() external view returns (uint);\n    function stageMoveDetail(uint256 _stage) external view returns (uint, uint);\n    function getPlayerRaffleTickets() external view returns (uint);\n    function getStageStatus(uint256 _stage) external view returns (bool, bool, bool, bool);\n    function addPlayerToRaffle(address _player) external;\n    function DENOMINATION() external view returns(uint);\n}\n\ninterface DiviesInterface {\n    function deposit() external payable;\n}",
  "bytecode": ""
}