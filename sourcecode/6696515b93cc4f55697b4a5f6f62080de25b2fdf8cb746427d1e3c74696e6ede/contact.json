{
  "address": "0x441c00135934b3e806c122f0cab2abbe5f4445a7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "UDAXToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-07\n*/\n\npragma solidity ^0.4.24;\n\ncontract owned {\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n} \n\ncontract UDAXToken is owned {\n    string public name;\n    string public symbol;\n    uint8 public decimals = 8; \n    uint256 public totalSupply;\n    mapping (address => bool) public frozenAccount;\n    \n    /* This generates a public event on the blockchain that will notify clients */\n    event FrozenFunds(address target, bool frozen);\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Burn(address indexed from, uint256 value);\n\n\n    constructor() public {\n        totalSupply = 200000000 * 10 ** uint256(decimals); \n        balanceOf[msg.sender] = totalSupply;              \n        name = \"UDAX Token\";                                 \n        symbol = \"UDT\";                            \n    }\n\n    function _transfer(address _from, address _to, uint _value) internal {\n  \n        require(_to != 0x0);\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        require(!frozenAccount[_from]);                     \n        require(!frozenAccount[_to]);  \n        \n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    function burnFrom(address _from, uint256 _value) onlyOwner public returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n        totalSupply -= _value;                              // Update totalSupply\n        emit Burn(_from, _value);\n        return true;\n    }\n    \n    function mintToken(address target, uint256 initialSupply) onlyOwner public {\n        balanceOf[target] += initialSupply;\n        totalSupply += initialSupply;\n        emit Transfer(0, this, initialSupply);\n        emit Transfer(this, target, initialSupply);\n    } \n   \n   \n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n}",
  "bytecode": "60806040526003805460ff1916600817905534801561001d57600080fd5b506000805433600160a060020a03199091168117825560035460ff16600a90810a630bebc200026004819055918352600660209081526040938490209290925582518084019093528083527f5544415820546f6b656e000000000000000000000000000000000000000000009290910191825261009c916001916100e7565b506040805180820190915260038082527f554454000000000000000000000000000000000000000000000000000000000060209092019182526100e1916002916100e7565b50610182565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061012857805160ff1916838001178555610155565b82800160010185558215610155579182015b8281111561015557825182559160200191906001019061013a565b50610161929150610165565b5090565b61017f91905b80821115610161576000815560010161016b565b90565b6109ed806101916000396000f3006080604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100ea578063095ea7b31461017457806318160ddd146101ac57806323b872dd146101d3578063313ce567146101fd57806342966c681461022857806370a082311461024057806379c650681461026157806379cc6790146102875780638da5cb5b146102ab57806395d89b41146102dc578063a9059cbb146102f1578063b414d4b614610315578063dd62ed3e14610336578063e724529c1461035d578063f2fde38b14610383575b600080fd5b3480156100f657600080fd5b506100ff6103a4565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610139578181015183820152602001610121565b50505050905090810190601f1680156101665780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018057600080fd5b50610198600160a060020a0360043516602435610431565b604080519115158252519081900360200190f35b3480156101b857600080fd5b506101c161045e565b60408051918252519081900360200190f35b3480156101df57600080fd5b50610198600160a060020a0360043581169060243516604435610464565b34801561020957600080fd5b506102126104d3565b6040805160ff9092168252519081900360200190f35b34801561023457600080fd5b506101986004356104dc565b34801561024c57600080fd5b506101c1600160a060020a0360043516610554565b34801561026d57600080fd5b50610285600160a060020a0360043516602435610566565b005b34801561029357600080fd5b50610198600160a060020a036004351660243561061c565b3480156102b757600080fd5b506102c0610705565b60408051600160a060020a039092168252519081900360200190f35b3480156102e857600080fd5b506100ff610714565b3480156102fd57600080fd5b50610285600160a060020a036004351660243561076c565b34801561032157600080fd5b50610198600160a060020a036004351661077b565b34801561034257600080fd5b506101c1600160a060020a0360043581169060243516610790565b34801561036957600080fd5b50610285600160a060020a036004351660243515156107ad565b34801561038f57600080fd5b50610285600160a060020a0360043516610828565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104295780601f106103fe57610100808354040283529160200191610429565b820191906000526020600020905b81548152906001019060200180831161040c57829003601f168201915b505050505081565b336000908152600760209081526040808320600160a060020a039590951683529390529190912055600190565b60045481565b600160a060020a038316600090815260076020908152604080832033845290915281205482111561049457600080fd5b600160a060020a03841660009081526007602090815260408083203384529091529020805483900390556104c984848461086e565b5060019392505050565b60035460ff1681565b336000908152600660205260408120548211156104f857600080fd5b3360008181526006602090815260409182902080548690039055600480548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a2506001919050565b60066020526000908152604090205481565b600054600160a060020a0316331461057d57600080fd5b600160a060020a03821660009081526006602090815260408083208054850190556004805485019055805184815290513093927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef928290030190a3604080518281529051600160a060020a0384169130917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b60008054600160a060020a0316331461063457600080fd5b600160a060020a03831660009081526006602052604090205482111561065957600080fd5b600160a060020a038316600090815260076020908152604080832033845290915290205482111561068957600080fd5b600160a060020a0383166000818152600660209081526040808320805487900390556007825280832033845282529182902080548690039055600480548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a250600192915050565b600054600160a060020a031681565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156104295780601f106103fe57610100808354040283529160200191610429565b61077733838361086e565b5050565b60056020526000908152604090205460ff1681565b600760209081526000928352604080842090915290825290205481565b600054600160a060020a031633146107c457600080fd5b600160a060020a038216600081815260056020908152604091829020805460ff191685151590811790915582519384529083015280517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a59281900390910190a15050565b600054600160a060020a0316331461083f57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000600160a060020a038316151561088557600080fd5b600160a060020a0384166000908152600660205260409020548211156108aa57600080fd5b600160a060020a038316600090815260066020526040902054828101116108d057600080fd5b600160a060020a03841660009081526005602052604090205460ff16156108f657600080fd5b600160a060020a03831660009081526005602052604090205460ff161561091c57600080fd5b50600160a060020a038083166000818152600660209081526040808320805495891680855282852080548981039091559486905281548801909155815187815291519390950194927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3600160a060020a038084166000908152600660205260408082205492871682529020540181146109bb57fe5b505050505600a165627a7a72305820ed3670884952bdf6b6a0abf84cf40fd95ef023424f50df3899e067a3c789e1c00029"
}