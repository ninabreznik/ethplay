{
  "address": "0x14c1179b52a41b85b738a9483b12060516efcda4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ICONIC_NIC",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-11\n*/\n\npragma solidity ^0.4.18;\n\n\n/**\n* @title SafeMath\n* @dev Math operations with safety checks that throw on error\n*/\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n    * account.\n    */\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        \n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\ncontract TokenERC20 {\n    using SafeMath for uint256;\n\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;\n    // 18 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply;\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n\n    /**\n    * Constructor function\n    *\n    * Initializes contract with initial supply tokens to the creator of the contract\n    */\n    function TokenERC20(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n    }\n\n    /**\n    * Internal transfer, only can be called by this contract\n    *\n    * Send `_value` tokens to `_to` from `_from`\n    *\n    * @param _from Address of the sender\n    * @param _to Address of the recipient\n    * @param _value the amount to send\n    */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n\n        // Check for overflows\n        require(balanceOf[_to].add(_value) > balanceOf[_to]);\n\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from].add(balanceOf[_to]);\n\n        // Subtract from the sender\n        balanceOf[_from] = balanceOf[_from].sub(_value);\n\n        // Add the same to the recipient\n        balanceOf[_to] = balanceOf[_to].add(_value);\n\n        emit Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\n    }\n\n    /**\n    * Transfer tokens\n    *\n    * Send `_value` tokens to `_to` from your account\n    *\n    * @param _to The address of the recipient\n    * @param _value the amount to send\n    */\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    /**\n    * Transfer tokens from other address\n    *\n    * Send `_value` tokens to `_to` in behalf of `_from`\n    *\n    * @param _from The address of the sender\n    * @param _to The address of the recipient\n    * @param _value the amount to send\n    */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        //allowance[_from][msg.sender] -= _value;\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n    * Set allowance for other address\n    *\n    * Allows `_spender` to spend no more than `_value` tokens in your behalf\n    *\n    * @param _spender The address authorized to spend\n    * @param _value the max amount they can spend\n    */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /**\n    * Set allowance for other address and notify\n    *\n    * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n    *\n    * @param _spender The address authorized to spend\n    * @param _value the max amount they can spend\n    * @param _extraData some extra information to send to the approved contract\n    */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\t\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    /**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n        totalSupply -= _value;                              // Update totalSupply\n        emit Burn(_from, _value);\n        return true;\n    }\n}\n\n/******************************************/\n/*       ADVANCED TOKEN STARTS HERE       */\n/******************************************/\ncontract ICONIC_NIC is Ownable, TokenERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => bool)    public  frozenAccount;\n    mapping (address => uint256) public freezingPeriod; // how many days the account must remain frozen?\n\n    mapping (address => bool) public exchangesAccounts;\n\n    address public bountyManagerAddress; //bounty manager address\n    address public bountyManagerDistributionContract = 0x0; // bounty distributor smart contract address\n\n    address public fundAccount; \t// ballast fund address\n    bool public isSetFund = false;\t// if ballast fund is set\n\n    uint256 public creationDate;\n\n    uint256 public constant frozenDaysForAdvisor       = 186;  \n    uint256 public constant frozenDaysForBounty        = 186;\n    uint256 public constant frozenDaysForEarlyInvestor = 51;\n    uint256 public constant frozenDaysForICO           = 65;   \n    uint256 public constant frozenDaysForPartner       = 369;\n    uint256 public constant frozenDaysForPreICO        = 51;\n\n    /**\n    * allowed for a bounty manager account only\n    */\n    modifier onlyBountyManager(){\n        require((msg.sender == bountyManagerDistributionContract) || (msg.sender == bountyManagerAddress));\n        _;\n    }\n\n    /**\n    * allowed for a fund account only\n    */\n    modifier onlyFund(){\n        require(msg.sender == fundAccount);\n        _;\n    }\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event FrozenFunds(address target, bool frozen);\n\n    /**\n    * Initializes contract with initial supply tokens to the creator of the contract\n    */\n    function ICONIC_NIC(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public \n    {\n        /* solium-disable-next-line */\n        creationDate = now;\n\n        // PARTNERS DISTRIBUTION\n        _initializeAccount(0x85abeD924205bbE4D32077E596e45B9F40AAF8d9, frozenDaysForPartner, 2115007);\n        _initializeAccount(0xf7817F08C2660970014a086a4Ba679636e73E8ef, frozenDaysForPartner, 8745473);\n        _initializeAccount(0x2c208677f8BAB9c6A44bBe3554f36d2440C9b6C2, frozenDaysForPartner, 3498189);\n        _initializeAccount(0x3689B9a43ab904D70f396B2A27DDac0E5885CF68, frozenDaysForPartner, 26236419);\n        _initializeAccount(0x245B058C8c256D011742aF5Faa296198735eE0Ee, frozenDaysForPartner, 211501);\n        _initializeAccount(0xeEFA9f8f39aaF1d1Ed160Ac2465e937A8F154182, frozenDaysForPartner, 1749095);\n\n        // EARLY INVESTOR DISTRIBUTION\n        _initializeAccount(0x4718bB26bCE82459913aaCA09a006Daa517F1c0E, frozenDaysForEarlyInvestor, 225000);\n        _initializeAccount(0x8cC1d930e685c977EFcEf9dc412D3ADbE11B84c1, frozenDaysForEarlyInvestor, 2678100);\n\n        // ADVISOR DISTRIBUTION\n        _initializeAccount(0x272c41b76Bad949739839E6BB5Eb9f2B0CDFD95D, frozenDaysForAdvisor, 1057503);\n        _initializeAccount(0x3a5cd9E7ccFE4DD5484335F3AF30CCAba95D07C3, frozenDaysForAdvisor, 528752);\n        _initializeAccount(0xA10CC5321E834c41137f2150A9b0f2Aa1c5016, frozenDaysForAdvisor, 1057503);\n        _initializeAccount(0x59B640c5663E5e79Ce9F68EBbC28454490DbA7B8, frozenDaysForAdvisor, 1057503);\n        _initializeAccount(0xdCA69FbfEFf48851ceC91B57610FA60ABc27Af3B, frozenDaysForAdvisor, 3172510);\n        _initializeAccount(0x332526F0082d4d385F9Ef393841f44c1bf813D8c, frozenDaysForAdvisor, 3172510);\n        _initializeAccount(0xf6B436cBB177777A170819128EbBeF0715101eA2, frozenDaysForAdvisor, 1275000);\n        _initializeAccount(0xB76a63Fa7658aD0480986e609b9d5b1f1b6B53b9, frozenDaysForAdvisor, 1487500);\n        _initializeAccount(0x2bC240bc0D28725dF790706da7663413ac8Fa5ee, frozenDaysForAdvisor, 2125000);\n        _initializeAccount(0x32Aa02961fa15e74D896C45A428E5d1884af2217, frozenDaysForAdvisor, 1057503);\n        _initializeAccount(0x5340EC716a00Db16a9C289369e4b30ae897C25d3, frozenDaysForAdvisor, 1586255);\n        _initializeAccount(0x39d6FDB4B0f8dfE39EC0b4fE5Dd9B2f66e30f8D1, frozenDaysForAdvisor, 846003);\n        _initializeAccount(0xCe438C52D95ee47634f9AeE36de5488D0d5D0FBd, frozenDaysForAdvisor, 250000);\n\n        // BOUNTY DISTRIBUTION\n        bountyManagerAddress = 0xA9939938e6BAcC0b748045be80FD9E958898eB79;\n        _initializeAccount(bountyManagerAddress, frozenDaysForBounty, 15000000);\n    }\n\n    /**\n    * Only owner function to set ballast fund account address\n    * \n    * @dev it can be set only once\n    * @param _address smart contract address of ballast fund\n    */\n    function setFundAccount(address _address) onlyOwner public{\n        require (_address != 0x0);\n        require (!isSetFund);\n        fundAccount = _address;\n        isSetFund = true;    \n    }\n\n    /**\n    * Only owner function to add Exchange Accounts\n    *\n    * @param _address Exchange address\n    */\n    function addExchangeTestAccounts(address _address) onlyOwner public{\n        require(_address != 0x0);\n        exchangesAccounts[_address] = true;\n    }\n\n    /**\n    * Only owner function to remove Exchange Accounts\n    *\n    * @param _address Exchange address\n    */\n    function removeExchangeTestAccounts(address _address) onlyOwner public{\n        delete exchangesAccounts[_address];\n    }\n\n    /**\n    * Initialize accounts when token deploy occurs\n    *\n    * initialize `_address` account, with balance equal `_value` and frozen for `_frozenDays`\n    *\n    * @param _address wallet address to initialize\n    * @param _frozenDays quantity of days to freeze account\n    * @param _value quantity of tokens to send to account\n    */\n    function _initializeAccount(address _address, uint _frozenDays, uint _value) internal{\n        _transfer(msg.sender, _address, _value * 10 ** uint256(decimals));\n        freezingPeriod[_address] = _frozenDays;\n        _freezeAccount(_address, true);\n    }\n\n    /**\n    * Check if account freezing period expired\n    *\n    * `now` has to be greater or equal than `creationDate` + `freezingPeriod[_address]` * `1 day`\n    *\n    * @param _address account address to check if allowed to transfer tokens\n    * @return bool true if is allowed to transfer and false if not\n    */\n    function _isTransferAllowed( address _address ) view public returns (bool)\n    {\n        /* solium-disable-next-line */\n        if( now >= creationDate + freezingPeriod[_address] * 1 days ){\n            return ( true );\n        } else {\n            return ( false );\n        }\n    }\n\n    /**\n    * Internal function to transfer tokens\n    *\n    * @param _from account to withdraw tokens\n    * @param _to account to receive tokens\n    * @param _value quantity of tokens to transfer\n    */\n    function _transfer(address _from, address _to, uint _value) internal {\n        require (_to != 0x0);                                  // Prevent transfer to 0x0 address. Use burn() instead\n        require (balanceOf[_from] >= _value);                  // Check if the sender has enough\n        require (balanceOf[_to].add(_value) > balanceOf[_to]); // Check for overflows\n\n        // check if the sender is under a freezing period\n        if(_isTransferAllowed(_from)){ \n            _setFreezingPeriod(_from, false, 0);\n        }\n\n        // check if the recipient is under a freezing period\n        if(_isTransferAllowed(_to)){\n            _setFreezingPeriod(_to, false, 0);\n        }\n\n        require(!frozenAccount[_from]);     // Check if sender is frozen\n        require(!frozenAccount[_to]);       // Check if recipient is frozen                \n        \n        balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the sender\n        balanceOf[_to] = balanceOf[_to].add(_value);        // Add the same to the recipient\n\n        emit Transfer(_from, _to, _value);\n    }\n    \n    /**\n    * Internal function to deliver tokens for bounty, pre-ICO or ICO with determined freezing periods\n    *\n    * @param _from account address to withdraw tokens\n    * @param _to account address to send tokens\n    * @param _value quantity of tokes to send\n    * @param _frozenDays quantity of days to freeze account\n    */\n    function _tokenDelivery(address _from, address _to, uint _value, uint _frozenDays) internal {\n        freezingPeriod[_to] = 0;\n        _freezeAccount(_to, false);\n        _transfer(_from, _to, _value);\n        freezingPeriod[_to] = _frozenDays;\n        _freezeAccount(_to, true); \n    }\n    \n    /**\n    * Only owner function to deliver tokens for pre-ICO investors\n    *\n    * @param _to account address who will receive the tokens\n    * @param _value quantity of tokens to deliver\n    */\n    function preICOTokenDelivery(address _to, uint _value) onlyOwner public {\n        _tokenDelivery(msg.sender, _to, _value, frozenDaysForPreICO);\n    }\n    \n    /**\n    * Only owner function to deliver tokens for ICO investors\n    *\n    * @param _to account address who will receive tokens\n    * @param _value quantity of tokens to deliver\n    */\n    function ICOTokenDelivery(address _to, uint _value) onlyOwner public {\n        _tokenDelivery(msg.sender, _to, _value, frozenDaysForICO);\n    }\n    \n    function setBountyDistributionContract(address _contractAddress) onlyOwner public {\n        bountyManagerDistributionContract = _contractAddress;\n    }\n\n    /**\n    * Only bounty manager distribution contract function to deliver tokens for bounty community\n    *\n    * @param _to account addres who will receive tokens\n    * @param _value quantity of tokens to deliver\n    */\n    function bountyTransfer(address _to, uint _value) onlyBountyManager public {\n        _freezeAccount(bountyManagerAddress, false);\n        _tokenDelivery(bountyManagerAddress, _to, _value, frozenDaysForBounty);\n        _freezeAccount(bountyManagerAddress, true);\n    }\n\n    /**\n    * Function to get days to unfreeze some account\n    *\n    * @param _address account address to get days\n    * @return result quantity of days to unfreeze `address`\n    */\n    function daysToUnfreeze(address _address) public view returns (uint256) {\n        require(_address != 0x0);\n\n        /* solium-disable-next-line */\n        uint256 _now = now;\n        uint256 result = 0;\n\n        if( _now <= creationDate + freezingPeriod[_address] * 1 days ) {\n            // still under the freezing period.\n            uint256 finalPeriod = (creationDate + freezingPeriod[_address] * 1 days) / 1 days;\n            uint256 currePeriod = _now / 1 days;\n            result = finalPeriod - currePeriod;\n        }\n        \n        return result;\n    }\n\n    /**\n    * @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n    * @param target Address to be frozen\n    * @param freeze either to freeze it or not\n    */\n    function _freezeAccount(address target, bool freeze) internal {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n\n    /**\n    * Only owner function to call `_freezeAccount` directly\n    *\n    * @param target account address to freeze\n    * @param freeze true to freeze account and false to unfreeze\n    */\n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        _freezeAccount(target, freeze);\n    }\n    \n    /**\n    * Internal call to set freezing period for some account\n    *\n    * @param _target account address to freeze\n    * @param _freeze true to freeze account and false to unfreeze\n    * @param _days period to keep account frozen\n    */\n    function _setFreezingPeriod(address _target, bool _freeze, uint256 _days) internal {\n        _freezeAccount(_target, _freeze);\n        freezingPeriod[_target] = _days;\n    }\n    \n    /**\n    * Only owner function to call `_setFreezingPeriod` directly\n    *\n    * @param _target account address to freeze\n    * @param _freeze true to freeze account and false to unfreeze\n    * @param _days period to keep account frozen\n    */\n    function setFreezingPeriod(address _target, bool _freeze, uint256 _days) onlyOwner public {\n        _setFreezingPeriod(_target, _freeze, _days);\n    }\n    \n    /**\n    * Transfer tokens from other address\n    *\n    * Send `_value` tokens to `_to` in behalf of `_from`\n    *\n    * @param _from The address of the sender\n    * @param _to The address of the recipient\n    * @param _value the amount to send\n    */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        //allowance[_from][msg.sender] -= _value;\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n    * Set allowance for other address\n    *\n    * Allows `_spender` to spend no more than `_value` tokens in your behalf\n    *\n    * @param _spender The address authorized to spend\n    * @param _value the max amount they can spend\n    */\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        // check if the sender is under a freezing period\n        if( _isTransferAllowed(msg.sender) )  {\n            _setFreezingPeriod(msg.sender, false, 0);\n        }\n        \n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /**\n    * Set allowance for other address and notify\n    *\n    * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n    *\n    * @param _spender The address authorized to spend\n    * @param _value the max amount they can spend\n    * @param _extraData some extra information to send to the approved contract\n    */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n        // check if the sender is under a freezing period\n        if( _isTransferAllowed(msg.sender) ) {\n            _setFreezingPeriod(msg.sender, false, 0);\n        }\n\n        tokenRecipient spender = tokenRecipient(_spender);\n\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /**\n    * Destroy tokens\n    *\n    * Remove `_value` tokens from the system irreversibly\n    *\n    * @param _value the amount of money to burn\n    */\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        return _burn(msg.sender, _value);\n    }\n\n    /**\n    * Internal call to burn tokens\n    * \n    * @param _from the address to burn tokens\n    * @param _value the amount of tokens to burn\n    */\n    function _burn(address _from, uint256 _value) internal returns (bool success) {\n        balanceOf[_from] = balanceOf[_from].sub(_value);            // Subtract from the sender\n        totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\n        emit Burn(_from, _value);\n        return true;\n    }\n\n    /**\n    * Destroy tokens from other account\n    *\n    * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n    *\n    * @param _from the address of to withdraw tokens\n    * @param _value the amount of tokens to burn\n    */\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                                     // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);                         // Check allowance\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value); // Subtract from the sender's allowance\n        return _burn(_from, _value);\n    }\n\n    /**\n    * Only ballast fund function to burn tokens from account\n    *\n    * Allows `fundAccount` burn tokens to send equivalent ether for account that claimed it\n    * @param _from account address to burn tokens\n    * @param _value quantity of tokens to burn\n    */\n    function redemptionBurn(address _from, uint256 _value) onlyFund public{\n        _burn(_from, _value);\n    }   \n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"creationDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ICOTokenDelivery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frozenDaysForPartner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frozenDaysForBounty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"bountyTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSetFund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frozenDaysForEarlyInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frozenDaysForPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_freeze\",\"type\":\"bool\"},{\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"setFreezingPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setFundAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addExchangeTestAccounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyManagerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"redemptionBurn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frozenDaysForICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"preICOTokenDelivery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyManagerDistributionContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeExchangeTestAccounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezingPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frozenDaysForAdvisor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"daysToUnfreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"_isTransferAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"exchangesAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"setBountyDistributionContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "60606040526003805460ff19166012179055600b8054600160a060020a0319169055600c805460a060020a60ff021916905534156200003d57600080fd5b60405162001e0738038062001e07833981016040528080519190602001805182019190602001805160008054600160a060020a033316600160a060020a03199091168117825560035460ff16600a0a87026004819055908252600560205260409091205590910190508282826001828051620000be929160200190620008ed565b506002818051620000d4929160200190620008ed565b505042600d55506200011190507385abed924205bbe4d32077e596e45b9f40aaf8d9610171622045bf640100000000620013fb6200056b82021704565b6200014573f7817f08c2660970014a086a4ba679636e73e8ef61017162857201640100000000620013fb6200056b82021704565b62000179732c208677f8bab9c6a44bbe3554f36d2440c9b6c2610171623560cd640100000000620013fb6200056b82021704565b620001ae733689b9a43ab904d70f396b2a27ddac0e5885cf686101716301905603640100000000620013fb6200056b82021704565b620001e273245b058c8c256d011742af5faa296198735ee0ee61017162033a2d640100000000620013fb6200056b82021704565b6200021673eefa9f8f39aaf1d1ed160ac2465e937a8f154182610171621ab067640100000000620013fb6200056b82021704565b62000249734718bb26bce82459913aaca09a006daa517f1c0e603362036ee8640100000000620013fb6200056b82021704565b6200027c738cc1d930e685c977efcef9dc412d3adbe11b84c160336228dd54640100000000620013fb6200056b82021704565b620002af73272c41b76bad949739839e6bb5eb9f2b0cdfd95d60ba621022df640100000000620013fb6200056b82021704565b620002e2733a5cd9e7ccfe4dd5484335f3af30ccaba95d07c360ba62081170640100000000620013fb6200056b82021704565b6200031472a10cc5321e834c41137f2150a9b0f2aa1c501660ba621022df640100000000620013fb6200056b82021704565b620003477359b640c5663e5e79ce9f68ebbc28454490dba7b860ba621022df640100000000620013fb6200056b82021704565b6200037a73dca69fbfeff48851cec91b57610fa60abc27af3b60ba6230689e640100000000620013fb6200056b82021704565b620003ad73332526f0082d4d385f9ef393841f44c1bf813d8c60ba6230689e640100000000620013fb6200056b82021704565b620003e073f6b436cbb177777a170819128ebbef0715101ea260ba62137478640100000000620013fb6200056b82021704565b6200041373b76a63fa7658ad0480986e609b9d5b1f1b6b53b960ba6216b28c640100000000620013fb6200056b82021704565b62000446732bc240bc0d28725df790706da7663413ac8fa5ee60ba62206cc8640100000000620013fb6200056b82021704565b620004797332aa02961fa15e74d896c45a428e5d1884af221760ba621022df640100000000620013fb6200056b82021704565b620004ac735340ec716a00db16a9c289369e4b30ae897c25d360ba6218344f640100000000620013fb6200056b82021704565b620004df7339d6fdb4b0f8dfe39ec0b4fe5dd9b2f66e30f8d160ba620ce8b3640100000000620013fb6200056b82021704565b6200051273ce438c52d95ee47634f9aee36de5488d0d5d0fbd60ba6203d090640100000000620013fb6200056b82021704565b600a8054600160a060020a03191673a9939938e6bacc0b748045be80fd9e958898eb7917908190556200056290600160a060020a031660ba62e4e1c0640100000000620013fb6200056b82021704565b50505062000992565b60035462000593903390859060ff16600a0a840264010000000062001135620005ce82021704565b600160a060020a0383166000908152600860205260409020829055620005c9836001640100000000620012dd620007db82021704565b505050565b600160a060020a0382161515620005e457600080fd5b600160a060020a038316600090815260056020526040902054819010156200060b57600080fd5b600160a060020a0382166000908152600560205260409020546200063e8183640100000000620013ec6200084c82021704565b116200064957600080fd5b6200066283640100000000620010036200086382021704565b15620006845762000684836000806401000000006200109c620008a082021704565b6200069d82640100000000620010036200086382021704565b15620006bf57620006bf826000806401000000006200109c620008a082021704565b600160a060020a03831660009081526007602052604090205460ff1615620006e657600080fd5b600160a060020a03821660009081526007602052604090205460ff16156200070d57600080fd5b600160a060020a03831660009081526005602052604090205462000740908264010000000062001123620008da82021704565b600160a060020a0380851660009081526005602052604080822093909355908416815220546200077f9082640100000000620013ec6200084c82021704565b600160a060020a03808416600081815260056020526040908190209390935591908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a3505050565b600160a060020a03821660009081526007602052604090819020805460ff19168315151790557f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a5908390839051600160a060020a039092168252151560208201526040908101905180910390a15050565b6000828201838110156200085c57fe5b9392505050565b600160a060020a038116600090815260086020526040812054600d546201518090910201421062000897575060016200089b565b5060005b919050565b620008ba8383640100000000620012dd620007db82021704565b600160a060020a0390921660009081526008602052604090209190915550565b600082821115620008e757fe5b50900390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200093057805160ff191683800117855562000960565b8280016001018555821562000960579182015b828111156200096057825182559160200191906001019062000943565b506200096e92915062000972565b5090565b6200098f91905b808211156200096e576000815560010162000979565b90565b61146580620009a26000396000f3006060604052600436106101ed5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305b3441081146101f257806306fdde0314610217578063095ea7b3146102a15780630f4dfc17146102d7578063121e6832146102fb57806318160ddd1461030e57806323b872dd14610321578063244eba551461034957806329fb598e1461035c5780632d774da21461037e578063313ce5671461039157806342966c68146103ba5780634b82ee28146103d057806353c37276146103d057806368889db8146103e35780636b1bfd331461040a57806370a082311461042957806379cc67901461044857806387a9fe011461046a57806389225c5a146104895780638da5cb5b146104b857806395d89b41146104cb5780639d1eeb97146104de578063a9059cbb14610500578063acd94ccb14610522578063af3d8e4314610535578063b414d4b614610557578063cae9ca5114610576578063d4a226c3146105db578063d9a8748c146105ee578063db49528d14610601578063dbe2479814610620578063dd62ed3e1461063f578063e3877acd14610349578063e724529c14610664578063f2fde38b14610688578063f31c62df146106a7578063f866de47146106c6578063f874147e146106e5578063fa05064e14610704575b600080fd5b34156101fd57600080fd5b610205610723565b60405190815260200160405180910390f35b341561022257600080fd5b61022a610729565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561026657808201518382015260200161024e565b50505050905090810190601f1680156102935780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102ac57600080fd5b6102c3600160a060020a03600435166024356107c7565b604051901515815260200160405180910390f35b34156102e257600080fd5b6102f9600160a060020a0360043516602435610814565b005b341561030657600080fd5b610205610840565b341561031957600080fd5b610205610846565b341561032c57600080fd5b6102c3600160a060020a036004358116906024351660443561084c565b341561035457600080fd5b6102056108f4565b341561036757600080fd5b6102f9600160a060020a03600435166024356108f9565b341561038957600080fd5b6102c3610976565b341561039c57600080fd5b6103a4610997565b60405160ff909116815260200160405180910390f35b34156103c557600080fd5b6102c36004356109a0565b34156103db57600080fd5b6102056109d8565b34156103ee57600080fd5b6102f9600160a060020a036004351660243515156044356109dd565b341561041557600080fd5b6102f9600160a060020a0360043516610a08565b341561043457600080fd5b610205600160a060020a0360043516610abf565b341561045357600080fd5b6102c3600160a060020a0360043516602435610ad1565b341561047557600080fd5b6102f9600160a060020a0360043516610b99565b341561049457600080fd5b61049c610bed565b604051600160a060020a03909116815260200160405180910390f35b34156104c357600080fd5b61049c610bfc565b34156104d657600080fd5b61022a610c0b565b34156104e957600080fd5b6102f9600160a060020a0360043516602435610c76565b341561050b57600080fd5b6102f9600160a060020a0360043516602435610c9b565b341561052d57600080fd5b610205610ca6565b341561054057600080fd5b6102f9600160a060020a0360043516602435610cab565b341561056257600080fd5b6102c3600160a060020a0360043516610cd3565b341561058157600080fd5b6102c360048035600160a060020a03169060248035919060649060443590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610ce895505050505050565b34156105e657600080fd5b61049c610e32565b34156105f957600080fd5b61049c610e41565b341561060c57600080fd5b6102f9600160a060020a0360043516610e50565b341561062b57600080fd5b610205600160a060020a0360043516610e8c565b341561064a57600080fd5b610205600160a060020a0360043581169060243516610e9e565b341561066f57600080fd5b6102f9600160a060020a03600435166024351515610ebb565b341561069357600080fd5b6102f9600160a060020a0360043516610ee0565b34156106b257600080fd5b610205600160a060020a0360043516610f7b565b34156106d157600080fd5b6102c3600160a060020a0360043516611003565b34156106f057600080fd5b6102c3600160a060020a036004351661103d565b341561070f57600080fd5b6102f9600160a060020a0360043516611052565b600d5481565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107bf5780601f10610794576101008083540402835291602001916107bf565b820191906000526020600020905b8154815290600101906020018083116107a257829003601f168201915b505050505081565b60006107d233611003565b156107e3576107e33360008061109c565b50600160a060020a033381166000908152600660209081526040808320938616835292905220819055600192915050565b60005433600160a060020a0390811691161461082f57600080fd5b61083c33838360416110c6565b5050565b61017181565b60045481565b600160a060020a0380841660009081526006602090815260408083203390941683529290529081205482111561088157600080fd5b600160a060020a03808516600090815260066020908152604080832033909416835292905220546108b8908363ffffffff61112316565b600160a060020a03808616600090815260066020908152604080832033909416835292905220556108ea848484611135565b5060019392505050565b60ba81565b600b5433600160a060020a03908116911614806109245750600a5433600160a060020a039081169116145b151561092f57600080fd5b600a5461094690600160a060020a031660006112dd565b600a5461095f90600160a060020a0316838360ba6110c6565b600a5461083c90600160a060020a031660016112dd565b600c5474010000000000000000000000000000000000000000900460ff1681565b60035460ff1681565b600160a060020a033316600090815260056020526040812054829010156109c657600080fd5b6109d0338361134e565b90505b919050565b603381565b60005433600160a060020a039081169116146109f857600080fd5b610a0383838361109c565b505050565b60005433600160a060020a03908116911614610a2357600080fd5b600160a060020a0381161515610a3857600080fd5b600c5474010000000000000000000000000000000000000000900460ff1615610a6057600080fd5b600c805474ff000000000000000000000000000000000000000019600160a060020a0390931673ffffffffffffffffffffffffffffffffffffffff19909116179190911674010000000000000000000000000000000000000000179055565b60056020526000908152604090205481565b600160a060020a03821660009081526005602052604081205482901015610af757600080fd5b600160a060020a0380841660009081526006602090815260408083203390941683529290522054821115610b2a57600080fd5b600160a060020a0380841660009081526006602090815260408083203390941683529290522054610b61908363ffffffff61112316565b600160a060020a0380851660009081526006602090815260408083203390941683529290522055610b92838361134e565b9392505050565b60005433600160a060020a03908116911614610bb457600080fd5b600160a060020a0381161515610bc957600080fd5b600160a060020a03166000908152600960205260409020805460ff19166001179055565b600a54600160a060020a031681565b600054600160a060020a031681565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107bf5780601f10610794576101008083540402835291602001916107bf565b600c5433600160a060020a03908116911614610c9157600080fd5b610a03828261134e565b61083c338383611135565b604181565b60005433600160a060020a03908116911614610cc657600080fd5b61083c33838360336110c6565b60076020526000908152604090205460ff1681565b600080610cf433611003565b15610d0557610d053360008061109c565b5083610d1181856107c7565b15610e2a5780600160a060020a0316638f4ffcb1338630876040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610dc7578082015183820152602001610daf565b50505050905090810190601f168015610df45780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1515610e1557600080fd5b5af11515610e2257600080fd5b505050600191505b509392505050565b600b54600160a060020a031681565b600c54600160a060020a031681565b60005433600160a060020a03908116911614610e6b57600080fd5b600160a060020a03166000908152600960205260409020805460ff19169055565b60086020526000908152604090205481565b600660209081526000928352604080842090915290825290205481565b60005433600160a060020a03908116911614610ed657600080fd5b61083c82826112dd565b60005433600160a060020a03908116911614610efb57600080fd5b600160a060020a0381161515610f1057600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600080808080600160a060020a0386161515610f9657600080fd5b600160a060020a038616600090815260086020526040812054600d544296509194506201518002018411610ff957600160a060020a038616600090815260086020526040902054600d546201518091820201049150620151808404905080820392505b5090949350505050565b600160a060020a038116600090815260086020526040812054600d5462015180909102014210611035575060016109d3565b5060006109d3565b60096020526000908152604090205460ff1681565b60005433600160a060020a0390811691161461106d57600080fd5b600b805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6110a683836112dd565b600160a060020a0390921660009081526008602052604090209190915550565b600160a060020a03831660009081526008602052604081208190556110ec9084906112dd565b6110f7848484611135565b600160a060020a038316600090815260086020526040902081905561111d8360016112dd565b50505050565b60008282111561112f57fe5b50900390565b600160a060020a038216151561114a57600080fd5b600160a060020a0383166000908152600560205260409020548190101561117057600080fd5b600160a060020a038216600090815260056020526040902054611199818363ffffffff6113ec16565b116111a357600080fd5b6111ac83611003565b156111bd576111bd8360008061109c565b6111c682611003565b156111d7576111d78260008061109c565b600160a060020a03831660009081526007602052604090205460ff16156111fd57600080fd5b600160a060020a03821660009081526007602052604090205460ff161561122357600080fd5b600160a060020a03831660009081526005602052604090205461124c908263ffffffff61112316565b600160a060020a038085166000908152600560205260408082209390935590841681522054611281908263ffffffff6113ec16565b600160a060020a03808416600081815260056020526040908190209390935591908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a3505050565b600160a060020a03821660009081526007602052604090819020805460ff19168315151790557f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a5908390839051600160a060020a039092168252151560208201526040908101905180910390a15050565b600160a060020a038216600090815260056020526040812054611377908363ffffffff61112316565b600160a060020a0384166000908152600560205260409020556004546113a3908363ffffffff61112316565b600455600160a060020a0383167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a250600192915050565b600082820183811015610b9257fe5b600354611413903390859060ff16600a0a8402611135565b600160a060020a0383166000908152600860205260409020829055610a038360016112dd5600a165627a7a723058207173f914d98da8a236e66af608fbdc70ffb72ac84044db2ec34e327758a241ae0029000000000000000000000000000000000000000000000000000000001dcd6500000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000a49434f4e4943204e49430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034e49430000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000001dcd6500000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000a49434f4e4943204e49430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034e49430000000000000000000000000000000000000000000000000000000000"
}