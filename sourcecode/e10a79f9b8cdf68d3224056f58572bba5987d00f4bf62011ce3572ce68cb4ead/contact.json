{
  "address": "0x12d7967525f30795c0d062b63a6b424f770e8f7a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Hodl",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-19\n*/\n\npragma solidity ^0.4.23;\n\ncontract ERC20Interface {\n\n    uint256 public totalSupply;\n    uint256 public decimals;\n\t\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n\n    // solhint-disable-next-line no-simple-event-func-name  \n    event Transfer(address indexed _from, address indexed _to, uint256 _value); \n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n// C1\n\ncontract OwnableContract {\n \n    address ContractCreator;\n\t\t\n\tconstructor() public { \n        ContractCreator = msg.sender;  \n    }\n\t\n\tmodifier onlyOwner() {\n        require(msg.sender == ContractCreator);\n        _;\n    } \n    \n    function ContractCreatorAddress() public view returns (address owner) {\n        return ContractCreator;\n    }\n    \n\tfunction O2_ChangeOwner(address NewOwner) onlyOwner public {\n        ContractCreator = NewOwner;\n    }\n}\n\n\n// C2\n\ncontract BlockableContract is OwnableContract{\n \n    bool public blockedContract;\n\t\n\tconstructor() public { \n        blockedContract = false;  \n    }\n\t\n\tmodifier contractActive() {\n        require(!blockedContract);\n        _;\n    } \n\t\n\tfunction O3_BlockContract() onlyOwner public {\n        blockedContract = true;\n    }\n    \n    function O4_UnblockContract() onlyOwner public {\n        blockedContract = false;\n    }\n}\n\n// C3\n\ncontract Hodl is BlockableContract{\n    \n    struct Safe{\n        uint256 id;\n        address user;\n        address tokenAddress;\n        uint256 amount;\n        uint256 time;\n    }\n    \n    //dev safes variables\n   \n    mapping( address => uint256[]) private _member;\n    mapping( uint256 => Safe) private _safes;\n    uint256 private _currentIndex;\n    \n    mapping( address => uint256) public TotalBalances;\n     \n    //@dev owner variables\n\n    uint256 public comission; //0..100\n    mapping( address => uint256) private _Ethbalances;\n    address[] private _listedReserves;\n     \n    //constructor\n\n    constructor() public { \n        _currentIndex = 1;\n        comission = 10;\n    }\n    \n\t\n\t\n// F1 - fallback function to receive donation eth //\n    function () public payable {\n        require(msg.value>0);\n        _Ethbalances[0x0] = add(_Ethbalances[0x0], msg.value);\n    }\n\t\n\n\t\n// F2 - how many safes has the user //\n    function DepositCount(address a) public view returns (uint256 length) {\n        return _member[a].length;\n    }\n\t\n\n\t\n// F3 - how many tokens are reserved for owner as comission //\n    function OwnerTokenBalance(address tokenAddress) public view returns (uint256 amount){\n        return _Ethbalances[tokenAddress];\n    }\n\t\n\n\t\n// F4 - returns safe's values' //\n    function GetUserData(uint256 _id) public view\n        returns (uint256 id, address user, address tokenAddress, uint256 amount, uint256 time)\n    {\n        Safe storage s = _safes[_id];\n        return(s.id, s.user, s.tokenAddress, s.amount, s.time);\n    }\n\t\n\n\t\n// F5 - add new hodl safe (ETH) //\n    function U1_HodlEth(uint256 time) public contractActive payable {\n        require(msg.value > 0);\n        require(time>now);\n        \n        _member[msg.sender].push(_currentIndex);\n        _safes[_currentIndex] = Safe(_currentIndex, msg.sender, 0x0, msg.value, time); \n        \n        TotalBalances[0x0] = add(TotalBalances[0x0], msg.value);\n        \n        _currentIndex++;\n    }\n\t\n\n\t\n// F6 add new hodl safe (ERC20 token) //\n    \n    function U2_HodlERC20(address tokenAddress, uint256 amount, uint256 time) public contractActive {\n        require(tokenAddress != 0x0);\n        require(amount>0);\n        require(time>now);\n          \n        ERC20Interface token = ERC20Interface(tokenAddress);\n        require( token.transferFrom(msg.sender, address(this), amount) );\n        \n        _member[msg.sender].push(_currentIndex);\n        _safes[_currentIndex] = Safe(_currentIndex, msg.sender, tokenAddress, amount, time);\n        \n        TotalBalances[tokenAddress] = add(TotalBalances[tokenAddress], amount);\n        \n        _currentIndex++;\n    }\n\t\n\n\t\n// F7 - user, claim back a hodl safe //\n    function U3_UserRetireHodl(uint256 id) public {\n        Safe storage s = _safes[id];\n        \n        require(s.id != 0);\n        require(s.user == msg.sender);\n        \n        RetireHodl(id);\n    }\n\t\n\n\t\n// F8 - private retire hodl safe action //\n    function RetireHodl(uint256 id) private {\n        Safe storage s = _safes[id]; \n        require(s.id != 0); \n        \n        if(s.time < now) //hodl complete\n        {\n            if(s.tokenAddress == 0x0) \n                PayEth(s.user, s.amount);\n            else  \n                PayToken(s.user, s.tokenAddress, s.amount);\n        }\n        else //hodl in progress\n        {\n            uint256 realComission = mul(s.amount, comission) / 100;\n            uint256 realAmount = sub(s.amount, realComission);\n            \n            if(s.tokenAddress == 0x0) \n                PayEth(s.user, realAmount);\n            else  \n                PayToken(s.user, s.tokenAddress, realAmount);\n                \n            StoreComission(s.tokenAddress, realComission);\n        }\n        \n        DeleteSafe(s);\n    }\n\t\n\n\t\t\n// F9 - private pay eth to address //\n    function PayEth(address user, uint256 amount) private {\n        require(address(this).balance >= amount);\n        user.transfer(amount);\n    }\n\t\n\n\t\n// F10 - private pay token to address //\n    function PayToken(address user, address tokenAddress, uint256 amount) private{\n        ERC20Interface token = ERC20Interface(tokenAddress);\n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(user, amount);\n    }\n\t\n\n\t\n// F11 - store comission from unfinished hodl //\n    function StoreComission(address tokenAddress, uint256 amount) private {\n        _Ethbalances[tokenAddress] = add(_Ethbalances[tokenAddress], amount);\n        \n        bool isNew = true;\n        for(uint256 i = 0; i < _listedReserves.length; i++) {\n            if(_listedReserves[i] == tokenAddress) {\n                isNew = false;\n                break;\n            }\n        } \n        \n        if(isNew) _listedReserves.push(tokenAddress); \n    }\n\t\n\n\t\t\n// F12 - delete safe values in storage //\n    function DeleteSafe(Safe s) private  {\n        TotalBalances[s.tokenAddress] = sub(TotalBalances[s.tokenAddress], s.amount);\n        delete _safes[s.id];\n        \n        uint256[] storage vector = _member[msg.sender];\n        uint256 size = vector.length; \n        for(uint256 i = 0; i < size; i++) {\n            if(vector[i] == s.id) {\n                vector[i] = vector[size-1];\n                vector.length--;\n                break;\n            }\n        } \n    }\n\t\n\n\t\n// F13 // OWNER - owner retire hodl safe //\n    function O5_OwnerRetireHodl(uint256 id) public onlyOwner {\n        Safe storage s = _safes[id]; \n        require(s.id != 0); \n        RetireHodl(id);\n    }\n\t\n\n\t\n// F14 - owner, change comission value //\n    function O1_ChangeComission(uint256 newComission) onlyOwner public {\n        comission = newComission;\n    }\n\t\n\n\t\n// F15 - owner withdraw eth reserved from comissions //\n    function O6_WithdrawReserve(address tokenAddress) onlyOwner public\n    {\n        require(_Ethbalances[tokenAddress] > 0);\n        \n        uint256 amount = _Ethbalances[tokenAddress];\n        _Ethbalances[tokenAddress] = 0;\n        \n        ERC20Interface token = ERC20Interface(tokenAddress);\n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(msg.sender, amount);\n    }\n\t\n\n\t \n// F16 - owner withdraw token reserved from comission //\n    function O7_WithdrawAllReserves() onlyOwner public {\n        //eth\n        uint256 x = _Ethbalances[0x0];\n        if(x > 0 && x <= address(this).balance) {\n            _Ethbalances[0x0] = 0;\n            msg.sender.transfer( _Ethbalances[0x0] );\n        }\n         \n    //tokens\n        address ta;\n        ERC20Interface token;\n        for(uint256 i = 0; i < _listedReserves.length; i++) {\n            ta = _listedReserves[i];\n            if(_Ethbalances[ta] > 0)\n            { \n                x = _Ethbalances[ta];\n                _Ethbalances[ta] = 0;\n                \n                token = ERC20Interface(ta);\n                token.transfer(msg.sender, x);\n            }\n        } \n        \n        _listedReserves.length = 0; \n    }\n\t\n\n\t\n// F17 - owner remove free eth //\n    function O8_WithdrawSpecialEth(uint256 amount) onlyOwner public\n    {\n        require(amount > 0); \n        uint256 freeBalance = address(this).balance - TotalBalances[0x0];\n        require(freeBalance >= amount); \n        msg.sender.transfer(amount);\n    }\n\t\n\n\t\n// F18 - owner remove free token //\n    function O9_WithdrawSpecialToken(address tokenAddress, uint256 amount) onlyOwner public\n    {\n        ERC20Interface token = ERC20Interface(tokenAddress);\n        uint256 freeBalance = token.balanceOf(address(this)) - TotalBalances[tokenAddress];\n        require(freeBalance >= amount);\n        token.transfer(msg.sender, amount);\n    } \n\t\n\n\t  \n    //AUX - @dev Multiplies two numbers, throws on overflow. //\n    \n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n    \n    //dev Integer division of two numbers, truncating the quotient. //\n   \n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n    \n    // dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend). //\n  \n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n    \n    // @dev Adds two numbers, throws on overflow. //\n  \n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n    \n    \n}",
  "bytecode": "608060405234801561001057600080fd5b5060008054600160a060020a03191633600160a060020a03161760a060020a60ff02191681556001600355600a60055561144590819061005090396000f3006080604052600436106100ed5763ffffffff60e060020a60003504166318af5acb81146101385780631e2b89d5146101525780631e898ea0146101855780633a4b4532146101d45780633eee71ec146101e957806342343c5b146101fe5780635b6b6d691461021357806371ea29df1461022b5780637311426b146102545780638b64d86b1461027b578063b7221f5514610293578063bddec5ab146102b4578063c2fb25cc146102c9578063e4723ecf146102e1578063e49ad4ea14610302578063ed7edb0114610323578063f01a262d1461032e578063f2a910631461034f578063f3a9cb0114610373575b600034116100fa57600080fd5b6000805260066020526000805160206113fa8339815191525461011d90346103a4565b6000805260066020526000805160206113fa83398151915255005b34801561014457600080fd5b506101506004356103b7565b005b34801561015e57600080fd5b50610173600160a060020a03600435166103fc565b60408051918252519081900360200190f35b34801561019157600080fd5b5061019d60043561040e565b60408051958652600160a060020a039485166020870152929093168483015260608401526080830191909152519081900360a00190f35b3480156101e057600080fd5b5061017361044b565b3480156101f557600080fd5b50610150610451565b34801561020a57600080fd5b5061015061048c565b34801561021f57600080fd5b5061015060043561064c565b34801561023757600080fd5b50610240610684565b604080519115158252519081900360200190f35b34801561026057600080fd5b50610150600160a060020a03600435166024356044356106a5565b34801561028757600080fd5b5061015060043561089c565b34801561029f57600080fd5b50610173600160a060020a0360043516610945565b3480156102c057600080fd5b50610150610960565b3480156102d557600080fd5b506101506004356109b2565b3480156102ed57600080fd5b50610173600160a060020a03600435166109d2565b34801561030e57600080fd5b50610150600160a060020a03600435166109ed565b610150600435610b74565b34801561033a57600080fd5b50610150600160a060020a0360043516610cd5565b34801561035b57600080fd5b50610150600160a060020a0360043516602435610d1f565b34801561037f57600080fd5b50610388610e84565b60408051600160a060020a039092168252519081900360200190f35b818101828110156103b157fe5b92915050565b6000805433600160a060020a039081169116146103d357600080fd5b506000818152600260205260409020805415156103ef57600080fd5b6103f882610e94565b5050565b60046020526000908152604090205481565b6000908152600260208190526040909120805460018201549282015460038301546004909301549194600160a060020a0394851694909116929190565b60055481565b60005433600160a060020a0390811691161461046c57600080fd5b6000805474ff000000000000000000000000000000000000000019169055565b6000805481908190819033600160a060020a039081169116146104ae57600080fd5b600080805260066020526000805160206113fa833981519152549450841180156104e2575030600160a060020a0316318411155b1561053557600080805260066020526000805160206113fa83398151915281905560405133600160a060020a0316916108fc9181818181818888f19350505050158015610533573d6000803e3d6000fd5b505b5060005b60075481101561063857600780548290811061055157fe5b6000918252602080832090910154600160a060020a031680835260069091526040822054909450111561063057600160a060020a03808416600081815260066020908152604080832080549084905581517fa9059cbb000000000000000000000000000000000000000000000000000000008152339096166004870152602486018190529051909850879650929363a9059cbb9360448083019491928390030190829087803b15801561060357600080fd5b505af1158015610617573d6000803e3d6000fd5b505050506040513d602081101561062d57600080fd5b50505b600101610539565b60006106456007826113bc565b5050505050565b60008181526002602052604090208054151561066757600080fd5b600181015433600160a060020a039081169116146103ef57600080fd5b60005474010000000000000000000000000000000000000000900460ff1681565b6000805474010000000000000000000000000000000000000000900460ff16156106ce57600080fd5b600160a060020a03841615156106e357600080fd5b600083116106f057600080fd5b4282116106fc57600080fd5b50604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a033381166004830152308116602483015260448201859052915185928316916323b872dd9160648083019260209291908290030181600087803b15801561077157600080fd5b505af1158015610785573d6000803e3d6000fd5b505050506040513d602081101561079b57600080fd5b505115156107a857600080fd5b600160a060020a033381166000818152600160208181526040808420600380548254808701845592875284872090920191909155815160a08101835281548082528185019788528c8916828501818152606084018e8152608085018e8152938a526002808952878b20955186559a519885018054998d1673ffffffffffffffffffffffffffffffffffffffff199a8b16179055905199840180549a909b1699909716989098179098559351908401559451600492830155928252909152205461087190846103a4565b600160a060020a03909416600090815260046020526040902093909355505060038054600101905550565b6000805433600160a060020a039081169116146108b857600080fd5b600082116108c557600080fd5b506000805260046020527f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec5430600160a060020a031631038181101561090a57600080fd5b604051600160a060020a0333169083156108fc029084906000818181858888f19350505050158015610940573d6000803e3d6000fd5b505050565b600160a060020a031660009081526006602052604090205490565b60005433600160a060020a0390811691161461097b57600080fd5b6000805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000179055565b60005433600160a060020a039081169116146109cd57600080fd5b600555565b600160a060020a031660009081526001602052604090205490565b60008054819033600160a060020a03908116911614610a0b57600080fd5b600160a060020a03831660009081526006602052604081205411610a2e57600080fd5b5050600160a060020a03808216600081815260066020908152604080832080549084905581517f70a08231000000000000000000000000000000000000000000000000000000008152309096166004870152905190948694869490936370a0823193602480850194929391928390030190829087803b158015610ab057600080fd5b505af1158015610ac4573d6000803e3d6000fd5b505050506040513d6020811015610ada57600080fd5b50511015610ae757600080fd5b80600160a060020a031663a9059cbb33846040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610b4a57600080fd5b505af1158015610b5e573d6000803e3d6000fd5b505050506040513d602081101561064557600080fd5b60005474010000000000000000000000000000000000000000900460ff1615610b9c57600080fd5b60003411610ba957600080fd5b428111610bb557600080fd5b600160a060020a033381166000818152600160208181526040808420600380548254808701845592875284872090920191909155815160a08101835281548082528185019788528184018781523460608401818152608085018d8152938a526002808952968a209451855599519784018054988c1673ffffffffffffffffffffffffffffffffffffffff19998a161790559051948301805495909a16949096169390931790975594519486019490945592516004948501559080529190527f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec54610c9e916103a4565b6000805260046020527f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec5550600380546001019055565b60005433600160a060020a03908116911614610cf057600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008054819033600160a060020a03908116911614610d3d57600080fd5b600160a060020a0380851660008181526004602081815260408084205481517f70a0823100000000000000000000000000000000000000000000000000000000815230909716938701939093525189975091946370a0823193602480830194928390030190829087803b158015610db357600080fd5b505af1158015610dc7573d6000803e3d6000fd5b505050506040513d6020811015610ddd57600080fd5b505103905082811015610def57600080fd5b81600160a060020a031663a9059cbb33856040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610e5257600080fd5b505af1158015610e66573d6000803e3d6000fd5b505050506040513d6020811015610e7c57600080fd5b505050505050565b600054600160a060020a03165b90565b6000818152600260205260408120805490919081901515610eb457600080fd5b4283600401541015610f21576002830154600160a060020a03161515610ef65760018301546003840154610ef191600160a060020a03169061100d565b610f1c565b600183015460028401546003850154610f1c92600160a060020a0390811692169061105a565b610fba565b6064610f338460030154600554611155565b811515610f3c57fe5b049150610f4d83600301548361117e565b6002840154909150600160a060020a03161515610f81576001830154610f7c90600160a060020a03168261100d565b610fa2565b60018301546002840154610fa291600160a060020a0390811691168361105a565b6002830154610fba90600160a060020a031683611190565b6040805160a081018252845481526001850154600160a060020a0390811660208301526002860154169181019190915260038401546060820152600484015460808201526110079061128d565b50505050565b600160a060020a0330163181111561102457600080fd5b604051600160a060020a0383169082156108fc029083906000818181858888f19350505050158015610940573d6000803e3d6000fd5b60008290508181600160a060020a03166370a08231306040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b1580156110bb57600080fd5b505af11580156110cf573d6000803e3d6000fd5b505050506040513d60208110156110e557600080fd5b505110156110f257600080fd5b80600160a060020a031663a9059cbb85846040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610e5257600080fd5b6000821515611166575060006103b1565b5081810281838281151561117657fe5b04146103b157fe5b60008282111561118a57fe5b50900390565b600160a060020a03821660009081526006602052604081205481906111b590846103a4565b600160a060020a0385166000908152600660205260408120919091556001925090505b6007548110156112275783600160a060020a03166007828154811015156111fb57fe5b600091825260209091200154600160a060020a0316141561121f5760009150611227565b6001016111d8565b811561100757600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688018054600160a060020a03861673ffffffffffffffffffffffffffffffffffffffff1990911617905550505050565b604080820151600160a060020a031660009081526004602052908120546060830151829182916112bd919061117e565b604080860151600160a060020a03908116600090815260046020818152848320959095558851825260028086528483208381556001808201805473ffffffffffffffffffffffffffffffffffffffff19908116909155928201805490931690925560038101849055909101829055339092168152925281208054909450925090505b81811015611007578351835484908390811061135757fe5b906000526020600020015414156113b457826001830381548110151561137957fe5b9060005260206000200154838281548110151561139257fe5b60009182526020909120015582546113ae8460001983016113bc565b50611007565b60010161133f565b81548183558181111561094057600083815260209020610940918101908301610e9191905b808211156113f557600081556001016113e1565b5090560054cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8a165627a7a72305820590a53266a00f60db71f4282cb5cdf7383801e90b27ebac5ad003730e3a886350029"
}