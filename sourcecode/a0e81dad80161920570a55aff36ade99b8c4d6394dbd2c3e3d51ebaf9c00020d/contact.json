{
  "address": "0xa1e4608ff6b4b9324c6472eee2efebd20a20bbe8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "KittenSelfDrop",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-30\n*/\n\npragma solidity ^0.4.19;\n\n/* Functions from Kitten Coin main contract to be used by sale contract */\ncontract KittenCoin {\n    function balanceOf(address who) public constant returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n}\n\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n  \n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract KittenSelfDrop is Ownable {\n    KittenCoin public kittenContract;\n    uint8 public dropNumber;\n    uint256 public kittensDroppedToTheWorld;\n    uint256 public kittensRemainingToDrop;\n    uint256 public holderAmount;\n    uint256 public basicReward;\n    uint256 public donatorReward;\n    uint256 public holderReward;\n    uint8 public totalDropTransactions;\n    mapping (address => uint8) participants;\n    \n    \n    // Initialize the cutest contract in the world\n    function KittenSelfDrop () {\n        address c = 0xac2BD14654BBf22F9d8f20c7b3a70e376d3436B4; // set Kitten Coin contract address\n        kittenContract = KittenCoin(c); \n        dropNumber = 1;\n        kittensDroppedToTheWorld = 0;\n        kittensRemainingToDrop = 0;\n        basicReward = 50000000000; // set initial basic reward to 500 Kitten Coins\n        donatorReward = 50000000000; // set initial donator reward to 500 Kitten Coins\n        holderReward = 50000000000; // set initial holder reward to 500 Kitten Coins\n        holderAmount = 5000000000000; // set initial hold amount to 50000 Kitten Coins for extra reward\n        totalDropTransactions = 0;\n    }\n    \n    \n    // Drop some wonderful cutest Kitten Coins to sender every time contract is called without function\n    function() payable {\n        require (participants[msg.sender] < dropNumber && kittensRemainingToDrop > basicReward);\n        uint256 tokensIssued = basicReward;\n        // Send extra Kitten Coins bonus if participant is donating Ether\n        if (msg.value > 0)\n            tokensIssued += donatorReward;\n        // Send extra Kitten Coins bonus if participant holds at least holderAmount\n        if (kittenContract.balanceOf(msg.sender) >= holderAmount)\n            tokensIssued += holderReward;\n        // Check if number of Kitten Coins to issue is higher than coins remaining for airdrop (last transaction of airdrop)\n        if (tokensIssued > kittensRemainingToDrop)\n            tokensIssued = kittensRemainingToDrop;\n        \n        // Give away these so cute Kitten Coins to contributor\n        kittenContract.transfer(msg.sender, tokensIssued);\n        participants[msg.sender] = dropNumber;\n        kittensRemainingToDrop -= tokensIssued;\n        kittensDroppedToTheWorld += tokensIssued;\n        totalDropTransactions += 1;\n    }\n    \n    \n    function participant(address part) public constant returns (uint8 participationCount) {\n        return participants[part];\n    }\n    \n    \n    // Increase the airdrop count to allow sweet humans asking for more beautiful Kitten Coins\n    function setDropNumber(uint8 dropN) public onlyOwner {\n        dropNumber = dropN;\n        kittensRemainingToDrop = kittenContract.balanceOf(this);\n    }\n    \n    \n    // Define amount of Kitten Coins to hold in order to get holder reward\n    function setHolderAmount(uint256 amount) public onlyOwner {\n        holderAmount = amount;\n    }\n    \n    \n    // Define how many wonderful Kitten Coins contributors will receive for participating the selfdrop\n    function setRewards(uint256 basic, uint256 donator, uint256 holder) public onlyOwner {\n        basicReward = basic;\n        donatorReward = donator;\n        holderReward = holder;\n    }\n    \n    \n    // Sends all ETH contributions to lovely kitten owner\n    function withdrawAll() public onlyOwner {\n        owner.transfer(this.balance);\n    }\n    \n    \n    // Sends all remaining Kitten Coins to owner, just in case of emergency\n    function withdrawKittenCoins() public onlyOwner {\n        kittenContract.transfer(owner, kittenContract.balanceOf(this));\n        kittensRemainingToDrop = 0;\n    }\n    \n    \n    // Update number of Kitten Coins remaining for drop, just in case it is needed\n    function updateKittenCoinsRemainingToDrop() public {\n        kittensRemainingToDrop = kittenContract.balanceOf(this);\n    }\n    \n}",
  "bytecode": "6060604052341561000f57600080fd5b60008054600160a060020a033316600160a060020a03199182161782556001805460a060020a60ff0219921673ac2bd14654bbf22f9d8f20c7b3a70e376d3436b41791909116740100000000000000000000000000000000000000001790556002819055600355640ba43b74006005819055600681905560075565048c273950006004556008805460ff1916905561088c806100ac6000396000f3006060604052600436106100e25763ffffffff60e060020a6000350416631f98394d81146102a45780632605b3c7146102c9578063316cb1b4146102fe578063334191f7146103135780634a35035a146103265780635adf292f14610339578063604e7af61461034c57806365db63d01461035f5780636bcc28a9146103725780637be2d5a214610385578063853828b61461039e5780638da5cb5b146103b157806398f9724f146103e0578063a2558ee2146103f3578063b2b158e814610406578063f2fde38b1461041c578063f36d1e4e1461043b578063ff757d5914610457575b600154600160a060020a033316600090815260096020526040812054909160ff60a060020a9091048116911610801561011e5750600554600354115b151561012957600080fd5b50600554600034111561013b57600654015b600454600154600160a060020a03166370a082313360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561019757600080fd5b6102c65a03f115156101a857600080fd5b505050604051805190501015156101be57600754015b6003548111156101cd57506003545b600154600160a060020a031663a9059cbb338360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561022c57600080fd5b6102c65a03f1151561023d57600080fd5b5050506040518051505060018054600160a060020a0333166000908152600960205260409020805460ff1990811660ff60a060020a909404841617909155600380548590039055600280549094019093556008805480831690930190911691909216179055005b34156102af57600080fd5b6102b761046a565b60405190815260200160405180910390f35b34156102d457600080fd5b6102e8600160a060020a0360043516610470565b60405160ff909116815260200160405180910390f35b341561030957600080fd5b61031161048e565b005b341561031e57600080fd5b6102b761059d565b341561033157600080fd5b6102e86105a3565b341561034457600080fd5b6103116105b3565b341561035757600080fd5b6102e861062b565b341561036a57600080fd5b6102b7610634565b341561037d57600080fd5b6102b761063a565b341561039057600080fd5b61031160ff60043516610640565b34156103a957600080fd5b6103116106fc565b34156103bc57600080fd5b6103c4610752565b604051600160a060020a03909116815260200160405180910390f35b34156103eb57600080fd5b6102b7610761565b34156103fe57600080fd5b6102b7610767565b341561041157600080fd5b61031160043561076d565b341561042757600080fd5b610311600160a060020a036004351661078d565b341561044657600080fd5b610311600435602435604435610828565b341561046257600080fd5b6103c4610851565b60055481565b600160a060020a031660009081526009602052604090205460ff1690565b60005433600160a060020a039081169116146104a957600080fd5b60015460008054600160a060020a039283169263a9059cbb9291169083906370a082319030906040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561051457600080fd5b6102c65a03f1151561052557600080fd5b5050506040518051905060006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561057b57600080fd5b6102c65a03f1151561058c57600080fd5b505050604051805150506000600355565b60065481565b60015460a060020a900460ff1681565b600154600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561060c57600080fd5b6102c65a03f1151561061d57600080fd5b505050604051805160035550565b60085460ff1681565b60025481565b60035481565b60005433600160a060020a0390811691161461065b57600080fd5b6001805474ff0000000000000000000000000000000000000000191660a060020a60ff8416021790819055600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156106dc57600080fd5b6102c65a03f115156106ed57600080fd5b50505060405180516003555050565b60005433600160a060020a0390811691161461071757600080fd5b600054600160a060020a039081169030163180156108fc0290604051600060405180830381858888f19350505050151561075057600080fd5b565b600054600160a060020a031681565b60045481565b60075481565b60005433600160a060020a0390811691161461078857600080fd5b600455565b60005433600160a060020a039081169116146107a857600080fd5b600160a060020a03811615156107bd57600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60005433600160a060020a0390811691161461084357600080fd5b600592909255600655600755565b600154600160a060020a0316815600a165627a7a7230582096c89f9e3d02649af78d2056cbb30ffb3526108a5096e961c4f24bdc3e0db07e0029"
}