{
  "address": "0x2119a3314c1d40704d816392a9e44da463688992",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LuckyCoin",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-08\n*/\n\npragma solidity ^0.4.24;\n\n\ncontract Coinevents {\n    // fired whenever a player registers a name\n    event onNewName\n    (\n        uint256 indexed playerID,\n        address indexed playerAddress,\n        bytes32 indexed playerName,\n        bool isNewPlayer,\n        uint256 affiliateID,\n        address affiliateAddress,\n        bytes32 affiliateName,\n        uint256 amountPaid,\n        uint256 timeStamp\n    );\n    event onBuy (\n        address playerAddress,\n        uint256 begin,\n        uint256 end,\n        uint256 round,\n        bytes32 playerName\n    );\n    // fired whenever theres a withdraw\n    event onWithdraw\n    (\n        uint256 indexed playerID,\n        address playerAddress,\n        bytes32 playerName,\n        uint256 ethOut,\n        uint256 timeStamp\n    );\n    // settle the contract\n    event onSettle(\n        uint256 rid,\n        uint256 ticketsout,\n        address winner,\n        uint256 luckynum,\n        uint256 jackpot\n    );\n    // settle the contract\n    event onActivate(\n        uint256 rid\n    );\n}\n\n\ncontract LuckyCoin is Coinevents{\n    using SafeMath for *;\n    using NameFilter for string;\n    \n    //**************** game settings ****************\n     string constant public name = \"LuckyCoin Super\";\n     string constant public symbol = \"LuckyCoin\";\n     uint256 constant private rndGap_ = 2 hours;                // round timer starts at this\n\n     uint256 ticketstotal_ = 1500;       // ticket total amonuts\n     uint256 grouptotal_ = 250;    // ticketstotal_ divend to six parts\n     //uint ticketprice_ = 0.005 ether;   // current ticket init price\n     uint256 jackpot = 10 ether;\n     uint256 public rID_= 0;      // current round id number / total rounds that have happened\n     uint256 _headtickets = 500;  // head of 500, distributes valuet\n     bool public activated_ = false;\n     \n     //address community_addr = 0x2b5006d3dce09dafec33bfd08ebec9327f1612d8;    // community addr\n     //address prize_addr = 0x2b5006d3dce09dafec33bfd08ebec9327f1612d8;        // prize addr\n \n     \n     address community_addr = 0xfd76dB2AF819978d43e07737771c8D9E8bd8cbbF;    // community addr\n     address prize_addr = 0xfd76dB2AF819978d43e07737771c8D9E8bd8cbbF;        // prize addr\n     address activate_addr1 = 0xfd76dB2AF819978d43e07737771c8D9E8bd8cbbF;    // activate addr1\n     address activate_addr2 = 0x6c7dfe3c255a098ea031f334436dd50345cfc737;    // activate addr2\n     //address activate_addr2 = 0x2b5006d3dce09dafec33bfd08ebec9327f1612d8;    // activate addr2\n     PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0x748286a6a4cead7e8115ed0c503d77202eeeac6b);\n\n    //**************** ROUND DATA ****************\n    mapping (uint256 => Coindatasets.Round) public round_;   // (rID => data) round data\n    \n    //**************** PLAYER DATA ****************\n    event LogbuyNums(address addr, uint begin, uint end);\n    mapping (address => uint256) public pIDxAddr_;          // (addr => pID) returns player id by address\n    mapping (bytes32 => uint256) public pIDxName_;          // (name => pID) returns player id by name\n    mapping (uint256 => Coindatasets.Player) public plyr_;   // (pID => data) player data\n    mapping (uint256 => mapping (uint256 => Coindatasets.PlayerRounds)) public plyrRnds_;    // (pID => rID => data) player round data by player id & round id\n    mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; // (pID => name => bool) list of names a player owns.  (used so you can change your display name amongst any name you own)\n    \n    //**************** ORDER DATA ****************\n    mapping (uint256=>mapping(uint=> mapping(uint=>uint))) orders;  // (rid=>pid=group=>ticketnum)\n    \n    constructor() public{\n        //round_[rID_].jackpot = 10 ether;\n    }\n    \n    // callback function\n    function ()\n        payable\n    {\n        // fllows addresses only can activate the game\n        if (msg.sender == activate_addr1 ||\n            msg.sender == activate_addr2\n        ){\n           activate();\n        }else if(msg.value > 0){ //bet order\n            // fetch player id\n            address _addr = msg.sender;\n            uint256 _codeLength;\n            require(tx.origin == msg.sender, \"sorry humans only origin\");\n            assembly {_codeLength := extcodesize(_addr)}\n            require(_codeLength == 0, \"sorry humans only=================\");\n\n            determinePID();\n            uint256 _pID = pIDxAddr_[msg.sender];\n            uint256 _ticketprice = getBuyPrice();\n            require(_ticketprice > 0);\n            uint256 _tickets = msg.value / _ticketprice;\n            require(_tickets > 0);\n            // buy tickets\n            require(activated_ == true, \"its not ready yet.  contact administrators\");\n            require(_tickets <= ticketstotal_ - round_[rID_].tickets);\n            buyTicket(_pID, plyr_[_pID].laff, _tickets);\n        }\n\n    }\n\n    //  purchase value limit   \n    modifier isWithinLimits(uint256 _eth, uint256 _tickets) {\n        uint256 _ticketprice = getBuyPrice();\n        require(_eth >= _tickets * _ticketprice);\n        require(_eth <= 100000000000000000000000);\n        _;    \n    }\n    \n    modifier isTicketsLimits(uint256 _tickets){\n        require(_tickets <= ticketstotal_ - round_[rID_].tickets);\n        _;\n    }\n    \n    modifier isActivated(){\n        require(activated_, \"not activate\");\n        _;\n    }\n    \n    modifier isHuman() {\n        address _addr = msg.sender;\n        uint256 _codeLength;\n        require(tx.origin == msg.sender, \"sorry humans only origin\");\n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0, \"sorry humans only=================\");\n        _;\n    }\n    \n    function buyXid(uint _tickets, uint256 _affCode)\n          isHuman()\n          isWithinLimits(msg.value, _tickets)\n          isTicketsLimits(_tickets)\n          isActivated\n          public \n          payable\n    {\n       // set up our tx event data and determine if player is new or not\n        //Coindatasets.EventReturns memory _eventData_ = determinePID(_eventData_);\n        determinePID();\n        // fetch player id\n        uint256 _pID = pIDxAddr_[msg.sender];\n        \n        // manage affiliate residuals\n        // if no affiliate code was given or player tried to use their own, lolz\n        if (_affCode == 0 || _affCode == _pID)\n        {\n            // use last stored affiliate code \n            _affCode = plyr_[_pID].laff;\n            \n        // if affiliate code was given & its not the same as previously stored \n        } else if (_affCode != plyr_[_pID].laff) {\n            // update last affiliate \n            plyr_[_pID].laff = _affCode;\n        }\n        \n        buyTicket(_pID, _affCode, _tickets);      \n    }\n    \n    function buyXaddr(uint _tickets, address _affCode) \n          isHuman()\n          isWithinLimits(msg.value, _tickets)\n          isTicketsLimits(_tickets)\n          isActivated\n          public \n          payable \n    {\n        // set up our tx event data and determine if player is new or not\n        //Coindatasets.EventReturns memory _eventData_ = determinePID(_eventData_);\n        // determine if player is new or not\n        determinePID();\n        \n        uint256 _affID;\n         \n        // fetch player id\n        uint256 _pID = pIDxAddr_[msg.sender]; \n        \n        if (_affCode == address(0) || _affCode == msg.sender)\n        {\n            // use last stored affiliate code\n            _affID = plyr_[_pID].laff;\n        \n        // if affiliate code was given    \n        } else {\n            // get affiliate ID from aff Code \n            _affID = pIDxAddr_[_affCode];\n            \n            // if affID is not the same as previously stored \n            if (_affID != plyr_[_pID].laff)\n            {\n                // update last affiliate\n                plyr_[_pID].laff = _affID;\n            }\n        }\n        buyTicket(_pID, _affID, _tickets);\n    }\n    \n    function buyXname(uint _tickets, bytes32 _affCode)\n          isHuman()\n          isWithinLimits(msg.value, _tickets)\n          isTicketsLimits(_tickets)\n          isActivated\n          public \n          payable\n    {\n        // set up our tx event data and determine if player is new or not\n        //Coindatasets.EventReturns memory _eventData_ = determinePID(_eventData_);\n        determinePID();\n        // fetch player id\n        uint256 _pID = pIDxAddr_[msg.sender];\n        \n        // manage affiliate residuals\n        uint256 _affID;\n        // if no affiliate code was given or player tried to use their own, lolz\n        if (_affCode == '' || _affCode == plyr_[_pID].name)\n        {\n            // use last stored affiliate code\n            _affID = plyr_[_pID].laff;\n        \n        // if affiliate code was given\n        } else {\n            // get affiliate ID from aff Code\n            _affID = pIDxName_[_affCode];\n            \n            // if affID is not the same as previously stored\n            if (_affID != plyr_[_pID].laff)\n            {\n                // update last affiliate\n                plyr_[_pID].laff = _affID;\n            }\n        }\n        buyTicket(_pID, _affID, _tickets);\n    }\n    \n    function reLoadXaddr(uint256 _tickets, address _affCode)\n        isHuman()\n        isActivated\n        isTicketsLimits(_tickets)\n        public\n    {\n        // fetch player id\n        uint256 _pID = pIDxAddr_[msg.sender];\n        uint256 _affID;\n        if (_affCode == address(0) || _affCode == msg.sender){\n            _affID = plyr_[_pID].laff;\n        }\n        else{\n           // get affiliate ID from aff Code \n            _affID = pIDxAddr_[_affCode];\n            // if affID is not the same as previously stored \n            if (_affID != plyr_[_pID].laff)\n            {\n                // update last affiliate\n                plyr_[_pID].laff = _affID;\n            }\n        }\n        reloadTickets(_pID, _affID, _tickets);\n    }\n    \n        \n    function reLoadXname(uint256 _tickets, bytes32 _affCode)\n        isHuman()\n        isActivated\n        isTicketsLimits(_tickets)\n        public\n    {\n        // fetch player id\n        uint256 _pID = pIDxAddr_[msg.sender];\n        uint256 _affID;\n        if (_affCode == '' || _affCode == plyr_[_pID].name){\n            _affID = plyr_[_pID].laff;\n        }\n        else{\n           // get affiliate ID from aff Code \n             _affID = pIDxName_[_affCode];\n            // if affID is not the same as previously stored \n            if (_affID != plyr_[_pID].laff)\n            {\n                // update last affiliate\n                plyr_[_pID].laff = _affID;\n            }\n        }\n        reloadTickets(_pID, _affID, _tickets);\n    }\n    \n    function reloadTickets(uint256 _pID, uint256 _affID, uint256 _tickets)\n        isActivated\n        private\n    {\n        //************** ******************\n        // setup local rID\n        uint256 _rID = rID_;\n        // grab time\n        uint256 _now = now;\n        // if round is active\n        if (_now > round_[_rID].start && _now < round_[_rID].end && round_[_rID].ended == false){\n            // call ticket\n            uint256 _eth = getBuyPrice().mul(_tickets);\n            \n            //plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth);\n            reloadEarnings(_pID, _eth);\n            \n            ticket(_pID, _rID, _tickets, _affID, _eth);\n            if (round_[_rID].tickets == ticketstotal_){\n                round_[_rID].ended = true;\n                round_[_rID].end = now;\n                endRound();\n            }\n            \n        }else if (_now > round_[_rID].end && round_[_rID].ended == false){\n            // end the round (distributes pot) & start new round\n            round_[_rID].ended = true;\n            endRound();\n        }\n    }\n    \n    function withdraw() \n        isHuman()\n        public\n    {\n        // setup local rID \n        //uint256 _rID = rID_;\n        // grab time\n        uint256 _now = now;\n        // fetch player ID\n        uint256 _pID = pIDxAddr_[msg.sender];\n        // setup temp var for player eth\n        uint256 _eth;\n        // check to see if round has ended and no one has run round end yet\n        \n        _eth = withdrawEarnings(_pID);\n        if (_eth > 0){\n            plyr_[_pID].addr.transfer(_eth);\n            emit Coinevents.onWithdraw(_pID, msg.sender, plyr_[_pID].name, _eth, _now);\n        }\n    }\n\n    function reloadEarnings(uint256 _pID, uint256 _eth)\n        private\n        returns(uint256)\n    {\n        // update gen vault\n        updateTicketVault(_pID, plyr_[_pID].lrnd);\n        \n        uint256 _earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff);\n        require(_earnings >= _eth, \"earnings too lower\");\n\n        if (plyr_[_pID].gen >= _eth) {\n            plyr_[_pID].gen = plyr_[_pID].gen.sub(_eth);\n            return;\n        }else{\n            _eth = _eth.sub(plyr_[_pID].gen);\n            plyr_[_pID].gen = 0;\n        }\n        \n        if (plyr_[_pID].aff >= _eth){\n            plyr_[_pID].aff = plyr_[_pID].aff.sub(_eth);\n            return;\n        }else{\n            _eth = _eth.sub(plyr_[_pID].aff);\n            plyr_[_pID].aff = 0;\n        }\n        \n        plyr_[_pID].win = plyr_[_pID].win.sub(_eth);\n\n    }\n    \n    function withdrawEarnings(uint256 _pID)\n        private\n        returns(uint256)\n    {\n        // update gen vault\n        updateTicketVault(_pID, plyr_[_pID].lrnd);\n        \n        uint256 _earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff);\n        if (_earnings > 0)\n        {\n            plyr_[_pID].win = 0;  // winner\n            plyr_[_pID].gen = 0;  //ticket valuet\n            plyr_[_pID].aff = 0;  // aff player\n        }\n\n        return(_earnings);\n    }\n    // aquire buy ticket price\n    function getBuyPrice()\n        public \n        view \n        returns(uint256)\n    {\n        return round_[rID_].jackpot.mul(150) / 100 / 1500;\n    }\n    \n    /**\n     * @dev logic runs whenever a buy order is executed.  determines how to handle \n     * incoming eth depending on if we are in an active round or not\n    */\n    function buyTicket( uint256 _pID, uint256 _affID, uint256 _tickets) \n         private\n    {\n        //************** ******************\n        // setup local rID\n        uint256 _rID = rID_;\n        // grab time\n        uint256 _now = now;\n        \n        // if round is active\n        if (_now > round_[_rID].start && _now < round_[_rID].end){\n            // call ticket\n            ticket(_pID, _rID, _tickets, _affID, msg.value);\n            if (round_[_rID].tickets == ticketstotal_){\n                round_[_rID].ended = true;\n                round_[_rID].end = now;\n                endRound();\n            }\n        }else if (_now > round_[_rID].end && round_[_rID].ended == false){\n            // end the round (distributes pot) & start new round\n            round_[_rID].ended = true;\n            //_eventData_ = endRound(_eventData_);\n            endRound();\n            // put eth in players vault\n            plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value);\n        }\n        //ticket(_pID, _rID, _tickets, _affID, msg.value);\n    }\n    \n    function ticket(uint256 _pID, uint256 _rID, uint256 _tickets, uint256 _affID, uint256 _eth)\n        private\n    {\n         // if player is new to round\n        if (plyrRnds_[_pID][_rID].tickets == 0){\n            managePlayer(_pID);\n            round_[rID_].playernums += 1;\n            plyrRnds_[_affID][_rID].affnums += 1;\n        }\n\n        // ********** buy ticket *************\n        uint tickets = round_[rID_].tickets;\n        uint groups = (tickets + _tickets  - 1) / grouptotal_ - tickets / grouptotal_;\n        uint offset = tickets / grouptotal_;\n       \n        if (groups == 0){\n            if (((tickets + _tickets) % grouptotal_) == 0){\n                orders[rID_][_pID][offset] = calulateXticket(orders[rID_][_pID][offset], grouptotal_, tickets % grouptotal_);\n            }else{\n                orders[rID_][_pID][offset] = calulateXticket(orders[rID_][_pID][offset], (tickets + _tickets) % grouptotal_, tickets % grouptotal_);\n            }\n        }else{\n            for(uint256 i = 0; i < groups + 1; i++){\n                if (i == 0){\n                     orders[rID_][_pID][offset+i] = calulateXticket(orders[rID_][_pID][offset + i], grouptotal_, tickets % grouptotal_);\n                }\n                if (i > 0 && i < groups){\n                    orders[rID_][_pID][offset + i] = calulateXticket(orders[rID_][_pID][offset + i], grouptotal_, 0);\n                }\n                if (i == groups){\n                    if (((tickets + _tickets) % grouptotal_) == 0){\n                        orders[rID_][_pID][offset + i] = calulateXticket(orders[rID_][_pID][offset + i], grouptotal_, 0);\n                    }else{\n                        orders[rID_][_pID][offset + i] = calulateXticket(orders[rID_][_pID][offset + i], (tickets + _tickets) % grouptotal_, 0);\n                    }\n                }\n            }\n        }\n        \n        if (round_[rID_].tickets < _headtickets){\n            if (_tickets.add(round_[rID_].tickets) <= _headtickets){\n                plyrRnds_[_pID][_rID].luckytickets = _tickets.add(plyrRnds_[_pID][_rID].luckytickets);\n            }\n            else{\n                plyrRnds_[_pID][_rID].luckytickets = (_headtickets - round_[rID_].tickets).add(plyrRnds_[_pID][_rID].luckytickets); \n            }\n        }\n        // set up purchase tickets\n        round_[rID_].tickets = _tickets.add(round_[rID_].tickets);\n        plyrRnds_[_pID][_rID].tickets = _tickets.add(plyrRnds_[_pID][_rID].tickets);\n        plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth);\n        round_[rID_].blocknum = block.number;\n       \n        // distributes valuet\n        distributeVault(_pID, rID_, _affID, _eth, _tickets);\n        // order event log\n        //emit onBuy(msg.sender, tickets+1, tickets +_tickets,_rID, _eth, plyr_[_pID].name);\n        emit Coinevents.onBuy(msg.sender, tickets+1, tickets +_tickets,_rID, plyr_[_pID].name);\n    }\n\n    function distributeVault(uint256 _pID, uint256 _rID, uint256 _affID, uint256 _eth, uint256 _tickets)\n        private\n    {    \n         // distributes gen\n         uint256 _gen = 0;\n         uint256 _genvault = 0;\n         uint256 ticketprice_ = getBuyPrice();\n         if (round_[_rID].tickets > _headtickets){\n             if (round_[_rID].tickets.sub(_tickets) > _headtickets){\n                 _gen = _tickets;\n                 //plyrRnds_[_pID][_rID].luckytickets = \n             }else{\n                 _gen = round_[_rID].tickets.sub(_headtickets);\n             }\n         }\n         \n         if (_gen > 0){\n             //_genvault = (((_gen / _tickets).mul(_eth)).mul(20)) / 100;   // 20 % to gen tickets\n             _genvault = ((ticketprice_ * _gen).mul(20)) / 100;\n             round_[_rID].mask = _genvault.add(round_[_rID].mask);   // update mask\n         }\n         \n         uint256 _aff = _eth / 10;  //to================10%(aff)\n         uint256 _com = _eth / 20;  //to================5%(community)\n         uint256 _found = _eth.mul(32) / 100;\n         round_[_rID].found = _found.add(round_[_rID].found);  //to============prize found\n         if (_affID != 0){\n             plyr_[_affID].aff = _aff.add(plyr_[_affID].aff);\n             community_addr.transfer(_com);\n         }else{\n             _com = _com.add(_aff);\n             community_addr.transfer(_com);\n         }\n         // ============to perhaps next round pool\n         uint256 _nextpot = _eth.sub(_genvault);\n         if (_affID != 0){\n             _nextpot = _nextpot.sub(_aff);\n         }\n         _nextpot = _nextpot.sub(_com);\n         _nextpot = _nextpot.sub(_found);\n         round_[_rID].nextpot = _nextpot.add(round_[_rID].nextpot);  // next round pool\n    }\n    \n    \n    function calulateXticket(uint256 _target, uint256 _start, uint256 _end) pure private returns(uint256){\n        return _target ^ (2 ** _start - 2 ** _end); \n    }\n    \n    function endRound() \n        private\n    {\n        // setup local rID\n        uint256 _rID = rID_;\n        uint256 prize_callback = 0;\n        round_[_rID].lucknum = randNums();\n        \n        // 1. if win\n        if (round_[_rID].tickets >= round_[_rID].lucknum){\n           // community_addr.transfer(round_[_rID].income.sub(_com).sub(_gen));\n            // need administrators take in 10 ETH activate next round\n            prize_callback = round_[_rID].found.add(round_[_rID].nextpot);\n            if (prize_callback > 0) {\n                prize_addr.transfer(prize_callback);\n                activated_ = false;   // need administrators to activate\n                emit onSettle(_rID, round_[_rID].tickets, address(0), round_[_rID].lucknum, round_[_rID].jackpot);\n            }\n        }else{ \n            // 2. if nobody win\n            // directly start next round\n            prize_callback = round_[_rID].found;\n            if (prize_callback > 0) {\n                prize_addr.transfer(prize_callback);\n            }\n            rID_ ++;\n            _rID ++;\n            round_[_rID].start = now;\n            round_[_rID].end = now.add(rndGap_);\n            round_[_rID].jackpot = round_[_rID-1].jackpot.add(round_[_rID-1].nextpot);\n            emit onSettle(_rID-1, round_[_rID-1].tickets, address(0), round_[_rID-1].lucknum, round_[_rID-1].jackpot);\n        }\n\n    }\n \n     /**\n     * @dev moves any unmasked earnings to ticket vault.  updates earnings\n     */   \n     // _pID: player pid _rIDlast: last roundid\n    function updateTicketVault(uint256 _pID, uint256 _rIDlast) private{\n        \n         uint256 _gen = (plyrRnds_[_pID][_rIDlast].luckytickets.mul(round_[_rIDlast].mask / _headtickets)).sub(plyrRnds_[_pID][_rIDlast].mask);\n         \n         uint256 _jackpot = 0;\n         if (judgeWin(_rIDlast, _pID) && address(round_[_rIDlast].winner) == 0) {\n             _jackpot = round_[_rIDlast].jackpot;\n             round_[_rIDlast].winner = msg.sender;\n         }\n         plyr_[_pID].gen = _gen.add(plyr_[_pID].gen);     // ticket valuet\n         plyr_[_pID].win = _jackpot.add(plyr_[_pID].win); // player win\n         plyrRnds_[_pID][_rIDlast].mask = plyrRnds_[_pID][_rIDlast].mask.add(_gen);\n    }\n    \n    \n    function managePlayer(uint256 _pID)\n        private\n    {\n        // if player has played a previous round, move their unmasked earnings\n        // from that round to gen vault.\n        if (plyr_[_pID].lrnd != 0)\n            updateTicketVault(_pID, plyr_[_pID].lrnd);\n            \n        // update player's last round played\n        plyr_[_pID].lrnd = rID_;\n\n    }\n    //==============================================================================\n    //     _ _ | _   | _ _|_ _  _ _  .\n    //    (_(_||(_|_||(_| | (_)| _\\  .\n    //==============================================================================\n    /**\n     * @dev calculates unmasked earnings (just calculates, does not update ticket)\n     * @return earnings in wei format\n     */\n     //计算每轮中pid前500ticket的分红\n    function calcTicketEarnings(uint256 _pID, uint256 _rIDlast)\n        private\n        view\n        returns(uint256)\n    {   // per round ticket valuet\n        return (plyrRnds_[_pID][_rIDlast].luckytickets.mul(round_[_rIDlast].mask / _headtickets)).sub(plyrRnds_[_pID][_rIDlast].mask);\n    }\n    \n    //====================/=========================================================\n    /** upon contract deploy, it will be deactivated.  this is a one time\n     * use function that will activate the contract.  we do this so devs \n     * have time to set things up on the web end                            **/\n    \n    function activate()\n        isHuman()\n        public\n        payable\n    {\n        // can only be ran once\n        require(msg.sender == activate_addr1 ||\n            msg.sender == activate_addr2);\n        \n        require(activated_ == false, \"LuckyCoin already activated\");\n        //uint256 _jackpot = 10 ether;\n        require(msg.value == jackpot, \"activate game need 10 ether\");\n        \n        if (rID_ != 0) {\n            require(round_[rID_].tickets >= round_[rID_].lucknum, \"nobody win\");\n        }\n        //activate the contract \n        activated_ = true;\n        //lets start first round\n        rID_ ++;\n        round_[rID_].start = now;\n        round_[rID_].end = now + rndGap_;\n        round_[rID_].jackpot = msg.value;\n        emit onActivate(rID_);\n    }\n    \n    /**\n\t * @dev receives name/player info from names contract \n     */\n    function receivePlayerInfo(uint256 _pID, address _addr, bytes32 _name, uint256 _laff)\n        external\n    {\n        require (msg.sender == address(PlayerBook), \"your not playerNames contract... hmmm..\");\n        if (pIDxAddr_[_addr] != _pID)\n            pIDxAddr_[_addr] = _pID;\n        if (pIDxName_[_name] != _pID)\n            pIDxName_[_name] = _pID;\n        if (plyr_[_pID].addr != _addr)\n            plyr_[_pID].addr = _addr;\n        if (plyr_[_pID].name != _name)\n            plyr_[_pID].name = _name;\n        if (plyr_[_pID].laff != _laff)\n            plyr_[_pID].laff = _laff;\n        if (plyrNames_[_pID][_name] == false)\n            plyrNames_[_pID][_name] = true;\n    }\n    \n//==============================PLAYER==========================================    \n    /**\n     * @dev receives entire player name list \n     */\n    function receivePlayerNameList(uint256 _pID, bytes32 _name)\n        external\n    {\n        require (msg.sender == address(PlayerBook), \"your not playerNames contract... hmmm..\");\n        if(plyrNames_[_pID][_name] == false)\n            plyrNames_[_pID][_name] = true;\n    }\n    \n    /**\n     * @dev gets existing or registers new pID.  use this when a player may be new\n     * @return pID \n     */        \n    function determinePID()\n        private\n        //returns (Coindatasets.EventReturns)\n    {\n        uint256 _pID = pIDxAddr_[msg.sender];\n        // if player is new to this version of luckycoin\n        if (_pID == 0)\n        {\n            // grab their player ID, name and last aff ID, from player names contract \n            _pID = PlayerBook.getPlayerID(msg.sender);\n            bytes32 _name = PlayerBook.getPlayerName(_pID);\n            uint256 _laff = PlayerBook.getPlayerLAff(_pID);\n            \n            // set up player account \n            pIDxAddr_[msg.sender] = _pID;\n            plyr_[_pID].addr = msg.sender;\n            \n            if (_name != \"\")\n            {\n                pIDxName_[_name] = _pID;\n                plyr_[_pID].name = _name;\n                plyrNames_[_pID][_name] = true;\n            }\n            \n            if (_laff != 0 && _laff != _pID)\n                plyr_[_pID].laff = _laff;\n            \n            // set the new player bool to true\n            //_eventData_.compressedData = _eventData_.compressedData + 1;\n        } \n        //return (_eventData_);\n    }\n    \n    // only support Name by name\n    function registerNameXname(string _nameString, bytes32 _affCode, bool _all)\n        isHuman()\n        public\n        payable\n    {\n        bytes32 _name = _nameString.nameFilter();\n        address _addr = msg.sender;\n        uint256 _paid = msg.value;\n        (bool _isNewPlayer, uint256 _affID) = PlayerBook.registerNameXnameFromDapp.value(msg.value)(msg.sender, _name, _affCode, _all);\n        \n        uint256 _pID = pIDxAddr_[_addr];\n        \n        // fire event\n        emit Coinevents.onNewName(_pID, _addr, _name, _isNewPlayer, _affID, plyr_[_affID].addr, plyr_[_affID].name, _paid, now);\n    }\n    \n    function registerNameXaddr(string _nameString, address _affCode, bool _all)\n        isHuman()\n        public\n        payable\n    {\n        bytes32 _name = _nameString.nameFilter();\n        address _addr = msg.sender;\n        uint256 _paid = msg.value;\n        (bool _isNewPlayer, uint256 _affID) = PlayerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender, _name, _affCode, _all);\n        \n        uint256 _pID = pIDxAddr_[_addr];\n        // fire event\n        emit Coinevents.onNewName(_pID, _addr, _name, _isNewPlayer, _affID, plyr_[_affID].addr, plyr_[_affID].name, _paid, now);\n    }\n    \n    /**\n     * @dev returns time left.  dont spam this, you'll ddos yourself from your node \n     * provider\n     * -functionhash- 0xc7e284b8\n     * @return time left in seconds\n    */\n    function getTimeLeft()\n        public\n        view\n        returns(uint256)\n    {\n        // setup local rID\n        uint256 _rID = rID_;\n        \n        // grab time\n        uint256 _now = now;\n        \n        if (_now < round_[_rID].end){\n            return( (round_[_rID].end).sub(_now) );\n        }\n        else\n            return(0);\n    }\n    \n    function getCurrentRoundInfo() \n        public\n        view\n        returns(uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, address, bool)\n    {\n        // setup local rID\n        uint256 _rID = rID_;\n        return \n        (\n            rID_,\n            round_[_rID].tickets,\n            round_[_rID].start,\n            round_[_rID].end,\n            round_[_rID].jackpot,\n            round_[_rID].nextpot,\n            round_[_rID].lucknum,\n            round_[_rID].mask,\n            round_[_rID].playernums,\n            round_[_rID].winner,\n            round_[_rID].ended\n        );\n    }\n    \n    function getPlayerInfoByAddress(address _addr)\n        public \n        view \n        returns(uint256, bytes32, uint256, uint256, uint256, uint256, uint256, uint256)\n    {\n        // setup local rID\n        uint256 _rID = rID_;\n        \n        if (_addr == address(0))\n        {\n            _addr == msg.sender;\n        }\n        uint256 _pID = pIDxAddr_[_addr];\n        uint256 _lrnd =  plyr_[_pID].lrnd;\n        uint256 _jackpot = 0;\n        if (judgeWin(_lrnd, _pID) && address(round_[_lrnd].winner) == 0){\n            _jackpot = round_[_lrnd].jackpot;\n        }\n        \n        return\n        (\n            _pID,                               //0\n            plyr_[_pID].name,                   //1\n            plyrRnds_[_pID][_rID].tickets,      //2\n            plyr_[_pID].win.add(_jackpot),                    //3\n            plyr_[_pID].gen.add(calcTicketEarnings(_pID, _lrnd)),  //4\n            plyr_[_pID].aff,                    //5\n            plyrRnds_[_pID][_rID].eth,           //6\n            plyrRnds_[_pID][_rID].affnums        // 7\n        );\n    }\n\n    // generate a number between 1-1500 \n    function randNums() public view returns(uint256) {\n        return uint256(keccak256(block.difficulty, now, block.coinbase)) % ticketstotal_ + 1;\n    }\n    \n    // search user if win\n    function judgeWin(uint256 _rid, uint256 _pID)private view returns(bool){\n        uint256 _group = (round_[_rid].lucknum -1) / grouptotal_;\n        uint256 _temp = round_[_rid].lucknum % grouptotal_;\n        if (_temp == 0){\n            _temp = grouptotal_;\n        }\n\n        if (orders[_rid][_pID][_group] & (2 **(_temp-1)) == 2 **(_temp-1)){\n            return true;\n        }else{\n            return false;\n        }\n    }\n\n    // search the tickets owns\n    function searchtickets()public view returns(uint256, uint256, uint256, uint256,uint256, uint256){\n         uint256 _pID = pIDxAddr_[msg.sender];\n         return (\n             orders[rID_][_pID][0],\n             orders[rID_][_pID][1],\n             orders[rID_][_pID][2],\n             orders[rID_][_pID][3],\n             orders[rID_][_pID][4],\n             orders[rID_][_pID][5]\n            );\n     }\n     // search the tickets by address\n    function searchTicketsXaddr(address addr) public view returns(uint256, uint256, uint256, uint256,uint256, uint256){\n        uint256 _pID = pIDxAddr_[addr];\n        return (\n             orders[rID_][_pID][0],\n             orders[rID_][_pID][1],\n             orders[rID_][_pID][2],\n             orders[rID_][_pID][3],\n             orders[rID_][_pID][4],\n             orders[rID_][_pID][5]\n            );\n     }\n}\n\n\nlibrary Coindatasets {\n    struct EventReturns {\n        uint256 compressedData;\n        uint256 compressedIDs;\n        address winnerAddr;         // winner address\n        bytes32 winnerName;         // winner name\n        uint256 amountWon;          // amount won\n        uint256 newPot;             // amount in new pot\n        uint256 genAmount;          // amount distributed to gen\n        uint256 potAmount;          // amount added to pot\n    }\n    \n     struct Round {\n        uint256 tickets; // already purchase ticket\n        bool ended;     // has round end function been ran\n        uint256 jackpot;    // eth to pot, perhaps next round pot\n        uint256 start;   // time round started\n        uint256 end;    // time ends/ended\n        address winner;  //win address\n        uint256 mask;   // global mask\n        uint256 found; // jackpot found\n        uint256 lucknum;  // win num\n        uint256 nextpot;  // next pot\n        uint256 blocknum; // current blocknum\n        uint256 playernums; // playernums\n      }\n      \n    struct Player {\n        address addr;   // player address\n        bytes32 name;   // player name\n        uint256 win;    // winnings vault\n        uint256 gen;    // general vault\n        uint256 aff;    // affiliate vault\n        uint256 lrnd;   // last round played\n        uint256 laff;   // last affiliate id used\n        uint256 luckytickets;  // head 500 will acquire distributes vault\n    }\n    \n    struct PotSplit {\n        uint256 community;    // % of pot thats paid to key holders of current round\n        uint256 gen;    // % of pot thats paid to tickets holders\n        uint256 laff;   // last affiliate id used\n    }\n    \n    struct PlayerRounds {\n        uint256 eth;    // eth player has added to round\n        uint256 tickets;   // tickets\n        uint256 mask;  // player mask,\n        uint256 affnums;\n        uint256 luckytickets; // player luckytickets\n    }\n}\n\n\ninterface PlayerBookInterface {\n    function getPlayerID(address _addr) external returns (uint256);\n    function getPlayerName(uint256 _pID) external view returns (bytes32);\n    function getPlayerLAff(uint256 _pID) external view returns (uint256);\n    function getPlayerAddr(uint256 _pID) external view returns (address);\n    function getNameFee() external view returns (uint256);\n    function registerNameXIDFromDapp(address _addr, bytes32 _name, uint256 _affCode, bool _all) external payable returns(bool, uint256);\n    function registerNameXaddrFromDapp(address _addr, bytes32 _name, address _affCode, bool _all) external payable returns(bool, uint256);\n    function registerNameXnameFromDapp(address _addr, bytes32 _name, bytes32 _affCode, bool _all) external payable returns(bool, uint256);\n}\n\n\n\nlibrary NameFilter {\n    /**\n     * @dev filters name strings\n     * -converts uppercase to lower case.  \n     * -makes sure it does not start/end with a space\n     * -makes sure it does not contain multiple spaces in a row\n     * -cannot be only numbers\n     * -cannot start with 0x \n     * -restricts characters to A-Z, a-z, 0-9, and space.\n     * @return reprocessed string in bytes32 format\n     */\n    function nameFilter(string _input)\n        internal\n        pure\n        returns(bytes32)\n    {\n        bytes memory _temp = bytes(_input);\n        uint256 _length = _temp.length;\n        \n        //sorry limited to 32 characters\n        require (_length <= 32 && _length > 0, \"string must be between 1 and 32 characters\");\n        // make sure it doesnt start with or end with space\n        require(_temp[0] != 0x20 && _temp[_length-1] != 0x20, \"string cannot start or end with space\");\n        // make sure first two characters are not 0x\n        if (_temp[0] == 0x30)\n        {\n            require(_temp[1] != 0x78, \"string cannot start with 0x\");\n            require(_temp[1] != 0x58, \"string cannot start with 0X\");\n        }\n        \n        // create a bool to track if we have a non number character\n        bool _hasNonNumber;\n        \n        // convert & check\n        for (uint256 i = 0; i < _length; i++)\n        {\n            // if its uppercase A-Z\n            if (_temp[i] > 0x40 && _temp[i] < 0x5b)\n            {\n                // convert to lower case a-z\n                _temp[i] = byte(uint(_temp[i]) + 32);\n                \n                // we have a non number\n                if (_hasNonNumber == false)\n                    _hasNonNumber = true;\n            } else {\n                require\n                (\n                    // require character is a space\n                    _temp[i] == 0x20 || \n                    // OR lowercase a-z\n                    (_temp[i] > 0x60 && _temp[i] < 0x7b) ||\n                    // or 0-9\n                    (_temp[i] > 0x2f && _temp[i] < 0x3a),\n                    \"string contains invalid characters\"\n                );\n                // make sure theres not 2x spaces in a row\n                if (_temp[i] == 0x20)\n                    require( _temp[i+1] != 0x20, \"string cannot contain consecutive spaces\");\n                \n                // see if we have a character other than a number\n                if (_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39))\n                    _hasNonNumber = true;    \n            }\n        }\n        \n        require(_hasNonNumber == true, \"string cannot be only numbers\");\n        \n        bytes32 _ret;\n        assembly {\n            _ret := mload(add(_temp, 32))\n        }\n        return (_ret);\n    }\n}\n\n\n\n\n/**\n * @title SafeMath v0.1.9\n * @dev Math operations with safety checks that throw on error\n * change notes:  original SafeMath library from OpenZeppelin modified by Inventor\n * - added sqrt\n * - added sq\n * - added pwr\n * - changed asserts to requires with error log outputs\n * - removed div, its useless\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256 c)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        require(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        require(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256 c)\n    {\n        c = a + b;\n        require(c >= a);\n        return c;\n    }\n\n    /**\n     * @dev gives square root of given x.\n     */\n    function sqrt(uint256 x)\n        internal\n        pure\n        returns (uint256 y)\n    {\n        uint256 z = ((add(x,1)) / 2);\n        y = x;\n        while (z < y)\n        {\n            y = z;\n            z = ((add((x / z),z)) / 2);\n        }\n    }\n\n    /**\n     * @dev gives square. multiplies x by x\n     */\n    function sq(uint256 x)\n        internal\n        pure\n        returns (uint256)\n    {\n        return (mul(x,x));\n    }\n\n    /**\n     * @dev x to the power of y\n     */\n    function pwr(uint256 x, uint256 y)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (x==0)\n            return (0);\n        else if (y==0)\n            return (1);\n        else\n        {\n            uint256 z = x;\n            for (uint256 i=1; i < y; i++)\n                z = mul(z,x);\n            return (z);\n        }\n    }\n}",
  "bytecode": ""
}