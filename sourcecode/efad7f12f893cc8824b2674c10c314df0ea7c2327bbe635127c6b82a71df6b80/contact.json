{
  "address": "0x386cabc0b14a507a4e024dea15554342865b20de",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Dapp Token",
  "contractName": "DappToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-08\n*/\n\npragma solidity ^0.4.12;\n\ncontract IMigrationContract {\n    function migrate(address addr, uint256 dappt) returns (bool success);\n}\n\n/* taking ideas from FirstBlood token */\ncontract SafeMath {\n\n    /* function assert(bool assertion) internal { */\n    /*   if (!assertion) { */\n    /*     throw; */\n    /*   } */\n    /* }      // assert no longer needed once solidity is on 0.4.10 */\n\n    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\n      uint256 z = x + y;\n      assert((z >= x) && (z >= y));\n      return z;\n    }\n\n    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\n      assert(x >= y);\n      uint256 z = x - y;\n      return z;\n    }\n\n    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n      uint256 z = x * y;\n      assert((x == 0)||(z/x == y));\n      return z;\n    }\n\n}\n\ncontract Token {\n    uint256 public totalSupply;\n    function balanceOf(address _owner) constant returns (uint256 balance);\n    function transfer(address _to, uint256 _value) returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n    function approve(address _spender, uint256 _value) returns (bool success);\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\n/*  ERC 20 token */\ncontract StandardToken is Token {\n\n    function transfer(address _to, uint256 _value) returns (bool success) {\n      if (balances[msg.sender] >= _value && _value > 0) {\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        Transfer(msg.sender, _to, _value);\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        allowed[_from][msg.sender] -= _value;\n        Transfer(_from, _to, _value);\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n    }\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n}\n\ncontract DappToken is StandardToken, SafeMath {\n\n    // metadata\n    string  public constant name = \"Dapp Token\";\n    string  public constant symbol = \"DAPPT\";\n    uint256 public constant decimals = 18;\n    string  public version = \"1.0\";\n\n    // contracts\n    address public ethFundDeposit;          // deposit address for ETH for Dapp Team.\n    address public newContractAddr;         // the new contract for dapp token updates;\n\n    // crowdsale parameters\n    bool    public isFunding;                // switched to true in operational state\n    uint256 public fundingStartBlock;\n    uint256 public fundingStopBlock;\n\n    uint256 public currentSupply;           // current supply tokens for sell\n    uint256 public tokenRaised = 0;         // the number of total sold token\n    uint256 public tokenMigrated = 0;     // the number of total transferted token\n    uint256 public tokenExchangeRate = 25000;             // 25000 Dapp tokens per 1 ETH\n\n    // events\n    event AllocateToken(address indexed _to, uint256 _value);   // allocate token for private sale;\n    event IssueToken(address indexed _to, uint256 _value);      // issue token for public sale;\n    event IncreaseSupply(uint256 _value);\n    event DecreaseSupply(uint256 _value);\n    event Migrate(address indexed _to, uint256 _value);\n\n    // format decimals.\n    function formatDecimals(uint256 _value) internal returns (uint256 ) {\n        return _value * 10 ** decimals;\n    }\n\n    // constructor\n    function DappToken(\n        address _ethFundDeposit,\n        uint256 _currentSupply)\n    {\n        ethFundDeposit = _ethFundDeposit;\n\n        isFunding = false;                           //controls pre through crowdsale state\n        fundingStartBlock = 0;\n        fundingStopBlock = 0;\n\n        currentSupply = formatDecimals(_currentSupply);\n        totalSupply = formatDecimals(5000000000);\n\tbalances[msg.sender] = totalSupply;\n        if(currentSupply > totalSupply) throw;\n    }\n\n    modifier isOwner()  { require(msg.sender == ethFundDeposit); _; }\n\n    /// @dev set the token's tokenExchangeRate,\n    function setTokenExchangeRate(uint256 _tokenExchangeRate) isOwner external {\n        if (_tokenExchangeRate == 0) throw;\n        if (_tokenExchangeRate == tokenExchangeRate) throw;\n\n        tokenExchangeRate = _tokenExchangeRate;\n    }\n\n    /// @dev increase the token's supply\n    function increaseSupply (uint256 _value) isOwner external {\n        uint256 value = formatDecimals(_value);\n        if (value + currentSupply > totalSupply) throw;\n        currentSupply = safeAdd(currentSupply, value);\n        IncreaseSupply(value);\n    }\n\n    /// @dev decrease the token's supply\n    function decreaseSupply (uint256 _value) isOwner external {\n        uint256 value = formatDecimals(_value);\n        if (value + tokenRaised > currentSupply) throw;\n\n        currentSupply = safeSubtract(currentSupply, value);\n        DecreaseSupply(value);\n    }\n\n    /// @dev turn on the funding state\n    function startFunding (uint256 _fundingStartBlock, uint256 _fundingStopBlock) isOwner external {\n        if (isFunding) throw;\n        if (_fundingStartBlock >= _fundingStopBlock) throw;\n        if (block.number >= _fundingStartBlock) throw;\n\n        fundingStartBlock = _fundingStartBlock;\n        fundingStopBlock = _fundingStopBlock;\n        isFunding = true;\n    }\n\n    /// @dev turn off the funding state\n    function stopFunding() isOwner external {\n        if (!isFunding) throw;\n        isFunding = false;\n    }\n\n    /// @dev set a new contract for recieve the tokens (for update contract)\n    function setMigrateContract(address _newContractAddr) isOwner external {\n        if (_newContractAddr == newContractAddr) throw;\n        newContractAddr = _newContractAddr;\n    }\n\n    /// @dev set a new owner.\n    function changeOwner(address _newFundDeposit) isOwner() external {\n        if (_newFundDeposit == address(0x0)) throw;\n        ethFundDeposit = _newFundDeposit;\n    }\n\n    /// sends the tokens to new contract\n    function migrate() external {\n        if(isFunding) throw;\n        if(newContractAddr == address(0x0)) throw;\n\n        uint256 tokens = balances[msg.sender];\n        if (tokens == 0) throw;\n\n        balances[msg.sender] = 0;\n        tokenMigrated = safeAdd(tokenMigrated, tokens);\n\n        IMigrationContract newContract = IMigrationContract(newContractAddr);\n        if (!newContract.migrate(msg.sender, tokens)) throw;\n\n        Migrate(msg.sender, tokens);               // log it\n    }\n\n    /// @dev sends ETH to Dapp team\n    function transferETH() isOwner external {\n        if (this.balance == 0) throw;\n        if (!ethFundDeposit.send(this.balance)) throw;\n    }\n\n    /// @dev allocates Dapp tokens to pre-sell address.\n    function allocateToken (address _addr, uint256 _eth) isOwner external {\n        if (_eth == 0) throw;\n        if (_addr == address(0x0)) throw;\n\n        uint256 tokens = safeMult(formatDecimals(_eth), tokenExchangeRate);\n        if (tokens + tokenRaised > currentSupply) throw;\n\n        tokenRaised = safeAdd(tokenRaised, tokens);\n        balances[_addr] += tokens;\n\n        AllocateToken(_addr, tokens);  // logs token issued\n    }\n\n    /// buys the tokens\n    function () payable {\n        if (!isFunding) throw;\n        if (msg.value == 0) throw;\n\n        if (block.number < fundingStartBlock) throw;\n        if (block.number > fundingStopBlock) throw;\n\n        uint256 tokens = safeMult(msg.value, tokenExchangeRate);\n        if (tokens + tokenRaised > currentSupply) throw;\n\n        tokenRaised = safeAdd(tokenRaised, tokens);\n        balances[msg.sender] += tokens;\n\n        IssueToken(msg.sender, tokens);  // logs token issued\n    }\n}",
  "bytecode": "60806040526040805190810160405280600381526020017f312e3000000000000000000000000000000000000000000000000000000000008152506003908051906020019062000051929190620001be565b5060006009556000600a556161a8600b553480156200006f57600080fd5b5060405160408062001f1a833981018060405281019080805190602001909291908051906020019092919050505081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600560146101000a81548160ff021916908315150217905550600060068190555060006007819055506200012381620001ae640100000000026401000000009004565b6008819055506200014864012a05f200620001ae640100000000026401000000009004565b600081905550600054600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000546008541115620001a657600080fd5b50506200026d565b60006012600a0a82029050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200020157805160ff191683800117855562000232565b8280016001018555821562000232579182015b828111156200023157825182559160200191906001019062000214565b5b50905062000241919062000245565b5090565b6200026a91905b80821115620002665760008160009055506001016200024c565b5090565b90565b611c9d806200027d6000396000f300608060405260043610610175576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461028f578063095ea7b31461031f5780630a9ffdb71461038457806313b53153146103d157806318160ddd1461040057806323b872dd1461042b57806326a21575146104b0578063313ce567146104db57806332513ce5146105065780634172d0801461055d5780634477c5da146105885780634a36df251461059f57806354fd4d50146105e25780636fe3a5671461067257806370a082311461069d578063771282f6146106f4578063775c46cd1461071f5780638fd3ab801461075657806395d89b411461076d57806398e52f9a146107fd578063a6f9dae11461082a578063a81c3bdf1461086d578063a9059cbb146108c4578063b921e16314610929578063cb7b867314610956578063d648a64714610983578063dd62ed3e146109ae578063e28d717b14610a25578063ff29507d14610a3c575b6000600560149054906101000a900460ff16151561019257600080fd5b60003414156101a057600080fd5b6006544310156101af57600080fd5b6007544311156101be57600080fd5b6101ca34600b54610a67565b9050600854600954820111156101df57600080fd5b6101eb60095482610a9a565b60098190555080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff167f7ba26a0f068612fb882b3272004674d21fed286c2c8c795cf653044690b32db4826040518082815260200191505060405180910390a250005b34801561029b57600080fd5b506102a4610ac4565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102e45780820151818401526020810190506102c9565b50505050905090810190601f1680156103115780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561032b57600080fd5b5061036a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610afd565b604051808215151515815260200191505060405180910390f35b34801561039057600080fd5b506103cf600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610bef565b005b3480156103dd57600080fd5b506103e6610d70565b604051808215151515815260200191505060405180910390f35b34801561040c57600080fd5b50610415610d83565b6040518082815260200191505060405180910390f35b34801561043757600080fd5b50610496600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d89565b604051808215151515815260200191505060405180910390f35b3480156104bc57600080fd5b506104c5611005565b6040518082815260200191505060405180910390f35b3480156104e757600080fd5b506104f061100b565b6040518082815260200191505060405180910390f35b34801561051257600080fd5b5061051b611010565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561056957600080fd5b50610572611036565b6040518082815260200191505060405180910390f35b34801561059457600080fd5b5061059d61103c565b005b3480156105ab57600080fd5b506105e0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110d0565b005b3480156105ee57600080fd5b506105f76111cb565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561063757808201518184015260208101905061061c565b50505050905090810190601f1680156106645780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561067e57600080fd5b50610687611269565b6040518082815260200191505060405180910390f35b3480156106a957600080fd5b506106de600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061126f565b6040518082815260200191505060405180910390f35b34801561070057600080fd5b506107096112b8565b6040518082815260200191505060405180910390f35b34801561072b57600080fd5b5061075460048036038101908080359060200190929190803590602001909291905050506112be565b005b34801561076257600080fd5b5061076b61137d565b005b34801561077957600080fd5b506107826115fd565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107c25780820151818401526020810190506107a7565b50505050905090810190601f1680156107ef5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561080957600080fd5b5061082860048036038101908080359060200190929190505050611636565b005b34801561083657600080fd5b5061086b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116ff565b005b34801561087957600080fd5b506108826117d9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156108d057600080fd5b5061090f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506117ff565b604051808215151515815260200191505060405180910390f35b34801561093557600080fd5b5061095460048036038101908080359060200190929190505050611968565b005b34801561096257600080fd5b5061098160048036038101908080359060200190929190505050611a31565b005b34801561098f57600080fd5b50610998611ab4565b6040518082815260200191505060405180910390f35b3480156109ba57600080fd5b50610a0f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611aba565b6040518082815260200191505060405180910390f35b348015610a3157600080fd5b50610a3a611b41565b005b348015610a4857600080fd5b50610a51611c3d565b6040518082815260200191505060405180910390f35b60008082840290506000841480610a885750828482811515610a8557fe5b04145b1515610a9057fe5b8091505092915050565b6000808284019050838110158015610ab25750828110155b1515610aba57fe5b8091505092915050565b6040805190810160405280600a81526020017f4461707020546f6b656e0000000000000000000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c4d57600080fd5b6000821415610c5b57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c9557600080fd5b610ca9610ca183611c43565b600b54610a67565b905060085460095482011115610cbe57600080fd5b610cca60095482610a9a565b60098190555080600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff167f1aee3ddc9eba03c98b273cd914e999b78162e1ddd1c022045394f635a469e105826040518082815260200191505060405180910390a2505050565b600560149054906101000a900460ff1681565b60005481565b600081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610e56575081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015610e625750600082115b15610ff95781600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050610ffe565b600090505b9392505050565b60095481565b601281565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b5481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561109857600080fd5b600560149054906101000a900460ff1615156110b357600080fd5b6000600560146101000a81548160ff021916908315150217905550565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561112c57600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561118757600080fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112615780601f1061123657610100808354040283529160200191611261565b820191906000526020600020905b81548152906001019060200180831161124457829003601f168201915b505050505081565b600a5481565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60085481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561131a57600080fd5b600560149054906101000a900460ff161561133457600080fd5b808210151561134257600080fd5b814310151561135057600080fd5b81600681905550806007819055506001600560146101000a81548160ff0219169083151502179055505050565b600080600560149054906101000a900460ff161561139a57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156113f657600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150600082141561144657600080fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611497600a5483610a9a565b600a81905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663ad68ebf733846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561156557600080fd5b505af1158015611579573d6000803e3d6000fd5b505050506040513d602081101561158f57600080fd5b810190808051906020019092919050505015156115ab57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff167fa59785389b00cbd19745afbe8d59b28e3161395c6b1e3525861a2b0dede0b90d836040518082815260200191505060405180910390a25050565b6040805190810160405280600581526020017f444150505400000000000000000000000000000000000000000000000000000081525081565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561169457600080fd5b61169d82611c43565b9050600854600954820111156116b257600080fd5b6116be60085482611c53565b6008819055507f9ecdebfa921d6ab8cecf7259ef30327664ad0d45d32fa3641089b00b533f2eee816040518082815260200191505060405180910390a15050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561175b57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561179557600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156118505750600082115b1561195d5781600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050611962565b600090505b92915050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119c657600080fd5b6119cf82611c43565b9050600054600854820111156119e457600080fd5b6119f060085482610a9a565b6008819055507ffaabf704b783af9e21c676de8e3e6e0c9c2260dce2ee299437ec9b70151ddaeb816040518082815260200191505060405180910390a15050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611a8d57600080fd5b6000811415611a9b57600080fd5b600b54811415611aaa57600080fd5b80600b8190555050565b60065481565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b9d57600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff16311415611bc257600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501515611c3b57600080fd5b565b60075481565b60006012600a0a82029050919050565b600080828410151515611c6257fe5b828403905080915050929150505600a165627a7a72305820e033e047dd1a6494ae63921096a70239439f75a15835602e91ef8b0302b41da20029000000000000000000000000755272962a43dd515fd35d64aa85105ae082fd14000000000000000000000000000000000000000000000000000000012a05f200",
  "constructorArguments": "000000000000000000000000755272962a43dd515fd35d64aa85105ae082fd14000000000000000000000000000000000000000000000000000000012a05f200"
}