{
  "address": "0x1fa3bc860bf823d792f04f662f3aa3a500a68814",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LeveragedToken",
  "compilerVersion": "v0.5.6+commit.b259423e",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-18\n*/\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\n\npragma solidity ^0.5.0;\n\n\n/**\n * @title ERC20Detailed token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\npragma solidity ^0.5.0;\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/Roles.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/roles/PauserRole.sol\n\npragma solidity ^0.5.0;\n\n\ncontract PauserRole {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor () internal {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender));\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n\npragma solidity ^0.5.0;\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n    event Paused(address account);\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @return true if the contract is paused, false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Pausable.sol\n\npragma solidity ^0.5.0;\n\n\n\n/**\n * @title Pausable token\n * @dev ERC20 modified with pausable transfers.\n **/\ncontract ERC20Pausable is ERC20, Pausable {\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transfer(to, value);\n    }\n\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n        return super.approve(spender, value);\n    }\n\n    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) {\n        return super.increaseAllowance(spender, addedValue);\n    }\n\n    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) {\n        return super.decreaseAllowance(spender, subtractedValue);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol\n\npragma solidity ^0.5.0;\n\n\ncontract MinterRole {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private _minters;\n\n    constructor () internal {\n        _addMinter(msg.sender);\n    }\n\n    modifier onlyMinter() {\n        require(isMinter(msg.sender));\n        _;\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n\n    function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n\n    function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n\n    function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n\n    function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\n\npragma solidity ^0.5.0;\n\n\n\n/**\n * @title ERC20Mintable\n * @dev ERC20 minting logic\n */\ncontract ERC20Mintable is ERC20, MinterRole {\n    /**\n     * @dev Function to mint tokens\n     * @param to The address that will receive the minted tokens.\n     * @param value The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address to, uint256 value) public onlyMinter returns (bool) {\n        _mint(to, value);\n        return true;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: contracts/whitelist/IWhitelist.sol\n\npragma solidity ^0.5.0;\n\n\n// Interface to be implemented by the Whitelist contract.\ncontract IWhitelist {\n    function isWhitelisted(address account) public view returns (bool);\n}\n\n// File: contracts/token/BurnerRole.sol\n\npragma solidity ^0.5.0;\n\n\n\ncontract BurnerRole {\n    using Roles for Roles.Role;\n\n    event BurnerAdded(address indexed account);\n    event BurnerRemoved(address indexed account);\n\n    Roles.Role private _burners;\n\n    constructor () internal {\n        _addBurner(msg.sender);\n    }\n\n    modifier onlyBurner() {\n        require(isBurner(msg.sender));\n        _;\n    }\n\n    function isBurner(address account) public view returns (bool) {\n        return _burners.has(account);\n    }\n\n    function addBurner(address account) public onlyBurner {\n        _addBurner(account);\n    }\n\n    function renounceBurner() public {\n        _removeBurner(msg.sender);\n    }\n\n    function _addBurner(address account) internal {\n        _burners.add(account);\n        emit BurnerAdded(account);\n    }\n\n    function _removeBurner(address account) internal {\n        _burners.remove(account);\n        emit BurnerRemoved(account);\n    }\n}\n\n// File: contracts/token/ERC20Burnable.sol\n\npragma solidity ^0.5.0;\n\n\n\n\n// Only allow accounts with the burner role to burn tokens.\ncontract ERC20Burnable is ERC20, BurnerRole {\n    function burn(uint256 value) public onlyBurner() {\n        _burn(msg.sender, value);\n    }\n\n    function burnFrom(address from, uint256 value) public onlyBurner() {\n        _burnFrom(from, value);\n    }\n}\n\n// File: contracts/token/ERC20Whitelistable.sol\n\npragma solidity ^0.5.0;\n\n\n\n\n\n\n// Disallow transfers of the token to or from blacklisted accounts.\ncontract ERC20Whitelistable is ERC20Mintable, ERC20Burnable, Ownable {\n    event WhitelistChanged(IWhitelist indexed account);\n\n    IWhitelist public whitelist;\n\n    function setWhitelist(IWhitelist _whitelist) public onlyOwner {\n        whitelist = _whitelist;\n        emit WhitelistChanged(_whitelist);\n    }\n\n    modifier onlyWhitelisted(address account) {\n        require(isWhitelisted(account));\n        _;\n    }\n\n    modifier notWhitelisted(address account) {\n        require(!isWhitelisted(account));\n        _;\n    }\n\n    // Returns true if the account is allowed to send and receive tokens.\n    function isWhitelisted(address account) public view returns (bool) {\n        return whitelist.isWhitelisted(account);\n    }\n\n    function transfer(address to, uint256 value)\n        public\n        onlyWhitelisted(msg.sender)\n        onlyWhitelisted(to)\n        returns (bool)\n    {\n        return super.transfer(to, value);\n    }\n\n    function transferFrom(address from, address to, uint256 value)\n        public\n        onlyWhitelisted(from)\n        onlyWhitelisted(to)\n        returns (bool)\n    {\n        return super.transferFrom(from, to, value);\n    }\n\n    function mint(address to, uint256 value) public onlyWhitelisted(to) returns (bool) {\n        return super.mint(to, value);\n    }\n\n    // Destroy the tokens held by a blacklisted account.\n    function burnBlacklisted(address from, uint256 value)\n        public\n        onlyBurner()\n        notWhitelisted(from)\n    {\n        _burn(from, value);\n    }\n}\n\n// File: contracts/utils/CanReclaimEther.sol\n\npragma solidity ^0.5.0;\n\n\n\n// Ether should not be sent to this contract. If any ether is accidentally sent to this\n// contract, allow the contract owner to recover it.\n// Copied from https://github.com/OpenZeppelin/openzeppelin-solidity/blob/2441fd7d17bffa1944f6f539b2cddd6d19997a31/contracts/ownership/HasNoEther.sol\ncontract CanReclaimEther is Ownable {\n    function reclaimEther() external onlyOwner {\n        msg.sender.transfer(address(this).balance);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n\npragma solidity ^0.5.0;\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        require(token.transfer(to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        require(token.transferFrom(from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\n        require(token.approve(spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        require(token.approve(spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n        require(token.approve(spender, newAllowance));\n    }\n}\n\n// File: contracts/utils/CanReclaimToken.sol\n\npragma solidity ^0.5.0;\n\n\n\n\n// Tokens should not be sent to this contract.  If any tokens are accidentally sent to\n// this contract, allow the contract owner to recover them.\n// Copied from https://github.com/OpenZeppelin/openzeppelin-solidity/blob/6c4c8989b399510a66d8b98ad75a0979482436d2/contracts/ownership/CanReclaimToken.sol\ncontract CanReclaimToken is Ownable {\n    using SafeERC20 for IERC20;\n\n    function reclaimToken(IERC20 token) external onlyOwner {\n        uint256 balance = token.balanceOf(address(this));\n        token.safeTransfer(owner(), balance);\n    }\n}\n\n// File: contracts/token/LeveragedToken.sol\n\npragma solidity ^0.5.0;\n\n\n\n\n\n\n\n\n\n\ncontract LeveragedToken is\n    ERC20Detailed,\n    ERC20Pausable,\n    ERC20Mintable,\n    ERC20Burnable,\n    ERC20Whitelistable,\n    CanReclaimEther,\n    CanReclaimToken\n{\n    string public underlying;\n    int8 public leverage;\n\n    constructor(string memory name, string memory symbol, string memory _underlying, int8 _leverage)\n        ERC20Detailed(name, symbol, 18)\n        public\n    {\n        underlying = _underlying;\n        leverage = _leverage;\n    }\n}",
  "bytecode": "60806040523480156200001157600080fd5b5060405162001bd438038062001bd4833981018060405260808110156200003757600080fd5b8101908080516401000000008111156200005057600080fd5b820160208101848111156200006457600080fd5b81516401000000008111828201871017156200007f57600080fd5b505092919060200180516401000000008111156200009c57600080fd5b82016020810184811115620000b057600080fd5b8151640100000000811182820187101715620000cb57600080fd5b50509291906020018051640100000000811115620000e857600080fd5b82016020810184811115620000fc57600080fd5b81516401000000008111828201871017156200011757600080fd5b505060209182015186519194509250859185916012916200013e91600091860190620003b2565b50815162000154906001906020850190620003b2565b506002805460ff191660ff92909216919091179055506200017e90503362000230602090811b901c565b6007805460ff191690556200019a3362000282602090811b901c565b620001ab33620002d460201b60201c565b600a80546001600160a01b0319163317908190556040516001600160a01b0391909116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a381516200020c90600c906020850190620003b2565b50600d805460009290920b60ff1660ff199092169190911790555062000457915050565b6200024b8160066200032660201b620015ff1790919060201c565b6040516001600160a01b038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b6200029d8160086200032660201b620015ff1790919060201c565b6040516001600160a01b038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b620002ef8160096200032660201b620015ff1790919060201c565b6040516001600160a01b038216907f86e57fd2b90329052917118de7c3f521f400d439b9650deaa906a25b08b9456090600090a250565b6001600160a01b0381166200033a57600080fd5b6200034c82826200037c60201b60201c565b156200035757600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b60006001600160a01b0382166200039257600080fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003f557805160ff191683800117855562000425565b8280016001018555821562000425579182015b828111156200042557825182559160200191906001019062000408565b506200043392915062000437565b5090565b6200045491905b808211156200043357600081556001016200043e565b90565b61176d80620004676000396000f3fe608060405234801561001057600080fd5b50600436106102325760003560e01c8063715018a611610130578063983b2d56116100b8578063aa271e1a1161007c578063aa271e1a14610656578063dd62ed3e1461067c578063e9ec9e8b146106aa578063f2fde38b146106b2578063f44637ba146106d857610232565b8063983b2d56146105c857806398650275146105ee5780639f727c27146105f6578063a457c2d7146105fe578063a9059cbb1461062a57610232565b8063854cff2f116100ff578063854cff2f146105665780638da5cb5b1461058c5780638f32d59b146105b057806393e59dc1146105b857806395d89b41146105c057610232565b8063715018a61461050457806379cc67901461050c57806382dc1ec4146105385780638456cb591461055e57610232565b80633f4ba83a116101be5780635c975abb116101825780635c975abb1461049a5780636165e774146104a25780636ef8d66d146104ce5780636f307dc3146104d657806370a08231146104de57610232565b80633f4ba83a146103fd57806340c10f191461040557806342966c68146104315780634334614a1461044e57806346fbf68e1461047457610232565b806323b872dd1161020557806323b872dd146103365780632c86d98e1461036c578063313ce5671461038d57806339509351146103ab5780633af32abf146103d757610232565b806306fdde0314610237578063095ea7b3146102b457806317ffc320146102f457806318160ddd1461031c575b600080fd5b61023f6106fe565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610279578181015183820152602001610261565b50505050905090810190601f1680156102a65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102e0600480360360408110156102ca57600080fd5b506001600160a01b038135169060200135610794565b604080519115158252519081900360200190f35b61031a6004803603602081101561030a57600080fd5b50356001600160a01b03166107b8565b005b61032461086a565b60408051918252519081900360200190f35b6102e06004803603606081101561034c57600080fd5b506001600160a01b03813581169160208101359091169060400135610870565b6103746108ad565b60408051600092830b90920b8252519081900360200190f35b6103956108b6565b6040805160ff9092168252519081900360200190f35b6102e0600480360360408110156103c157600080fd5b506001600160a01b0381351690602001356108bf565b6102e0600480360360208110156103ed57600080fd5b50356001600160a01b03166108dc565b61031a610962565b6102e06004803603604081101561041b57600080fd5b506001600160a01b0381351690602001356109c2565b61031a6004803603602081101561044757600080fd5b50356109e9565b6102e06004803603602081101561046457600080fd5b50356001600160a01b0316610a08565b6102e06004803603602081101561048a57600080fd5b50356001600160a01b0316610a21565b6102e0610a34565b61031a600480360360408110156104b857600080fd5b506001600160a01b038135169060200135610a3d565b61031a610a72565b61023f610a7d565b610324600480360360208110156104f457600080fd5b50356001600160a01b0316610b0b565b61031a610b26565b61031a6004803603604081101561052257600080fd5b506001600160a01b038135169060200135610b81565b61031a6004803603602081101561054e57600080fd5b50356001600160a01b0316610b9d565b61031a610bb8565b61031a6004803603602081101561057c57600080fd5b50356001600160a01b0316610c1c565b610594610c77565b604080516001600160a01b039092168252519081900360200190f35b6102e0610c86565b610594610c97565b61023f610ca6565b61031a600480360360208110156105de57600080fd5b50356001600160a01b0316610d06565b61031a610d21565b61031a610d2a565b6102e06004803603604081101561061457600080fd5b506001600160a01b038135169060200135610d68565b6102e06004803603604081101561064057600080fd5b506001600160a01b038135169060200135610d85565b6102e06004803603602081101561066c57600080fd5b50356001600160a01b0316610dc0565b6103246004803603604081101561069257600080fd5b506001600160a01b0381358116916020013516610dd3565b61031a610dfe565b61031a600480360360208110156106c857600080fd5b50356001600160a01b0316610e07565b61031a600480360360208110156106ee57600080fd5b50356001600160a01b0316610e21565b60008054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561078a5780601f1061075f5761010080835404028352916020019161078a565b820191906000526020600020905b81548152906001019060200180831161076d57829003601f168201915b5050505050905090565b60075460009060ff16156107a757600080fd5b6107b18383610e3c565b9392505050565b6107c0610c86565b6107c957600080fd5b60408051600160e01b6370a0823102815230600482015290516000916001600160a01b038416916370a0823191602480820192602092909190829003018186803b15801561081657600080fd5b505afa15801561082a573d6000803e3d6000fd5b505050506040513d602081101561084057600080fd5b5051905061086661084f610c77565b6001600160a01b038416908363ffffffff610ea616565b5050565b60055490565b60008361087c816108dc565b61088557600080fd5b8361088f816108dc565b61089857600080fd5b6108a3868686610f3b565b9695505050505050565b600d5460000b81565b60025460ff1690565b60075460009060ff16156108d257600080fd5b6107b18383610f59565b600b5460408051600160e01b633af32abf0281526001600160a01b03848116600483015291516000939290921691633af32abf91602480820192602092909190829003018186803b15801561093057600080fd5b505afa158015610944573d6000803e3d6000fd5b505050506040513d602081101561095a57600080fd5b505192915050565b61096b33610a21565b61097457600080fd5b60075460ff1661098357600080fd5b6007805460ff191690556040805133815290517f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9181900360200190a1565b6000826109ce816108dc565b6109d757600080fd5b6109e18484610ff5565b949350505050565b6109f233610a08565b6109fb57600080fd5b610a05338261101c565b50565b6000610a1b60098363ffffffff6110c516565b92915050565b6000610a1b60068363ffffffff6110c516565b60075460ff1690565b610a4633610a08565b610a4f57600080fd5b81610a59816108dc565b15610a6357600080fd5b610a6d838361101c565b505050565b610a7b336110fa565b565b600c805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610b035780601f10610ad857610100808354040283529160200191610b03565b820191906000526020600020905b815481529060010190602001808311610ae657829003601f168201915b505050505081565b6001600160a01b031660009081526003602052604090205490565b610b2e610c86565b610b3757600080fd5b600a546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600a80546001600160a01b0319169055565b610b8a33610a08565b610b9357600080fd5b6108668282611142565b610ba633610a21565b610baf57600080fd5b610a05816111f2565b610bc133610a21565b610bca57600080fd5b60075460ff1615610bda57600080fd5b6007805460ff191660011790556040805133815290517f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589181900360200190a1565b610c24610c86565b610c2d57600080fd5b600b80546001600160a01b0319166001600160a01b0383169081179091556040517fdd8c807c33d35ad7642d985aca3455e9281f5298b1c22a4aadb5a86d52df7ed190600090a250565b600a546001600160a01b031690565b600a546001600160a01b0316331490565b600b546001600160a01b031681565b60018054604080516020601f6002600019610100878916150201909516949094049384018190048102820181019092528281526060939092909183018282801561078a5780601f1061075f5761010080835404028352916020019161078a565b610d0f33610dc0565b610d1857600080fd5b610a058161123a565b610a7b33611282565b610d32610c86565b610d3b57600080fd5b6040513390303180156108fc02916000818181858888f19350505050158015610a05573d6000803e3d6000fd5b60075460009060ff1615610d7b57600080fd5b6107b183836112ca565b600033610d91816108dc565b610d9a57600080fd5b83610da4816108dc565b610dad57600080fd5b610db78585611313565b95945050505050565b6000610a1b60088363ffffffff6110c516565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205490565b610a7b33611330565b610e0f610c86565b610e1857600080fd5b610a0581611378565b610e2a33610a08565b610e3357600080fd5b610a05816113e7565b60006001600160a01b038316610e5157600080fd5b3360008181526004602090815260408083206001600160a01b0388168085529083529281902086905580518681529051929392600080516020611722833981519152929181900390910190a350600192915050565b826001600160a01b031663a9059cbb83836040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610f0657600080fd5b505af1158015610f1a573d6000803e3d6000fd5b505050506040513d6020811015610f3057600080fd5b5051610a6d57600080fd5b60075460009060ff1615610f4e57600080fd5b6109e184848461142f565b60006001600160a01b038316610f6e57600080fd5b3360009081526004602090815260408083206001600160a01b0387168452909152902054610fa2908363ffffffff6114e616565b3360008181526004602090815260408083206001600160a01b038916808552908352928190208590558051948552519193600080516020611722833981519152929081900390910190a350600192915050565b600061100033610dc0565b61100957600080fd5b61101383836114f8565b50600192915050565b6001600160a01b03821661102f57600080fd5b600554611042908263ffffffff6115a216565b6005556001600160a01b03821660009081526003602052604090205461106e908263ffffffff6115a216565b6001600160a01b0383166000818152600360209081526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050565b60006001600160a01b0382166110da57600080fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b61110b60068263ffffffff6115b716565b6040516001600160a01b038216907fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90600090a250565b6001600160a01b0382166000908152600460209081526040808320338452909152902054611176908263ffffffff6115a216565b6001600160a01b03831660009081526004602090815260408083203384529091529020556111a4828261101c565b6001600160a01b038216600081815260046020908152604080832033808552908352928190205481519081529051929392600080516020611722833981519152929181900390910190a35050565b61120360068263ffffffff6115ff16565b6040516001600160a01b038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b61124b60088263ffffffff6115ff16565b6040516001600160a01b038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b61129360088263ffffffff6115b716565b6040516001600160a01b038216907fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b60006001600160a01b0383166112df57600080fd5b3360009081526004602090815260408083206001600160a01b0387168452909152902054610fa2908363ffffffff6115a216565b60075460009060ff161561132657600080fd5b6107b1838361164b565b61134160098263ffffffff6115b716565b6040516001600160a01b038216907f90eabbc0c667db2a5029ed6bc0f5fe9f356d11684a4ca9fcfaec0e53f12b9c8e90600090a250565b6001600160a01b03811661138b57600080fd5b600a546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6113f860098263ffffffff6115ff16565b6040516001600160a01b038216907f86e57fd2b90329052917118de7c3f521f400d439b9650deaa906a25b08b9456090600090a250565b6001600160a01b0383166000908152600460209081526040808320338452909152812054611463908363ffffffff6115a216565b6001600160a01b0385166000908152600460209081526040808320338452909152902055611492848484611654565b6001600160a01b038416600081815260046020908152604080832033808552908352928190205481519081529051929392600080516020611722833981519152929181900390910190a35060019392505050565b6000828201838110156107b157600080fd5b6001600160a01b03821661150b57600080fd5b60055461151e908263ffffffff6114e616565b6005556001600160a01b03821660009081526003602052604090205461154a908263ffffffff6114e616565b6001600160a01b03831660008181526003602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000828211156115b157600080fd5b50900390565b6001600160a01b0381166115ca57600080fd5b6115d482826110c5565b6115dd57600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19169055565b6001600160a01b03811661161257600080fd5b61161c82826110c5565b1561162657600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b60006110133384845b6001600160a01b03821661166757600080fd5b6001600160a01b038316600090815260036020526040902054611690908263ffffffff6115a216565b6001600160a01b0380851660009081526003602052604080822093909355908416815220546116c5908263ffffffff6114e616565b6001600160a01b0380841660008181526003602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a350505056fe8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a165627a7a723058204df32f441deb587a6e718876561d9064a77cb519e91db4469adf92e2a6b888240029000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000172031582053686f727420426974636f696e20546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000005484544474500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034254430000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000172031582053686f727420426974636f696e20546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000005484544474500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034254430000000000000000000000000000000000000000000000000000000000"
}