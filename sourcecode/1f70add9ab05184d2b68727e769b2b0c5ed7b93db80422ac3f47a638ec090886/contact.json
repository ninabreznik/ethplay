{
  "address": "0x6e7a61fbe11873f4c7d0983c79683aad5c0788bd",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "QRBitCoin",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-11\n*/\n\npragma solidity ^0.4.25;\n\n/**\n * @title QR BitCoin in ERC20\n */\ncontract ERC20 {\n   \n    //functions\n    function balanceOf(address _owner) external view returns (uint256);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transfer(address _to, uint256 _value, bytes _data) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n    function approve(address _spender, uint256 _value) external returns (bool success);\n    function allowance(address _owner, address _spender) external constant returns (uint256 remaining);\n    function name() external constant returns  (string _name);\n    function symbol() external constant returns  (string _symbol);\n    function decimals() external constant returns (uint8 _decimals);\n    function totalSupply() external constant returns (uint256 _totalSupply);\n   \n    //Events\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event ERC223Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n    event Burn(address indexed burner, uint256 value);\n    event FrozenAccount(address indexed targets);\n    event UnfrozenAccount(address indexed target);\n    event LockedAccount(address indexed target, uint256 locked);\n    event UnlockedAccount(address indexed target);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract ERC20Receive {\n\n    TKN internal fallback;\n\n    struct TKN {\n        address sender;\n        uint value;\n        bytes data;\n        bytes4 sig;\n    }\n\n    function tokenFallback(address _from, uint256 _value, bytes _data) public pure {\n        TKN memory tkn;\n        tkn.sender = _from;\n        tkn.value = _value;\n        tkn.data = _data;\n        uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n        tkn.sig = bytes4(u);\n\n       \n    }\n}\n\ncontract Ownable {\n    \n    address public owner;\n\n    event OwnershipRenounced(address indexed previousOwner);\n    event OwnershipTransferred(address indexed previousOwner,address indexed newOwner);\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipRenounced(owner);\n        owner = address(0);\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        _transferOwnership(_newOwner);\n    }\n\n    function _transferOwnership(address _newOwner) internal {\n        require(_newOwner != address(0));\n        emit OwnershipTransferred(owner, _newOwner);\n        owner = _newOwner;\n    }\n}\n\n\n/**\n * @title QR BitCoin Main\n */\ncontract QRBitCoin is ERC20, Ownable {\n\n    using SafeMath for uint;\n    string public name = \"QR BitCoin\";\n    string public symbol = \"QRBC\";\n    uint8 public decimals = 8;\n    uint256 public totalSupply = 15300000000 * (10 ** uint256(decimals));\n\n    \n    mapping (address => bool) public frozenAccount;\n    mapping (address => uint256) public unlockUnixTime;\n\n    constructor() public {\n        balances[msg.sender] = totalSupply;\n    }\n\n    mapping (address => uint256) public balances;\n\n    mapping(address => mapping (address => uint256)) public allowance;\n\n   \n    function name() external constant returns (string _name) {\n        return name;\n    }\n   \n    function symbol() external constant returns (string _symbol) {\n        return symbol;\n    }\n   \n    function decimals() external constant returns (uint8 _decimals) {\n        return decimals;\n    }\n   \n    function totalSupply() external constant returns (uint256 _totalSupply) {\n        return totalSupply;\n    }\n\n   \n    function balanceOf(address _owner) external view returns (uint256 balance) {\n        return balances[_owner];\n    }\n   \n    function transfer(address _to, uint _value) public returns (bool success) {\n        require(_value > 0\n                && frozenAccount[msg.sender] == false\n                && frozenAccount[_to] == false\n                && now > unlockUnixTime[msg.sender]\n                && now > unlockUnixTime[_to]\n                && _to != address(this));\n        bytes memory empty = hex\"00000000\";\n        if (isContract(_to)) {\n            return transferToContract(_to, _value, empty);\n        } else {\n            return transferToAddress(_to, _value, empty);\n        }\n    }\n\n    function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\n        require(_value > 0\n                && frozenAccount[msg.sender] == false\n                && frozenAccount[_to] == false\n                && now > unlockUnixTime[msg.sender]\n                && now > unlockUnixTime[_to]\n                && _to != address(this));\n        if (isContract(_to)) {\n            return transferToContract(_to, _value, _data);\n        } else {\n            return transferToAddress(_to, _value, _data);\n        }\n    }\n\n    function isContract(address _addr) private view returns (bool is_contract) {\n        uint length;\n        assembly {\n            //retrieve the size of the code on target address, this needs assembly\n            length := extcodesize(_addr)\n        }\n        return (length > 0);\n    }\n   \n    function approve(address _spender, uint256 _value) external returns (bool success) {\n        allowance[msg.sender][_spender] = 0; // mitigate the race condition\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    \n    function allowance(address _owner, address _spender) external constant returns (uint256 remaining) {\n        return allowance[_owner][_spender];\n    }\n\n\n    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit ERC223Transfer(msg.sender, _to, _value, _data);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        ERC20Receive receiver = ERC20Receive(_to);\n        receiver.tokenFallback(msg.sender, _value, _data);\n        emit ERC223Transfer(msg.sender, _to, _value, _data);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n    \n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success) {\n        require(_to != address(0)\n                && _value > 0\n                && balances[_from] >= _value\n                && allowance[_from][msg.sender] >= _value\n                && frozenAccount[_from] == false\n                && frozenAccount[_to] == false\n                && now > unlockUnixTime[_from]\n                && now > unlockUnixTime[_to]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n  \n    \n    function multiTransfer(address[] _addresses, uint256 _amount) public returns (bool) {\n        require(_amount > 0\n                && _addresses.length > 0\n                && frozenAccount[msg.sender] == false\n                && now > unlockUnixTime[msg.sender]);\n\n        uint256 totalAmount = _amount.mul(_addresses.length);\n        require(balances[msg.sender] >= totalAmount);\n\n        for (uint j = 0; j < _addresses.length; j++) {\n            require(_addresses[j] != 0x0\n                    && frozenAccount[_addresses[j]] == false\n                    && now > unlockUnixTime[_addresses[j]]);\n                    \n            balances[msg.sender] = balances[msg.sender].sub(_amount);\n            balances[_addresses[j]] = balances[_addresses[j]].add(_amount);\n            emit Transfer(msg.sender, _addresses[j], _amount);\n        }\n        return true;\n    }\n\n    function multiTransfer(address[] _addresses, uint256[] _amounts) public returns (bool) {\n        require(_addresses.length > 0\n                && _addresses.length == _amounts.length\n                && frozenAccount[msg.sender] == false\n                && now > unlockUnixTime[msg.sender]);\n\n        uint256 totalAmount = 0;\n\n        for(uint j = 0; j < _addresses.length; j++){\n            require(_amounts[j] > 0\n                    && _addresses[j] != 0x0\n                    && frozenAccount[_addresses[j]] == false\n                    && now > unlockUnixTime[_addresses[j]]);\n\n            totalAmount = totalAmount.add(_amounts[j]);\n        }\n        require(balances[msg.sender] >= totalAmount);\n\n        for (j = 0; j < _addresses.length; j++) {\n            balances[msg.sender] = balances[msg.sender].sub(_amounts[j]);\n            balances[_addresses[j]] = balances[_addresses[j]].add(_amounts[j]);\n            emit Transfer(msg.sender, _addresses[j], _amounts[j]);\n        }\n        return true;\n    }\n\n    function burn(address _from, uint256 _tokenAmount) onlyOwner public {\n        require(_tokenAmount > 0\n                && balances[_from] >= _tokenAmount);\n        \n        balances[_from] = balances[_from].sub(_tokenAmount);\n        totalSupply = totalSupply.sub(_tokenAmount);\n        emit Burn(_from, _tokenAmount);\n    }\n        \n    function freezeAccounts(address[] _targets) onlyOwner public {\n        require(_targets.length > 0);\n\n        for (uint j = 0; j < _targets.length; j++) {\n            require(_targets[j] != 0x0 && _targets[j] != Ownable.owner);\n            frozenAccount[_targets[j]] = true;\n            emit FrozenAccount(_targets[j]);\n        }\n    }\n    \n    \n    function unfreezeAccounts(address[] _targets) onlyOwner public {\n        require(_targets.length > 0);\n\n        for (uint j = 0; j < _targets.length; j++) {\n            require(_targets[j] != 0x0 && _targets[j] != Ownable.owner);\n            frozenAccount[_targets[j]] = false;\n            emit UnfrozenAccount(_targets[j]);\n        }\n    }\n    \n   \n    function lockAccounts(address[] _targets, uint[] _unixTimes) onlyOwner public {\n        require(_targets.length > 0\n                && _targets.length == _unixTimes.length);\n\n        for(uint j = 0; j < _targets.length; j++){\n            require(_targets[j] != Ownable.owner);\n            require(unlockUnixTime[_targets[j]] < _unixTimes[j]);\n            unlockUnixTime[_targets[j]] = _unixTimes[j];\n            emit LockedAccount(_targets[j], _unixTimes[j]);\n        }\n    }\n\n    function unlockAccounts(address[] _targets) onlyOwner public {\n        require(_targets.length > 0);\n         \n        for(uint j = 0; j < _targets.length; j++){\n            unlockUnixTime[_targets[j]] = 0;\n            emit UnlockedAccount(_targets[j]);\n        }\n    }\n    \n    \n\n}",
  "bytecode": ""
}