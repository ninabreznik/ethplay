{
  "address": "0x9b00fc5dc3bc5f6e6d016c19512d6d96767e319e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CryptantCrabPresale",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-25\n*/\n\npragma solidity 0.4.24;\n\ncontract CrabData {\n  modifier crabDataLength(uint256[] memory _crabData) {\n    require(_crabData.length == 8);\n    _;\n  }\n\n  struct CrabPartData {\n    uint256 hp;\n    uint256 dps;\n    uint256 blockRate;\n    uint256 resistanceBonus;\n    uint256 hpBonus;\n    uint256 dpsBonus;\n    uint256 blockBonus;\n    uint256 mutiplierBonus;\n  }\n\n  function arrayToCrabPartData(\n    uint256[] _partData\n  ) \n    internal \n    pure \n    crabDataLength(_partData) \n    returns (CrabPartData memory _parsedData) \n  {\n    _parsedData = CrabPartData(\n      _partData[0],   // hp\n      _partData[1],   // dps\n      _partData[2],   // block rate\n      _partData[3],   // resistance bonus\n      _partData[4],   // hp bonus\n      _partData[5],   // dps bonus\n      _partData[6],   // block bonus\n      _partData[7]);  // multiplier bonus\n  }\n\n  function crabPartDataToArray(CrabPartData _crabPartData) internal pure returns (uint256[] memory _resultData) {\n    _resultData = new uint256[](8);\n    _resultData[0] = _crabPartData.hp;\n    _resultData[1] = _crabPartData.dps;\n    _resultData[2] = _crabPartData.blockRate;\n    _resultData[3] = _crabPartData.resistanceBonus;\n    _resultData[4] = _crabPartData.hpBonus;\n    _resultData[5] = _crabPartData.dpsBonus;\n    _resultData[6] = _crabPartData.blockBonus;\n    _resultData[7] = _crabPartData.mutiplierBonus;\n  }\n}\n\ncontract GeneSurgeon {\n  //0 - filler, 1 - body, 2 - leg, 3 - left claw, 4 - right claw\n  uint256[] internal crabPartMultiplier = [0, 10**9, 10**6, 10**3, 1];\n\n  function extractElementsFromGene(uint256 _gene) internal view returns (uint256[] memory _elements) {\n    _elements = new uint256[](4);\n    _elements[0] = _gene / crabPartMultiplier[1] / 100 % 10;\n    _elements[1] = _gene / crabPartMultiplier[2] / 100 % 10;\n    _elements[2] = _gene / crabPartMultiplier[3] / 100 % 10;\n    _elements[3] = _gene / crabPartMultiplier[4] / 100 % 10;\n  }\n\n  function extractPartsFromGene(uint256 _gene) internal view returns (uint256[] memory _parts) {\n    _parts = new uint256[](4);\n    _parts[0] = _gene / crabPartMultiplier[1] % 100;\n    _parts[1] = _gene / crabPartMultiplier[2] % 100;\n    _parts[2] = _gene / crabPartMultiplier[3] % 100;\n    _parts[3] = _gene / crabPartMultiplier[4] % 100;\n  }\n}\n\ninterface GenesisCrabInterface {\n  function generateCrabGene(bool isPresale, bool hasLegendaryPart) external returns (uint256 _gene, uint256 _skin, uint256 _heartValue, uint256 _growthValue);\n  function mutateCrabPart(uint256 _part, uint256 _existingPartGene, uint256 _legendaryPercentage) external view returns (uint256);\n  function generateCrabHeart() external view returns (uint256, uint256);\n}\n\ncontract Randomable {\n  // Generates a random number base on last block hash\n  function _generateRandom(bytes32 seed) view internal returns (bytes32) {\n    return keccak256(abi.encodePacked(blockhash(block.number-1), seed));\n  }\n\n  function _generateRandomNumber(bytes32 seed, uint256 max) view internal returns (uint256) {\n    return uint256(_generateRandom(seed)) % max;\n  }\n}\n\ncontract CryptantCrabStoreInterface {\n  function createAddress(bytes32 key, address value) external returns (bool);\n  function createAddresses(bytes32[] keys, address[] values) external returns (bool);\n  function updateAddress(bytes32 key, address value) external returns (bool);\n  function updateAddresses(bytes32[] keys, address[] values) external returns (bool);\n  function removeAddress(bytes32 key) external returns (bool);\n  function removeAddresses(bytes32[] keys) external returns (bool);\n  function readAddress(bytes32 key) external view returns (address);\n  function readAddresses(bytes32[] keys) external view returns (address[]);\n  // Bool related functions\n  function createBool(bytes32 key, bool value) external returns (bool);\n  function createBools(bytes32[] keys, bool[] values) external returns (bool);\n  function updateBool(bytes32 key, bool value) external returns (bool);\n  function updateBools(bytes32[] keys, bool[] values) external returns (bool);\n  function removeBool(bytes32 key) external returns (bool);\n  function removeBools(bytes32[] keys) external returns (bool);\n  function readBool(bytes32 key) external view returns (bool);\n  function readBools(bytes32[] keys) external view returns (bool[]);\n  // Bytes32 related functions\n  function createBytes32(bytes32 key, bytes32 value) external returns (bool);\n  function createBytes32s(bytes32[] keys, bytes32[] values) external returns (bool);\n  function updateBytes32(bytes32 key, bytes32 value) external returns (bool);\n  function updateBytes32s(bytes32[] keys, bytes32[] values) external returns (bool);\n  function removeBytes32(bytes32 key) external returns (bool);\n  function removeBytes32s(bytes32[] keys) external returns (bool);\n  function readBytes32(bytes32 key) external view returns (bytes32);\n  function readBytes32s(bytes32[] keys) external view returns (bytes32[]);\n  // uint256 related functions\n  function createUint256(bytes32 key, uint256 value) external returns (bool);\n  function createUint256s(bytes32[] keys, uint256[] values) external returns (bool);\n  function updateUint256(bytes32 key, uint256 value) external returns (bool);\n  function updateUint256s(bytes32[] keys, uint256[] values) external returns (bool);\n  function removeUint256(bytes32 key) external returns (bool);\n  function removeUint256s(bytes32[] keys) external returns (bool);\n  function readUint256(bytes32 key) external view returns (uint256);\n  function readUint256s(bytes32[] keys) external view returns (uint256[]);\n  // int256 related functions\n  function createInt256(bytes32 key, int256 value) external returns (bool);\n  function createInt256s(bytes32[] keys, int256[] values) external returns (bool);\n  function updateInt256(bytes32 key, int256 value) external returns (bool);\n  function updateInt256s(bytes32[] keys, int256[] values) external returns (bool);\n  function removeInt256(bytes32 key) external returns (bool);\n  function removeInt256s(bytes32[] keys) external returns (bool);\n  function readInt256(bytes32 key) external view returns (int256);\n  function readInt256s(bytes32[] keys) external view returns (int256[]);\n  // internal functions\n  function parseKey(bytes32 key) internal pure returns (bytes32);\n  function parseKeys(bytes32[] _keys) internal pure returns (bytes32[]);\n}\n\nlibrary AddressUtils {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   * as the code is not actually created until after the constructor finishes.\n   * @param addr address to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address addr) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(addr) }\n    return size > 0;\n  }\n\n}\n\ninterface ERC165 {\n\n  /**\n   * @notice Query if a contract implements an interface\n   * @param _interfaceId The interface identifier, as specified in ERC-165\n   * @dev Interface identification is specified in ERC-165. This function\n   * uses less than 30,000 gas.\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool);\n}\n\ncontract SupportsInterfaceWithLookup is ERC165 {\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\n  /**\n   * 0x01ffc9a7 ===\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\n   */\n\n  /**\n   * @dev a mapping of interface id to whether or not it's supported\n   */\n  mapping(bytes4 => bool) internal supportedInterfaces;\n\n  /**\n   * @dev A contract implementing SupportsInterfaceWithLookup\n   * implement ERC165 itself\n   */\n  constructor()\n    public\n  {\n    _registerInterface(InterfaceId_ERC165);\n  }\n\n  /**\n   * @dev implement supportsInterface(bytes4) using a lookup table\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool)\n  {\n    return supportedInterfaces[_interfaceId];\n  }\n\n  /**\n   * @dev private method for registering an interface\n   */\n  function _registerInterface(bytes4 _interfaceId)\n    internal\n  {\n    require(_interfaceId != 0xffffffff);\n    supportedInterfaces[_interfaceId] = true;\n  }\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\ncontract CryptantCrabBase is Ownable {\n  GenesisCrabInterface public genesisCrab;\n  CryptantCrabNFT public cryptantCrabToken;\n  CryptantCrabStoreInterface public cryptantCrabStorage;\n\n  constructor(address _genesisCrabAddress, address _cryptantCrabTokenAddress, address _cryptantCrabStorageAddress) public {\n    // constructor\n    \n    _setAddresses(_genesisCrabAddress, _cryptantCrabTokenAddress, _cryptantCrabStorageAddress);\n  }\n\n  function setAddresses(\n    address _genesisCrabAddress, \n    address _cryptantCrabTokenAddress, \n    address _cryptantCrabStorageAddress\n  ) \n  external onlyOwner {\n    _setAddresses(_genesisCrabAddress, _cryptantCrabTokenAddress, _cryptantCrabStorageAddress);\n  }\n\n  function _setAddresses(\n    address _genesisCrabAddress,\n    address _cryptantCrabTokenAddress,\n    address _cryptantCrabStorageAddress\n  )\n  internal \n  {\n    if(_genesisCrabAddress != address(0)) {\n      GenesisCrabInterface genesisCrabContract = GenesisCrabInterface(_genesisCrabAddress);\n      genesisCrab = genesisCrabContract;\n    }\n    \n    if(_cryptantCrabTokenAddress != address(0)) {\n      CryptantCrabNFT cryptantCrabTokenContract = CryptantCrabNFT(_cryptantCrabTokenAddress);\n      cryptantCrabToken = cryptantCrabTokenContract;\n    }\n    \n    if(_cryptantCrabStorageAddress != address(0)) {\n      CryptantCrabStoreInterface cryptantCrabStorageContract = CryptantCrabStoreInterface(_cryptantCrabStorageAddress);\n      cryptantCrabStorage = cryptantCrabStorageContract;\n    }\n  }\n}\n\ncontract CryptantCrabInformant is CryptantCrabBase{\n  constructor\n  (\n    address _genesisCrabAddress, \n    address _cryptantCrabTokenAddress, \n    address _cryptantCrabStorageAddress\n  ) \n  public \n  CryptantCrabBase\n  (\n    _genesisCrabAddress, \n    _cryptantCrabTokenAddress, \n    _cryptantCrabStorageAddress\n  ) {\n    // constructor\n\n  }\n\n  function _getCrabData(uint256 _tokenId) internal view returns \n  (\n    uint256 _gene, \n    uint256 _level, \n    uint256 _exp, \n    uint256 _mutationCount,\n    uint256 _trophyCount,\n    uint256 _heartValue,\n    uint256 _growthValue\n  ) {\n    require(cryptantCrabStorage != address(0));\n\n    bytes32[] memory keys = new bytes32[](7);\n    uint256[] memory values;\n\n    keys[0] = keccak256(abi.encodePacked(_tokenId, \"gene\"));\n    keys[1] = keccak256(abi.encodePacked(_tokenId, \"level\"));\n    keys[2] = keccak256(abi.encodePacked(_tokenId, \"exp\"));\n    keys[3] = keccak256(abi.encodePacked(_tokenId, \"mutationCount\"));\n    keys[4] = keccak256(abi.encodePacked(_tokenId, \"trophyCount\"));\n    keys[5] = keccak256(abi.encodePacked(_tokenId, \"heartValue\"));\n    keys[6] = keccak256(abi.encodePacked(_tokenId, \"growthValue\"));\n\n    values = cryptantCrabStorage.readUint256s(keys);\n\n    // process heart value\n    uint256 _processedHeartValue;\n    for(uint256 i = 1 ; i <= 1000 ; i *= 10) {\n      if(uint256(values[5]) / i % 10 > 0) {\n        _processedHeartValue += i;\n      }\n    }\n\n    _gene = values[0];\n    _level = values[1];\n    _exp = values[2];\n    _mutationCount = values[3];\n    _trophyCount = values[4];\n    _heartValue = _processedHeartValue;\n    _growthValue = values[6];\n  }\n\n  function _geneOfCrab(uint256 _tokenId) internal view returns (uint256 _gene) {\n    require(cryptantCrabStorage != address(0));\n\n    _gene = cryptantCrabStorage.readUint256(keccak256(abi.encodePacked(_tokenId, \"gene\")));\n  }\n}\n\ncontract CryptantCrabPurchasable is CryptantCrabInformant {\n  using SafeMath for uint256;\n\n  event CrabHatched(address indexed owner, uint256 tokenId, uint256 gene, uint256 specialSkin, uint256 crabPrice, uint256 growthValue);\n  event CryptantFragmentsAdded(address indexed cryptantOwner, uint256 amount, uint256 newBalance);\n  event CryptantFragmentsRemoved(address indexed cryptantOwner, uint256 amount, uint256 newBalance);\n  event Refund(address indexed refundReceiver, uint256 reqAmt, uint256 paid, uint256 refundAmt);\n\n  constructor\n  (\n    address _genesisCrabAddress, \n    address _cryptantCrabTokenAddress, \n    address _cryptantCrabStorageAddress\n  ) \n  public \n  CryptantCrabInformant\n  (\n    _genesisCrabAddress, \n    _cryptantCrabTokenAddress, \n    _cryptantCrabStorageAddress\n  ) {\n    // constructor\n\n  }\n\n  function getCryptantFragments(address _sender) public view returns (uint256) {\n    return cryptantCrabStorage.readUint256(keccak256(abi.encodePacked(_sender, \"cryptant\")));\n  }\n\n  function createCrab(uint256 _customTokenId, uint256 _crabPrice, uint256 _customGene, uint256 _customSkin, uint256 _customHeart, bool _hasLegendary) external onlyOwner {\n    return _createCrab(false, _customTokenId, _crabPrice, _customGene, _customSkin, _customHeart, _hasLegendary);\n  }\n\n  function _addCryptantFragments(address _cryptantOwner, uint256 _amount) internal returns (uint256 _newBalance) {\n    _newBalance = getCryptantFragments(_cryptantOwner).add(_amount);\n    cryptantCrabStorage.updateUint256(keccak256(abi.encodePacked(_cryptantOwner, \"cryptant\")), _newBalance);\n    emit CryptantFragmentsAdded(_cryptantOwner, _amount, _newBalance);\n  }\n\n  function _removeCryptantFragments(address _cryptantOwner, uint256 _amount) internal returns (uint256 _newBalance) {\n    _newBalance = getCryptantFragments(_cryptantOwner).sub(_amount);\n    cryptantCrabStorage.updateUint256(keccak256(abi.encodePacked(_cryptantOwner, \"cryptant\")), _newBalance);\n    emit CryptantFragmentsRemoved(_cryptantOwner, _amount, _newBalance);\n  }\n\n  function _createCrab(bool _isPresale, uint256 _tokenId, uint256 _crabPrice, uint256 _customGene, uint256 _customSkin, uint256 _customHeart, bool _hasLegendary) internal {\n    uint256[] memory _values = new uint256[](4);\n    bytes32[] memory _keys = new bytes32[](4);\n\n    uint256 _gene;\n    uint256 _specialSkin;\n    uint256 _heartValue;\n    uint256 _growthValue;\n    if(_customGene == 0) {\n      (_gene, _specialSkin, _heartValue, _growthValue) = genesisCrab.generateCrabGene(_isPresale, _hasLegendary);\n    } else {\n      _gene = _customGene;\n    }\n\n    if(_customSkin != 0) {\n      _specialSkin = _customSkin;\n    }\n\n    if(_customHeart != 0) {\n      _heartValue = _customHeart;\n    } else if (_heartValue == 0) {\n      (_heartValue, _growthValue) = genesisCrab.generateCrabHeart();\n    }\n    \n    cryptantCrabToken.mintToken(msg.sender, _tokenId, _specialSkin);\n\n    // Gene pair\n    _keys[0] = keccak256(abi.encodePacked(_tokenId, \"gene\"));\n    _values[0] = _gene;\n\n    // Level pair\n    _keys[1] = keccak256(abi.encodePacked(_tokenId, \"level\"));\n    _values[1] = 1;\n\n    // Heart Value pair\n    _keys[2] = keccak256(abi.encodePacked(_tokenId, \"heartValue\"));\n    _values[2] = _heartValue;\n\n    // Growth Value pair\n    _keys[3] = keccak256(abi.encodePacked(_tokenId, \"growthValue\"));\n    _values[3] = _growthValue;\n\n    require(cryptantCrabStorage.createUint256s(_keys, _values));\n\n    emit CrabHatched(msg.sender, _tokenId, _gene, _specialSkin, _crabPrice, _growthValue);\n  }\n\n  function _refundExceededValue(uint256 _senderValue, uint256 _requiredValue) internal {\n    uint256 _exceededValue = _senderValue.sub(_requiredValue);\n\n    if(_exceededValue > 0) {\n      msg.sender.transfer(_exceededValue);\n\n      emit Refund(msg.sender, _requiredValue, _senderValue, _exceededValue);\n    } \n  }\n}\n\ncontract Withdrawable is Ownable {\n  address public withdrawer;\n\n  /**\n   * @dev Throws if called by any account other than the withdrawer.\n   */\n  modifier onlyWithdrawer() {\n    require(msg.sender == withdrawer);\n    _;\n  }\n\n  function setWithdrawer(address _newWithdrawer) external onlyOwner {\n    withdrawer = _newWithdrawer;\n  }\n\n  /**\n   * @dev withdraw the specified amount of ether from contract.\n   * @param _amount the amount of ether to withdraw. Units in wei.\n   */\n  function withdraw(uint256 _amount) external onlyWithdrawer returns(bool) {\n    require(_amount <= address(this).balance);\n    withdrawer.transfer(_amount);\n    return true;\n  }\n}\n\ncontract HasNoEther is Ownable {\n\n  /**\n  * @dev Constructor that rejects incoming Ether\n  * The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n  * we could use assembly to access msg.value.\n  */\n  constructor() public payable {\n    require(msg.value == 0);\n  }\n\n  /**\n   * @dev Disallows direct send by settings a default function without the `payable` flag.\n   */\n  function() external {\n  }\n\n  /**\n   * @dev Transfer all Ether held by the contract to the owner.\n   */\n  function reclaimEther() external onlyOwner {\n    owner.transfer(address(this).balance);\n  }\n}\n\ncontract CryptantCrabPresale is CryptantCrabPurchasable, HasNoEther, Withdrawable, Randomable {\n  event PresalePurchased(address indexed owner, uint256 amount, uint256 cryptant, uint256 refund);\n\n  uint256 constant public PRICE_INCREMENT = 1 finney;\n\n  uint256 constant public PRESALE_LIMIT = 5000;\n\n  uint256 constant public PRESALE_MAX_PRICE = 490 finney;\n\n  /**\n   * @dev Currently is set to 17/11/2018 00:00:00\n   */\n  uint256 public presaleEndTime = 1542412800;\n\n  /**\n   * @dev Initial presale price is 0.12 ether\n   */\n  uint256 public currentPresalePrice = 120 finney;\n\n  /**\n   * @dev The number of seconds that the presale price will stay fixed. \n   */\n  uint256 constant public presalePriceUpdatePeriod = 3600;\n\n  /**\n   * @dev Keep tracks on the presale price period.\n   *  initial period = (GMT): Thursday, October 25, 2018 12:00:00 AM\n   */\n  uint256 public currentPresalePeriod = 427896;\n\n  /** \n   * @dev tracks the current token id, starts from 10\n   */\n  uint256 public currentTokenId = 10;\n\n  /** \n   * @dev tracks the current giveaway token id, starts from 5001\n   */\n  uint256 public giveawayTokenId = 5001;\n\n  constructor\n  (\n    address _genesisCrabAddress, \n    address _cryptantCrabTokenAddress, \n    address _cryptantCrabStorageAddress\n  ) \n  public \n  CryptantCrabPurchasable\n  (\n    _genesisCrabAddress, \n    _cryptantCrabTokenAddress, \n    _cryptantCrabStorageAddress\n  ) {\n    // constructor\n\n  }\n\n  function setPresaleEndtime(uint256 _newEndTime) external onlyOwner {\n    presaleEndTime = _newEndTime;\n  }\n\n  function getPresalePrice() public returns (uint256) {\n    uint256 _currentPresalePeriod = now / presalePriceUpdatePeriod;\n\n    if(_currentPresalePeriod > currentPresalePeriod) {\n      // need to update current presale price\n      uint256 _periodDifference = _currentPresalePeriod - currentPresalePeriod;\n\n      uint256 _newPrice = PRICE_INCREMENT * _periodDifference;\n\n      if(_newPrice <= PRESALE_MAX_PRICE) {\n        currentPresalePrice += _newPrice;\n        currentPresalePeriod = _currentPresalePeriod;\n      } else {\n        if (currentPresalePrice != PRESALE_MAX_PRICE) {\n          currentPresalePrice = PRESALE_MAX_PRICE;\n          currentPresalePeriod = _currentPresalePeriod;\n        }\n      }\n\n      return currentPresalePrice;\n    } else {\n      return currentPresalePrice;\n    }\n  }\n\n  function purchase(uint256 _amount) external payable {\n    require(genesisCrab != address(0));\n    require(cryptantCrabToken != address(0));\n    require(cryptantCrabStorage != address(0));\n    require(_amount > 0 && _amount <= 10);\n    require(isPresale());\n    require(PRESALE_LIMIT >= currentTokenId + _amount);\n\n    uint256 _value = msg.value;\n    uint256 _currentPresalePrice = getPresalePrice();\n    uint256 _totalRequiredAmount = _currentPresalePrice * _amount;\n\n    require(_value >= _totalRequiredAmount);\n\n    // Purchase 10 crabs will have 1 crab with legendary part\n    // Default value for _crabWithLegendaryPart is just a unreacable number\n    uint256 _crabWithLegendaryPart = 100;\n    if(_amount == 10) {\n      // decide which crab will have the legendary part\n      _crabWithLegendaryPart = _generateRandomNumber(bytes32(currentTokenId), 10);\n    }\n\n    for(uint256 i = 0 ; i < _amount ; i++) {\n      currentTokenId++;\n      _createCrab(true, currentTokenId, _currentPresalePrice, 0, 0, 0, _crabWithLegendaryPart == i);\n    }\n\n    // Presale crab will get free cryptant fragments\n    _addCryptantFragments(msg.sender, (i * 3000));\n\n    // Refund exceeded value\n    _refundExceededValue(_value, _totalRequiredAmount);\n\n    emit PresalePurchased(msg.sender, _amount, i * 3000, _value - _totalRequiredAmount);\n  }\n\n  function createCrab(uint256 _customTokenId, uint256 _crabPrice, uint256 _customGene, uint256 _customSkin, uint256 _customHeart, bool _hasLegendary) external onlyOwner {\n    return _createCrab(true, _customTokenId, _crabPrice, _customGene, _customSkin, _customHeart, _hasLegendary);\n  }\n\n  function generateGiveawayCrabs(uint256 _amount) external onlyOwner {\n    for(uint256 i = 0 ; i < _amount ; i++) {\n      _createCrab(false, giveawayTokenId++, 120 finney, 0, 0, 0, false);\n    }\n  }\n\n  function isPresale() internal view returns (bool) {\n    return now < presaleEndTime;\n  }\n\n  function setCurrentPresalePeriod(uint256 _newPresalePeriod) external onlyOwner {\n    currentPresalePeriod = _newPresalePeriod;\n  }\n}\n\ncontract RBAC {\n  using Roles for Roles.Role;\n\n  mapping (string => Roles.Role) private roles;\n\n  event RoleAdded(address indexed operator, string role);\n  event RoleRemoved(address indexed operator, string role);\n\n  /**\n   * @dev reverts if addr does not have role\n   * @param _operator address\n   * @param _role the name of the role\n   * // reverts\n   */\n  function checkRole(address _operator, string _role)\n    view\n    public\n  {\n    roles[_role].check(_operator);\n  }\n\n  /**\n   * @dev determine if addr has role\n   * @param _operator address\n   * @param _role the name of the role\n   * @return bool\n   */\n  function hasRole(address _operator, string _role)\n    view\n    public\n    returns (bool)\n  {\n    return roles[_role].has(_operator);\n  }\n\n  /**\n   * @dev add a role to an address\n   * @param _operator address\n   * @param _role the name of the role\n   */\n  function addRole(address _operator, string _role)\n    internal\n  {\n    roles[_role].add(_operator);\n    emit RoleAdded(_operator, _role);\n  }\n\n  /**\n   * @dev remove a role from an address\n   * @param _operator address\n   * @param _role the name of the role\n   */\n  function removeRole(address _operator, string _role)\n    internal\n  {\n    roles[_role].remove(_operator);\n    emit RoleRemoved(_operator, _role);\n  }\n\n  /**\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\n   * @param _role the name of the role\n   * // reverts\n   */\n  modifier onlyRole(string _role)\n  {\n    checkRole(msg.sender, _role);\n    _;\n  }\n\n  /**\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\n   * @param _roles the names of the roles to scope access to\n   * // reverts\n   *\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\n   *  see: https://github.com/ethereum/solidity/issues/2467\n   */\n  // modifier onlyRoles(string[] _roles) {\n  //     bool hasAnyRole = false;\n  //     for (uint8 i = 0; i < _roles.length; i++) {\n  //         if (hasRole(msg.sender, _roles[i])) {\n  //             hasAnyRole = true;\n  //             break;\n  //         }\n  //     }\n\n  //     require(hasAnyRole);\n\n  //     _;\n  // }\n}\n\ncontract Whitelist is Ownable, RBAC {\n  string public constant ROLE_WHITELISTED = \"whitelist\";\n\n  /**\n   * @dev Throws if operator is not whitelisted.\n   * @param _operator address\n   */\n  modifier onlyIfWhitelisted(address _operator) {\n    checkRole(_operator, ROLE_WHITELISTED);\n    _;\n  }\n\n  /**\n   * @dev add an address to the whitelist\n   * @param _operator address\n   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n   */\n  function addAddressToWhitelist(address _operator)\n    onlyOwner\n    public\n  {\n    addRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev getter to determine if address is in whitelist\n   */\n  function whitelist(address _operator)\n    public\n    view\n    returns (bool)\n  {\n    return hasRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev add addresses to the whitelist\n   * @param _operators addresses\n   * @return true if at least one address was added to the whitelist,\n   * false if all addresses were already in the whitelist\n   */\n  function addAddressesToWhitelist(address[] _operators)\n    onlyOwner\n    public\n  {\n    for (uint256 i = 0; i < _operators.length; i++) {\n      addAddressToWhitelist(_operators[i]);\n    }\n  }\n\n  /**\n   * @dev remove an address from the whitelist\n   * @param _operator address\n   * @return true if the address was removed from the whitelist,\n   * false if the address wasn't in the whitelist in the first place\n   */\n  function removeAddressFromWhitelist(address _operator)\n    onlyOwner\n    public\n  {\n    removeRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev remove addresses from the whitelist\n   * @param _operators addresses\n   * @return true if at least one address was removed from the whitelist,\n   * false if all addresses weren't in the whitelist in the first place\n   */\n  function removeAddressesFromWhitelist(address[] _operators)\n    onlyOwner\n    public\n  {\n    for (uint256 i = 0; i < _operators.length; i++) {\n      removeAddressFromWhitelist(_operators[i]);\n    }\n  }\n\n}\n\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an address access to this role\n   */\n  function add(Role storage role, address addr)\n    internal\n  {\n    role.bearer[addr] = true;\n  }\n\n  /**\n   * @dev remove an address' access to this role\n   */\n  function remove(Role storage role, address addr)\n    internal\n  {\n    role.bearer[addr] = false;\n  }\n\n  /**\n   * @dev check if an address has this role\n   * // reverts\n   */\n  function check(Role storage role, address addr)\n    view\n    internal\n  {\n    require(has(role, addr));\n  }\n\n  /**\n   * @dev check if an address has this role\n   * @return bool\n   */\n  function has(Role storage role, address addr)\n    view\n    internal\n    returns (bool)\n  {\n    return role.bearer[addr];\n  }\n}\n\ncontract ERC721Basic is ERC165 {\n  event Transfer(\n    address indexed _from,\n    address indexed _to,\n    uint256 indexed _tokenId\n  );\n  event Approval(\n    address indexed _owner,\n    address indexed _approved,\n    uint256 indexed _tokenId\n  );\n  event ApprovalForAll(\n    address indexed _owner,\n    address indexed _operator,\n    bool _approved\n  );\n\n  function balanceOf(address _owner) public view returns (uint256 _balance);\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n  function exists(uint256 _tokenId) public view returns (bool _exists);\n\n  function approve(address _to, uint256 _tokenId) public;\n  function getApproved(uint256 _tokenId)\n    public view returns (address _operator);\n\n  function setApprovalForAll(address _operator, bool _approved) public;\n  function isApprovedForAll(address _owner, address _operator)\n    public view returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\n    public;\n\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public;\n}\n\ncontract ERC721Enumerable is ERC721Basic {\n  function totalSupply() public view returns (uint256);\n  function tokenOfOwnerByIndex(\n    address _owner,\n    uint256 _index\n  )\n    public\n    view\n    returns (uint256 _tokenId);\n\n  function tokenByIndex(uint256 _index) public view returns (uint256);\n}\n\ncontract ERC721Metadata is ERC721Basic {\n  function name() external view returns (string _name);\n  function symbol() external view returns (string _symbol);\n  function tokenURI(uint256 _tokenId) public view returns (string);\n}\n\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n}\n\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\n\n  bytes4 private constant InterfaceId_ERC721 = 0x80ac58cd;\n  /*\n   * 0x80ac58cd ===\n   *   bytes4(keccak256('balanceOf(address)')) ^\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\n   *   bytes4(keccak256('approve(address,uint256)')) ^\n   *   bytes4(keccak256('getApproved(uint256)')) ^\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n   */\n\n  bytes4 private constant InterfaceId_ERC721Exists = 0x4f558e79;\n  /*\n   * 0x4f558e79 ===\n   *   bytes4(keccak256('exists(uint256)'))\n   */\n\n  using SafeMath for uint256;\n  using AddressUtils for address;\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n\n  // Mapping from token ID to owner\n  mapping (uint256 => address) internal tokenOwner;\n\n  // Mapping from token ID to approved address\n  mapping (uint256 => address) internal tokenApprovals;\n\n  // Mapping from owner to number of owned token\n  mapping (address => uint256) internal ownedTokensCount;\n\n  // Mapping from owner to operator approvals\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\n\n  /**\n   * @dev Guarantees msg.sender is owner of the given token\n   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n   */\n  modifier onlyOwnerOf(uint256 _tokenId) {\n    require(ownerOf(_tokenId) == msg.sender);\n    _;\n  }\n\n  /**\n   * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\n   * @param _tokenId uint256 ID of the token to validate\n   */\n  modifier canTransfer(uint256 _tokenId) {\n    require(isApprovedOrOwner(msg.sender, _tokenId));\n    _;\n  }\n\n  constructor()\n    public\n  {\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(InterfaceId_ERC721);\n    _registerInterface(InterfaceId_ERC721Exists);\n  }\n\n  /**\n   * @dev Gets the balance of the specified address\n   * @param _owner address to query the balance of\n   * @return uint256 representing the amount owned by the passed address\n   */\n  function balanceOf(address _owner) public view returns (uint256) {\n    require(_owner != address(0));\n    return ownedTokensCount[_owner];\n  }\n\n  /**\n   * @dev Gets the owner of the specified token ID\n   * @param _tokenId uint256 ID of the token to query the owner of\n   * @return owner address currently marked as the owner of the given token ID\n   */\n  function ownerOf(uint256 _tokenId) public view returns (address) {\n    address owner = tokenOwner[_tokenId];\n    require(owner != address(0));\n    return owner;\n  }\n\n  /**\n   * @dev Returns whether the specified token exists\n   * @param _tokenId uint256 ID of the token to query the existence of\n   * @return whether the token exists\n   */\n  function exists(uint256 _tokenId) public view returns (bool) {\n    address owner = tokenOwner[_tokenId];\n    return owner != address(0);\n  }\n\n  /**\n   * @dev Approves another address to transfer the given token ID\n   * The zero address indicates there is no approved address.\n   * There can only be one approved address per token at a given time.\n   * Can only be called by the token owner or an approved operator.\n   * @param _to address to be approved for the given token ID\n   * @param _tokenId uint256 ID of the token to be approved\n   */\n  function approve(address _to, uint256 _tokenId) public {\n    address owner = ownerOf(_tokenId);\n    require(_to != owner);\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n    tokenApprovals[_tokenId] = _to;\n    emit Approval(owner, _to, _tokenId);\n  }\n\n  /**\n   * @dev Gets the approved address for a token ID, or zero if no address set\n   * @param _tokenId uint256 ID of the token to query the approval of\n   * @return address currently approved for the given token ID\n   */\n  function getApproved(uint256 _tokenId) public view returns (address) {\n    return tokenApprovals[_tokenId];\n  }\n\n  /**\n   * @dev Sets or unsets the approval of a given operator\n   * An operator is allowed to transfer all tokens of the sender on their behalf\n   * @param _to operator address to set the approval\n   * @param _approved representing the status of the approval to be set\n   */\n  function setApprovalForAll(address _to, bool _approved) public {\n    require(_to != msg.sender);\n    operatorApprovals[msg.sender][_to] = _approved;\n    emit ApprovalForAll(msg.sender, _to, _approved);\n  }\n\n  /**\n   * @dev Tells whether an operator is approved by a given owner\n   * @param _owner owner address which you want to query the approval of\n   * @param _operator operator address which you want to query the approval of\n   * @return bool whether the given operator is approved by the given owner\n   */\n  function isApprovedForAll(\n    address _owner,\n    address _operator\n  )\n    public\n    view\n    returns (bool)\n  {\n    return operatorApprovals[_owner][_operator];\n  }\n\n  /**\n   * @dev Transfers the ownership of a given token ID to another address\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    public\n    canTransfer(_tokenId)\n  {\n    require(_from != address(0));\n    require(_to != address(0));\n\n    clearApproval(_from, _tokenId);\n    removeTokenFrom(_from, _tokenId);\n    addTokenTo(_to, _tokenId);\n\n    emit Transfer(_from, _to, _tokenId);\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   *\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    public\n    canTransfer(_tokenId)\n  {\n    // solium-disable-next-line arg-overflow\n    safeTransferFrom(_from, _to, _tokenId, \"\");\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes data to send along with a safe transfer check\n   */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public\n    canTransfer(_tokenId)\n  {\n    transferFrom(_from, _to, _tokenId);\n    // solium-disable-next-line arg-overflow\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n  }\n\n  /**\n   * @dev Returns whether the given spender can transfer a given token ID\n   * @param _spender address of the spender to query\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @return bool whether the msg.sender is approved for the given token ID,\n   *  is an operator of the owner, or is the owner of the token\n   */\n  function isApprovedOrOwner(\n    address _spender,\n    uint256 _tokenId\n  )\n    internal\n    view\n    returns (bool)\n  {\n    address owner = ownerOf(_tokenId);\n    // Disable solium check because of\n    // https://github.com/duaraghav8/Solium/issues/175\n    // solium-disable-next-line operator-whitespace\n    return (\n      _spender == owner ||\n      getApproved(_tokenId) == _spender ||\n      isApprovedForAll(owner, _spender)\n    );\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param _to The address that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    require(_to != address(0));\n    addTokenTo(_to, _tokenId);\n    emit Transfer(address(0), _to, _tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    clearApproval(_owner, _tokenId);\n    removeTokenFrom(_owner, _tokenId);\n    emit Transfer(_owner, address(0), _tokenId);\n  }\n\n  /**\n   * @dev Internal function to clear current approval of a given token ID\n   * Reverts if the given address is not indeed the owner of the token\n   * @param _owner owner of the token\n   * @param _tokenId uint256 ID of the token to be transferred\n   */\n  function clearApproval(address _owner, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _owner);\n    if (tokenApprovals[_tokenId] != address(0)) {\n      tokenApprovals[_tokenId] = address(0);\n    }\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    require(tokenOwner[_tokenId] == address(0));\n    tokenOwner[_tokenId] = _to;\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _from);\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n    tokenOwner[_tokenId] = address(0);\n  }\n\n  /**\n   * @dev Internal function to invoke `onERC721Received` on a target address\n   * The call is not executed if the target address is not a contract\n   * @param _from address representing the previous owner of the given token ID\n   * @param _to target address that will receive the tokens\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes optional data to send along with the call\n   * @return whether the call correctly returned the expected magic value\n   */\n  function checkAndCallSafeTransfer(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    internal\n    returns (bool)\n  {\n    if (!_to.isContract()) {\n      return true;\n    }\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\n      msg.sender, _from, _tokenId, _data);\n    return (retval == ERC721_RECEIVED);\n  }\n}\n\ncontract ERC721Receiver {\n  /**\n   * @dev Magic value to be returned upon successful reception of an NFT\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n   */\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\n\n  /**\n   * @notice Handle the receipt of an NFT\n   * @dev The ERC721 smart contract calls this function on the recipient\n   * after a `safetransfer`. This function MAY throw to revert and reject the\n   * transfer. Return of other than the magic value MUST result in the \n   * transaction being reverted.\n   * Note: the contract address is always the message sender.\n   * @param _operator The address which called `safeTransferFrom` function\n   * @param _from The address which previously owned the token\n   * @param _tokenId The NFT identifier which is being transfered\n   * @param _data Additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n   */\n  function onERC721Received(\n    address _operator,\n    address _from,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public\n    returns(bytes4);\n}\n\ncontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\n\n  bytes4 private constant InterfaceId_ERC721Enumerable = 0x780e9d63;\n  /**\n   * 0x780e9d63 ===\n   *   bytes4(keccak256('totalSupply()')) ^\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\n   */\n\n  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n  /**\n   * 0x5b5e139f ===\n   *   bytes4(keccak256('name()')) ^\n   *   bytes4(keccak256('symbol()')) ^\n   *   bytes4(keccak256('tokenURI(uint256)'))\n   */\n\n  // Token name\n  string internal name_;\n\n  // Token symbol\n  string internal symbol_;\n\n  // Mapping from owner to list of owned token IDs\n  mapping(address => uint256[]) internal ownedTokens;\n\n  // Mapping from token ID to index of the owner tokens list\n  mapping(uint256 => uint256) internal ownedTokensIndex;\n\n  // Array with all token ids, used for enumeration\n  uint256[] internal allTokens;\n\n  // Mapping from token id to position in the allTokens array\n  mapping(uint256 => uint256) internal allTokensIndex;\n\n  // Optional mapping for token URIs\n  mapping(uint256 => string) internal tokenURIs;\n\n  /**\n   * @dev Constructor function\n   */\n  constructor(string _name, string _symbol) public {\n    name_ = _name;\n    symbol_ = _symbol;\n\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(InterfaceId_ERC721Enumerable);\n    _registerInterface(InterfaceId_ERC721Metadata);\n  }\n\n  /**\n   * @dev Gets the token name\n   * @return string representing the token name\n   */\n  function name() external view returns (string) {\n    return name_;\n  }\n\n  /**\n   * @dev Gets the token symbol\n   * @return string representing the token symbol\n   */\n  function symbol() external view returns (string) {\n    return symbol_;\n  }\n\n  /**\n   * @dev Returns an URI for a given token ID\n   * Throws if the token ID does not exist. May return an empty string.\n   * @param _tokenId uint256 ID of the token to query\n   */\n  function tokenURI(uint256 _tokenId) public view returns (string) {\n    require(exists(_tokenId));\n    return tokenURIs[_tokenId];\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n   * @param _owner address owning the tokens list to be accessed\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n   */\n  function tokenOfOwnerByIndex(\n    address _owner,\n    uint256 _index\n  )\n    public\n    view\n    returns (uint256)\n  {\n    require(_index < balanceOf(_owner));\n    return ownedTokens[_owner][_index];\n  }\n\n  /**\n   * @dev Gets the total amount of tokens stored by the contract\n   * @return uint256 representing the total amount of tokens\n   */\n  function totalSupply() public view returns (uint256) {\n    return allTokens.length;\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of all the tokens in this contract\n   * Reverts if the index is greater or equal to the total number of tokens\n   * @param _index uint256 representing the index to be accessed of the tokens list\n   * @return uint256 token ID at the given index of the tokens list\n   */\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\n    require(_index < totalSupply());\n    return allTokens[_index];\n  }\n\n  /**\n   * @dev Internal function to set the token URI for a given token\n   * Reverts if the token ID does not exist\n   * @param _tokenId uint256 ID of the token to set its URI\n   * @param _uri string URI to assign\n   */\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\n    require(exists(_tokenId));\n    tokenURIs[_tokenId] = _uri;\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    super.addTokenTo(_to, _tokenId);\n    uint256 length = ownedTokens[_to].length;\n    ownedTokens[_to].push(_tokenId);\n    ownedTokensIndex[_tokenId] = length;\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    super.removeTokenFrom(_from, _tokenId);\n\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n\n    ownedTokens[_from][tokenIndex] = lastToken;\n    ownedTokens[_from][lastTokenIndex] = 0;\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n    ownedTokens[_from].length--;\n    ownedTokensIndex[_tokenId] = 0;\n    ownedTokensIndex[lastToken] = tokenIndex;\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param _to address the beneficiary that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    super._mint(_to, _tokenId);\n\n    allTokensIndex[_tokenId] = allTokens.length;\n    allTokens.push(_tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param _owner owner of the token to burn\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    super._burn(_owner, _tokenId);\n\n    // Clear metadata (if any)\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\n      delete tokenURIs[_tokenId];\n    }\n\n    // Reorg all tokens array\n    uint256 tokenIndex = allTokensIndex[_tokenId];\n    uint256 lastTokenIndex = allTokens.length.sub(1);\n    uint256 lastToken = allTokens[lastTokenIndex];\n\n    allTokens[tokenIndex] = lastToken;\n    allTokens[lastTokenIndex] = 0;\n\n    allTokens.length--;\n    allTokensIndex[_tokenId] = 0;\n    allTokensIndex[lastToken] = tokenIndex;\n  }\n\n}\n\ncontract CryptantCrabNFT is ERC721Token, Whitelist, CrabData, GeneSurgeon {\n  event CrabPartAdded(uint256 hp, uint256 dps, uint256 blockAmount);\n  event GiftTransfered(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n  event DefaultMetadataURIChanged(string newUri);\n\n  /**\n   * @dev Pre-generated keys to save gas\n   * keys are generated with:\n   * CRAB_BODY       = bytes4(keccak256(\"crab_body\"))       = 0xc398430e\n   * CRAB_LEG        = bytes4(keccak256(\"crab_leg\"))        = 0x889063b1\n   * CRAB_LEFT_CLAW  = bytes4(keccak256(\"crab_left_claw\"))  = 0xdb6290a2\n   * CRAB_RIGHT_CLAW = bytes4(keccak256(\"crab_right_claw\")) = 0x13453f89\n   */\n  bytes4 internal constant CRAB_BODY = 0xc398430e;\n  bytes4 internal constant CRAB_LEG = 0x889063b1;\n  bytes4 internal constant CRAB_LEFT_CLAW = 0xdb6290a2;\n  bytes4 internal constant CRAB_RIGHT_CLAW = 0x13453f89;\n\n  /**\n   * @dev Stores all the crab data\n   */\n  mapping(bytes4 => mapping(uint256 => CrabPartData[])) internal crabPartData;\n\n  /**\n   * @dev Mapping from tokenId to its corresponding special skin\n   * tokenId with default skin will not be stored. \n   */\n  mapping(uint256 => uint256) internal crabSpecialSkins;\n\n  /**\n   * @dev default MetadataURI\n   */\n  string public defaultMetadataURI = \"https://www.cryptantcrab.io/md/\";\n\n  constructor(string _name, string _symbol) public ERC721Token(_name, _symbol) {\n    // constructor\n    initiateCrabPartData();\n  }\n\n  /**\n   * @dev Returns an URI for a given token ID\n   * Throws if the token ID does not exist.\n   * Will return the token's metadata URL if it has one, \n   * otherwise will just return base on the default metadata URI\n   * @param _tokenId uint256 ID of the token to query\n   */\n  function tokenURI(uint256 _tokenId) public view returns (string) {\n    require(exists(_tokenId));\n\n    string memory _uri = tokenURIs[_tokenId];\n\n    if(bytes(_uri).length == 0) {\n      _uri = getMetadataURL(bytes(defaultMetadataURI), _tokenId);\n    }\n\n    return _uri;\n  }\n\n  /**\n   * @dev Returns the data of a specific parts\n   * @param _partIndex the part to retrieve. 1 = Body, 2 = Legs, 3 = Left Claw, 4 = Right Claw\n   * @param _element the element of part to retrieve. 1 = Fire, 2 = Earth, 3 = Metal, 4 = Spirit, 5 = Water\n   * @param _setIndex the set index of for the specified part. This will starts from 1.\n   */\n  function dataOfPart(uint256 _partIndex, uint256 _element, uint256 _setIndex) public view returns (uint256[] memory _resultData) {\n    bytes4 _key;\n    if(_partIndex == 1) {\n      _key = CRAB_BODY;\n    } else if(_partIndex == 2) {\n      _key = CRAB_LEG;\n    } else if(_partIndex == 3) {\n      _key = CRAB_LEFT_CLAW;\n    } else if(_partIndex == 4) {\n      _key = CRAB_RIGHT_CLAW;\n    } else {\n      revert();\n    }\n\n    CrabPartData storage _crabPartData = crabPartData[_key][_element][_setIndex];\n\n    _resultData = crabPartDataToArray(_crabPartData);\n  }\n\n  /**\n   * @dev Gift(Transfer) a token to another address. Caller must be token owner\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n   */\n  function giftToken(address _from, address _to, uint256 _tokenId) external {\n    safeTransferFrom(_from, _to, _tokenId);\n\n    emit GiftTransfered(_from, _to, _tokenId);\n  }\n\n  /**\n   * @dev External function to mint a new token, for whitelisted address only.\n   * Reverts if the given token ID already exists\n   * @param _tokenOwner address the beneficiary that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   * @param _skinId the skin ID to be applied for all the token minted\n   */\n  function mintToken(address _tokenOwner, uint256 _tokenId, uint256 _skinId) external onlyIfWhitelisted(msg.sender) {\n    super._mint(_tokenOwner, _tokenId);\n\n    if(_skinId > 0) {\n      crabSpecialSkins[_tokenId] = _skinId;\n    }\n  }\n\n  /**\n   * @dev Returns crab data base on the gene provided\n   * @param _gene the gene info where crab data will be retrieved base on it\n   * @return 4 uint arrays:\n   * 1st Array = Body's Data\n   * 2nd Array = Leg's Data\n   * 3rd Array = Left Claw's Data\n   * 4th Array = Right Claw's Data\n   */\n  function crabPartDataFromGene(uint256 _gene) external view returns (\n    uint256[] _bodyData,\n    uint256[] _legData,\n    uint256[] _leftClawData,\n    uint256[] _rightClawData\n  ) {\n    uint256[] memory _parts = extractPartsFromGene(_gene);\n    uint256[] memory _elements = extractElementsFromGene(_gene);\n\n    _bodyData = dataOfPart(1, _elements[0], _parts[0]);\n    _legData = dataOfPart(2, _elements[1], _parts[1]);\n    _leftClawData = dataOfPart(3, _elements[2], _parts[2]);\n    _rightClawData = dataOfPart(4, _elements[3], _parts[3]);\n  }\n\n  /**\n   * @dev For developer to add new parts, notice that this is the only method to add crab data\n   * so that developer can add extra content. there's no other method for developer to modify\n   * the data. This is to assure token owner actually owns their data.\n   * @param _partIndex the part to add. 1 = Body, 2 = Legs, 3 = Left Claw, 4 = Right Claw\n   * @param _element the element of part to add. 1 = Fire, 2 = Earth, 3 = Metal, 4 = Spirit, 5 = Water\n   * @param _partDataArray data of the parts.\n   */\n  function setPartData(uint256 _partIndex, uint256 _element, uint256[] _partDataArray) external onlyOwner {\n    CrabPartData memory _partData = arrayToCrabPartData(_partDataArray);\n\n    bytes4 _key;\n    if(_partIndex == 1) {\n      _key = CRAB_BODY;\n    } else if(_partIndex == 2) {\n      _key = CRAB_LEG;\n    } else if(_partIndex == 3) {\n      _key = CRAB_LEFT_CLAW;\n    } else if(_partIndex == 4) {\n      _key = CRAB_RIGHT_CLAW;\n    }\n\n    // if index 1 is empty will fill at index 1\n    if(crabPartData[_key][_element][1].hp == 0 && crabPartData[_key][_element][1].dps == 0) {\n      crabPartData[_key][_element][1] = _partData;\n    } else {\n      crabPartData[_key][_element].push(_partData);\n    }\n\n    emit CrabPartAdded(_partDataArray[0], _partDataArray[1], _partDataArray[2]);\n  }\n\n  /**\n   * @dev Updates the default metadata URI\n   * @param _defaultUri the new metadata URI\n   */\n  function setDefaultMetadataURI(string _defaultUri) external onlyOwner {\n    defaultMetadataURI = _defaultUri;\n\n    emit DefaultMetadataURIChanged(_defaultUri);\n  }\n\n  /**\n   * @dev Updates the metadata URI for existing token\n   * @param _tokenId the tokenID that metadata URI to be changed\n   * @param _uri the new metadata URI for the specified token\n   */\n  function setTokenURI(uint256 _tokenId, string _uri) external onlyIfWhitelisted(msg.sender) {\n    _setTokenURI(_tokenId, _uri);\n  }\n\n  /**\n   * @dev Returns the special skin of the provided tokenId\n   * @param _tokenId cryptant crab's tokenId\n   * @return Special skin belongs to the _tokenId provided. \n   * 0 will be returned if no special skin found.\n   */\n  function specialSkinOfTokenId(uint256 _tokenId) external view returns (uint256) {\n    return crabSpecialSkins[_tokenId];\n  }\n\n  /**\n   * @dev This functions will adjust the length of crabPartData\n   * so that when adding data the index can start with 1.\n   * Reason of doing this is because gene cannot have parts with index 0.\n   */\n  function initiateCrabPartData() internal {\n    require(crabPartData[CRAB_BODY][1].length == 0);\n\n    for(uint256 i = 1 ; i <= 5 ; i++) {\n      crabPartData[CRAB_BODY][i].length = 2;\n      crabPartData[CRAB_LEG][i].length = 2;\n      crabPartData[CRAB_LEFT_CLAW][i].length = 2;\n      crabPartData[CRAB_RIGHT_CLAW][i].length = 2;\n    }\n  }\n\n  /**\n   * @dev Returns whether the given spender can transfer a given token ID\n   * @param _spender address of the spender to query\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @return bool whether the msg.sender is approved for the given token ID,\n   *  is an operator of the owner, or is the owner of the token, \n   *  or has been whitelisted by contract owner\n   */\n  function isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool) {\n    address owner = ownerOf(_tokenId);\n    return _spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender) || whitelist(_spender);\n  }\n\n  /**\n   * @dev Will merge the uri and tokenId together. \n   * @param _uri URI to be merge. This will be the first part of the result URL.\n   * @param _tokenId tokenID to be merge. This will be the last part of the result URL.\n   * @return the merged urL\n   */\n  function getMetadataURL(bytes _uri, uint256 _tokenId) internal pure returns (string) {\n    uint256 _tmpTokenId = _tokenId;\n    uint256 _tokenLength;\n\n    // Getting the length(number of digits) of token ID\n    do {\n      _tokenLength++;\n      _tmpTokenId /= 10;\n    } while (_tmpTokenId > 0);\n\n    // creating a byte array with the length of URL + token digits\n    bytes memory _result = new bytes(_uri.length + _tokenLength);\n\n    // cloning the uri bytes into the result bytes\n    for(uint256 i = 0 ; i < _uri.length ; i ++) {\n      _result[i] = _uri[i];\n    }\n\n    // appending the tokenId to the end of the result bytes\n    uint256 lastIndex = _result.length - 1;\n    for(_tmpTokenId = _tokenId ; _tmpTokenId > 0 ; _tmpTokenId /= 10) {\n      _result[lastIndex--] = byte(48 + _tmpTokenId % 10);\n    }\n\n    return string(_result);\n  }\n}",
  "bytecode": "6080604052635bef5a006005556701aa535d3d0c000060065562068778600755600a60085561138960095534801561003657600080fd5b5060405160608061172c83398101604090815281516020830151919092015160008054600160a060020a031916331790558282828282828282826100848383836401000000006100a2810204565b50503415965061009a9550505050505057600080fd5b505050610137565b60008080600160a060020a038616156100d45760018054600160a060020a031916600160a060020a0388161790558592505b600160a060020a038516156101025760028054600160a060020a031916600160a060020a0387161790558491505b600160a060020a0384161561012f575060038054600160a060020a031916600160a060020a038516179055825b505050505050565b6115e6806101466000396000f3006080604052600436106101445763ffffffff60e060020a6000350416629a9b7b81146101535780630d174c241461017a5780631aee3f911461019d578063249b7c19146101b257806326d75676146101c75780632e1a7d4d146101dc578063363bf964146102085780633deb217d146102355780634ecf30e41461024a57806364c3dae6146102625780636d25d8021461028b578063715018a6146102a057806377ee4b0f146102b55780637d9527d6146102ca5780638da5cb5b146102fb5780639f727c2714610310578063c6051b7e14610325578063cc89d5961461033a578063cd99754a1461035b578063cdc1842414610370578063dede553f14610385578063e43e9de01461039a578063e828eb2c146103af578063ec243555146103c7578063ef030012146103df578063efef39a1146103f4578063f2fde38b146103ff575b34801561015057600080fd5b50005b34801561015f57600080fd5b50610168610420565b60408051918252519081900360200190f35b34801561018657600080fd5b5061019b600160a060020a0360043516610426565b005b3480156101a957600080fd5b5061016861046c565b3480156101be57600080fd5b50610168610472565b3480156101d357600080fd5b50610168610478565b3480156101e857600080fd5b506101f460043561047e565b604080519115158252519081900360200190f35b34801561021457600080fd5b5061019b600160a060020a03600435811690602435811690604435166104e9565b34801561024157600080fd5b50610168610510565b34801561025657600080fd5b5061019b60043561051c565b34801561026e57600080fd5b5061019b60043560243560443560643560843560a4351515610538565b34801561029757600080fd5b50610168610567565b3480156102ac57600080fd5b5061019b610572565b3480156102c157600080fd5b506101686105de565b3480156102d657600080fd5b506102df610654565b60408051600160a060020a039092168252519081900360200190f35b34801561030757600080fd5b506102df610663565b34801561031c57600080fd5b5061019b610672565b34801561033157600080fd5b506101686106c7565b34801561034657600080fd5b50610168600160a060020a03600435166106cd565b34801561036757600080fd5b5061016861081e565b34801561037c57600080fd5b506102df610824565b34801561039157600080fd5b506102df610833565b3480156103a657600080fd5b506102df610842565b3480156103bb57600080fd5b5061019b600435610851565b3480156103d357600080fd5b5061019b60043561086d565b3480156103eb57600080fd5b506101686108c1565b61019b6004356108c7565b34801561040b57600080fd5b5061019b600160a060020a0360043516610a30565b60085481565b600054600160a060020a0316331461043d57600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b61138881565b60055481565b610e1081565b600454600090600160a060020a0316331461049857600080fd5b30318211156104a657600080fd5b600454604051600160a060020a039091169083156108fc029084906000818181858888f193505050501580156104e0573d6000803e3d6000fd5b50600192915050565b600054600160a060020a0316331461050057600080fd5b61050b838383610a50565b505050565b6706ccd46763f1000081565b600054600160a060020a0316331461053357600080fd5b600555565b600054600160a060020a0316331461054f57600080fd5b61055f6001878787878787610b0b565b505050505050565b66038d7ea4c6800081565b600054600160a060020a0316331461058957600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000808080610e1042049250600754831115610649575050600754810366038d7ea4c6800081026706ccd46763f1000081116106265760068054820190556007839055610649565b6006546706ccd46763f1000014610649576706ccd46763f1000060065560078390555b600654935050505090565b600154600160a060020a031681565b600054600160a060020a031681565b600054600160a060020a0316331461068957600080fd5b60008054604051600160a060020a0390911691303180156108fc02929091818181858888f193505050501580156106c4573d6000803e3d6000fd5b50565b60075481565b6000600360009054906101000a9004600160a060020a0316600160a060020a03166389853691836040516020018082600160a060020a0316600160a060020a03166c01000000000000000000000000028152601401807f6372797074616e740000000000000000000000000000000000000000000000008152506008019150506040516020818303038152906040526040518082805190602001908083835b6020831061078b5780518252601f19909201916020918201910161076c565b51815160209384036101000a60001901801990921691161790526040805192909401829003822063ffffffff881660e060020a0283526004830152925160248083019650939450929083900301905081600087803b1580156107ec57600080fd5b505af1158015610800573d6000803e3d6000fd5b505050506040513d602081101561081657600080fd5b505192915050565b60095481565b600454600160a060020a031681565b600354600160a060020a031681565b600254600160a060020a031681565b600054600160a060020a0316331461086857600080fd5b600755565b60008054600160a060020a0316331461088557600080fd5b5060005b818110156108bd5760098054600181019091556108b5906000906701aa535d3d0c000082808080610b0b565b600101610889565b5050565b60065481565b6001546000908190819081908190600160a060020a031615156108e957600080fd5b600254600160a060020a0316151561090057600080fd5b600354600160a060020a0316151561091757600080fd5b6000861180156109285750600a8611155b151561093357600080fd5b61093b61123f565b151561094657600080fd5b6008548601611388101561095957600080fd5b3494506109646105de565b935085840292508285101561097857600080fd5b6064915085600a14156109965760085461099390600a611247565b91505b5060005b858110156109c857600880546001908101918290556109c0918660008080888814610b0b565b60010161099a565b6109d63382610bb802611264565b506109e185846113f9565b60408051878152610bb88302602082015284870381830152905133917f260ecffe36a912f3688d7fa915793137bbaf0980df289ffad7ae877d7ca0a23b919081900360600190a2505050505050565b600054600160a060020a03163314610a4757600080fd5b6106c48161148c565b60008080600160a060020a03861615610a8f576001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0388161790558592505b600160a060020a03851615610aca576002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387161790558491505b600160a060020a0384161561055f575060038054600160a060020a03851673ffffffffffffffffffffffffffffffffffffffff199091161790555050505050565b6060806000806000806004604051908082528060200260200182016040528015610b3f578160200160208202803883390190505b5060408051600480825260a0820190925291975060208201608080388339019050509450891515610c2657600154604080517f9d0c0c350000000000000000000000000000000000000000000000000000000081528f1515600482015289151560248201529051600160a060020a0390921691639d0c0c35916044808201926080929091908290030181600087803b158015610bda57600080fd5b505af1158015610bee573d6000803e3d6000fd5b505050506040513d6080811015610c0457600080fd5b5080516020820151604083015160609093015191965094509092509050610c2a565b8993505b8815610c34578892505b8715610c4257879150610cdf565b811515610cdf57600154604080517f6f9fbd7c0000000000000000000000000000000000000000000000000000000081528151600160a060020a0390931692636f9fbd7c926004808401939192918290030181600087803b158015610ca657600080fd5b505af1158015610cba573d6000803e3d6000fd5b505050506040513d6040811015610cd057600080fd5b50805160209091015190925090505b600254604080517f23a36d2b000000000000000000000000000000000000000000000000000000008152336004820152602481018f9052604481018690529051600160a060020a03909216916323a36d2b9160648082019260009290919082900301818387803b158015610d5257600080fd5b505af1158015610d66573d6000803e3d6000fd5b505050508b60405160200180828152602001807f67656e65000000000000000000000000000000000000000000000000000000008152506004019150506040516020818303038152906040526040518082805190602001908083835b60208310610de15780518252601f199092019160209182019101610dc2565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020856000815181101515610e1d57fe5b602090810290910101528551849087906000908110610e3857fe5b6020908102909101810191909152604080518083018f90527f6c6576656c0000000000000000000000000000000000000000000000000000008183015281516025818303018152604590910191829052805190928291908401908083835b60208310610eb55780518252601f199092019160209182019101610e96565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020856001815181101515610ef157fe5b602090810290910101528551600190879082908110610f0c57fe5b6020908102909101810191909152604080518083018f90527f686561727456616c756500000000000000000000000000000000000000000000818301528151602a818303018152604a90910191829052805190928291908401908083835b60208310610f895780518252601f199092019160209182019101610f6a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020856002815181101515610fc557fe5b602090810290910101528551829087906002908110610fe057fe5b6020908102909101810191909152604080518083018f90527f67726f77746856616c7565000000000000000000000000000000000000000000818301528151602b818303018152604b90910191829052805190928291908401908083835b6020831061105d5780518252601f19909201916020918201910161103e565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902085600381518110151561109957fe5b6020908102909101015285518190879060039081106110b457fe5b6020908102909101810191909152600354604080517fedf87aff00000000000000000000000000000000000000000000000000000000815260048101918252885160448201528851600160a060020a039093169363edf87aff938a938c9390928392602483019260640191878101910280838360005b8381101561114257818101518382015260200161112a565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015611181578181015183820152602001611169565b50505050905001945050505050602060405180830381600087803b1580156111a857600080fd5b505af11580156111bc573d6000803e3d6000fd5b505050506040513d60208110156111d257600080fd5b505115156111df57600080fd5b604080518d815260208101869052808201859052606081018d905260808101839052905133917f119326b1fd8ed92ff4f7d9da36e3caa7d39681c38d437053fe7e3965cf74aaf8919081900360a00190a250505050505050505050505050565b600554421090565b60008161125384611509565b81151561125c57fe5b069392505050565b600061127f82611273856106cd565b9063ffffffff61159516565b60035460408051600160a060020a038781166c01000000000000000000000000026020808401919091527f6372797074616e7400000000000000000000000000000000000000000000000060348401528351808403601c018152603c90930193849052825195965093169363adb44a32939192918291908401908083835b6020831061131c5780518252601f1990920191602091820191016112fd565b51815160209384036101000a60001901801990921691161790526040805192909401829003822063ffffffff881660e060020a028352600483015260248201899052925160448083019650939450929083900301905081600087803b15801561138457600080fd5b505af1158015611398573d6000803e3d6000fd5b505050506040513d60208110156113ae57600080fd5b505060408051838152602081018390528151600160a060020a038616927fed28291c8ece55af2a3498316da394241d9026fd7256843843d9f4fa0a56f1e0928290030190a292915050565b600061140b838363ffffffff6115a816565b9050600081111561050b57604051339082156108fc029083906000818181858888f19350505050158015611443573d6000803e3d6000fd5b506040805183815260208101859052808201839052905133917fb7048c2ad36aadee977bb16b4543a18866044d27a2ca753e1c7dbcfa7d7a6962919081900360600190a2505050565b600160a060020a03811615156114a157600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b604080516000194301406020808301919091528183018490528251808303840181526060909201928390528151600093918291908401908083835b602083106115635780518252601f199092019160209182019101611544565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912095945050505050565b818101828110156115a257fe5b92915050565b6000828211156115b457fe5b509003905600a165627a7a723058209e8b7ceccd038769766cdfcf3c18c3001db72f7e07ec60672c7ca58368aace420029000000000000000000000000837ddb7a9e71070848a545acb266997327a59413000000000000000000000000ecd6b4a2f82b0c9fb283a4a8a1ef5adf555f794b000000000000000000000000c58e24f5b05365aa21ded72111af939446d13b2e",
  "constructorArguments": "000000000000000000000000837ddb7a9e71070848a545acb266997327a59413000000000000000000000000ecd6b4a2f82b0c9fb283a4a8a1ef5adf555f794b000000000000000000000000c58e24f5b05365aa21ded72111af939446d13b2e"
}