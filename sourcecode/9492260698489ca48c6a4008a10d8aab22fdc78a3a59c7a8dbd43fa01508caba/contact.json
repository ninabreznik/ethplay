{
  "address": "0x465efa69a42273e3e368cfe3b6483ab97b3c33eb",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CrystalAirdropGame",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-15\n*/\n\npragma solidity ^0.4.25;\n\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\ncontract CryptoMiningWarInterface {\n\tuint256 public roundNumber;\n    uint256 public deadline; \n    function addCrystal( address /*_addr*/, uint256 /*_value*/ ) public pure {}\n    function isMiningWarContract() external pure returns(bool) {}\n}\ncontract CrystalAirdropGame {\n\tusing SafeMath for uint256;\n\n\taddress public administrator;\n\t// mini game\n    uint256 private ROUND_TIME_MINING_WAR = 86400 * 7;\n    uint256 private BONUS_CRYSTAL = 5000000;\n    uint256 public TIME_DAY = 24 hours;\n\n    address public miningWarAddress;\n    CryptoMiningWarInterface public MiningWar;\n    /** \n    * @dev player information\n    */\n    mapping(address => Player) public players;\n    mapping(uint256 => Airdrop) public airdrops;\n   \n    struct Player {\n        uint256 miningWarRound;\n        uint256 noJoinAirdrop; \n        uint256 lastDayJoin;\n    }\n    struct Airdrop {\n        uint256 day;\n        uint256 prizeCrystal;\n    }\n    event AirdropPrize(\n        address playerJoin,\n        uint256 crystalBonus,\n        uint256 noJoinAirdrop,\n        uint256 noDayStartMiningWar\n    );\n\n    constructor() public {\n        administrator = msg.sender;\n        // set interface main contract\n        setMiningWarInterface(0x1b002cd1ba79dfad65e8abfbb3a97826e4960fe5);\n\n        initAirdrop();\n    }\n    function initAirdrop() private {\n        //                    day       prize crystals\n        airdrops[0] = Airdrop(1,            5000);   \n        airdrops[1] = Airdrop(2,            10000);   \n        airdrops[2] = Airdrop(3,            20000);   \n        airdrops[3] = Airdrop(4,            40000);   \n        airdrops[4] = Airdrop(5,            60000);   \n        airdrops[5] = Airdrop(6,            100000);   \n        airdrops[6] = Airdrop(7,            200000);   \n    }\n    /** \n    * @dev MainContract used this function to verify game's contract\n    */\n    function isContractMiniGame() public pure returns( bool _isContractMiniGame )\n    {\n    \t_isContractMiniGame = true;\n    }\n    function isAirdropContract() public pure returns(bool)\n    {\n        return true;\n    }\n    function setAirdropPrize(uint256 idx, uint256 value) public \n    {\n       require( administrator == msg.sender );\n       airdrops[idx].prizeCrystal = value; \n    }\n     function setMiningWarInterface(address _addr) public \n    {\n        require( administrator == msg.sender );\n        \n        CryptoMiningWarInterface miningWarInterface = CryptoMiningWarInterface(_addr);\n\n        require(miningWarInterface.isMiningWarContract() == true);\n        \n        miningWarAddress = _addr;\n        \n        MiningWar = miningWarInterface;\n    }\n\n    function setupMiniGame(uint256 /*_miningWarRoundNumber*/, uint256 /*_miningWarDeadline*/ ) public pure\n    {\n\n    }\n\n    function joinAirdrop() public \n    {   \n        require(tx.origin == msg.sender);\n        require(MiningWar.deadline() > now);\n\n        Player storage p = players[msg.sender];\n        \n        uint256 miningWarRound      = MiningWar.roundNumber();\n        uint256 timeEndMiningWar    = MiningWar.deadline() - now;\n        uint256 noDayEndMiningWar   = SafeMath.div(timeEndMiningWar, TIME_DAY);\n\n        if (noDayEndMiningWar > 7) revert();\n\n        uint256 noDayStartMiningWar = SafeMath.sub(7, noDayEndMiningWar);\n \n        if (p.miningWarRound != miningWarRound) {\n            p.noJoinAirdrop = 1;\n            p.miningWarRound= miningWarRound;\n        } else if (p.lastDayJoin >= noDayStartMiningWar) {\n            revert();\n        } else {\n            p.noJoinAirdrop += 1;\n        }\n        p.lastDayJoin = noDayStartMiningWar;\n\n        airdropPrize(msg.sender);\n    }\n\n    function airdropPrize(address _addr) private\n    {\n       Player memory p = players[_addr];\n       \n       uint256 prizeCrystal = 0;\n       if (p.lastDayJoin > 0 && p.lastDayJoin <= 7)\n           prizeCrystal = airdrops[p.lastDayJoin - 1].prizeCrystal;\n       if (p.noJoinAirdrop >= 7) \n           prizeCrystal = SafeMath.add(prizeCrystal, BONUS_CRYSTAL);  \n       if (prizeCrystal != 0)\n           MiningWar.addCrystal(_addr, prizeCrystal);\n\n       emit AirdropPrize(_addr, prizeCrystal, p.noJoinAirdrop, p.lastDayJoin);\n    }\n    function getData(address _addr) public view returns(uint256 miningWarRound, uint256 noJoinAirdrop, uint256 lastDayJoin, uint256 nextTimeAirdropJoin)\n    {\n         Player memory p = players[_addr];\n\n         miningWarRound = p.miningWarRound;\n         noJoinAirdrop  = p.noJoinAirdrop;\n         lastDayJoin    = p.lastDayJoin;\n         nextTimeAirdropJoin = getNextTimeAirdropJoin(_addr);\n\n        if (miningWarRound != MiningWar.roundNumber()) {\n            noJoinAirdrop = 0;\n            lastDayJoin   = 0;\n        }   \n    }\n    function getNextCrystalReward(address _addr) public view returns(uint256)\n    {\n        Player memory p = players[_addr];\n        uint256 miningWarRound      = MiningWar.roundNumber();\n        uint256 timeStartMiningWar  = SafeMath.sub(MiningWar.deadline(), ROUND_TIME_MINING_WAR); \n        uint256 timeEndMiningWar    = MiningWar.deadline() - now;\n        uint256 noDayEndMiningWar   = SafeMath.div(timeEndMiningWar, TIME_DAY);\n        uint256 noDayStartMiningWar = SafeMath.sub(7, noDayEndMiningWar);\n\n        if (noDayStartMiningWar > 7) return 0;\n        if (p.lastDayJoin < noDayStartMiningWar) return airdrops[noDayStartMiningWar - 1].prizeCrystal; \n        return airdrops[noDayStartMiningWar].prizeCrystal;\n    }\n    function getNextTimeAirdropJoin(address _addr) public view returns(uint256)\n    {\n        Player memory p = players[_addr];\n\n        uint256 miningWarRound      = MiningWar.roundNumber();\n        uint256 timeStartMiningWar  = SafeMath.sub(MiningWar.deadline(), ROUND_TIME_MINING_WAR); \n        uint256 timeEndMiningWar    = MiningWar.deadline() - now;\n        uint256 noDayEndMiningWar   = SafeMath.div(timeEndMiningWar, TIME_DAY);\n\n        uint256 noDayStartMiningWar = SafeMath.sub(7, noDayEndMiningWar);\n\n        if (p.miningWarRound != miningWarRound) return 0;\n\n        if (p.lastDayJoin < noDayStartMiningWar) return 0;\n\n        return SafeMath.add(SafeMath.mul(noDayStartMiningWar, TIME_DAY), timeStartMiningWar);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"miningWarAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"joinAirdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isContractMiniGame\",\"outputs\":[{\"name\":\"_isContractMiniGame\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getData\",\"outputs\":[{\"name\":\"miningWarRound\",\"type\":\"uint256\"},{\"name\":\"noJoinAirdrop\",\"type\":\"uint256\"},{\"name\":\"lastDayJoin\",\"type\":\"uint256\"},{\"name\":\"nextTimeAirdropJoin\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getNextTimeAirdropJoin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"airdrops\",\"outputs\":[{\"name\":\"day\",\"type\":\"uint256\"},{\"name\":\"prizeCrystal\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getNextCrystalReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setMiningWarInterface\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"setupMiniGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MiningWar\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isAirdropContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"miningWarRound\",\"type\":\"uint256\"},{\"name\":\"noJoinAirdrop\",\"type\":\"uint256\"},{\"name\":\"lastDayJoin\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setAirdropPrize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"administrator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIME_DAY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"playerJoin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"crystalBonus\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"noJoinAirdrop\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"noDayStartMiningWar\",\"type\":\"uint256\"}],\"name\":\"AirdropPrize\",\"type\":\"event\"}]",
  "bytecode": "608060405262093a80600155624c4b40600255620151806003553480156200002657600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000095731b002cd1ba79dfad65e8abfbb3a97826e4960fe5620000b4640100000000026401000000009004565b620000ae62000250640100000000026401000000009004565b62000428565b60003373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156200011257600080fd5b819050600115158173ffffffffffffffffffffffffffffffffffffffff1663688b5c2b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200017e57600080fd5b505af115801562000193573d6000803e3d6000fd5b505050506040513d6020811015620001aa57600080fd5b81019080805190602001909291905050501515141515620001ca57600080fd5b81600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60408051908101604052806001815260200161138881525060076000808152602001908152602001600020600082015181600001556020820151816001015590505060408051908101604052806002815260200161271081525060076000600181526020019081526020016000206000820151816000015560208201518160010155905050604080519081016040528060038152602001614e2081525060076000600281526020019081526020016000206000820151816000015560208201518160010155905050604080519081016040528060048152602001619c408152506007600060038152602001908152602001600020600082015181600001556020820151816001015590505060408051908101604052806005815260200161ea6081525060076000600481526020019081526020016000206000820151816000015560208201518160010155905050604080519081016040528060068152602001620186a08152506007600060058152602001908152602001600020600082015181600001556020820151816001015590505060408051908101604052806007815260200162030d4081525060076000600681526020019081526020016000206000820151816000015560208201518160010155905050565b61167080620004386000396000f3006080604052600436106100db576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806314017c3f146100e057806329a7d5c1146101375780633281d5761461014e57806338266b221461017d57806347c9f9e8146101e957806360db5082146102405780637732b2a4146102885780638a56b230146102df578063be7ccd7e14610322578063c3f656f114610359578063d302af4a146103b0578063e2eb41ff146103df578063f3d6b54e14610444578063f53d0a8e1461047b578063ff716fea146104d2575b600080fd5b3480156100ec57600080fd5b506100f56104fd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561014357600080fd5b5061014c610523565b005b34801561015a57600080fd5b50610163610889565b604051808215151515815260200191505060405180910390f35b34801561018957600080fd5b506101be600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610892565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b3480156101f557600080fd5b5061022a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a05565b6040518082815260200191505060405180910390f35b34801561024c57600080fd5b5061026b60048036038101908080359060200190929190505050610d41565b604051808381526020018281526020019250505060405180910390f35b34801561029457600080fd5b506102c9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d65565b6040518082815260200191505060405180910390f35b3480156102eb57600080fd5b50610320600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110b7565b005b34801561032e57600080fd5b50610357600480360381019080803590602001909291908035906020019092919050505061124e565b005b34801561036557600080fd5b5061036e611252565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103bc57600080fd5b506103c5611278565b604051808215151515815260200191505060405180910390f35b3480156103eb57600080fd5b50610420600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611281565b60405180848152602001838152602001828152602001935050505060405180910390f35b34801561045057600080fd5b5061047960048036038101908080359060200190929190803590602001909291905050506112ab565b005b34801561048757600080fd5b50610490611325565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104de57600080fd5b506104e761134a565b6040518082815260200191505060405180910390f35b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008060003373ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614151561056557600080fd5b42600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166329dcb0cf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156105ec57600080fd5b505af1158015610600573d6000803e3d6000fd5b505050506040513d602081101561061657600080fd5b810190808051906020019092919050505011151561063357600080fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209450600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634e2786fb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156106fa57600080fd5b505af115801561070e573d6000803e3d6000fd5b505050506040513d602081101561072457600080fd5b8101908080519060200190929190505050935042600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166329dcb0cf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156107be57600080fd5b505af11580156107d2573d6000803e3d6000fd5b505050506040513d60208110156107e857600080fd5b810190808051906020019092919050505003925061080883600354611350565b9150600782111561081857600080fd5b61082360078361136b565b905083856000015414151561084a5760018560010181905550838560000181905550610870565b80856002015410151561085c57600080fd5b600185600101600082825401925050819055505b80856002018190555061088233611384565b5050505050565b60006001905090565b6000806000806108a0611622565b600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020606060405190810160405290816000820154815260200160018201548152602001600282015481525050905080600001519450806020015193508060400151925061092986610a05565b9150600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634e2786fb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156109b157600080fd5b505af11580156109c5573d6000803e3d6000fd5b505050506040513d60208110156109db57600080fd5b8101908080519060200190929190505050851415156109fd5760009350600092505b509193509193565b6000610a0f611622565b6000806000806000600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206060604051908101604052908160008201548152602001600182015481526020016002820154815250509550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634e2786fb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610b0857600080fd5b505af1158015610b1c573d6000803e3d6000fd5b505050506040513d6020811015610b3257600080fd5b81019080805190602001909291905050509450610c11600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166329dcb0cf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610bce57600080fd5b505af1158015610be2573d6000803e3d6000fd5b505050506040513d6020811015610bf857600080fd5b810190808051906020019092919050505060015461136b565b935042600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166329dcb0cf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610c9a57600080fd5b505af1158015610cae573d6000803e3d6000fd5b505050506040513d6020811015610cc457600080fd5b8101908080519060200190929190505050039250610ce483600354611350565b9150610cf160078361136b565b9050848660000151141515610d095760009650610d36565b8086604001511015610d1e5760009650610d36565b610d33610d2d826003546115c9565b85611604565b96505b505050505050919050565b60076020528060005260406000206000915090508060000154908060010154905082565b6000610d6f611622565b6000806000806000600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206060604051908101604052908160008201548152602001600182015481526020016002820154815250509550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634e2786fb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610e6857600080fd5b505af1158015610e7c573d6000803e3d6000fd5b505050506040513d6020811015610e9257600080fd5b81019080805190602001909291905050509450610f71600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166329dcb0cf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610f2e57600080fd5b505af1158015610f42573d6000803e3d6000fd5b505050506040513d6020811015610f5857600080fd5b810190808051906020019092919050505060015461136b565b935042600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166329dcb0cf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610ffa57600080fd5b505af115801561100e573d6000803e3d6000fd5b505050506040513d602081101561102457600080fd5b810190808051906020019092919050505003925061104483600354611350565b915061105160078361136b565b9050600781111561106557600096506110ac565b808660400151101561109257600760006001830381526020019081526020016000206001015496506110ac565b600760008281526020019081526020016000206001015496505b505050505050919050565b60003373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561111457600080fd5b819050600115158173ffffffffffffffffffffffffffffffffffffffff1663688b5c2b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561117f57600080fd5b505af1158015611193573d6000803e3d6000fd5b505050506040513d60208110156111a957600080fd5b810190808051906020019092919050505015151415156111c857600080fd5b81600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b5050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006001905090565b60066020528060005260406000206000915090508060000154908060010154908060020154905083565b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561130657600080fd5b8060076000848152602001908152602001600020600101819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b600080828481151561135e57fe5b0490508091505092915050565b600082821115151561137957fe5b818303905092915050565b61138c611622565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206060604051908101604052908160008201548152602001600182015481526020016002820154815250509150600090506000826040015111801561141657506007826040015111155b1561143c5760076000600184604001510381526020019081526020016000206001015490505b600782602001511015156114595761145681600254611604565b90505b60008114151561154157600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f6e212ea84836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561152857600080fd5b505af115801561153c573d6000803e3d6000fd5b505050505b7f21a38d6b40e74afc32e569aca9c8dfc6fd49d5c8807544725f95c681ca9a38ea838284602001518560400151604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200194505050505060405180910390a1505050565b60008060008414156115de57600091506115fd565b82840290508284828115156115ef57fe5b041415156115f957fe5b8091505b5092915050565b600080828401905083811015151561161857fe5b8091505092915050565b60606040519081016040528060008152602001600081526020016000815250905600a165627a7a72305820ee8287fc822a92a8c62ce630575d89f86e154e4e84efba40fb9e6552011ba72a0029"
}