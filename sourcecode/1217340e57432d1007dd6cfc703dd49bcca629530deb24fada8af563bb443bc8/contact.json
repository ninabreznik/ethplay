{
  "address": "0x7988eb11741109e2508507fa4abd646046ccdbf7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CsnCrowdPreSale",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-27\n*/\n\npragma solidity ^0.5.0;\n\ninterface Token {\n  /// @return total amount of tokens\n  function totalSupply() external view returns (uint256 supply);\n\n  /// @param _owner The address from which the balance will be retrieved\n  /// @return The balance\n  function balanceOf(address _owner) external view returns (uint256 balance);\n\n  /// @notice send `_value` token to `_to` from `msg.sender`\n  /// @param _to The address of the recipient\n  /// @param _value The amount of token to be transferred\n  /// @return Whether the transfer was successful or not\n  function transfer(address _to, uint256 _value) external returns (bool success);\n\n  /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n  /// @param _from The address of the sender\n  /// @param _to The address of the recipient\n  /// @param _value The amount of token to be transferred\n  /// @return Whether the transfer was successful or not\n  function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n\n  /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n  /// @param _spender The address of the account able to transfer the tokens\n  /// @param _value The amount of wei to be approved for transfer\n  /// @return Whether the approval was successful or not\n  function approve(address _spender, uint256 _value) external returns (bool success);\n\n  /// @param _owner The address of the account owning tokens\n  /// @param _spender The address of the account able to transfer the tokens\n  /// @return Amount of remaining tokens allowed to spent\n  function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\nlibrary SafeMath {\n    function safeMul(uint a, uint b) internal pure returns (uint) {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function safeSub(uint a, uint b) internal pure returns (uint) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function safeAdd(uint a, uint b) internal pure returns (uint) {\n        uint c = a + b;\n        assert(c>=a && c>=b);\n        return c;\n    }\n\n    function safeDiv(uint a, uint b) internal pure returns (uint) {\n        assert(b > 0);\n        uint c = a / b;\n        assert(a == b * c + a % b);\n        return c;\n    }\n}\n\ncontract ERC20 is Token {\n    using SafeMath for uint256;\n    \n    mapping (address => uint256) public balance;\n\n    mapping (address => mapping (address => uint256)) public allowed;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event TransferFrom(address indexed spender, address indexed from, address indexed to, uint256 _value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    uint256 constant private MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(_to != address(0), \"Can't send to null\");\n\n        balance[msg.sender] = balance[msg.sender].safeSub(_value);\n        balance[_to] = balance[_to].safeAdd(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_to != address(0), \"Can't send to null\");\n        require(_to != address(this), \"Can't send to contract\");\n        \n        uint256 allowance = allowed[_from][msg.sender];\n        require(_value <= allowance || _from == msg.sender, \"Not allowed to send that much\");\n\n        balance[_to] = balance[_to].safeAdd(_value);\n        balance[_from] = balance[_from].safeSub(_value);\n\n        if (allowed[_from][msg.sender] != MAX_UINT256 && _from != msg.sender) {\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].safeSub(_value);\n        }\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n    * @notice `msg.sender` approves `_spender` to spend `_value` tokens\n    *\n    * @param _spender The address of the account able to transfer the tokens\n    * @param _value The amount of tokens to be approved for transfer\n    * @return Whether the approval was successful or not\n    */\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        require(_spender != address(0), \"spender can't be null\");\n\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        remaining = allowed[_owner][_spender];\n    } \n\n    function totalSupply() public view returns (uint256 supply) {\n        return 0;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 ownerBalance) {\n        return balance[_owner];\n    }\n}\n\ncontract Ownable {\n    address payable public admin;\n\n  /**\n   * @dev The Ownable constructor sets the original `admin` of the contract to the sender\n   * account.\n   */\n    constructor() public {\n        admin = msg.sender;\n    }\n\n  /**\n   * @dev Throws if called by any account other than the admin.\n   */\n    modifier onlyAdmin() {\n        require(msg.sender == admin, \"Function reserved to admin\");\n        _;\n    }\n\n  /**\n   * @dev Allows the current admin to transfer control of the contract to a new admin.\n   * @param _newAdmin The address to transfer ownership to.\n   */\n\n    function transferOwnership(address payable _newAdmin) public onlyAdmin {\n        require(_newAdmin != address(0), \"New admin can't be null\");      \n        admin = _newAdmin;\n    }\n\n    function destroy() onlyAdmin public {\n        selfdestruct(admin);\n    }\n\n    function destroyAndSend(address payable _recipient) public onlyAdmin {\n        selfdestruct(_recipient);\n    }\n}\n\ncontract NotTransferable is ERC20, Ownable {\n    /// @notice Enables token holders to transfer their tokens freely if true\n   /// @param _enabledTransfer True if transfers are allowed in the clone\n    bool public enabledTransfer = false;\n\n    function enableTransfers(bool _enabledTransfer) public onlyAdmin {\n        enabledTransfer = _enabledTransfer;\n    }\n\n    function transferFromContract(address _to, uint256 _value) public onlyAdmin returns (bool success) {\n        return super.transfer(_to, _value);\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(enabledTransfer, \"Transfers are not allowed yet\");\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(enabledTransfer, \"Transfers are not allowed yet\");\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        require(enabledTransfer, \"Transfers are not allowed yet\");\n        return super.approve(_spender, _value);\n    }\n}\n\ncontract MOCoinstantine is NotTransferable {\n\n    string constant public NAME = \"MOCoinstantine\";\n\n    string constant public SYMBOL = \"MOC\";\n\n    uint8 constant public DECIMALS = 0;\n\n    uint256 public TOTALSUPPLY = 0;\n\n    constructor(uint256 totalSupply) public {\n        TOTALSUPPLY = totalSupply;\n        balance[msg.sender] = totalSupply;\n    }\n\n    function totalSupply() public view returns (uint256 supply) {\n        return TOTALSUPPLY;\n    }\n}\n\nlibrary Maps {\n    using SafeMath for uint256;\n\n    struct Participant {\n        address Address;\n        uint256 Participation;\n        uint256 Tokens;\n        uint256 Timestamp;\n    }\n\n    struct Map {\n        mapping(uint => Participant) data;\n        uint count;\n        uint lastIndex;\n        mapping(address => bool) addresses;\n        mapping(address => uint) indexes;\n    }\n\n    function insertOrUpdate(Map storage self, Participant memory value) internal {\n        if(!self.addresses[value.Address]) {\n            uint newIndex = ++self.lastIndex;\n            self.count++;\n            self.indexes[value.Address] = newIndex;\n            self.addresses[value.Address] = true;\n            self.data[newIndex] = value;\n        }\n        else {\n            uint existingIndex = self.indexes[value.Address];\n            self.data[existingIndex] = value;\n        }\n    }\n\n    function remove(Map storage self, Participant storage value) internal returns (bool success) {\n        if(!self.addresses[value.Address]) {\n            return false;\n        }\n        uint index = self.indexes[value.Address];\n        self.addresses[value.Address] = false;\n        self.indexes[value.Address] = 0;\n        delete self.data[index];\n        self.count--;\n        return true;\n    }\n\n    function destroy(Map storage self) internal {\n        for (uint i; i <= self.lastIndex; i++) {\n            if(self.data[i].Address != address(0x0)) {\n                delete self.addresses[self.data[i].Address];\n                delete self.indexes[self.data[i].Address];\n                delete self.data[i];\n            }\n        }\n        self.count = 0;\n        self.lastIndex = 0;\n        return ;\n    }\n    \n    function contains(Map storage self, Participant memory participant) internal view returns (bool exists) {\n        return self.indexes[participant.Address] > 0;\n    }\n\n    function length(Map memory self) internal pure returns (uint) {\n        return self.count;\n    }\n\n    function get(Map storage self, uint index) internal view returns (Participant storage) {\n        return self.data[index];\n    }\n\n    function getIndexOf(Map storage self, address _address) internal view returns (uint256) {\n        return self.indexes[_address];\n    }\n\n    function getByAddress(Map storage self, address _address) internal view returns (Participant storage) {\n        uint index = self.indexes[_address];\n        return self.data[index];\n    }\n\n    function containsAddress(Map storage self, address _address) internal view returns (bool exists) {\n        return self.indexes[_address] > 0;\n    }\n}\n\ncontract CsnCrowdConfigurableSale is Ownable {\n    using SafeMath for uint256;\n\n    // start and end date where investments are allowed (both inclusive)\n    uint256 public startDate; \n    uint256 public endDate;\n\n    // Minimum amount to participate\n    uint256 public minimumParticipationAmount;\n\n    uint256 public minimumToRaise;\n\n    // address where funds are collected\n    address payable public wallet ;\n\n    // how many token units a buyer gets per ether\n    uint256 public baseRate;\n    //cap for the sale\n    uint256 public cap; \n\n    uint256 capBonus1; \n    uint256 capBonus2;\n    uint256 capBonus3;\n\n    uint256 bonus1;\n    uint256 bonus2;\n    uint256 bonus3;\n    // amount of raised money in wei\n    uint256 public weiRaised;\n\n    //flag for final of crowdsale\n    bool public isFinalized = false;\n    bool public isCanceled = false;\n\n    \n    function getRate() public view returns (uint256) {\n        uint256 bonus = 0;\n        if(weiRaised >= capBonus3)\n        {\n            // 5% bonus\n            bonus = bonus3;\n        }\n        else if (weiRaised >= capBonus2)\n        {\n            // 15% bonus\n            bonus = bonus2;\n        }\n        else if (weiRaised >= capBonus1)\n        {\n            // 30 % bonus\n            bonus = bonus1;\n        }\n        return baseRate.safeAdd(bonus);\n    }\n    \n    function isStarted() public view returns (bool) {\n        return startDate <= block.timestamp;\n    }\n\n    function changeStartDate(uint256 _startDate) public onlyAdmin {\n        startDate = _startDate;\n    }\n\n    function changeEndDate(uint256 _endDate) public onlyAdmin {\n        endDate = _endDate;\n    }\n}\n\ncontract CsnCrowdSaleBase is CsnCrowdConfigurableSale {\n    using SafeMath for uint256;\n    using Maps for Maps.Map;\n    // The token being sold\n    MOCoinstantine public token;\n    mapping(address => uint256) public participations;\n    Maps.Map public participants;\n\n    event Finalized();\n\n    /**\n    * event for token purchase logging\n    * @param purchaser who paid for the tokens\n    * @param value weis paid for purchase\n    * @param amount amount of tokens purchased\n    */ \n    event BuyTokens(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n    event ClaimBack(address indexed purchaser, uint256 amount);\n\n    constructor() public {\n        wallet = 0xd21662630913Eb962c186c4A4B5834409226B65a;\n    }\n\n    function setWallet(address payable _wallet) public onlyAdmin  {\n        wallet = _wallet;\n    }\n\n    function () external payable {\n        if(msg.sender != wallet && msg.sender != address(0x0) && !isCanceled) {\n            buyTokens(msg.value);\n        }\n    }\n\n    function buyTokens(uint256 _weiAmount) private {\n        require(validPurchase(), \"Requirements to buy are not met\");\n        uint256 rate = getRate();\n        // calculate token amount to be created\n        uint256 gas = 0;\n        uint256 amountIncl = 0;\n        uint256 amount = 0;\n        uint256 tokens = 0;\n        uint256 newBalance = 0;\n       \n        participations[msg.sender] = participations[msg.sender].safeAdd(_weiAmount);\n        if(participants.containsAddress(msg.sender))\n        {\n            gas = tx.gasprice * 83000;\n            amountIncl = _weiAmount.safeAdd(gas);\n            amount = amountIncl.safeMul(rate);\n            tokens = amount.safeDiv(1000000000000000000);\n            Maps.Participant memory existingParticipant = participants.getByAddress(msg.sender);\n            newBalance = tokens.safeAdd(existingParticipant.Tokens);\n        }\n        else {\n            gas = tx.gasprice * 280000;\n            amountIncl = _weiAmount.safeAdd(gas);\n            amount = amountIncl.safeMul(rate);\n            tokens = amount.safeDiv(1000000000000000000);\n            newBalance = tokens;\n        } \n        participants.insertOrUpdate(Maps.Participant(msg.sender, participations[msg.sender], newBalance, block.timestamp));\n\n        //forward funds to wallet\n        forwardFunds();\n\n         // update state\n        weiRaised = weiRaised.safeAdd(_weiAmount);\n         //purchase tokens and transfer to buyer\n        token.transferFromContract(msg.sender, tokens);\n         //Token purchase event\n        emit BuyTokens(msg.sender, msg.sender, _weiAmount, tokens);\n    }\n\n    function GetNumberOfParticipants() public view  returns (uint) {\n        return participants.count;\n    }\n\n    function GetMaxIndex() public view  returns (uint) {\n        return participants.lastIndex;\n    }\n\n    function GetParticipant(uint index) public view  returns (address Address, uint256 Participation, uint256 Tokens, uint256 Timestamp ) {\n        Maps.Participant memory participant = participants.get(index);\n        Address = participant.Address;\n        Participation = participant.Participation;\n        Tokens = participant.Tokens;\n        Timestamp = participant.Timestamp;\n    }\n    \n    function Contains(address _address) public view returns (bool) {\n        return participants.contains(Maps.Participant(_address, 0, 0, block.timestamp));\n    }\n    \n    function Destroy() private returns (bool) {\n        participants.destroy();\n    }\n\n    function buyTokens() public payable {\n        require(msg.sender != address(0x0), \"Can't by from null\");\n        buyTokens(msg.value);\n    }\n\n    //send tokens to the given address used for investors with other conditions, only contract admin can call this\n    function transferTokensManual(address beneficiary, uint256 amount) public onlyAdmin {\n        require(beneficiary != address(0x0), \"address can't be null\");\n        require(amount > 0, \"amount should greater than 0\");\n\n        //transfer tokens\n        token.transferFromContract(beneficiary, amount);\n\n        //Token purchase event\n        emit BuyTokens(wallet, beneficiary, 0, amount);\n\n    }\n\n    /// @notice Enables token holders to transfer their tokens freely if true\n    /// @param _transfersEnabled True if transfers are allowed in the clone\n    function enableTransfers(bool _transfersEnabled) public onlyAdmin {\n        token.enableTransfers(_transfersEnabled);\n    }\n\n    // send ether to the fund collection wallet\n    function forwardFunds() internal {\n        wallet.transfer(msg.value);\n    }\n\n    // should be called after crowdsale ends or to emergency stop the sale\n    function finalize() public onlyAdmin {\n        require(!isFinalized, \"Is already finalised\");\n        emit Finalized();\n        isFinalized = true;\n    }\n\n    // @return true if the transaction can buy tokens\n    // check for valid time period, min amount and within cap\n    function validPurchase() internal view returns (bool) {\n        bool withinPeriod = startDate <= block.timestamp && endDate >= block.timestamp;\n        bool nonZeroPurchase = msg.value != 0;\n        bool minAmount = msg.value >= minimumParticipationAmount;\n        bool withinCap = weiRaised.safeAdd(msg.value) <= cap;\n\n        return withinPeriod && nonZeroPurchase && minAmount && !isFinalized && withinCap;\n    }\n\n    // @return true if the goal is reached\n    function capReached() public view returns (bool) {\n        return weiRaised >= cap;\n    }\n\n    function minimumCapReached() public view returns (bool) {\n        return weiRaised >= minimumToRaise;\n    }\n\n    function claimBack() public {\n        require(isCanceled, \"The presale is not canceled, claiming back is not possible\");\n        require(participations[msg.sender] > 0, \"The sender didn't participate to the presale\");\n        uint256 participation = participations[msg.sender];\n        participations[msg.sender] = 0;\n        msg.sender.transfer(participation);\n        emit ClaimBack(msg.sender, participation);\n    }\n\n    function cancelSaleIfCapNotReached() public onlyAdmin {\n        require(weiRaised < minimumToRaise, \"The amount raised must not exceed the minimum cap\");\n        require(!isCanceled, \"The presale must not be canceled\");\n        require(endDate > block.timestamp, \"The presale must not have ended\");\n        isCanceled = true;\n    }\n}\n\ncontract CsnCrowdPreSale is CsnCrowdSaleBase {\n    using SafeMath for uint256;\n\n    constructor() public {\n        token = new MOCoinstantine(6000000);\n        startDate = 1561968000; //Mon, 1 Jul 2019 08:00:00 +00:00\n        endDate = 1565827199; //Wed, 14 Aug 2019 23:59:59 +00:00\n        minimumParticipationAmount = 100000000000000000 wei; //0.1 Ether\n        minimumToRaise = 400000000000000000000; // 400 Ether\n        baseRate = 1000;\n        cap = 4000000000000000000000 wei; //4000 ether\n        capBonus1 = 0; // 0 ether\n        capBonus2 = 1000000000000000000000; // 1000 ether\n        capBonus3 = 3000000000000000000000; // 3000 ether\n        bonus1 = 300;\n        bonus2 = 150;\n        bonus3 = 50;\n    }\n}\n\ncontract CsnCrowdSale is CsnCrowdSaleBase {\n    using SafeMath for uint256;\n\n    constructor() public {\n        token = new MOCoinstantine(50000000);\n        startDate = 1569916800; //Tue, 1 Oct 2019 08:00:00 +00:00\n        endDate = 1575158399; //Sun, 30 Nov 2019 23:59:59 +00:00\n        minimumParticipationAmount = 100000000000000000 wei; // 0.1 Ether\n        minimumToRaise = 4000000000000000000000; // 4.000 Ether\n        baseRate = 500;\n        cap = 100000000000000000000000 wei; //100.000 ether\n        // No bonus\n        capBonus1 = 0; // 0 ether\n        capBonus2 = 0; // 0 ether\n        capBonus3 = 0; // 0 ether\n        bonus1 = 0;\n        bonus2 = 0;\n        bonus3 = 0;\n    }\n}\n\ncontract TestCrowdSaleEnded is CsnCrowdSaleBase {\n    using SafeMath for uint256;\n\n    constructor() public {\n        token = new MOCoinstantine(100000);\n        startDate = 1525940887; // 10 May 2018\n        endDate = 1539160087; // 10 Oct 2018\n        minimumParticipationAmount = 100000000000000000 wei; //0.1 Ether\n        minimumToRaise = 400000000000000000000; // 400 Ether\n        baseRate = 1000;\n        cap = 4000000000000000000000 wei; //4000 ether\n        capBonus1 = 0; // 0 ether\n        capBonus2 = 1000000000000000000000; // 1000 ether\n        capBonus3 = 3000000000000000000000; // 3000 ether\n        bonus1 = 300;\n        bonus2 = 150;\n        bonus3 = 50;\n    }\n}\n\ncontract TestCrowdSaleStarted is CsnCrowdSaleBase {\n    using SafeMath for uint256;\n\n    constructor() public {\n        token = new MOCoinstantine(100000);\n        startDate = 1557377510; // 9 May 2019\n        endDate = 1575158399; // 10 Oct 2019\n        minimumParticipationAmount = 100000000000000000 wei; //0.1 Ether\n        minimumToRaise = 400000000000000000000; // 400 Ether\n        baseRate = 1000;\n        cap = 4000000000000000000000 wei; //4000 ether\n        capBonus1 = 0; // 0 ether\n        capBonus2 = 1000000000000000000000; // 1000 ether\n        capBonus3 = 3000000000000000000000; // 3000 ether\n        bonus1 = 300;\n        bonus2 = 150;\n        bonus3 = 50;\n    }\n}\n\ncontract TestCrowdSale is CsnCrowdSaleBase {\n    using SafeMath for uint256;\n\n    constructor() public {\n        token = new MOCoinstantine(2600);\n        startDate = 1557377510; // 9 May 2019\n        endDate = 1575158399; // 10 Oct 2019\n        minimumParticipationAmount = 100000000000000000 wei; //0.1 Ether\n        minimumToRaise = 1000000000000000000; // 1 Ether\n        baseRate = 1000;\n        cap = 2000000000000000000 wei; //2 ether\n        capBonus1 = 0; // 0 ether\n        capBonus2 = 1000000000000000000; // 1 ether\n        capBonus3 = 1500000000000000000; // 1.5 ether\n        bonus1 = 300;\n        bonus2 = 150;\n        bonus3 = 50;\n    }\n}\n\ncontract TestCrowdSaleAboveSupply is CsnCrowdSaleBase {\n    using SafeMath for uint256;\n\n    constructor() public {\n        token = new MOCoinstantine(500);\n        startDate = 1557377510; // 9 May 2019\n        endDate = 1575158399; // 10 Oct 2019\n        minimumParticipationAmount = 100000000000000000 wei; //0.1 Ether\n        minimumToRaise = 1000000000000000000; // 1 Ether\n        baseRate = 1000;\n        cap = 2000000000000000000 wei; //2 ether\n        capBonus1 = 0; // 0 ether\n        capBonus2 = 1000000000000000000; // 1 ether\n        capBonus3 = 1500000000000000000; // 1.5 ether\n        bonus1 = 300;\n        bonus2 = 150;\n        bonus3 = 50;\n    }\n}",
  "bytecode": "6080604052600f805461ffff1916905534801561001b57600080fd5b50600080546001600160a01b031990811633179091556005805490911673d21662630913eb962c186c4a4b5834409226b65a179055604051625b8d80906100619061011e565b90815260405190819003602001906000f080158015610084573d6000803e3d6000fd5b50600f80546001600160a01b0392909216620100000262010000600160b01b0319909216919091179055635d19bd80600155635d54a07f60025567016345785d8a00006003556815af1d78b58c4000006004556103e860065568d8d726b7177a8000006007556000600855683635c9adc5dea0000060095568a2a15d09519be00000600a5561012c600b556096600c556032600d5561012b565b610e1c8061193983390190565b6117ff8061013a6000396000f3fe6080604052600436106101f85760003560e01c806357f98d321161010d578063d0febe4c116100a0578063f41e60c51161006f578063f41e60c5146105d2578063f5074f41146105fe578063f851a44014610631578063fc0c546a14610646578063fc9541441461065b576101f8565b8063d0febe4c1461054f578063deaa59df14610557578063f2d94aa91461058a578063f2fde38b1461059f576101f8565b806383197ef0116100dc57806383197ef0146104fb5780638d4e4083146105105780639b8c3e2114610525578063c24a0f8b1461053a576101f8565b806357f98d3214610470578063679aefce146104a35780636c4470fb146104b85780637e06b8b6146104e6576101f8565b8063367265fb116101905780634f9359451161015f5780634f935945146103eb578063521eb273146104005780635228cee914610431578063544736e61461044657806354f628531461045b576101f8565b8063367265fb1461035e5780634042b66f1461039757806345737b1e146103ac5780634bb278f3146103d6576101f8565b8063105ea540116101cc578063105ea540146102c55780631f68f20a146102da5780633548fff9146102ef578063355274ea14610349576101f8565b8062739f2a146102365780630683d56a146102605780630b97bc86146102875780630ed5a9331461029c575b6005546001600160a01b0316331480159061021257503315155b80156102265750600f54610100900460ff16155b15610234576102343461068e565b005b34801561024257600080fd5b506102346004803603602081101561025957600080fd5b5035610974565b34801561026c57600080fd5b506102756109c9565b60408051918252519081900360200190f35b34801561029357600080fd5b506102756109cf565b3480156102a857600080fd5b506102b16109d5565b604080519115158252519081900360200190f35b3480156102d157600080fd5b506102756109e3565b3480156102e657600080fd5b506102756109e9565b3480156102fb57600080fd5b506103196004803603602081101561031257600080fd5b50356109ef565b604080516001600160a01b0390951685526020850193909352838301919091526060830152519081900360800190f35b34801561035557600080fd5b50610275610a5a565b34801561036a57600080fd5b506102346004803603604081101561038157600080fd5b506001600160a01b038135169060200135610a60565b3480156103a357600080fd5b50610275610c3f565b3480156103b857600080fd5b50610234600480360360208110156103cf57600080fd5b5035610c45565b3480156103e257600080fd5b50610234610c9a565b3480156103f757600080fd5b506102b1610d7d565b34801561040c57600080fd5b50610415610d88565b604080516001600160a01b039092168252519081900360200190f35b34801561043d57600080fd5b506102b1610d97565b34801561045257600080fd5b506102b1610da2565b34801561046757600080fd5b50610275610dab565b34801561047c57600080fd5b506102b16004803603602081101561049357600080fd5b50356001600160a01b0316610db1565b3480156104af57600080fd5b50610275610df8565b3480156104c457600080fd5b506104cd610e4e565b6040805192835260208301919091528051918290030190f35b3480156104f257600080fd5b50610275610e57565b34801561050757600080fd5b50610234610e5d565b34801561051c57600080fd5b506102b1610ebb565b34801561053157600080fd5b50610234610ec4565b34801561054657600080fd5b50610275610fd6565b610234610fdc565b34801561056357600080fd5b506102346004803603602081101561057a57600080fd5b50356001600160a01b031661103c565b34801561059657600080fd5b506102346110ae565b3480156105ab57600080fd5b50610234600480360360208110156105c257600080fd5b50356001600160a01b031661120d565b3480156105de57600080fd5b50610234600480360360208110156105f557600080fd5b503515156112dd565b34801561060a57600080fd5b506102346004803603602081101561062157600080fd5b50356001600160a01b031661139e565b34801561063d57600080fd5b506104156113fa565b34801561065257600080fd5b50610415611409565b34801561066757600080fd5b506102756004803603602081101561067e57600080fd5b50356001600160a01b031661141e565b610696611430565b6106ea5760408051600160e51b62461bcd02815260206004820152601f60248201527f526571756972656d656e747320746f2062757920617265206e6f74206d657400604482015290519081900360640190fd5b60006106f4610df8565b33600090815260106020526040812054919250908190819081908190610720908863ffffffff6114a916565b336000818152601060205260409020919091556107459060119063ffffffff6114cb16565b156107fc57620144383a029450610762878663ffffffff6114a916565b9350610774848763ffffffff6114ec16565b925061078e83670de0b6b3a764000063ffffffff61150b16565b91506107986116eb565b6107a960113363ffffffff61153a16565b6040805160808101825282546001600160a01b0316815260018301546020820152600283015491810182905260039092015460608301529091506107f490849063ffffffff6114a916565b915050610846565b620445c03a029450610814878663ffffffff6114a916565b9350610826848763ffffffff6114ec16565b925061084083670de0b6b3a764000063ffffffff61150b16565b91508190505b60408051608081018252338082526000908152601060209081529083902054908201529081018290524260608201526108879060119063ffffffff61156016565b61088f61167b565b600e546108a2908863ffffffff6114a916565b600e55600f5460408051600160e11b630d447983028152336004820152602481018590529051620100009092046001600160a01b031691631a88f306916044808201926020929091908290030181600087803b15801561090157600080fd5b505af1158015610915573d6000803e3d6000fd5b505050506040513d602081101561092b57600080fd5b505060408051888152602081018490528151339283927e77a7b9b8b8207f3903ca75eade7730a828eadd952909ed2de6b640b069fb17929081900390910190a350505050505050565b6000546001600160a01b031633146109c45760408051600160e51b62461bcd02815260206004820152601a602482015260008051602061171d833981519152604482015290519081900360640190fd5b600155565b60035481565b60015481565b600f54610100900460ff1681565b60045481565b60065481565b6000806000806109fd6116eb565b610a0e60118763ffffffff6116b716565b6040805160808101825282546001600160a01b03168082526001840154602083018190526002850154938301849052600390940154606090920182905299929850909650945092505050565b60075481565b6000546001600160a01b03163314610ab05760408051600160e51b62461bcd02815260206004820152601a602482015260008051602061171d833981519152604482015290519081900360640190fd5b6001600160a01b038216610b0e5760408051600160e51b62461bcd02815260206004820152601560248201527f616464726573732063616e2774206265206e756c6c0000000000000000000000604482015290519081900360640190fd5b60008111610b665760408051600160e51b62461bcd02815260206004820152601c60248201527f616d6f756e742073686f756c642067726561746572207468616e203000000000604482015290519081900360640190fd5b600f5460408051600160e11b630d4479830281526001600160a01b0385811660048301526024820185905291516201000090930490911691631a88f306916044808201926020929091908290030181600087803b158015610bc657600080fd5b505af1158015610bda573d6000803e3d6000fd5b505050506040513d6020811015610bf057600080fd5b505060055460408051600081526020810184905281516001600160a01b038087169416927e77a7b9b8b8207f3903ca75eade7730a828eadd952909ed2de6b640b069fb17928290030190a35050565b600e5481565b6000546001600160a01b03163314610c955760408051600160e51b62461bcd02815260206004820152601a602482015260008051602061171d833981519152604482015290519081900360640190fd5b600255565b6000546001600160a01b03163314610cea5760408051600160e51b62461bcd02815260206004820152601a602482015260008051602061171d833981519152604482015290519081900360640190fd5b600f5460ff1615610d455760408051600160e51b62461bcd02815260206004820152601460248201527f497320616c72656164792066696e616c69736564000000000000000000000000604482015290519081900360640190fd5b6040517f6823b073d48d6e3a7d385eeb601452d680e74bb46afe3255a7d778f3a9b1768190600090a1600f805460ff19166001179055565b600754600e54101590565b6005546001600160a01b031681565b600454600e54101590565b60015442101590565b60125490565b6000610df26040518060800160405280846001600160a01b0316815260200160008152602001600081526020014281525060116116c990919063ffffffff16565b92915050565b600a54600e54600091829110610e115750600d54610e35565b600954600e5410610e255750600c54610e35565b600854600e5410610e355750600b545b600654610e48908263ffffffff6114a916565b91505090565b60125460135482565b60135490565b6000546001600160a01b03163314610ead5760408051600160e51b62461bcd02815260206004820152601a602482015260008051602061171d833981519152604482015290519081900360640190fd5b6000546001600160a01b0316ff5b600f5460ff1681565b600f54610100900460ff16610f0d57604051600160e51b62461bcd02815260040180806020018281038252603a81526020018061173d603a913960400191505060405180910390fd5b33600090815260106020526040902054610f5b57604051600160e51b62461bcd02815260040180806020018281038252602c8152602001806117a8602c913960400191505060405180910390fd5b33600081815260106020526040808220805490839055905190929183156108fc02918491818181858888f19350505050158015610f9c573d6000803e3d6000fd5b5060408051828152905133917ff390aa3ace3c4b1c95c023264ce863df124c65b78d546b3aca37f3b6526b33a7919081900360200190a250565b60025481565b336110315760408051600160e51b62461bcd02815260206004820152601260248201527f43616e27742062792066726f6d206e756c6c0000000000000000000000000000604482015290519081900360640190fd5b61103a3461068e565b565b6000546001600160a01b0316331461108c5760408051600160e51b62461bcd02815260206004820152601a602482015260008051602061171d833981519152604482015290519081900360640190fd5b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146110fe5760408051600160e51b62461bcd02815260206004820152601a602482015260008051602061171d833981519152604482015290519081900360640190fd5b600454600e541061114357604051600160e51b62461bcd0281526004018080602001828103825260318152602001806117776031913960400191505060405180910390fd5b600f54610100900460ff16156111a35760408051600160e51b62461bcd02815260206004820181905260248201527f5468652070726573616c65206d757374206e6f742062652063616e63656c6564604482015290519081900360640190fd5b42600254116111fc5760408051600160e51b62461bcd02815260206004820152601f60248201527f5468652070726573616c65206d757374206e6f74206861766520656e64656400604482015290519081900360640190fd5b600f805461ff001916610100179055565b6000546001600160a01b0316331461125d5760408051600160e51b62461bcd02815260206004820152601a602482015260008051602061171d833981519152604482015290519081900360640190fd5b6001600160a01b0381166112bb5760408051600160e51b62461bcd02815260206004820152601760248201527f4e65772061646d696e2063616e2774206265206e756c6c000000000000000000604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461132d5760408051600160e51b62461bcd02815260206004820152601a602482015260008051602061171d833981519152604482015290519081900360640190fd5b600f5460408051600160e01b63f41e60c502815283151560048201529051620100009092046001600160a01b03169163f41e60c59160248082019260009290919082900301818387803b15801561138357600080fd5b505af1158015611397573d6000803e3d6000fd5b5050505050565b6000546001600160a01b031633146113ee5760408051600160e51b62461bcd02815260206004820152601a602482015260008051602061171d833981519152604482015290519081900360640190fd5b806001600160a01b0316ff5b6000546001600160a01b031681565b600f546201000090046001600160a01b031681565b60106020526000908152604090205481565b600080426001541115801561144757504260025410155b600354600754600e549293503480151593928110159260009291611471919063ffffffff6114a916565b1115905083801561147f5750825b80156114885750815b80156114975750600f5460ff16155b80156114a05750805b94505050505090565b60008282018381108015906114be5750828110155b6114c457fe5b9392505050565b6001600160a01b031660009081526004919091016020526040902054151590565b60008282028315806114be57508284828161150357fe5b04146114c457fe5b600080821161151657fe5b600082848161152157fe5b04905082848161152d57fe5b068184020184146114c457fe5b6001600160a01b0316600090815260048201602090815260408083205483529290522090565b80516001600160a01b0316600090815260038301602052604090205460ff1661161b576002828101805460019081019182905580850180548201905583516001600160a01b03908116600090815260048701602090815260408083208690558751841683526003808a018352818420805460ff19168717905595835288825291829020875181546001600160a01b03191694169390931783558601519282019290925590840151928101929092556060830151910155611677565b80516001600160a01b039081166000908152600484016020908152604080832054835285825291829020845181546001600160a01b03191694169390931783558301516001830155820151600282015560608201516003909101555b5050565b6005546040516001600160a01b03909116903480156108fc02916000818181858888f193505050501580156116b4573d6000803e3d6000fd5b50565b60009081526020919091526040902090565b516001600160a01b031660009081526004919091016020526040902054151590565b604051806080016040528060006001600160a01b03168152602001600081526020016000815260200160008152509056fe46756e6374696f6e20726573657276656420746f2061646d696e0000000000005468652070726573616c65206973206e6f742063616e63656c65642c20636c61696d696e67206261636b206973206e6f7420706f737369626c6554686520616d6f756e7420726169736564206d757374206e6f742065786365656420746865206d696e696d756d206361705468652073656e646572206469646e277420706172746963697061746520746f207468652070726573616c65a165627a7a72305820f72b906b5263d48765cb9bd074b4d4f3b2a0178fbbd3a6cb6db8a08a5e9109910029608060405260028054600160a01b60ff0219169055600060035534801561002557600080fd5b50604051602080610e1c8339810180604052602081101561004557600080fd5b5051600280546001600160a01b031916339081179091556003829055600090815260208190526040902055610d9d8061007f6000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063a3f4df7e116100ad578063f2fde38b11610071578063f2fde38b1461036b578063f41e60c514610391578063f5074f41146103b0578063f76f8d78146103d6578063f851a440146103de57610121565b8063a3f4df7e14610266578063a53ba959146102e3578063a9059cbb146102eb578063dd62ed3e14610317578063e3d670d71461034557610121565b80632e0f2625116100f45780632e0f2625146101e25780635c6581651461020057806370a082311461022e57806383197ef01461025457806394a08c691461025e57610121565b8063095ea7b31461012657806318160ddd146101665780631a88f3061461018057806323b872dd146101ac575b600080fd5b6101526004803603604081101561013c57600080fd5b506001600160a01b038135169060200135610402565b604080519115158252519081900360200190f35b61016e610477565b60408051918252519081900360200190f35b6101526004803603604081101561019657600080fd5b506001600160a01b03813516906020013561047d565b610152600480360360608110156101c257600080fd5b506001600160a01b038135811691602081013590911690604001356104da565b6101ea610551565b6040805160ff9092168252519081900360200190f35b61016e6004803603604081101561021657600080fd5b506001600160a01b0381358116916020013516610556565b61016e6004803603602081101561024457600080fd5b50356001600160a01b0316610573565b61025c61058e565b005b61016e6105ec565b61026e6105f2565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102a8578181015183820152602001610290565b50505050905090810190601f1680156102d55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61015261062b565b6101526004803603604081101561030157600080fd5b506001600160a01b03813516906020013561063b565b61016e6004803603604081101561032d57600080fd5b506001600160a01b038135811691602001351661069f565b61016e6004803603602081101561035b57600080fd5b50356001600160a01b03166106ca565b61025c6004803603602081101561038157600080fd5b50356001600160a01b03166106dc565b61025c600480360360208110156103a757600080fd5b503515156107ac565b61025c600480360360208110156103c657600080fd5b50356001600160a01b031661082b565b61026e610887565b6103e66108a9565b604080516001600160a01b039092168252519081900360200190f35b600254600090600160a01b900460ff166104665760408051600160e51b62461bcd02815260206004820152601d60248201527f5472616e736665727320617265206e6f7420616c6c6f77656420796574000000604482015290519081900360640190fd5b61047083836108b8565b9392505050565b60035490565b6002546000906001600160a01b031633146104d05760408051600160e51b62461bcd02815260206004820152601a6024820152600080516020610d52833981519152604482015290519081900360640190fd5b610470838361097f565b600254600090600160a01b900460ff1661053e5760408051600160e51b62461bcd02815260206004820152601d60248201527f5472616e736665727320617265206e6f7420616c6c6f77656420796574000000604482015290519081900360640190fd5b610549848484610a85565b949350505050565b600081565b600160209081526000928352604080842090915290825290205481565b6001600160a01b031660009081526020819052604090205490565b6002546001600160a01b031633146105de5760408051600160e51b62461bcd02815260206004820152601a6024820152600080516020610d52833981519152604482015290519081900360640190fd5b6002546001600160a01b0316ff5b60035481565b6040518060400160405280600e81526020017f4d4f436f696e7374616e74696e6500000000000000000000000000000000000081525081565b600254600160a01b900460ff1681565b600254600090600160a01b900460ff166104d05760408051600160e51b62461bcd02815260206004820152601d60248201527f5472616e736665727320617265206e6f7420616c6c6f77656420796574000000604482015290519081900360640190fd5b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60006020819052908152604090205481565b6002546001600160a01b0316331461072c5760408051600160e51b62461bcd02815260206004820152601a6024820152600080516020610d52833981519152604482015290519081900360640190fd5b6001600160a01b03811661078a5760408051600160e51b62461bcd02815260206004820152601760248201527f4e65772061646d696e2063616e2774206265206e756c6c000000000000000000604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031633146107fc5760408051600160e51b62461bcd02815260206004820152601a6024820152600080516020610d52833981519152604482015290519081900360640190fd5b60028054911515600160a01b0274ff000000000000000000000000000000000000000019909216919091179055565b6002546001600160a01b0316331461087b5760408051600160e51b62461bcd02815260206004820152601a6024820152600080516020610d52833981519152604482015290519081900360640190fd5b806001600160a01b0316ff5b604051806040016040528060038152602001600160e81b624d4f430281525081565b6002546001600160a01b031681565b60006001600160a01b0383166109185760408051600160e51b62461bcd02815260206004820152601560248201527f7370656e6465722063616e2774206265206e756c6c0000000000000000000000604482015290519081900360640190fd5b3360008181526001602090815260408083206001600160a01b03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60006001600160a01b0383166109d75760408051600160e51b62461bcd0281526020600482015260126024820152600160721b7110d85b89dd081cd95b99081d1bc81b9d5b1b02604482015290519081900360640190fd5b336000908152602081905260409020546109f7908363ffffffff610d2416565b33600090815260208190526040808220929092556001600160a01b03851681522054610a29908363ffffffff610d3616565b6001600160a01b038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b60006001600160a01b038316610add5760408051600160e51b62461bcd0281526020600482015260126024820152600160721b7110d85b89dd081cd95b99081d1bc81b9d5b1b02604482015290519081900360640190fd5b6001600160a01b038316301415610b3e5760408051600160e51b62461bcd02815260206004820152601660248201527f43616e27742073656e6420746f20636f6e747261637400000000000000000000604482015290519081900360640190fd5b6001600160a01b03841660009081526001602090815260408083203384529091529020548083111580610b7957506001600160a01b03851633145b610bcd5760408051600160e51b62461bcd02815260206004820152601d60248201527f4e6f7420616c6c6f77656420746f2073656e642074686174206d756368000000604482015290519081900360640190fd5b6001600160a01b038416600090815260208190526040902054610bf6908463ffffffff610d3616565b6001600160a01b038086166000908152602081905260408082209390935590871681522054610c2b908463ffffffff610d2416565b6001600160a01b03861660009081526020818152604080832093909355600181528282203383529052205460001914801590610c7057506001600160a01b0385163314155b15610cce576001600160a01b0385166000908152600160209081526040808320338452909152902054610ca9908463ffffffff610d2416565b6001600160a01b03861660009081526001602090815260408083203384529091529020555b836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3506001949350505050565b600082821115610d3057fe5b50900390565b6000828201838110801590610d4b5750828110155b61047057fefe46756e6374696f6e20726573657276656420746f2061646d696e000000000000a165627a7a72305820b397c1d55ce0b69ccbbba30b225599eee8324c138e1df1e3af66f5d390253f790029"
}