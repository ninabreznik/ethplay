{
  "address": "0x406a112f3218b988c66778fd72fc8467f2601366",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ManagerProxy",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-22\n*/\n\npragma solidity 0.4.18;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\ncontract IController is Pausable {\n    event SetContractInfo(bytes32 id, address contractAddress, bytes20 gitCommitHash);\n\n    function setContractInfo(bytes32 _id, address _contractAddress, bytes20 _gitCommitHash) external;\n    function updateController(bytes32 _id, address _controller) external;\n    function getContract(bytes32 _id) public view returns (address);\n}\n\ncontract IManager {\n    event SetController(address controller);\n    event ParameterUpdate(string param);\n\n    function setController(address _controller) external;\n}\n\ncontract Manager is IManager {\n    // Controller that contract is registered with\n    IController public controller;\n\n    // Check if sender is controller\n    modifier onlyController() {\n        require(msg.sender == address(controller));\n        _;\n    }\n\n    // Check if sender is controller owner\n    modifier onlyControllerOwner() {\n        require(msg.sender == controller.owner());\n        _;\n    }\n\n    // Check if controller is not paused\n    modifier whenSystemNotPaused() {\n        require(!controller.paused());\n        _;\n    }\n\n    // Check if controller is paused\n    modifier whenSystemPaused() {\n        require(controller.paused());\n        _;\n    }\n\n    function Manager(address _controller) public {\n        controller = IController(_controller);\n    }\n\n    /*\n     * @dev Set controller. Only callable by current controller\n     * @param _controller Controller contract address\n     */\n    function setController(address _controller) external onlyController {\n        controller = IController(_controller);\n\n        SetController(_controller);\n    }\n}\n\n/**\n * @title ManagerProxyTarget\n * @dev The base contract that target contracts used by a proxy contract should inherit from\n * Note: Both the target contract and the proxy contract (implemented as ManagerProxy) MUST inherit from ManagerProxyTarget in order to guarantee\n * that both contracts have the same storage layout. Differing storage layouts in a proxy contract and target contract can\n * potentially break the delegate proxy upgradeability mechanism\n */\ncontract ManagerProxyTarget is Manager {\n    // Used to look up target contract address in controller's registry\n    bytes32 public targetContractId;\n}\n\n/**\n * @title ManagerProxy\n * @dev A proxy contract that uses delegatecall to execute function calls on a target contract using its own storage context.\n * The target contract is a Manager contract that is registered with the Controller.\n * Note: Both this proxy contract and its target contract MUST inherit from ManagerProxyTarget in order to guarantee\n * that both contracts have the same storage layout. Differing storage layouts in a proxy contract and target contract can\n * potentially break the delegate proxy upgradeability mechanism\n */\ncontract ManagerProxy is ManagerProxyTarget {\n    /**\n     * @dev ManagerProxy constructor. Invokes constructor of base Manager contract with provided Controller address.\n     * Also, sets the contract ID of the target contract that function calls will be executed on.\n     * @param _controller Address of Controller that this contract will be registered with\n     * @param _targetContractId contract ID of the target contract\n     */\n    function ManagerProxy(address _controller, bytes32 _targetContractId) public Manager(_controller) {\n        targetContractId = _targetContractId;\n    }\n\n    /**\n     * @dev Uses delegatecall to execute function calls on this proxy contract's target contract using its own storage context.\n     * This fallback function will look up the address of the target contract using the Controller and the target contract ID.\n     * It will then use the calldata for a function call as the data payload for a delegatecall on the target contract. The return value\n     * of the executed function call will also be returned\n     */\n    function() public payable {\n        address target = controller.getContract(targetContractId);\n        // Target contract must be registered\n        require(target > 0);\n\n        assembly {\n            // Solidity keeps a free memory pointer at position 0x40 in memory\n            let freeMemoryPtrPosition := 0x40\n            // Load the free memory pointer\n            let calldataMemoryOffset := mload(freeMemoryPtrPosition)\n            // Update free memory pointer to after memory space we reserve for calldata\n            mstore(freeMemoryPtrPosition, add(calldataMemoryOffset, calldatasize))\n            // Copy calldata (method signature and params of the call) to memory\n            calldatacopy(calldataMemoryOffset, 0x0, calldatasize)\n\n            // Call method on target contract using calldata which is loaded into memory\n            let ret := delegatecall(gas, target, calldataMemoryOffset, calldatasize, 0, 0)\n\n            // Load the free memory pointer\n            let returndataMemoryOffset := mload(freeMemoryPtrPosition)\n            // Update free memory pointer to after memory space we reserve for returndata\n            mstore(freeMemoryPtrPosition, add(returndataMemoryOffset, returndatasize))\n            // Copy returndata (result of the method invoked by the delegatecall) to memory\n            returndatacopy(returndataMemoryOffset, 0x0, returndatasize)\n\n            switch ret\n            case 0 {\n                // Method call failed - revert\n                // Return any error message stored in mem[returndataMemoryOffset..(returndataMemoryOffset + returndatasize)]\n                revert(returndataMemoryOffset, returndatasize)\n            } default {\n                // Return result of method call stored in mem[returndataMemoryOffset..(returndataMemoryOffset + returndatasize)]\n                return(returndataMemoryOffset, returndatasize)\n            }\n        }\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"targetContractId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"},{\"name\":\"_targetContractId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"SetController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"param\",\"type\":\"string\"}],\"name\":\"ParameterUpdate\",\"type\":\"event\"}]",
  "bytecode": "6060604052341561000f57600080fd5b6040516040806102c1833981016040528080519190602001805160008054600160a060020a03909516600160a060020a03199095169490941790935550506001556102628061005f6000396000f3006060604052600436106100565763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166351720b41811461012957806392eefe9b1461014e578063f77c47911461016f575b60008054600154600160a060020a039091169063e16c7d989083604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff84160281526004810191909152602401602060405180830381600087803b15156100c657600080fd5b6102c65a03f115156100d757600080fd5b50505060405180519150506000600160a060020a038216116100f857600080fd5b60408051368101825236600082376000803683865af482513d810184523d6000823e818015610125573d82f35b3d82fd5b341561013457600080fd5b61013c61019e565b60405190815260200160405180910390f35b341561015957600080fd5b61016d600160a060020a03600435166101a4565b005b341561017a57600080fd5b610182610227565b604051600160a060020a03909116815260200160405180910390f35b60015481565b60005433600160a060020a039081169116146101bf57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790557f4ff638452bbf33c012645d18ae6f05515ff5f2d1dfb0cece8cbf018c60903f7081604051600160a060020a03909116815260200160405180910390a150565b600054600160a060020a0316815600a165627a7a7230582068a9b6028b9efa42cdc837db1b6d1cd0868954328ea40d6a67a76b72c0f8feb80029000000000000000000000000f96d54e490317c557a967abfa5d6e33006be69b3a65c3dc1a85422ba3e6003be871c3339b882a9c28fc454085d394e4b6436d564",
  "constructorArguments": "000000000000000000000000f96d54e490317c557a967abfa5d6e33006be69b3a65c3dc1a85422ba3e6003be871c3339b882a9c28fc454085d394e4b6436d564"
}