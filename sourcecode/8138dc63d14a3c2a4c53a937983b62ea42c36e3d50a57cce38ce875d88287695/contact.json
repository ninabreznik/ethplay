{
  "address": "0xbdf97b0f5fa78beae684d9fb67dd45f11b996e46",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Identity",
  "compilerVersion": "v0.5.6+commit.b259423e",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-07\n*/\n\npragma solidity ^0.5.6;\n\nlibrary SafeMath {\n\n    function mul(uint a, uint b) internal pure returns (uint) {\n        uint c = a * b;\n        require(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint a, uint b) internal pure returns (uint) {\n        require(b > 0);\n        uint c = a / b;\n        require(a == b * c + a % b);\n        return c;\n    }\n\n    function sub(uint a, uint b) internal pure returns (uint) {\n        require(b <= a);\n        return a - b;\n    }\n\n    function add(uint a, uint b) internal pure returns (uint) {\n        uint c = a + b;\n        require(c >= a);\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a < b ? a : b;\n    }\n\n    function max256(uint a, uint b) internal pure returns (uint) {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint a, uint b) internal pure returns (uint) {\n        return a < b ? a : b;\n    }\n}\n\ninterface GeneralERC20 {\n\tfunction transfer(address to, uint256 value) external;\n\tfunction transferFrom(address from, address to, uint256 value) external;\n\tfunction approve(address spender, uint256 value) external;\n\tfunction balanceOf(address spender) external view returns (uint);\n}\n\nlibrary SafeERC20 {\n\tfunction checkSuccess()\n\t\tprivate\n\t\tpure\n\t\treturns (bool)\n\t{\n\t\tuint256 returnValue = 0;\n\n\t\tassembly {\n\t\t\t// check number of bytes returned from last function call\n\t\t\tswitch returndatasize\n\n\t\t\t// no bytes returned: assume success\n\t\t\tcase 0x0 {\n\t\t\t\treturnValue := 1\n\t\t\t}\n\n\t\t\t// 32 bytes returned: check if non-zero\n\t\t\tcase 0x20 {\n\t\t\t\t// copy 32 bytes into scratch space\n\t\t\t\treturndatacopy(0x0, 0x0, 0x20)\n\n\t\t\t\t// load those bytes into returnValue\n\t\t\t\treturnValue := mload(0x0)\n\t\t\t}\n\n\t\t\t// not sure what was returned: don't mark as success\n\t\t\tdefault { }\n\t\t}\n\n\t\treturn returnValue != 0;\n\t}\n\n\tfunction transfer(address token, address to, uint256 amount) internal {\n\t\tGeneralERC20(token).transfer(to, amount);\n\t\trequire(checkSuccess());\n\t}\n\n\tfunction transferFrom(address token, address from, address to, uint256 amount) internal {\n\t\tGeneralERC20(token).transferFrom(from, to, amount);\n\t\trequire(checkSuccess());\n\t}\n\n\tfunction approve(address token, address spender, uint256 amount) internal {\n\t\tGeneralERC20(token).approve(spender, amount);\n\t\trequire(checkSuccess());\n\t}\n}\n\nlibrary SignatureValidator {\n\tenum SignatureMode {\n\t\tNO_SIG,\n\t\tEIP712,\n\t\tGETH,\n\t\tTREZOR,\n\t\tADEX\n\t}\n\n\tfunction recoverAddr(bytes32 hash, bytes32[3] memory signature) internal pure returns (address) {\n\t\tSignatureMode mode = SignatureMode(uint8(signature[0][0]));\n\n\t\tif (mode == SignatureMode.NO_SIG) {\n\t\t\treturn address(0x0);\n\t\t}\n\n\t\tuint8 v = uint8(signature[0][1]);\n\n\t\tif (mode == SignatureMode.GETH) {\n\t\t\thash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n\t\t} else if (mode == SignatureMode.TREZOR) {\n\t\t\thash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\\x20\", hash));\n\t\t} else if (mode == SignatureMode.ADEX) {\n\t\t\thash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n108By signing this message, you acknowledge signing an AdEx bid with the hash:\\n\", hash));\n\t\t}\n\n\t\treturn ecrecover(hash, v, signature[1], signature[2]);\n\t}\n\n\t/// @dev Validates that a hash was signed by a specified signer.\n\t/// @param hash Hash which was signed.\n\t/// @param signer Address of the signer.\n\t/// @param signature ECDSA signature along with the mode [{mode}{v}, {r}, {s}]\n\t/// @return Returns whether signature is from a specified user.\n\tfunction isValidSignature(bytes32 hash, address signer, bytes32[3] memory signature) internal pure returns (bool) {\n\t\treturn recoverAddr(hash, signature) == signer;\n\t}\n}\n\n\nlibrary ChannelLibrary {\n\tuint constant MAX_VALIDITY = 365 days;\n\n\t// Both numbers are inclusive\n\tuint constant MIN_VALIDATOR_COUNT = 2;\n\t// This is an arbitrary number, but we impose this limit to restrict on-chain load; also to ensure the *3 operation is safe\n\tuint constant MAX_VALIDATOR_COUNT = 25;\n\n\tenum State {\n\t\tUnknown,\n\t\tActive,\n\t\tExpired\n\t}\n\n\tstruct Channel {\n\t\taddress creator;\n\n\t\taddress tokenAddr;\n\t\tuint tokenAmount;\n\n\t\tuint validUntil;\n\n\t\taddress[] validators;\n\n\t\t// finally, arbitrary bytes32 that allows to... @TODO document that this acts as a nonce\n\t\tbytes32 spec;\n\t}\n\n\tfunction hash(Channel memory channel)\n\t\tinternal\n\t\tview\n\t\treturns (bytes32)\n\t{\n\t\t// In this version of solidity, we can no longer keccak256() directly\n\t\treturn keccak256(abi.encode(\n\t\t\taddress(this),\n\t\t\tchannel.creator,\n\t\t\tchannel.tokenAddr,\n\t\t\tchannel.tokenAmount,\n\t\t\tchannel.validUntil,\n\t\t\tchannel.validators,\n\t\t\tchannel.spec\n\t\t));\n\t}\n\n\tfunction isValid(Channel memory channel, uint currentTime)\n\t\tinternal\n\t\tpure\n\t\treturns (bool)\n\t{\n\t\t// NOTE: validators[] can be sybil'd by passing the same addr a few times\n\t\t// this does not matter since you can sybil validators[] anyway, and that is mitigated off-chain\n\t\tif (channel.validators.length < MIN_VALIDATOR_COUNT) {\n\t\t\treturn false;\n\t\t}\n\t\tif (channel.validators.length > MAX_VALIDATOR_COUNT) {\n\t\t\treturn false;\n\t\t}\n\t\tif (channel.validUntil < currentTime) {\n\t\t\treturn false;\n\t\t}\n\t\tif (channel.validUntil > (currentTime + MAX_VALIDITY)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tfunction isSignedBySupermajority(Channel memory channel, bytes32 toSign, bytes32[3][] memory signatures) \n\t\tinternal\n\t\tpure\n\t\treturns (bool)\n\t{\n\t\t// NOTE: each element of signatures[] must signed by the elem with the same index in validators[]\n\t\t// In case someone didn't sign, pass SignatureMode.NO_SIG\n\t\tif (signatures.length != channel.validators.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tuint signs = 0;\n\t\tuint sigLen = signatures.length;\n\t\tfor (uint i=0; i<sigLen; i++) {\n\t\t\t// NOTE: if a validator has not signed, you can just use SignatureMode.NO_SIG\n\t\t\tif (SignatureValidator.isValidSignature(toSign, channel.validators[i], signatures[i])) {\n\t\t\t\tsigns++;\n\t\t\t}\n\t\t}\n\t\treturn signs*3 >= channel.validators.length*2;\n\t}\n}\npragma experimental ABIEncoderV2;\n\n\ncontract ValidatorRegistry {\n\t// The contract will probably just use a mapping, but this is a generic interface\n\tfunction whitelisted(address) view external returns (bool);\n}\n\ncontract Identity {\n\tusing SafeMath for uint;\n\n\t// Storage\n\t// WARNING: be careful when modifying this\n\t// privileges and routineAuthorizations must always be 0th and 1th thing in storage\n\tmapping (address => uint8) public privileges;\n\t// Routine authorizations\n\tmapping (bytes32 => bool) public routineAuthorizations;\n\t// The next allowed nonce\n\tuint public nonce = 0;\n\t// Routine operations are authorized at once for a period, fee is paid once\n\tmapping (bytes32 => uint256) public routinePaidFees;\n\n\t// Constants\n\tbytes4 private constant CHANNEL_WITHDRAW_SELECTOR = bytes4(keccak256('channelWithdraw((address,address,uint256,uint256,address[],bytes32),bytes32,bytes32[3][],bytes32[],uint256)'));\n\tbytes4 private constant CHANNEL_WITHDRAW_EXPIRED_SELECTOR = bytes4(keccak256('channelWithdrawExpired((address,address,uint256,uint256,address[],bytes32))'));\n\tbytes4 private constant CHANNEL_OPEN_SELECTOR = bytes4(keccak256('channelOpen((address,address,uint256,uint256,address[],bytes32))'));\n\tuint256 private constant CHANNEL_MAX_VALIDITY = 90 days;\n\n\tenum PrivilegeLevel {\n\t\tNone,\n\t\tRoutines,\n\t\tTransactions,\n\t\tWithdrawTo\n\t}\n\tenum RoutineOp {\n\t\tChannelWithdraw,\n\t\tChannelWithdrawExpired,\n\t\tChannelOpen,\n\t\tWithdraw\n\t}\n\n\t// Events\n\tevent LogPrivilegeChanged(address indexed addr, uint8 privLevel);\n\tevent LogRoutineAuth(bytes32 hash, bool authorized);\n\n\t// Transaction structure\n\t// Those can be executed by keys with >= PrivilegeLevel.Transactions\n\t// Even though the contract cannot receive ETH, we are able to send ETH (.value), cause ETH might've been sent to the contract address before it's deployed\n\tstruct Transaction {\n\t\t// replay protection\n\t\taddress identityContract;\n\t\tuint nonce;\n\t\t// tx fee, in tokens\n\t\taddress feeTokenAddr;\n\t\tuint feeAmount;\n\t\t// all the regular txn data\n\t\taddress to;\n\t\tuint value;\n\t\tbytes data;\n\t}\n\n\t// RoutineAuthorizations allow the user to authorize (via keys >= PrivilegeLevel.Routines) a particular relayer to do any number of routines\n\t// those routines are safe: e.g. withdrawing channels to the identity, or from the identity to the pre-approved withdraw (>= PrivilegeLevel.Withdraw) address\n\t// while the fee will be paid only ONCE per auth, the authorization can be used until validUntil\n\t// while the routines are safe, there is some level of implied trust as the relayer may run executeRoutines without any routines to claim the fee\n\tstruct RoutineAuthorization {\n\t\taddress relayer;\n\t\taddress outpace;\n\t\taddress registry;\n\t\tuint validUntil;\n\t\taddress feeTokenAddr;\n\t\tuint weeklyFeeAmount;\n\t}\n\tstruct RoutineOperation {\n\t\tRoutineOp mode;\n\t\tbytes data;\n\t}\n\n\tconstructor(address[] memory addrs, uint8[] memory privLevels)\n\t\tpublic\n\t{\n\t\tuint len = privLevels.length;\n\t\tfor (uint i=0; i<len; i++) {\n\t\t\tprivileges[addrs[i]] = privLevels[i];\n\t\t\temit LogPrivilegeChanged(addrs[i], privLevels[i]);\n\t\t}\n\t}\n\n\tfunction setAddrPrivilege(address addr, uint8 privLevel)\n\t\texternal\n\t{\n\t\trequire(msg.sender == address(this), 'ONLY_IDENTITY_CAN_CALL');\n\t\tprivileges[addr] = privLevel;\n\t\temit LogPrivilegeChanged(addr, privLevel);\n\t}\n\n\tfunction setRoutineAuth(bytes32 hash, bool authorized)\n\t\texternal\n\t{\n\t\trequire(msg.sender == address(this), 'ONLY_IDENTITY_CAN_CALL');\n\t\troutineAuthorizations[hash] = authorized;\n\t\temit LogRoutineAuth(hash, authorized);\n\t}\n\n\tfunction execute(Transaction[] memory txns, bytes32[3][] memory signatures)\n\t\tpublic\n\t{\n\t\taddress feeTokenAddr = txns[0].feeTokenAddr;\n\t\tuint feeAmount = 0;\n\t\tuint len = txns.length;\n\t\tfor (uint i=0; i<len; i++) {\n\t\t\tTransaction memory txn = txns[i];\n\t\t\trequire(txn.identityContract == address(this), 'TRANSACTION_NOT_FOR_CONTRACT');\n\t\t\trequire(txn.feeTokenAddr == feeTokenAddr, 'EXECUTE_NEEDS_SINGLE_TOKEN');\n\t\t\trequire(txn.nonce == nonce, 'WRONG_NONCE');\n\n\t\t\t// If we use the naive abi.encode(txn) and have a field of type `bytes`,\n\t\t\t// there is a discrepancy between ethereumjs-abi and solidity\n\t\t\t// if we enter every field individually, in order, there is no discrepancy\n\t\t\t//bytes32 hash = keccak256(abi.encode(txn));\n\t\t\tbytes32 hash = keccak256(abi.encode(txn.identityContract, txn.nonce, txn.feeTokenAddr, txn.feeAmount, txn.to, txn.value, txn.data));\n\t\t\taddress signer = SignatureValidator.recoverAddr(hash, signatures[i]);\n\n\t\t\trequire(privileges[signer] >= uint8(PrivilegeLevel.Transactions), 'INSUFFICIENT_PRIVILEGE_TRANSACTION');\n\n\t\t\tnonce = nonce.add(1);\n\t\t\tfeeAmount = feeAmount.add(txn.feeAmount);\n\n\t\t\texecuteCall(txn.to, txn.value, txn.data);\n\t\t\t// The actual anti-bricking mechanism - do not allow a signer to drop his own priviledges\n\t\t\trequire(privileges[signer] >= uint8(PrivilegeLevel.Transactions), 'PRIVILEGE_NOT_DOWNGRADED');\n\t\t}\n\t\tif (feeAmount > 0) {\n\t\t\tSafeERC20.transfer(feeTokenAddr, msg.sender, feeAmount);\n\t\t}\n\t}\n\n\tfunction executeBySender(Transaction[] memory txns)\n\t\tpublic\n\t{\n\t\trequire(privileges[msg.sender] >= uint8(PrivilegeLevel.Transactions), 'INSUFFICIENT_PRIVILEGE_SENDER');\n\t\tuint len = txns.length;\n\t\tfor (uint i=0; i<len; i++) {\n\t\t\tTransaction memory txn = txns[i];\n\t\t\trequire(txn.nonce == nonce, 'WRONG_NONCE');\n\n\t\t\tnonce = nonce.add(1);\n\n\t\t\texecuteCall(txn.to, txn.value, txn.data);\n\t\t}\n\t\t// The actual anti-bricking mechanism - do not allow the sender to drop his own priviledges\n\t\trequire(privileges[msg.sender] >= uint8(PrivilegeLevel.Transactions), 'PRIVILEGE_NOT_DOWNGRADED');\n\t}\n\n\tfunction executeRoutines(RoutineAuthorization memory auth, RoutineOperation[] memory operations)\n\t\tpublic\n\t{\n\t\trequire(auth.relayer == msg.sender, 'ONLY_RELAYER_CAN_CALL');\n\t\trequire(auth.validUntil >= now, 'AUTHORIZATION_EXPIRED');\n\t\tbytes32 hash = keccak256(abi.encode(auth));\n\t\trequire(routineAuthorizations[hash], 'NOT_AUTHORIZED');\n\t\tuint len = operations.length;\n\t\tfor (uint i=0; i<len; i++) {\n\t\t\tRoutineOperation memory op = operations[i];\n\t\t\tif (op.mode == RoutineOp.ChannelWithdraw) {\n\t\t\t\t// Channel: Withdraw\n\t\t\t\texecuteCall(auth.outpace, 0, abi.encodePacked(CHANNEL_WITHDRAW_SELECTOR, op.data));\n\t\t\t} else if (op.mode == RoutineOp.ChannelWithdrawExpired) {\n\t\t\t\t// Channel: Withdraw Expired\n\t\t\t\texecuteCall(auth.outpace, 0, abi.encodePacked(CHANNEL_WITHDRAW_EXPIRED_SELECTOR, op.data));\n\t\t\t} else if (op.mode == RoutineOp.ChannelOpen) {\n\t\t\t\t// Channel: open\n\t\t\t\t(ChannelLibrary.Channel memory channel) = abi.decode(op.data, (ChannelLibrary.Channel));\n\t\t\t\t// Ensure validity is sane\n\t\t\t\trequire(channel.validUntil <= (now + CHANNEL_MAX_VALIDITY), 'CHANNEL_EXCEEDED_MAX_VALID');\n\t\t\t\t// Ensure all validators are whitelisted\n\t\t\t\tuint validatorsLen = channel.validators.length;\n\t\t\t\tfor (uint j=0; j<validatorsLen; j++) {\n\t\t\t\t\trequire(\n\t\t\t\t\t\tValidatorRegistry(auth.registry).whitelisted(channel.validators[j]),\n\t\t\t\t\t\t\"VALIDATOR_NOT_WHITELISTED\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tSafeERC20.approve(channel.tokenAddr, auth.outpace, 0);\n\t\t\t\tSafeERC20.approve(channel.tokenAddr, auth.outpace, channel.tokenAmount);\n\t\t\t\texecuteCall(auth.outpace, 0, abi.encodePacked(CHANNEL_OPEN_SELECTOR, op.data));\n\t\t\t} else if (op.mode == RoutineOp.Withdraw) {\n\t\t\t\t// Withdraw from identity\n\t\t\t\t(address tokenAddr, address to, uint amount) = abi.decode(op.data, (address, address, uint));\n\t\t\t\trequire(privileges[to] >= uint8(PrivilegeLevel.WithdrawTo), 'INSUFFICIENT_PRIVILEGE_WITHDRAW');\n\t\t\t\tSafeERC20.transfer(tokenAddr, to, amount);\n\t\t\t} else {\n\t\t\t\trevert('INVALID_MODE');\n\t\t\t}\n\t\t}\n\t\tif (auth.weeklyFeeAmount > 0 && (now - routinePaidFees[hash]) >= 7 days) {\n\t\t\troutinePaidFees[hash] = now;\n\t\t\tSafeERC20.transfer(auth.feeTokenAddr, msg.sender, auth.weeklyFeeAmount);\n\t\t}\n\t}\n\n\t// we shouldn't use address.call(), cause: https://github.com/ethereum/solidity/issues/2884\n\t// copied from https://github.com/uport-project/uport-identity/blob/develop/contracts/Proxy.sol\n\t// there's also\n\t// https://github.com/gnosis/MultiSigWallet/commit/e1b25e8632ca28e9e9e09c81bd20bf33fdb405ce\n\t// https://github.com/austintgriffith/bouncer-proxy/blob/master/BouncerProxy/BouncerProxy.sol\n\t// https://github.com/gnosis/safe-contracts/blob/7e2eeb3328bb2ae85c36bc11ea6afc14baeb663c/contracts/base/Executor.sol\n\tfunction executeCall(address to, uint256 value, bytes memory data)\n\t\tinternal\n\t{\n\t\tassembly {\n\t\t\tlet result := call(gas, to, value, add(data, 0x20), mload(data), 0, 0)\n\n\t\t\tswitch result case 0 {\n\t\t\t\tlet size := returndatasize\n\t\t\t\tlet ptr := mload(0x40)\n\t\t\t\treturndatacopy(ptr, 0, size)\n\t\t\t\trevert(ptr, size)\n\t\t\t}\n\t\t\tdefault {}\n\t\t}\n\t}\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"components\":[{\"name\":\"relayer\",\"type\":\"address\"},{\"name\":\"outpace\",\"type\":\"address\"},{\"name\":\"registry\",\"type\":\"address\"},{\"name\":\"validUntil\",\"type\":\"uint256\"},{\"name\":\"feeTokenAddr\",\"type\":\"address\"},{\"name\":\"weeklyFeeAmount\",\"type\":\"uint256\"}],\"name\":\"auth\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"mode\",\"type\":\"uint8\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"operations\",\"type\":\"tuple[]\"}],\"name\":\"executeRoutines\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"privLevel\",\"type\":\"uint8\"}],\"name\":\"setAddrPrivilege\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"name\":\"identityContract\",\"type\":\"address\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"feeTokenAddr\",\"type\":\"address\"},{\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"txns\",\"type\":\"tuple[]\"},{\"name\":\"signatures\",\"type\":\"bytes32[3][]\"}],\"name\":\"execute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"name\":\"identityContract\",\"type\":\"address\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"feeTokenAddr\",\"type\":\"address\"},{\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"txns\",\"type\":\"tuple[]\"}],\"name\":\"executeBySender\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"routinePaidFees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"setRoutineAuth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"privileges\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"routineAuthorizations\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"},{\"name\":\"privLevels\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"privLevel\",\"type\":\"uint8\"}],\"name\":\"LogPrivilegeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"LogRoutineAuth\",\"type\":\"event\"}]",
  "bytecode": "608060405260006002553480156200001657600080fd5b506040516200304e3803806200304e83398101806040526200003c9190810190620002a6565b60008151905060008090505b8181101562000156578281815181106200005e57fe5b60200260200101516000808684815181106200007657fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff160217905550838181518110620000dd57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff167f9685487d203e6d23591605e642082a4c0b3e0b18fa34bafa9ee7ed77e135faac8483815181106200012957fe5b60200260200101516040516200014091906200032a565b60405180910390a2808060010191505062000048565b5050505062000415565b60006200016e8251620003d4565b905092915050565b600082601f8301126200018857600080fd5b81516200019f620001998262000375565b62000347565b91508181835260208401935060208101905083856020840282011115620001c557600080fd5b60005b83811015620001f95781620001de888262000160565b845260208401935060208301925050600181019050620001c8565b5050505092915050565b600082601f8301126200021557600080fd5b81516200022c62000226826200039e565b62000347565b915081818352602084019350602081019050838560208402820111156200025257600080fd5b60005b838110156200028657816200026b888262000290565b84526020840193506020830192505060018101905062000255565b5050505092915050565b60006200029e825162000408565b905092915050565b60008060408385031215620002ba57600080fd5b600083015167ffffffffffffffff811115620002d557600080fd5b620002e38582860162000176565b925050602083015167ffffffffffffffff8111156200030157600080fd5b6200030f8582860162000203565b9150509250929050565b6200032481620003c7565b82525050565b600060208201905062000341600083018462000319565b92915050565b6000604051905081810181811067ffffffffffffffff821117156200036b57600080fd5b8060405250919050565b600067ffffffffffffffff8211156200038d57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115620003b657600080fd5b602082029050602081019050919050565b600060ff82169050919050565b6000620003e182620003e8565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600060ff82169050919050565b612c2980620004256000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063a6e6b44611610066578063a6e6b44614610108578063affed0e014610138578063bd3980eb14610156578063c066a5b114610172578063fd59a0fe146101a257610093565b806311aee8b71461009857806346c3d522146100b4578063951a02af146100d05780639d8908c3146100ec575b600080fd5b6100b260048036036100ad9190810190611c9e565b6101d2565b005b6100ce60048036036100c99190810190611ae6565b6107e3565b005b6100ea60048036036100e59190810190611b63565b6108fa565b005b61010660048036036101019190810190611b22565b610ca7565b005b610122600480360361011d9190810190611bf8565b610ea7565b60405161012f91906128e1565b60405180910390f35b610140610ebf565b60405161014d91906128e1565b60405180910390f35b610170600480360361016b9190810190611c21565b610ec5565b005b61018c60048036036101879190810190611a6e565b610f9b565b60405161019991906128fc565b60405180910390f35b6101bc60048036036101b79190810190611bf8565b610fbb565b6040516101c9919061267d565b60405180910390f35b3373ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff1614610244576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023b906127a6565b60405180910390fd5b428260600151101561028b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028290612806565b60405180910390fd5b60008260405160200161029e91906128c6565b6040516020818303038152906040528051906020012090506001600082815260200190815260200160002060009054906101000a900460ff16610316576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030d90612886565b60405180910390fd5b60008251905060008090505b8181101561077f57610332611357565b84828151811061033e57fe5b602002602001015190506000600381111561035557fe5b8160000151600381111561036557fe5b14156103b8576103b38660200151600060405161038190612599565b6040518091039020846020015160405160200161039f9291906124ea565b604051602081830303815290604052610fdb565b610771565b600160038111156103c557fe5b816000015160038111156103d557fe5b141561042857610423866020015160006040516103f1906125ae565b6040518091039020846020015160405160200161040f9291906124ea565b604051602081830303815290604052610fdb565b610770565b6002600381111561043557fe5b8160000151600381111561044557fe5b141561063c5761045361137c565b816020015180602001905161046b9190810190611c5d565b90506276a7004201816060015111156104b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b090612726565b60405180910390fd5b6000816080015151905060008090505b818110156105c157886040015173ffffffffffffffffffffffffffffffffffffffff1663d936547e8460800151838151811061050157fe5b60200260200101516040518263ffffffff1660e01b815260040161052591906125c3565b60206040518083038186803b15801561053d57600080fd5b505afa158015610551573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105759190810190611bcf565b6105b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ab90612846565b60405180910390fd5b80806001019150506104c9565b506105d682602001518960200151600061100a565b6105ed82602001518960200151846040015161100a565b6106358860200151600060405161060390612538565b604051809103902086602001516040516020016106219291906124ea565b604051602081830303815290604052610fdb565b505061076f565b60038081111561064857fe5b8160000151600381111561065857fe5b1415610733576000806000836020015180602001905161067b9190810190611a97565b92509250925060038081111561068d57fe5b60ff166000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff161015610720576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071790612866565b60405180910390fd5b61072b83838361108d565b50505061076e565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610765906127e6565b60405180910390fd5b5b5b5b508080600101915050610322565b5060008460a001511180156107ac575062093a806003600084815260200190815260200160002054420310155b156107dd574260036000848152602001908152602001600020819055506107dc8460800151338660a0015161108d565b5b50505050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610851576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084890612826565b60405180910390fd5b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508173ffffffffffffffffffffffffffffffffffffffff167f9685487d203e6d23591605e642082a4c0b3e0b18fa34bafa9ee7ed77e135faac826040516108ee91906128fc565b60405180910390a25050565b60008260008151811061090957fe5b6020026020010151604001519050600080905060008451905060008090505b81811015610c8a576109386113e1565b86828151811061094457fe5b602002602001015190503073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16146109c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b790612706565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff1614610a32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a29906128a6565b60405180910390fd5b600254816020015114610a7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7190612766565b60405180910390fd5b6000816000015182602001518360400151846060015185608001518660a001518760c00151604051602001610ab59796959493929190612607565b6040516020818303038152906040528051906020012090506000610aec82898681518110610adf57fe5b6020026020010151611110565b905060026003811115610afb57fe5b60ff166000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff161015610b8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b85906127c6565b60405180910390fd5b610ba460016002546112fa90919063ffffffff16565b600281905550610bc18360600151876112fa90919063ffffffff16565b9550610bda83608001518460a001518560c00151610fdb565b60026003811115610be757fe5b60ff166000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff161015610c7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7190612746565b60405180910390fd5b5050508080600101915050610928565b506000821115610ca057610c9f83338461108d565b5b5050505050565b60026003811115610cb457fe5b60ff166000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff161015610d47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3e90612786565b60405180910390fd5b60008151905060008090505b81811015610e0257610d636113e1565b838281518110610d6f57fe5b60200260200101519050600254816020015114610dc1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db890612766565b60405180910390fd5b610dd760016002546112fa90919063ffffffff16565b600281905550610df481608001518260a001518360c00151610fdb565b508080600101915050610d53565b5060026003811115610e1057fe5b60ff166000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff161015610ea3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9a90612746565b60405180910390fd5b5050565b60036020528060005260406000206000915090505481565b60025481565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2a90612826565b60405180910390fd5b806001600084815260200190815260200160002060006101000a81548160ff0219169083151502179055507f32f73b226f73530ab01483d556d9e482dc4633a23d63a73f2d281418865a6bff8282604051610f8f929190612698565b60405180910390a15050565b60006020528060005260406000206000915054906101000a900460ff1681565b60016020528060005260406000206000915054906101000a900460ff1681565b60008082516020840185875af18060008114610ff657611003565b3d604051816000823e8181fd5b5050505050565b8273ffffffffffffffffffffffffffffffffffffffff1663095ea7b383836040518363ffffffff1660e01b81526004016110459291906125de565b600060405180830381600087803b15801561105f57600080fd5b505af1158015611073573d6000803e3d6000fd5b5050505061107f611319565b61108857600080fd5b505050565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b81526004016110c89291906125de565b600060405180830381600087803b1580156110e257600080fd5b505af11580156110f6573d6000803e3d6000fd5b50505050611102611319565b61110b57600080fd5b505050565b6000808260006003811061112057fe5b602002015160006020811061113157fe5b1a60f81b60f81c60ff16600481111561114657fe5b90506000600481111561115557fe5b81600481111561116157fe5b14156111715760009150506112f4565b60008360006003811061118057fe5b602002015160016020811061119157fe5b1a60f81b60f81c9050600260048111156111a757fe5b8260048111156111b357fe5b14156111e757846040516020016111ca9190612512565b60405160208183030381529060405280519060200120945061127e565b600360048111156111f457fe5b82600481111561120057fe5b141561123457846040516020016112179190612573565b60405160208183030381529060405280519060200120945061127d565b60048081111561124057fe5b82600481111561124c57fe5b141561127c5784604051602001611263919061254d565b6040516020818303038152906040528051906020012094505b5b5b600185828660016003811061128f57fe5b6020020151876002600381106112a157fe5b6020020151604051600081526020016040526040516112c394939291906126c1565b6020604051602081039080840390855afa1580156112e5573d6000803e3d6000fd5b50505060206040510351925050505b92915050565b60008082840190508381101561130f57600080fd5b8091505092915050565b600080600090503d60008114611336576020811461133f5761134b565b6001915061134b565b60206000803e60005191505b50600081141591505090565b60405180604001604052806000600381111561136f57fe5b8152602001606081525090565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160608152602001600080191681525090565b6040518060e00160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001606081525090565b600061146c8235612b00565b905092915050565b60006114808251612b00565b905092915050565b60006114948251612b12565b905092915050565b600082601f8301126114ad57600080fd5b81516114c06114bb82612944565b612917565b915081818352602084019350602081019050838560208402820111156114e557600080fd5b60005b8381101561151557816114fb8882611474565b8452602084019350602083019250506001810190506114e8565b5050505092915050565b600082601f83011261153057600080fd5b813561154361153e8261296c565b612917565b9150818183526020840193506020810190508385606084028201111561156857600080fd5b60005b83811015611598578161157e88826115a2565b84526020840193506060830192505060018101905061156b565b5050505092915050565b600082601f8301126115b357600080fd5b60036115c66115c182612994565b612917565b915081838560208402820111156115dc57600080fd5b60005b8381101561160c57816115f28882611726565b8452602084019350602083019250506001810190506115df565b5050505092915050565b600082601f83011261162757600080fd5b813561163a611635826129b6565b612917565b9150818183526020840193506020810190508360005b8381101561168057813586016116668882611906565b845260208401935060208301925050600181019050611650565b5050505092915050565b600082601f83011261169b57600080fd5b81356116ae6116a9826129de565b612917565b9150818183526020840193506020810190508360005b838110156116f457813586016116da888261196a565b8452602084019350602083019250506001810190506116c4565b5050505092915050565b600061170a8235612b24565b905092915050565b600061171e8251612b24565b905092915050565b60006117328235612b30565b905092915050565b60006117468251612b30565b905092915050565b600082601f83011261175f57600080fd5b813561177261176d82612a06565b612917565b9150808252602083016020830185838301111561178e57600080fd5b611799838284612b88565b50505092915050565b60006117ae8235612b3a565b905092915050565b600060c082840312156117c857600080fd5b6117d260c0612917565b905060006117e284828501611474565b60008301525060206117f684828501611474565b602083015250604061180a84828501611a46565b604083015250606061181e84828501611a46565b606083015250608082015167ffffffffffffffff81111561183e57600080fd5b61184a8482850161149c565b60808301525060a061185e8482850161173a565b60a08301525092915050565b600060c0828403121561187c57600080fd5b61188660c0612917565b9050600061189684828501611460565b60008301525060206118aa84828501611460565b60208301525060406118be84828501611460565b60408301525060606118d284828501611a32565b60608301525060806118e684828501611460565b60808301525060a06118fa84828501611a32565b60a08301525092915050565b60006040828403121561191857600080fd5b6119226040612917565b90506000611932848285016117a2565b600083015250602082013567ffffffffffffffff81111561195257600080fd5b61195e8482850161174e565b60208301525092915050565b600060e0828403121561197c57600080fd5b61198660e0612917565b9050600061199684828501611460565b60008301525060206119aa84828501611a32565b60208301525060406119be84828501611460565b60408301525060606119d284828501611a32565b60608301525060806119e684828501611460565b60808301525060a06119fa84828501611a32565b60a08301525060c082013567ffffffffffffffff811115611a1a57600080fd5b611a268482850161174e565b60c08301525092915050565b6000611a3e8235612b71565b905092915050565b6000611a528251612b71565b905092915050565b6000611a668235612b7b565b905092915050565b600060208284031215611a8057600080fd5b6000611a8e84828501611460565b91505092915050565b600080600060608486031215611aac57600080fd5b6000611aba86828701611488565b9350506020611acb86828701611488565b9250506040611adc86828701611a46565b9150509250925092565b60008060408385031215611af957600080fd5b6000611b0785828601611460565b9250506020611b1885828601611a5a565b9150509250929050565b600060208284031215611b3457600080fd5b600082013567ffffffffffffffff811115611b4e57600080fd5b611b5a8482850161168a565b91505092915050565b60008060408385031215611b7657600080fd5b600083013567ffffffffffffffff811115611b9057600080fd5b611b9c8582860161168a565b925050602083013567ffffffffffffffff811115611bb957600080fd5b611bc58582860161151f565b9150509250929050565b600060208284031215611be157600080fd5b6000611bef84828501611712565b91505092915050565b600060208284031215611c0a57600080fd5b6000611c1884828501611726565b91505092915050565b60008060408385031215611c3457600080fd5b6000611c4285828601611726565b9250506020611c53858286016116fe565b9150509250929050565b600060208284031215611c6f57600080fd5b600082015167ffffffffffffffff811115611c8957600080fd5b611c95848285016117b6565b91505092915050565b60008060e08385031215611cb157600080fd5b6000611cbf8582860161186a565b92505060c083013567ffffffffffffffff811115611cdc57600080fd5b611ce885828601611616565b9150509250929050565b611cfb81612a75565b82525050565b611d0a81612a75565b82525050565b611d1981612a87565b82525050565b611d2881612a93565b82525050565b611d3f611d3a82612a93565b612bca565b82525050565b611d56611d5182612a9d565b612bd4565b82525050565b6000611d6782612a32565b611d718185612a3d565b9350611d81818560208601612b97565b611d8a81612bde565b840191505092915050565b6000611da082612a32565b611daa8185612a4e565b9350611dba818560208601612b97565b80840191505092915050565b6000611dd3601c83612a59565b91507f5452414e53414354494f4e5f4e4f545f464f525f434f4e5452414354000000006000830152602082019050919050565b6000611e13601a83612a59565b91507f4348414e4e454c5f45584345454445445f4d41585f56414c49440000000000006000830152602082019050919050565b6000611e53601c83612a6a565b91507f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000830152601c82019050919050565b6000611e93601883612a59565b91507f50524956494c4547455f4e4f545f444f574e47524144454400000000000000006000830152602082019050919050565b6000611ed3600b83612a59565b91507f57524f4e475f4e4f4e43450000000000000000000000000000000000000000006000830152602082019050919050565b6000611f13601d83612a59565b91507f494e53554646494349454e545f50524956494c4547455f53454e4445520000006000830152602082019050919050565b6000611f53601583612a59565b91507f4f4e4c595f52454c415945525f43414e5f43414c4c00000000000000000000006000830152602082019050919050565b6000611f93602283612a59565b91507f494e53554646494349454e545f50524956494c4547455f5452414e534143544960008301527f4f4e0000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611ff9600c83612a59565b91507f494e56414c49445f4d4f444500000000000000000000000000000000000000006000830152602082019050919050565b6000612039601583612a59565b91507f415554484f52495a4154494f4e5f4558504952454400000000000000000000006000830152602082019050919050565b6000612079604083612a6a565b91507f6368616e6e656c4f70656e2828616464726573732c616464726573732c75696e60008301527f743235362c75696e743235362c616464726573735b5d2c6279746573333229296020830152604082019050919050565b60006120df606983612a6a565b91507f19457468657265756d205369676e6564204d6573736167653a0a31303842792060008301527f7369676e696e672074686973206d6573736167652c20796f752061636b6e6f7760208301527f6c65646765207369676e696e6720616e2041644578206269642077697468207460408301527f686520686173683a0a00000000000000000000000000000000000000000000006060830152606982019050919050565b6000612191601683612a59565b91507f4f4e4c595f4944454e544954595f43414e5f43414c4c000000000000000000006000830152602082019050919050565b60006121d1601983612a59565b91507f56414c494441544f525f4e4f545f57484954454c4953544544000000000000006000830152602082019050919050565b6000612211601f83612a59565b91507f494e53554646494349454e545f50524956494c4547455f5749544844524157006000830152602082019050919050565b6000612251601b83612a6a565b91507f19457468657265756d205369676e6564204d6573736167653a0a2000000000006000830152601b82019050919050565b6000612291600e83612a59565b91507f4e4f545f415554484f52495a45440000000000000000000000000000000000006000830152602082019050919050565b60006122d1606b83612a6a565b91507f6368616e6e656c57697468647261772828616464726573732c6164647265737360008301527f2c75696e743235362c75696e743235362c616464726573735b5d2c627974657360208301527f3332292c627974657333322c627974657333325b335d5b5d2c6279746573333260408301527f5b5d2c75696e74323536290000000000000000000000000000000000000000006060830152606b82019050919050565b6000612383604b83612a6a565b91507f6368616e6e656c5769746864726177457870697265642828616464726573732c60008301527f616464726573732c75696e743235362c75696e743235362c616464726573735b60208301527f5d2c6279746573333229290000000000000000000000000000000000000000006040830152604b82019050919050565b600061240f601a83612a59565b91507f455845435554455f4e454544535f53494e474c455f544f4b454e0000000000006000830152602082019050919050565b60c0820160008201516124586000850182611cf2565b50602082015161246b6020850182611cf2565b50604082015161247e6040850182611cf2565b50606082015161249160608501826124bd565b5060808201516124a46080850182611cf2565b5060a08201516124b760a08501826124bd565b50505050565b6124c681612ae9565b82525050565b6124d581612ae9565b82525050565b6124e481612af3565b82525050565b60006124f68285611d45565b6004820191506125068284611d95565b91508190509392505050565b600061251d82611e46565b91506125298284611d2e565b60208201915081905092915050565b60006125438261206c565b9150819050919050565b6000612558826120d2565b91506125648284611d2e565b60208201915081905092915050565b600061257e82612244565b915061258a8284611d2e565b60208201915081905092915050565b60006125a4826122c4565b9150819050919050565b60006125b982612376565b9150819050919050565b60006020820190506125d86000830184611d01565b92915050565b60006040820190506125f36000830185611d01565b61260060208301846124cc565b9392505050565b600060e08201905061261c600083018a611d01565b61262960208301896124cc565b6126366040830188611d01565b61264360608301876124cc565b6126506080830186611d01565b61265d60a08301856124cc565b81810360c083015261266f8184611d5c565b905098975050505050505050565b60006020820190506126926000830184611d10565b92915050565b60006040820190506126ad6000830185611d1f565b6126ba6020830184611d10565b9392505050565b60006080820190506126d66000830187611d1f565b6126e360208301866124db565b6126f06040830185611d1f565b6126fd6060830184611d1f565b95945050505050565b6000602082019050818103600083015261271f81611dc6565b9050919050565b6000602082019050818103600083015261273f81611e06565b9050919050565b6000602082019050818103600083015261275f81611e86565b9050919050565b6000602082019050818103600083015261277f81611ec6565b9050919050565b6000602082019050818103600083015261279f81611f06565b9050919050565b600060208201905081810360008301526127bf81611f46565b9050919050565b600060208201905081810360008301526127df81611f86565b9050919050565b600060208201905081810360008301526127ff81611fec565b9050919050565b6000602082019050818103600083015261281f8161202c565b9050919050565b6000602082019050818103600083015261283f81612184565b9050919050565b6000602082019050818103600083015261285f816121c4565b9050919050565b6000602082019050818103600083015261287f81612204565b9050919050565b6000602082019050818103600083015261289f81612284565b9050919050565b600060208201905081810360008301526128bf81612402565b9050919050565b600060c0820190506128db6000830184612442565b92915050565b60006020820190506128f660008301846124cc565b92915050565b600060208201905061291160008301846124db565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561293a57600080fd5b8060405250919050565b600067ffffffffffffffff82111561295b57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561298357600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156129ab57600080fd5b602082029050919050565b600067ffffffffffffffff8211156129cd57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156129f557600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115612a1d57600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000612a8082612ac9565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000612b0b82612b51565b9050919050565b6000612b1d82612b51565b9050919050565b60008115159050919050565b6000819050919050565b600060048210612b4957600080fd5b819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015612bb5578082015181840152602081019050612b9a565b83811115612bc4576000848401525b50505050565b6000819050919050565b6000819050919050565b6000601f19601f830116905091905056fea265627a7a72305820eafd1115ef2e313f1326ee058efe806f8e32388ce616c0e80b8fb661edc69f6d6c6578706572696d656e74616cf500370000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
}