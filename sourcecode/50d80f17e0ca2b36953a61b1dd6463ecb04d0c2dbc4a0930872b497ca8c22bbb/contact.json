{
  "address": "0x8a734f6adf825c858016e46e1e4af1843e622ece",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CarryPublicTokenCrowdsale",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-01\n*/\n\npragma solidity ^0.4.24;\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    require(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(\n    ERC20 token,\n    address from,\n    address to,\n    uint256 value\n  )\n    internal\n  {\n    require(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    require(token.approve(spender, value));\n  }\n}\n\n// File: openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale,\n * allowing investors to purchase tokens with ether. This contract implements\n * such functionality in its most fundamental form and can be extended to provide additional\n * functionality and/or custom behavior.\n * The external interface represents the basic interface for purchasing tokens, and conform\n * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n * the methods to add functionality. Consider using 'super' where appropiate to concatenate\n * behavior.\n */\ncontract Crowdsale {\n  using SafeMath for uint256;\n  using SafeERC20 for ERC20;\n\n  // The token being sold\n  ERC20 public token;\n\n  // Address where funds are collected\n  address public wallet;\n\n  // How many token units a buyer gets per wei.\n  // The rate is the conversion between wei and the smallest and indivisible token unit.\n  // So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK\n  // 1 wei will give you 1 unit, or 0.001 TOK.\n  uint256 public rate;\n\n  // Amount of wei raised\n  uint256 public weiRaised;\n\n  /**\n   * Event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */\n  event TokenPurchase(\n    address indexed purchaser,\n    address indexed beneficiary,\n    uint256 value,\n    uint256 amount\n  );\n\n  /**\n   * @param _rate Number of token units a buyer gets per wei\n   * @param _wallet Address where collected funds will be forwarded to\n   * @param _token Address of the token being sold\n   */\n  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n    require(_rate > 0);\n    require(_wallet != address(0));\n    require(_token != address(0));\n\n    rate = _rate;\n    wallet = _wallet;\n    token = _token;\n  }\n\n  // -----------------------------------------\n  // Crowdsale external interface\n  // -----------------------------------------\n\n  /**\n   * @dev fallback function ***DO NOT OVERRIDE***\n   */\n  function () external payable {\n    buyTokens(msg.sender);\n  }\n\n  /**\n   * @dev low level token purchase ***DO NOT OVERRIDE***\n   * @param _beneficiary Address performing the token purchase\n   */\n  function buyTokens(address _beneficiary) public payable {\n\n    uint256 weiAmount = msg.value;\n    _preValidatePurchase(_beneficiary, weiAmount);\n\n    // calculate token amount to be created\n    uint256 tokens = _getTokenAmount(weiAmount);\n\n    // update state\n    weiRaised = weiRaised.add(weiAmount);\n\n    _processPurchase(_beneficiary, tokens);\n    emit TokenPurchase(\n      msg.sender,\n      _beneficiary,\n      weiAmount,\n      tokens\n    );\n\n    _updatePurchasingState(_beneficiary, weiAmount);\n\n    _forwardFunds();\n    _postValidatePurchase(_beneficiary, weiAmount);\n  }\n\n  // -----------------------------------------\n  // Internal interface (extensible)\n  // -----------------------------------------\n\n  /**\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n   * @param _beneficiary Address performing the token purchase\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _preValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    require(_beneficiary != address(0));\n    require(_weiAmount != 0);\n  }\n\n  /**\n   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n   * @param _beneficiary Address performing the token purchase\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _postValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    // optional override\n  }\n\n  /**\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n   * @param _beneficiary Address performing the token purchase\n   * @param _tokenAmount Number of tokens to be emitted\n   */\n  function _deliverTokens(\n    address _beneficiary,\n    uint256 _tokenAmount\n  )\n    internal\n  {\n    token.safeTransfer(_beneficiary, _tokenAmount);\n  }\n\n  /**\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n   * @param _beneficiary Address receiving the tokens\n   * @param _tokenAmount Number of tokens to be purchased\n   */\n  function _processPurchase(\n    address _beneficiary,\n    uint256 _tokenAmount\n  )\n    internal\n  {\n    _deliverTokens(_beneficiary, _tokenAmount);\n  }\n\n  /**\n   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n   * @param _beneficiary Address receiving the tokens\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _updatePurchasingState(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    // optional override\n  }\n\n  /**\n   * @dev Override to extend the way in which ether is converted to tokens.\n   * @param _weiAmount Value in wei to be converted into tokens\n   * @return Number of tokens that can be purchased with the specified _weiAmount\n   */\n  function _getTokenAmount(uint256 _weiAmount)\n    internal view returns (uint256)\n  {\n    return _weiAmount.mul(rate);\n  }\n\n  /**\n   * @dev Determines how ETH is stored/forwarded on purchases.\n   */\n  function _forwardFunds() internal {\n    wallet.transfer(msg.value);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/crowdsale/validation/CappedCrowdsale.sol\n\n/**\n * @title CappedCrowdsale\n * @dev Crowdsale with a limit for total contributions.\n */\ncontract CappedCrowdsale is Crowdsale {\n  using SafeMath for uint256;\n\n  uint256 public cap;\n\n  /**\n   * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\n   * @param _cap Max amount of wei to be contributed\n   */\n  constructor(uint256 _cap) public {\n    require(_cap > 0);\n    cap = _cap;\n  }\n\n  /**\n   * @dev Checks whether the cap has been reached.\n   * @return Whether the cap was reached\n   */\n  function capReached() public view returns (bool) {\n    return weiRaised >= cap;\n  }\n\n  /**\n   * @dev Extend parent behavior requiring purchase to respect the funding cap.\n   * @param _beneficiary Token purchaser\n   * @param _weiAmount Amount of wei contributed\n   */\n  function _preValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    super._preValidatePurchase(_beneficiary, _weiAmount);\n    require(weiRaised.add(_weiAmount) <= cap);\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  modifier hasMintPermission() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    hasMintPermission\n    canMint\n    public\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/CappedToken.sol\n\n/**\n * @title Capped token\n * @dev Mintable token with a token cap.\n */\ncontract CappedToken is MintableToken {\n\n  uint256 public cap;\n\n  constructor(uint256 _cap) public {\n    require(_cap > 0);\n    cap = _cap;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    public\n    returns (bool)\n  {\n    require(totalSupply_.add(_amount) <= cap);\n\n    return super.mint(_to, _amount);\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/PausableToken.sol\n\n/**\n * @title Pausable token\n * @dev StandardToken modified with pausable transfers.\n **/\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(\n    address _spender,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\n// File: contracts/CarryToken.sol\n\n// The Carry token and the tokensale contracts\n// Copyright (C) 2018 Carry Protocol\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\npragma solidity ^0.4.24;\n\n\n\n\ncontract CarryToken is PausableToken, CappedToken, BurnableToken {\n    string public name = \"CarryToken\";\n    string public symbol = \"CRE\";\n    uint8 public decimals = 18;\n\n    // See also <https://carryprotocol.io/#section-token-distribution>.\n    //                10 billion <---------|   |-----------------> 10^18\n    uint256 constant TOTAL_CAP = 10000000000 * (10 ** uint256(decimals));\n\n    constructor() public CappedToken(TOTAL_CAP) {\n    }\n}\n\n// File: contracts/CarryPublicTokenCrowdsale.sol\n\n// The Carry token and the tokensale contracts\n// Copyright (C) 2018 Carry Protocol\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\npragma solidity ^0.4.24;\n\n\n\n\n\n/**\n * @title CarryPublicTokenCrowdsale\n * @dev The Carry token public sale contract.\n */\ncontract CarryPublicTokenCrowdsale is CappedCrowdsale, Pausable {\n    using SafeMath for uint256;\n\n    uint256 constant maxGasPrice = 40000000000;  // 40 gwei\n\n    // Individual min purchases.\n    uint256 public individualMinPurchaseWei;\n\n    struct IndividualMaxCap {\n        uint256 timestamp;\n        uint256 maxWei;\n    }\n\n    // Individual max purchases differ by time.  The mapping keys are timestamps\n    // and values are weis an individual can purchase at most\n    // If the transaction is made later than a timestamp it can accept\n    // the corresponding cap at most.\n    //\n    // Where individualMaxCaps = [\n    //   IndividualMaxCap(1533081600, 5 ether),\n    //   IndividualMaxCap(1533686400, 10 ether)\n    // ]\n    // If a transaction is made before 1533081600 (2018-08-01 sharp UTC)\n    // it disallows any purchase.\n    // If a transaction is made between 1533081600 (2018-08-01 sharp UTC)\n    // 1533686400 (2018-08-08 sharp UTC) it takes 5 ethers at most.\n    // If a transaction is made after 1533686400 (2018-08-08 sharp UTC)\n    // it takes 10 ethers at most.\n    IndividualMaxCap[] public individualMaxCaps;\n\n    mapping(address => uint256) public contributions;\n\n    // Each index represents the grade (the order is arbitrary) and its value\n    // represents a timestamp when people (i.e., addresses) belonging to that\n    // grade becomes available to purchase tokens.  Note that the first value\n    // (i.e., whitelistGrades[0]) must be zero since the index 0 must represent\n    // the state of \"not whitelisted.\"\n    //\n    // The index numbers are used by the whitelist mapping (see below).\n    // As the key type of the whitelist mapping is uint8, there cannot be more\n    // than 2^8 grades.\n    uint256[] public whitelistGrades;\n\n    // This mapping represents what grade each address belongs to.  Values are\n    // an index number and refer to a grade (see the whitelistGrades array).\n    // A special value 0 represents the predefined state that \"it is not\n    // whitelisted and does not belong to any grade.\"\n    //\n    // Where whitelistGrades = [0, 1533686400, 1533081600]\n    //   and whitelist = [X => 2, Y => 1, Z => 0]\n    //\n    // X cannot purchase any tokens until 1533081600 (2018-08-01 sharp UTC),\n    // but became to able to purchase tokens after that.\n    // Y cannot purchase any tokens until 1533686400 (2018-08-08 sharp\n    // UTC), but became to able to purchase tokens after that.\n    // Z cannot purchase any tokens since it is not whitelisted and does not\n    // belong to any grade.\n    //\n    // As values of a mapping in solidity are virtually all zeros by default,\n    // addresses never associated by the whitelist mapping are not whitelisted\n    // by default.\n    mapping(address => uint8) public whitelist;\n\n    // Token amounts people purchased.  Keys are an address and values are\n    // CRE tokens (in minor units).  If X purchased 5 CRE it is represented as\n    // [X => 5 * 10**18].\n    mapping(address => uint256) public balances;\n\n    // Whether to allow purchasers to withdraw their tokens.  Intended to be\n    // false at first, and then become true at some point.\n    bool public withdrawable;\n\n    // The fixed due date (timestamp) of token delivery.  Even if withdrawable\n    // if not set to true, since the due date purchasers become able to withdraw\n    // tokens.  See also whenWithdrawable modifier below.\n    uint256 public tokenDeliveryDue;\n\n    mapping(address => uint256) public refundedDeposits;\n\n    constructor(\n        address _wallet,\n        CarryToken _token,\n        uint256 _rate,\n        uint256 _cap,\n        uint256 _tokenDeliveryDue,\n        uint256[] _whitelistGrades,\n        uint256 _individualMinPurchaseWei,\n\n        // Since Solidity currently doesn't allows parameters to take array of\n        // structs, we work around this by taking two arrays for each field\n        // (timestmap and maxWei) separately.  It fails unless two arrays are\n        // of equal length.\n        uint256[] _individualMaxCapTimestamps,\n        uint256[] _individualMaxCapWeis\n    ) public CappedCrowdsale(_cap) Crowdsale(_rate, _wallet, _token) {\n        require(\n            _individualMaxCapTimestamps.length == _individualMaxCapWeis.length,\n            \"_individualMaxCap{Timestamps,Weis} do not have equal length.\"\n        );\n        tokenDeliveryDue = _tokenDeliveryDue;\n        if (_whitelistGrades.length < 1) {\n            whitelistGrades = [0];\n        } else {\n            require(\n                _whitelistGrades.length < 0x100,\n                \"The grade number must be less than 2^8.\"\n            );\n            require(\n                _whitelistGrades[0] == 0,\n                \"The _whitelistGrades[0] must be zero.\"\n            );\n            whitelistGrades = _whitelistGrades;\n        }\n        individualMinPurchaseWei = _individualMinPurchaseWei;\n        for (uint i = 0; i < _individualMaxCapTimestamps.length; i++) {\n            uint256 timestamp = _individualMaxCapTimestamps[i];\n            require(\n                i < 1 || timestamp > _individualMaxCapTimestamps[i - 1],\n                \"_individualMaxCapTimestamps have to be in ascending order and no duplications.\"\n            );\n            individualMaxCaps.push(\n                IndividualMaxCap(\n                    timestamp,\n                    _individualMaxCapWeis[i]\n                )\n            );\n        }\n    }\n\n    function _preValidatePurchase(\n        address _beneficiary,\n        uint256 _weiAmount\n    ) internal whenNotPaused {\n        // Prevent gas war among purchasers.\n        require(\n            tx.gasprice <= maxGasPrice,\n            \"Gas price is too expensive. Don't be competitive.\"\n        );\n\n        super._preValidatePurchase(_beneficiary, _weiAmount);\n\n        uint8 grade = whitelist[_beneficiary];\n        require(grade > 0, \"Not whitelisted.\");\n        uint openingTime = whitelistGrades[grade];\n        require(\n            // solium-disable-next-line security/no-block-members\n            block.timestamp >= openingTime,\n            \"Currently unavailable to purchase tokens.\"\n        );\n\n        uint256 contribution = contributions[_beneficiary];\n        uint256 contributionAfterPurchase = contribution.add(_weiAmount);\n\n        // If a contributor already has purchased a minimum amount, say 0.1 ETH,\n        // then they can purchase once again with less than a minimum amount,\n        // say 0.01 ETH, because they have already satisfied the minimum\n        // purchase.\n        require(\n            contributionAfterPurchase >= individualMinPurchaseWei,\n            \"Sent ethers is not enough.\"\n        );\n\n        // See also the comment on the individualMaxCaps above.\n        uint256 individualMaxWei = 0;\n        for (uint i = 0; i < individualMaxCaps.length; i++) {\n            uint256 capTimestamp = individualMaxCaps[i].timestamp;\n            // solium-disable-next-line security/no-block-members\n            if (capTimestamp <= block.timestamp) {\n                individualMaxWei = individualMaxCaps[i].maxWei;\n            } else {\n                // Optimize gas consumption by trimming timestamps no more used.\n                if (i > 1) {\n                    uint offset = i - 1;\n                    uint trimmedLength = individualMaxCaps.length - offset;\n                    for (uint256 j = 0; j < trimmedLength; j++) {\n                        individualMaxCaps[j] = individualMaxCaps[offset + j];\n                    }\n                    individualMaxCaps.length = trimmedLength;\n                }\n                break;\n            }\n        }\n        require(\n            contributionAfterPurchase <= individualMaxWei,\n            individualMaxWei > 0\n                ? \"Total ethers you've purchased is too much.\"\n                : \"Purchase is currently disallowed.\"\n        );\n    }\n\n    function _updatePurchasingState(\n        address _beneficiary,\n        uint256 _weiAmount\n    ) internal {\n        super._updatePurchasingState(_beneficiary, _weiAmount);\n        contributions[_beneficiary] = contributions[_beneficiary].add(\n            _weiAmount\n        );\n    }\n\n    function addAddressesToWhitelist(\n        address[] _beneficiaries,\n        uint8 _grade\n    ) external onlyOwner {\n        require(_grade < whitelistGrades.length, \"No such grade number.\");\n        for (uint256 i = 0; i < _beneficiaries.length; i++) {\n            whitelist[_beneficiaries[i]] = _grade;\n        }\n    }\n\n    // Override to prevent immediate delivery of tokens.\n    function _processPurchase(\n        address _beneficiary,\n        uint256 _tokenAmount\n    ) internal {\n        balances[_beneficiary] = balances[_beneficiary].add(_tokenAmount);\n    }\n\n    function setWithdrawable(bool _withdrawable) external onlyOwner {\n        withdrawable = _withdrawable;\n    }\n\n    modifier whenWithdrawable() {\n        require(\n            // solium-disable-next-line security/no-block-members\n            withdrawable || block.timestamp >= tokenDeliveryDue,\n            \"Currently tokens cannot be withdrawn.\"\n        );\n        _;\n    }\n\n    event TokenDelivered(address indexed beneficiary, uint256 tokenAmount);\n\n    function _deliverTokens(address _beneficiary) internal {\n        uint256 amount = balances[_beneficiary];\n        if (amount > 0) {\n            balances[_beneficiary] = 0;\n            _deliverTokens(_beneficiary, amount);\n            emit TokenDelivered(_beneficiary, amount);\n        }\n    }\n\n    function withdrawTokens() public whenWithdrawable {\n        _deliverTokens(msg.sender);\n    }\n\n    function deliverTokens(\n        address[] _beneficiaries\n    ) public onlyOwner whenWithdrawable {\n        for (uint256 i = 0; i < _beneficiaries.length; i++) {\n            _deliverTokens(_beneficiaries[i]);\n        }\n    }\n\n    event RefundDeposited(\n        address indexed beneficiary,\n        uint256 tokenAmount,\n        uint256 weiAmount\n    );\n    event Refunded(\n        address indexed beneficiary,\n        address indexed receiver,\n        uint256 weiAmount\n    );\n\n    /**\n     * @dev Refund the given ether to a beneficiary.  It only can be called by\n     * either the contract owner or the wallet (i.e., Crowdsale.wallet) address.\n     * The only amount of the ether sent together in a transaction is refunded.\n     */\n    function depositRefund(address _beneficiary) public payable {\n        require(\n            msg.sender == owner || msg.sender == wallet,\n            \"No permission to access.\"\n        );\n        uint256 weiToRefund = msg.value;\n        require(\n            weiToRefund <= weiRaised,\n            \"Sent ethers is higher than even the total raised ethers.\"\n        );\n        uint256 tokensToRefund = _getTokenAmount(weiToRefund);\n        uint256 tokenBalance = balances[_beneficiary];\n        require(\n            tokenBalance >= tokensToRefund,\n            \"Sent ethers is higher than the ethers _beneficiary has purchased.\"\n        );\n        weiRaised = weiRaised.sub(weiToRefund);\n        balances[_beneficiary] = tokenBalance.sub(tokensToRefund);\n        refundedDeposits[_beneficiary] = refundedDeposits[_beneficiary].add(\n            weiToRefund\n        );\n        emit RefundDeposited(_beneficiary, tokensToRefund, weiToRefund);\n    }\n\n    /**\n     * @dev Receive one's refunded ethers in the deposit.  It can be called by\n     * only a beneficiary of refunds.\n     * It takes a parameter, a wallet address to receive the deposited\n     * (refunded) ethers.  (Usually it would be the same to the beneficiary\n     * address unless the beneficiary address is a smart contract unable to\n     * receive ethers.)\n     */\n    function receiveRefund(address _wallet) public {\n        _transferRefund(msg.sender, _wallet);\n    }\n\n    function _transferRefund(address _beneficiary, address _wallet) internal {\n        uint256 depositedWeiAmount = refundedDeposits[_beneficiary];\n        require(depositedWeiAmount > 0, \"_beneficiary has never purchased.\");\n        refundedDeposits[_beneficiary] = 0;\n        contributions[_beneficiary] = contributions[_beneficiary].sub(\n            depositedWeiAmount\n        );\n        _wallet.transfer(depositedWeiAmount);\n        emit Refunded(_beneficiary, _wallet, depositedWeiAmount);\n    }\n}",
  "bytecode": "60806040526005805460a060020a60ff02191690553480156200002157600080fd5b5060405162001cb638038062001cb683398101604090815281516020830151918301516060840151608085015160a086015160c087015160e08801516101008901519698959694959394928401939192908201910160008087898c8c8483116200008a57600080fd5b600160a060020a0382161515620000a057600080fd5b600160a060020a0381161515620000b657600080fd5b60029290925560018054600160a060020a03928316600160a060020a031991821617909155600080549290931691161781558111620000f457600080fd5b60045560058054600160a060020a031916331790558251845114620001a057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603c60248201527f5f696e646976696475616c4d61784361707b54696d657374616d70732c57656960448201527f737d20646f206e6f74206861766520657175616c206c656e6774682e00000000606482015290519081900360840190fd5b600d879055855160011115620001d657604080516020810190915260008152620001cf906009906001620004b5565b5062000332565b8551610100116200026e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f546865206772616465206e756d626572206d757374206265206c65737320746860448201527f616e20325e382e00000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b8560008151811015156200027e57fe5b60209081029091010151156200031b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f546865205f77686974656c6973744772616465735b305d206d7573742062652060448201527f7a65726f2e000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b8551620003309060099060208901906200050a565b505b6006859055600091505b8351821015620004a45783828151811015156200035557fe5b90602001906020020151905060018210806200038b575083600183038151811015156200037e57fe5b9060200190602002015181115b15156200044557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604e60248201527f5f696e646976696475616c4d617843617054696d657374616d7073206861766560448201527f20746f20626520696e20617363656e64696e67206f7264657220616e64206e6f60648201527f206475706c69636174696f6e732e000000000000000000000000000000000000608482015290519081900360a40190fd5b6007604080519081016040528083815260200185858151811015156200046757fe5b602090810290910181015190915282546001818101855560009485529382902083516002909202019081559101519082015591909101906200033c565b505050505050505050505062000568565b828054828255906000526020600020908101928215620004f8579160200282015b82811115620004f8578251829060ff16905591602001919060010190620004d6565b506200050692915062000548565b5090565b828054828255906000526020600020908101928215620004f8579160200282015b82811115620004f85782518255916020019190600101906200052b565b6200056591905b808211156200050657600081556001016200054f565b90565b61173e80620005786000396000f3006080604052600436106101695763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166327e235e381146101745780632c4e722e146101a75780632fdbdd2c146101bc578063355274ea146101d05780633d33faa4146101e55780633f4ba83a1461020d5780634042b66f1461022257806342e94c90146102375780634f935945146102585780635018830114610281578063521eb273146102965780635c975abb146102c757806360b4d34d146102dc578063710a1549146102fd578063715018a61461035257806372a00f851461036757806376e702ee146103885780638456cb591461039d57806386275301146103b25780638d8f2adb146103ca5780638da5cb5b146103df5780639b19251a146103f4578063a213051c1461042b578063a356332214610440578063cbeb7ef214610471578063ec8ac4d81461048b578063f2fde38b1461049f578063fc0c546a146104c0575b610172336104d5565b005b34801561018057600080fd5b50610195600160a060020a0360043516610577565b60408051918252519081900360200190f35b3480156101b357600080fd5b50610195610589565b610172600160a060020a036004351661058f565b3480156101dc57600080fd5b50610195610818565b3480156101f157600080fd5b50610172602460048035828101929101359060ff90351661081e565b34801561021957600080fd5b506101726108f3565b34801561022e57600080fd5b5061019561097c565b34801561024357600080fd5b50610195600160a060020a0360043516610982565b34801561026457600080fd5b5061026d610994565b604080519115158252519081900360200190f35b34801561028d57600080fd5b5061026d6109a0565b3480156102a257600080fd5b506102ab6109a9565b60408051600160a060020a039092168252519081900360200190f35b3480156102d357600080fd5b5061026d6109b8565b3480156102e857600080fd5b50610195600160a060020a03600435166109d9565b34801561030957600080fd5b5060408051602060048035808201358381028086018501909652808552610172953695939460249493850192918291850190849080828437509497506109eb9650505050505050565b34801561035e57600080fd5b50610172610acd565b34801561037357600080fd5b50610172600160a060020a0360043516610b3b565b34801561039457600080fd5b50610195610b48565b3480156103a957600080fd5b50610172610b4e565b3480156103be57600080fd5b50610195600435610bed565b3480156103d657600080fd5b50610172610c0c565b3480156103eb57600080fd5b506102ab610ca6565b34801561040057600080fd5b50610415600160a060020a0360043516610cb5565b6040805160ff9092168252519081900360200190f35b34801561043757600080fd5b50610195610cca565b34801561044c57600080fd5b50610458600435610cd0565b6040805192835260208301919091528051918290030190f35b34801561047d57600080fd5b506101726004351515610cfc565b610172600160a060020a03600435166104d5565b3480156104ab57600080fd5b50610172600160a060020a0360043516610d26565b3480156104cc57600080fd5b506102ab610d46565b3460006104e28383610d55565b6104eb82611208565b600354909150610501908363ffffffff61122516565b60035561050e8382611232565b60408051838152602081018390528151600160a060020a0386169233927f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad18929081900390910190a3610560838361127b565b6105686112ce565b6105728383610ac9565b505050565b600b6020526000908152604090205481565b60025481565b60055460009081908190600160a060020a03163314806105b95750600154600160a060020a031633145b151561060f576040805160e560020a62461bcd02815260206004820152601860248201527f4e6f207065726d697373696f6e20746f206163636573732e0000000000000000604482015290519081900360640190fd5b600354349350831115610692576040805160e560020a62461bcd02815260206004820152603860248201527f53656e742065746865727320697320686967686572207468616e206576656e2060448201527f74686520746f74616c20726169736564206574686572732e0000000000000000606482015290519081900360840190fd5b61069b83611208565b600160a060020a0385166000908152600b602052604090205490925090508181101561075d576040805160e560020a62461bcd02815260206004820152604160248201527f53656e742065746865727320697320686967686572207468616e20746865206560448201527f7468657273205f62656e6566696369617279206861732070757263686173656460648201527f2e00000000000000000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b600354610770908463ffffffff61130716565b600355610783818363ffffffff61130716565b600160a060020a0385166000908152600b6020908152604080832093909355600e905220546107b8908463ffffffff61122516565b600160a060020a0385166000818152600e6020908152604091829020939093558051858152928301869052805191927fbec6a55421a6635b42a70b92f3fcd333a5bd0142ece4f56d6ff6801ef914121b929081900390910190a250505050565b60045481565b600554600090600160a060020a0316331461083857600080fd5b60095460ff831610610894576040805160e560020a62461bcd02815260206004820152601560248201527f4e6f2073756368206772616465206e756d6265722e0000000000000000000000604482015290519081900360640190fd5b5060005b828110156108ed5781600a60008686858181106108b157fe5b60209081029290920135600160a060020a0316835250810191909152604001600020805460ff191660ff92909216919091179055600101610898565b50505050565b600554600160a060020a0316331461090a57600080fd5b60055474010000000000000000000000000000000000000000900460ff16151561093357600080fd5b6005805474ff0000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b60035481565b60086020526000908152604090205481565b60045460035410155b90565b600c5460ff1681565b600154600160a060020a031681565b60055474010000000000000000000000000000000000000000900460ff1681565b600e6020526000908152604090205481565b600554600090600160a060020a03163314610a0557600080fd5b600c5460ff1680610a185750600d544210155b1515610a94576040805160e560020a62461bcd02815260206004820152602560248201527f43757272656e746c7920746f6b656e732063616e6e6f7420626520776974686460448201527f7261776e2e000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b5060005b8151811015610ac957610ac18282815181101515610ab257fe5b90602001906020020151611319565b600101610a98565b5050565b600554600160a060020a03163314610ae457600080fd5b600554604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26005805473ffffffffffffffffffffffffffffffffffffffff19169055565b610b4533826113a0565b50565b600d5481565b600554600160a060020a03163314610b6557600080fd5b60055474010000000000000000000000000000000000000000900460ff1615610b8d57600080fd5b6005805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b6009805482908110610bfb57fe5b600091825260209091200154905081565b600c5460ff1680610c1f5750600d544210155b1515610c9b576040805160e560020a62461bcd02815260206004820152602560248201527f43757272656e746c7920746f6b656e732063616e6e6f7420626520776974686460448201527f7261776e2e000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b610ca433611319565b565b600554600160a060020a031681565b600a6020526000908152604090205460ff1681565b60065481565b6007805482908110610cde57fe5b60009182526020909120600290910201805460019091015490915082565b600554600160a060020a03163314610d1357600080fd5b600c805460ff1916911515919091179055565b600554600160a060020a03163314610d3d57600080fd5b610b4581611507565b600054600160a060020a031681565b600080600080600080600080600080600560149054906101000a900460ff16151515610d8057600080fd5b6409502f90003a1115610e03576040805160e560020a62461bcd02815260206004820152603160248201527f47617320707269636520697320746f6f20657870656e736976652e20446f6e2760448201527f7420626520636f6d70657469746976652e000000000000000000000000000000606482015290519081900360840190fd5b610e0d8c8c611585565b600160a060020a038c166000908152600a602052604081205460ff169a508a11610e81576040805160e560020a62461bcd02815260206004820152601060248201527f4e6f742077686974656c69737465642e00000000000000000000000000000000604482015290519081900360640190fd5b6009805460ff8c16908110610e9257fe5b90600052602060002001549850884210151515610f1f576040805160e560020a62461bcd02815260206004820152602960248201527f43757272656e746c7920756e617661696c61626c6520746f207075726368617360448201527f6520746f6b656e732e0000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a038c166000908152600860205260409020549750610f4a888c63ffffffff61122516565b600654909750871015610fa7576040805160e560020a62461bcd02815260206004820152601a60248201527f53656e7420657468657273206973206e6f7420656e6f7567682e000000000000604482015290519081900360640190fd5b60009550600094505b60075485101561109f576007805486908110610fc857fe5b60009182526020909120600290910201549350428411611009576007805486908110610ff057fe5b9060005260206000209060020201600101549550611094565b600185111561108f5750506007546000198401915083900360010160005b81811015611081576007805484830190811061103f57fe5b906000526020600020906002020160078281548110151561105c57fe5b6000918252602090912082546002909202019081556001918201549082015501611027565b8161108d6007826116ca565b505b61109f565b600190940193610fb0565b858711156000871161110d57606060405190810160405280602181526020017f50757263686173652069732063757272656e746c7920646973616c6c6f77656481526020017f2e0000000000000000000000000000000000000000000000000000000000000081525061116b565b606060405190810160405280602a81526020017f546f74616c2065746865727320796f752776652070757263686173656420697381526020017f20746f6f206d7563682e000000000000000000000000000000000000000000008152505b9015156111f95760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156111be5781810151838201526020016111a6565b50505050905090810190601f1680156111eb5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505050505050505050505050565b600061121f600254836115b090919063ffffffff16565b92915050565b8181018281101561121f57fe5b600160a060020a0382166000908152600b602052604090205461125b908263ffffffff61122516565b600160a060020a039092166000908152600b602052604090209190915550565b6112858282610ac9565b600160a060020a0382166000908152600860205260409020546112ae908263ffffffff61122516565b600160a060020a0390921660009081526008602052604090209190915550565b600154604051600160a060020a03909116903480156108fc02916000818181858888f19350505050158015610b45573d6000803e3d6000fd5b60008282111561131357fe5b50900390565b600160a060020a0381166000908152600b602052604081205490811115610ac957600160a060020a0382166000908152600b602052604081205561135d82826115d9565b604080518281529051600160a060020a038416917f06fd92518610d6cbeff50af5cfc376de1de0809bc0d255140eb20715f25af951919081900360200190a25050565b600160a060020a0382166000908152600e6020526040812054908111611436576040805160e560020a62461bcd02815260206004820152602160248201527f5f62656e656669636961727920686173206e657665722070757263686173656460448201527f2e00000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a0383166000908152600e60209081526040808320839055600890915290205461146c908263ffffffff61130716565b600160a060020a038085166000908152600860205260408082209390935591519084169183156108fc02918491818181858888f193505050501580156114b6573d6000803e3d6000fd5b5081600160a060020a031683600160a060020a03167fec1e5ed733e00f1a00915d56caef57b4f52312dde4f9b3165f213319a0da156b836040518082815260200191505060405180910390a3505050565b600160a060020a038116151561151c57600080fd5b600554604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b61158f82826115f6565b6004546003546115a5908363ffffffff61122516565b1115610ac957600080fd5b60008215156115c15750600061121f565b508181028183828115156115d157fe5b041461121f57fe5b600054610ac990600160a060020a0316838363ffffffff61161716565b600160a060020a038216151561160b57600080fd5b801515610ac957600080fd5b82600160a060020a031663a9059cbb83836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561169357600080fd5b505af11580156116a7573d6000803e3d6000fd5b505050506040513d60208110156116bd57600080fd5b5051151561057257600080fd5b815481835581811115610572576000838152602090206105729161099d9160029182028101918502015b8082111561170e57600080825560018201556002016116f4565b50905600a165627a7a72305820776744c67b577ff8de217199d2970df2048052cb85cf38124ff4ab618396161400290000000000000000000000008d5f5f9a2621be9d32896cf0172515fb211e26be000000000000000000000000115ec79f1de567ec68b7ae7eda501b406626478e000000000000000000000000000000000000000000000000000000000000fde800000000000000000000000000000000000000000000010f0cf064dd59200000000000000000000000000000000000000000000000000000000000006cb55c700000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000015fb7f9b8c3800000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005b852b30000000000000000000000000000000000000000000000000000000005b8288300000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000005b828830000000000000000000000000000000000000000000000000000000005b852b30000000000000000000000000000000000000000000000000000000005b94fd300000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000001158e460913d000000000000000000000000000000000000000000000000000008ac7230489e800000000000000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000008d5f5f9a2621be9d32896cf0172515fb211e26be000000000000000000000000115ec79f1de567ec68b7ae7eda501b406626478e000000000000000000000000000000000000000000000000000000000000fde800000000000000000000000000000000000000000000010f0cf064dd59200000000000000000000000000000000000000000000000000000000000006cb55c700000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000015fb7f9b8c3800000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005b852b30000000000000000000000000000000000000000000000000000000005b8288300000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000005b828830000000000000000000000000000000000000000000000000000000005b852b30000000000000000000000000000000000000000000000000000000005b94fd300000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000001158e460913d000000000000000000000000000000000000000000000000000008ac7230489e800000000000000000000000000000000000000000000000000000000000000000000"
}