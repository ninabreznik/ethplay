{
  "address": "0x0000109a8344de9c00465264006c0000769a2770",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TrueAUD",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "20000",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-19\n*/\n\npragma solidity ^0.4.23;\n\n// File: contracts/Proxy/OwnedUpgradeabilityProxy.sol\n\n/**\n * @title OwnedUpgradeabilityProxy\n * @dev This contract combines an upgradeability proxy with basic authorization control functionalities\n */\ncontract TrueAUD {\n    /**\n    * @dev Event to show ownership has been transferred\n    * @param previousOwner representing the address of the previous owner\n    * @param newOwner representing the address of the new owner\n    */\n    event ProxyOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n    * @dev Event to show ownership transfer is pending\n    * @param currentOwner representing the address of the current owner\n    * @param pendingOwner representing the address of the pending owner\n    */\n    event NewPendingOwner(address currentOwner, address pendingOwner);\n    \n    // Storage position of the owner and pendingOwner of the contract\n    bytes32 private constant proxyOwnerPosition = 0x9afdba48695f976525206667656e0eb4a6d66671c0d3ec078f1f48d2307ed49c;//keccak256(\"trueAUD.proxy.owner\");\n    bytes32 private constant pendingProxyOwnerPosition = 0x7b9044cf1491ee5d1e688907e48d0439248c6543a740f2f5f828fecf8367c4d1;//keccak256(\"trueAUD.pending.proxy.owner\");\n\n    /**\n    * @dev the constructor sets the original owner of the contract to the sender account.\n    */\n    constructor() public {\n        _setUpgradeabilityOwner(msg.sender);\n    }\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyProxyOwner() {\n        require(msg.sender == proxyOwner(), \"only Proxy Owner\");\n        _;\n    }\n\n    /**\n    * @dev Throws if called by any account other than the pending owner.\n    */\n    modifier onlyPendingProxyOwner() {\n        require(msg.sender == pendingProxyOwner(), \"only pending Proxy Owner\");\n        _;\n    }\n\n    /**\n    * @dev Tells the address of the owner\n    * @return the address of the owner\n    */\n    function proxyOwner() public view returns (address owner) {\n        bytes32 position = proxyOwnerPosition;\n        assembly {\n            owner := sload(position)\n        }\n    }\n\n    /**\n    * @dev Tells the address of the owner\n    * @return the address of the owner\n    */\n    function pendingProxyOwner() public view returns (address pendingOwner) {\n        bytes32 position = pendingProxyOwnerPosition;\n        assembly {\n            pendingOwner := sload(position)\n        }\n    }\n\n    /**\n    * @dev Sets the address of the owner\n    */\n    function _setUpgradeabilityOwner(address newProxyOwner) internal {\n        bytes32 position = proxyOwnerPosition;\n        assembly {\n            sstore(position, newProxyOwner)\n        }\n    }\n\n    /**\n    * @dev Sets the address of the owner\n    */\n    function _setPendingUpgradeabilityOwner(address newPendingProxyOwner) internal {\n        bytes32 position = pendingProxyOwnerPosition;\n        assembly {\n            sstore(position, newPendingProxyOwner)\n        }\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    *changes the pending owner to newOwner. But doesn't actually transfer\n    * @param newOwner The address to transfer ownership to.\n    */\n    function transferProxyOwnership(address newOwner) external onlyProxyOwner {\n        require(newOwner != address(0));\n        _setPendingUpgradeabilityOwner(newOwner);\n        emit NewPendingOwner(proxyOwner(), newOwner);\n    }\n\n    /**\n    * @dev Allows the pendingOwner to claim ownership of the proxy\n    */\n    function claimProxyOwnership() external onlyPendingProxyOwner {\n        emit ProxyOwnershipTransferred(proxyOwner(), pendingProxyOwner());\n        _setUpgradeabilityOwner(pendingProxyOwner());\n        _setPendingUpgradeabilityOwner(address(0));\n    }\n\n    /**\n    * @dev Allows the proxy owner to upgrade the current version of the proxy.\n    * @param implementation representing the address of the new implementation to be set.\n    */\n    function upgradeTo(address implementation) external onlyProxyOwner {\n        address currentImplementation;\n        bytes32 position = implementationPosition;\n        assembly {\n            currentImplementation := sload(position)\n        }\n        require(currentImplementation != implementation);\n        assembly {\n          sstore(position, implementation)\n        }\n        emit Upgraded(implementation);\n    }\n    /**\n    * @dev This event will be emitted every time the implementation gets upgraded\n    * @param implementation representing the address of the upgraded implementation\n    */\n    event Upgraded(address indexed implementation);\n\n    // Storage position of the address of the current implementation\n    bytes32 private constant implementationPosition = 0xc20777594ecafd73f44a72aa5ad2de8704211212d04473d4b208539e34ba14eb; //keccak256(\"trueAUD.proxy.implementation\");\n\n    function implementation() public view returns (address impl) {\n        bytes32 position = implementationPosition;\n        assembly {\n            impl := sload(position)\n        }\n    }\n\n    /**\n    * @dev Fallback function allowing to perform a delegatecall to the given implementation.\n    * This function will return whatever the implementation call returns\n    */\n    function() external payable {\n        assembly {\n            let ptr := mload(0x40)\n            calldatacopy(ptr, returndatasize, calldatasize)\n            let result := delegatecall(gas, sload(0xc20777594ecafd73f44a72aa5ad2de8704211212d04473d4b208539e34ba14eb), ptr, calldatasize, returndatasize, returndatasize)\n            returndatacopy(ptr, 0, returndatasize)\n\n            switch result\n            case 0 { revert(ptr, returndatasize) }\n            default { return(ptr, returndatasize) }\n        }\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5061002333640100000000610028810204565b61004c565b7f9afdba48695f976525206667656e0eb4a6d66671c0d3ec078f1f48d2307ed49c55565b6106038061005b6000396000f3006080604052600436106100775763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663025313a281146100ba5780630add8140146100f85780633659cfe61461010d5780635c60da1b1461013d5780639965b3d614610152578063f1739cae14610167575b604051363d82373d3d36837fc20777594ecafd73f44a72aa5ad2de8704211212d04473d4b208539e34ba14eb545af43d6000833e8080156100b6573d83f35b3d83fd5b3480156100c657600080fd5b506100cf610195565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561010457600080fd5b506100cf6101ba565b34801561011957600080fd5b5061013b73ffffffffffffffffffffffffffffffffffffffff600435166101df565b005b34801561014957600080fd5b506100cf61031a565b34801561015e57600080fd5b5061013b61033f565b34801561017357600080fd5b5061013b73ffffffffffffffffffffffffffffffffffffffff60043516610466565b7f9afdba48695f976525206667656e0eb4a6d66671c0d3ec078f1f48d2307ed49c5490565b7f7b9044cf1491ee5d1e688907e48d0439248c6543a740f2f5f828fecf8367c4d15490565b6000806101ea610195565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561028557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f6f6e6c792050726f7879204f776e657200000000000000000000000000000000604482015290519081900360640190fd5b50507fc20777594ecafd73f44a72aa5ad2de8704211212d04473d4b208539e34ba14eb80549073ffffffffffffffffffffffffffffffffffffffff80831690841614156102d157600080fd5b82815560405173ffffffffffffffffffffffffffffffffffffffff8416907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2505050565b7fc20777594ecafd73f44a72aa5ad2de8704211212d04473d4b208539e34ba14eb5490565b6103476101ba565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156103e257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6f6e6c792070656e64696e672050726f7879204f776e65720000000000000000604482015290519081900360640190fd5b6103ea6101ba565b73ffffffffffffffffffffffffffffffffffffffff16610408610195565b73ffffffffffffffffffffffffffffffffffffffff167f5a3e66efaa1e445ebd894728a69d6959842ea1e97bd79b892797106e270efcd960405160405180910390a361045a6104556101ba565b61058f565b61046460006105b3565b565b61046e610195565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561050957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f6f6e6c792050726f7879204f776e657200000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8116151561052b57600080fd5b610534816105b3565b7fb3d55174552271a4f1aaf36b72f50381e892171636b3fb5447fe00e995e7a37b61055d610195565b6040805173ffffffffffffffffffffffffffffffffffffffff928316815291841660208301528051918290030190a150565b7f9afdba48695f976525206667656e0eb4a6d66671c0d3ec078f1f48d2307ed49c55565b7f7b9044cf1491ee5d1e688907e48d0439248c6543a740f2f5f828fecf8367c4d1555600a165627a7a72305820812fd85d9d5f92732effc3c491bae417eeb306384d54674f1a224fc44e38a5420029"
}