{
  "address": "0xc99bd4519ed73de7e8465032782dca6924c2327d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HbeCrowdsale",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-06\n*/\n\n/* file: openzeppelin-solidity/contracts/ownership/Ownable.sol */\npragma solidity ^0.4.24;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n/* eof (openzeppelin-solidity/contracts/ownership/Ownable.sol) */\n/* file: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol */\npragma solidity ^0.4.24;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/* eof (openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol) */\n/* file: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol */\npragma solidity ^0.4.24;\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/* eof (openzeppelin-solidity/contracts/token/ERC20/ERC20.sol) */\n/* file: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol */\npragma solidity ^0.4.24;\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(\n    ERC20Basic _token,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transfer(_to, _value));\n  }\n\n  function safeTransferFrom(\n    ERC20 _token,\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transferFrom(_from, _to, _value));\n  }\n\n  function safeApprove(\n    ERC20 _token,\n    address _spender,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.approve(_spender, _value));\n  }\n}\n\n/* eof (openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol) */\n/* file: openzeppelin-solidity/contracts/ownership/CanReclaimToken.sol */\npragma solidity ^0.4.24;\n\n\n\n/**\n * @title Contracts that should be able to recover tokens\n * @author SylTi\n * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n * This will prevent any accidental loss of tokens.\n */\ncontract CanReclaimToken is Ownable {\n  using SafeERC20 for ERC20Basic;\n\n  /**\n   * @dev Reclaim all ERC20Basic compatible tokens\n   * @param _token ERC20Basic The address of the token contract\n   */\n  function reclaimToken(ERC20Basic _token) external onlyOwner {\n    uint256 balance = _token.balanceOf(this);\n    _token.safeTransfer(owner, balance);\n  }\n\n}\n\n/* eof (openzeppelin-solidity/contracts/ownership/CanReclaimToken.sol) */\n/* file: openzeppelin-solidity/contracts/math/SafeMath.sol */\npragma solidity ^0.4.24;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n/* eof (openzeppelin-solidity/contracts/math/SafeMath.sol) */\n/* file: openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol */\npragma solidity ^0.4.24;\n\n\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale,\n * allowing investors to purchase tokens with ether. This contract implements\n * such functionality in its most fundamental form and can be extended to provide additional\n * functionality and/or custom behavior.\n * The external interface represents the basic interface for purchasing tokens, and conform\n * the base architecture for crowdsales. They are *not* intended to be modified / overridden.\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n * the methods to add functionality. Consider using 'super' where appropriate to concatenate\n * behavior.\n */\ncontract Crowdsale {\n  using SafeMath for uint256;\n  using SafeERC20 for ERC20;\n\n  // The token being sold\n  ERC20 public token;\n\n  // Address where funds are collected\n  address public wallet;\n\n  // How many token units a buyer gets per wei.\n  // The rate is the conversion between wei and the smallest and indivisible token unit.\n  // So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK\n  // 1 wei will give you 1 unit, or 0.001 TOK.\n  uint256 public rate;\n\n  // Amount of wei raised\n  uint256 public weiRaised;\n\n  /**\n   * Event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */\n  event TokenPurchase(\n    address indexed purchaser,\n    address indexed beneficiary,\n    uint256 value,\n    uint256 amount\n  );\n\n  /**\n   * @param _rate Number of token units a buyer gets per wei\n   * @param _wallet Address where collected funds will be forwarded to\n   * @param _token Address of the token being sold\n   */\n  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n    require(_rate > 0);\n    require(_wallet != address(0));\n    require(_token != address(0));\n\n    rate = _rate;\n    wallet = _wallet;\n    token = _token;\n  }\n\n  // -----------------------------------------\n  // Crowdsale external interface\n  // -----------------------------------------\n\n  /**\n   * @dev fallback function ***DO NOT OVERRIDE***\n   */\n  function () external payable {\n    buyTokens(msg.sender);\n  }\n\n  /**\n   * @dev low level token purchase ***DO NOT OVERRIDE***\n   * @param _beneficiary Address performing the token purchase\n   */\n  function buyTokens(address _beneficiary) public payable {\n\n    uint256 weiAmount = msg.value;\n    _preValidatePurchase(_beneficiary, weiAmount);\n\n    // calculate token amount to be created\n    uint256 tokens = _getTokenAmount(weiAmount);\n\n    // update state\n    weiRaised = weiRaised.add(weiAmount);\n\n    _processPurchase(_beneficiary, tokens);\n    emit TokenPurchase(\n      msg.sender,\n      _beneficiary,\n      weiAmount,\n      tokens\n    );\n\n    _updatePurchasingState(_beneficiary, weiAmount);\n\n    _forwardFunds();\n    _postValidatePurchase(_beneficiary, weiAmount);\n  }\n\n  // -----------------------------------------\n  // Internal interface (extensible)\n  // -----------------------------------------\n\n  /**\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.\n   * Example from CappedCrowdsale.sol's _preValidatePurchase method: \n   *   super._preValidatePurchase(_beneficiary, _weiAmount);\n   *   require(weiRaised.add(_weiAmount) <= cap);\n   * @param _beneficiary Address performing the token purchase\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _preValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    require(_beneficiary != address(0));\n    require(_weiAmount != 0);\n  }\n\n  /**\n   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n   * @param _beneficiary Address performing the token purchase\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _postValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    // optional override\n  }\n\n  /**\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n   * @param _beneficiary Address performing the token purchase\n   * @param _tokenAmount Number of tokens to be emitted\n   */\n  function _deliverTokens(\n    address _beneficiary,\n    uint256 _tokenAmount\n  )\n    internal\n  {\n    token.safeTransfer(_beneficiary, _tokenAmount);\n  }\n\n  /**\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n   * @param _beneficiary Address receiving the tokens\n   * @param _tokenAmount Number of tokens to be purchased\n   */\n  function _processPurchase(\n    address _beneficiary,\n    uint256 _tokenAmount\n  )\n    internal\n  {\n    _deliverTokens(_beneficiary, _tokenAmount);\n  }\n\n  /**\n   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n   * @param _beneficiary Address receiving the tokens\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _updatePurchasingState(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    // optional override\n  }\n\n  /**\n   * @dev Override to extend the way in which ether is converted to tokens.\n   * @param _weiAmount Value in wei to be converted into tokens\n   * @return Number of tokens that can be purchased with the specified _weiAmount\n   */\n  function _getTokenAmount(uint256 _weiAmount)\n    internal view returns (uint256)\n  {\n    return _weiAmount.mul(rate);\n  }\n\n  /**\n   * @dev Determines how ETH is stored/forwarded on purchases.\n   */\n  function _forwardFunds() internal {\n    wallet.transfer(msg.value);\n  }\n}\n\n/* eof (openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol) */\n/* file: openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol */\npragma solidity ^0.4.24;\n\n\n\n/**\n * @title TimedCrowdsale\n * @dev Crowdsale accepting contributions only within a time frame.\n */\ncontract TimedCrowdsale is Crowdsale {\n  using SafeMath for uint256;\n\n  uint256 public openingTime;\n  uint256 public closingTime;\n\n  /**\n   * @dev Reverts if not in crowdsale time range.\n   */\n  modifier onlyWhileOpen {\n    // solium-disable-next-line security/no-block-members\n    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n    _;\n  }\n\n  /**\n   * @dev Constructor, takes crowdsale opening and closing times.\n   * @param _openingTime Crowdsale opening time\n   * @param _closingTime Crowdsale closing time\n   */\n  constructor(uint256 _openingTime, uint256 _closingTime) public {\n    // solium-disable-next-line security/no-block-members\n    require(_openingTime >= block.timestamp);\n    require(_closingTime >= _openingTime);\n\n    openingTime = _openingTime;\n    closingTime = _closingTime;\n  }\n\n  /**\n   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n   * @return Whether crowdsale period has elapsed\n   */\n  function hasClosed() public view returns (bool) {\n    // solium-disable-next-line security/no-block-members\n    return block.timestamp > closingTime;\n  }\n\n  /**\n   * @dev Extend parent behavior requiring to be within contributing period\n   * @param _beneficiary Token purchaser\n   * @param _weiAmount Amount of wei contributed\n   */\n  function _preValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n    onlyWhileOpen\n  {\n    super._preValidatePurchase(_beneficiary, _weiAmount);\n  }\n\n}\n\n/* eof (openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol) */\n/* file: openzeppelin-solidity/contracts/crowdsale/distribution/FinalizableCrowdsale.sol */\npragma solidity ^0.4.24;\n\n\n\n/**\n * @title FinalizableCrowdsale\n * @dev Extension of Crowdsale where an owner can do extra work\n * after finishing.\n */\ncontract FinalizableCrowdsale is Ownable, TimedCrowdsale {\n  using SafeMath for uint256;\n\n  bool public isFinalized = false;\n\n  event Finalized();\n\n  /**\n   * @dev Must be called after crowdsale ends, to do some extra finalization\n   * work. Calls the contract's finalization function.\n   */\n  function finalize() public onlyOwner {\n    require(!isFinalized);\n    require(hasClosed());\n\n    finalization();\n    emit Finalized();\n\n    isFinalized = true;\n  }\n\n  /**\n   * @dev Can be overridden to add finalization logic. The overriding function\n   * should call super.finalization() to ensure the chain of finalization is\n   * executed entirely.\n   */\n  function finalization() internal {\n  }\n\n}\n\n/* eof (openzeppelin-solidity/contracts/crowdsale/distribution/FinalizableCrowdsale.sol) */\n/* file: openzeppelin-solidity/contracts/crowdsale/validation/CappedCrowdsale.sol */\npragma solidity ^0.4.24;\n\n\n\n/**\n * @title CappedCrowdsale\n * @dev Crowdsale with a limit for total contributions.\n */\ncontract CappedCrowdsale is Crowdsale {\n  using SafeMath for uint256;\n\n  uint256 public cap;\n\n  /**\n   * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\n   * @param _cap Max amount of wei to be contributed\n   */\n  constructor(uint256 _cap) public {\n    require(_cap > 0);\n    cap = _cap;\n  }\n\n  /**\n   * @dev Checks whether the cap has been reached.\n   * @return Whether the cap was reached\n   */\n  function capReached() public view returns (bool) {\n    return weiRaised >= cap;\n  }\n\n  /**\n   * @dev Extend parent behavior requiring purchase to respect the funding cap.\n   * @param _beneficiary Token purchaser\n   * @param _weiAmount Amount of wei contributed\n   */\n  function _preValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    super._preValidatePurchase(_beneficiary, _weiAmount);\n    require(weiRaised.add(_weiAmount) <= cap);\n  }\n\n}\n\n/* eof (openzeppelin-solidity/contracts/crowdsale/validation/CappedCrowdsale.sol) */\n/* file: openzeppelin-solidity/contracts/access/rbac/Roles.sol */\npragma solidity ^0.4.24;\n\n\n/**\n * @title Roles\n * @author Francisco Giordano (@frangio)\n * @dev Library for managing addresses assigned to a Role.\n * See RBAC.sol for example usage.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an address access to this role\n   */\n  function add(Role storage _role, address _addr)\n    internal\n  {\n    _role.bearer[_addr] = true;\n  }\n\n  /**\n   * @dev remove an address' access to this role\n   */\n  function remove(Role storage _role, address _addr)\n    internal\n  {\n    _role.bearer[_addr] = false;\n  }\n\n  /**\n   * @dev check if an address has this role\n   * // reverts\n   */\n  function check(Role storage _role, address _addr)\n    internal\n    view\n  {\n    require(has(_role, _addr));\n  }\n\n  /**\n   * @dev check if an address has this role\n   * @return bool\n   */\n  function has(Role storage _role, address _addr)\n    internal\n    view\n    returns (bool)\n  {\n    return _role.bearer[_addr];\n  }\n}\n\n/* eof (openzeppelin-solidity/contracts/access/rbac/Roles.sol) */\n/* file: openzeppelin-solidity/contracts/access/rbac/RBAC.sol */\npragma solidity ^0.4.24;\n\n\n\n/**\n * @title RBAC (Role-Based Access Control)\n * @author Matt Condon (@Shrugs)\n * @dev Stores and provides setters and getters for roles and addresses.\n * Supports unlimited numbers of roles and addresses.\n * See //contracts/mocks/RBACMock.sol for an example of usage.\n * This RBAC method uses strings to key roles. It may be beneficial\n * for you to write your own implementation of this interface using Enums or similar.\n */\ncontract RBAC {\n  using Roles for Roles.Role;\n\n  mapping (string => Roles.Role) private roles;\n\n  event RoleAdded(address indexed operator, string role);\n  event RoleRemoved(address indexed operator, string role);\n\n  /**\n   * @dev reverts if addr does not have role\n   * @param _operator address\n   * @param _role the name of the role\n   * // reverts\n   */\n  function checkRole(address _operator, string _role)\n    public\n    view\n  {\n    roles[_role].check(_operator);\n  }\n\n  /**\n   * @dev determine if addr has role\n   * @param _operator address\n   * @param _role the name of the role\n   * @return bool\n   */\n  function hasRole(address _operator, string _role)\n    public\n    view\n    returns (bool)\n  {\n    return roles[_role].has(_operator);\n  }\n\n  /**\n   * @dev add a role to an address\n   * @param _operator address\n   * @param _role the name of the role\n   */\n  function addRole(address _operator, string _role)\n    internal\n  {\n    roles[_role].add(_operator);\n    emit RoleAdded(_operator, _role);\n  }\n\n  /**\n   * @dev remove a role from an address\n   * @param _operator address\n   * @param _role the name of the role\n   */\n  function removeRole(address _operator, string _role)\n    internal\n  {\n    roles[_role].remove(_operator);\n    emit RoleRemoved(_operator, _role);\n  }\n\n  /**\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\n   * @param _role the name of the role\n   * // reverts\n   */\n  modifier onlyRole(string _role)\n  {\n    checkRole(msg.sender, _role);\n    _;\n  }\n\n  /**\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\n   * @param _roles the names of the roles to scope access to\n   * // reverts\n   *\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\n   *  see: https://github.com/ethereum/solidity/issues/2467\n   */\n  // modifier onlyRoles(string[] _roles) {\n  //     bool hasAnyRole = false;\n  //     for (uint8 i = 0; i < _roles.length; i++) {\n  //         if (hasRole(msg.sender, _roles[i])) {\n  //             hasAnyRole = true;\n  //             break;\n  //         }\n  //     }\n\n  //     require(hasAnyRole);\n\n  //     _;\n  // }\n}\n\n/* eof (openzeppelin-solidity/contracts/access/rbac/RBAC.sol) */\n/* file: openzeppelin-solidity/contracts/access/Whitelist.sol */\npragma solidity ^0.4.24;\n\n\n\n\n/**\n * @title Whitelist\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\n * This simplifies the implementation of \"user permissions\".\n */\ncontract Whitelist is Ownable, RBAC {\n  string public constant ROLE_WHITELISTED = \"whitelist\";\n\n  /**\n   * @dev Throws if operator is not whitelisted.\n   * @param _operator address\n   */\n  modifier onlyIfWhitelisted(address _operator) {\n    checkRole(_operator, ROLE_WHITELISTED);\n    _;\n  }\n\n  /**\n   * @dev add an address to the whitelist\n   * @param _operator address\n   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n   */\n  function addAddressToWhitelist(address _operator)\n    public\n    onlyOwner\n  {\n    addRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev getter to determine if address is in whitelist\n   */\n  function whitelist(address _operator)\n    public\n    view\n    returns (bool)\n  {\n    return hasRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev add addresses to the whitelist\n   * @param _operators addresses\n   * @return true if at least one address was added to the whitelist,\n   * false if all addresses were already in the whitelist\n   */\n  function addAddressesToWhitelist(address[] _operators)\n    public\n    onlyOwner\n  {\n    for (uint256 i = 0; i < _operators.length; i++) {\n      addAddressToWhitelist(_operators[i]);\n    }\n  }\n\n  /**\n   * @dev remove an address from the whitelist\n   * @param _operator address\n   * @return true if the address was removed from the whitelist,\n   * false if the address wasn't in the whitelist in the first place\n   */\n  function removeAddressFromWhitelist(address _operator)\n    public\n    onlyOwner\n  {\n    removeRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev remove addresses from the whitelist\n   * @param _operators addresses\n   * @return true if at least one address was removed from the whitelist,\n   * false if all addresses weren't in the whitelist in the first place\n   */\n  function removeAddressesFromWhitelist(address[] _operators)\n    public\n    onlyOwner\n  {\n    for (uint256 i = 0; i < _operators.length; i++) {\n      removeAddressFromWhitelist(_operators[i]);\n    }\n  }\n\n}\n\n/* eof (openzeppelin-solidity/contracts/access/Whitelist.sol) */\n/* file: openzeppelin-solidity/contracts/crowdsale/validation/WhitelistedCrowdsale.sol */\npragma solidity ^0.4.24;\n\n\n\n/**\n * @title WhitelistedCrowdsale\n * @dev Crowdsale in which only whitelisted users can contribute.\n */\ncontract WhitelistedCrowdsale is Whitelist, Crowdsale {\n  /**\n   * @dev Extend parent behavior requiring beneficiary to be in whitelist.\n   * @param _beneficiary Token beneficiary\n   * @param _weiAmount Amount of wei contributed\n   */\n  function _preValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n    onlyIfWhitelisted(_beneficiary)\n  {\n    super._preValidatePurchase(_beneficiary, _weiAmount);\n  }\n\n}\n\n/* eof (openzeppelin-solidity/contracts/crowdsale/validation/WhitelistedCrowdsale.sol) */\n/* file: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol */\npragma solidity ^0.4.24;\n\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  uint256 internal totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n/* eof (openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol) */\n/* file: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol */\npragma solidity ^0.4.24;\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n/* eof (openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol) */\n/* file: openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol */\npragma solidity ^0.4.24;\n\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  modifier hasMintPermission() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    public\n    hasMintPermission\n    canMint\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() public onlyOwner canMint returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n/* eof (openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol) */\n/* file: openzeppelin-solidity/contracts/crowdsale/emission/MintedCrowdsale.sol */\npragma solidity ^0.4.24;\n\n\n\n/**\n * @title MintedCrowdsale\n * @dev Extension of Crowdsale contract whose tokens are minted in each purchase.\n * Token ownership should be transferred to MintedCrowdsale for minting.\n */\ncontract MintedCrowdsale is Crowdsale {\n\n  /**\n   * @dev Overrides delivery by minting tokens upon purchase.\n   * @param _beneficiary Token purchaser\n   * @param _tokenAmount Number of tokens to be minted\n   */\n  function _deliverTokens(\n    address _beneficiary,\n    uint256 _tokenAmount\n  )\n    internal\n  {\n    // Potentially dangerous assumption about the type of the token.\n    require(MintableToken(address(token)).mint(_beneficiary, _tokenAmount));\n  }\n}\n\n/* eof (openzeppelin-solidity/contracts/crowdsale/emission/MintedCrowdsale.sol) */\n/* file: openzeppelin-solidity/contracts/token/ERC20/TokenTimelock.sol */\npragma solidity ^0.4.24;\n\n\n\n/**\n * @title TokenTimelock\n * @dev TokenTimelock is a token holder contract that will allow a\n * beneficiary to extract the tokens after a given release time\n */\ncontract TokenTimelock {\n  using SafeERC20 for ERC20Basic;\n\n  // ERC20 basic token contract being held\n  ERC20Basic public token;\n\n  // beneficiary of tokens after they are released\n  address public beneficiary;\n\n  // timestamp when token release is enabled\n  uint256 public releaseTime;\n\n  constructor(\n    ERC20Basic _token,\n    address _beneficiary,\n    uint256 _releaseTime\n  )\n    public\n  {\n    // solium-disable-next-line security/no-block-members\n    require(_releaseTime > block.timestamp);\n    token = _token;\n    beneficiary = _beneficiary;\n    releaseTime = _releaseTime;\n  }\n\n  /**\n   * @notice Transfers tokens held by timelock to beneficiary.\n   */\n  function release() public {\n    // solium-disable-next-line security/no-block-members\n    require(block.timestamp >= releaseTime);\n\n    uint256 amount = token.balanceOf(address(this));\n    require(amount > 0);\n\n    token.safeTransfer(beneficiary, amount);\n  }\n}\n\n/* eof (openzeppelin-solidity/contracts/token/ERC20/TokenTimelock.sol) */\n/* file: openzeppelin-solidity/contracts/lifecycle/Pausable.sol */\npragma solidity ^0.4.24;\n\n\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyOwner whenNotPaused {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyOwner whenPaused {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n/* eof (openzeppelin-solidity/contracts/lifecycle/Pausable.sol) */\n/* file: ./contracts/ico/HbeCrowdsale.sol */\n/**\n * @title HBE Crowdsale\n * @author Validity Labs AG <[email protected]>\n */\npragma solidity 0.4.24;\n\n\n\n// solhint-disable-next-line\ncontract HbeCrowdsale is CanReclaimToken, CappedCrowdsale, MintedCrowdsale, WhitelistedCrowdsale, FinalizableCrowdsale, Pausable {\n    /*** PRE-DEPLOYMENT CONFIGURED CONSTANTS */\n    address public constant ETH_WALLET = 0x9E35Ee118D9B305F27AE1234BF5c035c1860989C;\n    address public constant TEAM_WALLET = 0x992CEad41b885Dc90Ef82673c3c211Efa1Ef1AE2;\n    uint256 public constant START_EASTER_BONUS = 1555668000; // Friday, 19 April 2019 12:00:00 GMT+02:00\n    uint256 public constant END_EASTER_BONUS = 1555970399;   // Monday, 22 April 2019 23:59:59 GMT+02:00\n    /*** CONSTANTS ***/\n    uint256 public constant ICO_HARD_CAP = 22e8;             // 2,200,000,000 tokens, 0 decimals spec v1.7\n    uint256 public constant CHF_HBE_RATE = 0.0143 * 1e4;    // 0.0143 (.10/7) CHF per HBE Token\n    uint256 public constant TEAM_HBE_AMOUNT = 200e6;        // spec v1.7 200,000,000 team tokens\n    uint256 public constant FOUR = 4;            // 25%\n    uint256 public constant TWO = 2;             // 50%\n    uint256 public constant HUNDRED = 100;\n    uint256 public constant ONE_YEAR = 365 days;\n    uint256 public constant BONUS_DURATION = 14 days;   // two weeks\n    uint256 public constant BONUS_1 = 15;   // set 1 - 15% bonus\n    uint256 public constant BONUS_2 = 10;   // set 2 and Easter Bonus - 10% bonus\n    uint256 public constant BONUS_3 = 5;    // set 3 - 5% bonus\n    uint256 public constant PRECISION = 1e6; // precision to account for none decimals\n\n    /*** VARIABLES ***/\n    // marks team allocation as minted\n    bool public isTeamTokensMinted;\n    address[3] public teamTokensLocked;\n\n    // allow managers to whitelist and confirm contributions by manager accounts\n    // managers can be set and altered by owner, multiple manager accounts are possible\n    mapping(address => bool) public isManager;\n\n    uint256 public tokensMinted;    // total token supply that has been minted and sold. does not include team tokens\n    uint256 public rateDecimals;    // # of decimals that the CHF/ETH rate came in as\n\n    /*** EVENTS  ***/\n    event ChangedManager(address indexed manager, bool active);\n    event NonEthTokenPurchase(uint256 investmentType, address indexed beneficiary, uint256 tokenAmount);\n    event RefundAmount(address indexed beneficiary, uint256 refundAmount);\n    event UpdatedFiatRate(uint256 fiatRate, uint256 rateDecimals);\n\n    /*** MODIFIERS ***/\n    modifier onlyManager() {\n        require(isManager[msg.sender], \"not manager\");\n        _;\n    }\n\n    modifier onlyValidAddress(address _address) {\n        require(_address != address(0), \"invalid address\");\n        _;\n    }\n\n    modifier onlyNoneZero(address _to, uint256 _amount) {\n        require(_to != address(0), \"invalid address\");\n        require(_amount > 0, \"invalid amount\");\n        _;\n    }\n\n    /**\n     * @dev constructor Deploy HBE Token Crowdsale\n     * @param _startTime uint256 Start time of the crowdsale\n     * @param _endTime uint256 End time of the crowdsale\n     * @param _token ERC20 token address\n     * @param _rate current CHF per ETH rate\n     * @param _rateDecimals the # of decimals contained in the _rate variable\n     */\n    constructor(\n        uint256 _startTime,\n        uint256 _endTime,\n        address _token,\n        uint256 _rate,\n        uint256 _rateDecimals\n        )\n        public\n        Crowdsale(_rate, ETH_WALLET, ERC20(_token))\n        TimedCrowdsale(_startTime, _endTime)\n        CappedCrowdsale(ICO_HARD_CAP) {\n            setManager(msg.sender, true);\n            _updateRate(_rate, _rateDecimals);\n        }\n\n    /**\n     * @dev Allow manager to update the exchange rate when necessary.\n     * @param _rate uint256 current CHF per ETH rate\n     * @param _rateDecimals the # of decimals contained in the _rate variable\n     */\n    function updateRate(uint256 _rate, uint256 _rateDecimals) external onlyManager {\n        _updateRate(_rate, _rateDecimals);\n    }\n\n    /**\n    * @dev create 3 token lockup contracts for X years to be released to the TEAM_WALLET\n    */\n    function mintTeamTokens() external onlyManager {\n        require(!isTeamTokensMinted, \"team tokens already minted\");\n\n        isTeamTokensMinted = true;\n\n        TokenTimelock team1 = new TokenTimelock(ERC20Basic(token), TEAM_WALLET, openingTime.add(ONE_YEAR));\n        TokenTimelock team2 = new TokenTimelock(ERC20Basic(token), TEAM_WALLET, openingTime.add(2 * ONE_YEAR));\n        TokenTimelock team3 = new TokenTimelock(ERC20Basic(token), TEAM_WALLET, openingTime.add(3 * ONE_YEAR));\n\n        teamTokensLocked[0] = address(team1);\n        teamTokensLocked[1] = address(team2);\n        teamTokensLocked[2] = address(team3);\n\n        _deliverTokens(address(team1), TEAM_HBE_AMOUNT.div(FOUR));\n        _deliverTokens(address(team2), TEAM_HBE_AMOUNT.div(FOUR));\n        _deliverTokens(address(team3), TEAM_HBE_AMOUNT.div(TWO));\n    }\n\n    /**\n    * @dev onlyManager allowed to handle batches of non-ETH investments\n    * @param _investmentTypes uint256[] array of ids to identify investment types IE: BTC, CHF, EUR, etc...\n    * @param _beneficiaries address[]\n    * @param _amounts uint256[]\n    */\n    function batchNonEthPurchase(uint256[] _investmentTypes, address[] _beneficiaries, uint256[] _amounts) external {\n        require(_beneficiaries.length == _amounts.length && _investmentTypes.length == _amounts.length, \"length !=\");\n\n        for (uint256 i; i < _beneficiaries.length; i = i.add(1)) {\n            nonEthPurchase(_investmentTypes[i], _beneficiaries[i], _amounts[i]);\n        }\n    }\n\n    /**\n    * @dev return the array of 3 token lock contracts for the HBE Team\n    */\n    function getTeamLockedContracts() external view returns (address[3]) {\n        return teamTokensLocked;\n    }\n\n    /** OVERRIDE\n    * @dev low level token purchase\n    * @param _beneficiary Address performing the token purchase\n    */\n    function buyTokens(address _beneficiary) public payable {\n        uint256 weiAmount = msg.value;\n\n        _preValidatePurchase(_beneficiary, weiAmount);\n\n        // calculate token amount to be created\n        uint256 tokens = _getTokenAmount(weiAmount);\n\n        // calculate a wei refund, if any, since decimal place is 0\n        // update weiAmount if refund is > 0\n        weiAmount = weiAmount.sub(refundLeftOverWei(weiAmount, tokens));\n\n        // calculate bonus, if in bonus time period(s)\n        tokens = tokens.add(_calcBonusAmount(tokens));\n\n        // update state\n        weiRaised = weiRaised.add(weiAmount);\n        //push to investments array\n        _processPurchase(_beneficiary, tokens);\n        // throw event\n        emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n\n        // forward wei to the wallet\n        _forwardFunds(weiAmount);\n    }\n\n    /** OVERRIDE - change to tokensMinted from weiRaised\n    * @dev Checks whether the cap has been reached.\n    * only active if a cap has been set\n    * @return Whether the cap was reached\n    */\n    function capReached() public view returns (bool) {\n        return tokensMinted >= cap;\n    }\n\n    /**\n     * @dev Set / alter manager / whitelister \"account\". This can be done from owner only\n     * @param _manager address address of the manager to create/alter\n     * @param _active bool flag that shows if the manager account is active\n     */\n    function setManager(address _manager, bool _active) public onlyOwner onlyValidAddress(_manager) {\n        isManager[_manager] = _active;\n        emit ChangedManager(_manager, _active);\n    }\n\n    /** OVERRIDE\n    * @dev add an address to the whitelist\n    * @param _address address\n    * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n    */\n    function addAddressToWhitelist(address _address)\n        public\n        onlyManager\n    {\n        addRole(_address, ROLE_WHITELISTED);\n    }\n\n    /** OVERRIDE\n    * @dev remove an address from the whitelist\n    * @param _address address\n    * @return true if the address was removed from the whitelist,\n    * false if the address wasn't in the whitelist in the first place\n    */\n    function removeAddressFromWhitelist(address _address)\n        public\n        onlyManager\n    {\n        removeRole(_address, ROLE_WHITELISTED);\n    }\n\n    /** OVERRIDE\n    * @dev remove addresses from the whitelist\n    * @param _addresses addresses\n    * @return true if at least one address was removed from the whitelist,\n    * false if all addresses weren't in the whitelist in the first place\n    */\n    function removeAddressesFromWhitelist(address[] _addresses)\n        public\n        onlyManager\n    {\n        for (uint256 i = 0; i < _addresses.length; i++) {\n            removeAddressFromWhitelist(_addresses[i]);\n        }\n    }\n\n    /** OVERRIDE\n    * @dev add addresses to the whitelist\n    * @param _addresses addresses\n    * @return true if at least one address was added to the whitelist,\n    * false if all addresses were already in the whitelist\n    */\n    function addAddressesToWhitelist(address[] _addresses)\n        public\n        onlyManager\n    {\n        for (uint256 i = 0; i < _addresses.length; i++) {\n            addAddressToWhitelist(_addresses[i]);\n        }\n    }\n\n    /**\n    * @dev onlyManager allowed to allocate non-ETH investments during the crowdsale\n    * @param _investmentType uint256\n    * @param _beneficiary address\n    * @param _tokenAmount uint256\n    */\n    function nonEthPurchase(uint256 _investmentType, address _beneficiary, uint256 _tokenAmount) public\n        onlyManager\n        onlyWhileOpen\n        onlyNoneZero(_beneficiary, _tokenAmount)\n    {\n        _processPurchase(_beneficiary, _tokenAmount);\n        emit NonEthTokenPurchase(_investmentType, _beneficiary, _tokenAmount);\n    }\n\n    /** OVERRIDE\n    * @dev called by the manager to pause, triggers stopped state\n    */\n    function pause() public onlyManager whenNotPaused onlyWhileOpen {\n        paused = true;\n        emit Pause();\n    }\n\n    /** OVERRIDE\n    * @dev called by the manager to unpause, returns to normal state\n    */\n    function unpause() public onlyManager whenPaused {\n        paused = false;\n        emit Unpause();\n    }\n\n    /** OVERRIDE\n    * @dev onlyManager allows tokens to be tradeable transfers HBE Token ownership back to owner\n    */\n    function finalize() public onlyManager {\n        Pausable(address(token)).unpause();\n        Ownable(address(token)).transferOwnership(owner);\n\n        super.finalize();\n    }\n\n    /*** INTERNAL/PRIVATE FUNCTIONS ***/\n    /** OVERRIDE - do not call super.METHOD\n    * @dev Validation of an incoming purchase. Use require statements to revert\n    * state when conditions are not met. Use super to concatenate validations.\n    * @param _beneficiary Address performing the token purchase\n    * @param _weiAmount Value in wei involved in the purchase\n    */\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount)\n        internal\n        onlyWhileOpen\n        whenNotPaused\n        onlyIfWhitelisted(_beneficiary) {\n            require(_weiAmount != 0, \"invalid amount\");\n            require(!capReached(), \"cap has been reached\");\n        }\n\n    /** OVERRIDE\n    * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n    * @param _beneficiary Address receiving the tokens\n    * @param _tokenAmount Number of tokens to be purchased\n    */\n    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n        tokensMinted = tokensMinted.add(_tokenAmount);\n        // respect the token cap\n        require(tokensMinted <= cap, \"tokensMinted > cap\");\n        _deliverTokens(_beneficiary, _tokenAmount);\n    }\n\n    /** OVERRIDE\n    * @dev Override to extend the way in which ether is converted to tokens.\n    * @param _weiAmount Value in wei to be converted into tokens\n    * @return Number of tokens that can be purchased with the specified _weiAmount\n    */\n    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n        return _weiAmount.mul(rate).div(rateDecimals).div(1e18).div(PRECISION);\n    }\n\n    /**\n    * @dev calculate the bonus amount pending on time\n    */\n    function _calcBonusAmount(uint256 _tokenAmount) internal view returns (uint256) {\n        uint256 currentBonus;\n\n        /* solhint-disable */\n        if (block.timestamp < openingTime.add(BONUS_DURATION)) {\n            currentBonus = BONUS_1;\n        } else if (block.timestamp < openingTime.add(BONUS_DURATION.mul(2))) {\n            currentBonus = BONUS_2;\n        } else if (block.timestamp < openingTime.add(BONUS_DURATION.mul(3))) {\n            currentBonus = BONUS_3;\n        } else if (block.timestamp >= START_EASTER_BONUS && block.timestamp < END_EASTER_BONUS) {\n            currentBonus = BONUS_2;\n        }\n        /* solhint-enable */\n\n        return _tokenAmount.mul(currentBonus).div(HUNDRED);\n    }\n\n    /**\n     * @dev calculate wei refund to investor, if any. This handles rounding errors\n     * which are important here due to the 0 decimals\n     * @param _weiReceived uint256 wei received from the investor\n     * @param _tokenAmount uint256 HBE tokens minted for investor\n     */\n    function refundLeftOverWei(uint256 _weiReceived, uint256 _tokenAmount) internal returns (uint256 refundAmount) {\n        uint256 weiInvested = _tokenAmount.mul(1e18).mul(PRECISION).mul(rateDecimals).div(rate);\n\n        if (weiInvested < _weiReceived) {\n            refundAmount = _weiReceived.sub(weiInvested);\n        }\n\n        if (refundAmount > 0) {\n            msg.sender.transfer(refundAmount);\n            emit RefundAmount(msg.sender, refundAmount);\n        }\n\n        return refundAmount;\n    }\n\n    /** OVERRIDE\n    * @dev Determines how ETH is stored/forwarded on purchases.\n    * @param _weiAmount uint256\n    */\n    function _forwardFunds(uint256 _weiAmount) internal {\n        wallet.transfer(_weiAmount);\n    }\n\n    /**\n     * @dev Allow manager to update the exchange rate when necessary.\n     * @param _rate uint256\n     * @param _rateDecimals the # of decimals contained in the _rate variable\n     */\n    function _updateRate(uint256 _rate, uint256 _rateDecimals) internal {\n        require(_rateDecimals <= 18);\n\n        rateDecimals = 10**_rateDecimals;\n        rate = (_rate.mul(1e4).mul(PRECISION).div(CHF_HBE_RATE));\n\n        emit UpdatedFiatRate(_rate, _rateDecimals);\n    }\n}\n\n/* eof (./contracts/ico/HbeCrowdsale.sol) */",
  "bytecode": "60806040526009805461ffff191690553480156200001c57600080fd5b5060405160a08062002a008339810160409081528151602083015191830151606084015160809094015160008054600160a060020a0319163317815592949192859085906383215600908590739e35ee118d9b305f27ae1234bf5c035c1860989c90889083116200008c57600080fd5b600160a060020a0382161515620000a257600080fd5b600160a060020a0381161515620000b857600080fd5b60049290925560038054600160a060020a03928316600160a060020a0319918216179091556002805492909316911617905560008111620000f857600080fd5b600655428210156200010957600080fd5b818110156200011757600080fd5b6007919091556008556200013633600164010000000062000156810204565b6200014b828264010000000062000248810204565b50505050506200033e565b600054600160a060020a031633146200016e57600080fd5b81600160a060020a0381161515620001e757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f696e76616c696420616464726573730000000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a0383166000818152600d6020908152604091829020805460ff1916861515908117909155825190815291517fc805cd93de579d61b0924c5b5ed9db042198f72031750f8c95608d1cf7d838559281900390910190a2505050565b60128111156200025757600080fd5b600a81900a600f55620002b3608f6200029e620f424062000289866127106401000000006200225e620002f582021704565b906401000000006200225e620002f582021704565b90640100000000620021266200032882021704565b600455604080518381526020810183905281517f1632e064a07f4bb12ce748bd252a7a619a35eabe7f80d87ed2328460f3e31499929181900390910190a15050565b6000821515620003085750600062000322565b508181028183828115156200031957fe5b04146200032257fe5b92915050565b600081838115156200033657fe5b049392505050565b6126b2806200034e6000396000f30060806040526004361061026e5763ffffffff60e060020a6000350416630988ca8c81146102795780630be6315d146102e057806313e65069146103075780631515bc2b1461032e57806316d3bfbb1461035757806317ffc3201461036c57806318b919e91461038d5780631a3480b514610417578063217fe6c61461042c57806324953eaa14610493578063286dd3f5146104e85780632b905bf6146105095780632c4e722e1461053a5780632d5381da1461054f5780632de49b101461056457806334945b3a1461059c578063355274ea146105b15780633f4ba83a146105c65780634042b66f146105db578063405abb41146105f05780634b6753bc1461060b5780634bb278f3146106205780634f93594514610635578063521eb2731461064a5780635c975abb1461065f5780636de9f32b14610674578063715018a61461068957806376a29f231461069e5780637b77bbd7146106b35780637b9417c8146106c85780638456cb59146106e9578063887c9e73146106fe5780638d4e4083146107135780638da5cb5b146107285780639b19251a1461073d5780639c9d53ac1461075e578063a013ad5414610773578063a5e90eee14610788578063aaeee9e5146107ae578063aaf5eb68146107c3578063b3945036146107d8578063b7a8807c146107ed578063cd9b68d114610802578063cfe3c88414610817578063d2de7f181461082c578063d37a85cd14610879578063e08d72ac1461088e578063e2ec6ec3146108a6578063e5ff2e8a146108fb578063ec8ac4d814610910578063f2fde38b14610924578063f3ae241514610945578063f85fc0ab14610966578063fc0c546a1461097b575b61027733610990565b005b34801561028557600080fd5b5060408051602060046024803582810135601f8101859004850286018501909652858552610277958335600160a060020a0316953695604494919390910191908190840183828082843750949750610a569650505050505050565b3480156102ec57600080fd5b50610277600435600160a060020a0360243516604435610ac4565b34801561031357600080fd5b5061031c610c48565b60408051918252519081900360200190f35b34801561033a57600080fd5b50610343610c4d565b604080519115158252519081900360200190f35b34801561036357600080fd5b5061031c610c55565b34801561037857600080fd5b50610277600160a060020a0360043516610c5d565b34801561039957600080fd5b506103a2610d25565b6040805160208082528351818301528351919283929083019185019080838360005b838110156103dc5781810151838201526020016103c4565b50505050905090810190601f1680156104095780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561042357600080fd5b5061031c610d4a565b34801561043857600080fd5b5060408051602060046024803582810135601f8101859004850286018501909652858552610343958335600160a060020a0316953695604494919390910191908190840183828082843750949750610d509650505050505050565b34801561049f57600080fd5b506040805160206004803580820135838102808601850190965280855261027795369593946024949385019291829185019084908082843750949750610dc59650505050505050565b3480156104f457600080fd5b50610277600160a060020a0360043516610e51565b34801561051557600080fd5b5061051e610ed8565b60408051600160a060020a039092168252519081900360200190f35b34801561054657600080fd5b5061031c610ef0565b34801561055b57600080fd5b5061031c610ef6565b34801561057057600080fd5b506102776024600480358281019290820135918135808301929082013591604435918201910135610efb565b3480156105a857600080fd5b5061031c610fd8565b3480156105bd57600080fd5b5061031c610fdd565b3480156105d257600080fd5b50610277610fe3565b3480156105e757600080fd5b5061031c611086565b3480156105fc57600080fd5b5061027760043560243561108c565b34801561061757600080fd5b5061031c6110ed565b34801561062c57600080fd5b506102776110f3565b34801561064157600080fd5b5061034361123d565b34801561065657600080fd5b5061051e611248565b34801561066b57600080fd5b50610343611257565b34801561068057600080fd5b5061031c611265565b34801561069557600080fd5b5061027761126b565b3480156106aa57600080fd5b5061031c6112d7565b3480156106bf57600080fd5b5061051e6112dc565b3480156106d457600080fd5b50610277600160a060020a03600435166112f4565b3480156106f557600080fd5b50610277611378565b34801561070a57600080fd5b5061031c61143d565b34801561071f57600080fd5b50610343611445565b34801561073457600080fd5b5061051e61144e565b34801561074957600080fd5b50610343600160a060020a036004351661145d565b34801561076a57600080fd5b5061031c61148c565b34801561077f57600080fd5b5061031c611494565b34801561079457600080fd5b50610277600160a060020a0360043516602435151561149b565b3480156107ba57600080fd5b5061031c611574565b3480156107cf57600080fd5b5061031c61157c565b3480156107e457600080fd5b5061031c611583565b3480156107f957600080fd5b5061031c611588565b34801561080e57600080fd5b5061034361158e565b34801561082357600080fd5b5061031c61159d565b34801561083857600080fd5b506108416115a5565b6040518082606080838360005b8381101561086657818101518382015260200161084e565b5050505090500191505060405180910390f35b34801561088557600080fd5b5061031c6115ea565b34801561089a57600080fd5b5061051e6004356115ef565b3480156108b257600080fd5b50604080516020600480358082013583810280860185019096528085526102779536959394602494938501929182918501908490808284375094975061160c9650505050505050565b34801561090757600080fd5b50610277611698565b610277600160a060020a0360043516610990565b34801561093057600080fd5b50610277600160a060020a0360043516611986565b34801561095157600080fd5b50610343600160a060020a03600435166119a6565b34801561097257600080fd5b5061031c6119bb565b34801561098757600080fd5b5061051e6119c0565b34600061099d83836119cf565b6109a682611ae5565b90506109c26109b58383611b21565b839063ffffffff611bf016565b91506109dd6109d082611c02565b829063ffffffff611cc316565b6005549091506109f3908363ffffffff611cc316565b600555610a008382611cd0565b60408051838152602081018390528151600160a060020a0386169233927f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad18929081900390910190a3610a5182611d4b565b505050565b610ac0826001836040518082805190602001908083835b60208310610a8c5780518252601f199092019160209182019101610a6d565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922092915050611d85565b5050565b336000908152600d602052604090205460ff161515610b1b576040805160e560020a62461bcd02815260206004820152600b6024820152600080516020612647833981519152604482015290519081900360640190fd5b6007544210158015610b2f57506008544211155b1515610b3a57600080fd5b8181600160a060020a0382161515610b9c576040805160e560020a62461bcd02815260206004820152600f60248201527f696e76616c696420616464726573730000000000000000000000000000000000604482015290519081900360640190fd5b60008111610bf4576040805160e560020a62461bcd02815260206004820152600e60248201527f696e76616c696420616d6f756e74000000000000000000000000000000000000604482015290519081900360640190fd5b610bfe8484611cd0565b60408051868152602081018590528151600160a060020a038716927f747cb234fb9456da2645e3e19006aa9cab6ef644483b1c3c0a74bee9c7d6a41d928290030190a25050505050565b600a81565b600854421190565b6301e1338081565b60008054600160a060020a03163314610c7557600080fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a038416916370a082319160248083019260209291908290030181600087803b158015610cd657600080fd5b505af1158015610cea573d6000803e3d6000fd5b505050506040513d6020811015610d0057600080fd5b5051600054909150610ac090600160a060020a0384811691168363ffffffff611d9a16565b6040805180820190915260098152600080516020612667833981519152602082015281565b600f5481565b6000610dbc836001846040518082805190602001908083835b60208310610d885780518252601f199092019160209182019101610d69565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922092915050611e34565b90505b92915050565b336000908152600d602052604081205460ff161515610e1c576040805160e560020a62461bcd02815260206004820152600b6024820152600080516020612647833981519152604482015290519081900360640190fd5b5060005b8151811015610ac057610e498282815181101515610e3a57fe5b90602001906020020151610e51565b600101610e20565b336000908152600d602052604090205460ff161515610ea8576040805160e560020a62461bcd02815260206004820152600b6024820152600080516020612647833981519152604482015290519081900360640190fd5b610ed581604080519081016040528060098152602001600080516020612667833981519152815250611e53565b50565b73992cead41b885dc90ef82673c3c211efa1ef1ae281565b60045481565b608f81565b60008382148015610f0b57508582145b1515610f61576040805160e560020a62461bcd02815260206004820152600960248201527f6c656e67746820213d0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b83811015610fcf57610fb7878783818110610f7857fe5b905060200201358686848181101515610f8d57fe5b90506020020135600160a060020a03168585858181101515610fab57fe5b90506020020135610ac4565b610fc881600163ffffffff611cc316565b9050610f61565b50505050505050565b600281565b60065481565b336000908152600d602052604090205460ff16151561103a576040805160e560020a62461bcd02815260206004820152600b6024820152600080516020612647833981519152604482015290519081900360640190fd5b600954610100900460ff16151561105057600080fd5b6009805461ff00191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b60055481565b336000908152600d602052604090205460ff1615156110e3576040805160e560020a62461bcd02815260206004820152600b6024820152600080516020612647833981519152604482015290519081900360640190fd5b610ac08282611f64565b60085481565b336000908152600d602052604090205460ff16151561114a576040805160e560020a62461bcd02815260206004820152600b6024820152600080516020612647833981519152604482015290519081900360640190fd5b600260009054906101000a9004600160a060020a0316600160a060020a0316633f4ba83a6040518163ffffffff1660e060020a028152600401600060405180830381600087803b15801561119d57600080fd5b505af11580156111b1573d6000803e3d6000fd5b505060025460008054604080517ff2fde38b000000000000000000000000000000000000000000000000000000008152600160a060020a039283166004820152905191909316945063f2fde38b935060248084019382900301818387803b15801561121b57600080fd5b505af115801561122f573d6000803e3d6000fd5b5050505061123b611fda565b565b600654600e54101590565b600354600160a060020a031681565b600954610100900460ff1681565b600e5481565b600054600160a060020a0316331461128257600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600f81565b739e35ee118d9b305f27ae1234bf5c035c1860989c81565b336000908152600d602052604090205460ff16151561134b576040805160e560020a62461bcd02815260206004820152600b6024820152600080516020612647833981519152604482015290519081900360640190fd5b610ed581604080519081016040528060098152602001600080516020612667833981519152815250612054565b336000908152600d602052604090205460ff1615156113cf576040805160e560020a62461bcd02815260206004820152600b6024820152600080516020612647833981519152604482015290519081900360640190fd5b600954610100900460ff16156113e457600080fd5b60075442101580156113f857506008544211155b151561140357600080fd5b6009805461ff0019166101001790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b635cb99c2081565b60095460ff1681565b600054600160a060020a031681565b6000610dbf82604080519081016040528060098152602001600080516020612667833981519152815250610d50565b630bebc20081565b6212750081565b600054600160a060020a031633146114b257600080fd5b81600160a060020a0381161515611513576040805160e560020a62461bcd02815260206004820152600f60248201527f696e76616c696420616464726573730000000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a0383166000818152600d6020908152604091829020805460ff1916861515908117909155825190815291517fc805cd93de579d61b0924c5b5ed9db042198f72031750f8c95608d1cf7d838559281900390910190a2505050565b635cbe395f81565b620f424081565b600481565b60075481565b60095462010000900460ff1681565b638321560081565b6115ad6122ce565b60408051606081019182905290600a9060039082845b8154600160a060020a031681526001909101906020018083116115c3575050505050905090565b600581565b600a81600381106115fc57fe5b0154600160a060020a0316905081565b336000908152600d602052604081205460ff161515611663576040805160e560020a62461bcd02815260206004820152600b6024820152600080516020612647833981519152604482015290519081900360640190fd5b5060005b8151811015610ac057611690828281518110151561168157fe5b906020019060200201516112f4565b600101611667565b336000908152600d60205260408120548190819060ff1615156116f3576040805160e560020a62461bcd02815260206004820152600b6024820152600080516020612647833981519152604482015290519081900360640190fd5b60095462010000900460ff1615611754576040805160e560020a62461bcd02815260206004820152601a60248201527f7465616d20746f6b656e7320616c7265616479206d696e746564000000000000604482015290519081900360640190fd5b6009805462ff0000191662010000179055600254600754600160a060020a039091169073992cead41b885dc90ef82673c3c211efa1ef1ae2906117a1906301e1338063ffffffff611cc316565b6117a96122ed565b600160a060020a039384168152919092166020820152604080820192909252905190819003606001906000f0801580156117e7573d6000803e3d6000fd5b50600254600754919450600160a060020a03169073992cead41b885dc90ef82673c3c211efa1ef1ae290611825906303c2670063ffffffff611cc316565b61182d6122ed565b600160a060020a039384168152919092166020820152604080820192909252905190819003606001906000f08015801561186b573d6000803e3d6000fd5b50600254600754919350600160a060020a03169073992cead41b885dc90ef82673c3c211efa1ef1ae2906118a9906305a39a8063ffffffff611cc316565b6118b16122ed565b600160a060020a039384168152919092166020820152604080820192909252905190819003606001906000f0801580156118ef573d6000803e3d6000fd5b50600a8054600160a060020a0380871673ffffffffffffffffffffffffffffffffffffffff1992831617909255600b8054868416908316179055600c80549284169290911691909117905590506119548361194f630bebc2006004612126565b61213b565b61196d8261194f630bebc200600463ffffffff61212616565b610a518161194f630bebc200600263ffffffff61212616565b600054600160a060020a0316331461199d57600080fd5b610ed5816121e1565b600d6020526000908152604090205460ff1681565b606481565b600254600160a060020a031681565b60075442101580156119e357506008544211155b15156119ee57600080fd5b600954610100900460ff1615611a0357600080fd5b81611a3181604080519081016040528060098152602001600080516020612667833981519152815250610a56565b811515611a88576040805160e560020a62461bcd02815260206004820152600e60248201527f696e76616c696420616d6f756e74000000000000000000000000000000000000604482015290519081900360640190fd5b611a9061123d565b15610a51576040805160e560020a62461bcd02815260206004820152601460248201527f63617020686173206265656e2072656163686564000000000000000000000000604482015290519081900360640190fd5b6000610dbf620f4240611b15670de0b6b3a7640000611b15600f54611b156004548961225e90919063ffffffff16565b9063ffffffff61212616565b600080611b5e600454611b15600f54611b52620f4240611b52670de0b6b3a76400008a61225e90919063ffffffff16565b9063ffffffff61225e16565b905083811015611b7b57611b78848263ffffffff611bf016565b91505b6000821115611be957604051339083156108fc029084906000818181858888f19350505050158015611bb1573d6000803e3d6000fd5b5060408051838152905133917f3f35578ce3b237cd848f01a5babbf5a3ee58c7a2b5dc9f492d709224263de7e4919081900360200190a25b5092915050565b600082821115611bfc57fe5b50900390565b600080611c1d62127500600754611cc390919063ffffffff16565b421015611c2c5750600f611ca7565b611c52611c4362127500600263ffffffff61225e16565b6007549063ffffffff611cc316565b421015611c615750600a611ca7565b611c78611c4362127500600363ffffffff61225e16565b421015611c8757506005611ca7565b635cb99c204210158015611c9e5750635cbe395f42105b15611ca75750600a5b611cbc6064611b15858463ffffffff61225e16565b9392505050565b81810182811015610dbf57fe5b600e54611ce3908263ffffffff611cc316565b600e8190556006541015611d41576040805160e560020a62461bcd02815260206004820152601260248201527f746f6b656e734d696e746564203e206361700000000000000000000000000000604482015290519081900360640190fd5b610ac0828261213b565b600354604051600160a060020a039091169082156108fc029083906000818181858888f19350505050158015610ac0573d6000803e3d6000fd5b611d8f8282611e34565b1515610ac057600080fd5b82600160a060020a031663a9059cbb83836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015611dfd57600080fd5b505af1158015611e11573d6000803e3d6000fd5b505050506040513d6020811015611e2757600080fd5b50511515610a5157600080fd5b600160a060020a03166000908152602091909152604090205460ff1690565b611ebd826001836040518082805190602001908083835b60208310611e895780518252601f199092019160209182019101611e6a565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922092915050612287565b81600160a060020a03167fd211483f91fc6eff862467f8de606587a30c8fc9981056f051b897a418df803a826040518080602001828103825283818151815260200191508051906020019080838360005b83811015611f26578181015183820152602001611f0e565b50505050905090810190601f168015611f535780820380516001836020036101000a031916815260200191505b509250505060405180910390a25050565b6012811115611f7257600080fd5b600a81900a600f55611f98608f611b15620f4240611b528661271063ffffffff61225e16565b600455604080518381526020810183905281517f1632e064a07f4bb12ce748bd252a7a619a35eabe7f80d87ed2328460f3e31499929181900390910190a15050565b600054600160a060020a03163314611ff157600080fd5b60095460ff161561200157600080fd5b612009610c4d565b151561201457600080fd5b61201c61123b565b6040517f6823b073d48d6e3a7d385eeb601452d680e74bb46afe3255a7d778f3a9b1768190600090a16009805460ff19166001179055565b6120be826001836040518082805190602001908083835b6020831061208a5780518252601f19909201916020918201910161206b565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220929150506122a9565b81600160a060020a03167fbfec83d64eaa953f2708271a023ab9ee82057f8f3578d548c1a4ba0b5b7004898260405180806020018281038252838181518152602001915080519060200190808383600083811015611f26578181015183820152602001611f0e565b6000818381151561213357fe5b049392505050565b600254604080517f40c10f19000000000000000000000000000000000000000000000000000000008152600160a060020a03858116600483015260248201859052915191909216916340c10f199160448083019260209291908290030181600087803b1580156121aa57600080fd5b505af11580156121be573d6000803e3d6000fd5b505050506040513d60208110156121d457600080fd5b50511515610ac057600080fd5b600160a060020a03811615156121f657600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082151561226f57506000610dbf565b5081810281838281151561227f57fe5b0414610dbf57fe5b600160a060020a0316600090815260209190915260409020805460ff19169055565b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6060604051908101604052806003906020820280388339509192915050565b604051610349806122fe833901905600608060405234801561001057600080fd5b5060405160608061034983398101604090815281516020830151919092015142811161003b57600080fd5b60008054600160a060020a03948516600160a060020a03199182161790915560018054939094169216919091179091556002556102cc8061007d6000396000f3006080604052600436106100615763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166338af3eed811461006657806386d1a69f14610097578063b91d4001146100ae578063fc0c546a146100d5575b600080fd5b34801561007257600080fd5b5061007b6100ea565b60408051600160a060020a039092168252519081900360200190f35b3480156100a357600080fd5b506100ac6100f9565b005b3480156100ba57600080fd5b506100c36101d3565b60408051918252519081900360200190f35b3480156100e157600080fd5b5061007b6101d9565b600154600160a060020a031681565b60025460009042101561010b57600080fd5b60008054604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216926370a08231926024808401936020939083900390910190829087803b15801561017257600080fd5b505af1158015610186573d6000803e3d6000fd5b505050506040513d602081101561019c57600080fd5b50519050600081116101ad57600080fd5b6001546000546101d091600160a060020a0391821691168363ffffffff6101e816565b50565b60025481565b600054600160a060020a031681565b82600160a060020a031663a9059cbb83836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561026457600080fd5b505af1158015610278573d6000803e3d6000fd5b505050506040513d602081101561028e57600080fd5b5051151561029b57600080fd5b5050505600a165627a7a72305820f62ba8c668db0cafd52db3373e986065468b5fe7310ce393b9e63a0f45305b4100296e6f74206d616e6167657200000000000000000000000000000000000000000077686974656c6973740000000000000000000000000000000000000000000000a165627a7a72305820958287a2d6192b05ac87cce018ac5e0d372243810be6c8bffa7ee07c8a36db140029000000000000000000000000000000000000000000000000000000005c7fd260000000000000000000000000000000000000000000000000000000005cf1a3df000000000000000000000000ae8e237d2695149edb495fafb30abab3c7dad47a00000000000000000000000000000000000000000000000000000000000031680000000000000000000000000000000000000000000000000000000000000002",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000005c7fd260000000000000000000000000000000000000000000000000000000005cf1a3df000000000000000000000000ae8e237d2695149edb495fafb30abab3c7dad47a00000000000000000000000000000000000000000000000000000000000031680000000000000000000000000000000000000000000000000000000000000002"
}