{
  "address": "0x8e43d7a5c4b2de24b728deff0e666fe674b3ca91",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GetTheHorseShoe",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-02\n*/\n\npragma solidity ^0.4.23;\n\n\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  function ownable() public {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n  emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\ncontract ERC721 {\n    \n    function totalSupply() public view returns (uint256 total);\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\n    function approve(address _to, uint256 _tokenId) external;\n    function transfer(address _to, uint256 _tokenId) external payable;\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\n\n\n    event Transfer(address from, address to, uint256 tokenId);\n    event Approval(address owner, address approved, uint256 tokenId); //Einbauen!\n    \n    \n    \n}\n\n\n\ncontract HorseShoeControl  {\n\n    address public ceoAddress=0xC6F3Fb72db068C96A1D50Bbc3D370cC8e4af0bFc;\n    address public ctoAddress=0x73A895C06D6E3DcCA3acE48FC8801E17eD247f85;\n \n        \n\n\n\n\n    modifier onCEO() {\n        require(msg.sender == ceoAddress);\n        _;\n    }\n\n    modifier onCTO() {\n        require(msg.sender == ctoAddress);\n        _;\n    }\n\n    modifier onlyC() {\n        require(\n            msg.sender == ceoAddress ||\n            msg.sender == ctoAddress\n        );\n        _;\n    }\n    \n    \n    \n    address public raceDistCon;\n        \n\n    address public addr_forge;\n   \n\n\n            \n        function newForgeCon (address newConAddr) external onCTO {\n            addr_forge = newConAddr;\n            \n        }\n            \n        function newRaceDistCon (address newConAddr) external onCTO {\n            raceDistCon = newConAddr;\n            \n        }\n            \n    \n            \n\n    \n    \n\n \n}\n\ncontract HorseShoeShopOwner is HorseShoeControl, ERC721 {\n    \n\n    \n    mapping (uint256 => address) public HShoeShopO;\n    \n    mapping (uint256 => uint256) public HSShopPrice;\n    \n    mapping (uint256 => bool) public HSShopForSale;\n    mapping (uint256 => bool) public HSShopForBiding;\n    \n    mapping (address => uint256) HSShopOwnCount;\n    \n     uint256 public HSShopSaleFee = 20;\n   \n  \n        mapping (uint256 => uint256)  startBlock;\n      \n    mapping (uint256 => uint256) startPrice;\n    mapping (uint256 => uint256) public priceDecreaseRate;\n    \n\n      function getCurrentItemPrice(uint256 _id) public view returns (uint256)  {\n    return startPrice[_id] - priceDecreaseRate[_id]*(block.number - startBlock[_id]);\n  }\n    \n      function newPriceDecreaseRate(uint DecreRate,uint256 _id) external onlyC   {\n                priceDecreaseRate[_id]=DecreRate;\n  }\n    \n    \n    \n    function changeHSShopPrice(uint256 price, uint256 HSShopId) external{\n        \n        require(msg.sender==HShoeShopO[HSShopId]);\n        \n        require(HSShopForSale[HSShopId]==true);\n        \n        require(price!=0);\n        \n        HSShopPrice[HSShopId]=price;\n        \n    }\n    \n    \n    function buyHSShop(uint256 id) payable external{\n        \n          require(HSShopForSale[id]==true);\n         \n              uint256 price = HSShopPrice[id];\n            \n            require(price<=msg.value);\n            \n         uint256 Fee = price / HSShopSaleFee ;\n            \n          uint256  oPrice= price - Fee;\n            \n            address _to = msg.sender;\n            address _from = HShoeShopO[id];\n            \n            HSShopOwnCount[_to]++;\n            \n            HShoeShopO[id] = _to;\n            \n            HSShopForSale[id]=false;\n            \n            \n                HSShopOwnCount[_from]--;\n               \n           emit Transfer(_from, _to, id);\n            \n            if(_from!=0){\n                \n             _from.transfer(oPrice);\n            }else{\n                \n             ceoAddress.transfer(oPrice);\n            }\n             \n             ceoAddress.transfer(Fee);\n             \n             \n            uint256 buyExcess = msg.value - oPrice - Fee;\n            _to.transfer(buyExcess);\n      \n        \n    }\n    \n\n    \n    function firstSellHSShop(uint256 _id, uint256 price, uint256 _decreRate) external onlyC {\n        \n        require(HShoeShopO[_id]==0);\n        \n        HSShopPrice[_id]=price;\n        \n            \n                HSShopForBiding[_id]=true;\n                \n                  startBlock[_id] = block.number;\n                  \n                  startPrice[_id] = price;\n                  \n                 priceDecreaseRate[_id]= _decreRate;\n                \n    }\n    \n    function bid(uint256 _id) payable external{\n      \n        \n        \n        uint256 priceNow = getCurrentItemPrice(_id);\n        require(msg.value>=priceNow);\n        \n        require(HSShopForBiding[_id]==true);\n        \n          if(priceNow<=0||priceNow>=startPrice[_id]){\n        HSShopForBiding[_id]=false;\n              _to.transfer( msg.value);\n        }else{\n            \n        \n        HSShopForBiding[_id]=false;\n        \n            \n            address _to = msg.sender;\n            address _from = HShoeShopO[_id];\n            \n            HSShopOwnCount[_to]++;\n            \n            HShoeShopO[_id] = _to;\n            \n            HSShopForSale[_id]=true;\n            \n            uint256 priceAufschlag=msg.value/3;\n            \n            \n   HSShopPrice[_id]=msg.value+ priceAufschlag;\n               \n           emit Transfer(_from, _to, _id);\n            \n             ceoAddress.transfer(priceNow);\n         \n             \n            uint256 buyExcess = msg.value - priceNow;\n            _to.transfer(buyExcess);\n        }\n        \n        \n      \n    }\n    \n    \n     function setHSShopSaleFee(uint256 val) external onCTO {\n        HSShopSaleFee = val;\n    }\n    \n}\n\ncontract HorseShoeBasis is  HorseShoeShopOwner {\n    \n    \n   \n    event Birth(address owner, uint256 HorseShoeId);\n   \n    event Transfer(address from, address to, uint256 tokenId);\n\n    struct HorseShoe {\n        uint256 dna2; \n        uint256 dna3; \n        bool dna4;\n        bool dna5; \n\n        \n    }\n\n\n    HorseShoe[] horseShoes;\n\n    mapping (uint256 => address) horseShoeOwnerIndex;\n    \n    mapping (uint256 => uint256) public horseShoeIndexPrice;\n    \n    mapping (uint256 => uint256) public processingQuality;\n    \n    mapping (uint256 => uint256) public WearOut;\n    \n    \n    mapping (uint256 => bool)  horseShoeIndexForSale;\n\n    mapping (address => uint256) tokenOwnershipCount;\n    \n    mapping (uint256 => bool)  raceListed;\n\n\n  uint256 public saleFee = 20;\n   \n   \n\n \n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n        tokenOwnershipCount[_to]++;\n        horseShoeOwnerIndex[_tokenId] = _to;\n        \n        if (_from != address(0)) {\n            tokenOwnershipCount[_from]--;\n         \n        }\n       emit Transfer(_from, _to, _tokenId);\n       \n    }\n    \n    \n \n    function transfer10( address _to, uint256 _tokenId1, uint256 _tokenId2, uint256 _tokenId3, uint256 _tokenId4, uint256 _tokenId5, uint256 _tokenId6, uint256 _tokenId7, uint256 _tokenId8, uint256 _tokenId9, uint256 _tokenId10  ) external onlyC {\n     \n       require(_to != address(0));\n\t\t\n        require(_to != address(this));\n     \n     require( horseShoeOwnerIndex[_tokenId1] == msg.sender );\n      \n      _transfer(msg.sender,  _to,  _tokenId1);\n        \n     require( horseShoeOwnerIndex[_tokenId2] == msg.sender );\n   \n      _transfer(msg.sender,  _to,  _tokenId2);\n     require( horseShoeOwnerIndex[_tokenId3] == msg.sender );\n     \n      _transfer(msg.sender,  _to,  _tokenId3);\n     require( horseShoeOwnerIndex[_tokenId4] == msg.sender );\n       \n      _transfer(msg.sender,  _to,  _tokenId4);\n     require( horseShoeOwnerIndex[_tokenId5] == msg.sender );\n  \n      _transfer(msg.sender,  _to,  _tokenId5);\n     require( horseShoeOwnerIndex[_tokenId6] == msg.sender );\n       \n      _transfer(msg.sender,  _to,  _tokenId6);\n     require( horseShoeOwnerIndex[_tokenId7] == msg.sender );\n        \n      _transfer(msg.sender,  _to,  _tokenId7);\n     require( horseShoeOwnerIndex[_tokenId8] == msg.sender );\n       \n      _transfer(msg.sender,  _to,  _tokenId8);\n      \n     require( horseShoeOwnerIndex[_tokenId9] == msg.sender );\n      \n      _transfer(msg.sender,  _to,  _tokenId9);\n     require( horseShoeOwnerIndex[_tokenId10] == msg.sender );\n      \n      \n      _transfer(msg.sender,  _to,  _tokenId10);\n       \n    }\n    \n    function _sell(address _from,  uint256 _tokenId, uint256 value) internal {\n     \n     if(horseShoeIndexForSale[_tokenId]==true){\n         \n              uint256 price = horseShoeIndexPrice[_tokenId];\n            \n            require(price<=value);\n            \n         uint256 Fee = price / saleFee /2;\n            \n          uint256  oPrice= price - Fee - Fee;\n            \n            address _to = msg.sender;\n            \n            tokenOwnershipCount[_to]++;\n            horseShoeOwnerIndex[_tokenId] = _to;\n            \n            horseShoeIndexForSale[_tokenId]=false;\n            \n            \n            if (_from != address(0)) {\n                tokenOwnershipCount[_from]--;\n               \n            }\n                 \n           emit Transfer(_from, _to, _tokenId);\n            \n            uint256 HSQ = processingQuality[_tokenId]/10;\n             address HSSOwner;\n             \n              if(HSQ>=10||WearOut[_tokenId]>=1){\n                 \n            HSSOwner= HShoeShopO[6];\n            \n             }else  if(HSQ>=0&&HSQ<=2){\n              HSSOwner= HShoeShopO[5];\n                 \n             }else  if(HSQ>=2&&HSQ<=4){\n              HSSOwner= HShoeShopO[4];\n                 \n             } else  if(HSQ>=4&&HSQ<=6){\n             HSSOwner=  HShoeShopO[3];\n                 \n             } else  if(HSQ>=6&&HSQ<=8){\n             HSSOwner=  HShoeShopO[2];\n                 \n             }else  if(HSQ>=8&&HSQ<=10){\n             HSSOwner=  HShoeShopO[1];\n                 \n             }else{\n                 \n             HSSOwner= ceoAddress;\n             }\n             \n            \n             \n             _from.transfer(oPrice);\n             \n             ceoAddress.transfer(Fee);\n             if(HSSOwner!=0){\n                 \n             HSSOwner.transfer(Fee);\n             }else {\n             ceoAddress.transfer(Fee);\n                 \n             }\n             \n            uint256 bidExcess = value - oPrice - Fee - Fee;\n            _to.transfer(bidExcess);\n            \n            \n     }else{\n          _to.transfer(value);\n     }\n      \n    }\n    \n    \n\t\n    function _newHorseShoe(\n        uint256 _genes1,\n        uint256 _genes2,\n        uint256 _genes3,\n        bool _genes4,\n        bool _genes5,\n        address _owner\n    )\n        internal\n        returns (uint)\n    {\n   \n   \n   \n   \n        HorseShoe memory _horseShoe = HorseShoe({\n        dna2: _genes2,\n        dna3 : _genes3,\n        dna4: _genes4,\n        dna5: _genes5\n            \n        });\n       \n       \n        \n       uint256 newHorseShoeId;\n\t   \n     newHorseShoeId = horseShoes.push(_horseShoe)-1;\n     \n  \n        require(newHorseShoeId == uint256(uint32(newHorseShoeId)));\n\n\n        WearOut[newHorseShoeId]=_genes1;\n        \n        processingQuality[newHorseShoeId]= (_genes2 + _genes3)/2;\n        \n        raceListed[newHorseShoeId]=false;\n        \n       emit Birth(_owner, newHorseShoeId);\n\n        _transfer(0, _owner, newHorseShoeId);\n\n        return newHorseShoeId;  \n    }\n\n\n\n}\n\n\ncontract IronConnect {\n    \n        function balanceOf(address tokenOwner) public constant returns (uint balance);\n        \n        function ironProcessed(address tokenOwner) external; \n        \n}\n\ncontract SmithConnect {\n\n      mapping (uint256 => uint256) public averageQuality;\n\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    \n    \n}\n\ncontract ForgeConnection {\n    \n    \n    mapping (uint256 => uint256) public forgeToolQuality;\n    \n    function ownerOf(uint256 _tokenId) external view returns (address owner);\n    function balanceOf(address _owner) public view returns (uint256 balance);\n\n    \n}\n\n\ncontract HorseShoeOwnership is HorseShoeBasis{\n\n  string public constant  name = \"CryptoHorseShoe\";\n    string public constant symbol = \"CHS\";\n     uint8 public constant decimals = 0; \n\n    function horseShoeForSale(uint256 _tokenId, uint256 price) external {\n  \n     address  ownerof =  horseShoeOwnerIndex[_tokenId];\n        require(ownerof == msg.sender);\n        horseShoeIndexPrice[_tokenId] = price;\n        horseShoeIndexForSale[_tokenId]= true;\n\t\t}\n\t\t\n function changePrice(uint256 _tokenId, uint256 price) external {\n  \n     address  ownerof =  horseShoeOwnerIndex[_tokenId];\n        require(ownerof == msg.sender);\n        require(horseShoeIndexForSale[_tokenId] == true);\n       \n             \n              horseShoeIndexPrice[_tokenId] = price;\n         \n\t\t}\n\n function horseShoeNotForSale(uint256 _tokenId) external {\n         address  ownerof =  horseShoeOwnerIndex[_tokenId];\n            require(ownerof == msg.sender);\n        horseShoeIndexForSale[_tokenId]= false;\n\n    }\n\n\n    function _owns(address _applicant, uint256 _tokenId) internal view returns (bool) {\n        return horseShoeOwnerIndex[_tokenId] == _applicant;\n    }\n\n\n    function balanceOf(address _owner) public view returns (uint256 count) {\n        return tokenOwnershipCount[_owner];\n    }\n\n    function transfer(\n        address _to,\n        uint256 _tokenId\n    )\n        external\n        payable\n    {\n        require(_to != address(0));\n\t\t\n        require(_to != address(this));\n \n        require(_owns(msg.sender, _tokenId));\n       _transfer(msg.sender, _to, _tokenId);\n    }\n\n    function approve(\n        address _to,\n        uint256 _tokenId\n    )\n        external \n    {\n       require(_owns(msg.sender, _tokenId));\n\n        emit Approval(msg.sender, _to, _tokenId);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _tokenId ) external payable {\n        \n        if(_from != msg.sender){\n              require(_to == msg.sender);\n                 \n                 require(raceListed[_tokenId]==false);\n                 \n                require(_from==horseShoeOwnerIndex[_tokenId]);\n        \n               _sell(_from,  _tokenId, msg.value);\n            \n        }else{\n            \n          _to.transfer(msg.value);\n        }\n \n    }\n\n    function totalSupply() public view returns (uint) {\n        return horseShoes.length;\n    }\n\n    function ownerOf(uint256 _tokenId)  external view returns (address owner)  {\n        owner = horseShoeOwnerIndex[_tokenId];\n\n       return;\n       \n    }\n    \n    function ownerOfID(uint256 _tokenId)  external view returns (address owner, uint256 tokenId)  {\n        owner = horseShoeOwnerIndex[_tokenId];\ntokenId=_tokenId;\n       return;\n       \n    }\n\n       function horseShoeFS(uint256 _tokenId) external view  returns (bool buyable, uint256 tokenId) {\n        buyable = horseShoeIndexForSale[_tokenId];\n        tokenId=_tokenId;\n       return;\n       \n    }\n\t\n\tfunction horseShoePr(uint256 _tokenId) external view  returns (uint256 price, uint256 tokenId) {\n        price = horseShoeIndexPrice[_tokenId];\n        tokenId=_tokenId;\n       return;\n       \n    }\n\n function setSaleFee(uint256 val) external onCTO {\n        saleFee = val;\n    }\n\n\nfunction raceOut(uint256 _tokenIdA) external {\n    \n    require(msg.sender==raceDistCon);\n\n        require(WearOut[_tokenIdA] <10 );\n    \n\t\t\n      HorseShoe storage horseshoeA = horseShoes[_tokenIdA];\n    \n    horseshoeA.dna4=true;\n    \n\t  \n       WearOut[_tokenIdA] = WearOut[_tokenIdA]+1;\n\t  \n\t  raceListed[_tokenIdA]=false;\n    \n      \n}\n\nfunction meltHorseShoe(uint256 _tokenId, address owner) external{\n  \n\n  require(msg.sender==addr_forge);\n\n   \n        \n            horseShoeIndexForSale[_tokenId]=false;\n        horseShoeOwnerIndex[_tokenId]=0x00;\n        \n      \n       tokenOwnershipCount[owner]--;\n        \n        //iron totalsupply less?\n    \n    \n        \n         HorseShoe storage horseshoe = horseShoes[_tokenId];\n        horseshoe.dna5 = true;\n      horseshoe.dna4 = false;\n      \n      \n}\n\nfunction raceRegistration(uint256 _tokenIdA, address owner) external {\n    \n  //  require(msg.sender==raceDistCon);\n    \n    require(tokenOwnershipCount[owner]>=4);\n    \n  require(horseShoeOwnerIndex[_tokenIdA]==owner);\n  \n      HorseShoe storage horseshoeA = horseShoes[_tokenIdA];\n    require(horseshoeA.dna4==true);\n    require(horseshoeA.dna5==false);\n    require( raceListed[_tokenIdA]==false);\n\trequire(horseShoeIndexForSale[_tokenIdA]==false);\n\t\n        \n\t\t\n    \n    horseshoeA.dna4=false;\n    \n    raceListed[_tokenIdA]=true;\n\t\n\t\n\t\t\n        \n}\n\n\n    \n}\n\n\n\ncontract HorseShoeMinting is HorseShoeOwnership {\n\n    uint256 public  HShoe_Limit = 160000;\n\n\n    function createHorseShoe4(uint256 _genes2,uint256 _genes3,uint256 _genes2a,uint256 _genes3a, uint256 _genes2b,uint256 _genes3b,uint256 _genes2c,uint256 _genes3c, address _owner) external onlyC {\n        address horseShoeOwner = _owner;\n        \n   require(horseShoes.length+3 < HShoe_Limit);\n\n            \n              _newHorseShoe(0, _genes2, _genes3,true,false , horseShoeOwner);\n            \n              _newHorseShoe(0, _genes2b, _genes3b,true,false , horseShoeOwner);\n            \n            \n              _newHorseShoe(0, _genes2a, _genes3a,true,false , horseShoeOwner);\n            \n            \n              _newHorseShoe(0, _genes2c, _genes3c,true,false , horseShoeOwner);\n        \n    }\n    \n        function createHorseShoe1(uint256 _genes2,uint256 _genes3, address _owner) external onlyC {\n        address horseShoeOwner = _owner;\n        \n   require(horseShoes.length+3 < HShoe_Limit);\n\n            \n              _newHorseShoe(0, _genes2, _genes3,true,false , horseShoeOwner);\n            \n          \n        \n    }\n    \n    function createHorseShoe10(uint256 _genes2,uint256 _genes3,uint256 _genes2a,uint256 _genes3a, uint256 _genes2b,uint256 _genes3b,uint256 _genes2c,uint256 _genes3c, uint256 _genes2d,uint256 _genes3d, address _owner) external onlyC {\n        address horseShoeOwner = _owner;\n        \n   require(horseShoes.length+3 < HShoe_Limit);\n\n            \n              _newHorseShoe(0, _genes2, _genes3,true,false , horseShoeOwner);\n            \n              _newHorseShoe(0, _genes2b, _genes3b,true,false , horseShoeOwner);\n            \n            \n              _newHorseShoe(0, _genes2a, _genes3a,true,false , horseShoeOwner);\n            \n            \n              _newHorseShoe(0, _genes2c, _genes3c,true,false , horseShoeOwner);\n              \n              _newHorseShoe(0, _genes2d, _genes3d,true,false , horseShoeOwner);\n        \n              _newHorseShoe(0, _genes2, _genes3,true,false , horseShoeOwner);\n            \n              _newHorseShoe(0, _genes2b, _genes3b,true,false , horseShoeOwner);\n            \n            \n              _newHorseShoe(0, _genes2a, _genes3a,true,false , horseShoeOwner);\n            \n            \n              _newHorseShoe(0, _genes2c, _genes3c,true,false , horseShoeOwner);\n              \n              _newHorseShoe(0, _genes2d, _genes3d,true,false , horseShoeOwner);\n    }\n  \n\n  \n    \n       function _generateNewHorseShoe(uint256 smith_quality ,uint256 maschine_quality, address _owner) external {\n    \n        \n   require(msg.sender==addr_forge);\n        \n              _newHorseShoe(  0, smith_quality, maschine_quality, true, false , _owner);\n\n        \n    }\n   \n   \n}\n\n\ncontract GetTheHorseShoe is HorseShoeMinting {\n\n\n    function getHorseShoe(uint256 _id)\n        external\n        view\n        returns (\n        uint256 price,\n        uint256 id,\n        bool forSale,\n        uint256 _genes1,\n        uint256 _genes2,\n        uint256 _genes3,\n        bool _genes4,\n        bool _genes5\n\t\t\n    ) {\n\t\tprice = horseShoeIndexPrice[_id];\n        id = uint256(_id);\n\t\tforSale = horseShoeIndexForSale[_id];\n        HorseShoe storage horseshoe = horseShoes[_id];\n        \n        _genes1 = WearOut[_id];\n        _genes2 = horseshoe.dna2;\n        _genes3 = horseshoe.dna3;\n        _genes4 = horseshoe.dna4;\n        _genes5 = horseshoe.dna5;\n\t\t\n\n    }\n\n  \n\n}",
  "bytecode": "608060405273c6f3fb72db068c96a1d50bbc3d370cc8e4af0bfc6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507373a895c06d6e3dcca3ace48fc8801e17ed247f85600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060146009556014601555620271006016553480156100ca57600080fd5b506140e2806100da6000396000f300608060405260043610610251576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610256578063095ea7b3146102e65780630a0f816814610333578063178021e31461038a57806318160ddd146103b55780631f513660146103e057806323b872dd146104375780632b00c6fd146104975780632ce5fb75146104ee578063313ce5671461056c578063379c1bd91461059d5780633851d32014610630578063454a2ab31461067557806347911b7514610695578063514d6e07146106d65780635560d36514610722578063629c37c2146107595780636352211e146107845780636417dec3146107f157806369e459941461081e5780636c18cc1e1461085f57806370a08231146108a05780637122bd4c146108f7578063728d3dd2146109385780637290f6911461097b57806379580664146109c35780637c0f780714610a045780637e71ccd814610a455780637ea531e714610a7057806382f1655714610ac757806395d89b4114610b345780639a1fdc1014610bc45780639b97380314610c6b5780639c121b6d14610d125780639fe005e814610d5f578063a9059cbb14610d8c578063b3de019c14610dcc578063b716f40414610e03578063b74b790c14610e30578063bdcafc5514610e75578063c60aa10d14610ea2578063cc80f9e814610ee5578063cdee5c4a14610f59578063d322014414610fa6578063dcf8f13a14610fdd578063eb80b3d11461101e578063f445162814611075578063f8ebf28214611095578063fab55a49146110cc575b600080fd5b34801561026257600080fd5b5061026b611123565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102ab578082015181840152602081019050610290565b50505050905090810190601f1680156102d85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102f257600080fd5b50610331600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061115c565b005b34801561033f57600080fd5b50610348611214565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561039657600080fd5b5061039f611239565b6040518082815260200191505060405180910390f35b3480156103c157600080fd5b506103ca61123f565b6040518082815260200191505060405180910390f35b3480156103ec57600080fd5b506103f561124c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610495600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611272565b005b3480156104a357600080fd5b506104ec6004803603810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113de565b005b3480156104fa57600080fd5b50610519600480360381019080803590602001909291905050506114c6565b604051808981526020018881526020018715151515815260200186815260200185815260200184815260200183151515158152602001821515151581526020019850505050505050505060405180910390f35b34801561057857600080fd5b50610581611587565b604051808260ff1660ff16815260200191505060405180910390f35b3480156105a957600080fd5b5061062e6004803603810190808035906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061158c565b005b34801561063c57600080fd5b5061065b600480360381019080803590602001909291905050506116b0565b604051808215151515815260200191505060405180910390f35b610693600480360381019080803590602001909291905050506116d0565b005b3480156106a157600080fd5b506106c060048036038101908080359060200190929190505050611a7c565b6040518082815260200191505060405180910390f35b3480156106e257600080fd5b5061070160048036038101908080359060200190929190505050611a94565b60405180831515151581526020018281526020019250505060405180910390f35b34801561072e57600080fd5b506107576004803603810190808035906020019092919080359060200190929190505050611ac2565b005b34801561076557600080fd5b5061076e611b7d565b6040518082815260200191505060405180910390f35b34801561079057600080fd5b506107af60048036038101908080359060200190929190505050611b83565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107fd57600080fd5b5061081c60048036038101908080359060200190929190505050611bc0565b005b34801561082a57600080fd5b5061084960048036038101908080359060200190929190505050611c26565b6040518082815260200191505060405180910390f35b34801561086b57600080fd5b5061089e600480360381019080803590602001909291908035906020019092919080359060200190929190505050611c3e565b005b3480156108ac57600080fd5b506108e1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611dda565b6040518082815260200191505060405180910390f35b34801561090357600080fd5b5061092260048036038101908080359060200190929190505050611e23565b6040518082815260200191505060405180910390f35b34801561094457600080fd5b50610979600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e3b565b005b34801561098757600080fd5b506109a660048036038101908080359060200190929190505050611edb565b604051808381526020018281526020019250505060405180910390f35b3480156109cf57600080fd5b506109ee60048036038101908080359060200190929190505050611efc565b6040518082815260200191505060405180910390f35b348015610a1057600080fd5b50610a2f60048036038101908080359060200190929190505050611f14565b6040518082815260200191505060405180910390f35b348015610a5157600080fd5b50610a5a611f2c565b6040518082815260200191505060405180910390f35b348015610a7c57600080fd5b50610ac56004803603810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f32565b005b348015610ad357600080fd5b50610af260048036038101908080359060200190929190505050611fa5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610b4057600080fd5b50610b49611fd8565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610b89578082015181840152602081019050610b6e565b50505050905090810190601f168015610bb65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610bd057600080fd5b50610c6960048036038101908080359060200190929190803590602001909291908035906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612011565b005b348015610c7757600080fd5b50610d10600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190929190803590602001909291905050506121a3565b005b348015610d1e57600080fd5b50610d5d60048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061278a565b005b348015610d6b57600080fd5b50610d8a60048036038101908080359060200190929190505050612915565b005b610dca600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506129b7565b005b348015610dd857600080fd5b50610e016004803603810190808035906020019092919080359060200190929190505050612a52565b005b348015610e0f57600080fd5b50610e2e60048036038101908080359060200190929190505050612b14565b005b348015610e3c57600080fd5b50610e5b60048036038101908080359060200190929190505050612c2e565b604051808215151515815260200191505060405180910390f35b348015610e8157600080fd5b50610ea060048036038101908080359060200190929190505050612c4e565b005b348015610eae57600080fd5b50610ee3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612cb4565b005b348015610ef157600080fd5b50610f1060048036038101908080359060200190929190505050612d54565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b348015610f6557600080fd5b50610fa460048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612d95565b005b348015610fb257600080fd5b50610fdb6004803603810190808035906020019092919080359060200190929190505050612f6e565b005b348015610fe957600080fd5b506110086004803603810190808035906020019092919050505061303d565b6040518082815260200191505060405180910390f35b34801561102a57600080fd5b50611033613086565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b611093600480360381019080803590602001909291905050506130ac565b005b3480156110a157600080fd5b506110ca60048036038101908080359060200190929190803590602001909291905050506134ab565b005b3480156110d857600080fd5b506110e1613577565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6040805190810160405280600f81526020017f43727970746f486f72736553686f65000000000000000000000000000000000081525081565b611166338261359d565b151561117157600080fd5b7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925338383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a15050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60155481565b6000600d80549050905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515611391573373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415156112e157600080fd5b600015156014600083815260200190815260200160002060009054906101000a900460ff16151514151561131457600080fd5b600e600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151561138157600080fd5b61138c838234613609565b6113d9565b8173ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501580156113d7573d6000803e3d6000fd5b505b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806114885750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561149357600080fd5b8190506016546003600d80549050011015156114ae57600080fd5b6114bf600085856001600086613cfc565b5050505050565b6000806000806000806000806000600f60008b8152602001908152602001600020549850899750601260008b815260200190815260200160002060009054906101000a900460ff169650600d8a81548110151561151f57fe5b90600052602060002090600302019050601160008b815260200190815260200160002054955080600001549450806001015493508060020160009054906101000a900460ff1692508060020160019054906101000a900460ff16915050919395975091939597565b600081565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806116365750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561164157600080fd5b8190506016546003600d805490500110151561165c57600080fd5b61166d60008b8b6001600086613cfc565b5061167f600087876001600086613cfc565b50611691600089896001600086613cfc565b506116a3600085856001600086613cfc565b5050505050505050505050565b60076020528060005260406000206000915054906101000a900460ff1681565b60008060008060006116e18661303d565b94508434101515156116f257600080fd5b600115156007600088815260200190815260200160002060009054906101000a900460ff16151514151561172557600080fd5b6000851115806117485750600b6000878152602001908152602001600020548510155b156117c55760006007600088815260200190815260200160002060006101000a81548160ff0219169083151502179055508373ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501580156117bf573d6000803e3d6000fd5b50611a74565b60006007600088815260200190815260200160002060006101000a81548160ff0219169083151502179055503393506004600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169250600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550836004600088815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016006600088815260200190815260200160002060006101000a81548160ff02191690831515021790555060033481151561190357fe5b04915081340160056000888152602001908152602001600020819055507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef838588604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a16000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc869081150290604051600060405180830381858888f19350505050158015611a26573d6000803e3d6000fd5b5084340390508373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611a72573d6000803e3d6000fd5b505b505050505050565b60116020528060005260406000206000915090505481565b6000806012600084815260200190815260200160002060009054906101000a900460ff169150829050915091565b6000600e600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515611b3457600080fd5b81600f60008581526020019081526020016000208190555060016012600085815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b60095481565b6000600e600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c1c57600080fd5b8060098190555050565b60106020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611ce65750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515611cf157600080fd5b60006004600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611d4957600080fd5b81600560008581526020019081526020016000208190555060016007600085815260200190815260200160002060006101000a81548160ff02191690831515021790555043600a60008581526020019081526020016000208190555081600b60008581526020019081526020016000208190555080600c600085815260200190815260200160002081905550505050565b6000601360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600f6020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e9757600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600f6000848152602001908152602001600020549150829050915091565b60056020528060005260406000206000915090505481565b600c6020528060005260406000206000915090505481565b60165481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611f8e57600080fd5b611f9f600084846001600086613cfc565b50505050565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f434853000000000000000000000000000000000000000000000000000000000081525081565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806120bb5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156120c657600080fd5b8190506016546003600d80549050011015156120e157600080fd5b6120f260008d8d6001600086613cfc565b50612104600089896001600086613cfc565b5061211660008b8b6001600086613cfc565b50612128600087876001600086613cfc565b5061213a600085856001600086613cfc565b5061214c60008d8d6001600086613cfc565b5061215e600089896001600086613cfc565b5061217060008b8b6001600086613cfc565b50612182600087876001600086613cfc565b50612194600085856001600086613cfc565b50505050505050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061224b5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561225657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff161415151561229257600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff16141515156122cd57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16600e60008c815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561233a57600080fd5b612345338c8c613ebd565b3373ffffffffffffffffffffffffffffffffffffffff16600e60008b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156123b257600080fd5b6123bd338c8b613ebd565b3373ffffffffffffffffffffffffffffffffffffffff16600e60008a815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561242a57600080fd5b612435338c8a613ebd565b3373ffffffffffffffffffffffffffffffffffffffff16600e600089815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156124a257600080fd5b6124ad338c89613ebd565b3373ffffffffffffffffffffffffffffffffffffffff16600e600088815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561251a57600080fd5b612525338c88613ebd565b3373ffffffffffffffffffffffffffffffffffffffff16600e600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561259257600080fd5b61259d338c87613ebd565b3373ffffffffffffffffffffffffffffffffffffffff16600e600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561260a57600080fd5b612615338c86613ebd565b3373ffffffffffffffffffffffffffffffffffffffff16600e600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561268257600080fd5b61268d338c85613ebd565b3373ffffffffffffffffffffffffffffffffffffffff16600e600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156126fa57600080fd5b612705338c84613ebd565b3373ffffffffffffffffffffffffffffffffffffffff16600e600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561277257600080fd5b61277d338c83613ebd565b5050505050505050505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156127e857600080fd5b60006012600085815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600e600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600190039190505550600d838154811015156128c657fe5b9060005260206000209060030201905060018160020160016101000a81548160ff02191690831515021790555060008160020160006101000a81548160ff021916908315150217905550505050565b6000600e600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151561298757600080fd5b60006012600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156129f357600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612a2e57600080fd5b612a38338261359d565b1515612a4357600080fd5b612a4e338383613ebd565b5050565b6000600e600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515612ac457600080fd5b600115156012600085815260200190815260200160002060009054906101000a900460ff161515141515612af757600080fd5b81600f600085815260200190815260200160002081905550505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612b7257600080fd5b600a6011600084815260200190815260200160002054101515612b9457600080fd5b600d82815481101515612ba357fe5b9060005260206000209060030201905060018160020160006101000a81548160ff0219169083151502179055506001601160008481526020019081526020016000205401601160008481526020019081526020016000208190555060006014600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60066020528060005260406000206000915054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612caa57600080fd5b8060158190555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612d1057600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600e600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150829050915091565b60006004601360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515612de657600080fd5b8173ffffffffffffffffffffffffffffffffffffffff16600e600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612e5357600080fd5b600d83815481101515612e6257fe5b90600052602060002090600302019050600115158160020160009054906101000a900460ff161515141515612e9657600080fd5b600015158160020160019054906101000a900460ff161515141515612eba57600080fd5b600015156014600085815260200190815260200160002060009054906101000a900460ff161515141515612eed57600080fd5b600015156012600085815260200190815260200160002060009054906101000a900460ff161515141515612f2057600080fd5b60008160020160006101000a81548160ff02191690831515021790555060016014600085815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806130165750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561302157600080fd5b81600c6000838152602001908152602001600020819055505050565b6000600a6000838152602001908152602001600020544303600c60008481526020019081526020016000205402600b600084815260200190815260200160002054039050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600080600080600115156006600089815260200190815260200160002060009054906101000a900460ff1615151415156130e857600080fd5b6005600088815260200190815260200160002054955034861115151561310d57600080fd5b6009548681151561311a57fe5b04945084860393503392506004600088815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550826004600089815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006006600089815260200190815260200160002060006101000a81548160ff021916908315150217905550600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001900391905055507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef828489604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a160008273ffffffffffffffffffffffffffffffffffffffff16141515613383578173ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051600060405180830381858888f1935050505015801561337d573d6000803e3d6000fd5b506133ec565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051600060405180830381858888f193505050501580156133ea573d6000803e3d6000fd5b505b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc869081150290604051600060405180830381858888f19350505050158015613453573d6000803e3d6000fd5b50848434030390508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156134a1573d6000803e3d6000fd5b5050505050505050565b6004600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561351857600080fd5b600115156006600083815260200190815260200160002060009054906101000a900460ff16151514151561354b57600080fd5b6000821415151561355b57600080fd5b8160056000838152602001908152602001600020819055505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008273ffffffffffffffffffffffffffffffffffffffff16600e600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905092915050565b600080600080600080600060011515601260008b815260200190815260200160002060009054906101000a900460ff1615151415613ca857600f60008a815260200190815260200160002054965087871115151561366657600080fd5b60026015548881151561367557fe5b0481151561367f57fe5b04955085868803039450339350601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600101919050555083600e60008b815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000601260008b815260200190815260200160002060006101000a81548160ff021916908315150217905550600073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff161415156137e057601360008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001900391905055505b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8a858b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a1600a601060008b81526020019081526020016000205481151561389e57fe5b049250600a831015806138c557506001601160008b81526020019081526020016000205410155b1561390657600460006006815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150613acf565b60008310158015613918575060028311155b1561395957600460006005815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150613ace565b6002831015801561396b575060048311155b156139ac57600460006004815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150613acd565b600483101580156139be575060068311155b156139ff57600460006003815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150613acc565b60068310158015613a11575060088311155b15613a5257600460006002815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150613acb565b60088310158015613a645750600a8311155b15613aa557600460006001815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150613aca565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505b5b5b5b5b5b8973ffffffffffffffffffffffffffffffffffffffff166108fc869081150290604051600060405180830381858888f19350505050158015613b15573d6000803e3d6000fd5b506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc879081150290604051600060405180830381858888f19350505050158015613b7d573d6000803e3d6000fd5b5060008273ffffffffffffffffffffffffffffffffffffffff16141515613bea578173ffffffffffffffffffffffffffffffffffffffff166108fc879081150290604051600060405180830381858888f19350505050158015613be4573d6000803e3d6000fd5b50613c53565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc879081150290604051600060405180830381858888f19350505050158015613c51573d6000803e3d6000fd5b505b8586868a03030390508373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015613ca2573d6000803e3d6000fd5b50613cf0565b8373ffffffffffffffffffffffffffffffffffffffff166108fc899081150290604051600060405180830381858888f19350505050158015613cee573d6000803e3d6000fd5b505b50505050505050505050565b6000613d06614089565b6000608060405190810160405280898152602001888152602001871515815260200186151581525091506001600d8390806001815401808255809150509060018203906000526020600020906003020160009091929091909150600082015181600001556020820151816001015560408201518160020160006101000a81548160ff02191690831515021790555060608201518160020160016101000a81548160ff02191690831515021790555050500390508063ffffffff1681141515613dcd57600080fd5b8860116000838152602001908152602001600020819055506002878901811515613df357fe5b04601060008381526020019081526020016000208190555060006014600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507fe3e9cb4c9675332e1e71c04808555c8071daa68327830cac01cc33d4087a64e98482604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1613eae60008583613ebd565b80925050509695505050505050565b601360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600101919050555081600e600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515613fe557601360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001900391905055505b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef838383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a1505050565b608060405190810160405280600081526020016000815260200160001515815260200160001515815250905600a165627a7a7230582020cb8707954929e8e8b4f06b486d3f89b375da7e06df9920b5091cf7e5709b380029"
}