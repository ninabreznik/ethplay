{
  "address": "0xbfc80ebcf78094cc4cf973bdc0a2a60ad621e09d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MUBCoin",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-28\n*/\n\npragma solidity >=0.5.0 <0.6.0;\n\n/**\n * @title SafeMath for uint256\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMathUint256 {\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        require(c / a == b, \"SafeMath: Multiplier exception\");\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b; // Solidity automatically throws when dividing by 0\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: Subtraction exception\");\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        require(c >= a, \"SafeMath: Addition exception\");\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: Modulo exception\");\n        return a % b;\n    }\n\n}\n\n/**\n * @title SafeMath for uint8\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMathUint8 {\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint8 a, uint8 b) internal pure returns (uint8 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        require(c / a == b, \"SafeMath: Multiplier exception\");\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint8 a, uint8 b) internal pure returns (uint8) {\n        return a / b; // Solidity automatically throws when dividing by 0\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint8 a, uint8 b) internal pure returns (uint8) {\n        require(b <= a, \"SafeMath: Subtraction exception\");\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint8 a, uint8 b) internal pure returns (uint8 c) {\n        c = a + b;\n        require(c >= a, \"SafeMath: Addition exception\");\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint8 a, uint8 b) internal pure returns (uint8) {\n        require(b != 0, \"SafeMath: Modulo exception\");\n        return a % b;\n    }\n\n}\n\n\ncontract Ownership {\n    address payable public owner;\n    address payable public pendingOwner;\n\n    event OwnershipTransferred (address indexed from, address indexed to);\n\n    constructor () public\n    {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require (msg.sender == owner, \"Ownership: Access denied\");\n        _;\n    }\n\n    function transferOwnership (address payable _pendingOwner) public\n        onlyOwner\n    {\n        pendingOwner = _pendingOwner;\n    }\n\n    function acceptOwnership () public\n    {\n        require (msg.sender == pendingOwner, \"Ownership: Only new owner is allowed\");\n\n        emit OwnershipTransferred (owner, pendingOwner);\n\n        owner = pendingOwner;\n        pendingOwner = address(0);\n    }\n\n}\n\n\n/**\n * @title Controllable contract\n * @dev Implementation of the controllable operations\n */\ncontract Controllable is Ownership {\n\n    bool public stopped;\n    mapping (address => bool) public freezeAddresses;\n\n    event Paused();\n    event Resumed();\n\n    event FreezeAddress(address indexed addressOf);\n    event UnfreezeAddress(address indexed addressOf);\n\n    modifier onlyActive(address _sender) {\n        require(!freezeAddresses[_sender], \"Controllable: Not active\");\n        _;\n    }\n\n    modifier isUsable {\n        require(!stopped, \"Controllable: Paused\");\n        _;\n    }\n\n    function pause () public\n        onlyOwner\n    {\n        stopped = true;\n        emit Paused ();\n    }\n    \n    function resume () public\n        onlyOwner\n    {\n        stopped = false;\n        emit Resumed ();\n    }\n\n    function freezeAddress(address _addressOf) public\n        onlyOwner\n        returns (bool)\n    {\n        if (!freezeAddresses[_addressOf]) {\n            freezeAddresses[_addressOf] = true;\n            emit FreezeAddress(_addressOf);\n        }\n\n        return true;\n    }\n\t\n    function unfreezeAddress(address _addressOf) public\n        onlyOwner\n        returns (bool)\n    {\n        if (freezeAddresses[_addressOf]) {\n            delete freezeAddresses[_addressOf];\n            emit UnfreezeAddress(_addressOf);\n        }\n\n        return true;\n    }\n\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic, Controllable {\n    using SafeMathUint256 for uint256;\n\n    mapping(address => uint256) balances;\n\n    uint256 public totalSupply;\n\n    constructor(uint256 _initialSupply) public\n    {\n        totalSupply = _initialSupply;\n\n        if (0 < _initialSupply) {\n            balances[msg.sender] = _initialSupply;\n            emit Transfer(address(0), msg.sender, _initialSupply);\n        }\n    }\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public\n        isUsable\n        onlyActive(msg.sender)\n        onlyActive(_to)\n        returns (bool)\n    {\n        require(0 < _value, \"BasicToken.transfer: Zero value\");\n        require(_value <= balances[msg.sender], \"BasicToken.transfer: Insufficient fund\");\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view\n        returns (uint256 balance)\n    {\n        return balances[_owner];\n    }\n\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n */\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    /**\n    * @dev Transfer tokens from one address to another\n    * @param _from address The address which you want to send tokens from\n    * @param _to address The address which you want to transfer to\n    * @param _value uint256 the amount of tokens to be transferred\n    */\n    function transferFrom(address _from, address _to, uint256 _value) public\n        isUsable\n        onlyActive(msg.sender)\n        onlyActive(_from)\n        onlyActive(_to)\n        returns (bool)\n    {\n        require(0 < _value, \"StandardToken.transferFrom: Zero value\");\n        require(_value <= balances[_from], \"StandardToken.transferFrom: Insufficient fund\");\n        require(_value <= allowed[_from][msg.sender], \"StandardToken.transferFrom: Insufficient allowance\");\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    *\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    * @param _spender The address which will spend the funds.\n    * @param _value The amount of tokens to be spent.\n    */\n    function approve(address _spender, uint256 _value) public\n        isUsable\n        onlyActive(msg.sender)\n        onlyActive(_spender)\n        returns (bool)\n    {\n        require(0 < _value, \"StandardToken.approve: Zero value\");\n\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n    * @param _owner address The address which owns the funds.\n    * @param _spender address The address which will spend the funds.\n    * @return A uint256 specifying the amount of tokens still available for the spender.\n    */\n    function allowance(address _owner, address _spender) public view\n        returns (uint256)\n    {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\n    *\n    * approve should be called when allowed[_spender] == 0. To increment\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param _spender The address which will spend the funds.\n    * @param _addedValue The amount of tokens to increase the allowance by.\n    */\n    function increaseApproval(address _spender, uint256 _addedValue) public\n        isUsable\n        onlyActive(msg.sender)\n        onlyActive(_spender)\n        returns (bool)\n    {\n        require(0 < _addedValue, \"StandardToken.increaseApproval: Zero value\");\n\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n    *\n    * approve should be called when allowed[_spender] == 0. To decrement\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param _spender The address which will spend the funds.\n    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n    */\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public\n        isUsable\n        onlyActive(msg.sender)\n        onlyActive(_spender)\n        returns (bool)\n    {\n        require(0 < _subtractedValue, \"StandardToken.decreaseApproval: Zero value\");\n\n        uint256 oldValue = allowed[msg.sender][_spender];\n\n        if (_subtractedValue > oldValue)\n            allowed[msg.sender][_spender] = 0;\n        else\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}\n\n\ncontract ApprovalReceiver {\n    function receiveApproval(address _from, uint256 _value, address _tokenContract, bytes memory _extraData) public;\n}\n\ncontract MUBCoin is StandardToken {\n    using SafeMathUint256 for uint256;\n\n    event Freeze(address indexed from, uint256 value);\n    event Unfreeze(address indexed from, uint256 value);\n\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n\n    mapping (address => uint256) public freezeOf;\n\n    constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 _initialSupply) public\n        BasicToken(_initialSupply)\n    {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n    }\n\n    /**\n    * @dev Freeze holder balance\n    *\n    * @param _from The address which will be freeze\n    * @param _value The amount of tokens to be freeze\n    */\n    function freeze(address _from, uint256 _value) external\n        onlyOwner\n        returns (bool)\n    {\n        require(_value <= balances[_from], \"RLACoin.freeze: Insufficient fund\");\n\n        balances[_from] = balances[_from].sub(_value);\n        freezeOf[_from] = freezeOf[_from].add(_value);\n        emit Freeze(_from, _value);\n        return true;\n    }\n\t\n    /**\n    * @dev Unfreeze holder balance\n    *\n    * @param _from The address which will be unfreeze\n    * @param _value The amount of tokens to be unfreeze\n    */\n    function unfreeze(address _from, uint256 _value) external\n        onlyOwner\n        returns (bool)\n    {\n        require(_value <= freezeOf[_from], \"RLACoin.unfreeze: Insufficient fund\");\n\n        freezeOf[_from] = freezeOf[_from].sub(_value);\n        balances[_from] = balances[_from].add(_value);\n        emit Unfreeze(_from, _value);\n        return true;\n    }\n\n    /**\n     * @dev Allocate allowance and perform contract call\n     *\n     * @param _spender The spender address\n     * @param _value The allowance value\n     * @param _extraData The function call data\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes calldata _extraData) external\n        isUsable\n        returns (bool)\n    {\n        // Give allowance to spender (previous approved allowances will be clear)\n        approve(_spender, _value);\n\n        ApprovalReceiver(_spender).receiveApproval(msg.sender, _value, address(this), _extraData);\n        return true;\n    }\n\n}",
  "bytecode": "60806040523480156200001157600080fd5b5060405162003d2d38038062003d2d833981018060405260808110156200003757600080fd5b8101908080516401000000008111156200005057600080fd5b828101905060208101848111156200006757600080fd5b81518560018202830111640100000000821117156200008557600080fd5b50509291906020018051640100000000811115620000a257600080fd5b82810190506020810184811115620000b957600080fd5b8151856001820283011164010000000082111715620000d757600080fd5b5050929190602001805190602001909291908051906020019092919050505080336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806004819055508060001015620001f35780600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35b5083600690805190602001906200020c9291906200024b565b508260079080519060200190620002259291906200024b565b5081600860006101000a81548160ff021916908360ff16021790555050505050620002fa565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200028e57805160ff1916838001178555620002bf565b82800160010185558215620002bf579182015b82811115620002be578251825591602001919060010190620002a1565b5b509050620002ce9190620002d2565b5090565b620002f791905b80821115620002f3576000816000905550600101620002d9565b5090565b90565b613a23806200030a6000396000f3fe608060405260043610610149576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063046f7da21461014e57806306fdde0314610165578063095ea7b3146101f557806318160ddd1461026857806323b872dd1461029357806324bce60c14610326578063313ce5671461039957806351e946d5146103ca578063661884631461043357806370a08231146104a657806375f12b211461050b57806379ba50971461053a5780637b46b80b146105515780638456cb59146105c45780638da5cb5b146105db57806395d89b4114610632578063a9059cbb146106c2578063bfb8054714610735578063cae9ca511461079e578063cd4217c114610866578063d73dd623146108cb578063dd62ed3e1461093e578063e30c3978146109c3578063ede55f5914610a1a578063f2fde38b14610a83575b600080fd5b34801561015a57600080fd5b50610163610ad4565b005b34801561017157600080fd5b5061017a610be1565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101ba57808201518184015260208101905061019f565b50505050905090810190601f1680156101e75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020157600080fd5b5061024e6004803603604081101561021857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c7f565b604051808215151515815260200191505060405180910390f35b34801561027457600080fd5b5061027d61101c565b6040518082815260200191505060405180910390f35b34801561029f57600080fd5b5061030c600480360360608110156102b657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611022565b604051808215151515815260200191505060405180910390f35b34801561033257600080fd5b5061037f6004803603604081101561034957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611833565b604051808215151515815260200191505060405180910390f35b3480156103a557600080fd5b506103ae611b58565b604051808260ff1660ff16815260200191505060405180910390f35b3480156103d657600080fd5b50610419600480360360208110156103ed57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b6b565b604051808215151515815260200191505060405180910390f35b34801561043f57600080fd5b5061048c6004803603604081101561045657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611d29565b604051808215151515815260200191505060405180910390f35b3480156104b257600080fd5b506104f5600480360360208110156104c957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612266565b6040518082815260200191505060405180910390f35b34801561051757600080fd5b506105206122af565b604051808215151515815260200191505060405180910390f35b34801561054657600080fd5b5061054f6122c2565b005b34801561055d57600080fd5b506105aa6004803603604081101561057457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506124f0565b604051808215151515815260200191505060405180910390f35b3480156105d057600080fd5b506105d9612815565b005b3480156105e757600080fd5b506105f0612921565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561063e57600080fd5b50610647612946565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561068757808201518184015260208101905061066c565b50505050905090810190601f1680156106b45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156106ce57600080fd5b5061071b600480360360408110156106e557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506129e4565b604051808215151515815260200191505060405180910390f35b34801561074157600080fd5b506107846004803603602081101561075857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612ee1565b604051808215151515815260200191505060405180910390f35b3480156107aa57600080fd5b5061084c600480360360608110156107c157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561080857600080fd5b82018360208201111561081a57600080fd5b8035906020019184600183028401116401000000008311171561083c57600080fd5b9091929391929390505050613095565b604051808215151515815260200191505060405180910390f35b34801561087257600080fd5b506108b56004803603602081101561088957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613256565b6040518082815260200191505060405180910390f35b3480156108d757600080fd5b50610924600480360360408110156108ee57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061326e565b604051808215151515815260200191505060405180910390f35b34801561094a57600080fd5b506109ad6004803603604081101561096157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613715565b6040518082815260200191505060405180910390f35b3480156109cf57600080fd5b506109d861379c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610a2657600080fd5b50610a6960048036036020811015610a3d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506137c2565b604051808215151515815260200191505060405180910390f35b348015610a8f57600080fd5b50610ad260048036036020811015610aa657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506137e2565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b98576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4f776e6572736869703a204163636573732064656e696564000000000000000081525060200191505060405180910390fd5b6000600160146101000a81548160ff0219169083151502179055507f62451d457bc659158be6e6247f56ec1df424a5c7597f71c20c2bc44e0965c8f960405160405180910390a1565b60068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c775780601f10610c4c57610100808354040283529160200191610c77565b820191906000526020600020905b815481529060010190602001808311610c5a57829003601f168201915b505050505081565b6000600160149054906101000a900460ff16151515610d06576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f436f6e74726f6c6c61626c653a2050617573656400000000000000000000000081525060200191505060405180910390fd5b33600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515610dc9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f436f6e74726f6c6c61626c653a204e6f7420616374697665000000000000000081525060200191505060405180910390fd5b83600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515610e8c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f436f6e74726f6c6c61626c653a204e6f7420616374697665000000000000000081525060200191505060405180910390fd5b836000101515610f2a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f5374616e64617264546f6b656e2e617070726f76653a205a65726f2076616c7581526020017f650000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b83600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925866040518082815260200191505060405180910390a360019250505092915050565b60045481565b6000600160149054906101000a900460ff161515156110a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f436f6e74726f6c6c61626c653a2050617573656400000000000000000000000081525060200191505060405180910390fd5b33600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561116c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f436f6e74726f6c6c61626c653a204e6f7420616374697665000000000000000081525060200191505060405180910390fd5b84600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561122f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f436f6e74726f6c6c61626c653a204e6f7420616374697665000000000000000081525060200191505060405180910390fd5b84600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515156112f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f436f6e74726f6c6c61626c653a204e6f7420616374697665000000000000000081525060200191505060405180910390fd5b846000101515611390576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f5374616e64617264546f6b656e2e7472616e7366657246726f6d3a205a65726f81526020017f2076616c7565000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054851115151561146d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d8152602001807f5374616e64617264546f6b656e2e7472616e7366657246726f6d3a20496e737581526020017f6666696369656e742066756e640000000000000000000000000000000000000081525060400191505060405180910390fd5b600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548511151515611587576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260328152602001807f5374616e64617264546f6b656e2e7472616e7366657246726f6d3a20496e737581526020017f6666696369656e7420616c6c6f77616e6365000000000000000000000000000081525060400191505060405180910390fd5b6115d985600360008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546138ea90919063ffffffff16565b600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061166e85600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461396f90919063ffffffff16565b600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061174085600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546138ea90919063ffffffff16565b600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef876040518082815260200191505060405180910390a3600193505050509392505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4f776e6572736869703a204163636573732064656e696564000000000000000081525060200191505060405180910390fd5b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156119d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f524c41436f696e2e667265657a653a20496e73756666696369656e742066756e81526020017f640000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b611a2882600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546138ea90919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611abd82600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461396f90919063ffffffff16565b600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167ff97a274face0b5517365ad396b1fdba6f68bd3135ef603e44272adba3af5a1e0836040518082815260200191505060405180910390a26001905092915050565b600860009054906101000a900460ff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c31576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4f776e6572736869703a204163636573732064656e696564000000000000000081525060200191505060405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515611d20576001600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f1aa660498c83ea285bc55e4cfc00afcaa7120798db87b74f3c0d7c6e001bc39260405160405180910390a25b60019050919050565b6000600160149054906101000a900460ff16151515611db0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f436f6e74726f6c6c61626c653a2050617573656400000000000000000000000081525060200191505060405180910390fd5b33600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515611e73576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f436f6e74726f6c6c61626c653a204e6f7420616374697665000000000000000081525060200191505060405180910390fd5b83600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515611f36576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f436f6e74726f6c6c61626c653a204e6f7420616374697665000000000000000081525060200191505060405180910390fd5b836000101515611fd4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001807f5374616e64617264546f6b656e2e6465637265617365417070726f76616c3a2081526020017f5a65726f2076616c75650000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808511156120e4576000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612178565b6120f785826138ea90919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001935050505092915050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160149054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156123ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f4f776e6572736869703a204f6e6c79206e6577206f776e657220697320616c6c81526020017f6f7765640000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156125b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4f776e6572736869703a204163636573732064656e696564000000000000000081525060200191505060405180910390fd5b600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515612693576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f524c41436f696e2e756e667265657a653a20496e73756666696369656e74206681526020017f756e64000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6126e582600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546138ea90919063ffffffff16565b600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061277a82600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461396f90919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f2cfce4af01bcb9d6cf6c84ee1b7c491100b8695368264146a94d71e10a63083f836040518082815260200191505060405180910390a26001905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156128d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4f776e6572736869703a204163636573732064656e696564000000000000000081525060200191505060405180910390fd5b60018060146101000a81548160ff0219169083151502179055507f9e87fac88ff661f02d44f95383c817fece4bce600a3dab7a54406878b965e75260405160405180910390a1565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60078054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156129dc5780601f106129b1576101008083540402835291602001916129dc565b820191906000526020600020905b8154815290600101906020018083116129bf57829003601f168201915b505050505081565b6000600160149054906101000a900460ff16151515612a6b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f436f6e74726f6c6c61626c653a2050617573656400000000000000000000000081525060200191505060405180910390fd5b33600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515612b2e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f436f6e74726f6c6c61626c653a204e6f7420616374697665000000000000000081525060200191505060405180910390fd5b83600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515612bf1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f436f6e74726f6c6c61626c653a204e6f7420616374697665000000000000000081525060200191505060405180910390fd5b836000101515612c69576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f4261736963546f6b656e2e7472616e736665723a205a65726f2076616c75650081525060200191505060405180910390fd5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548411151515612d46576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4261736963546f6b656e2e7472616e736665723a20496e73756666696369656e81526020017f742066756e64000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b612d9884600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546138ea90919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612e2d84600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461396f90919063ffffffff16565b600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019250505092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612fa7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4f776e6572736869703a204163636573732064656e696564000000000000000081525060200191505060405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561308c57600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690558173ffffffffffffffffffffffffffffffffffffffff167f150465b020dfc06a59269da94ed66db9b65a516cf4fdd5f583b0f12752339bbe60405160405180910390a25b60019050919050565b6000600160149054906101000a900460ff1615151561311c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f436f6e74726f6c6c61626c653a2050617573656400000000000000000000000081525060200191505060405180910390fd5b6131268585610c7f565b508473ffffffffffffffffffffffffffffffffffffffff16638f4ffcb133863087876040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b15801561323257600080fd5b505af1158015613246573d6000803e3d6000fd5b5050505060019050949350505050565b60096020528060005260406000206000915090505481565b6000600160149054906101000a900460ff161515156132f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f436f6e74726f6c6c61626c653a2050617573656400000000000000000000000081525060200191505060405180910390fd5b33600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515156133b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f436f6e74726f6c6c61626c653a204e6f7420616374697665000000000000000081525060200191505060405180910390fd5b83600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561347b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f436f6e74726f6c6c61626c653a204e6f7420616374697665000000000000000081525060200191505060405180910390fd5b836000101515613519576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001807f5374616e64617264546f6b656e2e696e637265617365417070726f76616c3a2081526020017f5a65726f2076616c75650000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6135a884600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461396f90919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a360019250505092915050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156138a6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4f776e6572736869703a204163636573732064656e696564000000000000000081525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000828211151515613964576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f536166654d6174683a205375627472616374696f6e20657863657074696f6e0081525060200191505060405180910390fd5b818303905092915050565b600081830190508281101515156139ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f536166654d6174683a204164646974696f6e20657863657074696f6e0000000081525060200191505060405180910390fd5b8090509291505056fea165627a7a723058202707efad05f84ea8abfaa5d38fee4b85f9a3aa883ffe035da78ef435053cfc650029000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000004d8c55aefb8c05b5c00000000000000000000000000000000000000000000000000000000000000000000134d616b657320596f752042656175746966756c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034d55420000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000004d8c55aefb8c05b5c00000000000000000000000000000000000000000000000000000000000000000000134d616b657320596f752042656175746966756c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034d55420000000000000000000000000000000000000000000000000000000000"
}