{
  "address": "0x55e851ecb4a8ee090f7b097ba1804db94d90175e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "BC: Sale Market 4",
  "contractName": "SaleMarket",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-25\n*/\n\npragma solidity ^0.4.20;\n\n\n\ncontract CutieCoreInterface\n{\n    function isCutieCore() pure public returns (bool);\n\n    function transferFrom(address _from, address _to, uint256 _cutieId) external;\n    function transfer(address _to, uint256 _cutieId) external;\n\n    function ownerOf(uint256 _cutieId)\n        external\n        view\n        returns (address owner);\n\n    function getCutie(uint40 _id)\n        external\n        view\n        returns (\n        uint256 genes,\n        uint40 birthTime,\n        uint40 cooldownEndTime,\n        uint40 momId,\n        uint40 dadId,\n        uint16 cooldownIndex,\n        uint16 generation\n    );\n\n    function getGenes(uint40 _id)\n        public\n        view\n        returns (\n        uint256 genes\n    );\n\n\n    function getCooldownEndTime(uint40 _id)\n        public\n        view\n        returns (\n        uint40 cooldownEndTime\n    );\n\n    function getCooldownIndex(uint40 _id)\n        public\n        view\n        returns (\n        uint16 cooldownIndex\n    );\n\n\n    function getGeneration(uint40 _id)\n        public\n        view\n        returns (\n        uint16 generation\n    );\n\n    function getOptional(uint40 _id)\n        public\n        view\n        returns (\n        uint64 optional\n    );\n\n\n    function changeGenes(\n        uint40 _cutieId,\n        uint256 _genes)\n        public;\n\n    function changeCooldownEndTime(\n        uint40 _cutieId,\n        uint40 _cooldownEndTime)\n        public;\n\n    function changeCooldownIndex(\n        uint40 _cutieId,\n        uint16 _cooldownIndex)\n        public;\n\n    function changeOptional(\n        uint40 _cutieId,\n        uint64 _optional)\n        public;\n\n    function changeGeneration(\n        uint40 _cutieId,\n        uint16 _generation)\n        public;\n}\n\n\n\n\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n\n\n/// @title Auction Market for Blockchain Cuties.\n/// @author https://BlockChainArchitect.io\ncontract MarketInterface \n{\n    function withdrawEthFromBalance() external;    \n\n    function createAuction(uint40 _cutieId, uint128 _startPrice, uint128 _endPrice, uint40 _duration, address _seller) public payable;\n\n    function bid(uint40 _cutieId) public payable;\n\n    function cancelActiveAuctionWhenPaused(uint40 _cutieId) public;\n\n\tfunction getAuctionInfo(uint40 _cutieId)\n        public\n        view\n        returns\n    (\n        address seller,\n        uint128 startPrice,\n        uint128 endPrice,\n        uint40 duration,\n        uint40 startedAt,\n        uint128 featuringFee\n    );\n}\n\n\n/// @title Auction Market for Blockchain Cuties.\n/// @author https://BlockChainArchitect.io\ncontract Market is MarketInterface, Pausable\n{\n    // Shows the auction on an Cutie Token\n    struct Auction {\n        // Price (in wei) at the beginning of auction\n        uint128 startPrice;\n        // Price (in wei) at the end of auction\n        uint128 endPrice;\n        // Current owner of Token\n        address seller;\n        // Auction duration in seconds\n        uint40 duration;\n        // Time when auction started\n        // NOTE: 0 if this auction has been concluded\n        uint40 startedAt;\n        // Featuring fee (in wei, optional)\n        uint128 featuringFee;\n    }\n\n    // Reference to contract that tracks ownership\n    CutieCoreInterface public coreContract;\n\n    // Cut owner takes on each auction, in basis points - 1/100 of a per cent.\n    // Values 0-10,000 map to 0%-100%\n    uint16 public ownerFee;\n\n    // Map from token ID to their corresponding auction.\n    mapping (uint40 => Auction) public cutieIdToAuction;\n\n    event AuctionCreated(uint40 cutieId, uint128 startPrice, uint128 endPrice, uint40 duration, uint128 fee);\n    event AuctionSuccessful(uint40 cutieId, uint128 totalPrice, address winner);\n    event AuctionCancelled(uint40 cutieId);\n\n    /// @dev disables sending fund to this contract\n    function() external {}\n\n    modifier canBeStoredIn128Bits(uint256 _value) \n    {\n        require(_value <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n        _;\n    }\n\n    // @dev Adds to the list of open auctions and fires the\n    //  AuctionCreated event.\n    // @param _cutieId The token ID is to be put on auction.\n    // @param _auction To add an auction.\n    // @param _fee Amount of money to feature auction\n    function _addAuction(uint40 _cutieId, Auction _auction) internal\n    {\n        // Require that all auctions have a duration of\n        // at least one minute. (Keeps our math from getting hairy!)\n        require(_auction.duration >= 1 minutes);\n\n        cutieIdToAuction[_cutieId] = _auction;\n        \n        emit AuctionCreated(\n            _cutieId,\n            _auction.startPrice,\n            _auction.endPrice,\n            _auction.duration,\n            _auction.featuringFee\n        );\n    }\n\n    // @dev Returns true if the token is claimed by the claimant.\n    // @param _claimant - Address claiming to own the token.\n    function _isOwner(address _claimant, uint256 _cutieId) internal view returns (bool)\n    {\n        return (coreContract.ownerOf(_cutieId) == _claimant);\n    }\n\n    // @dev Transfers the token owned by this contract to another address.\n    // Returns true when the transfer succeeds.\n    // @param _receiver - Address to transfer token to.\n    // @param _cutieId - Token ID to transfer.\n    function _transfer(address _receiver, uint40 _cutieId) internal\n    {\n        // it will throw if transfer fails\n        coreContract.transfer(_receiver, _cutieId);\n    }\n\n    // @dev Escrows the token and assigns ownership to this contract.\n    // Throws if the escrow fails.\n    // @param _owner - Current owner address of token to escrow.\n    // @param _cutieId - Token ID the approval of which is to be verified.\n    function _escrow(address _owner, uint40 _cutieId) internal\n    {\n        // it will throw if transfer fails\n        coreContract.transferFrom(_owner, this, _cutieId);\n    }\n\n    // @dev just cancel auction.\n    function _cancelActiveAuction(uint40 _cutieId, address _seller) internal\n    {\n        _removeAuction(_cutieId);\n        _transfer(_seller, _cutieId);\n        emit AuctionCancelled(_cutieId);\n    }\n\n    // @dev Calculates the price and transfers winnings.\n    // Does not transfer token ownership.\n    function _bid(uint40 _cutieId, uint128 _bidAmount)\n        internal\n        returns (uint128)\n    {\n        // Get a reference to the auction struct\n        Auction storage auction = cutieIdToAuction[_cutieId];\n\n        require(_isOnAuction(auction));\n\n        // Check that bid > current price\n        uint128 price = _currentPrice(auction);\n        require(_bidAmount >= price);\n\n        // Provide a reference to the seller before the auction struct is deleted.\n        address seller = auction.seller;\n\n        _removeAuction(_cutieId);\n\n        // Transfer proceeds to seller (if there are any!)\n        if (price > 0) {\n            uint128 fee = _computeFee(price);\n            uint128 sellerValue = price - fee;\n\n            seller.transfer(sellerValue);\n        }\n\n        emit AuctionSuccessful(_cutieId, price, msg.sender);\n\n        return price;\n    }\n\n    // @dev Removes from the list of open auctions.\n    // @param _cutieId - ID of token on auction.\n    function _removeAuction(uint40 _cutieId) internal\n    {\n        delete cutieIdToAuction[_cutieId];\n    }\n\n    // @dev Returns true if the token is on auction.\n    // @param _auction - Auction to check.\n    function _isOnAuction(Auction storage _auction) internal view returns (bool)\n    {\n        return (_auction.startedAt > 0);\n    }\n\n    // @dev calculate current price of auction. \n    //  When testing, make this function public and turn on\n    //  `Current price calculation` test suite.\n    function _computeCurrentPrice(\n        uint128 _startPrice,\n        uint128 _endPrice,\n        uint40 _duration,\n        uint40 _secondsPassed\n    )\n        internal\n        pure\n        returns (uint128)\n    {\n        if (_secondsPassed >= _duration) {\n            return _endPrice;\n        } else {\n            int256 totalPriceChange = int256(_endPrice) - int256(_startPrice);\n            int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);\n            uint128 currentPrice = _startPrice + uint128(currentPriceChange);\n            \n            return currentPrice;\n        }\n    }\n    // @dev return current price of token.\n    function _currentPrice(Auction storage _auction)\n        internal\n        view\n        returns (uint128)\n    {\n        uint40 secondsPassed = 0;\n\n        uint40 timeNow = uint40(now);\n        if (timeNow > _auction.startedAt) {\n            secondsPassed = timeNow - _auction.startedAt;\n        }\n\n        return _computeCurrentPrice(\n            _auction.startPrice,\n            _auction.endPrice,\n            _auction.duration,\n            secondsPassed\n        );\n    }\n\n    // @dev Calculates owner's cut of a sale.\n    // @param _price - Sale price of cutie.\n    function _computeFee(uint128 _price) internal view returns (uint128)\n    {\n        return _price * ownerFee / 10000;\n    }\n\n    // @dev Remove all Ether from the contract with the owner's cuts. Also, remove any Ether sent directly to the contract address.\n    //  Transfers to the token contract, but can be called by\n    //  the owner or the token contract.\n    function withdrawEthFromBalance() external\n    {\n        address coreAddress = address(coreContract);\n\n        require(\n            msg.sender == owner ||\n            msg.sender == coreAddress\n        );\n        coreAddress.transfer(address(this).balance);\n    }\n\n    // @dev create and begin new auction.\n    function createAuction(uint40 _cutieId, uint128 _startPrice, uint128 _endPrice, uint40 _duration, address _seller)\n        public whenNotPaused payable\n    {\n        require(_isOwner(msg.sender, _cutieId));\n        _escrow(msg.sender, _cutieId);\n        Auction memory auction = Auction(\n            _startPrice,\n            _endPrice,\n            _seller,\n            _duration,\n            uint40(now),\n            uint128(msg.value)\n        );\n        _addAuction(_cutieId, auction);\n    }\n\n    // @dev Set the reference to cutie ownership contract. Verify the owner's fee.\n    //  @param fee should be between 0-10,000.\n    function setup(address _coreContractAddress, uint16 _fee) public onlyOwner\n    {\n        require(_fee <= 10000);\n\n        ownerFee = _fee;\n        \n        CutieCoreInterface candidateContract = CutieCoreInterface(_coreContractAddress);\n        require(candidateContract.isCutieCore());\n        coreContract = candidateContract;\n    }\n\n    // @dev Set the owner's fee.\n    //  @param fee should be between 0-10,000.\n    function setFee(uint16 _fee) public onlyOwner\n    {\n        require(_fee <= 10000);\n\n        ownerFee = _fee;\n    }\n\n    // @dev bid on auction. Complete it and transfer ownership of cutie if enough ether was given.\n    function bid(uint40 _cutieId) public payable whenNotPaused canBeStoredIn128Bits(msg.value)\n    {\n        // _bid throws if something failed.\n        _bid(_cutieId, uint128(msg.value));\n        _transfer(msg.sender, _cutieId);\n    }\n\n    // @dev Returns auction info for a token on auction.\n    // @param _cutieId - ID of token on auction.\n    function getAuctionInfo(uint40 _cutieId)\n        public\n        view\n        returns\n    (\n        address seller,\n        uint128 startPrice,\n        uint128 endPrice,\n        uint40 duration,\n        uint40 startedAt,\n        uint128 featuringFee\n    ) {\n        Auction storage auction = cutieIdToAuction[_cutieId];\n        require(_isOnAuction(auction));\n        return (\n            auction.seller,\n            auction.startPrice,\n            auction.endPrice,\n            auction.duration,\n            auction.startedAt,\n            auction.featuringFee\n        );\n    }\n\n    // @dev Returns auction info for a token on auction.\n    // @param _cutieId - ID of token on auction.\n    function isOnAuction(uint40 _cutieId)\n        public\n        view\n        returns (bool) \n    {\n        return cutieIdToAuction[_cutieId].startedAt > 0;\n    }\n\n/*\n    /// @dev Import cuties from previous version of Core contract.\n    /// @param _oldAddress Old core contract address\n    /// @param _fromIndex (inclusive)\n    /// @param _toIndex (inclusive)\n    function migrate(address _oldAddress, uint40 _fromIndex, uint40 _toIndex) public onlyOwner whenPaused\n    {\n        Market old = Market(_oldAddress);\n\n        for (uint40 i = _fromIndex; i <= _toIndex; i++)\n        {\n            if (coreContract.ownerOf(i) == _oldAddress)\n            {\n                address seller;\n                uint128 startPrice;\n                uint128 endPrice;\n                uint40 duration;\n                uint40 startedAt;\n                uint128 featuringFee;   \n                (seller, startPrice, endPrice, duration, startedAt, featuringFee) = old.getAuctionInfo(i);\n\n                Auction memory auction = Auction({\n                    seller: seller, \n                    startPrice: startPrice, \n                    endPrice: endPrice, \n                    duration: duration, \n                    startedAt: startedAt, \n                    featuringFee: featuringFee\n                });\n                _addAuction(i, auction);\n            }\n        }\n    }*/\n\n    // @dev Returns the current price of an auction.\n    function getCurrentPrice(uint40 _cutieId)\n        public\n        view\n        returns (uint128)\n    {\n        Auction storage auction = cutieIdToAuction[_cutieId];\n        require(_isOnAuction(auction));\n        return _currentPrice(auction);\n    }\n\n    // @dev Cancels unfinished auction and returns token to owner. \n    // Can be called when contract is paused.\n    function cancelActiveAuction(uint40 _cutieId) public\n    {\n        Auction storage auction = cutieIdToAuction[_cutieId];\n        require(_isOnAuction(auction));\n        address seller = auction.seller;\n        require(msg.sender == seller);\n        _cancelActiveAuction(_cutieId, seller);\n    }\n\n    // @dev Cancels auction when contract is on pause. Option is available only to owners in urgent situations. Tokens returned to seller.\n    //  Used on Core contract upgrade.\n    function cancelActiveAuctionWhenPaused(uint40 _cutieId) whenPaused onlyOwner public\n    {\n        Auction storage auction = cutieIdToAuction[_cutieId];\n        require(_isOnAuction(auction));\n        _cancelActiveAuction(_cutieId, auction.seller);\n    }\n}\n\n\n/// @title Auction market for cuties sale \n/// @author https://BlockChainArchitect.io\ncontract SaleMarket is Market\n{\n    // @dev Sanity check reveals that the\n    //  auction in our setSaleAuctionAddress() call is right.\n    bool public isSaleMarket = true;\n    \n\n    // @dev create and start a new auction\n    // @param _cutieId - ID of cutie to auction, sender must be owner.\n    // @param _startPrice - Price of item (in wei) at the beginning of auction.\n    // @param _endPrice - Price of item (in wei) at the end of auction.\n    // @param _duration - Length of auction (in seconds).\n    // @param _seller - Seller\n    function createAuction(\n        uint40 _cutieId,\n        uint128 _startPrice,\n        uint128 _endPrice,\n        uint40 _duration,\n        address _seller\n    )\n        public\n        payable\n    {\n        require(msg.sender == address(coreContract));\n        _escrow(_seller, _cutieId);\n        Auction memory auction = Auction(\n            _startPrice,\n            _endPrice,\n            _seller,\n            _duration,\n            uint40(now),\n            uint128(msg.value)\n        );\n        _addAuction(_cutieId, auction);\n    }\n\n    // @dev LastSalePrice is updated if seller is the token contract.\n    // Otherwise, default bid method is used.\n    function bid(uint40 _cutieId)\n        public\n        payable\n        canBeStoredIn128Bits(msg.value)\n    {\n        // _bid verifies token ID size\n        _bid(_cutieId, uint128(msg.value));\n        _transfer(msg.sender, _cutieId);\n\n    }\n}",
  "bytecode": "6060604052600080546003805460ff19166001179055600160a060020a033316600160a860020a03199091161790556110b08061003d6000396000f3006060604052600436106100ed5763ffffffff60e060020a6000350416632177885d81146100fa5780633f4ba83a1461012b5780635c975abb1461013e5780636066b06614610151578063776247c4146101645780637ea310d41461017757806381baab24146101b05780638456cb59146102205780638da5cb5b146102335780638e0055531461026257806398c9faac1461027c5780639ccaec9814610299578063b2fb3b901461030b578063c170fd5414610328578063c1d1faf31461033a578063d5b2a01a14610373578063e410a0c61461039d578063e80db5db146103c3578063f2fde38b146103d6575b34156100f857600080fd5b005b341561010557600080fd5b61011764ffffffffff600435166103f5565b604051901515815260200160405180910390f35b341561013657600080fd5b6100f861041e565b341561014957600080fd5b61011761049d565b341561015c57600080fd5b6101176104ad565b341561016f57600080fd5b6100f86104b6565b341561018257600080fd5b61019464ffffffffff60043516610535565b6040516001608060020a03909116815260200160405180910390f35b34156101bb57600080fd5b6101cd64ffffffffff6004351661056f565b6040516001608060020a0396871681529486166020860152600160a060020a0390931660408086019190915264ffffffffff928316606086015291166080840152921660a082015260c001905180910390f35b341561022b57600080fd5b6100f86105d8565b341561023e57600080fd5b61024661065c565b604051600160a060020a03909116815260200160405180910390f35b341561026d57600080fd5b6100f861ffff6004351661066b565b341561028757600080fd5b6100f864ffffffffff600435166106cc565b34156102a457600080fd5b6102b664ffffffffff60043516610725565b604051600160a060020a0390961686526001608060020a03948516602087015292841660408087019190915264ffffffffff928316606087015291166080850152911660a083015260c0909101905180910390f35b341561031657600080fd5b6100f864ffffffffff600435166107c0565b6100f864ffffffffff6004351661083c565b6100f864ffffffffff6004358116906001608060020a036024358116916044359091169060643516600160a060020a0360843516610866565b341561037e57600080fd5b610386610907565b60405161ffff909116815260200160405180910390f35b34156103a857600080fd5b6100f8600160a060020a036004351661ffff60243516610918565b34156103ce57600080fd5b610246610a04565b34156103e157600080fd5b6100f8600160a060020a0360043516610a13565b64ffffffffff90811660009081526002602052604081206001015460c860020a90049091161190565b60005433600160a060020a0390811691161461043957600080fd5b60005460a060020a900460ff16151561045157600080fd5b6000805474ff0000000000000000000000000000000000000000191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b60005460a060020a900460ff1681565b60035460ff1681565b600154600054600160a060020a0391821691338116911614806104ea575080600160a060020a031633600160a060020a0316145b15156104f557600080fd5b80600160a060020a03166108fc30600160a060020a0316319081150290604051600060405180830381858888f19350505050151561053257600080fd5b50565b64ffffffffff8116600090815260026020526040812061055481610aae565b151561055f57600080fd5b61056881610ac7565b9392505050565b60026020819052600091825260409091208054600182015491909201546001608060020a03808416937001000000000000000000000000000000009004811692600160a060020a0381169264ffffffffff60a060020a830481169360c860020a90930416911686565b60005433600160a060020a039081169116146105f357600080fd5b60005460a060020a900460ff161561060a57600080fd5b6000805474ff0000000000000000000000000000000000000000191660a060020a1790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600054600160a060020a031681565b60005433600160a060020a0390811691161461068657600080fd5b61271061ffff8216111561069957600080fd5b6001805461ffff90921660a060020a0275ffff000000000000000000000000000000000000000019909216919091179055565b64ffffffffff81166000908152600260205260408120906106ec82610aae565b15156106f757600080fd5b506001810154600160a060020a03908116903316811461071657600080fd5b6107208382610b4e565b505050565b64ffffffffff811660009081526002602052604081208190819081908190819061074e81610aae565b151561075957600080fd5b60018101548154600290920154600160a060020a0382169a6001608060020a038085169b507001000000000000000000000000000000009094048416995064ffffffffff60a060020a84048116995060c860020a9093049092169650919091169350915050565b6000805460a060020a900460ff1615156107d957600080fd5b60005433600160a060020a039081169116146107f457600080fd5b5064ffffffffff8116600090815260026020526040902061081481610aae565b151561081f57600080fd5b6001810154610838908390600160a060020a0316610b4e565b5050565b346001608060020a0381111561085157600080fd5b61085b8234610ba0565b506108383383610cd3565b61086e61104f565b60015433600160a060020a0390811691161461088957600080fd5b6108938287610d44565b60c060405190810160405280866001608060020a03168152602001856001608060020a0316815260200183600160a060020a031681526020018464ffffffffff1681526020014264ffffffffff168152602001346001608060020a031681525090506108ff8682610dad565b505050505050565b60015460a060020a900461ffff1681565b6000805433600160a060020a0390811691161461093457600080fd5b61271061ffff8316111561094757600080fd5b506001805475ffff0000000000000000000000000000000000000000191660a060020a61ffff84160217905581600160a060020a038116634d6a813a6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156109b157600080fd5b5af115156109be57600080fd5b5050506040518051905015156109d357600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555050565b600154600160a060020a031681565b60005433600160a060020a03908116911614610a2e57600080fd5b600160a060020a0381161515610a4357600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60010154600060c860020a90910464ffffffffff161190565b60018101546000908190429064ffffffffff60c860020a90910481169082161115610b0457600184015460c860020a900464ffffffffff16810391505b83546001850154610b46916001608060020a0380821692700100000000000000000000000000000000909204169060a060020a900464ffffffffff1685610f63565b949350505050565b610b5782610fca565b610b618183610cd3565b7ff6680ade663631ec4dd74f7eaa1f75125361380cd50a22f969e9acfa5f5367048260405164ffffffffff909116815260200160405180910390a15050565b64ffffffffff8216600090815260026020526040812081808080610bc385610aae565b1515610bce57600080fd5b610bd785610ac7565b93506001608060020a038085169088161015610bf257600080fd5b6001850154600160a060020a03169250610c0b88610fca565b6000846001608060020a03161115610c6757610c2684611028565b915050808303600160a060020a0383166001608060020a03821680156108fc0290604051600060405180830381858888f193505050501515610c6757600080fd5b7f8500e47909916e51e97e4880e742d8b9af1afaeb9ea54166947cf42e6616b11788853360405164ffffffffff90931683526001608060020a039091166020830152600160a060020a03166040808301919091526060909101905180910390a150919695505050505050565b600154600160a060020a031663a9059cbb838360405160e060020a63ffffffff8516028152600160a060020a03909216600483015264ffffffffff166024820152604401600060405180830381600087803b1515610d3057600080fd5b5af11515610d3d57600080fd5b5050505050565b600154600160a060020a03166323b872dd83308460405160e060020a63ffffffff8616028152600160a060020a03938416600482015291909216602482015264ffffffffff9091166044820152606401600060405180830381600087803b1515610d3057600080fd5b603c816060015164ffffffffff161015610dc657600080fd5b64ffffffffff821660009081526002602052604090208190815181546fffffffffffffffffffffffffffffffff19166001608060020a0391909116178155602082015181546001608060020a03918216700100000000000000000000000000000000029116178155604082015160018201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905560608201518160010160146101000a81548164ffffffffff021916908364ffffffffff16021790555060808201518160010160196101000a81548164ffffffffff021916908364ffffffffff16021790555060a082015160029190910180546fffffffffffffffffffffffffffffffff19166001608060020a03909216919091179055507f10812469e6e641cdef133a0556aa1bfd46bcd460e603da6af3233f8a6e242f6a828251836020015184606001518560a0015160405164ffffffffff95861681526001608060020a03948516602082015292841660408085019190915291909416606083015292909116608082015260a001905180910390a15050565b600080808064ffffffffff80871690861610610f8157869350610fbf565b876001608060020a0316876001608060020a03160392508564ffffffffff168564ffffffffff168402811515610fb357fe5b05915081880190508093505b505050949350505050565b64ffffffffff16600090815260026020819052604082209182556001820180547fffff0000000000000000000000000000000000000000000000000000000000001690550180546fffffffffffffffffffffffffffffffff19169055565b6001546000906127109060a060020a900461ffff1683026001608060020a03160492915050565b60c06040519081016040908152600080835260208301819052908201819052606082018190526080820181905260a0820152905600a165627a7a723058205f212fe896014f2d0d159ed6c7949ef40e5cc1541135a3776a565dc716f1d4190029"
}