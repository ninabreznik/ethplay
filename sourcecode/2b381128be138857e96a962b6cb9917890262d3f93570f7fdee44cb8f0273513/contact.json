{
  "address": "0x22f0af8d78851b72ee799e05f54a77001586b18a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GXVCToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-24\n*/\n\npragma solidity ^0.4.15;\n\n/*********************************************************************************\n *********************************************************************************\n *\n * Name of the project: Genevieve VC Token\n * Contract name: GXVCToken\n * Author: Juan Livingston @ Ethernity.live\n * Developed for: Genevieve Co.\n * GXVC is an ERC223 Token\n *\n *********************************************************************************\n ********************************************************************************/\n\ncontract ContractReceiver {   \n    function tokenFallback(address _from, uint _value, bytes _data){\n    }\n}\n\n /* New ERC23 contract interface */\n\ncontract ERC223 {\n  uint public totalSupply;\n  function balanceOf(address who) constant returns (uint);\n  \n  function name() constant returns (string _name);\n  function symbol() constant returns (string _symbol);\n  function decimals() constant returns (uint8 _decimals);\n  function totalSupply() constant returns (uint256 _supply);\n\n  function transfer(address to, uint value) returns (bool ok);\n  function transfer(address to, uint value, bytes data) returns (bool ok);\n  function transfer(address to, uint value, bytes data, string custom_fallback) returns (bool ok);\n  function transferFrom(address from, address to, uint256 value) returns (bool);\n  event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n}\n\n// The GXVC token ERC223\n\ncontract GXVCToken {\n\n    // Token public variables\n    string public name;\n    string public symbol;\n    uint8 public decimals; \n    string public version = 'v0.2';\n    uint256 public totalSupply;\n    bool locked;\n\n    address rootAddress;\n    address Owner;\n    uint multiplier = 10000000000; // For 10 decimals\n    address swapperAddress; // Can bypass a lock\n\n    mapping(address => uint256) balances;\n    mapping(address => mapping(address => uint256)) allowed;\n    mapping(address => bool) freezed; \n\n\n  \tevent Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    // Modifiers\n\n    modifier onlyOwner() {\n        if ( msg.sender != rootAddress && msg.sender != Owner ) revert();\n        _;\n    }\n\n    modifier onlyRoot() {\n        if ( msg.sender != rootAddress ) revert();\n        _;\n    }\n\n    modifier isUnlocked() {\n    \tif ( locked && msg.sender != rootAddress && msg.sender != Owner ) revert();\n\t\t_;    \t\n    }\n\n    modifier isUnfreezed(address _to) {\n    \tif ( freezed[msg.sender] || freezed[_to] ) revert();\n    \t_;\n    }\n\n\n    // Safe math\n    function safeAdd(uint x, uint y) internal returns (uint z) {\n        require((z = x + y) >= x);\n    }\n    function safeSub(uint x, uint y) internal returns (uint z) {\n        require((z = x - y) <= x);\n    }\n\n\n    // GXC Token constructor\n    function GXVCToken() {        \n        locked = true;\n        totalSupply = 160000000 * multiplier; // 160,000,000 tokens * 10 decimals\n        name = 'Genevieve VC'; \n        symbol = 'GXVC'; \n        decimals = 10; \n        rootAddress = msg.sender;        \n        Owner = msg.sender;       \n        balances[rootAddress] = totalSupply; \n        allowed[rootAddress][swapperAddress] = totalSupply;\n    }\n\n\n\t// ERC223 Access functions\n\n\tfunction name() constant returns (string _name) {\n\t      return name;\n\t  }\n\tfunction symbol() constant returns (string _symbol) {\n\t      return symbol;\n\t  }\n\tfunction decimals() constant returns (uint8 _decimals) {\n\t      return decimals;\n\t  }\n\tfunction totalSupply() constant returns (uint256 _totalSupply) {\n\t      return totalSupply;\n\t  }\n\n\n    // Only root function\n\n    function changeRoot(address _newrootAddress) onlyRoot returns(bool){\n    \t\tallowed[rootAddress][swapperAddress] = 0; // Removes allowance to old rootAddress\n            rootAddress = _newrootAddress;\n            allowed[_newrootAddress][swapperAddress] = totalSupply; // Gives allowance to new rootAddress\n            return true;\n    }\n\n\n    // Only owner functions\n\n    function changeOwner(address _newOwner) onlyOwner returns(bool){\n            Owner = _newOwner;\n            return true;\n    }\n\n    function changeSwapperAdd(address _newSwapper) onlyOwner returns(bool){\n    \t\tallowed[rootAddress][swapperAddress] = 0; // Removes allowance to old rootAddress\n            swapperAddress = _newSwapper;\n            allowed[rootAddress][_newSwapper] = totalSupply; // Gives allowance to new rootAddress\n            return true;\n    }\n       \n    function unlock() onlyOwner returns(bool) {\n        locked = false;\n        return true;\n    }\n\n    function lock() onlyOwner returns(bool) {\n        locked = true;\n        return true;\n    }\n\n    function freeze(address _address) onlyOwner returns(bool) {\n        freezed[_address] = true;\n        return true;\n    }\n\n    function unfreeze(address _address) onlyOwner returns(bool) {\n        freezed[_address] = false;\n        return true;\n    }\n\n    function burn(uint256 _value) onlyOwner returns(bool) {\n    \tbytes memory empty;\n        if ( balances[msg.sender] < _value ) revert();\n        balances[msg.sender] = safeSub( balances[msg.sender] , _value );\n        totalSupply = safeSub( totalSupply,  _value );\n        Transfer(msg.sender, 0x0, _value , empty);\n        return true;\n    }\n\n\n    // Public getters\n    function isFreezed(address _address) constant returns(bool) {\n        return freezed[_address];\n    }\n\n    function isLocked() constant returns(bool) {\n        return locked;\n    }\n\n  // Public functions (from https://github.com/Dexaran/ERC223-token-standard/tree/Recommended)\n\n  // Function that is called when a user or another contract wants to transfer funds to an address that has a non-standard fallback function\n  function transfer(address _to, uint _value, bytes _data, string _custom_fallback) isUnlocked isUnfreezed(_to) returns (bool success) {\n      \n    if(isContract(_to)) {\n        if (balances[msg.sender] < _value) return false;\n        balances[msg.sender] = safeSub( balances[msg.sender] , _value );\n        balances[_to] = safeAdd( balances[_to] , _value );\n        ContractReceiver receiver = ContractReceiver(_to);\n        receiver.call.value(0)(bytes4(sha3(_custom_fallback)), msg.sender, _value, _data);\n        Transfer(msg.sender, _to, _value, _data);\n        return true;\n    }\n    else {\n        return transferToAddress(_to, _value, _data);\n    }\n}\n\n  // Function that is called when a user or another contract wants to transfer funds to an address with tokenFallback function\n  function transfer(address _to, uint _value, bytes _data) isUnlocked isUnfreezed(_to) returns (bool success) {\n      \n    if(isContract(_to)) {\n        return transferToContract(_to, _value, _data);\n    }\n    else {\n        return transferToAddress(_to, _value, _data);\n    }\n}\n\n\n  // Standard function transfer similar to ERC20 transfer with no _data.\n  // Added due to backwards compatibility reasons.\n  function transfer(address _to, uint _value) isUnlocked isUnfreezed(_to) returns (bool success) {\n\n    bytes memory empty;\n    if(isContract(_to)) {\n        return transferToContract(_to, _value, empty);\n    }\n    else {\n        return transferToAddress(_to, _value, empty);\n    }\n}\n\n//assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n  function isContract(address _addr) private returns (bool is_contract) {\n      uint length;\n      assembly {\n            //retrieve the size of the code on target address, this needs assembly\n            length := extcodesize(_addr)\n      }\n      return (length>0);\n    }\n\n  //function that is called when transaction target is an address\n  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n    if (balances[msg.sender] < _value) return false;\n    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n    balances[_to] = safeAdd(balances[_to], _value);\n    Transfer(msg.sender, _to, _value, _data);\n    return true;\n  }\n  \n  //function that is called when transaction target is a contract\n  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n    if (balances[msg.sender] < _value) return false;\n    balances[msg.sender] = safeSub(balances[msg.sender] , _value);\n    balances[_to] = safeAdd(balances[_to] , _value);\n    ContractReceiver receiver = ContractReceiver(_to);\n    receiver.tokenFallback(msg.sender, _value, _data);\n    Transfer(msg.sender, _to, _value, _data);\n    return true;\n}\n\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n\n        if ( locked && msg.sender != swapperAddress ) return false; \n        if ( freezed[_from] || freezed[_to] ) return false; // Check if destination address is freezed\n        if ( balances[_from] < _value ) return false; // Check if the sender has enough\n\t\tif ( _value > allowed[_from][msg.sender] ) return false; // Check allowance\n\n        balances[_from] = safeSub(balances[_from] , _value); // Subtract from the sender\n        balances[_to] = safeAdd(balances[_to] , _value); // Add the same to the recipient\n\n        allowed[_from][msg.sender] = safeSub( allowed[_from][msg.sender] , _value );\n\n        bytes memory empty;\n\n        if ( isContract(_to) ) {\n\t        ContractReceiver receiver = ContractReceiver(_to);\n\t    \treceiver.tokenFallback(_from, _value, empty);\n\t\t}\n\n        Transfer(_from, _to, _value , empty);\n        return true;\n    }\n\n\n    function balanceOf(address _owner) constant returns(uint256 balance) {\n        return balances[_owner];\n    }\n\n\n    function approve(address _spender, uint _value) returns(bool) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n\n    function allowance(address _owner, address _spender) constant returns(uint256) {\n        return allowed[_owner][_spender];\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"unfreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newrootAddress\",\"type\":\"address\"}],\"name\":\"changeRoot\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isFreezed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSwapper\",\"type\":\"address\"}],\"name\":\"changeSwapperAdd\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_custom_fallback\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": ""
}