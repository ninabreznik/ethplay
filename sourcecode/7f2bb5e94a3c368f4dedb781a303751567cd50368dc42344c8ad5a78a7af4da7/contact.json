{
  "address": "0xa7cb7f55ece2d1df3379f303f33dd3e1ee593b8f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WealthBuilderToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-03\n*/\n\npragma solidity ^0.4.19;\n\nlibrary SafeMath {\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    return a - b;\n  }\n}\n\ncontract Ownable {\n\n  /**\n   * @dev set `owner` of the contract to the sender\n   */\n  address public owner = msg.sender;\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));      \n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] += _value;\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] += _value;\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n  \n}\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event Burn(address indexed burner, uint value);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply += _amount;\n    balances[_to] += _amount;\n    Mint(_to, _amount);\n    Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to burn tokens\n   * @param _addr The address that will have _amount of tokens burned.\n   * @param _amount The amount of tokens to burn.\n   */\n  function burn(address _addr, uint _amount) onlyOwner public {\n    require(_amount > 0 && balances[_addr] >= _amount && totalSupply >= _amount);\n    balances[_addr] -= _amount;\n    totalSupply -= _amount;\n    Burn(_addr, _amount);\n    Transfer(_addr, address(0), _amount);\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\ncontract WealthBuilderToken is MintableToken {\n    \n    string public name = \"Wealth Builder Token\";\n    \n    string public symbol = \"WBT\";\n    \n    uint32 public decimals = 18;\n\n    /**\n     *  how many {tokens*10^(-18)} get per 1wei\n     */\n    uint public rate = 10**7;\n    /**\n     *  multiplicator for rate\n     */\n    uint public mrate = 10**7;\n\n    function setRate(uint _rate) onlyOwner public {\n        rate = _rate;\n    }\n    \n}",
  "bytecode": "6060604090815260038054600160a060020a03191633600160a060020a03161760a060020a60ff02191690558051908101604052601481527f5765616c7468204275696c64657220546f6b656e000000000000000000000000602082015260049080516100709291602001906100e5565b5060408051908101604052600381527f5742540000000000000000000000000000000000000000000000000000000000602082015260059080516100b89291602001906100e5565b506006805463ffffffff1916601217905562989680600781905560085534156100e057600080fd5b610180565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061012657805160ff1916838001178555610153565b82800160010185558215610153579182015b82811115610153578251825591602001919060010190610138565b5061015f929150610163565b5090565b61017d91905b8082111561015f5760008155600101610169565b90565b610abd8061018f6000396000f3006060604052600436106100fa5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041662f3e71781146100ff57806305d2035b1461012457806306fdde031461014b578063095ea7b3146101d557806318160ddd146101f757806323b872dd1461020a5780632c4e722e14610232578063313ce5671461024557806334fcf4371461027157806340c10f191461028957806370a08231146102ab5780637d64bcb4146102ca5780638da5cb5b146102dd57806395d89b411461030c5780639dc29fac1461031f578063a9059cbb14610341578063dd62ed3e14610363578063f2fde38b14610388575b600080fd5b341561010a57600080fd5b6101126103a7565b60405190815260200160405180910390f35b341561012f57600080fd5b6101376103ad565b604051901515815260200160405180910390f35b341561015657600080fd5b61015e6103bd565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561019a578082015183820152602001610182565b50505050905090810190601f1680156101c75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101e057600080fd5b610137600160a060020a036004351660243561045b565b341561020257600080fd5b6101126104c7565b341561021557600080fd5b610137600160a060020a03600435811690602435166044356104cd565b341561023d57600080fd5b610112610613565b341561025057600080fd5b610258610619565b60405163ffffffff909116815260200160405180910390f35b341561027c57600080fd5b610287600435610625565b005b341561029457600080fd5b610137600160a060020a0360043516602435610645565b34156102b657600080fd5b610112600160a060020a036004351661070a565b34156102d557600080fd5b610137610725565b34156102e857600080fd5b6102f06107b0565b604051600160a060020a03909116815260200160405180910390f35b341561031757600080fd5b61015e6107bf565b341561032a57600080fd5b610287600160a060020a036004351660243561082a565b341561034c57600080fd5b610137600160a060020a0360043516602435610913565b341561036e57600080fd5b610112600160a060020a03600435811690602435166109d2565b341561039357600080fd5b610287600160a060020a03600435166109fd565b60085481565b60035460a060020a900460ff1681565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104535780601f1061042857610100808354040283529160200191610453565b820191906000526020600020905b81548152906001019060200180831161043657829003601f168201915b505050505081565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005481565b6000600160a060020a03831615156104e457600080fd5b600160a060020a03841660009081526001602052604090205482111561050957600080fd5b600160a060020a038085166000908152600260209081526040808320339094168352929052205482111561053c57600080fd5b600160a060020a038416600090815260016020526040902054610565908363ffffffff610a5c16565b600160a060020a0380861660008181526001602090815260408083209590955587841682528482208054880190559181526002825283812033909316815291905220546105b8908363ffffffff610a5c16565b600160a060020a0380861660008181526002602090815260408083203386168452909152908190209390935590851691600080516020610a728339815191529085905190815260200160405180910390a35060019392505050565b60075481565b60065463ffffffff1681565b60035433600160a060020a0390811691161461064057600080fd5b600755565b60035460009033600160a060020a0390811691161461066357600080fd5b60035460a060020a900460ff161561067a57600080fd5b6000805483018155600160a060020a0384168082526001602052604091829020805485019055907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a2600160a060020a0383166000600080516020610a728339815191528460405190815260200160405180910390a350600192915050565b600160a060020a031660009081526001602052604090205490565b60035460009033600160a060020a0390811691161461074357600080fd5b60035460a060020a900460ff161561075a57600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a150600190565b600354600160a060020a031681565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104535780601f1061042857610100808354040283529160200191610453565b60035433600160a060020a0390811691161461084557600080fd5b60008111801561086e5750600160a060020a038216600090815260016020526040902054819010155b801561087c57508060005410155b151561088757600080fd5b600160a060020a0382166000818152600160205260408082208054859003905581548490039091557fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59083905190815260200160405180910390a26000600160a060020a038316600080516020610a728339815191528360405190815260200160405180910390a35050565b6000600160a060020a038316151561092a57600080fd5b600160a060020a03331660009081526001602052604090205482111561094f57600080fd5b600160a060020a033316600090815260016020526040902054610978908363ffffffff610a5c16565b600160a060020a0333811660008181526001602052604080822094909455918616808352918390208054860190559091600080516020610a728339815191529085905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a03908116911614610a1857600080fd5b600160a060020a0381161515610a2d57600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610a6b57600080fd5b509003905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820c30ceb767ce9fd30ce8943b978b4ee442a498f081240ce8b8f8a21ee74031b7b0029"
}