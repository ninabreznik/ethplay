{
  "address": "0x35bfd2cfe27ef7af2029d584b9b6c2ca27d9b3c7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EasyEthProfit",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-11\n*/\n\npragma solidity ^0.4.25;\n\n/**\n* ETH CRYPTOCURRENCY DISTRIBUTION PROJECT  4% DAILY\n*\n* How to invest?\n* Send any sum to smart contract address.\n* The minimum investment amount is 0.01 ETH \n* The recommended gas limit is 200000 \n* The contract remembers the address of your wallet, as well as the amount and time of a deposit. \n* Every 24 hours after the deposit you have 4% of the amount invested by you.\n* You can receive a payment at any time by sending 0 ETH to the address of the contract. \n* \n*  Web          - http://easyethprofit.org\n*  Telegram_chat: https://t.me/EasyEthProfit\n*/\n\ncontract EasyEthProfit{\n    mapping (address => uint256) invested;\n    mapping (address => uint256) dateInvest;\n    uint constant public FEE = 4;\n    uint constant public ADMIN_FEE = 10;\n    address private adminAddr;\n    \n    constructor() public{\n        adminAddr = msg.sender;\n    }\n\n    function () external payable {\n        address sender = msg.sender;\n        \n        if (invested[sender] != 0) {\n            uint256 amount = getInvestorDividend(sender);\n            if (amount >= address(this).balance){\n                amount = address(this).balance;\n            }\n            sender.send(amount);\n        }\n\n        dateInvest[sender] = now;\n        invested[sender] += msg.value;\n\n        if (msg.value > 0){\n            adminAddr.send(msg.value * ADMIN_FEE / 100);\n        }\n    }\n    \n    function getInvestorDividend(address addr) public view returns(uint256) {\n        return invested[addr] * FEE / 100 * (now - dateInvest[addr]) / 1 days;\n    }\n\n}",
  "bytecode": "608060405234801561001057600080fd5b5060028054600160a060020a03191633179055610225806100326000396000f3006080604052600436106100565763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416634469ed1481146101355780638a93dbdf1461015c578063c57981b51461018a575b33600081815260208190526040812054156100b5576100748261019f565b905030318110610082575030315b60405173ffffffffffffffffffffffffffffffffffffffff83169082156108fc029083906000818181858888f150505050505b73ffffffffffffffffffffffffffffffffffffffff8216600090815260016020908152604080832042905590829052812080543490810190915511156101315760025460405173ffffffffffffffffffffffffffffffffffffffff909116906064600a34020480156108fc02916000818181858888f150505050505b5050005b34801561014157600080fd5b5061014a6101ef565b60408051918252519081900360200190f35b34801561016857600080fd5b5061014a73ffffffffffffffffffffffffffffffffffffffff6004351661019f565b34801561019657600080fd5b5061014a6101f4565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602090815260408083205491839052822054620151809142039060649060040204028115156101e857fe5b0492915050565b600a81565b6004815600a165627a7a7230582056f94fd051b9c51eaefa82d910fa8d632e085ad9b47717232a5e0c3dfa7473100029"
}