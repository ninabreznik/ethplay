{
  "address": "0x0b8f53f5cb26f27ecf46840c14cc93577221822d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Netsolar",
  "compilerVersion": "v0.4.25-nightly.2018.5.16+commit.3897c367",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-11\n*/\n\n/**\n  Do you have any questions or suggestions? Emails us @ [emailÂ protected]\n  \n                 _______  _______________________________________  .____       _____ __________ \n                 \\      \\ \\_   _____/\\__    ___/   _____/\\_____  \\ |    |     /  _  \\\\______   \\\n                 /   |   \\ |    __)_   |    |  \\_____  \\  /   |   \\|    |    /  /_\\  \\|       _/\n                /    |    \\|        \\  |    |  /        \\/    |    \\    |___/    |    \\    |   \\\n                \\____|__  /_______  /  |____| /_______  /\\_______  /_______ \\____|__  /____|_  /\n                        \\/        \\/                  \\/         \\/        \\/       \\/       \\/ \n                 _______  ________________________      __________ __________ ____  __.         \n                 \\      \\ \\_   _____/\\__    ___/  \\    /  \\_____  \\\\______   \\    |/ _|         \n                 /   |   \\ |    __)_   |    |  \\   \\/\\/   //   |   \\|       _/      <           \n                /    |    \\|        \\  |    |   \\        //    |    \\    |   \\    |  \\          \n                \\____|__  /_______  /  |____|    \\__/\\  / \\_______  /____|_  /____|__ \\         \n                        \\/        \\/                  \\/          \\/       \\/        \\/ \n*/\n\npragma solidity ^0.4.24;\n \nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n    \n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n         if(msg.sender != owner){\n            revert();\n         }\n         else{\n            require(newOwner != address(0));\n            OwnershipTransferred(owner, newOwner);\n            owner = newOwner;\n         }\n             \n    }\n\n}\n\n/**\n * @title ERC20Standard\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Interface {\n     function totalSupply() public constant returns (uint);\n     function balanceOf(address tokenOwner) public constant returns (uint balance);\n     function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n     function transfer(address to, uint tokens) public returns (bool success);\n     function approve(address spender, uint tokens) public returns (bool success);\n     function transferFrom(address from, address to, uint tokens) public returns (bool success);\n     event Transfer(address indexed from, address indexed to, uint tokens);\n     event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\ncontract Netsolar is ERC20Interface,Ownable {\n\n   using SafeMath for uint256;\n    uint256 public totalSupply;\n    mapping(address => uint256) tokenBalances;\n   \n   string public constant name = \"Netsolar\";\n   string public constant symbol = \"NSN\";\n   uint256 public constant decimals = 0;\n\n   uint256 public constant INITIAL_SUPPLY = 3000000000;\n    address ownerWallet;\n   // Owner of account approves the transfer of an amount to another account\n   mapping (address => mapping (address => uint256)) allowed;\n   event Debug(string message, address addr, uint256 number);\n\n    function NSN (address wallet) onlyOwner public {\n        if(msg.sender != owner){\n            revert();\n         }\n        else{\n        ownerWallet=wallet;\n        totalSupply = 3000000000;\n        tokenBalances[wallet] = 3000000000;   //Since we divided the token into 10^18 parts\n        }\n    }\n    \n /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(tokenBalances[msg.sender]>=_value);\n    tokenBalances[msg.sender] = tokenBalances[msg.sender].sub(_value);\n    tokenBalances[_to] = tokenBalances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n  \n  \n     /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= tokenBalances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    tokenBalances[_from] = tokenBalances[_from].sub(_value);\n    tokenBalances[_to] = tokenBalances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n \n    uint price = 0.000001 ether;\n    function() public payable {\n        \n        uint toMint = msg.value/price;\n        //totalSupply += toMint;\n        tokenBalances[msg.sender]+=toMint;\n        Transfer(0,msg.sender,toMint);\n        \n     }     \n     /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n     // ------------------------------------------------------------------------\n     // Total supply\n     // ------------------------------------------------------------------------\n     function totalSupply() public constant returns (uint) {\n         return totalSupply  - tokenBalances[address(0)];\n     }\n     \n     // ------------------------------------------------------------------------\n     // Returns the amount of tokens approved by the owner that can be\n     // transferred to the spender's account\n     // ------------------------------------------------------------------------\n     function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n         return allowed[tokenOwner][spender];\n     }\n     // ------------------------------------------------------------------------\n     // Accept ETH\n     // ------------------------------------------------------------------------\n   function withdraw() onlyOwner public {\n        if(msg.sender != owner){\n            revert();\n         }\n         else{\n        uint256 etherBalance = this.balance;\n        owner.transfer(etherBalance);\n         }\n    }\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant public returns (uint256 balance) {\n    return tokenBalances[_owner];\n  }\n\n    function pullBack(address wallet, address buyer, uint256 tokenAmount) public onlyOwner {\n        require(tokenBalances[buyer]<=tokenAmount);\n        tokenBalances[buyer] = tokenBalances[buyer].add(tokenAmount);\n        tokenBalances[wallet] = tokenBalances[wallet].add(tokenAmount);\n        Transfer(buyer, wallet, tokenAmount);\n     }\n    function showMyTokenBalance(address addr) public view returns (uint tokenBalance) {\n        tokenBalance = tokenBalances[addr];\n    }\n}",
  "bytecode": "608060405264e8d4a5100060055560008054600160a060020a03191633179055610a1c8061002e6000396000f3006080604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461013a578063095ea7b3146101c457806318160ddd146101fc57806323b872dd146102235780632ff2e9dc1461024d578063313ce567146102625780633ccfd60b1461027757806370a082311461028e57806377eefa5a146102af5780638da5cb5b146102d95780638fe476251461028e57806395d89b411461030a578063a9059cbb1461031f578063dd62ed3e14610343578063e87d31b61461036a578063f2fde38b1461038b575b6000600554348115156100f457fe5b33600081815260026020908152604080832080549690950495860190945583518581529351949550919390926000805160206109d183398151915292908290030190a350005b34801561014657600080fd5b5061014f6103ac565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610189578181015183820152602001610171565b50505050905090810190601f1680156101b65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101d057600080fd5b506101e8600160a060020a03600435166024356103e3565b604080519115158252519081900360200190f35b34801561020857600080fd5b50610211610449565b60408051918252519081900360200190f35b34801561022f57600080fd5b506101e8600160a060020a036004358116906024351660443561047b565b34801561025957600080fd5b506102116105e2565b34801561026e57600080fd5b506102116105ea565b34801561028357600080fd5b5061028c6105ef565b005b34801561029a57600080fd5b50610211600160a060020a036004351661065f565b3480156102bb57600080fd5b5061028c600160a060020a036004358116906024351660443561067a565b3480156102e557600080fd5b506102ee61075e565b60408051600160a060020a039092168252519081900360200190f35b34801561031657600080fd5b5061014f61076d565b34801561032b57600080fd5b506101e8600160a060020a03600435166024356107a4565b34801561034f57600080fd5b50610211600160a060020a036004358116906024351661085e565b34801561037657600080fd5b5061028c600160a060020a0360043516610889565b34801561039757600080fd5b5061028c600160a060020a03600435166108ff565b60408051808201909152600881527f4e6574736f6c6172000000000000000000000000000000000000000000000000602082015281565b336000818152600460209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b6000805260026020527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b546001540390565b6000600160a060020a038316151561049257600080fd5b600160a060020a0384166000908152600260205260409020548211156104b757600080fd5b600160a060020a03841660009081526004602090815260408083203384529091529020548211156104e757600080fd5b600160a060020a038416600090815260026020526040902054610510908363ffffffff6109a816565b600160a060020a038086166000908152600260205260408082209390935590851681522054610545908363ffffffff6109ba16565b600160a060020a038085166000908152600260209081526040808320949094559187168152600482528281203382529091522054610589908363ffffffff6109a816565b600160a060020a03808616600081815260046020908152604080832033845282529182902094909455805186815290519287169391926000805160206109d1833981519152929181900390910190a35060019392505050565b63b2d05e0081565b600081565b60008054600160a060020a0316331461060757600080fd5b600054600160a060020a0316331461061e57600080fd5b5060008054604051303192600160a060020a03909216916108fc841502918491818181858888f1935050505015801561065b573d6000803e3d6000fd5b5050565b600160a060020a031660009081526002602052604090205490565b600054600160a060020a0316331461069157600080fd5b600160a060020a0382166000908152600260205260409020548110156106b657600080fd5b600160a060020a0382166000908152600260205260409020546106df908263ffffffff6109ba16565b600160a060020a038084166000908152600260205260408082209390935590851681522054610714908263ffffffff6109ba16565b600160a060020a0380851660008181526002602090815260409182902094909455805185815290519193928616926000805160206109d183398151915292918290030190a3505050565b600054600160a060020a031681565b60408051808201909152600381527f4e534e0000000000000000000000000000000000000000000000000000000000602082015281565b336000908152600260205260408120548211156107c057600080fd5b336000908152600260205260409020546107e0908363ffffffff6109a816565b3360009081526002602052604080822092909255600160a060020a03851681522054610812908363ffffffff6109ba16565b600160a060020a0384166000818152600260209081526040918290209390935580518581529051919233926000805160206109d18339815191529281900390910190a350600192915050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205490565b600054600160a060020a031633146108a057600080fd5b600054600160a060020a031633146108b757600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216918217905563b2d05e00600181905560009182526002602052604090912055565b600054600160a060020a0316331461091657600080fd5b600054600160a060020a0316331461092d57600080fd5b600160a060020a038116151561094257600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360008054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff1990911617905550565b6000828211156109b457fe5b50900390565b6000828201838110156109c957fe5b93925050505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820cb3f8235b5394e40e84be231d29ebb99d142fcf5d50babffef04b013ffe4c4f60029"
}