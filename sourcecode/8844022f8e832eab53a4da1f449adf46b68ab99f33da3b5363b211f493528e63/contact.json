{
  "address": "0xf9adaa80d05b27d26079d18b499c0e6f00d85b3c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenERC20",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-10\n*/\n\npragma solidity ^0.4.21;\n\n\nlibrary SafeMath {\n\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a / b;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract TokenERC20 is Ownable {\n\n    using SafeMath for uint256;\n\n    string public constant name       = \"Biological Chain\";\n    string public constant symbol     = \"BICC\";\n    uint32 public constant decimals   = 18;\n    uint256 public totalSupply;\n    uint256 public currentTotalSupply = 0;\n    uint256 public airdrop;\n    uint256 public startBalance;\n    uint256 public buyPrice ;\n\n    mapping(address => bool) touched;\n    mapping(address => uint256) balances;\n    mapping(address => mapping (address => uint256)) internal allowed;\n    mapping(address => bool) public frozenAccount;\n\n    event FrozenFunds(address target, bool frozen);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Burn(address indexed burner, uint256 value);\n\n    constructor(\n        uint256 initialSupply\n    ) public {\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balances[msg.sender] = totalSupply;                // Give the creator all initial tokens\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return totalSupply;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n\n        if( !touched[msg.sender] && currentTotalSupply < totalSupply && currentTotalSupply < airdrop ){\n            balances[msg.sender] = balances[msg.sender].add( startBalance );\n            touched[msg.sender] = true;\n            currentTotalSupply = currentTotalSupply.add( startBalance );\n        }\n\n        require(!frozenAccount[msg.sender]);\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        require(!frozenAccount[_from]);\n\n        if( !touched[_from] && currentTotalSupply < totalSupply && currentTotalSupply < airdrop  ){\n            touched[_from] = true;\n            balances[_from] = balances[_from].add( startBalance );\n            currentTotalSupply = currentTotalSupply.add( startBalance );\n        }\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function getBalance(address _a) internal constant returns(uint256) {\n        if( currentTotalSupply < totalSupply ){\n            if( touched[_a] )\n                return balances[_a];\n            else\n                return balances[_a].add( startBalance );\n        } else {\n            return balances[_a];\n        }\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return getBalance( _owner );\n    }\n\n\n    function burn(uint256 _value)  public  {\n        _burn(msg.sender, _value);\n    }\n\n    function _burn(address _who, uint256 _value) internal {\n        require(_value <= balances[_who]);\n        balances[_who] = balances[_who].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        emit Burn(_who, _value);\n        emit Transfer(_who, address(0), _value);\n    }\n\n\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n        balances[target] = balances[target].add(mintedAmount);\n        totalSupply = totalSupply.add(mintedAmount);\n        emit Transfer(0, this, mintedAmount);\n        emit Transfer(this, target, mintedAmount);\n    }\n\n\n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n\n\n    function setPrices(uint256 newBuyPrice) onlyOwner public {\n        buyPrice = newBuyPrice;\n    }\n\n    function () payable public {\n        uint amount = msg.value * buyPrice;\n        balances[msg.sender] = balances[msg.sender].add(amount);\n        balances[owner] = balances[owner].sub(amount);\n        emit Transfer(owner, msg.sender, amount);\n    }\n\n\n    function selfdestructs() payable  public onlyOwner {\n        selfdestruct(owner);\n    }\n\n\n    function getEth(uint num) payable public onlyOwner {\n        owner.transfer(num);\n    }\n\n\n    function modifyairdrop(uint256 _airdrop,uint256 _startBalance ) public onlyOwner {\n        airdrop = _airdrop;\n        startBalance = _startBalance;\n    }\n}",
  "bytecode": "6080604052600060025534801561001557600080fd5b50604051602080611115833981016040908152905160008054600160a060020a031916339081178255670de0b6b3a76400009092026001819055918152600760205291909120556110aa8061006b6000396000f3006080604052600436106101485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146101ee578063095ea7b31461027857806318160ddd146102b057806323b872dd146102d75780632bb9ffef14610301578063313ce567146103165780633884d63514610344578063410b1da81461035957806342966c681461036e5780634ed0efd114610388578063661884631461039057806370a08231146103b457806379c65068146103d55780638620410b146103f95780638da5cb5b1461040e5780638e3073a61461043f57806395d89b411461044a578063a3201daa1461045f578063a9059cbb14610477578063b414d4b61461049b578063d73dd623146104bc578063dd62ed3e146104e0578063e0c012ff14610507578063e724529c14610522578063f2fde38b14610548575b600554336000908152600760205260409020543490910290610170908263ffffffff61056916565b33600090815260076020526040808220929092558054600160a060020a0316815220546101a3908263ffffffff61057c16565b60008054600160a060020a039081168252600760209081526040808420949094559154835185815293513394919092169260008051602061105f83398151915292918290030190a350005b3480156101fa57600080fd5b5061020361058e565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561023d578181015183820152602001610225565b50505050905090810190601f16801561026a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561028457600080fd5b5061029c600160a060020a03600435166024356105c5565b604080519115158252519081900360200190f35b3480156102bc57600080fd5b506102c561062b565b60408051918252519081900360200190f35b3480156102e357600080fd5b5061029c600160a060020a0360043581169060243516604435610631565b34801561030d57600080fd5b506102c5610871565b34801561032257600080fd5b5061032b610877565b6040805163ffffffff9092168252519081900360200190f35b34801561035057600080fd5b506102c561087c565b34801561036557600080fd5b506102c5610882565b34801561037a57600080fd5b50610386600435610888565b005b610386610895565b34801561039c57600080fd5b5061029c600160a060020a03600435166024356108ba565b3480156103c057600080fd5b506102c5600160a060020a03600435166109aa565b3480156103e157600080fd5b50610386600160a060020a03600435166024356109bd565b34801561040557600080fd5b506102c5610a84565b34801561041a57600080fd5b50610423610a8a565b60408051600160a060020a039092168252519081900360200190f35b610386600435610a99565b34801561045657600080fd5b50610203610aed565b34801561046b57600080fd5b50610386600435610b24565b34801561048357600080fd5b5061029c600160a060020a0360043516602435610b40565b3480156104a757600080fd5b5061029c600160a060020a0360043516610cc6565b3480156104c857600080fd5b5061029c600160a060020a0360043516602435610cdb565b3480156104ec57600080fd5b506102c5600160a060020a0360043581169060243516610d74565b34801561051357600080fd5b50610386600435602435610d9f565b34801561052e57600080fd5b50610386600160a060020a03600435166024351515610dc1565b34801561055457600080fd5b50610386600160a060020a0360043516610e3c565b8181018281101561057657fe5b92915050565b60008282111561058857fe5b50900390565b60408051808201909152601081527f42696f6c6f676963616c20436861696e00000000000000000000000000000000602082015281565b336000818152600860209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60015490565b6000600160a060020a038316151561064857600080fd5b600160a060020a03841660009081526007602052604090205482111561066d57600080fd5b600160a060020a038416600090815260086020908152604080832033845290915290205482111561069d57600080fd5b600160a060020a03841660009081526009602052604090205460ff16156106c357600080fd5b600160a060020a03841660009081526006602052604090205460ff161580156106ef5750600154600254105b80156106fe5750600354600254105b1561077657600160a060020a0384166000908152600660209081526040808320805460ff191660011790556004546007909252909120546107449163ffffffff61056916565b600160a060020a0385166000908152600760205260409020556004546002546107729163ffffffff61056916565b6002555b600160a060020a03841660009081526007602052604090205461079f908363ffffffff61057c16565b600160a060020a0380861660009081526007602052604080822093909355908516815220546107d4908363ffffffff61056916565b600160a060020a038085166000908152600760209081526040808320949094559187168152600882528281203382529091522054610818908363ffffffff61057c16565b600160a060020a038086166000818152600860209081526040808320338452825291829020949094558051868152905192871693919260008051602061105f833981519152929181900390910190a35060019392505050565b60045481565b601281565b60035481565b60025481565b6108923382610ed0565b50565b600054600160a060020a031633146108ac57600080fd5b600054600160a060020a0316ff5b336000908152600860209081526040808320600160a060020a03861684529091528120548083111561090f57336000908152600860209081526040808320600160a060020a0388168452909152812055610944565b61091f818463ffffffff61057c16565b336000908152600860209081526040808320600160a060020a03891684529091529020555b336000818152600860209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b60006109b582610fbf565b90505b919050565b600054600160a060020a031633146109d457600080fd5b600160a060020a0382166000908152600760205260409020546109fd908263ffffffff61056916565b600160a060020a038316600090815260076020526040902055600154610a29908263ffffffff61056916565b600155604080518281529051309160009160008051602061105f8339815191529181900360200190a3604080518281529051600160a060020a03841691309160008051602061105f8339815191529181900360200190a35050565b60055481565b600054600160a060020a031681565b600054600160a060020a03163314610ab057600080fd5b60008054604051600160a060020a039091169183156108fc02918491818181858888f19350505050158015610ae9573d6000803e3d6000fd5b5050565b60408051808201909152600481527f4249434300000000000000000000000000000000000000000000000000000000602082015281565b600054600160a060020a03163314610b3b57600080fd5b600555565b6000600160a060020a0383161515610b5757600080fd5b3360009081526006602052604090205460ff16158015610b7a5750600154600254105b8015610b895750600354600254105b15610bef5760045433600090815260076020526040902054610bb09163ffffffff61056916565b336000908152600760209081526040808320939093556006905220805460ff19166001179055600454600254610beb9163ffffffff61056916565b6002555b3360009081526009602052604090205460ff1615610c0c57600080fd5b33600090815260076020526040902054821115610c2857600080fd5b33600090815260076020526040902054610c48908363ffffffff61057c16565b3360009081526007602052604080822092909255600160a060020a03851681522054610c7a908363ffffffff61056916565b600160a060020a03841660008181526007602090815260409182902093909355805185815290519192339260008051602061105f8339815191529281900390910190a350600192915050565b60096020526000908152604090205460ff1681565b336000908152600860209081526040808320600160a060020a0386168452909152812054610d0f908363ffffffff61056916565b336000818152600860209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260086020908152604080832093909416825291909152205490565b600054600160a060020a03163314610db657600080fd5b600391909155600455565b600054600160a060020a03163314610dd857600080fd5b600160a060020a038216600081815260096020908152604091829020805460ff191685151590811790915582519384529083015280517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a59281900390910190a15050565b600054600160a060020a03163314610e5357600080fd5b600160a060020a0381161515610e6857600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a038216600090815260076020526040902054811115610ef557600080fd5b600160a060020a038216600090815260076020526040902054610f1e908263ffffffff61057c16565b600160a060020a038316600090815260076020526040902055600154610f4a908263ffffffff61057c16565b600155604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a0385169160008051602061105f8339815191529181900360200190a35050565b6000600154600254101561103f57600160a060020a03821660009081526006602052604090205460ff161561100d5750600160a060020a0381166000908152600760205260409020546109b8565b600454600160a060020a0383166000908152600760205260409020546110389163ffffffff61056916565b90506109b8565b50600160a060020a0381166000908152600760205260409020546109b85600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820576d08a051a6aec5c923d0cb3be16336cc9da858a5adb4282a8cacbfa9a6d92300290000000000000000000000000000000000000000000000000000000001c9c380",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000001c9c380"
}