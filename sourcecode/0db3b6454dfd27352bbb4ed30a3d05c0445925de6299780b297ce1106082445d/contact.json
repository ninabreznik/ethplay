{
  "address": "0xd58cec570a126ddd8d2234852e7957c2b46c2b50",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SinoeCoin",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-21\n*/\n\npragma solidity ^0.4.20;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) public constant returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public constant returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract SinoeCoin is ERC20 {\n    \n    using SafeMath for uint256; \n    address owner;\n\n    mapping (address => uint256) balances; \n    mapping (address => mapping (address => uint256)) allowed;\n\n    string public constant name = \"SinoeCoin\";\n    string public constant symbol = \"Sinoe\";\n    uint public constant decimals = 18;\n    uint256 _Rate = 10 ** decimals;\n    \n    uint256 public totalSupply = 100000000000 * _Rate;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    event Burn(address indexed burner, uint256 val);\n    event Increase(address indexed increaser,uint256 val);\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyPayloadSize(uint size) {\n        assert(msg.data.length >= size + 4);\n        _;\n    }\n\n     function SinoeCoin () public {\n        owner = msg.sender;\n        balances[owner] = totalSupply;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        if (newOwner != address(0) && newOwner != owner){//1 && newOwner != owner2) {\n             owner = newOwner;   \n        }\n    }\n\n    function balanceOf(address _owner) constant public returns (uint256) {\n\t    return balances[_owner];\n    }\n\n    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\n\n        require(_to != address(0));\n        require(_amount <= balances[msg.sender]);\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n  \n    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\n\n        require(_to != address(0));\n        require(_amount <= balances[_from]);\n        require(_amount <= allowed[_from][msg.sender]);\n        \n        balances[_from] = balances[_from].sub(_amount);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Transfer(_from, _to, _amount);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant public returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    function burn(uint256 _value) onlyOwner public {\n        if(_value<_Rate){\n            _value = _value*_Rate;\n        }\n        require(_value <= balances[msg.sender]);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Increase(msg.sender, _value);\n    }\n\n    function increase(uint256 _value) onlyOwner public {\n        if(_value < _Rate){\n            _value = _value*_Rate;\n        }\n        balances[msg.sender] = balances[msg.sender].add(_value);\n        totalSupply = totalSupply.add(_value);\n        Increase(msg.sender, _value);\n    }\n}",
  "bytecode": "6080604052670de0b6b3a76400006004556c01431e0fae6d7217caa000000060055534801561002d57600080fd5b5060018054600160a060020a031916331790819055600554600160a060020a03919091166000908152600260205260409020556108838061006f6000396000f3006080604052600436106100b95763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100be578063095ea7b31461014857806318160ddd1461018057806323b872dd146101a757806330f3f0db146101d1578063313ce567146101eb57806342966c681461020057806370a082311461021857806395d89b4114610239578063a9059cbb1461024e578063dd62ed3e14610272578063f2fde38b14610299575b600080fd5b3480156100ca57600080fd5b506100d36102ba565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561010d5781810151838201526020016100f5565b50505050905090810190601f16801561013a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015457600080fd5b5061016c600160a060020a03600435166024356102f1565b604080519115158252519081900360200190f35b34801561018c57600080fd5b50610195610399565b60408051918252519081900360200190f35b3480156101b357600080fd5b5061016c600160a060020a036004358116906024351660443561039f565b3480156101dd57600080fd5b506101e9600435610524565b005b3480156101f757600080fd5b506101956105c9565b34801561020c57600080fd5b506101e96004356105ce565b34801561022457600080fd5b50610195600160a060020a0360043516610653565b34801561024557600080fd5b506100d361066e565b34801561025a57600080fd5b5061016c600160a060020a03600435166024356106a5565b34801561027e57600080fd5b50610195600160a060020a0360043581169060243516610796565b3480156102a557600080fd5b506101e9600160a060020a03600435166107c1565b60408051808201909152600981527f53696e6f65436f696e0000000000000000000000000000000000000000000000602082015281565b600081158015906103245750336000908152600360209081526040808320600160a060020a038716845290915290205415155b1561033157506000610393565b336000818152600360209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b60055481565b6000606060643610156103ae57fe5b600160a060020a03841615156103c357600080fd5b600160a060020a0385166000908152600260205260409020548311156103e857600080fd5b600160a060020a038516600090815260036020908152604080832033845290915290205483111561041857600080fd5b600160a060020a038516600090815260026020526040902054610441908463ffffffff61082f16565b600160a060020a038616600090815260026020908152604080832093909355600381528282203383529052205461047e908463ffffffff61082f16565b600160a060020a0380871660009081526003602090815260408083203384528252808320949094559187168152600290915220546104c2908463ffffffff61084116565b600160a060020a0380861660008181526002602090815260409182902094909455805187815290519193928916927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3506001949350505050565b600154600160a060020a0316331461053b57600080fd5b60045481101561054a57600454025b3360009081526002602052604090205461056a908263ffffffff61084116565b3360009081526002602052604090205560055461058d908263ffffffff61084116565b60055560408051828152905133917f12007e72f6f07d1e7dd33219d5187184ceba138e79459b6c241cec9a9399fe0c919081900360200190a250565b601281565b600154600160a060020a031633146105e557600080fd5b6004548110156105f457600454025b3360009081526002602052604090205481111561061057600080fd5b33600090815260026020526040902054610630908263ffffffff61082f16565b3360009081526002602052604090205560055461058d908263ffffffff61082f16565b600160a060020a031660009081526002602052604090205490565b60408051808201909152600581527f53696e6f65000000000000000000000000000000000000000000000000000000602082015281565b6000604060443610156106b457fe5b600160a060020a03841615156106c957600080fd5b336000908152600260205260409020548311156106e557600080fd5b33600090815260026020526040902054610705908463ffffffff61082f16565b3360009081526002602052604080822092909255600160a060020a03861681522054610737908463ffffffff61084116565b600160a060020a0385166000818152600260209081526040918290209390935580518681529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35060019392505050565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b600154600160a060020a031633146107d857600080fd5b600160a060020a038116158015906107fe5750600154600160a060020a03828116911614155b1561082c576001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b60008282111561083b57fe5b50900390565b60008282018381101561085057fe5b93925050505600a165627a7a7230582089e85a900246f8fe0df22698405bf6af44bee65fa5be3f69dde4ab2a7b9c5fab0029"
}