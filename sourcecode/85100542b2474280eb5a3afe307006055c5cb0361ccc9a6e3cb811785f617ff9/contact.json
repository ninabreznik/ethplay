{
  "address": "0xc5b177940534c2e03eb7d9e624ed25cdc8a97739",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Room1",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-31\n*/\n\npragma solidity ^0.4.24;\n\n// File: contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: contracts/token/ERC20Cutted.sol\n\ncontract ERC20Cutted {\n\n  function balanceOf(address who) public view returns (uint256);\n\n  function transfer(address to, uint256 value) public returns (bool);\n\n}\n\n// File: contracts/Room1.sol\n\ncontract Room1 is Ownable {\n\n  event TicketPurchased(address lotAddr, uint lotIndex, uint ticketNumber, address player, uint ticketPrice);\n\n  event TicketWon(address lotAddr, uint lotIndex, uint ticketNumber, address player, uint win);\n\n  event ParametersUpdated(uint lotIndex, address feeWallet, uint feePercent, uint starts, uint duration, uint interval, uint ticketPrice);\n\n  using SafeMath for uint;\n\n  uint diffRangeCounter = 0;\n\n  uint public LIMIT = 100;\n\n  uint public RANGE = 100000;\n\n  uint public PERCENT_RATE = 100;\n\n  enum LotState { Accepting, Processing, Rewarding, Finished }\n\n  uint public interval;\n\n  uint public duration;\n\n  uint public starts;\n\n  uint public ticketPrice;\n\n  uint public feePercent;\n\n  uint public lotProcessIndex;\n\n  uint public lastChangesIndex;\n\n  uint public MIN_DISPERSION_K = 10;\n\n  address public feeWallet;\n\n  mapping (address => uint) public summaryPayed;\n\n  struct Ticket {\n    address owner;\n    uint number;\n    uint win;\n  }\n\n  struct Lot {\n    LotState state;\n    uint processIndex;\n    uint summaryNumbers;\n    uint summaryInvested;\n    uint rewardBase;\n    uint ticketsCount;\n    uint playersCount;\n    mapping (uint => Ticket) tickets;\n    mapping (address => uint) invested;\n    address[] players;\n  }\n\n  mapping(uint => Lot) public lots;\n\n  modifier started() {\n    require(now >= starts, \"Not started yet!\");\n    _;\n  }\n\n  modifier notContract(address to) {\n    uint codeLength;\n    assembly {\n      codeLength := extcodesize(to)\n    }\n    require(codeLength == 0, \"Contracts not supported!\");\n    _;\n  }\n\n  function updateParameters(address newFeeWallet, uint newFeePercent, uint newStarts, uint newDuration, uint newInterval, uint newTicketPrice) public onlyOwner {\n    require(newStarts > now, \"Lottery can only be started in the future!\");\n    uint curLotIndex = getCurLotIndex();\n    Lot storage lot = lots[curLotIndex];\n    require(lot.state == LotState.Finished, \"Contract parameters can only be changed if the current lottery is finished!\");\n    lastChangesIndex = curLotIndex.add(1);\n    feeWallet = newFeeWallet;\n    feePercent = newFeePercent;\n    starts = newStarts;\n    duration = newDuration;\n    interval = newInterval;\n    ticketPrice = newTicketPrice;\n    emit ParametersUpdated(lastChangesIndex, newFeeWallet, newFeePercent, newStarts, newDuration, newInterval, newTicketPrice);\n  }\n\n  function getLotInvested(uint lotNumber, address player) view public returns(uint) {\n    Lot storage lot = lots[lotNumber];\n    return lot.invested[player];\n  }\n\n  function getTicketInfo(uint lotNumber, uint ticketNumber) view public returns(address, uint, uint) {\n    Ticket storage ticket = lots[lotNumber].tickets[ticketNumber];\n    return (ticket.owner, ticket.number, ticket.win);\n  }\n\n  function getCurLotIndex() view public returns(uint) {\n    if (starts > now) {\n      return lastChangesIndex;\n    }\n    uint passed = now.sub(starts);\n    if(passed == 0)\n      return 0;\n    return passed.div(interval.add(duration)).add(lastChangesIndex);\n  }\n\n  constructor() public {\n    starts = 1554026400;\n    ticketPrice = 10000000000000000;\n    feePercent = 10;\n    feeWallet = 0x53f22b8f420317e7cdcbf2a180a12534286cb578;\n    interval = 1800;\n    uint fullDuration = 3600;\n    duration = fullDuration.sub(interval);\n    emit ParametersUpdated(0, feeWallet, feePercent, starts, duration, interval, ticketPrice);\n  }\n\n  function setFeeWallet(address newFeeWallet) public onlyOwner {\n    feeWallet = newFeeWallet;\n  }\n\n  function getNotPayableTime(uint lotIndex) view public returns(uint) {\n    return starts.add(interval.add(duration).mul(lotIndex.add(1).sub(lastChangesIndex))).sub(interval);\n  }\n\n  function () public payable notContract(msg.sender) started {\n    require(RANGE.mul(RANGE).mul(address(this).balance.add(msg.value)) > 0, \"Balance limit error!\");\n    require(msg.value >= ticketPrice, \"Not enough funds to buy ticket!\");\n    uint curLotIndex = getCurLotIndex();\n    require(now < getNotPayableTime(curLotIndex), \"Game finished!\");\n    Lot storage lot = lots[curLotIndex];\n    require(RANGE.mul(RANGE) > lot.ticketsCount, \"Ticket count limit exceeded!\");\n\n    uint numTicketsToBuy = msg.value.div(ticketPrice);\n\n    uint toInvest = ticketPrice.mul(numTicketsToBuy);\n\n    if(lot.invested[msg.sender] == 0) {\n      lot.players.push(msg.sender);\n      lot.playersCount = lot.playersCount.add(1);\n    }\n\n    lot.invested[msg.sender] = lot.invested[msg.sender].add(toInvest);\n\n    for(uint i = 0; i < numTicketsToBuy; i++) {\n      lot.tickets[lot.ticketsCount].owner = msg.sender;\n      emit TicketPurchased(address(this), curLotIndex, lot.ticketsCount, msg.sender, ticketPrice);\n      lot.ticketsCount = lot.ticketsCount.add(1);\n    }\n\n    lot.summaryInvested = lot.summaryInvested.add(toInvest);\n\n    uint refund = msg.value.sub(toInvest);\n    msg.sender.transfer(refund);\n  }\n\n  function canUpdate() view public returns(bool) {\n    if (starts > now) {\n      return false;\n    }\n    uint curLotIndex = getCurLotIndex();\n    Lot storage lot = lots[curLotIndex];\n    return lot.state == LotState.Finished;\n  }\n\n  function isProcessNeeds() view public returns(bool) {\n    if (starts > now) {\n      return false;\n    }\n    uint curLotIndex = getCurLotIndex();\n    Lot storage lot = lots[curLotIndex];\n    return lotProcessIndex < curLotIndex || (now >= getNotPayableTime(lotProcessIndex) && lot.state != LotState.Finished);\n  }\n\n  function pow(uint number, uint count) private returns(uint) {\n    uint result = number;\n    if (count == 0) return 1;\n    for (uint i = 1; i < count; i++) {\n      result = result.mul(number);\n    }\n    return result;\n  }\n\n  function prepareToRewardProcess() public onlyOwner started {\n    Lot storage lot = lots[lotProcessIndex];\n\n    if(lot.state == LotState.Accepting) {\n      require(now >= getNotPayableTime(lotProcessIndex), \"Lottery stakes accepting time not finished!\");\n      lot.state = LotState.Processing;\n    }\n\n    require(lot.state == LotState.Processing || lot.state == LotState.Rewarding, \"State should be Processing or Rewarding!\");\n\n    uint index = lot.processIndex;\n\n    uint limit = lot.ticketsCount - index;\n    if(limit > LIMIT) {\n      limit = LIMIT;\n    }\n\n    limit = limit.add(index);\n\n    uint number;\n\n    if(lot.state == LotState.Processing) {\n\n      number = block.number;\n\n      uint dispersionK = MIN_DISPERSION_K;\n\n      uint diffRangeLimit = 0;\n\n      if(limit > 0) {\n        diffRangeLimit = limit.div(dispersionK);\n        if(diffRangeLimit == 0) {\n          diffRangeLimit = 1;\n        }\n      }\n\n      diffRangeCounter = 0;\n\n      uint enlargedRange = RANGE.mul(dispersionK);\n\n      bool enlargedWinnerGenerated = false;\n\n      bool enlargedWinnerPrepared = false;\n\n      uint enlargedWinnerIndex = 0;\n\n      for(; index < limit; index++) {\n\n        number = pow(uint(keccak256(abi.encodePacked(number)))%RANGE, 5);\n        lot.tickets[index].number = number;\n        lot.summaryNumbers = lot.summaryNumbers.add(number);\n\n        if(!enlargedWinnerGenerated) {\n          enlargedWinnerIndex = uint(keccak256(abi.encodePacked(number)))%enlargedRange;\n          enlargedWinnerGenerated = true;\n        } if(!enlargedWinnerPrepared && diffRangeCounter == enlargedWinnerIndex) {\n          number = pow(uint(keccak256(abi.encodePacked(number)))%enlargedRange, 5);\n          lot.tickets[index].number = lot.tickets[index].number.add(number);\n          lot.summaryNumbers = lot.summaryNumbers.add(number);\n          enlargedWinnerGenerated = true;\n        }\n\n        if(diffRangeCounter == diffRangeLimit) {\n          diffRangeCounter = 0;\n          enlargedWinnerPrepared = false;\n          enlargedWinnerGenerated = false;\n        }\n\n        diffRangeCounter++;\n      }\n\n      if(index == lot.ticketsCount) {\n        uint fee = lot.summaryInvested.mul(feePercent).div(PERCENT_RATE);\n        feeWallet.transfer(fee);\n        lot.rewardBase = lot.summaryInvested.sub(fee);\n        lot.state = LotState.Rewarding;\n        index = 0;\n      }\n\n    } else {\n\n      for(; index < limit; index++) {\n        Ticket storage ticket = lot.tickets[index];\n        number = ticket.number;\n        if(number > 0) {\n          ticket.win = lot.rewardBase.mul(number).div(lot.summaryNumbers);\n          if(ticket.win > 0) {\n            ticket.owner.transfer(ticket.win);\n            summaryPayed[ticket.owner] = summaryPayed[ticket.owner].add(ticket.win);\n            emit TicketWon(address(this), lotProcessIndex, index, ticket.owner, ticket.win);\n          }\n        }\n      }\n\n      if(index == lot.ticketsCount) {\n        lot.state = LotState.Finished;\n        lotProcessIndex = lotProcessIndex.add(1);\n      }\n    }\n\n    lot.processIndex = index;\n  }\n\n  function retrieveTokens(address tokenAddr, address to) public onlyOwner {\n    ERC20Cutted token = ERC20Cutted(tokenAddr);\n    token.transfer(to, token.balanceOf(address(this)));\n  }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFeeWallet\",\"type\":\"address\"},{\"name\":\"newFeePercent\",\"type\":\"uint256\"},{\"name\":\"newStarts\",\"type\":\"uint256\"},{\"name\":\"newDuration\",\"type\":\"uint256\"},{\"name\":\"newInterval\",\"type\":\"uint256\"},{\"name\":\"newTicketPrice\",\"type\":\"uint256\"}],\"name\":\"updateParameters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lotProcessIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_DISPERSION_K\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lotNumber\",\"type\":\"uint256\"},{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getLotInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isProcessNeeds\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERCENT_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastChangesIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"prepareToRewardProcess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurLotIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RANGE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddr\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lotNumber\",\"type\":\"uint256\"},{\"name\":\"ticketNumber\",\"type\":\"uint256\"}],\"name\":\"getTicketInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFeeWallet\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"starts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interval\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canUpdate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lotIndex\",\"type\":\"uint256\"}],\"name\":\"getNotPayableTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"summaryPayed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lots\",\"outputs\":[{\"name\":\"state\",\"type\":\"uint8\"},{\"name\":\"processIndex\",\"type\":\"uint256\"},{\"name\":\"summaryNumbers\",\"type\":\"uint256\"},{\"name\":\"summaryInvested\",\"type\":\"uint256\"},{\"name\":\"rewardBase\",\"type\":\"uint256\"},{\"name\":\"ticketsCount\",\"type\":\"uint256\"},{\"name\":\"playersCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lotAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"lotIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ticketNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ticketPrice\",\"type\":\"uint256\"}],\"name\":\"TicketPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lotAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"lotIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ticketNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"win\",\"type\":\"uint256\"}],\"name\":\"TicketWon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lotIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"feeWallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"feePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"starts\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"interval\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ticketPrice\",\"type\":\"uint256\"}],\"name\":\"ParametersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "608060405260006001556064600255620186a06003556064600455600a600c5534801561002b57600080fd5b5060008054600160a060020a03199081163317909155635ca08fa0600755662386f26fc10000600855600a600955600d80549091167353f22b8f420317e7cdcbf2a180a12534286cb5781790556107086005819055610e109061009c908290640100000000610a5461012182021704565b6006819055600d546009546007546005546008546040805160008152600160a060020a039096166020870152858101949094526060850192909252608084019490945260a083019390935260c082019290925290517f4f1ed37e8bec74eabed7383a3af2d57b948f5a7b8c84af70a90bc8bd535725f79181900360e00190a150610133565b60008282111561012d57fe5b50900390565b6118e9806101426000396000f30060806040526004361061015e5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630fb5a6b481146105d15780631209b1f6146105f85780631676503e1461060d5780631733ebec1461063f5780632b4f3350146106545780632b7ec7fe146106695780632c2aecf51461068d5780632e6f3e4a146106b65780633e9a326e146106cb578063441478c3146106e057806360b7b3f6146106f5578063621f85f91461070a5780636341ca0b1461071f5780636b0d032914610746578063715018a6146107895780637fd6f15c1461079e5780638da5cb5b146107b357806390d49b9d146107e457806391ca3bb514610805578063947a36fb1461081a578063a17a26851461082f578063af8214ef14610844578063ca64ad8914610859578063e786f19414610871578063f1648e8414610892578063f25f4b56146108f8578063f2fde38b1461090d575b6000808080808033803b80156101be576040805160e560020a62461bcd02815260206004820152601860248201527f436f6e747261637473206e6f7420737570706f72746564210000000000000000604482015290519081900360640190fd5b600754421015610218576040805160e560020a62461bcd02815260206004820152601060248201527f4e6f742073746172746564207965742100000000000000000000000000000000604482015290519081900360640190fd5b600061024d61022e30313463ffffffff61092e16565b600354610241908063ffffffff61094116565b9063ffffffff61094116565b116102a2576040805160e560020a62461bcd02815260206004820152601460248201527f42616c616e6365206c696d6974206572726f7221000000000000000000000000604482015290519081900360640190fd5b6008543410156102fc576040805160e560020a62461bcd02815260206004820152601f60248201527f4e6f7420656e6f7567682066756e647320746f20627579207469636b65742100604482015290519081900360640190fd5b61030461096a565b975061030f886109e7565b4210610365576040805160e560020a62461bcd02815260206004820152600e60248201527f47616d652066696e697368656421000000000000000000000000000000000000604482015290519081900360640190fd5b6000888152600f6020526040902060058101546003549198509061038f908063ffffffff61094116565b116103e4576040805160e560020a62461bcd02815260206004820152601c60248201527f5469636b657420636f756e74206c696d69742065786365656465642100000000604482015290519081900360640190fd5b6008546103f890349063ffffffff610a3f16565b60085490965061040e908763ffffffff61094116565b336000908152600889016020526040902054909550151561047857600987018054600181810183556000928352602090922001805473ffffffffffffffffffffffffffffffffffffffff19163317905560068801546104729163ffffffff61092e16565b60068801555b33600090815260088801602052604090205461049a908663ffffffff61092e16565b33600090815260088901602052604081209190915593505b8584101561056c576005870180546000908152600789016020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff191633908117909155925460085483513081529283018d90528284019190915260608201939093526080810192909252517f3c21b9b2d77366bb49d2e24d368d043e15a59329cb5f15eccdc99ac5ffaa2b6f9181900360a00190a1600587015461055c90600163ffffffff61092e16565b60058801556001909301926104b2565b6003870154610581908663ffffffff61092e16565b6003880155610596348663ffffffff610a5416565b604051909350339084156108fc029085906000818181858888f193505050501580156105c6573d6000803e3d6000fd5b505050505050505050005b3480156105dd57600080fd5b506105e6610a66565b60408051918252519081900360200190f35b34801561060457600080fd5b506105e6610a6c565b34801561061957600080fd5b5061063d600160a060020a036004351660243560443560643560843560a435610a72565b005b34801561064b57600080fd5b506105e6610c98565b34801561066057600080fd5b506105e6610c9e565b34801561067557600080fd5b506105e6600435600160a060020a0360243516610ca4565b34801561069957600080fd5b506106a2610cd0565b604080519115158252519081900360200190f35b3480156106c257600080fd5b506105e6610d40565b3480156106d757600080fd5b506105e6610d46565b3480156106ec57600080fd5b5061063d610d4c565b34801561070157600080fd5b506105e661096a565b34801561071657600080fd5b506105e66114c8565b34801561072b57600080fd5b5061063d600160a060020a03600435811690602435166114ce565b34801561075257600080fd5b50610761600435602435611617565b60408051600160a060020a039094168452602084019290925282820152519081900360600190f35b34801561079557600080fd5b5061063d61164f565b3480156107aa57600080fd5b506105e66116bb565b3480156107bf57600080fd5b506107c86116c1565b60408051600160a060020a039092168252519081900360200190f35b3480156107f057600080fd5b5061063d600160a060020a03600435166116d0565b34801561081157600080fd5b506105e6611716565b34801561082657600080fd5b506105e661171c565b34801561083b57600080fd5b506106a2611722565b34801561085057600080fd5b506105e661176f565b34801561086557600080fd5b506105e66004356109e7565b34801561087d57600080fd5b506105e6600160a060020a0360043516611775565b34801561089e57600080fd5b506108aa600435611787565b604051808860038111156108ba57fe5b60ff16815260200187815260200186815260200185815260200184815260200183815260200182815260200197505050505050505060405180910390f35b34801561090457600080fd5b506107c86117c8565b34801561091957600080fd5b5061063d600160a060020a03600435166117d7565b8181018281101561093b57fe5b92915050565b60008215156109525750600061093b565b5081810281838281151561096257fe5b041461093b57fe5b60008042600754111561098157600b5491506109e3565b60075461099590429063ffffffff610a5416565b90508015156109a757600091506109e3565b6109e0600b546109d46109c760065460055461092e90919063ffffffff16565b849063ffffffff610a3f16565b9063ffffffff61092e16565b91505b5090565b600061093b600554610a0f610a30610a1b600b54610a0f60018961092e90919063ffffffff16565b9063ffffffff610a5416565b6006546005546102419163ffffffff61092e16565b6007549063ffffffff61092e16565b60008183811515610a4c57fe5b049392505050565b600082821115610a6057fe5b50900390565b60065481565b60085481565b600080548190600160a060020a03163314610a8c57600080fd5b428611610b09576040805160e560020a62461bcd02815260206004820152602a60248201527f4c6f74746572792063616e206f6e6c79206265207374617274656420696e207460448201527f6865206675747572652100000000000000000000000000000000000000000000606482015290519081900360840190fd5b610b1161096a565b6000818152600f6020526040902090925090506003815460ff166003811115610b3657fe5b14610bd7576040805160e560020a62461bcd02815260206004820152604b60248201527f436f6e747261637420706172616d65746572732063616e206f6e6c792062652060448201527f6368616e676564206966207468652063757272656e74206c6f7474657279206960648201527f732066696e697368656421000000000000000000000000000000000000000000608482015290519081900360a40190fd5b610be882600163ffffffff61092e16565b600b819055600d8054600160a060020a038b1673ffffffffffffffffffffffffffffffffffffffff19909116811790915560098990556007889055600687905560058690556008859055604080519283526020830191909152818101899052606082018890526080820187905260a0820186905260c08201859052517f4f1ed37e8bec74eabed7383a3af2d57b948f5a7b8c84af70a90bc8bd535725f79181900360e00190a15050505050505050565b600a5481565b600c5481565b6000918252600f60209081526040808420600160a060020a039390931684526008909201905290205490565b6000806000426007541115610ce85760009250610d3b565b610cf061096a565b6000818152600f60205260409020600a549193509150821180610d385750610d19600a546109e7565b4210158015610d3857506003815460ff166003811115610d3557fe5b14155b92505b505090565b60045481565b600b5481565b6000806000806000806000806000806000806000809054906101000a9004600160a060020a0316600160a060020a031633600160a060020a0316141515610d9257600080fd5b600754421015610dec576040805160e560020a62461bcd02815260206004820152601060248201527f4e6f742073746172746564207965742100000000000000000000000000000000604482015290519081900360640190fd5b600a546000908152600f602052604081209c508c5460ff166003811115610e0f57fe5b1415610ea957610e20600a546109e7565b421015610e9d576040805160e560020a62461bcd02815260206004820152602b60248201527f4c6f7474657279207374616b657320616363657074696e672074696d65206e6f60448201527f742066696e697368656421000000000000000000000000000000000000000000606482015290519081900360840190fd5b8b5460ff19166001178c555b60018c5460ff166003811115610ebb57fe5b1480610ed6575060028c5460ff166003811115610ed457fe5b145b1515610f52576040805160e560020a62461bcd02815260206004820152602860248201527f53746174652073686f756c642062652050726f63657373696e67206f7220526560448201527f77617264696e6721000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b8b600101549a508a8c600501540399506002548a1115610f725760025499505b610f828a8c63ffffffff61092e16565b995060018c5460ff166003811115610f9657fe5b14156112e457439850600c5497506000965060008a1115610fcf57610fc18a8963ffffffff610a3f16565b9650861515610fcf57600196505b6000600155600354610fe7908963ffffffff61094116565b95506000945060009350600092505b898b1015611242576110916003548a604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b602083106110535780518252601f199092019160209182019101611034565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209250505081151561108957fe5b0660056117fa565b60008c815260078e016020526040902060010181905560028d01549099506110bf908a63ffffffff61092e16565b60028d0155841515611159578589604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b6020831061111b5780518252601f1990920191602091820191016110fc565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209250505081151561115157fe5b069250600194505b83158015611168575082600154145b15611219576111bf868a60405160200180828152602001915050604051602081830303815290604052604051808280519060200190808383602083106110535780518252601f199092019160209182019101611034565b60008c815260078e0160205260409020600101549099506111e6908a63ffffffff61092e16565b60008c815260078e01602052604090206001015560028c015461120f908a63ffffffff61092e16565b60028d0155600194505b866001541415611230576000600181905594508493505b60018054810181559a909a0199610ff6565b8b600501548b14156112df5761127960045461126d6009548f6003015461094190919063ffffffff16565b9063ffffffff610a3f16565b600d54604051919350600160a060020a03169083156108fc029084906000818181858888f193505050501580156112b4573d6000803e3d6000fd5b5060038c01546112ca908363ffffffff610a5416565b60048d01558b5460ff19166002178c5560009a505b6114b3565b898b101561148a575060008a815260078c0160205260408120600181015499509089111561147f5761132b8c6002015461126d8b8f6004015461094190919063ffffffff16565b600282018190556000101561147f5780546002820154604051600160a060020a039092169181156108fc0291906000818181858888f19350505050158015611377573d6000803e3d6000fd5b5060028101548154600160a060020a03166000908152600e60205260409020546113a69163ffffffff61092e16565b600e60008360000160009054906101000a9004600160a060020a0316600160a060020a0316600160a060020a03168152602001908152602001600020819055507fa3b883347f8ae33f4bf41b16a8498e68063825e96e5f5f1fa0c9a09322226ab130600a548d8460000160009054906101000a9004600160a060020a031685600201546040518086600160a060020a0316600160a060020a0316815260200185815260200184815260200183600160a060020a0316600160a060020a031681526020018281526020019550505050505060405180910390a15b6001909a01996112e4565b8b600501548b14156114b3578b5460ff19166003178c55600a546114af90600161092e565b600a555b50505050600190970195909555505050505050565b60035481565b60008054600160a060020a031633146114e657600080fd5b50604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290518391600160a060020a0383169163a9059cbb91859184916370a082319160248083019260209291908290030181600087803b15801561155457600080fd5b505af1158015611568573d6000803e3d6000fd5b505050506040513d602081101561157e57600080fd5b5051604080517c010000000000000000000000000000000000000000000000000000000063ffffffff8616028152600160a060020a03909316600484015260248301919091525160448083019260209291908290030181600087803b1580156115e657600080fd5b505af11580156115fa573d6000803e3d6000fd5b505050506040513d602081101561161057600080fd5b5050505050565b6000918252600f6020908152604080842092845260079092019052902080546001820154600290920154600160a060020a0390911692565b600054600160a060020a0316331461166657600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b60095481565b600054600160a060020a031681565b600054600160a060020a031633146116e757600080fd5b600d805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60075481565b60055481565b600080600042600754111561173a5760009250610d3b565b61174261096a565b6000818152600f6020526040902090925090506003815460ff16600381111561176757fe5b149250505090565b60025481565b600e6020526000908152604090205481565b600f60205260009081526040902080546001820154600283015460038401546004850154600586015460069096015460ff9095169593949293919290919087565b600d54600160a060020a031681565b600054600160a060020a031633146117ee57600080fd5b6117f781611840565b50565b6000828183151561180e5760019250611838565b5060015b838110156118345761182a828663ffffffff61094116565b9150600101611812565b8192505b505092915050565b600160a060020a038116151561185557600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a72305820ef00f3d8e7b11a3c31eff40e7e6f73f1511ebd2871c5917223a4fe82308fa8b40029"
}