{
  "address": "0x19e3d07550f8761ab72f2f698df705f75b8ca9bd",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BaconCoin",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-06\n*/\n\npragma solidity ^0.4.25;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and indicate which core-team in charge\n * to implementation of utility functions or upgrade contract.\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n    constructor() public\n    {\n       owner = msg.sender;\n    }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    uint256 _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval (address _spender, uint _addedValue) public\n    returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue) public\n    returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n}\n\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is StandardToken {\n\n    event Burn(address indexed burner, uint256 value);\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public {\n        require(_value > 0);\n        require(_value <= balances[msg.sender]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        emit Burn(burner, _value);\n    }\n}\n\ncontract BaconCoin is BurnableToken, Ownable {\n\n    string public constant name = \"BaconCoin\";\n    string public constant symbol = \"BAK\";\n    uint public constant decimals = 8;\n    uint256 public constant initialSupply = 2200000000 * (10 ** uint256(decimals));\n\n     // use Nonce for stop replay-attack\n    struct Wallet {\n        uint256 balance;\n        mapping(address => bool) authed;   \n        uint64 seedNonce;\n        uint64 withdrawNonce;\n    }\n\n    address[] public admins;\n\n    mapping(bytes32 => Wallet) private wallets;\n    mapping(address => bool) private isAdmin;\n\n    uint256 private agentBalance;\n\n    modifier onlyAdmin {\n        require(isAdmin[msg.sender]);\n        _;\n    }\n\n    modifier onlyRootAdmin {\n        require(msg.sender == admins[0]);\n        _;\n    }\n\n    event Auth(\n        bytes32 indexed walletID,\n        address indexed agent\n    );\n\n    event Withdraw(\n        bytes32 indexed walletID,\n        uint256 indexed nonce,\n        uint256 indexed value,\n        address recipient\n    );\n    event Deposit(\n        bytes32 indexed walletID,\n        address indexed sender,\n        uint256 indexed value\n    );\n\n    event Seed(\n        bytes32 indexed walletID,\n        uint256 indexed nonce,\n        uint256 indexed value\n    );\n\n    event Gain(\n        bytes32 indexed walletID,\n        uint256 indexed requestID,\n        uint256 indexed value\n    );\n\n    constructor() public\n    {\n        totalSupply = initialSupply;\n        balances[msg.sender] = initialSupply; \n\n        admins.push(msg.sender);\n        isAdmin[msg.sender] = true;\n    }\n\n    function auth(\n        bytes32[] walletIDs,\n        bytes32[] nameIDs,\n        address[] agents,\n        uint8[] v, bytes32[] r, bytes32[] s) onlyAdmin public\n    {\n        require(\n            walletIDs.length == nameIDs.length &&\n            walletIDs.length == agents.length &&\n            walletIDs.length == v.length &&\n            walletIDs.length == r.length &&\n            walletIDs.length == s.length\n        );\n\n        for (uint i = 0; i < walletIDs.length; i++) {\n            bytes32 walletID = walletIDs[i];\n            address agent = agents[i];\n\n            address signer = getMessageSigner(\n                getAuthDigest(walletID, agent), v[i], r[i], s[i]\n            );\n\n            Wallet storage wallet = wallets[walletID];\n\n            if (wallet.authed[signer] || walletID == getWalletDigest(nameIDs[i], signer)) {\n                wallet.authed[agent] = true;\n\n                emit Auth(walletID, agent);\n            }\n        }\n    }\n\n    function deposit( bytes32 walletID) payable public\n    {\n        wallets[walletID].balance += msg.value;\n\n        emit Deposit(walletID, msg.sender, msg.value);\n    }\n\n    function withdraw(\n        bytes32[] walletIDs,\n        address[] receivers,\n        uint256[] values,\n        uint64[] nonces,\n        uint8[] v, bytes32[] r, bytes32[] s) onlyAdmin public\n    {\n        require(\n            walletIDs.length == receivers.length &&\n            walletIDs.length == values.length &&\n            walletIDs.length == nonces.length &&\n            walletIDs.length == v.length &&\n            walletIDs.length == r.length &&\n            walletIDs.length == s.length\n        );\n\n        for (uint i = 0; i < walletIDs.length; i++) {\n            bytes32 walletID = walletIDs[i];\n            address receiver = receivers[i];\n            uint256 value = values[i];\n            uint64 nonce = nonces[i];\n\n            address signer = getMessageSigner(\n                getWithdrawDigest(walletID, receiver, value, nonce), v[i], r[i], s[i]\n            );\n\n            Wallet storage wallet = wallets[walletID];\n\n            if (\n                wallet.withdrawNonce < nonce &&\n                wallet.balance >= value &&\n                wallet.authed[signer] &&\n                receiver.send(value)\n            ) {\n                wallet.withdrawNonce = nonce;\n                wallet.balance -= value;\n\n                emit Withdraw(walletID, nonce, value, receiver);\n            }\n        }\n    }\n\n\n\n    function seed(\n        bytes32[] walletIDs,\n        uint256[] values,\n        uint64[] nonces,\n        uint8[] v, bytes32[] r, bytes32[] s) onlyAdmin public\n    {\n        require(\n            walletIDs.length == values.length &&\n            walletIDs.length == nonces.length &&\n            walletIDs.length == v.length &&\n            walletIDs.length == r.length &&\n            walletIDs.length == s.length\n        );\n\n        uint256 addition = 0;\n\n        for (uint i = 0; i < walletIDs.length; i++) {\n            bytes32 walletID = walletIDs[i];\n            uint256 value = values[i];\n            uint64 nonce = nonces[i];\n\n            address signer = getMessageSigner(\n                getSeedDigest(walletID, value, nonce), v[i], r[i], s[i]\n            );\n\n            Wallet storage wallet = wallets[walletID];\n\n            if (\n                wallet.seedNonce < nonce &&\n                wallet.balance >= value &&\n                wallet.authed[signer]\n            ) {\n                wallet.seedNonce = nonce;\n                wallet.balance -= value;\n\n                emit Seed(walletID, nonce, value);\n\n                addition += value;\n            }\n        }\n\n        agentBalance += addition;\n    }\n\n\n    function gain(\n        bytes32[] walletIDs,\n        uint256[] recordIDs,\n        uint256[] values) onlyAdmin public\n    {\n        require(\n            walletIDs.length == recordIDs.length &&\n            walletIDs.length == values.length\n        );\n\n        uint256 remaining = agentBalance;\n\n        for (uint i = 0; i < walletIDs.length; i++) {\n            bytes32 walletID = walletIDs[i];\n            uint256 value = values[i];\n\n            require(value <= remaining);\n\n            wallets[walletID].balance += value;\n            remaining -= value;\n\n            emit Gain(walletID, recordIDs[i], value);\n        }\n\n        agentBalance = remaining;\n    }\n\n    function getMessageSigner(\n        bytes32 message,\n        uint8 v, bytes32 r, bytes32 s) public pure returns(address)\n    {\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\n        bytes32 prefixedMessage = keccak256(\n            abi.encodePacked(prefix, message)\n        );\n        return ecrecover(prefixedMessage, v, r, s);\n    }\n\n    function getNameDigest(\n        string myname) public pure returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(myname));\n    }\n\n    function getWalletDigest(\n        bytes32 myname,\n        address root) public pure returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(\n            myname, root\n        ));\n    }\n\n    function getAuthDigest(\n        bytes32 walletID,\n        address agent) public pure returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(\n            walletID, agent\n        ));\n    }\n\n    function getSeedDigest(\n        bytes32 walletID,\n        uint256 value,\n        uint64 nonce) public pure returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(\n            walletID, value, nonce\n        ));\n    }\n\n    function getWithdrawDigest(\n        bytes32 walletID,\n        address receiver,\n        uint256 value,\n        uint64 nonce) public pure returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(\n            walletID, receiver, value, nonce\n        ));\n    }\n\n    function getSeedNonce(\n        bytes32 walletID) public view returns (uint256)\n    {\n        return wallets[walletID].seedNonce + 1;\n    }\n\n    function getWithdrawNonce(\n        bytes32 walletID) public view returns (uint256)\n    {\n        return wallets[walletID].withdrawNonce + 1;\n    }\n\n    function getAuthStatus(\n        bytes32 walletID,\n        address member) public view returns (bool)\n    {\n        return wallets[walletID].authed[member];\n    }\n\n    function getBalance(\n        bytes32 walletID) public view returns (uint256)\n    {\n        return wallets[walletID].balance;\n    }\n\n    function getagentBalance() public view returns (uint256)\n    {\n      return agentBalance;\n    }\n\n    function removeAdmin(\n        address oldAdmin) onlyRootAdmin public\n    {\n        require(isAdmin[oldAdmin] && admins[0] != oldAdmin);\n\n        bool found = false;\n        for (uint i = 1; i < admins.length - 1; i++) {\n            if (!found && admins[i] == oldAdmin) {\n                found = true;\n            }\n            if (found) {\n                admins[i] = admins[i + 1];\n            }\n        }\n\n        admins.length--;\n        isAdmin[oldAdmin] = false;\n    }\n\n    function changeRootAdmin(\n        address newRootAdmin) onlyRootAdmin public\n    {\n        if (isAdmin[newRootAdmin] && admins[0] != newRootAdmin) {\n            removeAdmin(newRootAdmin);\n        }\n        admins[0] = newRootAdmin;\n        isAdmin[newRootAdmin] = true;\n    }\n\n    function addAdmin(\n        address newAdmin) onlyRootAdmin public\n    {\n        require(!isAdmin[newAdmin]);\n\n        isAdmin[newAdmin] = true;\n        admins.push(newAdmin);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506008600a0a6383215600026000819055506008600a0a638321560002600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060043390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506001600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550613ad58061017e6000396000f3006080604052600436106101b7576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146101bc578063095ea7b31461024c57806314bfd6d0146102b15780631785f53c1461031e57806318160ddd1461036157806323b872dd1461038c5780632bfd91d414610411578063313ce567146104ab578063378dc3dc146104d657806342966c6814610501578063490b3b221461052e5780634ca5ec7b146105995780634eb933bf1461068557806362502fe71461087d578063661884631461090257806366eb463f146109675780636e7c1c2b146109aa5780637048027514610a3557806370a0823114610a785780638da5cb5b14610acf5780638e73946114610b2657806395d89b4114610b6b5780639dc4ca4214610bfb578063a506fa7114610c68578063a8a42d9c14610cd5578063a9059cbb14610e8a578063b214faa514610eef578063b4383aa814610f13578063b795327814610f58578063d73dd62314610f83578063dd62ed3e14610fe8578063de9b33f91461105f578063e0f38d74146110a4578063eb8965851461110d578063f2fde38b146112c2575b600080fd5b3480156101c857600080fd5b506101d1611305565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102115780820151818401526020810190506101f6565b50505050905090810190601f16801561023e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561025857600080fd5b50610297600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061133e565b604051808215151515815260200191505060405180910390f35b3480156102bd57600080fd5b506102dc60048036038101908080359060200190929190505050611430565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561032a57600080fd5b5061035f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061146e565b005b34801561036d57600080fd5b5061037661175f565b6040518082815260200191505060405180910390f35b34801561039857600080fd5b506103f7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611765565b604051808215151515815260200191505060405180910390f35b34801561041d57600080fd5b506104696004803603810190808035600019169060200190929190803560ff16906020019092919080356000191690602001909291908035600019169060200190929190505050611a51565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104b757600080fd5b506104c0611bfd565b6040518082815260200191505060405180910390f35b3480156104e257600080fd5b506104eb611c02565b6040518082815260200191505060405180910390f35b34801561050d57600080fd5b5061052c60048036038101908080359060200190929190505050611c10565b005b34801561053a57600080fd5b5061057b600480360381019080803560001916906020019092919080359060200190929190803567ffffffffffffffff169060200190929190505050611d73565b60405180826000191660001916815260200191505060405180910390f35b3480156105a557600080fd5b50610683600480360381019080803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050611e47565b005b34801561069157600080fd5b5061087bfb0565b005b34801561088957600080fd5b506108e4600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506122fc565b60405180826000191660001916815260200191505060405180910390f35b34801561090e57600080fd5b5061094d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506123d4565b604051808215151515815260200191505060405180910390f35b34801561097357600080fd5b506109a8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612665565b005b3480156109b657600080fd5b50610a176004803603810190808035600019169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803567ffffffffffffffff16906020019092919050505061285b565b60405180826000191660001916815260200191505060405180910390f35b348015610a4157600080fd5b50610a76600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612973565b005b348015610a8457600080fd5b50610ab9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612b01565b6040518082815260200191505060405180910390f35b348015610adb57600080fd5b50610ae4612b4a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610b3257600080fd5b50610b556004803603810190808035600019169060200190929190505050612b70565b6040518082815260200191505060405180910390f35b348015610b7757600080fd5b50610b80612b98565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610bc0578082015181840152602081019050610ba5565b50505050905090810190601f168015610bed5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610c0757600080fd5b50610c4a6004803603810190808035600019169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612bd1565b60405180826000191660001916815260200191505060405180910390f35b348015610c7457600080fd5b50610cb76004803603810190808035600019169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612ca8565b60405180826000191660001916815260200191505060405180910390f35b348015610ce157600080fd5b50610ed7f565b005b348015610e9657600080fd5b50610ed5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613047565b604051808215151515815260200191505060405180910390f35b610f11600480360381019080803560001916906020019092919050505061321d565b005b348015610f1f57600080fd5b50610f426004803603810190808035600019169060200190929190505050613295565b6040518082815260200191505060405180910390f35b348015610f6457600080fd5b50610f6d6132de565b6040518082815260200191505060405180910390f35b348015610f8f57600080fd5b50610fce600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506132e8565b604051808215151515815260200191505060405180910390f35b348015610ff457600080fd5b50611049600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506134e4565b6040518082815260200191505060405180910390f35b34801561106b57600080fd5b5061108e600480360381019080803560001916906020019092919050505061356b565b6040518082815260200191505060405180910390f35b3480156110b057600080fd5b506110f36004803603810190808035600019169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506135b4565b604051808215151515815260200191505060405180910390f35b34801561111957600080fd5b506112cb005b3480156112ce57600080fd5b50611303600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506138c9565b005b6040805190810160405280600981526020017f4261636f6e436f696e000000000000000000000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60048181548110151561143f57fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806004600081548110151561148157fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114e557600080fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680156115a457508273ffffffffffffffffffffffffffffffffffffffff166004600081548110151561156057fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b15156115af57600080fd5b60009150600190505b6001600480549050038110156116ec578115801561163a57508273ffffffffffffffffffffffffffffffffffffffff166004828154811015156115f757fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b1561164457600191505b81156116df5760046001820181548110151561165c57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660048281548110151561169657fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b80806001019150506115b8565b60048054809190600190036117019190613a58565b506000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b60005481565b600080600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156117a457600080fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905061187583600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613a2190919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061190a83600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613a3a90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506119608382613a2190919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b6000606060006040805190810160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250915081876040516020018083805190602001908083835b602083101515611ac95780518252602082019150602081019050602083039250611aa4565b6001836020036101000a0380198251168184511680821785525050505050509050018260001916600019168152602001925050506040516020818303038152906040526040518082805190602001908083835b602083101515611b415780518252602082019150602081019050602083039250611b1c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050600181878787604051600081526020016040526040518085600019166000191681526020018460ff1660ff1681526020018360001916600019168152602001826000191660001916815260200194505050505060206040516020810390808403906000865af1158015611be7573d6000803e3d6000fd5b5050506020604051035192505050949350505050565b600881565b6008600a0a63832156000281565b60008082111515611c2057600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515611c6e57600080fd5b339050611cc382600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613a2190919063ffffffff16565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611d1b82600054613a2190919063ffffffff16565b6000819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a25050565b60008383836040516020018084600019166000191681526020018381526020018267ffffffffffffffff1667ffffffffffffffff16780100000000000000000000000000000000000000000000000002815260080193505050506040516020818303038152906040526040518082805190602001908083835b602083101515611e115780518252602082019150602081019050602083039250611dec565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902090509392505050565b600080600080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515611ea557600080fd5b85518751148015611eb7575084518751145b1515611ec257600080fd5b6007549350600092505b8651831015611fa0578683815181101515611ee357fe5b9060200190602002015191508483815181101515611efd57fe5b906020019060200201519050838111151515611f1857600080fd5b80600560008460001916600019168152602001908152602001600020600001600082825401925050819055508084039350808684815181101515611f5857fe5b9060200190602002015183600019167feb9534e89e7e19b926ae3a0f82c4f7bb0f13ce44f3085b05093116949cc46dc560405160405180910390a48280600101935050611ecc565b8360078190555050505050505050565b6000806000806000806000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561201357600080fd5b8c518e5114801561202557508b518e51145b801561203257508a518e51145b801561203f575089518e51145b801561204c575088518e51145b8015612059575087518e51145b151561206457600080fd5b600096505b8d518710156122ec578d8781518110151561208057fe5b9060200190602002015195508c8781518110151561209a57fe5b9060200190602002015194508b878151811015156120b457fe5b9060200190602002015193508a878151811015156120ce57fe5b9060200190602002015192506121366120e98787878761285b565b8b898151811015156120f757fe5b906020019060200201518b8a81518110151561210f57fe5b906020019060200201518b8b81518110151561212757fe5b90602001906020020151611a51565b915060056000876000191660001916815260200190815260200160002090508267ffffffffffffffff168160020160089054906101000a900467ffffffffffffffff1667ffffffffffffffff16108015612194575083816000015410155b80156121eb57508060010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b801561222857508473ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051600060405180830381858888f193505050505b156122df57828160020160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550838160000160008282540392505081905550838367ffffffffffffffff1687600019167f7b840614242a6f8bab9f3a654f6ce3aa212f8a4e3f3d3a9845a91bb891394cbc88604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a45b8680600101975050612069565b5050505050505050505050505050565b6000816040516020018082805190602001908083835b6020831015156123375780518252602082019150602081019050602083039250612312565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b6020831015156123a0578051825260208201915060208101905060208303925061237b565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050919050565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808311156124e5576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612579565b6124f88382613a2190919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6004600081548110151561267557fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156126d957600080fd5b600660008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16801561279857508073ffffffffffffffffffffffffffffffffffffffff166004600081548110151561275457fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b156127a7576127a68161146e565b5b80600460008154811015156127b857fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000848484846040516020018085600019166000191681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018381526020018267ffffffffffffffff1667ffffffffffffffff1678010000000000000000000000000000000000000000000000000281526008019450505050506040516020818303038152906040526040518082805190602001908083835b60208310151561293c5780518252602082019150602081019050602083039250612917565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050949350505050565b6004600081548110151561298357fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156129e757600080fd5b600660008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515612a4057600080fd5b6001600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060048190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600560008360001916600019168152602001908152602001600020600001549050919050565b6040805190810160405280600381526020017f42414b000000000000000000000000000000000000000000000000000000000081525081565b600082826040516020018083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401925050506040516020818303038152906040526040518082805190602001908083835b602083101515612c735780518252602082019150602081019050602083039250612c4e565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020905092915050565b600082826040516020018083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401925050506040516020818303038152906040526040518082805190602001908083835b602083101515612d4a5780518252602082019150602081019050602083039250612d25565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020905092915050565b6000806000806000806000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515612de257600080fd5b8b518d51148015612df457508a518d51145b8015612e01575089518d51145b8015612e0e575088518d51145b8015612e1b575087518d51145b1515612e2657600080fd5b60009650600095505b8c51861015613028578c86815181101515612e4657fe5b9060200190602002015194508b86815181101515612e6057fe5b9060200190602002015193508a86815181101515612e7a57fe5b906020019060200201519250612ee1612e94868686611d73565b8b88815181101515612ea257fe5b906020019060200201518b89815181101515612eba57fe5b906020019060200201518b8a815181101515612ed257fe5b90602001906020020151611a51565b915060056000866000191660001916815260200190815260200160002090508267ffffffffffffffff168160020160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16108015612f3f575083816000015410155b8015612f9657508060010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1561301b57828160020160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550838160000160008282540392505081905550838367ffffffffffffffff1686600019167f608d105615523a8d055348dd0c5cd2cccbad700f8d37a659af1513f2335b9f6760405160405180910390a483870196505b8580600101965050612e2f565b8660076000828254019250508190555050505050505050505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561308457600080fd5b6130d682600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613a2190919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061316b82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613a3a90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b3460056000836000191660001916815260200190815260200160002060000160008282540192505081905550343373ffffffffffffffffffffffffffffffffffffffff1682600019167f182fa52899142d44ff5c45a6354d3b3e868d5b07db6a65580b39bd321bdaf8ac60405160405180910390a450565b6000600160056000846000191660001916815260200190815260200160002060020160009054906101000a900467ffffffffffffffff160167ffffffffffffffff169050919050565b6000600754905090565b600061337982600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613a3a90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000600160056000846000191660001916815260200190815260200160002060020160089054906101000a900467ffffffffffffffff160167ffffffffffffffff169050919050565b600060056000846000191660001916815260200190815260200160002060010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000806000806000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561368757600080fd5b89518b51148015613699575088518b51145b80156136a6575087518b51145b80156136b3575086518b51145b80156136c0575085518b51145b15156136cb57600080fd5b600094505b8a518510156138bc578a858151811015156136e757fe5b906020019060200201519350888581518110151561370157fe5b90602001906020020151925061376761371a8585612ca8565b898781518110151561372857fe5b90602001906020020151898881518110151561374057fe5b90602001906020020151898981518110151561375857fe5b90602001906020020151611a51565b915060056000856000191660001916815260200190815260200160002090508060010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff168061380757506137fc8a868151811015156137ec57fe5b9060200190602002015183612bd1565b600019168460001916145b156138af5760018160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff1684600019167f6994c57ce6f9a69396e521616ffe1b4b8c07c8072c799a85d471fce246dacd8160405160405180910390a35b84806001019550506136d0565b5050505050505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561392557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561396157600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000828211151515613a2f57fe5b818303905092915050565b6000808284019050838110151515613a4e57fe5b8091505092915050565b815481835581811115613a7f57818360005260206000209182019101613a7e9190613a84565b5b505050565b613aa691905b80821115613aa2576000816000905550600101613a8a565b5090565b905600a165627a7a7230582091d39f5361a8d8cc9a09042b71bb355cad03e18c5544d1cb3ed4ef82d52873950029"
}