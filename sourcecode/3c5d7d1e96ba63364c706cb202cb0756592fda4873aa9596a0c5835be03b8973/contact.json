{
  "address": "0x8c069c70e265a36738753e1707a8999111f655db",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EtherCartel",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-17\n*/\n\npragma solidity ^0.4.18; // solhint-disable-line\n\n\n\ncontract EtherCartel{\n    //uint256 DRUGS_TO_PRODUCE_1KILO=1;\n    uint256 public DRUGS_TO_PRODUCE_1KILO=86400;//for final version should be seconds in a day\n    uint256 public STARTING_KILOS=300;\n    uint256 PSN=10000;\n    uint256 PSNH=5000;\n    bool public initialized=false;\n    address public ceoAddress;\n    mapping (address => uint256) public Kilos;\n    mapping (address => uint256) public claimedDrugs;\n    mapping (address => uint256) public lastCollect;\n    mapping (address => address) public referrals;\n    uint256 public marketDrugs;\n    function DrugDealer() public{\n        ceoAddress=msg.sender;\n    }\n    function collectDrugs(address ref) public{\n        require(initialized);\n        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender){\n            referrals[msg.sender]=ref;\n        }\n        uint256 drugsUsed=getMyDrugs();\n        uint256 newKilo=SafeMath.div(drugsUsed,DRUGS_TO_PRODUCE_1KILO);\n        Kilos[msg.sender]=SafeMath.add(Kilos[msg.sender],newKilo);\n        claimedDrugs[msg.sender]=0;\n        lastCollect[msg.sender]=now;\n        \n        //send referral drugs\n        claimedDrugs[referrals[msg.sender]]=SafeMath.add(claimedDrugs[referrals[msg.sender]],SafeMath.div(drugsUsed,5));\n        \n        //boost market to nerf kilo hoarding\n        marketDrugs=SafeMath.add(marketDrugs,SafeMath.div(drugsUsed,10));\n    }\n    function sellDrugs() public{\n        require(initialized);\n        uint256 hasDrugs=getMyDrugs();\n        uint256 drugValue=calculateDrugSell(hasDrugs);\n        uint256 fee=devFee(drugValue);\n        claimedDrugs[msg.sender]=0;\n        lastCollect[msg.sender]=now;\n        marketDrugs=SafeMath.add(marketDrugs,hasDrugs);\n        ceoAddress.transfer(fee);\n        msg.sender.transfer(SafeMath.sub(drugValue,fee));\n    }\n    function buyDrugs() public payable{\n        require(initialized);\n        uint256 drugsBought=calculateDrugBuy(msg.value,SafeMath.sub(this.balance,msg.value));\n        drugsBought=SafeMath.sub(drugsBought,devFee(drugsBought));\n        ceoAddress.transfer(devFee(msg.value));\n        claimedDrugs[msg.sender]=SafeMath.add(claimedDrugs[msg.sender],drugsBought);\n    }\n    //magic trade balancing algorithm\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n    }\n    function calculateDrugSell(uint256 drugs) public view returns(uint256){\n        return calculateTrade(drugs,marketDrugs,this.balance);\n    }\n    function calculateDrugBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\n        return calculateTrade(eth,contractBalance,marketDrugs);\n    }\n    function calculateDrugBuySimple(uint256 eth) public view returns(uint256){\n        return calculateDrugBuy(eth,this.balance);\n    }\n    function devFee(uint256 amount) public view returns(uint256){\n        return SafeMath.div(SafeMath.mul(amount,4),100);\n    }\n    function seedMarket(uint256 drugs) public payable{\n        require(marketDrugs==0);\n        initialized=true;\n        marketDrugs=drugs;\n    }\n    function getFreeKilo() public{\n        require(initialized);\n        require(Kilos[msg.sender]==0);\n        lastCollect[msg.sender]=now;\n        Kilos[msg.sender]=STARTING_KILOS;\n    }\n    function getBalance() public view returns(uint256){\n        return this.balance;\n    }\n    function getMyKilo() public view returns(uint256){\n        return Kilos[msg.sender];\n    }\n    function getMyDrugs() public view returns(uint256){\n        return SafeMath.add(claimedDrugs[msg.sender],getDrugsSinceLastCollect(msg.sender));\n    }\n    function getDrugsSinceLastCollect(address adr) public view returns(uint256){\n        uint256 secondsPassed=min(DRUGS_TO_PRODUCE_1KILO,SafeMath.sub(now,lastCollect[adr]));\n        return SafeMath.mul(secondsPassed,Kilos[adr]);\n    }\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}",
  "bytecode": "60606040526201518060005561012c6001556127106002556113886003556004805460ff19169055341561003257600080fd5b610a04806100416000396000f30060606040526004361061013d5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630a0f8168811461014257806312065fe014610171578063158ef93e146101965780631ecd9f21146101bd5780631f194b9f146101d6578063229824c4146101eb57806325579702146102075780632bb224801461021d5780633b653755146102335780633bc0461a1461023e5780633e445446146102545780634374356b146102675780634e9077a41461027a57806350dede351461029957806365a707bf146102ac57806388f707a5146102bf5780638d8f95d1146102de5780639ca423b3146102fd5780639fa0f7631461031c578063a44b175614610324578063a5987c9e14610337578063aaff98061461034a578063e1e2ccd214610369578063ebc16c5c1461037c575b600080fd5b341561014d57600080fd5b61015561039b565b604051600160a060020a03909116815260200160405180910390f35b341561017c57600080fd5b6101846103af565b60405190815260200160405180910390f35b34156101a157600080fd5b6101a96103bd565b604051901515815260200160405180910390f35b34156101c857600080fd5b6101846004356024356103c6565b34156101e157600080fd5b6101e96103dc565b005b34156101f657600080fd5b61018460043560243560443561043c565b341561021257600080fd5b610184600435610489565b341561022857600080fd5b6101846004356104a5565b6101e96004356104be565b341561024957600080fd5b6101846004356104dd565b341561025f57600080fd5b6101846104f4565b341561027257600080fd5b6101846104fa565b341561028557600080fd5b610184600160a060020a0360043516610500565b34156102a457600080fd5b610184610512565b34156102b757600080fd5b6101e9610518565b34156102ca57600080fd5b610184600160a060020a0360043516610547565b34156102e957600080fd5b6101e9600160a060020a0360043516610559565b341561030857600080fd5b610155600160a060020a03600435166106cc565b6101e96106e7565b341561032f57600080fd5b6101846107b0565b341561034257600080fd5b6101846107e9565b341561035557600080fd5b610184600160a060020a0360043516610805565b341561037457600080fd5b6101e9610817565b341561038757600080fd5b610184600160a060020a0360043516610901565b6004546101009004600160a060020a031681565b600160a060020a0330163190565b60045460ff1681565b60006103d5838360095461043c565b9392505050565b60045460ff1615156103ed57600080fd5b600160a060020a0333166000908152600560205260409020541561041057600080fd5b600160a060020a0333166000908152600760209081526040808320429055600154600590925290912055565b600061048161044d60025484610954565b61047c6003546104716104766104656002548a610954565b6104716003548c610954565b61098a565b89610999565b610999565b949350505050565b600061049f8230600160a060020a0316316103c6565b92915050565b600061049f8260095430600160a060020a03163161043c565b600954156104cb57600080fd5b6004805460ff19166001179055600955565b600061049f6104ed836004610954565b6064610999565b60015481565b60005481565b60066020526000908152604090205481565b60095481565b6004805474ffffffffffffffffffffffffffffffffffffffff00191661010033600160a060020a031602179055565b60076020526000908152604090205481565b600454600090819060ff16151561056f57600080fd5b600160a060020a03338116600090815260086020526040902054161580156105b25750600160a060020a0333811660008181526008602052604090205490911614155b156105f45733600160a060020a039081166000908152600860205260409020805473ffffffffffffffffffffffffffffffffffffffff19169185169190911790555b6105fc6107b0565b915061060a82600054610999565b600160a060020a033316600090815260056020526040902054909150610630908261098a565b600160a060020a033381166000908152600560208181526040808420959095556006808252858420849055600782528584204290556008825285842054909416835292909252919091205461068a91610471908590610999565b600160a060020a0333811660009081526008602090815260408083205490931682526006905220556009546106c49061047184600a610999565b600955505050565b600860205260009081526040902054600160a060020a031681565b60045460009060ff1615156106fb57600080fd5b6107183461071330600160a060020a031631346109b0565b6103c6565b905061072c81610727836104dd565b6109b0565b6004549091506101009004600160a060020a03166108fc61074c346104dd565b9081150290604051600060405180830381858888f19350505050151561077157600080fd5b600160a060020a033316600090815260066020526040902054610794908261098a565b600160a060020a03331660009081526006602052604090205550565b60006107e46006600033600160a060020a0316600160a060020a031681526020019081526020016000205461047133610901565b905090565b600160a060020a03331660009081526005602052604090205490565b60056020526000908152604090205481565b6004546000908190819060ff16151561082f57600080fd5b6108376107b0565b9250610842836104a5565b915061084d826104dd565b600160a060020a033316600090815260066020908152604080832083905560079091529020429055600954909150610885908461098a565b6009556004546101009004600160a060020a03166108fc82150282604051600060405180830381858888f1935050505015156108c057600080fd5b33600160a060020a03166108fc6108d784846109b0565b9081150290604051600060405180830381858888f1935050505015156108fc57600080fd5b505050565b60008054600160a060020a03831682526007602052604082205482916109319161092c9042906109b0565b6109c2565b600160a060020a0384166000908152600560205260409020549091506103d59082905b6000808315156109675760009150610983565b5082820282848281151561097757fe5b041461097f57fe5b8091505b5092915050565b60008282018381101561097f57fe5b60008082848115156109a757fe5b04949350505050565b6000828211156109bc57fe5b50900390565b60008183106109d157816103d5565b50909190505600a165627a7a72305820633e7d52b7ce7bdf015b999b95a7a503e8af5ab5547aecf366e7413c60fb48290029"
}