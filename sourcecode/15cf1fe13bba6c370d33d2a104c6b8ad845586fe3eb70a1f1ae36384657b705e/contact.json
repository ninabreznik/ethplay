{
  "address": "0xdcaad9fd9a74144d226dbf94ce6162ca9f09ed7e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "StrikersCore",
  "contractName": "StrikersCore",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-09\n*/\n\npragma solidity ^0.4.21;\n\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Basic {\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n  function balanceOf(address _owner) public view returns (uint256 _balance);\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n  function exists(uint256 _tokenId) public view returns (bool _exists);\n\n  function approve(address _to, uint256 _tokenId) public;\n  function getApproved(uint256 _tokenId) public view returns (address _operator);\n\n  function setApprovalForAll(address _operator, bool _approved) public;\n  function isApprovedForAll(address _owner, address _operator) public view returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public;\n}\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\n/// @title An optional contract that allows us to associate metadata to our cards.\n/// @author The CryptoStrikers Team\ncontract StrikersMetadata {\n\n  /// @dev The base url for the API where we fetch the metadata.\n  ///   ex: https://us-central1-cryptostrikers-api.cloudfunctions.net/cards/\n  string public apiUrl;\n\n  constructor(string _apiUrl) public {\n    apiUrl = _apiUrl;\n  }\n\n  /// @dev Returns the API URL for a given token Id.\n  ///   ex: https://us-central1-cryptostrikers-api.cloudfunctions.net/cards/22\n  ///   Right now, this endpoint returns a JSON blob conforming to OpenSea's spec.\n  ///   see: https://docs.opensea.io/docs/2-adding-metadata\n  function tokenURI(uint256 _tokenId) external view returns (string) {\n    string memory _id = uint2str(_tokenId);\n    return strConcat(apiUrl, _id);\n  }\n\n  // String helpers below were taken from Oraclize.\n  // https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.4.sol\n\n  function strConcat(string _a, string _b) internal pure returns (string) {\n    bytes memory _ba = bytes(_a);\n    bytes memory _bb = bytes(_b);\n    string memory ab = new string(_ba.length + _bb.length);\n    bytes memory bab = bytes(ab);\n    uint k = 0;\n    for (uint i = 0; i < _ba.length; i++) bab[k++] = _ba[i];\n    for (i = 0; i < _bb.length; i++) bab[k++] = _bb[i];\n    return string(bab);\n  }\n\n  function uint2str(uint i) internal pure returns (string) {\n    if (i == 0) return \"0\";\n    uint j = i;\n    uint len;\n    while (j != 0) {\n      len++;\n      j /= 10;\n    }\n    bytes memory bstr = new bytes(len);\n    uint k = len - 1;\n    while (i != 0) {\n      bstr[k--] = byte(48 + i % 10);\n      i /= 10;\n    }\n    return string(bstr);\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Enumerable is ERC721Basic {\n  function totalSupply() public view returns (uint256);\n  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256 _tokenId);\n  function tokenByIndex(uint256 _index) public view returns (uint256);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Metadata is ERC721Basic {\n  function name() public view returns (string _name);\n  function symbol() public view returns (string _symbol);\n  function tokenURI(uint256 _tokenId) public view returns (string);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n}\n\n\n\n\n\n\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n *  from ERC721 asset contracts.\n */\ncontract ERC721Receiver {\n  /**\n   * @dev Magic value to be returned upon successful reception of an NFT\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`,\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n   */\n  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\n\n  /**\n   * @notice Handle the receipt of an NFT\n   * @dev The ERC721 smart contract calls this function on the recipient\n   *  after a `safetransfer`. This function MAY throw to revert and reject the\n   *  transfer. This function MUST use 50,000 gas or less. Return of other\n   *  than the magic value MUST result in the transaction being reverted.\n   *  Note: the contract address is always the message sender.\n   * @param _from The sending address\n   * @param _tokenId The NFT identifier which is being transfered\n   * @param _data Additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\n   */\n  function onERC721Received(address _from, uint256 _tokenId, bytes _data) public returns(bytes4);\n}\n\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary AddressUtils {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   *  as the code is not actually created until after the constructor finishes.\n   * @param addr address to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address addr) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    assembly { size := extcodesize(addr) }  // solium-disable-line security/no-inline-assembly\n    return size > 0;\n  }\n\n}\n\n\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721BasicToken is ERC721Basic {\n  using SafeMath for uint256;\n  using AddressUtils for address;\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\n\n  // Mapping from token ID to owner\n  mapping (uint256 => address) internal tokenOwner;\n\n  // Mapping from token ID to approved address\n  mapping (uint256 => address) internal tokenApprovals;\n\n  // Mapping from owner to number of owned token\n  mapping (address => uint256) internal ownedTokensCount;\n\n  // Mapping from owner to operator approvals\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\n\n  /**\n   * @dev Guarantees msg.sender is owner of the given token\n   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n   */\n  modifier onlyOwnerOf(uint256 _tokenId) {\n    require(ownerOf(_tokenId) == msg.sender);\n    _;\n  }\n\n  /**\n   * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\n   * @param _tokenId uint256 ID of the token to validate\n   */\n  modifier canTransfer(uint256 _tokenId) {\n    require(isApprovedOrOwner(msg.sender, _tokenId));\n    _;\n  }\n\n  /**\n   * @dev Gets the balance of the specified address\n   * @param _owner address to query the balance of\n   * @return uint256 representing the amount owned by the passed address\n   */\n  function balanceOf(address _owner) public view returns (uint256) {\n    require(_owner != address(0));\n    return ownedTokensCount[_owner];\n  }\n\n  /**\n   * @dev Gets the owner of the specified token ID\n   * @param _tokenId uint256 ID of the token to query the owner of\n   * @return owner address currently marked as the owner of the given token ID\n   */\n  function ownerOf(uint256 _tokenId) public view returns (address) {\n    address owner = tokenOwner[_tokenId];\n    require(owner != address(0));\n    return owner;\n  }\n\n  /**\n   * @dev Returns whether the specified token exists\n   * @param _tokenId uint256 ID of the token to query the existance of\n   * @return whether the token exists\n   */\n  function exists(uint256 _tokenId) public view returns (bool) {\n    address owner = tokenOwner[_tokenId];\n    return owner != address(0);\n  }\n\n  /**\n   * @dev Approves another address to transfer the given token ID\n   * @dev The zero address indicates there is no approved address.\n   * @dev There can only be one approved address per token at a given time.\n   * @dev Can only be called by the token owner or an approved operator.\n   * @param _to address to be approved for the given token ID\n   * @param _tokenId uint256 ID of the token to be approved\n   */\n  function approve(address _to, uint256 _tokenId) public {\n    address owner = ownerOf(_tokenId);\n    require(_to != owner);\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n    if (getApproved(_tokenId) != address(0) || _to != address(0)) {\n      tokenApprovals[_tokenId] = _to;\n      emit Approval(owner, _to, _tokenId);\n    }\n  }\n\n  /**\n   * @dev Gets the approved address for a token ID, or zero if no address set\n   * @param _tokenId uint256 ID of the token to query the approval of\n   * @return address currently approved for a the given token ID\n   */\n  function getApproved(uint256 _tokenId) public view returns (address) {\n    return tokenApprovals[_tokenId];\n  }\n\n  /**\n   * @dev Sets or unsets the approval of a given operator\n   * @dev An operator is allowed to transfer all tokens of the sender on their behalf\n   * @param _to operator address to set the approval\n   * @param _approved representing the status of the approval to be set\n   */\n  function setApprovalForAll(address _to, bool _approved) public {\n    require(_to != msg.sender);\n    operatorApprovals[msg.sender][_to] = _approved;\n    emit ApprovalForAll(msg.sender, _to, _approved);\n  }\n\n  /**\n   * @dev Tells whether an operator is approved by a given owner\n   * @param _owner owner address which you want to query the approval of\n   * @param _operator operator address which you want to query the approval of\n   * @return bool whether the given operator is approved by the given owner\n   */\n  function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\n    return operatorApprovals[_owner][_operator];\n  }\n\n  /**\n   * @dev Transfers the ownership of a given token ID to another address\n   * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n   * @dev Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function transferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId) {\n    require(_from != address(0));\n    require(_to != address(0));\n\n    clearApproval(_from, _tokenId);\n    removeTokenFrom(_from, _tokenId);\n    addTokenTo(_to, _tokenId);\n\n    emit Transfer(_from, _to, _tokenId);\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * @dev If the target address is a contract, it must implement `onERC721Received`,\n   *  which is called upon a safe transfer, and return the magic value\n   *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\n   *  the transfer is reverted.\n   * @dev Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    public\n    canTransfer(_tokenId)\n  {\n    // solium-disable-next-line arg-overflow\n    safeTransferFrom(_from, _to, _tokenId, \"\");\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * @dev If the target address is a contract, it must implement `onERC721Received`,\n   *  which is called upon a safe transfer, and return the magic value\n   *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\n   *  the transfer is reverted.\n   * @dev Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes data to send along with a safe transfer check\n   */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public\n    canTransfer(_tokenId)\n  {\n    transferFrom(_from, _to, _tokenId);\n    // solium-disable-next-line arg-overflow\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n  }\n\n  /**\n   * @dev Returns whether the given spender can transfer a given token ID\n   * @param _spender address of the spender to query\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @return bool whether the msg.sender is approved for the given token ID,\n   *  is an operator of the owner, or is the owner of the token\n   */\n  function isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool) {\n    address owner = ownerOf(_tokenId);\n    return _spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender);\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * @dev Reverts if the given token ID already exists\n   * @param _to The address that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    require(_to != address(0));\n    addTokenTo(_to, _tokenId);\n    emit Transfer(address(0), _to, _tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * @dev Reverts if the token does not exist\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    clearApproval(_owner, _tokenId);\n    removeTokenFrom(_owner, _tokenId);\n    emit Transfer(_owner, address(0), _tokenId);\n  }\n\n  /**\n   * @dev Internal function to clear current approval of a given token ID\n   * @dev Reverts if the given address is not indeed the owner of the token\n   * @param _owner owner of the token\n   * @param _tokenId uint256 ID of the token to be transferred\n   */\n  function clearApproval(address _owner, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _owner);\n    if (tokenApprovals[_tokenId] != address(0)) {\n      tokenApprovals[_tokenId] = address(0);\n      emit Approval(_owner, address(0), _tokenId);\n    }\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    require(tokenOwner[_tokenId] == address(0));\n    tokenOwner[_tokenId] = _to;\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _from);\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n    tokenOwner[_tokenId] = address(0);\n  }\n\n  /**\n   * @dev Internal function to invoke `onERC721Received` on a target address\n   * @dev The call is not executed if the target address is not a contract\n   * @param _from address representing the previous owner of the given token ID\n   * @param _to target address that will receive the tokens\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes optional data to send along with the call\n   * @return whether the call correctly returned the expected magic value\n   */\n  function checkAndCallSafeTransfer(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    internal\n    returns (bool)\n  {\n    if (!_to.isContract()) {\n      return true;\n    }\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(_from, _tokenId, _data);\n    return (retval == ERC721_RECEIVED);\n  }\n}\n\n\n\n/**\n * @title Full ERC721 Token\n * This implementation includes all the required and some optional functionality of the ERC721 standard\n * Moreover, it includes approve all functionality using operator terminology\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Token is ERC721, ERC721BasicToken {\n  // Token name\n  string internal name_;\n\n  // Token symbol\n  string internal symbol_;\n\n  // Mapping from owner to list of owned token IDs\n  mapping (address => uint256[]) internal ownedTokens;\n\n  // Mapping from token ID to index of the owner tokens list\n  mapping(uint256 => uint256) internal ownedTokensIndex;\n\n  // Array with all token ids, used for enumeration\n  uint256[] internal allTokens;\n\n  // Mapping from token id to position in the allTokens array\n  mapping(uint256 => uint256) internal allTokensIndex;\n\n  // Optional mapping for token URIs\n  mapping(uint256 => string) internal tokenURIs;\n\n  /**\n   * @dev Constructor function\n   */\n  function ERC721Token(string _name, string _symbol) public {\n    name_ = _name;\n    symbol_ = _symbol;\n  }\n\n  /**\n   * @dev Gets the token name\n   * @return string representing the token name\n   */\n  function name() public view returns (string) {\n    return name_;\n  }\n\n  /**\n   * @dev Gets the token symbol\n   * @return string representing the token symbol\n   */\n  function symbol() public view returns (string) {\n    return symbol_;\n  }\n\n  /**\n   * @dev Returns an URI for a given token ID\n   * @dev Throws if the token ID does not exist. May return an empty string.\n   * @param _tokenId uint256 ID of the token to query\n   */\n  function tokenURI(uint256 _tokenId) public view returns (string) {\n    require(exists(_tokenId));\n    return tokenURIs[_tokenId];\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n   * @param _owner address owning the tokens list to be accessed\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n   */\n  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256) {\n    require(_index < balanceOf(_owner));\n    return ownedTokens[_owner][_index];\n  }\n\n  /**\n   * @dev Gets the total amount of tokens stored by the contract\n   * @return uint256 representing the total amount of tokens\n   */\n  function totalSupply() public view returns (uint256) {\n    return allTokens.length;\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of all the tokens in this contract\n   * @dev Reverts if the index is greater or equal to the total number of tokens\n   * @param _index uint256 representing the index to be accessed of the tokens list\n   * @return uint256 token ID at the given index of the tokens list\n   */\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\n    require(_index < totalSupply());\n    return allTokens[_index];\n  }\n\n  /**\n   * @dev Internal function to set the token URI for a given token\n   * @dev Reverts if the token ID does not exist\n   * @param _tokenId uint256 ID of the token to set its URI\n   * @param _uri string URI to assign\n   */\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\n    require(exists(_tokenId));\n    tokenURIs[_tokenId] = _uri;\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    super.addTokenTo(_to, _tokenId);\n    uint256 length = ownedTokens[_to].length;\n    ownedTokens[_to].push(_tokenId);\n    ownedTokensIndex[_tokenId] = length;\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    super.removeTokenFrom(_from, _tokenId);\n\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n\n    ownedTokens[_from][tokenIndex] = lastToken;\n    ownedTokens[_from][lastTokenIndex] = 0;\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n    ownedTokens[_from].length--;\n    ownedTokensIndex[_tokenId] = 0;\n    ownedTokensIndex[lastToken] = tokenIndex;\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * @dev Reverts if the given token ID already exists\n   * @param _to address the beneficiary that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    super._mint(_to, _tokenId);\n\n    allTokensIndex[_tokenId] = allTokens.length;\n    allTokens.push(_tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * @dev Reverts if the token does not exist\n   * @param _owner owner of the token to burn\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    super._burn(_owner, _tokenId);\n\n    // Clear metadata (if any)\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\n      delete tokenURIs[_tokenId];\n    }\n\n    // Reorg all tokens array\n    uint256 tokenIndex = allTokensIndex[_tokenId];\n    uint256 lastTokenIndex = allTokens.length.sub(1);\n    uint256 lastToken = allTokens[lastTokenIndex];\n\n    allTokens[tokenIndex] = lastToken;\n    allTokens[lastTokenIndex] = 0;\n\n    allTokens.length--;\n    allTokensIndex[_tokenId] = 0;\n    allTokensIndex[lastToken] = tokenIndex;\n  }\n\n}\n\n\n\n\n\n\n\n/// @title The contract that manages all the players that appear in our game.\n/// @author The CryptoStrikers Team\ncontract StrikersPlayerList is Ownable {\n  // We only use playerIds in StrikersChecklist.sol (to\n  // indicate which player features on instances of a\n  // given ChecklistItem), and nowhere else in the app.\n  // While it's not explictly necessary for any of our\n  // contracts to know that playerId 0 corresponds to\n  // Lionel Messi, we think that it's nice to have\n  // a canonical source of truth for who the playerIds\n  // actually refer to. Storing strings (player names)\n  // is expensive, so we just use Events to prove that,\n  // at some point, we said a playerId represents a given person.\n\n  /// @dev The event we fire when we add a player.\n  event PlayerAdded(uint8 indexed id, string name);\n\n  /// @dev How many players we've added so far\n  ///   (max 255, though we don't plan on getting close)\n  uint8 public playerCount;\n\n  /// @dev Here we add the players we are launching with on Day 1.\n  ///   Players are loosely ranked by things like FIFA ratings,\n  ///   number of Instagram followers, and opinions of CryptoStrikers\n  ///   team members. Feel free to yell at us on Twitter.\n  constructor() public {\n    addPlayer(\"Lionel Messi\"); // 0\n    addPlayer(\"Cristiano Ronaldo\"); // 1\n    addPlayer(\"Neymar\"); // 2\n    addPlayer(\"Mohamed Salah\"); // 3\n    addPlayer(\"Robert Lewandowski\"); // 4\n    addPlayer(\"Kevin De Bruyne\"); // 5\n    addPlayer(\"Luka Modrić\"); // 6\n    addPlayer(\"Eden Hazard\"); // 7\n    addPlayer(\"Sergio Ramos\"); // 8\n    addPlayer(\"Toni Kroos\"); // 9\n    addPlayer(\"Luis Suárez\"); // 10\n    addPlayer(\"Harry Kane\"); // 11\n    addPlayer(\"Sergio Agüero\"); // 12\n    addPlayer(\"Kylian Mbappé\"); // 13\n    addPlayer(\"Gonzalo Higuaín\"); // 14\n    addPlayer(\"David de Gea\"); // 15\n    addPlayer(\"Antoine Griezmann\"); // 16\n    addPlayer(\"N'Golo Kanté\"); // 17\n    addPlayer(\"Edinson Cavani\"); // 18\n    addPlayer(\"Paul Pogba\"); // 19\n    addPlayer(\"Isco\"); // 20\n    addPlayer(\"Marcelo\"); // 21\n    addPlayer(\"Manuel Neuer\"); // 22\n    addPlayer(\"Dries Mertens\"); // 23\n    addPlayer(\"James Rodríguez\"); // 24\n    addPlayer(\"Paulo Dybala\"); // 25\n    addPlayer(\"Christian Eriksen\"); // 26\n    addPlayer(\"David Silva\"); // 27\n    addPlayer(\"Gabriel Jesus\"); // 28\n    addPlayer(\"Thiago\"); // 29\n    addPlayer(\"Thibaut Courtois\"); // 30\n    addPlayer(\"Philippe Coutinho\"); // 31\n    addPlayer(\"Andrés Iniesta\"); // 32\n    addPlayer(\"Casemiro\"); // 33\n    addPlayer(\"Romelu Lukaku\"); // 34\n    addPlayer(\"Gerard Piqué\"); // 35\n    addPlayer(\"Mats Hummels\"); // 36\n    addPlayer(\"Diego Godín\"); // 37\n    addPlayer(\"Mesut Özil\"); // 38\n    addPlayer(\"Son Heung-min\"); // 39\n    addPlayer(\"Raheem Sterling\"); // 40\n    addPlayer(\"Hugo Lloris\"); // 41\n    addPlayer(\"Radamel Falcao\"); // 42\n    addPlayer(\"Ivan Rakitić\"); // 43\n    addPlayer(\"Leroy Sané\"); // 44\n    addPlayer(\"Roberto Firmino\"); // 45\n    addPlayer(\"Sadio Mané\"); // 46\n    addPlayer(\"Thomas Müller\"); // 47\n    addPlayer(\"Dele Alli\"); // 48\n    addPlayer(\"Keylor Navas\"); // 49\n    addPlayer(\"Thiago Silva\"); // 50\n    addPlayer(\"Raphaël Varane\"); // 51\n    addPlayer(\"Ángel Di María\"); // 52\n    addPlayer(\"Jordi Alba\"); // 53\n    addPlayer(\"Medhi Benatia\"); // 54\n    addPlayer(\"Timo Werner\"); // 55\n    addPlayer(\"Gylfi Sigurðsson\"); // 56\n    addPlayer(\"Nemanja Matić\"); // 57\n    addPlayer(\"Kalidou Koulibaly\"); // 58\n    addPlayer(\"Bernardo Silva\"); // 59\n    addPlayer(\"Vincent Kompany\"); // 60\n    addPlayer(\"João Moutinho\"); // 61\n    addPlayer(\"Toby Alderweireld\"); // 62\n    addPlayer(\"Emil Forsberg\"); // 63\n    addPlayer(\"Mario Mandžukić\"); // 64\n    addPlayer(\"Sergej Milinković-Savić\"); // 65\n    addPlayer(\"Shinji Kagawa\"); // 66\n    addPlayer(\"Granit Xhaka\"); // 67\n    addPlayer(\"Andreas Christensen\"); // 68\n    addPlayer(\"Piotr Zieliński\"); // 69\n    addPlayer(\"Fyodor Smolov\"); // 70\n    addPlayer(\"Xherdan Shaqiri\"); // 71\n    addPlayer(\"Marcus Rashford\"); // 72\n    addPlayer(\"Javier Hernández\"); // 73\n    addPlayer(\"Hirving Lozano\"); // 74\n    addPlayer(\"Hakim Ziyech\"); // 75\n    addPlayer(\"Victor Moses\"); // 76\n    addPlayer(\"Jefferson Farfán\"); // 77\n    addPlayer(\"Mohamed Elneny\"); // 78\n    addPlayer(\"Marcus Berg\"); // 79\n    addPlayer(\"Guillermo Ochoa\"); // 80\n    addPlayer(\"Igor Akinfeev\"); // 81\n    addPlayer(\"Sardar Azmoun\"); // 82\n    addPlayer(\"Christian Cueva\"); // 83\n    addPlayer(\"Wahbi Khazri\"); // 84\n    addPlayer(\"Keisuke Honda\"); // 85\n    addPlayer(\"Tim Cahill\"); // 86\n    addPlayer(\"John Obi Mikel\"); // 87\n    addPlayer(\"Ki Sung-yueng\"); // 88\n    addPlayer(\"Bryan Ruiz\"); // 89\n    addPlayer(\"Maya Yoshida\"); // 90\n    addPlayer(\"Nawaf Al Abed\"); // 91\n    addPlayer(\"Lee Chung-yong\"); // 92\n    addPlayer(\"Gabriel Gómez\"); // 93\n    addPlayer(\"Naïm Sliti\"); // 94\n    addPlayer(\"Reza Ghoochannejhad\"); // 95\n    addPlayer(\"Mile Jedinak\"); // 96\n    addPlayer(\"Mohammad Al-Sahlawi\"); // 97\n    addPlayer(\"Aron Gunnarsson\"); // 98\n    addPlayer(\"Blas Pérez\"); // 99\n    addPlayer(\"Dani Alves\"); // 100\n    addPlayer(\"Zlatan Ibrahimović\"); // 101\n  }\n\n  /// @dev Fires an event, proving that we said a player corresponds to a given ID.\n  /// @param _name The name of the player we are adding.\n  function addPlayer(string _name) public onlyOwner {\n    require(playerCount < 255, \"You've already added the maximum amount of players.\");\n    emit PlayerAdded(playerCount, _name);\n    playerCount++;\n  }\n}\n\n\n/// @title The contract that manages checklist items, sets, and rarity tiers.\n/// @author The CryptoStrikers Team\ncontract StrikersChecklist is StrikersPlayerList {\n  // High level overview of everything going on in this contract:\n  //\n  // ChecklistItem is the parent class to Card and has 3 properties:\n  //  - uint8 checklistId (000 to 255)\n  //  - uint8 playerId (see StrikersPlayerList.sol)\n  //  - RarityTier tier (more info below)\n  //\n  // Two things to note: the checklistId is not explicitly stored\n  // on the checklistItem struct, and it's composed of two parts.\n  // (For the following, assume it is left padded with zeros to reach\n  // three digits, such that checklistId 0 becomes 000)\n  //  - the first digit represents the setId\n  //      * 0 = Originals Set\n  //      * 1 = Iconics Set\n  //      * 2 = Unreleased Set\n  //  - the last two digits represent its index in the appropriate set arary\n  //\n  //  For example, checklist ID 100 would represent fhe first checklist item\n  //  in the iconicChecklistItems array (first digit = 1 = Iconics Set, last two\n  //  digits = 00 = first index of array)\n  //\n  // Because checklistId is represented as a uint8 throughout the app, the highest\n  // value it can take is 255, which means we can't add more than 56 items to our\n  // Unreleased Set's unreleasedChecklistItems array (setId 2). Also, once we've initialized\n  // this contract, it's impossible for us to add more checklist items to the Originals\n  // and Iconics set -- what you see here is what you get.\n  //\n  // Simple enough right?\n\n  /// @dev We initialize this contract with so much data that we have\n  ///   to stage it in 4 different steps, ~33 checklist items at a time.\n  enum DeployStep {\n    WaitingForStepOne,\n    WaitingForStepTwo,\n    WaitingForStepThree,\n    WaitingForStepFour,\n    DoneInitialDeploy\n  }\n\n  /// @dev Enum containing all our rarity tiers, just because\n  ///   it's cleaner dealing with these values than with uint8s.\n  enum RarityTier {\n    IconicReferral,\n    IconicInsert,\n    Diamond,\n    Gold,\n    Silver,\n    Bronze\n  }\n\n  /// @dev A lookup table indicating how limited the cards\n  ///   in each tier are. If this value is 0, it means\n  ///   that cards of this rarity tier are unlimited,\n  ///   which is only the case for the 8 Iconics cards\n  ///   we give away as part of our referral program.\n  uint16[] public tierLimits = [\n    0,    // Iconic - Referral Bonus (uncapped)\n    100,  // Iconic Inserts (\"Card of the Day\")\n    1000, // Diamond\n    1664, // Gold\n    3328, // Silver\n    4352  // Bronze\n  ];\n\n  /// @dev ChecklistItem is essentially the parent class to Card.\n  ///   It represents a given superclass of cards (eg Originals Messi),\n  ///   and then each Card is an instance of this ChecklistItem, with\n  ///   its own serial number, mint date, etc.\n  struct ChecklistItem {\n    uint8 playerId;\n    RarityTier tier;\n  }\n\n  /// @dev The deploy step we're at. Defaults to WaitingForStepOne.\n  DeployStep public deployStep;\n\n  /// @dev Array containing all the Originals checklist items (000 - 099)\n  ChecklistItem[] public originalChecklistItems;\n\n  /// @dev Array containing all the Iconics checklist items (100 - 131)\n  ChecklistItem[] public iconicChecklistItems;\n\n  /// @dev Array containing all the unreleased checklist items (200 - 255 max)\n  ChecklistItem[] public unreleasedChecklistItems;\n\n  /// @dev Internal function to add a checklist item to the Originals set.\n  /// @param _playerId The player represented by this checklist item. (see StrikersPlayerList.sol)\n  /// @param _tier This checklist item's rarity tier. (see Rarity Tier enum and corresponding tierLimits)\n  function _addOriginalChecklistItem(uint8 _playerId, RarityTier _tier) internal {\n    originalChecklistItems.push(ChecklistItem({\n      playerId: _playerId,\n      tier: _tier\n    }));\n  }\n\n  /// @dev Internal function to add a checklist item to the Iconics set.\n  /// @param _playerId The player represented by this checklist item. (see StrikersPlayerList.sol)\n  /// @param _tier This checklist item's rarity tier. (see Rarity Tier enum and corresponding tierLimits)\n  function _addIconicChecklistItem(uint8 _playerId, RarityTier _tier) internal {\n    iconicChecklistItems.push(ChecklistItem({\n      playerId: _playerId,\n      tier: _tier\n    }));\n  }\n\n  /// @dev External function to add a checklist item to our mystery set.\n  ///   Must have completed initial deploy, and can't add more than 56 items (because checklistId is a uint8).\n  /// @param _playerId The player represented by this checklist item. (see StrikersPlayerList.sol)\n  /// @param _tier This checklist item's rarity tier. (see Rarity Tier enum and corresponding tierLimits)\n  function addUnreleasedChecklistItem(uint8 _playerId, RarityTier _tier) external onlyOwner {\n    require(deployStep == DeployStep.DoneInitialDeploy, \"Finish deploying the Originals and Iconics sets first.\");\n    require(unreleasedCount() < 56, \"You can't add any more checklist items.\");\n    require(_playerId < playerCount, \"This player doesn't exist in our player list.\");\n    unreleasedChecklistItems.push(ChecklistItem({\n      playerId: _playerId,\n      tier: _tier\n    }));\n  }\n\n  /// @dev Returns how many Original checklist items we've added.\n  function originalsCount() external view returns (uint256) {\n    return originalChecklistItems.length;\n  }\n\n  /// @dev Returns how many Iconic checklist items we've added.\n  function iconicsCount() public view returns (uint256) {\n    return iconicChecklistItems.length;\n  }\n\n  /// @dev Returns how many Unreleased checklist items we've added.\n  function unreleasedCount() public view returns (uint256) {\n    return unreleasedChecklistItems.length;\n  }\n\n  // In the next four functions, we initialize this contract with our\n  // 132 initial checklist items (100 Originals, 32 Iconics). Because\n  // of how much data we need to store, it has to be broken up into\n  // four different function calls, which need to be called in sequence.\n  // The ordering of the checklist items we add determines their\n  // checklist ID, which is left-padded in our frontend to be a\n  // 3-digit identifier where the first digit is the setId and the last\n  // 2 digits represents the checklist items index in the appropriate ___ChecklistItems array.\n  // For example, Originals Messi is the first item for set ID 0, and this\n  // is displayed as #000 throughout the app. Our Card struct declare its\n  // checklistId property as uint8, so we have\n  // to be mindful that we can only have 256 total checklist items.\n\n  /// @dev Deploys Originals #000 through #032.\n  function deployStepOne() external onlyOwner {\n    require(deployStep == DeployStep.WaitingForStepOne, \"You're not following the steps in order...\");\n\n    /* ORIGINALS - DIAMOND */\n    _addOriginalChecklistItem(0, RarityTier.Diamond); // 000 Messi\n    _addOriginalChecklistItem(1, RarityTier.Diamond); // 001 Ronaldo\n    _addOriginalChecklistItem(2, RarityTier.Diamond); // 002 Neymar\n    _addOriginalChecklistItem(3, RarityTier.Diamond); // 003 Salah\n\n    /* ORIGINALS - GOLD */\n    _addOriginalChecklistItem(4, RarityTier.Gold); // 004 Lewandowski\n    _addOriginalChecklistItem(5, RarityTier.Gold); // 005 De Bruyne\n    _addOriginalChecklistItem(6, RarityTier.Gold); // 006 Modrić\n    _addOriginalChecklistItem(7, RarityTier.Gold); // 007 Hazard\n    _addOriginalChecklistItem(8, RarityTier.Gold); // 008 Ramos\n    _addOriginalChecklistItem(9, RarityTier.Gold); // 009 Kroos\n    _addOriginalChecklistItem(10, RarityTier.Gold); // 010 Suárez\n    _addOriginalChecklistItem(11, RarityTier.Gold); // 011 Kane\n    _addOriginalChecklistItem(12, RarityTier.Gold); // 012 Agüero\n    _addOriginalChecklistItem(13, RarityTier.Gold); // 013 Mbappé\n    _addOriginalChecklistItem(14, RarityTier.Gold); // 014 Higuaín\n    _addOriginalChecklistItem(15, RarityTier.Gold); // 015 de Gea\n    _addOriginalChecklistItem(16, RarityTier.Gold); // 016 Griezmann\n    _addOriginalChecklistItem(17, RarityTier.Gold); // 017 Kanté\n    _addOriginalChecklistItem(18, RarityTier.Gold); // 018 Cavani\n    _addOriginalChecklistItem(19, RarityTier.Gold); // 019 Pogba\n\n    /* ORIGINALS - SILVER (020 to 032) */\n    _addOriginalChecklistItem(20, RarityTier.Silver); // 020 Isco\n    _addOriginalChecklistItem(21, RarityTier.Silver); // 021 Marcelo\n    _addOriginalChecklistItem(22, RarityTier.Silver); // 022 Neuer\n    _addOriginalChecklistItem(23, RarityTier.Silver); // 023 Mertens\n    _addOriginalChecklistItem(24, RarityTier.Silver); // 024 James\n    _addOriginalChecklistItem(25, RarityTier.Silver); // 025 Dybala\n    _addOriginalChecklistItem(26, RarityTier.Silver); // 026 Eriksen\n    _addOriginalChecklistItem(27, RarityTier.Silver); // 027 David Silva\n    _addOriginalChecklistItem(28, RarityTier.Silver); // 028 Gabriel Jesus\n    _addOriginalChecklistItem(29, RarityTier.Silver); // 029 Thiago\n    _addOriginalChecklistItem(30, RarityTier.Silver); // 030 Courtois\n    _addOriginalChecklistItem(31, RarityTier.Silver); // 031 Coutinho\n    _addOriginalChecklistItem(32, RarityTier.Silver); // 032 Iniesta\n\n    // Move to the next deploy step.\n    deployStep = DeployStep.WaitingForStepTwo;\n  }\n\n  /// @dev Deploys Originals #033 through #065.\n  function deployStepTwo() external onlyOwner {\n    require(deployStep == DeployStep.WaitingForStepTwo, \"You're not following the steps in order...\");\n\n    /* ORIGINALS - SILVER (033 to 049) */\n    _addOriginalChecklistItem(33, RarityTier.Silver); // 033 Casemiro\n    _addOriginalChecklistItem(34, RarityTier.Silver); // 034 Lukaku\n    _addOriginalChecklistItem(35, RarityTier.Silver); // 035 Piqué\n    _addOriginalChecklistItem(36, RarityTier.Silver); // 036 Hummels\n    _addOriginalChecklistItem(37, RarityTier.Silver); // 037 Godín\n    _addOriginalChecklistItem(38, RarityTier.Silver); // 038 Özil\n    _addOriginalChecklistItem(39, RarityTier.Silver); // 039 Son\n    _addOriginalChecklistItem(40, RarityTier.Silver); // 040 Sterling\n    _addOriginalChecklistItem(41, RarityTier.Silver); // 041 Lloris\n    _addOriginalChecklistItem(42, RarityTier.Silver); // 042 Falcao\n    _addOriginalChecklistItem(43, RarityTier.Silver); // 043 Rakitić\n    _addOriginalChecklistItem(44, RarityTier.Silver); // 044 Sané\n    _addOriginalChecklistItem(45, RarityTier.Silver); // 045 Firmino\n    _addOriginalChecklistItem(46, RarityTier.Silver); // 046 Mané\n    _addOriginalChecklistItem(47, RarityTier.Silver); // 047 Müller\n    _addOriginalChecklistItem(48, RarityTier.Silver); // 048 Alli\n    _addOriginalChecklistItem(49, RarityTier.Silver); // 049 Navas\n\n    /* ORIGINALS - BRONZE (050 to 065) */\n    _addOriginalChecklistItem(50, RarityTier.Bronze); // 050 Thiago Silva\n    _addOriginalChecklistItem(51, RarityTier.Bronze); // 051 Varane\n    _addOriginalChecklistItem(52, RarityTier.Bronze); // 052 Di María\n    _addOriginalChecklistItem(53, RarityTier.Bronze); // 053 Alba\n    _addOriginalChecklistItem(54, RarityTier.Bronze); // 054 Benatia\n    _addOriginalChecklistItem(55, RarityTier.Bronze); // 055 Werner\n    _addOriginalChecklistItem(56, RarityTier.Bronze); // 056 Sigurðsson\n    _addOriginalChecklistItem(57, RarityTier.Bronze); // 057 Matić\n    _addOriginalChecklistItem(58, RarityTier.Bronze); // 058 Koulibaly\n    _addOriginalChecklistItem(59, RarityTier.Bronze); // 059 Bernardo Silva\n    _addOriginalChecklistItem(60, RarityTier.Bronze); // 060 Kompany\n    _addOriginalChecklistItem(61, RarityTier.Bronze); // 061 Moutinho\n    _addOriginalChecklistItem(62, RarityTier.Bronze); // 062 Alderweireld\n    _addOriginalChecklistItem(63, RarityTier.Bronze); // 063 Forsberg\n    _addOriginalChecklistItem(64, RarityTier.Bronze); // 064 Mandžukić\n    _addOriginalChecklistItem(65, RarityTier.Bronze); // 065 Milinković-Savić\n\n    // Move to the next deploy step.\n    deployStep = DeployStep.WaitingForStepThree;\n  }\n\n  /// @dev Deploys Originals #066 through #099.\n  function deployStepThree() external onlyOwner {\n    require(deployStep == DeployStep.WaitingForStepThree, \"You're not following the steps in order...\");\n\n    /* ORIGINALS - BRONZE (066 to 099) */\n    _addOriginalChecklistItem(66, RarityTier.Bronze); // 066 Kagawa\n    _addOriginalChecklistItem(67, RarityTier.Bronze); // 067 Xhaka\n    _addOriginalChecklistItem(68, RarityTier.Bronze); // 068 Christensen\n    _addOriginalChecklistItem(69, RarityTier.Bronze); // 069 Zieliński\n    _addOriginalChecklistItem(70, RarityTier.Bronze); // 070 Smolov\n    _addOriginalChecklistItem(71, RarityTier.Bronze); // 071 Shaqiri\n    _addOriginalChecklistItem(72, RarityTier.Bronze); // 072 Rashford\n    _addOriginalChecklistItem(73, RarityTier.Bronze); // 073 Hernández\n    _addOriginalChecklistItem(74, RarityTier.Bronze); // 074 Lozano\n    _addOriginalChecklistItem(75, RarityTier.Bronze); // 075 Ziyech\n    _addOriginalChecklistItem(76, RarityTier.Bronze); // 076 Moses\n    _addOriginalChecklistItem(77, RarityTier.Bronze); // 077 Farfán\n    _addOriginalChecklistItem(78, RarityTier.Bronze); // 078 Elneny\n    _addOriginalChecklistItem(79, RarityTier.Bronze); // 079 Berg\n    _addOriginalChecklistItem(80, RarityTier.Bronze); // 080 Ochoa\n    _addOriginalChecklistItem(81, RarityTier.Bronze); // 081 Akinfeev\n    _addOriginalChecklistItem(82, RarityTier.Bronze); // 082 Azmoun\n    _addOriginalChecklistItem(83, RarityTier.Bronze); // 083 Cueva\n    _addOriginalChecklistItem(84, RarityTier.Bronze); // 084 Khazri\n    _addOriginalChecklistItem(85, RarityTier.Bronze); // 085 Honda\n    _addOriginalChecklistItem(86, RarityTier.Bronze); // 086 Cahill\n    _addOriginalChecklistItem(87, RarityTier.Bronze); // 087 Mikel\n    _addOriginalChecklistItem(88, RarityTier.Bronze); // 088 Sung-yueng\n    _addOriginalChecklistItem(89, RarityTier.Bronze); // 089 Ruiz\n    _addOriginalChecklistItem(90, RarityTier.Bronze); // 090 Yoshida\n    _addOriginalChecklistItem(91, RarityTier.Bronze); // 091 Al Abed\n    _addOriginalChecklistItem(92, RarityTier.Bronze); // 092 Chung-yong\n    _addOriginalChecklistItem(93, RarityTier.Bronze); // 093 Gómez\n    _addOriginalChecklistItem(94, RarityTier.Bronze); // 094 Sliti\n    _addOriginalChecklistItem(95, RarityTier.Bronze); // 095 Ghoochannejhad\n    _addOriginalChecklistItem(96, RarityTier.Bronze); // 096 Jedinak\n    _addOriginalChecklistItem(97, RarityTier.Bronze); // 097 Al-Sahlawi\n    _addOriginalChecklistItem(98, RarityTier.Bronze); // 098 Gunnarsson\n    _addOriginalChecklistItem(99, RarityTier.Bronze); // 099 Pérez\n\n    // Move to the next deploy step.\n    deployStep = DeployStep.WaitingForStepFour;\n  }\n\n  /// @dev Deploys all Iconics and marks the deploy as complete!\n  function deployStepFour() external onlyOwner {\n    require(deployStep == DeployStep.WaitingForStepFour, \"You're not following the steps in order...\");\n\n    /* ICONICS */\n    _addIconicChecklistItem(0, RarityTier.IconicInsert); // 100 Messi\n    _addIconicChecklistItem(1, RarityTier.IconicInsert); // 101 Ronaldo\n    _addIconicChecklistItem(2, RarityTier.IconicInsert); // 102 Neymar\n    _addIconicChecklistItem(3, RarityTier.IconicInsert); // 103 Salah\n    _addIconicChecklistItem(4, RarityTier.IconicInsert); // 104 Lewandowski\n    _addIconicChecklistItem(5, RarityTier.IconicInsert); // 105 De Bruyne\n    _addIconicChecklistItem(6, RarityTier.IconicInsert); // 106 Modrić\n    _addIconicChecklistItem(7, RarityTier.IconicInsert); // 107 Hazard\n    _addIconicChecklistItem(8, RarityTier.IconicInsert); // 108 Ramos\n    _addIconicChecklistItem(9, RarityTier.IconicInsert); // 109 Kroos\n    _addIconicChecklistItem(10, RarityTier.IconicInsert); // 110 Suárez\n    _addIconicChecklistItem(11, RarityTier.IconicInsert); // 111 Kane\n    _addIconicChecklistItem(12, RarityTier.IconicInsert); // 112 Agüero\n    _addIconicChecklistItem(15, RarityTier.IconicInsert); // 113 de Gea\n    _addIconicChecklistItem(16, RarityTier.IconicInsert); // 114 Griezmann\n    _addIconicChecklistItem(17, RarityTier.IconicReferral); // 115 Kanté\n    _addIconicChecklistItem(18, RarityTier.IconicReferral); // 116 Cavani\n    _addIconicChecklistItem(19, RarityTier.IconicInsert); // 117 Pogba\n    _addIconicChecklistItem(21, RarityTier.IconicInsert); // 118 Marcelo\n    _addIconicChecklistItem(24, RarityTier.IconicInsert); // 119 James\n    _addIconicChecklistItem(26, RarityTier.IconicInsert); // 120 Eriksen\n    _addIconicChecklistItem(29, RarityTier.IconicReferral); // 121 Thiago\n    _addIconicChecklistItem(36, RarityTier.IconicReferral); // 122 Hummels\n    _addIconicChecklistItem(38, RarityTier.IconicReferral); // 123 Özil\n    _addIconicChecklistItem(39, RarityTier.IconicInsert); // 124 Son\n    _addIconicChecklistItem(46, RarityTier.IconicInsert); // 125 Mané\n    _addIconicChecklistItem(48, RarityTier.IconicInsert); // 126 Alli\n    _addIconicChecklistItem(49, RarityTier.IconicReferral); // 127 Navas\n    _addIconicChecklistItem(73, RarityTier.IconicInsert); // 128 Hernández\n    _addIconicChecklistItem(85, RarityTier.IconicInsert); // 129 Honda\n    _addIconicChecklistItem(100, RarityTier.IconicReferral); // 130 Alves\n    _addIconicChecklistItem(101, RarityTier.IconicReferral); // 131 Zlatan\n\n    // Mark the initial deploy as complete.\n    deployStep = DeployStep.DoneInitialDeploy;\n  }\n\n  /// @dev Returns the mint limit for a given checklist item, based on its tier.\n  /// @param _checklistId Which checklist item we need to get the limit for.\n  /// @return How much of this checklist item we are allowed to mint.\n  function limitForChecklistId(uint8 _checklistId) external view returns (uint16) {\n    RarityTier rarityTier;\n    uint8 index;\n    if (_checklistId < 100) { // Originals = #000 to #099\n      rarityTier = originalChecklistItems[_checklistId].tier;\n    } else if (_checklistId < 200) { // Iconics = #100 to #131\n      index = _checklistId - 100;\n      require(index < iconicsCount(), \"This Iconics checklist item doesn't exist.\");\n      rarityTier = iconicChecklistItems[index].tier;\n    } else { // Unreleased = #200 to max #255\n      index = _checklistId - 200;\n      require(index < unreleasedCount(), \"This Unreleased checklist item doesn't exist.\");\n      rarityTier = unreleasedChecklistItems[index].tier;\n    }\n    return tierLimits[uint8(rarityTier)];\n  }\n}\n\n\n/// @title Base contract for CryptoStrikers. Defines what a card is and how to mint one.\n/// @author The CryptoStrikers Team\ncontract StrikersBase is ERC721Token(\"CryptoStrikers\", \"STRK\") {\n\n  /// @dev Emit this event whenever we mint a new card (see _mintCard below)\n  event CardMinted(uint256 cardId);\n\n  /// @dev The struct representing the game's main object, a sports trading card.\n  struct Card {\n    // The timestamp at which this card was minted.\n    // With uint32 we are good until 2106, by which point we will have not minted\n    // a card in like, 88 years.\n    uint32 mintTime;\n\n    // The checklist item represented by this card. See StrikersChecklist.sol for more info.\n    uint8 checklistId;\n\n    // Cards for a given player have a serial number, which gets\n    // incremented in sequence. For example, if we mint 1000 of a card,\n    // the third one to be minted has serialNumber = 3 (out of 1000).\n    uint16 serialNumber;\n  }\n\n  /*** STORAGE ***/\n\n  /// @dev All the cards that have been minted, indexed by cardId.\n  Card[] public cards;\n\n  /// @dev Keeps track of how many cards we have minted for a given checklist item\n  ///   to make sure we don't go over the limit for it.\n  ///   NB: uint16 has a capacity of 65,535, but we are not minting more than\n  ///   4,352 of any given checklist item.\n  mapping (uint8 => uint16) public mintedCountForChecklistId;\n\n  /// @dev A reference to our checklist contract, which contains all the minting limits.\n  StrikersChecklist public strikersChecklist;\n\n  /*** FUNCTIONS ***/\n\n  /// @dev For a given owner, returns two arrays. The first contains the IDs of every card owned\n  ///   by this address. The second returns the corresponding checklist ID for each of these cards.\n  ///   There are a few places we need this info in the web app and short of being able to return an\n  ///   actual array of Cards, this is the best solution we could come up with...\n  function cardAndChecklistIdsForOwner(address _owner) external view returns (uint256[], uint8[]) {\n    uint256[] memory cardIds = ownedTokens[_owner];\n    uint256 cardCount = cardIds.length;\n    uint8[] memory checklistIds = new uint8[](cardCount);\n\n    for (uint256 i = 0; i < cardCount; i++) {\n      uint256 cardId = cardIds[i];\n      checklistIds[i] = cards[cardId].checklistId;\n    }\n\n    return (cardIds, checklistIds);\n  }\n\n  /// @dev An internal method that creates a new card and stores it.\n  ///  Emits both a CardMinted and a Transfer event.\n  /// @param _checklistId The ID of the checklistItem represented by the card (see Checklist.sol)\n  /// @param _owner The card's first owner!\n  function _mintCard(\n    uint8 _checklistId,\n    address _owner\n  )\n    internal\n    returns (uint256)\n  {\n    uint16 mintLimit = strikersChecklist.limitForChecklistId(_checklistId);\n    require(mintLimit == 0 || mintedCountForChecklistId[_checklistId] < mintLimit, \"Can't mint any more of this card!\");\n    uint16 serialNumber = ++mintedCountForChecklistId[_checklistId];\n    Card memory newCard = Card({\n      mintTime: uint32(now),\n      checklistId: _checklistId,\n      serialNumber: serialNumber\n    });\n    uint256 newCardId = cards.push(newCard) - 1;\n    emit CardMinted(newCardId);\n    _mint(_owner, newCardId);\n    return newCardId;\n  }\n}\n\n\n\n\n\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n\n/// @title The contract that exposes minting functions to the outside world and limits who can call them.\n/// @author The CryptoStrikers Team\ncontract StrikersMinting is StrikersBase, Pausable {\n\n  /// @dev Emit this when we decide to no longer mint a given checklist ID.\n  event PulledFromCirculation(uint8 checklistId);\n\n  /// @dev If the value for a checklistId is true, we can no longer mint it.\n  mapping (uint8 => bool) public outOfCirculation;\n\n  /// @dev The address of the contract that manages the pack sale.\n  address public packSaleAddress;\n\n  /// @dev Only the owner can update the address of the pack sale contract.\n  /// @param _address The address of the new StrikersPackSale contract.\n  function setPackSaleAddress(address _address) external onlyOwner {\n    packSaleAddress = _address;\n  }\n\n  /// @dev Allows the contract at packSaleAddress to mint cards.\n  /// @param _checklistId The checklist item represented by this new card.\n  /// @param _owner The card's first owner!\n  /// @return The new card's ID.\n  function mintPackSaleCard(uint8 _checklistId, address _owner) external returns (uint256) {\n    require(msg.sender == packSaleAddress, \"Only the pack sale contract can mint here.\");\n    require(!outOfCirculation[_checklistId], \"Can't mint any more of this checklist item...\");\n    return _mintCard(_checklistId, _owner);\n  }\n\n  /// @dev Allows the owner to mint cards from our Unreleased Set.\n  /// @param _checklistId The checklist item represented by this new card. Must be >= 200.\n  /// @param _owner The card's first owner!\n  function mintUnreleasedCard(uint8 _checklistId, address _owner) external onlyOwner {\n    require(_checklistId >= 200, \"You can only use this to mint unreleased cards.\");\n    require(!outOfCirculation[_checklistId], \"Can't mint any more of this checklist item...\");\n    _mintCard(_checklistId, _owner);\n  }\n\n  /// @dev Allows the owner or the pack sale contract to prevent an Iconic or Unreleased card from ever being minted again.\n  /// @param _checklistId The Iconic or Unreleased card we want to remove from circulation.\n  function pullFromCirculation(uint8 _checklistId) external {\n    bool ownerOrPackSale = (msg.sender == owner) || (msg.sender == packSaleAddress);\n    require(ownerOrPackSale, \"Only the owner or pack sale can take checklist items out of circulation.\");\n    require(_checklistId >= 100, \"This function is reserved for Iconics and Unreleased sets.\");\n    outOfCirculation[_checklistId] = true;\n    emit PulledFromCirculation(_checklistId);\n  }\n}\n\n\n/// @title StrikersTrading - Allows users to trustlessly trade cards.\n/// @author The CryptoStrikers Team\ncontract StrikersTrading is StrikersMinting {\n\n  /// @dev Emitting this allows us to look up if a trade has been\n  ///   successfully filled, by who, and which cards were involved.\n  event TradeFilled(\n    bytes32 indexed tradeHash,\n    address indexed maker,\n    uint256 makerCardId,\n    address indexed taker,\n    uint256 takerCardId\n  );\n\n  /// @dev Emitting this allows us to look up if a trade has been cancelled.\n  event TradeCancelled(bytes32 indexed tradeHash, address indexed maker);\n\n  /// @dev All the possible states for a trade.\n  enum TradeState {\n    Valid,\n    Filled,\n    Cancelled\n  }\n\n  /// @dev Mapping of tradeHash => TradeState. Defaults to Valid.\n  mapping (bytes32 => TradeState) public tradeStates;\n\n  /// @dev A taker (someone who has received a signed trade hash)\n  ///   submits a cardId to this function and, if it satisfies\n  ///   the given criteria, the trade is executed.\n  /// @param _maker Address of the maker (i.e. trade creator).\n  /// @param _makerCardId ID of the card the maker has agreed to give up.\n  /// @param _taker The counterparty the maker wishes to trade with (if it's address(0), anybody can fill the trade!)\n  /// @param _takerCardOrChecklistId If taker is the 0-address, then this is a checklist ID (e.g. \"any Originals John Smith\").\n  ///                                If not, then it's a card ID (e.g. \"Originals John Smith #8/100\").\n  /// @param _salt A uint256 timestamp to differentiate trades that have otherwise identical params (prevents replay attacks).\n  /// @param _submittedCardId The card the taker is using to fill the trade. Must satisfy either the card or checklist ID\n  ///                         specified in _takerCardOrChecklistId.\n  /// @param _v ECDSA signature parameter v from the tradeHash signed by the maker.\n  /// @param _r ECDSA signature parameters r from the tradeHash signed by the maker.\n  /// @param _s ECDSA signature parameters s from the tradeHash signed by the maker.\n  function fillTrade(\n    address _maker,\n    uint256 _makerCardId,\n    address _taker,\n    uint256 _takerCardOrChecklistId,\n    uint256 _salt,\n    uint256 _submittedCardId,\n    uint8 _v,\n    bytes32 _r,\n    bytes32 _s)\n    external\n    whenNotPaused\n  {\n    require(_maker != msg.sender, \"You can't fill your own trade.\");\n    require(_taker == address(0) || _taker == msg.sender, \"You are not authorized to fill this trade.\");\n\n    if (_taker == address(0)) {\n      // This trade is open to the public so we are requesting a checklistItem, rather than a specific card.\n      require(cards[_submittedCardId].checklistId == _takerCardOrChecklistId, \"The card you submitted is not valid for this trade.\");\n    } else {\n      // We are trading directly with another user and are requesting a specific card.\n      require(_submittedCardId == _takerCardOrChecklistId, \"The card you submitted is not valid for this trade.\");\n    }\n\n    bytes32 tradeHash = getTradeHash(\n      _maker,\n      _makerCardId,\n      _taker,\n      _takerCardOrChecklistId,\n      _salt\n    );\n\n    require(tradeStates[tradeHash] == TradeState.Valid, \"This trade is no longer valid.\");\n    require(isValidSignature(_maker, tradeHash, _v, _r, _s), \"Invalid signature.\");\n\n    tradeStates[tradeHash] = TradeState.Filled;\n\n    // For better UX, we assume that by signing the trade, the maker has given\n    // implicit approval for this token to be transferred. This saves us from an\n    // extra approval transaction...\n    tokenApprovals[_makerCardId] = msg.sender;\n\n    safeTransferFrom(_maker, msg.sender, _makerCardId);\n    safeTransferFrom(msg.sender, _maker, _submittedCardId);\n\n    emit TradeFilled(tradeHash, _maker, _makerCardId, msg.sender, _submittedCardId);\n  }\n\n  /// @dev Allows the maker to cancel a trade that hasn't been filled yet.\n  /// @param _maker Address of the maker (i.e. trade creator).\n  /// @param _makerCardId ID of the card the maker has agreed to give up.\n  /// @param _taker The counterparty the maker wishes to trade with (if it's address(0), anybody can fill the trade!)\n  /// @param _takerCardOrChecklistId If taker is the 0-address, then this is a checklist ID (e.g. \"any Lionel Messi\").\n  ///                                If not, then it's a card ID (e.g. \"Lionel Messi #8/100\").\n  /// @param _salt A uint256 timestamp to differentiate trades that have otherwise identical params (prevents replay attacks).\n  function cancelTrade(\n    address _maker,\n    uint256 _makerCardId,\n    address _taker,\n    uint256 _takerCardOrChecklistId,\n    uint256 _salt)\n    external\n  {\n    require(_maker == msg.sender, \"Only the trade creator can cancel this trade.\");\n\n    bytes32 tradeHash = getTradeHash(\n      _maker,\n      _makerCardId,\n      _taker,\n      _takerCardOrChecklistId,\n      _salt\n    );\n\n    require(tradeStates[tradeHash] == TradeState.Valid, \"This trade has already been cancelled or filled.\");\n    tradeStates[tradeHash] = TradeState.Cancelled;\n    emit TradeCancelled(tradeHash, _maker);\n  }\n\n  /// @dev Calculates Keccak-256 hash of a trade with specified parameters.\n  /// @param _maker Address of the maker (i.e. trade creator).\n  /// @param _makerCardId ID of the card the maker has agreed to give up.\n  /// @param _taker The counterparty the maker wishes to trade with (if it's address(0), anybody can fill the trade!)\n  /// @param _takerCardOrChecklistId If taker is the 0-address, then this is a checklist ID (e.g. \"any Lionel Messi\").\n  ///                                If not, then it's a card ID (e.g. \"Lionel Messi #8/100\").\n  /// @param _salt A uint256 timestamp to differentiate trades that have otherwise identical params (prevents replay attacks).\n  /// @return Keccak-256 hash of trade.\n  function getTradeHash(\n    address _maker,\n    uint256 _makerCardId,\n    address _taker,\n    uint256 _takerCardOrChecklistId,\n    uint256 _salt)\n    public\n    view\n    returns (bytes32)\n  {\n    // Hashing the contract address prevents a trade from being replayed on any new trade contract we deploy.\n    bytes memory packed = abi.encodePacked(this, _maker, _makerCardId, _taker, _takerCardOrChecklistId, _salt);\n    return keccak256(packed);\n  }\n\n  /// @dev Verifies that a signed trade is valid.\n  /// @param _signer Address of signer.\n  /// @param _tradeHash Signed Keccak-256 hash.\n  /// @param _v ECDSA signature parameter v.\n  /// @param _r ECDSA signature parameters r.\n  /// @param _s ECDSA signature parameters s.\n  /// @return Validity of signature.\n  function isValidSignature(\n    address _signer,\n    bytes32 _tradeHash,\n    uint8 _v,\n    bytes32 _r,\n    bytes32 _s)\n    public\n    pure\n    returns (bool)\n  {\n    bytes memory packed = abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _tradeHash);\n    return _signer == ecrecover(keccak256(packed), _v, _r, _s);\n  }\n}\n\n\n/// @title The main, ERC721-compliant CryptoStrikers contract.\n/// @author The CryptoStrikers Team\ncontract StrikersCore is StrikersTrading {\n\n  /// @dev An external metadata contract that the owner can upgrade.\n  StrikersMetadata public strikersMetadata;\n\n  /// @dev We initialize the CryptoStrikers game with an immutable checklist that oversees card rarity.\n  constructor(address _checklistAddress) public {\n    strikersChecklist = StrikersChecklist(_checklistAddress);\n  }\n\n  /// @dev Allows the contract owner to update the metadata contract.\n  function setMetadataAddress(address _contractAddress) external onlyOwner {\n    strikersMetadata = StrikersMetadata(_contractAddress);\n  }\n\n  /// @dev If we've set an external metadata contract, use that.\n  function tokenURI(uint256 _tokenId) public view returns (string) {\n    if (strikersMetadata == address(0)) {\n      return super.tokenURI(_tokenId);\n    }\n\n    require(exists(_tokenId), \"Card does not exist.\");\n    return strikersMetadata.tokenURI(_tokenId);\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tradeStates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"strikersChecklist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_checklistId\",\"type\":\"uint8\"}],\"name\":\"pullFromCirculation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"outOfCirculation\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maker\",\"type\":\"address\"},{\"name\":\"_makerCardId\",\"type\":\"uint256\"},{\"name\":\"_taker\",\"type\":\"address\"},{\"name\":\"_takerCardOrChecklistId\",\"type\":\"uint256\"},{\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"cancelTrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_checklistId\",\"type\":\"uint8\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"mintUnreleasedCard\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_checklistId\",\"type\":\"uint8\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"mintPackSaleCard\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"mintedCountForChecklistId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_signer\",\"type\":\"address\"},{\"name\":\"_tradeHash\",\"type\":\"bytes32\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cards\",\"outputs\":[{\"name\":\"mintTime\",\"type\":\"uint32\"},{\"name\":\"checklistId\",\"type\":\"uint8\"},{\"name\":\"serialNumber\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setPackSaleAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_maker\",\"type\":\"address\"},{\"name\":\"_makerCardId\",\"type\":\"uint256\"},{\"name\":\"_taker\",\"type\":\"address\"},{\"name\":\"_takerCardOrChecklistId\",\"type\":\"uint256\"},{\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"getTradeHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"packSaleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"strikersMetadata\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"setMetadataAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"cardAndChecklistIdsForOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maker\",\"type\":\"address\"},{\"name\":\"_makerCardId\",\"type\":\"uint256\"},{\"name\":\"_taker\",\"type\":\"address\"},{\"name\":\"_takerCardOrChecklistId\",\"type\":\"uint256\"},{\"name\":\"_salt\",\"type\":\"uint256\"},{\"name\":\"_submittedCardId\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"fillTrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_checklistAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tradeHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"makerCardId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"takerCardId\",\"type\":\"uint256\"}],\"name\":\"TradeFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tradeHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"}],\"name\":\"TradeCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"checklistId\",\"type\":\"uint8\"}],\"name\":\"PulledFromCirculation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"CardMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]",
  "bytecode": "60806040526000600e60146101000a81548160ff0219169083151502179055503480156200002c57600080fd5b50604051602080620044cb833981018060405281019080805190602001909291905050506040805190810160405280600e81526020017f43727970746f537472696b6572730000000000000000000000000000000000008152506040805190810160405280600481526020017f5354524b000000000000000000000000000000000000000000000000000000008152508160049080519060200190620000d492919062000179565b508060059080519060200190620000ed92919062000179565b50505033600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000228565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001bc57805160ff1916838001178555620001ed565b82800160010185558215620001ed579182015b82811115620001ec578251825591602001919060010190620001cf565b5b509050620001fc919062000200565b5090565b6200022591905b808211156200022157600081600090555060010162000207565b5090565b90565b61429380620002386000396000f3006080604052600436106101d8576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146101dd578063081812fc1461026d578063095ea7b3146102da57806318160ddd146103275780631b9ad2391461035257806323b872dd146103a55780632a571b15146104125780632b232741146104695780632f745c59146104995780633f4ba83a146104fa5780633ff25c641461051157806342842e0e146105595780634f558e79146105c65780634f6ccce71461060b5780635c975abb1461064c5780636280382a1461067b5780636352211e146106fc5780636977aa621461076957806370a08231146107b95780637579fcb3146108105780637f791d05146108745780638163681e146108c05780638456cb59146109525780638da5cb5b146109695780638dc10768146109c0578063914e45d014610a2957806395d89b4114610a6c578063a1490d5014610afc578063a22cb46514610b99578063b88d4fde14610be8578063c4a3155714610c9b578063c87b56dd14610cf2578063c8a2cc0314610d98578063e17b25af14610def578063e985e9c514610e32578063f2fde38b14610ead578063f7ce25bb14610ef0578063fdd3af8f14610fd0575b600080fd5b3480156101e957600080fd5b506101f2611084565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610232578082015181840152602081019050610217565b50505050905090810190601f16801561025f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561027957600080fd5b5061029860048036038101908080359060200190929190505050611126565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102e657600080fd5b50610325600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611163565b005b34801561033357600080fd5b5061033c611329565b6040518082815260200191505060405180910390f35b34801561035e57600080fd5b506103816004803603810190808035600019169060200190929190505050611336565b6040518082600281111561039157fe5b60ff16815260200191505060405180910390f35b3480156103b157600080fd5b50610410600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611356565b005b34801561041e57600080fd5b5061042761146d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561047557600080fd5b50610497600480360381019080803560ff169060200190929190505050611493565b005b3480156104a557600080fd5b506104e4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611716565b6040518082815260200191505060405180910390f35b34801561050657600080fd5b5061050f61178d565b005b34801561051d57600080fd5b5061053f600480360381019080803560ff16906020019092919050505061184d565b604051808215151515815260200191505060405180910390f35b34801561056557600080fd5b506105c4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061186d565b005b3480156105d257600080fd5b506105f1600480360381019080803590602001909291905050506118a5565b604051808215151515815260200191505060405180910390f35b34801561061757600080fd5b5061063660048036038101908080359060200190929190505050611916565b6040518082815260200191505060405180910390f35b34801561065857600080fd5b5061066161194e565b604051808215151515815260200191505060405180910390f35b34801561068757600080fd5b506106fa600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050611961565b005b34801561070857600080fd5b5061072760048036038101908080359060200190929190505050611ba4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561077557600080fd5b506107b7600480360381019080803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c21565b005b3480156107c557600080fd5b506107fa600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611df0565b6040518082815260200191505060405180910390f35b34801561081c57600080fd5b5061085e600480360381019080803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e74565b6040518082815260200191505060405180910390f35b34801561088057600080fd5b506108a2600480360381019080803560ff169060200190929190505050612035565b604051808261ffff1661ffff16815260200191505060405180910390f35b3480156108cc57600080fd5b50610938600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035600019169060200190929190803560ff16906020019092919080356000191690602001909291908035600019169060200190929190505050612056565b604051808215151515815260200191505060405180910390f35b34801561095e57600080fd5b506109676121c9565b005b34801561097557600080fd5b5061097e61228a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156109cc57600080fd5b506109eb600480360381019080803590602001909291905050506122b0565b604051808463ffffffff1663ffffffff1681526020018360ff1660ff1681526020018261ffff1661ffff168152602001935050505060405180910390f35b348015610a3557600080fd5b50610a6a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612310565b005b348015610a7857600080fd5b50610a816123b0565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610ac1578082015181840152602081019050610aa6565b50505050905090810190601f168015610aee5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610b0857600080fd5b50610b7b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050612452565b60405180826000191660001916815260200191505060405180910390f35b348015610ba557600080fd5b50610be6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035151590602001909291905050506125c0565b005b348015610bf457600080fd5b50610c99600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506126fc565b005b348015610ca757600080fd5b50610cb061273b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610cfe57600080fd5b50610d1d60048036038101908080359060200190929190505050612761565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610d5d578082015181840152602081019050610d42565b50505050905090810190601f168015610d8a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610da457600080fd5b50610dad612971565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610dfb57600080fd5b50610e30600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612997565b005b348015610e3e57600080fd5b50610e93600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612a37565b604051808215151515815260200191505060405180910390f35b348015610eb957600080fd5b50610eee600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612acb565b005b348015610efc57600080fd5b50610f31600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612c23565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015610f78578082015181840152602081019050610f5d565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015610fba578082015181840152602081019050610f9f565b5050505090500194505050505060405180910390f35b348015610fdc57600080fd5b50611082600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190803560ff16906020019092919080356000191690602001909291908035600019169060200190929190505050612d87565b005b606060048054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561111c5780601f106110f15761010080835404028352916020019161111c565b820191906000526020600020905b8154815290600101906020018083116110ff57829003601f168201915b5050505050905090565b60006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061116e82611ba4565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156111ab57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806111eb57506111ea8133612a37565b5b15156111f657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff1661121783611126565b73ffffffffffffffffffffffffffffffffffffffff161415806112675750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b1561132457826001600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a35b505050565b6000600880549050905090565b60116020528060005260406000206000915054906101000a900460ff1681565b806113613382613353565b151561136c57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156113a857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156113e457600080fd5b6113ee84836133e8565b6113f88483613551565b6114028383613769565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a350505050565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061153e5750601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b9050801515611601576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260488152602001807f4f6e6c7920746865206f776e6572206f72207061636b2073616c652063616e2081526020017f74616b6520636865636b6c697374206974656d73206f7574206f66206369726381526020017f756c6174696f6e2e00000000000000000000000000000000000000000000000081525060600191505060405180910390fd5b60648260ff16101515156116a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603a8152602001807f546869732066756e6374696f6e20697320726573657276656420666f7220496381526020017f6f6e69637320616e6420556e72656c656173656420736574732e00000000000081525060400191505060405180910390fd5b6001600f60008460ff1660ff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fca2965a599f9007a8bc0a636d12c9edea5f8c5af10209eaed37a86d44e0d7b8382604051808260ff1660ff16815260200191505060405180910390a15050565b600061172183611df0565b8210151561172e57600080fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561177a57fe5b9060005260206000200154905092915050565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117e957600080fd5b600e60149054906101000a900460ff16151561180457600080fd5b6000600e60146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b600f6020528060005260406000206000915054906101000a900460ff1681565b806118783382613353565b151561188357600080fd5b61189f84848460206040519081016040528060008152506126fc565b50505050565b60008060008084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415915050919050565b6000611920611329565b8210151561192d57600080fd5b60088281548110151561193c57fe5b90600052602060002001549050919050565b600e60149054906101000a900460ff1681565b60003373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141515611a2c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d8152602001807f4f6e6c79207468652074726164652063726561746f722063616e2063616e636581526020017f6c20746869732074726164652e0000000000000000000000000000000000000081525060400191505060405180910390fd5b611a398686868686612452565b905060006002811115611a4857fe5b60116000836000191660001916815260200190815260200160002060009054906101000a900460ff166002811115611a7c57fe5b141515611b17576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f546869732074726164652068617320616c7265616479206265656e2063616e6381526020017f656c6c6564206f722066696c6c65642e0000000000000000000000000000000081525060400191505060405180910390fd5b600260116000836000191660001916815260200190815260200160002060006101000a81548160ff02191690836002811115611b4f57fe5b02179055508573ffffffffffffffffffffffffffffffffffffffff1681600019167f37bea1bad72947bbe287e44f80432b090eef483a8ae55f2bca77cd212beb54c960405160405180910390a3505050505050565b60008060008084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611c1857600080fd5b80915050919050565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c7d57600080fd5b60c88260ff1610151515611d1f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001807f596f752063616e206f6e6c7920757365207468697320746f206d696e7420756e81526020017f72656c65617365642063617264732e000000000000000000000000000000000081525060400191505060405180910390fd5b600f60008360ff1660ff16815260200190815260200160002060009054906101000a900460ff16151515611de1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d8152602001807f43616e2774206d696e7420616e79206d6f7265206f662074686973206368656381526020017f6b6c697374206974656d2e2e2e0000000000000000000000000000000000000081525060400191505060405180910390fd5b611deb8282613840565b505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611e2d57600080fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611f61576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001807f4f6e6c7920746865207061636b2073616c6520636f6e74726163742063616e2081526020017f6d696e7420686572652e0000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600f60008460ff1660ff16815260200190815260200160002060009054906101000a900460ff16151515612023576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d8152602001807f43616e2774206d696e7420616e79206d6f7265206f662074686973206368656381526020017f6b6c697374206974656d2e2e2e0000000000000000000000000000000000000081525060400191505060405180910390fd5b61202d8383613840565b905092915050565b600c6020528060005260406000206000915054906101000a900461ffff1681565b600060608560405160200180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c01826000191660001916815260200191505060405160208183030381529060405290506001816040518082805190602001908083835b6020831015156120e457805182526020820191506020810190506020830392506120bf565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020868686604051600081526020016040526040518085600019166000191681526020018460ff1660ff1681526020018360001916600019168152602001826000191660001916815260200194505050505060206040516020810390808403906000865af1158015612185573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161491505095945050505050565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561222557600080fd5b600e60149054906101000a900460ff1615151561224157600080fd5b6001600e60146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b818154811015156122bf57fe5b906000526020600020016000915090508060000160009054906101000a900463ffffffff16908060000160049054906101000a900460ff16908060000160059054906101000a900461ffff16905083565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561236c57600080fd5b80601060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606060058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156124485780601f1061241d57610100808354040283529160200191612448565b820191906000526020600020905b81548152906001019060200180831161242b57829003601f168201915b5050505050905090565b60006060308787878787604051602001808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140183815260200182815260200196505050505050506040516020818303038152906040529050806040518082805190602001908083835b6020831015156125875780518252602082019150602081019050602083039250612562565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902091505095945050505050565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156125fb57600080fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b816127073382613353565b151561271257600080fd5b61271d858585611356565b61272985858585613b5b565b151561273457600080fd5b5050505050565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600073ffffffffffffffffffffffffffffffffffffffff16601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156127ca576127c382613d49565b905061296c565b6127d3826118a5565b1515612847576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f4361726420646f6573206e6f742065786973742e00000000000000000000000081525060200191505060405180910390fd5b601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c87b56dd836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b1580156128d857600080fd5b505af11580156128ec573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561291657600080fd5b81019080805164010000000081111561292e57600080fd5b8281019050602081018481111561294457600080fd5b815185600182028301116401000000008211171561296157600080fd5b505092919050505090505b919050565b601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156129f357600080fd5b80601260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612b2757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612b6357600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606080606060006060600080600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015612cb857602002820191906000526020600020905b815481526020019060010190808311612ca4575b505050505094508451935083604051908082528060200260200182016040528015612cf25781602001602082028038833980820191505090505b509250600091505b83821015612d77578482815181101515612d1057fe5b906020019060200201519050600b81815481101515612d2b57fe5b9060005260206000200160000160049054906101000a900460ff168383815181101515612d5457fe5b9060200190602002019060ff16908160ff16815250508180600101925050612cfa565b8483965096505050505050915091565b6000600e60149054906101000a900460ff16151515612da557600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614151515612e49576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f596f752063616e27742066696c6c20796f7572206f776e2074726164652e000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161480612eaf57503373ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b1515612f49576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001807f596f7520617265206e6f7420617574686f72697a656420746f2066696c6c207481526020017f6869732074726164652e0000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16141561304c5786600b86815481101515612f8e57fe5b9060005260206000200160000160049054906101000a900460ff1660ff16141515613047576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260338152602001807f546865206361726420796f75207375626d6974746564206973206e6f7420766181526020017f6c696420666f7220746869732074726164652e0000000000000000000000000081525060400191505060405180910390fd5b6130ea565b86851415156130e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260338152602001807f546865206361726420796f75207375626d6974746564206973206e6f7420766181526020017f6c696420666f7220746869732074726164652e0000000000000000000000000081525060400191505060405180910390fd5b5b6130f78a8a8a8a8a612452565b90506000600281111561310657fe5b60116000836000191660001916815260200190815260200160002060009054906101000a900460ff16600281111561313a57fe5b1415156131af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f54686973207472616465206973206e6f206c6f6e6765722076616c69642e000081525060200191505060405180910390fd5b6131bc8a82868686612056565b1515613230576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f496e76616c6964207369676e61747572652e000000000000000000000000000081525060200191505060405180910390fd5b600160116000836000191660001916815260200190815260200160002060006101000a81548160ff0219169083600281111561326857fe5b021790555033600160008b815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506132ca8a338b61186d565b6132d5338b8761186d565b3373ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1682600019167f9e429a813ac4a0e0edadd2f63b4afa6f8c1c51e1240fcf23775f588c2475dab78c89604051808381526020018281526020019250505060405180910390a450505050505050505050565b60008061335f83611ba4565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806133ce57508373ffffffffffffffffffffffffffffffffffffffff166133b684611126565b73ffffffffffffffffffffffffffffffffffffffff16145b806133df57506133de8185612a37565b5b91505092915050565b8173ffffffffffffffffffffffffffffffffffffffff1661340882611ba4565b73ffffffffffffffffffffffffffffffffffffffff1614151561342a57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561354d5760006001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a35b5050565b60008060006135608585613e12565b600760008581526020019081526020016000205492506135cc6001600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050613f4090919063ffffffff16565b9150600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561361a57fe5b9060005260206000200154905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110151561367457fe5b90600052602060002001819055506000600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020838154811015156136d057fe5b9060005260206000200181905550600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548091906001900361373091906141e7565b50600060076000868152602001908152602001600020819055508260076000838152602001908152602001600020819055505050505050565b60006137758383613f59565b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050906001820390600052602060002001600090919290919091505550806007600084815260200190815260200160002081905550505050565b600080600061384d614213565b6000600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663303d0870886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260ff1660ff168152602001915050602060405180830381600087803b1580156138e657600080fd5b505af11580156138fa573d6000803e3d6000fd5b505050506040513d602081101561391057600080fd5b8101908080519060200190929190505050935060008461ffff16148061396457508361ffff16600c60008960ff1660ff16815260200190815260200160002060009054906101000a900461ffff1661ffff16105b15156139fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f43616e2774206d696e7420616e79206d6f7265206f662074686973206361726481526020017f210000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600c60008860ff1660ff168152602001908152602001600020600081819054906101000a900461ffff1660010191906101000a81548161ffff021916908361ffff160217905592506060604051908101604052804263ffffffff1681526020018860ff1681526020018461ffff1681525091506001600b8390806001815401808255809150509060018203906000526020600020016000909192909190915060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548160ff021916908360ff16021790555060408201518160000160056101000a81548161ffff021916908361ffff16021790555050500390507f220b53d3db6f7694ac363d118b95866fad85b0e6b18b77cbe36eb044996994a0816040518082815260200191505060405180910390a1613b4e86826140b1565b8094505050505092915050565b600080613b7d8573ffffffffffffffffffffffffffffffffffffffff16614108565b1515613b8c5760019150613d40565b8473ffffffffffffffffffffffffffffffffffffffff1663f0b9e5ba8786866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015613c4e578082015181840152602081019050613c33565b50505050905090810190601f168015613c7b5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015613c9c57600080fd5b505af1158015613cb0573d6000803e3d6000fd5b505050506040513d6020811015613cc657600080fd5b8101908080519060200190929190505050905063f0b9e5ba7c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505b50949350505050565b6060613d54826118a5565b1515613d5f57600080fd5b600a60008381526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613e065780601f10613ddb57610100808354040283529160200191613e06565b820191906000526020600020905b815481529060010190602001808311613de957829003601f168201915b50505050509050919050565b8173ffffffffffffffffffffffffffffffffffffffff16613e3282611ba4565b73ffffffffffffffffffffffffffffffffffffffff16141515613e5457600080fd5b613ea76001600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613f4090919063ffffffff16565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600080600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000828211151515613f4e57fe5b818303905092915050565b600073ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515613fc657600080fd5b8160008083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061406a6001600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461411b90919063ffffffff16565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b6140bb8282614137565b600880549050600960008381526020019081526020016000208190555060088190806001815401808255809150509060018203906000526020600020016000909192909190915055505050565b600080823b905060008111915050919050565b6000818301905082811015151561412e57fe5b80905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561417357600080fd5b61417d8282613769565b8173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b81548183558181111561420e5781836000526020600020918201910161420d9190614242565b5b505050565b606060405190810160405280600063ffffffff168152602001600060ff168152602001600061ffff1681525090565b61426491905b80821115614260576000816000905550600101614248565b5090565b905600a165627a7a7230582018fd0ecf06cd11ede612e0ec43bd59ac29e2d96ae3b6bd1a7f6f645f054e53070029000000000000000000000000dbc260a05f81629ffa062df3d1668a43133abba4",
  "constructorArguments": "000000000000000000000000dbc260a05f81629ffa062df3d1668a43133abba4"
}