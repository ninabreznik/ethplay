{
  "address": "0x1dbed266d20d27d0bd1c4707fc002defe7e0267b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Aphrodite",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-30\n*/\n\npragma solidity ^0.4.21;\n\n// File: contracts/auth/AuthorizedList.sol\n\n/*\n * Created by: alexo (Big Deeper Advisors, Inc)\n * For: Input Strategic Partners (ISP) and Intimate.io\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,\n * TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE\n * SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\n * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\npragma solidity ^0.4.21;\n\ncontract AuthorizedList {\n\n    bytes32 constant APHRODITE = keccak256(\"Goddess of Love!\");\n    bytes32 constant CUPID = keccak256(\"Aphrodite's Little Helper.\");\n    bytes32 constant BULKTRANSFER = keccak256(\"Bulk Transfer User.\");\n    mapping (address => mapping(bytes32 => bool)) internal authorized;\n    mapping (bytes32 => bool) internal contractPermissions;\n\n}\n\n// File: contracts/auth/Authorized.sol\n\n/*\n * Created by: alexo (Big Deeper Advisors, Inc)\n * For: Input Strategic Partners (ISP) and Intimate.io\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,\n * TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE\n * SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\n * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\npragma solidity ^0.4.21;\n\n\ncontract Authorized is AuthorizedList {\n\n    function Authorized() public {\n        /// Set the initial permission for msg.sender (contract creator), it can then add permissions for others\n        authorized[msg.sender][APHRODITE] = true;\n    }\n\n    /// Check if _address is authorized to access functionality with _authorization level\n    modifier ifAuthorized(address _address, bytes32 _authorization) {\n        require(authorized[_address][_authorization] || authorized[_address][APHRODITE]);\n        _;\n    }\n\n    /// @dev Check if _address is authorized for _authorization\n    function isAuthorized(address _address, bytes32 _authorization) public view returns (bool) {\n        return authorized[_address][_authorization];\n    }\n\n    /// @dev Change authorization for _address \n    /// @param _address Address whose permission is to be changed\n    /// @param _authorization Authority to be changed\n    function toggleAuthorization(address _address, bytes32 _authorization) public ifAuthorized(msg.sender, APHRODITE) {\n\n        /// Prevent inadvertent self locking out, cannot change own authority\n        require(_address != msg.sender);\n\n        /// No need for lower level authorization to linger\n        if (_authorization == APHRODITE && !authorized[_address][APHRODITE]) {\n            authorized[_address][CUPID] = false;\n        }\n\n        authorized[_address][_authorization] = !authorized[_address][_authorization];\n    }\n}\n\n// File: contracts/math/SafeMath.sol\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        require(a == 0 || c / a == b);\n        return c;\n    }\n\n    /* Not needed\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // require(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // require(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n    */\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n}\n\n// File: contracts/token/IERC20Basic.sol\n\n/*\n * Created by: alexo (Big Deeper Advisors, Inc)\n * For: Input Strategic Partners (ISP) and Intimate.io\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,\n * TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE\n * SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\n * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\npragma solidity ^0.4.21;\n\ncontract IERC20Basic {\n\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address _who) public view returns (uint256);\n    function transfer(address _to, uint256 _value) public returns (bool);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n}\n\n// File: contracts/token/RecoverCurrency.sol\n\n/*\n * Created by: alexo (Big Deeper Advisors, Inc)\n * For: Input Strategic Partners (ISP) and Intimate.io\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,\n * TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE\n * SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\n * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\npragma solidity ^0.4.21;\n\n\n\n/// @title Authorized account can reclaim ERC20Basic tokens.\ncontract RecoverCurrency is AuthorizedList, Authorized {\n\n    event EtherRecovered(address indexed _to, uint256 _value);\n\n    function recoverEther() external ifAuthorized(msg.sender, APHRODITE) {\n        msg.sender.transfer(address(this).balance);\n        emit EtherRecovered(msg.sender, address(this).balance);\n    }\n\n    /// @dev Reclaim all ERC20Basic compatible tokens\n    /// @param _address The address of the token contract\n    function recoverToken(address _address) external ifAuthorized(msg.sender, APHRODITE) {\n        require(_address != address(0));\n        IERC20Basic token = IERC20Basic(_address);\n        uint256 balance = token.balanceOf(address(this));\n        token.transfer(msg.sender, balance);\n    }\n}\n\n// File: contracts/managed/Freezable.sol\n\n/*\n * Created by Input Strategic Partners (ISP) and Intimate.io\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,\n * TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE\n * SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\n * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\npragma solidity ^0.4.21;\n\n\n/**\n * @title Freezable\n * @dev allows authorized accounts to add/remove other accounts to the list of fozen accounts.\n * Accounts in the list cannot transfer and approve and their balances and allowances cannot be retrieved.\n */\ncontract Freezable is AuthorizedList, Authorized {\n\n    event Frozen(address indexed _account);\n    event Unfrozen(address indexed _account);\n    \n    mapping (address => bool) public frozenAccounts;\n\n    /// Make sure access control is initialized\n    function Freezable() public AuthorizedList() Authorized() { }\n\n    /**\n    * @dev Throws if called by any account that's frozen.\n    */\n    modifier notFrozen {\n        require(!frozenAccounts[msg.sender]);\n        _;\n    }\n\n    /**\n    * @dev check if an account is frozen\n    * @param account address to check\n    * @return true iff the address is in the list of frozen accounts and hasn't been unfrozen\n    */\n    function isFrozen(address account) public view returns (bool) {\n        return frozenAccounts[account];\n    }\n\n    /**\n    * @dev add an address to the list of frozen accounts\n    * @param account address to freeze\n    * @return true if the address was added to the list of frozen accounts, false if the address was already in the list \n    */\n    function freezeAccount(address account) public ifAuthorized(msg.sender, APHRODITE) returns (bool success) {\n        if (!frozenAccounts[account]) {\n            frozenAccounts[account] = true;\n            emit Frozen(account);\n            success = true; \n        }\n    }\n\n    /**\n    * @dev remove an address from the list of frozen accounts\n    * @param account address to unfreeze\n    * @return true if the address was removed from the list of frozen accounts, \n    * false if the address wasn't in the list in the first place \n    */\n    function unfreezeAccount(address account) public ifAuthorized(msg.sender, APHRODITE) returns (bool success) {\n        if (frozenAccounts[account]) {\n            frozenAccounts[account] = false;\n            emit Unfrozen(account);\n            success = true;\n        }\n    }\n}\n\n// File: contracts/managed/Pausable.sol\n\n/*\n * Created by: alexo (Big Deeper Advisors, Inc)\n * For: Input Strategic Partners (ISP) and Intimate.io\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,\n * TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE\n * SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\n * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\npragma solidity ^0.4.21;\n\n\ncontract Pausable is AuthorizedList, Authorized {\n\n    event Pause();\n    event Unpause();\n\n\n    /// @dev We deploy in UNpaused state, should it be paused?\n    bool public paused = false;\n\n    /// Make sure access control is initialized\n    function Pausable() public AuthorizedList() Authorized() { }\n\n\n    /// @dev modifier to allow actions only when the contract IS NOT paused\n    modifier whenNotPaused {\n        require(!paused);\n        _;\n    }\n\n\n    /// @dev modifier to allow actions only when the contract is paused\n    modifier whenPaused {\n        require(paused);\n        _;\n    }\n\n\n    /// @dev called by an authorized msg.sender to pause, triggers stopped state\n    /// Multiple addresses may be authorized to call this method\n    function pause() public whenNotPaused ifAuthorized(msg.sender, CUPID) returns (bool) {\n        emit Pause();\n        paused = true;\n\n        return true;\n    }\n\n\n    /// @dev called by an authorized msg.sender to unpause, returns to normal state\n    /// Multiple addresses may be authorized to call this method\n    function unpause() public whenPaused ifAuthorized(msg.sender, CUPID) returns (bool) {\n        emit Unpause();\n        paused = false;\n    \n        return true;\n    }\n}\n\n// File: contracts/storage/AllowancesLedger.sol\n\n/*\n * Created by: alexo (Big Deeper Advisors, Inc)\n * For: Input Strategic Partners (ISP) and intimate.io\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, \n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, \n * TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE \n * SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, \n * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\npragma solidity ^0.4.21;\n\ncontract AllowancesLedger {\n\n    mapping (address => mapping (address => uint256)) public allowances;\n\n}\n\n// File: contracts/storage/TokenLedger.sol\n\n/*\n * Created by: alexo (Big Deeper Advisors, Inc)\n * For: Input Strategic Partners (ISP) and Intimate.io\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,\n * TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE\n * SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\n * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\npragma solidity ^0.4.21;\n\n\ncontract TokenLedger is AuthorizedList, Authorized {\n\n    mapping(address => uint256) public balances;\n    uint256 public totalsupply;\n\n    struct SeenAddressRecord {\n        bool seen;\n        uint256 accountArrayIndex;\n    }\n\n    // Iterable accounts\n    address[] internal accounts;\n    mapping(address => SeenAddressRecord) internal seenBefore;\n\n    /// @dev Keeping track of addresses in an array is useful as mappings are not iterable\n    /// @return Number of addresses holding this token\n    function numberAccounts() public view ifAuthorized(msg.sender, APHRODITE) returns (uint256) {\n        return accounts.length;\n    }\n\n    /// @dev Keeping track of addresses in an array is useful as mappings are not iterable\n    function returnAccounts() public view ifAuthorized(msg.sender, APHRODITE) returns (address[] holders) {\n        return accounts;\n    }\n\n    function balanceOf(uint256 _id) public view ifAuthorized(msg.sender, CUPID) returns (uint256 balance) {\n        require (_id < accounts.length);\n        return balances[accounts[_id]];\n    }\n}\n\n// File: contracts/storage/TokenSettings.sol\n\n/*\n * Created by: alexo (Big Deeper Advisors, Inc)\n * For: Input Strategic Partners (ISP) and Intimate.io\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,\n * TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE\n * SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\n * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\npragma solidity ^0.4.21;\n\n\ncontract TokenSettings is AuthorizedList, Authorized {\n\n    /// These strings should be set temporarily for testing on Rinkeby/Ropsten/Kovan to somethin else\n    /// to avoid people squatting on names\n    /// Change back to \"intimate\" and \"ITM\" for mainnet deployment\n\n    string public name = \"intimate\";\n    string public symbol = \"ITM\";\n\n    uint256 public INITIAL_SUPPLY = 100000000 * 10**18;  // 100 million of subdivisible tokens\n    uint8 public constant decimals = 18;\n\n\n    /// @dev Change token name\n    /// @param _name string\n    function setName(string _name) public ifAuthorized(msg.sender, APHRODITE) {\n        name = _name;\n    }\n\n    /// @dev Change token symbol\n    /// @param _symbol string\n    function setSymbol(string _symbol) public ifAuthorized(msg.sender, APHRODITE) {\n        symbol = _symbol;\n    }\n}\n\n// File: contracts/storage/BasicTokenStorage.sol\n\n/*\n * Created by: alexo (Big Deeper Advisors, Inc)\n * For: Input Strategic Partners (ISP) and Intimate.io\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,\n * TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE\n * SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\n * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\npragma solidity ^0.4.21;\n\n\n\n\n\n/// Collect all the state variables for the token's functions into a single contract\ncontract BasicTokenStorage is AuthorizedList, Authorized, TokenSettings, AllowancesLedger, TokenLedger {\n\n    /// @dev Ensure that authorization is set\n    function BasicTokenStorage() public Authorized() TokenSettings() AllowancesLedger() TokenLedger() { }\n\n    /// @dev Keep track of addresses seen before, push new ones into accounts list\n    /// @param _tokenholder address to check for \"newness\"\n    function trackAddresses(address _tokenholder) internal {\n        if (!seenBefore[_tokenholder].seen) {\n            seenBefore[_tokenholder].seen = true;\n            accounts.push(_tokenholder);\n            seenBefore[_tokenholder].accountArrayIndex = accounts.length - 1;\n        }\n    }\n\n    /// @dev remove address from seenBefore and accounts\n    /// @param _tokenholder address to remove\n    function removeSeenAddress(address _tokenholder) internal {\n        uint index = seenBefore[_tokenholder].accountArrayIndex;\n        require(index < accounts.length);\n\n        if (index != accounts.length - 1) {\n            accounts[index] = accounts[accounts.length - 1];\n        } \n        accounts.length--;\n        delete seenBefore[_tokenholder];\n    }\n}\n\n// File: contracts/token/BasicToken.sol\n\n/*\n * Created by: alexo (Big Deeper Advisors, Inc)\n * For: Input Strategic Partners (ISP) and Intimate.io\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,\n * TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE\n * SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\n * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\npragma solidity ^0.4.21;\n\n\n\n\n\n\n\ncontract BasicToken is IERC20Basic, BasicTokenStorage, Pausable, Freezable {\n\n    using SafeMath for uint256;\n\n    event Transfer(address indexed _tokenholder, address indexed _tokenrecipient, uint256 _value);\n    event BulkTransfer(address indexed _tokenholder, uint256 _howmany);\n\n    /// @dev Return the total token supply\n    function totalSupply() public view whenNotPaused returns (uint256) {\n        return totalsupply;\n    }\n\n    /// @dev transfer token for a specified address\n    /// @param _to The address to transfer to.\n    /// @param _value The amount to be transferred.\n    function transfer(address _to, uint256 _value) public whenNotPaused notFrozen returns (bool) {\n\n        /// No transfers to 0x0 address, use burn instead, if implemented\n        require(_to != address(0));\n\n        /// No useless operations\n        require(msg.sender != _to);\n\n        /// This will revert if not enough funds\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n\n        if (balances[msg.sender] == 0) {\n            removeSeenAddress(msg.sender);\n        }\n\n        /// _to might be a completely new address, so check and store if so\n        trackAddresses(_to);\n\n        /// This will revert on overflow\n        balances[_to] = balances[_to].add(_value);\n\n        /// Emit the Transfer event\n        emit Transfer(msg.sender, _to, _value);\n\n        return true;\n    }\n\n    /// @dev bulkTransfer tokens to a list of specified addresses, not an ERC20 function\n    /// @param _tos The list of addresses to transfer to.\n    /// @param _values The list of amounts to be transferred.\n    function bulkTransfer(address[] _tos, uint256[] _values) public whenNotPaused notFrozen ifAuthorized(msg.sender, BULKTRANSFER) returns (bool) {\n\n        require (_tos.length == _values.length);\n\n        uint256 sourceBalance = balances[msg.sender];\n\n        /// Temporarily set balance to 0 to mitigate the possibility of re-entrancy attacks\n        balances[msg.sender] = 0;\n\n        for (uint256 i = 0; i < _tos.length; i++) {\n            uint256 currentValue = _values[i];\n            address _to = _tos[i];\n            require(_to != address(0));\n            require(currentValue <= sourceBalance);\n            require(msg.sender != _to);\n\n            sourceBalance = sourceBalance.sub(currentValue);\n            balances[_to] = balances[_to].add(currentValue);\n\n            trackAddresses(_to);\n\n            emit Transfer(msg.sender, _tos[i], currentValue);\n        }\n\n        /// Set to the remaining balance\n        balances[msg.sender] = sourceBalance;\n\n        emit BulkTransfer(msg.sender, _tos.length);\n\n        if (balances[msg.sender] == 0) {\n            removeSeenAddress(msg.sender);\n        }\n\n        return true;\n    }\n\n\n    /// @dev Gets balance of the specified account.\n    /// @param _tokenholder Address of interest\n    /// @return Balance for the passed address\n    function balanceOf(address _tokenholder) public view whenNotPaused returns (uint256 balance) {\n        require(!isFrozen(_tokenholder));\n        return balances[_tokenholder];\n    }\n}\n\n// File: contracts/token/IERC20.sol\n\n/*\n * Created by: alexo (Big Deeper Advisors, Inc)\n * For: Input Strategic Partners (ISP) and Intimate.io\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,\n * TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE\n * SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\n * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\npragma solidity ^0.4.21;\n\n\ncontract IERC20 is IERC20Basic {\n\n    function allowance(address _tokenholder, address _tokenspender) view public returns (uint256);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n    function approve(address _tokenspender, uint256 _value) public returns (bool);\n    event Approval(address indexed _tokenholder, address indexed _tokenspender, uint256 _value);\n\n}\n\n// File: contracts/token/StandardToken.sol\n\n/*\n * Created by: alexo (Big Deeper Advisors, Inc)\n * For: Input Strategic Partners (ISP) and Intimate.io\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,\n * TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE\n * SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\n * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\npragma solidity ^0.4.21;\n\n\n\n\n\n\n\n\ncontract StandardToken is IERC20Basic, BasicToken, IERC20 {\n\n    using SafeMath for uint256;\n\n    event Approval(address indexed _tokenholder, address indexed _tokenspender, uint256 _value);\n\n    /// @dev Implements ERC20 transferFrom from one address to another\n    /// @param _from The source address  for tokens\n    /// @param _to The destination address for tokens\n    /// @param _value The number/amount to transfer\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused notFrozen returns (bool) {\n\n        // Don't send tokens to 0x0 address, use burn function that updates totalSupply\n        // and don't waste gas sending tokens to yourself\n        require(_to != address(0) && _from != _to);\n\n        require(!isFrozen(_from) && !isFrozen(_to));\n\n        /// This will revert if _value is larger than the allowance\n        allowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_value);\n\n        balances[_from] = balances[_from].sub(_value);\n\n        /// _to might be a completely new address, so check and store if so\n        trackAddresses(_to);\n\n        balances[_to] = balances[_to].add(_value);\n\n        /// Emit the Transfer event\n        emit Transfer(_from, _to, _value);\n\n        return true;\n    }\n\n\n    /// @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    /// @param _tokenspender The address which will spend the funds.\n    /// @param _value The amount of tokens to be spent.\n    function approve(address _tokenspender, uint256 _value) public whenNotPaused notFrozen returns (bool) {\n\n        require(_tokenspender != address(0) && msg.sender != _tokenspender);\n\n        require(!isFrozen(_tokenspender));\n\n        /// To mitigate reentrancy race condition, set allowance for _tokenspender to 0\n        /// first and then set the new value\n        /// https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require((_value == 0) || (allowances[msg.sender][_tokenspender] == 0));\n\n        /// Allow _tokenspender to transfer up to _value in tokens from msg.sender\n        allowances[msg.sender][_tokenspender] = _value;\n\n        /// Emit the Approval event\n        emit Approval(msg.sender, _tokenspender, _value);\n\n        return true;\n    }\n\n\n    /// @dev Function to check the amount of tokens that a spender can spend\n    /// @param _tokenholder Token owner account address\n    /// @param _tokenspender Account address authorized to transfer tokens\n    /// @return Amount of tokens still available to _tokenspender to transfer.\n    function allowance(address _tokenholder, address _tokenspender) public view whenNotPaused returns (uint256) {\n        require(!isFrozen(_tokenholder) && !isFrozen(_tokenspender));\n        return allowances[_tokenholder][_tokenspender];\n    }\n}\n\n// File: contracts/token/Aphrodite.sol\n\n/*\n * Created by: alexo (Big Deeper Advisors, Inc)\n * For: Input Strategic Partners (ISP) and Intimate.io\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,\n * TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE\n * SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\n * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\npragma solidity ^0.4.21;\n\n\n\n\n\ncontract Aphrodite is AuthorizedList, Authorized, RecoverCurrency, StandardToken {\n\n    event DonationAccepted(address indexed _from, uint256 _value);\n\n    /// @dev Constructor that gives msg.sender/creator all of existing tokens.\n    function Aphrodite() Authorized()  public {\n    \n        /// We need to initialize totalsupply and creator's balance\n        totalsupply = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n\n        /// Record that the creator is a holder of this token\n        trackAddresses(msg.sender);\n    }\n\n    /// @dev If one prefers to not accept Ether, comment out the next iine out or put revert(); inside\n    function () public payable { emit DonationAccepted(msg.sender, msg.value); }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenspender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tos\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"bulkTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"returnAccounts\",\"outputs\":[{\"name\":\"holders\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_authorization\",\"type\":\"bytes32\"}],\"name\":\"toggleAuthorization\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"recoverEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenholder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalsupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unfreezeAccount\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"recoverToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenholder\",\"type\":\"address\"},{\"name\":\"_tokenspender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_authorization\",\"type\":\"bytes32\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"freezeAccount\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"DonationAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenholder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenspender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenholder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenrecipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenholder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_howmany\",\"type\":\"uint256\"}],\"name\":\"BulkTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"Frozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"Unfrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"EtherRecovered\",\"type\":\"event\"}]",
  "bytecode": ""
}