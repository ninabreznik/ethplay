{
  "address": "0x78D12fC8a093fd1164c6f408351763BB0E0cc812",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Escrow_V3",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-22\n*/\n\npragma solidity 0.5.1;\n\nlibrary ECTools {\n\n  /**\n   * @dev Recover signer address from a message by using his signature\n   * @param originalMessage bytes32 message, the originalMessage is the signed message. What is recovered is the signer address.\n   * @param signedMessage bytes signature\n   */\n    function recover(bytes32 originalMessage, bytes memory signedMessage) public pure returns (address) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        //Check the signature length\n        if (signedMessage.length != 65) {\n            return (address(0));\n        }\n\n        // Divide the signature in r, s and v variables\n        assembly {\n            r := mload(add(signedMessage, 32))\n            s := mload(add(signedMessage, 64))\n            v := byte(0, mload(add(signedMessage, 96)))\n        }\n\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n        if (v < 27) {\n            v += 27;\n        }\n\n        // If the version is correct return the signer address\n        if (v != 27 && v != 28) {\n            return (address(0));\n        } else {\n            return ecrecover(originalMessage, v, r, s);\n        }\n    }\n\n    function toEthereumSignedMessage(bytes32 _msg) public pure returns (bytes32) {\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\n        return keccak256(abi.encodePacked(prefix, _msg));\n    }\n\n    function prefixedRecover(bytes32 _msg, bytes memory sig) public pure returns (address) {\n        bytes32 ethSignedMsg = toEthereumSignedMessage(_msg);\n        return recover(ethSignedMsg, sig);\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n    }\n}\n\n\n\n\n/**\n * @title Escrow_V3\n * @dev Escrow_V3 is the latest version of the escrow contract, currently being used for production\n */\ncontract Escrow_V3 {\n    using SafeMath for uint256;\n\n    ERC20 public tokenContract;\n\n    mapping (address => bool) public signers;\n    mapping (address => bool) public fundExecutors;\n    mapping (uint256 => bool) public usedNonces;\n\n    address payable public dAppAdmin;\n    uint256 constant public REFUNDING_LOGIC_GAS_COST = 7901; // gas used for single refund\n\n    uint256 constant public FIAT_PAYMENT_FUND_FUNCTION_CALL_GAS_USED = 32831; // approximated gas for calling fundForFiatPayment\n    uint256 constant public RELAYED_PAYMENT_FUND_FUNCTION_CALL_GAS_USED = 32323; // approximated gas for calling fundForRelayedPayment\n\n    /**\n    * @dev Restricts the access to a given function to the dApp admin only\n    */\n    modifier onlyDAppAdmin() {\n        require(msg.sender == dAppAdmin, \"Unauthorized access\");\n        _;\n    }\n\n    /**\n    * @dev Restricts the access to a given function to the fund executor only\n    */\n    modifier onlyFundExecutor() {\n        require(fundExecutors[msg.sender], \"Unauthorized access\");\n        _;\n    }\n\n    /**\n    * @dev Checks whether the nonce in the authorisation signature was already used. Prevents replay attacks.\n    */\n    modifier preValidateFund(uint256 nonce, uint256 gasprice) {\n        require(!usedNonces[nonce], \"Nonce already used\");\n        require(gasprice == tx.gasprice, \"Gas price is different from the signed one\");\n        _;\n    }\n\n    /**\n    * @dev The token address, dappadmin and funding wallets are set on contract deployment. FundExecutors are MAX 5\n    */\n    constructor(address tokenAddress, address payable _dAppAdmin, address[] memory _fundExecutors) public {\n        dAppAdmin = _dAppAdmin;\n        tokenContract = ERC20(tokenAddress);\n        for (uint i = 0; i < _fundExecutors.length; i++) {\n            fundExecutors[_fundExecutors[i]] = true;\n        }\n    }\n   \n    /**\n    * @dev Funds the `addressToFund` with the proided `weiAmount`\n    * Signature from the dapp is used in order to authorize the funding\n    * The msg sender is refunded for the transaction costs\n    */\n    function fundForRelayedPayment(\n        uint256 nonce,\n        uint256 gasprice,\n        address payable addressToFund,\n        uint256 weiAmount,\n        bytes memory authorizationSignature) public preValidateFund(nonce, gasprice) onlyFundExecutor()\n    {\n        uint256 gasLimit = gasleft().add(RELAYED_PAYMENT_FUND_FUNCTION_CALL_GAS_USED);\n\n        bytes32 hashedParameters = keccak256(abi.encodePacked(nonce, address(this), gasprice, addressToFund, weiAmount));\n        _preFund(hashedParameters, authorizationSignature, nonce);\n\n        addressToFund.transfer(weiAmount);\n\n        _refundMsgSender(gasLimit, gasprice);\n    }\n\n    /**\n    * @dev Funds the `addressToFund` with the proided `weiAmount` and `tokenAmount`\n    * Signature from the dapp is used in order to authorize the funding\n    * The msg sender is refunded for the transaction costs\n    */\n    function fundForFiatPayment(\n        uint256 nonce,\n        uint256 gasprice,\n        address payable addressToFund,\n        uint256 weiAmount,\n        uint256 tokenAmount,\n        bytes memory authorizationSignature) public preValidateFund(nonce, gasprice) onlyFundExecutor()\n    {\n        uint256 gasLimit = gasleft().add(FIAT_PAYMENT_FUND_FUNCTION_CALL_GAS_USED);\n\n        bytes32 hashedParameters = keccak256(abi.encodePacked(nonce, address(this), gasprice, addressToFund, weiAmount, tokenAmount));\n        _preFund(hashedParameters, authorizationSignature, nonce);\n\n        tokenContract.transfer(addressToFund, tokenAmount);\n        addressToFund.transfer(weiAmount);\n\n        _refundMsgSender(gasLimit, gasprice);\n    }\n\n    /**\n    * @dev Recovers the signer and checks whether the person that signed the signature is whitelisted as `signer`. Marks the nonce as used\n    */\n    function _preFund(bytes32 hashedParameters, bytes memory authorizationSignature, uint256 nonce) internal {\n        address signer = getSigner(hashedParameters, authorizationSignature);\n        require(signers[signer], \"Invalid authorization signature or signer\");\n\n        usedNonces[nonce] = true;\n    }\n\n    /**\n    * @dev performs EC recover on the signature\n    */\n    function getSigner(bytes32 raw, bytes memory sig) public pure returns(address signer) {\n        return ECTools.prefixedRecover(raw, sig);\n    }\n\n    /**\n    * @dev refunds the msg sender for the transaction costs\n    */\n    function _refundMsgSender(uint256 gasLimit, uint256 gasprice) internal {\n        uint256 refundAmount = gasLimit.sub(gasleft()).add(REFUNDING_LOGIC_GAS_COST).mul(gasprice);\n        msg.sender.transfer(refundAmount);\n    }\n\n    /**\n    * @dev withdraws the ethers in the escrow contract. Performed only by the dAppAdmin\n    */\n    function withdrawEthers(uint256 ethersAmount) public onlyDAppAdmin {\n        dAppAdmin.transfer(ethersAmount);\n    }\n\n    /**\n    * @dev withdraws the tokens in the escrow contract. Performed only by the dAppAdmin\n    */\n    function withdrawTokens(uint256 tokensAmount) public onlyDAppAdmin {\n        tokenContract.transfer(dAppAdmin, tokensAmount);\n    }\n\n    /**\n    * @dev marks a given address as signer or not, depending on the second bool parameter. Performed only by the dAppAdmin\n    */\n    function editSigner(address _newSigner, bool add) public onlyDAppAdmin {\n        signers[_newSigner] = add;\n    }\n\n    /**\n    * @dev changes the dAppAdmin of the contract. Performed only by the dAppAdmin\n    */\n    function editDappAdmin (address payable _dAppAdmin) public onlyDAppAdmin {\n        dAppAdmin = _dAppAdmin;\n    }\n\n    /**\n    * @dev marks a given address as fund executor or not, depending on the second bool parameter. Performed only by the dAppAdmin\n    */\n    function editFundExecutor(address _newExecutor, bool add) public onlyDAppAdmin {\n        fundExecutors[_newExecutor] = add;\n    }\n\n    function() external payable {}\n}",
  "bytecode": "608060405234801561001057600080fd5b5060405162001bad38038062001bad8339810180604052606081101561003557600080fd5b810190808051906020019092919080519060200190929190805164010000000081111561006157600080fd5b8281019050602081018481111561007757600080fd5b815185602082028301116401000000008211171561009457600080fd5b505092919050505081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008090505b81518110156101a857600160026000848481518110151561014057fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080600101915050610123565b505050506119f180620001bc6000396000f3fe6080604052600436106100e0576000357c0100000000000000000000000000000000000000000000000000000000900480630b06c634146100e25780631f6acc21146101f2578063315a095d146102f857806347bae6f51461033357806355a373d6146103905780636717e41c146103e7578063674478861461043a578063736c0d5b146104655780637d09e992146104ce5780638ad3308e146104f9578063c6ac068e1461054a578063cbdee551146105b3578063e46d5e29146105de578063f42067061461063b578063f69741a314610676578063f7b2ec0d146106cd575b005b3480156100ee57600080fd5b506101f0600480360360c081101561010557600080fd5b810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019064010000000081111561016a57600080fd5b82018360208201111561017c57600080fd5b8035906020019184600183028401116401000000008311171561019e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506107df565b005b3480156101fe57600080fd5b506102f6600480360360a081101561021557600080fd5b810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561027057600080fd5b82018360208201111561028257600080fd5b803590602001918460018302840111640100000000831117156102a457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610c1f565b005b34801561030457600080fd5b506103316004803603602081101561031b57600080fd5b8101908080359060200190929190505050610f56565b005b34801561033f57600080fd5b5061038e6004803603604081101561035657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050611140565b005b34801561039c57600080fd5b506103a5611260565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103f357600080fd5b506104206004803603602081101561040a57600080fd5b8101908080359060200190929190505050611285565b604051808215151515815260200191505060405180910390f35b34801561044657600080fd5b5061044f6112a5565b6040518082815260200191505060405180910390f35b34801561047157600080fd5b506104b46004803603602081101561048857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112ab565b604051808215151515815260200191505060405180910390f35b3480156104da57600080fd5b506104e36112cb565b6040518082815260200191505060405180910390f35b34801561050557600080fd5b506105486004803603602081101561051c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112d1565b005b34801561055657600080fd5b506105996004803603602081101561056d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113da565b604051808215151515815260200191505060405180910390f35b3480156105bf57600080fd5b506105c86113fa565b6040518082815260200191505060405180910390f35b3480156105ea57600080fd5b506106396004803603604081101561060157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050611400565b005b34801561064757600080fd5b506106746004803603602081101561065e57600080fd5b8101908080359060200190929190505050611520565b005b34801561068257600080fd5b5061068b611651565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106d957600080fd5b5061079d600480360360408110156106f057600080fd5b81019080803590602001909291908035906020019064010000000081111561071757600080fd5b82018360208201111561072957600080fd5b8035906020019184600183028401116401000000008311171561074b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611677565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b85856003600083815260200190815260200160002060009054906101000a900460ff16151515610877576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4e6f6e636520616c72656164792075736564000000000000000000000000000081525060200191505060405180910390fd5b3a81141515610914576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001807f47617320707269636520697320646966666572656e742066726f6d207468652081526020017f7369676e6564206f6e650000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156109d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f556e617574686f72697a6564206163636573730000000000000000000000000081525060200191505060405180910390fd5b60006109ec61803f5a61179490919063ffffffff16565b9050600089308a8a8a8a604051602001808781526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018381526020018281526020019650505050505050604051602081830303815290604052805190602001209050610ac281868c6117b5565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb89886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610b8657600080fd5b505af1158015610b9a573d6000803e3d6000fd5b505050506040513d6020811015610bb057600080fd5b8101908080519060200190929190505050508773ffffffffffffffffffffffffffffffffffffffff166108fc889081150290604051600060405180830381858888f19350505050158015610c08573d6000803e3d6000fd5b50610c13828a6118dc565b50505050505050505050565b84846003600083815260200190815260200160002060009054906101000a900460ff16151515610cb7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4e6f6e636520616c72656164792075736564000000000000000000000000000081525060200191505060405180910390fd5b3a81141515610d54576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001807f47617320707269636520697320646966666572656e742066726f6d207468652081526020017f7369676e6564206f6e650000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610e15576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f556e617574686f72697a6564206163636573730000000000000000000000000081525060200191505060405180910390fd5b6000610e2c617e435a61179490919063ffffffff16565b905060008830898989604051602001808681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140182815260200195505050505050604051602081830303815290604052805190602001209050610efa81868b6117b5565b8673ffffffffffffffffffffffffffffffffffffffff166108fc879081150290604051600060405180830381858888f19350505050158015610f40573d6000803e3d6000fd5b50610f4b82896118dc565b505050505050505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561101b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f556e617574686f72697a6564206163636573730000000000000000000000000081525060200191505060405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561110157600080fd5b505af1158015611115573d6000803e3d6000fd5b505050506040513d602081101561112b57600080fd5b81019080805190602001909291905050505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611205576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f556e617574686f72697a6564206163636573730000000000000000000000000081525060200191505060405180910390fd5b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915054906101000a900460ff1681565b617e4381565b60016020528060005260406000206000915054906101000a900460ff1681565b61803f81565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611396576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f556e617574686f72697a6564206163636573730000000000000000000000000081525060200191505060405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60026020528060005260406000206000915054906101000a900460ff1681565b611edd81565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f556e617574686f72697a6564206163636573730000000000000000000000000081525060200191505060405180910390fd5b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f556e617574686f72697a6564206163636573730000000000000000000000000081525060200191505060405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561164d573d6000803e3d6000fd5b5050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000734130a0c860611950d6e5e5f5a9c439eef70e652c63380388f184846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156117065780820151818401526020810190506116eb565b50505050905090810190601f1680156117335780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561175157600080fd5b505af4158015611765573d6000803e3d6000fd5b505050506040513d602081101561177b57600080fd5b8101908080519060200190929190505050905092915050565b60008082840190508381101515156117ab57600080fd5b8091505092915050565b60006117c18484611677565b9050600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156118aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001807f496e76616c696420617574686f72697a6174696f6e207369676e61747572652081526020017f6f72207369676e6572000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60016003600084815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050565b600061191782611909611edd6118fb5a8861196590919063ffffffff16565b61179490919063ffffffff16565b61198790919063ffffffff16565b90503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561195f573d6000803e3d6000fd5b50505050565b600082821115151561197657600080fd5b600082840390508091505092915050565b60008083141561199a57600090506119bf565b600082840290508284828115156119ad57fe5b041415156119ba57600080fd5b809150505b9291505056fea165627a7a72305820e57cd905bfd928136f7e2591b51f212050d13bccdad53ed1343d21c50d360fa200290000000000000000000000001d462414fe14cf489c7a21cac78509f4bf8cd7c0000000000000000000000000ede89510f1635a24c548f08f70daa6ab03317d16000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000030000000000000000000000001dd57c5a1a645541b3415f73577b720057b6f7f100000000000000000000000023894e6690ddc79749f7152a1c9cc0c3e15c3f0e000000000000000000000000c5894ec1cbc38ca188ed5a2017cbcc5d71c9811b",
  "constructorArguments": "0000000000000000000000001d462414fe14cf489c7a21cac78509f4bf8cd7c0000000000000000000000000ede89510f1635a24c548f08f70daa6ab03317d16000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000030000000000000000000000001dd57c5a1a645541b3415f73577b720057b6f7f100000000000000000000000023894e6690ddc79749f7152a1c9cc0c3e15c3f0e000000000000000000000000c5894ec1cbc38ca188ed5a2017cbcc5d71c9811b",
  "libraries": [
    {
      "name": "ECTools",
      "address": "0x4130a0c860611950d6e5e5f5a9c439eef70e652c"
    }
  ]
}