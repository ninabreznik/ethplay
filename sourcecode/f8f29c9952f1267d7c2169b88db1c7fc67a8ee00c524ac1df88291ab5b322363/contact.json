{
  "address": "0x047055f35cb837e838dde0202b7b1a5a75757835",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Ethereum Plus Token",
  "contractName": "ETHPToken",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-07-20\n*/\n\npragma solidity 0.4.11;\n  \n // ----------------------------------------------------------------------------------------------\n // Ethereum Plus fixed supply token contract\n // Enjoy. (c) etype 2017. The MIT Licence.\n // ----------------------------------------------------------------------------------------------\n  \n // ERC Token Standard #20 Interface\n // https://github.com/ethereum/EIPs/issues/20\n contract ERC20Interface {\n     // Get the total token supply\n     function totalSupply() constant returns (uint256 totalSupply);\n  \n     // Get the account balance of another account with address _owner\n     function balanceOf(address _owner) constant returns (uint256 balance);\n  \n     // Send _value amount of tokens to address _to\n     function transfer(address _to, uint256 _value) returns (bool success);\n  \n     // Send _value amount of tokens from address _from to address _to\n     function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n  \n     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n     // If this function is called again it overwrites the current allowance with _value.\n     // this function is required for some DEX functionality\n     function approve(address _spender, uint256 _value) returns (bool success);\n  \n     // Returns the amount which _spender is still allowed to withdraw from _owner\n     function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n  \n     // Triggered when tokens are transferred.\n     event Transfer(address indexed _from, address indexed _to, uint256 _value);\n  \n     // Triggered whenever approve(address _spender, uint256 _value) is called.\n     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n }\n  \n contract ETHPToken is ERC20Interface {\n     string public constant symbol = \"ETHP\";\n     string public constant name = \"Ethereum Plus\";\n     uint8 public constant decimals = 18;\n     uint256 _totalSupply = 10000000000000000000000000;\n     \n     // Owner of this contract\n     address public owner;\n  \n     // Balances for each account\n     mapping(address => uint256) balances;\n  \n     // Owner of account approves the transfer of an amount to another account\n     mapping(address => mapping (address => uint256)) allowed;\n  \n     // Functions with this modifier can only be executed by the owner\n     modifier onlyOwner() {\n         if (msg.sender != owner) {\n              throw;\n          }\n          _;\n      }\n   \n      // Constructor\n      function ETHPToken() {\n          owner = msg.sender;\n          balances[owner] = _totalSupply;\n      }\n  \n      function totalSupply() constant returns (uint256 totalSupply) {\n         totalSupply = _totalSupply;\n      }\n  \n      // What is the balance of a particular account?\n      function balanceOf(address _owner) constant returns (uint256 balance) {\n         return balances[_owner];\n      }\n   \n      // Transfer the balance from owner's account to another account\n      function transfer(address _to, uint256 _amount) returns (bool success) {\n         if (balances[msg.sender] >= _amount \n              && _amount > 0\n              && balances[_to] + _amount > balances[_to]) {\n              balances[msg.sender] -= _amount;\n              balances[_to] += _amount;\n              Transfer(msg.sender, _to, _amount);\n              return true;\n          } else {\n              return false;\n         }\n      }\n   \n      // Send _value amount of tokens from address _from to address _to\n      // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n      // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\n      // fees in sub-currencies; the command should fail unless the _from account has\n      // deliberately authorized the sender of the message via some mechanism; we propose\n      // these standardized APIs for approval:\n      function transferFrom(\n          address _from,\n          address _to,\n         uint256 _amount\n    ) returns (bool success) {\n       if (balances[_from] >= _amount\n            && allowed[_from][msg.sender] >= _amount\n           && _amount > 0\n            && balances[_to] + _amount > balances[_to]) {\n           balances[_from] -= _amount;\n           allowed[_from][msg.sender] -= _amount;\n            balances[_to] += _amount;\n             Transfer(_from, _to, _amount);\n             return true;\n        } else {\n            return false;\n         }\n     }\n  \n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n     // If this function is called again it overwrites the current allowance with _value.\n     function approve(address _spender, uint256 _amount) returns (bool success) {\n         allowed[msg.sender][_spender] = _amount;\n         Approval(msg.sender, _spender, _amount);\n         return true;\n     }\n  \n     function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n         return allowed[_owner][_spender];\n     }\n}",
  "bytecode": "60606040526a084595161401484a000000600055341561001b57fe5b5b60018054600160a060020a03191633600160a060020a03908116919091179182905560008054929091168152600260205260409020555b5b61068f806100636000396000f300606060405236156100a15763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100a3578063095ea7b31461013357806318160ddd1461016657806323b872dd14610188578063313ce567146101c157806370a08231146101e75780638da5cb5b1461021557806395d89b4114610241578063a9059cbb146102d1578063dd62ed3e14610304575bfe5b34156100ab57fe5b6100b3610338565b6040805160208082528351818301528351919283929083019185019080838382156100f9575b8051825260208311156100f957601f1990920191602091820191016100d9565b505050905090810190601f1680156101255780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561013b57fe5b610152600160a060020a036004351660243561036f565b604080519115158252519081900360200190f35b341561016e57fe5b6101766103da565b60408051918252519081900360200190f35b341561019057fe5b610152600160a060020a03600435811690602435166044356103e1565b604080519115158252519081900360200190f35b34156101c957fe5b6101d16104fb565b6040805160ff9092168252519081900360200190f35b34156101ef57fe5b610176600160a060020a0360043516610500565b60408051918252519081900360200190f35b341561021d57fe5b61022561051f565b60408051600160a060020a039092168252519081900360200190f35b341561024957fe5b6100b361052e565b6040805160208082528351818301528351919283929083019185019080838382156100f9575b8051825260208311156100f957601f1990920191602091820191016100d9565b505050905090810190601f1680156101255780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102d957fe5b610152600160a060020a0360043516602435610565565b604080519115158252519081900360200190f35b341561030c57fe5b610176600160a060020a0360043581169060243516610636565b60408051918252519081900360200190f35b60408051808201909152600d81527f457468657265756d20506c757300000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260036020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b6000545b90565b600160a060020a0383166000908152600260205260408120548290108015906104315750600160a060020a0380851660009081526003602090815260408083203390941683529290522054829010155b801561043d5750600082115b80156104625750600160a060020a038316600090815260026020526040902054828101115b156104ef57600160a060020a03808516600081815260026020818152604080842080548990039055600382528084203387168552825280842080548990039055948816808452918152918490208054870190558351868152935190937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92908290030190a35060016104f3565b5060005b5b9392505050565b601281565b600160a060020a0381166000908152600260205260409020545b919050565b600154600160a060020a031681565b60408051808201909152600481527f4554485000000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a03331660009081526002602052604081205482901080159061058e5750600082115b80156105b35750600160a060020a038316600090815260026020526040902054828101115b1561062757600160a060020a03338116600081815260026020908152604080832080548890039055938716808352918490208054870190558351868152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35060016103d4565b5060006103d4565b5b92915050565b600160a060020a038083166000908152600360209081526040808320938516835292905220545b929150505600a165627a7a72305820b88c36939df45c07c1fec145a7d46fabf07c7ee92824518c0a71762d507c28e30029"
}