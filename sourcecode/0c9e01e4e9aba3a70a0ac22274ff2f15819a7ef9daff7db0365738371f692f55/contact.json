{
  "address": "0x5e3346444010135322268a4630d2ed5f8d09446c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "LockChainToken",
  "contractName": "LockChain",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-09-23\n*/\n\npragma solidity ^0.4.11;\n\n/* taking ideas from FirstBlood token */\ncontract SafeMath {\n\nfunction safeAdd(uint256 x, uint256 y) internal returns(uint256) {\nuint256 z = x + y;\n      assert((z >= x) && (z >= y));\n      return z;\n    }\n\n    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\n      assert(x >= y);\n      uint256 z = x - y;\n      return z;\n    }\n\n    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n      uint256 z = x * y;\n      assert((x == 0)||(z/x == y));\n      return z;\n    }\n\n}\n\ncontract Token {\n    uint256 public totalSupply;\n    function balanceOf(address _owner) constant returns (uint256 balance);\n    function transfer(address _to, uint256 _value) returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n    function approve(address _spender, uint256 _value) returns (bool success);\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\n/*  ERC 20 token */\ncontract StandardToken is Token {\n\n    function transfer(address _to, uint256 _value) returns (bool success) {\n      if (balances[msg.sender] >= _value && _value > 0) {\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        Transfer(msg.sender, _to, _value);\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        allowed[_from][msg.sender] -= _value;\n        Transfer(_from, _to, _value);\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n    }\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n}\n\ncontract LockChain is StandardToken, SafeMath {\n\n    // metadata\n    string public constant name = \"LockChain\";\n    string public constant symbol = \"LOC\";\n    uint256 public constant decimals = 18;\n    string public version = \"1.0\";\n\n    // contracts\n    address public LockChainFundDeposit;      // deposit address for depositing tokens for owners\n    address public account1Address;      // deposit address for depositing tokens for owners\n    address public account2Address;\n    address public creatorAddress;\n\n    // crowdsale parameters\n    bool public isFinalized;              // switched to true in operational state\n    bool public isPreSale;\n    bool public isPrePreSale;\n    bool public isMainSale;\n    uint public preSalePeriod;\n    uint public prePreSalePeriod;\n    uint256 public tokenExchangeRate = 0; //  LockChain tokens per 1 ETH\n    uint256 public constant tokenSaleCap =  155 * (10**6) * 10**decimals;\n    uint256 public constant tokenPreSaleCap =  50 * (10**6) * 10**decimals;\n\n\n    // events\n    event CreateLOK(address indexed _to, uint256 _value);\n\n    // constructor\n    function LockChain()\n    {\n      isFinalized = false;                   //controls pre through crowdsale state\n      LockChainFundDeposit = '0x013aF31dc76255d3b33d2185A7148300882EbC7a';\n      account1Address = '0xe0F2653e7928e6CB7c6D3206163b3E466a29c7C3';\n      account2Address = '0x25BC70bFda877e1534151cB92D97AC5E69e1F53D';\n      creatorAddress = '0x953ebf6C38C58C934D58b9b17d8f9D0F121218BB';\n      isPrePreSale = false;\n      isPreSale = false;\n      isMainSale = false;\n      totalSupply = 0;\n    }\n\n    /// @dev Accepts ether and creates new LOK tokens.\n    function () payable {\n      if (isFinalized) throw;\n      if (!isPrePreSale && !isPreSale && !isMainSale) throw;\n      //if (!saleStarted) throw;\n      if (msg.value == 0) throw;\n      //create tokens\n      uint256 tokens = safeMult(msg.value, tokenExchangeRate); // check that we're not over totals\n      uint256 checkedSupply = safeAdd(totalSupply, tokens);\n\n      if(!isMainSale){\n        if (tokenPreSaleCap < checkedSupply) throw;\n      }\n\n      // return money if something goes wrong\n      if (tokenSaleCap < checkedSupply) throw;  // odd fractions won't be found\n      totalSupply = checkedSupply;\n      //All good. start the transfer\n      balances[msg.sender] += tokens;  // safeAdd not needed\n      CreateLOK(msg.sender, tokens);  // logs token creation\n    }\n\n    /// LockChain Ends the funding period and sends the ETH home\n    function finalize() external {\n      if (isFinalized) throw;\n      if (msg.sender != LockChainFundDeposit) throw; // locks finalize to the ultimate ETH owner\n        uint256 newTokens = totalSupply;\n        uint256 account1Tokens;\n        uint256 account2Tokens;\n        uint256 creatorTokens = 10000 * 10**decimals;\n        uint256 LOKFundTokens;\n        uint256 checkedSupply = safeAdd(totalSupply, newTokens);\n        totalSupply = checkedSupply;\n        if (newTokens % 2 == 0){\n          LOKFundTokens = newTokens/2;\n          account2Tokens = newTokens/2;\n          account1Tokens = LOKFundTokens - creatorTokens;\n          balances[account1Address] += account1Tokens;\n          balances[account2Address] += account2Tokens;\n        }\n        else{\n          uint256 makeEven = newTokens - 1;\n          uint256 halfTokens = makeEven/2;\n          LOKFundTokens = halfTokens;\n          account2Tokens = halfTokens + 1;\n          account1Tokens = LOKFundTokens - creatorTokens;\n          balances[account1Address] += account1Tokens;\n          balances[account2Address] += account2Tokens;\n        }\n        balances[creatorAddress] += creatorTokens;\n        CreateLOK(creatorAddress, creatorTokens);\n        CreateLOK(account1Address, account1Tokens);\n        CreateLOK(account2Address, account2Tokens);\n      // move to operational\n      if(!LockChainFundDeposit.send(this.balance)) throw;\n      isFinalized = true;  // send the eth to LockChain\n    }\n    function switchSaleStage() external {\n      if (msg.sender != LockChainFundDeposit) throw; // locks finalize to the ultimate ETH owner\n      if(isMainSale) throw;\n      if(!isPrePreSale){\n        isPrePreSale = true;\n        tokenExchangeRate = 1150;\n      }\n      else if (!isPreSale){\n        isPreSale = true;\n        tokenExchangeRate = 1000;\n      }\n      else if (!isMainSale){\n        isMainSale = true;\n        if (totalSupply < 10 * (10**6) * 10**decimals)\n        {\n          tokenExchangeRate = 750;\n        }\n        else if (totalSupply >= 10 * (10**6) * 10**decimals && totalSupply < 20 * (10**6) * 10**decimals)\n        {\n          tokenExchangeRate = 700;\n        }\n        else if (totalSupply >= 20 * (10**6) * 10**decimals && totalSupply < 30 * (10**6) * 10**decimals)\n        {\n          tokenExchangeRate = 650;\n        }\n        else if (totalSupply >= 30 * (10**6) * 10**decimals && totalSupply < 40 * (10**6) * 10**decimals)\n        {\n          tokenExchangeRate = 620;\n        }\n        else if (totalSupply >= 40 * (10**6) * 10**decimals && totalSupply <= 50 * (10**6) * 10**decimals)\n        {\n          tokenExchangeRate = 600;\n        }\n\n      }\n    }\n\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"account2Address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPrePreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSalePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LockChainFundDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"switchSaleStage\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPreSaleCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSaleCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"account1Address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMainSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prePreSalePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creatorAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"CreateLOK\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "6060604052604060405190810160405280600381526020017f312e300000000000000000000000000000000000000000000000000000000000815250600390805190602001906200005292919062000231565b506000600a5534156200006157fe5b5b6000600760146101000a81548160ff02191690831515021790555073013af31dc76255d3b33d2185a7148300882ebc7a600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073e0f2653e7928e6cb7c6d3206163b3e466a29c7c3600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507325bc70bfda877e1534151cb92d97ac5e69e1f53d600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073953ebf6c38c58c934d58b9b17d8f9d0f121218bb600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600760166101000a81548160ff0219169083151502179055506000600760156101000a81548160ff0219169083151502179055506000600760176101000a81548160ff02191690831515021790555060006000819055505b620002e0565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200027457805160ff1916838001178555620002a5565b82800160010185558215620002a5579182015b82811115620002a457825182559160200191906001019062000287565b5b509050620002b49190620002b8565b5090565b620002dd91905b80821115620002d9576000816000905550600101620002bf565b5090565b90565b61196580620002f06000396000f30060606040523615610147576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146102d3578063095ea7b31461036c5780630e4b0ba8146103c3578063132df6611461041557806318160ddd1461043f57806320689f291461046557806323b872dd1461048b5780632445703614610501578063279a34f114610553578063313ce567146105655780634172d0801461058b5780634bb278f3146105b15780634ced4734146105c357806354fd4d50146105ed5780635cf469ca1461068657806370a08231146106ac5780638d4e4083146106f6578063945aab471461072057806395d89b41146107465780639b5cfcdd146107df578063a9059cbb14610831578063d1f2efd514610888578063dd62ed3e146108b2578063e5664f651461091b578063e927fc5c14610941575b6102d15b60006000600760149054906101000a900460ff161561016a5760006000fd5b600760169054906101000a900460ff161580156101945750600760159054906101000a900460ff16155b80156101ad5750600760179054906101000a900460ff16155b156101b85760006000fd5b60003414156101c75760006000fd5b6101d334600a54610993565b91506101e1600054836109c8565b9050600760179054906101000a900460ff16151561021257806012600a0a6302faf0800210156102115760006000fd5b5b806012600a0a63093d1cc002101561022a5760006000fd5b8060008190555081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff167f1dd6f85e7c075ad85ff9419f72d87998d5fbdc2aefaec226813e79e48ff2b7d8836040518082815260200191505060405180910390a25b5050565b005b34156102db57fe5b6102e36109f4565b6040518080602001828103825283818151815260200191508051906020019080838360008314610332575b8051825260208311156103325760208201915060208101905060208303925061030e565b505050905090810190601f16801561035e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561037457fe5b6103a9600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a2e565b604051808215151515815260200191505060405180910390f35b34156103cb57fe5b6103d3610b21565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561041d57fe5b610425610b47565b604051808215151515815260200191505060405180910390f35b341561044757fe5b61044f610b5a565b6040518082815260200191505060405180910390f35b341561046d57fe5b610475610b60565b6040518082815260200191505060405180910390f35b341561049357fe5b6104e7600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b66565b604051808215151515815260200191505060405180910390f35b341561050957fe5b610511610de7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561055b57fe5b610563610e0d565b005b341561056d57fe5b610575611043565b6040518082815260200191505060405180910390f35b341561059357fe5b61059b611048565b6040518082815260200191505060405180910390f35b34156105b957fe5b6105c161104e565b005b34156105cb57fe5b6105d361157a565b604051808215151515815260200191505060405180910390f35b34156105f557fe5b6105fd61158d565b604051808060200182810382528381815181526020019150805190602001908083836000831461064c575b80518252602083111561064c57602082019150602081019050602083039250610628565b505050905090810190601f1680156106785780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561068e57fe5b61069661162b565b6040518082815260200191505060405180910390f35b34156106b457fe5b6106e0600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611639565b6040518082815260200191505060405180910390f35b34156106fe57fe5b610706611683565b604051808215151515815260200191505060405180910390f35b341561072857fe5b610730611696565b6040518082815260200191505060405180910390f35b341561074e57fe5b6107566116a4565b60405180806020018281038252838181518152602001915080519060200190808383600083146107a5575b8051825260208311156107a557602082019150602081019050602083039250610781565b505050905090810190601f1680156107d15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156107e757fe5b6107ef6116de565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561083957fe5b61086e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611704565b604051808215151515815260200191505060405180910390f35b341561089057fe5b610898611872565b604051808215151515815260200191505060405180910390f35b34156108ba57fe5b610905600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611885565b6040518082815260200191505060405180910390f35b341561092357fe5b61092b61190d565b6040518082815260200191505060405180910390f35b341561094957fe5b610951611913565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60006000828402905060008414806109b557508284828115156109b257fe5b04145b15156109bd57fe5b8091505b5092915050565b6000600082840190508381101580156109e15750828110155b15156109e957fe5b8091505b5092915050565b604060405190810160405280600981526020017f4c6f636b436861696e000000000000000000000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760169054906101000a900460ff1681565b60005481565b60085481565b600081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610c33575081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015610c3f5750600082115b15610dd65781600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050610de0565b60009050610de0565b5b9392505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e6a5760006000fd5b600760179054906101000a900460ff1615610e855760006000fd5b600760169054906101000a900460ff161515610ec4576001600760166101000a81548160ff02191690831515021790555061047e600a81905550611040565b600760159054906101000a900460ff161515610f03576001600760156101000a81548160ff0219169083151502179055506103e8600a8190555061103f565b600760179054906101000a900460ff16151561103e576001600760176101000a81548160ff0219169083151502179055506012600a0a62989680026000541015610f55576102ee600a8190555061103d565b6012600a0a629896800260005410158015610f7b57506012600a0a6301312d0002600054105b15610f8e576102bc600a8190555061103c565b6012600a0a6301312d000260005410158015610fb557506012600a0a6301c9c38002600054105b15610fc85761028a600a8190555061103b565b6012600a0a6301c9c3800260005410158015610fef57506012600a0a6302625a0002600054105b156110025761026c600a8190555061103a565b6012600a0a6302625a00026000541015801561102a57506012600a0a6302faf0800260005411155b1561103957610258600a819055505b5b5b5b5b5b5b5b5b565b601281565b600a5481565b60006000600060006000600060006000600760149054906101000a900460ff16156110795760006000fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110d65760006000fd5b60005497506012600a0a6127100294506110f2600054896109c8565b925082600081905550600060028981151561110957fe5b0614156112165760028881151561111c57fe5b04935060028881151561112b57fe5b04955084840396508660016000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508560016000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550611318565b60018803915060028281151561122857fe5b04905080935060018101955084840396508660016000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508560016000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8460016000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1dd6f85e7c075ad85ff9419f72d87998d5fbdc2aefaec226813e79e48ff2b7d8866040518082815260200191505060405180910390a2600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1dd6f85e7c075ad85ff9419f72d87998d5fbdc2aefaec226813e79e48ff2b7d8886040518082815260200191505060405180910390a2600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1dd6f85e7c075ad85ff9419f72d87998d5fbdc2aefaec226813e79e48ff2b7d8876040518082815260200191505060405180910390a2600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051809050600060405180830381858888f1935050505015156115545760006000fd5b6001600760146101000a81548160ff0219169083151502179055505b5050505050505050565b600760159054906101000a900460ff1681565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116235780601f106115f857610100808354040283529160200191611623565b820191906000526020600020905b81548152906001019060200180831161160657829003601f168201915b505050505081565b6012600a0a6302faf0800281565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b600760149054906101000a900460ff1681565b6012600a0a63093d1cc00281565b604060405190810160405280600381526020017f4c4f43000000000000000000000000000000000000000000000000000000000081525081565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156117555750600082115b156118625781600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905061186c565b6000905061186c565b5b92915050565b600760179054906101000a900460ff1681565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b60095481565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a723058204daa1249648271f158298c34a92029599cfbee2f097dc4156366b084cf53cfb70029"
}