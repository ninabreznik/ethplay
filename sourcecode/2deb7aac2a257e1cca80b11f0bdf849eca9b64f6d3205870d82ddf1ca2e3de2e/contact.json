{
  "address": "0x365542df3c8c9d096c5f0de24a0d8cf33c19c8fd",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HSN",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "pragma solidity ^0.4.25;\n// produced by the Solididy File Flattener (c) \n// contact : [emailÂ protected]\n// released under Apache 2.0 licence\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n constructor() public  {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_ = 0;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit  Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit  Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From HSN Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract MintableToken is StandardToken, Ownable {\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n\n    bool public mintingFinished = false;\n\n\n    modifier canMint() {\n      require(!mintingFinished);\n      _;\n    }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n\tfunction mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n\t\ttotalSupply_ = totalSupply_.add(_amount);\n\t\tbalances[_to] = balances[_to].add(_amount);\n\t\temit Mint(_to, _amount);\n\t\temit Transfer(address(0), _to, _amount);\n\t\treturn true;\n    }\n\n    /**\n    * @dev Function to stop minting new tokens.\n    * @return True if the operation was successful.\n    */\n    function finishMinting() onlyOwner canMint public returns (bool) {\n        mintingFinished = true;\n        emit MintFinished();\n        return true;\n    }\n}\n\ncontract HSN is MintableToken {\n\n    using SafeMath for uint256;\n    string public name = \"Hyper Speed Network\";\n    string public   symbol = \"HSN\";\n    uint public   decimals = 8;\n    bool public  TRANSFERS_ALLOWED = false;\n    uint256 public MAX_TOTAL_SUPPLY = 1000000000 * (10 **8);\n\n\n    struct LockParams {\n        uint256 TIME;\n        address ADDRESS;\n        uint256 AMOUNT;\n    }\n\n    //LockParams[] public  locks;\n    mapping(address => LockParams[]) private locks; \n\n    event Burn(address indexed burner, uint256 value);\n\n    function burnFrom(uint256 _value, address victim) onlyOwner canMint public{\n        require(_value <= balances[victim]);\n\n        balances[victim] = balances[victim].sub(_value);\n        totalSupply_ = totalSupply().sub(_value);\n\n        emit Burn(victim, _value);\n    }\n\n    function burn(uint256 _value) onlyOwner public {\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        totalSupply_ = totalSupply().sub(_value);\n\n        emit Burn(msg.sender, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public validAddress(_to) returns (bool) {\n        require(TRANSFERS_ALLOWED || msg.sender == owner);\n        require(canBeTransfered(_from, _value));\n\n        return super.transferFrom(_from, _to, _value);\n    }\n\n\n    function lock(address _to, uint256 releaseTime, uint256 lockamount) onlyOwner public returns (bool) {\n\n        // locks.push( LockParams({\n        //     TIME:releaseTime,\n        //     AMOUNT:lockamount,\n        //     ADDRESS:_to\n        // }));\n\n        LockParams memory lockdata;\n        lockdata.TIME = releaseTime;\n        lockdata.AMOUNT = lockamount;\n        lockdata.ADDRESS = _to;\n\n        locks[_to].push(lockdata);\n\n        return true;\n    }\n\n    function canBeTransfered(address _addr, uint256 value) public view validAddress(_addr) returns (bool){\n\t\tuint256 total = 0;\n        for (uint i=0; i < locks[_addr].length; i++) {\n            if (locks[_addr][i].TIME > now && locks[_addr][i].ADDRESS == _addr){\t\t\t\t\t\n\t\t\t\ttotal = total.add(locks[_addr][i].AMOUNT);                \n            }\n        }\n\t\t\n\t\tif ( value > balanceOf(_addr).sub(total)){\n            return false;\n        }\n        return true;\n    }\n\n\tfunction gettotalHold(address _addr) public view validAddress(_addr) returns (uint256){\n\t\trequire( msg.sender == _addr || msg.sender == owner);\n\t\t\n\t    uint256 total = 0;\n\t\tfor (uint i=0; i < locks[_addr].length; i++) {\n\t\t\tif (locks[_addr][i].TIME > now && locks[_addr][i].ADDRESS == _addr){\t\t\t\t\t\n\t\t\t\ttotal = total.add(locks[_addr][i].AMOUNT);                \n\t\t\t}\n\t\t}\n\t\t\t\n\t\treturn total;\n\t}\n\n    function mint(address _to, uint256 _amount) public validAddress(_to) onlyOwner canMint returns (bool) {\n\t\t\n        if (totalSupply_.add(_amount) > MAX_TOTAL_SUPPLY){\n            return false;\n        }\n\n        return super.mint(_to, _amount);\n    }\n\n\n    function transfer(address _to, uint256 _value) public validAddress(_to) returns (bool){\n        require(TRANSFERS_ALLOWED || msg.sender == owner);\n        require(canBeTransfered(msg.sender, _value));\n\n        return super.transfer(_to, _value);\n    }\n\n    function stopTransfers() onlyOwner public{\n        TRANSFERS_ALLOWED = false;\n    }\n\n    function resumeTransfers() onlyOwner public{\n        TRANSFERS_ALLOWED = true;\n    }\n\t\n\tfunction removeHoldByAddress(address _address) public onlyOwner {      \n        delete locks[_address];                 \n\t\tlocks[_address].length = 0; \n    }\n\n    function removeHoldByAddressIndex(address _address, uint256 _index) public onlyOwner {\n\t\tif (_index >= locks[_address].length) return;\n\t\t\n\t\tfor (uint256 i = _index; i < locks[_address].length-1; i++) {            \n\t\t\tlocks[_address][i] = locks[_address][i+1];\n        }\n\t\n        delete locks[_address][locks[_address].length-1];\n\t\tlocks[_address].length--;\n    }\n\t\n\tfunction isValidAddress(address _address) public view returns (bool) {\n        return (_address != 0x0 && _address != address(0) && _address != 0 && _address != address(this));\n    }\n\n    modifier validAddress(address _address) {\n        require(isValidAddress(_address)); \n        _;\n    }\n    \n    function getlockslen(address _address) public view onlyOwner returns (uint256){\n        return locks[_address].length;\n    }\n    //others can only lookup the unlock time and amount for itself\n    function getlocksbyindex(address _address, uint256 _index) public view returns (uint256 TIME,address ADDRESS,uint256 AMOUNT){\n\t\trequire( msg.sender == _address || msg.sender == owner);\n        return (locks[_address][_index].TIME,locks[_address][_index].ADDRESS,locks[_address][_index].AMOUNT);\n    }    \n\n}",
  "bytecode": "60006001556003805460a060020a60ff021916905560c0604052601360808190527f4879706572205370656564204e6574776f726b0000000000000000000000000060a0908152620000559160049190620000d1565b506040805180820190915260038082527f48534e000000000000000000000000000000000000000000000000000000000060209092019182526200009c91600591620000d1565b50600860068190556007805460ff1916905567016345785d8a0000905560038054600160a060020a0319163317905562000176565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200011457805160ff191683800117855562000144565b8280016001018555821562000144579182015b828111156200014457825182559160200191906001019062000127565b506200015292915062000156565b5090565b6200017391905b808211156200015257600081556001016200015d565b90565b61189380620001866000396000f30060806040526004361061017e5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416623f07fa811461018357806305d2035b146101b857806306fdde03146101cd578063095ea7b31461025757806318160ddd1461027b57806323b872dd146102a25780632ca01e1e146102cc578063313ce5671461031657806333039d3d1461032b57806340c10f191461034057806342966c6814610364578063661884631461037e57806370a08231146103a257806375a75ba9146103c35780637adac0e6146103d85780637d64bcb4146103ed578063880067dc146104025780638a56f3ee146104235780638da5cb5b1461044757806395d89b411461047857806397d425cb1461048d578063a0d08b18146104b1578063a9059cbb146104d2578063b66aae65146104f6578063c77a16ed14610517578063d73dd6231461052c578063dd62ed3e14610550578063e2ab691d14610577578063efbe31d51461059e578063f2fde38b146105c2575b600080fd5b34801561018f57600080fd5b506101a4600160a060020a03600435166105e3565b604080519115158252519081900360200190f35b3480156101c457600080fd5b506101a4610634565b3480156101d957600080fd5b506101e2610644565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561021c578181015183820152602001610204565b50505050905090810190601f1680156102495780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561026357600080fd5b506101a4600160a060020a03600435166024356106d2565b34801561028757600080fd5b50610290610738565b60408051918252519081900360200190f35b3480156102ae57600080fd5b506101a4600160a060020a036004358116906024351660443561073f565b3480156102d857600080fd5b506102f0600160a060020a03600435166024356107a5565b60408051938452600160a060020a03909216602084015282820152519081900360600190f35b34801561032257600080fd5b5061029061088d565b34801561033757600080fd5b50610290610893565b34801561034c57600080fd5b506101a4600160a060020a0360043516602435610899565b34801561037057600080fd5b5061037c600435610917565b005b34801561038a57600080fd5b506101a4600160a060020a03600435166024356109ce565b3480156103ae57600080fd5b50610290600160a060020a0360043516610abe565b3480156103cf57600080fd5b506101a4610ad9565b3480156103e457600080fd5b5061037c610ae2565b3480156103f957600080fd5b506101a4610b05565b34801561040e57600080fd5b50610290600160a060020a0360043516610b89565b34801561042f57600080fd5b5061037c600435600160a060020a0360243516610ce2565b34801561045357600080fd5b5061045c610dc9565b60408051600160a060020a039092168252519081900360200190f35b34801561048457600080fd5b506101e2610dd8565b34801561049957600080fd5b506101a4600160a060020a0360043516602435610e33565b3480156104bd57600080fd5b50610290600160a060020a0360043516610f61565b3480156104de57600080fd5b506101a4600160a060020a0360043516602435610f97565b34801561050257600080fd5b5061037c600160a060020a0360043516610ff3565b34801561052357600080fd5b5061037c611051565b34801561053857600080fd5b506101a4600160a060020a0360043516602435611077565b34801561055c57600080fd5b50610290600160a060020a0360043581169060243516611110565b34801561058357600080fd5b506101a4600160a060020a036004351660243560443561113b565b3480156105aa57600080fd5b5061037c600160a060020a03600435166024356111d4565b3480156105ce57600080fd5b5061037c600160a060020a036004351661138a565b6000600160a060020a038216158015906106055750600160a060020a03821615155b80156106195750600160a060020a03821615155b801561062e5750600160a060020a0382163014155b92915050565b60035460a060020a900460ff1681565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106ca5780601f1061069f576101008083540402835291602001916106ca565b820191906000526020600020905b8154815290600101906020018083116106ad57829003601f168201915b505050505081565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b6001545b90565b60008261074b816105e3565b151561075657600080fd5b60075460ff16806107715750600354600160a060020a031633145b151561077c57600080fd5b6107868584610e33565b151561079157600080fd5b61079c85858561141f565b95945050505050565b6000808033600160a060020a03861614806107ca5750600354600160a060020a031633145b15156107d557600080fd5b600160a060020a03851660009081526009602052604090208054859081106107f957fe5b60009182526020808320600390920290910154600160a060020a03881683526009909152604090912080548690811061082e57fe5b6000918252602080832060016003909302019190910154600160a060020a0389811684526009909252604090922080549190921691908790811061086e57fe5b9060005260206000209060030201600201549250925092509250925092565b60065481565b60085481565b6000826108a5816105e3565b15156108b057600080fd5b600354600160a060020a031633146108c757600080fd5b60035460a060020a900460ff16156108de57600080fd5b6008546001546108f4908563ffffffff61159616565b11156109035760009150610910565b61090d84846115ac565b91505b5092915050565b600354600160a060020a0316331461092e57600080fd5b3360009081526020819052604090205481111561094a57600080fd5b3360009081526020819052604090205461096a908263ffffffff6116b616565b3360009081526020819052604090205561099281610986610738565b9063ffffffff6116b616565b60015560408051828152905133917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a250565b336000908152600260209081526040808320600160a060020a038616845290915281205480831115610a2357336000908152600260209081526040808320600160a060020a0388168452909152812055610a58565b610a33818463ffffffff6116b616565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526020819052604090205490565b60075460ff1681565b600354600160a060020a03163314610af957600080fd5b6007805460ff19169055565b600354600090600160a060020a03163314610b1f57600080fd5b60035460a060020a900460ff1615610b3657600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600080600083610b98816105e3565b1515610ba357600080fd5b33600160a060020a0386161480610bc45750600354600160a060020a031633145b1515610bcf57600080fd5b60009250600091505b600160a060020a038516600090815260096020526040902054821015610cd957600160a060020a0385166000908152600960205260409020805442919084908110610c1f57fe5b906000526020600020906003020160000154118015610c7c5750600160a060020a0385166000818152600960205260409020805484908110610c5d57fe5b6000918252602090912060016003909202010154600160a060020a0316145b15610cce57600160a060020a03851660009081526009602052604090208054610ccb919084908110610caa57fe5b9060005260206000209060030201600201548461159690919063ffffffff16565b92505b600190910190610bd8565b50909392505050565b600354600160a060020a03163314610cf957600080fd5b60035460a060020a900460ff1615610d1057600080fd5b600160a060020a038116600090815260208190526040902054821115610d3557600080fd5b600160a060020a038116600090815260208190526040902054610d5e908363ffffffff6116b616565b600160a060020a038216600090815260208190526040902055610d8382610986610738565b600155604080518381529051600160a060020a038316917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a25050565b600354600160a060020a031681565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106ca5780601f1061069f576101008083540402835291602001916106ca565b600080600084610e42816105e3565b1515610e4d57600080fd5b60009250600091505b600160a060020a038616600090815260096020526040902054821015610f3657600160a060020a0386166000908152600960205260409020805442919084908110610e9d57fe5b906000526020600020906003020160000154118015610efa5750600160a060020a0386166000818152600960205260409020805484908110610edb57fe5b6000918252602090912060016003909202010154600160a060020a0316145b15610f2b57600160a060020a03861660009081526009602052604090208054610f28919084908110610caa57fe5b92505b600190910190610e56565b610f438361098688610abe565b851115610f535760009350610f58565b600193505b50505092915050565b600354600090600160a060020a03163314610f7b57600080fd5b50600160a060020a031660009081526009602052604090205490565b600082610fa3816105e3565b1515610fae57600080fd5b60075460ff1680610fc95750600354600160a060020a031633145b1515610fd457600080fd5b610fde3384610e33565b1515610fe957600080fd5b61090d84846116c8565b600354600160a060020a0316331461100a57600080fd5b600160a060020a038116600090815260096020526040812061102b916117a9565b600160a060020a038116600090815260096020526040812061104d90826117cd565b5050565b600354600160a060020a0316331461106857600080fd5b6007805460ff19166001179055565b336000908152600260209081526040808320600160a060020a03861684529091528120546110ab908363ffffffff61159616565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60006111456117f9565b600354600160a060020a0316331461115c57600080fd5b928352506040808301918252600160a060020a03938416602080850182815260009283526009825292822080546001808201835591845291909220945160039091029094019384559051838201805473ffffffffffffffffffffffffffffffffffffffff191691909516179093555160029091015590565b600354600090600160a060020a031633146111ee57600080fd5b600160a060020a038316600090815260096020526040902054821061121257611385565b50805b600160a060020a038316600090815260096020526040902054600019018110156112fc57600160a060020a038316600090815260096020526040902080546001830190811061126057fe5b90600052602060002090600302016009600085600160a060020a0316600160a060020a03168152602001908152602001600020828154811015156112a057fe5b600091825260209091208254600390920201908155600180830154818301805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909216919091179055600292830154929091019190915501611215565b600160a060020a03831660009081526009602052604090208054600019810190811061132457fe5b60009182526020808320600390920290910182815560018101805473ffffffffffffffffffffffffffffffffffffffff19169055600201829055600160a060020a038516825260099052604090208054906113839060001983016117cd565b505b505050565b600354600160a060020a031633146113a157600080fd5b600160a060020a03811615156113b657600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000600160a060020a038316151561143657600080fd5b600160a060020a03841660009081526020819052604090205482111561145b57600080fd5b600160a060020a038416600090815260026020908152604080832033845290915290205482111561148b57600080fd5b600160a060020a0384166000908152602081905260409020546114b4908363ffffffff6116b616565b600160a060020a0380861660009081526020819052604080822093909355908516815220546114e9908363ffffffff61159616565b600160a060020a0380851660009081526020818152604080832094909455918716815260028252828120338252909152205461152b908363ffffffff6116b616565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b6000828201838110156115a557fe5b9392505050565b600354600090600160a060020a031633146115c657600080fd5b60035460a060020a900460ff16156115dd57600080fd5b6001546115f0908363ffffffff61159616565b600155600160a060020a03831660009081526020819052604090205461161c908363ffffffff61159616565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350600192915050565b6000828211156116c257fe5b50900390565b6000600160a060020a03831615156116df57600080fd5b336000908152602081905260409020548211156116fb57600080fd5b3360009081526020819052604090205461171b908363ffffffff6116b616565b3360009081526020819052604080822092909255600160a060020a0385168152205461174d908363ffffffff61159616565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b50805460008255600302906000526020600020908101906117ca9190611824565b50565b815481835581811115611385576003028160030283600052602060002091820191016113859190611824565b606060405190810160405280600081526020016000600160a060020a03168152602001600081525090565b61073c91905b8082111561186357600080825560018201805473ffffffffffffffffffffffffffffffffffffffff19169055600282015560030161182a565b50905600a165627a7a72305820b8e0bf6826f5b83a5fa26c9417d4d83924ba356d0f2c56cb9cabff2e826d25ac0029"
}