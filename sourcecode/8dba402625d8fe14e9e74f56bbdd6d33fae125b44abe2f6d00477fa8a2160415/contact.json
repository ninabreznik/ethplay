{
  "address": "0xbd2bd1bd6396e69112d1f51cbaa57842cd1586c4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GameEthContractV1",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-04\n*/\n\npragma solidity ^0.4.0;\n\ncontract GameEthContractV1{\n\naddress owner;\nmapping (address => uint256) deposits;\nmapping (address => uint256) totalPaid;\nmapping (address => uint256) paydates;\nmapping (address => uint256) notToPay;\n\nuint minWei = 40000000000000000; // default 0.04 ether\nuint secInDay = 86400; // min payment step 1 day (in seconds)\nuint gasForPayout = 50000; // gas used for payout\nuint lastBlockTime;\nuint inCommission = 3; // deposit commission 3%\n\nevent DepositIn(\n        address indexed _from,\n        uint256 _value,\n        uint256 _date\n    );\n    \nevent PayOut(\n        address indexed _from,\n        uint256 _value,\n        uint256 _date\n    );\n    \n\nconstructor(address _owner) public {\n\towner = _owner; \n\tlastBlockTime = now;\n}\n\n// Payable method, payouts for message sender\nfunction () public payable{\n \trequire(now >= lastBlockTime && msg.value >= minWei); // last block time < block.timestamp, check min deposit\n \tlastBlockTime = now; // set last block time to block.timestamp\n \tuint256 com = msg.value/100*inCommission; // 3% commission\n \tuint256 amount = msg.value - com; // deposit amount is amount - commission\n \tif (deposits[msg.sender] > 0){\n \t\t// repeating payment\n \t\tuint256 daysGone = (now - paydates[msg.sender]) / secInDay;\t// days gone before this payment, and not included in next payout\n \t\tnotToPay[msg.sender] += amount/100*daysGone; // keep amount that does not have to be paid \n \t}else{\n \t\t// new payment \n \t\tpaydates[msg.sender] = now; // set paydate to block.timestamp\n \t}\n    deposits[msg.sender] += amount; // update deposit amount\n    emit DepositIn(msg.sender, msg.value, now); // emit deposit in event\n    owner.transfer(com); // transfer commission to contract owner\n}\n\n// Payable method, payout will be paid to specific address\nfunction  depositForRecipent(address payoutAddress) public  payable{\n \trequire(now >= lastBlockTime && msg.value >= minWei); // last block time < block.timestamp, check min deposit\n \tlastBlockTime = now; // set last block time to block.timestamp\n \tuint256 com = msg.value/100*inCommission; // 3% commission\n \tuint256 amount = msg.value - com; // deposit amount is amount - commission\n \tif (deposits[payoutAddress] > 0){\n \t\t// repeating payment\n \t\tuint256 daysGone = (now - paydates[payoutAddress]) / secInDay;\t// days gone before this payment, and not included in next payout\n \t\tnotToPay[payoutAddress] += amount/100*daysGone; // keep amount that does not have to be paid \n \t}else{\n \t\t// new payment\n \t\tpaydates[payoutAddress] = now; // set paydate to block.timestamp\n \t}\n    deposits[payoutAddress] += amount; // update deposit amount\n    emit DepositIn(payoutAddress, msg.value, now); // emit deposit in event\n    owner.transfer(com); // transfer commission to contract owner\n}\n\n// transfer ownership\nfunction transferOwnership(address newOwnerAddress) public {\n\trequire (msg.sender == owner); // check function called by contract owner\n\towner = newOwnerAddress;\n}\n\n\n// function used by client direct calls, for direct contract interaction, gas paid by function caller in this case\nfunction payOut() public {\n\t\trequire(deposits[msg.sender] > 0); // check is message sender deposited an funds\n\t\trequire(paydates[msg.sender] < now); // check is lastPayDate < block.timestamp \n\t\tuint256 payForDays = (now - paydates[msg.sender]) / secInDay; // days from last payment\n        require(payForDays >= 30);\n\t\tpay(msg.sender,false,payForDays); // don't withdraw tx gass fee, because fee paid by function caller\n}\n\n// function used by contrcat owner for automatic payouts from representative site\n// gas price paid by contract owner and because of that gasPrice will be withdrawn from payout amount\nfunction payOutFor(address _recipient) public {\n\t\trequire(msg.sender == owner && deposits[_recipient] > 0); // check is message sender is contract owner and recipients was deposited funds\n\t\trequire(paydates[_recipient] < now); // check is lastPayDate < block.timestamp\n\t\tuint256 payForDays = (now - paydates[_recipient]) / secInDay; // days from last payment\n        require(payForDays >= 30); \n\t\tpay(_recipient, true,payForDays); // pay with withdraw tx gas fee because fee paid by contract owner\n}\n\n\nfunction pay(address _recipient, bool calcGasPrice,uint256 payForDays) private {\n        uint256 payAmount = 0;\n        payAmount = deposits[_recipient]/100*payForDays - notToPay[_recipient]; // calculate payout one percent per day - amount that does not have to be paid\n        if (payAmount >= address(this).balance){\n        \tpayAmount = address(this).balance;\n        }\n        assert(payAmount > 0); // check is pay amount > 0 and payAmount <= contract balance \n        if (calcGasPrice){\n        \t// if calcGasPrice calculate tx gas price to cover transaction fee\n        \tuint256 com = gasForPayout * tx.gasprice; // fixed gas per tx * tx.gasprice\n        \tassert(com < payAmount);   // commission must be < pay amount\n        \tpayAmount = payAmount - com; // remaining pay amount = pay amount - commission\n        \towner.transfer(com); // withdraw tx gas fee to contract owner\n        }\n        paydates[_recipient] = now; // update last pay date to block.timestamp\n        _recipient.transfer(payAmount); // transfer funds to recipient\n        totalPaid[_recipient] += payAmount; // update total paid amount\n        notToPay[_recipient] = 0; // clear not to pay amount\n        emit PayOut(_recipient, payAmount, now);  // emit event\n}\n\n\n\nfunction totalDepositOf(address _sender) public constant returns (uint256 deposit) {\n        return deposits[_sender];\n}\n\nfunction lastPayDateOf(address _sender) public constant returns (uint256 secFromEpoch) {\n        return paydates[_sender];\n}\n\nfunction totalPaidOf(address _sender) public constant returns (uint256 paid) {\n        return totalPaid[_sender];\n}\n\n}",
  "bytecode": "6080604052668e1bc9bf0400006005556201518060065561c350600755600360095534801561002d57600080fd5b506040516020806107b2833981016040525160008054600160a060020a03909216600160a060020a03199092169190911790554260085561073f806100736000396000f3006080604052600436106100825763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166308fb693981146101bf5780637fdb5396146101f2578063c205240314610213578063c58cb9e31461022a578063c5d511e11461024b578063cd8ceab11461026c578063f2fde38b14610280575b6000806000600854421015801561009b57506005543410155b15156100a657600080fd5b42600855600954336000908152600160205260408120546064349081049093029550918590039350101561011a576006543360009081526003602052604090205442038115156100f257fe5b049050806064833360009081526004602052604090208054929091049290920201905561012d565b3360009081526003602052604090204290555b336000818152600160209081526040918290208054860190558151348152429181019190915281517f6439bd23bf3460778472dcb4e23dc85b651eb062baab7508f56156be125c2b86929181900390910190a260008054604051600160a060020a039091169185156108fc02918691818181858888f193505050501580156101b9573d6000803e3d6000fd5b50505050005b3480156101cb57600080fd5b506101e0600160a060020a03600435166102a1565b60408051918252519081900360200190f35b3480156101fe57600080fd5b506101e0600160a060020a03600435166102bc565b34801561021f57600080fd5b506102286102d7565b005b34801561023657600080fd5b50610228600160a060020a036004351661034b565b34801561025757600080fd5b506101e0600160a060020a03600435166103f3565b610228600160a060020a036004351661040e565b34801561028c57600080fd5b50610228600160a060020a0360043516610583565b600160a060020a031660009081526002602052604090205490565b600160a060020a031660009081526003602052604090205490565b3360009081526001602052604081205481106102f257600080fd5b33600090815260036020526040902054421161030d57600080fd5b60065433600090815260036020526040902054420381151561032b57fe5b049050601e81101561033c57600080fd5b610348336000836105c9565b50565b60008054600160a060020a03163314801561037c5750600160a060020a038216600090815260016020526040812054115b151561038757600080fd5b600160a060020a03821660009081526003602052604090205442116103ab57600080fd5b600654600160a060020a03831660009081526003602052604090205442038115156103d257fe5b049050601e8110156103e357600080fd5b6103ef826001836105c9565b5050565b600160a060020a031660009081526001602052604090205490565b6000806000600854421015801561042757506005543410155b151561043257600080fd5b4260085560095460643404029250823403915060006001600086600160a060020a0316600160a060020a031681526020019081526020016000205411156104cb57600654600160a060020a038516600090815260036020526040902054420381151561049a57fe5b04905080606483600160a060020a0387166000908152600460205260409020805492909104929092020190556104e7565b600160a060020a03841660009081526003602052604090204290555b600160a060020a0384166000818152600160209081526040918290208054860190558151348152429181019190915281517f6439bd23bf3460778472dcb4e23dc85b651eb062baab7508f56156be125c2b86929181900390910190a260008054604051600160a060020a039091169185156108fc02918691818181858888f1935050505015801561057c573d6000803e3d6000fd5b5050505050565b600054600160a060020a0316331461059a57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a038316600090815260046020908152604080832054600190925282205460649004830203903031821061060257303191505b6000821161060c57fe5b831561066157506007543a0281811061062157fe5b600080546040519383900393600160a060020a039091169183156108fc02918491818181858888f1935050505015801561065f573d6000803e3d6000fd5b505b600160a060020a0385166000818152600360205260408082204290555184156108fc0291859190818181858888f193505050501580156106a5573d6000803e3d6000fd5b50600160a060020a038516600081815260026020908152604080832080548701905560048252808320929092558151858152429181019190915281517fafe5bde68f2dccddb6979d04a1dceb6099fe0ceda6bfc2c37e3a40ed8195d90f929181900390910190a250505050505600a165627a7a723058207b6c55959d3c8e975790f679234f982785bc966cf8a408fbb42e8d82151749e80029000000000000000000000000ebc8ec4e89730c41995f57b7fe497a6032f7917a",
  "constructorArguments": "000000000000000000000000ebc8ec4e89730c41995f57b7fe497a6032f7917a"
}