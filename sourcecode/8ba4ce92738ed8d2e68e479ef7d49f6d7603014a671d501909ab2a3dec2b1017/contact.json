{
  "address": "0x7f27b0598949dbf9e539bbd217f15bf3f5e97999",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CreateOrder",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": true,
  "runs": "500",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-09\n*/\n\npragma solidity 0.4.20;\n\ncontract IAugur {\n    function createChildUniverse(bytes32 _parentPayoutDistributionHash, uint256[] _parentPayoutNumerators, bool _parentInvalid) public returns (IUniverse);\n    function isKnownUniverse(IUniverse _universe) public view returns (bool);\n    function trustedTransfer(ERC20 _token, address _from, address _to, uint256 _amount) public returns (bool);\n    function logMarketCreated(bytes32 _topic, string _description, string _extraInfo, IUniverse _universe, address _market, address _marketCreator, bytes32[] _outcomes, int256 _minPrice, int256 _maxPrice, IMarket.MarketType _marketType) public returns (bool);\n    function logMarketCreated(bytes32 _topic, string _description, string _extraInfo, IUniverse _universe, address _market, address _marketCreator, int256 _minPrice, int256 _maxPrice, IMarket.MarketType _marketType) public returns (bool);\n    function logInitialReportSubmitted(IUniverse _universe, address _reporter, address _market, uint256 _amountStaked, bool _isDesignatedReporter, uint256[] _payoutNumerators, bool _invalid) public returns (bool);\n    function disputeCrowdsourcerCreated(IUniverse _universe, address _market, address _disputeCrowdsourcer, uint256[] _payoutNumerators, uint256 _size, bool _invalid) public returns (bool);\n    function logDisputeCrowdsourcerContribution(IUniverse _universe, address _reporter, address _market, address _disputeCrowdsourcer, uint256 _amountStaked) public returns (bool);\n    function logDisputeCrowdsourcerCompleted(IUniverse _universe, address _market, address _disputeCrowdsourcer) public returns (bool);\n    function logInitialReporterRedeemed(IUniverse _universe, address _reporter, address _market, uint256 _amountRedeemed, uint256 _repReceived, uint256 _reportingFeesReceived, uint256[] _payoutNumerators) public returns (bool);\n    function logDisputeCrowdsourcerRedeemed(IUniverse _universe, address _reporter, address _market, uint256 _amountRedeemed, uint256 _repReceived, uint256 _reportingFeesReceived, uint256[] _payoutNumerators) public returns (bool);\n    function logFeeWindowRedeemed(IUniverse _universe, address _reporter, uint256 _amountRedeemed, uint256 _reportingFeesReceived) public returns (bool);\n    function logMarketFinalized(IUniverse _universe) public returns (bool);\n    function logMarketMigrated(IMarket _market, IUniverse _originalUniverse) public returns (bool);\n    function logReportingParticipantDisavowed(IUniverse _universe, IMarket _market) public returns (bool);\n    function logMarketParticipantsDisavowed(IUniverse _universe) public returns (bool);\n    function logOrderCanceled(IUniverse _universe, address _shareToken, address _sender, bytes32 _orderId, Order.Types _orderType, uint256 _tokenRefund, uint256 _sharesRefund) public returns (bool);\n    function logOrderCreated(Order.Types _orderType, uint256 _amount, uint256 _price, address _creator, uint256 _moneyEscrowed, uint256 _sharesEscrowed, bytes32 _tradeGroupId, bytes32 _orderId, IUniverse _universe, address _shareToken) public returns (bool);\n    function logOrderFilled(IUniverse _universe, address _shareToken, address _filler, bytes32 _orderId, uint256 _numCreatorShares, uint256 _numCreatorTokens, uint256 _numFillerShares, uint256 _numFillerTokens, uint256 _marketCreatorFees, uint256 _reporterFees, uint256 _amountFilled, bytes32 _tradeGroupId) public returns (bool);\n    function logCompleteSetsPurchased(IUniverse _universe, IMarket _market, address _account, uint256 _numCompleteSets) public returns (bool);\n    function logCompleteSetsSold(IUniverse _universe, IMarket _market, address _account, uint256 _numCompleteSets) public returns (bool);\n    function logTradingProceedsClaimed(IUniverse _universe, address _shareToken, address _sender, address _market, uint256 _numShares, uint256 _numPayoutTokens, uint256 _finalTokenBalance) public returns (bool);\n    function logUniverseForked() public returns (bool);\n    function logFeeWindowTransferred(IUniverse _universe, address _from, address _to, uint256 _value) public returns (bool);\n    function logReputationTokensTransferred(IUniverse _universe, address _from, address _to, uint256 _value) public returns (bool);\n    function logDisputeCrowdsourcerTokensTransferred(IUniverse _universe, address _from, address _to, uint256 _value) public returns (bool);\n    function logShareTokensTransferred(IUniverse _universe, address _from, address _to, uint256 _value) public returns (bool);\n    function logReputationTokenBurned(IUniverse _universe, address _target, uint256 _amount) public returns (bool);\n    function logReputationTokenMinted(IUniverse _universe, address _target, uint256 _amount) public returns (bool);\n    function logShareTokenBurned(IUniverse _universe, address _target, uint256 _amount) public returns (bool);\n    function logShareTokenMinted(IUniverse _universe, address _target, uint256 _amount) public returns (bool);\n    function logFeeWindowBurned(IUniverse _universe, address _target, uint256 _amount) public returns (bool);\n    function logFeeWindowMinted(IUniverse _universe, address _target, uint256 _amount) public returns (bool);\n    function logDisputeCrowdsourcerTokensBurned(IUniverse _universe, address _target, uint256 _amount) public returns (bool);\n    function logDisputeCrowdsourcerTokensMinted(IUniverse _universe, address _target, uint256 _amount) public returns (bool);\n    function logFeeWindowCreated(IFeeWindow _feeWindow, uint256 _id) public returns (bool);\n    function logFeeTokenTransferred(IUniverse _universe, address _from, address _to, uint256 _value) public returns (bool);\n    function logFeeTokenBurned(IUniverse _universe, address _target, uint256 _amount) public returns (bool);\n    function logFeeTokenMinted(IUniverse _universe, address _target, uint256 _amount) public returns (bool);\n    function logTimestampSet(uint256 _newTimestamp) public returns (bool);\n    function logInitialReporterTransferred(IUniverse _universe, IMarket _market, address _from, address _to) public returns (bool);\n    function logMarketTransferred(IUniverse _universe, address _from, address _to) public returns (bool);\n    function logMarketMailboxTransferred(IUniverse _universe, IMarket _market, address _from, address _to) public returns (bool);\n    function logEscapeHatchChanged(bool _isOn) public returns (bool);\n}\n\ncontract IControlled {\n    function getController() public view returns (IController);\n    function setController(IController _controller) public returns(bool);\n}\n\ncontract Controlled is IControlled {\n    IController internal controller;\n\n    modifier onlyWhitelistedCallers {\n        require(controller.assertIsWhitelisted(msg.sender));\n        _;\n    }\n\n    modifier onlyCaller(bytes32 _key) {\n        require(msg.sender == controller.lookup(_key));\n        _;\n    }\n\n    modifier onlyControllerCaller {\n        require(IController(msg.sender) == controller);\n        _;\n    }\n\n    modifier onlyInGoodTimes {\n        require(controller.stopInEmergency());\n        _;\n    }\n\n    modifier onlyInBadTimes {\n        require(controller.onlyInEmergency());\n        _;\n    }\n\n    function Controlled() public {\n        controller = IController(msg.sender);\n    }\n\n    function getController() public view returns(IController) {\n        return controller;\n    }\n\n    function setController(IController _controller) public onlyControllerCaller returns(bool) {\n        controller = _controller;\n        return true;\n    }\n}\n\ncontract IController {\n    function assertIsWhitelisted(address _target) public view returns(bool);\n    function lookup(bytes32 _key) public view returns(address);\n    function stopInEmergency() public view returns(bool);\n    function onlyInEmergency() public view returns(bool);\n    function getAugur() public view returns (IAugur);\n    function getTimestamp() public view returns (uint256);\n}\n\ncontract CashAutoConverter is Controlled {\n    /**\n     * @dev Convert any ETH provided in the transaction into Cash before the function executes and convert any remaining Cash balance into ETH after the function completes\n     */\n    modifier convertToAndFromCash() {\n        ethToCash();\n        _;\n        cashToEth();\n    }\n\n    function ethToCash() private returns (bool) {\n        if (msg.value > 0) {\n            ICash(controller.lookup(\"Cash\")).depositEtherFor.value(msg.value)(msg.sender);\n        }\n        return true;\n    }\n\n    function cashToEth() private returns (bool) {\n        ICash _cash = ICash(controller.lookup(\"Cash\"));\n        uint256 _tokenBalance = _cash.balanceOf(msg.sender);\n        if (_tokenBalance > 0) {\n            IAugur augur = controller.getAugur();\n            augur.trustedTransfer(_cash, msg.sender, this, _tokenBalance);\n            _cash.withdrawEtherTo(msg.sender, _tokenBalance);\n        }\n        return true;\n    }\n}\n\ncontract IOwnable {\n    function getOwner() public view returns (address);\n    function transferOwnership(address newOwner) public returns (bool);\n}\n\ncontract ITyped {\n    function getTypeName() public view returns (bytes32);\n}\n\ncontract Initializable {\n    bool private initialized = false;\n\n    modifier afterInitialized {\n        require(initialized);\n        _;\n    }\n\n    modifier beforeInitialized {\n        require(!initialized);\n        _;\n    }\n\n    function endInitialization() internal beforeInitialized returns (bool) {\n        initialized = true;\n        return true;\n    }\n\n    function getInitialized() public view returns (bool) {\n        return initialized;\n    }\n}\n\ncontract MarketValidator is Controlled {\n    modifier marketIsLegit(IMarket _market) {\n        IUniverse _universe = _market.getUniverse();\n        require(controller.getAugur().isKnownUniverse(_universe));\n        require(_universe.isContainerForMarket(_market));\n        _;\n    }\n}\n\ncontract ReentrancyGuard {\n    /**\n     * @dev We use a single lock for the whole contract.\n     */\n    bool private rentrancyLock = false;\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * @notice If you mark a function `nonReentrant`, you should also mark it `external`. Calling one nonReentrant function from another is not supported. Instead, you can implement a `private` function doing the actual work, and a `external` wrapper marked as `nonReentrant`.\n     */\n    modifier nonReentrant() {\n        require(!rentrancyLock);\n        rentrancyLock = true;\n        _;\n        rentrancyLock = false;\n    }\n}\n\nlibrary SafeMathUint256 {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        require(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a <= b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a >= b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n\n    function getUint256Min() internal pure returns (uint256) {\n        return 0;\n    }\n\n    function getUint256Max() internal pure returns (uint256) {\n        return 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n    }\n\n    function isMultipleOf(uint256 a, uint256 b) internal pure returns (bool) {\n        return a % b == 0;\n    }\n\n    // Float [fixed point] Operations\n    function fxpMul(uint256 a, uint256 b, uint256 base) internal pure returns (uint256) {\n        return div(mul(a, b), base);\n    }\n\n    function fxpDiv(uint256 a, uint256 b, uint256 base) internal pure returns (uint256) {\n        return div(mul(a, base), b);\n    }\n}\n\ncontract ERC20Basic {\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function balanceOf(address _who) public view returns (uint256);\n    function transfer(address _to, uint256 _value) public returns (bool);\n    function totalSupply() public view returns (uint256);\n}\n\ncontract ERC20 is ERC20Basic {\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function allowance(address _owner, address _spender) public view returns (uint256);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n    function approve(address _spender, uint256 _value) public returns (bool);\n}\n\ncontract IFeeToken is ERC20, Initializable {\n    function initialize(IFeeWindow _feeWindow) public returns (bool);\n    function getFeeWindow() public view returns (IFeeWindow);\n    function feeWindowBurn(address _target, uint256 _amount) public returns (bool);\n    function mintForReportingParticipant(address _target, uint256 _amount) public returns (bool);\n}\n\ncontract IFeeWindow is ITyped, ERC20 {\n    function initialize(IUniverse _universe, uint256 _feeWindowId) public returns (bool);\n    function getUniverse() public view returns (IUniverse);\n    function getReputationToken() public view returns (IReputationToken);\n    function getStartTime() public view returns (uint256);\n    function getEndTime() public view returns (uint256);\n    function getNumMarkets() public view returns (uint256);\n    function getNumInvalidMarkets() public view returns (uint256);\n    function getNumIncorrectDesignatedReportMarkets() public view returns (uint256);\n    function getNumDesignatedReportNoShows() public view returns (uint256);\n    function getFeeToken() public view returns (IFeeToken);\n    function isActive() public view returns (bool);\n    function isOver() public view returns (bool);\n    function onMarketFinalized() public returns (bool);\n    function buy(uint256 _attotokens) public returns (bool);\n    function redeem(address _sender) public returns (bool);\n    function redeemForReportingParticipant() public returns (bool);\n    function mintFeeTokens(uint256 _amount) public returns (bool);\n    function trustedUniverseBuy(address _buyer, uint256 _attotokens) public returns (bool);\n}\n\ncontract IMailbox {\n    function initialize(address _owner, IMarket _market) public returns (bool);\n    function depositEther() public payable returns (bool);\n}\n\ncontract IMarket is ITyped, IOwnable {\n    enum MarketType {\n        YES_NO,\n        CATEGORICAL,\n        SCALAR\n    }\n\n    function initialize(IUniverse _universe, uint256 _endTime, uint256 _feePerEthInAttoeth, ICash _cash, address _designatedReporterAddress, address _creator, uint256 _numOutcomes, uint256 _numTicks) public payable returns (bool _success);\n    function derivePayoutDistributionHash(uint256[] _payoutNumerators, bool _invalid) public view returns (bytes32);\n    function getUniverse() public view returns (IUniverse);\n    function getFeeWindow() public view returns (IFeeWindow);\n    function getNumberOfOutcomes() public view returns (uint256);\n    function getNumTicks() public view returns (uint256);\n    function getDenominationToken() public view returns (ICash);\n    function getShareToken(uint256 _outcome)  public view returns (IShareToken);\n    function getMarketCreatorSettlementFeeDivisor() public view returns (uint256);\n    function getForkingMarket() public view returns (IMarket _market);\n    function getEndTime() public view returns (uint256);\n    function getMarketCreatorMailbox() public view returns (IMailbox);\n    function getWinningPayoutDistributionHash() public view returns (bytes32);\n    function getWinningPayoutNumerator(uint256 _outcome) public view returns (uint256);\n    function getReputationToken() public view returns (IReputationToken);\n    function getFinalizationTime() public view returns (uint256);\n    function getInitialReporterAddress() public view returns (address);\n    function deriveMarketCreatorFeeAmount(uint256 _amount) public view returns (uint256);\n    function isContainerForShareToken(IShareToken _shadyTarget) public view returns (bool);\n    function isContainerForReportingParticipant(IReportingParticipant _reportingParticipant) public view returns (bool);\n    function isInvalid() public view returns (bool);\n    function finalize() public returns (bool);\n    function designatedReporterWasCorrect() public view returns (bool);\n    function designatedReporterShowed() public view returns (bool);\n    function isFinalized() public view returns (bool);\n    function finalizeFork() public returns (bool);\n    function assertBalances() public view returns (bool);\n}\n\ncontract IReportingParticipant {\n    function getStake() public view returns (uint256);\n    function getPayoutDistributionHash() public view returns (bytes32);\n    function liquidateLosing() public returns (bool);\n    function redeem(address _redeemer) public returns (bool);\n    function isInvalid() public view returns (bool);\n    function isDisavowed() public view returns (bool);\n    function migrate() public returns (bool);\n    function getPayoutNumerator(uint256 _outcome) public view returns (uint256);\n    function getMarket() public view returns (IMarket);\n    function getSize() public view returns (uint256);\n}\n\ncontract IDisputeCrowdsourcer is IReportingParticipant, ERC20 {\n    function initialize(IMarket market, uint256 _size, bytes32 _payoutDistributionHash, uint256[] _payoutNumerators, bool _invalid) public returns (bool);\n    function contribute(address _participant, uint256 _amount) public returns (uint256);\n}\n\ncontract IReputationToken is ITyped, ERC20 {\n    function initialize(IUniverse _universe) public returns (bool);\n    function migrateOut(IReputationToken _destination, uint256 _attotokens) public returns (bool);\n    function migrateIn(address _reporter, uint256 _attotokens) public returns (bool);\n    function trustedReportingParticipantTransfer(address _source, address _destination, uint256 _attotokens) public returns (bool);\n    function trustedMarketTransfer(address _source, address _destination, uint256 _attotokens) public returns (bool);\n    function trustedFeeWindowTransfer(address _source, address _destination, uint256 _attotokens) public returns (bool);\n    function trustedUniverseTransfer(address _source, address _destination, uint256 _attotokens) public returns (bool);\n    function getUniverse() public view returns (IUniverse);\n    function getTotalMigrated() public view returns (uint256);\n    function getTotalTheoreticalSupply() public view returns (uint256);\n    function mintForReportingParticipant(uint256 _amountMigrated) public returns (bool);\n}\n\ncontract IUniverse is ITyped {\n    function initialize(IUniverse _parentUniverse, bytes32 _parentPayoutDistributionHash) external returns (bool);\n    function fork() public returns (bool);\n    function getParentUniverse() public view returns (IUniverse);\n    function createChildUniverse(uint256[] _parentPayoutNumerators, bool _invalid) public returns (IUniverse);\n    function getChildUniverse(bytes32 _parentPayoutDistributionHash) public view returns (IUniverse);\n    function getReputationToken() public view returns (IReputationToken);\n    function getForkingMarket() public view returns (IMarket);\n    function getForkEndTime() public view returns (uint256);\n    function getForkReputationGoal() public view returns (uint256);\n    function getParentPayoutDistributionHash() public view returns (bytes32);\n    function getDisputeRoundDurationInSeconds() public view returns (uint256);\n    function getOrCreateFeeWindowByTimestamp(uint256 _timestamp) public returns (IFeeWindow);\n    function getOrCreateCurrentFeeWindow() public returns (IFeeWindow);\n    function getOrCreateNextFeeWindow() public returns (IFeeWindow);\n    function getOpenInterestInAttoEth() public view returns (uint256);\n    function getRepMarketCapInAttoeth() public view returns (uint256);\n    function getTargetRepMarketCapInAttoeth() public view returns (uint256);\n    function getOrCacheValidityBond() public returns (uint256);\n    function getOrCacheDesignatedReportStake() public returns (uint256);\n    function getOrCacheDesignatedReportNoShowBond() public returns (uint256);\n    function getOrCacheReportingFeeDivisor() public returns (uint256);\n    function getDisputeThresholdForFork() public view returns (uint256);\n    function getInitialReportMinValue() public view returns (uint256);\n    function calculateFloatingValue(uint256 _badMarkets, uint256 _totalMarkets, uint256 _targetDivisor, uint256 _previousValue, uint256 _defaultValue, uint256 _floor) public pure returns (uint256 _newValue);\n    function getOrCacheMarketCreationCost() public returns (uint256);\n    function getCurrentFeeWindow() public view returns (IFeeWindow);\n    function getOrCreateFeeWindowBefore(IFeeWindow _feeWindow) public returns (IFeeWindow);\n    function isParentOf(IUniverse _shadyChild) public view returns (bool);\n    function updateTentativeWinningChildUniverse(bytes32 _parentPayoutDistributionHash) public returns (bool);\n    function isContainerForFeeWindow(IFeeWindow _shadyTarget) public view returns (bool);\n    function isContainerForMarket(IMarket _shadyTarget) public view returns (bool);\n    function isContainerForReportingParticipant(IReportingParticipant _reportingParticipant) public view returns (bool);\n    function isContainerForShareToken(IShareToken _shadyTarget) public view returns (bool);\n    function isContainerForFeeToken(IFeeToken _shadyTarget) public view returns (bool);\n    function addMarketTo() public returns (bool);\n    function removeMarketFrom() public returns (bool);\n    function decrementOpenInterest(uint256 _amount) public returns (bool);\n    function decrementOpenInterestFromMarket(uint256 _amount) public returns (bool);\n    function incrementOpenInterest(uint256 _amount) public returns (bool);\n    function incrementOpenInterestFromMarket(uint256 _amount) public returns (bool);\n    function getWinningChildUniverse() public view returns (IUniverse);\n    function isForking() public view returns (bool);\n}\n\ncontract CreateOrder is CashAutoConverter, ReentrancyGuard, MarketValidator {\n    using Order for Order.Data;\n\n    // CONSIDER: Do we want the API to be in terms of shares as it is now, or would the desired amount of ETH to place be preferable? Would both be useful?\n    function publicCreateOrder(Order.Types _type, uint256 _attoshares, uint256 _displayPrice, IMarket _market, uint256 _outcome, bytes32 _betterOrderId, bytes32 _worseOrderId, bytes32 _tradeGroupId) external payable marketIsLegit(_market) convertToAndFromCash onlyInGoodTimes returns (bytes32) {\n        bytes32 _result = this.createOrder(msg.sender, _type, _attoshares, _displayPrice, _market, _outcome, _betterOrderId, _worseOrderId, _tradeGroupId);\n        _market.assertBalances();\n        return _result;\n    }\n\n    function createOrder(address _creator, Order.Types _type, uint256 _attoshares, uint256 _displayPrice, IMarket _market, uint256 _outcome, bytes32 _betterOrderId, bytes32 _worseOrderId, bytes32 _tradeGroupId) external onlyWhitelistedCallers nonReentrant returns (bytes32) {\n        Order.Data memory _orderData = Order.create(controller, _creator, _outcome, _type, _attoshares, _displayPrice, _market, _betterOrderId, _worseOrderId);\n        Order.escrowFunds(_orderData);\n        require(_orderData.orders.getAmount(_orderData.getOrderId()) == 0);\n        return Order.saveOrder(_orderData, _tradeGroupId);\n    }\n}\n\ncontract ICash is ERC20 {\n    function depositEther() external payable returns(bool);\n    function depositEtherFor(address _to) external payable returns(bool);\n    function withdrawEther(uint256 _amount) external returns(bool);\n    function withdrawEtherTo(address _to, uint256 _amount) external returns(bool);\n    function withdrawEtherToIfPossible(address _to, uint256 _amount) external returns (bool);\n}\n\ncontract ICreateOrder {\n    function publicCreateOrder(Order.Types, uint256, uint256, IMarket, uint256, bytes32, bytes32, bytes32) external payable returns (bytes32);\n    function createOrder(address, Order.Types, uint256, uint256, IMarket, uint256, bytes32, bytes32, bytes32) external returns (bytes32);\n}\n\ncontract IOrders {\n    function saveOrder(Order.Types _type, IMarket _market, uint256 _fxpAmount, uint256 _price, address _sender, uint256 _outcome, uint256 _moneyEscrowed, uint256 _sharesEscrowed, bytes32 _betterOrderId, bytes32 _worseOrderId, bytes32 _tradeGroupId) public returns (bytes32 _orderId);\n    function removeOrder(bytes32 _orderId) public returns (bool);\n    function getMarket(bytes32 _orderId) public view returns (IMarket);\n    function getOrderType(bytes32 _orderId) public view returns (Order.Types);\n    function getOutcome(bytes32 _orderId) public view returns (uint256);\n    function getAmount(bytes32 _orderId) public view returns (uint256);\n    function getPrice(bytes32 _orderId) public view returns (uint256);\n    function getOrderCreator(bytes32 _orderId) public view returns (address);\n    function getOrderSharesEscrowed(bytes32 _orderId) public view returns (uint256);\n    function getOrderMoneyEscrowed(bytes32 _orderId) public view returns (uint256);\n    function getBetterOrderId(bytes32 _orderId) public view returns (bytes32);\n    function getWorseOrderId(bytes32 _orderId) public view returns (bytes32);\n    function getBestOrderId(Order.Types _type, IMarket _market, uint256 _outcome) public view returns (bytes32);\n    function getWorstOrderId(Order.Types _type, IMarket _market, uint256 _outcome) public view returns (bytes32);\n    function getLastOutcomePrice(IMarket _market, uint256 _outcome) public view returns (uint256);\n    function getOrderId(Order.Types _type, IMarket _market, uint256 _fxpAmount, uint256 _price, address _sender, uint256 _blockNumber, uint256 _outcome, uint256 _moneyEscrowed, uint256 _sharesEscrowed) public pure returns (bytes32);\n    function getTotalEscrowed(IMarket _market) public view returns (uint256);\n    function isBetterPrice(Order.Types _type, uint256 _price, bytes32 _orderId) public view returns (bool);\n    function isWorsePrice(Order.Types _type, uint256 _price, bytes32 _orderId) public view returns (bool);\n    function assertIsNotBetterPrice(Order.Types _type, uint256 _price, bytes32 _betterOrderId) public view returns (bool);\n    function assertIsNotWorsePrice(Order.Types _type, uint256 _price, bytes32 _worseOrderId) public returns (bool);\n    function recordFillOrder(bytes32 _orderId, uint256 _sharesFilled, uint256 _tokensFilled) public returns (bool);\n    function setPrice(IMarket _market, uint256 _outcome, uint256 _price) external returns (bool);\n    function incrementTotalEscrowed(IMarket _market, uint256 _amount) external returns (bool);\n    function decrementTotalEscrowed(IMarket _market, uint256 _amount) external returns (bool);\n}\n\ncontract IShareToken is ITyped, ERC20 {\n    function initialize(IMarket _market, uint256 _outcome) external returns (bool);\n    function createShares(address _owner, uint256 _amount) external returns (bool);\n    function destroyShares(address, uint256 balance) external returns (bool);\n    function getMarket() external view returns (IMarket);\n    function getOutcome() external view returns (uint256);\n    function trustedOrderTransfer(address _source, address _destination, uint256 _attotokens) public returns (bool);\n    function trustedFillOrderTransfer(address _source, address _destination, uint256 _attotokens) public returns (bool);\n    function trustedCancelOrderTransfer(address _source, address _destination, uint256 _attotokens) public returns (bool);\n}\n\nlibrary Order {\n    using SafeMathUint256 for uint256;\n\n    enum Types {\n        Bid, Ask\n    }\n\n    enum TradeDirections {\n        Long, Short\n    }\n\n    struct Data {\n        // Contracts\n        IOrders orders;\n        IMarket market;\n        IAugur augur;\n\n        // Order\n        bytes32 id;\n        address creator;\n        uint256 outcome;\n        Order.Types orderType;\n        uint256 amount;\n        uint256 price;\n        uint256 sharesEscrowed;\n        uint256 moneyEscrowed;\n        bytes32 betterOrderId;\n        bytes32 worseOrderId;\n    }\n\n    //\n    // Constructor\n    //\n\n    // No validation is needed here as it is simply a librarty function for organizing data\n    function create(IController _controller, address _creator, uint256 _outcome, Order.Types _type, uint256 _attoshares, uint256 _price, IMarket _market, bytes32 _betterOrderId, bytes32 _worseOrderId) internal view returns (Data) {\n        require(_outcome < _market.getNumberOfOutcomes());\n        require(_price < _market.getNumTicks());\n\n        IOrders _orders = IOrders(_controller.lookup(\"Orders\"));\n        IAugur _augur = _controller.getAugur();\n\n        return Data({\n            orders: _orders,\n            market: _market,\n            augur: _augur,\n            id: 0,\n            creator: _creator,\n            outcome: _outcome,\n            orderType: _type,\n            amount: _attoshares,\n            price: _price,\n            sharesEscrowed: 0,\n            moneyEscrowed: 0,\n            betterOrderId: _betterOrderId,\n            worseOrderId: _worseOrderId\n        });\n    }\n\n    //\n    // \"public\" functions\n    //\n\n    function getOrderId(Order.Data _orderData) internal view returns (bytes32) {\n        if (_orderData.id == bytes32(0)) {\n            bytes32 _orderId = _orderData.orders.getOrderId(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, block.number, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed);\n            require(_orderData.orders.getAmount(_orderId) == 0);\n            _orderData.id = _orderId;\n        }\n        return _orderData.id;\n    }\n\n    function getOrderTradingTypeFromMakerDirection(Order.TradeDirections _creatorDirection) internal pure returns (Order.Types) {\n        return (_creatorDirection == Order.TradeDirections.Long) ? Order.Types.Bid : Order.Types.Ask;\n    }\n\n    function getOrderTradingTypeFromFillerDirection(Order.TradeDirections _fillerDirection) internal pure returns (Order.Types) {\n        return (_fillerDirection == Order.TradeDirections.Long) ? Order.Types.Ask : Order.Types.Bid;\n    }\n\n    function escrowFunds(Order.Data _orderData) internal returns (bool) {\n        if (_orderData.orderType == Order.Types.Ask) {\n            return escrowFundsForAsk(_orderData);\n        } else if (_orderData.orderType == Order.Types.Bid) {\n            return escrowFundsForBid(_orderData);\n        }\n    }\n\n    function saveOrder(Order.Data _orderData, bytes32 _tradeGroupId) internal returns (bytes32) {\n        return _orderData.orders.saveOrder(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed, _orderData.betterOrderId, _orderData.worseOrderId, _tradeGroupId);\n    }\n\n    //\n    // Private functions\n    //\n\n    function escrowFundsForBid(Order.Data _orderData) private returns (bool) {\n        require(_orderData.moneyEscrowed == 0);\n        require(_orderData.sharesEscrowed == 0);\n        uint256 _attosharesToCover = _orderData.amount;\n        uint256 _numberOfOutcomes = _orderData.market.getNumberOfOutcomes();\n\n        // Figure out how many almost-complete-sets (just missing `outcome` share) the creator has\n        uint256 _attosharesHeld = 2**254;\n        for (uint256 _i = 0; _i < _numberOfOutcomes; _i++) {\n            if (_i != _orderData.outcome) {\n                uint256 _creatorShareTokenBalance = _orderData.market.getShareToken(_i).balanceOf(_orderData.creator);\n                _attosharesHeld = SafeMathUint256.min(_creatorShareTokenBalance, _attosharesHeld);\n            }\n        }\n\n        // Take shares into escrow if they have any almost-complete-sets\n        if (_attosharesHeld > 0) {\n            _orderData.sharesEscrowed = SafeMathUint256.min(_attosharesHeld, _attosharesToCover);\n            _attosharesToCover -= _orderData.sharesEscrowed;\n            for (_i = 0; _i < _numberOfOutcomes; _i++) {\n                if (_i != _orderData.outcome) {\n                    _orderData.market.getShareToken(_i).trustedOrderTransfer(_orderData.creator, _orderData.market, _orderData.sharesEscrowed);\n                }\n            }\n        }\n        // If not able to cover entire order with shares alone, then cover remaining with tokens\n        if (_attosharesToCover > 0) {\n            _orderData.moneyEscrowed = _attosharesToCover.mul(_orderData.price);\n            require(_orderData.augur.trustedTransfer(_orderData.market.getDenominationToken(), _orderData.creator, _orderData.market, _orderData.moneyEscrowed));\n        }\n\n        return true;\n    }\n\n    function escrowFundsForAsk(Order.Data _orderData) private returns (bool) {\n        require(_orderData.moneyEscrowed == 0);\n        require(_orderData.sharesEscrowed == 0);\n        IShareToken _shareToken = _orderData.market.getShareToken(_orderData.outcome);\n        uint256 _attosharesToCover = _orderData.amount;\n\n        // Figure out how many shares of the outcome the creator has\n        uint256 _attosharesHeld = _shareToken.balanceOf(_orderData.creator);\n\n        // Take shares in escrow if user has shares\n        if (_attosharesHeld > 0) {\n            _orderData.sharesEscrowed = SafeMathUint256.min(_attosharesHeld, _attosharesToCover);\n            _attosharesToCover -= _orderData.sharesEscrowed;\n            _shareToken.trustedOrderTransfer(_orderData.creator, _orderData.market, _orderData.sharesEscrowed);\n        }\n\n        // If not able to cover entire order with shares alone, then cover remaining with tokens\n        if (_attosharesToCover > 0) {\n            _orderData.moneyEscrowed = _orderData.market.getNumTicks().sub(_orderData.price).mul(_attosharesToCover);\n            require(_orderData.augur.trustedTransfer(_orderData.market.getDenominationToken(), _orderData.creator, _orderData.market, _orderData.moneyEscrowed));\n        }\n\n        return true;\n    }\n}",
  "bytecode": "606060405260008054600160a060020a033316600160a860020a0319909116179055611896806100306000396000f3006060604052600436106100485763ffffffff60e060020a6000350416633018205f811461004d5780633ae4ce0a1461007c57806392eefe9b146100ba578063f7938328146100ed575b600080fd5b341561005857600080fd5b61006061012e565b604051600160a060020a03909116815260200160405180910390f35b6100a860ff60043516602435604435600160a060020a036064351660843560a43560c43560e43561013d565b60405190815260200160405180910390f35b34156100c557600080fd5b6100d9600160a060020a03600435166104d1565b604051901515815260200160405180910390f35b34156100f857600080fd5b6100a8600160a060020a0360043581169060ff602435169060443590606435906084351660a43560c43560e4356101043561051e565b600054600160a060020a031690565b60008086600081600160a060020a031663870c426d6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561018957600080fd5b6102c65a03f1151561019a57600080fd5b505050604051805160008054919350600160a060020a039091169150634e94c82990604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156101f157600080fd5b6102c65a03f1151561020257600080fd5b50505060405180519050600160a060020a0316638cfb8f218260006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561026257600080fd5b6102c65a03f1151561027357600080fd5b50505060405180519050151561028857600080fd5b80600160a060020a0316639f7e1bf68360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156102df57600080fd5b6102c65a03f115156102f057600080fd5b50505060405180519050151561030557600080fd5b61030d6106e2565b5060008054600160a060020a0316906322763ae190604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561035757600080fd5b6102c65a03f1151561036857600080fd5b50505060405180519050151561037d57600080fd5b30600160a060020a031663f7938328338e8e8e8e8e8e8e8e6000604051602001526040518a63ffffffff1660e060020a028152600401808a600160a060020a0316600160a060020a031681526020018960018111156103d857fe5b60ff168152602080820199909952604080820198909852600160a060020a03909616606087015250608085019390935260a084019190915260c083015260e08201526101000193509091505180830381600087803b151561043857600080fd5b6102c65a03f1151561044957600080fd5b5050506040518051935050600160a060020a03891663a0695f246000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561049a57600080fd5b6102c65a03f115156104ab57600080fd5b50505060405180519050508293506104c16107ef565b5050505098975050505050505050565b6000805433600160a060020a039081169116146104ed57600080fd5b506000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03831617905560015b919050565b60006105286117fe565b60008054600160a060020a031690633f08882f9033906040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561058357600080fd5b6102c65a03f1151561059457600080fd5b5050506040518051905015156105a957600080fd5b60005474010000000000000000000000000000000000000000900460ff16156105d157600080fd5b6000805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000179081905561062290600160a060020a03168c888d8d8d8d8c8c610a6f565b905061062d81610ce2565b508051600160a060020a0316630e0a0d7461064783610d2d565b60006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561068657600080fd5b6102c65a03f1151561069757600080fd5b50505060405180511590506106ab57600080fd5b6106b58184610ec9565b6000805474ff0000000000000000000000000000000000000000191690559b9a5050505050505050505050565b6000803411156107e95760008054600160a060020a03169063f39ec1f7906040516020015260405160e060020a63ffffffff83160281527f43617368000000000000000000000000000000000000000000000000000000006004820152602401602060405180830381600087803b151561075b57600080fd5b6102c65a03f1151561076c57600080fd5b50505060405180519050600160a060020a0316634faa8a26343360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390911660048201526024016020604051808303818588803b15156107cc57600080fd5b6125ee5a03f115156107dd57600080fd5b50505050604051805150505b50600190565b60008054819081908190600160a060020a031663f39ec1f7826040516020015260405160e060020a63ffffffff83160281527f43617368000000000000000000000000000000000000000000000000000000006004820152602401602060405180830381600087803b151561086357600080fd5b6102c65a03f1151561087457600080fd5b5050506040518051935050600160a060020a0383166370a082313360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156108d657600080fd5b6102c65a03f115156108e757600080fd5b50505060405180519250506000821115610a655760008054600160a060020a031690634e94c82990604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561094457600080fd5b6102c65a03f1151561095557600080fd5b5050506040518051915050600160a060020a03811663ec2389948433308660006040516020015260405160e060020a63ffffffff8716028152600160a060020a0394851660048201529284166024840152921660448201526064810191909152608401602060405180830381600087803b15156109d157600080fd5b6102c65a03f115156109e257600080fd5b50505060405180515050600160a060020a038316631baffe38338460006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610a4957600080fd5b6102c65a03f11515610a5a57600080fd5b505050604051805150505b6001935050505090565b610a776117fe565b60008085600160a060020a03166327ce5b8c6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610ac057600080fd5b6102c65a03f11515610ad157600080fd5b50505060405180518b109050610ae657600080fd5b85600160a060020a031663bad84c9e6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610b2c57600080fd5b6102c65a03f11515610b3d57600080fd5b505050604051805188109050610b5257600080fd5b8b600160a060020a031663f39ec1f760006040516020015260405160e060020a63ffffffff83160281527f4f726465727300000000000000000000000000000000000000000000000000006004820152602401602060405180830381600087803b1515610bbe57600080fd5b6102c65a03f11515610bcf57600080fd5b5050506040518051925050600160a060020a038c16634e94c8296000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610c2057600080fd5b6102c65a03f11515610c3157600080fd5b5050506040518051905090506101a06040519081016040528083600160a060020a0316815260200187600160a060020a0316815260200182600160a060020a0316815260200160006001026000191681526020018c600160a060020a031681526020018b81526020018a6001811115610ca657fe5b8152602081018a905260408101899052600060608201819052608082015260a0810187905260c001859052925050509998505050505050505050565b600060018260c001516001811115610cf657fe5b1415610d0c57610d0582610fdb565b9050610519565b60008260c001516001811115610d1e57fe5b141561051957610d0582611355565b6000808060608401511415610ebd578251600160a060020a0316631727583c8460c0015185602001518660e001518761010001518860800151438a60a001518b61014001518c61012001516000604051602001526040518a63ffffffff1660e060020a028152600401808a6001811115610da357fe5b60ff16815260200189600160a060020a0316600160a060020a0316815260200188815260200187815260200186600160a060020a0316600160a060020a031681526020018581526020018481526020018381526020018281526020019950505050505050505050602060405180830381600087803b1515610e2357600080fd5b6102c65a03f11515610e3457600080fd5b5050506040518051915083905051600160a060020a0316630e0a0d748260006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515610e9057600080fd5b6102c65a03f11515610ea157600080fd5b5050506040518051159050610eb557600080fd5b606083018190525b82606001519392505050565b60008251600160a060020a0316636bc29efa8460c0015185602001518660e0015187610100015188608001518960a001518a61014001518b61012001518c61016001518d61018001518d6000604051602001526040518c63ffffffff1660e060020a028152600401808c6001811115610f3e57fe5b60ff168152600160a060020a039b8c1660208083019190915260408083019c909c52606082019a909a5297909a16608088015260a087019590955260c086019390935260e085019190915261010084015261012083015261014082015261016001935091505180830381600087803b1515610fb857600080fd5b6102c65a03f11515610fc957600080fd5b50505060405180519150505b92915050565b60008060008084610140015115610ff157600080fd5b8461012001511561100157600080fd5b8460200151600160a060020a03166365957bf58660a0015160006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561105857600080fd5b6102c65a03f1151561106957600080fd5b505050604051805193505060e0850151915082600160a060020a03166370a08231866080015160006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156110d657600080fd5b6102c65a03f115156110e757600080fd5b505050604051805191505060008111156111a55761110581836117a4565b6101208601908152518203915082600160a060020a031663764c92f28660800151876020015188610120015160006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561118957600080fd5b6102c65a03f1151561119a57600080fd5b505050604051805150505b600082111561134a576112388261122c8761010001518860200151600160a060020a031663bad84c9e6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561120557600080fd5b6102c65a03f1151561121657600080fd5b505050604051805191905063ffffffff6117bb16565b9063ffffffff6117d016565b6101408601526040850151600160a060020a031663ec2389948660200151600160a060020a031663df2a29da6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561129b57600080fd5b6102c65a03f115156112ac57600080fd5b505050604051805190508760800151886020015189610140015160006040516020015260405160e060020a63ffffffff8716028152600160a060020a0394851660048201529284166024840152921660448201526064810191909152608401602060405180830381600087803b151561132457600080fd5b6102c65a03f1151561133557600080fd5b50505060405180519050151561134a57600080fd5b506001949350505050565b6000806000806000808661014001511561136e57600080fd5b8661012001511561137e57600080fd5b8660e0015194508660200151600160a060020a03166327ce5b8c6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156113cf57600080fd5b6102c65a03f115156113e057600080fd5b505050604051805194507f4000000000000000000000000000000000000000000000000000000000000000935060009250505b83821015611523578660a001518214611518578660200151600160a060020a03166365957bf58360006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561147957600080fd5b6102c65a03f1151561148a57600080fd5b50505060405180519050600160a060020a03166370a08231886080015160006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156114ee57600080fd5b6102c65a03f115156114ff57600080fd5b50505060405180519050905061151581846117a4565b92505b600190910190611413565b60008311156116665761153683866117a4565b61012088019081525185039450600091505b83821015611666578660a00151821461165b578660200151600160a060020a03166365957bf58360006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b15156115ae57600080fd5b6102c65a03f115156115bf57600080fd5b50505060405180519050600160a060020a031663764c92f2886080015189602001518a610120015160006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561163f57600080fd5b6102c65a03f1151561165057600080fd5b505050604051805150505b600190910190611548565b600085111561179757611685876101000151869063ffffffff6117d016565b6101408801526040870151600160a060020a031663ec2389948860200151600160a060020a031663df2a29da6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156116e857600080fd5b6102c65a03f115156116f957600080fd5b5050506040518051905089608001518a602001518b610140015160006040516020015260405160e060020a63ffffffff8716028152600160a060020a0394851660048201529284166024840152921660448201526064810191909152608401602060405180830381600087803b151561177157600080fd5b6102c65a03f1151561178257600080fd5b50505060405180519050151561179757600080fd5b5060019695505050505050565b60008183116117b4575081610fd5565b5080610fd5565b6000828211156117ca57600080fd5b50900390565b60008282028315806117ec57508284828115156117e957fe5b04145b15156117f757600080fd5b9392505050565b6101a06040519081016040908152600080835260208301819052908201819052606082018190526080820181905260a0820181905260c0820181905260e082018190526101008201819052610120820181905261014082018190526101608201819052610180820152905600a165627a7a72305820e23ee3a29760a37f35879e35283137df0b309aeffded7c28374f996a65fb48ad0029"
}