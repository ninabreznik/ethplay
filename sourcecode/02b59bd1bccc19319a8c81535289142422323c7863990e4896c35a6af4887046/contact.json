{
  "address": "0x6198149b79afe8114dc07b46a01d94a6af304ed9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Whitelist",
  "compilerVersion": "v0.5.6+commit.b259423e",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-01\n*/\n\npragma solidity 0.5.6;\n\n/// @author The Calystral Team\n/// @title A subscriber contract\ncontract Whitelist {\n    /// This mapping contains the index and subscriber addresses.\n    mapping (uint => address) subscriberIndexToAddress;\n\n    /// This mapping contains the addresses and subscriber status.\n    mapping (address => uint) subscriberAddressToSubscribed;\n\n    /// The current subscriber index.\n    /// Caution: This wiil be likely unequal to the actual subscriber amount.\n    /// This will be used as the index of a new subscriber.\n    /// We start at 1 because 0 will be the indicator that an address is not a subscriber.\n    uint subscriberIndex = 1;\n\n    /// This event will be triggered when a subscription was done.\n    event OnSubscribed(address subscriberAddress);\n\n    /// This event will be triggered when a subscription was revoked.\n    event OnUnsubscribed(address subscriberAddress);\n\n    /// This modifier prevents other smart contracts from subscribing.\n    modifier isNotAContract(){\n        require (msg.sender == tx.origin, \"Contracts are not allowed to interact.\");\n        _;\n    }\n    \n    /// Fall back to the subscribe function if no specific function was called.\n    function() external {\n        subscribe();\n    }\n    \n    /// Gets the subscriber list.\n    function getSubscriberList() external view returns (address[] memory) {\n        uint subscriberListAmount = getSubscriberAmount();\n        \n        address[] memory subscriberList = new address[](subscriberListAmount);\n        uint subscriberListCounter = 0;\n        \n        /// Iterate over all subscriber addresses, to fill the subscriberList.\n        for (uint i = 1; i < subscriberIndex; i++) {\n            address subscriberAddress = subscriberIndexToAddress[i];\n\n            /// Add the addresses which are actual subscribers only.\n            if (isSubscriber(subscriberAddress) == true) {\n                subscriberList[subscriberListCounter] = subscriberAddress;\n                subscriberListCounter++;\n            }\n        }\n\n        return subscriberList;\n    }\n\n    /// Gets the amount of subscriber.\n    function getSubscriberAmount() public view returns (uint) {\n        uint subscriberListAmount = 0;\n\n        /// Iterate over all subscriber addresses, to get the actual subscriber amount.\n        for (uint i = 1; i < subscriberIndex; i++) {\n            address subscriberAddress = subscriberIndexToAddress[i];\n            \n            /// Count the addresses which are actual subscribers only.\n            if (isSubscriber(subscriberAddress) == true) {\n                subscriberListAmount++;\n            }\n        }\n\n        return subscriberListAmount;\n    }\n\n    /// The sender's address will be added to the subscriber list\n    function subscribe() public isNotAContract {\n        require(isSubscriber(msg.sender) == false, \"You already subscribed.\");\n        \n        // New subscriber\n        subscriberAddressToSubscribed[msg.sender] = subscriberIndex;\n        subscriberIndexToAddress[subscriberIndex] = msg.sender;\n        subscriberIndex++;\n\n        emit OnSubscribed(msg.sender);\n    }\n\n    /// The sender's subscribtion will be revoked.\n    function unsubscribe() external isNotAContract {\n        require(isSubscriber(msg.sender) == true, \"You have not subscribed yet.\");\n\n        uint index = subscriberAddressToSubscribed[msg.sender];\n        delete subscriberIndexToAddress[index];\n\n        emit OnUnsubscribed(msg.sender);\n    }\n    \n    /// Checks wheter the transaction origin address is in the subscriber list\n    function isSubscriber() external view returns (bool) {\n        return isSubscriber(tx.origin);\n    }\n\n    /// Checks wheter the given address is in the subscriber list\n    function isSubscriber(address subscriberAddress) public view returns (bool) {\n        return subscriberIndexToAddress[subscriberAddressToSubscribed[subscriberAddress]] != address(0);\n    }\n}",
  "bytecode": "6080604052600160025534801561001557600080fd5b50610811806100256000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630fcafefe1461006c5780631fcb4ee41461008a57806351d5d80d146100ac5780638f449a051461010b578063c4804ef014610115578063fcae448414610171575b61006a61017b565b005b610074610391565b6040518082815260200191505060405180910390f35b610092610414565b604051808215151515815260200191505060405180910390f35b6100b4610424565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156100f75780820151818401526020810190506100dc565b505050509050019250505060405180910390f35b61011361017b565b005b6101576004803603602081101561012b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610530565b604051808215151515815260200191505060405180910390f35b6101796105da565b005b3273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806107c06026913960400191505060405180910390fd5b6000151561020c33610530565b151514610281576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f596f7520616c726561647920737562736372696265642e00000000000000000081525060200191505060405180910390fd5b600254600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555033600080600254815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506002600081548092919060010191905055507fea9dde00ed9f1133889d723ccfcd41c6d6cc3120be2c167eae94d8b65b463f0133604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b600080600090506000600190505b60025481101561040c57600080600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600115156103ed82610530565b151514156103fe5782806001019350505b50808060010191505061039f565b508091505090565b600061041f32610530565b905090565b60606000610430610391565b90506060816040519080825280602002602001820160405280156104635781602001602082028038833980820191505090505b50905060008090506000600190505b60025481101561052657600080600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600115156104c082610530565b1515141561051857808484815181106104d557fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082806001019350505b508080600101915050610472565b5081935050505090565b60008073ffffffffffffffffffffffffffffffffffffffff16600080600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b3273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461065e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806107c06026913960400191505060405180910390fd5b6001151561066b33610530565b1515146106e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f596f752068617665206e6f742073756273637269626564207965742e0000000081525060200191505060405180910390fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690557f8d2aae3bd92acf221b185992d11dffa4ff32f3b5f8d9a474d3b7a6ccf067a32133604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a15056fe436f6e74726163747320617265206e6f7420616c6c6f77656420746f20696e7465726163742ea165627a7a723058203041e3c29dabd5cb2867a06109783ea68e825983169f91b10904647ef43306530029"
}