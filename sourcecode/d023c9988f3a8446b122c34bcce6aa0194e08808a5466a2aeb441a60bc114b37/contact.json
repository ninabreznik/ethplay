{
  "address": "0xadab9077a22eadefbe1676c6d269fbe0551b1d27",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "InfinityWell",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-19\n*/\n\npragma solidity ^0.4.25;\n\n/*******************************************************************************\n *\n * Copyright (c) 2019 Decentralization Authority MDAO.\n * Released under the MIT License.\n *\n * InfinityWell - An ERC Gift Box, encouraging the democratic distribution\n *                of value using transparent game theory.\n * \n *                Miners collect InfinityStones, redemable towards a share \n *                from ANY ERC-20 tokens / collectibles available in the well.\n *\n *                To learn more, please visit:\n *                https://infinitywell.info\n * \n * Version 19.4.19\n *\n * https://d14na.org\n * [emailÂ protected]\n */\n\n\n/*******************************************************************************\n *\n * SafeMath\n */\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\n\n\n/*******************************************************************************\n *\n * ERC Token Standard #20 Interface\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n */\ncontract ERC20Interface {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n\n/*******************************************************************************\n *\n * ApproveAndCallFallBack\n *\n * Contract function to receive approval and execute function in one call\n * (borrowed from MiniMeToken)\n */\ncontract ApproveAndCallFallBack {\n    function approveAndCall(address spender, uint tokens, bytes data) public;\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n}\n\n\n/*******************************************************************************\n *\n * Owned contract\n */\ncontract Owned {\n    address public owner;\n    address public newOwner;\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n\n        emit OwnershipTransferred(owner, newOwner);\n\n        owner = newOwner;\n\n        newOwner = address(0);\n    }\n}\n\n\n/*******************************************************************************\n * \n * Zer0netDb Interface\n */\ncontract Zer0netDbInterface {\n    /* Interface getters. */\n    function getAddress(bytes32 _key) external view returns (address);\n    function getBool(bytes32 _key)    external view returns (bool);\n    function getBytes(bytes32 _key)   external view returns (bytes);\n    function getInt(bytes32 _key)     external view returns (int);\n    function getString(bytes32 _key)  external view returns (string);\n    function getUint(bytes32 _key)    external view returns (uint);\n\n    /* Interface setters. */\n    function setAddress(bytes32 _key, address _value) external;\n    function setBool(bytes32 _key, bool _value) external;\n    function setBytes(bytes32 _key, bytes _value) external;\n    function setInt(bytes32 _key, int _value) external;\n    function setString(bytes32 _key, string _value) external;\n    function setUint(bytes32 _key, uint _value) external;\n\n    /* Interface deletes. */\n    function deleteAddress(bytes32 _key) external;\n    function deleteBool(bytes32 _key) external;\n    function deleteBytes(bytes32 _key) external;\n    function deleteInt(bytes32 _key) external;\n    function deleteString(bytes32 _key) external;\n    function deleteUint(bytes32 _key) external;\n}\n\n\n/*******************************************************************************\n *\n * ZeroCache Interface\n */\ncontract ZeroCacheInterface {\n    function balanceOf(address _token, address _owner) public constant returns (uint balance);\n    function deposit(address _token, address _from, uint _tokens, bytes _data) external returns (bool success);\n    function transfer(address _token, address _to, uint _tokens) external returns (bool success);\n    function transfer(address _token, address _from, address _to, uint _tokens, address _staekholder, uint _staek, uint _expires, uint _nonce, bytes _signature) external returns (bool success);\n    function withdraw(address _token, uint _tokens) public returns (bool success);\n}\n\n\n/*******************************************************************************\n *\n * @notice InfinityWell\n * \n *         An eternal laborinth of ERC tokens and collectibles PERMANENTLY\n *         trapped in this bottomless well, until released by the good fortune \n *         of an InfinityStone HODLer.\n *\n * @dev This is a non-discriminatory, public ERC gift box.\n * \n *      InfinityStone\n *      -------------\n * \n *      A precious stone minted exclusively by the InfinityWell for the sole\n *      purpose of gifting \"random\" ERC tokens & collectibles to its HODLers. \n * \n *      When redeeming a FULL InfinityStone, a FULL 5% of a random token \n *      is awarded; partial redemptions will be awarded pro-rata, based the\n *      amount of stone submitted to the forge.\n * \n *      NOTE: TOP100 token & collectible values are reported (in real-time) \n *            by the Zero(Cache) Price Index (ZPI).\n * \n *          <1 0STONE => up to 5% of a random TOP100 token\n *                       NO COLLECTIBLE BONUS\n * \n *           1 0STONE => 5% balance of a random TOP100 token\n *                       Bonus: 1 random TOP100 collectible\n * \n *           3 0STONE => 5% balance of a random TOP30 token\n *                       Bonus: 1 random TOP30 collectible\n * \n *          10 0STONE => 5% balance of a random TOP10 token\n *                       Bonus: 1 random TOP10 collectible\n * \n *      Bonuses DO NOT apply to \"partial\" InfinityStone redemptions.\n *      (eg. 1/2 a 0STONE will award 2.5% in an ERC-20's tokens, but NO collectible)\n * \n */\ncontract InfinityWell is ERC20Interface, Owned {\n    using SafeMath for uint;\n\n    /* Initialize Zer0net Db contract. */\n    Zer0netDbInterface private _zer0netDb;\n\n    /**\n     * Set Namespace\n     * \n     * Provides a \"unique\" name for generating \"unique\" data identifiers,\n     * most commonly used as database \"key-value\" keys.\n     * \n     * NOTE: Use of `namespace` is REQUIRED when generating ANY & ALL\n     *       Zer0netDb keys; in order to prevent ANY accidental or\n     *       malicious SQL-injection vulnerabilities / attacks.\n     */\n    string private _namespace = 'infinitywell';\n\n    /**\n     * ERC-20 Interface Initialization\n     */\n    string public symbol;\n    string public name;\n    uint8 public decimals;\n    uint private _totalForged;\n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) allowed;\n\n    event Destroy(\n        address indexed minado, \n        uint tokens\n    );\n\n    event Forge(\n        address indexed minado, \n        uint tokens\n    );\n\n    /***************************************************************************\n     *\n     * Constructor\n     * \n     * STAEK ONLY TOKEN\n     * ----------------\n     * \n     * NEW InfinityStones can only be forged from STAEKing ZeroGold.\n     */\n    constructor() public {\n        /* Ininitialize ERC-20 token values. */\n        symbol   = '0STONE';\n        name     = 'InfinityStone';\n        decimals = 18; // NOTE: Same amount as Ethereum (ETH).\n\n        // *********************************************************************\n        // *** NO PRE-MINE ***\n        // *********************************************************************\n        _totalForged = 0;\n        // balances[owner] = _totalForged;\n        // emit Transfer(address(0x0), owner, _totalForged);\n        \n        /* Initialize Zer0netDb (eternal) storage database contract. */\n        // NOTE We hard-code the address here, since it should never change.\n        _zer0netDb = Zer0netDbInterface(0xE865Fe1A1A3b342bF0E2fcB11fF4E3BCe58263af);\n    }\n\n    /**\n     * @dev Only allow access to an authorized Zer0net administrator.\n     */\n    modifier onlyAuthBy0Admin() {\n        /* Verify write access is only permitted to authorized accounts. */\n        require(_zer0netDb.getBool(keccak256(\n            abi.encodePacked(msg.sender, '.has.auth.for.', _namespace))) == true);\n\n        _;      // function code is inserted here\n    }\n\n    /**\n     * THIS CONTRACT DOES NOT ACCEPT DIRECT ETHER\n     */\n    function () public payable {\n        /* Cancel this transaction. */\n        revert('Oops! Direct payments are NOT permitted here.');\n    }\n\n    /***************************************************************************\n     *\n     * Total supply\n     */\n    function totalSupply() public constant returns (uint) {\n        /* Retrieve burn balance. */\n        uint burnAmount = balances[address(0x0)];\n\n        /* Retrieve burn balance from ZeroCache. */\n        uint cacheBurnAmount = _zeroCache().balanceOf(\n            address(this), \n            address(0x0)\n        );\n\n        // NOTE: Destroyed stones are \"burned\" (sent to 0x0).\n        return _totalForged - burnAmount - cacheBurnAmount;\n    }\n\n    /***************************************************************************\n     *\n     * Get the token balance for account `tokenOwner`\n     */\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n        return balances[tokenOwner];\n    }\n\n    /***************************************************************************\n     *\n     * Transfer the balance from token owner's account to `to` account\n     * - Owner's account must have sufficient balance to transfer\n     * - 0 value transfers are allowed\n     */\n    function transfer(address to, uint tokens) public returns (bool success) {\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        balances[to]         = balances[to].add(tokens);\n\n        emit Transfer(msg.sender, to, tokens);\n\n        return true;\n    }\n\n    /***************************************************************************\n     *\n     * Token owner can approve for `spender` to transferFrom(...) `tokens`\n     * from the token owner's account\n     *\n     * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n     * recommends that there are no checks for the approval double-spend attack\n     * as this should be implemented in user interfaces\n     */\n    function approve(address spender, uint tokens) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n\n        emit Approval(msg.sender, spender, tokens);\n\n        return true;\n    }\n\n    /***************************************************************************\n     *\n     * Transfer `tokens` from the `from` account to the `to` account.\n     *\n     * The calling account must already have sufficient tokens approve(...)-d\n     * for spending from the `from` account and:\n     *     - From account must have sufficient balance to transfer\n     *     - Spender must have sufficient allowance to transfer\n     *     - 0 value transfers are allowed\n     */\n    function transferFrom(\n        address from, address to, uint tokens) public returns (\n        bool success) {\n        balances[from]            = balances[from].sub(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        balances[to]              = balances[to].add(tokens);\n\n        emit Transfer(from, to, tokens);\n\n        return true;\n    }\n\n    /***************************************************************************\n     *\n     * Returns the amount of tokens approved by the owner that can be\n     * transferred to the spender's account\n     */\n    function allowance(\n        address tokenOwner, address spender) public constant returns (\n        uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n\n    /***************************************************************************\n     *\n     * Token owner can approve for `spender` to transferFrom(...) `tokens`\n     * from the token owner's account. The `spender` contract function\n     * `receiveApproval(...)` is then executed\n     */\n    function approveAndCall(\n        address spender, uint tokens, bytes data) public returns (\n        bool success) {\n        allowed[msg.sender][spender] = tokens;\n\n        emit Approval(msg.sender, spender, tokens);\n\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n\n        return true;\n    }\n\n\n    /***************************************************************************\n     * \n     * ACTIONS\n     * \n     */\n\n    /**\n     * Forge NEW InfinityStone(s)\n     * \n     * NOTE: Can ONLY be called by an authorized administrator.\n     */\n    function forgeStones(\n        address _owner,\n        uint _tokens\n    ) external onlyAuthBy0Admin returns (bool success) {\n        /* Increase the total 0STONE forge count. */\n        _totalForged = _totalForged.add(_tokens);\n        \n        /* Add tokens to InfinityWell balance. */\n        balances[address(this)] = _tokens;\n        \n        /* Allow ZeroCache to transfer full tokens. */\n        allowed[address(this)][address(_zeroCache())] = _tokens;\n        \n        /* Request deposit to owner's ZeroCache. */\n        _zeroCache().deposit(\n            address(this), // token \n            address(this), // from\n            _tokens, \n            abi.encodePacked(_owner)\n        );\n        \n        /* Broadcast event. */\n        emit Forge(_owner, _tokens);\n\n        /* Return success. */\n        return true;\n    }\n    \n    /**\n     * Destroy InfinityStone(s)\n     * \n     * NOTE: Can ONLY be called by an authorized administrator.\n     */\n    function destroyStones(\n        address _owner,\n        uint _tokens,\n        address _staekholder, \n        uint _staek, \n        uint _expires, \n        uint _nonce, \n        bytes _signature\n    ) external onlyAuthBy0Admin returns (bool success) {\n        /* Retrieve owner balance from ZeroCache. */\n        uint balance = _zeroCache().balanceOf(\n            address(this), \n            _owner\n        );\n        \n        /* Validate owner balance. */\n        if (balance < _tokens) {\n            revert('Oops! You DO NOT have enough InfinityStone.');\n        }\n        \n        /* Transfer \"approved\" tokens to InfinityWell. */\n        _zeroCache().transfer(\n            address(this), \n            _owner, \n            address(0x0), // NOTE: This is our ZeroCache burn address.\n            _tokens, \n            _staekholder, \n            _staek, \n            _expires, \n            _nonce, \n            _signature\n        );\n\n        /* Broadcast event. */\n        emit Destroy(_owner, _tokens);\n\n        /* Return success. */\n        return true;\n    }\n    \n    /**\n     * Transfer ERC-20/721 Token(s)\n     * \n     * ZeroCache will auto-detect the interface (either ERC-20 or ERC-721), \n     * then perform the token or collectible transfer.\n     * \n     * NOTE: Can ONLY be called by an authorized administrator.\n     */\n    function transfer(\n        address _token,\n        address _to,\n        uint _tokensOrId\n    ) external onlyAuthBy0Admin returns (bool success) {\n        /* Transfer tokens. */\n        _zeroCache().transfer(_token, _to, _tokensOrId);\n\n        /* Broadcast event. */\n        emit Transfer(address(this), _to, _tokensOrId);\n\n        /* Return success. */\n        return true;\n    }\n\n\n    /***************************************************************************\n     * \n     * INTERFACES\n     * \n     */\n\n    /**\n     * ZeroCache Interface\n     *\n     * Retrieves the current ZeroCache interface,\n     * using the aname record from Zer0netDb.\n     */\n    function _zeroCache() private view returns (\n        ZeroCacheInterface zeroCache\n    ) {\n        /* Initialize hash. */\n        bytes32 hash = keccak256('aname.zerocache');\n\n        /* Retrieve value from Zer0net Db. */\n        address aname = _zer0netDb.getAddress(hash);\n\n        /* Initialize interface. */\n        zeroCache = ZeroCacheInterface(aname);\n    }\n}",
  "bytecode": ""
}