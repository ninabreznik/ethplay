{
  "address": "0x2efe439c2f00438b27d5e8959bfb54f018993a12",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenBurn",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-24\n*/\n\npragma solidity ^0.4.23;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n\taddress public owner;\n\taddress public newOwner;\n\n\tevent OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\n\n\tconstructor() public {\n\t\towner = msg.sender;\n\t\tnewOwner = address(0);\n\t}\n\n\tmodifier onlyOwner() {\n\t\trequire(msg.sender == owner, \"msg.sender == owner\");\n\t\t_;\n\t}\n\n\tfunction transferOwnership(address _newOwner) public onlyOwner {\n\t\trequire(address(0) != _newOwner, \"address(0) != _newOwner\");\n\t\tnewOwner = _newOwner;\n\t}\n\n\tfunction acceptOwnership() public {\n\t\trequire(msg.sender == newOwner, \"msg.sender == newOwner\");\n\t\temit OwnershipTransferred(owner, msg.sender);\n\t\towner = msg.sender;\n\t\tnewOwner = address(0);\n\t}\n}\n\n\n/**\n * @title Authorizable\n * @dev The Authorizable contract has authorized addresses, and provides basic authorization control\n * functions, this simplifies the implementation of \"multiple user permissions\".\n */\ncontract Authorizable is Ownable {\n  mapping(address => bool) public authorized;\n\n  event AuthorizationSet(address indexed addressAuthorized, bool indexed authorization);\n\n  /**\n   * @dev The Authorizable constructor sets the first `authorized` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n\tauthorized[msg.sender] = true;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the authorized.\n   */\n  modifier onlyAuthorized() {\n    require(authorized[msg.sender]);\n    _;\n  }\n\n /**\n   * @dev Allows the current owner to set an authorization.\n   * @param addressAuthorized The address to change authorization.\n   */\n  function setAuthorized(address addressAuthorized, bool authorization) onlyOwner public {\n    emit AuthorizationSet(addressAuthorized, authorization);\n    authorized[addressAuthorized] = authorization;\n  }\n\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token from an address to another specified address\n  * @param _sender The address to transfer from.\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transferFunction(address _sender, address _to, uint256 _value) internal returns (bool) {\n    require(_to != address(0));\n    require(_to != address(this));\n    require(_value <= balances[_sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[_sender] = balances[_sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(_sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev transfer token for a specified address (BasicToken transfer method)\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n\treturn transferFunction(msg.sender, _to, _value);\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n}\n\ncontract ERC223TokenCompatible is BasicToken {\n  using SafeMath for uint256;\n\n  event Transfer(address indexed from, address indexed to, uint256 value, bytes indexed data);\n\n  // Function that is called when a user or another contract wants to transfer funds .\n\tfunction transfer(address _to, uint256 _value, bytes _data, string _custom_fallback) public returns (bool success) {\n\t\trequire(_to != address(0));\n        require(_to != address(this));\n\t\trequire(_value <= balances[msg.sender]);\n\t\t// SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\t\tif( isContract(_to) ) {\n\t\t\trequire(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\n\t\t}\n\t\temit Transfer(msg.sender, _to, _value, _data);\n\t\treturn true;\n\t}\n\n\t// Function that is called when a user or another contract wants to transfer funds .\n\tfunction transfer(address _to, uint256 _value, bytes _data) public returns (bool success) {\n\t\treturn transfer( _to, _value, _data, \"tokenFallback(address,uint256,bytes)\");\n\t}\n\n\t//assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n\tfunction isContract(address _addr) private view returns (bool is_contract) {\n\t\tuint256 length;\n\t\tassembly {\n            //retrieve the size of the code on target address, this needs assembly\n            length := extcodesize(_addr)\n\t\t}\n\t\treturn (length>0);\n    }\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_to != address(this));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n/**\n * @title Startable\n * @dev Base contract which allows owner to implement an start mechanism without ever being stopped more.\n */\ncontract Startable is Ownable, Authorizable {\n  event Start();\n\n  bool public started = false;\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is started.\n   */\n  modifier whenStarted() {\n\trequire( started || authorized[msg.sender] );\n    _;\n  }\n\n  /**\n   * @dev called by the owner to start, go to normal state\n   */\n  function start() onlyOwner public {\n    started = true;\n    emit Start();\n  }\n}\n\n/**\n * @title Startable token\n *\n * @dev StandardToken modified with startable transfers.\n **/\n\ncontract StartToken is Startable, ERC223TokenCompatible, StandardToken {\n\n  /** ******************************** */\n  /** START: ADDED BY HORIZON GLOBEX   */\n  /** ******************************** */\n  \n  \n    // KYC submission hashes accepted by KYC service provider for AML/KYC review.\n    bytes32[] public kycHashes;\n\n    // All users that have passed the external KYC verification checks.\n    address[] public kycValidated;\n\n\t\n    /**\n     * The hash for all Know Your Customer information is calculated outside but stored here.\n     * This storage will be cleared once the ICO completes, see closeIco().\n     *\n     * ---- ICO-Platform Note ----\n     * The horizon-globex.com ICO platform's KYC app will register a hash of the Contributors\n     * KYC submission on the blockchain. Our Swiss financial-intermediary KYC provider will be \n     * notified of the submission and retrieve the Contributor data for formal review.\n     *\n     * All Contributors must successfully complete our ICO KYC review prior to being allowed on-board.\n     * -- End ICO-Platform Note --\n     *\n     * @param sha   The hash of the customer data.\n    */\n    function setKycHash(bytes32 sha) public onlyOwner {\n        kycHashes.push(sha);\n    }\n\n    /**\n     * A user has passed KYC verification, store them on the blockchain in the order it happened.\n     * This will be cleared once the ICO completes, see closeIco().\n     *\n     * ---- ICO-Platform Note ----\n     * The horizon-globex.com ICO platform's registered KYC provider submits their approval\n     * for this Contributor to particpate using the ICO-Platform portal. \n     *\n     * Each Contributor will then be sent the Ethereum, Bitcoin and IBAN account numbers to\n     * deposit their Approved Contribution in exchange for VOX Tokens.\n     * -- End ICO-Platform Note --\n     *\n     * @param who   The user's address.\n     */\n    function kycApproved(address who) public onlyOwner {\n        require(who != 0x0, \"Cannot approve a null address.\");\n        kycValidated.push(who);\n    }\n\n\t\n    /**\n     * Retrieve the KYC hash from the specified index.\n     *\n     * @param   index   The index into the array.\n     */\n    function getKycHash(uint256 index) public view returns (bytes32) {\n        return kycHashes[index];\n    }\n\n    /**\n     * Retrieve the validated KYC address from the specified index.\n     *\n     * @param   index   The index into the array.\n     */\n    function getKycApproved(uint256 index) public view returns (address) {\n        return kycValidated[index];\n    }\n\n\t\n    /**\n     * During the ICO phase the owner will allocate tokens once KYC completes and funds are deposited.\n     *\n     * ---- ICO-Platform Note ----\n     * The horizon-globex.com ICO platform's portal shall issue VOX Token to Contributors on receipt of \n     * the Approved Contribution funds at the KYC providers Escrow account/wallets.\n     * Only after VOX Tokens are issued to the Contributor can the Swiss KYC provider allow the transfer\n     * of funds from their Escrow to Company.\n     *\n     * -- End ICO-Platform Note --\n     *\n     * @param to       The recipient of the tokens.\n     * @param value    The number of tokens to send.\n     */\n    function icoTransfer(address to, uint256 value) public onlyOwner {\n        // If an attempt is made to transfer more tokens than owned, transfer the remainder.\n        uint256 toTransfer = (value > (balances[msg.sender])) ? (balances[msg.sender]) : value;\n        \n        transferFunction(msg.sender, to, toTransfer);\n    }\n\n\t/** ******************************** */\n\t/** END: ADDED BY HORIZON GLOBEX     */\n\t/** ******************************** */\n  \n  \n  function transfer(address _to, uint256 _value) public whenStarted returns (bool) {\n    return super.transfer(_to, _value);\n  }\n  function transfer(address _to, uint256 _value, bytes _data) public whenStarted returns (bool) {\n    return super.transfer(_to, _value, _data);\n  }\n  function transfer(address _to, uint256 _value, bytes _data, string _custom_fallback) public whenStarted returns (bool) {\n    return super.transfer(_to, _value, _data, _custom_fallback);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public whenStarted returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public whenStarted returns (bool) {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(address _spender, uint _addedValue) public whenStarted returns (bool success) {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenStarted returns (bool success) {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\ncontract HumanStandardToken is StandardToken, StartToken {\n    /* Approves and then calls the receiving contract */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n        approve(_spender, _value);\n        require(_spender.call(bytes4(keccak256(\"receiveApproval(address,uint256,bytes)\")), msg.sender, _value, _extraData));\n        return true;\n    }\n}\n\ncontract BurnToken is StandardToken {\n    uint256 public initialSupply;\n\n    event Burn(address indexed burner, uint256 value);\n\n    /**\n     * @dev Function to burn tokens.\n     * @param _burner The address of token holder.\n     * @param _value The amount of token to be burned.\n     */\n    function burnFunction(address _burner, uint256 _value) internal returns (bool) {\n        require(_value > 0);\n\t\trequire(_value <= balances[_burner]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        balances[_burner] = balances[_burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        emit Burn(_burner, _value);\n\t\treturn true;\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n\tfunction burn(uint256 _value) public returns(bool) {\n        return burnFunction(msg.sender, _value);\n    }\n\n\t/**\n\t* @dev Burns tokens from one address\n\t* @param _from address The address which you want to burn tokens from\n\t* @param _value uint256 the amount of tokens to be burned\n\t*/\n\tfunction burnFrom(address _from, uint256 _value) public returns (bool) {\n\t\trequire(_value <= allowed[_from][msg.sender]); // check if it has the budget allowed\n\t\tburnFunction(_from, _value);\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\t\treturn true;\n\t}\n}\n\ncontract Token is ERC223TokenCompatible, StandardToken, StartToken, HumanStandardToken  {\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    constructor(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply) public {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        totalSupply = _totalSupply;\n        balances[msg.sender] = totalSupply;\n    }\n}\n\ncontract TokenBurn is Token, BurnToken {\n    constructor(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply) public\n    Token(_name, _symbol, _decimals, _totalSupply) {\n        initialSupply = totalSupply;\n    }\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000052b7d2dcc80cd2e40000000000000000000000000000000000000000000000000000000000000000000004415145520000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044151455200000000000000000000000000000000000000000000000000000000"
}