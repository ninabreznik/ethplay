{
  "address": "0xb4d9202d3e743dbd36b40e6083e818d6397ae77e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Whitelist",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "500",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-01\n*/\n\n/*\n * Ownable\n *\n * Base contract with an owner.\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\n */\n\ncontract Ownable {\n    address public owner;\n\n    function Ownable() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n}\n\n\ncontract Whitelist is Ownable {\n    mapping (address => uint128) whitelist;\n\n    event Whitelisted(address who, uint128 nonce);\n\n    function Whitelist() Ownable() {\n      // This is here for our verification code only\n    }\n\n    function setWhitelisting(address who, uint128 nonce) internal {\n        whitelist[who] = nonce;\n\n        Whitelisted(who, nonce);\n    }\n\n    function whitelistUser(address who, uint128 nonce) external onlyOwner {\n        setWhitelisting(who, nonce);\n    }\n\n    function whitelistMe(uint128 nonce, uint8 v, bytes32 r, bytes32 s) external {\n        bytes32 hash = keccak256(msg.sender, nonce);\n        require(ecrecover(hash, v, r, s) == owner);\n        require(whitelist[msg.sender] == 0);\n\n        setWhitelisting(msg.sender, nonce);\n    }\n\n    function isWhitelisted(address who) external view returns(bool) {\n        return whitelist[who] > 0;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"nonce\",\"type\":\"uint128\"}],\"name\":\"whitelistUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint128\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"whitelistMe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint128\"}],\"name\":\"Whitelisted\",\"type\":\"event\"}]",
  "bytecode": "6060604052341561000f57600080fd5b60008054600160a060020a033316600160a060020a03199091161790556104148061003b6000396000f30060606040526004361061006c5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633af32abf81146100715780634bb07665146100a45780638da5cb5b146100da578063bda9b45c14610109578063f2fde38b1461013d575b600080fd5b341561007c57600080fd5b610090600160a060020a036004351661015c565b604051901515815260200160405180910390f35b34156100af57600080fd5b6100d8600160a060020a03600435166fffffffffffffffffffffffffffffffff6024351661018a565b005b34156100e557600080fd5b6100ed6101b3565b604051600160a060020a03909116815260200160405180910390f35b341561011457600080fd5b6100d86fffffffffffffffffffffffffffffffff6004351660ff602435166044356064356101c2565b341561014857600080fd5b6100d8600160a060020a03600435166102f2565b600160a060020a03166000908152600160205260408120546fffffffffffffffffffffffffffffffff161190565b60005433600160a060020a039081169116146101a557600080fd5b6101af8282610348565b5050565b600054600160a060020a031681565b60003385604051600160a060020a03929092166c010000000000000000000000000282526fffffffffffffffffffffffffffffffff16700100000000000000000000000000000000026014820152602401604051908190039020600054909150600160a060020a03166001828686866040516000815260200160405260006040516020015260405193845260ff90921660208085019190915260408085019290925260608401929092526080909201915160208103908084039060008661646e5a03f1151561029057600080fd5b505060206040510351600160a060020a0316146102ac57600080fd5b600160a060020a0333166000908152600160205260409020546fffffffffffffffffffffffffffffffff16156102e157600080fd5b6102eb3386610348565b5050505050565b60005433600160a060020a0390811691161461030d57600080fd5b600160a060020a03811615610345576000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b600160a060020a0382166000908152600160205260409081902080546fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff84161790557f134b6457382841a9c621ae6c69f4940c9ad7f00062d991f85e2567870c87ca24908390839051600160a060020a0390921682526fffffffffffffffffffffffffffffffff1660208201526040908101905180910390a150505600a165627a7a723058204bf5a71840a41bba4a7f02c380f57d9bffd21c9934d5c8df3c3883d94df47fe60029"
}