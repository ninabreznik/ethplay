{
  "address": "0xe479dfd9664c693b2e2992300930b00bfde08233",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ERC721Bid",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-26\n*/\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\npragma solidity ^0.4.24;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() internal {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/access/Roles.sol\n\npragma solidity ^0.4.24;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an account access to this role\n   */\n  function add(Role storage role, address account) internal {\n    require(account != address(0));\n    require(!has(role, account));\n\n    role.bearer[account] = true;\n  }\n\n  /**\n   * @dev remove an account's access to this role\n   */\n  function remove(Role storage role, address account) internal {\n    require(account != address(0));\n    require(has(role, account));\n\n    role.bearer[account] = false;\n  }\n\n  /**\n   * @dev check if an account has this role\n   * @return bool\n   */\n  function has(Role storage role, address account)\n    internal\n    view\n    returns (bool)\n  {\n    require(account != address(0));\n    return role.bearer[account];\n  }\n}\n\n// File: openzeppelin-solidity/contracts/access/roles/PauserRole.sol\n\npragma solidity ^0.4.24;\n\n\ncontract PauserRole {\n  using Roles for Roles.Role;\n\n  event PauserAdded(address indexed account);\n  event PauserRemoved(address indexed account);\n\n  Roles.Role private pausers;\n\n  constructor() internal {\n    _addPauser(msg.sender);\n  }\n\n  modifier onlyPauser() {\n    require(isPauser(msg.sender));\n    _;\n  }\n\n  function isPauser(address account) public view returns (bool) {\n    return pausers.has(account);\n  }\n\n  function addPauser(address account) public onlyPauser {\n    _addPauser(account);\n  }\n\n  function renouncePauser() public {\n    _removePauser(msg.sender);\n  }\n\n  function _addPauser(address account) internal {\n    pausers.add(account);\n    emit PauserAdded(account);\n  }\n\n  function _removePauser(address account) internal {\n    pausers.remove(account);\n    emit PauserRemoved(account);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n  event Paused(address account);\n  event Unpaused(address account);\n\n  bool private _paused;\n\n  constructor() internal {\n    _paused = false;\n  }\n\n  /**\n   * @return true if the contract is paused, false otherwise.\n   */\n  function paused() public view returns(bool) {\n    return _paused;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!_paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(_paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyPauser whenNotPaused {\n    _paused = true;\n    emit Paused(msg.sender);\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyPauser whenPaused {\n    _paused = false;\n    emit Unpaused(msg.sender);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/utils/Address.sol\n\npragma solidity ^0.4.24;\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   * as the code is not actually created until after the constructor finishes.\n   * @param account address of the account to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address account) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(account) }\n    return size > 0;\n  }\n\n}\n\n// File: contracts/bid/ERC721BidStorage.sol\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title Interface for contracts conforming to ERC-20\n */\ncontract ERC20Interface {\n    function balanceOf(address from) public view returns (uint256);\n    function transferFrom(address from, address to, uint tokens) public returns (bool);\n    function allowance(address owner, address spender) public view returns (uint256);\n}\n\n\n/**\n * @title Interface for contracts conforming to ERC-721\n */\ncontract ERC721Interface {\n    function ownerOf(uint256 _tokenId) public view returns (address _owner);\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\n    function supportsInterface(bytes4) public view returns (bool);\n}\n\n\ncontract ERC721Verifiable is ERC721Interface {\n    function verifyFingerprint(uint256, bytes memory) public view returns (bool);\n}\n\n\ncontract ERC721BidStorage {\n    // 182 days - 26 weeks - 6 months\n    uint256 public constant MAX_BID_DURATION = 182 days;\n    uint256 public constant MIN_BID_DURATION = 1 minutes;\n    uint256 public constant ONE_MILLION = 1000000;\n    bytes4 public constant ERC721_Interface = 0x80ac58cd;\n    bytes4 public constant ERC721_Received = 0x150b7a02;\n    bytes4 public constant ERC721Composable_ValidateFingerprint = 0x8f9f4b63;\n    \n    struct Bid {\n        // Bid Id\n        bytes32 id;\n        // Bidder address \n        address bidder;\n        // ERC721 address\n        address tokenAddress;\n        // ERC721 token id\n        uint256 tokenId;\n        // Price for the bid in wei \n        uint256 price;\n        // Time when this bid ends \n        uint256 expiresAt;\n        // Fingerprint for composable\n        bytes fingerprint;\n    }\n\n    // MANA token\n    ERC20Interface public manaToken;\n\n    // Bid by token address => token id => bid index => bid\n    mapping(address => mapping(uint256 => mapping(uint256 => Bid))) internal bidsByToken;\n    // Bid count by token address => token id => bid counts\n    mapping(address => mapping(uint256 => uint256)) public bidCounterByToken;\n    // Index of the bid at bidsByToken mapping by bid id => bid index\n    mapping(bytes32 => uint256) public bidIndexByBidId;\n    // Bid id by token address => token id => bidder address => bidId\n    mapping(address => mapping(uint256 => mapping(address => bytes32))) \n    public \n    bidIdByTokenAndBidder;\n\n\n    uint256 public ownerCutPerMillion;\n\n    // EVENTS\n    event BidCreated(\n      bytes32 _id,\n      address indexed _tokenAddress,\n      uint256 indexed _tokenId,\n      address indexed _bidder,\n      uint256 _price,\n      uint256 _expiresAt,\n      bytes _fingerprint\n    );\n    \n    event BidAccepted(\n      bytes32 _id,\n      address indexed _tokenAddress,\n      uint256 indexed _tokenId,\n      address _bidder,\n      address indexed _seller,\n      uint256 _price,\n      uint256 _fee\n    );\n\n    event BidCancelled(\n      bytes32 _id,\n      address indexed _tokenAddress,\n      uint256 indexed _tokenId,\n      address indexed _bidder\n    );\n\n    event ChangedOwnerCutPerMillion(uint256 _ownerCutPerMillion);\n}\n\n// File: contracts/bid/ERC721Bid.sol\n\npragma solidity ^0.4.24;\n\n\n\n\n\n\n\ncontract ERC721Bid is Ownable, Pausable, ERC721BidStorage {\n    using SafeMath for uint256;\n    using Address for address;\n\n    /**\n    * @dev Constructor of the contract.\n    * @param _manaToken - address of the mana token\n    * @param _owner - address of the owner for the contract\n    */\n    constructor(address _manaToken, address _owner) Ownable() Pausable() public {\n        manaToken = ERC20Interface(_manaToken);\n        // Set owner\n        transferOwnership(_owner);\n    }\n\n    /**\n    * @dev Place a bid for an ERC721 token.\n    * @param _tokenAddress - address of the ERC721 token\n    * @param _tokenId - uint256 of the token id\n    * @param _price - uint256 of the price for the bid\n    * @param _duration - uint256 of the duration in seconds for the bid\n    */\n    function placeBid(\n        address _tokenAddress, \n        uint256 _tokenId,\n        uint256 _price,\n        uint256 _duration\n    )\n        public\n    {\n        _placeBid(\n            _tokenAddress, \n            _tokenId,\n            _price,\n            _duration,\n            \"\"\n        );\n    }\n\n    /**\n    * @dev Place a bid for an ERC721 token with fingerprint.\n    * @param _tokenAddress - address of the ERC721 token\n    * @param _tokenId - uint256 of the token id\n    * @param _price - uint256 of the price for the bid\n    * @param _duration - uint256 of the duration in seconds for the bid\n    * @param _fingerprint - bytes of ERC721 token fingerprint \n    */\n    function placeBid(\n        address _tokenAddress, \n        uint256 _tokenId,\n        uint256 _price,\n        uint256 _duration,\n        bytes _fingerprint\n    )\n        public\n    {\n        _placeBid(\n            _tokenAddress, \n            _tokenId,\n            _price,\n            _duration,\n            _fingerprint \n        );\n    }\n\n    /**\n    * @dev Place a bid for an ERC721 token with fingerprint.\n    * @notice Tokens can have multiple bids by different users.\n    * Users can have only one bid per token.\n    * If the user places a bid and has an active bid for that token,\n    * the older one will be replaced with the new one.\n    * @param _tokenAddress - address of the ERC721 token\n    * @param _tokenId - uint256 of the token id\n    * @param _price - uint256 of the price for the bid\n    * @param _duration - uint256 of the duration in seconds for the bid\n    * @param _fingerprint - bytes of ERC721 token fingerprint \n    */\n    function _placeBid(\n        address _tokenAddress, \n        uint256 _tokenId,\n        uint256 _price,\n        uint256 _duration,\n        bytes memory _fingerprint\n    )\n        private\n        whenNotPaused()\n    {\n        _requireERC721(_tokenAddress);\n        _requireComposableERC721(_tokenAddress, _tokenId, _fingerprint);\n\n        require(_price > 0, \"Price should be bigger than 0\");\n\n        _requireBidderBalance(msg.sender, _price);       \n\n        require(\n            _duration >= MIN_BID_DURATION, \n            \"The bid should be last longer than a minute\"\n        );\n\n        require(\n            _duration <= MAX_BID_DURATION, \n            \"The bid can not last longer than 6 months\"\n        );\n\n        ERC721Interface token = ERC721Interface(_tokenAddress);\n        address tokenOwner = token.ownerOf(_tokenId);\n        require(\n            tokenOwner != address(0) && tokenOwner != msg.sender,\n            \"The token should have an owner different from the sender\"\n        );\n\n        uint256 expiresAt = block.timestamp.add(_duration);\n\n        bytes32 bidId = keccak256(\n            abi.encodePacked(\n                block.timestamp,\n                msg.sender,\n                _tokenAddress,\n                _tokenId,\n                _price,\n                _duration,\n                _fingerprint\n            )\n        );\n\n        uint256 bidIndex;\n\n        if (_bidderHasABid(_tokenAddress, _tokenId, msg.sender)) {\n            bytes32 oldBidId;\n            (bidIndex, oldBidId,,,) = getBidByBidder(_tokenAddress, _tokenId, msg.sender);\n            \n            // Delete old bid reference\n            delete bidIndexByBidId[oldBidId];\n        } else {\n            // Use the bid counter to assign the index if there is not an active bid. \n            bidIndex = bidCounterByToken[_tokenAddress][_tokenId];  \n            // Increase bid counter \n            bidCounterByToken[_tokenAddress][_tokenId]++;\n        }\n\n        // Set bid references\n        bidIdByTokenAndBidder[_tokenAddress][_tokenId][msg.sender] = bidId;\n        bidIndexByBidId[bidId] = bidIndex;\n\n        // Save Bid\n        bidsByToken[_tokenAddress][_tokenId][bidIndex] = Bid({\n            id: bidId,\n            bidder: msg.sender,\n            tokenAddress: _tokenAddress,\n            tokenId: _tokenId,\n            price: _price,\n            expiresAt: expiresAt,\n            fingerprint: _fingerprint\n        });\n\n        emit BidCreated(\n            bidId,\n            _tokenAddress,\n            _tokenId,\n            msg.sender,\n            _price,\n            expiresAt,\n            _fingerprint     \n        );\n    }\n\n    /**\n    * @dev Used as the only way to accept a bid. \n    * The token owner should send the token to this contract using safeTransferFrom.\n    * The last parameter (bytes) should be the bid id.\n    * @notice  The ERC721 smart contract calls this function on the recipient\n    * after a `safetransfer`. This function MAY throw to revert and reject the\n    * transfer. Return of other than the magic value MUST result in the\n    * transaction being reverted.\n    * Note: \n    * Contract address is always the message sender.\n    * This method should be seen as 'acceptBid'.\n    * It validates that the bid id matches an active bid for the bid token.\n    * @param _from The address which previously owned the token\n    * @param _tokenId The NFT identifier which is being transferred\n    * @param _data Additional data with no specified format\n    * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    */\n    function onERC721Received(\n        address _from,\n        address /*_to*/,\n        uint256 _tokenId,\n        bytes memory _data\n    )\n        public\n        whenNotPaused()\n        returns (bytes4)\n    {\n        bytes32 bidId = _bytesToBytes32(_data);\n        uint256 bidIndex = bidIndexByBidId[bidId];\n\n        Bid memory bid = _getBid(msg.sender, _tokenId, bidIndex);\n\n        // Check if the bid is valid.\n        require(\n            // solium-disable-next-line operator-whitespace\n            bid.id == bidId &&\n            bid.expiresAt >= block.timestamp, \n            \"Invalid bid\"\n        );\n\n        address bidder = bid.bidder;\n        uint256 price = bid.price;\n        \n        // Check fingerprint if necessary\n        _requireComposableERC721(msg.sender, _tokenId, bid.fingerprint);\n\n        // Check if bidder has funds\n        _requireBidderBalance(bidder, price);\n\n        // Delete bid references from contract storage\n        delete bidsByToken[msg.sender][_tokenId][bidIndex];\n        delete bidIndexByBidId[bidId];\n        delete bidIdByTokenAndBidder[msg.sender][_tokenId][bidder];\n\n        // Reset bid counter to invalidate other bids placed for the token\n        delete bidCounterByToken[msg.sender][_tokenId];\n        \n        // Transfer token to bidder\n        ERC721Interface(msg.sender).transferFrom(address(this), bidder, _tokenId);\n\n        uint256 saleShareAmount = 0;\n        if (ownerCutPerMillion > 0) {\n            // Calculate sale share\n            saleShareAmount = price.mul(ownerCutPerMillion).div(ONE_MILLION);\n            // Transfer share amount to the bid conctract Owner\n            require(\n                manaToken.transferFrom(bidder, owner(), saleShareAmount),\n                \"Transfering the cut to the bid contract owner failed\"\n            );\n        }\n\n        // Transfer MANA from bidder to seller\n        require(\n            manaToken.transferFrom(bidder, _from, price.sub(saleShareAmount)),\n            \"Transfering MANA to owner failed\"\n        );\n       \n        emit BidAccepted(\n            bidId,\n            msg.sender,\n            _tokenId,\n            bidder,\n            _from,\n            price,\n            saleShareAmount\n        );\n\n        return ERC721_Received;\n    }\n\n    /**\n    * @dev Remove expired bids\n    * @param _tokenAddresses - address[] of the ERC721 tokens\n    * @param _tokenIds - uint256[] of the token ids\n    * @param _bidders - address[] of the bidders\n    */\n    function removeExpiredBids(address[] _tokenAddresses, uint256[] _tokenIds, address[] _bidders)\n    public \n    {\n        uint256 loopLength = _tokenAddresses.length;\n\n        require(loopLength == _tokenIds.length, \"Parameter arrays should have the same length\");\n        require(loopLength == _bidders.length, \"Parameter arrays should have the same length\");\n\n        for (uint256 i = 0; i < loopLength; i++) {\n            _removeExpiredBid(_tokenAddresses[i], _tokenIds[i], _bidders[i]);\n        }\n    }\n    \n    /**\n    * @dev Remove expired bid\n    * @param _tokenAddress - address of the ERC721 token\n    * @param _tokenId - uint256 of the token id\n    * @param _bidder - address of the bidder\n    */\n    function _removeExpiredBid(address _tokenAddress, uint256 _tokenId, address _bidder)\n    internal \n    {\n        (uint256 bidIndex, bytes32 bidId,,,uint256 expiresAt) = getBidByBidder(\n            _tokenAddress, \n            _tokenId,\n            _bidder\n        );\n        \n        require(expiresAt < block.timestamp, \"The bid to remove should be expired\");\n\n        _cancelBid(\n            bidIndex, \n            bidId, \n            _tokenAddress, \n            _tokenId, \n            _bidder\n        );\n    }\n\n    /**\n    * @dev Cancel a bid for an ERC721 token\n    * @param _tokenAddress - address of the ERC721 token\n    * @param _tokenId - uint256 of the token id\n    */\n    function cancelBid(address _tokenAddress, uint256 _tokenId) public whenNotPaused() {\n        // Get active bid\n        (uint256 bidIndex, bytes32 bidId,,,) = getBidByBidder(\n            _tokenAddress, \n            _tokenId,\n            msg.sender\n        );\n\n        _cancelBid(\n            bidIndex, \n            bidId, \n            _tokenAddress, \n            _tokenId, \n            msg.sender\n        );\n    }\n\n    /**\n    * @dev Cancel a bid for an ERC721 token\n    * @param _bidIndex - uint256 of the index of the bid\n    * @param _bidId - bytes32 of the bid id\n    * @param _tokenAddress - address of the ERC721 token\n    * @param _tokenId - uint256 of the token id\n    * @param _bidder - address of the bidder\n    */\n    function _cancelBid(\n        uint256 _bidIndex,\n        bytes32 _bidId, \n        address _tokenAddress,\n        uint256 _tokenId, \n        address _bidder\n    ) \n        internal \n    {\n        // Delete bid references\n        delete bidIndexByBidId[_bidId];\n        delete bidIdByTokenAndBidder[_tokenAddress][_tokenId][_bidder];\n        \n        // Check if the bid is at the end of the mapping\n        uint256 lastBidIndex = bidCounterByToken[_tokenAddress][_tokenId].sub(1);\n        if (lastBidIndex != _bidIndex) {\n            // Move last bid to the removed place\n            Bid storage lastBid = bidsByToken[_tokenAddress][_tokenId][lastBidIndex];\n            bidsByToken[_tokenAddress][_tokenId][_bidIndex] = lastBid;\n            bidIndexByBidId[lastBid.id] = _bidIndex;\n        }\n        \n        // Delete empty index\n        delete bidsByToken[_tokenAddress][_tokenId][lastBidIndex];\n\n        // Decrease bids counter\n        bidCounterByToken[_tokenAddress][_tokenId]--;\n\n        // emit BidCancelled event\n        emit BidCancelled(\n            _bidId,\n            _tokenAddress,\n            _tokenId,\n            _bidder\n        );\n    }\n\n     /**\n    * @dev Check if the bidder has a bid for an specific token.\n    * @param _tokenAddress - address of the ERC721 token\n    * @param _tokenId - uint256 of the token id\n    * @param _bidder - address of the bidder\n    * @return bool whether the bidder has an active bid\n    */\n    function _bidderHasABid(address _tokenAddress, uint256 _tokenId, address _bidder) \n        internal\n        view \n        returns (bool)\n    {\n        bytes32 bidId = bidIdByTokenAndBidder[_tokenAddress][_tokenId][_bidder];\n        uint256 bidIndex = bidIndexByBidId[bidId];\n        // Bid index should be inside bounds\n        if (bidIndex < bidCounterByToken[_tokenAddress][_tokenId]) {\n            Bid memory bid = bidsByToken[_tokenAddress][_tokenId][bidIndex];\n            return bid.bidder == _bidder;\n        }\n        return false;\n    }\n\n    /**\n    * @dev Get the active bid id and index by a bidder and an specific token. \n    * @notice If the bidder has not a valid bid, the transaction will be reverted.\n    * @param _tokenAddress - address of the ERC721 token\n    * @param _tokenId - uint256 of the token id\n    * @param _bidder - address of the bidder\n    * @return uint256 of the bid index to be used within bidsByToken mapping\n    * @return bytes32 of the bid id\n    * @return address of the bidder address\n    * @return uint256 of the bid price\n    * @return uint256 of the expiration time\n    */\n    function getBidByBidder(address _tokenAddress, uint256 _tokenId, address _bidder) \n        public\n        view \n        returns (\n            uint256 bidIndex, \n            bytes32 bidId, \n            address bidder, \n            uint256 price, \n            uint256 expiresAt\n        ) \n    {\n        bidId = bidIdByTokenAndBidder[_tokenAddress][_tokenId][_bidder];\n        bidIndex = bidIndexByBidId[bidId];\n        (bidId, bidder, price, expiresAt) = getBidByToken(_tokenAddress, _tokenId, bidIndex);\n        if (_bidder != bidder) {\n            revert(\"Bidder has not an active bid for this token\");\n        }\n    }\n\n    /**\n    * @dev Get an ERC721 token bid by index\n    * @param _tokenAddress - address of the ERC721 token\n    * @param _tokenId - uint256 of the token id\n    * @param _index - uint256 of the index\n    * @return uint256 of the bid index to be used within bidsByToken mapping\n    * @return bytes32 of the bid id\n    * @return address of the bidder address\n    * @return uint256 of the bid price\n    * @return uint256 of the expiration time\n    */\n    function getBidByToken(address _tokenAddress, uint256 _tokenId, uint256 _index) \n        public \n        view\n        returns (bytes32, address, uint256, uint256) \n    {\n        \n        Bid memory bid = _getBid(_tokenAddress, _tokenId, _index);\n        return (\n            bid.id,\n            bid.bidder,\n            bid.price,\n            bid.expiresAt\n        );\n    }\n\n    /**\n    * @dev Get the active bid id and index by a bidder and an specific token. \n    * @notice If the index is not valid, it will revert.\n    * @param _tokenAddress - address of the ERC721 token\n    * @param _tokenId - uint256 of the index\n    * @param _index - uint256 of the index\n    * @return Bid\n    */\n    function _getBid(address _tokenAddress, uint256 _tokenId, uint256 _index) \n        internal \n        view \n        returns (Bid memory)\n    {\n        require(_index < bidCounterByToken[_tokenAddress][_tokenId], \"Invalid index\");\n        return bidsByToken[_tokenAddress][_tokenId][_index];\n    }\n\n    /**\n    * @dev Sets the share cut for the owner of the contract that's\n    * charged to the seller on a successful sale\n    * @param _ownerCutPerMillion - Share amount, from 0 to 999,999\n    */\n    function setOwnerCutPerMillion(uint256 _ownerCutPerMillion) external onlyOwner {\n        require(_ownerCutPerMillion < ONE_MILLION, \"The owner cut should be between 0 and 999,999\");\n\n        ownerCutPerMillion = _ownerCutPerMillion;\n        emit ChangedOwnerCutPerMillion(ownerCutPerMillion);\n    }\n\n    /**\n    * @dev Convert bytes to bytes32\n    * @param _data - bytes\n    * @return bytes32\n    */\n    function _bytesToBytes32(bytes memory _data) internal pure returns (bytes32) {\n        require(_data.length == 32, \"The data should be 32 bytes length\");\n\n        bytes32 bidId;\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            bidId := mload(add(_data, 0x20))\n        }\n        return bidId;\n    }\n\n    /**\n    * @dev Check if the token has a valid ERC721 implementation\n    * @param _tokenAddress - address of the token\n    */\n    function _requireERC721(address _tokenAddress) internal view {\n        require(_tokenAddress.isContract(), \"Token should be a contract\");\n\n        ERC721Interface token = ERC721Interface(_tokenAddress);\n        require(\n            token.supportsInterface(ERC721_Interface),\n            \"Token has an invalid ERC721 implementation\"\n        );\n    }\n\n    /**\n    * @dev Check if the token has a valid Composable ERC721 implementation\n    * And its fingerprint is valid\n    * @param _tokenAddress - address of the token\n    * @param _tokenId - uint256 of the index\n    * @param _fingerprint - bytes of the fingerprint\n    */\n    function _requireComposableERC721(\n        address _tokenAddress,\n        uint256 _tokenId,\n        bytes memory _fingerprint\n    )\n        internal\n        view\n    {\n        ERC721Verifiable composableToken = ERC721Verifiable(_tokenAddress);\n        if (composableToken.supportsInterface(ERC721Composable_ValidateFingerprint)) {\n            require(\n                composableToken.verifyFingerprint(_tokenId, _fingerprint),\n                \"Token fingerprint is not valid\"\n            );\n        }\n    }\n\n    /**\n    * @dev Check if the bidder has balance and the contract has enough allowance\n    * to use bidder MANA on his belhalf\n    * @param _bidder - address of bidder\n    * @param _amount - uint256 of amount\n    */\n    function _requireBidderBalance(address _bidder, uint256 _amount) internal view {\n        require(\n            manaToken.balanceOf(_bidder) >= _amount,\n            \"Insufficient funds\"\n        );\n        require(\n            manaToken.allowance(_bidder, address(this)) >= _amount,\n            \"The contract is not authorized to use MANA on bidder behalf\"\n        );        \n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_bidder\",\"type\":\"address\"}],\"name\":\"getBidByBidder\",\"outputs\":[{\"name\":\"bidIndex\",\"type\":\"uint256\"},{\"name\":\"bidId\",\"type\":\"bytes32\"},{\"name\":\"bidder\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC721Composable_ValidateFingerprint\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ownerCutPerMillion\",\"type\":\"uint256\"}],\"name\":\"setOwnerCutPerMillion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bidIdByTokenAndBidder\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bidCounterByToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC721_Interface\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelBid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBidByToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC721_Received\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manaToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"placeBid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ONE_MILLION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerCutPerMillion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_BID_DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"},{\"name\":\"_fingerprint\",\"type\":\"bytes\"}],\"name\":\"placeBid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bidIndexByBidId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddresses\",\"type\":\"address[]\"},{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"name\":\"_bidders\",\"type\":\"address[]\"}],\"name\":\"removeExpiredBids\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_BID_DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_manaToken\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_expiresAt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_fingerprint\",\"type\":\"bytes\"}],\"name\":\"BidCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"BidAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_bidder\",\"type\":\"address\"}],\"name\":\"BidCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_ownerCutPerMillion\",\"type\":\"uint256\"}],\"name\":\"ChangedOwnerCutPerMillion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000000f5d2fb29fb7d3cfee444a200298f468908cc942000000000000000000000000af592460d6a44517aba2fb0bcb02ee8f4103b502"
}