{
  "address": "0x0e0989b1f9b8a38983c2ba8053269ca62ec9b195",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Po.etToken",
  "contractName": "PoetToken",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-08-17\n*/\n\npragma solidity ^0.4.15;\n\n\n/// @title Abstract ERC20 token interface\ncontract AbstractToken {\n\n    function totalSupply() constant returns (uint256) {}\n    function balanceOf(address owner) constant returns (uint256 balance);\n    function transfer(address to, uint256 value) returns (bool success);\n    function transferFrom(address from, address to, uint256 value) returns (bool success);\n    function approve(address spender, uint256 value) returns (bool success);\n    function allowance(address owner, address spender) constant returns (uint256 remaining);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Issuance(address indexed to, uint256 value);\n}\n\n\ncontract Owned {\n\n    address public owner = msg.sender;\n    address public potentialOwner;\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyPotentialOwner {\n        require(msg.sender == potentialOwner);\n        _;\n    }\n\n    event NewOwner(address old, address current);\n    event NewPotentialOwner(address old, address potential);\n\n    function setOwner(address _new)\n        public\n        onlyOwner\n    {\n        NewPotentialOwner(owner, _new);\n        potentialOwner = _new;\n    }\n\n    function confirmOwnership()\n        public\n        onlyPotentialOwner\n    {\n        NewOwner(owner, potentialOwner);\n        owner = potentialOwner;\n        potentialOwner = 0;\n    }\n}\n\n\n/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\ncontract StandardToken is AbstractToken, Owned {\n\n    /*\n     *  Data structures\n     */\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    uint256 public totalSupply;\n\n    /*\n     *  Read and write storage functions\n     */\n    /// @dev Transfers sender's tokens to a given address. Returns success.\n    /// @param _to Address of token receiver.\n    /// @param _value Number of tokens to transfer.\n    function transfer(address _to, uint256 _value) returns (bool success) {\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n            balances[msg.sender] -= _value;\n            balances[_to] += _value;\n            Transfer(msg.sender, _to, _value);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\n    /// @param _from Address from where tokens are withdrawn.\n    /// @param _to Address to where tokens are sent.\n    /// @param _value Number of tokens to transfer.\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n            balances[_to] += _value;\n            balances[_from] -= _value;\n            allowed[_from][msg.sender] -= _value;\n            Transfer(_from, _to, _value);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n    /// @dev Returns number of tokens owned by given address.\n    /// @param _owner Address of token owner.\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    /// @dev Sets approved amount of tokens for spender. Returns success.\n    /// @param _spender Address of allowed account.\n    /// @param _value Number of approved tokens.\n    function approve(address _spender, uint256 _value) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /*\n     * Read storage functions\n     */\n    /// @dev Returns number of allowed tokens for given address.\n    /// @param _owner Address of token owner.\n    /// @param _spender Address of token spender.\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n    }\n\n}\n\n\n/// @title SafeMath contract - Math operations with safety checks.\n/// @author OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\ncontract SafeMath {\n    function mul(uint a, uint b) internal returns (uint) {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint a, uint b) internal returns (uint) {\n        assert(b > 0);\n        uint c = a / b;\n        assert(a == b * c + a % b);\n        return c;\n    }\n\n    function sub(uint a, uint b) internal returns (uint) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint a, uint b) internal returns (uint) {\n        uint c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function pow(uint a, uint b) internal returns (uint) {\n        uint c = a ** b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\n/// @title Token contract - Implements Standard ERC20 with additional features.\n/// @author Zerion - <[email protected]>\ncontract Token is StandardToken, SafeMath {\n    // Time of the contract creation\n    uint public creationTime;\n\n    function Token() {\n        creationTime = now;\n    }\n\n\n    /// @dev Owner can transfer out any accidentally sent ERC20 tokens\n    function transferERC20Token(address tokenAddress)\n        public\n        onlyOwner\n        returns (bool)\n    {\n        uint balance = AbstractToken(tokenAddress).balanceOf(this);\n        return AbstractToken(tokenAddress).transfer(owner, balance);\n    }\n\n    /// @dev Multiplies the given number by 10^(decimals)\n    function withDecimals(uint number, uint decimals)\n        internal\n        returns (uint)\n    {\n        return mul(number, pow(10, decimals));\n    }\n}\n\n\n/// @title Token contract - Implements Standard ERC20 Token with Po.et features.\n/// @author Zerion - <[email protected]>\ncontract PoetToken is Token {\n\n    /*\n     * Token meta data\n     */\n    string constant public name = \"Po.et\";\n    string constant public symbol = \"POE\";\n    uint8 constant public decimals = 8;\n\n    // Address where all investors tokens created during the ICO stage initially allocated\n    address constant public icoAllocation = 0x1111111111111111111111111111111111111111;\n\n    // Address where Foundation tokens are allocated\n    address constant public foundationReserve = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n    // Number of tokens initially allocated to Foundation\n    uint foundationTokens;\n\n    // Store number of days in each month\n    mapping(uint8 => uint8) daysInMonth;\n\n    // UNIX timestamp for September 1, 2017\n    // It's a date when first 2% of foundation reserve will be unlocked\n    uint Sept1_2017 = 1504224000;\n\n    // Number of days since September 1, 2017 before all tokens will be unlocked\n    uint reserveDelta = 456;\n\n\n    /// @dev Contract constructor function sets totalSupply and allocates all ICO tokens to the icoAllocation address\n    function PoetToken()\n    {   \n        // Overall, 3,141,592,653 POE tokens are distributed\n        totalSupply = withDecimals(3141592653, decimals);\n\n        // Allocate 32% of all tokens to Foundation\n        foundationTokens = div(mul(totalSupply, 32), 100);\n        balances[foundationReserve] = foundationTokens;\n\n        // Allocate the rest to icoAllocation address\n        balances[icoAllocation] = sub(totalSupply, foundationTokens);\n\n        // Allow owner to distribute tokens allocated on the icoAllocation address\n        allowed[icoAllocation][owner] = balanceOf(icoAllocation);\n\n        // Fill mapping with numbers of days\n        // Note: we consider only February of 2018 that has 28 days\n        daysInMonth[1]  = 31; daysInMonth[2]  = 28; daysInMonth[3]  = 31;\n        daysInMonth[4]  = 30; daysInMonth[5]  = 31; daysInMonth[6]  = 30;\n        daysInMonth[7]  = 31; daysInMonth[8]  = 31; daysInMonth[9]  = 30;\n        daysInMonth[10] = 31; daysInMonth[11] = 30; daysInMonth[12] = 31;\n    }\n\n    /// @dev Sends tokens from icoAllocation to investor\n    function distribute(address investor, uint amount)\n        public\n        onlyOwner\n    {\n        transferFrom(icoAllocation, investor, amount);\n    }\n\n    /// @dev Overrides Owned.sol function\n    function confirmOwnership()\n        public\n        onlyPotentialOwner\n    {   \n        // Allow new owner to distribute tokens allocated on the icoAllocation address\n        allowed[icoAllocation][potentialOwner] = balanceOf(icoAllocation);\n\n        // Forbid old owner to distribute tokens\n        allowed[icoAllocation][owner] = 0;\n\n        // Forbid old owner to withdraw tokens from foundation reserve\n        allowed[foundationReserve][owner] = 0;\n\n        // Change owner\n        super.confirmOwnership();\n    }\n\n    /// @dev Overrides StandardToken.sol function\n    function allowance(address _owner, address _spender)\n        public\n        constant\n        returns (uint256 remaining)\n    {\n        if (_owner == foundationReserve && _spender == owner) {\n            return availableReserve();\n        }\n\n        return allowed[_owner][_spender];\n    }\n\n    /// @dev Returns max number of tokens that actually can be withdrawn from foundation reserve\n    function availableReserve() \n        public\n        constant\n        returns (uint)\n    {   \n        // No tokens should be available for withdrawal before September 1, 2017\n        if (now < Sept1_2017) {\n            return 0;\n        }\n\n        // Number of days passed  since September 1, 2017\n        uint daysPassed = div(sub(now, Sept1_2017), 1 days);\n\n        // All tokens should be unlocked if reserveDelta days passed\n        if (daysPassed >= reserveDelta) {\n            return balanceOf(foundationReserve);\n        }\n\n        // Percentage of unlocked tokens by the current date\n        uint unlockedPercentage = 0;\n\n        uint16 _days = 0;  uint8 month = 9;\n        while (_days <= daysPassed) {\n            unlockedPercentage += 2;\n            _days += daysInMonth[month];\n            month = month % 12 + 1;\n        }\n\n        // Number of unlocked tokens by the current date\n        uint unlockedTokens = div(mul(totalSupply, unlockedPercentage), 100);\n\n        // Number of tokens that should remain locked\n        uint lockedTokens = foundationTokens - unlockedTokens;\n\n        return balanceOf(foundationReserve) - lockedTokens;\n    }\n\n    /// @dev Withdraws tokens from foundation reserve\n    function withdrawFromReserve(uint amount)\n        public\n        onlyOwner\n    {   \n        // Allow owner to withdraw no more than this amount of tokens\n        allowed[foundationReserve][owner] = availableReserve();\n\n        // Withdraw tokens from foundation reserve to owner address\n        require(transferFrom(foundationReserve, owner, amount));\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromReserve\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"transferERC20Token\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundationReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"potentialOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"current\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"potential\",\"type\":\"address\"}],\"name\":\"NewPotentialOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Issuance\",\"type\":\"event\"}]",
  "bytecode": "6060604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506359a8a3006008556101c860095534156200005e57600080fd5b5b5b426005819055505b6200009063bb40e64d600860ff16620004db6401000000000262001abf176401000000009004565b600481905550620000d9620000bd60045460206200052664010000000002620018ad176401000000009004565b60646200055d640100000000026200186b176401000000009004565b6006819055506006546002600073ffffffffffffffffffffffffffffffffffffffff801673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555062000149600454600654620005a36401000000000262001851176401000000009004565b6002600073111111111111111111111111111111111111111173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550620001d3731111111111111111111111111111111111111111620005be6401000000000262001157176401000000009004565b6003600073111111111111111111111111111111111111111173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601f60076000600160ff16815260200190815260200160002060006101000a81548160ff021916908360ff160217905550601c60076000600260ff16815260200190815260200160002060006101000a81548160ff021916908360ff160217905550601f60076000600360ff16815260200190815260200160002060006101000a81548160ff021916908360ff160217905550601e60076000600460ff16815260200190815260200160002060006101000a81548160ff021916908360ff160217905550601f60076000600560ff16815260200190815260200160002060006101000a81548160ff021916908360ff160217905550601e60076000600660ff16815260200190815260200160002060006101000a81548160ff021916908360ff160217905550601f60076000600760ff16815260200190815260200160002060006101000a81548160ff021916908360ff160217905550601f60076000600860ff16815260200190815260200160002060006101000a81548160ff021916908360ff160217905550601e60076000600960ff16815260200190815260200160002060006101000a81548160ff021916908360ff160217905550601f60076000600a60ff16815260200190815260200160002060006101000a81548160ff021916908360ff160217905550601e60076000600b60ff16815260200190815260200160002060006101000a81548160ff021916908360ff160217905550601f60076000600c60ff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055505b62000628565b60006200051d8362000503600a85620006086401000000000262001ade176401000000009004565b6200052664010000000002620018ad176401000000009004565b90505b92915050565b600080828402905060008414806200054957508284828115156200054657fe5b04145b15156200055257fe5b8091505b5092915050565b6000806000831115156200056d57fe5b82848115156200057957fe5b04905082848115156200058857fe5b0681840201841415156200059857fe5b8091505b5092915050565b6000828211151515620005b257fe5b81830390505b92915050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b60008082840a90508381101515156200061d57fe5b8091505b5092915050565b611b2980620006386000396000f30060606040523615610110576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610115578063095ea7b3146101a45780630a8bcdb9146101fe57806313af40351461022157806318160ddd1461025a57806323b872dd14610283578063313ce567146102fc5780634dc591961461032b57806356d7c2c8146103805780635e9f9613146103d1578063603066a4146103fa57806370a082311461044f5780637762df251461049c5780638da5cb5b146104f157806395d89b4114610546578063a9059cbb146105d5578063d5d1e7701461062f578063d8270dce14610644578063dd62ed3e1461066d578063fb932108146106d9575b600080fd5b341561012057600080fd5b61012861071b565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101695780820151818401525b60208101905061014d565b50505050905090810190601f1680156101965780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101af57600080fd5b6101e4600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610754565b604051808215151515815260200191505060405180910390f35b341561020957600080fd5b61021f6004808035906020019091905050610847565b005b341561022c57600080fd5b610258600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061099b565b005b341561026557600080fd5b61026d610af4565b6040518082815260200191505060405180910390f35b341561028e57600080fd5b6102e2600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610afa565b604051808215151515815260200191505060405180910390f35b341561030757600080fd5b61030f610dfa565b604051808260ff1660ff16815260200191505060405180910390f35b341561033657600080fd5b61033e610dff565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561038b57600080fd5b6103b7600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e17565b604051808215151515815260200191505060405180910390f35b34156103dc57600080fd5b6103e4611026565b6040518082815260200191505060405180910390f35b341561040557600080fd5b61040d61113f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561045a57600080fd5b610486600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611157565b6040518082815260200191505060405180910390f35b34156104a757600080fd5b6104af6111a1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156104fc57600080fd5b6105046111c7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561055157600080fd5b6105596111ec565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561059a5780820151818401525b60208101905061057e565b50505050905090810190601f1680156105c75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105e057600080fd5b610615600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611225565b604051808215151515815260200191505060405180910390f35b341561063a57600080fd5b610642611412565b005b341561064f57600080fd5b6106576116a7565b6040518082815260200191505060405180910390f35b341561067857600080fd5b6106c3600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506116ad565b6040518082815260200191505060405180910390f35b34156106e457600080fd5b610719600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506117d0565b005b6040805190810160405280600581526020017f506f2e657400000000000000000000000000000000000000000000000000000081525081565b600081600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108a257600080fd5b6108aa611026565b6003600073ffffffffffffffffffffffffffffffffffffffff801673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061098b73ffffffffffffffffffffffffffffffffffffffff6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683610afa565b151561099657600080fd5b5b5b50565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109f657600080fd5b7f8a95addc59dddee94a894365b5c66c6c2473b7084d3fd1df9f503db4a2cd6dcc6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a180600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b50565b60045481565b600081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610bc7575081600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015610c525750600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b15610de95781600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050610df3565b60009050610df3565b5b9392505050565b600881565b73111111111111111111111111111111111111111181565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e7557600080fd5b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610f1857600080fd5b6102c65a03f11515610f2957600080fd5b5050506040518051905090508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561100157600080fd5b6102c65a03f1151561101257600080fd5b5050506040518051905091505b5b50919050565b60008060008060008060006008544210156110445760009650611136565b61105c61105342600854611851565b6201518061186b565b95506009548610151561108d5761108673ffffffffffffffffffffffffffffffffffffffff611157565b9650611136565b6000945060009350600992505b858461ffff161115156110f557600285019450600760008460ff1660ff16815260200190815260200160002060009054906101000a900460ff1660ff16840193506001600c8460ff168115156110ec57fe5b0601925061109a565b61110b611104600454876118ad565b606461186b565b9150816006540390508061113273ffffffffffffffffffffffffffffffffffffffff611157565b0396505b50505050505090565b73ffffffffffffffffffffffffffffffffffffffff81565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f504f45000000000000000000000000000000000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156112f55750600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b156114025781600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905061140c565b6000905061140c565b5b92915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561146e57600080fd5b61148b731111111111111111111111111111111111111111611157565b6003600073111111111111111111111111111111111111111173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060006003600073111111111111111111111111111111111111111173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060006003600073ffffffffffffffffffffffffffffffffffffffff801673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506116a36118e1565b5b5b565b60055481565b600073ffffffffffffffffffffffffffffffffffffffff80168373ffffffffffffffffffffffffffffffffffffffff1614801561173657506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b1561174a57611743611026565b90506117ca565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561182b57600080fd5b61184a7311111111111111111111111111111111111111118383610afa565b505b5b5050565b600082821115151561185f57fe5b81830390505b92915050565b60008060008311151561187a57fe5b828481151561188557fe5b049050828481151561189357fe5b0681840201841415156118a257fe5b8091505b5092915050565b600080828402905060008414806118ce57508284828115156118cb57fe5b04145b15156118d657fe5b8091505b5092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561193d57600080fd5b7f70aea8d848e8a90fb7661b227dc522eb6395c3dac71b63cb59edd5c9899b23646000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b565b6000611ad583611ad0600a85611ade565b6118ad565b90505b92915050565b60008082840a9050838110151515611af257fe5b8091505b50929150505600a165627a7a72305820643f57bb3a73747ed773e759bb0a0219b68e17637338a3fc5747f610183639540029"
}