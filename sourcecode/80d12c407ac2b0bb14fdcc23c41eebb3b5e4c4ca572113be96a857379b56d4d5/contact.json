{
  "address": "0xebafd12cc97ab04bd024192ba0fce12b35b703e5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WallOfChainToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-11\n*/\n\npragma solidity ^0.4.24;\n\n// File: openzeppelin-solidity/contracts/access/Roles.sol\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an account access to this role\n   */\n  function add(Role storage role, address account) internal {\n    require(account != address(0));\n    require(!has(role, account));\n\n    role.bearer[account] = true;\n  }\n\n  /**\n   * @dev remove an account's access to this role\n   */\n  function remove(Role storage role, address account) internal {\n    require(account != address(0));\n    require(has(role, account));\n\n    role.bearer[account] = false;\n  }\n\n  /**\n   * @dev check if an account has this role\n   * @return bool\n   */\n  function has(Role storage role, address account)\n    internal\n    view\n    returns (bool)\n  {\n    require(account != address(0));\n    return role.bearer[account];\n  }\n}\n\n// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol\n\ncontract MinterRole {\n  using Roles for Roles.Role;\n\n  event MinterAdded(address indexed account);\n  event MinterRemoved(address indexed account);\n\n  Roles.Role private minters;\n\n  constructor() internal {\n    _addMinter(msg.sender);\n  }\n\n  modifier onlyMinter() {\n    require(isMinter(msg.sender));\n    _;\n  }\n\n  function isMinter(address account) public view returns (bool) {\n    return minters.has(account);\n  }\n\n  function addMinter(address account) public onlyMinter {\n    _addMinter(account);\n  }\n\n  function renounceMinter() public {\n    _removeMinter(msg.sender);\n  }\n\n  function _addMinter(address account) internal {\n    minters.add(account);\n    emit MinterAdded(account);\n  }\n\n  function _removeMinter(address account) internal {\n    minters.remove(account);\n    emit MinterRemoved(account);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/introspection/IERC165.sol\n\n/**\n * @title IERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface IERC165 {\n\n  /**\n   * @notice Query if a contract implements an interface\n   * @param interfaceId The interface identifier, as specified in ERC-165\n   * @dev Interface identification is specified in ERC-165. This function\n   * uses less than 30,000 gas.\n   */\n  function supportsInterface(bytes4 interfaceId)\n    external\n    view\n    returns (bool);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721 is IERC165 {\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 indexed tokenId\n  );\n  event Approval(\n    address indexed owner,\n    address indexed approved,\n    uint256 indexed tokenId\n  );\n  event ApprovalForAll(\n    address indexed owner,\n    address indexed operator,\n    bool approved\n  );\n\n  function balanceOf(address owner) public view returns (uint256 balance);\n  function ownerOf(uint256 tokenId) public view returns (address owner);\n\n  function approve(address to, uint256 tokenId) public;\n  function getApproved(uint256 tokenId)\n    public view returns (address operator);\n\n  function setApprovalForAll(address operator, bool _approved) public;\n  function isApprovedForAll(address owner, address operator)\n    public view returns (bool);\n\n  function transferFrom(address from, address to, uint256 tokenId) public;\n  function safeTransferFrom(address from, address to, uint256 tokenId)\n    public;\n\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes data\n  )\n    public;\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ncontract IERC721Receiver {\n  /**\n   * @notice Handle the receipt of an NFT\n   * @dev The ERC721 smart contract calls this function on the recipient\n   * after a `safeTransfer`. This function MUST return the function selector,\n   * otherwise the caller will revert the transaction. The selector to be\n   * returned can be obtained as `this.onERC721Received.selector`. This\n   * function MAY throw to revert and reject the transfer.\n   * Note: the ERC721 contract address is always the message sender.\n   * @param operator The address which called `safeTransferFrom` function\n   * @param from The address which previously owned the token\n   * @param tokenId The NFT identifier which is being transferred\n   * @param data Additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n   */\n  function onERC721Received(\n    address operator,\n    address from,\n    uint256 tokenId,\n    bytes data\n  )\n    public\n    returns(bytes4);\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/utils/Address.sol\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   * as the code is not actually created until after the constructor finishes.\n   * @param account address of the account to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address account) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(account) }\n    return size > 0;\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/introspection/ERC165.sol\n\n/**\n * @title ERC165\n * @author Matt Condon (@shrugs)\n * @dev Implements ERC165 using a lookup table.\n */\ncontract ERC165 is IERC165 {\n\n  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n  /**\n   * 0x01ffc9a7 ===\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\n   */\n\n  /**\n   * @dev a mapping of interface id to whether or not it's supported\n   */\n  mapping(bytes4 => bool) private _supportedInterfaces;\n\n  /**\n   * @dev A contract implementing SupportsInterfaceWithLookup\n   * implement ERC165 itself\n   */\n  constructor()\n    internal\n  {\n    _registerInterface(_InterfaceId_ERC165);\n  }\n\n  /**\n   * @dev implement supportsInterface(bytes4) using a lookup table\n   */\n  function supportsInterface(bytes4 interfaceId)\n    external\n    view\n    returns (bool)\n  {\n    return _supportedInterfaces[interfaceId];\n  }\n\n  /**\n   * @dev internal method for registering an interface\n   */\n  function _registerInterface(bytes4 interfaceId)\n    internal\n  {\n    require(interfaceId != 0xffffffff);\n    _supportedInterfaces[interfaceId] = true;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721.sol\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721 is ERC165, IERC721 {\n\n  using SafeMath for uint256;\n  using Address for address;\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n  // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n  // Mapping from token ID to owner\n  mapping (uint256 => address) private _tokenOwner;\n\n  // Mapping from token ID to approved address\n  mapping (uint256 => address) private _tokenApprovals;\n\n  // Mapping from owner to number of owned token\n  mapping (address => uint256) private _ownedTokensCount;\n\n  // Mapping from owner to operator approvals\n  mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n  /*\n   * 0x80ac58cd ===\n   *   bytes4(keccak256('balanceOf(address)')) ^\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\n   *   bytes4(keccak256('approve(address,uint256)')) ^\n   *   bytes4(keccak256('getApproved(uint256)')) ^\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n   */\n\n  constructor()\n    public\n  {\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(_InterfaceId_ERC721);\n  }\n\n  /**\n   * @dev Gets the balance of the specified address\n   * @param owner address to query the balance of\n   * @return uint256 representing the amount owned by the passed address\n   */\n  function balanceOf(address owner) public view returns (uint256) {\n    require(owner != address(0));\n    return _ownedTokensCount[owner];\n  }\n\n  /**\n   * @dev Gets the owner of the specified token ID\n   * @param tokenId uint256 ID of the token to query the owner of\n   * @return owner address currently marked as the owner of the given token ID\n   */\n  function ownerOf(uint256 tokenId) public view returns (address) {\n    address owner = _tokenOwner[tokenId];\n    require(owner != address(0));\n    return owner;\n  }\n\n  /**\n   * @dev Approves another address to transfer the given token ID\n   * The zero address indicates there is no approved address.\n   * There can only be one approved address per token at a given time.\n   * Can only be called by the token owner or an approved operator.\n   * @param to address to be approved for the given token ID\n   * @param tokenId uint256 ID of the token to be approved\n   */\n  function approve(address to, uint256 tokenId) public {\n    address owner = ownerOf(tokenId);\n    require(to != owner);\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n    _tokenApprovals[tokenId] = to;\n    emit Approval(owner, to, tokenId);\n  }\n\n  /**\n   * @dev Gets the approved address for a token ID, or zero if no address set\n   * Reverts if the token ID does not exist.\n   * @param tokenId uint256 ID of the token to query the approval of\n   * @return address currently approved for the given token ID\n   */\n  function getApproved(uint256 tokenId) public view returns (address) {\n    require(_exists(tokenId));\n    return _tokenApprovals[tokenId];\n  }\n\n  /**\n   * @dev Sets or unsets the approval of a given operator\n   * An operator is allowed to transfer all tokens of the sender on their behalf\n   * @param to operator address to set the approval\n   * @param approved representing the status of the approval to be set\n   */\n  function setApprovalForAll(address to, bool approved) public {\n    require(to != msg.sender);\n    _operatorApprovals[msg.sender][to] = approved;\n    emit ApprovalForAll(msg.sender, to, approved);\n  }\n\n  /**\n   * @dev Tells whether an operator is approved by a given owner\n   * @param owner owner address which you want to query the approval of\n   * @param operator operator address which you want to query the approval of\n   * @return bool whether the given operator is approved by the given owner\n   */\n  function isApprovedForAll(\n    address owner,\n    address operator\n  )\n    public\n    view\n    returns (bool)\n  {\n    return _operatorApprovals[owner][operator];\n  }\n\n  /**\n   * @dev Transfers the ownership of a given token ID to another address\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param from current owner of the token\n   * @param to address to receive the ownership of the given token ID\n   * @param tokenId uint256 ID of the token to be transferred\n  */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  )\n    public\n  {\n    require(_isApprovedOrOwner(msg.sender, tokenId));\n    require(to != address(0));\n\n    _clearApproval(from, tokenId);\n    _removeTokenFrom(from, tokenId);\n    _addTokenTo(to, tokenId);\n\n    emit Transfer(from, to, tokenId);\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   *\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param from current owner of the token\n   * @param to address to receive the ownership of the given token ID\n   * @param tokenId uint256 ID of the token to be transferred\n  */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  )\n    public\n  {\n    // solium-disable-next-line arg-overflow\n    safeTransferFrom(from, to, tokenId, \"\");\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param from current owner of the token\n   * @param to address to receive the ownership of the given token ID\n   * @param tokenId uint256 ID of the token to be transferred\n   * @param _data bytes data to send along with a safe transfer check\n   */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes _data\n  )\n    public\n  {\n    transferFrom(from, to, tokenId);\n    // solium-disable-next-line arg-overflow\n    require(_checkOnERC721Received(from, to, tokenId, _data));\n  }\n\n  /**\n   * @dev Returns whether the specified token exists\n   * @param tokenId uint256 ID of the token to query the existence of\n   * @return whether the token exists\n   */\n  function _exists(uint256 tokenId) internal view returns (bool) {\n    address owner = _tokenOwner[tokenId];\n    return owner != address(0);\n  }\n\n  /**\n   * @dev Returns whether the given spender can transfer a given token ID\n   * @param spender address of the spender to query\n   * @param tokenId uint256 ID of the token to be transferred\n   * @return bool whether the msg.sender is approved for the given token ID,\n   *  is an operator of the owner, or is the owner of the token\n   */\n  function _isApprovedOrOwner(\n    address spender,\n    uint256 tokenId\n  )\n    internal\n    view\n    returns (bool)\n  {\n    address owner = ownerOf(tokenId);\n    // Disable solium check because of\n    // https://github.com/duaraghav8/Solium/issues/175\n    // solium-disable-next-line operator-whitespace\n    return (\n      spender == owner ||\n      getApproved(tokenId) == spender ||\n      isApprovedForAll(owner, spender)\n    );\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param to The address that will own the minted token\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address to, uint256 tokenId) internal {\n    require(to != address(0));\n    _addTokenTo(to, tokenId);\n    emit Transfer(address(0), to, tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address owner, uint256 tokenId) internal {\n    _clearApproval(owner, tokenId);\n    _removeTokenFrom(owner, tokenId);\n    emit Transfer(owner, address(0), tokenId);\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event.\n   * @param to address representing the new owner of the given token ID\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function _addTokenTo(address to, uint256 tokenId) internal {\n    require(_tokenOwner[tokenId] == address(0));\n    _tokenOwner[tokenId] = to;\n    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event,\n   * and doesn't clear approvals.\n   * @param from address representing the previous owner of the given token ID\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\n    require(ownerOf(tokenId) == from);\n    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n    _tokenOwner[tokenId] = address(0);\n  }\n\n  /**\n   * @dev Internal function to invoke `onERC721Received` on a target address\n   * The call is not executed if the target address is not a contract\n   * @param from address representing the previous owner of the given token ID\n   * @param to target address that will receive the tokens\n   * @param tokenId uint256 ID of the token to be transferred\n   * @param _data bytes optional data to send along with the call\n   * @return whether the call correctly returned the expected magic value\n   */\n  function _checkOnERC721Received(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes _data\n  )\n    internal\n    returns (bool)\n  {\n    if (!to.isContract()) {\n      return true;\n    }\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\n      msg.sender, from, tokenId, _data);\n    return (retval == _ERC721_RECEIVED);\n  }\n\n  /**\n   * @dev Private function to clear current approval of a given token ID\n   * Reverts if the given address is not indeed the owner of the token\n   * @param owner owner of the token\n   * @param tokenId uint256 ID of the token to be transferred\n   */\n  function _clearApproval(address owner, uint256 tokenId) private {\n    require(ownerOf(tokenId) == owner);\n    if (_tokenApprovals[tokenId] != address(0)) {\n      _tokenApprovals[tokenId] = address(0);\n    }\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721Enumerable is IERC721 {\n  function totalSupply() public view returns (uint256);\n  function tokenOfOwnerByIndex(\n    address owner,\n    uint256 index\n  )\n    public\n    view\n    returns (uint256 tokenId);\n\n  function tokenByIndex(uint256 index) public view returns (uint256);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Enumerable.sol\n\ncontract ERC721Enumerable is ERC165, ERC721, IERC721Enumerable {\n  // Mapping from owner to list of owned token IDs\n  mapping(address => uint256[]) private _ownedTokens;\n\n  // Mapping from token ID to index of the owner tokens list\n  mapping(uint256 => uint256) private _ownedTokensIndex;\n\n  // Array with all token ids, used for enumeration\n  uint256[] private _allTokens;\n\n  // Mapping from token id to position in the allTokens array\n  mapping(uint256 => uint256) private _allTokensIndex;\n\n  bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\n  /**\n   * 0x780e9d63 ===\n   *   bytes4(keccak256('totalSupply()')) ^\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\n   */\n\n  /**\n   * @dev Constructor function\n   */\n  constructor() public {\n    // register the supported interface to conform to ERC721 via ERC165\n    _registerInterface(_InterfaceId_ERC721Enumerable);\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n   * @param owner address owning the tokens list to be accessed\n   * @param index uint256 representing the index to be accessed of the requested tokens list\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n   */\n  function tokenOfOwnerByIndex(\n    address owner,\n    uint256 index\n  )\n    public\n    view\n    returns (uint256)\n  {\n    require(index < balanceOf(owner));\n    return _ownedTokens[owner][index];\n  }\n\n  /**\n   * @dev Gets the total amount of tokens stored by the contract\n   * @return uint256 representing the total amount of tokens\n   */\n  function totalSupply() public view returns (uint256) {\n    return _allTokens.length;\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of all the tokens in this contract\n   * Reverts if the index is greater or equal to the total number of tokens\n   * @param index uint256 representing the index to be accessed of the tokens list\n   * @return uint256 token ID at the given index of the tokens list\n   */\n  function tokenByIndex(uint256 index) public view returns (uint256) {\n    require(index < totalSupply());\n    return _allTokens[index];\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * This function is internal due to language limitations, see the note in ERC721.sol.\n   * It is not intended to be called by custom derived contracts: in particular, it emits no Transfer event.\n   * @param to address representing the new owner of the given token ID\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function _addTokenTo(address to, uint256 tokenId) internal {\n    super._addTokenTo(to, tokenId);\n    uint256 length = _ownedTokens[to].length;\n    _ownedTokens[to].push(tokenId);\n    _ownedTokensIndex[tokenId] = length;\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * This function is internal due to language limitations, see the note in ERC721.sol.\n   * It is not intended to be called by custom derived contracts: in particular, it emits no Transfer event,\n   * and doesn't clear approvals.\n   * @param from address representing the previous owner of the given token ID\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\n    super._removeTokenFrom(from, tokenId);\n\n    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\n    // then delete the last slot.\n    uint256 tokenIndex = _ownedTokensIndex[tokenId];\n    uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\n    uint256 lastToken = _ownedTokens[from][lastTokenIndex];\n\n    _ownedTokens[from][tokenIndex] = lastToken;\n    // This also deletes the contents at the last position of the array\n    _ownedTokens[from].length--;\n\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n    // be zero. Then we can make sure that we will remove tokenId from the ownedTokens list since we are first swapping\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n    _ownedTokensIndex[tokenId] = 0;\n    _ownedTokensIndex[lastToken] = tokenIndex;\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param to address the beneficiary that will own the minted token\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address to, uint256 tokenId) internal {\n    super._mint(to, tokenId);\n\n    _allTokensIndex[tokenId] = _allTokens.length;\n    _allTokens.push(tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param owner owner of the token to burn\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address owner, uint256 tokenId) internal {\n    super._burn(owner, tokenId);\n\n    // Reorg all tokens array\n    uint256 tokenIndex = _allTokensIndex[tokenId];\n    uint256 lastTokenIndex = _allTokens.length.sub(1);\n    uint256 lastToken = _allTokens[lastTokenIndex];\n\n    _allTokens[tokenIndex] = lastToken;\n    _allTokens[lastTokenIndex] = 0;\n\n    _allTokens.length--;\n    _allTokensIndex[tokenId] = 0;\n    _allTokensIndex[lastToken] = tokenIndex;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Metadata.sol\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721Metadata is IERC721 {\n  function name() external view returns (string);\n  function symbol() external view returns (string);\n  function tokenURI(uint256 tokenId) external view returns (string);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Metadata.sol\n\ncontract ERC721Metadata is ERC165, ERC721, IERC721Metadata {\n  // Token name\n  string private _name;\n\n  // Token symbol\n  string private _symbol;\n\n  // Optional mapping for token URIs\n  mapping(uint256 => string) private _tokenURIs;\n\n  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n  /**\n   * 0x5b5e139f ===\n   *   bytes4(keccak256('name()')) ^\n   *   bytes4(keccak256('symbol()')) ^\n   *   bytes4(keccak256('tokenURI(uint256)'))\n   */\n\n  /**\n   * @dev Constructor function\n   */\n  constructor(string name, string symbol) public {\n    _name = name;\n    _symbol = symbol;\n\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(InterfaceId_ERC721Metadata);\n  }\n\n  /**\n   * @dev Gets the token name\n   * @return string representing the token name\n   */\n  function name() external view returns (string) {\n    return _name;\n  }\n\n  /**\n   * @dev Gets the token symbol\n   * @return string representing the token symbol\n   */\n  function symbol() external view returns (string) {\n    return _symbol;\n  }\n\n  /**\n   * @dev Returns an URI for a given token ID\n   * Throws if the token ID does not exist. May return an empty string.\n   * @param tokenId uint256 ID of the token to query\n   */\n  function tokenURI(uint256 tokenId) external view returns (string) {\n    require(_exists(tokenId));\n    return _tokenURIs[tokenId];\n  }\n\n  /**\n   * @dev Internal function to set the token URI for a given token\n   * Reverts if the token ID does not exist\n   * @param tokenId uint256 ID of the token to set its URI\n   * @param uri string URI to assign\n   */\n  function _setTokenURI(uint256 tokenId, string uri) internal {\n    require(_exists(tokenId));\n    _tokenURIs[tokenId] = uri;\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param owner owner of the token to burn\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address owner, uint256 tokenId) internal {\n    super._burn(owner, tokenId);\n\n    // Clear metadata (if any)\n    if (bytes(_tokenURIs[tokenId]).length != 0) {\n      delete _tokenURIs[tokenId];\n    }\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Full.sol\n\n/**\n * @title Full ERC721 Token\n * This implementation includes all the required and some optional functionality of the ERC721 standard\n * Moreover, it includes approve all functionality using operator terminology\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Full is ERC721, ERC721Enumerable, ERC721Metadata {\n  constructor(string name, string symbol) ERC721Metadata(name, symbol)\n    public\n  {\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() internal {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\n// File: eth-token-recover/contracts/TokenRecover.sol\n\n/**\n * @title TokenRecover\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Allow to recover any ERC20 sent into the contract for error\n */\ncontract TokenRecover is Ownable {\n\n  /**\n   * @dev Remember that only owner can call so be careful when use on contracts generated from other contracts.\n   * @param tokenAddress The token contract address\n   * @param tokenAmount Number of tokens to be sent\n   */\n  function recoverERC20(\n    address tokenAddress,\n    uint256 tokenAmount\n  )\n    public\n    onlyOwner\n  {\n    IERC20(tokenAddress).transfer(owner(), tokenAmount);\n  }\n}\n\n// File: solidity-linked-list/contracts/StructuredLinkedList.sol\n\ncontract StructureInterface {\n  function getValue (uint256 _id) public view returns (uint256);\n}\n\n\n/**\n * @title StructuredLinkedList\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev This utility library is inspired by https://github.com/Modular-Network/ethereum-libraries/tree/master/LinkedListLib\n *  It has been updated to add additional functionality and be compatible with solidity 0.4.24 coding patterns.\n */\nlibrary StructuredLinkedList {\n\n  uint256 constant NULL = 0;\n  uint256 constant HEAD = 0;\n  bool constant PREV = false;\n  bool constant NEXT = true;\n\n  struct List {\n    mapping (uint256 => mapping (bool => uint256)) list;\n  }\n\n  /**\n   * @dev Checks if the list exists\n   * @param self stored linked list from contract\n   * @return bool true if list exists, false otherwise\n   */\n  function listExists(\n    List storage self\n  )\n  internal\n  view\n  returns (bool)\n  {\n    // if the head nodes previous or next pointers both point to itself, then there are no items in the list\n    if (self.list[HEAD][PREV] != HEAD || self.list[HEAD][NEXT] != HEAD) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Checks if the node exists\n   * @param self stored linked list from contract\n   * @param _node a node to search for\n   * @return bool true if node exists, false otherwise\n   */\n  function nodeExists(\n    List storage self,\n    uint256 _node\n  )\n  internal\n  view\n  returns (bool)\n  {\n    if (self.list[_node][PREV] == HEAD && self.list[_node][NEXT] == HEAD) {\n      if (self.list[HEAD][NEXT] == _node) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * @dev Returns the number of elements in the list\n   * @param self stored linked list from contract\n   * @return uint256\n   */\n  function sizeOf(\n    List storage self\n  )\n  internal\n  view\n  returns (uint256)\n  {\n    bool exists;\n    uint256 i;\n    uint256 numElements;\n    (exists, i) = getAdjacent(self, HEAD, NEXT);\n    while (i != HEAD) {\n      (exists, i) = getAdjacent(self, i, NEXT);\n      numElements++;\n    }\n    return numElements;\n  }\n\n  /**\n   * @dev Returns the links of a node as a tuple\n   * @param self stored linked list from contract\n   * @param _node id of the node to get\n   * @return bool, uint256, uint256 true if node exists or false otherwise, previous node, next node\n   */\n  function getNode(\n    List storage self,\n    uint256 _node\n  )\n  internal\n  view\n  returns (bool, uint256, uint256)\n  {\n    if (!nodeExists(self, _node)) {\n      return (false, 0, 0);\n    } else {\n      return (true, self.list[_node][PREV], self.list[_node][NEXT]);\n    }\n  }\n\n  /**\n   * @dev Returns the link of a node `_node` in direction `_direction`.\n   * @param self stored linked list from contract\n   * @param _node id of the node to step from\n   * @param _direction direction to step in\n   * @return bool, uint256 true if node exists or false otherwise, node in _direction\n   */\n  function getAdjacent(\n    List storage self,\n    uint256 _node,\n    bool _direction\n  )\n  internal\n  view\n  returns (bool, uint256)\n  {\n    if (!nodeExists(self, _node)) {\n      return (false, 0);\n    } else {\n      return (true, self.list[_node][_direction]);\n    }\n  }\n\n  /**\n   * @dev Returns the link of a node `_node` in direction `NEXT`.\n   * @param self stored linked list from contract\n   * @param _node id of the node to step from\n   * @return bool, uint256 true if node exists or false otherwise, next node\n   */\n  function getNextNode(\n    List storage self,\n    uint256 _node\n  )\n  internal\n  view\n  returns (bool, uint256)\n  {\n    return getAdjacent(self, _node, NEXT);\n  }\n\n  /**\n   * @dev Returns the link of a node `_node` in direction `PREV`.\n   * @param self stored linked list from contract\n   * @param _node id of the node to step from\n   * @return bool, uint256 true if node exists or false otherwise, previous node\n   */\n  function getPreviousNode(\n    List storage self,\n    uint256 _node\n  )\n  internal\n  view\n  returns (bool, uint256)\n  {\n    return getAdjacent(self, _node, PREV);\n  }\n\n  /**\n   * @dev Can be used before `insert` to build an ordered list.\n   * @dev Get the node and then `insertBefore` or `insertAfter` basing on your list order.\n   * @dev If you want to order basing on other than `structure.getValue()` override this function\n   * @param self stored linked list from contract\n   * @param _structure the structure instance\n   * @param _value value to seek\n   * @return uint256 next node with a value less than _value\n   */\n  function getSortedSpot(\n    List storage self,\n    address _structure,\n    uint256 _value\n  )\n  internal view returns (uint256)\n  {\n    if (sizeOf(self) == 0) {\n      return 0;\n    }\n    bool exists;\n    uint256 next;\n    (exists, next) = getAdjacent(self, HEAD, NEXT);\n    while (\n      (next != 0) && ((_value < StructureInterface(_structure).getValue(next)) != NEXT)\n    ) {\n      next = self.list[next][NEXT];\n    }\n    return next;\n  }\n\n  /**\n   * @dev Creates a bidirectional link between two nodes on direction `_direction`\n   * @param self stored linked list from contract\n   * @param _node first node for linking\n   * @param _link  node to link to in the _direction\n   */\n  function createLink(\n    List storage self,\n    uint256 _node,\n    uint256 _link,\n    bool _direction\n  )\n  internal\n  {\n    self.list[_link][!_direction] = _node;\n    self.list[_node][_direction] = _link;\n  }\n\n  /**\n   * @dev Insert node `_new` beside existing node `_node` in direction `_direction`.\n   * @param self stored linked list from contract\n   * @param _node existing node\n   * @param _new  new node to insert\n   * @param _direction direction to insert node in\n   * @return bool true if success, false otherwise\n   */\n  function insert(\n    List storage self,\n    uint256 _node,\n    uint256 _new,\n    bool _direction\n  )\n  internal returns (bool)\n  {\n    if (!nodeExists(self, _new) && nodeExists(self, _node)) {\n      uint256 c = self.list[_node][_direction];\n      createLink(\n        self,\n        _node,\n        _new,\n        _direction\n      );\n      createLink(\n        self,\n        _new,\n        c,\n        _direction\n      );\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Insert node `_new` beside existing node `_node` in direction `NEXT`.\n   * @param self stored linked list from contract\n   * @param _node existing node\n   * @param _new  new node to insert\n   * @return bool true if success, false otherwise\n   */\n  function insertAfter(\n    List storage self,\n    uint256 _node,\n    uint256 _new\n  )\n  internal\n  returns (bool)\n  {\n    return insert(\n      self,\n      _node,\n      _new,\n      NEXT\n    );\n  }\n\n  /**\n   * @dev Insert node `_new` beside existing node `_node` in direction `PREV`.\n   * @param self stored linked list from contract\n   * @param _node existing node\n   * @param _new  new node to insert\n   * @return bool true if success, false otherwise\n   */\n  function insertBefore(\n    List storage self,\n    uint256 _node,\n    uint256 _new\n  )\n  internal\n  returns (bool)\n  {\n    return insert(\n      self,\n      _node,\n      _new,\n      PREV\n    );\n  }\n\n  /**\n   * @dev Removes an entry from the linked list\n   * @param self stored linked list from contract\n   * @param _node node to remove from the list\n   * @return uint256 the removed node\n   */\n  function remove(\n    List storage self,\n    uint256 _node\n  )\n  internal\n  returns (uint256)\n  {\n    if ((_node == NULL) || (!nodeExists(self, _node))) {\n      return 0;\n    }\n    createLink(\n      self,\n      self.list[_node][PREV],\n      self.list[_node][NEXT],\n      NEXT\n    );\n    delete self.list[_node][PREV];\n    delete self.list[_node][NEXT];\n    return _node;\n  }\n\n  /**\n   * @dev Pushes an entry to the head of the linked list\n   * @param self stored linked list from contract\n   * @param _node new entry to push to the head\n   * @param _direction push to the head (NEXT) or tail (PREV)\n   * @return bool true if success, false otherwise\n   */\n  function push(\n    List storage self,\n    uint256 _node,\n    bool _direction\n  )\n  internal\n  returns (bool)\n  {\n    return insert(\n      self,\n      HEAD,\n      _node,\n      _direction\n    );\n  }\n\n  /**\n   * @dev Pops the first entry from the linked list\n   * @param self stored linked list from contract\n   * @param _direction pop from the head (NEXT) or the tail (PREV)\n   * @return uint256 the removed node\n   */\n  function pop(\n    List storage self,\n    bool _direction\n  )\n  internal\n  returns (uint256)\n  {\n    bool exists;\n    uint256 adj;\n\n    (exists, adj) = getAdjacent(self, HEAD, _direction);\n\n    return remove(self, adj);\n  }\n}\n\n// File: contracts/WallOfChainToken.sol\n\ncontract WallOfChainToken is ERC721Full, TokenRecover, MinterRole {\n  using StructuredLinkedList for StructuredLinkedList.List;\n\n  StructuredLinkedList.List list;\n\n  struct WallStructure {\n    uint256 value;\n    string firstName;\n    string lastName;\n    uint256 pattern;\n    uint256 icon;\n  }\n\n  bool public mintingFinished = false;\n\n  uint256 public progressiveId = 0;\n\n  // Mapping from token ID to the structures\n  mapping(uint256 => WallStructure) structureIndex;\n\n  modifier canGenerate() {\n    require(\n      !mintingFinished,\n      \"Minting is finished\"\n    );\n    _;\n  }\n\n  constructor(string _name, string _symbol) public\n  ERC721Full(_name, _symbol)\n  {}\n\n  /**\n   * @dev Function to stop minting new tokens.\n   */\n  function finishMinting() public onlyOwner canGenerate {\n    mintingFinished = true;\n  }\n\n  function newToken(\n    address _beneficiary,\n    uint256 _value,\n    string _firstName,\n    string _lastName,\n    uint256 _pattern,\n    uint256 _icon\n  )\n    public\n    canGenerate\n    onlyMinter\n    returns (uint256)\n  {\n    uint256 tokenId = progressiveId.add(1);\n    _mint(_beneficiary, tokenId);\n    structureIndex[tokenId] = WallStructure(\n      _value,\n      _firstName,\n      _lastName,\n      _value == 0 ? 0 : _pattern,\n      _value == 0 ? 0 : _icon\n    );\n    progressiveId = tokenId;\n\n    uint256 position = list.getSortedSpot(StructureInterface(this), _value);\n    list.insertBefore(position, tokenId);\n\n    return tokenId;\n  }\n\n  function editToken (\n    uint256 _tokenId,\n    uint256 _value,\n    string _firstName,\n    string _lastName,\n    uint256 _pattern,\n    uint256 _icon\n  )\n    public\n    onlyMinter\n    returns (uint256)\n  {\n    require(\n      _exists(_tokenId),\n      \"Token must exists\"\n    );\n\n    uint256 value = getValue(_tokenId);\n\n    if (_value > 0) {\n      value = value.add(_value); // add the new value sent\n\n      // reorder the list\n      list.remove(_tokenId);\n      uint256 position = list.getSortedSpot(StructureInterface(this), value);\n      list.insertBefore(position, _tokenId);\n    }\n\n    structureIndex[_tokenId] = WallStructure(\n      value,\n      _firstName,\n      _lastName,\n      value == 0 ? 0 : _pattern,\n      value == 0 ? 0 : _icon\n    );\n\n    return _tokenId;\n  }\n\n  function getWall (\n    uint256 _tokenId\n  )\n    public\n    view\n    returns (\n      address tokenOwner,\n      uint256 value,\n      string firstName,\n      string lastName,\n      uint256 pattern,\n      uint256 icon\n    )\n  {\n    require(\n      _exists(_tokenId),\n      \"Token must exists\"\n    );\n\n    WallStructure storage wall = structureIndex[_tokenId];\n\n    tokenOwner = ownerOf(_tokenId);\n\n    value = wall.value;\n    firstName = wall.firstName;\n    lastName = wall.lastName;\n    pattern = wall.pattern;\n    icon = wall.icon;\n  }\n\n  function getValue (uint256 _tokenId) public view returns (uint256) {\n    require(\n      _exists(_tokenId),\n      \"Token must exists\"\n    );\n    WallStructure storage wall = structureIndex[_tokenId];\n    return wall.value;\n  }\n\n  function getNextNode(uint256 _tokenId) public view returns (bool, uint256) {\n    return list.getNextNode(_tokenId);\n  }\n\n  function getPreviousNode(\n    uint256 _tokenId\n  )\n    public\n    view\n    returns (bool, uint256)\n  {\n    return list.getPreviousNode(_tokenId);\n  }\n\n  /**\n   * @dev Only contract owner or token owner can burn\n   */\n  function burn(uint256 _tokenId) public {\n    address tokenOwner = isOwner() ? ownerOf(_tokenId) : msg.sender;\n    super._burn(tokenOwner, _tokenId);\n    list.remove(_tokenId);\n    delete structureIndex[_tokenId];\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getNextNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPreviousNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_firstName\",\"type\":\"string\"},{\"name\":\"_lastName\",\"type\":\"string\"},{\"name\":\"_pattern\",\"type\":\"uint256\"},{\"name\":\"_icon\",\"type\":\"uint256\"}],\"name\":\"newToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_firstName\",\"type\":\"string\"},{\"name\":\"_lastName\",\"type\":\"string\"},{\"name\":\"_pattern\",\"type\":\"uint256\"},{\"name\":\"_icon\",\"type\":\"uint256\"}],\"name\":\"editToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"progressiveId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getWall\",\"outputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"firstName\",\"type\":\"string\"},{\"name\":\"lastName\",\"type\":\"string\"},{\"name\":\"pattern\",\"type\":\"uint256\"},{\"name\":\"icon\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]",
  "bytecode": "60806040526000600f60006101000a81548160ff02191690831515021790555060006010553480156200003157600080fd5b5060405162003dfc38038062003dfc833981018060405281019080805182019291906020018051820192919050505081818181620000a16301ffc9a77c0100000000000000000000000000000000000000000000000000000000026200026e640100000000026401000000009004565b620000de6380ac58cd7c0100000000000000000000000000000000000000000000000000000000026200026e640100000000026401000000009004565b6200011b63780e9d637c0100000000000000000000000000000000000000000000000000000000026200026e640100000000026401000000009004565b816009908051906020019062000133929190620004ee565b5080600a90805190602001906200014c929190620004ee565b506200018a635b5e139f7c0100000000000000000000000000000000000000000000000000000000026200026e640100000000026401000000009004565b5050505033600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a362000266336200032c640100000000026401000000009004565b50506200059d565b63ffffffff7c010000000000000000000000000000000000000000000000000000000002817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614151515620002c057600080fd5b6001600080837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6200035081600d6200039664010000000002620033ab179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515620003d357600080fd5b620003ee828262000459640100000000026401000000009004565b151515620003fb57600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156200049757600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200053157805160ff191683800117855562000562565b8280016001018555821562000562579182015b828111156200056157825182559160200191906001019062000544565b5b50905062000571919062000575565b5090565b6200059a91905b80821115620005965760008160009055506001016200057c565b5090565b90565b61384f80620005ad6000396000f3006080604052600436106101ac576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301ffc9a7146101b157806305d2035b1461021557806306fdde0314610244578063081812fc146102d4578063095ea7b3146103415780630ff4c9161461038e57806318160ddd146103cf57806323b872dd146103fa5780632f745c591461046757806342842e0e146104c857806342966c68146105355780634f6ccce7146105625780636352211e146105a35780636d902bfb1461061057806370a082311461065c578063715018a6146106b35780637d64bcb4146106ca5780638980f11f146106e15780638da5cb5b1461072e5780638f32d59b1461078557806392c2cd8c146107b457806395d89b4114610800578063983b2d561461089057806398650275146108d35780639c770684146108ea578063a22cb465146109eb578063aa271e1a14610a3a578063b40bb85d14610a95578063b88d4fde14610b80578063c3b909d714610c33578063c87b56dd14610c5e578063e985e9c514610d04578063f2fde38b14610d7f578063ff91e48914610dc2575b600080fd5b3480156101bd57600080fd5b506101fb60048036038101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610f1c565b604051808215151515815260200191505060405180910390f35b34801561022157600080fd5b5061022a610f83565b604051808215151515815260200191505060405180910390f35b34801561025057600080fd5b50610259610f96565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561029957808201518184015260208101905061027e565b50505050905090810190601f1680156102c65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102e057600080fd5b506102ff60048036038101908080359060200190929190505050611038565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561034d57600080fd5b5061038c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611089565b005b34801561039a57600080fd5b506103b9600480360381019080803590602001909291905050506111ce565b6040518082815260200191505060405180910390f35b3480156103db57600080fd5b506103e4611270565b6040518082815260200191505060405180910390f35b34801561040657600080fd5b50610465600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061127d565b005b34801561047357600080fd5b506104b2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061134c565b6040518082815260200191505060405180910390f35b3480156104d457600080fd5b50610533600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506113c3565b005b34801561054157600080fd5b50610560600480360381019080803590602001909291905050506113e4565b005b34801561056e57600080fd5b5061058d60048036038101908080359060200190929190505050611475565b6040518082815260200191505060405180910390f35b3480156105af57600080fd5b506105ce600480360381019080803590602001909291905050506114ad565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561061c57600080fd5b5061063b6004803603810190808035906020019092919050505061152b565b60405180831515151581526020018281526020019250505060405180910390f35b34801561066857600080fd5b5061069d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061154b565b6040518082815260200191505060405180910390f35b3480156106bf57600080fd5b506106c86115cf565b005b3480156106d657600080fd5b506106df6116a3565b005b3480156106ed57600080fd5b5061072c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611758565b005b34801561073a57600080fd5b50610743611855565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561079157600080fd5b5061079a61187f565b604051808215151515815260200191505060405180910390f35b3480156107c057600080fd5b506107df600480360381019080803590602001909291905050506118d7565b60405180831515151581526020018281526020019250505060405180910390f35b34801561080c57600080fd5b506108156118f7565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561085557808201518184015260208101905061083a565b50505050905090810190601f1680156108825780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561089c57600080fd5b506108d1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611999565b005b3480156108df57600080fd5b506108e86119b9565b005b3480156108f657600080fd5b506109d5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190803590602001909291905050506119c4565b6040518082815260200191505060405180910390f35b3480156109f757600080fd5b50610a38600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050611b7f565b005b348015610a4657600080fd5b50610a7b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611cbb565b604051808215151515815260200191505060405180910390f35b348015610aa157600080fd5b50610b6a6004803603810190808035906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192908035906020019092919080359060200190929190505050611cd8565b6040518082815260200191505060405180910390f35b348015610b8c57600080fd5b50610c31600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611ea1565b005b348015610c3f57600080fd5b50610c48611ec9565b6040518082815260200191505060405180910390f35b348015610c6a57600080fd5b50610c8960048036038101908080359060200190929190505050611ecf565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610cc9578082015181840152602081019050610cae565b50505050905090810190601f168015610cf65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610d1057600080fd5b50610d65600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f98565b604051808215151515815260200191505060405180910390f35b348015610d8b57600080fd5b50610dc0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061202c565b005b348015610dce57600080fd5b50610ded6004803603810190808035906020019092919050505061204b565b604051808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018060200180602001858152602001848152602001838103835287818151815260200191508051906020019080838360005b83811015610e75578082015181840152602081019050610e5a565b50505050905090810190601f168015610ea25780820380516001836020036101000a031916815260200191505b50838103825286818151815260200191508051906020019080838360005b83811015610edb578082015181840152602081019050610ec0565b50505050905090810190601f168015610f085780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b600f60009054906101000a900460ff1681565b606060098054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561102e5780601f106110035761010080835404028352916020019161102e565b820191906000526020600020905b81548152906001019060200180831161101157829003601f168201915b5050505050905090565b600061104382612250565b151561104e57600080fd5b6002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000611094826114ad565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156110d157600080fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061111157506111108133611f98565b5b151561111c57600080fd5b826002600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b6000806111da83612250565b151561124e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f546f6b656e206d7573742065786973747300000000000000000000000000000081525060200191505060405180910390fd5b6011600084815260200190815260200160002090508060000154915050919050565b6000600780549050905090565b61128733826122c2565b151561129257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156112ce57600080fd5b6112d88382612357565b6112e2838261245a565b6112ec8282612616565b808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b60006113578361154b565b8210151561136457600080fd5b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811015156113b057fe5b9060005260206000200154905092915050565b6113df8383836020604051908101604052806000815250611ea1565b505050565b60006113ee61187f565b6113f85733611402565b611401826114ad565b5b905061140e81836126ed565b61142282600e61274c90919063ffffffff16565b506011600083815260200190815260200160002060008082016000905560018201600061144f919061370a565b60028201600061145f919061370a565b6003820160009055600482016000905550505050565b600061147f611270565b8210151561148c57600080fd5b60078281548110151561149b57fe5b90600052602060002001549050919050565b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561152257600080fd5b80915050919050565b60008061154283600e61283a90919063ffffffff16565b91509150915091565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561158857600080fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6115d761187f565b15156115e257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6116ab61187f565b15156116b657600080fd5b600f60009054906101000a900460ff1615151561173b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4d696e74696e672069732066696e69736865640000000000000000000000000081525060200191505060405180910390fd5b6001600f60006101000a81548160ff021916908315150217905550565b61176061187f565b151561176b57600080fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb61178f611855565b836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561181557600080fd5b505af1158015611829573d6000803e3d6000fd5b505050506040513d602081101561183f57600080fd5b8101908080519060200190929190505050505050565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b6000806118ee83600e61285490919063ffffffff16565b91509150915091565b6060600a8054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561198f5780601f106119645761010080835404028352916020019161198f565b820191906000526020600020905b81548152906001019060200180831161197257829003601f168201915b5050505050905090565b6119a233611cbb565b15156119ad57600080fd5b6119b68161286e565b50565b6119c2336128c8565b565b6000806000600f60009054906101000a900460ff16151515611a4e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4d696e74696e672069732066696e69736865640000000000000000000000000081525060200191505060405180910390fd5b611a5733611cbb565b1515611a6257600080fd5b611a78600160105461292290919063ffffffff16565b9150611a848983612943565b60a06040519081016040528089815260200188815260200187815260200160008a14611ab05786611ab3565b60005b815260200160008a14611ac65785611ac9565b60005b81525060116000848152602001908152602001600020600082015181600001556020820151816001019080519060200190611b05929190613752565b506040820151816002019080519060200190611b22929190613752565b50606082015181600301556080820151816004015590505081601081905550611b573089600e61299a9092919063ffffffff16565b9050611b6f8183600e612ad49092919063ffffffff16565b5081925050509695505050505050565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611bba57600080fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b6000611cd182600d612aec90919063ffffffff16565b9050919050565b6000806000611ce633611cbb565b1515611cf157600080fd5b611cfa89612250565b1515611d6e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f546f6b656e206d7573742065786973747300000000000000000000000000000081525060200191505060405180910390fd5b611d77896111ce565b91506000881115611ddc57611d95888361292290919063ffffffff16565b9150611dab89600e61274c90919063ffffffff16565b50611dc23083600e61299a9092919063ffffffff16565b9050611dda818a600e612ad49092919063ffffffff16565b505b60a06040519081016040528083815260200188815260200187815260200160008414611e085786611e0b565b60005b815260200160008414611e1e5785611e21565b60005b815250601160008b8152602001908152602001600020600082015181600001556020820151816001019080519060200190611e5d929190613752565b506040820151816002019080519060200190611e7a929190613752565b50606082015181600301556080820151816004015590505088925050509695505050505050565b611eac84848461127d565b611eb884848484612b80565b1515611ec357600080fd5b50505050565b60105481565b6060611eda82612250565b1515611ee557600080fd5b600b60008381526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611f8c5780601f10611f6157610100808354040283529160200191611f8c565b820191906000526020600020905b815481529060010190602001808311611f6f57829003601f168201915b50505050509050919050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61203461187f565b151561203f57600080fd5b61204881612da2565b50565b600080606080600080600061205f88612250565b15156120d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f546f6b656e206d7573742065786973747300000000000000000000000000000081525060200191505060405180910390fd5b6011600089815260200190815260200160002090506120f1886114ad565b965080600001549550806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156121925780601f1061216757610100808354040283529160200191612192565b820191906000526020600020905b81548152906001019060200180831161217557829003601f168201915b50505050509450806002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156122315780601f1061220657610100808354040283529160200191612231565b820191906000526020600020905b81548152906001019060200180831161221457829003601f168201915b5050505050935080600301549250806004015491505091939550919395565b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415915050919050565b6000806122ce836114ad565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061233d57508373ffffffffffffffffffffffffffffffffffffffff1661232584611038565b73ffffffffffffffffffffffffffffffffffffffff16145b8061234e575061234d8185611f98565b5b91505092915050565b8173ffffffffffffffffffffffffffffffffffffffff16612377826114ad565b73ffffffffffffffffffffffffffffffffffffffff1614151561239957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156124565760006002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5050565b60008060006124698585612e9e565b600660008581526020019081526020016000205492506124d56001600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050612fcd90919063ffffffff16565b9150600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561252357fe5b9060005260206000200154905080600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110151561257d57fe5b9060005260206000200181905550600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054809190600190036125dd91906137d2565b50600060066000868152602001908152602001600020819055508260066000838152602001908152602001600020819055505050505050565b60006126228383612fee565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050906001820390600052602060002001600090919290919091505550806006600084815260200190815260200160002081905550505050565b6126f78282613148565b6000600b600083815260200190815260200160002080546001816001161561010002031660029004905014151561274857600b60008281526020019081526020016000206000612747919061370a565b5b5050565b6000808214806127635750612761838361322f565b155b156127715760009050612834565b6127d38384600001600085815260200190815260200160002060008015151515815260200190815260200160002054856000016000868152602001908152602001600020600060011515151581526020019081526020016000205460016132ea565b8260000160008381526020019081526020016000206000801515151581526020019081526020016000206000905582600001600083815260200190815260200160002060006001151515158152602001908152602001600020600090558190505b92915050565b6000806128498484600161334f565b915091509250929050565b6000806128638484600061334f565b915091509250929050565b61288281600d6133ab90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b6128dc81600d61345b90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669260405160405180910390a250565b600080828401905083811015151561293957600080fd5b8091505092915050565b61294d828261350a565b600780549050600860008381526020019081526020016000208190555060078190806001815401808255809150509060018203906000526020600020016000909192909190915055505050565b6000806000806129a9876135b0565b14156129b85760009250612acb565b6129c5866000600161334f565b80925081935050505b60008114158015612a8f5750600115158573ffffffffffffffffffffffffffffffffffffffff16630ff4c916836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015612a4d57600080fd5b505af1158015612a61573d6000803e3d6000fd5b505050506040513d6020811015612a7757600080fd5b81019080805190602001909291905050508510151514155b15612ac757856000016000828152602001908152602001600020600060011515151581526020019081526020016000205490506129ce565b8092505b50509392505050565b6000612ae38484846000613602565b90509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612b2957600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600080612ba28573ffffffffffffffffffffffffffffffffffffffff16613683565b1515612bb15760019150612d99565b8473ffffffffffffffffffffffffffffffffffffffff1663150b7a02338887876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612ca6578082015181840152602081019050612c8b565b50505050905090810190601f168015612cd35780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015612cf557600080fd5b505af1158015612d09573d6000803e3d6000fd5b505050506040513d6020811015612d1f57600080fd5b8101908080519060200190929190505050905063150b7a027c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505b50949350505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612dde57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b8173ffffffffffffffffffffffffffffffffffffffff16612ebe826114ad565b73ffffffffffffffffffffffffffffffffffffffff16141515612ee057600080fd5b612f336001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612fcd90919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060006001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600080838311151515612fdf57600080fd5b82840390508091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561305c57600080fd5b816001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506131016001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461292290919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60008060006131578585613696565b600860008581526020019081526020016000205492506131866001600780549050612fcd90919063ffffffff16565b915060078281548110151561319757fe5b90600052602060002001549050806007848154811015156131b457fe5b906000526020600020018190555060006007838154811015156131d357fe5b906000526020600020018190555060078054809190600190036131f691906137d2565b50600060086000868152602001908152602001600020819055508260086000838152602001908152602001600020819055505050505050565b60008083600001600084815260200190815260200160002060008015151515815260200190815260200160002054148015613295575060008360000160008481526020019081526020016000206000600115151515815260200190815260200160002054145b156132df5781836000016000808152602001908152602001600020600060011515151581526020019081526020016000205414156132d657600190506132e4565b600090506132e4565b600190505b92915050565b828460000160008481526020019081526020016000206000831515151515815260200190815260200160002081905550818460000160008581526020019081526020016000206000831515151581526020019081526020016000208190555050505050565b60008061335c858561322f565b151561337157600080809050915091506133a3565b600185600001600086815260200190815260200160002060008515151515815260200190815260200160002054915091505b935093915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156133e757600080fd5b6133f18282612aec565b1515156133fd57600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561349757600080fd5b6134a18282612aec565b15156134ac57600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561354657600080fd5b6135508282612616565b808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6000806000806135c3856000600161334f565b80935081945050505b6000821415156135f7576135e28583600161334f565b809350819450505080806001019150506135cc565b809350505050919050565b60008061360f868561322f565b1580156136225750613621868661322f565b5b1561367557856000016000868152602001908152602001600020600084151515158152602001908152602001600020549050613660868686866132ea565b61366c868583866132ea565b6001915061367a565b600091505b50949350505050565b600080823b905060008111915050919050565b6136a08282612357565b6136aa828261245a565b80600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b50805460018160011615610100020316600290046000825580601f10613730575061374f565b601f01602090049060005260206000209081019061374e91906137fe565b5b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061379357805160ff19168380011785556137c1565b828001600101855582156137c1579182015b828111156137c05782518255916020019190600101906137a5565b5b5090506137ce91906137fe565b5090565b8154818355818111156137f9578183600052602060002091820191016137f891906137fe565b5b505050565b61382091905b8082111561381c576000816000905550600101613804565b5090565b905600a165627a7a7230582013e7474e8af1d4c5bc955da77fbb0bfe4bd8e02ea15022a8de833f065d3a4336002900000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000b57616c6c4f66436861696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003574f430000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000b57616c6c4f66436861696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003574f430000000000000000000000000000000000000000000000000000000000"
}