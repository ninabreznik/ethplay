{
  "address": "0x4bdde1e9fbaef2579dd63e2abbf0be445ab93f10",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CityMayor",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-05\n*/\n\npragma solidity ^0.4.19;\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n  \tif (a == 0) {\n  \t\treturn 0;\n  \t}\n  \tuint256 c = a * b;\n  \tassert(c / a == b);\n  \treturn c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n // we don't need \"div\"\n/*  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n  \t// assert(b > 0); // Solidity automatically throws when dividing by 0\n  \tuint256 c = a / b;\n  \t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n  \treturn c;\n  }\n*/\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n  \tassert(b <= a);\n  \treturn a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n  \tuint256 c = a + b;\n  \tassert(c >= a);\n  \treturn c;\n  }\n}\n\n\ncontract CityMayor {\n\n\tusing SafeMath for uint256;\n\n\t//\n\t// ERC-20\n\t//\n\n   \tstring public name = \"CityCoin\";\n   \tstring public symbol = \"CITY\";\n   \tuint8 public decimals = 0;\n\n\tmapping(address => uint256) balances;\n\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\t/**\n\t* @dev total number of tokens in existence\n\t*/\n\tuint256 totalSupply_;\n\tfunction totalSupply() public view returns (uint256) {\n\t\treturn totalSupply_;\n\t}\n\n\t/**\n\t* @dev transfer token for a specified address\n\t* @param _to The address to transfer to.\n\t* @param _value The amount to be transferred.\n\t*/\n\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n\t\trequire(_to != address(0));\n\t\trequire(_value <= balances[msg.sender]);\n\n\t\t// SafeMath.sub will throw if there is not enough balance.\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\tTransfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t* @dev Gets the balance of the specified address.\n\t* @param _owner The address to query the the balance of.\n\t* @return An uint256 representing the amount owned by the passed address.\n\t*/\n\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\n\t\treturn balances[_owner];\n\t}\n\n\tmapping (address => mapping (address => uint256)) internal allowed;\n\n\n\t/**\n\t* @dev Transfer tokens from one address to another\n\t* @param _from address The address which you want to send tokens from\n\t* @param _to address The address which you want to transfer to\n\t* @param _value uint256 the amount of tokens to be transferred\n\t*/\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n\t\trequire(_to != address(0));\n\t\trequire(_value <= balances[_from]);\n\t\trequire(_value <= allowed[_from][msg.sender]);\n\n\t\tbalances[_from] = balances[_from].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\t\tTransfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t* @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n\t*\n\t* Beware that changing an allowance with this method brings the risk that someone may use both the old\n\t* and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n\t* race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n\t* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\t* @param _spender The address which will spend the funds.\n\t* @param _value The amount of tokens to be spent.\n\t*/\n\tfunction approve(address _spender, uint256 _value) public returns (bool) {\n\t\tallowed[msg.sender][_spender] = _value;\n\t\tApproval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t* @dev Function to check the amount of tokens that an owner allowed to a spender.\n\t* @param _owner address The address which owns the funds.\n\t* @param _spender address The address which will spend the funds.\n\t* @return A uint256 specifying the amount of tokens still available for the spender.\n\t*/\n\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\n\t\treturn allowed[_owner][_spender];\n\t}\n\n\t/**\n\t* @dev Increase the amount of tokens that an owner allowed to a spender.\n\t*\n\t* approve should be called when allowed[_spender] == 0. To increment\n\t* allowed value is better to use this function to avoid 2 calls (and wait until\n\t* the first transaction is mined)\n\t* From MonolithDAO Token.sol\n\t* @param _spender The address which will spend the funds.\n\t* @param _addedValue The amount of tokens to increase the allowance by.\n\t*/\n\tfunction increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\t\treturn true;\n\t}\n\n\t/**\n\t* @dev Decrease the amount of tokens that an owner allowed to a spender.\n\t*\n\t* approve should be called when allowed[_spender] == 0. To decrement\n\t* allowed value is better to use this function to avoid 2 calls (and wait until\n\t* the first transaction is mined)\n\t* From MonolithDAO Token.sol\n\t* @param _spender The address which will spend the funds.\n\t* @param _subtractedValue The amount of tokens to decrease the allowance by.\n\t*/\n\tfunction decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n\t\tuint oldValue = allowed[msg.sender][_spender];\n\t\tif (_subtractedValue > oldValue) {\n\t\t\tallowed[msg.sender][_spender] = 0;\n\t\t\t} else {\n\t\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\t\t\t}\n\t\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\t\t\treturn true;\n\t\t}\n\n   \t//\n   \t// Game Meta values\n   \t//\n\n   \taddress public unitedNations; // the UN organisation\n\n   \tuint16 public MAX_CITIES = 5000; // maximum amount of cities in our world\n   \tuint256 public UNITED_NATIONS_FUND = 5000000; // initial funding for the UN\n   \tuint256 public ECONOMY_BOOST = 5000; // minted CITYs when a new city is being bought \n\n   \tuint256 public BUY_CITY_FEE = 3; // UN fee (% of ether) to buy a city from someon / 100e\n   \tuint256 public ECONOMY_BOOST_TRADE = 100; // _immutable_ gift (in CITY) from the UN when a city is traded (shared among the cities of the relevant country)\n\n   \tuint256 public MONUMENT_UN_FEE = 3; // UN fee (CITY) to buy a monument\n   \tuint256 public MONUMENT_CITY_FEE = 3; // additional fee (CITY) to buy a monument (shared to the monument's city)\n\n   \t//\n   \t// Game structures\n   \t//\n\n   \tstruct country {\n   \t\tstring name;\n   \t\tuint16[] cities;\n   \t}\n\n   \tstruct city {\n   \t\tstring name;\n   \t\tuint256 price;\n   \t\taddress owner;\n\n   \t\tuint16 countryId;\n   \t\tuint256[] monuments;\n\n   \t\tbool buyable; // set to true when it can be bought\n\n   \t\tuint256 last_purchase_price;\n   \t}\n\n   \tstruct monument {\n   \t\tstring name;\n   \t\tuint256 price;\n   \t\taddress owner;\n\n   \t\tuint16 cityId;\n   \t}\n\n   \tcity[] public cities; // cityId -> city\n   \tcountry[] public countries; // countryId -> country\n   \tmonument[] public monuments; // monumentId -> monument\n\n   \t// total amount of offers (escrowed money)\n\tuint256 public totalOffer;\n\n   \t//\n   \t// Game events\n   \t//\n\n\n\tevent NewCity(uint256 cityId, string name, uint256 price, uint16 countryId);\n\tevent NewMonument(uint256 monumentId, string name, uint256 price, uint16 cityId);\n\n\tevent CityForSale(uint16 cityId, uint256 price);\n\tevent CitySold(uint16 cityId, uint256 price, address previousOwner, address newOwner, uint256 offerId);\n\n\tevent MonumentSold(uint256 monumentId, uint256 price);\n\n   \t// \n   \t// Admin stuff\n   \t//\n\n   \t// constructor\n   \tfunction CityMayor() public {\n   \t\tunitedNations = msg.sender;\n   \t\tbalances[unitedNations] = UNITED_NATIONS_FUND; // initial funding for the united nations\n   \t\tuint256 perFounder = 500000;\n   \t\tbalances[address(0xe1811eC49f493afb1F4B42E3Ef4a3B9d62d9A01b)] = perFounder; // david\n   \t\tbalances[address(0x1E4F1275bB041586D7Bec44D2E3e4F30e0dA7Ba4)] = perFounder; // simon\n   \t\tbalances[address(0xD5d6301dE62D82F461dC29824FC597D38d80c424)] = perFounder; // eric\n   \t\t// total supply updated\n   \t\ttotalSupply_ = UNITED_NATIONS_FUND + 3 * perFounder;\n   \t}\n\n   \t// this function is used to let admins give cities back to owners of previous contracts\n   \tfunction AdminBuyForSomeone(uint16 _cityId, address _owner) public {\n   \t\t// admin only\n   \t\trequire(msg.sender == unitedNations);\n\t   \t// fetch\n\t   \tcity memory fetchedCity = cities[_cityId];\n\t   \t// requires\n\t\trequire(fetchedCity.buyable == true);\n\t\trequire(fetchedCity.owner == 0x0); \n\t   \t// transfer ownership\n\t   \tcities[_cityId].owner = _owner;\n\t   \t// update city metadata\n\t   \tcities[_cityId].buyable = false;\n\t   \tcities[_cityId].last_purchase_price = fetchedCity.price;\n\t   \t// increase economy of region according to ECONOMY_BOOST\n\t   \tuint16[] memory fetchedCities = countries[fetchedCity.countryId].cities;\n\t   \tuint256 perCityBoost = ECONOMY_BOOST / fetchedCities.length;\n\t   \tfor(uint16 ii = 0; ii < fetchedCities.length; ii++){\n\t   \t\taddress _to = cities[fetchedCities[ii]].owner;\n\t   \t\tif(_to != 0x0) { // MINT only if address exists\n\t   \t\t\tbalances[_to] = balances[_to].add(perCityBoost);\n\t   \t\t\ttotalSupply_ += perCityBoost; // update the total supply\n\t   \t\t}\n\t   \t}\n\t   \t// event\n\t   \tCitySold(_cityId, fetchedCity.price, 0x0, _owner, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\t\n   \t}\n\n   \t// this function allows to make an offer from someone else\n\tfunction makeOfferForCityForSomeone(uint16 _cityId, uint256 _price, address from) public payable {\n\t\t// only for admins\n\t\trequire(msg.sender == unitedNations);\n\t\t// requires\n\t\trequire(cities[_cityId].owner != 0x0);\n\t\trequire(_price > 0);\n\t\trequire(msg.value >= _price);\n\t\trequire(cities[_cityId].owner != from);\n\t\t// add the offer\n\t\tuint256 lastId = offers.push(offer(_cityId, _price, from)) - 1;\n\t\t// increment totalOffer\n\t\ttotalOffer = totalOffer.add(_price);\n\t\t// event\n\t\tOfferForCity(lastId, _cityId, _price, from, cities[_cityId].owner);\n\t}\n\n\t// withdrawing funds\n\tfunction adminWithdraw(uint256 _amount) public {\n\t\trequire(msg.sender == 0xD5d6301dE62D82F461dC29824FC597D38d80c424 || msg.sender == 0x1E4F1275bB041586D7Bec44D2E3e4F30e0dA7Ba4 || msg.sender == 0xe1811eC49f493afb1F4B42E3Ef4a3B9d62d9A01b || msg.sender == unitedNations);\n\t\t// do not touch the escrowed money\n\t\tuint256 totalAvailable = this.balance.sub(totalOffer);\n\t\tif(_amount > totalAvailable) {\n\t\t\t_amount = totalAvailable;\n\t\t}\n\t\t// divide the amount for founders\n\t\tuint256 perFounder = _amount / 3;\n\t\taddress(0xD5d6301dE62D82F461dC29824FC597D38d80c424).transfer(perFounder); // eric\n\t\taddress(0x1E4F1275bB041586D7Bec44D2E3e4F30e0dA7Ba4).transfer(perFounder); // simon\n\t\taddress(0xe1811eC49f493afb1F4B42E3Ef4a3B9d62d9A01b).transfer(perFounder); // david\n\t}\n\n\t//\n\t// Admin adding stuff\n\t//\n\n\t// we need to add a country before we can add a city\n\tfunction adminAddCountry(string _name) public returns (uint256) {\n\t\t// requires\n\t\trequire(msg.sender == unitedNations);\n\t\t// add country\n\t\tuint256 lastId = countries.push(country(_name, new uint16[](0))) - 1; \n\t\t//\n\t\treturn lastId;\n\t}\n\t// adding a city will mint ECONOMY_BOOST citycoins (country must exist)\n\tfunction adminAddCity(string _name, uint256 _price, uint16 _countryId) public returns (uint256) {\n\t\t// requires\n\t\trequire(msg.sender == unitedNations);\n\t\trequire(cities.length < MAX_CITIES);\n\t\t// add city\n\t\tuint256 lastId = cities.push(city(_name, _price, 0, _countryId, new uint256[](0), true, 0)) - 1;\n\t\tcountries[_countryId].cities.push(uint16(lastId));\n\t\t// event\n\t\tNewCity(lastId, _name, _price, _countryId);\n\t\t//\n\t\treturn lastId;\n\t}\n\n\t// adding a monument (city must exist)\n\tfunction adminAddMonument(string _name, uint256 _price, uint16 _cityId) public returns (uint256) {\n\t\t// requires\n\t\trequire(msg.sender == unitedNations);\n\t\trequire(_price > 0);\n\t\t// add monument\n\t\tuint256 lastId = monuments.push(monument(_name, _price, 0, _cityId)) - 1;\n\t\tcities[_cityId].monuments.push(lastId);\n\t\t// event\n\t\tNewMonument(lastId, _name, _price, _cityId);\n\t\t//\n\t\treturn lastId;\n\t}\n\n\t// Edit a city if it hasn't been bought yet\n\tfunction adminEditCity(uint16 _cityId, string _name, uint256 _price, address _owner) public {\n\t\t// requires\n\t\trequire(msg.sender == unitedNations);\n\t\trequire(cities[_cityId].owner == 0x0);\n\t\t//\n\t\tcities[_cityId].name = _name;\n\t\tcities[_cityId].price = _price;\n\t\tcities[_cityId].owner = _owner;\n\t}\n\n\t// \n\t// Buy and manage a city\n\t//\n\n\tfunction buyCity(uint16 _cityId) public payable {\n\t\t// fetch\n\t\tcity memory fetchedCity = cities[_cityId];\n\t\t// requires\n\t\trequire(fetchedCity.buyable == true);\n\t\trequire(fetchedCity.owner == 0x0); \n\t\trequire(msg.value >= fetchedCity.price);\n\t\t// transfer ownership\n\t\tcities[_cityId].owner = msg.sender;\n\t\t// update city metadata\n\t\tcities[_cityId].buyable = false;\n\t\tcities[_cityId].last_purchase_price = fetchedCity.price;\n\t\t// increase economy of region according to ECONOMY_BOOST\n\t\tuint16[] memory fetchedCities = countries[fetchedCity.countryId].cities;\n\t\tuint256 perCityBoost = ECONOMY_BOOST / fetchedCities.length;\n\t\tfor(uint16 ii = 0; ii < fetchedCities.length; ii++){\n\t\t\taddress _to = cities[fetchedCities[ii]].owner;\n\t\t\tif(_to != 0x0) { // MINT only if address exists\n\t\t\t\tbalances[_to] = balances[_to].add(perCityBoost);\n\t\t\t\ttotalSupply_ += perCityBoost; // update the total supply\n\t\t\t}\n\t\t}\n\t\t// event\n\t\tCitySold(_cityId, fetchedCity.price, 0x0, msg.sender, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n\t}\n\n\t//\n\t// Economy boost:\n\t// this is called by functions below that will \"buy a city from someone else\"\n\t// it will draw ECONOMY_BOOST_TRADE CITYs from the UN funds and split them in the relevant country\n\t//\n\n\tfunction economyBoost(uint16 _countryId, uint16 _excludeCityId) private {\n\t\tif(balances[unitedNations] < ECONOMY_BOOST_TRADE) {\n\t\t\treturn; // unless the UN has no more funds\n\t\t}\n\t\tuint16[] memory fetchedCities = countries[_countryId].cities;\n\t\tif(fetchedCities.length == 1) {\n\t\t\treturn;\n\t\t}\n\t\tuint256 perCityBoost = ECONOMY_BOOST_TRADE / (fetchedCities.length - 1); // excluding the bought city\n\t\tfor(uint16 ii = 0; ii < fetchedCities.length; ii++){\n\t\t\taddress _to = cities[fetchedCities[ii]].owner;\n\t\t\tif(_to != 0x0 && fetchedCities[ii] != _excludeCityId) { // only if address exists AND not the current city\n\t\t\t\tbalances[_to] = balances[_to].add(perCityBoost);\n\t\t\t\tbalances[unitedNations] -= perCityBoost;\n\t\t\t}\n\t\t}\n\t}\n\n\t//\n\t// Sell a city\n\t//\n\n\t// step 1: owner sets buyable = true\n\tfunction sellCityForEther(uint16 _cityId, uint256 _price) public {\n\t\t// requires\n\t\trequire(cities[_cityId].owner == msg.sender);\n\t\t// for sale\n\t\tcities[_cityId].price = _price;\n\t\tcities[_cityId].buyable = true;\n\t\t// event\n\t\tCityForSale(_cityId, _price);\n\t}\n\n\tevent CityNotForSale(uint16 cityId);\n\n\t// step 2: owner can always cancel \n\tfunction cancelSellCityForEther(uint16 _cityId) public {\n\t\t// requires\n\t\trequire(cities[_cityId].owner == msg.sender);\n\t\t//\n\t\tcities[_cityId].buyable = false;\n\t\t// event\n\t\tCityNotForSale(_cityId);\n\t}\n\n\t// step 3: someone else accepts the offer\n\tfunction resolveSellCityForEther(uint16 _cityId) public payable {\n\t\t// fetch\n\t\tcity memory fetchedCity = cities[_cityId];\n\t\t// requires\n\t\trequire(fetchedCity.buyable == true);\n\t\trequire(msg.value >= fetchedCity.price);\n\t\trequire(fetchedCity.owner != msg.sender);\n\t\t// calculate the fee\n\t\tuint256 fee = BUY_CITY_FEE.mul(fetchedCity.price) / 100;\n\t\t// pay the price\n\t\taddress previousOwner =\tfetchedCity.owner;\n\t\tpreviousOwner.transfer(fetchedCity.price.sub(fee));\n\t\t// transfer of ownership\n\t\tcities[_cityId].owner = msg.sender;\n\t\t// update metadata\n\t\tcities[_cityId].buyable = false;\n\t\tcities[_cityId].last_purchase_price = fetchedCity.price;\n\t\t// increase economy of region\n\t\teconomyBoost(fetchedCity.countryId, _cityId);\n\t\t// event\n\t\tCitySold(_cityId, fetchedCity.price, previousOwner, msg.sender, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n\t}\n\n\t//\n\t// Make an offer for a city\n\t//\n\n\tstruct offer {\n\t\tuint16 cityId;\n\t\tuint256 price;\n\t\taddress from;\n\t}\n\n\toffer[] public offers;\n\n\tevent OfferForCity(uint256 offerId, uint16 cityId, uint256 price, address offererAddress, address owner);\n\tevent CancelOfferForCity(uint256 offerId);\n\n\t// 1. we make an offer for some cityId that we don't own yet (we deposit money in escrow)\n\tfunction makeOfferForCity(uint16 _cityId, uint256 _price) public payable {\n\t\t// requires\n\t\trequire(cities[_cityId].owner != 0x0);\n\t\trequire(_price > 0);\n\t\trequire(msg.value >= _price);\n\t\trequire(cities[_cityId].owner != msg.sender);\n\t\t// add the offer\n\t\tuint256 lastId = offers.push(offer(_cityId, _price, msg.sender)) - 1;\n\t\t// increment totalOffer\n\t\ttotalOffer = totalOffer.add(_price);\n\t\t// event\n\t\tOfferForCity(lastId, _cityId, _price, msg.sender, cities[_cityId].owner);\n\t}\n\n\t// 2. we cancel it (getting back our money)\n\tfunction cancelOfferForCity(uint256 _offerId) public {\n\t\t// fetch\n\t\toffer memory offerFetched = offers[_offerId];\n\t\t// requires\n\t\trequire(offerFetched.from == msg.sender);\n\t\t// refund\n\t\tmsg.sender.transfer(offerFetched.price);\n\t\t// decrement totaloffer\n\t\ttotalOffer = totalOffer.sub(offerFetched.price);\n\t\t// remove offer\n\t\toffers[_offerId].cityId = 0;\n\t\toffers[_offerId].price = 0;\n\t\toffers[_offerId].from = 0x0;\n\t\t// event\n\t\tCancelOfferForCity(_offerId);\n\t}\n\n\t// 3. the city owner can accept the offer\n\tfunction acceptOfferForCity(uint256 _offerId, uint16 _cityId, uint256 _price) public {\n\t\t// fetch\n\t\tcity memory fetchedCity = cities[_cityId];\n\t\toffer memory offerFetched = offers[_offerId];\n\t\t// requires\n\t\trequire(offerFetched.cityId == _cityId);\n\t\trequire(offerFetched.from != 0x0);\n\t\trequire(offerFetched.from != msg.sender);\n\t\trequire(offerFetched.price == _price);\n\t\trequire(fetchedCity.owner == msg.sender);\n\t\t// compute the fee\n\t\tuint256 fee = BUY_CITY_FEE.mul(_price) / 100;\n\t\t// transfer the escrowed money\n\t\tuint256 priceSubFee = _price.sub(fee);\n\t\tcities[_cityId].owner.transfer(priceSubFee);\n\t\t// decrement tracked amount of escrowed ethers\n\t\ttotalOffer = totalOffer.sub(priceSubFee);\n\t\t// transfer of ownership\n\t\tcities[_cityId].owner = offerFetched.from;\n\t\t// update metadata\n\t\tcities[_cityId].last_purchase_price = _price;\n\t\tcities[_cityId].buyable = false; // in case it was also set to be purchasable\n\t\t// increase economy of region \n\t\teconomyBoost(fetchedCity.countryId, _cityId);\n\t\t// event\n\t\tCitySold(_cityId, _price, msg.sender, offerFetched.from, _offerId);\n\t\t// remove offer\n\t\toffers[_offerId].cityId = 0;\n\t\toffers[_offerId].price = 0;\n\t\toffers[_offerId].from = 0x0;\n\t}\n\n\t//\n\t// in-game use of CITYs\n\t//\n\n\t/* \n   \tuint256 public MONUMENT_UN_FEE = 3; // UN fee (CITY) to buy a monument\n   \tuint256 public MONUMENT_CITY_FEE = 3; // additional fee (CITY) to buy a monument (shared to the monument's city)\n   \t*/\n\n\t// anyone can buy a monument from someone else (with CITYs)\n\tfunction buyMonument(uint256 _monumentId, uint256 _price) public {\n\t\t// fetch\n\t\tmonument memory fetchedMonument = monuments[_monumentId];\n\t\t// requires\n\t\trequire(fetchedMonument.price > 0);\n\t\trequire(fetchedMonument.price == _price);\n\t\trequire(balances[msg.sender] >= _price);\n\t\trequire(fetchedMonument.owner != msg.sender);\n\t\t// pay first!\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_price);\n\t\t// compute fee\n\t\tuint256 UN_fee = MONUMENT_UN_FEE.mul(_price) / 100;\n\t\tuint256 city_fee = MONUMENT_CITY_FEE.mul(_price) / 100;\n\t\t// previous owner gets paid\n\t\tuint256 toBePaid = _price.sub(UN_fee);\n\t\ttoBePaid = toBePaid.sub(city_fee);\n\t\tbalances[fetchedMonument.owner] = balances[fetchedMonument.owner].add(toBePaid);\n\t\t// UN gets a fee\n\t\tbalances[unitedNations] = balances[unitedNations].add(UN_fee);\n\t\t// city gets a fee\n\t\taddress cityOwner = cities[fetchedMonument.cityId].owner;\n\t\tbalances[cityOwner] = balances[cityOwner].add(city_fee);\n\t\t// transfer of ownership\n\t\tmonuments[_monumentId].owner = msg.sender;\n\t\t// price increase of the monument\n\t\tmonuments[_monumentId].price = monuments[_monumentId].price.mul(2);\n\t\t// event\n\t\tMonumentSold(_monumentId, _price);\n\t}\n\n}",
  "bytecode": ""
}