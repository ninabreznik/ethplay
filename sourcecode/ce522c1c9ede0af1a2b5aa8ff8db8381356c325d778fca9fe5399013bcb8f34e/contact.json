{
  "address": "0x54cdc9d889c28f55f59f6b136822868c7d4726fc",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MobiusToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-21\n*/\n\npragma solidity^0.4.24;\n //////// https://M2D.win \\\\\\\\\\\\\\\n////////   Laughing Man   \\\\\\\\\\\\\\\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\ncontract StandardToken  {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  uint256 totalSupply_;\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract MintableToken is StandardToken, Ownable {\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n\n    bool public mintingFinished = false;\n\n\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n\n    modifier hasMintPermission() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n    * @dev Function to mint tokens\n    * @param _to The address that will receive the minted tokens.\n    * @param _amount The amount of tokens to mint.\n    * @return A boolean that indicates if the operation was successful.\n    */\n    function mint(\n        address _to,\n        uint256 _amount\n      )\n      public\n      hasMintPermission\n      canMint\n      returns (bool)\n    {\n        totalSupply_ = totalSupply_.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Mint(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n        return true;\n    }\n\n    /**\n    * @dev Function to stop minting new tokens.\n    * @return True if the operation was successful.\n    */\n    function finishMinting() public onlyOwner canMint returns (bool) {\n        mintingFinished = true;\n        emit MintFinished();\n        return true;\n    }\n}\n\ncontract MobiusToken is MintableToken {\n\n    using SafeMath for uint;\n    address creator = msg.sender;\n    uint8 public decimals = 18;\n    string public name = \"MÃ¶bius 2D\";\n    string public symbol = \"M2D\";\n\n    uint public totalDividends;\n    uint public lastRevenueBnum;\n\n    uint public unclaimedDividends;\n\n    struct DividendAccount {\n        uint balance;\n        uint lastCumulativeDividends;\n        uint lastWithdrawnBnum;\n    }\n\n    mapping (address => DividendAccount) public dividendAccounts;\n\n    modifier onlyTokenHolders{\n        require(balances[msg.sender] > 0, \"Not a token owner!\");\n        _;\n    }\n    \n    modifier updateAccount(address _of) {\n        _updateDividends(_of);\n        _;\n    }\n\n    event DividendsWithdrawn(address indexed from, uint value);\n    event DividendsTransferred(address indexed from, address indexed to, uint value);\n    event DividendsDisbursed(uint value);\n        \n    function mint(address _to, uint256 _amount) public \n    returns (bool)\n    {   \n        // devs get 33.3% of all tokens. Much of this will be used for bounties and community incentives\n        super.mint(creator, _amount/2);\n        // When an investor gets 2 tokens, devs get 1\n        return super.mint(_to, _amount);\n    }\n\n    function transfer(address _to, uint _value) public returns (bool success) {\n        \n        _transferDividends(msg.sender, _to, _value);\n        require(super.transfer(_to, _value), \"Failed to transfer tokens!\");\n        return true;\n    }\n    \n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n        \n        _transferDividends(_from, _to, _value);\n        require(super.transferFrom(_from, _to, _value), \"Failed to transfer tokens!\");\n        return true;\n    }\n\n    // Devs can move tokens without dividends during the ICO for bounty purposes\n    function donate(address _to, uint _value) public returns (bool success) {\n        require(msg.sender == creator, \"You can't do that!\");\n        require(!mintingFinished, \"ICO Period is over - use a normal transfer.\");\n        return super.transfer(_to, _value);\n    }\n\n    function withdrawDividends() public onlyTokenHolders {\n        uint amount = _getDividendsBalance(msg.sender);\n        require(amount > 0, \"Nothing to withdraw!\");\n        unclaimedDividends = unclaimedDividends.sub(amount);\n        dividendAccounts[msg.sender].balance = 0;\n        dividendAccounts[msg.sender].lastWithdrawnBnum = block.number;\n        msg.sender.transfer(amount);\n        emit DividendsWithdrawn(msg.sender, amount);\n    }\n\n    function dividendsAvailable(address _for) public view returns(bool) {\n        return lastRevenueBnum >= dividendAccounts[_for].lastWithdrawnBnum;\n    }\n\n    function getDividendsBalance(address _of) external view returns(uint) {\n        uint outstanding = _dividendsOutstanding(_of);\n        if (outstanding > 0) {\n            return dividendAccounts[_of].balance.add(outstanding);\n        }\n        return dividendAccounts[_of].balance;\n    }\n\n    function disburseDividends() public payable {\n        if(msg.value == 0) {\n            return;\n        }\n        totalDividends = totalDividends.add(msg.value);\n        unclaimedDividends = unclaimedDividends.add(msg.value);\n        lastRevenueBnum = block.number;\n        emit DividendsDisbursed(msg.value);\n    }\n\n    function () public payable {\n        disburseDividends();\n    }\n\n    function _transferDividends(address _from, address _to, uint _tokensValue) internal \n    updateAccount(_from)\n    updateAccount(_to) \n    {\n        uint amount = dividendAccounts[_from].balance.mul(_tokensValue).div(balances[_from]);\n        if(amount > 0) {\n            dividendAccounts[_from].balance = dividendAccounts[_from].balance.sub(amount);\n            dividendAccounts[_to].balance = dividendAccounts[_to].balance.add(amount); \n            dividendAccounts[_to].lastWithdrawnBnum = dividendAccounts[_from].lastWithdrawnBnum;\n            emit DividendsTransferred(_from, _to, amount);\n        }\n    }\n    \n    function _getDividendsBalance(address _holder) internal\n    updateAccount(_holder)\n    returns(uint) \n    {\n        return dividendAccounts[_holder].balance;\n    }    \n\n    function _updateDividends(address _holder) internal {\n        require(mintingFinished, \"Can't calculate balances if still minting tokens!\");\n        uint outstanding = _dividendsOutstanding(_holder);\n        if (outstanding > 0) {\n            dividendAccounts[_holder].balance = dividendAccounts[_holder].balance.add(outstanding);\n        }\n        dividendAccounts[_holder].lastCumulativeDividends = totalDividends;\n    }\n\n    function _dividendsOutstanding(address _holder) internal view returns(uint) {\n        uint newDividends = totalDividends.sub(dividendAccounts[_holder].lastCumulativeDividends);\n        \n        if(newDividends == 0) {\n            return 0;\n        } else {\n            return newDividends.mul(balances[_holder]).div(totalSupply_);\n        }\n    }   \n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    uint256 c = _a * _b;\n    require(c / _a == _b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    require(_b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    require(_b <= _a);\n    uint256 c = _a - _b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    uint256 c = _a + _b;\n    require(c >= _a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disburseDividends\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unclaimedDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRevenueBnum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_for\",\"type\":\"address\"}],\"name\":\"dividendsAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"dividendAccounts\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"lastCumulativeDividends\",\"type\":\"uint256\"},{\"name\":\"lastWithdrawnBnum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"donate\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"getDividendsBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"DividendsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"DividendsTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"DividendsDisbursed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "6003805460a060020a60ff02199081169091556004805433600160a060020a0319909116179091167412000000000000000000000000000000000000000017905560c0604052600a60808190527f4dc3b6626975732032440000000000000000000000000000000000000000000060a0908152620000819160059190620000e1565b506040805180820190915260038082527f4d324400000000000000000000000000000000000000000000000000000000006020909201918252620000c891600691620000e1565b5060038054600160a060020a0319163317905562000186565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200012457805160ff191683800117855562000154565b8280016001018555821562000154579182015b828111156200015457825182559160200191906001019062000137565b506200016292915062000166565b5090565b6200018391905b808211156200016257600081556001016200016d565b90565b61155d80620001966000396000f3006080604052600436106101535763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461015d57806306fdde0314610186578063095ea7b31461021057806318160ddd1461023457806323b872dd1461025b5780632e92abdd14610285578063313ce5671461029a57806336ef1abb146101535780633cb802b9146102c557806340c10f19146102da578063427539c9146102fe57806351ee387d14610313578063661884631461033457806370a0823114610358578063715018a6146103795780637d64bcb41461038e5780638da5cb5b146103a357806395d89b41146103d4578063997664d7146103e9578063a9059cbb146103fe578063d73dd62314610422578063dca919de14610446578063dd62ed3e14610485578063e69d849d146104ac578063f2fde38b146104d0578063f88351d9146104f1575b61015b610512565b005b34801561016957600080fd5b50610172610584565b604080519115158252519081900360200190f35b34801561019257600080fd5b5061019b610594565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101d55781810151838201526020016101bd565b50505050905090810190601f1680156102025780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561021c57600080fd5b50610172600160a060020a0360043516602435610622565b34801561024057600080fd5b50610249610688565b60408051918252519081900360200190f35b34801561026757600080fd5b50610172600160a060020a036004358116906024351660443561068e565b34801561029157600080fd5b5061015b610706565b3480156102a657600080fd5b506102af610861565b6040805160ff9092168252519081900360200190f35b3480156102d157600080fd5b50610249610871565b3480156102e657600080fd5b50610172600160a060020a0360043516602435610877565b34801561030a57600080fd5b506102496108a5565b34801561031f57600080fd5b50610172600160a060020a03600435166108ab565b34801561034057600080fd5b50610172600160a060020a03600435166024356108ce565b34801561036457600080fd5b50610249600160a060020a03600435166109bf565b34801561038557600080fd5b5061015b6109da565b34801561039a57600080fd5b50610172610a48565b3480156103af57600080fd5b506103b8610acc565b60408051600160a060020a039092168252519081900360200190f35b3480156103e057600080fd5b5061019b610adb565b3480156103f557600080fd5b50610249610b36565b34801561040a57600080fd5b50610172600160a060020a0360043516602435610b3c565b34801561042e57600080fd5b50610172600160a060020a0360043516602435610bb2565b34801561045257600080fd5b50610467600160a060020a0360043516610c4b565b60408051938452602084019290925282820152519081900360600190f35b34801561049157600080fd5b50610249600160a060020a0360043581169060243516610c6c565b3480156104b857600080fd5b50610172600160a060020a0360043516602435610c97565b3480156104dc57600080fd5b5061015b600160a060020a0360043516610d8e565b3480156104fd57600080fd5b50610249600160a060020a0360043516610db1565b34151561051e57610582565b600754610531903463ffffffff610e1a16565b600755600954610547903463ffffffff610e1a16565b600955436008556040805134815290517f23a65426dca7f39133773f3c2b30ae8531465535690013b0be73ee3bd33fb8b39181900360200190a15b565b60035460a060020a900460ff1681565b6005805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561061a5780601f106105ef5761010080835404028352916020019161061a565b820191906000526020600020905b8154815290600101906020018083116105fd57829003601f168201915b505050505081565b336000818152600160209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60025490565b600061069b848484610e2c565b6106a6848484610f66565b15156106fc576040805160e560020a62461bcd02815260206004820152601a60248201527f4661696c656420746f207472616e7366657220746f6b656e7321000000000000604482015290519081900360640190fd5b5060019392505050565b33600090815260208190526040812054811061076c576040805160e560020a62461bcd02815260206004820152601260248201527f4e6f74206120746f6b656e206f776e6572210000000000000000000000000000604482015290519081900360640190fd5b610775336110db565b9050600081116107cf576040805160e560020a62461bcd02815260206004820152601460248201527f4e6f7468696e6720746f20776974686472617721000000000000000000000000604482015290519081900360640190fd5b6009546107e2908263ffffffff6110e716565b600955336000818152600a6020526040808220828155436002909101555183156108fc0291849190818181858888f19350505050158015610827573d6000803e3d6000fd5b5060408051828152905133917f08d688a92fc311df9b853769e8a99b320411042a86f106fd29e7f21ee06e79da919081900360200190a250565b60045460a060020a900460ff1681565b60095481565b60045460009061089390600160a060020a0316600284046110fe565b5061089e83836110fe565b9392505050565b60085481565b600160a060020a03166000908152600a6020526040902060020154600854101590565b336000908152600160209081526040808320600160a060020a038616845290915281205480831061092257336000908152600160209081526040808320600160a060020a0388168452909152812055610957565b610932818463ffffffff6110e716565b336000908152600160209081526040808320600160a060020a03891684529091529020555b336000818152600160209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a3600191505b5092915050565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a031633146109f157600080fd5b600354604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26003805473ffffffffffffffffffffffffffffffffffffffff19169055565b600354600090600160a060020a03163314610a6257600080fd5b60035460a060020a900460ff1615610a7957600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600354600160a060020a031681565b6006805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561061a5780601f106105ef5761010080835404028352916020019161061a565b60075481565b6000610b49338484610e2c565b610b538383611208565b1515610ba9576040805160e560020a62461bcd02815260206004820152601a60248201527f4661696c656420746f207472616e7366657220746f6b656e7321000000000000604482015290519081900360640190fd5b50600192915050565b336000908152600160209081526040808320600160a060020a0386168452909152812054610be6908363ffffffff610e1a16565b336000818152600160209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600a6020526000908152604090208054600182015460029092015490919083565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b600454600090600160a060020a03163314610cfc576040805160e560020a62461bcd02815260206004820152601260248201527f596f752063616e277420646f2074686174210000000000000000000000000000604482015290519081900360640190fd5b60035460a060020a900460ff1615610d84576040805160e560020a62461bcd02815260206004820152602b60248201527f49434f20506572696f64206973206f766572202d207573652061206e6f726d6160448201527f6c207472616e736665722e000000000000000000000000000000000000000000606482015290519081900360840190fd5b61089e8383611208565b600354600160a060020a03163314610da557600080fd5b610dae816112e7565b50565b600080610dbd83611365565b90506000811115610df857600160a060020a0383166000908152600a6020526040902054610df1908263ffffffff610e1a16565b9150610e14565b600160a060020a0383166000908152600a602052604090205491505b50919050565b60008282018381101561089e57600080fd5b600083610e38816113da565b83610e42816113da565b600160a060020a03861660009081526020818152604080832054600a90925290912054610e869190610e7a908763ffffffff6114e016565b9063ffffffff61150e16565b92506000831115610f5e57600160a060020a0386166000908152600a6020526040902054610eba908463ffffffff6110e716565b600160a060020a038088166000908152600a60205260408082209390935590871681522054610eef908463ffffffff610e1a16565b600160a060020a038087166000818152600a60209081526040808320958655938b168083528483206002908101549385905290950191909155825187815292519193927ff99e1703995723f297efb71e45f6c282b4ff86d1f3ef67da774949dd2ad7e3ac929081900390910190a35b505050505050565b600160a060020a038316600090815260208190526040812054821115610f8b57600080fd5b600160a060020a0384166000908152600160209081526040808320338452909152902054821115610fbb57600080fd5b600160a060020a0383161515610fd057600080fd5b600160a060020a038416600090815260208190526040902054610ff9908363ffffffff6110e716565b600160a060020a03808616600090815260208190526040808220939093559085168152205461102e908363ffffffff610e1a16565b600160a060020a03808516600090815260208181526040808320949094559187168152600182528281203382529091522054611070908363ffffffff6110e716565b600160a060020a03808616600081815260016020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b600081610df8816113da565b600080838311156110f757600080fd5b5050900390565b600354600090600160a060020a0316331461111857600080fd5b60035460a060020a900460ff161561112f57600080fd5b600254611142908363ffffffff610e1a16565b600255600160a060020a03831660009081526020819052604090205461116e908363ffffffff610e1a16565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350600192915050565b3360009081526020819052604081205482111561122457600080fd5b600160a060020a038316151561123957600080fd5b33600090815260208190526040902054611259908363ffffffff6110e716565b3360009081526020819052604080822092909255600160a060020a0385168152205461128b908363ffffffff610e1a16565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600160a060020a03811615156112fc57600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a0381166000908152600a60205260408120600101546007548291611396919063ffffffff6110e716565b90508015156113a85760009150610e14565b600254600160a060020a038416600090815260208190526040902054610df19190610e7a90849063ffffffff6114e016565b60035460009060a060020a900460ff161515611466576040805160e560020a62461bcd02815260206004820152603160248201527f43616e27742063616c63756c6174652062616c616e636573206966207374696c60448201527f6c206d696e74696e6720746f6b656e7321000000000000000000000000000000606482015290519081900360840190fd5b61146f82611365565b905060008111156114bd57600160a060020a0382166000908152600a60205260409020546114a3908263ffffffff610e1a16565b600160a060020a0383166000908152600a60205260409020555b50600754600160a060020a039091166000908152600a6020526040902060010155565b6000808315156114f357600091506109b8565b5082820282848281151561150357fe5b041461089e57600080fd5b60008080831161151d57600080fd5b828481151561152857fe5b049493505050505600a165627a7a723058207fd49d853b8429b70018375c52a7a343b536e0c0fc4e8b3c7ce29f1ede4f2b540029"
}