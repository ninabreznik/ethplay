{
  "address": "0x3e716a958c185f2ba10f5951566bea740f4e892e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DiverseCurrencyCirculationEcosystem",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-12\n*/\n\npragma solidity ^0.4.24;\ninterface tokenRecipient{\n    function receiveApproval(address _from,uint256 _value,address _token,bytes _extraData) external ;\n}\ncontract DiverseCurrencyCirculationEcosystem{\n    //public var\n    address public owner;\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n    uint256 public sellPrice; //grow to wei not eth!\n    uint256 public buyPrice;\n    bool public sellOpen;\n    bool public buyOpen;\n    \n    //store token data set\n    mapping(address => uint256) public balanceOf;\n    //transition limite\n    mapping(address => mapping(address => uint256)) public allowance;\n    //freeze account \n    mapping(address=>bool) public frozenAccount;\n    \n    //event for transition\n    event Transfer(address indexed from,address indexed to , uint256 value);\n    //event for allowance\n    event Approval(address indexed owner,address indexed spender,uint256 value);\n    //event for freeze/unfreeze Account \n    event FrozenFunds(address target,bool freeze);\n    //TODO event for sell token , do't need it now\n    event SellToken(address seller,uint256 sellPrice, uint256 amount,uint256 getEth);\n    //TODO event for buy token , do't need it now \n    event BuyToken(address buyer,uint256 buyPrice,uint256 amount,uint256 spendEth);\n    \n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n    //func constructor\n    constructor() public {\n        owner = 0xc22F305B804a7AD7684eC4BB07A0553BDf4d51c7;\n        name = \"DCEGL\";\n        symbol = \"DCEGL\";\n        decimals = 18;\n        totalSupply = 8600000000 * 10 ** uint256(18);\n        \n        //init totalSupply to map(db)\n        balanceOf[owner] = totalSupply;\n    }\n    \n function () public payable {  \n     if(msg.sender!=owner){\n         _buy();    \n     }\n }\n \n    // public functions\n    // 1 Transfer tokens \n    function transfer(address _to,uint256 _value) public{\n        require(!frozenAccount[msg.sender]);\n        if(_to == address(this)){\n          _sell(msg.sender,_value);\n        }else{\n            _transfer(msg.sender,_to,_value);\n        }\n    }\n    \n    // 2 Transfer Other's tokens ,who had approve some token to me \n    function transferFrom(address _from,address _to,uint256 _value) public returns (bool success){\n        //validate the allowance \n        require(!frozenAccount[_from]&&!frozenAccount[msg.sender]);\n        require(_value<=allowance[_from][msg.sender]);\n        //do action :sub allowance and do transfer \n        allowance[_from][msg.sender] -= _value;\n        if(_to == address(this)){\n            _sell(_from,_value);\n        }else\n        {\n            _transfer(_from,_to,_value);\n        }\n        \n        return true;\n    }\n    //A is msg.sender or i \n    //B is the person who has approve me to use his token or _from \n    //C is the receipient or _to\n    \n    // 3 set allowance for other address,like B approve A(_spender) to use his token\n    function approve(address _spender,uint256 _value) public returns (bool success){\n        require(!frozenAccount[msg.sender]);\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n    // 4 allowance and notify the receipient/spender \n    function approveAndCall(address _spender,uint256 _value,bytes _extraData)\n    public returns (bool success){\n        require(!frozenAccount[msg.sender]);\n        tokenRecipient spender = tokenRecipient(_spender);\n        if(approve(_spender,_value)){\n            spender.receiveApproval(msg.sender,_value,this,_extraData);\n            return true;\n        }\n    }\n    \n    // onlyOwner function \n    // 11 freeze or unfreeze account \n    function freezeAccount(address target,bool freeze)  onlyOwner public{\n        require(target!=owner);\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target,freeze);\n    }\n    // 12 transfer contract  Ownership to newOwner and transfer all balanceOf oldOwner to newOwner\n    function transferOwnership(address newOwner) onlyOwner public{\n        _transfer(owner,newOwner,balanceOf[owner]);\n        owner = newOwner;\n    }\n    // 13 set prices for sellPrice or buyPrice\n    function setPrices(uint256 newSellPrice,uint256 newBuyPrice) onlyOwner public{\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n    // 14 open/close user to  buy token \n    function setBuyOpen(bool newBuyOpen) onlyOwner public{\n        require(buyPrice>0);\n        buyOpen = newBuyOpen;\n    }\n    // 15 open/close user to  sell token \n    function setSellOpen(bool newSellOpen) onlyOwner public{\n        require(sellPrice>0);\n        sellOpen = newSellOpen;\n    }\n    // 16 transfer eth back to owner \n    function transferEth(uint256 amount) onlyOwner public{\n        msg.sender.transfer(amount*10**uint256(18));\n    }\n    \n    //internal transfer function\n // 1 _transfer\n    function _transfer(address _from,address _to, uint256 _value) internal {\n        //validate input and other internal limites\n        require(_to != 0x0);//check to address\n        require(balanceOf[_from] >= _value);//check from address has enough balance \n        require(balanceOf[_to] + _value >balanceOf[_to]);//after transfer the balance of _to address is ok ,no overflow\n        uint256 previousBalances = balanceOf[_from]+balanceOf[_to];//store it for add asset to power the security\n        //do transfer:sub from _from address,and add to the _to address\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        //after transfer: emit transfer event,and add asset for security\n        emit Transfer(_from,_to,_value);\n        assert(balanceOf[_from]+balanceOf[_to] == previousBalances);\n    }\n // 2 _buy \n    function _buy() internal returns (uint256 amount){\n        require(buyOpen);\n        require(buyPrice>0);\n        require(msg.value>0);\n        amount = msg.value / buyPrice;                    // calculates the amount\n        _transfer(owner,msg.sender,amount);\n        emit BuyToken(msg.sender,buyPrice,amount,msg.value);\n        return amount;                                    // ends function and returns\n    }\n    \n    // 3 _sell \n    function _sell(address _from,uint256 amount) internal returns (uint256 revenue){\n        require(sellOpen);\n        require(!frozenAccount[_from]);\n        require(amount>0);\n        require(sellPrice>0);\n        require(_from!=owner);\n        _transfer(_from,owner,amount);\n        revenue = amount * sellPrice;\n        _from.transfer(revenue);                     // sends ether to the seller: it's important to do this last to prevent recursion attacks\n        emit SellToken(_from,sellPrice,amount,revenue);\n        return revenue;                                   // ends function and returns\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSellOpen\",\"type\":\"bool\"}],\"name\":\"setSellOpen\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBuyOpen\",\"type\":\"bool\"}],\"name\":\"setBuyOpen\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"getEth\",\"type\":\"uint256\"}],\"name\":\"SellToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"spendEth\",\"type\":\"uint256\"}],\"name\":\"BuyToken\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b5060008054600160a060020a03191673c22f305b804a7ad7684ec4bb07a0553bdf4d51c71790556040805180820190915260058082527f444345474c000000000000000000000000000000000000000000000000000000602090920191825261007b916001916100fe565b506040805180820190915260058082527f444345474c00000000000000000000000000000000000000000000000000000060209092019182526100c0916002916100fe565b506003805460ff191660121790556b1bc9c0d62b344ed898000000600481905560008054600160a060020a0316815260086020526040902055610199565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061013f57805160ff191683800117855561016c565b8280016001018555821561016c579182015b8281111561016c578251825591602001919060010190610151565b5061017892915061017c565b5090565b61019691905b808211156101785760008155600101610182565b90565b610db0806101a86000396000f3006080604052600436106101275763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305fefda7811461014557806306fdde0314610160578063095ea7b3146101ea57806318160ddd146102225780631f57256f1461024957806323b872dd14610261578063313ce5671461028b57806343a88da6146102b65780634b750334146102cb578063603d1d1c146102e057806370a08231146102fa5780638620410b1461031b5780638da5cb5b14610330578063900726c21461036157806395d89b41146103765780639769eacf1461038b578063a9059cbb146103a5578063b414d4b6146103c9578063cae9ca51146103ea578063dd62ed3e14610453578063e724529c1461047a578063f2fde38b146104a0575b600054600160a060020a03163314610143576101416104c1565b505b005b34801561015157600080fd5b5061014360043560243561056b565b34801561016c57600080fd5b5061017561058d565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101af578181015183820152602001610197565b50505050905090810190601f1680156101dc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101f657600080fd5b5061020e600160a060020a036004351660243561061a565b604080519115158252519081900360200190f35b34801561022e57600080fd5b50610237610665565b60408051918252519081900360200190f35b34801561025557600080fd5b5061014360043561066b565b34801561026d57600080fd5b5061020e600160a060020a03600435811690602435166044356106bc565b34801561029757600080fd5b506102a0610789565b6040805160ff9092168252519081900360200190f35b3480156102c257600080fd5b5061020e610792565b3480156102d757600080fd5b506102376107a0565b3480156102ec57600080fd5b5061014360043515156107a6565b34801561030657600080fd5b50610237600160a060020a03600435166107df565b34801561032757600080fd5b506102376107f1565b34801561033c57600080fd5b506103456107f7565b60408051600160a060020a039092168252519081900360200190f35b34801561036d57600080fd5b5061020e610806565b34801561038257600080fd5b5061017561080f565b34801561039757600080fd5b506101436004351515610867565b3480156103b157600080fd5b50610143600160a060020a03600435166024356108a7565b3480156103d557600080fd5b5061020e600160a060020a03600435166108f0565b3480156103f657600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261020e948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506109059650505050505050565b34801561045f57600080fd5b50610237600160a060020a0360043581169060243516610a3c565b34801561048657600080fd5b50610143600160a060020a03600435166024351515610a59565b3480156104ac57600080fd5b50610143600160a060020a0360043516610aef565b600754600090610100900460ff1615156104da57600080fd5b6006546000106104e957600080fd5b600034116104f657600080fd5b6006543481151561050357fe5b600054919004915061051f90600160a060020a03163383610b5c565b600654604080513381526020810192909252818101839052346060830152517f047d414ddce29eba94711e9709b1446c3bb9339c2472cf6ff20610f80b1869129181900360800190a190565b600054600160a060020a0316331461058257600080fd5b600591909155600655565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106125780601f106105e757610100808354040283529160200191610612565b820191906000526020600020905b8154815290600101906020018083116105f557829003601f168201915b505050505081565b336000908152600a602052604081205460ff161561063757600080fd5b50336000908152600960209081526040808320600160a060020a039590951683529390529190912055600190565b60045481565b600054600160a060020a0316331461068257600080fd5b6040513390670de0b6b3a7640000830280156108fc02916000818181858888f193505050501580156106b8573d6000803e3d6000fd5b5050565b600160a060020a0383166000908152600a602052604081205460ff161580156106f55750336000908152600a602052604090205460ff16155b151561070057600080fd5b600160a060020a038416600090815260096020908152604080832033845290915290205482111561073057600080fd5b600160a060020a03808516600090815260096020908152604080832033845290915290208054849003905583163014156107745761076e8483610c63565b5061077f565b61077f848484610b5c565b5060019392505050565b60035460ff1681565b600754610100900460ff1681565b60055481565b600054600160a060020a031633146107bd57600080fd5b6005546000106107cc57600080fd5b6007805460ff1916911515919091179055565b60086020526000908152604090205481565b60065481565b600054600160a060020a031681565b60075460ff1681565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156106125780601f106105e757610100808354040283529160200191610612565b600054600160a060020a0316331461087e57600080fd5b60065460001061088d57600080fd5b600780549115156101000261ff0019909216919091179055565b336000908152600a602052604090205460ff16156108c457600080fd5b600160a060020a0382163014156108e5576108df3382610c63565b506106b8565b6106b8338383610b5c565b600a6020526000908152604090205460ff1681565b336000908152600a6020526040812054819060ff161561092457600080fd5b5083610930818561061a565b15610a34576040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018790523060448401819052608060648501908152875160848601528751600160a060020a03871695638f4ffcb195948b94938b939192909160a490910190602085019080838360005b838110156109c85781810151838201526020016109b0565b50505050905090810190601f1680156109f55780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015610a1757600080fd5b505af1158015610a2b573d6000803e3d6000fd5b50505050600191505b509392505050565b600960209081526000928352604080842090915290825290205481565b600054600160a060020a03163314610a7057600080fd5b600054600160a060020a0383811691161415610a8b57600080fd5b600160a060020a0382166000818152600a6020908152604091829020805460ff191685151590811790915582519384529083015280517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a59281900390910190a15050565b600054600160a060020a03163314610b0657600080fd5b60008054600160a060020a03168082526008602052604090912054610b2d91908390610b5c565b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000600160a060020a0383161515610b7357600080fd5b600160a060020a038416600090815260086020526040902054821115610b9857600080fd5b600160a060020a03831660009081526008602052604090205482810111610bbe57600080fd5b50600160a060020a038083166000818152600860209081526040808320805495891680855282852080548981039091559486905281548801909155815187815291519390950194927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3600160a060020a03808416600090815260086020526040808220549287168252902054018114610c5d57fe5b50505050565b60075460009060ff161515610c7757600080fd5b600160a060020a0383166000908152600a602052604090205460ff1615610c9d57600080fd5b60008211610caa57600080fd5b600554600010610cb957600080fd5b600054600160a060020a0384811691161415610cd457600080fd5b600054610cec908490600160a060020a031684610b5c565b5060055460405190820290600160a060020a0384169082156108fc029083906000818181858888f19350505050158015610d2a573d6000803e3d6000fd5b5060055460408051600160a060020a0386168152602081019290925281810184905260608201839052517fbc6a70357c1f438297a419fdda7ea10b11e5e821fa940afc814d2e1fa9c755d79181900360800190a1929150505600a165627a7a723058202e10e33fbc32e13bfa92380adac6036ac112a28fef8b3de86d96c4db1f2b454a0029"
}