{
  "address": "0x2747fe8dc21d5efcc0787101dc986df028bd42b9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HyperETH",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-01\n*/\n\npragma solidity ^0.4.25;\n\n/*\n██╗  ██╗██╗   ██╗██████╗ ███████╗██████╗ ███████╗████████╗██╗  ██╗\n██║  ██║╚██╗ ██╔╝██╔══██╗██╔════╝██╔══██╗██╔════╝╚══██╔══╝██║  ██║\n███████║ ╚████╔╝ ██████╔╝█████╗  ██████╔╝█████╗     ██║   ███████║\n██╔══██║  ╚██╔╝  ██╔═══╝ ██╔══╝  ██╔══██╗██╔══╝     ██║   ██╔══██║\n██║  ██║   ██║   ██║     ███████╗██║  ██║███████╗   ██║   ██║  ██║\n╚═╝  ╚═╝   ╚═╝   ╚═╝     ╚══════╝╚═╝  ╚═╝╚══════╝   ╚═╝   ╚═╝  ╚═╝\nSepcial thanks to P3D & HODL(tobi) basecode & modification \nHyperETH - 2019\nDecentralized Blockchain Gaming Ecosystem \nSmart Contract & Web Games\n*/\n\n\ncontract AcceptsHyperETH {\n    HyperETH public tokenContract;\n\n    constructor(address _tokenContract) public {\n        tokenContract = HyperETH(_tokenContract);\n    }\n\n    modifier onlyTokenContract {\n        require(msg.sender == address(tokenContract));\n        _;\n    }\n\n    /**\n    * @dev Standard ERC677 function that will handle incoming token transfers.\n    *\n    * @param _from  Token sender address.\n    * @param _value Amount of tokens.\n    * @param _data  Transaction metadata.\n    */\n    function tokenFallback(address _from, uint256 _value, bytes _data) external returns (bool);\n}\n\ncontract HyperETH {\n    /*=================================\n    =            MODIFIERS            =\n    =================================*/\n    // only people with tokens\n    modifier onlyBagholders() {\n        require(myTokens() > 0);\n        _;\n    }\n    \n    // only people with profits\n    modifier onlyStronghands() {\n        require(myDividends(true) > 0);\n        _;\n    }\n    \n    // administrator can:\n    // -> change the name of the contract\n    // -> change the name of the token\n    // -> change the PoS difficulty (How many tokens it costs to hold a masternode, in case it gets crazy high later)\n    // they CANNOT:\n    // -> take funds, except the funding contract\n    // -> disable withdrawals\n    // -> kill the contract\n    // -> change the price of tokens\n    modifier onlyAdministrator(){\n        address _customerAddress = msg.sender;\n        require(administrator == _customerAddress);\n        _;\n    }\n    \n    // ensures that the first tokens in the contract will be equally distributed\n    // meaning, no divine dump will be ever possible\n    // result: healthy longevity.\n    modifier antiEarlyWhale(uint256 _amountOfEthereum){\n        address _customerAddress = msg.sender;\n        \n        // are we still in the vulnerable phase?\n        // if so, enact anti early whale protocol \n        if( onlyAmbassadors && \n\t\t\t((totalEthereumBalance() - _amountOfEthereum) <= ambassadorQuota_ ) &&\n\t\t\tnow < ACTIVATION_TIME)\n\t\t{\n            require(\n                // is the customer in the ambassador list?\n                ambassadors_[_customerAddress] == true &&\n                \n                // does the customer purchase exceed the max ambassador quota?\n                (ambassadorAccumulatedQuota_[_customerAddress] + _amountOfEthereum) <= ambassadorMaxPurchase_\n                \n            );\n            \n            // updated the accumulated quota    \n            ambassadorAccumulatedQuota_[_customerAddress] = SafeMath.add(ambassadorAccumulatedQuota_[_customerAddress], _amountOfEthereum);\n        \n        } else {\n            // in case the ether count drops low, the ambassador phase won't reinitiate\n\t\t\t// only write state variable once\n\t\t\tif (onlyAmbassadors) {\n\t\t\t\tonlyAmbassadors = false;\n\t\t\t}\n        }\n\t\t\n\t\t_;\n    }\n\t\n\t// ambassadors are not allowed to sell their tokens within the anti-pump-and-dump phase\n\t// @Sordren\n\t// hopefully many devs will use this as a standard\n\tmodifier ambassAntiPumpAndDump() {\n\t\t\n\t\t// we are still in ambassadors antiPumpAndDump phase\n\t\tif (now <= antiPumpAndDumpEnd_) {\n\t\t\taddress _customerAddress = msg.sender;\n\t\t\t\n\t\t\t// require sender is not an ambassador\n\t\t\trequire(!ambassadors_[_customerAddress]);\n\t\t}\n\t\n\t\t// execute\n\t\t_;\n\t}\n\t\n\t// ambassadors are not allowed to transfer tokens to non-amassador accounts within the anti-pump-and-dump phase\n\t// @Sordren\n\tmodifier ambassOnlyToAmbass(address _to) {\n\t\t\n\t\t// we are still in ambassadors antiPumpAndDump phase\n\t\tif (now <= antiPumpAndDumpEnd_){\n\t\t\taddress _from = msg.sender;\n\t\t\t\n\t\t\t// sender is ambassador\n\t\t\tif (ambassadors_[_from]) {\n\t\t\t\t\n\t\t\t\t// sender is not the lending\n\t\t\t\t// this is required for withdrawing capital from lending\n\t\t\t\tif (_from != lendingAddress_) {\n\t\t\t\t\t// require receiver is ambassador\n\t\t\t\t\trequire(ambassadors_[_to], \"As ambassador you should know better :P\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// execute\n\t\t_;\n\t}\n    \n    \n    /*==============================\n    =            EVENTS            =\n    ==============================*/\n    event onTokenPurchase(\n        address indexed customerAddress,\n        uint256 incomingEthereum,\n        uint256 tokensMinted,\n        address indexed referredBy\n    );\n    \n    event onTokenSell(\n        address indexed customerAddress,\n        uint256 tokensBurned,\n        uint256 ethereumEarned\n    );\n    \n    event onReinvestment(\n        address indexed customerAddress,\n        uint256 ethereumReinvested,\n        uint256 tokensMinted\n    );\n    \n    event onWithdraw(\n        address indexed customerAddress,\n        uint256 ethereumWithdrawn\n    );\n    \n    // ERC20\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 tokens\n    );\n    \n    \n    /*=====================================\n    =            CONFIGURABLES            =\n    =====================================*/\n    string public name = \"Hyper Token\";\n    string public symbol = \"HYPER\";\n    uint8 constant public decimals = 18;\n    uint8 constant internal dividendFee_ = 10;\t// 10% dividend dispersement\n\tuint8 constant internal fundFee_ = 3; \t\t// 3% development fund\n\tuint8 constant internal referralBonus_ = 10;\n    uint256 constant internal tokenPriceInitial_ =     0.000000001 ether;\n    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\n    uint256 constant internal magnitude = 2**64;\t\n    \n    // proof of stake (defaults at 100 tokens)\n    uint256 public stakingRequirement = 100e18;\n    \n    // ambassador program\n    uint256 constant internal ambassadorMaxPurchase_ = 2 ether;\n    uint256 constant internal ambassadorQuota_ = 2 ether;\n\t\n\t// anti pump and dump phase time (default 30 days)\n\tuint256 constant internal antiPumpAndDumpTime_ = 30 days;\t\t\t\t\t\t\t\t// remember it is constant, so it cannot be changed after deployment\n\tuint256 constant public antiPumpAndDumpEnd_ = ACTIVATION_TIME + antiPumpAndDumpTime_;\t// set anti-pump-and-dump time to 30 days after deploying\n\tuint256 constant internal ACTIVATION_TIME = 1541966400;\n\t\n\t// when this is set to true, only ambassadors can purchase tokens (this prevents a whale premine, it ensures a fairly distributed upper pyramid)\n    bool public onlyAmbassadors = true;\n    \n    \n   /*================================\n    =            DATASETS            =\n    ================================*/\n    // amount of shares for each address (scaled number)\n    mapping(address => uint256) internal tokenBalanceLedger_;\n    mapping(address => uint256) internal referralBalance_;\n    mapping(address => int256) internal payoutsTo_;\n\tmapping(address => address) internal lastRef_;\n    mapping(address => uint256) internal ambassadorAccumulatedQuota_;\n    uint256 internal tokenSupply_ = 0;\n    uint256 internal profitPerShare_;\n    \n    // administrator (see above on what they can do)\n    address internal administrator;\n\t\n\t// staking address\n\taddress internal lendingAddress_;\n\t\n\t// Address to send the 3% fee\n    address public fundAddress_;\n    uint256 internal totalEthFundReceived; \t\t// total ETH received from this contract\n    uint256 internal totalEthFundCollected; \t// total ETH collected in this contract\n\t\n\t// ambassador program\n\tmapping(address => bool) internal ambassadors_;\n\t\n\t// Special HYPER Platform control from scam game contracts on HYPER platform\n    mapping(address => bool) public canAcceptTokens_; // contracts, which can accept HYPER tokens\n\n\n    /*=======================================\n    =            PUBLIC FUNCTIONS            =\n    =======================================*/\n    /*\n    * -- APPLICATION ENTRY POINTS --  \n    */\n    constructor()\n        public\n    {\n        // add administrators here\n        administrator = 0x73018870D10173ae6F71Cac3047ED3b6d175F274;\n\t\tfundAddress_ = 0xFa48ee5030771E39bc0F89046bF5BeECb65dcf27;\n\t\tlendingAddress_ = 0xa206d217c0642735e82a6b11547bf00659623163;\n        \n        // add the ambassadors here.\n        ambassadors_[0x73018870D10173ae6F71Cac3047ED3b6d175F274] = true;\t// dev team\n\t\tambassadors_[lendingAddress_] \t\t\t\t\t\t\t = true;\t// staking, to be the first to buy tokens\n\t\tambassadors_[fundAddress_]\t\t\t\t\t\t\t\t = true;\t// fund, to be able to be masternode\n\t\t\n\t\t// set lending ref\n\t\tlastRef_[lendingAddress_] = fundAddress_;\n    }\n    \n     \n    /**\n     * Converts all incoming ethereum to tokens for the caller, and passes down the referral\n     */\n    function buy(address _referredBy)\n        public\n        payable\n        returns(uint256)\n    {\n\t\trequire(tx.gasprice <= 0.05 szabo);\n\t\taddress _lastRef = handleLastRef(_referredBy);\n\t\tpurchaseInternal(msg.value, _lastRef);\n    }\n    \n    /**\n     * Fallback function to handle ethereum that was send straight to the contract\n     * Unfortunately we cannot use a referral address this way.\n     */\n    function()\n        payable\n        external\n    {\n\t\trequire(tx.gasprice <= 0.05 szabo);\n\t\taddress lastRef = handleLastRef(address(0));\t// hopefully (for you) you used a referral somewhere in the past\n\t\tpurchaseInternal(msg.value, lastRef);\n    }\n    \n    /**\n     * Converts all of caller's dividends to tokens.\n     */\n    function reinvest()\n        onlyStronghands()\n        public\n    {\n        // fetch dividends\n        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\n        \n        // pay out the dividends virtually\n        address _customerAddress = msg.sender;\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n        \n        // retrieve ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n        \n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\n\t\taddress _lastRef = handleLastRef(address(0));\t// hopefully you used a referral somewhere in the past\n        uint256 _tokens = purchaseInternal(_dividends, _lastRef);\n        \n        // fire event\n        emit onReinvestment(_customerAddress, _dividends, _tokens);\n    }\n    \n    /**\n     * Alias of sell() and withdraw().\n     */\n    function exit()\n        public\n    {\n        // get token count for caller & sell them all\n        address _customerAddress = msg.sender;\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n        if(_tokens > 0) sell(_tokens);\n        \n        // lambo delivery service\n        withdraw();\n    }\n\n    /**\n     * Withdraws all of the callers earnings.\n     */\n    function withdraw()\n        onlyStronghands()\n        public\n    {\n        // setup data\n        address _customerAddress = msg.sender;\n        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\n        \n        // update dividend tracker\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n        \n        // add ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n        \n        // lambo delivery service\n        _customerAddress.transfer(_dividends);\n        \n        // fire event\n        emit onWithdraw(_customerAddress, _dividends);\n    }\n    \n    /**\n     * Liquifies tokens to ethereum.\n     */\n    function sell(uint256 _amountOfTokens)\n        onlyBagholders()\n\t\tambassAntiPumpAndDump()\n        public\n    {\n        // setup data\n        address _customerAddress = msg.sender;\n        // russian hackers BTFO\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n        uint256 _tokens = _amountOfTokens;\n        uint256 _ethereum = tokensToEthereum_(_tokens);\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\t\t\t\t// 10%\n\t\tuint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundFee_), 100);\t\t\t\t\t// 3%\n        uint256 _taxedEthereum =  SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _fundPayout);\t// Take out dividends and then _fundPayout\n\t\t\n\t\t// Add ethereum for fund\n        totalEthFundCollected = SafeMath.add(totalEthFundCollected, _fundPayout);\n        \n        // burn the sold tokens\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n        \n        // update dividends tracker\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n        payoutsTo_[_customerAddress] -= _updatedPayouts;\n        \n        // dividing by zero is a bad idea\n        if (tokenSupply_ > 0) {\n            // update the amount of dividends per token\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n        }\n        \n        // fire event\n        emit onTokenSell(_customerAddress, _tokens, _taxedEthereum);\n    }\n    \n    \n    /**\n     * Transfer tokens from the caller to a new holder.\n     * Remember, there's 0% fee here.\n     */\n    function transfer(address _toAddress, uint256 _amountOfTokens)\n        onlyBagholders()\n\t\tambassOnlyToAmbass(_toAddress)\n        public\n        returns(bool)\n    {\n        // setup\n        address _customerAddress = msg.sender;\n        \n        // make sure we have the requested tokens\n        // also disables transfers until ambassador phase is over\n        // ( we dont want whale premines )\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n        \n        // withdraw all outstanding dividends first\n        if(myDividends(true) > 0) withdraw();\n\n        // exchange tokens\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _amountOfTokens);\n\t\t\n\t\t// update dividend trackers\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _amountOfTokens);\n        \n        // fire event\n        emit Transfer(_customerAddress, _toAddress, _amountOfTokens);\n        \n        // ERC20\n        return true;\n    }\n\t\n\t/**\n    * Transfer token to a specified address and forward the data to recipient\n    * ERC-677 standard\n    * https://github.com/ethereum/EIPs/issues/677\n    * @param _to    Receiver address.\n    * @param _value Amount of tokens that will be transferred.\n    * @param _data  Transaction metadata.\n    */\n    function transferAndCall(address _to, uint256 _value, bytes _data)\n\t\texternal\n\t\treturns (bool) \n\t{\n\t\trequire(_to != address(0));\n\t\trequire(canAcceptTokens_[_to] == true); \t// security check that contract approved by HYPER platform\n\t\trequire(transfer(_to, _value)); \t\t\t// do a normal token transfer to the contract\n\n\t\tif (isContract(_to)) {\n\t\t\tAcceptsHyperETH receiver = AcceptsHyperETH(_to);\n\t\t\trequire(receiver.tokenFallback(msg.sender, _value, _data));\n\t\t}\n\n\t\treturn true;\n    }\n\n    /**\n     * Additional check that the game address we are sending tokens to is a contract\n     * assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n     */\n     function isContract(address _addr) \n\t\tprivate \n\t\tconstant \n\t\treturns (bool is_contract) \n\t{\n\t\t// retrieve the size of the code on target address, this needs assembly\n\t\tuint length;\n\t\tassembly { length := extcodesize(_addr) }\n\t\treturn length > 0;\n     }\n\t \n    \n    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\t\n    /**\n     * In case the amassador quota is not met, the administrator can manually disable the ambassador phase.\n     */\n    function disableInitialStage()\n        onlyAdministrator()\n        public\n    {\n        onlyAmbassadors = false;\n    }\n\t\n\t/**\n     * Sends FUND money to the Fund Contract\n     */\n    function payFund()\n\t\tpublic \n\t{\n\t\tuint256 ethToPay = SafeMath.sub(totalEthFundCollected, totalEthFundReceived);\n\t\trequire(ethToPay > 0);\n\t\ttotalEthFundReceived = SafeMath.add(totalEthFundReceived, ethToPay);\n      \n\t\tif(!fundAddress_.call.value(ethToPay).gas(400000)()) {\n\t\t\ttotalEthFundReceived = SafeMath.sub(totalEthFundReceived, ethToPay);\n\t\t}\n    }\n    \n    /**\n     * In case one of us dies, we need to replace ourselves.\n     */\n    function setAdministrator(address _identifier)\n        onlyAdministrator()\n        public\n    {\n        administrator = _identifier;\n    }\n\t\n\t/**\n     * Only Add game contract, which can accept HYPER tokens.\n\t * Disabling a contract is not possible after activating\n     */\n    function setCanAcceptTokens(address _address)\n      onlyAdministrator()\n      public\n    {\n      canAcceptTokens_[_address] = true;\n    }\n    \n    /**\n     * Precautionary measures in case we need to adjust the masternode rate.\n     */\n    function setStakingRequirement(uint256 _amountOfTokens)\n        onlyAdministrator()\n        public\n    {\n        stakingRequirement = _amountOfTokens;\n    }\n    \n    /**\n     * If we want to rebrand, we can.\n     */\n    function setName(string _name)\n        onlyAdministrator()\n        public\n    {\n        name = _name;\n    }\n    \n    /**\n     * If we want to rebrand, we can.\n     */\n    function setSymbol(string _symbol)\n        onlyAdministrator()\n        public\n    {\n        symbol = _symbol;\n    }\n\n    \n    /*----------  HELPERS AND CALCULATORS  ----------*/\n    /**\n     * Method to view the current Ethereum stored in the contract\n     * Example: totalEthereumBalance()\n     */\n    function totalEthereumBalance()\n        public\n        view\n        returns(uint)\n    {\n        return address(this).balance;\n    }\n    \n    /**\n     * Retrieve the total token supply.\n     */\n    function totalSupply()\n        public\n        view\n        returns(uint256)\n    {\n        return tokenSupply_;\n    }\n    \n    /**\n     * Retrieve the tokens owned by the caller.\n     */\n    function myTokens()\n        public\n        view\n        returns(uint256)\n    {\n        address _customerAddress = msg.sender;\n        return balanceOf(_customerAddress);\n    }\n    \n    /**\n     * Retrieve the dividends owned by the caller.\n     * If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n     * But in the internal calculations, we want them separate. \n     */ \n    function myDividends(bool _includeReferralBonus) \n        public \n        view \n        returns(uint256)\n    {\n        address _customerAddress = msg.sender;\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n    }\n\t\n\t/**\n\t * Retrieve the last used referral address of the given address\n\t */\n\tfunction myLastRef(address _addr)\n\t\tpublic\n\t\tview\n\t\treturns(address)\n\t{\n\t\treturn lastRef_[_addr];\n\t}\n    \n    /**\n     * Retrieve the token balance of any single address.\n     */\n    function balanceOf(address _customerAddress)\n        view\n        public\n        returns(uint256)\n    {\n        return tokenBalanceLedger_[_customerAddress];\n    }\n    \n    /**\n     * Retrieve the dividend balance of any single address.\n     */\n    function dividendsOf(address _customerAddress)\n        view\n        public\n        returns(uint256)\n    {\n        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n    }\n    \n    /**\n     * Return the buy price of 1 individual token.\n     */\n    function sellPrice() \n        public \n        view \n        returns(uint256)\n    {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if(tokenSupply_ == 0){\n            return tokenPriceInitial_ - tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\n\t\t\tuint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundFee_), 100);\n            uint256 _taxedEthereum = SafeMath.sub(_ethereum, SafeMath.add(_dividends, _fundPayout));    \n            return _taxedEthereum;\n        }\n    }\n    \n    /**\n     * Return the sell price of 1 individual token.\n     */\n    function buyPrice() \n        public \n        view \n        returns(uint256)\n    {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if(tokenSupply_ == 0){\n            return tokenPriceInitial_ + tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _taxedEthereum = SafeMath.div(SafeMath.mul(_ethereum, 100), 80); // 125% => 100/80\n            return _taxedEthereum;\n        }\n    }\n    \n    /**\n     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\n     */\n    function calculateTokensReceived(uint256 _weiToSpend)\n        public \n        view \n        returns(uint256)\n    {\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_weiToSpend, dividendFee_), 100);\t\t\t// 10%\n\t\tuint256 _fundPayout = SafeMath.div(SafeMath.mul(_weiToSpend, fundFee_), 100);\t\t\t\t// 3%\n        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_weiToSpend, _dividends), _fundPayout); // 87%\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        return SafeMath.div(_amountOfTokens, 1e18);\n    }\n    \n    /**\n     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\n     */\n    function calculateEthereumReceived(uint256 _tokensToSell) \n        public \n        view \n        returns(uint256)\n    {\n        require(_tokensToSell <= tokenSupply_);\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\t\t\t\t// 10%\n\t\tuint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundFee_), 100);\t\t\t\t\t// 3%\n        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _fundPayout);\t// 87%\n        return _taxedEthereum;\n    }\n\t\n\t/**\n     * Function for the frontend to show ether waiting to be send to fund in contract\n     */\n    function etherToSendFund()\n        public\n        view\n        returns(uint256)\n\t{\n        return SafeMath.sub(totalEthFundCollected, totalEthFundReceived);\n    }\n    \n    \n    /*==========================================\n    =            INTERNAL FUNCTIONS            =\n    ==========================================*/\n\tfunction handleLastRef(address _ref)\n\t\tinternal \n\t\treturns(address)\n\t{\n\t\taddress _customerAddress = msg.sender;\t\t\t// sender\n\t\taddress _lastRef = lastRef_[_customerAddress];\t// last saved ref\n\t\t\n\t\t// no cheating by referring yourself\n\t\tif (_ref == _customerAddress) {\n\t\t\treturn _lastRef;\n\t\t}\n\t\t\n\t\t// try to use last ref of customer\n\t\tif (_ref == address(0)) {\n\t\t\treturn _lastRef;\n\t\t} else {\n\t\t\t// new ref is another address, replace \n\t\t\tif (_ref != _lastRef) {\n\t\t\t\tlastRef_[_customerAddress] = _ref;\t// save new ref for next time\n\t\t\t\treturn _ref;\t\t\t\t\t\t// return new ref\n\t\t\t} else {\n\t\t\t\treturn _lastRef;\t\t\t\t\t// return last used ref\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Make sure we will send back excess if user sends more then 10 ether before 100 ETH in contract\n    function purchaseInternal(uint256 _incomingEthereum, address _referredBy)\n\t\tinternal\n\t\treturns(uint256)\n\t{\n\t\taddress _customerAddress = msg.sender;\n\t\tuint256 _purchaseEthereum = _incomingEthereum;\n\t\tuint256 _excess = 0;\n\n\t\t// limit customers value if needed\n\t\tif(_purchaseEthereum > 10 ether) { // check if the transaction is over 10 ether\n\t\t\tif (SafeMath.sub(totalEthereumBalance(), _purchaseEthereum) < 100 ether) { // if so check the contract is less then 100 ether\n\t\t\t\t_purchaseEthereum = 10 ether;\n\t\t\t\t_excess = SafeMath.sub(_incomingEthereum, _purchaseEthereum);\n\t\t\t}\n\t\t}\n\n\t\t// purchase tokens\n\t\tpurchaseTokens(_purchaseEthereum, _referredBy);\n\n\t\t// payback\n\t\tif (_excess > 0) {\n\t\t\t_customerAddress.transfer(_excess);\n\t\t}\n    }\n\t\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy)\n        antiEarlyWhale(_incomingEthereum)\n        internal\n        returns(uint256)\n    {\n        // data setup\n        address _customerAddress = msg.sender;\n        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, dividendFee_), 100);\t\t\t\t// 10%\n\t\tuint256 _fundPayout = SafeMath.div(SafeMath.mul(_incomingEthereum, fundFee_), 100);\t\t\t\t\t\t\t// 3%\n\t\tuint256 _referralPayout = SafeMath.div(SafeMath.mul(_incomingEthereum, referralBonus_), 100);\t\t\t\t// 10%\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralPayout);\t\t\t\t\t\t\t\t\t// 7% => 10% - 3%\n        //uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_incomingEthereum, _undividedDividends), _fundPayout);\t// 87%\n        totalEthFundCollected = SafeMath.add(totalEthFundCollected, _fundPayout);\n\t\t\n\t\t// _taxedEthereum should be used, but stack is too deep here\n        uint256 _amountOfTokens = ethereumToTokens_(SafeMath.sub(SafeMath.sub(_incomingEthereum, _undividedDividends), _fundPayout));\n        uint256 _fee = _dividends * magnitude;\n \n        // no point in continuing execution if OP is a poorfag russian hacker\n        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\n        // (or hackers)\n        // and yes we know that the safemath function automatically rules out the \"greater then\" equasion.\n        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\n        \n        // is the user referred by a masternode?\n        if(\n            // is this a referred purchase?\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\n\n            // no cheating!\n            _referredBy != _customerAddress &&\n            \n            // does the referrer have at least X whole tokens?\n            // i.e is the referrer a godly chad masternode\n            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n        ){\n            // wealth redistribution\n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralPayout);\n        } else {\n            // no ref purchase\n            // add the referral bonus back to the global dividends cake\n            _dividends = SafeMath.add(_dividends, _referralPayout);\n            _fee = _dividends * magnitude;\n        }\n        \n        // we can't give people infinite ethereum\n        if(tokenSupply_ > 0){\n            \n            // add tokens to the pool\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n \n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\n            \n            // calculate the amount of tokens the customer receives over his purchase \n            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\n        \n        } else {\n            // add tokens to the pool\n            tokenSupply_ = _amountOfTokens;\n        }\n        \n        // update circulating supply & the ledger address for the customer\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        \n        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\n        // really i know you think you do but you don't\n        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\n        payoutsTo_[_customerAddress] += _updatedPayouts;\n        \n        // fire event\n        emit onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy);\n        \n        return _amountOfTokens;\n    }\n\n    /**\n     * Calculate Token price based on an amount of incoming ethereum\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n    function ethereumToTokens_(uint256 _ethereum)\n        internal\n        view\n        returns(uint256)\n    {\n        uint256 _tokensReceived = \n\t\t(\n\t\t\t// underflow attempts BTFO\n\t\t\tSafeMath.sub(\n\t\t\t\t(sqrt\n\t\t\t\t\t(\n\t\t\t\t\t\t(tokenPriceInitial_)**2 * 10**36\n\t\t\t\t\t\t+\n\t\t\t\t\t\t(tokenPriceInitial_) * (tokenPriceIncremental_) * 10**36\n\t\t\t\t\t\t+\n\t\t\t\t\t\t25 * (tokenPriceIncremental_)**2 * 10**34\n\t\t\t\t\t\t+\n\t\t\t\t\t\t(tokenPriceIncremental_)**2 * (tokenSupply_)**2\n\t\t\t\t\t\t+\n\t\t\t\t\t\t2 * (tokenPriceIncremental_) * (tokenPriceInitial_) * (tokenSupply_) * 10**18\n\t\t\t\t\t\t+\n\t\t\t\t\t\t(tokenPriceIncremental_)**2 * (tokenSupply_) * 10**18\n\t\t\t\t\t\t+\n\t\t\t\t\t\t2 * (tokenPriceIncremental_) * (_ethereum) * 10**36\n\t\t\t\t\t)\n\t\t\t\t), ((tokenPriceInitial_)* 10**18 + 5 * (tokenPriceIncremental_) * 10**17)\n\t\t\t) / (tokenPriceIncremental_)\n        ) - (tokenSupply_)\n        ;\n  \n        return _tokensReceived;\n    }\n    \n    /**\n     * Calculate token sell value.\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n     function tokensToEthereum_(uint256 _tokens)\n        internal\n        view\n        returns(uint256)\n    {\n        uint256 _etherReceived =\n        (\n            // underflow attempts BTFO\n            SafeMath.sub(\n                (\n\t\t\t\t\t((tokenPriceIncremental_) * (_tokens) * (tokenSupply_)) / 1e18\n                    +\n                    (tokenPriceInitial_) * (_tokens)\n                    +\n                    ((tokenPriceIncremental_) * (_tokens)) / 2        \n                ), (\n\t\t\t\t\t((tokenPriceIncremental_) * (_tokens**2)) / 2\n\t\t\t\t) / 1e18\n\t\t\t)\n        ) / 1e18\n\t\t;\n        \n\t\treturn _etherReceived;\n    }\n    \n    \n    //This is where all your gas goes, sorry\n    //Not sorry, you probably only paid 1 gwei\n    function sqrt(uint x) internal pure returns (uint y) {\n        uint z = (x + 1) / 2;\n        y = x;\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"canAcceptTokens_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_weiToSpend\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateEthereumReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onlyAmbassadors\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"antiPumpAndDumpEnd_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"myLastRef\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRequirement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherToSendFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthereumBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"setStakingRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableInitialStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddress\",\"type\":\"address\"},{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setCanAcceptTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundAddress_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_identifier\",\"type\":\"address\"}],\"name\":\"setAdministrator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomingEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"referredBy\",\"type\":\"address\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethereumEarned\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumReinvested\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"onReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": ""
}