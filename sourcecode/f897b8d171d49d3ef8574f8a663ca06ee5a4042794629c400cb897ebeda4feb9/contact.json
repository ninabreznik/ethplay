{
  "address": "0xf7a7c1a5728a80b79bf19690669f3bb786614c07",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Crowdsale",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-16\n*/\n\npragma solidity 0.4.24;\n// ----------------------------------------------------------------------------\n// 'RIPT' token crowdsale contract\n//\n// Deployed to : 0xef9EcD8a0A2E4b31d80B33E243761f4D93c990a8\n// Symbol      : RIPT\n// Name        : RiptideCoin\n//\n// Copyright (c) Riptidecoin.com The MIT Licence.\n// Contract crafted by: GDO Infotech Pvt Ltd (https://GDO.co.in) \n// ----------------------------------------------------------------------------\n   \n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0 uint256 c = a / b;\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale.\n * Crowdsales have a start and end timestamps, where investors can make\n * token purchases and the crowdsale will assign them tokens based\n * on a token per ETH rate. Funds collected are forwarded to a wallet\n * as they arrive.\n */\ncontract token { function transfer(address receiver, uint amount){  } }\ncontract Crowdsale {\n  using SafeMath for uint256;\n\n  // uint256 durationInMinutes;\n  // address where funds are collected\n  address public wallet;\n  // token address\n  address addressOfTokenUsedAsReward;\n\n  token tokenReward;\n\n\n\n  // start and end timestamps where investments are allowed (both inclusive)\n  uint256 public startTime;\n  uint256 public endTime;\n  // amount of raised money in wei\n  uint256 public weiRaised;\n  uint256 public price = 42000;\n\n  /**\n   * event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n\n  function Crowdsale() {\n    //You will change this to your wallet where you need the ETH \n    wallet = 0x423A3438cF5b954689a85D45B302A5D1F3C763D4;\n    // durationInMinutes = _durationInMinutes;\n    //Here will come the checksum address we got\n    addressOfTokenUsedAsReward = 0xdd007278B667F6bef52fD0a4c23604aA1f96039a;\n\n\n    tokenReward = token(addressOfTokenUsedAsReward);\n  }\n\n  bool started = false;\n /*    \n  function startSale(uint256 delay){\n    if (msg.sender != wallet || started) throw;\n    startTime = now + delay * 1 minutes;\n    endTime = startTime + 45 * 24 * 60 * 1 minutes;\n    started = true;\n  }\n*/\n \n    function startSale(uint256 Start,uint256 End,uint256 amount) public\n    {\n     if (msg.sender != wallet || started) throw;\n     require(Start < End);\n  require(now < Start);\n  //require(balanceOf[msg.sender] > amount);\n  startTime=Start;\n  endTime=End;\n  tokenReward.transfer(this,amount);\n    }\n function stopSale()  public{\n            require(msg.sender == wallet);\n            endTime = 0;\n        }\n  function setPrice(uint256 _price){\n    if(msg.sender != wallet) throw;\n    price = _price;\n  }\n function manualEtherWithdraw() public{\n      require(msg.sender == wallet); \n   if (!wallet.send(address(this).balance)) {\n     throw;\n   }\n  }\n  // fallback function can be used to buy tokens\n  function () payable {\n    buyTokens(msg.sender);\n  }\n\n  // low level token purchase function\n  function buyTokens(address beneficiary) payable {\n    require(beneficiary != 0x0);\n    require(validPurchase());\n\n    uint256 weiAmount = msg.value;\n\n    // calculate token amount to be sent\n    uint256 tokens = (weiAmount/\n10**10) * price;//weiamount * price \n\n    //bonus schedule\n    // if(now < startTime + 1*7*24*60* 1 minutes){//First week\n    //   tokens += (tokens * 60) / 100;//60%\n    // }else if(now < startTime + 2*7*24*60* 1 minutes){//Second week\n    //   tokens += (tokens * 40) / 100;//40%\n    // }else if(now < startTime + 3*7*24*60* 1 minutes){//3rd week\n    //   tokens += (tokens * 30) / 100;//30% and so on\n    // }else if(now < startTime + 4*7*24*60* 1 minutes){\n    //   tokens += (tokens * 20) / 100;\n    // }else if(now < startTime + 5*7*24*60* 1 minutes){\n    //   tokens += (tokens * 10) / 100;\n    // }\n    /*\n    if(now<startTime+27*24*60* 1 minutes){\n      if(weiAmount>=10**18)\n        tokens+=(tokens*60)/100;\n      else if(weiAmount>=5*10**17)\n        tokens+=(tokens*25)/100;\n      else if(weiAmount>=4*10**17)\n        tokens+=(tokens*20)/100;\n      else if(weiAmount>=3*10**17)\n        tokens+=(tokens*15)/100;\n      else if(weiAmount>=2*10**17)\n        tokens+=(tokens*10)/100;\n      else if(weiAmount>=10**17)\n        tokens+=(tokens*5)/100;\n    }\n    */\n    // update state\n    weiRaised = weiRaised.add(weiAmount);\n\n    tokenReward.transfer(beneficiary, tokens);\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n    forwardFunds();\n  }\n\n  // send ether to the fund collection wallet\n  // override to create custom fund forwarding mechanisms\n  function forwardFunds() internal {\n    // wallet.transfer(msg.value);\n    if (!wallet.send(msg.value)) {\n      throw;\n    }\n  }\n\n  // @return true if the transaction can buy tokens\n  function validPurchase() internal constant returns (bool) {\n    bool withinPeriod = now >= startTime && now <= endTime;\n    bool nonZeroPurchase = msg.value != 0;\n    return withinPeriod && nonZeroPurchase;\n  }\n\n  // @return true if crowdsale event has ended\n  function hasEnded() public constant returns (bool) {\n    return now > endTime;\n  }\n\n  function withdrawTokens(uint256 _amount) {\n    if(msg.sender!=wallet) throw;\n    tokenReward.transfer(wallet,_amount);\n  }\n}",
  "bytecode": "608060405261a4106006556000600760006101000a81548160ff02191690831515021790555034801561003157600080fd5b5073423a3438cf5b954689a85d45b302a5d1f3c763d46000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073dd007278b667f6bef52fd0a4c23604aa1f96039a600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610a608061014d6000396000f3006080604052600436106100ba576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806304d742dc146100c5578063315a095d146101065780633197cbb6146101335780634042b66f1461015e578063521eb2731461018957806378e97925146101e057806391b7f5ed1461020b578063a035b1fe14610238578063d4524c7214610263578063e36b0b371461027a578063ec8ac4d814610291578063ecb70fb7146102c7575b6100c3336102f6565b005b3480156100d157600080fd5b506101046004803603810190808035906020019092919080359060200190929190803590602001909291905050506104be565b005b34801561011257600080fd5b506101316004803603810190808035906020019092919050505061063c565b005b34801561013f57600080fd5b50610148610798565b6040518082815260200191505060405180910390f35b34801561016a57600080fd5b5061017361079e565b6040518082815260200191505060405180910390f35b34801561019557600080fd5b5061019e6107a4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101ec57600080fd5b506101f56107c9565b6040518082815260200191505060405180910390f35b34801561021757600080fd5b50610236600480360381019080803590602001909291905050506107cf565b005b34801561024457600080fd5b5061024d610834565b6040518082815260200191505060405180910390f35b34801561026f57600080fd5b5061027861083a565b005b34801561028657600080fd5b5061028f61090f565b005b6102c5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506102f6565b005b3480156102d357600080fd5b506102dc610974565b604051808215151515815260200191505060405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff161415151561031f57600080fd5b610327610980565b151561033257600080fd5b3491506006546402540be4008381151561034857fe5b04029050610361826005546109b390919063ffffffff16565b600581905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561042c57600080fd5b505af1158015610440573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad188484604051808381526020018281526020019250505060405180910390a36104b96109d1565b505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415806105265750600760009054906101000a900460ff165b1561053057600080fd5b818310151561053e57600080fd5b824210151561054c57600080fd5b8260038190555081600481905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb30836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561061f57600080fd5b505af1158015610633573d6000803e3d6000fd5b50505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561069757600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561077d57600080fd5b505af1158015610791573d6000803e3d6000fd5b5050505050565b60045481565b60055481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561082a57600080fd5b8060068190555050565b60065481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561089557600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050151561090d57600080fd5b565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561096a57600080fd5b6000600481905550565b60006004544211905090565b6000806000600354421015801561099957506004544211155b9150600034141590508180156109ac5750805b9250505090565b60008082840190508381101515156109c757fe5b8091505092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501515610a3257600080fd5b5600a165627a7a7230582027909fda013cf7d922cba575afdccd11bedc09bb0bbcc6c717d4bbec4de7e02c0029"
}