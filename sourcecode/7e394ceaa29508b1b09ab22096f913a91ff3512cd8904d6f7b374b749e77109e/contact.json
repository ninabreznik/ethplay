{
  "address": "0x7a74c8b0d5993e358f109750cf1ead1cb49cc6dd",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WeaponTokenize",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-25\n*/\n\npragma solidity ^0.4.17;\n\n// source : https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\ncontract ERC20Interface {\n  function transfer(address to, uint tokens) public returns (bool success);\n  event Transfer(address indexed from, address indexed to, uint tokens);\n}\n\ncontract WeaponTokenize {\n    /*  State variables */\n    address public owner;\n    uint[] weaponList;\n    address[] authorizedOwners;\n\n    /* mappings */\n    mapping (uint => string) gameDataOf;\n    mapping (uint => string) publicDataOf;\n    mapping (uint => string) ownerDataOf;\n    mapping (uint => address) ownerOf;\n    \n    mapping (address => bool) isAuthorizedOwner;\n    \n\n\n    /* Events */\n    event WeaponAdded(uint indexed weaponId, string gameData, string publicData, string ownerData);\n    event WeaponUpdated(uint indexed weaponId, string gameData, string publicData, string ownerData);\n    event OwnershipTransferred(address indexed _oldOwner, address indexed _newOwner);\n    event WeaponOwnerUpdated (uint indexed  _weaponId, address indexed  _oldOwner, address indexed  _newOwner);\n    event AuthorizedOwnerAdded(address indexed _addeduthorizedOwner);\n    event AuthorizedOwnerRemoved(address indexed _removedAuthorizedOwner);  \n    \n    /* Modifiers */    \n    modifier onlyOwnerOfContract() { \n      require(msg.sender == owner);\n      _; \n    }\n\n    modifier onlyAuthorizedOwner() { \n     require(isAuthorizedOwner[msg.sender]);\n     _;\n    }\n    \n     \n    /*  constructor */\n    function WeaponTokenize () public {\n      owner = msg.sender;\n      isAuthorizedOwner[msg.sender] =  true;\n      authorizedOwners.push(msg.sender);\n\n    }\n\n    //////////////////////////////////////////\n    // OWNER SPECIFIC FUNCTIONS\n    //////////////////////////////////////////\n\n    /* Add authrized owners */\n    function addAuthorizedOwners (address _newAuthorizedUser) public onlyOwnerOfContract returns(bool res) {\n      require(!isAuthorizedOwner[_newAuthorizedUser]);\n      isAuthorizedOwner[_newAuthorizedUser] =  true;\n      authorizedOwners.push(_newAuthorizedUser);\n      emit AuthorizedOwnerAdded(_newAuthorizedUser);\n      return true;\n    }\n    \n    /*  Remove authorized users */\n    function removeAuthorizeduser(address _authorizedUser) public onlyOwnerOfContract returns(bool res){\n        require(isAuthorizedOwner[_authorizedUser]);\n        delete(isAuthorizedOwner[_authorizedUser]);\n        for(uint i=0; i< authorizedOwners.length;i++){\n          if(authorizedOwners[i] == _authorizedUser){\n            delete authorizedOwners[i];\n            break;\n          }\n        }\n        emit AuthorizedOwnerRemoved(_authorizedUser);\n        return true;\n    }\n\n    /* Change ownership */\n    function transferOwnership (address _newOwner) public onlyOwnerOfContract returns(bool res) {\n      owner = _newOwner;\n      emit OwnershipTransferred(msg.sender, _newOwner);\n      return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Owner can transfer out any accidentally sent ERC20 tokens\n    // ------------------------------------------------------------------------\n    function transferAnyERC20Token(address _tokenAddress, uint _value) public onlyOwnerOfContract returns (bool success) {\n        return ERC20Interface(_tokenAddress).transfer(owner, _value);\n    }\n    \n    \n\n    //////////////////////////////////////////\n    // AUTHORIZEED USERS FUNCTIONALITY\n    //////////////////////////////////////////\n\n    /* Add weapon */\n    function addWeapon (uint _id, string _gameData, string _publicData, string _ownerData, address _ownerAddrress) public onlyAuthorizedOwner returns(bool res) {\n      gameDataOf[_id] = _gameData;\n      publicDataOf[_id] = _publicData;\n      ownerDataOf[_id] = _ownerData;\n      ownerOf[_id] =  _ownerAddrress;\n      weaponList.push(_id);\n      emit WeaponAdded(_id, _gameData, _publicData, _ownerData);\n      return true;\n    }\n\n    /* update all weapon details */\n    function updateWeapon (uint _id, string _gameData, string _publicData, string _ownerData) public onlyAuthorizedOwner returns(bool res) {\n      gameDataOf[_id] = _gameData;\n      publicDataOf[_id] = _publicData;\n      ownerDataOf[_id] = _ownerData;\n      //emit WeaponAdded(_id, _gameData, _publicData, _ownerData);\n      return true;\n    }\n\n    /*  update game proprietary data */\n    function updateGameProprietaryData (uint _id, string _gameData) public onlyAuthorizedOwner returns(bool res) {\n      gameDataOf[_id] = _gameData;\n      emit WeaponUpdated(_id, _gameData, \"\", \"\");\n      return true;\n    }\n\n    /* update public data */\n    function updatePublicData (uint _id,  string _publicData) public onlyAuthorizedOwner returns(bool res) {\n      publicDataOf[_id] = _publicData;\n      emit WeaponUpdated(_id, \"\", _publicData, \"\");\n      return true;\n    }\n\n    /* update owner proprietary data */\n    function updateOwnerProprietaryData (uint _id, string _ownerData) public onlyAuthorizedOwner returns(bool res) {\n      ownerDataOf[_id] = _ownerData;\n      emit WeaponUpdated(_id, \"\", \"\", _ownerData);\n      return true;\n    }\n\n    /* change owner of weapon */\n    function updateOwnerOfWeapon (uint _id, address _newOwner) public onlyAuthorizedOwner returns(bool res) {\n      address oldOwner = ownerOf[_id];\n      ownerOf[_id] =  _newOwner;\n      emit WeaponOwnerUpdated(_id, oldOwner, _newOwner);\n      return true;\n    }\n    \n\n    //////////////////////////////////////////\n    // PUBLICLY ACCESSIBLE METHODS (CONSTANT)\n    //////////////////////////////////////////\n\n    /* Get Weapon Data */\n    function getGameProprietaryData (uint _id) public view returns(string _gameData) {\n      return gameDataOf[_id];\n    }\n\n    function getPublicData (uint _id) public view returns(string _pubicData) {\n      return publicDataOf[_id];\n    }\n\n    function getOwnerProprietaryData (uint _id) public view returns(string _ownerData) {\n      return ownerDataOf[_id] ;\n    }\n\n    function getAllWeaponData (uint _id) public view returns(string _gameData,string _pubicData,string _ownerData ) {\n      return (gameDataOf[_id], publicDataOf[_id], ownerDataOf[_id]);\n    }\n\n    function getOwnerOf (uint _weaponId) public view returns(address _owner) {\n      return ownerOf[_weaponId];\n    }\n\n    function getWeaponList () public view returns(uint[] tokenizedWeapons) {\n      return weaponList;\n    }\n\n    function getAuthorizedOwners () public view returns(address[] authorizedUsers) {\n      return authorizedOwners;\n    }\n    \n\n    // ------------------------------------------------------------------------\n    // Prevents contract from accepting ETH\n    // ------------------------------------------------------------------------\n    function () public payable {\n      revert();\n    }\n\n}",
  "bytecode": ""
}