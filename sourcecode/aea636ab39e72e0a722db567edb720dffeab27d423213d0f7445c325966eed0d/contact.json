{
  "address": "0xbfa27a8796c6b5687f492d5b2fd9b425b128c945",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RudenCoin",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-18\n*/\n\n/*\nRuden Token\n*/\npragma solidity ^0.4.25;\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\ncontract RudenCoin {\n    // Public variables of the token\n    string public constant name = 'Ruden Coin';\n    string public constant symbol = 'RDC';\n    uint8 public constant decimals = 18;\n    uint256 public totalSupply = 10000000000 * 10 ** uint256(decimals);\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n\n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    constructor() public {\n         balanceOf[msg.sender] = totalSupply;   // Give the creator all initial tokens\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal{\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` in behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) \n    public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n    public returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool)\n    {\n      require(allowance[msg.sender][_spender] + _addedValue > allowance[msg.sender][_spender]);\n      allowance[msg.sender][_spender] += _addedValue;\n      emit Approval(msg.sender, _spender, allowance[msg.sender][_spender]);\n      return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool)\n    {\n      uint oldValue = allowance[msg.sender][_spender];\n      if (_subtractedValue > oldValue) {\n        allowance[msg.sender][_spender] = 0;\n      } else {\n        allowance[msg.sender][_spender] = oldValue - _subtractedValue;\n      }\n      emit Approval(msg.sender, _spender, allowance[msg.sender][_spender]);\n      return true;\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    /**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n        totalSupply -= _value;                              // Update totalSupply\n        emit Burn(_from, _value);\n        return true;\n    }\n}",
  "bytecode": "60806040526b204fce5e3e2502611000000060005534801561002057600080fd5b50600080543382526001602052604090912055610a2e806100426000396000f3006080604052600436106100cf5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100d4578063095ea7b31461015e57806318160ddd1461019657806323b872dd146101bd578063313ce567146101e757806342966c6814610212578063661884631461022a57806370a082311461024e57806379cc67901461026f57806395d89b4114610293578063a9059cbb146102a8578063cae9ca51146102cc578063d73dd62314610335578063dd62ed3e14610359575b600080fd5b3480156100e057600080fd5b506100e9610380565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561012357818101518382015260200161010b565b50505050905090810190601f1680156101505780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561016a57600080fd5b50610182600160a060020a03600435166024356103b7565b604080519115158252519081900360200190f35b3480156101a257600080fd5b506101ab61041d565b60408051918252519081900360200190f35b3480156101c957600080fd5b50610182600160a060020a0360043581169060243516604435610423565b3480156101f357600080fd5b506101fc610492565b6040805160ff9092168252519081900360200190f35b34801561021e57600080fd5b50610182600435610497565b34801561023657600080fd5b50610182600160a060020a036004351660243561050d565b34801561025a57600080fd5b506101ab600160a060020a03600435166105f1565b34801561027b57600080fd5b50610182600160a060020a0360043516602435610603565b34801561029f57600080fd5b506100e96106d2565b3480156102b457600080fd5b50610182600160a060020a0360043516602435610709565b3480156102d857600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610182948235600160a060020a031694602480359536959460649492019190819084018382808284375094975061071f9650505050505050565b34801561034157600080fd5b50610182600160a060020a0360043516602435610841565b34801561036557600080fd5b506101ab600160a060020a03600435811690602435166108de565b60408051808201909152600a81527f527564656e20436f696e00000000000000000000000000000000000000000000602082015281565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60005481565b600160a060020a038316600090815260026020908152604080832033845290915281205482111561045357600080fd5b600160a060020a03841660009081526002602090815260408083203384529091529020805483900390556104888484846108fb565b5060019392505050565b601281565b336000908152600160205260408120548211156104b357600080fd5b336000818152600160209081526040808320805487900390558254869003909255815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a2506001919050565b336000908152600260209081526040808320600160a060020a03861684529091528120548083111561056257336000908152600260209081526040808320600160a060020a038816845290915281205561058b565b336000908152600260209081526040808320600160a060020a0388168452909152902083820390555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b60016020526000908152604090205481565b600160a060020a03821660009081526001602052604081205482111561062857600080fd5b600160a060020a038316600090815260026020908152604080832033845290915290205482111561065857600080fd5b600160a060020a038316600081815260016020908152604080832080548790039055600282528083203384528252808320805487900390558254869003909255815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a250600192915050565b60408051808201909152600381527f5244430000000000000000000000000000000000000000000000000000000000602082015281565b60006107163384846108fb565b50600192915050565b60008361072c81856103b7565b15610834576040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018790523060448401819052608060648501908152875160848601528751600160a060020a03871695638f4ffcb195948b94938b939192909160a490910190602085019080838360005b838110156107c45781810151838201526020016107ac565b50505050905090810190601f1680156107f15780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561081357600080fd5b505af1158015610827573d6000803e3d6000fd5b5050505060019150610839565b600091505b509392505050565b336000908152600260209081526040808320600160a060020a03861684529091528120548281011161087257600080fd5b336000818152600260209081526040808320600160a060020a038816808552908352928190208054870190819055815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b600260209081526000928352604080842090915290825290205481565b6000600160a060020a038316151561091257600080fd5b600160a060020a03841660009081526001602052604090205482111561093757600080fd5b600160a060020a0383166000908152600160205260409020548281011161095d57600080fd5b50600160a060020a038083166000818152600160209081526040808320805495891680855282852080548981039091559486905281548801909155815187815291519390950194927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3600160a060020a038084166000908152600160205260408082205492871682529020540181146109fc57fe5b505050505600a165627a7a72305820b3a1957e73234b1ac66f2f9a4fd014226c862f55b6e57f946d2b880b48049b4f0029"
}