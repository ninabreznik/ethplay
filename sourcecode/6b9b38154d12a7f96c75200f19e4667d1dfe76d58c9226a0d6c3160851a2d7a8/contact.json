{
  "address": "0x8c58694bffb6d61fc335c5ff7b6831df88a2961f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ZCDistribution",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-04\n*/\n\npragma solidity ^0.4.24;\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Claimable.sol\n\n/**\n * @title Claimable\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n * This allows the new owner to accept the transfer.\n */\ncontract Claimable is Ownable {\n  address public pendingOwner;\n\n  /**\n   * @dev Modifier throws if called by any account other than the pendingOwner.\n   */\n  modifier onlyPendingOwner() {\n    require(msg.sender == pendingOwner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to set the pendingOwner address.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    pendingOwner = newOwner;\n  }\n\n  /**\n   * @dev Allows the pendingOwner address to finalize the transfer.\n   */\n  function claimOwnership() public onlyPendingOwner {\n    emit OwnershipTransferred(owner, pendingOwner);\n    owner = pendingOwner;\n    pendingOwner = address(0);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: contracts/ZCDistribution.sol\n\n/**\n * @title ZCDistribution\n * \n * Used to distribute rewards to consumers\n *\n * (c) Philip Louw / Zero Carbon Project 2018. The MIT Licence.\n */\ncontract ZCDistribution is Claimable {\n\n    // Total amount of airdrops that happend\n    uint256 public numDrops;\n    // Total amount of tokens dropped\n    uint256 public dropAmount;\n    // Address of the Token\n    address public tokenAddress;\n\n    /**\n     * @param _tokenAddr The Address of the Token\n     */\n    constructor(address _tokenAddr) public {\n        assert(_tokenAddr != address(0));\n        tokenAddress = _tokenAddr;\n    }\n\n    /**\n    * @dev Event when reward is distributed to consumer\n    * @param receiver Consumer address\n    * @param amount Amount of tokens distributed\n    */\n    event RewardDistributed(address receiver, uint amount);\n\n    /**\n    * @dev Distributes the rewards to the consumers. Returns the amount of customers that received tokens. Can only be called by Owner\n    * @param dests Array of cosumer addresses\n    * @param values Array of token amounts to distribute to each client\n    */\n    function multisend(address[] dests, uint256[] values) public onlyOwner returns (uint256) {\n        assert(dests.length == values.length);\n        uint256 i = 0;\n        while (i < dests.length) {\n            assert(ERC20Basic(tokenAddress).transfer(dests[i], values[i]));\n            emit RewardDistributed(dests[i], values[i]);\n            dropAmount += values[i];\n            i += 1;\n        }\n        numDrops += dests.length;\n        return i;\n    }\n\n    /**\n     * @dev Returns the Amount of tokens issued to consumers \n     */\n    function getSentAmount() external view returns (uint256) {\n        return dropAmount;\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060405160208061060a833981016040525160008054600160a060020a03191633179055600160a060020a038116151561004657fe5b60048054600160a060020a031916600160a060020a0392909216919091179055610595806100756000396000f3006080604052600436106100a35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305748be281146100a85780631c8d51e6146100cf5780634e71e0c8146100e4578063715018a6146100fb5780638bc30096146101105780638da5cb5b146101255780639d76ea5814610156578063aad41a411461016b578063e30c3978146101f9578063f2fde38b1461020e575b600080fd5b3480156100b457600080fd5b506100bd61022f565b60408051918252519081900360200190f35b3480156100db57600080fd5b506100bd610235565b3480156100f057600080fd5b506100f961023b565b005b34801561010757600080fd5b506100f96102c3565b34801561011c57600080fd5b506100bd61032f565b34801561013157600080fd5b5061013a610335565b60408051600160a060020a039092168252519081900360200190f35b34801561016257600080fd5b5061013a610344565b34801561017757600080fd5b50604080516020600480358082013583810280860185019096528085526100bd95369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506103539650505050505050565b34801561020557600080fd5b5061013a610514565b34801561021a57600080fd5b506100f9600160a060020a0360043516610523565b60035481565b60035490565b600154600160a060020a0316331461025257600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600054600160a060020a031633146102da57600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b60025481565b600054600160a060020a031681565b600454600160a060020a031681565b600080548190600160a060020a0316331461036d57600080fd5b825184511461037857fe5b5060005b8351811015610502576004548451600160a060020a039091169063a9059cbb908690849081106103a857fe5b9060200190602002015185848151811015156103c057fe5b906020019060200201516040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561043557600080fd5b505af1158015610449573d6000803e3d6000fd5b505050506040513d602081101561045f57600080fd5b5051151561046957fe5b7fe34918ff1c7084970068b53fd71ad6d8b04e9f15d3886cbf006443e6cdc52ea6848281518110151561049857fe5b9060200190602002015184838151811015156104b057fe5b602090810290910181015160408051600160a060020a039094168452918301528051918290030190a182818151811015156104e757fe5b6020908102909101015160038054909101905560010161037c565b92516002805490910190555090919050565b600154600160a060020a031681565b600054600160a060020a0316331461053a57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a72305820ddc4a1ebf9801a8697e26b95dec80d39d4c376a538bb3bf50597ec12a4b6ac8d00290000000000000000000000006737fe98389ffb356f64ebb726aa1a92390d94fb",
  "constructorArguments": "0000000000000000000000006737fe98389ffb356f64ebb726aa1a92390d94fb"
}