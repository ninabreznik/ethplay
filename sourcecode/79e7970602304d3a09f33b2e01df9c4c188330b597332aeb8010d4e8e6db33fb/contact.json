{
  "address": "0x39e5bd6ae0f2aa9240d2ae7fbf49e36f05dd339f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EthereumUnlimited",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-16\n*/\n\npragma solidity ^0.4.18;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    function Ownable() {\n        owner = msg.sender;\n    }\n\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) onlyOwner {\n        require(newOwner != address(0));\n        owner = newOwner;\n    }\n\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) constant returns (uint256);\n    function transfer(address to, uint256 value) returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) constant returns (uint256);\n    function transferFrom(address from, address to, uint256 value) returns (bool);\n    function approve(address spender, uint256 value) returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title PoSTokenStandard\n * @dev the interface of PoSTokenStandard\n */\ncontract PoSTokenStandard {\n    uint256 public stakeStartTime;\n    uint256 public stakeMinAge;\n    uint256 public stakeMaxAge;\n    function mint() returns (bool);\n    function getAirdrop() returns (bool);\n    function coinAge() constant returns (uint256);\n    function checkPos() constant returns (uint256);\n    function annualInterest() constant returns (uint256);\n    event Mint(address indexed _address, uint _reward);\n    event AirdropMined(address indexed to, uint256 amount);\n    \n}\n\n\ncontract EthereumUnlimited is ERC20,PoSTokenStandard,Ownable {\n    using SafeMath for uint256;\n\n    string public name = \"Ethereum Unlimited\";\n    string public symbol = \"ETHU\";\n    uint public decimals = 18;\n\n    uint public chainStartTime; //chain start time\n    uint public chainStartBlockNumber; //chain start block number\n    uint public stakeStartTime; //stake start time\n    uint public stakeMinAge = 1 days; // minimum age for coin age: 1D\n    uint public stakeMaxAge = 365 days; // stake age of full weight: 365D\n    uint public maxMintProofOfStake = 10**17; // default 10% annual interest\n    \n\n    uint public totalSupply;\n    uint public maxTotalSupply;\n    uint public totalInitialSupply;\n    uint public AirdropReward;\n    uint public AirRewardmaxTotalSupply;\n    uint public AirRewardTotalSupply;\n        \n\n    struct transferInStruct{\n    uint128 amount;\n    uint64 time;\n    }\n    \n    \n    mapping (address => bool) isAirdropAddress;\n    mapping(address => uint256) balances;\n    mapping(address => mapping (address => uint256)) allowed;\n    mapping(address => transferInStruct[]) transferIns;\n    \n\n    event Burn(address indexed burner, uint256 value);\n    \n\n    /**\n     * @dev Fix for the ERC20 short address attack.\n     */\n    modifier onlyPayloadSize(uint size) {\n        require(msg.data.length >= size + 4);\n        _;\n    }\n\n    modifier canPoSMint() {\n        require(totalSupply < maxTotalSupply);\n        _;\n    }\n\n\n    modifier canGetAirdrop() {\n        require(AirRewardTotalSupply < AirRewardmaxTotalSupply);\n        _;\n    }\n    \n    function EthereumUnlimited() {\n        maxTotalSupply = 100000000000000 * 1 ether; // unlimited.\n        totalInitialSupply = 10000000 * 1 ether; // 1 Mil.\n        AirdropReward = 10 * 1 ether;\n        AirRewardmaxTotalSupply = 10000 * 1 ether;\n        AirRewardTotalSupply = 0;\n        \n        chainStartTime = now;\n        chainStartBlockNumber = block.number;\n\n        balances[msg.sender] = totalInitialSupply;\n        totalSupply = totalInitialSupply;\n    }\n\n    \n    \n    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) returns (bool) {\n        if(msg.sender == _to) return mint();\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        if(transferIns[msg.sender].length > 0) delete transferIns[msg.sender];\n        uint64 _now = uint64(now);\n        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),_now));\n        transferIns[_to].push(transferInStruct(uint128(_value),_now));\n        return true;\n    }\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) returns (bool) {\n        require(_to != address(0));\n\n        var _allowance = allowed[_from][msg.sender];\n\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n        // require (_value <= _allowance);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = _allowance.sub(_value);\n        Transfer(_from, _to, _value);\n        if(transferIns[_from].length > 0) delete transferIns[_from];\n        uint64 _now = uint64(now);\n        transferIns[_from].push(transferInStruct(uint128(balances[_from]),_now));\n        transferIns[_to].push(transferInStruct(uint128(_value),_now));\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) returns (bool) {\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    function mint() canPoSMint returns (bool) {\n        if(balances[msg.sender] <= 0) return false;\n        if(transferIns[msg.sender].length <= 0) return false;\n\n        uint reward = getProofOfStakeReward(msg.sender);\n        if(reward <= 0) return false;\n\n        totalSupply = totalSupply.add(reward);\n        balances[msg.sender] = balances[msg.sender].add(reward);\n        delete transferIns[msg.sender];\n        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),uint64(now)));\n\n        Mint(msg.sender, reward);\n        return true;\n    }\n    \n    function getAirdrop() canGetAirdrop returns (bool) {\n        if (isAirdropAddress[msg.sender]) revert();\n        if (AirdropReward < 10000)\tAirdropReward = 10000;\n        isAirdropAddress[msg.sender] = true;\n        balances[msg.sender] += AirdropReward;\n\t    AirRewardTotalSupply += AirdropReward;\n\t    Transfer(this, msg.sender, AirdropReward);\n\t    delete transferIns[msg.sender];\n        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),uint64(now)));\n\n\t    AirdropMined(msg.sender, AirdropReward);\n\t    AirdropReward -=10000;\n\t    return true;\n    }\n\n    function getBlockNumber() returns (uint blockNumber) {\n        blockNumber = block.number.sub(chainStartBlockNumber);\n    }\n\n    function coinAge() constant returns (uint myCoinAge) {\n        myCoinAge = getCoinAge(msg.sender,now);\n    }\n    \n    function checkPos() constant returns (uint reward) {\n        \n        reward = getProofOfStakeReward(msg.sender);\n        \n    }\n    \n    \n\n    function annualInterest() constant returns(uint interest) {\n        uint _now = now;\n        interest = maxMintProofOfStake;\n        interest = (4000 * maxMintProofOfStake).div(100);\n    }\n\n    function getProofOfStakeReward(address _address) internal returns (uint) {\n        require( (now >= stakeStartTime) && (stakeStartTime > 0) );\n\n        uint _now = now;\n        uint _coinAge = getCoinAge(_address, _now);\n        if(_coinAge <= 0) return 0;\n\n        uint interest = maxMintProofOfStake;\n        //Aannual interest rate is 400%.\n        interest = (4000 * maxMintProofOfStake).div(100);\n        \n        return (_coinAge * interest).div(365 * (10**decimals));\n    }\n\n    function getCoinAge(address _address, uint _now) internal returns (uint _coinAge) {\n        if(transferIns[_address].length <= 0) return 0;\n\n        for (uint i = 0; i < transferIns[_address].length; i++){\n            if( _now < uint(transferIns[_address][i].time).add(stakeMinAge) ) continue;\n\n            uint nCoinSeconds = _now.sub(uint(transferIns[_address][i].time));\n            if( nCoinSeconds > stakeMaxAge ) nCoinSeconds = stakeMaxAge;\n\n            _coinAge = _coinAge.add(uint(transferIns[_address][i].amount) * nCoinSeconds.div(1 days));\n        }\n    }\n\n    function ownerSetStakeStartTime(uint timestamp) onlyOwner {\n        require((stakeStartTime <= 0) && (timestamp >= chainStartTime));\n        stakeStartTime = timestamp;\n    }\n    \n    function ResetAirdrop(uint _value) onlyOwner {\n        AirRewardTotalSupply=_value;\n    }\n\n    function ownerBurnToken(uint _value) onlyOwner {\n        require(_value > 0);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        delete transferIns[msg.sender];\n        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),uint64(now)));\n\n        totalSupply = totalSupply.sub(_value);\n        totalInitialSupply = totalInitialSupply.sub(_value);\n        maxTotalSupply = maxTotalSupply.sub(_value*10);\n\n        Burn(msg.sender, _value);\n    }\n\n    /* Batch token transfer. Used by contract creator to distribute initial tokens to holders */\n    function batchTransfer(address[] _recipients, uint[] _values) onlyOwner returns (bool) {\n        require( _recipients.length > 0 && _recipients.length == _values.length);\n\n        uint total = 0;\n        for(uint i = 0; i < _values.length; i++){\n            total = total.add(_values[i]);\n        }\n        require(total <= balances[msg.sender]);\n\n        uint64 _now = uint64(now);\n        for(uint j = 0; j < _recipients.length; j++){\n            balances[_recipients[j]] = balances[_recipients[j]].add(_values[j]);\n            transferIns[_recipients[j]].push(transferInStruct(uint128(_values[j]),_now));\n            Transfer(msg.sender, _recipients[j], _values[j]);\n        }\n\n        balances[msg.sender] = balances[msg.sender].sub(total);\n        if(transferIns[msg.sender].length > 0) delete transferIns[msg.sender];\n        if(balances[msg.sender] > 0) transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),_now));\n\n        return true;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinAge\",\"outputs\":[{\"name\":\"myCoinAge\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ownerSetStakeStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chainStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AirdropReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ownerBurnToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInitialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AirRewardmaxTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"annualInterest\",\"outputs\":[{\"name\":\"interest\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ResetAirdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeMinAge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chainStartBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getAirdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkPos\",\"outputs\":[{\"name\":\"reward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AirRewardTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeMaxAge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxMintProofOfStake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AirdropMined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "606060405260408051908101604052601281527f457468657265756d20556e6c696d697465640000000000000000000000000000602082015260059080516200004d92916020019062000147565b5060408051908101604052600481527f4554485500000000000000000000000000000000000000000000000000000000602082015260069080516200009792916020019062000147565b50601260075562015180600b556301e13380600c5567016345785d8a0000600d553415620000c457600080fd5b60048054600160a060020a03191633600160a060020a03169081179091556d04ee2d6d415b85acef8100000000600f556a084595161401484a0000006010819055678ac7230489e8000060115569021e19e0c9bab240000060125560006013819055426008554360095591825260156020526040909120819055600e55620001ec565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200018a57805160ff1916838001178555620001ba565b82800160010185558215620001ba579182015b82811115620001ba5782518255916020019190600101906200019d565b50620001c8929150620001cc565b5090565b620001e991905b80821115620001c85760008155600101620001d3565b90565b611b6480620001fc6000396000f3006060604052600436106101955763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461019a578063095ea7b3146102245780631249c58b1461025a57806318160ddd1461026d5780631e1b13c01461029257806323b872dd146102a55780632a9edf6f146102cd5780632ab4d052146102e5578063313ce567146102f857806342cbb15c1461030b5780635b054f9b1461031e57806370a08231146103315780637419f190146103505780638278fcea1461036357806388d695b2146103765780638da5cb5b1461040557806390762a8b1461043457806395d89b411461044a5780639fd4da401461045d578063a901aaa014610470578063a9059cbb14610483578063b2552fc4146104a5578063b51aae5a146104b8578063cbd8877e146104ce578063cd474b04146104e1578063d25f82a0146104f4578063d6d4136a14610507578063dd62ed3e1461051a578063e18fe7091461053f578063e1c3bac614610552578063f2bb5ce114610565578063f2fde38b14610578575b600080fd5b34156101a557600080fd5b6101ad610597565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101e95780820151838201526020016101d1565b50505050905090810190601f1680156102165780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561022f57600080fd5b610246600160a060020a0360043516602435610635565b604051901515815260200160405180910390f35b341561026557600080fd5b6102466106db565b341561027857600080fd5b6102806108d4565b60405190815260200160405180910390f35b341561029d57600080fd5b6102806108da565b34156102b057600080fd5b610246600160a060020a03600435811690602435166044356108eb565b34156102d857600080fd5b6102e3600435610bce565b005b34156102f057600080fd5b610280610c0e565b341561030357600080fd5b610280610c14565b341561031657600080fd5b610280610c1a565b341561032957600080fd5b610280610c31565b341561033c57600080fd5b610280600160a060020a0360043516610c37565b341561035b57600080fd5b610280610c52565b341561036e57600080fd5b610280610c58565b341561038157600080fd5b610246600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284378201915050505050509190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843750949650610c5e95505050505050565b341561041057600080fd5b610418611062565b604051600160a060020a03909116815260200160405180910390f35b341561043f57600080fd5b6102e3600435611071565b341561045557600080fd5b6101ad61123c565b341561046857600080fd5b6102806112a7565b341561047b57600080fd5b6102806112ad565b341561048e57600080fd5b610246600160a060020a03600435166024356112b3565b34156104b057600080fd5b610280611555565b34156104c357600080fd5b6102e3600435611574565b34156104d957600080fd5b610280611594565b34156104ec57600080fd5b61028061159a565b34156104ff57600080fd5b6102466115a0565b341561051257600080fd5b610280611791565b341561052557600080fd5b610280600160a060020a036004358116906024351661179c565b341561054a57600080fd5b6102806117c7565b341561055d57600080fd5b6102806117cd565b341561057057600080fd5b6102806117d3565b341561058357600080fd5b6102e3600160a060020a03600435166117d9565b60058054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561062d5780601f106106025761010080835404028352916020019161062d565b820191906000526020600020905b81548152906001019060200180831161061057829003601f168201915b505050505081565b60008115806106675750600160a060020a03338116600090815260166020908152604080832093871683529290522054155b151561067257600080fd5b600160a060020a03338116600081815260166020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b600080600f54600e541015156106f057600080fd5b600160a060020a0333166000908152601560205260408120541161071757600091506108d0565b600160a060020a0333166000908152601760205260408120541161073e57600091506108d0565b61074733611838565b90506000811161075a57600091506108d0565b600e5461076d908263ffffffff6118c116565b600e55600160a060020a033316600090815260156020526040902054610799908263ffffffff6118c116565b600160a060020a033316600090815260156020908152604080832093909355601790529081206107c891611a79565b600160a060020a03331660009081526017602052604090208054600181016107f08382611a9a565b91600052602060002090016000604080519081016040908152600160a060020a033316600090815260156020908152919020546001608060020a0316825267ffffffffffffffff421690820152919050815181546001608060020a0319166001608060020a03919091161781556020820151815467ffffffffffffffff91909116608060020a02600080516020611af98339815191529091161790555050600160a060020a0333167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968858260405190815260200160405180910390a2600191505b5090565b600e5481565b60006108e633426118d7565b905090565b60008080606060643610156108ff57600080fd5b600160a060020a038616151561091457600080fd5b600160a060020a0380881660008181526016602090815260408083203390951683529381528382205492825260159052919091205490935061095c908663ffffffff611a5016565b600160a060020a038089166000908152601560205260408082209390935590881681522054610991908663ffffffff6118c116565b600160a060020a0387166000908152601560205260409020556109ba838663ffffffff611a5016565b600160a060020a0380891660008181526016602090815260408083203386168452909152908190209390935590881691600080516020611b198339815191529088905190815260200160405180910390a3600160a060020a0387166000908152601760205260408120541115610a4b57600160a060020a0387166000908152601760205260408120610a4b91611a79565b600160a060020a0387166000908152601760205260409020805442935060018101610a768382611a9a565b91600052602060002090016000604080519081016040908152600160a060020a038c16600090815260156020908152919020546001608060020a0316825267ffffffffffffffff871690820152919050815181546001608060020a0319166001608060020a03919091161781556020820151815467ffffffffffffffff91909116608060020a02600080516020611af98339815191529091161790555050600160a060020a0386166000908152601760205260409020805460018101610b3c8382611a9a565b91600052602060002090016000604080519081016040526001608060020a038916815267ffffffffffffffff86166020820152919050815181546001608060020a0319166001608060020a03919091161781556020820151815467ffffffffffffffff91909116608060020a02600080516020611af98339815191529091161790555060019450505050509392505050565b60045433600160a060020a03908116911614610be957600080fd5b6000600a5411158015610bfe57506008548110155b1515610c0957600080fd5b600a55565b600f5481565b60075481565b60006108e660095443611a5090919063ffffffff16565b60085481565b600160a060020a031660009081526015602052604090205490565b600a5481565b60115481565b600454600090819081908190819033600160a060020a03908116911614610c8457600080fd5b60008751118015610c96575085518751145b1515610ca157600080fd5b60009350600092505b8551831015610ce657610cd9868481518110610cc257fe5b90602001906020020151859063ffffffff6118c116565b9350600190920191610caa565b600160a060020a033316600090815260156020526040902054841115610d0b57600080fd5b5042905060005b8651811015610ef857610d74868281518110610d2a57fe5b90602001906020020151601560008a8581518110610d4457fe5b90602001906020020151600160a060020a031681526020810191909152604001600020549063ffffffff6118c116565b60156000898481518110610d8457fe5b90602001906020020151600160a060020a0316600160a060020a031681526020019081526020016000208190555060176000888381518110610dc257fe5b90602001906020020151600160a060020a031681526020810191909152604001600020805460018101610df58382611a9a565b9160005260206000209001600060408051908101604052808a8681518110610e1957fe5b906020019060200201516001608060020a0316815267ffffffffffffffff8716602090910152919050815181546001608060020a0319166001608060020a03919091161781556020820151815467ffffffffffffffff91909116608060020a02600080516020611af9833981519152909116179055508790508181518110610e9d57fe5b90602001906020020151600160a060020a031633600160a060020a0316600080516020611b19833981519152888481518110610ed557fe5b9060200190602002015160405190815260200160405180910390a3600101610d12565b600160a060020a033316600090815260156020526040902054610f21908563ffffffff611a5016565b600160a060020a03331660009081526015602090815260408083209390935560179052908120541115610f6f57600160a060020a0333166000908152601760205260408120610f6f91611a79565b600160a060020a033316600090815260156020526040812054111561105557600160a060020a0333166000908152601760205260409020805460018101610fb68382611a9a565b91600052602060002090016000604080519081016040908152600160a060020a033316600090815260156020908152919020546001608060020a0316825267ffffffffffffffff871690820152919050815181546001608060020a0319166001608060020a03919091161781556020820151815467ffffffffffffffff91909116608060020a02600080516020611af983398151915290911617905550505b5060019695505050505050565b600454600160a060020a031681565b60045433600160a060020a0390811691161461108c57600080fd5b6000811161109957600080fd5b600160a060020a0333166000908152601560205260409020546110c2908263ffffffff611a5016565b600160a060020a033316600090815260156020908152604080832093909355601790529081206110f191611a79565b600160a060020a03331660009081526017602052604090208054600181016111198382611a9a565b91600052602060002090016000604080519081016040908152600160a060020a033316600090815260156020908152919020546001608060020a0316825267ffffffffffffffff421690820152919050815181546001608060020a0319166001608060020a03919091161781556020820151815467ffffffffffffffff91909116608060020a02600080516020611af98339815191529091161790555050600e546111ca908263ffffffff611a5016565b600e556010546111e0908263ffffffff611a5016565b601055600f546111f990600a830263ffffffff611a5016565b600f55600160a060020a0333167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58260405190815260200160405180910390a250565b60068054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561062d5780601f106106025761010080835404028352916020019161062d565b60105481565b60125481565b600080604060443610156112c657600080fd5b84600160a060020a031633600160a060020a031614156112ef576112e86106db565b925061154d565b600160a060020a033316600090815260156020526040902054611318908563ffffffff611a5016565b600160a060020a03338116600090815260156020526040808220939093559087168152205461134d908563ffffffff6118c116565b600160a060020a038087166000818152601560205260409081902093909355913390911690600080516020611b198339815191529087905190815260200160405180910390a3600160a060020a03331660009081526017602052604081205411156113d357600160a060020a03331660009081526017602052604081206113d391611a79565b600160a060020a03331660009081526017602052604090208054429350600181016113fe8382611a9a565b91600052602060002090016000604080519081016040908152600160a060020a033316600090815260156020908152919020546001608060020a0316825267ffffffffffffffff871690820152919050815181546001608060020a0319166001608060020a03919091161781556020820151815467ffffffffffffffff91909116608060020a02600080516020611af98339815191529091161790555050600160a060020a03851660009081526017602052604090208054600181016114c48382611a9a565b91600052602060002090016000604080519081016040526001608060020a038816815267ffffffffffffffff86166020820152919050815181546001608060020a0319166001608060020a03919091161781556020820151815467ffffffffffffffff91909116608060020a02600080516020611af98339815191529091161790555060019350505b505092915050565b600d544261156e610fa08302606463ffffffff611a6216565b91505090565b60045433600160a060020a0390811691161461158f57600080fd5b601355565b600b5481565b60095481565b60006012546013541015156115b457600080fd5b600160a060020a03331660009081526014602052604090205460ff16156115da57600080fd5b61271060115410156115ed576127106011555b600160a060020a033381166000818152601460209081526040808320805460ff19166001179055601180546015909352928190208054909201909155905460138054820190559192301691600080516020611b19833981519152915190815260200160405180910390a3600160a060020a033316600090815260176020526040812061167891611a79565b600160a060020a03331660009081526017602052604090208054600181016116a08382611a9a565b91600052602060002090016000604080519081016040908152600160a060020a033316600090815260156020908152919020546001608060020a0316825267ffffffffffffffff421690820152919050815181546001608060020a0319166001608060020a03919091161781556020820151815467ffffffffffffffff91909116608060020a02600080516020611af98339815191529091161790555050601154600160a060020a033316907f9fd6d285da814a024445113b1c0389f4e3c00fdf389ddda868318fb2d00de5379060405190815260200160405180910390a2506011805461270f1901905560015b90565b60006108e633611838565b600160a060020a03918216600090815260166020908152604080832093909416825291909152205490565b60135481565b600c5481565b600d5481565b60045433600160a060020a039081169116146117f457600080fd5b600160a060020a038116151561180957600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600080600080600a54421015801561185257506000600a54115b151561185d57600080fd5b42925061186a85846118d7565b91506000821161187d57600093506118b9565b50600d54611896610fa08202606463ffffffff611a6216565b90506118b6600754600a0a61016d02828402611a6290919063ffffffff16565b93505b505050919050565b6000828201838110156118d057fe5b9392505050565b600160a060020a03821660009081526017602052604081205481908190819011611904576000925061154d565b600091505b600160a060020a03851660009081526017602052604090205482101561154d57600b54600160a060020a038616600090815260176020526040902080546119799291908590811061195657fe5b600091825260209091200154608060020a900467ffffffffffffffff16906118c1565b84101561198557611a45565b600160a060020a038516600090815260176020526040902080546119d29190849081106119ae57fe5b6000918252602090912001548590608060020a900467ffffffffffffffff16611a50565b9050600c548111156119e35750600c545b611a426119f9826201518063ffffffff611a6216565b600160a060020a0387166000908152601760205260409020805485908110611a1d57fe5b60009182526020909120015485916001608060020a039091160263ffffffff6118c116565b92505b600190910190611909565b600082821115611a5c57fe5b50900390565b6000808284811515611a7057fe5b04949350505050565b5080546000825590600052602060002090810190611a979190611ac3565b50565b815481835581811511611abe57600083815260209020611abe918101908301611ac3565b505050565b61178e91905b808211156108d057805477ffffffffffffffffffffffffffffffffffffffffffffffff19168155600101611ac95600ffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffffddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058208c5841cf4a3219d9e03a4b5adec0ae64cff3397f666f2379cc3a8e8ed376c47a0029"
}