{
  "address": "0xbf45f4280cfbe7c2d2515a7d984b8c71c15e82b7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EnclavesDEXProxy",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-16\n*/\n\npragma solidity ^0.4.18;\n\n// File: contracts/EtherDeltaI.sol\n\ncontract EtherDeltaI {\n\n  uint public feeMake; //percentage times (1 ether)\n  uint public feeTake; //percentage times (1 ether)\n\n  mapping (address => mapping (address => uint)) public tokens; //mapping of token addresses to mapping of account balances (token=0 means Ether)\n  mapping (address => mapping (bytes32 => bool)) public orders; //mapping of user accounts to mapping of order hashes to booleans (true = submitted by user, equivalent to offchain signature)\n  mapping (address => mapping (bytes32 => uint)) public orderFills; //mapping of user accounts to mapping of order hashes to uints (amount of order that has been filled)\n\n  function deposit() payable;\n\n  function withdraw(uint amount);\n\n  function depositToken(address token, uint amount);\n\n  function withdrawToken(address token, uint amount);\n\n  function balanceOf(address token, address user) constant returns (uint);\n\n  function order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce);\n\n  function trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount);\n\n  function testTrade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount, address sender) constant returns(bool);\n\n  function availableVolume(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s) constant returns(uint);\n\n  function amountFilled(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s) constant returns(uint);\n\n  function cancelOrder(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, uint8 v, bytes32 r, bytes32 s);\n\n}\n\n// File: contracts/KindMath.sol\n\n/**\n * @title KindMath\n * @dev Math operations with safety checks that fail\n */\nlibrary KindMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    require(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n    return c;\n  }\n}\n\n// File: contracts/KeyValueStorage.sol\n\ncontract KeyValueStorage {\n\n  mapping(address => mapping(bytes32 => uint256)) _uintStorage;\n  mapping(address => mapping(bytes32 => address)) _addressStorage;\n  mapping(address => mapping(bytes32 => bool)) _boolStorage;\n  mapping(address => mapping(bytes32 => bytes32)) _bytes32Storage;\n\n  /**** Get Methods ***********/\n\n  function getAddress(bytes32 key) public view returns (address) {\n      return _addressStorage[msg.sender][key];\n  }\n\n  function getUint(bytes32 key) public view returns (uint) {\n      return _uintStorage[msg.sender][key];\n  }\n\n  function getBool(bytes32 key) public view returns (bool) {\n      return _boolStorage[msg.sender][key];\n  }\n\n  function getBytes32(bytes32 key) public view returns (bytes32) {\n      return _bytes32Storage[msg.sender][key];\n  }\n\n  /**** Set Methods ***********/\n\n  function setAddress(bytes32 key, address value) public {\n      _addressStorage[msg.sender][key] = value;\n  }\n\n  function setUint(bytes32 key, uint value) public {\n      _uintStorage[msg.sender][key] = value;\n  }\n\n  function setBool(bytes32 key, bool value) public {\n      _boolStorage[msg.sender][key] = value;\n  }\n\n  function setBytes32(bytes32 key, bytes32 value) public {\n      _bytes32Storage[msg.sender][key] = value;\n  }\n\n  /**** Delete Methods ***********/\n\n  function deleteAddress(bytes32 key) public {\n      delete _addressStorage[msg.sender][key];\n  }\n\n  function deleteUint(bytes32 key) public {\n      delete _uintStorage[msg.sender][key];\n  }\n\n  function deleteBool(bytes32 key) public {\n      delete _boolStorage[msg.sender][key];\n  }\n\n  function deleteBytes32(bytes32 key) public {\n      delete _bytes32Storage[msg.sender][key];\n  }\n\n}\n\n// File: contracts/StorageStateful.sol\n\ncontract StorageStateful {\n  KeyValueStorage public keyValueStorage;\n}\n\n// File: contracts/StorageConsumer.sol\n\ncontract StorageConsumer is StorageStateful {\n  function StorageConsumer(address _storageAddress) public {\n    require(_storageAddress != address(0));\n    keyValueStorage = KeyValueStorage(_storageAddress);\n  }\n}\n\n// File: contracts/TokenI.sol\n\ncontract Token {\n  /// @return total amount of tokens\n  function totalSupply() public returns (uint256);\n\n  /// @param _owner The address from which the balance will be retrieved\n  /// @return The balance\n  function balanceOf(address _owner) public returns (uint256);\n\n  /// @notice send `_value` token to `_to` from `msg.sender`\n  /// @param _to The address of the recipient\n  /// @param _value The amount of token to be transferred\n  /// @return Whether the transfer was successful or not\n  function transfer(address _to, uint256 _value) public returns (bool);\n\n  /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n  /// @param _from The address of the sender\n  /// @param _to The address of the recipient\n  /// @param _value The amount of token to be transferred\n  /// @return Whether the transfer was successful or not\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n\n  /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n  /// @param _spender The address of the account able to transfer the tokens\n  /// @param _value The amount of wei to be approved for transfer\n  /// @return Whether the approval was successful or not\n  function approve(address _spender, uint256 _value) public returns (bool);\n\n  /// @param _owner The address of the account owning tokens\n  /// @param _spender The address of the account able to transfer the tokens\n  /// @return Amount of remaining tokens allowed to spent\n  function allowance(address _owner, address _spender) public returns (uint256);\n\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n  uint256 public decimals;\n  string public name;\n}\n\n// File: contracts/EnclavesDEXProxy.sol\n\ncontract EnclavesDEXProxy is StorageConsumer {\n  using KindMath for uint256;\n\n  address public admin; //the admin address\n  address public feeAccount; //the account that will receive fees\n\n  struct EtherDeltaInfo {\n    uint256 feeMake;\n    uint256 feeTake;\n  }\n\n  EtherDeltaInfo public etherDeltaInfo;\n\n  uint256 public feeTake; //percentage times 1 ether\n  uint256 public feeAmountThreshold; //gasPrice amount under which no fees are charged\n\n  address public etherDelta;\n\n  bool public useEIP712 = true;\n  bytes32 public tradeABIHash;\n  bytes32 public withdrawABIHash;\n\n  bool freezeTrading;\n  bool depositTokenLock;\n\n  mapping (address => mapping (uint256 => bool)) nonceCheck;\n\n  mapping (address => mapping (address => uint256)) public tokens; //mapping of token addresses to mapping of account balances (token=0 means Ether)\n  mapping (address => mapping (bytes32 => bool)) public orders; //mapping of user accounts to mapping of order hashes to booleans (true = submitted by user, equivalent to offchain signature)\n  mapping (address => mapping (bytes32 => uint256)) public orderFills; //mapping of user accounts to mapping of order hashes to uints (amount of order that has been filled)\n\n  address internal implementation;\n  address public proposedImplementation;\n  uint256 public proposedTimestamp;\n\n  event Upgraded(address _implementation);\n  event UpgradedProposed(address _proposedImplementation, uint256 _proposedTimestamp);\n\n  modifier onlyAdmin {\n    require(msg.sender == admin);\n    _;\n  }\n\n  function EnclavesDEXProxy(address _storageAddress, address _implementation, address _admin, address _feeAccount, uint256 _feeTake, uint256 _feeAmountThreshold, address _etherDelta, bytes32 _tradeABIHash, bytes32 _withdrawABIHash) public\n    StorageConsumer(_storageAddress)\n  {\n    require(_implementation != address(0));\n    implementation = _implementation;\n    admin = _admin;\n    feeAccount = _feeAccount;\n    feeTake = _feeTake;\n    feeAmountThreshold = _feeAmountThreshold;\n    etherDelta = _etherDelta;\n    tradeABIHash = _tradeABIHash;\n    withdrawABIHash = _withdrawABIHash;\n    etherDeltaInfo.feeMake = EtherDeltaI(etherDelta).feeMake();\n    etherDeltaInfo.feeTake = EtherDeltaI(etherDelta).feeTake();\n  }\n\n  function getImplementation() public view returns(address) {\n    return implementation;\n  }\n\n  function proposeUpgrade(address _proposedImplementation) public onlyAdmin {\n    require(implementation != _proposedImplementation);\n    require(_proposedImplementation != address(0));\n    proposedImplementation = _proposedImplementation;\n    proposedTimestamp = now + 2 weeks;\n    UpgradedProposed(proposedImplementation, now);\n  }\n\n  function upgrade() public onlyAdmin {\n    require(proposedImplementation != address(0));\n    require(proposedTimestamp < now);\n    implementation = proposedImplementation;\n    Upgraded(implementation);\n  }\n\n  function () payable public {\n    bytes memory data = msg.data;\n    address impl = getImplementation();\n\n    assembly {\n      let result := delegatecall(gas, impl, add(data, 0x20), mload(data), 0, 0)\n      let size := returndatasize\n      let ptr := mload(0x40)\n      returndatacopy(ptr, 0, size)\n      switch result\n      case 0 { revert(ptr, size) }\n      default { return(ptr, size) }\n    }\n  }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orderFills\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherDeltaInfo\",\"outputs\":[{\"name\":\"feeMake\",\"type\":\"uint256\"},{\"name\":\"feeTake\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposedTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAmountThreshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"useEIP712\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"keyValueStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradeABIHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposedImplementation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orders\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeTake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposedImplementation\",\"type\":\"address\"}],\"name\":\"proposeUpgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherDelta\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawABIHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_storageAddress\",\"type\":\"address\"},{\"name\":\"_implementation\",\"type\":\"address\"},{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_feeAccount\",\"type\":\"address\"},{\"name\":\"_feeTake\",\"type\":\"uint256\"},{\"name\":\"_feeAmountThreshold\",\"type\":\"uint256\"},{\"name\":\"_etherDelta\",\"type\":\"address\"},{\"name\":\"_tradeABIHash\",\"type\":\"bytes32\"},{\"name\":\"_withdrawABIHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_proposedImplementation\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_proposedTimestamp\",\"type\":\"uint256\"}],\"name\":\"UpgradedProposed\",\"type\":\"event\"}]",
  "bytecode": "60606040526007805460a060020a60ff02191674010000000000000000000000000000000000000000179055341561003657600080fd5b6040516101208061081c8339810160405280805191906020018051919060200180519190602001805191906020018051919060200180519190602001805191906020018051919060200180519150899050600160a060020a038116151561009c57600080fd5b60008054600160a060020a031916600160a060020a03928316179055881615156100c557600080fd5b600f8054600160a060020a0319908116600160a060020a038b8116919091179092556001805482168a841617905560028054821689841617905560058790556006869055600780549091168583161790819055600884905560098390551663577863946040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151561016f57600080fd5b5af1151561017c57600080fd5b505050604051805160035550600754600160a060020a031663c281309e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156101e057600080fd5b5af115156101ed57600080fd5b50505060405180516004555050505050505050505061060b806102116000396000f3006060604052600436106100fb5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166319774d4381146101675780631bff47861461019b5780633cf52ffb146101c6578063508493bc146101d957806355ce76e6146101fe5780635bd948b1146102115780635d4d061e1461023857806365e17c9d146102675780638e1e2add1461027a578063aaf10f421461028d578063bb057c5e146102a0578063bb5f4629146102b3578063c281309e146102d5578063c915fc93146102e8578063d55ec69714610309578063d67a10e31461031c578063f851a4401461032f578063fe26f16f14610342575b6101036105cd565b600080368080601f01602080910402602001604051908101604052818152929190602084018383808284378201915050505050509150610141610355565b9050600080835160208501845af43d604051816000823e828015610163578282f35b8282fd5b341561017257600080fd5b610189600160a060020a0360043516602435610364565b60405190815260200160405180910390f35b34156101a657600080fd5b6101ae610381565b60405191825260208201526040908101905180910390f35b34156101d157600080fd5b61018961038a565b34156101e457600080fd5b610189600160a060020a0360043581169060243516610390565b341561020957600080fd5b6101896103ad565b341561021c57600080fd5b6102246103b3565b604051901515815260200160405180910390f35b341561024357600080fd5b61024b6103d4565b604051600160a060020a03909116815260200160405180910390f35b341561027257600080fd5b61024b6103e3565b341561028557600080fd5b6101896103f2565b341561029857600080fd5b61024b610355565b34156102ab57600080fd5b61024b6103f8565b34156102be57600080fd5b610224600160a060020a0360043516602435610407565b34156102e057600080fd5b610189610427565b34156102f357600080fd5b610307600160a060020a036004351661042d565b005b341561031457600080fd5b6103076104fa565b341561032757600080fd5b61024b6105a9565b341561033a57600080fd5b61024b6105b8565b341561034d57600080fd5b6101896105c7565b600f54600160a060020a031690565b600e60209081526000928352604080842090915290825290205481565b60035460045482565b60115481565b600c60209081526000928352604080842090915290825290205481565b60065481565b60075474010000000000000000000000000000000000000000900460ff1681565b600054600160a060020a031681565b600254600160a060020a031681565b60085481565b601054600160a060020a031681565b600d60209081526000928352604080842090915290825290205460ff1681565b60055481565b60015433600160a060020a0390811691161461044857600080fd5b600f54600160a060020a038281169116141561046357600080fd5b600160a060020a038116151561047857600080fd5b6010805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038381169190911791829055426212750081016011557fec67bbd1e1c0c74039cb44e4ee8278b388155a131c81387e07f800c16f776e839290911690604051600160a060020a03909216825260208201526040908101905180910390a150565b60015433600160a060020a0390811691161461051557600080fd5b601054600160a060020a0316151561052c57600080fd5b60115442901061053b57600080fd5b601054600f805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392831617908190557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b9116604051600160a060020a03909116815260200160405180910390a1565b600754600160a060020a031681565b600154600160a060020a031681565b60095481565b602060405190810160405260008152905600a165627a7a72305820748c3fd36452cba2982dabc925ed50191b752dc57a2492bded2e68ee07306ed20029000000000000000000000000129caf12c70fe9633fe24b15497adafc913c842c000000000000000000000000ed06d46ffb309128c4458a270c99c824dc127f5d000000000000000000000000e03793e63776cf69fe42414ed03bb924d4d9157e000000000000000000000000e03793e63776cf69fe42414ed03bb924d4d9157e00000000000000000000000000000000000000000000000000071afd498d0000000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000008d12a197cb00d4747a1fe03395095ce2a5cc681957d54158692b43b05f55462695c3dc04b0217afddfda3f27a07ec31ee46b9c20369521fb20e3cff93d515dad43dc9f9f23dfdbb8d0ca564c480634d401bf9aa1",
  "constructorArguments": "000000000000000000000000129caf12c70fe9633fe24b15497adafc913c842c000000000000000000000000ed06d46ffb309128c4458a270c99c824dc127f5d000000000000000000000000e03793e63776cf69fe42414ed03bb924d4d9157e000000000000000000000000e03793e63776cf69fe42414ed03bb924d4d9157e00000000000000000000000000000000000000000000000000071afd498d0000000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000008d12a197cb00d4747a1fe03395095ce2a5cc681957d54158692b43b05f55462695c3dc04b0217afddfda3f27a07ec31ee46b9c20369521fb20e3cff93d515dad43dc9f9f23dfdbb8d0ca564c480634d401bf9aa1"
}