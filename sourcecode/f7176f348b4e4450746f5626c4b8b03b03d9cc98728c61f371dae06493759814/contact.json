{
  "address": "0xb5c33f965c8899d255c34cdd2a3efa8abcbb3dea",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "KPRToken",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-23\n*/\n\npragma solidity ^0.4.11;\n\ncontract ERC20Basic\n{\n    uint256 public totalSupply;\n    function balanceOf(address who) public constant returns(uint256);\n    function transfer(address to,uint256 value) public returns(bool);\n    event Transfer(address indexedfrom,address indexedto,uint256 value);\n}\ncontract IERC20 is ERC20Basic\n{\n    function allowance(address owner,address spender) public constant returns(uint256);\n    function transferFrom(address from,address to,uint256 value) public returns(bool);\n    function approve(address spender,uint256 value) public returns(bool);\n    event Approval(address indexedowner,address indexedspender,uint256 value);\n}\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal constant returns (uint256){\n        uint256 c=a*b;\n        assert(a==0||c/a==b);\n        return c;\n    }\n    function div(uint256 a,uint256 b) internal constant returns(uint256)\n    {\n        //assert(b>0);//Solidityautomaticallythrowswhendividingby0\n        uint256 c=a/b;\n        //assert(a==b*c+a%b);//Thereisnocaseinwhichthisdoesn'thold\n        return c;\n    }\n    function sub(uint256 a,uint256 b) internal constant returns(uint256)\n    {\n        assert(b<=a);\n        return a-b;\n    }\n    function add(uint256 a,uint256 b) internal constant returns(uint256)\n    {\n        uint256 c=a+b;\n        assert(c>=a);\n        return c;\n    }\n}\n\ncontract KPRToken is IERC20 {\n    \n    using SafeMath for uint256;\n    \n\n    \n    //public variables\n    string public constant symbol=\"KPR\"; \n    string public constant name=\"KPR Coin\"; \n    uint8 public constant decimals=18;\n\n    //1 ETH = 2,500 KPR\n    uint56 public  RATE = 2500;\n\n    //totalsupplyoftoken \n    uint public totalSupply = 100000000 * 10 ** uint(decimals);\n    \n    uint public buyabletoken = 90000000 * 10 ** uint(decimals);\n    //where the ETH goes \n    address public owner;\n    \n    //map the addresses\n    mapping(address => uint256) balances;\n    mapping(address => mapping(address => uint256)) allowed;\n    // 1514764800 : Jan 1 2018\n    uint phase1starttime = 1517443200; // Phase 1 Start Date Feb 1 2018\n    uint phase1endtime = 1519257600;  // Phase 1 End Date Feb 22 2018\n    uint phase2starttime = 1519862400;  // Phase 2 Start Date March 1 2018\n    uint phase2endtime = 1521676800; // Phase 2 End Date March 22 2018\n    uint phase3starttime = 1522540800;  // Phase 3 Start Date May 1 2018\n    uint phase3endtime = 1524355200; // Phase 3 End Date May 22 2018\n    \n  \n    //create token function = check\n\n    function() payable {\n        buyTokens();\n    }\n\n    function KPRToken() {\n        owner = msg.sender;\n        balances[owner] = totalSupply;\n    }\n\n    function buyTokens() payable {\n        \n        require(msg.value > 0);\n        require(now > phase1starttime && now < phase3endtime);\n        uint256 tokens;\n    \n        if (now > phase1starttime && now < phase1endtime){\n            \n            RATE = 3000;\n            setPrice(msg.sender, msg.value);\n        } else if(now > phase2starttime && now < phase2endtime){\n            RATE = 2000;\n            setPrice(msg.sender, msg.value);\n            // tokens = msg.value.mul(RATE);\n            // require(tokens < buyabletoken);\n            // balances[msg.sender]=balances[msg.sender].add(tokens);\n            // balances[owner] = balances[owner].sub(tokens);\n            // buyabletoken = buyabletoken.sub(tokens);\n            // owner.transfer(msg.value);\n            \n        } else if(now > phase3starttime && now < phase3endtime){\n            \n            RATE = 1000;\n            setPrice(msg.sender, msg.value);\n        }\n    }\n    \n    function setPrice(address receipt, uint256 value){\n        uint256 tokens;\n        tokens = value.mul(RATE);\n        require(tokens < buyabletoken);\n        balances[receipt]=balances[receipt].add(tokens);\n        balances[owner] = balances[owner].sub(tokens);\n        buyabletoken = buyabletoken.sub(tokens);\n        owner.transfer(value);\n    }\n\n    function balanceOf(address _owner) constant returns(uint256 balance) {\n        \n        return balances[_owner];\n        \n    }\n\n    function transfer(address _to, uint256 _value) returns(bool success) {\n        \n        //require is the same as an if statement = checks \n        require(balances[msg.sender] >= _value && _value > 0 );\n        \n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        \n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        \n        //checking if the spender has permission to spend and how much \n        require( allowed[_from][msg.sender] >= _value && balances[_from] >= _value && _value > 0);\n        \n        //updating the spenders balance \n        balances[_from] = balances[_from].sub(_value); \n        balances[_to] = balances[_to].add(_value); \n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); \n        Transfer(_from, _to, _value); \n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) returns(bool success) {\n        \n        //if above require is true,approve the spending \n        allowed[msg.sender][_spender] = _value; \n        Approval(msg.sender, _spender, _value); \n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant returns(uint256 remaining) {\n        \n        return allowed[_owner][_spender];\n        \n    }\n    \n    event Transfer(address indexed_from, address indexed_to, uint256 _value);\n    event Approval(address indexed_owner, address indexed_spender, uint256 _value);\n    \n    \n}",
  "bytecode": "60606040526109c4600160006101000a81548166ffffffffffffff021916908366ffffffffffffff160217905550601260ff16600a0a6305f5e10002600255601260ff16600a0a63055d4a8002600355635a725880600755635a8e0800600855635a974280600955635ab2f200600a55635ac02100600b55635adbd080600c55341561008757fe5b5b33600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060025460056000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5b6111e0806101426000396000f300606060405236156100cd576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168062e4768b146100de57806306fdde031461011d578063095ea7b3146101b657806318160ddd1461020d57806323b872dd14610233578063313ce567146102a95780634f1d76ef146102d5578063664e9704146102fb57806370a08231146103335780638da5cb5b1461037d57806395d89b41146103cf578063a9059cbb14610468578063d0febe4c146104bf578063dd62ed3e146104c9575b6100dc5b6100d9610532565b5b565b005b34156100e657fe5b61011b600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610651565b005b341561012557fe5b61012d610888565b604051808060200182810382528381815181526020019150805190602001908083836000831461017c575b80518252602083111561017c57602082019150602081019050602083039250610158565b505050905090810190601f1680156101a85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101be57fe5b6101f3600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506108c2565b604051808215151515815260200191505060405180910390f35b341561021557fe5b61021d6109ef565b6040518082815260200191505060405180910390f35b341561023b57fe5b61028f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506109f5565b604051808215151515815260200191505060405180910390f35b34156102b157fe5b6102b9610dbe565b604051808260ff1660ff16815260200191505060405180910390f35b34156102dd57fe5b6102e5610dc3565b6040518082815260200191505060405180910390f35b341561030357fe5b61030b610dc9565b604051808266ffffffffffffff1666ffffffffffffff16815260200191505060405180910390f35b341561033b57fe5b610367600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610de2565b6040518082815260200191505060405180910390f35b341561038557fe5b61038d610e2c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156103d757fe5b6103df610e52565b604051808060200182810382528381815181526020019150805190602001908083836000831461042e575b80518252602083111561042e5760208201915060208101905060208303925061040a565b505050905090810190601f16801561045a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561047057fe5b6104a5600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610e8c565b604051808215151515815260200191505060405180910390f35b6104c7610532565b005b34156104d157fe5b61051c600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506110bd565b6040518082815260200191505060405180910390f35b60006000341115156105445760006000fd5b600754421180156105565750600c5442105b15156105625760006000fd5b60075442118015610574575060085442105b156105b157610bb8600160006101000a81548166ffffffffffffff021916908366ffffffffffffff1602179055506105ac3334610651565b61064d565b600954421180156105c35750600a5442105b15610600576107d0600160006101000a81548166ffffffffffffff021916908366ffffffffffffff1602179055506105fb3334610651565b61064c565b600b54421180156106125750600c5442105b1561064b576103e8600160006101000a81548166ffffffffffffff021916908366ffffffffffffff16021790555061064a3334610651565b5b5b5b5b50565b6000610684600160009054906101000a900466ffffffffffffff1666ffffffffffffff168361114590919063ffffffff16565b9050600354811015156106975760006000fd5b6106e981600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461117a90919063ffffffff16565b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506107a08160056000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461119a90919063ffffffff16565b60056000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061081a8160035461119a90919063ffffffff16565b600381905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051809050600060405180830381858888f19350505050151561088257fe5b5b505050565b604060405190810160405280600881526020017f4b505220436f696e00000000000000000000000000000000000000000000000081525081565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925338484604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a1600190505b92915050565b60025481565b600081600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610ac2575081600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015610ace5750600082115b1515610ada5760006000fd5b610b2c82600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461119a90919063ffffffff16565b600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610bc182600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461117a90919063ffffffff16565b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c9382600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461119a90919063ffffffff16565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef848484604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a1600190505b9392505050565b601281565b60035481565b600160009054906101000a900466ffffffffffffff1681565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b604060405190810160405280600381526020017f4b5052000000000000000000000000000000000000000000000000000000000081525081565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610edd5750600082115b1515610ee95760006000fd5b610f3b82600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461119a90919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610fd082600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461117a90919063ffffffff16565b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef338484604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a1600190505b92915050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b6000600082840290506000841480611167575082848281151561116457fe5b04145b151561116f57fe5b8091505b5092915050565b60006000828401905083811015151561118f57fe5b8091505b5092915050565b60008282111515156111a857fe5b81830390505b929150505600a165627a7a72305820ecf452ded4460f303a38e2502c7902d74d842dd0bf8e41aff8224288a79fa1840029"
}