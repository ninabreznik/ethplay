{
  "address": "0x3214cef10e5c194ca547735863fe755fc4cbb78e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "DIPChain Token",
  "contractName": "MainToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-28\n*/\n\npragma solidity >=0.4.22<0.6.0;\n\n//filename: contracts/Consts.sol\ncontract Consts {\n    string constant TOKEN_NAME = \"DIPChainToken\";\n    string constant TOKEN_SYMBOL = \"DIPC\";\n    uint8 constant TOKEN_DECIMALS = 18;\n    uint256 constant TOKEN_AMOUNT = 500000000;\n}\n\n//filename: contracts/utils/Ownable.sol\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipRenounced(address indexed previousOwner);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipRenounced(owner);\n        owner = address(0);\n    }\n}\n\n//filename: contracts/tokens/ERC20Basic.sol\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n//filename: contracts/utils/SafeMath.sol\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    /**\n      * @dev Multiplies two numbers, throws on overflow.\n      */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n//filename: contracts/tokens/BasicToken.sol\n/**\n * @title Basic tokens\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n\n    uint256 totalSupply_;\n\n    /**\n    * @dev total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    /**\n    * @dev transfer tokens for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n\n}\n\n//filename: contracts/tokens/ERC20.sol\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n//filename: contracts/tokens/StandardToken.sol\n/**\n * @title Standard ERC20 tokens\n *\n * @dev Implementation of the basic standard tokens.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n}\n\n//filename: contracts/tokens/TransferableToken.sol\n/**\n * @title TransferableToken\n */\ncontract TransferableToken is StandardToken, Ownable {\n    bool public isLock;\n\n    mapping (address => bool) public transferableAddresses;\n\n    constructor() public {\n        isLock = true;\n        transferableAddresses[msg.sender] = true;\n    }\n\n    event Unlock();\n    event TransferableAddressAdded(address indexed addr);\n    event TransferableAddressRemoved(address indexed addr);\n\n    function unlock() public onlyOwner {\n        isLock = false;\n        emit Unlock();\n    }\n\n    function isTransferable(address addr) public view returns(bool) {\n        return !isLock || transferableAddresses[addr];\n    }\n\n    function addTransferableAddresses(address[] memory addrs) public onlyOwner returns(bool success) {\n        for (uint256 i = 0; i < addrs.length; i++) {\n            if (addTransferableAddress(addrs[i])) {\n                success = true;\n            }\n        }\n    }\n\n    function addTransferableAddress(address addr) public onlyOwner returns(bool success) {\n        if (!transferableAddresses[addr]) {\n            transferableAddresses[addr] = true;\n            emit TransferableAddressAdded(addr);\n            success = true;\n        }\n    }\n\n    function removeTransferableAddresses(address[] memory addrs) public onlyOwner returns(bool success) {\n        for (uint256 i = 0; i < addrs.length; i++) {\n            if (removeTransferableAddress(addrs[i])) {\n                success = true;\n            }\n        }\n    }\n\n    function removeTransferableAddress(address addr) public onlyOwner returns(bool success) {\n        if (transferableAddresses[addr]) {\n            transferableAddresses[addr] = false;\n            emit TransferableAddressRemoved(addr);\n            success = true;\n        }\n    }\n\n    /**\n    */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(isTransferable(_from));\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    /**\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(isTransferable(msg.sender));\n        return super.transfer(_to, _value);\n    }\n}\n\n//filename: contracts/utils/Pausable.sol\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to makeWhitelist a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() onlyOwner whenNotPaused public {\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() onlyOwner whenPaused public {\n        paused = false;\n        emit Unpause();\n    }\n}\n\n//filename: contracts/tokens/PausableToken.sol\n/**\n * @title Pausable tokens\n * @dev StandardToken modified with pausable transfers.\n **/\ncontract PausableToken is StandardToken, Pausable {\n\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n        return super.approve(_spender, _value);\n    }\n\n    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n        return super.increaseApproval(_spender, _addedValue);\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n        return super.decreaseApproval(_spender, _subtractedValue);\n    }\n}\n\n//filename: contracts/tokens/BurnableToken.sol\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken, Pausable {\n\n    event Burn(address indexed burner, uint256 value);\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of tokens to be burned.\n     */\n    function burn(uint256 _value) whenNotPaused public {\n        _burn(msg.sender, _value);\n    }\n\n    function _burn(address _who, uint256 _value) internal {\n        require(_value <= balances[_who]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        balances[_who] = balances[_who].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n        emit Burn(_who, _value);\n        emit Transfer(_who, address(0), _value);\n    }\n\n\n}\n\ncontract MintIssueTotalSupply is BasicToken, Pausable {\n    function mintIssueTotalSupply(uint _value) whenNotPaused public {\n        _mintIssueTotalSupply(msg.sender, _value);\n    }\n\n    function _mintIssueTotalSupply(address _owner, uint256 _value) internal onlyOwner {\n        balances[_owner] = totalSupply_.add(_value);\n        totalSupply_ = totalSupply_.add(_value);\n//        emit Transfer(_owner, _owner, _value);\n    }\n}\n\n//filename: contracts/MainToken.sol\n/**\n * @title MainToken\n */\ncontract MainToken is Consts\n\n    , TransferableToken\n    , PausableToken\n\n    , BurnableToken\n    ,MintIssueTotalSupply\n    {\n    string public constant name = TOKEN_NAME; // solium-disable-line uppercase\n    string public constant symbol = TOKEN_SYMBOL; // solium-disable-line uppercase\n    uint8 public constant decimals = TOKEN_DECIMALS; // solium-disable-line uppercase\n\n    uint256 public constant INITIAL_SUPPLY = TOKEN_AMOUNT * (10 ** uint256(decimals));\n\n    constructor() public {\n        totalSupply_ = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n        emit Transfer(address(0), msg.sender, INITIAL_SUPPLY);\n    }\n}",
  "bytecode": "60806040526005805460ff1916905534801561001a57600080fd5b50600380547401000000000000000000000000000000000000000033600160a060020a0319909216821760a060020a60ff021916179091556000818152600460209081526040808320805460ff191660019081179091556b019d971e4fe8401e7400000090819055838352818420819055815190815290517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3611224806100cc6000396000f3006080604052600436106101695763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461016e578063095ea7b3146101f857806309d8da2e1461023057806318160ddd14610245578063195055f11461026c57806323b872dd1461028d5780632ff2e9dc146102b75780633050226a146102cc578063313ce56714610321578063336fa72c1461034c5780633f4ba83a1461036d57806342966c68146103845780635c975abb1461039c578063618c5772146103b1578063661884631461040657806370a082311461042a578063715018a61461044b5780638456cb59146104605780638da5cb5b1461047557806395d89b41146104a6578063a3f925dd146104bb578063a69df4b5146104dc578063a9059cbb146104f1578063ad80514114610515578063d73dd6231461052d578063dd62ed3e14610551578063e0bc6dea14610578578063f2fde38b14610599575b600080fd5b34801561017a57600080fd5b506101836105ba565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101bd5781810151838201526020016101a5565b50505050905090810190601f1680156101ea5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020457600080fd5b5061021c600160a060020a03600435166024356105f1565b604080519115158252519081900360200190f35b34801561023c57600080fd5b5061021c610615565b34801561025157600080fd5b5061025a610636565b60408051918252519081900360200190f35b34801561027857600080fd5b5061021c600160a060020a036004351661063c565b34801561029957600080fd5b5061021c600160a060020a0360043581169060243516604435610689565b3480156102c357600080fd5b5061025a6106af565b3480156102d857600080fd5b506040805160206004803580820135838102808601850190965280855261021c953695939460249493850192918291850190849080828437509497506106bf9650505050505050565b34801561032d57600080fd5b50610336610720565b6040805160ff9092168252519081900360200190f35b34801561035857600080fd5b5061021c600160a060020a0360043516610725565b34801561037957600080fd5b506103826107b2565b005b34801561039057600080fd5b5061038260043561080f565b3480156103a857600080fd5b5061021c61082c565b3480156103bd57600080fd5b506040805160206004803580820135838102808601850190965280855261021c953695939460249493850192918291850190849080828437509497506108359650505050505050565b34801561041257600080fd5b5061021c600160a060020a0360043516602435610890565b34801561043657600080fd5b5061025a600160a060020a03600435166108ad565b34801561045757600080fd5b506103826108c8565b34801561046c57600080fd5b50610382610936565b34801561048157600080fd5b5061048a610995565b60408051600160a060020a039092168252519081900360200190f35b3480156104b257600080fd5b506101836109a4565b3480156104c757600080fd5b5061021c600160a060020a03600435166109db565b3480156104e857600080fd5b506103826109f0565b3480156104fd57600080fd5b5061021c600160a060020a0360043516602435610a50565b34801561052157600080fd5b50610382600435610a6d565b34801561053957600080fd5b5061021c600160a060020a0360043516602435610a87565b34801561055d57600080fd5b5061025a600160a060020a0360043581169060243516610aa4565b34801561058457600080fd5b5061021c600160a060020a0360043516610acf565b3480156105a557600080fd5b50610382600160a060020a0360043516610b58565b60408051808201909152600d81527f444950436861696e546f6b656e00000000000000000000000000000000000000602082015281565b60055460009060ff161561060457600080fd5b61060e8383610bed565b9392505050565b60035474010000000000000000000000000000000000000000900460ff1681565b60015490565b60035460009074010000000000000000000000000000000000000000900460ff1615806106815750600160a060020a03821660009081526004602052604090205460ff165b90505b919050565b60055460009060ff161561069c57600080fd5b6106a7848484610c53565b949350505050565b6b019d971e4fe8401e7400000081565b6003546000908190600160a060020a031633146106db57600080fd5b5060005b825181101561071a5761070883828151811015156106f957fe5b90602001906020020151610725565b1561071257600191505b6001016106df565b50919050565b601281565b600354600090600160a060020a0316331461073f57600080fd5b600160a060020a03821660009081526004602052604090205460ff16151561068457600160a060020a038216600081815260046020526040808220805460ff19166001179055517f6cc2741c133acd5b0cd839bd8def1cfbca405ccefad1795737e6cd6fe259b2969190a2506001919050565b600354600160a060020a031633146107c957600080fd5b60055460ff1615156107da57600080fd5b6005805460ff191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b60055460ff161561081f57600080fd5b6108293382610c74565b50565b60055460ff1681565b6003546000908190600160a060020a0316331461085157600080fd5b5060005b825181101561071a5761087e838281518110151561086f57fe5b90602001906020020151610acf565b1561088857600191505b600101610855565b60055460009060ff16156108a357600080fd5b61060e8383610d75565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a031633146108df57600080fd5b600354604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26003805473ffffffffffffffffffffffffffffffffffffffff19169055565b600354600160a060020a0316331461094d57600080fd5b60055460ff161561095d57600080fd5b6005805460ff191660011790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600354600160a060020a031681565b60408051808201909152600481527f4449504300000000000000000000000000000000000000000000000000000000602082015281565b60046020526000908152604090205460ff1681565b600354600160a060020a03163314610a0757600080fd5b6003805474ff0000000000000000000000000000000000000000191690556040517f70e3fffea7bbb557facdee48ed7f7af5179030adef9ad0c876df039a718f359e90600090a1565b60055460009060ff1615610a6357600080fd5b61060e8383610e65565b60055460ff1615610a7d57600080fd5b6108293382610e85565b60055460009060ff1615610a9a57600080fd5b61060e8383610ee2565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600090600160a060020a03163314610ae957600080fd5b600160a060020a03821660009081526004602052604090205460ff161561068457600160a060020a038216600081815260046020526040808220805460ff19169055517f3967ce7f96e7105370df1a03896bff141625d05b31282a8d9f6f54278a1e0cbf9190a2506001919050565b600354600160a060020a03163314610b6f57600080fd5b600160a060020a0381161515610b8457600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b6000610c5e8461063c565b1515610c6957600080fd5b6106a7848484610f7b565b600160a060020a038216600090815260208190526040902054811115610c9957600080fd5b600160a060020a038216600090815260208190526040902054610cc2908263ffffffff6110f216565b600160a060020a038316600090815260208190526040902055600154610cee908263ffffffff6110f216565b600155604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b336000908152600260209081526040808320600160a060020a038616845290915281205480831115610dca57336000908152600260209081526040808320600160a060020a0388168452909152812055610dff565b610dda818463ffffffff6110f216565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b6000610e703361063c565b1515610e7b57600080fd5b61060e8383611104565b600354600160a060020a03163314610e9c57600080fd5b600154610eaf908263ffffffff6111e516565b600160a060020a038316600090815260208190526040902055600154610edb908263ffffffff6111e516565b6001555050565b336000908152600260209081526040808320600160a060020a0386168452909152812054610f16908363ffffffff6111e516565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b6000600160a060020a0383161515610f9257600080fd5b600160a060020a038416600090815260208190526040902054821115610fb757600080fd5b600160a060020a0384166000908152600260209081526040808320338452909152902054821115610fe757600080fd5b600160a060020a038416600090815260208190526040902054611010908363ffffffff6110f216565b600160a060020a038086166000908152602081905260408082209390935590851681522054611045908363ffffffff6111e516565b600160a060020a03808516600090815260208181526040808320949094559187168152600282528281203382529091522054611087908363ffffffff6110f216565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b6000828211156110fe57fe5b50900390565b6000600160a060020a038316151561111b57600080fd5b3360009081526020819052604090205482111561113757600080fd5b33600090815260208190526040902054611157908363ffffffff6110f216565b3360009081526020819052604080822092909255600160a060020a03851681522054611189908363ffffffff6111e516565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b818101828110156111f257fe5b929150505600a165627a7a72305820587283885d1a2754008e1af4208b39231326ca3299ba6cc785654d8d76e630c00029"
}