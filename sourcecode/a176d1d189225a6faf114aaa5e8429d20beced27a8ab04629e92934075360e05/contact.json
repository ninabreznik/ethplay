{
  "address": "0x92736b3bff1bbd72a72478d78f18a6ab9b68b791",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SatisfactionToken",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-15\n*/\n\npragma solidity ^0.4.23;\n\nlibrary Math {\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract CanReclaimToken is Ownable {\n  using SafeERC20 for ERC20Basic;\n\n  /**\n   * @dev Reclaim all ERC20Basic compatible tokens\n   * @param token ERC20Basic The address of the token contract\n   */\n  function reclaimToken(ERC20Basic token) external onlyOwner {\n    uint256 balance = token.balanceOf(this);\n    token.safeTransfer(owner, balance);\n  }\n\n}\n\ncontract HasNoContracts is Ownable {\n\n  /**\n   * @dev Reclaim ownership of Ownable contracts\n   * @param contractAddr The address of the Ownable to be reclaimed.\n   */\n  function reclaimContract(address contractAddr) external onlyOwner {\n    Ownable contractInst = Ownable(contractAddr);\n    contractInst.transferOwnership(owner);\n  }\n}\n\ncontract HasNoEther is Ownable {\n\n  /**\n  * @dev Constructor that rejects incoming Ether\n  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n  * we could use assembly to access msg.value.\n  */\n  function HasNoEther() public payable {\n    require(msg.value == 0);\n  }\n\n  /**\n   * @dev Disallows direct send by settings a default function without the `payable` flag.\n   */\n  function() external {\n  }\n\n  /**\n   * @dev Transfer all Ether held by the contract to the owner.\n   */\n  function reclaimEther() external onlyOwner {\n    // solium-disable-next-line security/no-send\n    assert(owner.send(address(this).balance));\n  }\n}\n\ncontract HasNoTokens is CanReclaimToken {\n\n /**\n  * @dev Reject all ERC223 compatible tokens\n  * @param from_ address The address that is transferring the tokens\n  * @param value_ uint256 the amount of the specified token\n  * @param data_ Bytes The data passed from the caller.\n  */\n  function tokenFallback(address from_, uint256 value_, bytes data_) external {\n    from_;\n    value_;\n    data_;\n    revert();\n  }\n\n}\n\ncontract NoOwner is HasNoEther, HasNoTokens, HasNoContracts {\n}\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeERC20 {\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    assert(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(\n    ERC20 token,\n    address from,\n    address to,\n    uint256 value\n  )\n    internal\n  {\n    assert(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    assert(token.approve(spender, value));\n  }\n}\n\ncontract CheckpointStorage {\n\n  /**\n   * @dev `Checkpoint` is the structure that attaches a block number to a\n   * @dev given value, the block number attached is the one that last changed the\n   * @dev value\n   */\n  struct Checkpoint {\n    // `fromBlock` is the block number that the value was generated from\n    uint128 fromBlock;\n\n    // `value` is the amount of tokens at a specific block number\n    uint128 value;\n  }\n\n  // Tracks the history of the `totalSupply` of the token\n  Checkpoint[] public totalSupplyHistory;\n\n  /**\n   * @dev `getValueAt` retrieves the number of tokens at a given block number\n   *\n   * @param checkpoints The history of values being queried\n   * @param _block The block number to retrieve the value at\n   * @return The number of tokens being queried\n   */\n  function getValueAt(Checkpoint[] storage checkpoints, uint _block) internal view returns (uint) {\n    if (checkpoints.length == 0)\n      return 0;\n\n    // Shortcut for the actual value\n    if (_block >= checkpoints[checkpoints.length - 1].fromBlock)\n      return checkpoints[checkpoints.length - 1].value;\n    if (_block < checkpoints[0].fromBlock)\n      return 0;\n\n    // Binary search of the value in the array\n    uint min = 0;\n    uint max = checkpoints.length - 1;\n    while (max > min) {\n      uint mid = (max + min + 1) / 2;\n      if (checkpoints[mid].fromBlock <= _block) {\n        min = mid;\n      } else {\n        max = mid - 1;\n      }\n    }\n    return checkpoints[min].value;\n  }\n\n  /**\n   * @dev `updateValueAtNow` used to update the `balances` map and the\n   * @dev `totalSupplyHistory`\n   *\n   * @param checkpoints The history of data being updated\n   * @param _value The new number of tokens\n   */\n  function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal {\n    if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {\n      Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\n      newCheckPoint.fromBlock = uint128(block.number);\n      newCheckPoint.value = uint128(_value);\n    } else {\n      Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length - 1];\n      oldCheckPoint.value = uint128(_value);\n    }\n  }\n}\n\ncontract SatisfactionToken is ERC20, CheckpointStorage, NoOwner {\n\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n  event Burn(address indexed burner, uint256 value);\n\n  using SafeMath for uint256;\n\n  string public name = \"Satisfaction Token\";\n  uint8 public decimals = 18;\n  string public symbol = \"SAT\";\n  string public version;\n\n  /**\n   * `parentToken` is the Token address that was cloned to produce this token;\n   *  it will be 0x0 for a token that was not cloned\n   */\n  SatisfactionToken public parentToken;\n\n  /**\n   * `parentSnapShotBlock` is the block number from the Parent Token that was\n   *  used to determine the initial distribution of the Clone Token\n   */\n  uint256 public parentSnapShotBlock;\n\n  // `creationBlock` is the block number that the Clone Token was created\n  uint256 public creationBlock;\n\n  /**\n   * `balances` is the map that tracks the balance of each address, in this\n   *  contract when the balance changes the block number that the change\n   *  occurred is also included in the map\n   */\n  mapping(address => Checkpoint[]) internal balances;\n\n  // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n  mapping(address => mapping(address => uint256)) internal allowed;\n\n  // Flag that determines if the token is transferable or not.\n  bool public transfersEnabled;\n\n  bool public mintingFinished = false;\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  constructor(\n    address _parentToken,\n    uint256 _parentSnapShotBlock,\n    string _tokenVersion,\n    bool _transfersEnabled) public\n  {\n    version = _tokenVersion;\n    parentToken = SatisfactionToken(_parentToken);\n    parentSnapShotBlock = _parentSnapShotBlock;\n    transfersEnabled = _transfersEnabled;\n    creationBlock = block.number;\n  }\n\n  /**\n   * @dev Transfer token for a specified address\n   *\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(transfersEnabled);\n    require(parentSnapShotBlock < block.number);\n    require(_to != address(0));\n\n    uint256 lastBalance = balanceOfAt(msg.sender, block.number);\n    require(_value <= lastBalance);\n\n    return doTransfer(msg.sender, _to, _value, lastBalance);\n  }\n\n  /**\n   * @dev Addition to ERC20 token methods. Transfer tokens to a specified\n   * @dev address and execute a call with the sent data on the same transaction\n   *\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   * @param _data ABI-encoded contract call to call `_to` address.\n   *\n   * @return true if the call function was executed successfully\n   */\n  function transferAndCall(address _to, uint256 _value, bytes _data) public payable returns (bool) {\n    require(_to != address(this));\n\n    transfer(_to, _value);\n\n    // solium-disable-next-line security/no-call-value\n    require(_to.call.value(msg.value)(_data));\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   *\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(transfersEnabled);\n    require(parentSnapShotBlock < block.number);\n    require(_to != address(0));\n    require(_value <= allowed[_from][msg.sender]);\n\n    uint256 lastBalance = balanceOfAt(_from, block.number);\n    require(_value <= lastBalance);\n\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n    return doTransfer(_from, _to, _value, lastBalance);\n  }\n\n  /**\n   * @dev Addition to ERC20 token methods. Transfer tokens from one address to\n   * @dev another and make a contract call on the same transaction\n   *\n   * @param _from The address which you want to send tokens from\n   * @param _to The address which you want to transfer to\n   * @param _value The amout of tokens to be transferred\n   * @param _data ABI-encoded contract call to call `_to` address.\n   *\n   * @return true if the call function was executed successfully\n   */\n  function transferFromAndCall(\n    address _from,\n    address _to,\n    uint256 _value,\n    bytes _data\n  )\n    public payable returns (bool)\n  {\n    require(_to != address(this));\n\n    transferFrom(_from, _to, _value);\n\n    // solium-disable-next-line security/no-call-value\n    require(_to.call.value(msg.value)(_data));\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   *\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * @dev approve should be called when allowed[_spender] == 0. To increment\n   * @dev allowed value is better to use this function to avoid 2 calls (and wait until\n   * [email protected] he first transaction is mined)\n   * @dev From MonolithDAO Token.sol\n   *\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Addition to StandardToken methods. Increase the amount of tokens that\n   * @dev an owner allowed to a spender and execute a call with the sent data.\n   *\n   * @dev approve should be called when allowed[_spender] == 0. To increment\n   * @dev allowed value is better to use this function to avoid 2 calls (and wait until\n   * @dev the first transaction is mined)\n   * @dev From MonolithDAO Token.sol\n   *\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   * @param _data ABI-encoded contract call to call `_spender` address.\n   */\n  function increaseApprovalAndCall(address _spender, uint _addedValue, bytes _data) public payable returns (bool) {\n    require(_spender != address(this));\n\n    increaseApproval(_spender, _addedValue);\n\n    // solium-disable-next-line security/no-call-value\n    require(_spender.call.value(msg.value)(_data));\n\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * @dev approve should be called when allowed[_spender] == 0. To decrement\n   * @dev allowed value is better to use this function to avoid 2 calls (and wait until\n   * @dev the first transaction is mined)\n   * @dev From MonolithDAO Token.sol\n   *\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Addition to StandardToken methods. Decrease the amount of tokens that\n   * @dev an owner allowed to a spender and execute a call with the sent data.\n   *\n   * @dev approve should be called when allowed[_spender] == 0. To decrement\n   * @dev allowed value is better to use this function to avoid 2 calls (and wait until\n   * @dev the first transaction is mined)\n   * @dev From MonolithDAO Token.sol\n   *\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   * @param _data ABI-encoded contract call to call `_spender` address.\n   */\n  function decreaseApprovalAndCall(address _spender, uint _subtractedValue, bytes _data) public payable returns (bool) {\n    require(_spender != address(this));\n\n    decreaseApproval(_spender, _subtractedValue);\n\n    // solium-disable-next-line security/no-call-value\n    require(_spender.call.value(msg.value)(_data));\n\n    return true;\n  }\n\n  /**\n   * @param _owner The address that's balance is being requested\n   * @return The balance of `_owner` at the current block\n   */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balanceOfAt(_owner, block.number);\n  }\n\n  /**\n   * @dev Queries the balance of `_owner` at a specific `_blockNumber`\n   *\n   * @param _owner The address from which the balance will be retrieved\n   * @param _blockNumber The block number when the balance is queried\n   * @return The balance at `_blockNumber`\n   */\n  function balanceOfAt(address _owner, uint256 _blockNumber) public view returns (uint256) {\n    // These next few lines are used when the balance of the token is\n    //  requested before a check point was ever created for this token, it\n    //  requires that the `parentToken.balanceOfAt` be queried at the\n    //  genesis block for that token as this contains initial balance of\n    //  this token\n    if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\n      if (address(parentToken) != address(0)) {\n        return parentToken.balanceOfAt(_owner, Math.min256(_blockNumber, parentSnapShotBlock));\n      } else {\n        // Has no parent\n        return 0;\n      }\n    // This will return the expected balance during normal situations\n    } else {\n      return getValueAt(balances[_owner], _blockNumber);\n    }\n  }\n\n  /**\n   * @dev This function makes it easy to get the total number of tokens\n   *\n   * @return The total number of tokens\n   */\n  function totalSupply() public view returns (uint256) {\n    return totalSupplyAt(block.number);\n  }\n\n  /**\n   * @dev Total amount of tokens at a specific `_blockNumber`.\n   *\n   * @param _blockNumber The block number when the totalSupply is queried\n   * @return The total amount of tokens at `_blockNumber`\n   */\n  function totalSupplyAt(uint256 _blockNumber) public view returns(uint256) {\n\n    // These next few lines are used when the totalSupply of the token is\n    //  requested before a check point was ever created for this token, it\n    //  requires that the `parentToken.totalSupplyAt` be queried at the\n    //  genesis block for this token as that contains totalSupply of this\n    //  token at this block number.\n    if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n      if (address(parentToken) != 0) {\n        return parentToken.totalSupplyAt(Math.min256(_blockNumber, parentSnapShotBlock));\n      } else {\n        return 0;\n      }\n    // This will return the expected totalSupply during normal situations\n    } else {\n      return getValueAt(totalSupplyHistory, _blockNumber);\n    }\n  }\n\n  /**\n   * @dev Function to mint tokens\n   *\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\n    uint256 curTotalSupply = totalSupply();\n    uint256 lastBalance = balanceOf(_to);\n\n    updateValueAtNow(totalSupplyHistory, curTotalSupply.add(_amount));\n    updateValueAtNow(balances[_to], lastBalance.add(_amount));\n\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   *\n   * @return True if the operation was successful.\n   */\n  function finishMinting() public onlyOwner canMint returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   *\n   * @param _value uint256 The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    uint256 lastBalance = balanceOf(msg.sender);\n    require(_value <= lastBalance);\n\n    address burner = msg.sender;\n    uint256 curTotalSupply = totalSupply();\n\n    updateValueAtNow(totalSupplyHistory, curTotalSupply.sub(_value));\n    updateValueAtNow(balances[burner], lastBalance.sub(_value));\n\n    emit Burn(burner, _value);\n  }\n\n  /**\n   * @dev Burns a specific amount of tokens from an address\n   *\n   * @param _from address The address which you want to send tokens from\n   * @param _value uint256 The amount of token to be burned.\n   */\n  function burnFrom(address _from, uint256 _value) public {\n    require(_value <= allowed[_from][msg.sender]);\n\n    uint256 lastBalance = balanceOfAt(_from, block.number);\n    require(_value <= lastBalance);\n\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n    address burner = _from;\n    uint256 curTotalSupply = totalSupply();\n\n    updateValueAtNow(totalSupplyHistory, curTotalSupply.sub(_value));\n    updateValueAtNow(balances[burner], lastBalance.sub(_value));\n\n    emit Burn(burner, _value);\n  }\n\n  /**\n   * @dev Enables token holders to transfer their tokens freely if true\n   *\n   * @param _transfersEnabled True if transfers are allowed in the clone\n   */\n  function enableTransfers(bool _transfersEnabled) public onlyOwner canMint {\n    transfersEnabled = _transfersEnabled;\n  }\n\n  /**\n   * @dev This is the actual transfer function in the token contract, it can\n   * @dev only be called by other functions in this contract.\n   *\n   * @param _from The address holding the tokens being transferred\n   * @param _to The address of the recipient\n   * @param _value The amount of tokens to be transferred\n   * @param _lastBalance The last balance of from\n   * @return True if the transfer was successful\n   */\n  function doTransfer(address _from, address _to, uint256 _value, uint256 _lastBalance) internal returns (bool) {\n    if (_value == 0) {\n      return true;\n    }\n\n    updateValueAtNow(balances[_from], _lastBalance.sub(_value));\n\n    uint256 previousBalance = balanceOfAt(_to, block.number);\n    updateValueAtNow(balances[_to], previousBalance.add(_value));\n\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddr\",\"type\":\"address\"}],\"name\":\"reclaimContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalSupplyHistory\",\"outputs\":[{\"name\":\"fromBlock\",\"type\":\"uint128\"},{\"name\":\"value\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parentToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"increaseApprovalAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transfersEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from_\",\"type\":\"address\"},{\"name\":\"value_\",\"type\":\"uint256\"},{\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parentSnapShotBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"decreaseApprovalAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transfersEnabled\",\"type\":\"bool\"}],\"name\":\"enableTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_parentToken\",\"type\":\"address\"},{\"name\":\"_parentSnapShotBlock\",\"type\":\"uint256\"},{\"name\":\"_tokenVersion\",\"type\":\"string\"},{\"name\":\"_transfersEnabled\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005302e302e31000000000000000000000000000000000000000000000000000000"
}