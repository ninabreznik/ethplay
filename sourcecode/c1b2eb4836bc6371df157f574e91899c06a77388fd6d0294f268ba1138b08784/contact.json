{
  "address": "0x6f32f5818188b24a8a6ae7d2f7093b6ba0ddba0f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RewardJetToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-26\n*/\n\npragma solidity ^0.4.24;\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() internal {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\n\n/**\n * @title ERC20Detailed token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract ERC20Detailed is IERC20 {\n  string private _name;\n  string private _symbol;\n  uint8 private _decimals;\n\n  constructor(string name, string symbol, uint8 decimals) public {\n    _name = name;\n    _symbol = symbol;\n    _decimals = decimals;\n  }\n\n  /**\n   * @return the name of the token.\n   */\n  function name() public view returns(string) {\n    return _name;\n  }\n\n  /**\n   * @return the symbol of the token.\n   */\n  function symbol() public view returns(string) {\n    return _symbol;\n  }\n\n  /**\n   * @return the number of decimals of the token.\n   */\n  function decimals() public view returns(uint8) {\n    return _decimals;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract ERC20 is IERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n\n  mapping (address => mapping (address => uint256)) private _allowed;\n\n  uint256 private _totalSupply;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param owner The address to query the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function transfer(address to, uint256 value) public returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    require(value <= _allowed[from][msg.sender]);\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    _transfer(from, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n  * @dev Transfer token for a specified addresses\n  * @param from The address to transfer from.\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function _transfer(address from, address to, uint256 value) internal {\n    require(value <= _balances[from]);\n    require(to != address(0));\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n\n  /**\n   * @dev Internal function that mints an amount of the token and assigns it to\n   * an account. This encapsulates the modification of balances such that the\n   * proper events are emitted.\n   * @param account The account that will receive the created tokens.\n   * @param value The amount that will be created.\n   */\n  function _mint(address account, uint256 value) internal {\n    require(account != 0);\n    _totalSupply = _totalSupply.add(value);\n    _balances[account] = _balances[account].add(value);\n    emit Transfer(address(0), account, value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burn(address account, uint256 value) internal {\n    require(account != 0);\n    require(value <= _balances[account]);\n\n    _totalSupply = _totalSupply.sub(value);\n    _balances[account] = _balances[account].sub(value);\n    emit Transfer(account, address(0), value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account, deducting from the sender's allowance for said account. Uses the\n   * internal burn function.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burnFrom(address account, uint256 value) internal {\n    require(value <= _allowed[account][msg.sender]);\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n      value);\n    _burn(account, value);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/access/Roles.sol\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an account access to this role\n   */\n  function add(Role storage role, address account) internal {\n    require(account != address(0));\n    require(!has(role, account));\n\n    role.bearer[account] = true;\n  }\n\n  /**\n   * @dev remove an account's access to this role\n   */\n  function remove(Role storage role, address account) internal {\n    require(account != address(0));\n    require(has(role, account));\n\n    role.bearer[account] = false;\n  }\n\n  /**\n   * @dev check if an account has this role\n   * @return bool\n   */\n  function has(Role storage role, address account)\n    internal\n    view\n    returns (bool)\n  {\n    require(account != address(0));\n    return role.bearer[account];\n  }\n}\n\n// File: openzeppelin-solidity/contracts/access/roles/PauserRole.sol\n\ncontract PauserRole {\n  using Roles for Roles.Role;\n\n  event PauserAdded(address indexed account);\n  event PauserRemoved(address indexed account);\n\n  Roles.Role private pausers;\n\n  constructor() internal {\n    _addPauser(msg.sender);\n  }\n\n  modifier onlyPauser() {\n    require(isPauser(msg.sender));\n    _;\n  }\n\n  function isPauser(address account) public view returns (bool) {\n    return pausers.has(account);\n  }\n\n  function addPauser(address account) public onlyPauser {\n    _addPauser(account);\n  }\n\n  function renouncePauser() public {\n    _removePauser(msg.sender);\n  }\n\n  function _addPauser(address account) internal {\n    pausers.add(account);\n    emit PauserAdded(account);\n  }\n\n  function _removePauser(address account) internal {\n    pausers.remove(account);\n    emit PauserRemoved(account);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n  event Paused(address account);\n  event Unpaused(address account);\n\n  bool private _paused;\n\n  constructor() internal {\n    _paused = false;\n  }\n\n  /**\n   * @return true if the contract is paused, false otherwise.\n   */\n  function paused() public view returns(bool) {\n    return _paused;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!_paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(_paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyPauser whenNotPaused {\n    _paused = true;\n    emit Paused(msg.sender);\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyPauser whenPaused {\n    _paused = false;\n    emit Unpaused(msg.sender);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Pausable.sol\n\n/**\n * @title Pausable token\n * @dev ERC20 modified with pausable transfers.\n **/\ncontract ERC20Pausable is ERC20, Pausable {\n\n  function transfer(\n    address to,\n    uint256 value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transfer(to, value);\n  }\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transferFrom(from, to, value);\n  }\n\n  function approve(\n    address spender,\n    uint256 value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.approve(spender, value);\n  }\n\n  function increaseAllowance(\n    address spender,\n    uint addedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.increaseAllowance(spender, addedValue);\n  }\n\n  function decreaseAllowance(\n    address spender,\n    uint subtractedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.decreaseAllowance(spender, subtractedValue);\n  }\n}\n\n// File: contracts/RewardJetToken.sol\n\ncontract RewardJetToken is ERC20Pausable, ERC20Detailed, Ownable {\n\n    uint8 public constant DECIMALS = 18;\n\n    uint256 public constant INITIAL_SUPPLY = 10E9 * (10 ** uint256(DECIMALS));\n\n    /* Address where fees will be transferred */\n    address public feeChargingAddress;\n\n    function setFeeChargingAddress(address _feeChargingAddress) external onlyOwner {\n        feeChargingAddress = _feeChargingAddress;\n        emit FeeChargingAddressChanges(_feeChargingAddress);\n    }\n\n    /* Fee charging address changed */\n    event FeeChargingAddressChanges(address newFeeChargingAddress);\n\n    /**\n     * @dev Constructor that gives msg.sender all of existing tokens.\n     */\n    constructor() public ERC20Detailed(\"RewardJet\", \"RDJ\", DECIMALS) {\n        _mint(owner(), INITIAL_SUPPLY);\n    }\n\n    function transferWithSignature(\n        address from,\n        address to,\n        uint256 amount,\n        uint256 feeAmount,\n        uint256 expiration,\n        uint8 v,\n        bytes32 r,\n        bytes32 s) public {\n        require(expiration >= now, \"Signature expired\");\n        require(feeChargingAddress != 0x0, \"Fee charging address must be set\");\n\n        address receivedSigner = ecrecover(\n            keccak256(\n                abi.encodePacked(\n                    from, to, amount, feeAmount, expiration\n                )\n            ), v, r, s);\n\n        require(receivedSigner == from, \"Something wrong with signature\");\n        _transfer(from, to, amount);\n        _transfer(from, feeChargingAddress, feeAmount);\n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes _data) public payable returns (bool success) {\n        require(_spender != address(this));\n        require(super.approve(_spender, _value));\n        require(_spender.call(_data));\n        return true;\n    }\n\n    function() payable external {\n        revert();\n    }\n}",
  "bytecode": "60806040523480156200001157600080fd5b506040805190810160405280600981526020017f5265776172644a657400000000000000000000000000000000000000000000008152506040805190810160405280600381526020017f52444a000000000000000000000000000000000000000000000000000000000081525060126200009a336200016f640100000000026401000000009004565b6004805460ff191690558251620000b990600590602086019062000342565b508151620000cf90600690602085019062000342565b506007805460ff191660ff929092169190911761010060a860020a0319166101003381029190911791829055604051600160a060020a0391909204169250600091507f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3620001696200014d640100000000620001c1810204565b6b204fce5e3e25026110000000640100000000620001d6810204565b620003e4565b6200018a600382640100000000620011ff6200029582021704565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b6007546101009004600160a060020a03165b90565b600160a060020a0382161515620001ec57600080fd5b600254620002099082640100000000620011a1620002f082021704565b600255600160a060020a0382166000908152602081905260409020546200023f9082640100000000620011a1620002f082021704565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600160a060020a0381161515620002ab57600080fd5b620002c082826401000000006200030a810204565b15620002cb57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6000828201838110156200030357600080fd5b9392505050565b6000600160a060020a03821615156200032257600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200038557805160ff1916838001178555620003b5565b82800160010185558215620003b5579182015b82811115620003b557825182559160200191906001019062000398565b50620003c3929150620003c7565b5090565b620001d391905b80821115620003c35760008155600101620003ce565b61127980620003f46000396000f30060806040526004361061015e5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610163578063095ea7b3146101ed57806318160ddd1461022557806323b872dd1461024c5780632e0f2625146102765780632ff2e9dc146102a1578063313ce567146102b657806339509351146102cb5780633f4ba83a146102ef57806346fbf68e146103065780635c975abb146103275780636ef8d66d1461033c57806370a0823114610351578063715018a61461037257806382dc1ec4146103875780638456cb59146103a85780638da5cb5b146103bd5780638f32d59b146103ee57806393c9a0e21461040357806395d89b4114610418578063a457c2d71461042d578063a9059cbb14610451578063cae9ca5114610475578063dd62ed3e146104d1578063e69e850c146104f8578063f2fde38b14610534578063f92e377b14610555575b600080fd5b34801561016f57600080fd5b50610178610576565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101b257818101518382015260200161019a565b50505050905090810190601f1680156101df5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101f957600080fd5b50610211600160a060020a036004351660243561060c565b604080519115158252519081900360200190f35b34801561023157600080fd5b5061023a610630565b60408051918252519081900360200190f35b34801561025857600080fd5b50610211600160a060020a0360043581169060243516604435610636565b34801561028257600080fd5b5061028b61065c565b6040805160ff9092168252519081900360200190f35b3480156102ad57600080fd5b5061023a610661565b3480156102c257600080fd5b5061028b610671565b3480156102d757600080fd5b50610211600160a060020a036004351660243561067a565b3480156102fb57600080fd5b50610304610697565b005b34801561031257600080fd5b50610211600160a060020a03600435166106fb565b34801561033357600080fd5b50610211610714565b34801561034857600080fd5b5061030461071d565b34801561035d57600080fd5b5061023a600160a060020a0360043516610728565b34801561037e57600080fd5b50610304610743565b34801561039357600080fd5b50610304600160a060020a03600435166107b3565b3480156103b457600080fd5b506103046107d3565b3480156103c957600080fd5b506103d2610839565b60408051600160a060020a039092168252519081900360200190f35b3480156103fa57600080fd5b5061021161084d565b34801561040f57600080fd5b506103d2610863565b34801561042457600080fd5b50610178610872565b34801561043957600080fd5b50610211600160a060020a03600435166024356108d3565b34801561045d57600080fd5b50610211600160a060020a03600435166024356108f0565b604080516020600460443581810135601f8101849004840285018401909552848452610211948235600160a060020a031694602480359536959460649492019190819084018382808284375094975061090d9650505050505050565b3480156104dd57600080fd5b5061023a600160a060020a03600435811690602435166109c6565b34801561050457600080fd5b50610304600160a060020a036004358116906024351660443560643560843560ff60a4351660c43560e4356109f1565b34801561054057600080fd5b50610304600160a060020a0360043516610c96565b34801561056157600080fd5b50610304600160a060020a0360043516610cb2565b60058054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106025780601f106105d757610100808354040283529160200191610602565b820191906000526020600020905b8154815290600101906020018083116105e557829003601f168201915b5050505050905090565b60045460009060ff161561061f57600080fd5b6106298383610d26565b9392505050565b60025490565b60045460009060ff161561064957600080fd5b610654848484610da4565b949350505050565b601281565b6b204fce5e3e2502611000000081565b60075460ff1690565b60045460009060ff161561068d57600080fd5b6106298383610e37565b6106a0336106fb565b15156106ab57600080fd5b60045460ff1615156106bc57600080fd5b6004805460ff191690556040805133815290517f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9181900360200190a1565b600061070e60038363ffffffff610ee716565b92915050565b60045460ff1690565b61072633610f1e565b565b600160a060020a031660009081526020819052604090205490565b61074b61084d565b151561075657600080fd5b6007546040516000916101009004600160a060020a0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36007805474ffffffffffffffffffffffffffffffffffffffff0019169055565b6107bc336106fb565b15156107c757600080fd5b6107d081610f66565b50565b6107dc336106fb565b15156107e757600080fd5b60045460ff16156107f757600080fd5b6004805460ff191660011790556040805133815290517f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589181900360200190a1565b6007546101009004600160a060020a031690565b6007546101009004600160a060020a0316331490565b600854600160a060020a031681565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106025780601f106105d757610100808354040283529160200191610602565b60045460009060ff16156108e657600080fd5b6106298383610fae565b60045460009060ff161561090357600080fd5b6106298383610ff9565b6000600160a060020a03841630141561092557600080fd5b61092f848461060c565b151561093a57600080fd5b83600160a060020a03168260405180828051906020019080838360005b8381101561096f578181015183820152602001610957565b50505050905090810190601f16801561099c5780820380516001836020036101000a031916815260200191505b509150506000604051808303816000865af191505015156109bc57600080fd5b5060019392505050565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b600042851015610a6257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5369676e61747572652065787069726564000000000000000000000000000000604482015290519081900360640190fd5b600854600160a060020a03161515610adb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f466565206368617267696e672061646472657373206d75737420626520736574604482015290519081900360640190fd5b60408051600160a060020a038b81166c01000000000000000000000000908102602080850191909152918c16026034830152604882018a90526068820189905260888083018990528351808403909101815260a8909201928390528151600193918291908401908083835b60208310610b655780518252601f199092019160209182019101610b46565b51815160209384036101000a60001901801990921691161790526040805192909401829003822060008084528383018087529190915260ff8c1683860152606083018b9052608083018a9052935160a08084019750919550601f1981019492819003909101925090865af1158015610be1573d6000803e3d6000fd5b5050604051601f190151915050600160a060020a03808216908a1614610c6857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f536f6d657468696e672077726f6e672077697468207369676e61747572650000604482015290519081900360640190fd5b610c7389898961100f565b600854610c8b908a90600160a060020a03168861100f565b505050505050505050565b610c9e61084d565b1515610ca957600080fd5b6107d081611101565b610cba61084d565b1515610cc557600080fd5b60088054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff19909116811790915560408051918252517f557ceafd48ac1d69b230ff9218003c56d77319b70488a1568f4f62de67a1a35e9181900360200190a150565b6000600160a060020a0383161515610d3d57600080fd5b336000818152600160209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b600160a060020a0383166000908152600160209081526040808320338452909152812054821115610dd457600080fd5b600160a060020a0384166000908152600160209081526040808320338452909152902054610e08908363ffffffff61118a16565b600160a060020a03851660009081526001602090815260408083203384529091529020556109bc84848461100f565b6000600160a060020a0383161515610e4e57600080fd5b336000908152600160209081526040808320600160a060020a0387168452909152902054610e82908363ffffffff6111a116565b336000818152600160209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b6000600160a060020a0382161515610efe57600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b610f2f60038263ffffffff6111b316565b604051600160a060020a038216907fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90600090a250565b610f7760038263ffffffff6111ff16565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b6000600160a060020a0383161515610fc557600080fd5b336000908152600160209081526040808320600160a060020a0387168452909152902054610e82908363ffffffff61118a16565b600061100633848461100f565b50600192915050565b600160a060020a03831660009081526020819052604090205481111561103457600080fd5b600160a060020a038216151561104957600080fd5b600160a060020a038316600090815260208190526040902054611072908263ffffffff61118a16565b600160a060020a0380851660009081526020819052604080822093909355908416815220546110a7908263ffffffff6111a116565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600160a060020a038116151561111657600080fd5b600754604051600160a060020a0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360078054600160a060020a039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b6000808383111561119a57600080fd5b5050900390565b60008282018381101561062957600080fd5b600160a060020a03811615156111c857600080fd5b6111d28282610ee7565b15156111dd57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19169055565b600160a060020a038116151561121457600080fd5b61121e8282610ee7565b1561122857600080fd5b600160a060020a0316600090815260209190915260409020805460ff191660011790555600a165627a7a72305820bc64e456564095c0947182ef7d4e69c0909f962a2605fa06cff7794aec4ec3040029"
}