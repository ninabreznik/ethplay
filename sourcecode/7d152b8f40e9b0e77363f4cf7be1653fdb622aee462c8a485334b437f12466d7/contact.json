{
  "address": "0x6cc1b4600858ef6ef320960e558adac01d0b9da8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "StandardToken",
  "compilerVersion": "v0.4.20-nightly.2018.1.29+commit.a668b9de",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-05\n*/\n\npragma solidity ^0.4.10;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\n\n\n\n\n\n\ninterface ERC20 {\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\n\n\n\n\ninterface ERC223 {\n    function transfer(address to, uint value, bytes data) public;\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n}\n\n\n\n\n\n\n\n\ncontract ERC223ReceivingContract { \n    function tokenFallback(address _from, uint _value, bytes _data) public;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\ncontract StandardToken is ERC20, ERC223 {\n  using SafeMath for uint;\n     \n    string internal _name;\n    string internal _symbol;\n    uint8 internal _decimals;\n    uint256 internal _totalSupply;\n\n    mapping (address => uint256) internal balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    function StandardToken(string name, string symbol, uint8 decimals, uint256 totalSupply) public {\n        _symbol = symbol;\n        _name = name;\n        _decimals = decimals;\n        _totalSupply = totalSupply;\n        balances[msg.sender] = totalSupply;\n    }\n\n    function name()\n        public\n        view\n        returns (string) {\n        return _name;\n    }\n\n    function symbol()\n        public\n        view\n        returns (string) {\n        return _symbol;\n    }\n\n    function decimals()\n        public\n        view\n        returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply()\n        public\n        view\n        returns (uint256) {\n        return _totalSupply;\n    }\n\n   function transfer(address _to, uint256 _value) public returns (bool) {\n     require(_to != address(0));\n     require(_value <= balances[msg.sender]);\n     balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\n     balances[_to] = SafeMath.add(balances[_to], _value);\n     Transfer(msg.sender, _to, _value);\n     return true;\n   }\n\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n   }\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n     require(_value <= balances[_from]);\n     require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = SafeMath.sub(balances[_from], _value);\n     balances[_to] = SafeMath.add(balances[_to], _value);\n     allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);\n    Transfer(_from, _to, _value);\n     return true;\n   }\n\n   function approve(address _spender, uint256 _value) public returns (bool) {\n     allowed[msg.sender][_spender] = _value;\n     Approval(msg.sender, _spender, _value);\n     return true;\n   }\n\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n     return allowed[_owner][_spender];\n   }\n\n   function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n     allowed[msg.sender][_spender] = SafeMath.add(allowed[msg.sender][_spender], _addedValue);\n     Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n     return true;\n   }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n     uint oldValue = allowed[msg.sender][_spender];\n     if (_subtractedValue > oldValue) {\n       allowed[msg.sender][_spender] = 0;\n     } else {\n       allowed[msg.sender][_spender] = SafeMath.sub(oldValue, _subtractedValue);\n    }\n     Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n     return true;\n   }\n   \n  function transfer(address _to, uint _value, bytes _data) public {\n    require(_value > 0 );\n    if(isContract(_to)) {\n        ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n        receiver.tokenFallback(msg.sender, _value, _data);\n    }\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value, _data);\n    }\n    \n  function isContract(address _addr) private returns (bool is_contract) {\n      uint length;\n      assembly {\n            //retrieve the size of the code on target address, this needs assembly\n            length := extcodesize(_addr)\n      }\n      return (length>0);\n    }\n\n\n}",
  "bytecode": "6060604052341561000f57600080fd5b604051610cde380380610cde83398101604052808051820191906020018051820191906020018051919060200180519150600190508380516100559291602001906100a5565b5060008480516100699291602001906100a5565b506002805460ff191660ff9390931692909217909155600381905533600160a060020a0316600090815260046020526040902055506101409050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100e657805160ff1916838001178555610113565b82800160010185558215610113579182015b828111156101135782518255916020019190600101906100f8565b5061011f929150610123565b5090565b61013d91905b8082111561011f5760008155600101610129565b90565b610b8f8061014f6000396000f3006060604052600436106100b95763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100be578063095ea7b31461014857806318160ddd1461017e57806323b872dd146101a3578063313ce567146101cb57806366188463146101f457806370a082311461021657806395d89b4114610235578063a9059cbb14610248578063be45fd621461026a578063d73dd623146102d1578063dd62ed3e146102f3575b600080fd5b34156100c957600080fd5b6100d1610318565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561010d5780820151838201526020016100f5565b50505050905090810190601f16801561013a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015357600080fd5b61016a600160a060020a03600435166024356103c0565b604051901515815260200160405180910390f35b341561018957600080fd5b61019161042c565b60405190815260200160405180910390f35b34156101ae57600080fd5b61016a600160a060020a0360043581169060243516604435610432565b34156101d657600080fd5b6101de6105a2565b60405160ff909116815260200160405180910390f35b34156101ff57600080fd5b61016a600160a060020a03600435166024356105ab565b341561022157600080fd5b610191600160a060020a036004351661069f565b341561024057600080fd5b6100d16106ba565b341561025357600080fd5b61016a600160a060020a036004351660243561072d565b341561027557600080fd5b6102cf60048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061081c95505050505050565b005b34156102dc57600080fd5b61016a600160a060020a0360043516602435610a58565b34156102fe57600080fd5b610191600160a060020a0360043581169060243516610af6565b610320610b51565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103b65780601f1061038b576101008083540402835291602001916103b6565b820191906000526020600020905b81548152906001019060200180831161039957829003601f168201915b5050505050905090565b600160a060020a03338116600081815260056020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60035490565b6000600160a060020a038316151561044957600080fd5b600160a060020a03841660009081526004602052604090205482111561046e57600080fd5b600160a060020a03808516600090815260056020908152604080832033909416835292905220548211156104a157600080fd5b600160a060020a0384166000908152600460205260409020546104c49083610b21565b600160a060020a0380861660009081526004602052604080822093909355908516815220546104f39083610b33565b600160a060020a038085166000908152600460209081526040808320949094558783168252600581528382203390931682529190915220546105359083610b21565b600160a060020a03808616600081815260056020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b60025460ff1690565b600160a060020a0333811660009081526005602090815260408083209386168352929052908120548083111561060857600160a060020a033381166000908152600560209081526040808320938816835292905290812055610639565b6106128184610b21565b600160a060020a033381166000908152600560209081526040808320938916835292905220555b600160a060020a0333811660008181526005602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526004602052604090205490565b6106c2610b51565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103b65780601f1061038b576101008083540402835291602001916103b6565b6000600160a060020a038316151561074457600080fd5b600160a060020a03331660009081526004602052604090205482111561076957600080fd5b600160a060020a03331660009081526004602052604090205461078c9083610b21565b600160a060020a0333811660009081526004602052604080822093909355908516815220546107bb9083610b33565b600160a060020a0380851660008181526004602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b600080831161082a57600080fd5b61083384610b49565b15610934575082600160a060020a03811663c0ee0b8a3385856040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156108d25780820151838201526020016108ba565b50505050905090810190601f1680156108ff5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b151561091f57600080fd5b6102c65a03f1151561093057600080fd5b5050505b600160a060020a03331660009081526004602052604090205461095d908463ffffffff610b2116565b600160a060020a033381166000908152600460205260408082209390935590861681522054610992908463ffffffff610b3316565b600160a060020a03851660009081526004602052604090819020919091558290518082805190602001908083835b602083106109df5780518252601f1990920191602091820191016109c0565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902084600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c168660405190815260200160405180910390a450505050565b600160a060020a033381166000908152600560209081526040808320938616835292905290812054610a8a9083610b33565b600160a060020a0333811660008181526005602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b600082821115610b2d57fe5b50900390565b600082820183811015610b4257fe5b9392505050565b6000903b1190565b602060405190810160405260008152905600a165627a7a723058208718f17874281339245f6f97b7a99ba69a2ff6ed05ecfac47066cf884d3a707d0029000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000700000000000000000000000000000000000000000000000000138a388a43c000000000000000000000000000000000000000000000000000000000000000001b4275696c64696e67204173736574204e6574776f726b20436f696e0000000000000000000000000000000000000000000000000000000000000000000000000442414e4300000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000700000000000000000000000000000000000000000000000000138a388a43c000000000000000000000000000000000000000000000000000000000000000001b4275696c64696e67204173736574204e6574776f726b20436f696e0000000000000000000000000000000000000000000000000000000000000000000000000442414e4300000000000000000000000000000000000000000000000000000000"
}