{
  "address": "0xf2713688e9c1d8dbd937413b18db1b4f134b3f82",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Liability",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-16\n*/\n\n// File: openzeppelin-solidity/contracts/cryptography/ECDSA.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title Elliptic curve signature operations\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\n * TODO Remove this library once solidity supports passing a signature to ecrecover.\n * See https://github.com/ethereum/solidity/issues/864\n */\n\nlibrary ECDSA {\n    /**\n     * @dev Recover signer address from a message by using their signature\n     * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n     * @param signature bytes signature, the signature is generated using web3.eth.sign()\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // Check the signature length\n        if (signature.length != 65) {\n            return (address(0));\n        }\n\n        // Divide the signature in r, s and v variables\n        // ecrecover takes the signature parameters, and the only way to get them\n        // currently is to use assembly.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            r := mload(add(signature, 0x20))\n            s := mload(add(signature, 0x40))\n            v := byte(0, mload(add(signature, 0x60)))\n        }\n\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n        if (v < 27) {\n            v += 27;\n        }\n\n        // If the version is correct return the signer address\n        if (v != 27 && v != 28) {\n            return (address(0));\n        } else {\n            return ecrecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * toEthSignedMessageHash\n     * @dev prefix a bytes32 value with \"\\x19Ethereum Signed Message:\"\n     * and hash the result\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n\npragma solidity ^0.5.0;\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        require(token.transfer(to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        require(token.transferFrom(from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\n        require(token.approve(spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        require(token.approve(spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n        require(token.approve(spender, newAllowance));\n    }\n}\n\n// File: contracts/robonomics/interface/ILiability.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title Standard liability smart contract interface\n */\ncontract ILiability {\n    /**\n     * @dev Liability termination signal\n     */\n    event Finalized(bool indexed success, bytes result);\n\n    /**\n     * @dev Behaviour model multihash\n     */\n    bytes public model;\n\n    /**\n     * @dev Objective ROSBAG multihash\n     * @notice ROSBAGv2 is used: http://wiki.ros.org/Bags/Format/2.0 \n     */\n    bytes public objective;\n\n    /**\n     * @dev Report ROSBAG multihash \n     * @notice ROSBAGv2 is used: http://wiki.ros.org/Bags/Format/2.0 \n     */\n    bytes public result;\n\n    /**\n     * @dev Payment token address\n     */\n    address public token;\n\n    /**\n     * @dev Liability cost\n     */\n    uint256 public cost;\n\n    /**\n     * @dev Lighthouse fee in wn\n     */\n    uint256 public lighthouseFee;\n\n    /**\n     * @dev Validator fee in wn\n     */\n    uint256 public validatorFee;\n\n    /**\n     * @dev Robonomics demand message hash\n     */\n    bytes32 public demandHash;\n\n    /**\n     * @dev Robonomics offer message hash\n     */\n    bytes32 public offerHash;\n\n    /**\n     * @dev Liability promisor address\n     */\n    address public promisor;\n\n    /**\n     * @dev Liability promisee address\n     */\n    address public promisee;\n\n    /**\n     * @dev Lighthouse assigned to this liability\n     */\n    address public lighthouse;\n\n    /**\n     * @dev Liability validator address\n     */\n    address public validator;\n\n    /**\n     * @dev Liability success flag\n     */\n    bool public isSuccess;\n\n    /**\n     * @dev Liability finalization status flag\n     */\n    bool public isFinalized;\n\n    /**\n     * @dev Deserialize robonomics demand message\n     * @notice It can be called by factory only\n     */\n    function demand(\n        bytes   calldata _model,\n        bytes   calldata _objective,\n\n        address _token,\n        uint256 _cost,\n\n        address _lighthouse,\n\n        address _validator,\n        uint256 _validator_fee,\n\n        uint256 _deadline,\n        address _sender,\n        bytes   calldata _signature\n    ) external returns (bool);\n\n    /**\n     * @dev Deserialize robonomics offer message\n     * @notice It can be called by factory only\n     */\n    function offer(\n        bytes   calldata _model,\n        bytes   calldata _objective,\n        \n        address _token,\n        uint256 _cost,\n\n        address _validator,\n\n        address _lighthouse,\n        uint256 _lighthouse_fee,\n\n        uint256 _deadline,\n        address _sender,\n        bytes   calldata _signature\n    ) external returns (bool);\n\n    /**\n     * @dev Finalize liability contract\n     * @param _result Result data hash\n     * @param _success Set 'true' when liability has success result\n     * @param _signature Result signature: liability address, result and success flag signed by promisor\n     * @notice It can be called by assigned lighthouse only\n     */\n    function finalize(\n        bytes calldata _result,\n        bool  _success,\n        bytes calldata _signature\n    ) external returns (bool);\n}\n\n// File: contracts/robonomics/interface/IValidator.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Observing network contract interface\n */\ncontract IValidator {\n    /**\n     * @dev Be sure than address is really validator\n     * @return true when validator address in argument\n     */\n    function isValidator(address _validator) external returns (bool);\n}\n\n// File: contracts/robonomics/interface/ILighthouse.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title Robonomics lighthouse contract interface\n */\ncontract ILighthouse {\n    /**\n     * @dev Provider going online\n     */\n    event Online(address indexed provider);\n\n    /**\n     * @dev Provider going offline\n     */\n    event Offline(address indexed provider);\n\n    /**\n     * @dev Active robonomics provider\n     */\n    event Current(address indexed provider, uint256 indexed quota);\n\n    /**\n     * @dev Robonomics providers list\n     */\n    address[] public providers;\n\n    /**\n     * @dev Count of robonomics providers on this lighthouse\n     */\n    function providersLength() public view returns (uint256)\n    { return providers.length; }\n\n    /**\n     * @dev Provider stake distribution\n     */\n    mapping(address => uint256) public stakes;\n\n    /**\n     * @dev Minimal stake to get one quota\n     */\n    uint256 public minimalStake;\n\n    /**\n     * @dev Silence timeout for provider in blocks\n     */\n    uint256 public timeoutInBlocks;\n\n    /**\n     * @dev Block number of last transaction from current provider\n     */\n    uint256 public keepAliveBlock;\n\n    /**\n     * @dev Round robin provider list marker\n     */\n    uint256 public marker;\n\n    /**\n     * @dev Current provider quota\n     */\n    uint256 public quota;\n\n    /**\n     * @dev Get quota of provider\n     */\n    function quotaOf(address _provider) public view returns (uint256)\n    { return stakes[_provider] / minimalStake; }\n\n    /**\n     * @dev Increase stake and get more quota,\n     *      one quota - one transaction in round\n     * @param _value in wn\n     * @notice XRT should be approved before call this \n     */\n    function refill(uint256 _value) external returns (bool);\n\n    /**\n     * @dev Decrease stake and get XRT back\n     * @param _value in wn\n     */\n    function withdraw(uint256 _value) external returns (bool);\n\n    /**\n     * @dev Create liability smart contract assigned to this lighthouse\n     * @param _demand ABI-encoded demand message\n     * @param _offer ABI-encoded offer message\n     * @notice Only current provider can call it\n     */\n    function createLiability(\n        bytes calldata _demand,\n        bytes calldata _offer\n    ) external returns (bool);\n\n    /**\n     * @dev Finalize liability smart contract assigned to this lighthouse\n     * @param _liability smart contract address\n     * @param _result report of work\n     * @param _success work success flag\n     * @param _signature work signature\n     */\n    function finalizeLiability(\n        address _liability,\n        bytes calldata _result,\n        bool _success,\n        bytes calldata _signature\n    ) external returns (bool);\n}\n\n// File: contracts/robonomics/interface/IFactory.sol\n\npragma solidity ^0.5.0;\n\n\n\n/**\n * @title Robonomics liability factory interface\n */\ncontract IFactory {\n    /**\n     * @dev New liability created \n     */\n    event NewLiability(address indexed liability);\n\n    /**\n     * @dev New lighthouse created\n     */\n    event NewLighthouse(address indexed lighthouse, string name);\n\n    /**\n     * @dev Lighthouse address mapping\n     */\n    mapping(address => bool) public isLighthouse;\n\n    /**\n     * @dev Nonce accounting\n     */\n    mapping(address => uint256) public nonceOf;\n\n    /**\n     * @dev Total GAS utilized by Robonomics network\n     */\n    uint256 public totalGasConsumed = 0;\n\n    /**\n     * @dev GAS utilized by liability contracts\n     */\n    mapping(address => uint256) public gasConsumedOf;\n\n    /**\n     * @dev The count of consumed gas for switch to next epoch \n     */\n    uint256 public constant gasEpoch = 347 * 10**10;\n\n    /**\n     * @dev Current gas price in wei\n     */\n    uint256 public gasPrice = 10 * 10**9;\n\n    /**\n     * @dev XRT emission value for consumed gas\n     * @param _gas Gas consumed by robonomics program\n     */\n    function wnFromGas(uint256 _gas) public view returns (uint256);\n\n    /**\n     * @dev Create lighthouse smart contract\n     * @param _minimalStake Minimal stake value of XRT token (one quota price)\n     * @param _timeoutInBlocks Max time of lighthouse silence in blocks\n     * @param _name Lighthouse name,\n     *              example: 'my-name' will create 'my-name.lighthouse.4.robonomics.eth' domain\n     */\n    function createLighthouse(\n        uint256 _minimalStake,\n        uint256 _timeoutInBlocks,\n        string calldata _name\n    ) external returns (ILighthouse);\n\n    /**\n     * @dev Create robot liability smart contract\n     * @param _demand ABI-encoded demand message\n     * @param _offer ABI-encoded offer message\n     * @notice This method is for lighthouse contract use only\n     */\n    function createLiability(\n        bytes calldata _demand,\n        bytes calldata _offer\n    ) external returns (ILiability);\n\n    /**\n     * @dev Is called after liability creation\n     * @param _liability Liability contract address\n     * @param _start_gas Transaction start gas level\n     * @notice This method is for lighthouse contract use only\n     */\n    function liabilityCreated(ILiability _liability, uint256 _start_gas) external returns (bool);\n\n    /**\n     * @dev Is called after liability finalization\n     * @param _liability Liability contract address\n     * @param _start_gas Transaction start gas level\n     * @notice This method is for lighthouse contract use only\n     */\n    function liabilityFinalized(ILiability _liability, uint256 _start_gas) external returns (bool);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\npragma solidity ^0.5.0;\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/Roles.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol\n\npragma solidity ^0.5.0;\n\n\ncontract MinterRole {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private _minters;\n\n    constructor () internal {\n        _addMinter(msg.sender);\n    }\n\n    modifier onlyMinter() {\n        require(isMinter(msg.sender));\n        _;\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n\n    function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n\n    function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n\n    function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n\n    function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\n\npragma solidity ^0.5.0;\n\n\n\n/**\n * @title ERC20Mintable\n * @dev ERC20 minting logic\n */\ncontract ERC20Mintable is ERC20, MinterRole {\n    /**\n     * @dev Function to mint tokens\n     * @param to The address that will receive the minted tokens.\n     * @param value The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address to, uint256 value) public onlyMinter returns (bool) {\n        _mint(to, value);\n        return true;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\n\npragma solidity ^0.5.0;\n\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract ERC20Burnable is ERC20 {\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param value The amount of token to be burned.\n     */\n    function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n     * @param from address The address which you want to send tokens from\n     * @param value uint256 The amount of token to be burned\n     */\n    function burnFrom(address from, uint256 value) public {\n        _burnFrom(from, value);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\n\npragma solidity ^0.5.0;\n\n\n/**\n * @title ERC20Detailed token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\n// File: contracts/robonomics/XRT.sol\n\npragma solidity ^0.5.0;\n\n\n\n\ncontract XRT is ERC20Mintable, ERC20Burnable, ERC20Detailed {\n    constructor(uint256 _initial_supply) public ERC20Detailed(\"Robonomics\", \"XRT\", 9) {\n        _mint(msg.sender, _initial_supply);\n    }\n}\n\n// File: contracts/robonomics/Liability.sol\n\npragma solidity ^0.5.0;\n\n\n\n\n\n\n\ncontract Liability is ILiability {\n    using ECDSA for bytes32;\n    using SafeERC20 for XRT;\n    using SafeERC20 for ERC20;\n\n    address public factory;\n    XRT     public xrt;\n\n    function setup(XRT _xrt) external returns (bool) {\n        require(factory == address(0));\n\n        factory = msg.sender;\n        xrt     = _xrt;\n\n        return true;\n    }\n\n    function demand(\n        bytes   calldata _model,\n        bytes   calldata _objective,\n\n        address _token,\n        uint256 _cost,\n\n        address _lighthouse,\n\n        address _validator,\n        uint256 _validator_fee,\n\n        uint256 _deadline,\n        address _sender,\n        bytes   calldata _signature\n    )\n        external\n        returns (bool)\n    {\n        require(msg.sender == factory);\n        require(block.number < _deadline);\n\n        model        = _model;\n        objective    = _objective;\n        token        = _token;\n        cost         = _cost;\n        lighthouse   = _lighthouse;\n        validator    = _validator;\n        validatorFee = _validator_fee;\n\n        demandHash = keccak256(abi.encodePacked(\n            _model\n          , _objective\n          , _token\n          , _cost\n          , _lighthouse\n          , _validator\n          , _validator_fee\n          , _deadline\n          , IFactory(factory).nonceOf(_sender)\n          , _sender\n        ));\n\n        promisee = demandHash\n            .toEthSignedMessageHash()\n            .recover(_signature);\n        require(promisee == _sender);\n        return true;\n    }\n\n    function offer(\n        bytes   calldata _model,\n        bytes   calldata _objective,\n        \n        address _token,\n        uint256 _cost,\n\n        address _validator,\n\n        address _lighthouse,\n        uint256 _lighthouse_fee,\n\n        uint256 _deadline,\n        address _sender,\n        bytes   calldata _signature\n    )\n        external\n        returns (bool)\n    {\n        require(msg.sender == factory);\n        require(block.number < _deadline);\n        require(keccak256(model) == keccak256(_model));\n        require(keccak256(objective) == keccak256(_objective));\n        require(_token == token);\n        require(_cost == cost);\n        require(_lighthouse == lighthouse);\n        require(_validator == validator);\n\n        lighthouseFee = _lighthouse_fee;\n\n        offerHash = keccak256(abi.encodePacked(\n            _model\n          , _objective\n          , _token\n          , _cost\n          , _validator\n          , _lighthouse\n          , _lighthouse_fee\n          , _deadline\n          , IFactory(factory).nonceOf(_sender)\n          , _sender\n        ));\n\n        promisor = offerHash\n            .toEthSignedMessageHash()\n            .recover(_signature);\n        require(promisor == _sender);\n        return true;\n    }\n\n    function finalize(\n        bytes calldata _result,\n        bool  _success,\n        bytes calldata _signature\n    )\n        external\n        returns (bool)\n    {\n        require(msg.sender == lighthouse);\n        require(!isFinalized);\n\n        isFinalized = true;\n        result      = _result;\n        isSuccess   = _success;\n\n        address resultSender = keccak256(abi.encodePacked(this, _result, _success))\n            .toEthSignedMessageHash()\n            .recover(_signature);\n\n        if (validator == address(0)) {\n            require(resultSender == promisor);\n        } else {\n            require(IValidator(validator).isValidator(resultSender));\n            // Transfer validator fee when is set\n            if (validatorFee > 0)\n                xrt.safeTransfer(validator, validatorFee);\n\n        }\n\n        if (cost > 0)\n            ERC20(token).safeTransfer(isSuccess ? promisor : promisee, cost);\n\n        emit Finalized(isSuccess, result);\n        return true;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"lighthouseFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"model\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSuccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objective\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"xrt\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"validator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"validatorFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_model\",\"type\":\"bytes\"},{\"name\":\"_objective\",\"type\":\"bytes\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_cost\",\"type\":\"uint256\"},{\"name\":\"_validator\",\"type\":\"address\"},{\"name\":\"_lighthouse\",\"type\":\"address\"},{\"name\":\"_lighthouse_fee\",\"type\":\"uint256\"},{\"name\":\"_deadline\",\"type\":\"uint256\"},{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"offer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promisee\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_model\",\"type\":\"bytes\"},{\"name\":\"_objective\",\"type\":\"bytes\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_cost\",\"type\":\"uint256\"},{\"name\":\"_lighthouse\",\"type\":\"address\"},{\"name\":\"_validator\",\"type\":\"address\"},{\"name\":\"_validator_fee\",\"type\":\"uint256\"},{\"name\":\"_deadline\",\"type\":\"uint256\"},{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"demand\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_result\",\"type\":\"bytes\"},{\"name\":\"_success\",\"type\":\"bool\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"finalize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lighthouse\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"result\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_xrt\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"offerHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promisor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"demandHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"bytes\"}],\"name\":\"Finalized\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b50611398806100206000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806348a984e4116100b8578063699373ca1161007c578063699373ca146105c95780638d4e4083146105d1578063c2d8de54146105d9578063c45a0155146105e1578063f0476bc5146105e9578063fc0c546a146105f157610137565b806348a984e4146103855780634fe6365e146104cf5780636301fd6314610593578063653721471461059b57806366d38203146105a357610137565b8063330f9588116100ff578063330f9588146101ff5780633a5381b5146102235780633f6d82561461022b578063413781d214610233578063474ce8721461037d57610137565b8063051064c61461013c5780630ad9d052146101565780630b6c754b146101d357806313faede6146101ef57806314f1586a146101f7575b600080fd5b6101446105f9565b60408051918252519081900360200190f35b61015e6105ff565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610198578181015183820152602001610180565b50505050905090810190601f1680156101c55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101db61068d565b604080519115158252519081900360200190f35b61014461069d565b61015e6106a3565b6102076106fd565b604080516001600160a01b039092168252519081900360200190f35b61020761070c565b61014461071b565b6101db600480360361014081101561024a57600080fd5b810190602081018135600160201b81111561026457600080fd5b82018360208201111561027657600080fd5b803590602001918460018302840111600160201b8311171561029757600080fd5b919390929091602081019035600160201b8111156102b457600080fd5b8201836020820111156102c657600080fd5b803590602001918460018302840111600160201b831117156102e757600080fd5b919390926001600160a01b0383358116936020810135936040820135831693606083013584169360808401359360a08101359360c0820135909216929061010081019060e00135600160201b81111561033f57600080fd5b82018360208201111561035157600080fd5b803590602001918460018302840111600160201b8311171561037257600080fd5b509092509050610721565b610207610a8e565b6101db600480360361014081101561039c57600080fd5b810190602081018135600160201b8111156103b657600080fd5b8201836020820111156103c857600080fd5b803590602001918460018302840111600160201b831117156103e957600080fd5b919390929091602081019035600160201b81111561040657600080fd5b82018360208201111561041857600080fd5b803590602001918460018302840111600160201b8311171561043957600080fd5b919390926001600160a01b0383358116936020810135936040820135831693606083013584169360808401359360a08101359360c0820135909216929061010081019060e00135600160201b81111561049157600080fd5b8201836020820111156104a357600080fd5b803590602001918460018302840111600160201b831117156104c457600080fd5b509092509050610a9d565b6101db600480360360608110156104e557600080fd5b810190602081018135600160201b8111156104ff57600080fd5b82018360208201111561051157600080fd5b803590602001918460018302840111600160201b8311171561053257600080fd5b919390928235151592604081019060200135600160201b81111561055557600080fd5b82018360208201111561056757600080fd5b803590602001918460018302840111600160201b8311171561058857600080fd5b509092509050610cfe565b610207611017565b61015e611026565b6101db600480360360208110156105b957600080fd5b50356001600160a01b031661107e565b6101446110ca565b6101db6110d0565b6102076110e0565b6102076110ef565b6101446110fe565b610207611104565b60055481565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106855780601f1061065a57610100808354040283529160200191610685565b820191906000526020600020905b81548152906001019060200180831161066857829003601f168201915b505050505081565b600c54600160a01b900460ff1681565b60045481565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106855780601f1061065a57610100808354040283529160200191610685565b600e546001600160a01b031681565b600c546001600160a01b031681565b60065481565b600d546000906001600160a01b0316331461073b57600080fd5b84431061074757600080fd5b8d8d6040518083838082843780830192505050925050506040518091039020600060405180828054600181600116156101000203166002900480156107c35780601f106107a15761010080835404028352918201916107c3565b820191906000526020600020905b8154815290600101906020018083116107af575b50509150506040518091039020146107da57600080fd5b8b8b6040518083838082843780830192505050925050506040518091039020600160405180828054600181600116156101000203166002900480156108565780601f10610834576101008083540402835291820191610856565b820191906000526020600020905b815481529060010190602001808311610842575b505091505060405180910390201461086d57600080fd5b6003546001600160a01b038b811691161461088757600080fd5b600454891461089557600080fd5b600b546001600160a01b038881169116146108af57600080fd5b600c546001600160a01b038981169116146108c957600080fd5b856005819055508d8d8d8d8d8d8d8d8d8d600d60009054906101000a90046001600160a01b03166001600160a01b031663ed2a2d648f6040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561094557600080fd5b505afa158015610959573d6000803e3d6000fd5b505050506040513d602081101561096f57600080fd5b50516040518f90602001808d8d808284379190910190508b8b808284376001600160a01b039b8c16606090811b93909101928352601483019a909a5250968916881b603488015250938716861b6048860152605c850192909252607c840152609c830152909216901b60bc8201526040805160b081840301815260d08301808352815160209283012060085560f0601f8b0183900490920284018201909252888252610a4d965090945088935087925082910183828082843760009201919091525050600854610a4192509050611113565b9063ffffffff61116416565b600980546001600160a01b0319166001600160a01b039283161790819055858216911614610a7a57600080fd5b5060019d9c50505050505050505050505050565b600a546001600160a01b031681565b600d546000906001600160a01b03163314610ab757600080fd5b844310610ac357600080fd5b610acf60008f8f6112d1565b50610adc60018d8d6112d1565b5089600360006101000a8154816001600160a01b0302191690836001600160a01b031602179055508860048190555087600b60006101000a8154816001600160a01b0302191690836001600160a01b0316021790555086600c60006101000a8154816001600160a01b0302191690836001600160a01b03160217905550856006819055508d8d8d8d8d8d8d8d8d8d600d60009054906101000a90046001600160a01b03166001600160a01b031663ed2a2d648f6040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015610bd557600080fd5b505afa158015610be9573d6000803e3d6000fd5b505050506040513d6020811015610bff57600080fd5b50516040518f90602001808d8d808284379190910190508b8b808284376001600160a01b039b8c16606090811b93909101928352601483019a909a5250968916881b603488015250938716861b6048860152605c850192909252607c840152609c830152909216901b60bc8201526040805160b081840301815260d08301808352815160209283012060075560f0601f8b0183900490920284018201909252888252610cd1965090945088935087925082910183828082843760009201919091525050600754610a4192509050611113565b600a80546001600160a01b0319166001600160a01b039283161790819055858216911614610a7a57600080fd5b600b546000906001600160a01b03163314610d1857600080fd5b600c54600160a81b900460ff1615610d2f57600080fd5b600c8054600160a81b60ff021916600160a81b179055610d51600287876112d1565b50600c805474ff00000000000000000000000000000000000000001916600160a01b86151502179055604080516020601f8501819004810282018101909252838152600091610e0f919086908690819084018382808284376000920191909152505060405130606081901b60208301908152610a4194509092508c918c918c9160340184848082843780830192505050821515151560f81b815260010194505050505060405160208183030381529060405280519060200120611113565b600c549091506001600160a01b0316610e41576009546001600160a01b03828116911614610e3c57600080fd5b610ef7565b600c5460408051600160e01b63facd743b0281526001600160a01b0384811660048301529151919092169163facd743b9160248083019260209291908290030181600087803b158015610e9357600080fd5b505af1158015610ea7573d6000803e3d6000fd5b505050506040513d6020811015610ebd57600080fd5b5051610ec857600080fd5b60065415610ef757600c54600654600e54610ef7926001600160a01b039182169291169063ffffffff61123716565b60045415610f4e57600c54610f4e90600160a01b900460ff16610f2557600a546001600160a01b0316610f32565b6009546001600160a01b03165b6004546003546001600160a01b0316919063ffffffff61123716565b600c54604080516020808252600280546101006001821615026000190116819004918301829052600160a01b90940460ff161515937f7d5242f52c478159b4963f0898012c593d0786bfa3bce2e9bb2f073b068caee093909291829182019084908015610ffc5780601f10610fd157610100808354040283529160200191610ffc565b820191906000526020600020905b815481529060010190602001808311610fdf57829003601f168201915b50509250505060405180910390a25060019695505050505050565b600b546001600160a01b031681565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156106855780601f1061065a57610100808354040283529160200191610685565b600d546000906001600160a01b03161561109757600080fd5b50600d80546001600160a01b03199081163317909155600e80546001600160a01b03841692169190911790556001919050565b60085481565b600c54600160a81b900460ff1681565b6009546001600160a01b031681565b600d546001600160a01b031681565b60075481565b6003546001600160a01b031681565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083019490945282518083039094018452605c909101909152815191012090565b600080600080845160411461117f5760009350505050611231565b50505060208201516040830151606084015160001a601b8110156111a157601b015b8060ff16601b141580156111b957508060ff16601c14155b156111ca5760009350505050611231565b6040805160008152602080820180845289905260ff8416828401526060820186905260808201859052915160019260a0808401939192601f1981019281900390910190855afa158015611221573d6000803e3d6000fd5b5050506020604051035193505050505b92915050565b826001600160a01b031663a9059cbb83836040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561129757600080fd5b505af11580156112ab573d6000803e3d6000fd5b505050506040513d60208110156112c157600080fd5b50516112cc57600080fd5b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106113125782800160ff1982351617855561133f565b8280016001018555821561133f579182015b8281111561133f578235825591602001919060010190611324565b5061134b92915061134f565b5090565b61136991905b8082111561134b5760008155600101611355565b9056fea165627a7a7230582001a2c1adcec8964291bcdd5724b716925cfd6002d0833ab127332361d27ee2250029"
}