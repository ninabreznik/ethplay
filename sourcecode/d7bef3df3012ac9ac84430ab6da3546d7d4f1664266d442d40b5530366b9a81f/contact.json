{
  "address": "0xb9e5f22e6f0dce846e0a2f46b453caf880d6aea8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Bounty",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-22\n*/\n\npragma solidity ^0.5.8;\n\n/**\n * Copy right (c) Donex UG (haftungsbeschraenkt)\n * All rights reserved\n * Version 0.2.1 (BETA)\n */\n\ncontract Bounty {\n\n    address payable public masterAddress;\n    mapping(address => bool) bountyPermission;\n    uint public bounty;\n    mapping(address => bool) gotBounty;\n\n    uint8 public maxNumberOfBounties;\n    uint8 public numberOfGivenBounties;\n\n    mapping(address => address) creatorsConditionalPaymentAddress;\n\n    address owner;\n    uint public deadline;\n\n    modifier onlyByOwner ()\n    {\n        require(msg.sender ==  owner);\n        _;\n    }\n\n    modifier deadlineExceeded ()\n    {\n        require(now > deadline);\n        _;\n    }\n\n    constructor (\n        address payable _masterAddress,\n        uint8 _maxNumberOfBounties,\n        uint _deadline\n    )\n        payable\n        public\n    {\n        owner = msg.sender;\n        deadline = _deadline;\n        numberOfGivenBounties = 0;\n        maxNumberOfBounties = _maxNumberOfBounties;\n        bounty = msg.value / maxNumberOfBounties;\n        masterAddress = _masterAddress;\n    }\n\n    /**\n     * @notice The aim is to create a conditional payment and find someone to buy the counter position\n     *\n     * Parameters to forward to master contract:\n     * @param long .. Decide if you want to be in the long or short position of your contract.\n     * @param dueDate .. Set a due date of your contract. Make sure this is supported by us. Use OD.exchange to avoid conflicts here.\n     * @param strikePrice .. Choose a strike price which will be used at due date for calculation of your payout. Make sure that the format is correct. Use OD.exchange to avoid mistakes.\n     */\n    function createContractWithBounty (\n        bool long,\n        uint256 dueDate,\n        uint256 strikePrice\n    )\n        payable\n        public\n    {\n        // New conditional payment must be created before deadline exceeded\n        require(now < deadline);\n\n        // Only once per creator address\n        require(!bountyPermission[msg.sender]);\n        bountyPermission[msg.sender] = true;\n\n        // Only first customers can get bounty\n        numberOfGivenBounties += 1;\n        require(numberOfGivenBounties <= maxNumberOfBounties);\n\n        // Create new conditional payment in master contract:\n        Master master = Master(masterAddress);\n        address newConditionalPayment = master.createConditionalPayment.value(msg.value)(\n            msg.sender,\n            long,\n            dueDate,\n            strikePrice\n        );\n\n        // Attribute conditional payment to creator\n        creatorsConditionalPaymentAddress[msg.sender] = newConditionalPayment;\n    }\n\n    /**\n     *  @notice Withdraw the bounty after creation of conditional payment and finding counter party\n     */\n    function withdrawBounty ()\n        public\n    {\n        // Creator needs to have permission\n        require(bountyPermission[msg.sender]);\n        bountyPermission[msg.sender] = false;\n\n        // Only one withdraw per creator\n        require(!gotBounty[msg.sender]);\n        gotBounty[msg.sender] = true;\n\n        ConditionalPayment conditionalPayment = ConditionalPayment(creatorsConditionalPaymentAddress[msg.sender]);\n\n        // Conditional payment needs to have at least one counter party\n        require(conditionalPayment.countCounterparties() > 0);\n\n        msg.sender.transfer(bounty);\n    }\n\n    /**\n     * @notice Owner can withdraw bounty permission if creators did not succeed to find a taker before the deadline\n     */\n    function withdrawPermission (address unsuccessfulCreator)\n        public\n        onlyByOwner\n        deadlineExceeded\n    {\n        // Unsuccessful criterium\n        ConditionalPayment conditionalPayment = ConditionalPayment(creatorsConditionalPaymentAddress[unsuccessfulCreator]);\n        require(conditionalPayment.countCounterparties() == 0);\n\n        // Disqualify creator from bounty\n        bountyPermission[unsuccessfulCreator] = false;\n        creatorsConditionalPaymentAddress[msg.sender] = 0x0000000000000000000000000000000000000000;\n\n        numberOfGivenBounties -= 1;\n    }\n\n    function withdrawUnusedBounties ()\n        public\n        onlyByOwner\n        deadlineExceeded\n    {\n        msg.sender.transfer((maxNumberOfBounties - numberOfGivenBounties)*bounty);\n    }\n\n}\n\n\ninterface Master {\n\n    function createConditionalPayment (\n        address payable,\n        bool,\n        uint256,\n        uint256\n    )\n        payable\n        external\n        returns(address newDerivativeAddress);\n\n}\n\ninterface ConditionalPayment {\n\n    function countCounterparties () external returns(uint8);\n\n}",
  "bytecode": "6080604052604051606080610c9a8339810180604052606081101561002357600080fd5b8101908080519060200190929190805190602001909291908051906020019092919050505033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806007819055506000600460016101000a81548160ff021916908360ff16021790555081600460006101000a81548160ff021916908360ff160217905550600460009054906101000a900460ff1660ff1634816100e257fe5b04600281905550826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050610b5f8061013b6000396000f3fe6080604052600436106100865760003560e01c8063943dfef111610059578063943dfef114610115578063a20c4ef414610140578063b2b4c38e14610191578063d365a08e146101c2578063da0b8a161461021957610086565b806329dcb0cf1461008b5780632cf4e56f146100b65780634c388498146100cd5780634f217493146100fe575b600080fd5b34801561009757600080fd5b506100a061025d565b6040518082815260200191505060405180910390f35b3480156100c257600080fd5b506100cb610263565b005b3480156100d957600080fd5b506100e2610502565b604051808260ff1660ff16815260200191505060405180910390f35b34801561010a57600080fd5b50610113610515565b005b34801561012157600080fd5b5061012a6105ed565b6040518082815260200191505060405180910390f35b34801561014c57600080fd5b5061018f6004803603602081101561016357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506105f3565b005b34801561019d57600080fd5b506101a661085a565b604051808260ff1660ff16815260200191505060405180910390f35b3480156101ce57600080fd5b506101d761086d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61025b6004803603606081101561022f57600080fd5b810190808035151590602001909291908035906020019092919080359060200190929190505050610892565b005b60075481565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166102b957600080fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561036857600080fd5b6001600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663ab2abfcc6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561046e57600080fd5b505af1158015610482573d6000803e3d6000fd5b505050506040513d602081101561049857600080fd5b810190808051906020019092919050505060ff16116104b657600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc6002549081150290604051600060405180830381858888f193505050501580156104fe573d6000803e3d6000fd5b5050565b600460009054906101000a900460ff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461056f57600080fd5b600754421161057d57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc600254600460019054906101000a900460ff16600460009054906101000a900460ff160360ff16029081150290604051600060405180830381858888f193505050501580156105ea573d6000803e3d6000fd5b50565b60025481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461064d57600080fd5b600754421161065b57600080fd5b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663ab2abfcc6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561070957600080fd5b505af115801561071d573d6000803e3d6000fd5b505050506040513d602081101561073357600080fd5b810190808051906020019092919050505060ff161461075157600080fd5b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600460018282829054906101000a900460ff160392506101000a81548160ff021916908360ff1602179055505050565b600460019054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60075442106108a057600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156108f757600080fd5b60018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600460018282829054906101000a900460ff160192506101000a81548160ff021916908360ff160217905550600460009054906101000a900460ff1660ff16600460019054906101000a900460ff1660ff1611156109ad57600080fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663c9ffe7bd34338888886040518663ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001841515151581526020018381526020018281526020019450505050506020604051808303818588803b158015610a7057600080fd5b505af1158015610a84573d6000803e3d6000fd5b50505050506040513d6020811015610a9b57600080fd5b8101908080519060200190929190505050905080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505056fea165627a7a723058209f2e6a5314f1af3fcc2721263af08f317c7556562025af56da32014f2008ef28002900000000000000000000000077d774c419d0d6357f7a23f0f512e63528c77932000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000005d0d4550",
  "constructorArguments": "00000000000000000000000077d774c419d0d6357f7a23f0f512e63528c77932000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000005d0d4550"
}