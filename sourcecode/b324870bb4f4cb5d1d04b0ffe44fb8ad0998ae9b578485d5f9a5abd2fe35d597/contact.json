{
  "address": "0x2be4b69815e3d1a4dbe5a03ef5c2d6d246c3e3d8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RDCCOIN",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-21\n*/\n\npragma solidity ^0.4.21;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c>=a && c>=b);\n        return c;\n    }\n}\n\n\ncontract Ownable {\n    \n    address public owner;\n    \n     constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    modifier onlyPayloadSize(uint size) {\n        assert(msg.data.length >= size + 4);\n        _;\n    }\n}\n\n\ncontract RDCCOIN is Ownable{\n\n    using SafeMath for uint;\n    string public name;     \n    string public symbol;\n    uint8 public decimals;  \n    uint private _totalSupply;\n    uint public basisPointsRate = 0;\n    uint public minimumFee = 0;\n    uint public maximumFee = 0;\n\n    mapping (address => uint256) internal balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n    \n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n    \n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _value\n    );\n    \n    event Params(\n        uint feeBasisPoints,\n        uint maximumFee,\n        uint minimumFee\n    );\n    \n    event Issue(\n        uint amount\n    );\n\n    event Redeem(\n        uint amount\n    );\n    \n\n    constructor () public {\n        name = 'RIDDLE COIN'; \n        symbol = 'RDC'; \n        decimals = 18; \n        _totalSupply = 600000000 * 10**uint(decimals); \n        balances[msg.sender] = _totalSupply;\n    }\n    \n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n   \n  \n    function balanceOf(address owner) public view returns (uint256) {\n        return balances[owner];\n    }\n   \n    function transfer(address _to, uint256  _value) public onlyPayloadSize(2 * 32){\n        uint fee = (_value.mul(basisPointsRate)).div(1000);\n        if (fee > maximumFee) {\n            fee = maximumFee;\n        }\n        if (fee < minimumFee) {\n            fee = minimumFee;\n        }\n        require (_to != 0x0);\n\n        require(_to != address(0));\n\n        require (_value > 0); \n\n        require (balances[msg.sender] > _value);\n\n        require (balances[_to].add(_value) > balances[_to]);\n\n        uint sendAmount = _value.sub(fee);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n\n        balances[_to] = balances[_to].add(sendAmount); \n\n        if (fee > 0) {\n            balances[owner] = balances[owner].add(fee);\n            emit Transfer(msg.sender, owner, fee);\n        }\n\n        emit Transfer(msg.sender, _to, _value);\n    }\n    \n  \n    function approve(address _spender, uint256 _value) public onlyPayloadSize(2 * 32) returns (bool success) {\n\n        require (_value > 0);\n\n        require (balances[owner] > _value);\n\n        require (_spender != msg.sender);\n\n        allowed[msg.sender][_spender] = _value;\n\n        emit Approval(msg.sender,_spender, _value);\n        return true;\n    }\n    \n \n    function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(2 * 32) returns (bool success) {\n\n        uint fee = (_value.mul(basisPointsRate)).div(1000);\n        if (fee > maximumFee) {\n                fee = maximumFee;\n        }\n        if (fee < minimumFee) {\n            fee = minimumFee;\n        }\n\n        require (_to != 0x0);\n\n        require(_to != address(0));\n\n        require (_value > 0); \n\n        require(_value < balances[_from]);\n\n        require (balances[_to].add(_value) > balances[_to]);\n\n        require (_value <= allowed[_from][msg.sender]);\n        uint sendAmount = _value.sub(fee);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(sendAmount);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        if (fee > 0) {\n            balances[owner] = balances[owner].add(fee);\n            emit Transfer(_from, owner, fee);\n        }\n        emit Transfer(_from, _to, sendAmount);\n        return true;\n    }\n    \n\n    function allowance(address _from, address _spender) public view returns (uint remaining) {\n        return allowed[_from][_spender];\n    }\n    \n  \n    function setParams(uint newBasisPoints,uint newMaxFee,uint newMinFee) public onlyOwner {\n        require(newBasisPoints <= 9);\n        require(newMaxFee <= 100);\n        require(newMinFee <= 5);\n        basisPointsRate = newBasisPoints;\n        maximumFee = newMaxFee.mul(10**uint(decimals));\n        minimumFee = newMinFee.mul(10**uint(decimals));\n        emit Params(basisPointsRate, maximumFee, minimumFee);\n    }\n\n    function increaseSupply(uint amount) public onlyOwner {\n        require(amount <= 10000000);\n        amount = amount.mul(10**uint(decimals));\n        require(_totalSupply.add(amount) > _totalSupply);\n        require(balances[owner].add(amount) > balances[owner]);\n        balances[owner] = balances[owner].add(amount);\n        _totalSupply = _totalSupply.add(amount);\n        emit Issue(amount);\n    }\n    \n\n    function decreaseSupply(uint amount) public onlyOwner {\n        require(amount <= 10000000);\n        amount = amount.mul(10**uint(decimals));\n        require(_totalSupply >= amount);\n        require(balances[owner] >= amount);\n        _totalSupply = _totalSupply.sub(amount);\n        balances[owner] = balances[owner].sub(amount);\n        emit Redeem(amount);\n    }\n}",
  "bytecode": "60806040526000600555600060065560006007553480156200002057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040805190810160405280600b81526020017f524944444c4520434f494e00000000000000000000000000000000000000000081525060019080519060200190620000ae92919062000187565b506040805190810160405280600381526020017f524443000000000000000000000000000000000000000000000000000000000081525060029080519060200190620000fc92919062000187565b506012600360006101000a81548160ff021916908360ff160217905550600360009054906101000a900460ff1660ff16600a0a6323c3460002600481905550600454600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555062000236565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001ca57805160ff1916838001178555620001fb565b82800160010185558215620001fb579182015b82811115620001fa578251825591602001919060010190620001dd565b5b5090506200020a91906200020e565b5090565b6200023391905b808211156200022f57600081600090555060010162000215565b5090565b90565b611c5380620002466000396000f3006080604052600436106100e6576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100eb578063095ea7b31461017b57806318160ddd146101e05780631a7626e71461020b57806323b872dd14610236578063313ce567146102bb57806335390714146102ec5780635a0ce6761461031757806370a08231146103585780638da5cb5b146103af57806395d89b411461040657806398e52f9a14610496578063a9059cbb146104c3578063b921e16314610510578063dd62ed3e1461053d578063dd644f72146105b4575b600080fd5b3480156100f757600080fd5b506101006105df565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610140578082015181840152602081019050610125565b50505050905090810190601f16801561016d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018757600080fd5b506101c6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061067d565b604051808215151515815260200191505060405180910390f35b3480156101ec57600080fd5b506101f561083d565b6040518082815260200191505060405180910390f35b34801561021757600080fd5b50610220610847565b6040518082815260200191505060405180910390f35b34801561024257600080fd5b506102a1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061084d565b604051808215151515815260200191505060405180910390f35b3480156102c757600080fd5b506102d0610ec1565b604051808260ff1660ff16815260200191505060405180910390f35b3480156102f857600080fd5b50610301610ed4565b6040518082815260200191505060405180910390f35b34801561032357600080fd5b50610356600480360381019080803590602001909291908035906020019092919080359060200190929190505050610eda565b005b34801561036457600080fd5b50610399600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061101a565b6040518082815260200191505060405180910390f35b3480156103bb57600080fd5b506103c4611063565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561041257600080fd5b5061041b611088565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561045b578082015181840152602081019050610440565b50505050905090810190601f1680156104885780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104a257600080fd5b506104c160048036038101908080359060200190929190505050611126565b005b3480156104cf57600080fd5b5061050e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611369565b005b34801561051c57600080fd5b5061053b6004803603810190808035906020019092919050505061183a565b005b34801561054957600080fd5b5061059e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b01565b6040518082815260200191505060405180910390f35b3480156105c057600080fd5b506105c9611b88565b6040518082815260200191505060405180910390f35b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106755780601f1061064a57610100808354040283529160200191610675565b820191906000526020600020905b81548152906001019060200180831161065857829003601f168201915b505050505081565b600060406004810160003690501015151561069457fe5b6000831115156106a357600080fd5b82600860008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411151561071157600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561074c57600080fd5b82600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a3600191505092915050565b6000600454905090565b60065481565b600080600060406004810160003690501015151561086757fe5b6108906103e861088260055488611b8e90919063ffffffff16565b611bc990919063ffffffff16565b92506007548311156108a25760075492505b6006548310156108b25760065492505b60008673ffffffffffffffffffffffffffffffffffffffff16141515156108d857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415151561091457600080fd5b60008511151561092357600080fd5b600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548510151561097057600080fd5b600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a0286600860008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611be490919063ffffffff16565b111515610a0e57600080fd5b600960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548511151515610a9957600080fd5b610aac8386611c0e90919063ffffffff16565b9150610b0085600860008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c0e90919063ffffffff16565b600860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b9582600860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611be490919063ffffffff16565b600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c6785600960008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c0e90919063ffffffff16565b600960008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000831115610e4e57610d6383600860008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611be490919063ffffffff16565b600860008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a35b8573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600193505050509392505050565b600360009054906101000a900460ff1681565b60075481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f3557600080fd5b60098311151515610f4557600080fd5b60648211151515610f5557600080fd5b60058111151515610f6557600080fd5b82600581905550610f94600360009054906101000a900460ff1660ff16600a0a83611b8e90919063ffffffff16565b600781905550610fc2600360009054906101000a900460ff1660ff16600a0a82611b8e90919063ffffffff16565b6006819055507fd16858b87f79d06c5d7f4cdf7f0943a3b343a9eb149c10ec26e7bcaae7f19bc560055460075460065460405180848152602001838152602001828152602001935050505060405180910390a1505050565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561111e5780601f106110f35761010080835404028352916020019161111e565b820191906000526020600020905b81548152906001019060200180831161110157829003601f168201915b505050505081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561118157600080fd5b62989680811115151561119357600080fd5b6111bb600360009054906101000a900460ff1660ff16600a0a82611b8e90919063ffffffff16565b905080600454101515156111ce57600080fd5b80600860008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561123d57600080fd5b61125281600454611c0e90919063ffffffff16565b6004819055506112cb81600860008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c0e90919063ffffffff16565b600860008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f702d5967f45f6513a38ffc42d6ba9bf230bd40e8f53b16363c7eb4fd2deb9a44816040518082815260200191505060405180910390a150565b60008060406004810160003690501015151561138157fe5b6113aa6103e861139c60055487611b8e90919063ffffffff16565b611bc990919063ffffffff16565b92506007548311156113bc5760075492505b6006548310156113cc5760065492505b60008573ffffffffffffffffffffffffffffffffffffffff16141515156113f257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415151561142e57600080fd5b60008411151561143d57600080fd5b83600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411151561148a57600080fd5b600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461151c85600860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611be490919063ffffffff16565b11151561152857600080fd5b61153b8385611c0e90919063ffffffff16565b915061158f84600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c0e90919063ffffffff16565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061162482600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611be490919063ffffffff16565b600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008311156117ce576116e383600860008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611be490919063ffffffff16565b600860008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a35b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a35050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561189557600080fd5b6298968081111515156118a757600080fd5b6118cf600360009054906101000a900460ff1660ff16600a0a82611b8e90919063ffffffff16565b90506004546118e982600454611be490919063ffffffff16565b1115156118f557600080fd5b600860008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546119c982600860008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611be490919063ffffffff16565b1115156119d557600080fd5b611a4881600860008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611be490919063ffffffff16565b600860008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611ac181600454611be490919063ffffffff16565b6004819055507fcb8241adb0c3fdb35b70c24ce35c5eb0c17af7431c99f827d44a445ca624176a816040518082815260200191505060405180910390a150565b6000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60055481565b6000806000841415611ba35760009150611bc2565b8284029050828482811515611bb457fe5b04141515611bbe57fe5b8091505b5092915050565b6000808284811515611bd757fe5b0490508091505092915050565b6000808284019050838110158015611bfc5750828110155b1515611c0457fe5b8091505092915050565b6000828211151515611c1c57fe5b8183039050929150505600a165627a7a72305820b0fb70c86c743028803f59362c5f773c0b4ef62f7446099d412222c8573aec4a0029"
}