{
  "address": "0x1a7cc52ca652ac5df72a7fa4b131cb9312dd3423",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MagnusCoin",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-01\n*/\n\npragma solidity ^0.4.13;\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Contactable is Ownable{\n\n    string public contactInformation;\n\n    /**\n     * @dev Allows the owner to set a string with their contact information.\n     * @param info The contact information to attach to the contract.\n     */\n    function setContactInformation(string info) onlyOwner public {\n         contactInformation = info;\n     }\n}\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract MagnusCoin is StandardToken, Ownable, Contactable {\n    string public name = \"Magnus Coin\";\n    string public symbol = \"MGS\";\n    uint256 public constant decimals = 18;\n\n    mapping (address => bool) internal allowedOverrideAddresses;\n\n    bool public tokenActive = false;\n    \n    uint256 endtime = 1543575521;\n\n    modifier onlyIfTokenActiveOrOverride() {\n        // owner or any addresses listed in the overrides\n        // can perform token transfers while inactive\n        require(tokenActive || msg.sender == owner || allowedOverrideAddresses[msg.sender]);\n        _;\n    }\n\n    modifier onlyIfTokenInactive() {\n        require(!tokenActive);\n        _;\n    }\n\n    modifier onlyIfValidAddress(address _to) {\n        // prevent 'invalid' addresses for transfer destinations\n        require(_to != 0x0);\n        // don't allow transferring to this contract's address\n        require(_to != address(this));\n        _;\n    }\n\n    event TokenActivated();\n    event TokenDeactivated();\n    \n\n    function MagnusCoin() public {\n\n        totalSupply = 118200000000000000000000000;\n        contactInformation = \"Magnus Collective\";\n        \n\n        // msg.sender == owner of the contract\n        balances[msg.sender] = totalSupply;\n    }\n\n    /// @dev Same ERC20 behavior, but reverts if not yet active.\n    /// @param _spender address The address which will spend the funds.\n    /// @param _value uint256 The amount of tokens to be spent.\n    function approve(address _spender, uint256 _value) public onlyIfTokenActiveOrOverride onlyIfValidAddress(_spender) returns (bool) {\n        return super.approve(_spender, _value);\n    }\n\n    /// @dev Same ERC20 behavior, but reverts if not yet active.\n    /// @param _to address The address to transfer to.\n    /// @param _value uint256 The amount to be transferred.\n    function transfer(address _to, uint256 _value) public onlyIfTokenActiveOrOverride onlyIfValidAddress(_to) returns (bool) {\n        return super.transfer(_to, _value);\n    }\n\n    function ownerSetOverride(address _address, bool enable) external onlyOwner {\n        allowedOverrideAddresses[_address] = enable;\n    }\n    \n\n    function ownerRecoverTokens(address _address, uint256 _value) external onlyOwner {\n            require(_address != address(0));\n            require(now < endtime );\n            require(_value <= balances[_address]);\n            require(balances[_address].sub(_value) >=0);\n            balances[_address] = balances[_address].sub(_value);\n            balances[owner] = balances[owner].add(_value);\n            Transfer(_address, owner, _value);\n    }\n\n    function ownerSetVisible(string _name, string _symbol) external onlyOwner onlyIfTokenInactive {        \n\n        // By holding back on setting these, it prevents the token\n        // from being a duplicate in ERC token searches if the need to\n        // redeploy arises prior to the crowdsale starts.\n        // Mainly useful during testnet deployment/testing.\n        name = _name;\n        symbol = _symbol;\n    }\n\n    function ownerActivateToken() external onlyOwner onlyIfTokenInactive {\n        require(bytes(symbol).length > 0);\n\n        tokenActive = true;\n        TokenActivated();\n    }\n\n    function ownerDeactivateToken() external onlyOwner onlyIfTokenActiveOrOverride {\n        require(bytes(symbol).length > 0);\n\n        tokenActive = false;\n        TokenDeactivated();\n    }\n    \n\n}",
  "bytecode": "606060405260408051908101604052600b81527f4d61676e757320436f696e000000000000000000000000000000000000000000602082015260059080516200004d9291602001906200014b565b5060408051908101604052600381527f4d4753000000000000000000000000000000000000000000000000000000000060208201526006908051620000979291602001906200014b565b506008805460ff19169055635c0117e16009553415620000b657600080fd5b60038054600160a060020a03191633600160a060020a03161790556a61c5d2d6e2381e2300000060005560408051908101604052601181527f4d61676e757320436f6c6c65637469766500000000000000000000000000000060208201526004908051620001299291602001906200014b565b5060008054600160a060020a03331682526001602052604090912055620001f0565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200018e57805160ff1916838001178555620001be565b82800160010185558215620001be579182015b82811115620001be578251825591602001919060010190620001a1565b50620001cc929150620001d0565b5090565b620001ed91905b80821115620001cc5760008155600101620001d7565b90565b61114f80620002006000396000f30060606040526004361061011c5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610121578063095ea7b3146101ab57806318160ddd146101e157806323b872dd14610206578063313ce5671461022e57806336f7ab5e14610241578063493a8d0c14610254578063661884631461026757806370a08231146102895780638da5cb5b146102a857806395d89b41146102d7578063a9059cbb146102ea578063b967a52e1461030c578063cf914a871461035f578063d3f9fc3314610383578063d73dd623146103a5578063d8a119b9146103c7578063dd62ed3e146103f1578063e4165e1514610416578063f2fde38b14610429578063f57be85d14610448575b600080fd5b341561012c57600080fd5b61013461045b565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610170578082015183820152602001610158565b50505050905090810190601f16801561019d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101b657600080fd5b6101cd600160a060020a03600435166024356104f9565b604051901515815260200160405180910390f35b34156101ec57600080fd5b6101f4610592565b60405190815260200160405180910390f35b341561021157600080fd5b6101cd600160a060020a0360043581169060243516604435610598565b341561023957600080fd5b6101f461071a565b341561024c57600080fd5b61013461071f565b341561025f57600080fd5b6101cd61078a565b341561027257600080fd5b6101cd600160a060020a0360043516602435610793565b341561029457600080fd5b6101f4600160a060020a036004351661088d565b34156102b357600080fd5b6102bb6108a8565b604051600160a060020a03909116815260200160405180910390f35b34156102e257600080fd5b6101346108b7565b34156102f557600080fd5b6101cd600160a060020a0360043516602435610922565b341561031757600080fd5b61035d60046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506109b395505050505050565b005b341561036a57600080fd5b61035d600160a060020a036004351660243515156109e5565b341561038e57600080fd5b61035d600160a060020a0360043516602435610a2b565b34156103b057600080fd5b6101cd600160a060020a0360043516602435610b86565b34156103d257600080fd5b61035d6024600480358281019290820135918135918201910135610c2a565b34156103fc57600080fd5b6101f4600160a060020a0360043581169060243516610c75565b341561042157600080fd5b61035d610ca0565b341561043457600080fd5b61035d600160a060020a0360043516610d65565b341561045357600080fd5b61035d610e00565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104f15780601f106104c6576101008083540402835291602001916104f1565b820191906000526020600020905b8154815290600101906020018083116104d457829003601f168201915b505050505081565b60085460009060ff168061051b575060035433600160a060020a039081169116145b8061053e5750600160a060020a03331660009081526007602052604090205460ff165b151561054957600080fd5b82600160a060020a038116151561055f57600080fd5b30600160a060020a031681600160a060020a03161415151561058057600080fd5b61058a8484610e8b565b949350505050565b60005481565b6000600160a060020a03831615156105af57600080fd5b600160a060020a0384166000908152600160205260409020548211156105d457600080fd5b600160a060020a038085166000908152600260209081526040808320339094168352929052205482111561060757600080fd5b600160a060020a038416600090815260016020526040902054610630908363ffffffff610ef716565b600160a060020a038086166000908152600160205260408082209390935590851681522054610665908363ffffffff610f0916565b600160a060020a038085166000908152600160209081526040808320949094558783168252600281528382203390931682529190915220546106ad908363ffffffff610ef716565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b601281565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104f15780601f106104c6576101008083540402835291602001916104f1565b60085460ff1681565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054808311156107f057600160a060020a033381166000908152600260209081526040808320938816835292905290812055610827565b610800818463ffffffff610ef716565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526001602052604090205490565b600354600160a060020a031681565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104f15780601f106104c6576101008083540402835291602001916104f1565b60085460009060ff1680610944575060035433600160a060020a039081169116145b806109675750600160a060020a03331660009081526007602052604090205460ff165b151561097257600080fd5b82600160a060020a038116151561098857600080fd5b30600160a060020a031681600160a060020a0316141515156109a957600080fd5b61058a8484610f1f565b60035433600160a060020a039081169116146109ce57600080fd5b60048180516109e192916020019061101a565b5050565b60035433600160a060020a03908116911614610a0057600080fd5b600160a060020a03919091166000908152600760205260409020805460ff1916911515919091179055565b60035433600160a060020a03908116911614610a4657600080fd5b600160a060020a0382161515610a5b57600080fd5b6009544210610a6957600080fd5b600160a060020a038216600090815260016020526040902054811115610a8e57600080fd5b600160a060020a038216600090815260016020526040812054610ab7908363ffffffff610ef716565b1015610ac257600080fd5b600160a060020a038216600090815260016020526040902054610aeb908263ffffffff610ef716565b600160a060020a038084166000908152600160205260408082209390935560035490911681522054610b23908263ffffffff610f0916565b60038054600160a060020a0390811660009081526001602052604090819020939093559054811691908416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a35050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610bbe908363ffffffff610f0916565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b60035433600160a060020a03908116911614610c4557600080fd5b60085460ff1615610c5557600080fd5b610c6160058585611098565b50610c6e60068383611098565b5050505050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a03908116911614610cbb57600080fd5b60085460ff1680610cda575060035433600160a060020a039081169116145b80610cfd5750600160a060020a03331660009081526007602052604090205460ff165b1515610d0857600080fd5b60065460006002600019610100600185161502019092169190910411610d2d57600080fd5b6008805460ff191690557f36a26fd90c4757b43193c61fa87b3dbc608c1a8ccd52713050d837207d39bb5560405160405180910390a1565b60035433600160a060020a03908116911614610d8057600080fd5b600160a060020a0381161515610d9557600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60035433600160a060020a03908116911614610e1b57600080fd5b60085460ff1615610e2b57600080fd5b60065460006002600019610100600185161502019092169190910411610e5057600080fd5b6008805460ff191660011790557f59e798dd1d3a9153861118fd83fbf10d33d3d30467f7649ac8da2a453a74201460405160405180910390a1565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b600082821115610f0357fe5b50900390565b600082820183811015610f1857fe5b9392505050565b6000600160a060020a0383161515610f3657600080fd5b600160a060020a033316600090815260016020526040902054821115610f5b57600080fd5b600160a060020a033316600090815260016020526040902054610f84908363ffffffff610ef716565b600160a060020a033381166000908152600160205260408082209390935590851681522054610fb9908363ffffffff610f0916565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061105b57805160ff1916838001178555611088565b82800160010185558215611088579182015b8281111561108857825182559160200191906001019061106d565b50611094929150611106565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106110d95782800160ff19823516178555611088565b82800160010185558215611088579182015b828111156110885782358255916020019190600101906110eb565b61112091905b80821115611094576000815560010161110c565b905600a165627a7a723058204c8699023a7e7b9b6b63abe13255835ded8f6d78f080b13423f3f0ae3ce0ecd50029"
}