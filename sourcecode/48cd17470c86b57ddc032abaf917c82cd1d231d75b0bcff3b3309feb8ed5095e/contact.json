{
  "address": "0x3beb29c87e39c3a0ec1b14c17fba901f69759db5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Etoken",
  "compilerVersion": "v0.4.13+commit.fb4cb1a",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-25\n*/\n\npragma solidity ^0.4.13;\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) returns (bool);\n  function approve(address spender, uint256 value) returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a); \n    return a - b; \n  } \n  \n  function add(uint256 a, uint256 b) internal constant returns (uint256) { \n    uint256 c = a + b; assert(c >= a);\n    return c;\n  }\n\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    \n    require(_to != address(0));\n    require(_value <= balances[msg.sender]); \n    \n    // SafeMath.sub will throw if there is not enough balance. \n    balances[msg.sender] = balances[msg.sender].sub(_value); \n    balances[_to] = balances[_to].add(_value); \n    Transfer(msg.sender, _to, _value); \n    return true; \n  } \n\n  /** \n   * @dev Gets the balance of the specified address. \n   * @param _owner The address to query the the balance of. \n   * @return An uint256 representing the amount owned by the passed address. \n   */ \n  function balanceOf(address _owner) public constant returns (uint256 balance) { \n    return balances[_owner]; \n  } \n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    require (_value <= _allowance);\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable is BasicToken {\n  address public owner;\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n    totalSupply = 10000000000*10**3;\n    balances[owner] = balances[owner].add(totalSupply);\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n}\n\ncontract Etoken is StandardToken, Ownable {\n    \n    string public constant name = \"Etoken\";\n    \n    string public constant symbol = \"ETK\";\n    \n    uint32 public constant decimals = 3;\n    \n    event DelegatedTransfer(address indexed from, address indexed to, address indexed delegate, uint256 value, uint256 fee);\n  \n    function delegatedTransfer(address _from, address _to, uint256 _value, uint256 _fee) onlyOwner public returns (bool) {\n    \n    \tuint256 total = _value.add(_fee);\n    \trequire(_from != address(0));\n    \trequire(_to != address(0));\n    \trequire(total <= balances[_from]);\n    \n    \taddress delegate = owner;\n    \n    \tbalances[_from] = balances[_from].sub(total);\n    \tbalances[_to] = balances[_to].add(_value);\n    \tbalances[delegate] = balances[delegate].add(_fee);\n    \n    \tDelegatedTransfer(_from, _to, delegate, _value, _fee);\n    \treturn true;\n    }\n    \n}",
  "bytecode": "60606040525b60038054600160a060020a03191633600160a060020a0390811691909117918290556509184e72a0006000818155929091168252600160205260409091205461005a9164010000000061007b81026108ca1704565b600354600160a060020a03166000908152600160205260409020555b610095565b60008282018381101561008a57fe5b8091505b5092915050565b610927806100a46000396000f300606060405236156100ac5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100b1578063095ea7b31461013c57806318160ddd146101725780631b2087861461019757806323b872dd146101d6578063313ce5671461021257806370a082311461023e5780638da5cb5b1461026f57806395d89b411461029e578063a9059cbb14610329578063dd62ed3e1461035f575b600080fd5b34156100bc57600080fd5b6100c4610396565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101015780820151818401525b6020016100e8565b50505050905090810190601f16801561012e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561014757600080fd5b61015e600160a060020a03600435166024356103cd565b604051901515815260200160405180910390f35b341561017d57600080fd5b610185610474565b60405190815260200160405180910390f35b34156101a257600080fd5b61015e600160a060020a036004358116906024351660443560643561047a565b604051901515815260200160405180910390f35b34156101e157600080fd5b61015e600160a060020a036004358116906024351660443561060a565b604051901515815260200160405180910390f35b341561021d57600080fd5b610225610737565b60405163ffffffff909116815260200160405180910390f35b341561024957600080fd5b610185600160a060020a036004351661073c565b60405190815260200160405180910390f35b341561027a57600080fd5b61028261075b565b604051600160a060020a03909116815260200160405180910390f35b34156102a957600080fd5b6100c461076a565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101015780820151818401525b6020016100e8565b50505050905090810190601f16801561012e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561033457600080fd5b61015e600160a060020a03600435166024356107a1565b604051901515815260200160405180910390f35b341561036a57600080fd5b610185600160a060020a036004358116906024351661089d565b60405190815260200160405180910390f35b60408051908101604052600681527f45746f6b656e0000000000000000000000000000000000000000000000000000602082015281565b60008115806103ff5750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b151561040a57600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60005481565b6003546000908190819033600160a060020a0390811691161461049c57600080fd5b6104ac858563ffffffff6108ca16565b9150600160a060020a03871615156104c357600080fd5b600160a060020a03861615156104d857600080fd5b600160a060020a0387166000908152600160205260409020548211156104fd57600080fd5b50600354600160a060020a0387811660009081526001602052604090205491169061052e908363ffffffff6108e416565b600160a060020a038089166000908152600160205260408082209390935590881681522054610563908663ffffffff6108ca16565b600160a060020a038088166000908152600160205260408082209390935590831681522054610598908563ffffffff6108ca16565b600160a060020a03808316600081815260016020526040908190209390935591888216918a16907f10530815e5daa4b508f5168cb7e80dbe7d5564ee6c7c31cf84113639f92b6f4690899089905191825260208201526040908101905180910390a4600192505b5b5050949350505050565b600160a060020a038084166000908152600260209081526040808320339094168352929052908120548083111561064057600080fd5b600160a060020a038416600090815260016020526040902054610669908463ffffffff6108ca16565b600160a060020a03808616600090815260016020526040808220939093559087168152205461069e908463ffffffff6108e416565b600160a060020a0386166000908152600160205260409020556106c7818463ffffffff6108e416565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3600191505b509392505050565b600381565b600160a060020a0381166000908152600160205260409020545b919050565b600354600160a060020a031681565b60408051908101604052600381527f45544b0000000000000000000000000000000000000000000000000000000000602082015281565b6000600160a060020a03831615156107b857600080fd5b600160a060020a0333166000908152600160205260409020548211156107dd57600080fd5b600160a060020a033316600090815260016020526040902054610806908363ffffffff6108e416565b600160a060020a03338116600090815260016020526040808220939093559085168152205461083b908363ffffffff6108ca16565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b92915050565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b6000828201838110156108d957fe5b8091505b5092915050565b6000828211156108f057fe5b508082035b929150505600a165627a7a723058203112d0ba0161360350c312ec7f5b85b677d8609c0212725ea92f234ddea78e2f0029"
}