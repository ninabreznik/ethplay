{
  "address": "0x663e4229142a27f00bafb5d087e1e730648314c3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PandaCore",
  "compilerVersion": "v0.4.24-nightly.2018.4.24+commit.258ae892",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-07\n*/\n\npragma solidity ^0.4.11;\n\n\ncontract ERC20 {\n    function totalSupply() constant returns (uint supply);\n    function balanceOf( address who ) constant returns (uint value);\n    function allowance( address owner, address spender ) constant returns (uint _allowance);\n\n    function transfer( address to, uint value) returns (bool ok);\n    function transferFrom( address from, address to, uint value) returns (bool ok);\n    function approve( address spender, uint value ) returns (bool ok);\n\n    event Transfer( address indexed from, address indexed to, uint value);\n    event Approval( address indexed owner, address indexed spender, uint value);\n}\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n}\n\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n/// @author Dieter Shirley <[emailÂ protected]> (https://github.com/dete)\ncontract ERC721 {\n    // Required methods\n    function totalSupply() public view returns (uint256 total);\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\n    function approve(address _to, uint256 _tokenId) external;\n    function transfer(address _to, uint256 _tokenId) external;\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n\n    // Events\n    event Transfer(address from, address to, uint256 tokenId);\n    event Approval(address owner, address approved, uint256 tokenId);\n\n    // Optional\n    // function name() public view returns (string name);\n    // function symbol() public view returns (string symbol);\n    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\n    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\n\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\n}\n\ncontract GeneScienceInterface {\n    /// @dev simply a boolean to indicate this is the contract we expect to be\n    function isGeneScience() public pure returns (bool);\n\n    /// @dev given genes of kitten 1 & 2, return a genetic combination - may have a random factor\n    /// @param genes1 genes of mom\n    /// @param genes2 genes of sire\n    /// @return the genes that are supposed to be passed down the child\n    function mixGenes(uint256[2] genes1, uint256[2] genes2,uint256 g1,uint256 g2, uint256 targetBlock) public returns (uint256[2]);\n\n    function getPureFromGene(uint256[2] gene) public view returns(uint256);\n\n    /// @dev get sex from genes 0: female 1: male\n    function getSex(uint256[2] gene) public view returns(uint256);\n\n    /// @dev get wizz type from gene\n    function getWizzType(uint256[2] gene) public view returns(uint256);\n\n    function clearWizzType(uint256[2] _gene) public returns(uint256[2]);\n}\n\n/// @title A facet of PandaCore that manages special access privileges.\n/// @author Axiom Zen (https://www.axiomzen.co)\n/// @dev See the PandaCore contract documentation to understand how the various contract facets are arranged.\ncontract PandaAccessControl {\n    // This facet controls access control for CryptoPandas. There are four roles managed here:\n    //\n    //     - The CEO: The CEO can reassign other roles and change the addresses of our dependent smart\n    //         contracts. It is also the only role that can unpause the smart contract. It is initially\n    //         set to the address that created the smart contract in the PandaCore constructor.\n    //\n    //     - The CFO: The CFO can withdraw funds from PandaCore and its auction contracts.\n    //\n    //     - The COO: The COO can release gen0 pandas to auction, and mint promo cats.\n    //\n    // It should be noted that these roles are distinct without overlap in their access abilities, the\n    // abilities listed for each role above are exhaustive. In particular, while the CEO can assign any\n    // address to any role, the CEO address itself doesn't have the ability to act in those roles. This\n    // restriction is intentional so that we aren't tempted to use the CEO address frequently out of\n    // convenience. The less we use an address, the less likely it is that we somehow compromise the\n    // account.\n\n    /// @dev Emited when contract is upgraded - See README.md for updgrade plan\n    event ContractUpgrade(address newContract);\n\n    // The addresses of the accounts (or contracts) that can execute actions within each roles.\n    address public ceoAddress;\n    address public cfoAddress;\n    address public cooAddress;\n\n    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\n    bool public paused = false;\n\n    /// @dev Access modifier for CEO-only functionality\n    modifier onlyCEO() {\n        require(msg.sender == ceoAddress);\n        _;\n    }\n\n    /// @dev Access modifier for CFO-only functionality\n    modifier onlyCFO() {\n        require(msg.sender == cfoAddress);\n        _;\n    }\n\n    /// @dev Access modifier for COO-only functionality\n    modifier onlyCOO() {\n        require(msg.sender == cooAddress);\n        _;\n    }\n\n    modifier onlyCLevel() {\n        require(\n            msg.sender == cooAddress ||\n            msg.sender == ceoAddress ||\n            msg.sender == cfoAddress\n        );\n        _;\n    }\n\n    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\n    /// @param _newCEO The address of the new CEO\n    function setCEO(address _newCEO) external onlyCEO {\n        require(_newCEO != address(0));\n\n        ceoAddress = _newCEO;\n    }\n\n    /// @dev Assigns a new address to act as the CFO. Only available to the current CEO.\n    /// @param _newCFO The address of the new CFO\n    function setCFO(address _newCFO) external onlyCEO {\n        require(_newCFO != address(0));\n\n        cfoAddress = _newCFO;\n    }\n\n    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\n    /// @param _newCOO The address of the new COO\n    function setCOO(address _newCOO) external onlyCEO {\n        require(_newCOO != address(0));\n\n        cooAddress = _newCOO;\n    }\n\n    /*** Pausable functionality adapted from OpenZeppelin ***/\n\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /// @dev Modifier to allow actions only when the contract IS paused\n    modifier whenPaused {\n        require(paused);\n        _;\n    }\n\n    /// @dev Called by any \"C-level\" role to pause the contract. Used only when\n    ///  a bug or exploit is detected and we need to limit damage.\n    function pause() external onlyCLevel whenNotPaused {\n        paused = true;\n    }\n\n    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\n    ///  one reason we may pause the contract is when CFO or COO accounts are\n    ///  compromised.\n    /// @notice This is public rather than external so it can be called by\n    ///  derived contracts.\n    function unpause() public onlyCEO whenPaused {\n        // can't unpause if contract was upgraded\n        paused = false;\n    }\n}\n\n\n\n\n\n\n\n\n/// @title Base contract for CryptoPandas. Holds all common structs, events and base variables.\n/// @author Axiom Zen (https://www.axiomzen.co)\n/// @dev See the PandaCore contract documentation to understand how the various contract facets are arranged.\ncontract PandaBase is PandaAccessControl {\n    /*** EVENTS ***/\n\n    uint256 public constant GEN0_TOTAL_COUNT = 16200;\n    uint256 public gen0CreatedCount;\n\n    /// @dev The Birth event is fired whenever a new kitten comes into existence. This obviously\n    ///  includes any time a cat is created through the giveBirth method, but it is also called\n    ///  when a new gen0 cat is created.\n    event Birth(address owner, uint256 pandaId, uint256 matronId, uint256 sireId, uint256[2] genes);\n\n    /// @dev Transfer event as defined in current draft of ERC721. Emitted every time a kitten\n    ///  ownership is assigned, including births.\n    event Transfer(address from, address to, uint256 tokenId);\n\n    /*** DATA TYPES ***/\n\n    /// @dev The main Panda struct. Every cat in CryptoPandas is represented by a copy\n    ///  of this structure, so great care was taken to ensure that it fits neatly into\n    ///  exactly two 256-bit words. Note that the order of the members in this structure\n    ///  Ref: http://solidity.readthedocs.io/en/develop/miscellaneous.html\n    struct Panda {\n        // The Panda's genetic code is packed into these 256-bits, the format is\n        // sooper-sekret! A cat's genes never change.\n        uint256[2] genes;\n\n        // The timestamp from the block when this cat came into existence.\n        uint64 birthTime;\n\n        // The minimum timestamp after which this cat can engage in breeding\n        // activities again. This same timestamp is used for the pregnancy\n        // timer (for matrons) as well as the siring cooldown.\n        uint64 cooldownEndBlock;\n\n        // The ID of the parents of this panda, set to 0 for gen0 cats.\n        // Note that using 32-bit unsigned integers limits us to a \"mere\"\n        // 4 billion cats. This number might seem small until you realize\n        // that Ethereum currently has a limit of about 500 million\n        // transactions per year! So, this definitely won't be a problem\n        // for several years (even as Ethereum learns to scale).\n        uint32 matronId;\n        uint32 sireId;\n\n        // Set to the ID of the sire cat for matrons that are pregnant,\n        // zero otherwise. A non-zero value here is how we know a cat\n        // is pregnant. Used to retrieve the genetic material for the new\n        // kitten when the birth transpires.\n        uint32 siringWithId;\n\n        // Set to the index in the cooldown array (see below) that represents\n        // the current cooldown duration for this Panda. This starts at zero\n        // for gen0 cats, and is initialized to floor(generation/2) for others.\n        // Incremented by one for each successful breeding action, regardless\n        // of whether this cat is acting as matron or sire.\n        uint16 cooldownIndex;\n\n        // The \"generation number\" of this cat. Cats minted by the CK contract\n        // for sale are called \"gen0\" and have a generation number of 0. The\n        // generation number of all other cats is the larger of the two generation\n        // numbers of their parents, plus one.\n        // (i.e. max(matron.generation, sire.generation) + 1)\n        uint16 generation;\n    }\n\n    /*** CONSTANTS ***/\n\n    /// @dev A lookup table indicating the cooldown duration after any successful\n    ///  breeding action, called \"pregnancy time\" for matrons and \"siring cooldown\"\n    ///  for sires. Designed such that the cooldown roughly doubles each time a cat\n    ///  is bred, encouraging owners not to just keep breeding the same cat over\n    ///  and over again. Caps out at one week (a cat can breed an unbounded number\n    ///  of times, and the maximum cooldown is always seven days).\n    uint32[9] public cooldowns = [\n        uint32(5 minutes),\n        uint32(30 minutes),\n        uint32(2 hours),\n        uint32(4 hours),    \n        uint32(8 hours),\n        uint32(24 hours),\n        uint32(48 hours),\n        uint32(72 hours),\n        uint32(7 days)\n    ];\n\n    // An approximation of currently how many seconds are in between blocks.\n    uint256 public secondsPerBlock = 15;\n\n    /*** STORAGE ***/\n\n    /// @dev An array containing the Panda struct for all Pandas in existence. The ID\n    ///  of each cat is actually an index into this array. Note that ID 0 is a negacat,\n    ///  the unPanda, the mythical beast that is the parent of all gen0 cats. A bizarre\n    ///  creature that is both matron and sire... to itself! Has an invalid genetic code.\n    ///  In other words, cat ID 0 is invalid... ;-)\n    Panda[] pandas;\n\n    /// @dev A mapping from cat IDs to the address that owns them. All cats have\n    ///  some valid owner address, even gen0 cats are created with a non-zero owner.\n    mapping (uint256 => address) public pandaIndexToOwner;\n\n    // @dev A mapping from owner address to count of tokens that address owns.\n    //  Used internally inside balanceOf() to resolve ownership count.\n    mapping (address => uint256) ownershipTokenCount;\n\n    /// @dev A mapping from PandaIDs to an address that has been approved to call\n    ///  transferFrom(). Each Panda can only have one approved address for transfer\n    ///  at any time. A zero value means no approval is outstanding.\n    mapping (uint256 => address) public pandaIndexToApproved;\n\n    /// @dev A mapping from PandaIDs to an address that has been approved to use\n    ///  this Panda for siring via breedWith(). Each Panda can only have one approved\n    ///  address for siring at any time. A zero value means no approval is outstanding.\n    mapping (uint256 => address) public sireAllowedToAddress;\n\n    /// @dev The address of the ClockAuction contract that handles sales of Pandas. This\n    ///  same contract handles both peer-to-peer sales as well as the gen0 sales which are\n    ///  initiated every 15 minutes.\n    SaleClockAuction public saleAuction;\n\n    /// @dev The address of a custom ClockAuction subclassed contract that handles siring\n    ///  auctions. Needs to be separate from saleAuction because the actions taken on success\n    ///  after a sales and siring auction are quite different.\n    SiringClockAuction public siringAuction;\n\n\n    /// @dev The address of the sibling contract that is used to implement the sooper-sekret\n    ///  genetic combination algorithm.\n    GeneScienceInterface public geneScience;\n\n\n    SaleClockAuctionERC20 public saleAuctionERC20;\n\n\n    // wizz panda total\n    mapping (uint256 => uint256) public wizzPandaQuota;\n    mapping (uint256 => uint256) public wizzPandaCount;\n\n    \n    /// wizz panda control\n    function getWizzPandaQuotaOf(uint256 _tp) view external returns(uint256) {\n        return wizzPandaQuota[_tp];\n    }\n\n    function getWizzPandaCountOf(uint256 _tp) view external returns(uint256) {\n        return wizzPandaCount[_tp];\n    }\n\n    function setTotalWizzPandaOf(uint256 _tp,uint256 _total) external onlyCLevel {\n        require (wizzPandaQuota[_tp]==0);\n        require (_total==uint256(uint32(_total)));\n        wizzPandaQuota[_tp] = _total;\n    }\n\n    function getWizzTypeOf(uint256 _id) view external returns(uint256) {\n        Panda memory _p = pandas[_id];\n        return geneScience.getWizzType(_p.genes);\n    }\n\n    /// @dev Assigns ownership of a specific Panda to an address.\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n        // Since the number of kittens is capped to 2^32 we can't overflow this\n        ownershipTokenCount[_to]++;\n        // transfer ownership\n        pandaIndexToOwner[_tokenId] = _to;\n        // When creating new kittens _from is 0x0, but we can't account that address.\n        if (_from != address(0)) {\n            ownershipTokenCount[_from]--;\n            // once the kitten is transferred also clear sire allowances\n            delete sireAllowedToAddress[_tokenId];\n            // clear any previously approved ownership exchange\n            delete pandaIndexToApproved[_tokenId];\n        }\n        // Emit the transfer event.\n        Transfer(_from, _to, _tokenId);\n    }\n\n    /// @dev An internal method that creates a new panda and stores it. This\n    ///  method doesn't do any checking and should only be called when the\n    ///  input data is known to be valid. Will generate both a Birth event\n    ///  and a Transfer event.\n    /// @param _matronId The panda ID of the matron of this cat (zero for gen0)\n    /// @param _sireId The panda ID of the sire of this cat (zero for gen0)\n    /// @param _generation The generation number of this cat, must be computed by caller.\n    /// @param _genes The panda's genetic code.\n    /// @param _owner The inital owner of this cat, must be non-zero (except for the unPanda, ID 0)\n    function _createPanda(\n        uint256 _matronId,\n        uint256 _sireId,\n        uint256 _generation,\n        uint256[2] _genes,\n        address _owner\n    )\n        internal\n        returns (uint)\n    {\n        // These requires are not strictly necessary, our calling code should make\n        // sure that these conditions are never broken. However! _createPanda() is already\n        // an expensive call (for storage), and it doesn't hurt to be especially careful\n        // to ensure our data structures are always valid.\n        require(_matronId == uint256(uint32(_matronId)));\n        require(_sireId == uint256(uint32(_sireId)));\n        require(_generation == uint256(uint16(_generation)));\n\n\n        // New panda starts with the same cooldown as parent gen/2\n        uint16 cooldownIndex = 0;\n        // when contract creation, geneScience ref is null \n        if (pandas.length>0){\n            uint16 pureDegree = uint16(geneScience.getPureFromGene(_genes));\n            if (pureDegree==0) {\n                pureDegree = 1;\n            }\n            cooldownIndex = 1000/pureDegree;\n            if (cooldownIndex%10 < 5){\n                cooldownIndex = cooldownIndex/10;\n            }else{\n                cooldownIndex = cooldownIndex/10 + 1;\n            }\n            cooldownIndex = cooldownIndex - 1;\n            if (cooldownIndex > 8) {\n                cooldownIndex = 8;\n            }\n            uint256 _tp = geneScience.getWizzType(_genes);\n            if (_tp>0 && wizzPandaQuota[_tp]<=wizzPandaCount[_tp]) {\n                _genes = geneScience.clearWizzType(_genes);\n                _tp = 0;\n            }\n            // gensis panda cooldownIndex should be 24 hours\n            if (_tp == 1){\n                cooldownIndex = 5;\n            }\n\n            // increase wizz counter\n            if (_tp>0){\n                wizzPandaCount[_tp] = wizzPandaCount[_tp] + 1;\n            }\n            // all gen0&gen1 except gensis\n            if (_generation <= 1 && _tp != 1){\n                require(gen0CreatedCount<GEN0_TOTAL_COUNT);\n                gen0CreatedCount++;\n            }\n        }\n\n        Panda memory _panda = Panda({\n            genes: _genes,\n            birthTime: uint64(now),\n            cooldownEndBlock: 0,\n            matronId: uint32(_matronId),\n            sireId: uint32(_sireId),\n            siringWithId: 0,\n            cooldownIndex: cooldownIndex,\n            generation: uint16(_generation)\n        });\n        uint256 newKittenId = pandas.push(_panda) - 1;\n\n        // It's probably never going to happen, 4 billion cats is A LOT, but\n        // let's just be 100% sure we never let this happen.\n        require(newKittenId == uint256(uint32(newKittenId)));\n\n        // emit the birth event\n        Birth(\n            _owner,\n            newKittenId,\n            uint256(_panda.matronId),\n            uint256(_panda.sireId),\n            _panda.genes\n        );\n\n        // This will assign ownership, and also emit the Transfer event as\n        // per ERC721 draft\n        _transfer(0, _owner, newKittenId);\n        \n        return newKittenId;\n    }\n\n    // Any C-level can fix how many seconds per blocks are currently observed.\n    function setSecondsPerBlock(uint256 secs) external onlyCLevel {\n        require(secs < cooldowns[0]);\n        secondsPerBlock = secs;\n    }\n}\n/// @title The external contract that is responsible for generating metadata for the pandas,\n///  it has one function that will return the data as bytes.\ncontract ERC721Metadata {\n    /// @dev Given a token Id, returns a byte array that is supposed to be converted into string.\n    function getMetadata(uint256 _tokenId, string) public view returns (bytes32[4] buffer, uint256 count) {\n        if (_tokenId == 1) {\n            buffer[0] = \"Hello World! :D\";\n            count = 15;\n        } else if (_tokenId == 2) {\n            buffer[0] = \"I would definitely choose a medi\";\n            buffer[1] = \"um length string.\";\n            count = 49;\n        } else if (_tokenId == 3) {\n            buffer[0] = \"Lorem ipsum dolor sit amet, mi e\";\n            buffer[1] = \"st accumsan dapibus augue lorem,\";\n            buffer[2] = \" tristique vestibulum id, libero\";\n            buffer[3] = \" suscipit varius sapien aliquam.\";\n            count = 128;\n        }\n    }\n}\n\n\n\n\n\n\n\n/// @title The facet of the CryptoPandas core contract that manages ownership, ERC-721 (draft) compliant.\n/// @author Axiom Zen (https://www.axiomzen.co)\n/// @dev Ref: https://github.com/ethereum/EIPs/issues/721\n///  See the PandaCore contract documentation to understand how the various contract facets are arranged.\ncontract PandaOwnership is PandaBase, ERC721 {\n\n    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\n    string public constant name = \"PandaEarth\";\n    string public constant symbol = \"PE\";\n\n    bytes4 constant InterfaceSignature_ERC165 =\n        bytes4(keccak256('supportsInterface(bytes4)'));\n\n    bytes4 constant InterfaceSignature_ERC721 =\n        bytes4(keccak256('name()')) ^\n        bytes4(keccak256('symbol()')) ^\n        bytes4(keccak256('totalSupply()')) ^\n        bytes4(keccak256('balanceOf(address)')) ^\n        bytes4(keccak256('ownerOf(uint256)')) ^\n        bytes4(keccak256('approve(address,uint256)')) ^\n        bytes4(keccak256('transfer(address,uint256)')) ^\n        bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n        bytes4(keccak256('tokensOfOwner(address)')) ^\n        bytes4(keccak256('tokenMetadata(uint256,string)'));\n\n    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\n    ///  Returns true for any standardized interfaces implemented by this contract. We implement\n    ///  ERC-165 (obviously!) and ERC-721.\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool)\n    {\n        // DEBUG ONLY\n        //require((InterfaceSignature_ERC165 == 0x01ffc9a7) && (InterfaceSignature_ERC721 == 0x9a20483d));\n\n        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\n    }\n\n    // Internal utility functions: These functions all assume that their input arguments\n    // are valid. We leave it to public methods to sanitize their inputs and follow\n    // the required logic.\n\n    /// @dev Checks if a given address is the current owner of a particular Panda.\n    /// @param _claimant the address we are validating against.\n    /// @param _tokenId kitten id, only valid when > 0\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\n        return pandaIndexToOwner[_tokenId] == _claimant;\n    }\n\n    /// @dev Checks if a given address currently has transferApproval for a particular Panda.\n    /// @param _claimant the address we are confirming kitten is approved for.\n    /// @param _tokenId kitten id, only valid when > 0\n    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\n        return pandaIndexToApproved[_tokenId] == _claimant;\n    }\n\n    /// @dev Marks an address as being approved for transferFrom(), overwriting any previous\n    ///  approval. Setting _approved to address(0) clears all transfer approval.\n    ///  NOTE: _approve() does NOT send the Approval event. This is intentional because\n    ///  _approve() and transferFrom() are used together for putting Pandas on auction, and\n    ///  there is no value in spamming the log with Approval events in that case.\n    function _approve(uint256 _tokenId, address _approved) internal {\n        pandaIndexToApproved[_tokenId] = _approved;\n    }\n\n    /// @notice Returns the number of Pandas owned by a specific address.\n    /// @param _owner The owner address to check.\n    /// @dev Required for ERC-721 compliance\n    function balanceOf(address _owner) public view returns (uint256 count) {\n        return ownershipTokenCount[_owner];\n    }\n\n    /// @notice Transfers a Panda to another address. If transferring to a smart\n    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 (or\n    ///  CryptoPandas specifically) or your Panda may be lost forever. Seriously.\n    /// @param _to The address of the recipient, can be a user or contract.\n    /// @param _tokenId The ID of the Panda to transfer.\n    /// @dev Required for ERC-721 compliance.\n    function transfer(\n        address _to,\n        uint256 _tokenId\n    )\n        external\n        whenNotPaused\n    {\n        // Safety check to prevent against an unexpected 0x0 default.\n        require(_to != address(0));\n        // Disallow transfers to this contract to prevent accidental misuse.\n        // The contract should never own any pandas (except very briefly\n        // after a gen0 cat is created and before it goes on auction).\n        require(_to != address(this));\n        // Disallow transfers to the auction contracts to prevent accidental\n        // misuse. Auction contracts should only take ownership of pandas\n        // through the allow + transferFrom flow.\n        require(_to != address(saleAuction));\n        require(_to != address(siringAuction));\n\n        // You can only send your own cat.\n        require(_owns(msg.sender, _tokenId));\n\n        // Reassign ownership, clear pending approvals, emit Transfer event.\n        _transfer(msg.sender, _to, _tokenId);\n    }\n\n    /// @notice Grant another address the right to transfer a specific Panda via\n    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.\n    /// @param _to The address to be granted transfer approval. Pass address(0) to\n    ///  clear all approvals.\n    /// @param _tokenId The ID of the Panda that can be transferred if this call succeeds.\n    /// @dev Required for ERC-721 compliance.\n    function approve(\n        address _to,\n        uint256 _tokenId\n    )\n        external\n        whenNotPaused\n    {\n        // Only an owner can grant transfer approval.\n        require(_owns(msg.sender, _tokenId));\n\n        // Register the approval (replacing any previous approval).\n        _approve(_tokenId, _to);\n\n        // Emit approval event.\n        Approval(msg.sender, _to, _tokenId);\n    }\n\n    /// @notice Transfer a Panda owned by another address, for which the calling address\n    ///  has previously been granted transfer approval by the owner.\n    /// @param _from The address that owns the Panda to be transfered.\n    /// @param _to The address that should take ownership of the Panda. Can be any address,\n    ///  including the caller.\n    /// @param _tokenId The ID of the Panda to be transferred.\n    /// @dev Required for ERC-721 compliance.\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    )\n        external\n        whenNotPaused\n    {\n        // Safety check to prevent against an unexpected 0x0 default.\n        require(_to != address(0));\n        // Disallow transfers to this contract to prevent accidental misuse.\n        // The contract should never own any pandas (except very briefly\n        // after a gen0 cat is created and before it goes on auction).\n        require(_to != address(this));\n        // Check for approval and valid ownership\n        require(_approvedFor(msg.sender, _tokenId));\n        require(_owns(_from, _tokenId));\n\n        // Reassign ownership (also clears pending approvals and emits Transfer event).\n        _transfer(_from, _to, _tokenId);\n    }\n\n    /// @notice Returns the total number of Pandas currently in existence.\n    /// @dev Required for ERC-721 compliance.\n    function totalSupply() public view returns (uint) {\n        return pandas.length - 1;\n    }\n\n    /// @notice Returns the address currently assigned ownership of a given Panda.\n    /// @dev Required for ERC-721 compliance.\n    function ownerOf(uint256 _tokenId)\n        external\n        view\n        returns (address owner)\n    {\n        owner = pandaIndexToOwner[_tokenId];\n\n        require(owner != address(0));\n    }\n\n    /// @notice Returns a list of all Panda IDs assigned to an address.\n    /// @param _owner The owner whose Pandas we are interested in.\n    /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\n    ///  expensive (it walks the entire Panda array looking for cats belonging to owner),\n    ///  but it also returns a dynamic array, which is only supported for web3 calls, and\n    ///  not contract-to-contract calls.\n    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\n        uint256 tokenCount = balanceOf(_owner);\n\n        if (tokenCount == 0) {\n            // Return an empty array\n            return new uint256[](0);\n        } else {\n            uint256[] memory result = new uint256[](tokenCount);\n            uint256 totalCats = totalSupply();\n            uint256 resultIndex = 0;\n\n            // We count on the fact that all cats have IDs starting at 1 and increasing\n            // sequentially up to the totalCat count.\n            uint256 catId;\n\n            for (catId = 1; catId <= totalCats; catId++) {\n                if (pandaIndexToOwner[catId] == _owner) {\n                    result[resultIndex] = catId;\n                    resultIndex++;\n                }\n            }\n\n            return result;\n        }\n    }\n\n    /// @dev Adapted from memcpy() by @arachnid (Nick Johnson <[emailÂ protected]>)\n    ///  This method is licenced under the Apache License.\n    ///  Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol\n    function _memcpy(uint _dest, uint _src, uint _len) private view {\n        // Copy word-length chunks while possible\n        for(; _len >= 32; _len -= 32) {\n            assembly {\n                mstore(_dest, mload(_src))\n            }\n            _dest += 32;\n            _src += 32;\n        }\n\n        // Copy remaining bytes\n        uint256 mask = 256 ** (32 - _len) - 1;\n        assembly {\n            let srcpart := and(mload(_src), not(mask))\n            let destpart := and(mload(_dest), mask)\n            mstore(_dest, or(destpart, srcpart))\n        }\n    }\n\n    /// @dev Adapted from toString(slice) by @arachnid (Nick Johnson <[emailÂ protected]>)\n    ///  This method is licenced under the Apache License.\n    ///  Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol\n    function _toString(bytes32[4] _rawBytes, uint256 _stringLength) private view returns (string) {\n        var outputString = new string(_stringLength);\n        uint256 outputPtr;\n        uint256 bytesPtr;\n\n        assembly {\n            outputPtr := add(outputString, 32)\n            bytesPtr := _rawBytes\n        }\n\n        _memcpy(outputPtr, bytesPtr, _stringLength);\n\n        return outputString;\n    }\n\n}\n\n\n\n\n/// @title A facet of PandaCore that manages Panda siring, gestation, and birth.\n/// @author Axiom Zen (https://www.axiomzen.co)\n/// @dev See the PandaCore contract documentation to understand how the various contract facets are arranged.\ncontract PandaBreeding is PandaOwnership {\n\n    uint256 public constant GENSIS_TOTAL_COUNT = 100;\n\n    /// @dev The Pregnant event is fired when two cats successfully breed and the pregnancy\n    ///  timer begins for the matron.\n    event Pregnant(address owner, uint256 matronId, uint256 sireId, uint256 cooldownEndBlock);\n    /// @dev The Abortion event is fired when two cats breed failed.\n    event Abortion(address owner, uint256 matronId, uint256 sireId);\n\n    /// @notice The minimum payment required to use breedWithAuto(). This fee goes towards\n    ///  the gas cost paid by whatever calls giveBirth(), and can be dynamically updated by\n    ///  the COO role as the gas price changes.\n    uint256 public autoBirthFee = 2 finney;\n\n    // Keeps track of number of pregnant pandas.\n    uint256 public pregnantPandas;\n\n    mapping(uint256 => address) childOwner;\n\n\n    /// @dev Update the address of the genetic contract, can only be called by the CEO.\n    /// @param _address An address of a GeneScience contract instance to be used from this point forward.\n    function setGeneScienceAddress(address _address) external onlyCEO {\n        GeneScienceInterface candidateContract = GeneScienceInterface(_address);\n\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\n        require(candidateContract.isGeneScience());\n\n        // Set the new contract address\n        geneScience = candidateContract;\n    }\n\n    /// @dev Checks that a given kitten is able to breed. Requires that the\n    ///  current cooldown is finished (for sires) and also checks that there is\n    ///  no pending pregnancy.\n    function _isReadyToBreed(Panda _kit) internal view returns(bool) {\n        // In addition to checking the cooldownEndBlock, we also need to check to see if\n        // the cat has a pending birth; there can be some period of time between the end\n        // of the pregnacy timer and the birth event.\n        return (_kit.siringWithId == 0) && (_kit.cooldownEndBlock <= uint64(block.number));\n    }\n\n    /// @dev Check if a sire has authorized breeding with this matron. True if both sire\n    ///  and matron have the same owner, or if the sire has given siring permission to\n    ///  the matron's owner (via approveSiring()).\n    function _isSiringPermitted(uint256 _sireId, uint256 _matronId) internal view returns(bool) {\n        address matronOwner = pandaIndexToOwner[_matronId];\n        address sireOwner = pandaIndexToOwner[_sireId];\n\n        // Siring is okay if they have same owner, or if the matron's owner was given\n        // permission to breed with this sire.\n        return (matronOwner == sireOwner || sireAllowedToAddress[_sireId] == matronOwner);\n    }\n\n    /// @dev Set the cooldownEndTime for the given Panda, based on its current cooldownIndex.\n    ///  Also increments the cooldownIndex (unless it has hit the cap).\n    /// @param _kitten A reference to the Panda in storage which needs its timer started.\n    function _triggerCooldown(Panda storage _kitten) internal {\n        // Compute an estimation of the cooldown time in blocks (based on current cooldownIndex).\n        _kitten.cooldownEndBlock = uint64((cooldowns[_kitten.cooldownIndex] / secondsPerBlock) + block.number);\n\n\n        // Increment the breeding count, clamping it at 13, which is the length of the\n        // cooldowns array. We could check the array size dynamically, but hard-coding\n        // this as a constant saves gas. Yay, Solidity!\n        if (_kitten.cooldownIndex < 8 && geneScience.getWizzType(_kitten.genes) != 1) {\n            _kitten.cooldownIndex += 1;\n        }\n    }\n\n    /// @notice Grants approval to another user to sire with one of your Pandas.\n    /// @param _addr The address that will be able to sire with your Panda. Set to\n    ///  address(0) to clear all siring approvals for this Panda.\n    /// @param _sireId A Panda that you own that _addr will now be able to sire with.\n    function approveSiring(address _addr, uint256 _sireId)\n    external\n    whenNotPaused {\n        require(_owns(msg.sender, _sireId));\n        sireAllowedToAddress[_sireId] = _addr;\n    }\n\n    /// @dev Updates the minimum payment required for calling giveBirthAuto(). Can only\n    ///  be called by the COO address. (This fee is used to offset the gas cost incurred\n    ///  by the autobirth daemon).\n    function setAutoBirthFee(uint256 val) external onlyCOO {\n        autoBirthFee = val;\n    }\n\n    /// @dev Checks to see if a given Panda is pregnant and (if so) if the gestation\n    ///  period has passed.\n    function _isReadyToGiveBirth(Panda _matron) private view returns(bool) {\n        return (_matron.siringWithId != 0) && (_matron.cooldownEndBlock <= uint64(block.number));\n    }\n\n    /// @notice Checks that a given kitten is able to breed (i.e. it is not pregnant or\n    ///  in the middle of a siring cooldown).\n    /// @param _pandaId reference the id of the kitten, any user can inquire about it\n    function isReadyToBreed(uint256 _pandaId)\n    public\n    view\n    returns(bool) {\n        require(_pandaId > 0);\n        Panda storage kit = pandas[_pandaId];\n        return _isReadyToBreed(kit);\n    }\n\n    /// @dev Checks whether a panda is currently pregnant.\n    /// @param _pandaId reference the id of the kitten, any user can inquire about it\n    function isPregnant(uint256 _pandaId)\n    public\n    view\n    returns(bool) {\n        require(_pandaId > 0);\n        // A panda is pregnant if and only if this field is set\n        return pandas[_pandaId].siringWithId != 0;\n    }\n\n    /// @dev Internal check to see if a given sire and matron are a valid mating pair. DOES NOT\n    ///  check ownership permissions (that is up to the caller).\n    /// @param _matron A reference to the Panda struct of the potential matron.\n    /// @param _matronId The matron's ID.\n    /// @param _sire A reference to the Panda struct of the potential sire.\n    /// @param _sireId The sire's ID\n    function _isValidMatingPair(\n        Panda storage _matron,\n        uint256 _matronId,\n        Panda storage _sire,\n        uint256 _sireId\n    )\n    private\n    view\n    returns(bool) {\n        // A Panda can't breed with itself!\n        if (_matronId == _sireId) {\n            return false;\n        }\n\n        // Pandas can't breed with their parents.\n        if (_matron.matronId == _sireId || _matron.sireId == _sireId) {\n            return false;\n        }\n        if (_sire.matronId == _matronId || _sire.sireId == _matronId) {\n            return false;\n        }\n\n        // We can short circuit the sibling check (below) if either cat is\n        // gen zero (has a matron ID of zero).\n        if (_sire.matronId == 0 || _matron.matronId == 0) {\n            return true;\n        }\n\n        // Pandas can't breed with full or half siblings.\n        if (_sire.matronId == _matron.matronId || _sire.matronId == _matron.sireId) {\n            return false;\n        }\n        if (_sire.sireId == _matron.matronId || _sire.sireId == _matron.sireId) {\n            return false;\n        }\n\n        // male should get breed with female\n        if (geneScience.getSex(_matron.genes) + geneScience.getSex(_sire.genes) != 1) {\n            return false;\n        }\n\n        // Everything seems cool! Let's get DTF.\n        return true;\n    }\n\n    /// @dev Internal check to see if a given sire and matron are a valid mating pair for\n    ///  breeding via auction (i.e. skips ownership and siring approval checks).\n    function _canBreedWithViaAuction(uint256 _matronId, uint256 _sireId)\n    internal\n    view\n    returns(bool) {\n        Panda storage matron = pandas[_matronId];\n        Panda storage sire = pandas[_sireId];\n        return _isValidMatingPair(matron, _matronId, sire, _sireId);\n    }\n\n    /// @notice Checks to see if two cats can breed together, including checks for\n    ///  ownership and siring approvals. Does NOT check that both cats are ready for\n    ///  breeding (i.e. breedWith could still fail until the cooldowns are finished).\n    ///  TODO: Shouldn't this check pregnancy and cooldowns?!?\n    /// @param _matronId The ID of the proposed matron.\n    /// @param _sireId The ID of the proposed sire.\n    function canBreedWith(uint256 _matronId, uint256 _sireId)\n    external\n    view\n    returns(bool) {\n        require(_matronId > 0);\n        require(_sireId > 0);\n        Panda storage matron = pandas[_matronId];\n        Panda storage sire = pandas[_sireId];\n        return _isValidMatingPair(matron, _matronId, sire, _sireId) &&\n            _isSiringPermitted(_sireId, _matronId);\n    }\n\n    function _exchangeMatronSireId(uint256 _matronId, uint256 _sireId) internal returns(uint256, uint256) {\n        if (geneScience.getSex(pandas[_matronId].genes) == 1) {\n            return (_sireId, _matronId);\n        } else {\n            return (_matronId, _sireId);\n        }\n    }\n\n    /// @dev Internal utility function to initiate breeding, assumes that all breeding\n    ///  requirements have been checked.\n    function _breedWith(uint256 _matronId, uint256 _sireId, address _owner) internal {\n        // make id point real gender\n        (_matronId, _sireId) = _exchangeMatronSireId(_matronId, _sireId);\n        // Grab a reference to the Pandas from storage.\n        Panda storage sire = pandas[_sireId];\n        Panda storage matron = pandas[_matronId];\n\n        // Mark the matron as pregnant, keeping track of who the sire is.\n        matron.siringWithId = uint32(_sireId);\n\n        // Trigger the cooldown for both parents.\n        _triggerCooldown(sire);\n        _triggerCooldown(matron);\n\n        // Clear siring permission for both parents. This may not be strictly necessary\n        // but it's likely to avoid confusion!\n        delete sireAllowedToAddress[_matronId];\n        delete sireAllowedToAddress[_sireId];\n\n        // Every time a panda gets pregnant, counter is incremented.\n        pregnantPandas++;\n\n        childOwner[_matronId] = _owner;\n\n        // Emit the pregnancy event.\n        Pregnant(pandaIndexToOwner[_matronId], _matronId, _sireId, matron.cooldownEndBlock);\n    }\n\n    /// @notice Breed a Panda you own (as matron) with a sire that you own, or for which you\n    ///  have previously been given Siring approval. Will either make your cat pregnant, or will\n    ///  fail entirely. Requires a pre-payment of the fee given out to the first caller of giveBirth()\n    /// @param _matronId The ID of the Panda acting as matron (will end up pregnant if successful)\n    /// @param _sireId The ID of the Panda acting as sire (will begin its siring cooldown if successful)\n    function breedWithAuto(uint256 _matronId, uint256 _sireId)\n    external\n    payable\n    whenNotPaused {\n        // Checks for payment.\n        require(msg.value >= autoBirthFee);\n\n        // Caller must own the matron.\n        require(_owns(msg.sender, _matronId));\n\n        // Neither sire nor matron are allowed to be on auction during a normal\n        // breeding operation, but we don't need to check that explicitly.\n        // For matron: The caller of this function can't be the owner of the matron\n        //   because the owner of a Panda on auction is the auction house, and the\n        //   auction house will never call breedWith().\n        // For sire: Similarly, a sire on auction will be owned by the auction house\n        //   and the act of transferring ownership will have cleared any oustanding\n        //   siring approval.\n        // Thus we don't need to spend gas explicitly checking to see if either cat\n        // is on auction.\n\n        // Check that matron and sire are both owned by caller, or that the sire\n        // has given siring permission to caller (i.e. matron's owner).\n        // Will fail for _sireId = 0\n        require(_isSiringPermitted(_sireId, _matronId));\n\n        // Grab a reference to the potential matron\n        Panda storage matron = pandas[_matronId];\n\n        // Make sure matron isn't pregnant, or in the middle of a siring cooldown\n        require(_isReadyToBreed(matron));\n\n        // Grab a reference to the potential sire\n        Panda storage sire = pandas[_sireId];\n\n        // Make sure sire isn't pregnant, or in the middle of a siring cooldown\n        require(_isReadyToBreed(sire));\n\n        // Test that these cats are a valid mating pair.\n        require(_isValidMatingPair(\n            matron,\n            _matronId,\n            sire,\n            _sireId\n        ));\n\n        // All checks passed, panda gets pregnant!\n        _breedWith(_matronId, _sireId, msg.sender);\n    }\n\n    /// @notice Have a pregnant Panda give birth!\n    /// @param _matronId A Panda ready to give birth.\n    /// @return The Panda ID of the new kitten.\n    /// @dev Looks at a given Panda and, if pregnant and if the gestation period has passed,\n    ///  combines the genes of the two parents to create a new kitten. The new Panda is assigned\n    ///  to the current owner of the matron. Upon successful completion, both the matron and the\n    ///  new kitten will be ready to breed again. Note that anyone can call this function (if they\n    ///  are willing to pay the gas!), but the new kitten always goes to the mother's owner.\n    function giveBirth(uint256 _matronId, uint256[2] _childGenes, uint256[2] _factors)\n    external\n    whenNotPaused\n    onlyCLevel\n    returns(uint256) {\n        // Grab a reference to the matron in storage.\n        Panda storage matron = pandas[_matronId];\n\n        // Check that the matron is a valid cat.\n        require(matron.birthTime != 0);\n\n        // Check that the matron is pregnant, and that its time has come!\n        require(_isReadyToGiveBirth(matron));\n\n        // Grab a reference to the sire in storage.\n        uint256 sireId = matron.siringWithId;\n        Panda storage sire = pandas[sireId];\n\n        // Determine the higher generation number of the two parents\n        uint16 parentGen = matron.generation;\n        if (sire.generation > matron.generation) {\n            parentGen = sire.generation;\n        }\n\n        // Call the sooper-sekret gene mixing operation.\n        //uint256[2] memory childGenes = geneScience.mixGenes(matron.genes, sire.genes,matron.generation,sire.generation, matron.cooldownEndBlock - 1);\n        uint256[2] memory childGenes = _childGenes;\n\n        uint256 kittenId = 0;\n\n        // birth failed\n        uint256 probability = (geneScience.getPureFromGene(matron.genes) + geneScience.getPureFromGene(sire.genes)) / 2 + _factors[0];\n        if (probability >= (parentGen + 1) * _factors[1]) {\n            probability = probability - (parentGen + 1) * _factors[1];\n        } else {\n            probability = 0;\n        }\n        if (parentGen == 0 && gen0CreatedCount == GEN0_TOTAL_COUNT) {\n            probability = 0;\n        }\n        if (uint256(keccak256(block.blockhash(block.number - 2), now)) % 100 < probability) {\n            // Make the new kitten!\n            address owner = childOwner[_matronId];\n            kittenId = _createPanda(_matronId, matron.siringWithId, parentGen + 1, childGenes, owner);\n        } else {\n            Abortion(pandaIndexToOwner[_matronId], _matronId, sireId);\n        }\n        // Make the new kitten!\n        //address owner = pandaIndexToOwner[_matronId];\n        //address owner = childOwner[_matronId];\n        //uint256 kittenId = _createPanda(_matronId, matron.siringWithId, parentGen + 1, childGenes, owner);\n\n        // Clear the reference to sire from the matron (REQUIRED! Having siringWithId\n        // set is what marks a matron as being pregnant.)\n        delete matron.siringWithId;\n\n        // Every time a panda gives birth counter is decremented.\n        pregnantPandas--;\n\n        // Send the balance fee to the person who made birth happen.\n        msg.sender.send(autoBirthFee);\n\n        delete childOwner[_matronId];\n\n        // return the new kitten's ID\n        return kittenId;\n    }\n}\n\n\n\n\n\n/// @title Auction Core\n/// @dev Contains models, variables, and internal methods for the auction.\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\ncontract ClockAuctionBase {\n\n    // Represents an auction on an NFT\n    struct Auction {\n        // Current owner of NFT\n        address seller;\n        // Price (in wei) at beginning of auction\n        uint128 startingPrice;\n        // Price (in wei) at end of auction\n        uint128 endingPrice;\n        // Duration (in seconds) of auction\n        uint64 duration;\n        // Time when auction started\n        // NOTE: 0 if this auction has been concluded\n        uint64 startedAt;\n        // is this auction for gen0 panda\n        uint64 isGen0;\n    }\n\n    // Reference to contract tracking NFT ownership\n    ERC721 public nonFungibleContract;\n\n    // Cut owner takes on each auction, measured in basis points (1/100 of a percent).\n    // Values 0-10,000 map to 0%-100%\n    uint256 public ownerCut;\n\n    // Map from token ID to their corresponding auction.\n    mapping (uint256 => Auction) tokenIdToAuction;\n\n    event AuctionCreated(uint256 tokenId, uint256 startingPrice, uint256 endingPrice, uint256 duration);\n    event AuctionSuccessful(uint256 tokenId, uint256 totalPrice, address winner);\n    event AuctionCancelled(uint256 tokenId);\n\n    /// @dev Returns true if the claimant owns the token.\n    /// @param _claimant - Address claiming to own the token.\n    /// @param _tokenId - ID of token whose ownership to verify.\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\n        return (nonFungibleContract.ownerOf(_tokenId) == _claimant);\n    }\n\n    /// @dev Escrows the NFT, assigning ownership to this contract.\n    /// Throws if the escrow fails.\n    /// @param _owner - Current owner address of token to escrow.\n    /// @param _tokenId - ID of token whose approval to verify.\n    function _escrow(address _owner, uint256 _tokenId) internal {\n        // it will throw if transfer fails\n        nonFungibleContract.transferFrom(_owner, this, _tokenId);\n    }\n\n    /// @dev Transfers an NFT owned by this contract to another address.\n    /// Returns true if the transfer succeeds.\n    /// @param _receiver - Address to transfer NFT to.\n    /// @param _tokenId - ID of token to transfer.\n    function _transfer(address _receiver, uint256 _tokenId) internal {\n        // it will throw if transfer fails\n        nonFungibleContract.transfer(_receiver, _tokenId);\n    }\n\n    /// @dev Adds an auction to the list of open auctions. Also fires the\n    ///  AuctionCreated event.\n    /// @param _tokenId The ID of the token to be put on auction.\n    /// @param _auction Auction to add.\n    function _addAuction(uint256 _tokenId, Auction _auction) internal {\n        // Require that all auctions have a duration of\n        // at least one minute. (Keeps our math from getting hairy!)\n        require(_auction.duration >= 1 minutes);\n\n        tokenIdToAuction[_tokenId] = _auction;\n\n        AuctionCreated(\n            uint256(_tokenId),\n            uint256(_auction.startingPrice),\n            uint256(_auction.endingPrice),\n            uint256(_auction.duration)\n        );\n    } \n\n    /// @dev Cancels an auction unconditionally.\n    function _cancelAuction(uint256 _tokenId, address _seller) internal {\n        _removeAuction(_tokenId);\n        _transfer(_seller, _tokenId);\n        AuctionCancelled(_tokenId);\n    }\n\n    /// @dev Computes the price and transfers winnings.\n    /// Does NOT transfer ownership of token.\n    function _bid(uint256 _tokenId, uint256 _bidAmount)\n        internal\n        returns (uint256)\n    {\n        // Get a reference to the auction struct\n        Auction storage auction = tokenIdToAuction[_tokenId];\n\n        // Explicitly check that this auction is currently live.\n        // (Because of how Ethereum mappings work, we can't just count\n        // on the lookup above failing. An invalid _tokenId will just\n        // return an auction object that is all zeros.)\n        require(_isOnAuction(auction));\n\n        // Check that the bid is greater than or equal to the current price\n        uint256 price = _currentPrice(auction);\n        require(_bidAmount >= price);\n\n        // Grab a reference to the seller before the auction struct\n        // gets deleted.\n        address seller = auction.seller;\n\n        // The bid is good! Remove the auction before sending the fees\n        // to the sender so we can't have a reentrancy attack.\n        _removeAuction(_tokenId);\n\n        // Transfer proceeds to seller (if there are any!)\n        if (price > 0) {\n            // Calculate the auctioneer's cut.\n            // (NOTE: _computeCut() is guaranteed to return a\n            // value <= price, so this subtraction can't go negative.)\n            uint256 auctioneerCut = _computeCut(price);\n            uint256 sellerProceeds = price - auctioneerCut;\n\n            // NOTE: Doing a transfer() in the middle of a complex\n            // method like this is generally discouraged because of\n            // reentrancy attacks and DoS attacks if the seller is\n            // a contract with an invalid fallback function. We explicitly\n            // guard against reentrancy attacks by removing the auction\n            // before calling transfer(), and the only thing the seller\n            // can DoS is the sale of their own asset! (And if it's an\n            // accident, they can call cancelAuction(). )\n            seller.transfer(sellerProceeds);\n        }\n\n        // Calculate any excess funds included with the bid. If the excess\n        // is anything worth worrying about, transfer it back to bidder.\n        // NOTE: We checked above that the bid amount is greater than or\n        // equal to the price so this cannot underflow.\n        uint256 bidExcess = _bidAmount - price;\n\n        // Return the funds. Similar to the previous transfer, this is\n        // not susceptible to a re-entry attack because the auction is\n        // removed before any transfers occur.\n        msg.sender.transfer(bidExcess);\n\n        // Tell the world!\n        AuctionSuccessful(_tokenId, price, msg.sender);\n\n        return price;\n    }\n\n\n\n    /// @dev Removes an auction from the list of open auctions.\n    /// @param _tokenId - ID of NFT on auction.\n    function _removeAuction(uint256 _tokenId) internal {\n        delete tokenIdToAuction[_tokenId];\n    }\n\n    /// @dev Returns true if the NFT is on auction.\n    /// @param _auction - Auction to check.\n    function _isOnAuction(Auction storage _auction) internal view returns (bool) {\n        return (_auction.startedAt > 0);\n    }\n\n    /// @dev Returns current price of an NFT on auction. Broken into two\n    ///  functions (this one, that computes the duration from the auction\n    ///  structure, and the other that does the price computation) so we\n    ///  can easily test that the price computation works correctly.\n    function _currentPrice(Auction storage _auction)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 secondsPassed = 0;\n\n        // A bit of insurance against negative values (or wraparound).\n        // Probably not necessary (since Ethereum guarnatees that the\n        // now variable doesn't ever go backwards).\n        if (now > _auction.startedAt) {\n            secondsPassed = now - _auction.startedAt;\n        }\n\n        return _computeCurrentPrice(\n            _auction.startingPrice,\n            _auction.endingPrice,\n            _auction.duration,\n            secondsPassed\n        );\n    }\n\n    /// @dev Computes the current price of an auction. Factored out\n    ///  from _currentPrice so we can run extensive unit tests.\n    ///  When testing, make this function public and turn on\n    ///  `Current price computation` test suite.\n    function _computeCurrentPrice(\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        uint256 _secondsPassed\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        // NOTE: We don't use SafeMath (or similar) in this function because\n        //  all of our public functions carefully cap the maximum values for\n        //  time (at 64-bits) and currency (at 128-bits). _duration is\n        //  also known to be non-zero (see the require() statement in\n        //  _addAuction())\n        if (_secondsPassed >= _duration) {\n            // We've reached the end of the dynamic pricing portion\n            // of the auction, just return the end price.\n            return _endingPrice;\n        } else {\n            // Starting price can be higher than ending price (and often is!), so\n            // this delta can be negative.\n            int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);\n\n            // This multiplication can't overflow, _secondsPassed will easily fit within\n            // 64-bits, and totalPriceChange will easily fit within 128-bits, their product\n            // will always fit within 256-bits.\n            int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);\n\n            // currentPriceChange can be negative, but if so, will have a magnitude\n            // less that _startingPrice. Thus, this result will always end up positive.\n            int256 currentPrice = int256(_startingPrice) + currentPriceChange;\n\n            return uint256(currentPrice);\n        }\n    }\n\n    /// @dev Computes owner's cut of a sale.\n    /// @param _price - Sale price of NFT.\n    function _computeCut(uint256 _price) internal view returns (uint256) {\n        // NOTE: We don't use SafeMath (or similar) in this function because\n        //  all of our entry functions carefully cap the maximum values for\n        //  currency (at 128-bits), and ownerCut <= 10000 (see the require()\n        //  statement in the ClockAuction constructor). The result of this\n        //  function is always guaranteed to be <= _price.\n        return _price * ownerCut / 10000;\n    }\n\n}\n\n\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev modifier to allow actions only when the contract IS paused\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev modifier to allow actions only when the contract IS NOT paused\n   */\n  modifier whenPaused {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused returns (bool) {\n    paused = true;\n    Pause();\n    return true;\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused returns (bool) {\n    paused = false;\n    Unpause();\n    return true;\n  }\n}\n\n\n/// @title Clock auction for non-fungible tokens.\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\ncontract ClockAuction is Pausable, ClockAuctionBase {\n\n    /// @dev The ERC-165 interface signature for ERC-721.\n    ///  Ref: https://github.com/ethereum/EIPs/issues/165\n    ///  Ref: https://github.com/ethereum/EIPs/issues/721\n    bytes4 constant InterfaceSignature_ERC721 = bytes4(0x9a20483d);\n\n    /// @dev Constructor creates a reference to the NFT ownership contract\n    ///  and verifies the owner cut is in the valid range.\n    /// @param _nftAddress - address of a deployed contract implementing\n    ///  the Nonfungible Interface.\n    /// @param _cut - percent cut the owner takes on each auction, must be\n    ///  between 0-10,000.\n    function ClockAuction(address _nftAddress, uint256 _cut) public {\n        require(_cut <= 10000);\n        ownerCut = _cut;\n\n        ERC721 candidateContract = ERC721(_nftAddress);\n        require(candidateContract.supportsInterface(InterfaceSignature_ERC721));\n        nonFungibleContract = candidateContract;\n    }\n\n    /// @dev Remove all Ether from the contract, which is the owner's cuts\n    ///  as well as any Ether sent directly to the contract address.\n    ///  Always transfers to the NFT contract, but can be called either by\n    ///  the owner or the NFT contract.\n    function withdrawBalance() external {\n        address nftAddress = address(nonFungibleContract);\n\n        require(\n            msg.sender == owner ||\n            msg.sender == nftAddress\n        );\n        // We are using this boolean method to make sure that even if one fails it will still work\n        bool res = nftAddress.send(this.balance);\n    }\n\n    /// @dev Creates and begins a new auction.\n    /// @param _tokenId - ID of token to auction, sender must be owner.\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\n    /// @param _duration - Length of time to move between starting\n    ///  price and ending price (in seconds).\n    /// @param _seller - Seller, if not the message sender\n    function createAuction(\n        uint256 _tokenId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        address _seller\n    )\n        external\n        whenNotPaused\n    {\n        // Sanity check that no inputs overflow how many bits we've allocated\n        // to store them in the auction struct.\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n        require(_duration == uint256(uint64(_duration)));\n\n        require(_owns(msg.sender, _tokenId));\n        _escrow(msg.sender, _tokenId);\n        Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now),\n            0\n        );\n        _addAuction(_tokenId, auction);\n    }\n\n    /// @dev Bids on an open auction, completing the auction and transferring\n    ///  ownership of the NFT if enough Ether is supplied.\n    /// @param _tokenId - ID of token to bid on.\n    function bid(uint256 _tokenId)\n        external\n        payable\n        whenNotPaused\n    {\n        // _bid will throw if the bid or funds transfer fails\n        _bid(_tokenId, msg.value);\n        _transfer(msg.sender, _tokenId);\n    }\n\n    /// @dev Cancels an auction that hasn't been won yet.\n    ///  Returns the NFT to original owner.\n    /// @notice This is a state-modifying function that can\n    ///  be called while the contract is paused.\n    /// @param _tokenId - ID of token on auction\n    function cancelAuction(uint256 _tokenId)\n        external\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        address seller = auction.seller;\n        require(msg.sender == seller);\n        _cancelAuction(_tokenId, seller);\n    }\n\n    /// @dev Cancels an auction when the contract is paused.\n    ///  Only the owner may do this, and NFTs are returned to\n    ///  the seller. This should only be used in emergencies.\n    /// @param _tokenId - ID of the NFT on auction to cancel.\n    function cancelAuctionWhenPaused(uint256 _tokenId)\n        whenPaused\n        onlyOwner\n        external\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        _cancelAuction(_tokenId, auction.seller);\n    }\n\n    /// @dev Returns auction info for an NFT on auction.\n    /// @param _tokenId - ID of NFT on auction.\n    function getAuction(uint256 _tokenId)\n        external\n        view\n        returns\n    (\n        address seller,\n        uint256 startingPrice,\n        uint256 endingPrice,\n        uint256 duration,\n        uint256 startedAt\n    ) {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        return (\n            auction.seller,\n            auction.startingPrice,\n            auction.endingPrice,\n            auction.duration,\n            auction.startedAt\n        );\n    }\n\n    /// @dev Returns the current price of an auction.\n    /// @param _tokenId - ID of the token price we are checking.\n    function getCurrentPrice(uint256 _tokenId)\n        external\n        view\n        returns (uint256)\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        return _currentPrice(auction);\n    }\n\n}\n\n\n\n\n/// @title Reverse auction modified for siring\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\ncontract SiringClockAuction is ClockAuction {\n\n    // @dev Sanity check that allows us to ensure that we are pointing to the\n    //  right auction in our setSiringAuctionAddress() call.\n    bool public isSiringClockAuction = true;\n\n    // Delegate constructor\n    function SiringClockAuction(address _nftAddr, uint256 _cut) public\n        ClockAuction(_nftAddr, _cut) {}\n\n    /// @dev Creates and begins a new auction. Since this function is wrapped,\n    /// require sender to be PandaCore contract.\n    /// @param _tokenId - ID of token to auction, sender must be owner.\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\n    /// @param _duration - Length of auction (in seconds).\n    /// @param _seller - Seller, if not the message sender\n    function createAuction(\n        uint256 _tokenId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        address _seller\n    )\n        external\n    {\n        // Sanity check that no inputs overflow how many bits we've allocated\n        // to store them in the auction struct.\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n        require(_duration == uint256(uint64(_duration)));\n\n        require(msg.sender == address(nonFungibleContract));\n        _escrow(_seller, _tokenId);\n        Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now),\n            0\n        );\n        _addAuction(_tokenId, auction);\n    }\n\n    /// @dev Places a bid for siring. Requires the sender\n    /// is the PandaCore contract because all bid methods\n    /// should be wrapped. Also returns the panda to the\n    /// seller rather than the winner.\n    function bid(uint256 _tokenId)\n        external\n        payable\n    {\n        require(msg.sender == address(nonFungibleContract));\n        address seller = tokenIdToAuction[_tokenId].seller;\n        // _bid checks that token ID is valid and will throw if bid fails\n        _bid(_tokenId, msg.value);\n        // We transfer the panda back to the seller, the winner will get\n        // the offspring\n        _transfer(seller, _tokenId);\n    }\n\n}\n\n\n\n\n/// @title Clock auction modified for sale of pandas\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\ncontract SaleClockAuction is ClockAuction {\n\n    // @dev Sanity check that allows us to ensure that we are pointing to the\n    //  right auction in our setSaleAuctionAddress() call.\n    bool public isSaleClockAuction = true;\n\n    // Tracks last 5 sale price of gen0 panda sales\n    uint256 public gen0SaleCount;\n    uint256[5] public lastGen0SalePrices;\n    uint256 public constant SurpriseValue = 10 finney;\n\n    uint256[] CommonPanda;\n    uint256[] RarePanda;\n    uint256   CommonPandaIndex;\n    uint256   RarePandaIndex;\n\n    // Delegate constructor\n    function SaleClockAuction(address _nftAddr, uint256 _cut) public\n        ClockAuction(_nftAddr, _cut) {\n            CommonPandaIndex = 1;\n            RarePandaIndex   = 1;\n    }\n\n    /// @dev Creates and begins a new auction.\n    /// @param _tokenId - ID of token to auction, sender must be owner.\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\n    /// @param _duration - Length of auction (in seconds).\n    /// @param _seller - Seller, if not the message sender\n    function createAuction(\n        uint256 _tokenId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        address _seller\n    )\n        external\n    {\n        // Sanity check that no inputs overflow how many bits we've allocated\n        // to store them in the auction struct.\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n        require(_duration == uint256(uint64(_duration)));\n\n        require(msg.sender == address(nonFungibleContract));\n        _escrow(_seller, _tokenId);\n        Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now),\n            0\n        );\n        _addAuction(_tokenId, auction);\n    }\n\n    function createGen0Auction(\n        uint256 _tokenId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        address _seller\n    )\n        external\n    {\n        // Sanity check that no inputs overflow how many bits we've allocated\n        // to store them in the auction struct.\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n        require(_duration == uint256(uint64(_duration)));\n\n        require(msg.sender == address(nonFungibleContract));\n        _escrow(_seller, _tokenId);\n        Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now),\n            1\n        );\n        _addAuction(_tokenId, auction);\n    }    \n\n    /// @dev Updates lastSalePrice if seller is the nft contract\n    /// Otherwise, works the same as default bid method.\n    function bid(uint256 _tokenId)\n        external\n        payable\n    {\n        // _bid verifies token ID size\n        uint64 isGen0 = tokenIdToAuction[_tokenId].isGen0;\n        uint256 price = _bid(_tokenId, msg.value);\n        _transfer(msg.sender, _tokenId);\n\n        // If not a gen0 auction, exit\n        if (isGen0 == 1) {\n            // Track gen0 sale prices\n            lastGen0SalePrices[gen0SaleCount % 5] = price;\n            gen0SaleCount++;\n        }\n    }\n\n    function createPanda(uint256 _tokenId,uint256 _type)\n        external\n    {\n        require(msg.sender == address(nonFungibleContract));\n        if (_type == 0) {\n            CommonPanda.push(_tokenId);\n        }else {\n            RarePanda.push(_tokenId);\n        }\n    }\n\n    function surprisePanda()\n        external\n        payable\n    {\n        bytes32 bHash = keccak256(block.blockhash(block.number),block.blockhash(block.number-1));\n        uint256 PandaIndex;\n        if (bHash[25] > 0xC8) {\n            require(uint256(RarePanda.length) >= RarePandaIndex);\n            PandaIndex = RarePandaIndex;\n            RarePandaIndex ++;\n\n        } else{\n            require(uint256(CommonPanda.length) >= CommonPandaIndex);\n            PandaIndex = CommonPandaIndex;\n            CommonPandaIndex ++;\n        }\n        _transfer(msg.sender,PandaIndex);\n    }\n\n    function packageCount() external view returns(uint256 common,uint256 surprise) {\n        common   = CommonPanda.length + 1 - CommonPandaIndex;\n        surprise = RarePanda.length + 1 - RarePandaIndex;\n    }\n\n    function averageGen0SalePrice() external view returns (uint256) {\n        uint256 sum = 0;\n        for (uint256 i = 0; i < 5; i++) {\n            sum += lastGen0SalePrices[i];\n        }\n        return sum / 5;\n    }\n\n}\n\n\n\n/// @title Clock auction modified for sale of pandas\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\ncontract SaleClockAuctionERC20 is ClockAuction {\n\n\n    event AuctionERC20Created(uint256 tokenId, uint256 startingPrice, uint256 endingPrice, uint256 duration, address erc20Contract);\n\n    // @dev Sanity check that allows us to ensure that we are pointing to the\n    //  right auction in our setSaleAuctionAddress() call.\n    bool public isSaleClockAuctionERC20 = true;\n\n    mapping (uint256 => address) public tokenIdToErc20Address;\n\n    mapping (address => uint256) public erc20ContractsSwitcher;\n\n    mapping (address => uint256) public balances;\n    \n    // Delegate constructor\n    function SaleClockAuctionERC20(address _nftAddr, uint256 _cut) public\n        ClockAuction(_nftAddr, _cut) {}\n\n    function erc20ContractSwitch(address _erc20address, uint256 _onoff) external{\n        require (msg.sender == address(nonFungibleContract));\n\n        require (_erc20address != address(0));\n\n        erc20ContractsSwitcher[_erc20address] = _onoff;\n    }\n    /// @dev Creates and begins a new auction.\n    /// @param _tokenId - ID of token to auction, sender must be owner.\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\n    /// @param _duration - Length of auction (in seconds).\n    /// @param _seller - Seller, if not the message sender\n    function createAuction(\n        uint256 _tokenId,\n        address _erc20Address,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        address _seller\n    )\n        external\n    {\n        // Sanity check that no inputs overflow how many bits we've allocated\n        // to store them in the auction struct.\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n        require(_duration == uint256(uint64(_duration)));\n\n        require(msg.sender == address(nonFungibleContract));\n\n        require (erc20ContractsSwitcher[_erc20Address] > 0);\n        \n        _escrow(_seller, _tokenId);\n        Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now),\n            0\n        );\n        _addAuctionERC20(_tokenId, auction, _erc20Address);\n        tokenIdToErc20Address[_tokenId] = _erc20Address;\n    }\n\n    /// @dev Adds an auction to the list of open auctions. Also fires the\n    ///  AuctionCreated event.\n    /// @param _tokenId The ID of the token to be put on auction.\n    /// @param _auction Auction to add.\n    function _addAuctionERC20(uint256 _tokenId, Auction _auction, address _erc20address) internal {\n        // Require that all auctions have a duration of\n        // at least one minute. (Keeps our math from getting hairy!)\n        require(_auction.duration >= 1 minutes);\n\n        tokenIdToAuction[_tokenId] = _auction;\n\n        AuctionERC20Created(\n            uint256(_tokenId),\n            uint256(_auction.startingPrice),\n            uint256(_auction.endingPrice),\n            uint256(_auction.duration),\n            _erc20address\n        );\n    }   \n\n    function bid(uint256 _tokenId)\n        external\n        payable{\n            // do nothing\n    }\n\n    /// @dev Updates lastSalePrice if seller is the nft contract\n    /// Otherwise, works the same as default bid method.\n    function bidERC20(uint256 _tokenId,uint256 _amount)\n        external\n    {\n        // _bid verifies token ID size\n        address seller = tokenIdToAuction[_tokenId].seller;\n        address _erc20address = tokenIdToErc20Address[_tokenId];\n        require (_erc20address != address(0));\n        uint256 price = _bidERC20(_erc20address,msg.sender,_tokenId, _amount);\n        _transfer(msg.sender, _tokenId);\n        delete tokenIdToErc20Address[_tokenId];\n    }\n\n    function cancelAuction(uint256 _tokenId)\n        external\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        address seller = auction.seller;\n        require(msg.sender == seller);\n        _cancelAuction(_tokenId, seller);\n        delete tokenIdToErc20Address[_tokenId];\n    }\n\n    function withdrawERC20Balance(address _erc20Address, address _to) external returns(bool res)  {\n        require (balances[_erc20Address] > 0);\n        require(msg.sender == address(nonFungibleContract));\n        ERC20(_erc20Address).transfer(_to, balances[_erc20Address]);\n    }\n    \n    /// @dev Computes the price and transfers winnings.\n    /// Does NOT transfer ownership of token.\n    function _bidERC20(address _erc20Address,address _buyerAddress, uint256 _tokenId, uint256 _bidAmount)\n        internal\n        returns (uint256)\n    {\n        // Get a reference to the auction struct\n        Auction storage auction = tokenIdToAuction[_tokenId];\n\n        // Explicitly check that this auction is currently live.\n        // (Because of how Ethereum mappings work, we can't just count\n        // on the lookup above failing. An invalid _tokenId will just\n        // return an auction object that is all zeros.)\n        require(_isOnAuction(auction));\n\n\n        require (_erc20Address != address(0) && _erc20Address == tokenIdToErc20Address[_tokenId]);\n        \n\n        // Check that the bid is greater than or equal to the current price\n        uint256 price = _currentPrice(auction);\n        require(_bidAmount >= price);\n\n        // Grab a reference to the seller before the auction struct\n        // gets deleted.\n        address seller = auction.seller;\n\n        // The bid is good! Remove the auction before sending the fees\n        // to the sender so we can't have a reentrancy attack.\n        _removeAuction(_tokenId);\n\n        // Transfer proceeds to seller (if there are any!)\n        if (price > 0) {\n            // Calculate the auctioneer's cut.\n            // (NOTE: _computeCut() is guaranteed to return a\n            // value <= price, so this subtraction can't go negative.)\n            uint256 auctioneerCut = _computeCut(price);\n            uint256 sellerProceeds = price - auctioneerCut;\n\n            // Send Erc20 Token to seller should call Erc20 contract\n            // Reference to contract\n            require(ERC20(_erc20Address).transferFrom(_buyerAddress,seller,sellerProceeds));\n            if (auctioneerCut > 0){\n                require(ERC20(_erc20Address).transferFrom(_buyerAddress,address(this),auctioneerCut));\n                balances[_erc20Address] += auctioneerCut;\n            }\n        }\n\n        // Tell the world!\n        AuctionSuccessful(_tokenId, price, msg.sender);\n\n        return price;\n    }\n}\n\n\n/// @title Handles creating auctions for sale and siring of pandas.\n///  This wrapper of ReverseAuction exists only so that users can create\n///  auctions with only one transaction.\ncontract PandaAuction is PandaBreeding {\n\n    // @notice The auction contract variables are defined in PandaBase to allow\n    //  us to refer to them in PandaOwnership to prevent accidental transfers.\n    // `saleAuction` refers to the auction for gen0 and p2p sale of pandas.\n    // `siringAuction` refers to the auction for siring rights of pandas.\n\n    /// @dev Sets the reference to the sale auction.\n    /// @param _address - Address of sale contract.\n    function setSaleAuctionAddress(address _address) external onlyCEO {\n        SaleClockAuction candidateContract = SaleClockAuction(_address);\n\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\n        require(candidateContract.isSaleClockAuction());\n\n        // Set the new contract address\n        saleAuction = candidateContract;\n    }\n\n    function setSaleAuctionERC20Address(address _address) external onlyCEO {\n        SaleClockAuctionERC20 candidateContract = SaleClockAuctionERC20(_address);\n\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\n        require(candidateContract.isSaleClockAuctionERC20());\n\n        // Set the new contract address\n        saleAuctionERC20 = candidateContract;\n    }\n\n    /// @dev Sets the reference to the siring auction.\n    /// @param _address - Address of siring contract.\n    function setSiringAuctionAddress(address _address) external onlyCEO {\n        SiringClockAuction candidateContract = SiringClockAuction(_address);\n\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\n        require(candidateContract.isSiringClockAuction());\n\n        // Set the new contract address\n        siringAuction = candidateContract;\n    }\n\n    /// @dev Put a panda up for auction.\n    ///  Does some ownership trickery to create auctions in one tx.\n    function createSaleAuction(\n        uint256 _pandaId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration\n    )\n        external\n        whenNotPaused\n    {\n        // Auction contract checks input sizes\n        // If panda is already on any auction, this will throw\n        // because it will be owned by the auction contract.\n        require(_owns(msg.sender, _pandaId));\n        // Ensure the panda is not pregnant to prevent the auction\n        // contract accidentally receiving ownership of the child.\n        // NOTE: the panda IS allowed to be in a cooldown.\n        require(!isPregnant(_pandaId));\n        _approve(_pandaId, saleAuction);\n        // Sale auction throws if inputs are invalid and clears\n        // transfer and sire approval after escrowing the panda.\n        saleAuction.createAuction(\n            _pandaId,\n            _startingPrice,\n            _endingPrice,\n            _duration,\n            msg.sender\n        );\n    }\n\n    /// @dev Put a panda up for auction.\n    ///  Does some ownership trickery to create auctions in one tx.\n    function createSaleAuctionERC20(\n        uint256 _pandaId,\n        address _erc20address,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration\n    )\n        external\n        whenNotPaused\n    {\n        // Auction contract checks input sizes\n        // If panda is already on any auction, this will throw\n        // because it will be owned by the auction contract.\n        require(_owns(msg.sender, _pandaId));\n        // Ensure the panda is not pregnant to prevent the auction\n        // contract accidentally receiving ownership of the child.\n        // NOTE: the panda IS allowed to be in a cooldown.\n        require(!isPregnant(_pandaId));\n        _approve(_pandaId, saleAuctionERC20);\n        // Sale auction throws if inputs are invalid and clears\n        // transfer and sire approval after escrowing the panda.\n        saleAuctionERC20.createAuction(\n            _pandaId,\n            _erc20address,\n            _startingPrice,\n            _endingPrice,\n            _duration,\n            msg.sender\n        );\n    }\n\n    function switchSaleAuctionERC20For(address _erc20address, uint256 _onoff) external onlyCOO{\n        saleAuctionERC20.erc20ContractSwitch(_erc20address,_onoff);\n    }\n\n\n    /// @dev Put a panda up for auction to be sire.\n    ///  Performs checks to ensure the panda can be sired, then\n    ///  delegates to reverse auction.\n    function createSiringAuction(\n        uint256 _pandaId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration\n    )\n        external\n        whenNotPaused\n    {\n        // Auction contract checks input sizes\n        // If panda is already on any auction, this will throw\n        // because it will be owned by the auction contract.\n        require(_owns(msg.sender, _pandaId));\n        require(isReadyToBreed(_pandaId));\n        _approve(_pandaId, siringAuction);\n        // Siring auction throws if inputs are invalid and clears\n        // transfer and sire approval after escrowing the panda.\n        siringAuction.createAuction(\n            _pandaId,\n            _startingPrice,\n            _endingPrice,\n            _duration,\n            msg.sender\n        );\n    }\n\n    /// @dev Completes a siring auction by bidding.\n    ///  Immediately breeds the winning matron with the sire on auction.\n    /// @param _sireId - ID of the sire on auction.\n    /// @param _matronId - ID of the matron owned by the bidder.\n    function bidOnSiringAuction(\n        uint256 _sireId,\n        uint256 _matronId\n    )\n        external\n        payable\n        whenNotPaused\n    {\n        // Auction contract checks input sizes\n        require(_owns(msg.sender, _matronId));\n        require(isReadyToBreed(_matronId));\n        require(_canBreedWithViaAuction(_matronId, _sireId));\n\n        // Define the current price of the auction.\n        uint256 currentPrice = siringAuction.getCurrentPrice(_sireId);\n        require(msg.value >= currentPrice + autoBirthFee);\n\n        // Siring auction will throw if the bid fails.\n        siringAuction.bid.value(msg.value - autoBirthFee)(_sireId);\n        _breedWith(uint32(_matronId), uint32(_sireId), msg.sender);\n    }\n\n    /// @dev Transfers the balance of the sale auction contract\n    /// to the PandaCore contract. We use two-step withdrawal to\n    /// prevent two transfer calls in the auction bid function.\n    function withdrawAuctionBalances() external onlyCLevel {\n        saleAuction.withdrawBalance();\n        siringAuction.withdrawBalance();\n    }\n\n\n    function withdrawERC20Balance(address _erc20Address, address _to) external onlyCLevel {\n        require(saleAuctionERC20 != address(0));\n        saleAuctionERC20.withdrawERC20Balance(_erc20Address,_to);\n    }    \n}\n\n\n\n\n\n/// @title all functions related to creating kittens\ncontract PandaMinting is PandaAuction {\n\n    // Limits the number of cats the contract owner can ever create.\n    //uint256 public constant PROMO_CREATION_LIMIT = 5000;\n    uint256 public constant GEN0_CREATION_LIMIT = 45000;\n\n\n    // Constants for gen0 auctions.\n    uint256 public constant GEN0_STARTING_PRICE = 100 finney;\n    uint256 public constant GEN0_AUCTION_DURATION = 1 days;\n    uint256 public constant OPEN_PACKAGE_PRICE = 10 finney;\n\n\n    // Counts the number of cats the contract owner has created.\n    //uint256 public promoCreatedCount;\n\n\n    /// @dev we can create promo kittens, up to a limit. Only callable by COO\n    /// @param _genes the encoded genes of the kitten to be created, any value is accepted\n    /// @param _owner the future owner of the created kittens. Default to contract COO\n    function createWizzPanda(uint256[2] _genes, uint256 _generation, address _owner) external onlyCOO {\n        address pandaOwner = _owner;\n        if (pandaOwner == address(0)) {\n            pandaOwner = cooAddress;\n        }\n\n        _createPanda(0, 0, _generation, _genes, pandaOwner);\n    }\n\n    /// @dev create pandaWithGenes\n    /// @param _genes panda genes\n    /// @param _type  0 common 1 rare\n    function createPanda(uint256[2] _genes,uint256 _generation,uint256 _type)\n        external\n        payable\n        onlyCOO\n        whenNotPaused\n    {\n        require(msg.value >= OPEN_PACKAGE_PRICE);\n        uint256 kittenId = _createPanda(0, 0, _generation, _genes, saleAuction);\n        saleAuction.createPanda(kittenId,_type);\n    }\n\n    //function buyPandaERC20(address _erc20Address, address _buyerAddress, uint256 _pandaID, uint256 _amount)\n    //external\n    //onlyCOO\n    //whenNotPaused {\n    //    saleAuctionERC20.bid(_erc20Address, _buyerAddress, _pandaID, _amount);\n    //}\n\n    /// @dev Creates a new gen0 panda with the given genes and\n    ///  creates an auction for it.\n    //function createGen0Auction(uint256[2] _genes) external onlyCOO {\n    //    require(gen0CreatedCount < GEN0_CREATION_LIMIT);\n    //\n    //    uint256 pandaId = _createPanda(0, 0, 0, _genes, address(this));\n    //    _approve(pandaId, saleAuction);\n    //\n    //    saleAuction.createAuction(\n    //        pandaId,\n    //        _computeNextGen0Price(),\n    //        0,\n    //        GEN0_AUCTION_DURATION,\n    //        address(this)\n    //    );\n    //\n    //    gen0CreatedCount++;\n    //}\n\n    function createGen0Auction(uint256 _pandaId) external onlyCOO {\n        require(_owns(msg.sender, _pandaId));\n        //require(pandas[_pandaId].generation==1);\n\n        _approve(_pandaId, saleAuction);\n\n        saleAuction.createGen0Auction(\n            _pandaId,\n            _computeNextGen0Price(),\n            0,\n            GEN0_AUCTION_DURATION,\n            msg.sender\n        );\n    }\n\n    /// @dev Computes the next gen0 auction starting price, given\n    ///  the average of the past 5 prices + 50%.\n    function _computeNextGen0Price() internal view returns(uint256) {\n        uint256 avePrice = saleAuction.averageGen0SalePrice();\n\n        // Sanity check to ensure we don't overflow arithmetic\n        require(avePrice == uint256(uint128(avePrice)));\n\n        uint256 nextPrice = avePrice + (avePrice / 2);\n\n        // We never auction for less than starting price\n        if (nextPrice < GEN0_STARTING_PRICE) {\n            nextPrice = GEN0_STARTING_PRICE;\n        }\n\n        return nextPrice;\n    }\n}\n\n\n\n/// @title CryptoPandas: Collectible, breedable, and oh-so-adorable cats on the Ethereum blockchain.\n/// @author Axiom Zen (https://www.axiomzen.co)\n/// @dev The main CryptoPandas contract, keeps track of kittens so they don't wander around and get lost.\ncontract PandaCore is PandaMinting {\n\n    // This is the main CryptoPandas contract. In order to keep our code seperated into logical sections,\n    // we've broken it up in two ways. First, we have several seperately-instantiated sibling contracts\n    // that handle auctions and our super-top-secret genetic combination algorithm. The auctions are\n    // seperate since their logic is somewhat complex and there's always a risk of subtle bugs. By keeping\n    // them in their own contracts, we can upgrade them without disrupting the main contract that tracks\n    // panda ownership. The genetic combination algorithm is kept seperate so we can open-source all of\n    // the rest of our code without making it _too_ easy for folks to figure out how the genetics work.\n    // Don't worry, I'm sure someone will reverse engineer it soon enough!\n    //\n    // Secondly, we break the core contract into multiple files using inheritence, one for each major\n    // facet of functionality of CK. This allows us to keep related code bundled together while still\n    // avoiding a single giant file with everything in it. The breakdown is as follows:\n    //\n    //      - PandaBase: This is where we define the most fundamental code shared throughout the core\n    //             functionality. This includes our main data storage, constants and data types, plus\n    //             internal functions for managing these items.\n    //\n    //      - PandaAccessControl: This contract manages the various addresses and constraints for operations\n    //             that can be executed only by specific roles. Namely CEO, CFO and COO.\n    //\n    //      - PandaOwnership: This provides the methods required for basic non-fungible token\n    //             transactions, following the draft ERC-721 spec (https://github.com/ethereum/EIPs/issues/721).\n    //\n    //      - PandaBreeding: This file contains the methods necessary to breed cats together, including\n    //             keeping track of siring offers, and relies on an external genetic combination contract.\n    //\n    //      - PandaAuctions: Here we have the public methods for auctioning or bidding on cats or siring\n    //             services. The actual auction functionality is handled in two sibling contracts (one\n    //             for sales and one for siring), while auction creation and bidding is mostly mediated\n    //             through this facet of the core contract.\n    //\n    //      - PandaMinting: This final facet contains the functionality we use for creating new gen0 cats.\n    //             the community is new), and all others can only be created and then immediately put up\n    //             for auction via an algorithmically determined starting price. Regardless of how they\n    //             are created, there is a hard limit of 50k gen0 cats. After that, it's all up to the\n    //             community to breed, breed, breed!\n\n    // Set in case the core contract is broken and an upgrade is required\n    address public newContractAddress;\n\n\n    /// @notice Creates the main CryptoPandas smart contract instance.\n    function PandaCore() public {\n        // Starts paused.\n        paused = true;\n\n        // the creator of the contract is the initial CEO\n        ceoAddress = msg.sender;\n\n        // the creator of the contract is also the initial COO\n        cooAddress = msg.sender;\n\n        // move these code to init(), so we not excceed gas limit\n        //uint256[2] memory _genes = [uint256(-1),uint256(-1)];\n\n        //wizzPandaQuota[1] = 100;\n\n        //_createPanda(0, 0, 0, _genes, address(0));\n    }\n\n    /// init contract\n    function init() external onlyCEO whenPaused {\n        // make sure init() only run once\n        require(pandas.length == 0);\n        // start with the mythical kitten 0 - so we don't have generation-0 parent issues\n        uint256[2] memory _genes = [uint256(-1),uint256(-1)];\n\n        wizzPandaQuota[1] = 100;\n       _createPanda(0, 0, 0, _genes, address(0));\n    }\n\n    /// @dev Used to mark the smart contract as upgraded, in case there is a serious\n    ///  breaking bug. This method does nothing but keep track of the new contract and\n    ///  emit a message indicating that the new address is set. It's up to clients of this\n    ///  contract to update to the new contract address in that case. (This contract will\n    ///  be paused indefinitely if such an upgrade takes place.)\n    /// @param _v2Address new address\n    function setNewAddress(address _v2Address) external onlyCEO whenPaused {\n        // See README.md for updgrade plan\n        newContractAddress = _v2Address;\n        ContractUpgrade(_v2Address);\n    }\n    \n\n    /// @notice No tipping!\n    /// @dev Reject all Ether from being sent here, unless it's from one of the\n    ///  two auction contracts. (Hopefully, we can prevent user accidents.)\n    function() external payable {\n        require(\n            msg.sender == address(saleAuction) ||\n            msg.sender == address(siringAuction)\n        );\n    }\n\n    /// @notice Returns all the relevant information about a specific panda.\n    /// @param _id The ID of the panda of interest.\n    function getPanda(uint256 _id)\n        external\n        view\n        returns (\n        bool isGestating,\n        bool isReady,\n        uint256 cooldownIndex,\n        uint256 nextActionAt,\n        uint256 siringWithId,\n        uint256 birthTime,\n        uint256 matronId,\n        uint256 sireId,\n        uint256 generation,\n        uint256[2] genes\n    ) {\n        Panda storage kit = pandas[_id];\n\n        // if this variable is 0 then it's not gestating\n        isGestating = (kit.siringWithId != 0);\n        isReady = (kit.cooldownEndBlock <= block.number);\n        cooldownIndex = uint256(kit.cooldownIndex);\n        nextActionAt = uint256(kit.cooldownEndBlock);\n        siringWithId = uint256(kit.siringWithId);\n        birthTime = uint256(kit.birthTime);\n        matronId = uint256(kit.matronId);\n        sireId = uint256(kit.sireId);\n        generation = uint256(kit.generation);\n        genes = kit.genes;\n    }\n\n    /// @dev Override unpause so it requires all external contract addresses\n    ///  to be set before contract can be unpaused. Also, we can't have\n    ///  newContractAddress set either, because then the contract was upgraded.\n    /// @notice This is public rather than external so we can call super.unpause\n    ///  without using an expensive CALL.\n    function unpause() public onlyCEO whenPaused {\n        require(saleAuction != address(0));\n        require(siringAuction != address(0));\n        require(geneScience != address(0));\n        require(newContractAddress == address(0));\n\n        // Actually unpause the contract.\n        super.unpause();\n    }\n\n    // @dev Allows the CFO to capture the balance available to the contract.\n    function withdrawBalance() external onlyCFO {\n        uint256 balance = this.balance;\n        // Subtract all the currently pregnant kittens we have, plus 1 of margin.\n        uint256 subtractFees = (pregnantPandas + 1) * autoBirthFee;\n\n        if (balance > subtractFees) {\n            cfoAddress.send(balance - subtractFees);\n        }\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GEN0_STARTING_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getPanda\",\"outputs\":[{\"name\":\"isGestating\",\"type\":\"bool\"},{\"name\":\"isReady\",\"type\":\"bool\"},{\"name\":\"cooldownIndex\",\"type\":\"uint256\"},{\"name\":\"nextActionAt\",\"type\":\"uint256\"},{\"name\":\"siringWithId\",\"type\":\"uint256\"},{\"name\":\"birthTime\",\"type\":\"uint256\"},{\"name\":\"matronId\",\"type\":\"uint256\"},{\"name\":\"sireId\",\"type\":\"uint256\"},{\"name\":\"generation\",\"type\":\"uint256\"},{\"name\":\"genes\",\"type\":\"uint256[2]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSiringAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GEN0_TOTAL_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pandaId\",\"type\":\"uint256\"}],\"name\":\"isPregnant\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GEN0_AUCTION_DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_erc20Address\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawERC20Balance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"siringAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setGeneScienceAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pandaId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createSaleAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sireAllowedToAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_matronId\",\"type\":\"uint256\"},{\"name\":\"_sireId\",\"type\":\"uint256\"}],\"name\":\"canBreedWith\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pandaId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createSiringAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setAutoBirthFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_sireId\",\"type\":\"uint256\"}],\"name\":\"approveSiring\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getWizzTypeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genes\",\"type\":\"uint256[2]\"},{\"name\":\"_generation\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createWizzPanda\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"secs\",\"type\":\"uint256\"}],\"name\":\"setSecondsPerBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GEN0_CREATION_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSaleAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v2Address\",\"type\":\"address\"}],\"name\":\"setNewAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wizzPandaQuota\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wizzPandaCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pandaIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondsPerBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pandaId\",\"type\":\"uint256\"},{\"name\":\"_erc20address\",\"type\":\"address\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createSaleAuctionERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tp\",\"type\":\"uint256\"}],\"name\":\"getWizzPandaQuotaOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAuctionERC20\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAuctionBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genes\",\"type\":\"uint256[2]\"},{\"name\":\"_generation\",\"type\":\"uint256\"},{\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"createPanda\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSaleAuctionERC20Address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_erc20address\",\"type\":\"address\"},{\"name\":\"_onoff\",\"type\":\"uint256\"}],\"name\":\"switchSaleAuctionERC20For\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cooldowns\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"autoBirthFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tp\",\"type\":\"uint256\"},{\"name\":\"_total\",\"type\":\"uint256\"}],\"name\":\"setTotalWizzPandaOf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pandaIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pandaId\",\"type\":\"uint256\"}],\"name\":\"createGen0Auction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GENSIS_TOTAL_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pandaId\",\"type\":\"uint256\"}],\"name\":\"isReadyToBreed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OPEN_PACKAGE_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sireId\",\"type\":\"uint256\"},{\"name\":\"_matronId\",\"type\":\"uint256\"}],\"name\":\"bidOnSiringAuction\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0CreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"geneScience\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_matronId\",\"type\":\"uint256\"},{\"name\":\"_childGenes\",\"type\":\"uint256[2]\"},{\"name\":\"_factors\",\"type\":\"uint256[2]\"}],\"name\":\"giveBirth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tp\",\"type\":\"uint256\"}],\"name\":\"getWizzPandaCountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_matronId\",\"type\":\"uint256\"},{\"name\":\"_sireId\",\"type\":\"uint256\"}],\"name\":\"breedWithAuto\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pregnantPandas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"matronId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sireId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cooldownEndBlock\",\"type\":\"uint256\"}],\"name\":\"Pregnant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"matronId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sireId\",\"type\":\"uint256\"}],\"name\":\"Abortion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pandaId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"matronId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sireId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"genes\",\"type\":\"uint256[2]\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"}]",
  "bytecode": "6002805460a060020a60ff02191690556101a060405261012c608090815261070860a052611c2060c05261384060e0526170806101005262015180610120526202a300610140526203f4806101605262093a806101805262000066906004906009620000d0565b50600f60065566071afd498d00006012553480156200008457600080fd5b506002805460008054600160a060020a03199081163390811790925560a060020a60ff02199092167401000000000000000000000000000000000000000017919091161790556200019a565b600283019183908215620001615791602002820160005b838211156200012d57835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302620000e7565b80156200015f5782816101000a81549063ffffffff02191690556004016020816003010492830192600103026200012d565b505b506200016f92915062000173565b5090565b6200019791905b808211156200016f57805463ffffffff191681556001016200017a565b90565b6141da80620001aa6000396000f30060806040526004361061031e5763ffffffff60e060020a60003504166301ffc9a7811461034e5780630519ce791461039957806306fdde03146103ca578063095ea7b3146104545780630a0f8168146104785780630e583df01461048d5780631327fbe5146104b457806314001f4c1461054e57806316b648981461056f57806318160ddd146105845780631940a9361461059957806319c2f201146105b15780631c338644146105c657806321717ebf146105ed57806323b872dd1461060257806324e7a38a1461062c57806327d7874c1461064d5780632ba73c151461066e5780633d7d3f5a1461068f5780633f4ba83a146106b057806346116e6f146106c557806346d22c70146106dd5780634ad8c938146106f85780634b85fd55146107195780634dfff04f146107315780634e0a3379146107555780634e61efc51461077657806353a01f681461078e5780635663896e146107b45780635c975abb146107cc5780635fd8c710146107e15780636352211e146107f6578063680eba271461080e5780636af04a57146108235780636fbde40d1461083857806370a0823114610859578063715879881461087a5780637420d16c1461089b57806374ea167f146108b3578063756d77fc146108cb5780637a7d4937146108e35780637d16bef7146108f8578063818438ca146109255780638456cb591461093d5780638462151c1461095257806388524780146109c357806391876e57146109d85780639505b2a7146109ed57806395d89b41146109fd5780639b96f3ed14610a125780639cca68e214610a335780639d6fac6f14610a57578063a9059cbb14610a88578063b047fb5014610aac578063b0c35c0514610ac1578063b380beac14610ad6578063c212445214610af1578063c3bea9af14610b09578063d0774f7414610b21578063d3e6f49f14610b36578063e1c7392a14610b4e578063e6cbe35114610b63578063e8b4c9d714610b78578063ed60ade614610b8d578063f1ca941014610b9b578063f2b47d5214610bb0578063f374694714610bc5578063f3817b2314610be1578063f7d8c88314610bf9578063ffa40a4c14610c07575b600c54600160a060020a03163314806103415750600d54600160a060020a031633145b151561034c57600080fd5b005b34801561035a57600080fd5b506103857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1960043516610c1c565b604080519115158252519081900360200190f35b3480156103a557600080fd5b506103ae610eaf565b60408051600160a060020a039092168252519081900360200190f35b3480156103d657600080fd5b506103df610ebe565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610419578181015183820152602001610401565b50505050905090810190601f1680156104465780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561046057600080fd5b5061034c600160a060020a0360043516602435610ef5565b34801561048457600080fd5b506103ae610f77565b34801561049957600080fd5b506104a2610f86565b60408051918252519081900360200190f35b3480156104c057600080fd5b506104cc600435610f92565b604051808b1515151581526020018a15151515815260200189815260200188815260200187815260200186815260200185815260200184815260200183815260200182600260200280838360005b8381101561053257818101518382015260200161051a565b505050509050019a505050505050505050505060405180910390f35b34801561055a57600080fd5b5061034c600160a060020a0360043516611135565b34801561057b57600080fd5b506104a26111e8565b34801561059057600080fd5b506104a26111ee565b3480156105a557600080fd5b506103856004356111f9565b3480156105bd57600080fd5b506104a261123e565b3480156105d257600080fd5b5061034c600160a060020a0360043581169060243516611245565b3480156105f957600080fd5b506103ae61133f565b34801561060e57600080fd5b5061034c600160a060020a036004358116906024351660443561134e565b34801561063857600080fd5b5061034c600160a060020a03600435166113ca565b34801561065957600080fd5b5061034c600160a060020a036004351661147d565b34801561067a57600080fd5b5061034c600160a060020a03600435166114cb565b34801561069b57600080fd5b5061034c600435602435604435606435611519565b3480156106bc57600080fd5b5061034c61160e565b3480156106d157600080fd5b506103ae6004356116a2565b3480156106e957600080fd5b506103856004356024356116bd565b34801561070457600080fd5b5061034c60043560243560443560643561173d565b34801561072557600080fd5b5061034c600435611815565b34801561073d57600080fd5b5061034c600160a060020a0360043516602435611831565b34801561076157600080fd5b5061034c600160a060020a036004351661188b565b34801561078257600080fd5b506104a26004356118d9565b34801561079a57600080fd5b5061034c6004604435600160a060020a0360643516611a79565b3480156107c057600080fd5b5061034c600435611aec565b3480156107d857600080fd5b50610385611b48565b3480156107ed57600080fd5b5061034c611b58565b34801561080257600080fd5b506103ae600435611bbc565b34801561081a57600080fd5b506104a2611be0565b34801561082f57600080fd5b506103ae611be6565b34801561084457600080fd5b5061034c600160a060020a0360043516611bf5565b34801561086557600080fd5b506104a2600160a060020a0360043516611ca8565b34801561088657600080fd5b5061034c600160a060020a0360043516611cc3565b3480156108a757600080fd5b506104a2600435611d46565b3480156108bf57600080fd5b506104a2600435611d58565b3480156108d757600080fd5b506103ae600435611d6a565b3480156108ef57600080fd5b506104a2611d85565b34801561090457600080fd5b5061034c600435600160a060020a0360243516604435606435608435611d8b565b34801561093157600080fd5b506104a2600435611e89565b34801561094957600080fd5b5061034c611e9b565b34801561095e57600080fd5b50610973600160a060020a0360043516611f1b565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156109af578181015183820152602001610997565b505050509050019250505060405180910390f35b3480156109cf57600080fd5b506103ae611fed565b3480156109e457600080fd5b5061034c611ffc565b61034c6004604435606435612111565b348015610a0957600080fd5b506103df612203565b348015610a1e57600080fd5b5061034c600160a060020a036004351661223a565b348015610a3f57600080fd5b5061034c600160a060020a03600435166024356122ed565b348015610a6357600080fd5b50610a6f60043561238e565b6040805163ffffffff9092168252519081900360200190f35b348015610a9457600080fd5b5061034c600160a060020a03600435166024356123bb565b348015610ab857600080fd5b506103ae612453565b348015610acd57600080fd5b506104a2612462565b348015610ae257600080fd5b5061034c600435602435612468565b348015610afd57600080fd5b506103ae6004356124e8565b348015610b1557600080fd5b5061034c600435612503565b348015610b2d57600080fd5b506104a26125cc565b348015610b4257600080fd5b506103856004356125d1565b348015610b5a57600080fd5b5061034c6126c3565b348015610b6f57600080fd5b506103ae61275e565b348015610b8457600080fd5b506104a261276d565b61034c600435602435612778565b348015610ba757600080fd5b506104a2612913565b348015610bbc57600080fd5b506103ae612919565b348015610bd157600080fd5b506104a260043560246064612928565b348015610bed57600080fd5b506104a2600435612e39565b61034c600435602435612e4b565b348015610c1357600080fd5b506104a261308e565b604080517f737570706f727473496e74657266616365286279746573342900000000000000815290519081900360190190206000907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1983811691161480610ea75750604080517f746f6b656e4d657461646174612875696e743235362c737472696e67290000008152815190819003601d0181207f746f6b656e734f664f776e657228616464726573732900000000000000000000825282519182900360160182207f7472616e7366657246726f6d28616464726573732c616464726573732c75696e83527f7432353629000000000000000000000000000000000000000000000000000000602084015283519283900360250183207f7472616e7366657228616464726573732c75696e743235362900000000000000845284519384900360190184207f617070726f766528616464726573732c75696e74323536290000000000000000855285519485900360180185207f6f776e65724f662875696e743235362900000000000000000000000000000000865286519586900360100186207f62616c616e63654f662861646472657373290000000000000000000000000000875287519687900360120187207f746f74616c537570706c792829000000000000000000000000000000000000008852885197889003600d0188207f73796d626f6c2829000000000000000000000000000000000000000000000000895289519889900360080189207f6e616d65282900000000000000000000000000000000000000000000000000008a529951988990036006019098207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff198c811691909a189098181818181818181891909116145b90505b919050565b600154600160a060020a031681565b60408051808201909152600a81527f50616e6461456172746800000000000000000000000000000000000000000000602082015281565b60025460a060020a900460ff1615610f0c57600080fd5b610f163382613094565b1515610f2157600080fd5b610f2b81836130b4565b60408051338152600160a060020a038416602082015280820183905290517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259181900360600190a15050565b600054600160a060020a031681565b67016345785d8a000081565b6000806000806000806000806000610fa86140ef565b600060078c815481101515610fb957fe5b906000526020600020906003020190508060020160189054906101000a900463ffffffff1663ffffffff16600014159a50438160020160089054906101000a900467ffffffffffffffff1667ffffffffffffffff161115995080600201601c9054906101000a900461ffff1661ffff1698508060020160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1697508060020160189054906101000a900463ffffffff1663ffffffff1696508060020160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1695508060020160109054906101000a900463ffffffff1663ffffffff1694508060020160149054906101000a900463ffffffff1663ffffffff16935080600201601e9054906101000a900461ffff1661ffff16925080600001600280602002604051908101604052809291908260028015611120576020028201915b81548152602001906001019080831161110c575b50505050509150509193959799509193959799565b60008054600160a060020a0316331461114d57600080fd5b81905080600160a060020a03166376190f8f6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561118e57600080fd5b505af11580156111a2573d6000803e3d6000fd5b505050506040513d60208110156111b857600080fd5b505115156111c557600080fd5b600d8054600160a060020a031916600160a060020a039290921691909117905550565b613f4881565b600754600019015b90565b600080821161120757600080fd5b600780548390811061121557fe5b600091825260209091206003909102016002015460c060020a900463ffffffff16151592915050565b6201518081565b600254600160a060020a03163314806112685750600054600160a060020a031633145b8061127d5750600154600160a060020a031633145b151561128857600080fd5b600f54600160a060020a0316151561129f57600080fd5b600f54604080517f1c338644000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152848116602483015291519190921691631c3386449160448083019260209291908290030181600087803b15801561130f57600080fd5b505af1158015611323573d6000803e3d6000fd5b505050506040513d602081101561133957600080fd5b50505050565b600d54600160a060020a031681565b60025460a060020a900460ff161561136557600080fd5b600160a060020a038216151561137a57600080fd5b600160a060020a03821630141561139057600080fd5b61139a33826130e2565b15156113a557600080fd5b6113af8382613094565b15156113ba57600080fd5b6113c5838383613102565b505050565b60008054600160a060020a031633146113e257600080fd5b81905080600160a060020a03166354c15b826040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561142357600080fd5b505af1158015611437573d6000803e3d6000fd5b505050506040513d602081101561144d57600080fd5b5051151561145a57600080fd5b600e8054600160a060020a031916600160a060020a039290921691909117905550565b600054600160a060020a0316331461149457600080fd5b600160a060020a03811615156114a957600080fd5b60008054600160a060020a031916600160a060020a0392909216919091179055565b600054600160a060020a031633146114e257600080fd5b600160a060020a03811615156114f757600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b60025460a060020a900460ff161561153057600080fd5b61153a3385613094565b151561154557600080fd5b61154e846111f9565b1561155857600080fd5b600c5461156f908590600160a060020a03166130b4565b600c54604080517f27ebe40a000000000000000000000000000000000000000000000000000000008152600481018790526024810186905260448101859052606481018490523360848201529051600160a060020a03909216916327ebe40a9160a48082019260009290919082900301818387803b1580156115f057600080fd5b505af1158015611604573d6000803e3d6000fd5b5050505050505050565b600054600160a060020a0316331461162557600080fd5b60025460a060020a900460ff16151561163d57600080fd5b600c54600160a060020a0316151561165457600080fd5b600d54600160a060020a0316151561166b57600080fd5b600e54600160a060020a0316151561168257600080fd5b601554600160a060020a03161561169857600080fd5b6116a06131e4565b565b600b60205260009081526040902054600160a060020a031681565b600080808085116116cd57600080fd5b600084116116da57600080fd5b60078054869081106116e857fe5b9060005260206000209060030201915060078481548110151561170757fe5b9060005260206000209060030201905061172382868387613233565b80156117345750611734848661350f565b95945050505050565b60025460a060020a900460ff161561175457600080fd5b61175e3385613094565b151561176957600080fd5b611772846125d1565b151561177d57600080fd5b600d54611794908590600160a060020a03166130b4565b600d54604080517f27ebe40a000000000000000000000000000000000000000000000000000000008152600481018790526024810186905260448101859052606481018490523360848201529051600160a060020a03909216916327ebe40a9160a48082019260009290919082900301818387803b1580156115f057600080fd5b600254600160a060020a0316331461182c57600080fd5b601255565b60025460a060020a900460ff161561184857600080fd5b6118523382613094565b151561185d57600080fd5b6000908152600b602052604090208054600160a060020a031916600160a060020a0392909216919091179055565b600054600160a060020a031633146118a257600080fd5b600160a060020a03811615156118b757600080fd5b60018054600160a060020a031916600160a060020a0392909216919091179055565b60006118e361410a565b60078054849081106118f157fe5b6000918252602090912060408051610140810190915291600302018161010081018260028282826020028201915b81548152602001906001019080831161191f5750505091835250506002919091015467ffffffffffffffff80821660208401526801000000000000000082041660408084019190915263ffffffff608060020a83048116606085015260a060020a83048116608085015260c060020a83041660a084015261ffff60e060020a8304811660c085015260f060020a90920490911660e090920191909152600e54825182517f7c59f828000000000000000000000000000000000000000000000000000000008152939450600160a060020a0390911692637c59f828926004909101908190839080838360005b83811015611a22578181015183820152602001611a0a565b50505050905001915050602060405180830381600087803b158015611a4657600080fd5b505af1158015611a5a573d6000803e3d6000fd5b505050506040513d6020811015611a7057600080fd5b50519392505050565b600254600090600160a060020a03163314611a9357600080fd5b5080600160a060020a0381161515611ab35750600254600160a060020a03165b611ae5600080858760028060200260405190810160405280929190826002602002808284375089935061356492505050565b5050505050565b600254600160a060020a0316331480611b0f5750600054600160a060020a031633145b80611b245750600154600160a060020a031633145b1515611b2f57600080fd5b60045463ffffffff168110611b4357600080fd5b600655565b60025460a060020a900460ff1681565b6001546000908190600160a060020a03163314611b7457600080fd5b505060125460135430319160019091010280821115611bb857600154604051600160a060020a039091169082840380156108fc02916000818181858888f150505050505b5050565b600081815260086020526040902054600160a060020a0316801515610eaa57600080fd5b61afc881565b601554600160a060020a031681565b60008054600160a060020a03163314611c0d57600080fd5b81905080600160a060020a03166385b861886040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611c4e57600080fd5b505af1158015611c62573d6000803e3d6000fd5b505050506040513d6020811015611c7857600080fd5b50511515611c8557600080fd5b600c8054600160a060020a031916600160a060020a039290921691909117905550565b600160a060020a031660009081526009602052604090205490565b600054600160a060020a03163314611cda57600080fd5b60025460a060020a900460ff161515611cf257600080fd5b60158054600160a060020a038316600160a060020a0319909116811790915560408051918252517f450db8da6efbe9c22f2347f7c2021231df1fc58d3ae9a2fa75d39fa4461993059181900360200190a150565b60106020526000908152604090205481565b60116020526000908152604090205481565b600860205260009081526040902054600160a060020a031681565b60065481565b60025460a060020a900460ff1615611da257600080fd5b611dac3386613094565b1515611db757600080fd5b611dc0856111f9565b15611dca57600080fd5b600f54611de1908690600160a060020a03166130b4565b600f54604080517fc82531a300000000000000000000000000000000000000000000000000000000815260048101889052600160a060020a0387811660248301526044820187905260648201869052608482018590523360a48301529151919092169163c82531a39160c480830192600092919082900301818387803b158015611e6a57600080fd5b505af1158015611e7e573d6000803e3d6000fd5b505050505050505050565b60009081526010602052604090205490565b600254600160a060020a0316331480611ebe5750600054600160a060020a031633145b80611ed35750600154600160a060020a031633145b1515611ede57600080fd5b60025460a060020a900460ff1615611ef557600080fd5b6002805474ff0000000000000000000000000000000000000000191660a060020a179055565b6060600060606000806000611f2f87611ca8565b9450841515611f4e576040805160008152602081019091529550611fe3565b84604051908082528060200260200182016040528015611f78578160200160208202803883390190505b509350611f836111ee565b925060009150600190505b828111611fdf57600081815260086020526040902054600160a060020a0388811691161415611fd757808483815181101515611fc657fe5b602090810290910101526001909101905b600101611f8e565b8395505b5050505050919050565b600f54600160a060020a031681565b600254600160a060020a031633148061201f5750600054600160a060020a031633145b806120345750600154600160a060020a031633145b151561203f57600080fd5b600c60009054906101000a9004600160a060020a0316600160a060020a0316635fd8c7106040518163ffffffff1660e060020a028152600401600060405180830381600087803b15801561209257600080fd5b505af11580156120a6573d6000803e3d6000fd5b50505050600d60009054906101000a9004600160a060020a0316600160a060020a0316635fd8c7106040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156120fd57600080fd5b505af1158015611339573d6000803e3d6000fd5b600254600090600160a060020a0316331461212b57600080fd5b60025460a060020a900460ff161561214257600080fd5b662386f26fc1000034101561215657600080fd5b612193600080858760028060200260405190810160405280929190826002602002808284375050600c54600160a060020a03169250613564915050565b600c54604080517f4257793500000000000000000000000000000000000000000000000000000000815260048101849052602481018690529051929350600160a060020a039091169163425779359160448082019260009290919082900301818387803b1580156115f057600080fd5b60408051808201909152600281527f5045000000000000000000000000000000000000000000000000000000000000602082015281565b60008054600160a060020a0316331461225257600080fd5b81905080600160a060020a031663791fc59d6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561229357600080fd5b505af11580156122a7573d6000803e3d6000fd5b505050506040513d60208110156122bd57600080fd5b505115156122ca57600080fd5b600f8054600160a060020a031916600160a060020a039290921691909117905550565b600254600160a060020a0316331461230457600080fd5b600f54604080517fc69ec779000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152602482018590529151919092169163c69ec77991604480830192600092919082900301818387803b15801561237257600080fd5b505af1158015612386573d6000803e3d6000fd5b505050505050565b6004816009811061239b57fe5b60089182820401919006600402915054906101000a900463ffffffff1681565b60025460a060020a900460ff16156123d257600080fd5b600160a060020a03821615156123e757600080fd5b600160a060020a0382163014156123fd57600080fd5b600c54600160a060020a038381169116141561241857600080fd5b600d54600160a060020a038381169116141561243357600080fd5b61243d3382613094565b151561244857600080fd5b611bb8338383613102565b600254600160a060020a031681565b60125481565b600254600160a060020a031633148061248b5750600054600160a060020a031633145b806124a05750600154600160a060020a031633145b15156124ab57600080fd5b600082815260106020526040902054156124c457600080fd5b63ffffffff811681146124d657600080fd5b60009182526010602052604090912055565b600a60205260009081526040902054600160a060020a031681565b600254600160a060020a0316331461251a57600080fd5b6125243382613094565b151561252f57600080fd5b600c54612546908290600160a060020a03166130b4565b600c54600160a060020a031663f40e28f282612560613ba7565b6040805160e060020a63ffffffff861602815260048101939093526024830191909152600060448301819052620151806064840152336084840152905160a48084019382900301818387803b1580156125b857600080fd5b505af1158015611ae5573d6000803e3d6000fd5b606481565b6000808083116125e057600080fd5b60078054849081106125ee57fe5b6000918252602090912060408051610140810190915260039092020191506126bc90828161010081018260028282826020028201915b8154815260200190600101908083116126245750505091835250506002919091015467ffffffffffffffff808216602084015268010000000000000000820416604083015263ffffffff608060020a82048116606084015260a060020a82048116608084015260c060020a82041660a083015261ffff60e060020a8204811660c084015260f060020a9091041660e090910152613c73565b9392505050565b6126cb6140ef565b600054600160a060020a031633146126e257600080fd5b60025460a060020a900460ff1615156126fa57600080fd5b6007541561270757600080fd5b506040805180820190915260001980825260208083019190915260016000908152601090915260647f8c6065603763fec3f5742441d3833f3f43b982453612d76adb39a885e3006b5f55611bb89080808481613564565b600c54600160a060020a031681565b662386f26fc1000081565b60025460009060a060020a900460ff161561279257600080fd5b61279c3383613094565b15156127a757600080fd5b6127b0826125d1565b15156127bb57600080fd5b6127c58284613ca2565b15156127d057600080fd5b600d54604080517fc55d0f56000000000000000000000000000000000000000000000000000000008152600481018690529051600160a060020a039092169163c55d0f56916024808201926020929091908290030181600087803b15801561283757600080fd5b505af115801561284b573d6000803e3d6000fd5b505050506040513d602081101561286157600080fd5b5051601254909150810134101561287757600080fd5b600d54601254604080517f454a2ab3000000000000000000000000000000000000000000000000000000008152600481018790529051600160a060020a039093169263454a2ab39234039160248082019260009290919082900301818588803b1580156128e357600080fd5b505af11580156128f7573d6000803e3d6000fd5b50505050506113c58263ffffffff168463ffffffff1633613cf1565b60035481565b600e54600160a060020a031681565b60008060008060006129386140ef565b6002546000908190819060a060020a900460ff161561295657600080fd5b600254600160a060020a03163314806129795750600054600160a060020a031633145b8061298e5750600154600160a060020a031633145b151561299957600080fd5b600780548d9081106129a757fe5b60009182526020909120600390910201600281015490985067ffffffffffffffff1615156129d457600080fd5b604080516101408101909152612a9090898161010081018260028282826020028201915b8154815260200190600101908083116129f85750505091835250506002919091015467ffffffffffffffff808216602084015268010000000000000000820416604083015263ffffffff608060020a82048116606084015260a060020a82048116608084015260c060020a82041660a083015261ffff60e060020a8204811660c084015260f060020a9091041660e090910152613e54565b1515612a9b57600080fd5b60028801546007805460c060020a90920463ffffffff1698509088908110612abf57fe5b600091825260209091206002808b015460039093029091019081015490975061ffff60f060020a928390048116975091900416851015612b0c57600286015460f060020a900461ffff1694505b604080518082018252908c90600290839083908082843750939750600096508d9350869250612b39915050565b600e546040517fdc1279d4000000000000000000000000000000000000000000000000000000008152602092909202929092013591600291600160a060020a039091169063dc1279d4908a90600481019060440182825b815481526020019060010190808311612b90575050915050602060405180830381600087803b158015612bc257600080fd5b505af1158015612bd6573d6000803e3d6000fd5b505050506040513d6020811015612bec57600080fd5b5051600e546040517fdc1279d4000000000000000000000000000000000000000000000000000000008152600160a060020a039091169063dc1279d4908d90600481019060440182825b815481526020019060010190808311612c36575050915050602060405180830381600087803b158015612c6857600080fd5b505af1158015612c7c573d6000803e3d6000fd5b505050506040513d6020811015612c9257600080fd5b505101811515612c9e57fe5b0401915061ffff600186011660208b0135028210612ccd5761ffff600186011660208b01350290910390612cd2565b600091505b61ffff8516158015612ce75750613f48600354145b15612cf157600091505b60408051600119430140815242602082015281519081900390910190208290606490061015612d64575060008b8152601460205260409020546002880154600160a060020a0390911690612d5d908d9060c060020a900463ffffffff166001880161ffff168785613564565b9250612dbf565b60008c815260086020908152604091829020548251600160a060020a0390911681529081018e905280820189905290517f8943505fa15e1a07c5635ef3ab3e573cc070f95356c7aeda969e039a702fa2829181900360600190a15b6002880180547bffffffff0000000000000000000000000000000000000000000000001916905560138054600019019055601254604051339180156108fc02916000818181858888f150505060009d8e5250506014602052505060409099208054600160a060020a03191690555096979650505050505050565b60009081526011602052604090205490565b600254600090819060a060020a900460ff1615612e6757600080fd5b601254341015612e7657600080fd5b612e803385613094565b1515612e8b57600080fd5b612e95838561350f565b1515612ea057600080fd5b6007805485908110612eae57fe5b600091825260209091206040805161014081019091526003909202019250612f7b90838161010081018260028282826020028201918154815260200190600101908083116126245750505091835250506002919091015467ffffffffffffffff808216602084015268010000000000000000820416604083015263ffffffff608060020a82048116606084015260a060020a82048116608084015260c060020a82041660a083015261ffff60e060020a8204811660c084015260f060020a9091041660e090910152613c73565b1515612f8657600080fd5b6007805484908110612f9457fe5b60009182526020909120604080516101408101909152600390920201915061306190828161010081018260028282826020028201918154815260200190600101908083116126245750505091835250506002919091015467ffffffffffffffff808216602084015268010000000000000000820416604083015263ffffffff608060020a82048116606084015260a060020a82048116608084015260c060020a82041660a083015261ffff60e060020a8204811660c084015260f060020a9091041660e090910152613c73565b151561306c57600080fd5b61307882858386613233565b151561308357600080fd5b611339848433613cf1565b60135481565b600090815260086020526040902054600160a060020a0391821691161490565b6000918252600a60205260409091208054600160a060020a031916600160a060020a03909216919091179055565b6000908152600a6020526040902054600160a060020a0391821691161490565b600160a060020a03808316600081815260096020908152604080832080546001019055858352600890915290208054600160a060020a031916909117905583161561319557600160a060020a03831660009081526009602090815260408083208054600019019055838352600b82528083208054600160a060020a0319908116909155600a909252909120805490911690555b60408051600160a060020a0380861682528416602082015280820183905290517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360600190a1505050565b600054600160a060020a031633146131fb57600080fd5b60025460a060020a900460ff16151561321357600080fd5b6002805474ff000000000000000000000000000000000000000019169055565b60008184141561324557506000613507565b6002850154608060020a900463ffffffff168214806132745750600285015460a060020a900463ffffffff1682145b1561328157506000613507565b6002830154608060020a900463ffffffff168414806132b05750600283015460a060020a900463ffffffff1684145b156132bd57506000613507565b6002830154608060020a900463ffffffff1615806132ea57506002850154608060020a900463ffffffff16155b156132f757506001613507565b60028581015490840154608060020a9182900463ffffffff90811692909104161480613342575060028086015490840154608060020a900463ffffffff90811660a060020a90920416145b1561334f57506000613507565b6002808601549084015460a060020a900463ffffffff908116608060020a90920416148061339a57506002858101549084015460a060020a9182900463ffffffff9081169290910416145b156133a757506000613507565b600e546040517fe6898a7d000000000000000000000000000000000000000000000000000000008152600160a060020a039091169063e6898a7d908590600481019060440182825b8154815260200190600101908083116133ef575050915050602060405180830381600087803b15801561342157600080fd5b505af1158015613435573d6000803e3d6000fd5b505050506040513d602081101561344b57600080fd5b5051600e546040517fe6898a7d000000000000000000000000000000000000000000000000000000008152600160a060020a039091169063e6898a7d908890600481019060440182825b815481526020019060010190808311613495575050915050602060405180830381600087803b1580156134c757600080fd5b505af11580156134db573d6000803e3d6000fd5b505050506040513d60208110156134f157600080fd5b50510160011461350357506000613507565b5060015b949350505050565b6000818152600860205260408082205484835290822054600160a060020a0391821691168082148061173457506000858152600b6020526040902054600160a060020a03908116908316149250505092915050565b60008060008061357261410a565b600063ffffffff8b168b1461358657600080fd5b63ffffffff8a168a1461359857600080fd5b61ffff891689146135a857600080fd5b600754600095508510156138e357600e54604080517fdc1279d4000000000000000000000000000000000000000000000000000000008152600160a060020a039092169163dc1279d4918b91600401908190839080838360005b8381101561361a578181015183820152602001613602565b50505050905001915050602060405180830381600087803b15801561363e57600080fd5b505af1158015613652573d6000803e3d6000fd5b505050506040513d602081101561366857600080fd5b5051935061ffff8416151561367c57600193505b8361ffff166103e881151561368d57fe5b0494506005600a61ffff87160661ffff1610156136b357600a61ffff86160494506136c1565b600a61ffff86160460010194505b60018503945060088561ffff1611156136d957600894505b600e54604080517f7c59f828000000000000000000000000000000000000000000000000000000008152600160a060020a0390921691637c59f828918b91600401908190839080838360005b8381101561373d578181015183820152602001613725565b50505050905001915050602060405180830381600087803b15801561376157600080fd5b505af1158015613775573d6000803e3d6000fd5b505050506040513d602081101561378b57600080fd5b505192506000831180156137b8575060008381526011602090815260408083205460109092529091205411155b1561388557600e54604080517f3010b5cd000000000000000000000000000000000000000000000000000000008152600160a060020a0390921691633010b5cd918b91600401908190839080838360005b83811015613821578181015183820152602001613809565b505050509050019150506040805180830381600087803b15801561384457600080fd5b505af1158015613858573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250604081101561387d57600080fd5b509750600092505b826001141561389357600594505b60008311156138b2576000838152601160205260409020805460010190555b600189111580156138c4575082600114155b156138e357600354613f48116138d957600080fd5b6003805460010190555b604080516101008101825289815267ffffffffffffffff42166020820152600091810182905263ffffffff808e1660608301528c16608082015260a0810182905261ffff80881660c08301528b1660e0820152600780546001818101808455929094528251929550909185916003027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801906139829082906002614156565b506020820151600291909101805460408401516060850151608086015160a087015160c088015160e09098015167ffffffffffffffff1990951667ffffffffffffffff978816176fffffffffffffffff000000000000000019166801000000000000000097909416969096029290921773ffffffff000000000000000000000000000000001916608060020a63ffffffff928316021777ffffffff0000000000000000000000000000000000000000191660a060020a92821692909202919091177bffffffff000000000000000000000000000000000000000000000000191660c060020a94821694909402939093177fffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff1660e060020a61ffff95861602177dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1660f060020a949091169390930292909217909155919003915081168114613ae757600080fd5b7f1f5e6c92c06029950ba2a0b8fdd9cdcb864a6d651f543bad22feaed8459483488782846060015163ffffffff16856080015163ffffffff1686600001516040518086600160a060020a0316600160a060020a0316815260200185815260200184815260200183815260200182600260200280838360005b83811015613b77578181015183820152602001613b5f565b505050509050019550505050505060405180910390a1613b9960008883613102565b9a9950505050505050505050565b6000806000600c60009054906101000a9004600160a060020a0316600160a060020a031663eac9d94c6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015613bff57600080fd5b505af1158015613c13573d6000803e3d6000fd5b505050506040513d6020811015613c2957600080fd5b505191506fffffffffffffffffffffffffffffffff82168214613c4b57600080fd5b5060028104810167016345785d8a0000811015613c6d575067016345785d8a00005b92915050565b60008160a0015163ffffffff166000148015610ea75750506040015167ffffffffffffffff4381169116111590565b6000806000600785815481101515613cb657fe5b90600052602060002090600302019150600784815481101515613cd557fe5b9060005260206000209060030201905061173482868387613233565b600080613cfe8585613e84565b600780549297509095509085908110613d1357fe5b90600052602060002090600302019150600785815481101515613d3257fe5b600091825260209091206003909102016002810180547bffffffff000000000000000000000000000000000000000000000000191660c060020a63ffffffff8816021790559050613d8282613f58565b613d8b81613f58565b6000858152600b602090815260408083208054600160a060020a0319908116909155878452818420805482169055601380546001019055888452601483528184208054600160a060020a03898116919093161790556008835292819020546002850154825191909416815291820188905281810187905267ffffffffffffffff6801000000000000000090930492909216606082015290517f241ea03ca20251805084d27d4440371c34a0b85ff108f6bb5611248f73818b809181900360800190a15050505050565b60008160a0015163ffffffff16600014158015610ea75750506040015167ffffffffffffffff4381169116111590565b600e54600780546000928392600160a060020a039091169163e6898a7d919087908110613ead57fe5b6000918252602090912060405163ffffffff841660e060020a02815260039092020190600481019060440182825b815481526020019060010190808311613edb575050915050602060405180830381600087803b158015613f0d57600080fd5b505af1158015613f21573d6000803e3d6000fd5b505050506040513d6020811015613f3757600080fd5b505160011415613f4b575081905082613f51565b50829050815b9250929050565b600654600282015443919060049060e060020a900461ffff1660098110613f7b57fe5b600891828204019190066004029054906101000a900463ffffffff1663ffffffff16811515613fa657fe5b6002840180546fffffffffffffffff0000000000000000191668010000000000000000939092049390930167ffffffffffffffff16919091021790819055600860e060020a90910461ffff161080156140a55750600e546040517f7c59f828000000000000000000000000000000000000000000000000000000008152600160a060020a0390911690637c59f828908390600481019060440182825b815481526020019060010190808311614042575050915050602060405180830381600087803b15801561407457600080fd5b505af1158015614088573d6000803e3d6000fd5b505050506040513d602081101561409e57600080fd5b5051600114155b156140ec5760028101805461ffff60e060020a8083048216600101909116027fffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff9091161790555b50565b60408051808201825290600290829080388339509192915050565b6101206040519081016040528061411f6140ef565b815260006020820181905260408201819052606082018190526080820181905260a0820181905260c0820181905260e09091015290565b8260028101928215614184579160200282015b82811115614184578251825591602001919060010190614169565b50614190929150614194565b5090565b6111f691905b80821115614190576000815560010161419a5600a165627a7a72305820a30a7053507c9b39a0463df909dc600a42eefcadd3eb02f841c44b53676246140029"
}