{
  "address": "0x65584c78c2dcd3cc20177af22527b02d082f75d6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "QCB",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-16\n*/\n\npragma solidity ^0.4.13;\n\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\ncontract QCB is ERC20,Ownable{\n\tusing SafeMath for uint256;\n\n\t//the base info of the token\n\tstring public constant name=\"QINGCUNBI\";\n\tstring public constant symbol=\"QCB\";\n\tstring public constant version = \"1.0\";\n\tuint256 public constant decimals = 18;\n\n    mapping(address => uint256) balances;\n\tmapping (address => mapping (address => uint256)) allowed;\n\tuint256 public constant MAX_SUPPLY=21000000*10**decimals;\n\tuint256 public constant INIT_SUPPLY=20990000*10**decimals;\n\n\tuint256 public constant autoAirdropAmount=1*10**decimals;\n    uint256 public constant MAX_AUTO_AIRDROP_AMOUNT=10000*10**decimals;\n\n    address public admin;\n\n\tuint256 public alreadyAutoAirdropAmount;\n\n\tmapping(address => bool) touched;\n\n\n    struct epoch  {\n        uint256 endTime;\n        uint256 amount;\n    }\n\n\tmapping(address=>epoch[]) public lockEpochsMap;\n\n\n\n\tfunction QCB() public{\n        alreadyAutoAirdropAmount=0;\n\t\ttotalSupply = INIT_SUPPLY;\n\t\tbalances[msg.sender] = INIT_SUPPLY;\n\t\temit Transfer(0x0, msg.sender, INIT_SUPPLY);\n\t}\n\n    function addIssue(uint256 amount) external\n    {\n\t\tassert(msg.sender == owner||msg.sender == admin);\n\t\tbalances[msg.sender] = balances[msg.sender].add(amount);\n\t\tTransfer(0x0, msg.sender, amount);\n\t}\n\n\tfunction lockBalance(address user, uint256 amount,uint256 endTime) external\n\t\tonlyOwner\n\t{\n\t\t epoch[] storage epochs = lockEpochsMap[user];\n\t\t epochs.push(epoch(endTime,amount));\n\t}\n\n\tfunction () payable external \n\t{\n\t}\n\n\n\n\tfunction etherProceeds() external\n\t\tonlyOwner\n\n\t{\n\t\tif(!msg.sender.send(this.balance)) revert();\n\t}\n\n  \tfunction transfer(address _to, uint256 _value) public  returns (bool)\n \t{\n\t\trequire(_to != address(0));\n\n        if( !touched[msg.sender] && totalSupply.add(autoAirdropAmount) <= MAX_SUPPLY &&alreadyAutoAirdropAmount.add(autoAirdropAmount)<=MAX_AUTO_AIRDROP_AMOUNT){\n            touched[msg.sender] = true;\n            balances[msg.sender] = balances[msg.sender].add( autoAirdropAmount );\n            totalSupply = totalSupply.add( autoAirdropAmount );\n            alreadyAutoAirdropAmount=alreadyAutoAirdropAmount.add(autoAirdropAmount);\n\n        }\n        \n\t\tepoch[] epochs = lockEpochsMap[msg.sender];\n\t\tuint256 needLockBalance = 0;\n\t\tfor(uint256 i;i<epochs.length;i++)\n\t\t{\n\t\t\tif( now < epochs[i].endTime )\n\t\t\t{\n\t\t\t\tneedLockBalance=needLockBalance.add(epochs[i].amount);\n\t\t\t}\n\t\t}\n\n\t\trequire(balances[msg.sender].sub(_value)>=needLockBalance);\n\n        require(_value <= balances[msg.sender]);\n\n\t\t// SafeMath.sub will throw if there is not enough balance.\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\temit Transfer(msg.sender, _to, _value);\n\t\treturn true;\n  \t}\n\n  \tfunction balanceOf(address _owner) public constant returns (uint256 balance) \n  \t{\n        if( totalSupply.add(autoAirdropAmount) <= MAX_SUPPLY &&alreadyAutoAirdropAmount.add(autoAirdropAmount)<=MAX_AUTO_AIRDROP_AMOUNT){\n            if( touched[_owner] ){\n                return balances[_owner];\n            }\n            else{\n                return balances[_owner].add(autoAirdropAmount);\n            }\n        } else {\n            return balances[_owner];\n        }\n  \t}\n\n  \tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) \n  \t{\n\t\trequire(_to != address(0));\n        \n        if( !touched[_from] && totalSupply.add(autoAirdropAmount) <= MAX_SUPPLY &&alreadyAutoAirdropAmount.add(autoAirdropAmount)<=MAX_AUTO_AIRDROP_AMOUNT){\n            touched[_from] = true;\n            balances[_from] = balances[_from].add( autoAirdropAmount );\n            totalSupply = totalSupply.add( autoAirdropAmount );\n            alreadyAutoAirdropAmount=alreadyAutoAirdropAmount.add(autoAirdropAmount);\n        }\n\n\t\tepoch[] epochs = lockEpochsMap[_from];\n\t\tuint256 needLockBalance = 0;\n\t\tfor(uint256 i;i<epochs.length;i++)\n\t\t{\n\t\t\tif( now < epochs[i].endTime )\n\t\t\t{\n\t\t\t\tneedLockBalance = needLockBalance.add(epochs[i].amount);\n\t\t\t}\n\t\t}\n\n\t\trequire(balances[_from].sub(_value)>=needLockBalance);  \n\n        require(_value <= balances[_from]);\n\n\n\t\tuint256 _allowance = allowed[_from][msg.sender];\n\t\tbalances[_from] = balances[_from].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\tallowed[_from][msg.sender] = _allowance.sub(_value);\n\t\temit Transfer(_from, _to, _value);\n\t\treturn true;\n  \t}\n\n  \tfunction approve(address _spender, uint256 _value) public returns (bool) \n  \t{\n\t\tallowed[msg.sender][_spender] = _value;\n\t\temit Approval(msg.sender, _spender, _value);\n\t\treturn true;\n  \t}\n\n  \tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining) \n  \t{\n\t\treturn allowed[_owner][_spender];\n  \t}\n      \n    function setAdmin(address _admin) public onlyOwner{\n        admin=_admin;\n    }\n\t  \n}",
  "bytecode": "608060405234801561001057600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006005819055506012600a0a6301404830026000819055506012600a0a630140483002600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6012600a0a6301404830026040518082815260200191505060405180910390a3611e1b806101226000396000f300608060405260043610610133576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610135578063095ea7b3146101c557806318160ddd1461022a57806323b872dd14610255578063313ce567146102da57806332cb6b0c14610305578063363bc3a2146103305780635080af091461035b57806354fd4d50146103865780635b89a48a14610416578063704b6c021461047e57806370a08231146104c15780637854216b14610518578063801aba56146105435780638da5cb5b1461055a578063956cc859146105b157806395d89b41146105dc578063a55956831461066c578063a9059cbb146106c3578063d57c1ea214610728578063dd62ed3e14610755578063f2fde38b146107cc578063f851a4401461080f575b005b34801561014157600080fd5b5061014a610866565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561018a57808201518184015260208101905061016f565b50505050905090810190601f1680156101b75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101d157600080fd5b50610210600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061089f565b604051808215151515815260200191505060405180910390f35b34801561023657600080fd5b5061023f610991565b6040518082815260200191505060405180910390f35b34801561026157600080fd5b506102c0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610997565b604051808215151515815260200191505060405180910390f35b3480156102e657600080fd5b506102ef610fdf565b6040518082815260200191505060405180910390f35b34801561031157600080fd5b5061031a610fe4565b6040518082815260200191505060405180910390f35b34801561033c57600080fd5b50610345610ff2565b6040518082815260200191505060405180910390f35b34801561036757600080fd5b50610370610ff8565b6040518082815260200191505060405180910390f35b34801561039257600080fd5b5061039b611004565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103db5780820151818401526020810190506103c0565b50505050905090810190601f1680156104085780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561042257600080fd5b50610461600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061103d565b604051808381526020018281526020019250505060405180910390f35b34801561048a57600080fd5b506104bf600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061107d565b005b3480156104cd57600080fd5b50610502600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061111d565b6040518082815260200191505060405180910390f35b34801561052457600080fd5b5061052d6112bd565b6040518082815260200191505060405180910390f35b34801561054f57600080fd5b506105586112c8565b005b34801561056657600080fd5b5061056f61137d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105bd57600080fd5b506105c66113a3565b6040518082815260200191505060405180910390f35b3480156105e857600080fd5b506105f16113b1565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610631578082015181840152602081019050610616565b50505050905090810190601f16801561065e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561067857600080fd5b506106c1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291905050506113ea565b005b3480156106cf57600080fd5b5061070e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506114e7565b604051808215151515815260200191505060405180910390f35b34801561073457600080fd5b5061075360048036038101908080359060200190929190505050611a1a565b005b34801561076157600080fd5b506107b6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611bb3565b6040518082815260200191505060405180910390f35b3480156107d857600080fd5b5061080d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c3a565b005b34801561081b57600080fd5b50610824611d92565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6040805190810160405280600981526020017f51494e4743554e4249000000000000000000000000000000000000000000000081525081565b600081600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b60008060008060008073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16141515156109da57600080fd5b600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16158015610a5957506012600a0a6301406f4002610a566012600a0a600102600054611db890919063ffffffff16565b11155b8015610a8857506012600a0a61271002610a856012600a0a600102600554611db890919063ffffffff16565b11155b15610bc6576001600660008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610b3e6012600a0a600102600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611db890919063ffffffff16565b600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b9d6012600a0a600102600054611db890919063ffffffff16565b600081905550610bbf6012600a0a600102600554611db890919063ffffffff16565b6005819055505b600760008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209350600092505b8380549050821015610c81578382815481101515610c2657fe5b906000526020600020906002020160000154421015610c7457610c718483815481101515610c5057fe5b90600052602060002090600202016001015484611db890919063ffffffff16565b92505b8180600101925050610c0c565b82610cd487600260008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611dd690919063ffffffff16565b10151515610ce157600080fd5b600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548611151515610d2f57600080fd5b600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610e0086600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611dd690919063ffffffff16565b600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e9586600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611db890919063ffffffff16565b600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610eeb8682611dd690919063ffffffff16565b600360008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef886040518082815260200191505060405180910390a360019450505050509392505050565b601281565b6012600a0a6301406f400281565b60055481565b6012600a0a6127100281565b6040805190810160405280600381526020017f312e30000000000000000000000000000000000000000000000000000000000081525081565b60076020528160005260406000208181548110151561105857fe5b9060005260206000209060020201600091509150508060000154908060010154905082565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110d957600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006012600a0a6301406f40026111466012600a0a600102600054611db890919063ffffffff16565b1115801561117757506012600a0a612710026111746012600a0a600102600554611db890919063ffffffff16565b11155b1561127557600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561121557600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506112b8565b61126e6012600a0a600102600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611db890919063ffffffff16565b90506112b8565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b6012600a0a60010281565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561132457600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050151561137b57600080fd5b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6012600a0a63014048300281565b6040805190810160405280600381526020017f514342000000000000000000000000000000000000000000000000000000000081525081565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561144857600080fd5b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060408051908101604052808481526020018581525090806001815401808255809150509060018203906000526020600020906002020160009091929091909150600082015181600001556020820151816001015550505050505050565b600080600080600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415151561152957600080fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161580156115a857506012600a0a6301406f40026115a56012600a0a600102600054611db890919063ffffffff16565b11155b80156115d757506012600a0a612710026115d46012600a0a600102600554611db890919063ffffffff16565b11155b15611715576001600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061168d6012600a0a600102600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611db890919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506116ec6012600a0a600102600054611db890919063ffffffff16565b60008190555061170e6012600a0a600102600554611db890919063ffffffff16565b6005819055505b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209250600091505b82805490508110156117d057828181548110151561177557fe5b9060005260206000209060020201600001544210156117c3576117c0838281548110151561179f57fe5b90600052602060002090600202016001015483611db890919063ffffffff16565b91505b808060010191505061175b565b8161182386600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611dd690919063ffffffff16565b1015151561183057600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054851115151561187e57600080fd5b6118d085600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611dd690919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061196585600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611db890919063ffffffff16565b600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef876040518082815260200191505060405180910390a36001935050505092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611ac35750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515611acb57fe5b611b1d81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611db890919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c9657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611cd257600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000808284019050838110151515611dcc57fe5b8091505092915050565b6000828211151515611de457fe5b8183039050929150505600a165627a7a7230582023eae1d2e5c66e5ba0c86d9b7ca0af71e29ebd4b2d5ef1767f1dd157cc44c2460029"
}