{
  "address": "0x9c60e109070a2add6f727a052d8e281735fd6c83",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TelMD",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-21\n*/\n\npragma solidity ^0.5.0;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     * @notice Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ncontract MinterRole {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private _minters;\n\n    constructor () internal {\n        _addMinter(msg.sender);\n    }\n\n    modifier onlyMinter() {\n        require(isMinter(msg.sender));\n        _;\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n\n    function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n\n    function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n\n    function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n\n    function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n}\n\ncontract ERC20Interface {\n     function totalSupply() public view returns (uint256);\n     function balanceOf(address tokenOwner) public view returns (uint256 balance);\n     function allowance(address tokenOwner, address spender) public view returns (uint256 remaining);\n     function transfer(address to, uint256 tokens) public returns (bool success);\n     function approve(address spender, uint256 tokens) public returns (bool success);\n     function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\n    \n     event Transfer(address indexed from, address indexed to, uint256 tokens);\n     event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n}\n\ncontract TelMD is ERC20Interface, Ownable, MinterRole{\n     using SafeMath for uint256;\n\n     uint256 private _totalSupply;\n     mapping(address => uint256) private _balances;\n     mapping(address => mapping (address => uint256)) private _allowed;\n\n     string public constant symbol = \"TMD\";\n     string public constant name = \"TelMD\";\n     uint public constant decimals = 18;\n     \n     constructor () public {\n          _totalSupply = 500000000 * (10 ** decimals);\n          _balances[msg.sender] = _totalSupply;\n            \n          emit Transfer(address(0), msg.sender, _totalSupply);\n     }\n\n     /**\n     * @dev Total number of tokens in existence\n     */\n     function totalSupply() public view returns (uint256) {\n          return _totalSupply;\n     }\n\n     /**\n     * @dev Gets the balance of the specified address.\n     * @param owner The address to query the balance of.\n     * @return A uint256 representing the amount owned by the passed address.\n     */\n     function balanceOf(address owner) public view returns (uint256) {\n          return _balances[owner];\n     }\n\n     /**\n     * @dev Transfer token to a specified address\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n     function transfer(address to, uint256 value) public returns (bool) {\n          _transfer(msg.sender, to, value);\n          return true;\n     }\n\n     /**\n     * @dev Function to mint tokens\n     * @param to The address that will receive the minted tokens.\n     * @param value The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n     function mint(address to, uint256 value) public onlyMinter returns (bool) {\n          _mint(to, value);\n          return true;\n     }\n\n     /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n     function approve(address spender, uint256 value) public returns (bool) {\n          _approve(msg.sender, spender, value);\n          return true;\n     }\n\n     /**\n     * @dev Transfer tokens from one address to another.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n     function transferFrom(address from, address to, uint256 value) public returns (bool) {\n          _transfer(from, to, value);\n          _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n          return true;\n     }\n\n     /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n     function allowance(address owner, address spender) public view returns (uint256) {\n          return _allowed[owner][spender];\n     }\n\n     /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n     function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n          _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n          return true;\n     }\n\n     /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n     function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n          _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n          return true;\n     }\n\n     /**\n     * @dev Transfer token for a specified addresses\n     * @param from The address to transfer from.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n     function _transfer(address from, address to, uint256 value) internal {\n          require(to != address(0));\n\n          _balances[from] = _balances[from].sub(value);\n          _balances[to] = _balances[to].add(value);\n          emit Transfer(from, to, value);\n     }\n\n     /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n     function _mint(address account, uint256 value) internal {\n          require(account != address(0));\n          \n          _totalSupply = _totalSupply.add(value);\n          _balances[account] = _balances[account].add(value);\n          emit Transfer(address(0), account, value);\n     }\n\n     /**\n     * @dev Approve an address to spend another addresses' tokens.\n     * @param owner The address that owns the tokens.\n     * @param spender The address that will spend the tokens.\n     * @param value The number of tokens that can be spent.\n     */\n     function _approve(address owner, address spender, uint256 value) internal {\n          require(spender != address(0));\n          require(owner != address(0));\n\n          _allowed[owner][spender] = value;\n          emit Approval(owner, spender, value);\n     }\n\n     function () external payable {\n          revert();\n     }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060008054600160a060020a0319163317808255604051600160a060020a039190911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a361006c336401000000006100cc810204565b6b019d971e4fe8401e740000006002819055336000818152600360209081526040808320859055805194855251929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a36101a9565b6100e4600182640100000000610b0161011b82021704565b604051600160a060020a038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b600160a060020a038116151561013057600080fd5b6101438282640100000000610172810204565b1561014d57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6000600160a060020a038216151561018957600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b610bc7806101b86000396000f3fe608060405260043610610100577c0100000000000000000000000000000000000000000000000000000000600035046306fdde038114610105578063095ea7b31461018f57806318160ddd146101dc57806323b872dd14610203578063313ce56714610246578063395093511461025b57806340c10f191461029457806370a08231146102cd578063715018a6146103005780638da5cb5b146103175780638f32d59b1461034857806395d89b411461035d578063983b2d561461037257806398650275146103a5578063a457c2d7146103ba578063a9059cbb146103f3578063aa271e1a1461042c578063dd62ed3e1461045f578063f2fde38b1461049a575b600080fd5b34801561011157600080fd5b5061011a6104cd565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561015457818101518382015260200161013c565b50505050905090810190601f1680156101815780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561019b57600080fd5b506101c8600480360360408110156101b257600080fd5b50600160a060020a038135169060200135610504565b604080519115158252519081900360200190f35b3480156101e857600080fd5b506101f161051a565b60408051918252519081900360200190f35b34801561020f57600080fd5b506101c86004803603606081101561022657600080fd5b50600160a060020a03813581169160208101359091169060400135610520565b34801561025257600080fd5b506101f1610577565b34801561026757600080fd5b506101c86004803603604081101561027e57600080fd5b50600160a060020a03813516906020013561057c565b3480156102a057600080fd5b506101c8600480360360408110156102b757600080fd5b50600160a060020a0381351690602001356105b8565b3480156102d957600080fd5b506101f1600480360360208110156102f057600080fd5b5035600160a060020a03166105d8565b34801561030c57600080fd5b506103156105f3565b005b34801561032357600080fd5b5061032c61065d565b60408051600160a060020a039092168252519081900360200190f35b34801561035457600080fd5b506101c861066c565b34801561036957600080fd5b5061011a61067d565b34801561037e57600080fd5b506103156004803603602081101561039557600080fd5b5035600160a060020a03166106b4565b3480156103b157600080fd5b506103156106d4565b3480156103c657600080fd5b506101c8600480360360408110156103dd57600080fd5b50600160a060020a0381351690602001356106df565b3480156103ff57600080fd5b506101c86004803603604081101561041657600080fd5b50600160a060020a03813516906020013561071b565b34801561043857600080fd5b506101c86004803603602081101561044f57600080fd5b5035600160a060020a0316610728565b34801561046b57600080fd5b506101f16004803603604081101561048257600080fd5b50600160a060020a0381358116916020013516610741565b3480156104a657600080fd5b50610315600480360360208110156104bd57600080fd5b5035600160a060020a031661076c565b60408051808201909152600581527f54656c4d44000000000000000000000000000000000000000000000000000000602082015281565b6000610511338484610788565b50600192915050565b60025490565b600061052d848484610814565b600160a060020a03841660009081526004602090815260408083203380855292529091205461056d918691610568908663ffffffff6108e316565b610788565b5060019392505050565b601281565b336000818152600460209081526040808320600160a060020a03871684529091528120549091610511918590610568908663ffffffff6108f816565b60006105c333610728565b15156105ce57600080fd5b6105118383610911565b600160a060020a031660009081526003602052604090205490565b6105fb61066c565b151561060657600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031690565b600054600160a060020a0316331490565b60408051808201909152600381527f544d440000000000000000000000000000000000000000000000000000000000602082015281565b6106bd33610728565b15156106c857600080fd5b6106d1816109bd565b50565b6106dd33610a05565b565b336000818152600460209081526040808320600160a060020a03871684529091528120549091610511918590610568908663ffffffff6108e316565b6000610511338484610814565b600061073b60018363ffffffff610a4d16565b92915050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205490565b61077461066c565b151561077f57600080fd5b6106d181610a84565b600160a060020a038216151561079d57600080fd5b600160a060020a03831615156107b257600080fd5b600160a060020a03808416600081815260046020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b600160a060020a038216151561082957600080fd5b600160a060020a038316600090815260036020526040902054610852908263ffffffff6108e316565b600160a060020a038085166000908152600360205260408082209390935590841681522054610887908263ffffffff6108f816565b600160a060020a0380841660008181526003602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000828211156108f257600080fd5b50900390565b60008282018381101561090a57600080fd5b9392505050565b600160a060020a038216151561092657600080fd5b600254610939908263ffffffff6108f816565b600255600160a060020a038216600090815260036020526040902054610965908263ffffffff6108f816565b600160a060020a03831660008181526003602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6109ce60018263ffffffff610b0116565b604051600160a060020a038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b610a1660018263ffffffff610b4f16565b604051600160a060020a038216907fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b6000600160a060020a0382161515610a6457600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b600160a060020a0381161515610a9957600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a0381161515610b1657600080fd5b610b208282610a4d565b15610b2a57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b600160a060020a0381161515610b6457600080fd5b610b6e8282610a4d565b1515610b7957600080fd5b600160a060020a0316600090815260209190915260409020805460ff1916905556fea165627a7a72305820f87647222ce20edbe112d5856362ac7e718647b5b782003d037011e1656326ab0029"
}