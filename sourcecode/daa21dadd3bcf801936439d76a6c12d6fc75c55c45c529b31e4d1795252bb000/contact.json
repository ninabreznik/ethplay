{
  "address": "0x119f78d8d7fe47c11c55f6ee4b8fc6309b02b4ed",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BaRA",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-05\n*/\n\npragma solidity ^0.5.1;\n\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"\");\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"\"); // Solidity only automatically asserts when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"\");\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"\");\n        return a % b;\n    }\n}\n\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(\n        address owner,\n        address spender\n    )\n        public\n        view\n        returns (uint256)\n    {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n        require(value <= _balances[msg.sender], \"\");\n        require(to != address(0), \"\");\n\n        _balances[msg.sender] = _balances[msg.sender].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0), \"\");\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        public\n        returns (bool)\n    {\n        require(value <= _balances[from], \"\");\n        require(value <= _allowed[from][msg.sender], \"\");\n        require(to != address(0), \"\");\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        emit Transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(\n        address spender,\n        uint256 addedValue\n    )\n        public\n        returns (bool)\n    {\n        require(spender != address(0), \"\");\n\n        _allowed[msg.sender][spender] = (\n            _allowed[msg.sender][spender].add(addedValue));\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(\n        address spender,\n        uint256 subtractedValue\n    )\n        public\n        returns (bool)\n    {\n        require(spender != address(0), \"\");\n\n        _allowed[msg.sender][spender] = (\n            _allowed[msg.sender][spender].sub(subtractedValue));\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param amount The amount that will be created.\n     */\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"\");\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param amount The amount that will be burnt.\n     */\n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0), \"\");\n        require(amount <= _balances[account], \"\");\n\n        _totalSupply = _totalSupply.sub(amount);\n        _balances[account] = _balances[account].sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * @param account The account whose tokens will be burnt.\n     * @param amount The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 amount) internal {\n        require(amount <= _allowed[account][msg.sender], \"\");\n\n        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n        // this function needs to emit an event with the updated approval.\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n            amount);\n        _burn(account, amount);\n    }\n}\n\n/**\n * @title BaseSecurityToken implementation\n * @dev see https://eips.ethereum.org/EIPS/eip-1462\n */\ncontract BaseSecurityToken is ERC20 {\n    \n    struct Document {\n        string name;\n        string uri;\n        bytes32 contentHash;\n    }\n\n    mapping (string => Document) private documents;\n\n    function transfer(address to, uint256 value) public returns (bool) {\n        require(checkTransferAllowed(msg.sender, to, value) == STATUS_ALLOWED, \"transfer must be allowed\");\n        return ERC20.transfer(to, value);\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(checkTransferFromAllowed(from, to, value) == STATUS_ALLOWED, \"transfer must be allowed\");\n        return ERC20.transferFrom(from, to, value);\n    }\n\n    function _mint(address account, uint256 amount) internal {\n        require(checkMintAllowed(account, amount) == STATUS_ALLOWED, \"mint must be allowed\");\n        ERC20._mint(account, amount);\n    }\n\n    function _burn(address account, uint256 amount) internal {\n        require(checkBurnAllowed(account, amount) == STATUS_ALLOWED, \"burn must be allowed\");\n        ERC20._burn(account, amount);\n    }\n\n    function attachDocument(string calldata _name, string calldata _uri, bytes32 _contentHash) external {\n        require(bytes(_name).length > 0, \"name of the document must not be empty\");\n        require(bytes(_uri).length > 0, \"external URI to the document must not be empty\");\n        documents[_name] = Document(_name, _uri, _contentHash);\n    }\n   \n    function lookupDocument(string calldata _name) external view returns (string memory, bytes32) {\n        Document storage doc = documents[_name];\n        return (doc.uri, doc.contentHash);\n    }\n\n    // Use status codes from:\n    // https://eips.ethereum.org/EIPS/eip-1066\n    byte private STATUS_ALLOWED = 0x11;\n\n    function checkTransferAllowed(address, address, uint256) public view returns (byte) {\n        return STATUS_ALLOWED;\n    }\n   \n    function checkTransferFromAllowed(address, address, uint256) public view returns (byte) {\n        return STATUS_ALLOWED;\n    }\n   \n    function checkMintAllowed(address, uint256) public view returns (byte) {\n        return STATUS_ALLOWED;\n    }\n   \n    function checkBurnAllowed(address, uint256) public view returns (byte) {\n        return STATUS_ALLOWED;\n    }\n}\n\ncontract LockRequestable {\n\n        // MEMBERS\n        /// @notice  the count of all invocations of `generateLockId`.\n        uint256 public lockRequestCount;\n\n        constructor() public {\n                lockRequestCount = 0;\n        }\n\n        // FUNCTIONS\n        /** @notice  Returns a fresh unique identifier.\n            *\n            * @dev the generation scheme uses three components.\n            * First, the blockhash of the previous block.\n            * Second, the deployed address.\n            * Third, the next value of the counter.\n            * This ensure that identifiers are unique across all contracts\n            * following this scheme, and that future identifiers are\n            * unpredictable.\n            *\n            * @return a 32-byte unique identifier.\n            */\n        function generateLockId() internal returns (bytes32 lockId) {\n                return keccak256(\n                abi.encodePacked(blockhash(block.number - 1), address(this), ++lockRequestCount)\n                );\n        }\n}\n\ncontract CustodianUpgradeable is LockRequestable {\n\n        // TYPES\n        /// @dev  The struct type for pending custodian changes.\n        struct CustodianChangeRequest {\n                address proposedNew;\n        }\n\n        // MEMBERS\n        /// @dev  The address of the account or contract that acts as the custodian.\n        address public custodian;\n\n        /// @dev  The map of lock ids to pending custodian changes.\n        mapping (bytes32 => CustodianChangeRequest) public custodianChangeReqs;\n\n        constructor(address _custodian) public LockRequestable() {\n                custodian = _custodian;\n        }\n\n        // MODIFIERS\n        modifier onlyCustodian {\n                require(msg.sender == custodian);\n                _;\n        }\n\n        /** @notice  Requests a change of the custodian associated with this contract.\n            *\n            * @dev  Returns a unique lock id associated with the request.\n            * Anyone can call this function, but confirming the request is authorized\n            * by the custodian.\n            *\n            * @param  _proposedCustodian  The address of the new custodian.\n            * @return  lockId  A unique identifier for this request.\n            */\n        function requestCustodianChange(address _proposedCustodian) public returns (bytes32 lockId) {\n                require(_proposedCustodian != address(0));\n\n                lockId = generateLockId();\n\n                custodianChangeReqs[lockId] = CustodianChangeRequest({\n                        proposedNew: _proposedCustodian\n                });\n\n                emit CustodianChangeRequested(lockId, msg.sender, _proposedCustodian);\n        }\n\n        /** @notice  Confirms a pending change of the custodian associated with this contract.\n            *\n            * @dev  When called by the current custodian with a lock id associated with a\n            * pending custodian change, the `address custodian` member will be updated with the\n            * requested address.\n            *\n            * @param  _lockId  The identifier of a pending change request.\n            */\n        function confirmCustodianChange(bytes32 _lockId) public onlyCustodian {\n                custodian = getCustodianChangeReq(_lockId);\n\n                delete custodianChangeReqs[_lockId];\n\n                emit CustodianChangeConfirmed(_lockId, custodian);\n        }\n\n        // PRIVATE FUNCTIONS\n        function getCustodianChangeReq(bytes32 _lockId) private view returns (address _proposedNew) {\n                CustodianChangeRequest storage changeRequest = custodianChangeReqs[_lockId];\n\n                // reject ‘null’ results from the map lookup\n                // this can only be the case if an unknown `_lockId` is received\n                require(changeRequest.proposedNew != address(0));\n\n                return changeRequest.proposedNew;\n        }\n\n        /// @dev  Emitted by successful `requestCustodianChange` calls.\n        event CustodianChangeRequested(\n                bytes32 _lockId,\n                address _msgSender,\n                address _proposedCustodian\n        );\n\n        /// @dev Emitted by successful `confirmCustodianChange` calls.\n        event CustodianChangeConfirmed(bytes32 _lockId, address _newCustodian);\n}\n\ninterface ServiceRegistry {\n    function getService(string calldata _name) external view returns (address);\n}\n\ncontract ServiceDiscovery {\n    ServiceRegistry internal services;\n\n    constructor(ServiceRegistry _services) public {\n        services = ServiceRegistry(_services);\n    }\n}\n\ncontract KnowYourCustomer is CustodianUpgradeable {\n\n    enum Status {\n        none,\n        passed,\n        suspended\n    }\n\n    struct Customer {\n        Status status;\n        mapping(string => string) fields;\n    }\n    \n    event ProviderAuthorized(address indexed _provider, string _name);\n    event ProviderRemoved(address indexed _provider, string _name);\n    event CustomerApproved(address indexed _customer, address indexed _provider);\n    event CustomerSuspended(address indexed _customer, address indexed _provider);\n    event CustomerFieldSet(address indexed _customer, address indexed _field, string _name);\n\n    mapping(address => bool) private providers;\n    mapping(address => Customer) private customers;\n\n    constructor(address _custodian) public CustodianUpgradeable(_custodian) {\n        customers[_custodian].status = Status.passed;\n        customers[_custodian].fields[\"type\"] = \"custodian\";\n        emit CustomerApproved(_custodian, msg.sender);\n        emit CustomerFieldSet(_custodian, msg.sender, \"type\");\n    }\n\n    function providerAuthorize(address _provider, string calldata name) external onlyCustodian {\n        require(providers[_provider] == false, \"provider must not exist\");\n        providers[_provider] = true;\n        // cc:II. Manage Providers#2;Provider becomes authorized in contract;1;\n        emit ProviderAuthorized(_provider, name);\n    }\n\n    function providerRemove(address _provider, string calldata name) external onlyCustodian {\n        require(providers[_provider] == true, \"provider must exist\");\n        delete providers[_provider];\n        emit ProviderRemoved(_provider, name);\n    }\n\n    function hasWritePermissions(address _provider) external view returns (bool) {\n        return _provider == custodian || providers[_provider] == true;\n    }\n\n    function getCustomerStatus(address _customer) external view returns (Status) {\n        return customers[_customer].status;\n    }\n\n    function getCustomerField(address _customer, string calldata _field) external view returns (string memory) {\n        return customers[_customer].fields[_field];\n    }\n\n    function approveCustomer(address _customer) external onlyAuthorized {\n        Status status = customers[_customer].status;\n        require(status != Status.passed, \"customer must not be approved before\");\n        customers[_customer].status = Status.passed;\n        // cc:III. Manage Customers#2;Customer becomes approved in contract;1;\n        emit CustomerApproved(_customer, msg.sender);\n    }\n\n    function setCustomerField(address _customer, string calldata _field, string calldata _value) external onlyAuthorized {\n        Status status = customers[_customer].status;\n        require(status != Status.none, \"customer must have a set status\");\n        customers[_customer].fields[_field] = _value;\n        emit CustomerFieldSet(_customer, msg.sender, _field);\n    }\n\n    function suspendCustomer(address _customer) external onlyAuthorized {\n        Status status = customers[_customer].status;\n        require(status != Status.suspended, \"customer must be not suspended\");\n        customers[_customer].status = Status.suspended;\n        emit CustomerSuspended(_customer, msg.sender);\n    }\n\n    modifier onlyAuthorized() {\n        require(msg.sender == custodian || providers[msg.sender] == true);\n        _;\n    }\n}\n\ncontract TokenSettingsInterface {\n\n    // METHODS\n    function getTradeAllowed() public view returns (bool);\n    function getMintAllowed() public view returns (bool);\n    function getBurnAllowed() public view returns (bool);\n    \n    // EVENTS\n    event TradeAllowedLocked(bytes32 _lockId, bool _newValue);\n    event TradeAllowedConfirmed(bytes32 _lockId, bool _newValue);\n    event MintAllowedLocked(bytes32 _lockId, bool _newValue);\n    event MintAllowedConfirmed(bytes32 _lockId, bool _newValue);\n    event BurnAllowedLocked(bytes32 _lockId, bool _newValue);\n    event BurnAllowedConfirmed(bytes32 _lockId, bool _newValue);\n\n    // MODIFIERS\n    modifier onlyCustodian {\n        _;\n    }\n}\n\n\ncontract _BurnAllowed is TokenSettingsInterface, LockRequestable {\n    // cc:IV. BurnAllowed Setting#2;Burn Allowed Switch;1;\n    //\n    // SETTING: Burn Allowed Switch (bool)\n    // Boundary: true or false\n    //\n    // Enables or disables token minting ability globally (even for custodian).\n    //\n    bool private burnAllowed = false;\n\n    function getBurnAllowed() public view returns (bool) {\n        return burnAllowed;\n    }\n\n    // SETTING MANAGEMENT\n\n    struct PendingBurnAllowed {\n        bool burnAllowed;\n        bool set;\n    }\n\n    mapping (bytes32 => PendingBurnAllowed) public pendingBurnAllowedMap;\n\n    function requestBurnAllowedChange(bool _burnAllowed) public returns (bytes32 lockId) {\n       require(_burnAllowed != burnAllowed);\n       \n       lockId = generateLockId();\n       pendingBurnAllowedMap[lockId] = PendingBurnAllowed({\n           burnAllowed: _burnAllowed,\n           set: true\n       });\n\n       emit BurnAllowedLocked(lockId, _burnAllowed);\n    }\n\n    function confirmBurnAllowedChange(bytes32 _lockId) public onlyCustodian {\n        PendingBurnAllowed storage value = pendingBurnAllowedMap[_lockId];\n        require(value.set == true);\n        burnAllowed = value.burnAllowed;\n        emit BurnAllowedConfirmed(_lockId, value.burnAllowed);\n        delete pendingBurnAllowedMap[_lockId];\n    }\n}\n\n\ncontract _MintAllowed is TokenSettingsInterface, LockRequestable {\n    // cc:III. MintAllowed Setting#2;Mint Allowed Switch;1;\n    //\n    // SETTING: Mint Allowed Switch (bool)\n    // Boundary: true or false\n    //\n    // Enables or disables token minting ability globally (even for custodian).\n    //\n    bool private mintAllowed = false;\n\n    function getMintAllowed() public view returns (bool) {\n        return mintAllowed;\n    }\n\n    // SETTING MANAGEMENT\n\n    struct PendingMintAllowed {\n        bool mintAllowed;\n        bool set;\n    }\n\n    mapping (bytes32 => PendingMintAllowed) public pendingMintAllowedMap;\n\n    function requestMintAllowedChange(bool _mintAllowed) public returns (bytes32 lockId) {\n       require(_mintAllowed != mintAllowed);\n       \n       lockId = generateLockId();\n       pendingMintAllowedMap[lockId] = PendingMintAllowed({\n           mintAllowed: _mintAllowed,\n           set: true\n       });\n\n       emit MintAllowedLocked(lockId, _mintAllowed);\n    }\n\n    function confirmMintAllowedChange(bytes32 _lockId) public onlyCustodian {\n        PendingMintAllowed storage value = pendingMintAllowedMap[_lockId];\n        require(value.set == true);\n        mintAllowed = value.mintAllowed;\n        emit MintAllowedConfirmed(_lockId, value.mintAllowed);\n        delete pendingMintAllowedMap[_lockId];\n    }\n}\n\n\ncontract _TradeAllowed is TokenSettingsInterface, LockRequestable {\n    // cc:II. TradeAllowed Setting#2;Trade Allowed Switch;1;\n    //\n    // SETTING: Trade Allowed Switch (bool)\n    // Boundary: true or false\n    //\n    // Enables or disables all token transfers, between any recipients, except mint and burn operations.\n    //\n    bool private tradeAllowed = false;\n\n    function getTradeAllowed() public view returns (bool) {\n        return tradeAllowed;\n    }\n\n    // SETTING MANAGEMENT\n\n    struct PendingTradeAllowed {\n        bool tradeAllowed;\n        bool set;\n    }\n\n    mapping (bytes32 => PendingTradeAllowed) public pendingTradeAllowedMap;\n\n    function requestTradeAllowedChange(bool _tradeAllowed) public returns (bytes32 lockId) {\n       require(_tradeAllowed != tradeAllowed);\n       \n       lockId = generateLockId();\n       pendingTradeAllowedMap[lockId] = PendingTradeAllowed({\n           tradeAllowed: _tradeAllowed,\n           set: true\n       });\n\n       emit TradeAllowedLocked(lockId, _tradeAllowed);\n    }\n\n    function confirmTradeAllowedChange(bytes32 _lockId) public onlyCustodian {\n        PendingTradeAllowed storage value = pendingTradeAllowedMap[_lockId];\n        require(value.set == true);\n        tradeAllowed = value.tradeAllowed;\n        emit TradeAllowedConfirmed(_lockId, value.tradeAllowed);\n        delete pendingTradeAllowedMap[_lockId];\n    }\n}\n\ncontract TokenSettings is TokenSettingsInterface, CustodianUpgradeable,\n_TradeAllowed,\n_MintAllowed,\n_BurnAllowed\n    {\n    constructor(address _custodian) public CustodianUpgradeable(_custodian) {\n    }\n}\n\n\n/**\n * @title TokenController implements restriction logic for BaseSecurityToken.\n * @dev see https://eips.ethereum.org/EIPS/eip-1462\n */\ncontract TokenController is CustodianUpgradeable, ServiceDiscovery {\n    constructor(address _custodian, ServiceRegistry _services) public\n    CustodianUpgradeable(_custodian) ServiceDiscovery(_services) {\n    }\n\n    // Use status codes from:\n    // https://eips.ethereum.org/EIPS/eip-1066\n    byte private constant STATUS_ALLOWED = 0x11;\n\n    function checkTransferAllowed(address _from, address _to, uint256) public view returns (byte) {\n        require(_settings().getTradeAllowed(), \"global trade must be allowed\");\n        require(_kyc().getCustomerStatus(_from) == KnowYourCustomer.Status.passed, \"sender does not have valid KYC status\");\n        require(_kyc().getCustomerStatus(_to) == KnowYourCustomer.Status.passed, \"recipient does not have valid KYC status\");\n\n        // TODO:\n        // Check user's region\n        // Check amount for transfer limits\n\n        return STATUS_ALLOWED;\n    }\n   \n    function checkTransferFromAllowed(address _from, address _to, uint256 _amount) external view returns (byte) {\n        return checkTransferAllowed(_from, _to, _amount);\n    }\n   \n    function checkMintAllowed(address _from, uint256) external view returns (byte) {\n        require(_settings().getMintAllowed(), \"global mint must be allowed\");\n        require(_kyc().getCustomerStatus(_from) == KnowYourCustomer.Status.passed, \"recipient does not have valid KYC status\");\n        \n        return STATUS_ALLOWED;\n    }\n   \n    function checkBurnAllowed(address _from, uint256) external view returns (byte) {\n        require(_settings().getBurnAllowed(), \"global burn must be allowed\");\n        require(_kyc().getCustomerStatus(_from) == KnowYourCustomer.Status.passed, \"sender does not have valid KYC status\");\n\n        return STATUS_ALLOWED;\n    }\n\n    function _settings() private view returns (TokenSettings) {\n        return TokenSettings(services.getService(\"token/settings\"));\n    }\n\n    function _kyc() private view returns (KnowYourCustomer) {\n        return KnowYourCustomer(services.getService(\"validators/kyc\"));\n    }\n}\n\ncontract BaRA is BaseSecurityToken, CustodianUpgradeable, ServiceDiscovery {\n    \n    uint public limit = 400 * 1e6;\n    string public name = \"Banksia BioPharm Security Token\";\n    string public symbol = \"BaRA\";\n    uint8 public decimals = 0;\n\n    constructor(address _custodian, ServiceRegistry _services,\n        string memory _name, string memory _symbol, uint _limit) public \n        CustodianUpgradeable(_custodian) ServiceDiscovery(_services) {\n\n        name = _name;\n        symbol = _symbol;\n        limit = _limit;\n    }\n\n    function mint(address _to, uint _amount) public onlyCustodian {\n        require(_amount != 0, \"check amount to mint\");\n        require(super.totalSupply() + _amount <= limit, \"check total supply after mint\");\n        BaseSecurityToken._mint(_to, _amount);\n    }\n    \n    function burn(uint _amount) public {\n        require(_amount != 0, \"check amount to burn\");\n        BaseSecurityToken._burn(msg.sender, _amount);\n    }\n\n    function checkTransferAllowed (address _from, address _to, uint256 _amount) public view returns (byte) {\n        return _controller().checkTransferAllowed(_from, _to, _amount);\n    }\n   \n    function checkTransferFromAllowed (address _from, address _to, uint256 _amount) public view returns (byte) {\n        return _controller().checkTransferFromAllowed(_from, _to, _amount);\n    }\n   \n    function checkMintAllowed (address _from, uint256 _amount) public view returns (byte) {\n        return _controller().checkMintAllowed(_from, _amount);\n    }\n   \n    function checkBurnAllowed (address _from, uint256 _amount) public view returns (byte) {\n        return _controller().checkBurnAllowed(_from, _amount);\n    }\n\n    function _controller() private view returns (TokenController) {\n        return TokenController(services.getService(\"token/controller\"));\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposedCustodian\",\"type\":\"address\"}],\"name\":\"requestCustodianChange\",\"outputs\":[{\"name\":\"lockId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"checkMintAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes1\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"custodian\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockId\",\"type\":\"bytes32\"}],\"name\":\"confirmCustodianChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"checkTransferFromAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes1\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_uri\",\"type\":\"string\"},{\"name\":\"_contentHash\",\"type\":\"bytes32\"}],\"name\":\"attachDocument\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"lookupDocument\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"checkTransferAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes1\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"limit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"checkBurnAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes1\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockRequestCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"custodianChangeReqs\",\"outputs\":[{\"name\":\"proposedNew\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_custodian\",\"type\":\"address\"},{\"name\":\"_services\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_limit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_msgSender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_proposedCustodian\",\"type\":\"address\"}],\"name\":\"CustodianChangeRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_newCustodian\",\"type\":\"address\"}],\"name\":\"CustodianChangeConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "6080604052601160f81b600460006101000a81548160ff021916908360f81c02179055506317d784006009556040518060400160405280601f81526020017f42616e6b7369612042696f506861726d20536563757269747920546f6b656e00815250600a908051906020019062000078929190620002b1565b506040518060400160405280600481526020017f4261524100000000000000000000000000000000000000000000000000000000815250600b9080519060200190620000c6929190620002b1565b506000600c60006101000a81548160ff021916908360ff160217905550348015620000f057600080fd5b506040516200363238038062003632833981018060405260a08110156200011657600080fd5b81019080805190602001909291908051906020019092919080516401000000008111156200014357600080fd5b828101905060208101848111156200015a57600080fd5b81518560018202830111640100000000821117156200017857600080fd5b505092919060200180516401000000008111156200019557600080fd5b82810190506020810184811115620001ac57600080fd5b8151856001820283011164010000000082111715620001ca57600080fd5b5050929190602001805190602001909291905050508385600060058190555080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505080600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505082600a908051906020019062000285929190620002b1565b5081600b90805190602001906200029e929190620002b1565b5080600981905550505050505062000360565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002f457805160ff191683800117855562000325565b8280016001018555821562000325579182015b828111156200032457825182559160200191906001019062000307565b5b50905062000334919062000338565b5090565b6200035d91905b80821115620003595760008160009055506001016200033f565b5090565b90565b6132c280620003706000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c806342966c68116100de578063a457c2d711610097578063a9059cbb11610071578063a9059cbb14610ae3578063cb81fecf14610b49578063cf6e448814610b67578063dd62ed3e14610bd557610173565b8063a457c2d7146109b9578063a4d66daf14610a1f578063a87784f114610a3d57610173565b806342966c68146106195780636d000156146106475780636f2230f81461071f57806370a082311461081857806385c3a1aa1461087057806395d89b411461093657610173565b8063313ce56711610130578063313ce56714610403578063375b74c31461042757806339509351146104715780633a8343ee146104d75780633d33adfb1461050557806340c10f19146105cb57610173565b806306fdde0314610178578063095ea7b3146101fb57806315b210821461026157806318160ddd146102b957806323b872dd146102d7578063283ca77c1461035d575b600080fd5b610180610c4d565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101c05780820151818401526020810190506101a5565b50505050905090810190601f1680156101ed5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102476004803603604081101561021157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ceb565b604051808215151515815260200191505060405180910390f35b6102a36004803603602081101561027757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e5a565b6040518082815260200191505060405180910390f35b6102c1610fc5565b6040518082815260200191505060405180910390f35b610343600480360360608110156102ed57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610fcf565b604051808215151515815260200191505060405180910390f35b6103a96004803603604081101561037357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506110b7565b60405180827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b61040b611188565b604051808260ff1660ff16815260200191505060405180910390f35b61042f61119b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6104bd6004803603604081101561048757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506111c1565b604051808215151515815260200191505060405180910390f35b610503600480360360208110156104ed57600080fd5b810190808035906020019092919050505061143a565b005b6105716004803603606081101561051b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506115aa565b60405180827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b610617600480360360408110156105e157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506116b0565b005b6106456004803603602081101561062f57600080fd5b8101908080359060200190929190505050611810565b005b61071d6004803603606081101561065d57600080fd5b810190808035906020019064010000000081111561067a57600080fd5b82018360208201111561068c57600080fd5b803590602001918460018302840111640100000000831117156106ae57600080fd5b9091929391929390803590602001906401000000008111156106cf57600080fd5b8201836020820111156106e157600080fd5b8035906020019184600183028401116401000000008311171561070357600080fd5b909192939192939080359060200190929190505050611894565b005b6107966004803603602081101561073557600080fd5b810190808035906020019064010000000081111561075257600080fd5b82018360208201111561076457600080fd5b8035906020019184600183028401116401000000008311171561078657600080fd5b9091929391929390505050611a64565b6040518080602001838152602001828103825284818151815260200191508051906020019080838360005b838110156107dc5780820151818401526020810190506107c1565b50505050905090810190601f1680156108095780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b61085a6004803603602081101561082e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b43565b6040518082815260200191505060405180910390f35b6108dc6004803603606081101561088657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611b8b565b60405180827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b61093e611c91565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561097e578082015181840152602081019050610963565b50505050905090810190601f1680156109ab5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610a05600480360360408110156109cf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611d2f565b604051808215151515815260200191505060405180910390f35b610a27611fa8565b6040518082815260200191505060405180910390f35b610a8960048036036040811015610a5357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611fae565b60405180827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b610b2f60048036036040811015610af957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061207f565b604051808215151515815260200191505060405180910390f35b610b51612165565b6040518082815260200191505060405180910390f35b610b9360048036036020811015610b7d57600080fd5b810190808035906020019092919050505061216b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610c3760048036036040811015610beb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506121a9565b6040518082815260200191505060405180910390f35b600a8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ce35780601f10610cb857610100808354040283529160200191610ce3565b820191906000526020600020905b815481529060010190602001808311610cc657829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610d6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526000815260200160200191505060405180910390fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610e9557600080fd5b610e9d612230565b905060405180602001604052808373ffffffffffffffffffffffffffffffffffffffff168152506007600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050507fd76fc900a7e1a6fcf11d54b7ba943918df6c53a3128140658c389b3da1e997ba813384604051808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a1919050565b6000600254905090565b6000600460009054906101000a900460f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191661100e8585856115aa565b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146110a3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f7472616e73666572206d75737420626520616c6c6f776564000000000000000081525060200191505060405180910390fd5b6110ae8484846122af565b90509392505050565b60006110c1612730565b73ffffffffffffffffffffffffffffffffffffffff1663283ca77c84846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b15801561114557600080fd5b505afa158015611159573d6000803e3d6000fd5b505050506040513d602081101561116f57600080fd5b8101908080519060200190929190505050905092915050565b600c60009054906101000a900460ff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611240576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526000815260200160200191505060405180910390fd5b6112cf82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461281690919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461149457600080fd5b61149d81612879565b600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060076000828152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550507f9a99272c0f6b7a30ef9e76e684a7cd408bfd4f11a72f36a8e276253c920e442d81600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a150565b60006115b4612730565b73ffffffffffffffffffffffffffffffffffffffff16633d33adfb8585856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060206040518083038186803b15801561166c57600080fd5b505afa158015611680573d6000803e3d6000fd5b505050506040513d602081101561169657600080fd5b810190808051906020019092919050505090509392505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461170a57600080fd5b6000811415611781576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f636865636b20616d6f756e7420746f206d696e7400000000000000000000000081525060200191505060405180910390fd5b6009548161178d610fc5565b011115611802576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f636865636b20746f74616c20737570706c79206166746572206d696e7400000081525060200191505060405180910390fd5b61180c828261291c565b5050565b6000811415611887576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f636865636b20616d6f756e7420746f206275726e00000000000000000000000081525060200191505060405180910390fd5b61189133826129fb565b50565b600085859050116118f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806132436026913960400191505060405180910390fd5b6000838390501161194c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613269602e913960400191505060405180910390fd5b604051806060016040528086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152602001828152506003868660405180838380828437808301925050509250505090815260200160405180910390206000820151816000019080519060200190611a3292919061319d565b506020820151816001019080519060200190611a4f92919061319d565b50604082015181600201559050505050505050565b60606000806003858560405180838380828437808301925050509250505090815260200160405180910390209050806001018160020154818054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611b305780601f10611b0557610100808354040283529160200191611b30565b820191906000526020600020905b815481529060010190602001808311611b1357829003601f168201915b5050505050915092509250509250929050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000611b95612730565b73ffffffffffffffffffffffffffffffffffffffff166385c3a1aa8585856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060206040518083038186803b158015611c4d57600080fd5b505afa158015611c61573d6000803e3d6000fd5b505050506040513d6020811015611c7757600080fd5b810190808051906020019092919050505090509392505050565b600b8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611d275780601f10611cfc57610100808354040283529160200191611d27565b820191906000526020600020905b815481529060010190602001808311611d0a57829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611dae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526000815260200160200191505060405180910390fd5b611e3d82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612ada90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b60095481565b6000611fb8612730565b73ffffffffffffffffffffffffffffffffffffffff1663a87784f184846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b15801561203c57600080fd5b505afa158015612050573d6000803e3d6000fd5b505050506040513d602081101561206657600080fd5b8101908080519060200190929190505050905092915050565b6000600460009054906101000a900460f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166120be338585611b8b565b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612153576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f7472616e73666572206d75737420626520616c6c6f776564000000000000000081525060200191505060405180910390fd5b61215d8383612b3e565b905092915050565b60055481565b60076020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000600143034030600560008154600101919050819055604051602001808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401828152602001935050505060405160208183030381529060405280519060200120905090565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115612340576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526000815260200160200191505060405180910390fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111561240d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526000815260200160200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561248b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526000815260200160200191505060405180910390fd5b6124dc826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612ada90919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061256f826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461281690919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061264082600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612ada90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663794758be6040518163ffffffff1660e01b81526004018080602001828103825260108152602001807f746f6b656e2f636f6e74726f6c6c65720000000000000000000000000000000081525060200191505060206040518083038186803b1580156127d657600080fd5b505afa1580156127ea573d6000803e3d6000fd5b505050506040513d602081101561280057600080fd5b8101908080519060200190929190505050905090565b60008082840190508381101561286f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526000815260200160200191505060405180910390fd5b8091505092915050565b600080600760008481526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156128ef57600080fd5b8060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b600460009054906101000a900460f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191661295883836110b7565b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146129ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f6d696e74206d75737420626520616c6c6f77656400000000000000000000000081525060200191505060405180910390fd5b6129f78282612de2565b5050565b600460009054906101000a900460f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916612a378383611fae565b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612acc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f6275726e206d75737420626520616c6c6f77656400000000000000000000000081525060200191505060405180910390fd5b612ad68282612f78565b5050565b600082821115612b2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526000815260200160200191505060405180910390fd5b600082840390508091505092915050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115612bcf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526000815260200160200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612c4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526000815260200160200191505060405180910390fd5b612c9e826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612ada90919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612d31826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461281690919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612e60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526000815260200160200191505060405180910390fd5b612e758160025461281690919063ffffffff16565b600281905550612ecc816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461281690919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612ff6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526000815260200160200191505060405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115613085576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526000815260200160200191505060405180910390fd5b61309a81600254612ada90919063ffffffff16565b6002819055506130f1816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612ada90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106131de57805160ff191683800117855561320c565b8280016001018555821561320c579182015b8281111561320b5782518255916020019190600101906131f0565b5b509050613219919061321d565b5090565b61323f91905b8082111561323b576000816000905550600101613223565b5090565b9056fe6e616d65206f662074686520646f63756d656e74206d757374206e6f7420626520656d70747965787465726e616c2055524920746f2074686520646f63756d656e74206d757374206e6f7420626520656d707479a165627a7a72305820d1f087ecc63233edb968d8d770ff4380299098e23654c2b2abe37dfd71e6bbe5002900000000000000000000000031ebcb0d352acc558242036d136849dc8ff4748f000000000000000000000000673b6f0c00a4700b7616808adb380ac2ac91ebda00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000017d78400000000000000000000000000000000000000000000000000000000000000001f42616e6b7369612042696f506861726d20536563757269747920546f6b656e0000000000000000000000000000000000000000000000000000000000000000044261524100000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000031ebcb0d352acc558242036d136849dc8ff4748f000000000000000000000000673b6f0c00a4700b7616808adb380ac2ac91ebda00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000017d78400000000000000000000000000000000000000000000000000000000000000001f42616e6b7369612042696f506861726d20536563757269747920546f6b656e0000000000000000000000000000000000000000000000000000000000000000044261524100000000000000000000000000000000000000000000000000000000"
}