{
  "address": "0x25caf15e1cc43e7bfa9853a68de463bfb0d27021",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NaturalEcoCoin",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-03\n*/\n\npragma solidity ^0.4.13;\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyOwner whenNotPaused {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyOwner whenPaused {\n    paused = false;\n    emit Unpause();\n  }\n}\n\ncontract TokenDestructible is Ownable {\n\n  constructor() public payable { }\n\n  /**\n   * @notice Terminate contract and refund to owner\n   * @param _tokens List of addresses of ERC20 or ERC20Basic token contracts to\n   refund.\n   * @notice The called token contracts could try to re-enter this contract. Only\n   supply token contracts you trust.\n   */\n  function destroy(address[] _tokens) public onlyOwner {\n\n    // Transfer tokens to owner\n    for (uint256 i = 0; i < _tokens.length; i++) {\n      ERC20Basic token = ERC20Basic(_tokens[i]);\n      uint256 balance = token.balanceOf(this);\n      token.transfer(owner, balance);\n    }\n\n    // Transfer Eth to owner and terminate contract\n    selfdestruct(owner);\n  }\n}\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  uint256 internal totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(\n    address _spender,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\ncontract IndividualLockableToken is PausableToken{\n  using SafeMath for uint256;\n\n  event LockTimeSetted(address indexed holder, uint256 old_release_time, uint256 new_release_time);\n  event Locked(address indexed holder, uint256 locked_balance_change, uint256 total_locked_balance, uint256 release_time);\n\n  struct lockState {\n    uint256 locked_balance;\n    uint256 release_time;\n  }\n\n  // default lock period\n  uint256 public lock_period = 24 weeks;\n\n  mapping(address => lockState) internal userLock;\n\n  // Specify the time that a particular person's lock will be released\n  function setReleaseTime(address _holder, uint256 _release_time)\n    public\n    onlyOwner\n    returns (bool)\n  {\n    require(_holder != address(0));\n\trequire(_release_time >= block.timestamp);\n\n\tuint256 old_release_time = userLock[_holder].release_time;\n\n\tuserLock[_holder].release_time = _release_time;\n\temit LockTimeSetted(_holder, old_release_time, userLock[_holder].release_time);\n\treturn true;\n  }\n\n  // Returns the point at which token holder's lock is released\n  function getReleaseTime(address _holder)\n    public\n    view\n    returns (uint256)\n  {\n    require(_holder != address(0));\n\n\treturn userLock[_holder].release_time;\n  }\n\n  // Unlock a specific person. Free trading even with a lock balance\n  function clearReleaseTime(address _holder)\n    public\n    onlyOwner\n    returns (bool)\n  {\n    require(_holder != address(0));\n    require(userLock[_holder].release_time > 0);\n\n\tuint256 old_release_time = userLock[_holder].release_time;\n\n\tuserLock[_holder].release_time = 0;\n\temit LockTimeSetted(_holder, old_release_time, userLock[_holder].release_time);\n\treturn true;\n  }\n\n  // Increase the lock balance of a specific person.\n  // If you only want to increase the balance, the release_time must be specified in advance.\n  function increaseLockBalance(address _holder, uint256 _value)\n    public\n    onlyOwner\n    returns (bool)\n  {\n\trequire(_holder != address(0));\n\trequire(_value > 0);\n\trequire(balances[_holder] >= _value);\n\n\tif (userLock[_holder].release_time == 0) {\n\t\tuserLock[_holder].release_time = block.timestamp + lock_period;\n\t}\n\n\tuserLock[_holder].locked_balance = (userLock[_holder].locked_balance).add(_value);\n\temit Locked(_holder, _value, userLock[_holder].locked_balance, userLock[_holder].release_time);\n\treturn true;\n  }\n\n  // Decrease the lock balance of a specific person.\n  function decreaseLockBalance(address _holder, uint256 _value)\n    public\n    onlyOwner\n    returns (bool)\n  {\n\trequire(_holder != address(0));\n\trequire(_value > 0);\n\trequire(userLock[_holder].locked_balance >= _value);\n\n\tuserLock[_holder].locked_balance = (userLock[_holder].locked_balance).sub(_value);\n\temit Locked(_holder, _value, userLock[_holder].locked_balance, userLock[_holder].release_time);\n\treturn true;\n  }\n\n  // Clear the lock.\n  function clearLock(address _holder)\n    public\n    onlyOwner\n    returns (bool)\n  {\n\trequire(_holder != address(0));\n\trequire(userLock[_holder].release_time > 0);\n\n\tuserLock[_holder].locked_balance = 0;\n\tuserLock[_holder].release_time = 0;\n\temit Locked(_holder, 0, userLock[_holder].locked_balance, userLock[_holder].release_time);\n\treturn true;\n  }\n\n  // Check the amount of the lock\n  function getLockedBalance(address _holder)\n    public\n    view\n    returns (uint256)\n  {\n    if(block.timestamp >= userLock[_holder].release_time) return uint256(0);\n    return userLock[_holder].locked_balance;\n  }\n\n  // Check your remaining balance\n  function getFreeBalance(address _holder)\n    public\n    view\n    returns (uint256)\n  {\n    if(block.timestamp >= userLock[_holder].release_time) return balances[_holder];\n    return balances[_holder].sub(userLock[_holder].locked_balance);\n  }\n\n  // transfer overrride\n  function transfer(\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(getFreeBalance(msg.sender) >= _value);\n    return super.transfer(_to, _value);\n  }\n\n  // transferFrom overrride\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(getFreeBalance(_from) >= _value);\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  // approve overrride\n  function approve(\n    address _spender,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(getFreeBalance(msg.sender) >= _value);\n    return super.approve(_spender, _value);\n  }\n\n  // increaseApproval overrride\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    returns (bool success)\n  {\n    require(getFreeBalance(msg.sender) >= allowed[msg.sender][_spender].add(_addedValue));\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  // decreaseApproval overrride\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    returns (bool success)\n  {\n\tuint256 oldValue = allowed[msg.sender][_spender];\n\n    if (_subtractedValue < oldValue) {\n      require(getFreeBalance(msg.sender) >= oldValue.sub(_subtractedValue));\n    }\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\ncontract NaturalEcoCoin is IndividualLockableToken, TokenDestructible {\n  using SafeMath for uint256;\n\n  string public constant name = \"Natural Eco Carbon\";\n  string public constant symbol = \"NECC\";\n  uint8  public constant decimals = 18;\n\n  // 2,400,000,000\n  uint256 public constant INITIAL_SUPPLY = 2400000000 * (10 ** uint256(decimals));\n\n  constructor()\n    public\n  {\n    totalSupply_ = INITIAL_SUPPLY;\n    balances[msg.sender] = totalSupply_;\n  }\n}",
  "bytecode": "60806040526003805460a060020a60ff021916905562dd7c0060045534801561002757600080fd5b5060038054600160a060020a031916339081179091556b07c13bc4b2c133c5600000006001819055600091825260208290526040909120556115758061006e6000396000f3006080604052600436106101695763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461016e578063095ea7b3146101f85780630cb7eb4c1461023057806318160ddd1461026357806323b872dd146102785780632ff2e9dc146102a2578063313ce567146102b75780633f4ba83a146102e2578063476fe919146102f95780635c975abb1461031d57806366188463146103325780636c4e5c861461035657806370a082311461037a578063715018a61461039b5780638456cb59146103b05780638870985b146103c55780638da5cb5b146103e65780638dc735211461041757806395d89b4114610438578063a31052e81461044d578063a9059cbb1461046e578063c408689314610492578063c6786e5a146104b3578063d73dd62314610508578063dd62ed3e1461052c578063e6108fc914610553578063f2fde38b14610577578063f83e9a2014610598575b600080fd5b34801561017a57600080fd5b506101836105ad565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101bd5781810151838201526020016101a5565b50505050905090810190601f1680156101ea5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020457600080fd5b5061021c600160a060020a03600435166024356105e4565b604080519115158252519081900360200190f35b34801561023c57600080fd5b50610251600160a060020a036004351661060c565b60408051918252519081900360200190f35b34801561026f57600080fd5b50610251610646565b34801561028457600080fd5b5061021c600160a060020a036004358116906024351660443561064c565b3480156102ae57600080fd5b50610251610676565b3480156102c357600080fd5b506102cc610686565b6040805160ff9092168252519081900360200190f35b3480156102ee57600080fd5b506102f761068b565b005b34801561030557600080fd5b5061021c600160a060020a0360043516602435610703565b34801561032957600080fd5b5061021c6107a9565b34801561033e57600080fd5b5061021c600160a060020a03600435166024356107b9565b34801561036257600080fd5b5061021c600160a060020a0360043516602435610813565b34801561038657600080fd5b50610251600160a060020a036004351661090a565b3480156103a757600080fd5b506102f7610925565b3480156103bc57600080fd5b506102f7610993565b3480156103d157600080fd5b50610251600160a060020a0360043516610a10565b3480156103f257600080fd5b506103fb610a8a565b60408051600160a060020a039092168252519081900360200190f35b34801561042357600080fd5b5061021c600160a060020a0360043516610a99565b34801561044457600080fd5b50610183610b58565b34801561045957600080fd5b5061021c600160a060020a0360043516610b8f565b34801561047a57600080fd5b5061021c600160a060020a0360043516602435610c4f565b34801561049e57600080fd5b50610251600160a060020a0360043516610c70565b3480156104bf57600080fd5b50604080516020600480358082013583810280860185019096528085526102f795369593946024949385019291829185019084908082843750949750610cb69650505050505050565b34801561051457600080fd5b5061021c600160a060020a0360043516602435610e3d565b34801561053857600080fd5b50610251600160a060020a0360043581169060243516610e8f565b34801561055f57600080fd5b5061021c600160a060020a0360043516602435610eba565b34801561058357600080fd5b506102f7600160a060020a0360043516610f8c565b3480156105a457600080fd5b50610251610faf565b60408051808201909152601281527f4e61747572616c2045636f20436172626f6e0000000000000000000000000000602082015281565b6000816105f033610a10565b10156105fb57600080fd5b6106058383610fb5565b9392505050565b6000600160a060020a038216151561062357600080fd5b50600160a060020a0381166000908152600560205260409020600101545b919050565b60015490565b60008161065885610a10565b101561066357600080fd5b61066e848484610fd9565b949350505050565b6b07c13bc4b2c133c56000000081565b601281565b600354600160a060020a031633146106a257600080fd5b60035460a060020a900460ff1615156106ba57600080fd5b6003805474ff0000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b6003546000908190600160a060020a0316331461071f57600080fd5b600160a060020a038416151561073457600080fd5b4283101561074157600080fd5b50600160a060020a038316600081815260056020908152604091829020600101805490869055825181815291820186905282519093927f014515183d12c0df4c26d74864371ebfe412e000f1f0a252af66950035ff42fe928290030190a25060019392505050565b60035460a060020a900460ff1681565b336000908152600260209081526040808320600160a060020a038616845290915281205480831015610809576107f5818463ffffffff610ffe16565b6107fe33610a10565b101561080957600080fd5b61066e8484611010565b600354600090600160a060020a0316331461082d57600080fd5b600160a060020a038316151561084257600080fd5b6000821161084f57600080fd5b600160a060020a03831660009081526005602052604090205482111561087457600080fd5b600160a060020a03831660009081526005602052604090205461089d908363ffffffff610ffe16565b600160a060020a03841660008181526005602090815260409182902084815560010154825187815291820194909452808201939093525190917f44cebfefa4561bee5b61d675ccfd8dc9969fff9cc15e7a4eccccd62af94f9c11919081900360600190a250600192915050565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a0316331461093c57600080fd5b600354604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26003805473ffffffffffffffffffffffffffffffffffffffff19169055565b600354600160a060020a031633146109aa57600080fd5b60035460a060020a900460ff16156109c157600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600160a060020a0381166000908152600560205260408120600101544210610a515750600160a060020a038116600090815260208190526040902054610641565b600160a060020a0382166000908152600560209081526040808320549183905290912054610a849163ffffffff610ffe16565b92915050565b600354600160a060020a031681565b600354600090600160a060020a03163314610ab357600080fd5b600160a060020a0382161515610ac857600080fd5b600160a060020a03821660009081526005602052604081206001015411610aee57600080fd5b600160a060020a038216600081815260056020908152604080832083815560010183905580518381529182018390528181019290925290517f44cebfefa4561bee5b61d675ccfd8dc9969fff9cc15e7a4eccccd62af94f9c119181900360600190a2506001919050565b60408051808201909152600481527f4e45434300000000000000000000000000000000000000000000000000000000602082015281565b6003546000908190600160a060020a03163314610bab57600080fd5b600160a060020a0383161515610bc057600080fd5b600160a060020a03831660009081526005602052604081206001015411610be657600080fd5b50600160a060020a038216600081815260056020908152604080832060010180549084905581518181529283019390935280519293927f014515183d12c0df4c26d74864371ebfe412e000f1f0a252af66950035ff42fe9281900390910190a250600192915050565b600081610c5b33610a10565b1015610c6657600080fd5b6106058383611034565b600160a060020a0381166000908152600560205260408120600101544210610c9a57506000610641565b50600160a060020a031660009081526005602052604090205490565b60035460009081908190600160a060020a03163314610cd457600080fd5b600092505b8351831015610e2f578383815181101515610cf057fe5b6020908102909101810151604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051919450600160a060020a038516926370a08231926024808401938290030181600087803b158015610d5a57600080fd5b505af1158015610d6e573d6000803e3d6000fd5b505050506040513d6020811015610d8457600080fd5b5051600354604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810184905290519293509084169163a9059cbb916044808201926020929091908290030181600087803b158015610df857600080fd5b505af1158015610e0c573d6000803e3d6000fd5b505050506040513d6020811015610e2257600080fd5b5050600190920191610cd9565b600354600160a060020a0316ff5b336000908152600260209081526040808320600160a060020a0386168452909152812054610e71908363ffffffff61105816565b610e7a33610a10565b1015610e8557600080fd5b6106058383611065565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600090600160a060020a03163314610ed457600080fd5b600160a060020a0383161515610ee957600080fd5b60008211610ef657600080fd5b600160a060020a038316600090815260208190526040902054821115610f1b57600080fd5b600160a060020a0383166000908152600560205260409020600101541515610f6357600454600160a060020a0384166000908152600560205260409020429091016001909101555b600160a060020a03831660009081526005602052604090205461089d908363ffffffff61105816565b600354600160a060020a03163314610fa357600080fd5b610fac81611089565b50565b60045481565b60035460009060a060020a900460ff1615610fcf57600080fd5b6106058383611107565b60035460009060a060020a900460ff1615610ff357600080fd5b61066e84848461116d565b60008282111561100a57fe5b50900390565b60035460009060a060020a900460ff161561102a57600080fd5b61060583836112e2565b60035460009060a060020a900460ff161561104e57600080fd5b61060583836113d1565b81810182811015610a8457fe5b60035460009060a060020a900460ff161561107f57600080fd5b61060583836114b0565b600160a060020a038116151561109e57600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b600160a060020a03831660009081526020819052604081205482111561119257600080fd5b600160a060020a03841660009081526002602090815260408083203384529091529020548211156111c257600080fd5b600160a060020a03831615156111d757600080fd5b600160a060020a038416600090815260208190526040902054611200908363ffffffff610ffe16565b600160a060020a038086166000908152602081905260408082209390935590851681522054611235908363ffffffff61105816565b600160a060020a03808516600090815260208181526040808320949094559187168152600282528281203382529091522054611277908363ffffffff610ffe16565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b336000908152600260209081526040808320600160a060020a038616845290915281205480831061133657336000908152600260209081526040808320600160a060020a038816845290915281205561136b565b611346818463ffffffff610ffe16565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b336000908152602081905260408120548211156113ed57600080fd5b600160a060020a038316151561140257600080fd5b33600090815260208190526040902054611422908363ffffffff610ffe16565b3360009081526020819052604080822092909255600160a060020a03851681522054611454908363ffffffff61105816565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b336000908152600260209081526040808320600160a060020a03861684529091528120546114e4908363ffffffff61105816565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a3506001929150505600a165627a7a72305820cf87754922ea6e770ce9e790a24384a65cace1b4f2daeebe6338d66c7c2b99ce0029"
}