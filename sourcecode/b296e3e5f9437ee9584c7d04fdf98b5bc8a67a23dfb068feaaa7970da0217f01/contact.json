{
  "address": "0xbb3c393e6a053c783ce9cc178865b714a87ad95e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ExGirlfriendCoin",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-12\n*/\n\npragma solidity ^0.4.19;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ForeignToken {\n    function balanceOf(address _owner) constant public returns (uint256);\n    function transfer(address _to, uint256 _value) public returns (bool);\n}\n\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) public constant returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public constant returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface Token { \n    function distr(address _to, uint256 _value) public returns (bool);\n    function totalSupply() constant public returns (uint256 supply);\n    function balanceOf(address _owner) constant public returns (uint256 balance);\n}\n\ncontract ExGirlfriendCoin is ERC20 {\n    \n    using SafeMath for uint256;\n    address owner = msg.sender;\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    mapping (address => bool) public blacklist;\n\n    string public constant name = \"ExGirlfriendCoin\";\n    string public constant symbol = \"EXGF\";\n    uint public constant decimals = 8;\n    \n    uint256 public totalSupply = 100000000000e8;\n    uint256 public totalDistributed = 0;\n    uint256 public totalDistributedi = 40000000000e8;\n    uint256 public unitsOneEthCanBuy = 100000000e8;\n    \n    uint256 public totalRemaining = totalSupply.sub(totalDistributed);\n    uint256 public value;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    \n    event Distr(address indexed to, uint256 amount);\n    event DistrFinished();\n    \n    event Burn(address indexed burner, uint256 value);\n\n    bool public distributionFinished = false;\n    \n    modifier canDistr() {\n        require(!distributionFinished);\n        _;\n    }\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    modifier onlyWhitelist() {\n        require(blacklist[msg.sender] == false);\n        _;\n    }\n    \n    function ExGirlfriendCoin () public {\n        owner = msg.sender;\n       \n        distr(owner, totalDistributedi);\n    }\n    \n    function transferOwnership(address newOwner) onlyOwner public {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n    \n    function enableWhitelist(address[] addresses) onlyOwner public {\n        for (uint i = 0; i < addresses.length; i++) {\n            blacklist[addresses[i]] = false;\n        }\n    }\n\n    function disableWhitelist(address[] addresses) onlyOwner public {\n        for (uint i = 0; i < addresses.length; i++) {\n            blacklist[addresses[i]] = true;\n        }\n    }\n\n    function finishDistribution() onlyOwner canDistr public returns (bool) {\n        distributionFinished = true;\n        DistrFinished();\n        return true;\n    }\n    \n    function distr(address _to, uint256 _amount) canDistr private returns (bool) {\n        totalDistributed = totalDistributed.add(_amount);\n        totalRemaining = totalRemaining.sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Distr(_to, _amount);\n        Transfer(address(0), _to, _amount);\n        return true;\n        \n        if (totalDistributed >= totalSupply) {\n            distributionFinished = true;\n        }\n    }\n    \n    function airdrop(address[] addresses) onlyOwner canDistr public {\n        \n        require(addresses.length <= 255);\n        require(value <= totalRemaining);\n        \n        for (uint i = 0; i < addresses.length; i++) {\n            require(value <= totalRemaining);\n            distr(addresses[i], value);\n        }\n\t\n        if (totalDistributed >= totalSupply) {\n            distributionFinished = true;\n        }\n    }\n    \n    function distribution(address[] addresses, uint256 amount) onlyOwner canDistr public {\n        \n        require(addresses.length <= 255);\n        require(amount <= totalRemaining);\n        \n        for (uint i = 0; i < addresses.length; i++) {\n            require(amount <= totalRemaining);\n            distr(addresses[i], amount);\n        }\n\t\n        if (totalDistributed >= totalSupply) {\n            distributionFinished = true;\n        }\n    }\n    \n    function distributeAmounts(address[] addresses, uint256[] amounts) onlyOwner canDistr public {\n\n        require(addresses.length <= 255);\n        require(addresses.length == amounts.length);\n        \n        for (uint8 i = 0; i < addresses.length; i++) {\n            require(amounts[i] <= totalRemaining);\n            distr(addresses[i], amounts[i]);\n            \n            if (totalDistributed >= totalSupply) {\n                distributionFinished = true;\n            }\n        }\n    }\n    \n    function () external payable {\n            getTokens();\n     }\n    \n    function getTokens() payable canDistr onlyWhitelist public {\n        \n         address investor = msg.sender;\n         uint256 amount = msg.value;\n         require(toGive <= totalRemaining); \n       \n         \n      uint256 toGive = amount.div(100);\n\n\n\tdistr(investor, toGive);\n        \n       \n\n        if (totalDistributed >= totalSupply) {\n            distributionFinished = true;\n        }\n    }\n\n    function balanceOf(address _owner) constant public returns (uint256) {\n\t    return balances[_owner];\n    }\n\n    // mitigates the ERC20 short address attack\n    modifier onlyPayloadSize(uint size) {\n        assert(msg.data.length >= size + 4);\n        _;\n    }\n    \n    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\n\n        require(_to != address(0));\n        require(_amount <= balances[msg.sender]);\n        \n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n    \n    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\n\n        require(_to != address(0));\n        require(_amount <= balances[_from]);\n        require(_amount <= allowed[_from][msg.sender]);\n        \n        balances[_from] = balances[_from].sub(_amount);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Transfer(_from, _to, _amount);\n        return true;\n    }\n    \n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        // mitigates the ERC20 spend/approval race condition\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    function allowance(address _owner, address _spender) constant public returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n    \n    function getTokenBalance(address tokenAddress, address who) constant public returns (uint){\n        ForeignToken t = ForeignToken(tokenAddress);\n        uint bal = t.balanceOf(who);\n        return bal;\n    }\n    \n    function withdraw() onlyOwner public {\n        uint256 etherBalance = this.balance;\n        owner.transfer(etherBalance);\n    }\n    \n    function burn(uint256 _value) onlyOwner public {\n        require(_value <= balances[msg.sender]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        totalDistributed = totalDistributed.sub(_value);\n        Burn(burner, _value);\n    }\n    \n    function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\n        ForeignToken token = ForeignToken(_tokenContract);\n        uint256 amount = token.balanceOf(address(this));\n        return token.transfer(owner, amount);\n    }\n\n\n}",
  "bytecode": "606060405233600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550678ac7230489e800006005556000600655673782dace9d900000600755662386f26fc10000600855620000946006546005546200014a64010000000002620021cf179091906401000000009004565b6009556000600b60006101000a81548160ff0219169083151502179055503415620000be57600080fd5b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000143600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600754620001646401000000000262002028176401000000009004565b506200035b565b60008282111515156200015957fe5b818303905092915050565b6000600b60009054906101000a900460ff161515156200018357600080fd5b620001a8826006546200033c64010000000002620021e8179091906401000000009004565b600681905550620001d3826009546200014a64010000000002620021cf179091906401000000009004565b6009819055506200023b82600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546200033c64010000000002620021e8179091906401000000009004565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f8940c4b8e215f8822c5c8f0056c12652c746cbc57eedbd2a440b175971d47a77836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60008082840190508381101515156200035157fe5b8091505092915050565b612232806200036b6000396000f30060606040526004361061016a576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610174578063095ea7b31461020257806318160ddd1461025c57806323b872dd14610285578063313ce567146102fe5780633ccfd60b146103275780633fa4f2451461033c57806342966c6814610365578063502dadb01461038857806365f2bc2e146103e257806370a082311461040b57806370dc825914610458578063729ad39e1461048157806395d89b41146104db5780639b1cbccc146105695780639c09c83514610596578063a8c310d5146105f0578063a9059cbb1461068a578063aa6ca808146106e4578063c108d542146106ee578063c489744b1461071b578063d8a5436014610787578063dd62ed3e146107b0578063e58fc54c1461081c578063efca2eed1461086d578063f2fde38b14610896578063f3e4877c146108cf578063f9f92be414610932575b610172610983565b005b341561017f57600080fd5b610187610a69565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101c75780820151818401526020810190506101ac565b50505050905090810190601f1680156101f45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561020d57600080fd5b610242600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610aa2565b604051808215151515815260200191505060405180910390f35b341561026757600080fd5b61026f610c30565b6040518082815260200191505060405180910390f35b341561029057600080fd5b6102e4600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c36565b604051808215151515815260200191505060405180910390f35b341561030957600080fd5b61031161100c565b6040518082815260200191505060405180910390f35b341561033257600080fd5b61033a611011565b005b341561034757600080fd5b61034f6110ee565b6040518082815260200191505060405180910390f35b341561037057600080fd5b61038660048080359060200190919050506110f4565b005b341561039357600080fd5b6103e06004808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919050506112c0565b005b34156103ed57600080fd5b6103f56113ac565b6040518082815260200191505060405180910390f35b341561041657600080fd5b610442600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506113b2565b6040518082815260200191505060405180910390f35b341561046357600080fd5b61046b6113fb565b6040518082815260200191505060405180910390f35b341561048c57600080fd5b6104d9600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050611401565b005b34156104e657600080fd5b6104ee61151e565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561052e578082015181840152602081019050610513565b50505050905090810190601f16801561055b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561057457600080fd5b61057c611557565b604051808215151515815260200191505060405180910390f35b34156105a157600080fd5b6105ee60048080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509190505061161f565b005b34156105fb57600080fd5b6106886004808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509190505061170b565b005b341561069557600080fd5b6106ca600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061185c565b604051808215151515815260200191505060405180910390f35b6106ec610983565b005b34156106f957600080fd5b610701611a97565b604051808215151515815260200191505060405180910390f35b341561072657600080fd5b610771600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611aaa565b6040518082815260200191505060405180910390f35b341561079257600080fd5b61079a611b70565b6040518082815260200191505060405180910390f35b34156107bb57600080fd5b610806600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611b76565b6040518082815260200191505060405180910390f35b341561082757600080fd5b610853600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611bfd565b604051808215151515815260200191505060405180910390f35b341561087857600080fd5b610880611df8565b6040518082815260200191505060405180910390f35b34156108a157600080fd5b6108cd600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611dfe565b005b34156108da57600080fd5b610930600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019091905050611ed5565b005b341561093d57600080fd5b610969600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611fed565b604051808215151515815260200191505060405180910390f35b6000806000600b60009054906101000a900460ff161515156109a457600080fd5b60001515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515610a0357600080fd5b3392503491506009548111151515610a1a57600080fd5b610a2e60648361200d90919063ffffffff16565b9050610a3a8382612028565b50600554600654101515610a64576001600b60006101000a81548160ff0219169083151502179055505b505050565b6040805190810160405280601081526020017f45784769726c667269656e64436f696e0000000000000000000000000000000081525081565b6000808214158015610b3157506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b15610b3f5760009050610c2a565b81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b60055481565b6000606060048101600036905010151515610c4d57fe5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515610c8957600080fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548311151515610cd757600080fd5b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548311151515610d6257600080fd5b610db483600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121cf90919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e8683600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121cf90919063ffffffff16565b600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f5883600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121e890919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b600881565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561106f57600080fd5b3073ffffffffffffffffffffffffffffffffffffffff16319050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015156110eb57600080fd5b50565b600a5481565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561115257600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156111a057600080fd5b3390506111f582600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121cf90919063ffffffff16565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061124d826005546121cf90919063ffffffff16565b600581905550611268826006546121cf90919063ffffffff16565b6006819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a25050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561131e57600080fd5b600090505b81518110156113a857600160046000848481518110151561134057fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080600101915050611323565b5050565b60085481565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60075481565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561145f57600080fd5b600b60009054906101000a900460ff1615151561147b57600080fd5b60ff82511115151561148c57600080fd5b600954600a541115151561149f57600080fd5b600090505b81518110156114f157600954600a54111515156114c057600080fd5b6114e382828151811015156114d157fe5b90602001906020020151600a54612028565b5080806001019150506114a4565b60055460065410151561151a576001600b60006101000a81548160ff0219169083151502179055505b5050565b6040805190810160405280600481526020017f455847460000000000000000000000000000000000000000000000000000000081525081565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115b557600080fd5b600b60009054906101000a900460ff161515156115d157600080fd5b6001600b60006101000a81548160ff0219169083151502179055507f7f95d919e78bdebe8a285e6e33357c2fcb65ccf66e72d7573f9f8f6caad0c4cc60405160405180910390a16001905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561167d57600080fd5b600090505b815181101561170757600060046000848481518110151561169f57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080600101915050611682565b5050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561176957600080fd5b600b60009054906101000a900460ff1615151561178557600080fd5b60ff83511115151561179657600080fd5b815183511415156117a657600080fd5b600090505b82518160ff16101561185757600954828260ff168151811015156117cb57fe5b90602001906020020151111515156117e257600080fd5b611820838260ff168151811015156117f657fe5b90602001906020020151838360ff1681518110151561181157fe5b90602001906020020151612028565b5060055460065410151561184a576001600b60006101000a81548160ff0219169083151502179055505b80806001019150506117ab565b505050565b600060406004810160003690501015151561187357fe5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156118af57600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483111515156118fd57600080fd5b61194f83600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121cf90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506119e483600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121e890919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191505092915050565b600b60009054906101000a900460ff1681565b60008060008491508173ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515611b4c57600080fd5b5af11515611b5957600080fd5b505050604051805190509050809250505092915050565b60095481565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c5e57600080fd5b8391508173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515611cfb57600080fd5b5af11515611d0857600080fd5b5050506040518051905090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515611dd857600080fd5b5af11515611de557600080fd5b5050506040518051905092505050919050565b60065481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e5a57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515611ed25780600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611f3357600080fd5b600b60009054906101000a900460ff16151515611f4f57600080fd5b60ff835111151515611f6057600080fd5b6009548211151515611f7157600080fd5b600090505b8251811015611fbf576009548211151515611f9057600080fd5b611fb18382815181101515611fa157fe5b9060200190602002015183612028565b508080600101915050611f76565b600554600654101515611fe8576001600b60006101000a81548160ff0219169083151502179055505b505050565b60046020528060005260406000206000915054906101000a900460ff1681565b600080828481151561201b57fe5b0490508091505092915050565b6000600b60009054906101000a900460ff1615151561204657600080fd5b61205b826006546121e890919063ffffffff16565b600681905550612076826009546121cf90919063ffffffff16565b6009819055506120ce82600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121e890919063ffffffff16565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f8940c4b8e215f8822c5c8f0056c12652c746cbc57eedbd2a440b175971d47a77836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60008282111515156121dd57fe5b818303905092915050565b60008082840190508381101515156121fc57fe5b80915050929150505600a165627a7a72305820897e37044fc1145c89adf340fd4b10a3de5ace75460e8d85519017dae55c58f70029"
}