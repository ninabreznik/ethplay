{
  "address": "0xb95feead4a52137202456dc6a304f617e52bfc63",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "st4ck",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-18\n*/\n\npragma solidity ^0.4.20;\n\ncontract st4ck {\n    address[][] public wereld;\n    address public owner = 0x5372260584003e8Ae3a24E9dF09fa96037a04c2b;\n    mapping(address => uint) public balance; \n    bool public rowQuiter = false;\n    \n    function st4ckCount() public view returns (uint) {\n        return wereld.length;\n    }\n    \n    function st4ckHeight(uint x) public view returns (uint) {\n        return wereld[x].length;\n    }\n    \n    function price(uint y) public pure returns(uint)   {\n        return 0.005 ether * (uint(2)**y);\n    }\n    \n    function setRowQuiter(bool newValue) public {\n        require(msg.sender == owner);\n        rowQuiter = newValue;\n    }\n    \n    function buyBlock(uint x, uint y) public payable {\n        balance[msg.sender] += msg.value;\n        require(balance[msg.sender] >= price(y));\n        balance[msg.sender] -= price(y);\n        if(x == wereld.length) {\n            require(rowQuiter == false);\n            wereld.length++;\n        }\n        else if (x > wereld.length) {\n            revert();\n        }\n        require(y == wereld[x].length);\n        wereld[x].push(msg.sender);\n            \n        if(y == 0) {\n            balance[owner] += price(y);\n        }\n        else {\n            balance[wereld[x][y - 1]] += price(y) * 99 / 100;\n            balance[owner] += price(y) * 1 / 100;\n        }  \n        \n    }\n    \n    function withdraw() public {\n        msg.sender.transfer(balance[msg.sender]);\n        balance[msg.sender] = 0;\n    }\n}",
  "bytecode": "608060405260018054600160a060020a031916735372260584003e8ae3a24e9df09fa96037a04c2b1790556003805460ff1916905534801561004057600080fd5b50610589806100506000396000f3006080604052600436106100a35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326a49e3781146100a8578063275e2d3f146100d25780633ccfd60b146100e75780637e33e361146100fe5780638da5cb5b146101185780639d3aee8d14610149578063ae7385a514610161578063d3481bd01461017c578063e3d670d71461018a578063fface4a3146101ab575b600080fd5b3480156100b457600080fd5b506100c06004356101d4565b60408051918252519081900360200190f35b3480156100de57600080fd5b506100c06101e3565b3480156100f357600080fd5b506100fc6101ea565b005b34801561010a57600080fd5b506100fc6004351515610234565b34801561012457600080fd5b5061012d61025e565b60408051600160a060020a039092168252519081900360200190f35b34801561015557600080fd5b506100c060043561026d565b34801561016d57600080fd5b5061012d60043560243561028f565b6100fc6004356024356102d0565b34801561019657600080fd5b506100c0600160a060020a03600435166104b7565b3480156101b757600080fd5b506101c06104c9565b604080519115158252519081900360200190f35b60020a6611c37937e080000290565b6000545b90565b3360008181526002602052604080822054905181156108fc0292818181858888f19350505050158015610221573d6000803e3d6000fd5b5033600090815260026020526040812055565b600154600160a060020a0316331461024b57600080fd5b6003805460ff1916911515919091179055565b600154600160a060020a031681565b6000808281548110151561027d57fe5b60009182526020909120015492915050565b600080548390811061029d57fe5b90600052602060002001818154811015156102b457fe5b600091825260209091200154600160a060020a03169150829050565b3360009081526002602052604090208054340190556102ee816101d4565b33600090815260026020526040902054101561030957600080fd5b610312816101d4565b3360009081526002602052604081208054929092039091555482141561035a5760035460ff161561034257600080fd5b600080549061035490600183016104d2565b50610369565b60005482111561036957600080fd5b600080548390811061037757fe5b600091825260209091200154811461038e57600080fd5b600080548390811061039c57fe5b600091825260208083209091018054600181018255908352912001805473ffffffffffffffffffffffffffffffffffffffff19163317905580151561040a576103e4816101d4565b600154600160a060020a03166000908152600260205260409020805490910190556104b3565b6064610415826101d4565b60630281151561042157fe5b0460026000808581548110151561043457fe5b906000526020600020016001850381548110151561044e57fe5b6000918252602080832090910154600160a060020a031683528201929092526040019020805490910190556064610484826101d4565b81151561048d57fe5b600154600160a060020a0316600090815260026020526040902080549290910490910190555b5050565b60026020526000908152604090205481565b60035460ff1681565b8154818355818111156104f6576000838152602090206104f69181019083016104fb565b505050565b6101e791905b8082111561051e5760006105158282610522565b50600101610501565b5090565b50805460008255906000526020600020908101906105409190610543565b50565b6101e791905b8082111561051e57600081556001016105495600a165627a7a7230582094769db67972d97299861314f1c4701b70e6368b526f9a49e4f397eeff4237270029"
}