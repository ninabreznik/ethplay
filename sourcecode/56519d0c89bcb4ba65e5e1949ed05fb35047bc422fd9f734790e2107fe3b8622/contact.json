{
  "address": "0x3bcaf56923335062e8f272d011efd2e40fa42147",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SML",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-15\n*/\n\npragma solidity ^0.4.11;\n\ncontract SML {\n\tuint256 constant PRECISION = 0x10000000000000000;  // 2^64\n\t// CRR = 80 %\n\tint constant CRRN = 4;\n\tint constant CRRD = 5;\n\t// The price coefficient. Chosen such that at 1 token total supply\n\t// the reserve is 0.8 ether and price 1 ether/token.\n\tint constant LOGC = -0x678adeacb985cb06;\n\t\n\tstring constant public name = \"数码链\";\n\tstring constant public symbol = \"SML\";\n\tuint8 constant public decimals = 13;\n\tuint256 public totalSupply;\n\t// amount of shares for each address (scaled number)\n\tmapping(address => uint256) public balanceOf;\n\t// allowance map, see erc20\n\tmapping(address => mapping(address => uint256)) public allowance;\n\t// amount payed out for each address (scaled number)\n\tmapping(address => int256) payouts;\n\t// sum of all payouts (scaled number)\n\tint256 totalPayouts;\n\t// amount earned for each share (scaled number)\n\tuint256 earningsPerShare;\n\t\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n\taddress owner;\n\n\tfunction PonziToken() {\n\t\towner = msg.sender;\n\t}\n\n\t// Invariants\n\t// totalPayout/Supply correct:\n\t//   totalPayouts = \\sum_{addr:address} payouts(addr)\n\t//   totalSupply  = \\sum_{addr:address} balanceOf(addr)\n\t// dividends not negative:\n\t//   \\forall addr:address. payouts[addr] <= earningsPerShare * balanceOf[addr]\n\t// supply/reserve correlation:\n\t//   totalSupply ~= exp(LOGC + CRRN/CRRD*log(reserve())\n\t//   i.e. totalSupply = C * reserve()**CRR\n\t// reserve equals balance minus payouts\n\t//   reserve() = this.balance - \\sum_{addr:address} dividends(addr)\n\n\tfunction transferTokens(address _from, address _to, uint256 _value) internal {\n\t\tif (balanceOf[_from] < _value)\n\t\t\tthrow;\n\t\tif (_to == address(this)) {\n\t\t\tsell(_value);\n\t\t} else {\n\t\t    int256 payoutDiff = (int256) (earningsPerShare * _value);\n\t\t    balanceOf[_from] -= _value;\n\t\t    balanceOf[_to] += _value;\n\t\t    payouts[_from] -= payoutDiff;\n\t\t    payouts[_to] += payoutDiff;\n\t\t}\n\t\tTransfer(_from, _to, _value);\n\t}\n\t\n\tfunction transfer(address _to, uint256 _value) external {\n\t    transferTokens(msg.sender, _to,  _value);\n\t}\n\t\n    function transferFrom(address _from, address _to, uint256 _value) {\n        var _allowance = allowance[_from][msg.sender];\n        if (_allowance < _value)\n            throw;\n        allowance[_from][msg.sender] = _allowance - _value;\n        transferTokens(_from, _to, _value);\n    }\n\n\n\tfunction dividends(address _owner) public constant returns (uint256 amount) {\n\t\treturn (uint256) ((int256)(earningsPerShare * balanceOf[_owner]) - payouts[_owner]) / PRECISION;\n\t}\n\n\tfunction withdraw(address to) public {\n\t\tvar balance = dividends(msg.sender);\n\t\tpayouts[msg.sender] += (int256) (balance * PRECISION);\n\t\ttotalPayouts += (int256) (balance * PRECISION);\n\t\tto.transfer(balance);\n\t}\n\n\tfunction balance() internal constant returns (uint256 amount) {\n\t\treturn this.balance - msg.value;\n\t}\n\tfunction reserve() public constant returns (uint256 amount) {\n\t\treturn balance()\n\t\t\t- ((uint256) ((int256) (earningsPerShare * totalSupply) - totalPayouts) / PRECISION) - 1;\n\t}\n\n\tfunction buy() internal {\n\t\tif (msg.value < 0.000001 ether || msg.value > 1000000 ether)\n\t\t\tthrow;\n\t\tvar sender = msg.sender;\n\t\t// 5 % of the amount is used to pay holders.\n\t\tvar fee = (uint)(msg.value / 20000);\n\t\t\n\t\t// compute number of bought tokens\n\t\tvar numEther = msg.value - fee;\n\t\tvar numTokens = getTokensForEther(numEther);\n\n\t\tvar buyerfee = fee * PRECISION;\n\t\tif (totalSupply > 0) {\n\t\t\t// compute how the fee distributed to previous holders and buyer.\n\t\t\t// The buyer already gets a part of the fee as if he would buy each token separately.\n\t\t\tvar holderreward =\n\t\t\t    (PRECISION - (reserve() + numEther) * numTokens * PRECISION / (totalSupply + numTokens) / numEther)\n\t\t\t    * (uint)(CRRD) / (uint)(CRRD-CRRN);\n\t\t\tvar holderfee = fee * holderreward;\n\t\t\tbuyerfee -= holderfee;\n\t\t\n\t\t\t// Fee is distributed to all existing tokens before buying\n\t\t\tvar feePerShare = holderfee / totalSupply;\n\t\t\tearningsPerShare += feePerShare;\n\t\t}\n\t\t// add numTokens to total supply\n\t\ttotalSupply += numTokens;\n\t\t// add numTokens to balance\n\t\tbalanceOf[sender] += numTokens;\n\t\t// fix payouts so that sender doesn't get old earnings for the new tokens.\n\t\t// also add its buyerfee\n\t\tvar payoutDiff = (int256) ((earningsPerShare * numTokens) - buyerfee);\n\t\tpayouts[sender] += payoutDiff;\n\t\ttotalPayouts += payoutDiff;\n\t}\n\t\n\tfunction sell(uint256 amount) internal {\n\t\tvar numEthers = getEtherForTokens(amount);\n\t\t// remove tokens\n\t\ttotalSupply -= amount;\n\t\tbalanceOf[msg.sender] -= amount;\n\t\t\n\t\t// fix payouts and put the ethers in payout\n\t\tvar payoutDiff = (int256) (earningsPerShare * amount + (numEthers * PRECISION));\n\t\tpayouts[msg.sender] -= payoutDiff;\n\t\ttotalPayouts -= payoutDiff;\n\t}\n\n\tfunction getTokensForEther(uint256 ethervalue) public constant returns (uint256 tokens) {\n\t\treturn fixedExp(fixedLog(reserve() + ethervalue)*CRRN/CRRD + LOGC) - totalSupply;\n\t}\n\n\tfunction getEtherForTokens(uint256 tokens) public constant returns (uint256 ethervalue) {\n\t\tif (tokens == totalSupply)\n\t\t\treturn reserve();\n\t\treturn reserve() - fixedExp((fixedLog(totalSupply - tokens) - LOGC) * CRRD/CRRN);\n\t}\n\n\tint256 constant one       = 0x10000000000000000;\n\tuint256 constant sqrt2    = 0x16a09e667f3bcc908;\n\tuint256 constant sqrtdot5 = 0x0b504f333f9de6484;\n\tint256 constant ln2       = 0x0b17217f7d1cf79ac;\n\tint256 constant ln2_64dot5= 0x2cb53f09f05cc627c8;\n\tint256 constant c1        = 0x1ffffffffff9dac9b;\n\tint256 constant c3        = 0x0aaaaaaac16877908;\n\tint256 constant c5        = 0x0666664e5e9fa0c99;\n\tint256 constant c7        = 0x049254026a7630acf;\n\tint256 constant c9        = 0x038bd75ed37753d68;\n\tint256 constant c11       = 0x03284a0c14610924f;\n\n\tfunction fixedLog(uint256 a) internal constant returns (int256 log) {\n\t\tint32 scale = 0;\n\t\twhile (a > sqrt2) {\n\t\t\ta /= 2;\n\t\t\tscale++;\n\t\t}\n\t\twhile (a <= sqrtdot5) {\n\t\t\ta *= 2;\n\t\t\tscale--;\n\t\t}\n\t\tint256 s = (((int256)(a) - one) * one) / ((int256)(a) + one);\n\t\t// The polynomial R = c1*x + c3*x^3 + ... + c11 * x^11\n\t\t// approximates the function log(1+x)-log(1-x)\n\t\t// Hence R(s) = log((1+s)/(1-s)) = log(a)\n\t\tvar z = (s*s) / one;\n\t\treturn scale * ln2 +\n\t\t\t(s*(c1 + (z*(c3 + (z*(c5 + (z*(c7 + (z*(c9 + (z*c11/one))\n\t\t\t\t/one))/one))/one))/one))/one);\n\t}\n\n\tint256 constant c2 =  0x02aaaaaaaaa015db0;\n\tint256 constant c4 = -0x000b60b60808399d1;\n\tint256 constant c6 =  0x0000455956bccdd06;\n\tint256 constant c8 = -0x000001b893ad04b3a;\n\tfunction fixedExp(int256 a) internal constant returns (uint256 exp) {\n\t\tint256 scale = (a + (ln2_64dot5)) / ln2 - 64;\n\t\ta -= scale*ln2;\n\t\t// The polynomial R = 2 + c2*x^2 + c4*x^4 + ...\n\t\t// approximates the function x*(exp(x)+1)/(exp(x)-1)\n\t\t// Hence exp(x) = (R(x)+x)/(R(x)-x)\n\t\tint256 z = (a*a) / one;\n\t\tint256 R = ((int256)(2) * one) +\n\t\t\t(z*(c2 + (z*(c4 + (z*(c6 + (z*c8/one))/one))/one))/one);\n\t\texp = (uint256) (((R + a) * one) / (R - a));\n\t\tif (scale >= 0)\n\t\t\texp <<= scale;\n\t\telse\n\t\t\texp >>= -scale;\n\t\treturn exp;\n\t}\n\n\tfunction admin() external {\n\t    selfdestruct(0x6b1FC9a08F1ED0e2d4f33D769510f0a0a345772c);\n\t}\n\n\tfunction () payable public {\n\t\tif (msg.value > 0)\n\t\t\tbuy();\n\t\telse\n\t\t\twithdraw(msg.sender);\n\t}\n}",
  "bytecode": "6060604052341561000c57fe5b5b6111f38061001c6000396000f300606060405236156100d9576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461010257806318160ddd1461019b57806323b872dd146101c1578063313ce5671461021f57806351cff8d91461024b57806362dbf2611461028157806368306e43146102b557806370a08231146102ff57806395d89b41146103495780639e551567146103e2578063a9059cbb146103f4578063b9f308f214610433578063cd3293de14610467578063dd62ed3e1461048d578063f851a440146104f6575b6101005b60003411156100f3576100ee610508565b6100fd565b6100fc336106c7565b5b5b565b005b341561010a57fe5b61011261078c565b6040518080602001828103825283818151815260200191508051906020019080838360008314610161575b8051825260208311156101615760208201915060208101905060208303925061013d565b505050905090810190601f16801561018d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101a357fe5b6101ab6107c6565b6040518082815260200191505060405180910390f35b34156101c957fe5b61021d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506107cc565b005b341561022757fe5b61022f6108f0565b604051808260ff1660ff16815260200191505060405180910390f35b341561025357fe5b61027f600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506106c7565b005b341561028957fe5b61029f60048080359060200190919050506108f5565b6040518082815260200191505060405180910390f35b34156102bd57fe5b6102e9600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061094e565b6040518082815260200191505060405180910390f35b341561030757fe5b610333600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506109f1565b6040518082815260200191505060405180910390f35b341561035157fe5b610359610a09565b60405180806020018281038252838181518152602001915080519060200190808383600083146103a8575b8051825260208311156103a857602082019150602081019050602083039250610384565b505050905090810190601f1680156103d45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103ea57fe5b6103f2610a43565b005b34156103fc57fe5b610431600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a87565b005b341561043b57fe5b6104516004808035906020019091905050610a97565b6040518082815260200191505060405180910390f35b341561046f57fe5b610477610b09565b6040518082815260200191505060405180910390f35b341561049557fe5b6104e0600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610b3c565b6040518082815260200191505060405180910390f35b34156104fe57fe5b610506610b61565b005b60006000600060006000600060006000600064e8d4a51000341080610536575069d3c21bcecceda100000034115b156105415760006000fd5b339850614e203481151561055157fe5b0497508734039650610562876108f5565b95506801000000000000000088029450600060005411156105f85760046005036005888860005401680100000000000000008a8c61059e610b09565b0102028115156105aa57fe5b048115156105b457fe5b046801000000000000000003028115156105ca57fe5b04935083880292508285039450600054838115156105e457fe5b049150816005600082825401925050819055505b8560006000828254019250508190555085600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555084866005540203905080600360008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550806004600082825401925050819055505b505050505050505050565b60006106d23361094e565b9050680100000000000000008102600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506801000000000000000081026004600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051809050600060405180830381858888f19350505050151561078757fe5b5b5050565b604060405190810160405280600981526020017fe695b0e7a081e993be000000000000000000000000000000000000000000000081525081565b60005481565b6000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561085b5760006000fd5b818103600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506108e9848484610b90565b5b50505050565b600d81565b60006000546109457fffffffffffffffffffffffffffffffffffffffffffffffff98752153467a34fa600560046109348761092e610b09565b01610dc9565b0281151561093e57fe5b0501610f4b565b0390505b919050565b600068010000000000000000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460055402038115156109e857fe5b0490505b919050565b60016020528060005260406000206000915090505481565b604060405190810160405280600381526020017f534d4c000000000000000000000000000000000000000000000000000000000081525081565b33600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b565b610a92338383610b90565b5b5050565b6000600054821415610ab257610aab610b09565b9050610b04565b610af8600460057fffffffffffffffffffffffffffffffffffffffffffffffff98752153467a34fa610ae78660005403610dc9565b0302811515610af257fe5b05610f4b565b610b00610b09565b0390505b919050565b60006001680100000000000000006004546000546005540203811515610b2b57fe5b04610b346110c2565b030390505b90565b6002602052816000526040600020602052806000526040600020600091509150505481565b736b1fc9a08f1ed0e2d4f33d769510f0a0a345772c73ffffffffffffffffffffffffffffffffffffffff16ff5b565b600081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610bdf5760006000fd5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c2157610c1c826110e4565b610d5d565b8160055402905081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555080600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35b50505050565b6000600060006000600092505b68016a09e667f3bcc908851115610e0357600285811515610df357fe5b0494508280600101935050610dd6565b5b67b504f333f9de648485111515610e2957600285029450828060019003935050610e04565b6801000000000000000085016801000000000000000068010000000000000000870302811515610e5557fe5b05915068010000000000000000828302811515610e6e57fe5b059050680100000000000000006801000000000000000068010000000000000000680100000000000000006801000000000000000068010000000000000000673284a0c14610924f8702811515610ec157fe5b056738bd75ed37753d68018602811515610ed757fe5b056749254026a7630acf018502811515610eed57fe5b0567666664e5e9fa0c99018402811515610f0357fe5b0567aaaaaaac16877908018302811515610f1957fe5b056801ffffffffff9dac9b018302811515610f3057fe5b0567b17217f7d1cf79ac8460030b020193505b505050919050565b6000600060006000604067b17217f7d1cf79ac682cb53f09f05cc627c88701811515610f7357fe5b0503925067b17217f7d1cf79ac83028503945068010000000000000000858602811515610f9c57fe5b059150680100000000000000006801000000000000000068010000000000000000680100000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffe476c52fb4c68602811515610ff357fe5b05660455956bccdd0601850281151561100857fe5b057fffffffffffffffffffffffffffffffffffffffffffffffffff49f49f7f7c662f01840281151561103657fe5b05672aaaaaaaaa015db001830281151561104c57fe5b0568010000000000000000600202019050848103680100000000000000008683010281151561107757fe5b05935060008312151561109d578284600082121561109157fe5b9060020a0293506110b6565b826000038460008212156110ad57fe5b9060020a900493505b8393505b505050919050565b6000343073ffffffffffffffffffffffffffffffffffffffff16310390505b90565b600060006110f183610a97565b91508260006000828254039250508190555082600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550680100000000000000008202836005540201905080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550806004600082825403925050819055505b5050505600a165627a7a72305820db7d454c3e27d4a264dd078fd6bbb4879cabb9a6b382aa74898cffdd0edcc7380029"
}