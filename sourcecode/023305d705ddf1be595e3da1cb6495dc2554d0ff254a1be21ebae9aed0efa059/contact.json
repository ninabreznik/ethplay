{
  "address": "0x5773Bb32CAFE05c9E128D0d37e9aDF00f29D0CBB",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MonethaClaimHandler",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-15\n*/\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n\npragma solidity ^0.4.24;\n\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyOwner whenNotPaused {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyOwner whenPaused {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\npragma solidity ^0.4.24;\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n\npragma solidity ^0.4.24;\n\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(\n    ERC20Basic _token,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transfer(_to, _value));\n  }\n\n  function safeTransferFrom(\n    ERC20 _token,\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transferFrom(_from, _to, _value));\n  }\n\n  function safeApprove(\n    ERC20 _token,\n    address _spender,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.approve(_spender, _value));\n  }\n}\n\n// File: monetha-utility-contracts/contracts/Restricted.sol\n\npragma solidity ^0.4.18;\n\n\n\n/** @title Restricted\n *  Exposes onlyMonetha modifier\n */\ncontract Restricted is Ownable {\n\n    //MonethaAddress set event\n    event MonethaAddressSet(\n        address _address,\n        bool _isMonethaAddress\n    );\n\n    mapping (address => bool) public isMonethaAddress;\n\n    /**\n     *  Restrict methods in such way, that they can be invoked only by monethaAddress account.\n     */\n    modifier onlyMonetha() {\n        require(isMonethaAddress[msg.sender]);\n        _;\n    }\n\n    /**\n     *  Allows owner to set new monetha address\n     */\n    function setMonethaAddress(address _address, bool _isMonethaAddress) onlyOwner public {\n        isMonethaAddress[_address] = _isMonethaAddress;\n\n        emit MonethaAddressSet(_address, _isMonethaAddress);\n    }\n}\n\n// File: monetha-utility-contracts/contracts/ownership/CanReclaimEther.sol\n\npragma solidity ^0.4.24;\n\n\ncontract CanReclaimEther is Ownable {\n    event ReclaimEther(address indexed to, uint256 amount);\n\n    /**\n     * @dev Transfer all Ether held by the contract to the owner.\n     */\n    function reclaimEther() external onlyOwner {\n        uint256 value = address(this).balance;\n        owner.transfer(value);\n\n        emit ReclaimEther(owner, value);\n    }\n\n    /**\n     * @dev Transfer specified amount of Ether held by the contract to the address.\n     * @param _to The address which will receive the Ether\n     * @param _value The amount of Ether to transfer\n     */\n    function reclaimEtherTo(address _to, uint256 _value) external onlyOwner {\n        require(_to != address(0), \"zero address is not allowed\");\n        _to.transfer(_value);\n\n        emit ReclaimEther(_to, _value);\n    }\n}\n\n// File: monetha-utility-contracts/contracts/ownership/CanReclaimTokens.sol\n\npragma solidity ^0.4.24;\n\n\n\n\ncontract CanReclaimTokens is Ownable {\n    using SafeERC20 for ERC20Basic;\n\n    event ReclaimTokens(address indexed to, uint256 amount);\n\n    /**\n     * @dev Reclaim all ERC20Basic compatible tokens\n     * @param _token ERC20Basic The address of the token contract\n     */\n    function reclaimToken(ERC20Basic _token) external onlyOwner {\n        uint256 balance = _token.balanceOf(this);\n        _token.safeTransfer(owner, balance);\n\n        emit ReclaimTokens(owner, balance);\n    }\n\n    /**\n     * @dev Reclaim specified amount of ERC20Basic compatible tokens\n     * @param _token ERC20Basic The address of the token contract\n     * @param _to The address which will receive the tokens\n     * @param _value The amount of tokens to transfer\n     */\n    function reclaimTokenTo(ERC20Basic _token, address _to, uint256 _value) external onlyOwner {\n        require(_to != address(0), \"zero address is not allowed\");\n        _token.safeTransfer(_to, _value);\n\n        emit ReclaimTokens(_to, _value);\n    }\n}\n\n// File: contracts/MonethaClaimHandler.sol\n\npragma solidity ^0.4.24;\n\n\n\n\n\n\n\n\n\n/**\n *  @title MonethaClaimHandler\n *\n *  MonethaClaimHandler handles claim creation, acceptance, resolution and confirmation.\n */\ncontract MonethaClaimHandler is Restricted, Pausable, CanReclaimEther, CanReclaimTokens {\n    using SafeMath for uint256;\n    using SafeERC20 for ERC20;\n    using SafeERC20 for ERC20Basic;\n\n    event MinStakeUpdated(uint256 previousMinStake, uint256 newMinStake);\n\n    event ClaimCreated(uint256 indexed dealId, uint256 indexed claimIdx);\n    event ClaimAccepted(uint256 indexed dealId, uint256 indexed claimIdx);\n    event ClaimResolved(uint256 indexed dealId, uint256 indexed claimIdx);\n    event ClaimClosedAfterAcceptanceExpired(uint256 indexed dealId, uint256 indexed claimIdx);\n    event ClaimClosedAfterResolutionExpired(uint256 indexed dealId, uint256 indexed claimIdx);\n    event ClaimClosedAfterConfirmationExpired(uint256 indexed dealId, uint256 indexed claimIdx);\n    event ClaimClosed(uint256 indexed dealId, uint256 indexed claimIdx);\n\n    ERC20 public token;      // token contract address\n    uint256 public minStake; // minimum amount of token units to create and accept claim\n\n    // State of claim\n    enum State {\n        Null,\n        AwaitingAcceptance,\n        AwaitingResolution,\n        AwaitingConfirmation,\n        ClosedAfterAcceptanceExpired,\n        ClosedAfterResolutionExpired,\n        ClosedAfterConfirmationExpired,\n        Closed\n    }\n\n    struct Claim {\n        State state;\n        uint256 modified;\n        uint256 dealId; // immutable after AwaitingAcceptance\n        bytes32 dealHash; // immutable after AwaitingAcceptance\n        string reasonNote; // immutable after AwaitingAcceptance\n        bytes32 requesterId; // immutable after AwaitingAcceptance\n        address requesterAddress; // immutable after AwaitingAcceptance\n        uint256 requesterStaked; // immutable after AwaitingAcceptance\n        bytes32 respondentId; // immutable after AwaitingAcceptance\n        address respondentAddress; // immutable after Accepted\n        uint256 respondentStaked; // immutable after Accepted\n        string resolutionNote; // immutable after Resolved\n    }\n\n    Claim[] public claims;\n\n    constructor(ERC20 _token, uint256 _minStake) public {\n        require(_token != address(0), \"must be valid token address\");\n\n        token = _token;\n        _setMinStake(_minStake);\n    }\n\n    /**\n     * @dev sets the minimum amount of tokens units to stake when creating or accepting the claim.\n     * Only Monetha account allowed to call this method.\n     */\n    function setMinStake(uint256 _newMinStake) external whenNotPaused onlyMonetha {\n        _setMinStake(_newMinStake);\n    }\n\n    /**\n     * @dev returns the number of claims created.\n     */\n    function getClaimsCount() public constant returns (uint256 count) {\n        return claims.length;\n    }\n\n    /**\n    * @dev creates new claim using provided parameters. Before calling this method, requester should approve\n    * this contract to transfer min. amount of token units in their behalf, by calling\n    * `approve(address _spender, uint _value)` method of token contract.\n    * Respondent should accept the claim by calling accept() method.\n    * claimIdx should be extracted from ClaimCreated event.\n    *\n    * Claim state after call 🡒 AwaitingAcceptance\n    */\n    function create(\n        uint256 _dealId,\n        bytes32 _dealHash,\n        string _reasonNote,\n        bytes32 _requesterId,\n        bytes32 _respondentId,\n        uint256 _amountToStake\n    ) external whenNotPaused {\n        require(bytes(_reasonNote).length > 0, \"reason note must not be empty\");\n        require(_dealHash != bytes32(0), \"deal hash must be non-zero\");\n        require(_requesterId != bytes32(0), \"requester ID must be non-zero\");\n        require(_respondentId != bytes32(0), \"respondent ID must be non-zero\");\n        require(keccak256(abi.encodePacked(_requesterId)) != keccak256(abi.encodePacked(_respondentId)),\n            \"requester and respondent must be different\");\n        require(_amountToStake >= minStake, \"amount to stake must be greater or equal to min.stake\");\n\n        uint256 requesterAllowance = token.allowance(msg.sender, address(this));\n        require(requesterAllowance >= _amountToStake, \"allowance too small\");\n        token.safeTransferFrom(msg.sender, address(this), _amountToStake);\n\n        Claim memory claim = Claim({\n            state : State.AwaitingAcceptance,\n            modified : now,\n            dealId : _dealId,\n            dealHash : _dealHash,\n            reasonNote : _reasonNote,\n            requesterId : _requesterId,\n            requesterAddress : msg.sender,\n            requesterStaked : _amountToStake,\n            respondentId : _respondentId,\n            respondentAddress : address(0),\n            respondentStaked : 0,\n            resolutionNote : \"\"\n            });\n        claims.push(claim);\n\n        emit ClaimCreated(_dealId, claims.length - 1);\n    }\n\n    /**\n     * @dev accepts the claim by respondent. Before calling this method, respondent should approve\n     * this contract to transfer min. amount of token units in their behalf, by calling\n     * `approve(address _spender, uint _value)` method of token contract. Respondent must stake the same amount\n     * of tokens as requester.\n     *\n     * Claim state after call 🡒 AwaitingResolution (if was AwaitingAcceptance)\n     */\n    function accept(uint256 _claimIdx) external whenNotPaused {\n        require(_claimIdx < claims.length, \"invalid claim index\");\n        Claim storage claim = claims[_claimIdx];\n        require(State.AwaitingAcceptance == claim.state, \"State.AwaitingAcceptance required\");\n        require(msg.sender != claim.requesterAddress, \"requester and respondent addresses must be different\");\n\n        uint256 requesterStaked = claim.requesterStaked;\n        token.safeTransferFrom(msg.sender, address(this), requesterStaked);\n\n        claim.state = State.AwaitingResolution;\n        claim.modified = now;\n        claim.respondentAddress = msg.sender;\n        claim.respondentStaked = requesterStaked;\n\n        emit ClaimAccepted(claim.dealId, _claimIdx);\n    }\n\n    /**\n     * @dev resolves the claim by respondent. Respondent will get staked amount of tokens back.\n     *\n     * Claim state after call 🡒 AwaitingConfirmation (if was AwaitingResolution)\n     */\n    function resolve(uint256 _claimIdx, string _resolutionNote) external whenNotPaused {\n        require(_claimIdx < claims.length, \"invalid claim index\");\n        require(bytes(_resolutionNote).length > 0, \"resolution note must not be empty\");\n        Claim storage claim = claims[_claimIdx];\n        require(State.AwaitingResolution == claim.state, \"State.AwaitingResolution required\");\n        require(msg.sender == claim.respondentAddress, \"awaiting respondent\");\n\n        uint256 respStakedBefore = claim.respondentStaked;\n\n        claim.state = State.AwaitingConfirmation;\n        claim.modified = now;\n        claim.respondentStaked = 0;\n        claim.resolutionNote = _resolutionNote;\n\n        token.safeTransfer(msg.sender, respStakedBefore);\n\n        emit ClaimResolved(claim.dealId, _claimIdx);\n    }\n\n    /**\n     * @dev closes the claim by requester.\n     * Requester allowed to call this method 72 hours after call to create() or accept(), and immediately after resolve().\n     * Requester will get staked amount of tokens back. Requester will also get the respondent’s tokens if\n     * the respondent did not call the resolve() method within 72 hours.\n     *\n     * Claim state after call 🡒 Closed                         (if was AwaitingConfirmation, and less than 24 hours passed)\n     *                        🡒 ClosedAfterConfirmationExpired (if was AwaitingConfirmation, after 24 hours)\n     *                        🡒 ClosedAfterAcceptanceExpired   (if was AwaitingAcceptance, after 72 hours)\n     *                        🡒 ClosedAfterResolutionExpired   (if was AwaitingResolution, after 72 hours)\n     */\n    function close(uint256 _claimIdx) external whenNotPaused {\n        require(_claimIdx < claims.length, \"invalid claim index\");\n        State state = claims[_claimIdx].state;\n\n        if (State.AwaitingAcceptance == state) {\n            return _closeAfterAwaitingAcceptance(_claimIdx);\n        } else if (State.AwaitingResolution == state) {\n            return _closeAfterAwaitingResolution(_claimIdx);\n        } else if (State.AwaitingConfirmation == state) {\n            return _closeAfterAwaitingConfirmation(_claimIdx);\n        }\n\n        revert(\"claim.State\");\n    }\n\n    function _closeAfterAwaitingAcceptance(uint256 _claimIdx) internal {\n        Claim storage claim = claims[_claimIdx];\n        require(msg.sender == claim.requesterAddress, \"awaiting requester\");\n        require(State.AwaitingAcceptance == claim.state, \"State.AwaitingAcceptance required\");\n        require(_hoursPassed(claim.modified, 72), \"expiration required\");\n\n        uint256 stakedBefore = claim.requesterStaked;\n\n        claim.state = State.ClosedAfterAcceptanceExpired;\n        claim.modified = now;\n        claim.requesterStaked = 0;\n\n        token.safeTransfer(msg.sender, stakedBefore);\n\n        emit ClaimClosedAfterAcceptanceExpired(claim.dealId, _claimIdx);\n    }\n\n    function _closeAfterAwaitingResolution(uint256 _claimIdx) internal {\n        Claim storage claim = claims[_claimIdx];\n        require(State.AwaitingResolution == claim.state, \"State.AwaitingResolution required\");\n        require(_hoursPassed(claim.modified, 72), \"expiration required\");\n        require(msg.sender == claim.requesterAddress, \"awaiting requester\");\n\n        uint256 totalStaked = claim.requesterStaked.add(claim.respondentStaked);\n\n        claim.state = State.ClosedAfterResolutionExpired;\n        claim.modified = now;\n        claim.requesterStaked = 0;\n        claim.respondentStaked = 0;\n\n        token.safeTransfer(msg.sender, totalStaked);\n\n        emit ClaimClosedAfterResolutionExpired(claim.dealId, _claimIdx);\n    }\n\n    function _closeAfterAwaitingConfirmation(uint256 _claimIdx) internal {\n        Claim storage claim = claims[_claimIdx];\n        require(msg.sender == claim.requesterAddress, \"awaiting requester\");\n        require(State.AwaitingConfirmation == claim.state, \"State.AwaitingConfirmation required\");\n\n        bool expired = _hoursPassed(claim.modified, 24);\n        if (expired) {\n            claim.state = State.ClosedAfterConfirmationExpired;\n        } else {\n            claim.state = State.Closed;\n        }\n        claim.modified = now;\n\n        uint256 stakedBefore = claim.requesterStaked;\n        claim.requesterStaked = 0;\n\n        token.safeTransfer(msg.sender, stakedBefore);\n\n        if (expired) {\n            emit ClaimClosedAfterConfirmationExpired(claim.dealId, _claimIdx);\n        } else {\n            emit ClaimClosed(claim.dealId, _claimIdx);\n        }\n    }\n\n    function _hoursPassed(uint256 start, uint256 hoursAfter) internal view returns (bool) {\n        return now >= start + hoursAfter * 1 hours;\n    }\n\n    function _setMinStake(uint256 _newMinStake) internal {\n        uint256 previousMinStake = minStake;\n        if (previousMinStake != _newMinStake) {\n            emit MinStakeUpdated(previousMinStake, _newMinStake);\n            minStake = _newMinStake;\n        }\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_claimIdx\",\"type\":\"uint256\"}],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_claimIdx\",\"type\":\"uint256\"}],\"name\":\"accept\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"reclaimEtherTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMonethaAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minStake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getClaimsCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dealId\",\"type\":\"uint256\"},{\"name\":\"_dealHash\",\"type\":\"bytes32\"},{\"name\":\"_reasonNote\",\"type\":\"string\"},{\"name\":\"_requesterId\",\"type\":\"bytes32\"},{\"name\":\"_respondentId\",\"type\":\"bytes32\"},{\"name\":\"_amountToStake\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMinStake\",\"type\":\"uint256\"}],\"name\":\"setMinStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"reclaimTokenTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claims\",\"outputs\":[{\"name\":\"state\",\"type\":\"uint8\"},{\"name\":\"modified\",\"type\":\"uint256\"},{\"name\":\"dealId\",\"type\":\"uint256\"},{\"name\":\"dealHash\",\"type\":\"bytes32\"},{\"name\":\"reasonNote\",\"type\":\"string\"},{\"name\":\"requesterId\",\"type\":\"bytes32\"},{\"name\":\"requesterAddress\",\"type\":\"address\"},{\"name\":\"requesterStaked\",\"type\":\"uint256\"},{\"name\":\"respondentId\",\"type\":\"bytes32\"},{\"name\":\"respondentAddress\",\"type\":\"address\"},{\"name\":\"respondentStaked\",\"type\":\"uint256\"},{\"name\":\"resolutionNote\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_isMonethaAddress\",\"type\":\"bool\"}],\"name\":\"setMonethaAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_claimIdx\",\"type\":\"uint256\"},{\"name\":\"_resolutionNote\",\"type\":\"string\"}],\"name\":\"resolve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_minStake\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousMinStake\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newMinStake\",\"type\":\"uint256\"}],\"name\":\"MinStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dealId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"claimIdx\",\"type\":\"uint256\"}],\"name\":\"ClaimCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dealId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"claimIdx\",\"type\":\"uint256\"}],\"name\":\"ClaimAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dealId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"claimIdx\",\"type\":\"uint256\"}],\"name\":\"ClaimResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dealId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"claimIdx\",\"type\":\"uint256\"}],\"name\":\"ClaimClosedAfterAcceptanceExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dealId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"claimIdx\",\"type\":\"uint256\"}],\"name\":\"ClaimClosedAfterResolutionExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dealId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"claimIdx\",\"type\":\"uint256\"}],\"name\":\"ClaimClosedAfterConfirmationExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dealId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"claimIdx\",\"type\":\"uint256\"}],\"name\":\"ClaimClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReclaimTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReclaimEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_isMonethaAddress\",\"type\":\"bool\"}],\"name\":\"MonethaAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "60806040526002805460ff1916905534801561001a57600080fd5b506040516040806200237183398101604052805160209091015160008054600160a060020a03191633179055600160a060020a03821615156100bd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f6d7573742062652076616c696420746f6b656e20616464726573730000000000604482015290519081900360640190fd5b6002805461010060a860020a031916610100600160a060020a038516021790556100ef816401000000006100f6810204565b5050610145565b60035481811461014157604080518281526020810184905281517f171aabb8815c02fd00303450a77058600e3661eb75ce2e77972c0f080bc7099d929181900390910190a160038290555b5050565b61221c80620001556000396000f30060806040526004361061011c5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630aebeb4e811461012157806317ffc3201461013b57806319b05f491461015c5780632e84a3741461017457806331d4132514610198578063375b3c0a146101cd5780633ef8f2ba146101f45780633f4ba83a146102095780635c975abb1461021e5780637050b49714610233578063715018a6146102645780638456cb59146102795780638c80fd901461028e5780638da5cb5b146102a65780639f727c27146102d75780639fe98bda146102ec578063a888c2cd14610316578063c07e339114610481578063f16c7934146104a7578063f2fde38b146104cb578063fc0c546a146104ec575b600080fd5b34801561012d57600080fd5b50610139600435610501565b005b34801561014757600080fd5b50610139600160a060020a0360043516610641565b34801561016857600080fd5b5061013960043561074f565b34801561018057600080fd5b50610139600160a060020a0360043516602435610970565b3480156101a457600080fd5b506101b9600160a060020a0360043516610a61565b604080519115158252519081900360200190f35b3480156101d957600080fd5b506101e2610a76565b60408051918252519081900360200190f35b34801561020057600080fd5b506101e2610a7c565b34801561021557600080fd5b50610139610a83565b34801561022a57600080fd5b506101b9610ae0565b34801561023f57600080fd5b506101396004803590602480359160443591820191013560643560843560a435610ae9565b34801561027057600080fd5b5061013961115a565b34801561028557600080fd5b506101396111c6565b34801561029a57600080fd5b50610139600435611225565b3480156102b257600080fd5b506102bb61125f565b60408051600160a060020a039092168252519081900360200190f35b3480156102e357600080fd5b5061013961126e565b3480156102f857600080fd5b50610139600160a060020a0360043581169060243516604435611309565b34801561032257600080fd5b5061032e6004356113de565b604051808d600781111561033e57fe5b60ff16815260208082018e9052604082018d9052606082018c905260a082018a9052600160a060020a0389811660c084015260e083018990526101008301889052861661012083015261014082018590526101808383038101608084019081528c51918401919091528b5190926101608101926101a090910191908d019080838360005b838110156103da5781810151838201526020016103c2565b50505050905090810190601f1680156104075780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561043a578181015183820152602001610422565b50505050905090810190601f1680156104675780820380516001836020036101000a031916815260200191505b509e50505050505050505050505050505060405180910390f35b34801561048d57600080fd5b50610139600160a060020a03600435166024351515611576565b3480156104b357600080fd5b506101396004803590602480359081019101356115f1565b3480156104d757600080fd5b50610139600160a060020a0360043516611856565b3480156104f857600080fd5b506102bb611876565b60025460009060ff161561051457600080fd5b600454821061056d576040805160e560020a62461bcd02815260206004820152601360248201527f696e76616c696420636c61696d20696e64657800000000000000000000000000604482015290519081900360640190fd5b600480548390811061057b57fe5b60009182526020909120600c909102015460ff16905080600781111561059d57fe5b600114156105b3576105ae8261188a565b61063d565b8060078111156105bf57fe5b600214156105d0576105ae82611a5c565b8060078111156105dc57fe5b600314156105ed576105ae82611c4c565b6040805160e560020a62461bcd02815260206004820152600b60248201527f636c61696d2e5374617465000000000000000000000000000000000000000000604482015290519081900360640190fd5b5050565b60008054600160a060020a0316331461065957600080fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a038416916370a082319160248083019260209291908290030181600087803b1580156106ba57600080fd5b505af11580156106ce573d6000803e3d6000fd5b505050506040513d60208110156106e457600080fd5b505160005490915061070990600160a060020a0384811691168363ffffffff611e3916565b600054604080518381529051600160a060020a03909216917f355069f20974db323c9dcd100e8bf13fb2acc1884e5ec05b0a89c09e15ce810f9181900360200190a25050565b600254600090819060ff161561076457600080fd5b60045483106107bd576040805160e560020a62461bcd02815260206004820152601360248201527f696e76616c696420636c61696d20696e64657800000000000000000000000000604482015290519081900360640190fd5b60048054849081106107cb57fe5b60009182526020909120600c90910201805490925060ff1660078111156107ee57fe5b600114610852576040805160e560020a62461bcd02815260206004820152602160248201527f53746174652e4177616974696e67416363657074616e63652072657175697265604482015260fa60020a601902606482015290519081900360840190fd5b6006820154600160a060020a03163314156108dd576040805160e560020a62461bcd02815260206004820152603460248201527f72657175657374657220616e6420726573706f6e64656e74206164647265737360448201527f6573206d75737420626520646966666572656e74000000000000000000000000606482015290519081900360840190fd5b506007810154600254610900906101009004600160a060020a0316333084611ef1565b8154600260ff199091168117835542600184015560098301805473ffffffffffffffffffffffffffffffffffffffff191633179055600a83018290558201546040518491907f892b02346640499c4bf931ae518e88d067e4f4605e1c15ca9d82c0bdb2ce11e890600090a3505050565b600054600160a060020a0316331461098757600080fd5b600160a060020a03821615156109e7576040805160e560020a62461bcd02815260206004820152601b60248201527f7a65726f2061646472657373206973206e6f7420616c6c6f7765640000000000604482015290519081900360640190fd5b604051600160a060020a0383169082156108fc029083906000818181858888f19350505050158015610a1d573d6000803e3d6000fd5b50604080518281529051600160a060020a038416917fb54913b2b58b2e96ea9b4e96ba2353cf13426af9d3f252e0c17899a93c4ce125919081900360200190a25050565b60016020526000908152604090205460ff1681565b60035481565b6004545b90565b600054600160a060020a03163314610a9a57600080fd5b60025460ff161515610aab57600080fd5b6002805460ff191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b60025460ff1681565b6000610af3612082565b60025460ff1615610b0357600080fd5b60008611610b5b576040805160e560020a62461bcd02815260206004820152601d60248201527f726561736f6e206e6f7465206d757374206e6f7420626520656d707479000000604482015290519081900360640190fd5b871515610bb2576040805160e560020a62461bcd02815260206004820152601a60248201527f6465616c2068617368206d757374206265206e6f6e2d7a65726f000000000000604482015290519081900360640190fd5b841515610c09576040805160e560020a62461bcd02815260206004820152601d60248201527f726571756573746572204944206d757374206265206e6f6e2d7a65726f000000604482015290519081900360640190fd5b831515610c60576040805160e560020a62461bcd02815260206004820152601e60248201527f726573706f6e64656e74204944206d757374206265206e6f6e2d7a65726f0000604482015290519081900360640190fd5b60408051602080820187905282518083038201815291830192839052815191929182918401908083835b60208310610ca95780518252601f199092019160209182019101610c8a565b51815160209384036101000a6000190180199092169116179052604080519290940182900382208282018c90528451808403830181529285019485905282519096509194508392508401908083835b60208310610d175780518252601f199092019160209182019101610cf8565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614151515610dc6576040805160e560020a62461bcd02815260206004820152602a60248201527f72657175657374657220616e6420726573706f6e64656e74206d75737420626560448201527f20646966666572656e7400000000000000000000000000000000000000000000606482015290519081900360840190fd5b600354831015610e46576040805160e560020a62461bcd02815260206004820152603560248201527f616d6f756e7420746f207374616b65206d75737420626520677265617465722060448201527f6f7220657175616c20746f206d696e2e7374616b650000000000000000000000606482015290519081900360840190fd5b600254604080517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523360048201523060248201529051610100909204600160a060020a03169163dd62ed3e916044808201926020929091908290030181600087803b158015610eb657600080fd5b505af1158015610eca573d6000803e3d6000fd5b505050506040513d6020811015610ee057600080fd5b5051915082821015610f3c576040805160e560020a62461bcd02815260206004820152601360248201527f616c6c6f77616e636520746f6f20736d616c6c00000000000000000000000000604482015290519081900360640190fd5b600254610f59906101009004600160a060020a0316333086611ef1565b60408051610180810190915280600181526020014281526020018a81526020018960001916815260200188888080601f0160208091040260200160405190810160405280939291908181526020018383808284375050509284525050506020808201889052336040808401919091526060830187905260808301889052600060a0840181905260c08401819052815192830190915280825260e090920152600480546001818101808455929093528351600c9091027f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01805494955091938593839160ff19169083600781111561104c57fe5b0217905550602082810151600183015560408301516002830155606083015160038301556080830151805161108792600485019201906120ea565b5060a0820151600582015560c0820151600682018054600160a060020a0392831673ffffffffffffffffffffffffffffffffffffffff199182161790915560e084015160078401556101008401516008840155610120840151600984018054919093169116179055610140820151600a820155610160820151805161111691600b8401916020909101906120ea565b505060045460405160001990910192508b91507f96e3875898071e5d91932eb150a3914f9fe70e473f6faeaad697e99a48937c9c90600090a3505050505050505050565b600054600160a060020a0316331461117157600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031633146111dd57600080fd5b60025460ff16156111ed57600080fd5b6002805460ff191660011790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b60025460ff161561123557600080fd5b3360009081526001602052604090205460ff16151561125357600080fd5b61125c81611f9c565b50565b600054600160a060020a031681565b60008054600160a060020a0316331461128657600080fd5b5060008054604051303192600160a060020a03909216916108fc841502918491818181858888f193505050501580156112c3573d6000803e3d6000fd5b50600054604080518381529051600160a060020a03909216917fb54913b2b58b2e96ea9b4e96ba2353cf13426af9d3f252e0c17899a93c4ce1259181900360200190a250565b600054600160a060020a0316331461132057600080fd5b600160a060020a0382161515611380576040805160e560020a62461bcd02815260206004820152601b60248201527f7a65726f2061646472657373206973206e6f7420616c6c6f7765640000000000604482015290519081900360640190fd5b61139a600160a060020a038416838363ffffffff611e3916565b604080518281529051600160a060020a038416917f355069f20974db323c9dcd100e8bf13fb2acc1884e5ec05b0a89c09e15ce810f919081900360200190a2505050565b60048054829081106113ec57fe5b6000918252602091829020600c9190910201805460018083015460028085015460038601546004870180546040805161010098831615989098026000190190911694909404601f81018a90048a0287018a0190945283865260ff909616985092969095929492939291908301828280156114a75780601f1061147c576101008083540402835291602001916114a7565b820191906000526020600020905b81548152906001019060200180831161148a57829003601f168201915b5050505060058301546006840154600785015460088601546009870154600a880154600b8901805460408051602060026101006001861615026000190190941693909304601f81018490048402820184019092528181529a9b989a600160a060020a039889169a5096989597909416959294939083018282801561156c5780601f106115415761010080835404028352916020019161156c565b820191906000526020600020905b81548152906001019060200180831161154f57829003601f168201915b505050505090508c565b600054600160a060020a0316331461158d57600080fd5b600160a060020a038216600081815260016020908152604091829020805460ff191685151590811790915582519384529083015280517fa551de8741dbb2092ce6bc142fd0ff3af5dfbf87d0aa594619fccddb0141e6929281900390910190a15050565b600254600090819060ff161561160657600080fd5b600454851061165f576040805160e560020a62461bcd02815260206004820152601360248201527f696e76616c696420636c61696d20696e64657800000000000000000000000000604482015290519081900360640190fd5b600083116116dd576040805160e560020a62461bcd02815260206004820152602160248201527f7265736f6c7574696f6e206e6f7465206d757374206e6f7420626520656d707460448201527f7900000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60048054869081106116eb57fe5b60009182526020909120600c90910201805490925060ff16600781111561170e57fe5b600214611772576040805160e560020a62461bcd02815260206004820152602160248201527f53746174652e4177616974696e675265736f6c7574696f6e2072657175697265604482015260fa60020a601902606482015290519081900360840190fd5b6009820154600160a060020a031633146117d6576040805160e560020a62461bcd02815260206004820152601360248201527f6177616974696e6720726573706f6e64656e7400000000000000000000000000604482015290519081900360640190fd5b50600a81018054825460ff191660031783554260018401556000909155611801600b83018585612168565b5060025461181e906101009004600160a060020a03163383611e39565b60028201546040518691907f6672867a042c186f93065f233216054c059bfb83e2f948f602db370646ea570f90600090a35050505050565b600054600160a060020a0316331461186d57600080fd5b61125c81611fe7565b6002546101009004600160a060020a031681565b60008060048381548110151561189c57fe5b60009182526020909120600c909102016006810154909250600160a060020a03163314611913576040805160e560020a62461bcd02815260206004820152601260248201527f6177616974696e67207265717565737465720000000000000000000000000000604482015290519081900360640190fd5b815460ff16600781111561192357fe5b600114611987576040805160e560020a62461bcd02815260206004820152602160248201527f53746174652e4177616974696e67416363657074616e63652072657175697265604482015260fa60020a601902606482015290519081900360840190fd5b61199682600101546048612064565b15156119ec576040805160e560020a62461bcd02815260206004820152601360248201527f65787069726174696f6e20726571756972656400000000000000000000000000604482015290519081900360640190fd5b50600781018054825460ff191660041783554260018401556000909155600254611a2690600160a060020a03610100909104163383611e39565b60028201546040518491907fc97a067f7bbf4d80b93b4a3c8198048e59d77f54504ebb7fdd416ca788e8be4b90600090a3505050565b600080600483815481101515611a6e57fe5b60009182526020909120600c90910201805490925060ff166007811115611a9157fe5b600214611af5576040805160e560020a62461bcd02815260206004820152602160248201527f53746174652e4177616974696e675265736f6c7574696f6e2072657175697265604482015260fa60020a601902606482015290519081900360840190fd5b611b0482600101546048612064565b1515611b5a576040805160e560020a62461bcd02815260206004820152601360248201527f65787069726174696f6e20726571756972656400000000000000000000000000604482015290519081900360640190fd5b6006820154600160a060020a03163314611bbe576040805160e560020a62461bcd02815260206004820152601260248201527f6177616974696e67207265717565737465720000000000000000000000000000604482015290519081900360640190fd5b600a8201546007830154611bd79163ffffffff61206f16565b825460ff19166005178355426001840155600060078401819055600a840155600254909150611c1690600160a060020a03610100909104163383611e39565b60028201546040518491907faf8a508bd85641496c5109b3a94963b1c5f29096c6a5d5d6637e0984353044f690600090a3505050565b6000806000600484815481101515611c6057fe5b60009182526020909120600c909102016006810154909350600160a060020a03163314611cd7576040805160e560020a62461bcd02815260206004820152601260248201527f6177616974696e67207265717565737465720000000000000000000000000000604482015290519081900360640190fd5b825460ff166007811115611ce757fe5b600314611d64576040805160e560020a62461bcd02815260206004820152602360248201527f53746174652e4177616974696e67436f6e6669726d6174696f6e20726571756960448201527f7265640000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b611d7383600101546018612064565b91508115611d8b57825460ff19166006178355611d97565b825460ff191660071783555b504260018301556007820180546000909155600254611dc5906101009004600160a060020a03163383611e39565b8115611e015760028301546040518591907f6e88379f028c3d99c91c0a02e120f9b7a5cadb198f94171a7709fe820d3cf83c90600090a3611e33565b60028301546040518591907ffc17645f22c02af07d207ef633ce09f8e88a31989bc02538d396e73d811df47990600090a35b50505050565b82600160a060020a031663a9059cbb83836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015611eb557600080fd5b505af1158015611ec9573d6000803e3d6000fd5b505050506040513d6020811015611edf57600080fd5b50511515611eec57600080fd5b505050565b604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301528481166024830152604482018490529151918616916323b872dd916064808201926020929091908290030181600087803b158015611f6557600080fd5b505af1158015611f79573d6000803e3d6000fd5b505050506040513d6020811015611f8f57600080fd5b50511515611e3357600080fd5b60035481811461063d57604080518281526020810184905281517f171aabb8815c02fd00303450a77058600e3661eb75ce2e77972c0f080bc7099d929181900390910190a150600355565b600160a060020a0381161515611ffc57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b610e10020142101590565b8181018281101561207c57fe5b92915050565b60408051610180810190915280600081526000602082018190526040820181905260608083018290526080830181905260a0830182905260c0830182905260e08301829052610100830182905261012083018290526101408301919091526101609091015290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061212b57805160ff1916838001178555612158565b82800160010185558215612158579182015b8281111561215857825182559160200191906001019061213d565b506121649291506121d6565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106121a95782800160ff19823516178555612158565b82800160010185558215612158579182015b828111156121585782358255916020019190600101906121bb565b610a8091905b8082111561216457600081556001016121dc5600a165627a7a72305820004cc4b9b67f666a48cd91db8c57cb72ef86000f2acf78f1a4f83d839ea778cc0029000000000000000000000000af4dce16da2877f8c9e00544c93b62ac40631f160000000000000000000000000000000000000000000000000000000000e4e1c0",
  "constructorArguments": "000000000000000000000000af4dce16da2877f8c9e00544c93b62ac40631f160000000000000000000000000000000000000000000000000000000000e4e1c0"
}