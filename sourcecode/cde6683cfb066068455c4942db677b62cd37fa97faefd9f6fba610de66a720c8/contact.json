{
  "address": "0x8fe7adb6d37b601137124ce35c576fd15709cdab",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BOSToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-30\n*/\n\n// ----------------------------------------------------------------------------\n// BOS token contract\n//\n// (c) 2019 BITPoint APEC\n// ----------------------------------------------------------------------------\n\npragma solidity ^0.4.18;\n\ncontract SafeMath\n{\n\tfunction safeAdd(uint a, uint b) public pure returns (uint c)\n\t{\n\t\tc = a + b;\n\t\trequire(c >= a);\n\t}\n\t\n\tfunction safeSub(uint a, uint b) public pure returns (uint c)\n\t{\n\t\trequire(b <= a);\n\t\tc = a - b;\n\t}\n\t\n\tfunction safeMul(uint a, uint b) public pure returns (uint c)\n\t{\n\t\tc = a * b;\n\t\trequire(a == 0 || c / a == b);\n\t}\n\t\n\tfunction safeDiv(uint a, uint b) public pure returns (uint c)\n\t{\n\t\trequire(b > 0);\n\t\tc = a / b;\n\t}\n}\n\n\ncontract Owned\n{\n\taddress public owner;\n\taddress public newOwner;\n\t\n\tevent OwnershipTransferred\n\t(\n\t\taddress indexed owner,\n\t\taddress indexed newOwner\n\t);\n\t\n\tconstructor() public\n\t{\n\t\towner = msg.sender;\n\t}\n\t\n\tmodifier onlyOwner\n\t{\n\t\trequire(msg.sender == owner);\n\t\t_;\n\t}\n\t\n\tfunction transferOwnership(address _newOwner) onlyOwner public\n\t{\n\t\tnewOwner = _newOwner;\n\t}\n\t\n\tfunction acceptOwnership() public\n\t{\n\t\trequire(msg.sender == newOwner);\n\t\temit OwnershipTransferred(owner, newOwner);\n\t\towner = newOwner;\n\t\tnewOwner = address(0);\n\t}\n}\n\n\ncontract ERC20Interface\n{\n\tfunction totalSupply() public view returns (uint);\n\tfunction balanceOf(address tokenOwner) public view returns (uint balance);\n\tfunction allowance(address tokenOwner, address spender) public view returns (uint remaining);\n\tfunction transfer(address to, uint tokens) public returns (bool success);\n\tfunction approve(address spender, uint tokens) public returns (bool success);\n\tfunction transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n\tevent Transfer\n\t(\n\t\taddress indexed from,\n\t\taddress indexed to,\n\t\tuint tokens\n\t);\n\t\n\tevent Approval\n\t(\n\t\taddress indexed tokenOwner,\n\t\taddress indexed spender,\n\t\tuint tokens\n\t);\n}\n\n\ncontract StandardERC20Token is ERC20Interface, SafeMath\n{\n\tstring public name;\n\tstring public symbol;\n\tuint8 public decimals = 8;\n\tuint256 public totalSupply;\n\t\n\tmapping(address => bool) frozen;\n\tmapping(address => uint) balanceOfAddress;\n\tmapping(address => mapping(address => uint)) allowed;\n\t\n\tconstructor(string _tokenName, string _tokenSymbol) public\n\t{\n\t\tname = _tokenName;\n\t\tsymbol = _tokenSymbol;\n\t}\n\t\n\tfunction totalSupply() public view returns (uint)\n\t{\n\t\treturn totalSupply - balanceOfAddress[address(0)];\n\t}\n\t\n\tfunction balanceOf(address tokenOwner) public view returns (uint balance)\n\t{\n\t\treturn balanceOfAddress[tokenOwner];\n\t}\n\t\n\tfunction allowance(address tokenOwner, address spender) public view returns (uint remaining)\n\t{\n\t\treturn allowed[tokenOwner][spender];\n\t}\n\t\n\tfunction transfer(address to, uint tokens) public returns (bool success)\n\t{\n\t\trequire(to != address(0));\n\t\trequire(!frozen[msg.sender]);\n\t\trequire(!frozen[to]);\n\t\tbalanceOfAddress[msg.sender] = safeSub(balanceOfAddress[msg.sender], tokens);\n\t\tbalanceOfAddress[to] = safeAdd(balanceOfAddress[to], tokens);\n\t\temit Transfer(msg.sender, to, tokens);\n\t\treturn true;\n\t}\n\t\n\tfunction approve(address spender, uint tokens) public returns (bool success)\n\t{\n\t\tallowed[msg.sender][spender] = tokens;\n\t\temit Approval(msg.sender, spender, tokens);\n\t\treturn true;\n\t}\n\t\n\tfunction transferFrom(address from, address to, uint tokens) public returns (bool success)\n\t{\n\t\trequire(to != address(0));\n\t\trequire(!frozen[msg.sender]);\n\t\trequire(!frozen[to]);\n\t\tbalanceOfAddress[from] = safeSub(balanceOfAddress[from], tokens);\n\t\tallowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n\t\tbalanceOfAddress[to] = safeAdd(balanceOfAddress[to], tokens);\n\t\temit Transfer(from, to, tokens);\n\t\treturn true;\n\t}\n\n\tfunction isFrozenAccount(address target) public constant returns (bool freezed)\n\t{\n\t\treturn frozen[target];\n\t}\n}\n\n\ncontract BOSToken is StandardERC20Token, Owned\n{\n\taddress public vault;\n\taddress public wallet;\n\tbool public isBurnable = true;\n\t\n\tevent FreezeAccount\n\t(\n\t\taddress indexed target,\n\t\tbool freezed\n\t);\n\n\tevent WalletChanged\n\t(\n\t\taddress indexed oldWallet,\n\t\taddress indexed newWallet\n\t);\n\n\tconstructor\n\t(\n\t\tstring tokenName,\n\t\tstring tokenSymbol,\n\t\tuint256 initialSupply,\n\t\taddress _vault,\n\t\taddress _wallet\n\t) StandardERC20Token(tokenName, tokenSymbol) public\n\t{\n\t\trequire(vault == address(0));\n\t\trequire(_vault != address(0));\n\t\t\n\t\ttotalSupply = initialSupply * 10 ** uint256(decimals);\n\t\tvault = _vault;\n\t\twallet = _wallet;\n\t\tbalanceOfAddress[vault] = totalSupply;\n\t}\n\n\tfunction freezeAccount(address target) onlyOwner public\n\t{\n\t\trequire(target != owner);\n\t\tfrozen[target] = true;\n\t\temit FreezeAccount(target, true);\n\t}\n\n\tfunction unfreezeAccount(address target) onlyOwner public\n\t{\n\t\tfrozen[target] = false;\n\t\temit FreezeAccount(target, false);\n\t}\n\t\n\tfunction setWallet(address newWallet) onlyOwner public\n\t{\n\t\trequire(newWallet != address(0));\n\t\temit WalletChanged(wallet, newWallet);\n\t\twallet = newWallet;\n\t}\n\n\tfunction () public payable\n\t{\n\t\t wallet.transfer(msg.value);\n\t}\n\t\n\tfunction transferAnyERC20Token(address tokenAddress, uint tokens) onlyOwner public returns (bool success) {\n\t\treturn ERC20Interface(tokenAddress).transfer(vault, tokens);\n\t}\n}",
  "bytecode": "60806040526002805460ff19166008179055600a805460a060020a60ff0219167401000000000000000000000000000000000000000017905534801561004457600080fd5b5060405162000f5538038062000f5583398101604090815281516020808401519284015160608501516080860151938601805190969590950194919390929091869186916100989160009190850190610145565b5080516100ac906001906020840190610145565b505060078054600160a060020a0319163317905550600954600160a060020a0316156100d757600080fd5b600160a060020a03821615156100ec57600080fd5b60025460ff16600a90810a93909302600381905560098054600160a060020a0319908116600160a060020a0395861617918290558554169284169290921790935516600090815260056020526040902055506101e09050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061018657805160ff19168380011785556101b3565b828001600101855582156101b3579182015b828111156101b3578251825591602001919060010190610198565b506101bf9291506101c3565b5090565b6101dd91905b808211156101bf57600081556001016101c9565b90565b610d6580620001f06000396000f3006080604052600436106101485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610184578063095ea7b31461020e57806318160ddd1461024657806323b872dd1461026d578063313ce567146102975780634028db79146102c2578063521eb273146102e357806370a0823114610314578063788649ea1461033557806379ba509714610358578063883356d91461036d5780638da5cb5b1461038257806395d89b4114610397578063a293d1e8146103ac578063a9059cbb146103c7578063b5931f7c146103eb578063d05c78da14610406578063d4ee1d9014610421578063dc39d06d14610436578063dd62ed3e1461045a578063deaa59df14610481578063e6cb9013146104a2578063f26c159f146104bd578063f2fde38b146104de578063fbfa77cf146104ff575b600a54604051600160a060020a03909116903480156108fc02916000818181858888f19350505050158015610181573d6000803e3d6000fd5b50005b34801561019057600080fd5b50610199610514565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101d35781810151838201526020016101bb565b50505050905090810190601f1680156102005780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561021a57600080fd5b50610232600160a060020a03600435166024356105a2565b604080519115158252519081900360200190f35b34801561025257600080fd5b5061025b610609565b60408051918252519081900360200190f35b34801561027957600080fd5b50610232600160a060020a036004358116906024351660443561063b565b3480156102a357600080fd5b506102ac61078e565b6040805160ff9092168252519081900360200190f35b3480156102ce57600080fd5b50610232600160a060020a0360043516610797565b3480156102ef57600080fd5b506102f86107b5565b60408051600160a060020a039092168252519081900360200190f35b34801561032057600080fd5b5061025b600160a060020a03600435166107c4565b34801561034157600080fd5b50610356600160a060020a03600435166107df565b005b34801561036457600080fd5b5061035661084c565b34801561037957600080fd5b506102326108d6565b34801561038e57600080fd5b506102f86108f7565b3480156103a357600080fd5b50610199610906565b3480156103b857600080fd5b5061025b600435602435610960565b3480156103d357600080fd5b50610232600160a060020a0360043516602435610975565b3480156103f757600080fd5b5061025b600435602435610a73565b34801561041257600080fd5b5061025b600435602435610a94565b34801561042d57600080fd5b506102f8610ab9565b34801561044257600080fd5b50610232600160a060020a0360043516602435610ac8565b34801561046657600080fd5b5061025b600160a060020a0360043581169060243516610b84565b34801561048d57600080fd5b50610356600160a060020a0360043516610baf565b3480156104ae57600080fd5b5061025b600435602435610c44565b3480156104c957600080fd5b50610356600160a060020a0360043516610c54565b3480156104ea57600080fd5b50610356600160a060020a0360043516610ce4565b34801561050b57600080fd5b506102f8610d2a565b6000805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561059a5780601f1061056f5761010080835404028352916020019161059a565b820191906000526020600020905b81548152906001019060200180831161057d57829003601f168201915b505050505081565b336000818152600660209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a35060015b92915050565b6000805260056020527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc546003540390565b6000600160a060020a038316151561065257600080fd5b3360009081526004602052604090205460ff161561066f57600080fd5b600160a060020a03831660009081526004602052604090205460ff161561069557600080fd5b600160a060020a0384166000908152600560205260409020546106b89083610960565b600160a060020a03851660009081526005602090815260408083209390935560068152828220338352905220546106ef9083610960565b600160a060020a03808616600090815260066020908152604080832033845282528083209490945591861681526005909152205461072d9083610c44565b600160a060020a0380851660008181526005602090815260409182902094909455805186815290519193928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35060019392505050565b60025460ff1681565b600160a060020a031660009081526004602052604090205460ff1690565b600a54600160a060020a031681565b600160a060020a031660009081526005602052604090205490565b600754600160a060020a031633146107f657600080fd5b600160a060020a0381166000818152600460209081526040808320805460ff191690558051928352517fd16a7a4ba83c78a07676c543502e8155f633ecd3c35abb1da51bcbf129758b0f9281900390910190a250565b600854600160a060020a0316331461086357600080fd5b600854600754604051600160a060020a0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600880546007805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600a5474010000000000000000000000000000000000000000900460ff1681565b600754600160a060020a031681565b60018054604080516020600284861615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561059a5780601f1061056f5761010080835404028352916020019161059a565b60008282111561096f57600080fd5b50900390565b6000600160a060020a038316151561098c57600080fd5b3360009081526004602052604090205460ff16156109a957600080fd5b600160a060020a03831660009081526004602052604090205460ff16156109cf57600080fd5b336000908152600560205260409020546109e99083610960565b3360009081526005602052604080822092909255600160a060020a03851681522054610a159083610c44565b600160a060020a0384166000818152600560209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b6000808211610a8157600080fd5b8183811515610a8c57fe5b049392505050565b818102821580610aae5750818382811515610aab57fe5b04145b151561060357600080fd5b600854600160a060020a031681565b600754600090600160a060020a03163314610ae257600080fd5b600954604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810185905290519185169163a9059cbb916044808201926020929091908290030181600087803b158015610b5157600080fd5b505af1158015610b65573d6000803e3d6000fd5b505050506040513d6020811015610b7b57600080fd5b50519392505050565b600160a060020a03918216600090815260066020908152604080832093909416825291909152205490565b600754600160a060020a03163314610bc657600080fd5b600160a060020a0381161515610bdb57600080fd5b600a54604051600160a060020a038084169216907f64cbbd34f3faebfd04eff088ae5832f6d254dbb81820b0055e9d85c534aa700d90600090a3600a805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b8181018281101561060357600080fd5b600754600160a060020a03163314610c6b57600080fd5b600754600160a060020a0382811691161415610c8657600080fd5b600160a060020a038116600081815260046020908152604091829020805460ff19166001908117909155825190815291517fd16a7a4ba83c78a07676c543502e8155f633ecd3c35abb1da51bcbf129758b0f9281900390910190a250565b600754600160a060020a03163314610cfb57600080fd5b6008805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600954600160a060020a0316815600a165627a7a72305820e8c6fc84a486648fa8b2f6f3d9338b3807b53ce87858c2f1c139a40ab49380ed002900000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000009f6281601a0e1d426bc9d79d28657b0fad4aa6740000000000000000000000009f6281601a0e1d426bc9d79d28657b0fad4aa6740000000000000000000000000000000000000000000000000000000000000009424f5320546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003424f530000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000009f6281601a0e1d426bc9d79d28657b0fad4aa6740000000000000000000000009f6281601a0e1d426bc9d79d28657b0fad4aa6740000000000000000000000000000000000000000000000000000000000000009424f5320546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003424f530000000000000000000000000000000000000000000000000000000000"
}