{
  "address": "0x332e68dabba9ac8ac5f9a11423f7e72a8b648d1a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DTDToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-22\n*/\n\npragma solidity ^0.4.25;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract IERC20 {\n\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public;\n    function transferFrom(address from, address to, uint256 value) public;\n    function approve(address spender, uint256 value) external;\n    function allowance(address owner, address spender) public view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n}\n\ncontract DTDToken is IERC20 {\n\n    using SafeMath for uint256;\n\n    // Token properties\n    string public name = \"Dontoshi Token\";\n    string public symbol = \"DTD\";\n    uint public decimals = 18;\n\n    uint public _totalSupply = 100000000e18;\n    uint public _tokenLeft = 100000000e18;\n    uint public _round1Limit = 2300000e18;\n    uint public _round2Limit = 5300000e18;\n    uint public _round3Limit = 9800000e18;\n    uint public _developmentReserve = 20200000e18;\n    uint public _endDate = 1544918399;\n    uint public _minInvest = 0.5 ether;\n    uint public _maxInvest = 100 ether;\n\n    // Invested ether\n    mapping (address => uint256) _investedEth;\n    // Balances for each account\n    mapping (address => uint256) balances;\n\n    // Owner of account approves the transfer of an amount to another account\n    mapping (address => mapping(address => uint256)) allowed;\n\n    // Owner of Token\n    address public owner;\n\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n    // modifier to allow only owner has full control on the function\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    // Constructor\n    // @notice DTDToken Contract\n    // @return the transaction address\n    constructor() public payable {\n        owner = 0x9FD6977e609AA945C6b6e40537dCF0A791775279;\n\n        balances[owner] = _totalSupply; \n    }\n\n    // Payable method\n    // @notice Anyone can buy the tokens on tokensale by paying ether\n    function () external payable {\n        tokensale(msg.sender);\n    }\n\n    // @notice tokensale\n    // @param recipient The address of the recipient\n    // @return the transaction address and send the event as Transfer\n    function tokensale(address recipient) public payable {\n        require(recipient != 0x0);\n        \n        uint256 weiAmount = msg.value;\n        uint tokens = weiAmount.mul(getPrice());\n        \n        _investedEth[msg.sender] = _investedEth[msg.sender].add(weiAmount);\n        \n        require( weiAmount >= _minInvest );\n        require(_investedEth[msg.sender] <= _maxInvest);\n        require(_tokenLeft >= tokens + _developmentReserve);\n\n        balances[owner] = balances[owner].sub(tokens);\n        balances[recipient] = balances[recipient].add(tokens);\n\n        _tokenLeft = _tokenLeft.sub(tokens);\n\n        owner.transfer(msg.value);\n        TokenPurchase(msg.sender, recipient, weiAmount, tokens);\n    }\n\n    // @return total tokens supplied\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    // What is the balance of a particular account?\n    // @param who The address of the particular account\n    // @return the balanace the particular account\n    function balanceOf(address who) public view returns (uint256) {\n        return balances[who];\n    }\n\n    // Token distribution to founder, develoment team, partners, charity, and bounty\n    function sendDTDToken(address to, uint256 value) public onlyOwner {\n        require (\n            to != 0x0 && value > 0 && _tokenLeft >= value\n        );\n\n        balances[owner] = balances[owner].sub(value);\n        balances[to] = balances[to].add(value);\n        _tokenLeft = _tokenLeft.sub(value);\n        Transfer(owner, to, value);\n    }\n\n    function sendDTDTokenToMultiAddr(address[] memory listAddresses, uint256[] memory amount) public onlyOwner {\n        require(listAddresses.length == amount.length); \n         for (uint256 i = 0; i < listAddresses.length; i++) {\n                require(listAddresses[i] != 0x0); \n                balances[listAddresses[i]] = balances[listAddresses[i]].add(amount[i]);\n                balances[owner] = balances[owner].sub(amount[i]);\n                Transfer(owner, listAddresses[i], amount[i]);\n                _tokenLeft = _tokenLeft.sub(amount[i]);\n         }\n    }\n\n    function destroyDTDToken(address to, uint256 value) public onlyOwner {\n        require (\n                to != 0x0 && value > 0 && _totalSupply >= value\n            );\n        balances[to] = balances[to].sub(value);\n    }\n\n    // @notice send value token to to from msg.sender\n    // @param to The address of the recipient\n    // @param value The amount of token to be transferred\n    // @return the transaction address and send the event as Transfer\n    function transfer(address to, uint256 value) public {\n        require (\n            balances[msg.sender] >= value && value > 0\n        );\n        balances[msg.sender] = balances[msg.sender].sub(value);\n        balances[to] = balances[to].add(value);\n        Transfer(msg.sender, to, value);\n    }\n\n    // @notice send value token to to from from\n    // @param from The address of the sender\n    // @param to The address of the recipient\n    // @param value The amount of token to be transferred\n    // @return the transaction address and send the event as Transfer\n    function transferFrom(address from, address to, uint256 value) public {\n        require (\n            allowed[from][msg.sender] >= value && balances[from] >= value && value > 0\n        );\n        balances[from] = balances[from].sub(value);\n        balances[to] = balances[to].add(value);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\n        Transfer(from, to, value);\n    }\n\n    // Allow spender to withdraw from your account, multiple times, up to the value amount.\n    // If this function is called again it overwrites the current allowance with value.\n    // @param spender The address of the sender\n    // @param value The amount to be approved\n    // @return the transaction address and send the event as Approval\n    function approve(address spender, uint256 value) external {\n        require (\n            balances[msg.sender] >= value && value > 0\n        );\n        allowed[msg.sender][spender] = value;\n        Approval(msg.sender, spender, value);\n    }\n\n    // Check the allowed value for the spender to withdraw from owner\n    // @param owner The address of the owner\n    // @param spender The address of the spender\n    // @return the amount which spender is still allowed to withdraw from owner\n    function allowance(address _owner, address spender) public view returns (uint256) {\n        return allowed[_owner][spender];\n    }\n\n    // Get current price of a Token\n    // @return the price or token value for a ether\n    function getPrice() public constant returns (uint result) {\n        if ( _totalSupply - _tokenLeft < _round1Limit )\n            return 650;\n        else if ( _totalSupply - _tokenLeft < _round2Limit )\n            return 500;\n        else if ( _totalSupply - _tokenLeft < _round3Limit )\n            return 400;\n        else\n            return 0;\n    }\n\n    function getTokenDetail() public view returns (string memory, string memory, uint256) {\n     return (name, symbol, _totalSupply);\n    }\n}",
  "bytecode": "60806040526040805190810160405280600e81526020017f446f6e746f73686920546f6b656e0000000000000000000000000000000000008152506000908051906020019062000051929190620001e3565b506040805190810160405280600381526020017f4454440000000000000000000000000000000000000000000000000000000000815250600190805190602001906200009f929190620001e3565b5060126002556a52b7d2dcc80cd2e40000006003556a52b7d2dcc80cd2e40000006004556a01e70b3ff53dbc258000006005556a0462519361a485088000006006556a081b3b10843eb25d0000006007556a10b58431b7c52681000000600855635c15957f6009556706f05b59d3b20000600a5568056bc75e2d63100000600b55739fd6977e609aa945c6b6e40537dcf0a791775279600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600354600d6000600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555062000292565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200022657805160ff191683800117855562000257565b8280016001018555821562000257579182015b828111156200025657825182559160200191906001019062000239565b5b5090506200026691906200026a565b5090565b6200028f91905b808211156200028b57600081600090555060010162000271565b5090565b90565b611fa280620002a26000396000f300608060405260043610610149576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610154578063095ea7b3146101e45780630ee02d6d1461023157806318160ddd1461025c57806323b872dd14610287578063289de615146102f4578063313ce567146103f7578063365afa33146104225780633eaaf86b1461044d5780634107c8051461047857806349b4f2d9146104a357806370a08231146104ce5780638c522d4f146105255780638da5cb5b146105725780638fe444ea146105c957806394a86dc5146105f457806395d89b411461061f57806398d5fdca146106af578063a9059cbb146106da578063b113d9dc14610727578063b2a5bc701461075d578063dbfa586314610788578063dd62ed3e146107b3578063ef5fb0771461082a578063f7af1423146108d3575b61015233610920565b005b34801561016057600080fd5b50610169610cd7565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101a957808201518184015260208101905061018e565b50505050905090810190601f1680156101d65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101f057600080fd5b5061022f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d75565b005b34801561023d57600080fd5b50610246610eb9565b6040518082815260200191505060405180910390f35b34801561026857600080fd5b50610271610ebf565b6040518082815260200191505060405180910390f35b34801561029357600080fd5b506102f2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ec9565b005b34801561030057600080fd5b5061030961124e565b604051808060200180602001848152602001838103835286818151815260200191508051906020019080838360005b83811015610353578082015181840152602081019050610338565b50505050905090810190601f1680156103805780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b838110156103b957808201518184015260208101905061039e565b50505050905090810190601f1680156103e65780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b34801561040357600080fd5b5061040c61139c565b6040518082815260200191505060405180910390f35b34801561042e57600080fd5b506104376113a2565b6040518082815260200191505060405180910390f35b34801561045957600080fd5b506104626113a8565b6040518082815260200191505060405180910390f35b34801561048457600080fd5b5061048d6113ae565b6040518082815260200191505060405180910390f35b3480156104af57600080fd5b506104b86113b4565b6040518082815260200191505060405180910390f35b3480156104da57600080fd5b5061050f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113ba565b6040518082815260200191505060405180910390f35b34801561053157600080fd5b50610570600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611403565b005b34801561057e57600080fd5b50610587611538565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105d557600080fd5b506105de61155e565b6040518082815260200191505060405180910390f35b34801561060057600080fd5b50610609611564565b6040518082815260200191505060405180910390f35b34801561062b57600080fd5b5061063461156a565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610674578082015181840152602081019050610659565b50505050905090810190601f1680156106a15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156106bb57600080fd5b506106c4611608565b6040518082815260200191505060405180910390f35b3480156106e657600080fd5b50610725600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611660565b005b61075b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610920565b005b34801561076957600080fd5b5061077261184d565b6040518082815260200191505060405180910390f35b34801561079457600080fd5b5061079d611853565b6040518082815260200191505060405180910390f35b3480156107bf57600080fd5b50610814600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611859565b6040518082815260200191505060405180910390f35b34801561083657600080fd5b506108d160048036038101908080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192905050506118e0565b005b3480156108df57600080fd5b5061091e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611c5c565b005b60008060008373ffffffffffffffffffffffffffffffffffffffff161415151561094957600080fd5b349150610966610957611608565b83611f0c90919063ffffffff16565b90506109ba82600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f3f90919063ffffffff16565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600a548210151515610a0e57600080fd5b600b54600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411151515610a5e57600080fd5b600854810160045410151515610a7357600080fd5b610ae781600d6000600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f5d90919063ffffffff16565b600d6000600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b9e81600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f3f90919063ffffffff16565b600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610bf681600454611f5d90919063ffffffff16565b600481905550600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610c64573d6000803e3d6000fd5b508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad188484604051808381526020018281526020019250505060405180910390a3505050565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d6d5780601f10610d4257610100808354040283529160200191610d6d565b820191906000526020600020905b815481529060010190602001808311610d5057829003601f168201915b505050505081565b80600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610dc45750600081115b1515610dcf57600080fd5b80600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a35050565b60085481565b6000600354905090565b80600e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610f94575080600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015610fa05750600081115b1515610fab57600080fd5b610ffd81600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f5d90919063ffffffff16565b600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061109281600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f3f90919063ffffffff16565b600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061116481600e60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f5d90919063ffffffff16565b600e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6060806000806001600354828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112ee5780601f106112c3576101008083540402835291602001916112ee565b820191906000526020600020905b8154815290600101906020018083116112d157829003601f168201915b50505050509250818054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561138a5780601f1061135f5761010080835404028352916020019161138a565b820191906000526020600020905b81548152906001019060200180831161136d57829003601f168201915b50505050509150925092509250909192565b60025481565b60055481565b60035481565b600a5481565b60065481565b6000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561145f57600080fd5b60008273ffffffffffffffffffffffffffffffffffffffff16141580156114865750600081115b801561149457508060035410155b151561149f57600080fd5b6114f181600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f5d90919063ffffffff16565b600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b5481565b60075481565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116005780601f106115d557610100808354040283529160200191611600565b820191906000526020600020905b8154815290600101906020018083116115e357829003601f168201915b505050505081565b60006005546004546003540310156116245761028a905061165d565b60065460045460035403101561163e576101f4905061165d565b60075460045460035403101561165857610190905061165d565b600090505b90565b80600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156116af5750600081115b15156116ba57600080fd5b61170c81600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f5d90919063ffffffff16565b600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506117a181600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f3f90919063ffffffff16565b600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60045481565b60095481565b6000600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561193e57600080fd5b8151835114151561194e57600080fd5b600090505b8251811015611c57576000838281518110151561196c57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff161415151561199957600080fd5b611a1982828151811015156119aa57fe5b90602001906020020151600d600086858151811015156119c657fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f3f90919063ffffffff16565b600d60008584815181101515611a2b57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611afe8282815181101515611a8457fe5b90602001906020020151600d6000600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f5d90919063ffffffff16565b600d6000600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508281815181101515611b7157fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff16600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8484815181101515611bf957fe5b906020019060200201516040518082815260200191505060405180910390a3611c448282815181101515611c2957fe5b90602001906020020151600454611f5d90919063ffffffff16565b6004819055508080600101915050611953565b505050565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611cb857600080fd5b60008273ffffffffffffffffffffffffffffffffffffffff1614158015611cdf5750600081115b8015611ced57508060045410155b1515611cf857600080fd5b611d6c81600d6000600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f5d90919063ffffffff16565b600d6000600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611e2381600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f3f90919063ffffffff16565b600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611e7b81600454611f5d90919063ffffffff16565b6004819055508173ffffffffffffffffffffffffffffffffffffffff16600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008082840290506000841480611f2d5750828482811515611f2a57fe5b04145b1515611f3557fe5b8091505092915050565b6000808284019050838110151515611f5357fe5b8091505092915050565b6000828211151515611f6b57fe5b8183039050929150505600a165627a7a723058202379c2d54b11c76eb0dc3aa7e55635d08c3ec3b4f8ab97642dfde96c46e2d0600029"
}