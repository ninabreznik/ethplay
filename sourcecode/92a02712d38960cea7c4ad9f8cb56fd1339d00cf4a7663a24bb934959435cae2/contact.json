{
  "address": "0x50f2b7ab72551b399ac81081484ef0b0f23aa38c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EthSwap",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-25\n*/\n\npragma solidity ^0.5.0;\n\ninterface SwapInterface {\n    // Public variables\n    function brokerFees(address _broker) external view returns (uint256);\n    function redeemedAt(bytes32 _swapID) external view returns(uint256);\n\n    /// @notice Initiates the atomic swap.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    /// @param _spender The address of the withdrawing trader.\n    /// @param _secretLock The hash of the secret (Hash Lock).\n    /// @param _timelock The unix timestamp when the swap expires.\n    /// @param _value The value of the atomic swap.\n    function initiate(\n        bytes32 _swapID,\n        address payable _spender,\n        bytes32 _secretLock,\n        uint256 _timelock,\n        uint256 _value\n    ) external payable;\n\n    /// @notice Initiates the atomic swap with broker fees.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    /// @param _spender The address of the withdrawing trader.\n    /// @param _broker The address of the broker.\n    /// @param _brokerFee The fee to be paid to the broker on success.\n    /// @param _secretLock The hash of the secret (Hash Lock).\n    /// @param _timelock The unix timestamp when the swap expires.\n    /// @param _value The value of the atomic swap.\n    function initiateWithFees(\n        bytes32 _swapID,\n        address payable _spender,\n        address payable _broker,\n        uint256 _brokerFee,\n        bytes32 _secretLock,\n        uint256 _timelock,\n        uint256 _value\n    ) external payable;\n\n    /// @notice Redeems an atomic swap.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    /// @param _receiver The receiver's address.\n    /// @param _secretKey The secret of the atomic swap.\n    function redeem(bytes32 _swapID, address payable _receiver, bytes32 _secretKey) external;\n\n    /// @notice Redeems an atomic swap to the spender. Can be called by anyone.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    /// @param _secretKey The secret of the atomic swap.\n    function redeemToSpender(bytes32 _swapID, bytes32 _secretKey) external;\n\n    /// @notice Refunds an atomic swap.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    function refund(bytes32 _swapID) external;\n\n    /// @notice Allows broker fee withdrawals.\n    ///\n    /// @param _amount The withdrawal amount.\n    function withdrawBrokerFees(uint256 _amount) external;\n\n    /// @notice Audits an atomic swap.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    function audit(\n        bytes32 _swapID\n    ) external view returns (\n        uint256 timelock,\n        uint256 value,\n        address to, uint256 brokerFee,\n        address broker,\n        address from,\n        bytes32 secretLock\n    );\n\n    /// @notice Audits the secret of an atomic swap.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    function auditSecret(bytes32 _swapID) external view  returns (bytes32 secretKey);\n\n    /// @notice Checks whether a swap is refundable or not.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    function refundable(bytes32 _swapID) external view returns (bool);\n\n    /// @notice Checks whether a swap is initiatable or not.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    function initiatable(bytes32 _swapID) external view returns (bool);\n\n    /// @notice Checks whether a swap is redeemable or not.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    function redeemable(bytes32 _swapID) external view returns (bool);\n\n    /// @notice Generates a deterministic swap id using initiate swap details.\n    ///\n    /// @param _secretLock The hash of the secret.\n    /// @param _timelock The expiry timestamp.\n    function swapID(bytes32 _secretLock, uint256 _timelock) external pure returns (bytes32);\n}\n\ncontract BaseSwap is SwapInterface {\n    string public VERSION; // Passed in as a constructor parameter.\n\n    struct Swap {\n        uint256 timelock;\n        uint256 value;\n        uint256 brokerFee;\n        bytes32 secretLock;\n        bytes32 secretKey;\n        address payable funder;\n        address payable spender;\n        address payable broker;\n    }\n\n    enum States {\n        INVALID,\n        OPEN,\n        CLOSED,\n        EXPIRED\n    }\n\n    // Events\n    event LogOpen(bytes32 _swapID, address _spender, bytes32 _secretLock);\n    event LogExpire(bytes32 _swapID);\n    event LogClose(bytes32 _swapID, bytes32 _secretKey);\n\n    // Storage\n    mapping (bytes32 => Swap) internal swaps;\n    mapping (bytes32 => States) private _swapStates;\n    mapping (address => uint256) private _brokerFees;\n    mapping (bytes32 => uint256) private _redeemedAt;\n\n    /// @notice Throws if the swap is not invalid (i.e. has already been opened)\n    modifier onlyInvalidSwaps(bytes32 _swapID) {\n        require(_swapStates[_swapID] == States.INVALID, \"swap opened previously\");\n        _;\n    }\n\n    /// @notice Throws if the swap is not open.\n    modifier onlyOpenSwaps(bytes32 _swapID) {\n        require(_swapStates[_swapID] == States.OPEN, \"swap not open\");\n        _;\n    }\n\n    /// @notice Throws if the swap is not closed.\n    modifier onlyClosedSwaps(bytes32 _swapID) {\n        require(_swapStates[_swapID] == States.CLOSED, \"swap not redeemed\");\n        _;\n    }\n\n    /// @notice Throws if the swap is not expirable.\n    modifier onlyExpirableSwaps(bytes32 _swapID) {\n        /* solium-disable-next-line security/no-block-members */\n        require(now >= swaps[_swapID].timelock, \"swap not expirable\");\n        _;\n    }\n\n    /// @notice Throws if the secret key is not valid.\n    modifier onlyWithSecretKey(bytes32 _swapID, bytes32 _secretKey) {\n        require(swaps[_swapID].secretLock == sha256(abi.encodePacked(_secretKey)), \"invalid secret\");\n        _;\n    }\n\n    /// @notice Throws if the caller is not the authorized spender.\n    modifier onlySpender(bytes32 _swapID, address _spender) {\n        require(swaps[_swapID].spender == _spender, \"unauthorized spender\");\n        _;\n    }\n\n    /// @notice The contract constructor.\n    ///\n    /// @param _VERSION A string defining the contract version.\n    constructor(string memory _VERSION) public {\n        VERSION = _VERSION;\n    }\n\n    /// @notice Initiates the atomic swap.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    /// @param _spender The address of the withdrawing trader.\n    /// @param _secretLock The hash of the secret (Hash Lock).\n    /// @param _timelock The unix timestamp when the swap expires.\n    /// @param _value The value of the atomic swap.\n    function initiate(\n        bytes32 _swapID,\n        address payable _spender,\n        bytes32 _secretLock,\n        uint256 _timelock,\n        uint256 _value\n    ) public onlyInvalidSwaps(_swapID) payable {\n        // Store the details of the swap.\n        Swap memory swap = Swap({\n            timelock: _timelock,\n            brokerFee: 0,\n            value: _value,\n            funder: msg.sender,\n            spender: _spender,\n            broker: address(0x0),\n            secretLock: _secretLock,\n            secretKey: 0x0\n        });\n        swaps[_swapID] = swap;\n        _swapStates[_swapID] = States.OPEN;\n\n        // Logs open event\n        emit LogOpen(_swapID, _spender, _secretLock);\n    }\n\n    /// @notice Initiates the atomic swap with fees.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    /// @param _spender The address of the withdrawing trader.\n    /// @param _broker The address of the broker.\n    /// @param _brokerFee The fee to be paid to the broker on success.\n    /// @param _secretLock The hash of the secret (Hash Lock).\n    /// @param _timelock The unix timestamp when the swap expires.\n    /// @param _value The value of the atomic swap.\n    function initiateWithFees(\n        bytes32 _swapID,\n        address payable _spender,\n        address payable _broker,\n        uint256 _brokerFee,\n        bytes32 _secretLock,\n        uint256 _timelock,\n        uint256 _value\n    ) public onlyInvalidSwaps(_swapID) payable {\n        require(_value >= _brokerFee, \"fee must be less than value\");\n\n        // Store the details of the swap.\n        Swap memory swap = Swap({\n            timelock: _timelock,\n            brokerFee: _brokerFee,\n            value: _value - _brokerFee,\n            funder: msg.sender,\n            spender: _spender,\n            broker: _broker,\n            secretLock: _secretLock,\n            secretKey: 0x0\n        });\n        swaps[_swapID] = swap;\n        _swapStates[_swapID] = States.OPEN;\n\n        // Logs open event\n        emit LogOpen(_swapID, _spender, _secretLock);\n    }\n\n    /// @notice Redeems an atomic swap.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    /// @param _receiver The receiver's address.\n    /// @param _secretKey The secret of the atomic swap.\n    function redeem(bytes32 _swapID, address payable _receiver, bytes32 _secretKey) public onlyOpenSwaps(_swapID) onlyWithSecretKey(_swapID, _secretKey) onlySpender(_swapID, msg.sender) {\n        require(_receiver != address(0x0), \"invalid receiver\");\n\n        // Close the swap.\n        swaps[_swapID].secretKey = _secretKey;\n        _swapStates[_swapID] = States.CLOSED;\n        /* solium-disable-next-line security/no-block-members */\n        _redeemedAt[_swapID] = now;\n\n        // Update the broker fees to the broker.\n        _brokerFees[swaps[_swapID].broker] += swaps[_swapID].brokerFee;\n\n        // Logs close event\n        emit LogClose(_swapID, _secretKey);\n    }\n\n    /// @notice Redeems an atomic swap to the spender. Can be called by anyone.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    /// @param _secretKey The secret of the atomic swap.\n    function redeemToSpender(bytes32 _swapID, bytes32 _secretKey) public onlyOpenSwaps(_swapID) onlyWithSecretKey(_swapID, _secretKey) {\n        // Close the swap.\n        swaps[_swapID].secretKey = _secretKey;\n        _swapStates[_swapID] = States.CLOSED;\n        /* solium-disable-next-line security/no-block-members */\n        _redeemedAt[_swapID] = now;\n\n        // Update the broker fees to the broker.\n        _brokerFees[swaps[_swapID].broker] += swaps[_swapID].brokerFee;\n\n        // Logs close event\n        emit LogClose(_swapID, _secretKey);\n    }\n\n    /// @notice Refunds an atomic swap.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    function refund(bytes32 _swapID) public onlyOpenSwaps(_swapID) onlyExpirableSwaps(_swapID) {\n        // Expire the swap.\n        _swapStates[_swapID] = States.EXPIRED;\n\n        // Logs expire event\n        emit LogExpire(_swapID);\n    }\n\n    /// @notice Allows broker fee withdrawals.\n    ///\n    /// @param _amount The withdrawal amount.\n    function withdrawBrokerFees(uint256 _amount) public {\n        require(_amount <= _brokerFees[msg.sender], \"insufficient withdrawable fees\");\n        _brokerFees[msg.sender] -= _amount;\n    }\n\n    /// @notice Audits an atomic swap.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    function audit(bytes32 _swapID) external view returns (uint256 timelock, uint256 value, address to, uint256 brokerFee, address broker, address from, bytes32 secretLock) {\n        Swap memory swap = swaps[_swapID];\n        return (\n            swap.timelock,\n            swap.value,\n            swap.spender,\n            swap.brokerFee,\n            swap.broker,\n            swap.funder,\n            swap.secretLock\n        );\n    }\n\n    /// @notice Audits the secret of an atomic swap.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    function auditSecret(bytes32 _swapID) external view onlyClosedSwaps(_swapID) returns (bytes32 secretKey) {\n        return swaps[_swapID].secretKey;\n    }\n\n    /// @notice Checks whether a swap is refundable or not.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    function refundable(bytes32 _swapID) external view returns (bool) {\n        /* solium-disable-next-line security/no-block-members */\n        return (now >= swaps[_swapID].timelock && _swapStates[_swapID] == States.OPEN);\n    }\n\n    /// @notice Checks whether a swap is initiatable or not.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    function initiatable(bytes32 _swapID) external view returns (bool) {\n        return (_swapStates[_swapID] == States.INVALID);\n    }\n\n    /// @notice Checks whether a swap is redeemable or not.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    function redeemable(bytes32 _swapID) external view returns (bool) {\n        return (_swapStates[_swapID] == States.OPEN);\n    }\n\n    function redeemedAt(bytes32 _swapID) external view returns (uint256) {\n        return _redeemedAt[_swapID];\n    }\n\n    function brokerFees(address _broker) external view returns (uint256) {\n        return _brokerFees[_broker];\n    }\n\n    /// @notice Generates a deterministic swap id using initiate swap details.\n    ///\n    /// @param _secretLock The hash of the secret.\n    /// @param _timelock The expiry timestamp.\n    function swapID(bytes32 _secretLock, uint256 _timelock) external pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_secretLock, _timelock));\n    }\n}\n\n/// @notice EthSwap implements the RenEx atomic swapping interface\n/// for Ether values. Does not support ERC20 tokens.\ncontract EthSwap is SwapInterface, BaseSwap {\n\n    constructor(string memory _VERSION) BaseSwap(_VERSION) public {\n    }\n    \n    /// @notice Initiates the atomic swap.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    /// @param _spender The address of the withdrawing trader.\n    /// @param _secretLock The hash of the secret (Hash Lock).\n    /// @param _timelock The unix timestamp when the swap expires.\n    /// @param _value The value of the atomic swap.\n    function initiate(\n        bytes32 _swapID,\n        address payable _spender,\n        bytes32 _secretLock,\n        uint256 _timelock,\n        uint256 _value\n    ) public payable {\n        require(_value == msg.value, \"eth amount must match value\");\n        require(_spender != address(0x0), \"spender must not be zero\");\n\n        BaseSwap.initiate(\n            _swapID,\n            _spender,\n            _secretLock,\n            _timelock,\n            _value\n        );\n    }\n\n    /// @notice Initiates the atomic swap with fees.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    /// @param _spender The address of the withdrawing trader.\n    /// @param _broker The address of the broker.\n    /// @param _brokerFee The fee to be paid to the broker on success.\n    /// @param _secretLock The hash of the secret (Hash Lock).\n    /// @param _timelock The unix timestamp when the swap expires.\n    /// @param _value The value of the atomic swap.\n    function initiateWithFees(\n        bytes32 _swapID,\n        address payable _spender,\n        address payable _broker,\n        uint256 _brokerFee,\n        bytes32 _secretLock,\n        uint256 _timelock,\n        uint256 _value\n    ) public payable {\n        require(_value == msg.value, \"eth amount must match value\");\n        require(_spender != address(0x0), \"spender must not be zero\");\n\n        BaseSwap.initiateWithFees(\n            _swapID,\n            _spender,\n            _broker,\n            _brokerFee,\n            _secretLock,\n            _timelock,\n            _value\n        );\n    }\n\n    /// @notice Redeems an atomic swap.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    /// @param _receiver The receiver's address.\n    /// @param _secretKey The secret of the atomic swap.\n    function redeem(bytes32 _swapID, address payable _receiver, bytes32 _secretKey) public {\n        BaseSwap.redeem(\n            _swapID,\n            _receiver,\n            _secretKey\n        );\n\n        // Transfer the ETH funds from this contract to the receiver.\n        _receiver.transfer(BaseSwap.swaps[_swapID].value);\n    }\n\n    /// @notice Redeems an atomic swap to the spender. Can be called by anyone.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    /// @param _secretKey The secret of the atomic swap.\n    function redeemToSpender(bytes32 _swapID, bytes32 _secretKey) public {\n        BaseSwap.redeemToSpender(\n            _swapID,\n            _secretKey\n        );\n\n        // Transfer the ETH funds from this contract to the receiver.\n        swaps[_swapID].spender.transfer(BaseSwap.swaps[_swapID].value);\n    }\n\n    /// @notice Refunds an atomic swap.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    function refund(bytes32 _swapID) public {\n        BaseSwap.refund(_swapID);\n\n        // Transfer the ETH value from this contract back to the ETH trader.\n        BaseSwap.swaps[_swapID].funder.transfer(\n            BaseSwap.swaps[_swapID].value + BaseSwap.swaps[_swapID].brokerFee\n        );\n    }\n\n    /// @notice Allows broker fee withdrawals.\n    ///\n    /// @param _amount The withdrawal amount.\n    function withdrawBrokerFees(uint256 _amount) public {\n        BaseSwap.withdrawBrokerFees(_amount);\n        msg.sender.transfer(_amount);\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_swapID\",\"type\":\"bytes32\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_secretLock\",\"type\":\"bytes32\"},{\"name\":\"_timelock\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"initiate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_swapID\",\"type\":\"bytes32\"}],\"name\":\"initiatable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_secretLock\",\"type\":\"bytes32\"},{\"name\":\"_timelock\",\"type\":\"uint256\"}],\"name\":\"swapID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBrokerFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_swapID\",\"type\":\"bytes32\"}],\"name\":\"redeemable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_swapID\",\"type\":\"bytes32\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_swapID\",\"type\":\"bytes32\"}],\"name\":\"auditSecret\",\"outputs\":[{\"name\":\"secretKey\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_swapID\",\"type\":\"bytes32\"}],\"name\":\"refundable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_swapID\",\"type\":\"bytes32\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_broker\",\"type\":\"address\"},{\"name\":\"_brokerFee\",\"type\":\"uint256\"},{\"name\":\"_secretLock\",\"type\":\"bytes32\"},{\"name\":\"_timelock\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"initiateWithFees\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_swapID\",\"type\":\"bytes32\"}],\"name\":\"redeemedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_swapID\",\"type\":\"bytes32\"}],\"name\":\"audit\",\"outputs\":[{\"name\":\"timelock\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"brokerFee\",\"type\":\"uint256\"},{\"name\":\"broker\",\"type\":\"address\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"secretLock\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_swapID\",\"type\":\"bytes32\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_secretKey\",\"type\":\"bytes32\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_swapID\",\"type\":\"bytes32\"},{\"name\":\"_secretKey\",\"type\":\"bytes32\"}],\"name\":\"redeemToSpender\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_broker\",\"type\":\"address\"}],\"name\":\"brokerFees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_VERSION\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_swapID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_secretLock\",\"type\":\"bytes32\"}],\"name\":\"LogOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_swapID\",\"type\":\"bytes32\"}],\"name\":\"LogExpire\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_swapID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_secretKey\",\"type\":\"bytes32\"}],\"name\":\"LogClose\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000005312e302e31000000000000000000000000000000000000000000000000000000"
}