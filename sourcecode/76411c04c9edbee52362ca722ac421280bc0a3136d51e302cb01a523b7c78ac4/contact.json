{
  "address": "0x215238ff63bd80dabdfc0c7774b9742a3239e6f4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ATD",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-04\n*/\n\npragma solidity >=0.5.0 <0.6.0;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title ERC20Detailed token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\ncontract SignerRole {\n    using Roles for Roles.Role;\n\n    event SignerAdded(address indexed account);\n    event SignerRemoved(address indexed account);\n\n    Roles.Role private _signers;\n\n    constructor () internal {\n        _addSigner(msg.sender);\n    }\n\n    modifier onlySigner() {\n        require(isSigner(msg.sender));\n        _;\n    }\n\n    function isSigner(address account) public view returns (bool) {\n        return _signers.has(account);\n    }\n\n    function addSigner(address account) public onlySigner {\n        _addSigner(account);\n    }\n\n    function renounceSigner() public {\n        _removeSigner(msg.sender);\n    }\n\n    function _addSigner(address account) internal {\n        _signers.add(account);\n        emit SignerAdded(account);\n    }\n\n    function _removeSigner(address account) internal {\n        _signers.remove(account);\n        emit SignerRemoved(account);\n    }\n}\n\ncontract PauserRole {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor () internal {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender));\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n    event Paused(address account);\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @return true if the contract is paused, false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ncontract DistributionConfigurable is PauserRole {\n\n  /**\n    Structures\n   */\n\n  struct DistributionConfig {\n    address lockedWallet;\n    address unlockWallet;\n    uint256 ratioDTV;\n    uint256 ratioDecimals;\n  }\n\n  /**\n    State variables\n   */\n\n  DistributionConfig[] public distributionConfigs;\n\n  /**\n    Events\n   */\n\n  event DistributionConfigAdded(\n    address indexed lockedWallet,\n    address indexed unlockWallet,\n    uint256 ratioDTV,\n    uint256 ratioDecimals\n  );\n\n  event DistributionConfigEdited(\n    uint256 indexed index,\n    address indexed lockedWallet,\n    address indexed unlockWallet,\n    uint256 previousRatioDTV,\n    uint256 previousRatioDecimals,\n    uint256 ratioDTV,\n    uint256 ratioDecimals\n  );\n\n  event DistributionConfigDeleted(\n    uint256 indexed index,\n    address indexed lockedWallet,\n    address indexed unlockWallet,\n    uint256 ratioDTV,\n    uint256 ratioDecimals\n  );\n\n  /**\n    External views\n   */\n\n  function distributionConfigsLength()\n    external view\n    returns (uint256 length)\n  {\n    return distributionConfigs.length;\n  }\n\n  /**\n    Public\n   */\n\n  function addDistributionConfig(\n    address lockedWallet,\n    address unlockWallet,\n    uint256 ratioDTV,\n    uint256 ratioDecimals\n  ) public onlyPauser {\n    require(lockedWallet != address(0), \"lockedWallet address cannot be zero\");\n    require(unlockWallet != address(0), \"unlockWallet address cannot be zero\");\n    require(lockedWallet != unlockWallet, \"lockedWallet and unlockWallet addresses cannot be the same\");\n    require(ratioDTV > 0, \"ratioDTV cannot be zero\");\n    require(ratioDecimals > 0, \"ratioDecimals cannot be zero\");\n    distributionConfigs.push(DistributionConfig({\n      lockedWallet: lockedWallet,\n      unlockWallet: unlockWallet,\n      ratioDTV: ratioDTV,\n      ratioDecimals: ratioDecimals\n    }));\n    emit DistributionConfigAdded(\n      lockedWallet,\n      unlockWallet,\n      ratioDTV,\n      ratioDecimals\n    );\n  }\n\n  function editDistributionConfig(\n    uint256 index,\n    uint256 ratioDTV,\n    uint256 ratioDecimals\n  ) public onlyPauser {\n    require(index < distributionConfigs.length, \"index is out of bound\");\n    require(ratioDTV > 0, \"ratioDTV cannot be zero\");\n    require(ratioDecimals > 0, \"ratioDecimals cannot be zero\");\n    emit DistributionConfigEdited(\n      index,\n      distributionConfigs[index].lockedWallet,\n      distributionConfigs[index].unlockWallet,\n      distributionConfigs[index].ratioDTV,\n      distributionConfigs[index].ratioDecimals,\n      ratioDTV,\n      ratioDecimals\n    );\n    distributionConfigs[index].ratioDTV = ratioDTV;\n    distributionConfigs[index].ratioDecimals = ratioDecimals;\n  }\n\n  function deleteDistributionConfig(\n    uint256 index\n  ) public onlyPauser {\n    require(index < distributionConfigs.length, \"index is out of bound\");\n    emit DistributionConfigDeleted(\n      index,\n      distributionConfigs[index].lockedWallet,\n      distributionConfigs[index].unlockWallet,\n      distributionConfigs[index].ratioDTV,\n      distributionConfigs[index].ratioDecimals\n    );\n    // Replace the element to delete and shift elements of the array.\n    for (uint i = index; i<distributionConfigs.length-1; i++){\n      distributionConfigs[i] = distributionConfigs[i+1];\n    }\n    distributionConfigs.length--;\n  }\n\n}\n\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\ncontract ATD is Pausable, SignerRole, DistributionConfigurable {\n  using SafeMath for uint256;\n\n  /**\n    State variables\n   */\n\n  ERC20Detailed public token;\n\n  /**\n    Constructor\n   */\n\n  constructor(\n    ERC20Detailed _token\n  ) public {\n    token = _token;\n  }\n\n  /**\n    Events\n   */\n\n  event Distributed(\n    uint256 indexed date,\n    address indexed lockedWallet,\n    address indexed unlockWallet,\n    uint256 ratioDTV,\n    uint256 ratioDecimals,\n    uint256 dailyTradedVolume,\n    uint256 amount\n  );\n\n  event TotalDistributed(\n    uint256 indexed date,\n    uint256 dailyTradedVolume,\n    uint256 amount\n  );\n\n  /**\n    Publics\n   */\n\n  function distribute(\n    uint256 dailyTradedVolume\n  ) public whenNotPaused onlySigner {\n    require(\n      dailyTradedVolume.div(10 ** uint256(token.decimals())) > 0,\n      \"dailyTradedVolume is not in token unit\"\n    );\n    uint256 total = 0;\n    for (uint256 i = 0; i < distributionConfigs.length; i++) {\n      DistributionConfig storage dc = distributionConfigs[i];\n      uint256 amount = dailyTradedVolume.mul(dc.ratioDTV).div(10 ** dc.ratioDecimals);\n      token.transferFrom(dc.lockedWallet, dc.unlockWallet, amount);\n      total = total.add(amount);\n      emit Distributed(\n        now,\n        dc.lockedWallet,\n        dc.unlockWallet,\n        dc.ratioDTV,\n        dc.ratioDecimals,\n        dailyTradedVolume,\n        amount\n      );\n    }\n    emit TotalDistributed(now, dailyTradedVolume, total);\n  }\n\n  /**\n    Publics\n   */\n\n  function destroy() public onlyPauser {\n    selfdestruct(msg.sender);\n  }\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"distributionConfigs\",\"outputs\":[{\"name\":\"lockedWallet\",\"type\":\"address\"},{\"name\":\"unlockWallet\",\"type\":\"address\"},{\"name\":\"ratioDTV\",\"type\":\"uint256\"},{\"name\":\"ratioDecimals\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"ratioDTV\",\"type\":\"uint256\"},{\"name\":\"ratioDecimals\",\"type\":\"uint256\"}],\"name\":\"editDistributionConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"deleteDistributionConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dailyTradedVolume\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributionConfigsLength\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lockedWallet\",\"type\":\"address\"},{\"name\":\"unlockWallet\",\"type\":\"address\"},{\"name\":\"ratioDTV\",\"type\":\"uint256\"},{\"name\":\"ratioDecimals\",\"type\":\"uint256\"}],\"name\":\"addDistributionConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"lockedWallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"unlockWallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ratioDTV\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ratioDecimals\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dailyTradedVolume\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Distributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dailyTradedVolume\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TotalDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"lockedWallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"unlockWallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ratioDTV\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ratioDecimals\",\"type\":\"uint256\"}],\"name\":\"DistributionConfigAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"lockedWallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"unlockWallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"previousRatioDTV\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"previousRatioDecimals\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ratioDTV\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ratioDecimals\",\"type\":\"uint256\"}],\"name\":\"DistributionConfigEdited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"lockedWallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"unlockWallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ratioDTV\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ratioDecimals\",\"type\":\"uint256\"}],\"name\":\"DistributionConfigDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SignerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SignerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b5060405160208062001f28833981018060405260208110156200003357600080fd5b81019080805190602001909291905050506200005e33620000db640100000000026401000000009004565b6000600160006101000a81548160ff021916908315150217905550620000933362000145640100000000026401000000009004565b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000307565b620000ff816000620001af64010000000002620019e0179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b62000169816002620001af64010000000002620019e0179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f47d1c22a25bb3a5d4e481b9b1e6944c2eade3181a0a20b495ed61d35b5323f2460405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515620001ec57600080fd5b62000207828262000272640100000000026401000000009004565b1515156200021457600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515620002b057600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611c1180620003176000396000f3fe608060405234801561001057600080fd5b5060043610610128576000357c01000000000000000000000000000000000000000000000000000000009004806383197ef0116100bf5780639c3e91d81161008e5780639c3e91d8146103c0578063cf802e1e146103de578063e5c8b03d14610456578063eb12d61e14610460578063fc0c546a146104a457610128565b806383197ef0146103505780638456cb591461035a5780638d8e0acc1461036457806391c05b0b1461039257610128565b80636ef8d66d116100fb5780636ef8d66d14610264578063763b40b51461026e5780637df73e27146102b057806382dc1ec41461030c57610128565b80633f4ba83a1461012d57806346fbf68e146101375780635c975abb146101935780636e1cd95f146101b5575b600080fd5b6101356104ee565b005b6101796004803603602081101561014d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061059d565b604051808215151515815260200191505060405180910390f35b61019b6105ba565b604051808215151515815260200191505060405180910390f35b6101e1600480360360208110156101cb57600080fd5b81019080803590602001909291905050506105d1565b604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390f35b61026c610650565b005b6102ae6004803603606081101561028457600080fd5b8101908080359060200190929190803590602001909291908035906020019092919050505061065b565b005b6102f2600480360360208110156102c657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610968565b604051808215151515815260200191505060405180910390f35b61034e6004803603602081101561032257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610985565b005b6103586109a5565b005b6103626109d2565b005b6103906004803603602081101561037a57600080fd5b8101908080359060200190929190505050610a81565b005b6103be600480360360208110156103a857600080fd5b8101908080359060200190929190505050610d9e565b005b6103c8611220565b6040518082815260200191505060405180910390f35b610454600480360360808110156103f457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919050505061122d565b005b61045e61165b565b005b6104a26004803603602081101561047657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611666565b005b6104ac611686565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6104f73361059d565b151561050257600080fd5b600160009054906101000a900460ff16151561051d57600080fd5b6000600160006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b60006105b38260006116ac90919063ffffffff16565b9050919050565b6000600160009054906101000a900460ff16905090565b6003818154811015156105e057fe5b90600052602060002090600402016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154905084565b61065933611740565b565b6106643361059d565b151561066f57600080fd5b600380549050831015156106eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f696e646578206973206f7574206f6620626f756e64000000000000000000000081525060200191505060405180910390fd5b600082111515610763576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f726174696f4454562063616e6e6f74206265207a65726f00000000000000000081525060200191505060405180910390fd5b6000811115156107db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f726174696f446563696d616c732063616e6e6f74206265207a65726f0000000081525060200191505060405180910390fd5b6003838154811015156107ea57fe5b906000526020600020906004020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660038481548110151561084157fe5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16847fee0eb5daf1e44595fa4c3dd68a2a475100c6c08435bed80599cfc2a0a353018e6003878154811015156108ba57fe5b9060005260206000209060040201600201546003888154811015156108db57fe5b90600052602060002090600402016003015487876040518085815260200184815260200183815260200182815260200194505050505060405180910390a48160038481548110151561092957fe5b9060005260206000209060040201600201819055508060038481548110151561094e57fe5b906000526020600020906004020160030181905550505050565b600061097e8260026116ac90919063ffffffff16565b9050919050565b61098e3361059d565b151561099957600080fd5b6109a28161179a565b50565b6109ae3361059d565b15156109b957600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16ff5b6109db3361059d565b15156109e657600080fd5b600160009054906101000a900460ff16151515610a0257600080fd5b60018060006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b610a8a3361059d565b1515610a9557600080fd5b60038054905081101515610b11576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f696e646578206973206f7574206f6620626f756e64000000000000000000000081525060200191505060405180910390fd5b600381815481101515610b2057fe5b906000526020600020906004020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600382815481101515610b7757fe5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16827fe9a043fd2807c21031fdccbb069758a045a57a96d8db6a60a0248cfad3bfb082600385815481101515610bf057fe5b906000526020600020906004020160020154600386815481101515610c1157fe5b906000526020600020906004020160030154604051808381526020018281526020019250505060405180910390a460008190505b600160038054905003811015610d8457600360018201815481101515610c6757fe5b9060005260206000209060040201600382815481101515610c8457fe5b90600052602060002090600402016000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060028201548160020155600382015481600301559050508080600101915050610c45565b506003805480919060019003610d9a9190611a90565b5050565b600160009054906101000a900460ff16151515610dba57600080fd5b610dc333610968565b1515610dce57600080fd5b6000610ea7600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015610e5757600080fd5b505afa158015610e6b573d6000803e3d6000fd5b505050506040513d6020811015610e8157600080fd5b810190808051906020019092919050505060ff16600a0a836117f490919063ffffffff16565b111515610eff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180611bc06026913960400191505060405180910390fd5b600080905060008090505b6003805490508110156111db576000600382815481101515610f2857fe5b906000526020600020906004020190506000610f6a8260030154600a0a610f5c84600201548861181e90919063ffffffff16565b6117f490919063ffffffff16565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156110ad57600080fd5b505af11580156110c1573d6000803e3d6000fd5b505050506040513d60208110156110d757600080fd5b8101908080519060200190929190505050506110fc818561185c90919063ffffffff16565b93508160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16427f4f8320e5423e7a248869328eacf23c5ccd0ca7ccc8b8223a149a74dec878ba8b856002015486600301548a876040518085815260200184815260200183815260200182815260200194505050505060405180910390a450508080600101915050610f0a565b50427f47b6f7bd4d0829ff106b9f4d34205081e7cb05f95d22e5534608e5193954b3cd8383604051808381526020018281526020019250505060405180910390a25050565b6000600380549050905090565b6112363361059d565b151561124157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156112c9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180611b9d6023913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611351576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180611b7a6023913960400191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156113d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603a815260200180611b40603a913960400191505060405180910390fd5b600082111515611450576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f726174696f4454562063616e6e6f74206265207a65726f00000000000000000081525060200191505060405180910390fd5b6000811115156114c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f726174696f446563696d616c732063616e6e6f74206265207a65726f0000000081525060200191505060405180910390fd5b60036080604051908101604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001848152602001838152509080600181540180825580915050906001820390600052602060002090600402016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301555050508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f92e3a88d0298e1bab0fe2d47a7e225ed413ca154b371fbfda18c9b22a55b459d8484604051808381526020018281526020019250505060405180910390a350505050565b6116643361187d565b565b61166f33610968565b151561167a57600080fd5b611683816118d7565b50565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156116e957600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61175481600061193190919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e60405160405180910390a250565b6117ae8160006119e090919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b6000808211151561180457600080fd5b6000828481151561181157fe5b0490508091505092915050565b6000808314156118315760009050611856565b6000828402905082848281151561184457fe5b0414151561185157600080fd5b809150505b92915050565b600080828401905083811015151561187357600080fd5b8091505092915050565b61189181600261193190919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f3525e22824a8a7df2c9a6029941c824cf95b6447f1e13d5128fd3826d35afe8b60405160405180910390a250565b6118eb8160026119e090919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f47d1c22a25bb3a5d4e481b9b1e6944c2eade3181a0a20b495ed61d35b5323f2460405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561196d57600080fd5b61197782826116ac565b151561198257600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611a1c57600080fd5b611a2682826116ac565b151515611a3257600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b815481835581811115611abd57600402816004028360005260206000209182019101611abc9190611ac2565b5b505050565b611b3c91905b80821115611b3857600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160009055600382016000905550600401611ac8565b5090565b9056fe6c6f636b656457616c6c657420616e6420756e6c6f636b57616c6c6574206164647265737365732063616e6e6f74206265207468652073616d65756e6c6f636b57616c6c657420616464726573732063616e6e6f74206265207a65726f6c6f636b656457616c6c657420616464726573732063616e6e6f74206265207a65726f6461696c79547261646564566f6c756d65206973206e6f7420696e20746f6b656e20756e6974a165627a7a72305820c97060437240203eecd9e1b37c412df39c0b73f5659f9546ca057f6dba1b0bdf0029000000000000000000000000420167d87d35c3a249b32ef6225872fbd9ab85d2",
  "constructorArguments": "000000000000000000000000420167d87d35c3a249b32ef6225872fbd9ab85d2"
}