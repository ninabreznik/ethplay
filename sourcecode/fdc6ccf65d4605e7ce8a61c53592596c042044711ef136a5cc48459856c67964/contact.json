{
  "address": "0x4763a99c42ab4cec9d18b39dbc4a9f4226289563",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Prophet",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-24\n*/\n\npragma solidity ^0.4.18;\n \ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n \ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n \nlibrary SaferMath {\n  function mulX(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n \n  function divX(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n \n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n \n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n \ncontract BasicToken is ERC20Basic {\n  using SaferMath for uint256;\n  mapping(address => uint256) balances;\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n \n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n \n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n \n}\n \ncontract StandardToken is ERC20, BasicToken {\n \n  mapping (address => mapping (address => uint256)) allowed;\n \n \n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n \n    uint256 _allowance = allowed[_from][msg.sender];\n \n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n \n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n \n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n \n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n \n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval (address _spender, uint _addedValue) returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n \n  function decreaseApproval (address _spender, uint _subtractedValue) returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n}\n \ncontract Ownable {\n  address public owner;\n \n \n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n \n \n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n \n \n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n \n \n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n \n}\n \n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is StandardToken {\n \n  event Burn(address indexed burner, uint256 value);\n \n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    require(_value > 0);\n    require(_value <= balances[msg.sender]);\n \n    address burner = msg.sender;\n    balances[burner] = balances[burner].sub(_value);\n    totalSupply = totalSupply.sub(_value);\n    Burn(burner, _value);\n    }\n}\n \n \ncontract Prophet is BurnableToken, Ownable {\n \n  string public constant name = \"Prophet\";\n  string public constant symbol = \"XPPX\";\n  uint8 public constant decimals = 8;\n \n  uint256 public tokensIssued;\n \n \n  /* Drop Prophet */\n  function dropCoins(address[] dests, uint256 coins) public onlyOwner {\n        uint256 amount = coins * (10 ** uint256(decimals));\n        require((tokensIssued + (dests.length * amount)) <= totalSupply);\n        uint256 i = 0;\n        uint256 dropAmount = 0;\n        while (i < dests.length) {\n           /* Apply minimum 0.01 ETH balance check */\n           if(dests[i].balance >= 10 finney) {\n               balances[dests[i]] += amount;\n               dropAmount += amount;\n               Transfer(this, dests[i], amount);\n           }\n           i += 1;\n        }\n        tokensIssued += dropAmount;\n    }\n \n  /* Constructor function - initialize Prophet */\n  function Prophet() {\n    totalSupply = 23000000 * (10 ** uint256(decimals)); // Total initial supply is 35M\n    balances[msg.sender] = totalSupply / 10; // 10% saved for\n    tokensIssued = totalSupply / 10;\n    Transfer(this, msg.sender, tokensIssued);\n  }\n}",
  "bytecode": "6060604052341561000f57600080fd5b60038054600160a060020a03338116600160a060020a0319909216821790925566082bd67afbc00060009081558181526001602052604080822065d12f0c4c600090559054600a9004600481905591923016917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef915190815260200160405180910390a3610b70806100a26000396000f3006060604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100ea578063095ea7b314610174578063169ea2f8146101aa57806318160ddd146101fd57806323b872dd14610222578063313ce5671461024a57806342966c6814610273578063661884631461028957806370a08231146102ab5780637c48bbda146102ca5780638da5cb5b146102dd57806395d89b411461030c578063a9059cbb1461031f578063d73dd62314610341578063dd62ed3e14610363578063f2fde38b14610388575b600080fd5b34156100f557600080fd5b6100fd6103a7565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610139578082015183820152602001610121565b50505050905090810190601f1680156101665780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017f57600080fd5b610196600160a060020a03600435166024356103de565b604051901515815260200160405180910390f35b34156101b557600080fd5b6101fb6004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650509335935061044a92505050565b005b341561020857600080fd5b61021061057d565b60405190815260200160405180910390f35b341561022d57600080fd5b610196600160a060020a0360043581169060243516604435610583565b341561025557600080fd5b61025d6106ad565b60405160ff909116815260200160405180910390f35b341561027e57600080fd5b6101fb6004356106b2565b341561029457600080fd5b610196600160a060020a036004351660243561077b565b34156102b657600080fd5b610210600160a060020a0360043516610875565b34156102d557600080fd5b610210610890565b34156102e857600080fd5b6102f0610896565b604051600160a060020a03909116815260200160405180910390f35b341561031757600080fd5b6100fd6108a5565b341561032a57600080fd5b610196600160a060020a03600435166024356108dc565b341561034c57600080fd5b610196600160a060020a03600435166024356109b2565b341561036e57600080fd5b610210600160a060020a0360043581169060243516610a56565b341561039357600080fd5b6101fb600160a060020a0360043516610a81565b60408051908101604052600781527f50726f7068657400000000000000000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b6003546000908190819033600160a060020a0390811691161461046c57600080fd5b6000546305f5e10085029350838651600454910201111561048c57600080fd5b5060009050805b845182101561056e57662386f26fc100008583815181106104b057fe5b90602001906020020151600160a060020a031631106105635782600160008785815181106104da57fe5b90602001906020020151600160a060020a03168152602081019190915260400160002080549091019055820184828151811061051257fe5b90602001906020020151600160a060020a031630600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405190815260200160405180910390a35b600182019150610493565b60048054909101905550505050565b60005481565b600080600160a060020a038416151561059b57600080fd5b50600160a060020a038085166000818152600260209081526040808320339095168352938152838220549282526001905291909120546105e1908463ffffffff610b1c16565b600160a060020a038087166000908152600160205260408082209390935590861681522054610616908463ffffffff610b2e16565b600160a060020a03851660009081526001602052604090205561063f818463ffffffff610b1c16565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3506001949350505050565b600881565b60008082116106c057600080fd5b600160a060020a0333166000908152600160205260409020548211156106e557600080fd5b5033600160a060020a03811660009081526001602052604090205461070a9083610b1c565b600160a060020a03821660009081526001602052604081209190915554610737908363ffffffff610b1c16565b600055600160a060020a0381167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a25050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054808311156107d857600160a060020a03338116600090815260026020908152604080832093881683529290529081205561080f565b6107e8818463ffffffff610b1c16565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526001602052604090205490565b60045481565b600354600160a060020a031681565b60408051908101604052600481527f5850505800000000000000000000000000000000000000000000000000000000602082015281565b6000600160a060020a03831615156108f357600080fd5b600160a060020a03331660009081526001602052604090205461091c908363ffffffff610b1c16565b600160a060020a033381166000908152600160205260408082209390935590851681522054610951908363ffffffff610b2e16565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120546109ea908363ffffffff610b2e16565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a03908116911614610a9c57600080fd5b600160a060020a0381161515610ab157600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610b2857fe5b50900390565b600082820183811015610b3d57fe5b93925050505600a165627a7a72305820b6fed30930c230f280edb6a976f1684f04c829899acb1b443b12482eb57fa58b0029"
}