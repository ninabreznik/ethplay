{
  "address": "0x970fbc3126e19dc57f6649133436c2def00051a8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "EterArt Token",
  "contractName": "EterArt",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-12\n*/\n\n// File: contracts/ERC721.sol\n\n// eterart-contract\n// contracts/ERC721.sol\n\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title ERC-721 contract interface.\n */\ncontract ERC721 {\n    // ERC20 compatible functions.\n    function name() public constant returns (string);\n    function symbol() public constant returns (string);\n    function totalSupply() public constant returns (uint256);\n    function balanceOf(address _owner) public constant returns (uint);\n    // Functions that define ownership.\n    function ownerOf(uint256 _tokenId) public constant returns (address);\n    function approve(address _to, uint256 _tokenId) public;\n    function takeOwnership(uint256 _tokenId) public;\n    function transfer(address _to, uint256 _tokenId) public;\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) public constant returns (uint);\n    // Token metadata.\n    function tokenMetadata(uint256 _tokenId) public constant returns (string);\n    // Events.\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n}\n\n// File: contracts/EterArt.sol\n\n// eterart-contract\n// contracts/EterArt.sol\n\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title EterArt contract.\n */\ncontract EterArt is ERC721 {\n\n    // Art structure for tokens ownership registry.\n    struct Art {\n        uint256 price;\n        address owner;\n        address newOwner;\n    }\n\n    struct Token {\n        uint256[] items;\n        mapping(uint256 => uint) lookup;\n    }\n\n    // Mapping from token ID to owner.\n    mapping (address => Token) internal ownedTokens;\n\n    // All minted tokens number (ERC-20 compatibility).\n    uint256 public totalTokenSupply;\n\n    // Token issuer address\n    address public _issuer;\n\n    // Tokens ownership registry.\n    mapping (uint => Art) public registry;\n\n    // Token metadata base URL.\n    string public baseInfoUrl = \"https://www.eterart.com/art/\";\n\n    // Fee in percents\n    uint public feePercent = 5;\n\n    // Change price event\n    event ChangePrice(uint indexed token, uint indexed price);\n\n    /**\n    * @dev Constructor sets the `issuer` of the contract to the sender\n    * account.\n    */\n    constructor() public {\n        _issuer = msg.sender;\n    }\n\n    /**\n   * @return the address of the issuer.\n   */\n    function issuer() public view returns(address) {\n        return _issuer;\n    }\n\n    /**\n    * @dev Reject all Ether from being sent here. (Hopefully, we can prevent user accidents.)\n    */\n    function() external payable {\n        require(msg.sender == address(this));\n    }\n\n    /**\n     * @dev Gets token name (ERC-20 compatibility).\n     * @return string token name.\n     */\n    function name() public constant returns (string) {\n        return \"EterArt\";\n    }\n\n    /**\n     * @dev Gets token symbol (ERC-20 compatibility).\n     * @return string token symbol.\n     */\n    function symbol() public constant returns (string) {\n        return \"WAW\";\n    }\n\n    /**\n     * @dev Gets token URL.\n     * @param _tokenId uint256 ID of the token to get URL of.\n     * @return string token URL.\n     */\n    function tokenMetadata(uint256 _tokenId) public constant returns (string) {\n        return strConcat(baseInfoUrl, strConcat(\"0x\", uint2hexstr(_tokenId)));\n    }\n\n    /**\n     * @dev Gets contract all minted tokens number.\n     * @return uint256 contract all minted tokens number.\n     */\n    function totalSupply() public constant returns (uint256) {\n        return totalTokenSupply;\n    }\n\n    /**\n     * @dev Gets tokens number of specified address.\n     * @param _owner address to query tokens number of.\n     * @return uint256 number of tokens owned by the specified address.\n     */\n    function balanceOf(address _owner) public constant returns (uint balance) {\n        balance = ownedTokens[_owner].items.length;\n    }\n\n    /**\n     * @dev Gets token by index of specified address.\n     * @param _owner address to query tokens number of.\n     * @param _index uint256 index of the token to get.\n     * @return uint256 token ID from specified address tokens list by specified index.\n     */\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) public constant returns (uint tokenId) {\n        tokenId = ownedTokens[_owner].items[_index];\n    }\n\n    /**\n     * @dev Approve token ownership transfer to another address.\n     * @param _to address to change token ownership to.\n     * @param _tokenId uint256 token ID to change ownership of.\n     */\n    function approve(address _to, uint256 _tokenId) public {\n        require(_to != msg.sender);\n        require(registry[_tokenId].owner == msg.sender);\n        registry[_tokenId].newOwner = _to;\n        emit Approval(registry[_tokenId].owner, _to, _tokenId);\n    }\n\n    /**\n     * @dev Internal method that transfer token to another address.\n     * Run some checks and internal contract data manipulations.\n     * @param _to address new token owner address.\n     * @param _tokenId uint256 token ID to transfer to specified address.\n     */\n    function _transfer(address _to, uint256 _tokenId) internal {\n        if (registry[_tokenId].owner != address(0)) {\n            require(registry[_tokenId].owner != _to);\n            removeByValue(registry[_tokenId].owner, _tokenId);\n        }\n        else {\n            totalTokenSupply = totalTokenSupply + 1;\n        }\n\n        require(_to != address(0));\n\n        push(_to, _tokenId);\n        emit Transfer(registry[_tokenId].owner, _to, _tokenId);\n        registry[_tokenId].owner = _to;\n        registry[_tokenId].newOwner = address(0);\n        registry[_tokenId].price = 0;\n    }\n\n    /**\n     * @dev Take ownership of specified token.\n     * Only if current token owner approve that.\n     * @param _tokenId uint256 token ID to take ownership of.\n     */\n    function takeOwnership(uint256 _tokenId) public {\n        require(registry[_tokenId].newOwner == msg.sender);\n        _transfer(msg.sender, _tokenId);\n    }\n\n    /**\n     * @dev Change baseInfoUrl contract property value.\n     * @param url string new baseInfoUrl value.\n     */\n    function changeBaseInfoUrl(string url) public {\n        require(msg.sender == _issuer);\n        baseInfoUrl = url;\n    }\n\n    /**\n     * @dev Change issuer contract address.\n     * @param _to address of new contract issuer.\n     */\n    function changeIssuer(address _to) public {\n        require(msg.sender == _issuer);\n        _issuer = _to;\n    }\n\n    /**\n     * @dev Withdraw all contract balance value to contract issuer.\n     */\n    function withdraw() public {\n        require(msg.sender == _issuer);\n        withdraw(_issuer, address(this).balance);\n    }\n\n    /**\n     * @dev Withdraw all contract balance value to specified address.\n     * @param _to address to transfer value.\n     */\n    function withdraw(address _to) public {\n        require(msg.sender == _issuer);\n        withdraw(_to, address(this).balance);\n    }\n\n    /**\n     * @dev Withdraw specified wei number to address.\n     * @param _to address to transfer value.\n     * @param _value uint wei amount value.\n     */\n    function withdraw(address _to, uint _value) public {\n        require(msg.sender == _issuer);\n        require(_value <= address(this).balance);\n        _to.transfer(address(this).balance);\n    }\n\n    /**\n     * @dev Gets specified token owner address.\n     * @param token uint256 token ID.\n     * @return address specified token owner address.\n     */\n    function ownerOf(uint256 token) public constant returns (address owner) {\n        owner = registry[token].owner;\n    }\n\n    /**\n     * @dev Gets specified token price.\n     * @param token uint256 token ID.\n     * @return uint specified token price.\n     */\n    function getPrice(uint token) public view returns (uint) {\n        return registry[token].price;\n    }\n\n    /**\n     * @dev Direct transfer specified token to another address.\n     * @param _to address new token owner address.\n     * @param _tokenId uint256 token ID to transfer to specified address.\n     */\n    function transfer(address _to, uint256 _tokenId) public {\n        require(registry[_tokenId].owner == msg.sender);\n        _transfer(_to, _tokenId);\n    }\n\n    /**\n     * @dev Change specified token price.\n     * Used for: change token price,\n     * withdraw token from sale (set token price to 0 (zero))\n     * and for put up token for sale (set token price > 0)\n     * @param token uint token ID to change price of.\n     * @param price uint new token price.\n     */\n    function changePrice(uint token, uint price) public {\n        require(registry[token].owner == msg.sender);\n        registry[token].price = price;\n        emit ChangePrice(token, price);\n    }\n\n    /**\n     * @dev Buy specified token if it's marked as for sale (token price > 0).\n     * Run some checks, calculate fee and transfer token to msg.sender.\n     * @param _tokenId uint token ID to buy.\n     */\n    function buy(uint _tokenId) public payable {\n        require(registry[_tokenId].price > 0);\n\n        uint fee = ((registry[_tokenId].price / 100) * feePercent);\n        uint value = msg.value - fee;\n\n        require(registry[_tokenId].price <= value);\n        registry[_tokenId].owner.transfer(value);\n        _transfer(msg.sender, _tokenId);\n    }\n\n    /**\n     * @dev Mint token.\n     */\n    function mint(uint _tokenId, address _to) public {\n        require(msg.sender == _issuer);\n        require(registry[_tokenId].owner == 0x0);\n        _transfer(_to, _tokenId);\n    }\n\n    /**\n     * @dev Mint token.\n     */\n    function mint(\n        string length,\n        uint _tokenId,\n        uint price,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public payable {\n\n        string memory m_price = uint2hexstr(price);\n        string memory m_token = uint2hexstr(_tokenId);\n\n        require(msg.value >= price);\n        require(ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n\", length, m_token, m_price), v, r, s) == _issuer);\n        require(registry[_tokenId].owner == 0x0);\n        _transfer(msg.sender, _tokenId);\n    }\n\n    /**\n     * UTILS\n     */\n\n    /**\n     * @dev Add token to specified address tokens list.\n     * @param owner address address of token owner to add token to.\n     * @param value uint token ID to add.\n     */\n    function push(address owner, uint value) private {\n\n        if (ownedTokens[owner].lookup[value] > 0) {\n            return;\n        }\n        ownedTokens[owner].lookup[value] = ownedTokens[owner].items.push(value);\n    }\n\n    /**\n     * @dev Remove token by ID from specified address tokens list.\n     * @param owner address address of token owner to remove token from.\n     * @param value uint token ID to remove.\n     */\n    function removeByValue(address owner, uint value) private {\n        uint index = ownedTokens[owner].lookup[value];\n        if (index == 0) {\n            return;\n        }\n        if (index < ownedTokens[owner].items.length) {\n            uint256 lastItem = ownedTokens[owner].items[ownedTokens[owner].items.length - 1];\n            ownedTokens[owner].items[index - 1] = lastItem;\n            ownedTokens[owner].lookup[lastItem] = index;\n        }\n        ownedTokens[owner].items.length -= 1;\n        delete ownedTokens[owner].lookup[value];\n    }\n\n    /**\n     * @dev String concatenation.\n     * @param _a string first string.\n     * @param _b string second string.\n     * @return string result of string concatenation.\n     */\n    function strConcat(string _a, string _b) internal pure returns (string){\n        bytes memory _ba = bytes(_a);\n        bytes memory _bb = bytes(_b);\n        string memory abcde = new string(_ba.length + _bb.length);\n        bytes memory babcde = bytes(abcde);\n        uint k = 0;\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n\n        return string(babcde);\n    }\n\n    /**\n     * @dev Convert long to hex string.\n     * @param i uint value to convert.\n     * @return string specified value converted to hex string.\n     */\n    function uint2hexstr(uint i) internal pure returns (string) {\n        if (i == 0) return \"0\";\n        uint j = i;\n        uint length;\n        while (j != 0) {\n            length++;\n            j = j >> 4;\n        }\n        uint mask = 15;\n        bytes memory bstr = new bytes(length);\n        uint k = length - 1;\n        while (i != 0) {\n            uint curr = (i & mask);\n            bstr[k--] = curr > 9 ? byte(55 + curr) : byte(48 + curr); // 55 = 65 - 10\n            i = i >> 4;\n        }\n\n        return string(bstr);\n    }\n\n}",
  "bytecode": ""
}