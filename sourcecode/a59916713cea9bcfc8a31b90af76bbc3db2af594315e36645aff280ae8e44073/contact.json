{
  "address": "0x539da201f33a25e4a782d3b42eb0f0a83c0fd753",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MultiSigWallet",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": true,
  "runs": "20000",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-25\n*/\n\npragma solidity 0.5.2;\n\n// File: contracts/MultiSigWallet.sol\n\n/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\n/// @author Stefan George - <[emailÂ protected]>\ncontract MultiSigWallet {\n\n\tuint constant public MAX_OWNER_COUNT = 50;\n\n\tevent Confirmation(address indexed sender, uint indexed transactionId);\n\tevent Revocation(address indexed sender, uint indexed transactionId);\n\tevent Submission(uint indexed transactionId);\n\tevent Execution(uint indexed transactionId);\n\tevent ExecutionFailure(uint indexed transactionId);\n\tevent Deposit(address indexed sender, uint value);\n\tevent OwnerAddition(address indexed owner);\n\tevent OwnerRemoval(address indexed owner);\n\tevent RequirementChange(uint required);\n\n\tmapping (uint => Transaction) public transactions;\n\tmapping (uint => mapping (address => bool)) public confirmations;\n\tmapping (address => bool) public isOwner;\n\taddress[] public owners;\n\tuint public required;\n\tuint public transactionCount;\n\n\tstruct Transaction {\n\t\taddress destination;\n\t\tuint value;\n\t\tbytes data;\n\t\tbool executed;\n\t}\n\n\tmodifier onlyWallet() {\n\t\tif (msg.sender != address(this))\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier ownerDoesNotExist(address owner) {\n\t\tif (isOwner[owner])\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier ownerExists(address owner) {\n\t\tif (!isOwner[owner])\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier transactionExists(uint transactionId) {\n\t\tif (transactions[transactionId].destination == address(0))\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier confirmed(uint transactionId, address owner) {\n\t\tif (!confirmations[transactionId][owner])\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier notConfirmed(uint transactionId, address owner) {\n\t\tif (confirmations[transactionId][owner])\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier notExecuted(uint transactionId) {\n\t\tif (transactions[transactionId].executed)\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier notNull(address _address) {\n\t\tif (_address == address(0))\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier validRequirement(uint ownerCount, uint _required) {\n\t\tif (   ownerCount > MAX_OWNER_COUNT\n\t\t\t|| _required > ownerCount\n\t\t\t\t|| _required == 0\n\t\t\t\t\t|| ownerCount == 0)\n\t\t\t\t\trevert();\n\t\t\t\t\t_;\n\t}\n\n\t/// @dev Fallback function allows to deposit ether.\n\tfunction()\n\texternal\n\tpayable\n\t{\n\t\tif (msg.value > 0)\n\t\t\temit Deposit(msg.sender, msg.value);\n\t}\n\n\t/*\n\t* Public functions\n\t*/\n\t/// @dev Contract constructor sets initial owners and required number of confirmations.\n\t/// @param _owners List of initial owners.\n\t/// @param _required Number of required confirmations.\n\tconstructor(address[] memory _owners, uint _required)\n\tpublic\n\tvalidRequirement(_owners.length, _required)\n\t{\n\t\tfor (uint i=0; i<_owners.length; i++) {\n\t\t\tif (isOwner[_owners[i]] || _owners[i] == address(0))\n\t\t\t\trevert();\n\t\t\tisOwner[_owners[i]] = true;\n\t\t}\n\t\towners = _owners;\n\t\trequired = _required;\n\t}\n\n\t/// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n\t/// @param owner Address of new owner.\n\tfunction addOwner(address owner)\n\tpublic\n\tonlyWallet\n\townerDoesNotExist(owner)\n\tnotNull(owner)\n\tvalidRequirement(owners.length + 1, required)\n\t{\n\t\tisOwner[owner] = true;\n\t\towners.push(owner);\n\t\temit OwnerAddition(owner);\n\t}\n\n\t/// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n\t/// @param owner Address of owner.\n\tfunction removeOwner(address owner)\n\tpublic\n\tonlyWallet\n\townerExists(owner)\n\t{\n\t\tisOwner[owner] = false;\n\t\tfor (uint i=0; i<owners.length - 1; i++)\n\t\tif (owners[i] == owner) {\n\t\t\towners[i] = owners[owners.length - 1];\n\t\t\tbreak;\n\t\t}\n\t\towners.length -= 1;\n\t\tif (required > owners.length)\n\t\t\tchangeRequirement(owners.length);\n\t\temit OwnerRemoval(owner);\n\t}\n\n\t/// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n\t/// @param owner Address of owner to be replaced.\n\t/// @param owner Address of new owner.\n\tfunction replaceOwner(address owner, address newOwner)\n\tpublic\n\tonlyWallet\n\townerExists(owner)\n\townerDoesNotExist(newOwner)\n\t{\n\t\tfor (uint i=0; i<owners.length; i++)\n\t\tif (owners[i] == owner) {\n\t\t\towners[i] = newOwner;\n\t\t\tbreak;\n\t\t}\n\t\tisOwner[owner] = false;\n\t\tisOwner[newOwner] = true;\n\t\temit OwnerRemoval(owner);\n\t\temit OwnerAddition(newOwner);\n\t}\n\n\t/// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\n\t/// @param _required Number of required confirmations.\n\tfunction changeRequirement(uint _required)\n\tpublic\n\tonlyWallet\n\tvalidRequirement(owners.length, _required)\n\t{\n\t\trequired = _required;\n\t\temit RequirementChange(_required);\n\t}\n\n\t/// @dev Allows an owner to submit and confirm a transaction.\n\t/// @param destination Transaction target address.\n\t/// @param value Transaction ether value.\n\t/// @param data Transaction data payload.\n\t/// @return Returns transaction ID.\n\tfunction submitTransaction(address destination, uint value, bytes memory data)\n\tpublic\n\treturns (uint transactionId)\n\t{\n\t\ttransactionId = addTransaction(destination, value, data);\n\t\tconfirmTransaction(transactionId);\n\t}\n\n\t/// @dev Allows an owner to confirm a transaction.\n\t/// @param transactionId Transaction ID.\n\tfunction confirmTransaction(uint transactionId)\n\tpublic\n\townerExists(msg.sender)\n\ttransactionExists(transactionId)\n\tnotConfirmed(transactionId, msg.sender)\n\t{\n\t\tconfirmations[transactionId][msg.sender] = true;\n\t\temit Confirmation(msg.sender, transactionId);\n\t\texecuteTransaction(transactionId);\n\t}\n\n\t/// @dev Allows an owner to revoke a confirmation for a transaction.\n\t/// @param transactionId Transaction ID.\n\tfunction revokeConfirmation(uint transactionId)\n\tpublic\n\townerExists(msg.sender)\n\tconfirmed(transactionId, msg.sender)\n\tnotExecuted(transactionId)\n\t{\n\t\tconfirmations[transactionId][msg.sender] = false;\n\t\temit Revocation(msg.sender, transactionId);\n\t}\n\n\t/// @dev Allows anyone to execute a confirmed transaction.\n\t/// @param transactionId Transaction ID.\n\tfunction executeTransaction(uint transactionId)\n\tpublic\n\tnotExecuted(transactionId)\n\t{\n\t\tif (isConfirmed(transactionId)) {\n\t\t\tTransaction storage transaction = transactions[transactionId];\n\t\t\ttransaction.executed = true;\n\n\t\t\tbool success;\n\t\t\tbytes memory _returnData;\n\t\t\t(success, _returnData) = transaction.destination.call.value(transaction.value)(transaction.data);\n\t\t\tif (success)\n\t\t\t\temit Execution(transactionId);\n\t\t\telse {\n\t\t\t\temit ExecutionFailure(transactionId);\n\t\t\t\ttransaction.executed = false;\n\t\t\t}\n\t\t}\n\t}\n\n\t/// @dev Returns the confirmation status of a transaction.\n\t/// @param transactionId Transaction ID.\n\t/// @return Confirmation status.\n\tfunction isConfirmed(uint transactionId)\n\tpublic\n\tview\n\treturns (bool)\n\t{\n\t\tuint count = 0;\n\t\tfor (uint i=0; i<owners.length; i++) {\n\t\t\tif (confirmations[transactionId][owners[i]])\n\t\t\t\tcount += 1;\n\t\t\tif (count == required)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\n\t/*\n\t* Internal functions\n\t*/\n\t/// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n\t/// @param destination Transaction target address.\n\t/// @param value Transaction ether value.\n\t/// @param data Transaction data payload.\n\t/// @return Returns transaction ID.\n\tfunction addTransaction(address destination, uint value, bytes memory data)\n\tinternal\n\tnotNull(destination)\n\treturns (uint transactionId)\n\t{\n\t\ttransactionId = transactionCount;\n\t\ttransactions[transactionId] = Transaction({\n\t\t\tdestination: destination,\n\t\t\tvalue: value,\n\t\t\tdata: data,\n\t\t\texecuted: false\n\t\t});\n\t\ttransactionCount += 1;\n\t\temit Submission(transactionId);\n\t}\n\n\t/*\n\t* Web3 call functions\n\t*/\n\t/// @dev Returns number of confirmations of a transaction.\n\t/// @param transactionId Transaction ID.\n\t/// @return Number of confirmations.\n\tfunction getConfirmationCount(uint transactionId)\n\tpublic\n\tview\n\treturns (uint count)\n\t{\n\t\tfor (uint i=0; i<owners.length; i++)\n\t\tif (confirmations[transactionId][owners[i]])\n\t\t\tcount += 1;\n\t}\n\n\t/// @dev Returns total number of transactions after filers are applied.\n\t/// @param pending Include pending transactions.\n\t/// @param executed Include executed transactions.\n\t/// @return Total number of transactions after filters are applied.\n\tfunction getTransactionCount(bool pending, bool executed)\n\tpublic\n\tview\n\treturns (uint count)\n\t{\n\t\tfor (uint i=0; i<transactionCount; i++)\n\t\tif (   pending && !transactions[i].executed\n\t\t\t|| executed && transactions[i].executed)\n\t\tcount += 1;\n\t}\n\n\t/// @dev Returns list of owners.\n\t/// @return List of owner addresses.\n\tfunction getOwners()\n\tpublic\n\tview\n\treturns (address[] memory)\n\t{\n\t\treturn owners;\n\t}\n\n\t/// @dev Returns array with owner addresses, which confirmed transaction.\n\t/// @param transactionId Transaction ID.\n\t/// @return Returns array of owner addresses.\n\tfunction getConfirmations(uint transactionId)\n\tpublic\n\tview\n\treturns (address[] memory _confirmations)\n\t{\n\t\taddress[] memory confirmationsTemp = new address[](owners.length);\n\t\tuint count = 0;\n\t\tuint i;\n\t\tfor (i=0; i<owners.length; i++)\n\t\tif (confirmations[transactionId][owners[i]]) {\n\t\t\tconfirmationsTemp[count] = owners[i];\n\t\t\tcount += 1;\n\t\t}\n\t\t_confirmations = new address[](count);\n\t\tfor (i=0; i<count; i++)\n\t\t_confirmations[i] = confirmationsTemp[i];\n\t}\n\n\t/// @dev Returns list of transaction IDs in defined range.\n\t/// @param from Index start position of transaction array.\n\t/// @param to Index end position of transaction array.\n\t/// @param pending Include pending transactions.\n\t/// @param executed Include executed transactions.\n\t/// @return Returns array of transaction IDs.\n\tfunction getTransactionIds(uint from, uint to, bool pending, bool executed)\n\tpublic\n\tview\n\treturns (uint[] memory _transactionIds)\n\t{\n\t\tuint[] memory transactionIdsTemp = new uint[](transactionCount);\n\t\tuint count = 0;\n\t\tuint i;\n\t\tfor (i=0; i<transactionCount; i++)\n\t\tif (   pending && !transactions[i].executed\n\t\t\t|| executed && transactions[i].executed)\n\t\t{\n\t\t\ttransactionIdsTemp[count] = i;\n\t\t\tcount += 1;\n\t\t}\n\t\t_transactionIds = new uint[](to - from);\n\t\tfor (i=from; i<to; i++)\n\t\t_transactionIds[i - from] = transactionIdsTemp[i];\n\t}\n}",
  "bytecode": "60806040523480156200001157600080fd5b5060405162001c4238038062001c42833981018060405260408110156200003757600080fd5b8101908080516401000000008111156200005057600080fd5b820160208101848111156200006457600080fd5b81518560208202830111640100000000821117156200008257600080fd5b505060209091015181519193509150816032821180620000a157508181115b80620000ab575080155b80620000b5575081155b15620000c057600080fd5b60005b84518110156200018f57600260008683815181101515620000e057fe5b6020908102909101810151600160a060020a031682528101919091526040016000205460ff168062000134575084516000908690839081106200011f57fe5b90602001906020020151600160a060020a0316145b156200013f57600080fd5b60016002600087848151811015156200015457fe5b602090810291909101810151600160a060020a03168252810191909152604001600020805460ff1916911515919091179055600101620000c3565b508351620001a5906003906020870190620001b2565b5050506004555062000246565b8280548282559060005260206000209081019282156200020a579160200282015b828111156200020a5782518254600160a060020a031916600160a060020a03909116178255602090920191600190910190620001d3565b50620002189291506200021c565b5090565b6200024391905b8082111562000218578054600160a060020a031916815560010162000223565b90565b6119ec80620002566000396000f3fe608060405260043610610187576000357c010000000000000000000000000000000000000000000000000000000090048063a0e67e2b116100e8578063c01a8c841161009c578063dc8452cd11610076578063dc8452cd14610703578063e20056e614610718578063ee22610b1461076057610187565b8063c01a8c84146105ef578063c642747414610619578063d74f8edd146106ee57610187565b8063b5dc40c3116100cd578063b5dc40c314610586578063b77bf600146105b0578063ba51a6df146105c557610187565b8063a0e67e2b146104e1578063a8abe69a1461054657610187565b8063547415251161013f578063784547a711610124578063784547a7146103a65780638b51d13f146103d05780639ace38c2146103fa57610187565b806354741525146103205780637065cb481461036657610187565b806320ea8d861161017057806320ea8d861461025c5780632f54bf6e146102865780633411c81c146102da57610187565b8063025e7c27146101c9578063173825d91461021c575b60003411156101c75760408051348152905133917fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c919081900360200190a25b005b3480156101d557600080fd5b506101f3600480360360208110156101ec57600080fd5b503561078a565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561022857600080fd5b506101c76004803603602081101561023f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166107bf565b34801561026857600080fd5b506101c76004803603602081101561027f57600080fd5b5035610a0f565b34801561029257600080fd5b506102c6600480360360208110156102a957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610ae7565b604080519115158252519081900360200190f35b3480156102e657600080fd5b506102c6600480360360408110156102fd57600080fd5b508035906020013573ffffffffffffffffffffffffffffffffffffffff16610afc565b34801561032c57600080fd5b506103546004803603604081101561034357600080fd5b508035151590602001351515610b1c565b60408051918252519081900360200190f35b34801561037257600080fd5b506101c76004803603602081101561038957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610b88565b3480156103b257600080fd5b506102c6600480360360208110156103c957600080fd5b5035610cf5565b3480156103dc57600080fd5b50610354600480360360208110156103f357600080fd5b5035610d89565b34801561040657600080fd5b506104246004803603602081101561041d57600080fd5b5035610e05565b604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018060200183151515158152602001828103825284818151815260200191508051906020019080838360005b838110156104a357818101518382015260200161048b565b50505050905090810190601f1680156104d05780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b3480156104ed57600080fd5b506104f6610eee565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561053257818101518382015260200161051a565b505050509050019250505060405180910390f35b34801561055257600080fd5b506104f66004803603608081101561056957600080fd5b508035906020810135906040810135151590606001351515610f5e565b34801561059257600080fd5b506104f6600480360360208110156105a957600080fd5b503561108f565b3480156105bc57600080fd5b50610354611234565b3480156105d157600080fd5b506101c7600480360360208110156105e857600080fd5b503561123a565b3480156105fb57600080fd5b506101c76004803603602081101561061257600080fd5b50356112b1565b34801561062557600080fd5b506103546004803603606081101561063c57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235169160208101359181019060608101604082013564010000000081111561067957600080fd5b82018360208201111561068b57600080fd5b803590602001918460018302840111640100000000831117156106ad57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506113a7945050505050565b3480156106fa57600080fd5b506103546113c6565b34801561070f57600080fd5b506103546113cb565b34801561072457600080fd5b506101c76004803603604081101561073b57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166113d1565b34801561076c57600080fd5b506101c76004803603602081101561078357600080fd5b50356115da565b600380548290811061079857fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b3330146107cb57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8116600090815260026020526040902054819060ff16151561080157600080fd5b73ffffffffffffffffffffffffffffffffffffffff8216600090815260026020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690555b6003547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0181101561097f578273ffffffffffffffffffffffffffffffffffffffff1660038281548110151561089f57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16141561097757600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81019081106108f757fe5b6000918252602090912001546003805473ffffffffffffffffffffffffffffffffffffffff909216918390811061092a57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061097f565b60010161084d565b50600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01906109b190826118ff565b5060035460045411156109ca576003546109ca9061123a565b60405173ffffffffffffffffffffffffffffffffffffffff8316907f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9090600090a25050565b3360008181526002602052604090205460ff161515610a2d57600080fd5b60008281526001602090815260408083203380855292529091205483919060ff161515610a5957600080fd5b600084815260208190526040902060030154849060ff1615610a7a57600080fd5b600085815260016020908152604080832033808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690555187927ff6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e991a35050505050565b60026020526000908152604090205460ff1681565b600160209081526000928352604080842090915290825290205460ff1681565b6000805b600554811015610b8157838015610b49575060008181526020819052604090206003015460ff16155b80610b6d5750828015610b6d575060008181526020819052604090206003015460ff165b15610b79576001820191505b600101610b20565b5092915050565b333014610b9457600080fd5b73ffffffffffffffffffffffffffffffffffffffff8116600090815260026020526040902054819060ff1615610bc957600080fd5b8173ffffffffffffffffffffffffffffffffffffffff81161515610bec57600080fd5b6003805490506001016004546032821180610c0657508181115b80610c0f575080155b80610c18575081155b15610c2257600080fd5b73ffffffffffffffffffffffffffffffffffffffff851660008181526002602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915560038054918201815583527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001684179055517ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d9190a25050505050565b600080805b600354811015610d815760008481526001602052604081206003805491929184908110610d2357fe5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16835282019290925260400190205460ff1615610d64576001820191505b600454821415610d7957600192505050610d84565b600101610cfa565b50505b919050565b6000805b600354811015610dff5760008381526001602052604081206003805491929184908110610db657fe5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16835282019290925260400190205460ff1615610df7576001820191505b600101610d8d565b50919050565b60006020818152918152604090819020805460018083015460028085018054875161010095821615959095027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff011691909104601f810188900488028401880190965285835273ffffffffffffffffffffffffffffffffffffffff90931695909491929190830182828015610edb5780601f10610eb057610100808354040283529160200191610edb565b820191906000526020600020905b815481529060010190602001808311610ebe57829003601f168201915b5050506003909301549192505060ff1684565b60606003805480602002602001604051908101604052809291908181526020018280548015610f5357602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610f28575b505050505090505b90565b606080600554604051908082528060200260200182016040528015610f8d578160200160208202803883390190505b5090506000805b60055481101561100f57858015610fbd575060008181526020819052604090206003015460ff16155b80610fe15750848015610fe1575060008181526020819052604090206003015460ff165b1561100757808383815181101515610ff557fe5b60209081029091010152600191909101905b600101610f94565b87870360405190808252806020026020018201604052801561103b578160200160208202803883390190505b5093508790505b8681101561108457828181518110151561105857fe5b906020019060200201518489830381518110151561107257fe5b60209081029091010152600101611042565b505050949350505050565b6060806003805490506040519080825280602002602001820160405280156110c1578160200160208202803883390190505b5090506000805b6003548110156111a057600085815260016020526040812060038054919291849081106110f157fe5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16835282019290925260400190205460ff161561119857600380548290811061113957fe5b600091825260209091200154835173ffffffffffffffffffffffffffffffffffffffff9091169084908490811061116c57fe5b73ffffffffffffffffffffffffffffffffffffffff909216602092830290910190910152600191909101905b6001016110c8565b816040519080825280602002602001820160405280156111ca578160200160208202803883390190505b509350600090505b8181101561122c5782818151811015156111e857fe5b90602001906020020151848281518110151561120057fe5b73ffffffffffffffffffffffffffffffffffffffff9092166020928302909101909101526001016111d2565b505050919050565b60055481565b33301461124657600080fd5b60035481603282118061125857508181115b80611261575080155b8061126a575081155b1561127457600080fd5b60048390556040805184815290517fa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a9181900360200190a1505050565b3360008181526002602052604090205460ff1615156112cf57600080fd5b600082815260208190526040902054829073ffffffffffffffffffffffffffffffffffffffff16151561130157600080fd5b60008381526001602090815260408083203380855292529091205484919060ff161561132c57600080fd5b600085815260016020818152604080842033808652925280842080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016909317909255905187927f4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef91a36113a0856115da565b5050505050565b60006113b48484846117cc565b90506113bf816112b1565b9392505050565b603281565b60045481565b3330146113dd57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8216600090815260026020526040902054829060ff16151561141357600080fd5b73ffffffffffffffffffffffffffffffffffffffff8216600090815260026020526040902054829060ff161561144857600080fd5b60005b600354811015611508578473ffffffffffffffffffffffffffffffffffffffff1660038281548110151561147b57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16141561150057836003828154811015156114b357fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611508565b60010161144b565b5073ffffffffffffffffffffffffffffffffffffffff80851660008181526002602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090811690915593871682528082208054909416600117909355915190917f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9091a260405173ffffffffffffffffffffffffffffffffffffffff8416907ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d90600090a250505050565b600081815260208190526040902060030154819060ff16156115fb57600080fd5b61160482610cf5565b156117c8576000828152602081905260408082206003810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915581548183015493516002808501805495979660609673ffffffffffffffffffffffffffffffffffffffff909516959094919392839285927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff908216156101000201160480156116ee5780601f106116cc5761010080835404028352918201916116ee565b820191906000526020600020905b8154815290600101906020018083116116da575b505091505060006040518083038185875af1925050503d8060008114611730576040519150601f19603f3d011682016040523d82523d6000602084013e611735565b606091505b50909250905081156117715760405185907f33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed7590600090a26113a0565b60405185907f526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b7923690600090a2505060030180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690555b5050565b60008373ffffffffffffffffffffffffffffffffffffffff811615156117f157600080fd5b6005546040805160808101825273ffffffffffffffffffffffffffffffffffffffff8881168252602080830189815283850189815260006060860181905287815280845295909520845181547fffffffffffffffffffffffff00000000000000000000000000000000000000001694169390931783555160018301559251805194965091939092611889926002850192910190611928565b5060609190910151600390910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001691151591909117905560058054600101905560405182907fc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e5190600090a2509392505050565b815481835581811115611923576000838152602090206119239181019083016119a6565b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061196957805160ff1916838001178555611996565b82800160010185558215611996579182015b8281111561199657825182559160200191906001019061197b565b506119a29291506119a6565b5090565b610f5b91905b808211156119a257600081556001016119ac56fea165627a7a72305820764f2fe5f0dc2e928e2d912477bb1831006f4add09046ef519b8e0fb525bfa1900290000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000060000000000000000000000000273895d69346e7ddf632bbcd7d0239d414af09200000000000000000000000050c10278e15a73fb688447af36691da81faae5750000000000000000000000006927f85b9f70d2bc270692df205658c3d541a71e00000000000000000000000006e54a1ca44a8ec7b58f90dab10958c94593e3ad000000000000000000000000c890e1af5d52454a43ff7b65b0353b7425d6eec9000000000000000000000000b3fd2dcff313efdd918040143921457bea7e49d5",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000060000000000000000000000000273895d69346e7ddf632bbcd7d0239d414af09200000000000000000000000050c10278e15a73fb688447af36691da81faae5750000000000000000000000006927f85b9f70d2bc270692df205658c3d541a71e00000000000000000000000006e54a1ca44a8ec7b58f90dab10958c94593e3ad000000000000000000000000c890e1af5d52454a43ff7b65b0353b7425d6eec9000000000000000000000000b3fd2dcff313efdd918040143921457bea7e49d5"
}