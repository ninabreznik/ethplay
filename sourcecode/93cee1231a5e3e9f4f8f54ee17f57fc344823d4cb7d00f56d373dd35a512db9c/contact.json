{
  "address": "0xe3fedaecd47aa8eab6b23227b0ee56f092c967a9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PrimasToken",
  "compilerVersion": "v0.4.14+commit.c2215d46",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-08-21\n*/\n\npragma solidity ^0.4.14;\n\n\n// https://github.com/ethereum/wiki/wiki/Standardized_Contract_APIs#transferable-fungibles-see-erc-20-for-the-latest\n\n\ncontract ERC20Token {\n    // Triggered when tokens are transferred.\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    // Triggered whenever approve(address _spender, uint256 _value) is called.\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    \n    // Get the total token supply\n    function totalSupply() constant returns (uint256 supply);\n    \n    // Get the account `balance` of another account with address `_owner`\n    function balanceOf(address _owner) constant returns (uint256 balance);\n\n    // Send `_value` amount of tokens to address `_to`\n    function transfer(address _to, uint256 _value) returns (bool success);\n    \n    // Send `_value` amount of tokens from address `_from` to address `_to`\n    // The `transferFrom` method is used for a withdraw workflow, allowing contracts to send tokens on your behalf, \n    // for example to \"deposit\" to a contract address and/or to charge fees in sub-currencies; \n    // the command should fail unless the `_from` account has deliberately authorized the sender of the message \n    // via some mechanism; we propose these standardized APIs for `approval`:\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n    \n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n    // If this function is called again it overwrites the current allowance with _value.\n    function approve(address _spender, uint256 _value) returns (bool success);\n    \n    // Returns the amount which _spender is still allowed to withdraw from _owner\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n}\n\ncontract PrimasToken is ERC20Token {\n    address public initialOwner;\n    uint256 public supply   = 100000000 * 10 ** 18;  // 100, 000, 000\n    string  public name     = 'Primas';\n    uint8   public decimals = 18;\n    string  public symbol   = 'PST';\n    string  public version  = 'v0.1';\n    bool    public transfersEnabled = true;\n    uint    public creationBlock;\n    uint    public creationTime;\n    \n    mapping (address => uint256) balance;\n    mapping (address => mapping (address => uint256)) m_allowance;\n    mapping (address => uint) jail;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    function PrimasToken() {\n        initialOwner        = msg.sender;\n        balance[msg.sender] = supply;\n        creationBlock       = block.number;\n        creationTime        = block.timestamp;\n    }\n\n    function balanceOf(address _account) constant returns (uint) {\n        return balance[_account];\n    }\n\n    function totalSupply() constant returns (uint) {\n        return supply;\n    }\n\n    function transfer(address _to, uint256 _value) returns (bool success) {\n        // `revert()` | `throw`\n        //      http://solidity.readthedocs.io/en/develop/control-structures.html#error-handling-assert-require-revert-and-exceptions\n        //      https://ethereum.stackexchange.com/questions/20978/why-do-throw-and-revert-create-different-bytecodes/20981\n        if (!transfersEnabled) revert();\n        if ( jail[msg.sender] >= block.timestamp ) revert();\n        \n        return doTransfer(msg.sender, _to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n        if (!transfersEnabled) revert();\n        if ( jail[msg.sender] >= block.timestamp || jail[_to] >= block.timestamp || jail[_from] >= block.timestamp ) revert();\n            \n        if (allowance(_from, msg.sender) < _value) return false;\n        \n        m_allowance[_from][msg.sender] -= _value;\n        \n        if ( !(doTransfer(_from, _to, _value)) ) {\n            m_allowance[_from][msg.sender] += _value;\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    function doTransfer(address _from, address _to, uint _value) internal returns (bool success) {\n        if (balance[_from] >= _value && balance[_to] + _value >= balance[_to]) {\n            balance[_from] -= _value;\n            balance[_to] += _value;\n            Transfer(_from, _to, _value);\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n    function approve(address _spender, uint256 _value) returns (bool success) {\n        if (!transfersEnabled) revert();\n        if ( jail[msg.sender] >= block.timestamp || jail[_spender] >= block.timestamp ) revert();\n\n        // https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        if ( (_value != 0) && (allowance(msg.sender, _spender) != 0) ) revert();\n        \n        m_allowance[msg.sender][_spender] = _value;\n\n        Approval(msg.sender, _spender, _value);\n\n        return true;\n    }\n    \n    function allowance(address _owner, address _spender) constant returns (uint256) {\n        if (!transfersEnabled) revert();\n\n        return m_allowance[_owner][_spender];\n    }\n    \n    function enableTransfers(bool _transfersEnabled) returns (bool) {\n        if (msg.sender != initialOwner) revert();\n        transfersEnabled = _transfersEnabled;\n        return transfersEnabled;\n    }\n\n    function catchYou(address _target, uint _timestamp) returns (uint) {\n        if (msg.sender != initialOwner) revert();\n        if (!transfersEnabled) revert();\n\n        jail[_target] = _timestamp;\n\n        return jail[_target];\n    }\n\n}",
  "bytecode": "60606040526a52b7d2dcc80cd2e400000060015560408051908101604052600681527f5072696d617300000000000000000000000000000000000000000000000000006020820152600290805161005a92916020019061014d565b506003805460ff1916601217905560408051908101604052600381527f5053540000000000000000000000000000000000000000000000000000000000602082015260049080516100af92916020019061014d565b5060408051908101604052600481527f76302e3100000000000000000000000000000000000000000000000000000000602082015260059080516100f792916020019061014d565b506006805460ff19166001179055341561011057600080fd5b5b60008054600160a060020a03191633600160a060020a03169081178255600154908252600960205260409091205543600755426008555b6101ed565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061018e57805160ff19168380011785556101bb565b828001600101855582156101bb579182015b828111156101bb5782518255916020019190600101906101a0565b5b506101c89291506101cc565b5090565b6101ea91905b808211156101c857600081556001016101d2565b5090565b90565b610b55806101fc6000396000f300606060405236156100ee5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663047fc9aa81146100f357806306fdde0314610118578063095ea7b3146101a357806317634514146101d957806318160ddd146101fe57806323b872dd1461022357806329ba7bb21461025f578063313ce5671461028e57806354fd4d50146102b757806370a082311461034257806395d89b4114610373578063a9059cbb146103fe578063b423c31e14610434578063bef97c8714610468578063d8270dce1461048f578063dd62ed3e146104b4578063f41e60c5146104eb575b600080fd5b34156100fe57600080fd5b610106610517565b60405190815260200160405180910390f35b341561012357600080fd5b61012b61051d565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101685780820151818401525b60200161014f565b50505050905090810190601f1680156101955780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101ae57600080fd5b6101c5600160a060020a03600435166024356105bb565b604051901515815260200160405180910390f35b34156101e457600080fd5b6101066106a5565b60405190815260200160405180910390f35b341561020957600080fd5b6101066106ab565b60405190815260200160405180910390f35b341561022e57600080fd5b6101c5600160a060020a03600435811690602435166044356106b2565b604051901515815260200160405180910390f35b341561026a57600080fd5b6102726107cc565b604051600160a060020a03909116815260200160405180910390f35b341561029957600080fd5b6102a16107db565b60405160ff909116815260200160405180910390f35b34156102c257600080fd5b61012b6107e4565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101685780820151818401525b60200161014f565b50505050905090810190601f1680156101955780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561034d57600080fd5b610106600160a060020a0360043516610882565b60405190815260200160405180910390f35b341561037e57600080fd5b61012b6108a1565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101685780820151818401525b60200161014f565b50505050905090810190601f1680156101955780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561040957600080fd5b6101c5600160a060020a036004351660243561093f565b604051901515815260200160405180910390f35b341561043f57600080fd5b610106600160a060020a036004351660243561098c565b60405190815260200160405180910390f35b341561047357600080fd5b6101c56109dd565b604051901515815260200160405180910390f35b341561049a57600080fd5b6101066109e6565b60405190815260200160405180910390f35b34156104bf57600080fd5b610106600160a060020a03600435811690602435166109ec565b60405190815260200160405180910390f35b34156104f657600080fd5b6101c56004351515610a2e565b604051901515815260200160405180910390f35b60015481565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105b35780601f10610588576101008083540402835291602001916105b3565b820191906000526020600020905b81548152906001019060200180831161059657829003601f168201915b505050505081565b60065460009060ff1615156105cf57600080fd5b600160a060020a0333166000908152600b602052604090205442901015806106105750600160a060020a0383166000908152600b6020526040902054429010155b1561061a57600080fd5b8115801590610631575061062e33846109ec565b15155b1561063b57600080fd5b600160a060020a033381166000818152600a6020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60075481565b6001545b90565b60065460009060ff1615156106c657600080fd5b600160a060020a0333166000908152600b602052604090205442901015806107075750600160a060020a0383166000908152600b6020526040902054429010155b8061072b5750600160a060020a0384166000908152600b6020526040902054429010155b1561073557600080fd5b8161074085336109ec565b101561074e575060006107c4565b600160a060020a038085166000908152600a602090815260408083203390941683529290522080548390039055610786848484610a64565b15156107c05750600160a060020a038084166000908152600a602090815260408083203390941683529290529081208054830190556107c4565b5060015b5b9392505050565b600054600160a060020a031681565b60035460ff1681565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105b35780601f10610588576101008083540402835291602001916105b3565b820191906000526020600020905b81548152906001019060200180831161059657829003601f168201915b505050505081565b600160a060020a0381166000908152600960205260409020545b919050565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105b35780601f10610588576101008083540402835291602001916105b3565b820191906000526020600020905b81548152906001019060200180831161059657829003601f168201915b505050505081565b60065460009060ff16151561095357600080fd5b600160a060020a0333166000908152600b602052604090205442901061097857600080fd5b610983338484610a64565b90505b92915050565b6000805433600160a060020a039081169116146109a857600080fd5b60065460ff1615156109b957600080fd5b50600160a060020a0382166000908152600b60205260409020819055805b92915050565b60065460ff1681565b60085481565b60065460009060ff161515610a0057600080fd5b50600160a060020a038083166000908152600a60209081526040808320938516835292905220545b92915050565b6000805433600160a060020a03908116911614610a4a57600080fd5b506006805460ff1916821515179081905560ff165b919050565b600160a060020a038316600090815260096020526040812054829010801590610aa75750600160a060020a03831660009081526009602052604090205482810110155b15610b1957600160a060020a038085166000818152600960205260408082208054879003905592861680825290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060016107c4565b5060006107c4565b5b93925050505600a165627a7a72305820fcd8382943838a088c331b1918941776ad3ee2e448eabaf69efa3b41161f2f7c0029"
}