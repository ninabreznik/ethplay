{
  "address": "0x7788d759f21f53533051a9ae657fa05a1e068fc6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Fleta Token",
  "contractName": "FletaToken",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-16\n*/\n\npragma solidity ^0.5.0;\n\n// ----------------------------------------------------------------------------\n// 'FLETA' 'Fleta Token' token contract\n//\n// Symbol\t  : FLETA\n// Name\t\t: Fleta Token\n// Total supply: 2,000,000,000.000000000000000000\n// Decimals\t: 18\n//\n// Enjoy.\n//\n// (c) Sam Jeong / Firstchain Co. 2018. The MIT Licence.\n// ----------------------------------------------------------------------------\n\n\n// ----------------------------------------------------------------------------\n// Safe maths\n// ----------------------------------------------------------------------------\nlibrary SafeMath {\n\tfunction add(uint a, uint b) internal pure returns (uint c) {\n\t\tc = a + b;\n\t\trequire(c >= a);\n\t}\n\tfunction sub(uint a, uint b) internal pure returns (uint c) {\n\t\trequire(b <= a);\n\t\tc = a - b;\n\t}\n\tfunction mul(uint a, uint b) internal pure returns (uint c) {\n\t\tc = a * b;\n\t\trequire(a == 0 || c / a == b);\n\t}\n\tfunction div(uint a, uint b) internal pure returns (uint c) {\n\t\trequire(b > 0);\n\t\tc = a / b;\n\t}\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n\tfunction totalSupply() public view returns (uint);\n\tfunction balanceOf(address tokenOwner) public view returns (uint balance);\n\tfunction allowance(address tokenOwner, address spender) public view returns (uint remaining);\n\tfunction transfer(address to, uint tokens) public returns (bool success);\n\tfunction approve(address spender, uint tokens) public returns (bool success);\n\tfunction transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n\tevent Transfer(address indexed from, address indexed to, uint tokens);\n\tevent Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n\n// ----------------------------------------------------------------------------\n// Contract function to receive approval and execute function in one call\n//\n// Borrowed from MiniMeToken\n// ----------------------------------------------------------------------------\ncontract ApproveAndCallFallBack {\n\tfunction receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\n}\n\n\n// ----------------------------------------------------------------------------\n// Owned contract\n// ----------------------------------------------------------------------------\ncontract Owned {\n\taddress public owner;\n\n\tconstructor() public {\n\t\towner = msg.sender;\n\t}\n\n\tmodifier onlyOwner {\n\t\trequire(msg.sender == owner);\n\t\t_;\n\t}\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC20 Token, with the addition of symbol, name and decimals and a\n// fixed supply\n// ----------------------------------------------------------------------------\ncontract FletaToken is ERC20Interface, Owned {\n\tusing SafeMath for uint;\n\n\tstring public symbol;\n\tstring public name;\n\tuint8 public decimals;\n\tuint _totalSupply;\n\tbool _stopTrade;\n\n\tmapping(address => uint) balances;\n\tmapping(address => mapping(address => uint)) allowed;\n\n\n\t// ------------------------------------------------------------------------\n\t// Constructor\n\t// ------------------------------------------------------------------------\n\tconstructor() public {\n\t\tsymbol = \"FLETA\";\n\t\tname = \"Fleta Token\";\n\t\tdecimals = 18;\n\t\t_totalSupply = 2000000000 * 10**uint(decimals);\n\t\t_stopTrade = false;\n\t\tbalances[owner] = _totalSupply;\n\t\temit Transfer(address(0), owner, _totalSupply);\n\t}\n\n\n\t// ------------------------------------------------------------------------\n\t// Total supply\n\t// ------------------------------------------------------------------------\n\tfunction totalSupply() public view returns (uint) {\n\t\treturn _totalSupply.sub(balances[address(0)]);\n\t}\n\n\n\t// ------------------------------------------------------------------------\n\t// Stop Trade\n\t// ------------------------------------------------------------------------\n\tfunction stopTrade() public onlyOwner {\n\t\trequire(_stopTrade != true);\n\t\t_stopTrade = true;\n\t}\n\n\n\t// ------------------------------------------------------------------------\n\t// Start Trade\n\t// ------------------------------------------------------------------------\n\tfunction startTrade() public onlyOwner {\n\t\trequire(_stopTrade == true);\n\t\t_stopTrade = false;\n\t}\n\n\n\t// ------------------------------------------------------------------------\n\t// Get the token balance for account `tokenOwner`\n\t// ------------------------------------------------------------------------\n\tfunction balanceOf(address tokenOwner) public view returns (uint balance) {\n\t\treturn balances[tokenOwner];\n\t}\n\n\n\t// ------------------------------------------------------------------------\n\t// Transfer the balance from token owner's account to `to` account\n\t// - Owner's account must have sufficient balance to transfer\n\t// - 0 value transfers are allowed\n\t// ------------------------------------------------------------------------\n\tfunction transfer(address to, uint tokens) public returns (bool success) {\n\t\trequire(_stopTrade != true);\n\t\trequire(to > address(0));\n\n\t\tbalances[msg.sender] = balances[msg.sender].sub(tokens);\n\t\tbalances[to] = balances[to].add(tokens);\n\t\temit Transfer(msg.sender, to, tokens);\n\t\treturn true;\n\t}\n\n\n\t// ------------------------------------------------------------------------\n\t// Token owner can approve for `spender` to transferFrom(...) `tokens`\n\t// from the token owner's account\n\t//\n\t// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n\t// recommends that there are no checks for the approval double-spend attack\n\t// as this should be implemented in user interfaces\n\t// ------------------------------------------------------------------------\n\tfunction approve(address spender, uint tokens) public returns (bool success) {\n\t\trequire(_stopTrade != true);\n\n\t\tallowed[msg.sender][spender] = tokens;\n\t\temit Approval(msg.sender, spender, tokens);\n\t\treturn true;\n\t}\n\n\n\t// ------------------------------------------------------------------------\n\t// Transfer `tokens` from the `from` account to the `to` account\n\t//\n\t// The calling account must already have sufficient tokens approve(...)-d\n\t// for spending from the `from` account and\n\t// - From account must have sufficient balance to transfer\n\t// - Spender must have sufficient allowance to transfer\n\t// - 0 value transfers are allowed\n\t// ------------------------------------------------------------------------\n\tfunction transferFrom(address from, address to, uint tokens) public returns (bool success) {\n\t\trequire(_stopTrade != true);\n\t\trequire(from > address(0));\n\t\trequire(to > address(0));\n\n\t\tbalances[from] = balances[from].sub(tokens);\n\t\tif(from != to && from != msg.sender) {\n\t\t\tallowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n\t\t}\n\t\tbalances[to] = balances[to].add(tokens);\n\t\temit Transfer(from, to, tokens);\n\t\treturn true;\n\t}\n\n\n\t// ------------------------------------------------------------------------\n\t// Returns the amount of tokens approved by the owner that can be\n\t// transferred to the spender's account\n\t// ------------------------------------------------------------------------\n\tfunction allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n\t\trequire(_stopTrade != true);\n\n\t\treturn allowed[tokenOwner][spender];\n\t}\n\n\n\t// ------------------------------------------------------------------------\n\t// Token owner can approve for `spender` to transferFrom(...) `tokens`\n\t// from the token owner's account. The `spender` contract function\n\t// `receiveApproval(...)` is then executed\n\t// ------------------------------------------------------------------------\n\tfunction approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\n\t\trequire(msg.sender != spender);\n\n\t\tallowed[msg.sender][spender] = tokens;\n\t\temit Approval(msg.sender, spender, tokens);\n\t\tApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n\t\treturn true;\n\t}\n\n\n\t// ------------------------------------------------------------------------\n\t// Don't accept ETH\n\t// ------------------------------------------------------------------------\n\tfunction () external payable {\n\t\trevert();\n\t}\n\n\n\t// ------------------------------------------------------------------------\n\t// Owner can transfer out any accidentally sent ERC20 tokens\n\t// ------------------------------------------------------------------------\n\tfunction transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n\t\treturn ERC20Interface(tokenAddress).transfer(owner, tokens);\n\t}\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopTrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040805190810160405280600581526020017f464c455441000000000000000000000000000000000000000000000000000000815250600190805190602001906200009f9291906200023d565b506040805190810160405280600b81526020017f466c65746120546f6b656e00000000000000000000000000000000000000000081525060029080519060200190620000ed9291906200023d565b506012600360006101000a81548160ff021916908360ff160217905550600360009054906101000a900460ff1660ff16600a0a6377359400026004819055506000600560006101000a81548160ff021916908315150217905550600454600660008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6004546040518082815260200191505060405180910390a3620002ec565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200028057805160ff1916838001178555620002b1565b82800160010185558215620002b1579182015b82811115620002b057825182559160200191906001019062000293565b5b509050620002c09190620002c4565b5090565b620002e991905b80821115620002e5576000816000905550600101620002cb565b5090565b90565b6115e980620002fc6000396000f3fe6080604052600436106100fa576000357c0100000000000000000000000000000000000000000000000000000000900480638baeefce1161009c578063a9059cbb11610076578063a9059cbb1461046b578063cae9ca51146104de578063dc39d06d146105e8578063dd62ed3e1461065b576100fa565b80638baeefce1461036d5780638da5cb5b1461038457806395d89b41146103db576100fa565b806323b872dd116100d857806323b872dd1461022d578063313ce567146102c05780636c580801146102f157806370a0823114610308576100fa565b806306fdde03146100ff578063095ea7b31461018f57806318160ddd14610202575b600080fd5b34801561010b57600080fd5b506101146106e0565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610154578082015181840152602081019050610139565b50505050905090810190601f1680156101815780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561019b57600080fd5b506101e8600480360360408110156101b257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061077e565b604051808215151515815260200191505060405180910390f35b34801561020e57600080fd5b50610217610893565b6040518082815260200191505060405180910390f35b34801561023957600080fd5b506102a66004803603606081101561025057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108ee565b604051808215151515815260200191505060405180910390f35b3480156102cc57600080fd5b506102d5610ca0565b604051808260ff1660ff16815260200191505060405180910390f35b3480156102fd57600080fd5b50610306610cb3565b005b34801561031457600080fd5b506103576004803603602081101561032b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d4d565b6040518082815260200191505060405180910390f35b34801561037957600080fd5b50610382610d96565b005b34801561039057600080fd5b50610399610e31565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103e757600080fd5b506103f0610e56565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610430578082015181840152602081019050610415565b50505050905090810190601f16801561045d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561047757600080fd5b506104c46004803603604081101561048e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ef4565b604051808215151515815260200191505060405180910390f35b3480156104ea57600080fd5b506105ce6004803603606081101561050157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561054857600080fd5b82018360208201111561055a57600080fd5b8035906020019184600183028401116401000000008311171561057c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506110ed565b604051808215151515815260200191505060405180910390f35b3480156105f457600080fd5b506106416004803603604081101561060b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611377565b604051808215151515815260200191505060405180910390f35b34801561066757600080fd5b506106ca6004803603604081101561067e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114db565b6040518082815260200191505060405180910390f35b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107765780601f1061074b57610100808354040283529160200191610776565b820191906000526020600020905b81548152906001019060200180831161075957829003601f168201915b505050505081565b600060011515600560009054906101000a900460ff161515141515156107a357600080fd5b81600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60006108e9600660008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460045461158590919063ffffffff16565b905090565b600060011515600560009054906101000a900460ff1615151415151561091357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1611151561094e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1611151561098957600080fd5b6109db82600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461158590919063ffffffff16565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614158015610a8657503373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614155b15610b9b57610b1a82600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461158590919063ffffffff16565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b610bed82600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115a190919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600360009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d0e57600080fd5b60011515600560009054906101000a900460ff161515141515610d3057600080fd5b6000600560006101000a81548160ff021916908315150217905550565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610df157600080fd5b60011515600560009054906101000a900460ff16151514151515610e1457600080fd5b6001600560006101000a81548160ff021916908315150217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610eec5780601f10610ec157610100808354040283529160200191610eec565b820191906000526020600020905b815481529060010190602001808311610ecf57829003601f168201915b505050505081565b600060011515600560009054906101000a900460ff16151514151515610f1957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16111515610f5457600080fd5b610fa682600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461158590919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061103b82600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115a190919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60008373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415151561112a57600080fd5b82600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a38373ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338530866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156113055780820151818401526020810190506112ea565b50505050905090810190601f1680156113325780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561135457600080fd5b505af1158015611368573d6000803e3d6000fd5b50505050600190509392505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113d457600080fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561149857600080fd5b505af11580156114ac573d6000803e3d6000fd5b505050506040513d60208110156114c257600080fd5b8101908080519060200190929190505050905092915050565b600060011515600560009054906101000a900460ff1615151415151561150057600080fd5b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600082821115151561159657600080fd5b818303905092915050565b600081830190508281101515156115b757600080fd5b9291505056fea165627a7a723058202786518af6a39fe3901d7defda4d731c1790e32a1e416a41ac94a9b70a8d89300029"
}