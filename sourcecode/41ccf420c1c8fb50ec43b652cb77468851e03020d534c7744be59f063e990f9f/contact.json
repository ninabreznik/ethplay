{
  "address": "0x204c3e5296ab443707e5404a509aa5194e63b12a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EcoVault",
  "compilerVersion": "v0.4.17+commit.bdeb9e52",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-20\n*/\n\npragma solidity ^0.4.17;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract HasNoEther is Ownable {\n\n  /**\n  * @dev Constructor that rejects incoming Ether\n  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n  * we could use assembly to access msg.value.\n  */\n  function HasNoEther() public payable {\n    require(msg.value == 0);\n  }\n\n  /**\n   * @dev Disallows direct send by settings a default function without the `payable` flag.\n   */\n  function() external {\n  }\n\n  /**\n   * @dev Transfer all Ether held by the contract to the owner.\n   */\n  function reclaimEther() external onlyOwner {\n    assert(owner.send(this.balance));\n  }\n}\n\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\nlibrary SafeERC20 {\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    assert(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n    assert(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    assert(token.approve(spender, value));\n  }\n}\n\ncontract CanReclaimToken is Ownable {\n  using SafeERC20 for ERC20Basic;\n\n  /**\n   * @dev Reclaim all ERC20Basic compatible tokens\n   * @param token ERC20Basic The address of the token contract\n   */\n  function reclaimToken(ERC20Basic token) external onlyOwner {\n    uint256 balance = token.balanceOf(this);\n    token.safeTransfer(owner, balance);\n  }\n\n}\n\ncontract EcoVault is Ownable, Pausable, HasNoEther, CanReclaimToken\n{\n\n    using SafeMath for uint256;\n    using SafeERC20 for ERC20;\n\n    uint256 public constant MAX_CONTRIBUTION = 100000 * 10**18; // Max amount of WILD per address\n    uint256 public constant MAX_TOTAL_CONTRIBUTIONS = 5000000 * 10**18; // Max amount for all WILD contributed\n    uint256 public constant CONTRIBUTION_START = 1508544000; // 21 Oct, 2018 00:00:00 UTC\n    uint256 public constant CONTRIBUTION_END = 1509494400; // 1 Nov, 2018 00:00:00 UTC\n    uint256 public constant TIME_LOCK_END = 1525132800; // 1 May, 2018 00:00:00 UTC\n\n    mapping (address => uint256) public contributions;\n    uint256 public totalContributions = 0;\n\n    ERC20 public token;\n\n    event Contribution(address indexed _addr, uint256 _amount);\n    event Withdrawal(address indexed _addr, uint256 _amount);\n\n    modifier whenAbleToContribute(uint256 _amount)\n    {\n        require(\n            now > CONTRIBUTION_START &&\n            now < CONTRIBUTION_END &&\n            _amount > 0 &&\n            contributions[msg.sender].add(_amount) <= MAX_CONTRIBUTION &&\n            totalContributions.add(_amount) <= MAX_TOTAL_CONTRIBUTIONS &&\n            token.allowance(msg.sender, this) >= _amount\n        );\n        _;\n    }\n\n    modifier whenAbleToWithdraw()\n    {\n        require(\n            now >= TIME_LOCK_END &&\n            contributions[msg.sender] > 0\n        );\n        _;\n    }\n\n    function EcoVault(address _tokenAddress) public\n    {\n        token = ERC20(_tokenAddress);\n    }\n\n    function contribute(uint256 _amount) whenAbleToContribute(_amount) whenNotPaused public\n    {\n        contributions[msg.sender] = contributions[msg.sender].add(_amount);\n        totalContributions = totalContributions.add(_amount);\n        token.safeTransferFrom(msg.sender, this, _amount);\n        Contribution(msg.sender, _amount);\n    }\n\n    function contributionsOf(address _addr) public constant returns (uint256)\n    {\n        return contributions[_addr];\n    }\n\n    function withdraw() whenAbleToWithdraw whenNotPaused public\n    {\n        uint256 amount = contributions[msg.sender];\n        contributions[msg.sender] = 0;\n        totalContributions = totalContributions.sub(amount);\n        token.safeTransfer(msg.sender, amount);\n        Withdrawal(msg.sender, amount);\n    }\n}",
  "bytecode": "60606040526000805460a060020a60ff0219168155600255341561002257600080fd5b604051602080610ab88339810160405280805160008054600160a060020a03191633600160a060020a0316179055915050341561005e57600080fd5b60038054600160a060020a031916600160a060020a0392909216919091179055610a2b8061008d6000396000f300606060405236156100e05763ffffffff60e060020a60003504166317ffc32081146100ed5780631f3909751461010c57806337c08923146101315780633af0dbc1146101445780633ccfd60b146101635780633f4ba83a1461017657806342e94c90146101895780635c975abb146101a85780637de50c44146101cf5780638456cb59146101e25780638da5cb5b146101f557806392b031201461022457806394d95f8f146102375780639f727c271461024a578063c1cbbca71461025d578063e5f796fd14610273578063f2fde38b14610286578063fc0c546a146102a5575b34156100eb57600080fd5b005b34156100f857600080fd5b6100eb600160a060020a03600435166102b8565b341561011757600080fd5b61011f61036c565b60405190815260200160405180910390f35b341561013c57600080fd5b61011f61037b565b341561014f57600080fd5b61011f600160a060020a0360043516610381565b341561016e57600080fd5b6100eb61039c565b341561018157600080fd5b6100eb61047b565b341561019457600080fd5b61011f600160a060020a03600435166104fa565b34156101b357600080fd5b6101bb61050c565b604051901515815260200160405180910390f35b34156101da57600080fd5b61011f61051c565b34156101ed57600080fd5b6100eb610524565b341561020057600080fd5b6102086105a8565b604051600160a060020a03909116815260200160405180910390f35b341561022f57600080fd5b61011f6105b7565b341561024257600080fd5b61011f6105bf565b341561025557600080fd5b6100eb6105cd565b341561026857600080fd5b6100eb600435610620565b341561027e57600080fd5b61011f61080d565b341561029157600080fd5b6100eb600160a060020a0360043516610815565b34156102b057600080fd5b6102086108b0565b6000805433600160a060020a039081169116146102d457600080fd5b81600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561032b57600080fd5b6102c65a03f1151561033c57600080fd5b50505060405180516000549092506103689150600160a060020a0384811691168363ffffffff6108bf16565b5050565b6a0422ca8b0a00a42500000081565b60025481565b600160a060020a031660009081526001602052604090205490565b6000635ae7ae0042101580156103c85750600160a060020a033316600090815260016020526040812054115b15156103d357600080fd5b60005460a060020a900460ff16156103ea57600080fd5b50600160a060020a0333166000908152600160205260408120805491905560025461041b908263ffffffff61094416565b60025560035461043b90600160a060020a0316338363ffffffff6108bf16565b33600160a060020a03167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b658260405190815260200160405180910390a250565b60005433600160a060020a0390811691161461049657600080fd5b60005460a060020a900460ff1615156104ae57600080fd5b6000805474ff0000000000000000000000000000000000000000191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b60016020526000908152604090205481565b60005460a060020a900460ff1681565b635ae7ae0081565b60005433600160a060020a0390811691161461053f57600080fd5b60005460a060020a900460ff161561055657600080fd5b6000805474ff0000000000000000000000000000000000000000191660a060020a1790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600054600160a060020a031681565b6359ea8e0081565b69152d02c7e14af680000081565b60005433600160a060020a039081169116146105e857600080fd5b600054600160a060020a039081169030163180156108fc0290604051600060405180830381858888f19350505050151561061e57fe5b565b806359ea8e004211801561063757506359f90e8042105b80156106435750600081115b80156106825750600160a060020a03331660009081526001602052604090205469152d02c7e14af68000009061067f908363ffffffff61095616565b11155b80156106ac57506002546a0422ca8b0a00a425000000906106a9908363ffffffff61095616565b11155b801561073457506003548190600160a060020a031663dd62ed3e333060006040516020015260405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401602060405180830381600087803b151561071657600080fd5b6102c65a03f1151561072757600080fd5b5050506040518051905010155b151561073f57600080fd5b60005460a060020a900460ff161561075657600080fd5b600160a060020a03331660009081526001602052604090205461077f908363ffffffff61095616565b600160a060020a0333166000908152600160205260409020556002546107ab908363ffffffff61095616565b6002556003546107cc90600160a060020a031633308563ffffffff61096c16565b33600160a060020a03167f4d154d4aae216bed6d0926db77c00df2b57c6b5ba4eee05775de20facede3a7b8360405190815260200160405180910390a25050565b6359f90e8081565b60005433600160a060020a0390811691161461083057600080fd5b600160a060020a038116151561084557600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600160a060020a031681565b82600160a060020a031663a9059cbb838360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561091c57600080fd5b6102c65a03f1151561092d57600080fd5b50505060405180519050151561093f57fe5b505050565b60008282111561095057fe5b50900390565b60008282018381101561096557fe5b9392505050565b83600160a060020a03166323b872dd84848460006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b15156109d657600080fd5b6102c65a03f115156109e757600080fd5b5050506040518051905015156109f957fe5b505050505600a165627a7a723058201377c3fc8149cebbc8f5963049b67e4afc329700dfdc9821a4429169677562f10029000000000000000000000000d3c00772b24d997a812249ca637a921e81357701",
  "constructorArguments": "000000000000000000000000d3c00772b24d997a812249ca637a921e81357701"
}