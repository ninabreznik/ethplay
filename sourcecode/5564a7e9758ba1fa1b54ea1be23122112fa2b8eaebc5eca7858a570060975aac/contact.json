{
  "address": "0x621c1528829b70bfe6df7fa82251ed7271ab8104",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "luxbio_bio",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-10\n*/\n\npragma solidity ^0.4.24;\n\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender)\n        public view returns (uint256);\n\n    function transferFrom(address from, address to, uint256 value)\n        public returns (bool);\n\n    function approve(address spender, uint256 value) public returns (bool);\n    \n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\n\n    /**\n    * @title Basic token\n    * @dev Basic version of StandardToken, with no allowances.\n    */\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n\n    uint256 totalSupply_;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n\n    /**\n    * @dev Transfer tokens from one address to another\n    * @param _from address The address which you want to send tokens from\n    * @param _to address The address which you want to transfer to\n    * @param _value uint256 the amount of tokens to be transferred\n    */\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        public\n        returns (bool)\n    {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    * @param _spender The address which will spend the funds.\n    * @param _value The amount of tokens to be spent.\n    */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n    * @param _owner address The address which owns the funds.\n    * @param _spender address The address which will spend the funds.\n    * @return A uint256 specifying the amount of tokens still available for the spender.\n    */\n    function allowance(\n        address _owner,\n        address _spender\n    )\n        public\n        view\n        returns (uint256)\n    {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\n    * approve should be called when allowed[_spender] == 0. To increment\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param _spender The address which will spend the funds.\n    * @param _addedValue The amount of tokens to increase the allowance by.\n    */\n    function increaseApproval(\n        address _spender,\n        uint256 _addedValue\n    )\n        public\n        returns (bool)\n    {\n        allowed[msg.sender][_spender] = (\n        allowed[msg.sender][_spender].add(_addedValue));\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n    * approve should be called when allowed[_spender] == 0. To decrement\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param _spender The address which will spend the funds.\n    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n    */\n    function decreaseApproval(\n        address _spender,\n        uint256 _subtractedValue\n    )\n        public\n        returns (bool)\n    {\n        uint256 oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n}\n\ncontract MultiOwnable {\n    address public hiddenOwner;\n    address public superOwner;\n    address public tokenExchanger;\n    address[10] public chkOwnerList;\n\n    mapping (address => bool) public owners;\n    \n    event AddOwner(address indexed newOwner);\n    event DeleteOwner(address indexed toDeleteOwner);\n    event SetTex(address indexed newTex);\n    event ChangeSuperOwner(address indexed newSuperOwner);\n    event ChangeHiddenOwner(address indexed newHiddenOwner);\n\n    constructor() public {\n        hiddenOwner = msg.sender;\n        superOwner = msg.sender;\n        owners[superOwner] = true;\n        chkOwnerList[0] = msg.sender;\n        tokenExchanger = msg.sender;\n    }\n\n    modifier onlySuperOwner() {\n        require(superOwner == msg.sender);\n        _;\n    }\n    modifier onlyHiddenOwner() {\n        require(hiddenOwner == msg.sender);\n        _;\n    }\n    modifier onlyOwner() {\n        require(owners[msg.sender]);\n        _;\n    }\n\n    function changeSuperOwnership(address newSuperOwner) public onlyHiddenOwner returns(bool) {\n        require(newSuperOwner != address(0));\n        superOwner = newSuperOwner;\n        emit ChangeSuperOwner(superOwner);\n        return true;\n    }\n    \n    function changeHiddenOwnership(address newHiddenOwner) public onlyHiddenOwner returns(bool) {\n        require(newHiddenOwner != address(0));\n        hiddenOwner = newHiddenOwner;\n        emit ChangeHiddenOwner(hiddenOwner);\n        return true;\n    }\n\n    function addOwner(address owner, uint8 num) public onlySuperOwner returns (bool) {\n        require(num < 10);\n        require(owner != address(0));\n        require(chkOwnerList[num] == address(0));\n        owners[owner] = true;\n        chkOwnerList[num] = owner;\n        emit AddOwner(owner);\n        return true;\n    }\n\n    function setTEx(address tex) public onlySuperOwner returns (bool) {\n        require(tex != address(0));\n        tokenExchanger = tex;\n        emit SetTex(tex);\n        return true;\n    }\n\n    function deleteOwner(address owner, uint8 num) public onlySuperOwner returns (bool) {\n        require(chkOwnerList[num] == owner);\n        require(owner != address(0));\n        owners[owner] = false;\n        chkOwnerList[num] = address(0);\n        emit DeleteOwner(owner);\n        return true;\n    }\n}\n\ncontract HasNoEther is MultiOwnable {\n    \n    /**\n  * @dev Constructor that rejects incoming Ether\n  * The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n  * we could use assembly to access msg.value.\n  */\n    constructor() public payable {\n        require(msg.value == 0);\n    }\n    \n    /**\n   * @dev Disallows direct send by settings a default function without the `payable` flag.\n   */\n    function() external {\n    }\n    \n    /**\n   * @dev Transfer all Ether held by the contract to the owner.\n   */\n    function reclaimEther() external onlySuperOwner returns(bool) {\n        superOwner.transfer(address(this).balance);\n\n        return true;\n    }\n}\n\ncontract Blacklist is MultiOwnable {\n   \n    mapping(address => bool) blacklisted;\n    \n    event Blacklisted(address indexed blacklist);\n    event Whitelisted(address indexed whitelist);\n\n    modifier whenPermitted(address node) {\n        require(!blacklisted[node]);\n        _;\n    }\n    \n    /**\n    * @dev Check a certain node is in a blacklist\n    * @param node  Check whether the user at a certain node is in a blacklist\n    */\n    function isPermitted(address node) public view returns (bool) {\n        return !blacklisted[node];\n    }\n\n    /**\n    * @dev Process blacklisting\n    * @param node Process blacklisting. Put the user in the blacklist.   \n    */\n    function blacklist(address node) public onlyOwner returns (bool) {\n        blacklisted[node] = true;\n        emit Blacklisted(node);\n\n        return blacklisted[node];\n    }\n\n    /**\n    * @dev Process unBlacklisting. \n    * @param node Remove the user from the blacklist.   \n    */\n    function unblacklist(address node) public onlySuperOwner returns (bool) {\n        blacklisted[node] = false;\n        emit Whitelisted(node);\n\n        return blacklisted[node];\n    }\n}\n\ncontract TimelockToken is StandardToken, HasNoEther, Blacklist {\n    bool public timelock;\n    uint256 public openingTime;\n\n    struct chkBalance {\n        uint256 _sent;\n        uint256 _initial;\n        uint256 _limit;\n    }\n\n    mapping(address => bool) public p2pAddrs;\n    mapping(address => chkBalance) public chkInvestorBalance;\n    \n    event Postcomplete(address indexed _from, address indexed _spender, address indexed _to, uint256 _value);\n    event OnTimeLock(address who);\n    event OffTimeLock(address who);\n    event P2pUnlocker(address addr);\n    event P2pLocker(address addr);\n    \n\n    constructor() public {\n        openingTime = block.timestamp;\n        p2pAddrs[msg.sender] = true;\n        timelock = false;\n    }\n\n    function postTransfer(address from, address spender, address to, uint256 value) internal returns (bool) {\n        emit Postcomplete(from, spender, to, value);\n        return true;\n    }\n    \n    function p2pUnlocker (address addr) public onlySuperOwner returns (bool) {\n        p2pAddrs[addr] = true;\n        \n        emit P2pUnlocker(addr);\n\n        return p2pAddrs[addr];\n    }\n\n    function p2pLocker (address addr) public onlyOwner returns (bool) {\n        p2pAddrs[addr] = false;\n        \n        emit P2pLocker(addr);\n\n        return p2pAddrs[addr];\n    }\n\n    function onTimeLock() public onlySuperOwner returns (bool) {\n        timelock = true;\n        \n        emit OnTimeLock(msg.sender);\n        \n        return timelock;\n    }\n\n    function offTimeLock() public onlySuperOwner returns (bool) {\n        timelock = false;\n        \n        emit OffTimeLock(msg.sender);\n        \n        return timelock;\n    }\n  \n    function transfer(address to, uint256 value) public \n    whenPermitted(msg.sender) returns (bool) {\n        \n        bool ret;\n        \n        if (!timelock) { // phase 1\n            \n            require(p2pAddrs[msg.sender]);\n            ret = super.transfer(to, value);\n        } else { // phase 2\n            if (owners[msg.sender]) {\n                require(p2pAddrs[msg.sender]);\n                \n                uint _totalAmount = balances[to].add(value);\n                chkInvestorBalance[to] = chkBalance(0,_totalAmount,_totalAmount.div(5));\n                ret = super.transfer(to, value);\n            } else {\n                require(!p2pAddrs[msg.sender] && to == tokenExchanger);\n                require(_timeLimit() > 0);\n                \n                if (chkInvestorBalance[msg.sender]._initial == 0) { // first transfer\n                    uint256 new_initial = balances[msg.sender];\n                    chkInvestorBalance[msg.sender] = chkBalance(0, new_initial, new_initial.div(5));\n                }\n                \n                uint256 addedValue = chkInvestorBalance[msg.sender]._sent.add(value);\n                require(addedValue <= _timeLimit().mul(chkInvestorBalance[msg.sender]._limit));\n                chkInvestorBalance[msg.sender]._sent = addedValue;\n                ret = super.transfer(to, value);\n            }\n        }\n        if (ret) \n            return postTransfer(msg.sender, msg.sender, to, value);\n        else\n            return false;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public \n    whenPermitted(msg.sender) returns (bool) {\n        require (owners[msg.sender] && p2pAddrs[msg.sender]);\n        require (timelock);\n        \n        if (owners[from]) {\n            uint _totalAmount = balances[to].add(value);\n            chkInvestorBalance[to] = chkBalance(0,_totalAmount,_totalAmount.div(5));\n        } else {\n            require (owners[to] || to == tokenExchanger);\n            \n            if (chkInvestorBalance[from]._initial == 0) { // first transfer\n                uint256 new_initial = balances[from];\n                chkInvestorBalance[from] = chkBalance(0, new_initial, new_initial.div(5));\n            }\n\n            uint256 addedValue = chkInvestorBalance[from]._sent.add(value);\n            require(addedValue <= _timeLimit().mul(chkInvestorBalance[from]._limit));\n            chkInvestorBalance[from]._sent = addedValue;\n        }\n        \n        bool ret = super.transferFrom(from, to, value);\n        \n        if (ret) \n            return postTransfer(from, msg.sender, to, value);\n        else\n            return false;\n    }\n\n    function _timeLimit() internal view returns (uint256) {\n        uint256 presentTime = block.timestamp;\n        uint256 timeValue = presentTime.sub(openingTime);\n        uint256 _result = timeValue.div(31 days);\n\n        return _result;\n    }\n\n    function setOpeningTime() public onlySuperOwner returns(bool) {\n        openingTime = block.timestamp;\n        return true;\n    }\n\n    function getLimitPeriod() external view returns (uint256) {\n        uint256 presentTime = block.timestamp;\n        uint256 timeValue = presentTime.sub(openingTime);\n        uint256 result = timeValue.div(31 days);\n        return result;\n    }\n\n}\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n\n    /**\n    * Returns whether the target address is a contract\n    * @dev This function will return false if invoked during the constructor of a contract,\n    * as the code is not actually created until after the constructor finishes.\n    * @param account address of the account to check\n    * @return whether the target address is a contract\n    */\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        // solium-disable-next-line security/no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n}\n\n\n\ncontract luxbio_bio is TimelockToken {\n    using Address for address;\n    \n    event Burn(address indexed burner, uint256 value);\n    \n    string public constant name = \"LB-COIN\";\n    uint8 public constant decimals = 18;\n    string public constant symbol = \"LB\";\n    uint256 public constant INITIAL_SUPPLY = 1e10 * (10 ** uint256(decimals)); \n\n    constructor() public {\n        totalSupply_ = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n    }\n\n    function destory() public onlyHiddenOwner returns (bool) {\n        \n        selfdestruct(superOwner);\n\n        return true;\n\n    }\n\n    function burn(address _to,uint256 _value) public onlySuperOwner {\n        _burn(_to, _value);\n    }\n\n    function _burn(address _who, uint256 _value) internal {     \n        require(_value <= balances[_who]);\n    \n        balances[_who] = balances[_who].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n    \n        emit Burn(_who, _value);\n        emit Transfer(_who, address(0), _value);\n    }\n  \n    // override\n    function postTransfer(address from, address spender, address to, uint256 value) internal returns (bool) {\n        if (to == tokenExchanger && to.isContract()) {\n            emit Postcomplete(from, spender, to, value);\n            return luxbio_dapp(to).doExchange(from, spender, to, value);\n        }\n        return true;\n    }\n}\ncontract luxbio_dapp {\n    function doExchange(address from, address spender, address to, uint256 value) public returns (bool);\n    event DoExchange(address indexed from, address indexed _spender, address indexed _to, uint256 _value);\n}",
  "bytecode": "608060405234801561001057600080fd5b506003805433600160a060020a03199182168117909255600480548216831790819055600160a060020a03166000908152601060205260409020805460ff1916600117905560068054821683179055600580549091169091179055341561007657600080fd5b426013553360008181526014602090815260408083208054600160ff1991821681179092556012805490911690556b204fce5e3e2502611000000090819055838352818420819055815190815290517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3611c8a806100ff6000396000f3006080604052600436106101d75763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663022914a781146101e657806306fdde031461021b578063095ea7b3146102a55780630e5229b0146102c9578063157eecd6146102f057806318160ddd1461032157806323b872dd14610348578063266987ef146103725780632fe8ace3146103935780632ff2e9dc146103b457806330ece116146103c9578063313ce567146103de578063327aa493146104095780633be3bdd9146104485780633fd8cc4e1461045d5780634e19c1121461047e57806352a0cf38146104a557806366188463146104c65780636bdebcc9146104ea57806370a08231146104ff57806375e3661e1461052057806379b804551461054157806380e7d3aa1461055657806387dcd2b614610577578063883ba4661461058c5780638c8b802e146105ad57806395d89b41146105c25780639dc29fac146105d75780639f727c27146105fd578063a9059cbb14610612578063b7a8807c14610636578063d33219b41461064b578063d73dd62314610660578063dd62ed3e14610684578063df6dfbb9146106ab578063f85a253f146106c3578063f9f92be4146106e4578063fbbdb68c14610705575b3480156101e357600080fd5b50005b3480156101f257600080fd5b50610207600160a060020a036004351661071a565b604080519115158252519081900360200190f35b34801561022757600080fd5b5061023061072f565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561026a578181015183820152602001610252565b50505050905090810190601f1680156102975780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102b157600080fd5b50610207600160a060020a0360043516602435610766565b3480156102d557600080fd5b50610207600160a060020a036004351660ff602435166107cd565b3480156102fc57600080fd5b506103056108c5565b60408051600160a060020a039092168252519081900360200190f35b34801561032d57600080fd5b506103366108d4565b60408051918252519081900360200190f35b34801561035457600080fd5b50610207600160a060020a03600435811690602435166044356108da565b34801561037e57600080fd5b50610207600160a060020a0360043516610b90565b34801561039f57600080fd5b50610207600160a060020a0360043516610c22565b3480156103c057600080fd5b50610336610cb3565b3480156103d557600080fd5b50610207610cc3565b3480156103ea57600080fd5b506103f3610ce7565b6040805160ff9092168252519081900360200190f35b34801561041557600080fd5b5061042a600160a060020a0360043516610cec565b60408051938452602084019290925282820152519081900360600190f35b34801561045457600080fd5b50610207610d0d565b34801561046957600080fd5b50610207600160a060020a0360043516610d6e565b34801561048a57600080fd5b50610207600160a060020a036004351660ff60243516610d8d565b3480156104b157600080fd5b50610207600160a060020a0360043516610e79565b3480156104d257600080fd5b50610207600160a060020a0360043516602435610f0a565b3480156104f657600080fd5b50610207610ffa565b34801561050b57600080fd5b50610336600160a060020a0360043516611022565b34801561052c57600080fd5b50610207600160a060020a036004351661103d565b34801561054d57600080fd5b506102076110bc565b34801561056257600080fd5b50610207600160a060020a0360043516611120565b34801561058357600080fd5b50610305611135565b34801561059857600080fd5b50610207600160a060020a0360043516611144565b3480156105b957600080fd5b506103366111d5565b3480156105ce57600080fd5b50610230611210565b3480156105e357600080fd5b506105fb600160a060020a0360043516602435611247565b005b34801561060957600080fd5b5061020761126c565b34801561061e57600080fd5b50610207600160a060020a03600435166024356112c8565b34801561064257600080fd5b50610336611552565b34801561065757600080fd5b50610207611558565b34801561066c57600080fd5b50610207600160a060020a0360043516602435611561565b34801561069057600080fd5b50610336600160a060020a03600435811690602435166115fa565b3480156106b757600080fd5b50610305600435611625565b3480156106cf57600080fd5b50610207600160a060020a0360043516611642565b3480156106f057600080fd5b50610207600160a060020a03600435166116cd565b34801561071157600080fd5b50610305611753565b60106020526000908152604090205460ff1681565b60408051808201909152600781527f4c422d434f494e00000000000000000000000000000000000000000000000000602082015281565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a35060015b92915050565b600454600090600160a060020a031633146107e757600080fd5b600a60ff8316106107f757600080fd5b600160a060020a038316151561080c57600080fd5b6000600660ff8416600a811061081e57fe5b0154600160a060020a03161461083357600080fd5b600160a060020a0383166000908152601060205260409020805460ff1916600117905582600660ff8416600a811061086757fe5b01805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03928316179055604051908416907fac1e9ef41b54c676ccf449d83ae6f2624bcdce8f5b93a6b48ce95874c332693d90600090a250600192915050565b600554600160a060020a031681565b60015490565b33600081815260116020526040812054909182918291829182919060ff161561090257600080fd5b3360009081526010602052604090205460ff16801561093057503360009081526014602052604090205460ff165b151561093b57600080fd5b60125460ff16151561094c57600080fd5b600160a060020a03891660009081526010602052604090205460ff16156109fa57600160a060020a038816600090815260208190526040902054610996908863ffffffff61176216565b60408051606081018252600081526020810183905291965081016109c187600563ffffffff61176f16565b9052600160a060020a03891660009081526015602090815260409182902083518155908301516001820155910151600290910155610b59565b600160a060020a03881660009081526010602052604090205460ff1680610a2e5750600554600160a060020a038981169116145b1515610a3957600080fd5b600160a060020a0389166000908152601560205260409020600101541515610ad157600160a060020a0389166000908152602081815260408083205481516060810183529384529183018290529095508101610a9c86600563ffffffff61176f16565b9052600160a060020a038a16600090815260156020908152604091829020835181559083015160018201559101516002909101555b600160a060020a038916600090815260156020526040902054610afa908863ffffffff61176216565b600160a060020a038a16600090815260156020526040902060020154909350610b3190610b256111d5565b9063ffffffff61178416565b831115610b3d57600080fd5b600160a060020a03891660009081526015602052604090208390555b610b648989896117ad565b91508115610b7f57610b7889338a8a611924565b9550610b84565b600095505b50505050509392505050565b3360009081526010602052604081205460ff161515610bae57600080fd5b600160a060020a038216600081815260146020908152604091829020805460ff19169055815192835290517f899be716e3a16e3dc214e31e2ecdb19fcb8b1c5252967e2ca077e55caee8c5a39281900390910190a150600160a060020a031660009081526014602052604090205460ff1690565b600354600090600160a060020a03163314610c3c57600080fd5b600160a060020a0382161515610c5157600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0384811691909117918290556040519116907feeb56e178d898dbb6888a1947d0fa1d38e669ecaf73a140c99bec3ff5d667c5090600090a2506001919050565b6b204fce5e3e2502611000000081565b600454600090600160a060020a03163314610cdd57600080fd5b5042601355600190565b601281565b60156020526000908152604090208054600182015460029092015490919083565b600454600090600160a060020a03163314610d2757600080fd5b6012805460ff191690556040805133815290517f7e1ef4af8ba428bdf634385cb73788f486fe39f6d81cfd60d2f5a931c4f53feb9181900360200190a15060125460ff1690565b600160a060020a031660009081526011602052604090205460ff161590565b600454600090600160a060020a03163314610da757600080fd5b600160a060020a038316600660ff8416600a8110610dc157fe5b0154600160a060020a031614610dd657600080fd5b600160a060020a0383161515610deb57600080fd5b600160a060020a0383166000908152601060205260408120805460ff19169055600660ff8416600a8110610e1b57fe5b01805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03928316179055604051908416907fbaefbfc44c4c937d4905d8a50bef95643f586e33d78f3d1998a10b992b68bdcc90600090a250600192915050565b600454600090600160a060020a03163314610e9357600080fd5b600160a060020a038216600081815260146020908152604091829020805460ff19166001179055815192835290517f17ceff500f6e9b92d2c15e232cc2507f6eab0ac6cb1ac30cb7fa37cecd3b37059281900390910190a150600160a060020a031660009081526014602052604090205460ff1690565b336000908152600260209081526040808320600160a060020a038616845290915281205480831115610f5f57336000908152600260209081526040808320600160a060020a0388168452909152812055610f94565b610f6f818463ffffffff611a6216565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600354600090600160a060020a0316331461101457600080fd5b600454600160a060020a0316ff5b600160a060020a031660009081526020819052604090205490565b600454600090600160a060020a0316331461105757600080fd5b600160a060020a038216600081815260116020526040808220805460ff19169055517faab7954e9d246b167ef88aeddad35209ca2489d95a8aeb59e288d9b19fae5a549190a250600160a060020a031660009081526011602052604090205460ff1690565b600454600090600160a060020a031633146110d657600080fd5b6012805460ff191660011790556040805133815290517ffc9858b7ebde243ccb2d5480d5e384b50ad3923a2833a480eeb04dca59cb1e309181900360200190a15060125460ff1690565b60146020526000908152604090205460ff1681565b600454600160a060020a031681565b600354600090600160a060020a0316331461115e57600080fd5b600160a060020a038216151561117357600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0384811691909117918290556040519116907ff2cbc46fff849c2a92512c5d8225d5cd7c27c7f0c992eaf18d4c0f1d58f413c790600090a2506001919050565b6000806000804292506111f360135484611a6290919063ffffffff16565b9150611208826228de8063ffffffff61176f16565b949350505050565b60408051808201909152600281527f4c42000000000000000000000000000000000000000000000000000000000000602082015281565b600454600160a060020a0316331461125e57600080fd5b6112688282611a74565b5050565b600454600090600160a060020a0316331461128657600080fd5b600454604051600160a060020a0390911690303180156108fc02916000818181858888f193505050501580156112c0573d6000803e3d6000fd5b506001905090565b33600081815260116020526040812054909182918291829182919060ff16156112f057600080fd5b60125460ff16151561132b573360009081526014602052604090205460ff16151561131a57600080fd5b6113248888611b75565b9450611529565b3360009081526010602052604090205460ff16156113f3573360009081526014602052604090205460ff16151561136157600080fd5b600160a060020a03881660009081526020819052604090205461138a908863ffffffff61176216565b60408051606081018252600081526020810183905291955081016113b586600563ffffffff61176f16565b9052600160a060020a038916600090815260156020908152604091829020835181559083015160018201559101516002909101556113248888611b75565b3360009081526014602052604090205460ff161580156114205750600554600160a060020a038981169116145b151561142b57600080fd5b60006114356111d5565b1161143f57600080fd5b3360009081526015602052604090206001015415156114bc5733600090815260208181526040808320548151606081018352938452918301829052909450810161149085600563ffffffff61176f16565b905233600090815260156020908152604091829020835181559083015160018201559101516002909101555b336000908152601560205260409020546114dc908863ffffffff61176216565b336000908152601560205260409020600201549092506114fe90610b256111d5565b82111561150a57600080fd5b3360009081526015602052604090208290556115268888611b75565b94505b84156115425761153b33338a8a611924565b9550611547565b600095505b505050505092915050565b60135481565b60125460ff1681565b336000908152600260209081526040808320600160a060020a0386168452909152812054611595908363ffffffff61176216565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600681600a811061163257fe5b0154600160a060020a0316905081565b600454600090600160a060020a0316331461165c57600080fd5b600160a060020a038216151561167157600080fd5b6005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0384169081179091556040517f0376612b870bb7dbd8b86ba8dbd5040c30e5823af98139c60321febed7d5f50f90600090a2506001919050565b3360009081526010602052604081205460ff1615156116eb57600080fd5b600160a060020a038216600081815260116020526040808220805460ff19166001179055517fffa4e6181777692565cf28528fc88fd1516ea86b56da075235fa575af6a4b8559190a250600160a060020a031660009081526011602052604090205460ff1690565b600354600160a060020a031681565b818101828110156107c757fe5b6000818381151561177c57fe5b049392505050565b6000821515611795575060006107c7565b508181028183828115156117a557fe5b04146107c757fe5b6000600160a060020a03831615156117c457600080fd5b600160a060020a0384166000908152602081905260409020548211156117e957600080fd5b600160a060020a038416600090815260026020908152604080832033845290915290205482111561181957600080fd5b600160a060020a038416600090815260208190526040902054611842908363ffffffff611a6216565b600160a060020a038086166000908152602081905260408082209390935590851681522054611877908363ffffffff61176216565b600160a060020a038085166000908152602081815260408083209490945591871681526002825282812033825290915220546118b9908363ffffffff611a6216565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b600554600090600160a060020a038481169116148015611951575061195183600160a060020a0316611c56565b15611a575782600160a060020a031684600160a060020a031686600160a060020a03167fe2ab352e5df90fff1dffba875c536468be957270b20b94080defb3cc110596d7856040518082815260200191505060405180910390a4604080517f02e4f63b000000000000000000000000000000000000000000000000000000008152600160a060020a03878116600483015286811660248301528516604482018190526064820185905291516302e4f63b916084808201926020929091908290030181600087803b158015611a2457600080fd5b505af1158015611a38573d6000803e3d6000fd5b505050506040513d6020811015611a4e57600080fd5b50519050611208565b506001949350505050565b600082821115611a6e57fe5b50900390565b600160a060020a038216600090815260208190526040902054811115611a9957600080fd5b600160a060020a038216600090815260208190526040902054611ac2908263ffffffff611a6216565b600160a060020a038316600090815260208190526040902055600154611aee908263ffffffff611a6216565b600155604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6000600160a060020a0383161515611b8c57600080fd5b33600090815260208190526040902054821115611ba857600080fd5b33600090815260208190526040902054611bc8908363ffffffff611a6216565b3360009081526020819052604080822092909255600160a060020a03851681522054611bfa908363ffffffff61176216565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b6000903b11905600a165627a7a7230582075127c76b039725069f6d24d979da064abc4fbd241e99a0c511b6cb083ce9d360029"
}