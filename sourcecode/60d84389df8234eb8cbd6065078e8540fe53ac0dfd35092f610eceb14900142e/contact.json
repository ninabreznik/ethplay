{
  "address": "0xa00b120aecc5076a7737295db6797b801e46b526",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LGX",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-05\n*/\n\npragma solidity >=0.4.22 <0.6.0;\n\ncontract owned {\n    address public owner;\n    \n    constructor() public {\n        owner = msg.sender;\n    }\n    \n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n}\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }\n\ncontract ERC20_token {\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 0;\n    // 18 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply = 10000000000;\n    \n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n    \n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    \n    // This generates a public event on the blockchain that will notify clients\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    \n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n\n    /**\n    * Constructor function\n    *\n    * Initializes contract with initial supply tokens to the creator of the contract\n    */\n    constructor(\n        uint256 initialSupply,\n        string memory tokenName,\n        string memory tokenSymbol\n    ) public {\n        totalSupply = initialSupply * 10 ** uint256(decimals); // Update total supply with the decimal amount\n        name = tokenName; // Set the name for display purposes\n        symbol = tokenSymbol; // Set the symbol for display purposes\n    }\n    \n    /**\n    * Internal transfer, only can be called by this contract\n    */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != address(0x0));\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n    \n    /**\n    * Transfer tokens\n    *\n    * Send `_value` tokens to `_to` from your account\n    *\n    * @param _to The address of the recipient\n    * @param _value the amount to send\n    */\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n    \n    /**\n    * Transfer tokens from other address\n    *\n    * Send `_value` tokens to `_to` in behalf of `_from`\n    *\n    * @param _from The address of the sender\n    * @param _to The address of the recipient\n    * @param _value the amount to send\n    */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]); // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n    \n    /**\n    * Set allowance for other address\n    *\n    * Allows `_spender` to spend no more than `_value` tokens in your behalf\n    *\n    * @param _spender The address authorized to spend\n    * @param _value the max amount they can spend\n    */\n    function approve(address _spender, uint256 _value) public\n    returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    /**\n    * Set allowance for other address and notify\n    *\n    * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n    *\n    * @param _spender The address authorized to spend\n    * @param _value the max amount they can spend\n    * @param _extraData some extra information to send to the approved contract\n    */\n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\n    public\n    returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n            return true;\n        }\n    }\n    \n    /**\n    * Destroy tokens\n    *\n    * Remove `_value` tokens from the system irreversibly\n    *\n    * @param _value the amount of money to burn\n    */\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value); // Check if the sender has enough\n        balanceOf[msg.sender] -= _value; // Subtract from the sender\n        totalSupply -= _value; // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n    \n    /**\n    * Destroy tokens from other account\n    *\n    * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n    *\n    * @param _from the address of the sender\n    * @param _value the amount of money to burn\n    */\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value); // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]); // Check allowance\n        balanceOf[_from] -= _value; // Subtract from the targeted balance\n        allowance[_from][msg.sender] -= _value; // Subtract from the sender's allowance\n        totalSupply -= _value; // Update totalSupply\n        emit Burn(_from, _value);\n        return true;\n    }\n}\n\n/******************************************/\n/* LGX TOKEN STARTS HERE */\n/******************************************/\n\ncontract LGX is owned, ERC20_token {\n\n    uint256 public sellPrice;\n    uint256 public buyPrice;\n    address public AddressOfTeamTokenVault;\n    address public AddressOfMarketingTokenVault;\n    address public AddressOfAirdropTokenVault;\n    address public AddressOfBonusTokenVault;\n    address public AddressOfSellTokenVault;\n    \n    mapping (address => bool) public frozenAccount;\n    mapping (address => uint256) public frozenTime;\n    \n    /* This generates a public event on the blockchain that will notify clients */\n    event FrozenFunds(address target, bool frozen);\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    constructor(\n        uint256 initialSupply,\n        string memory tokenName,\n        string memory tokenSymbol,\n        address teamTokenVault,\n        address marketingTokenVault,\n        address airdropTokenVault,\n        address bonusTokenVault,\n        address sellTokenVault\n    ) ERC20_token(initialSupply, tokenName, tokenSymbol) public {\n        // This is for LiongateX team. 15% of totalSupply\n        AddressOfTeamTokenVault = teamTokenVault;\n        balanceOf[teamTokenVault] = totalSupply / 100 * 15;\n        \n        // This is for marketing. 10% of totalSupply\n        AddressOfMarketingTokenVault = marketingTokenVault;\n        balanceOf[marketingTokenVault] = totalSupply / 10;\n        \n        // This is for airdrop. 10% of totalSupply\n        AddressOfAirdropTokenVault = airdropTokenVault;\n        balanceOf[airdropTokenVault] = totalSupply / 10;\n        \n        // This is for bonus. 10% of totalSupply\n        AddressOfBonusTokenVault = bonusTokenVault;\n        balanceOf[bonusTokenVault] = totalSupply / 10;\n        \n        // This is for selling. 55% of totalSupply\n        AddressOfSellTokenVault = sellTokenVault;\n        balanceOf[sellTokenVault] = totalSupply / 100 * 55;\n    }\n    \n    /* Internal transfer, only can be called by this contract */\n    function _transfer(address _from, address _to, uint _value) internal {\n        require (_to != address(0x0)); // Prevent transfer to 0x0 address. Use burn() instead\n        require (balanceOf[_from] >= _value); // Check if the sender has enough\n        require (balanceOf[_to] + _value >= balanceOf[_to]); // Check for overflows\n        require(!frozenAccount[_from]); // Check if sender is frozen\n        require(!frozenAccount[_to]); // Check if recipient is frozen\n        balanceOf[_from] -= _value; // Subtract from the sender\n        balanceOf[_to] += _value; // Add the same to the recipient\n        emit Transfer(_from, _to, _value);\n    }\n    \n    /// @notice Create `mintedAmount` tokens and send it to `target`\n    /// @param target Address to receive the tokens\n    /// @param mintedAmount the amount of tokens it will receive\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n        balanceOf[target] += mintedAmount;\n        totalSupply += mintedAmount;\n        emit Transfer(address(0), address(this), mintedAmount);\n        emit Transfer(address(this), target, mintedAmount);\n    }\n    \n    /// @notice Prevent `target` from sending & receiving tokens\n    /// @param target Address to be frozen\n    function freezeAccount(address target) onlyOwner public {\n        frozenAccount[target] = true;\n        frozenTime[target] = now;\n        emit FrozenFunds(target, true);\n    }\n    \n    /// @notice Allow `target` from sending & receiving tokens\n    /// @param target Address to be frozen\n    function meltAccount(address target) onlyOwner public {\n        require(now > frozenTime[target] + 182 days);\n        frozenAccount[target] = false;\n        emit FrozenFunds(target, false);\n    }\n    \n    function LockTeamVault() onlyOwner public {\n        freezeAccount(AddressOfTeamTokenVault);\n    }\n    \n    function UnlockTeamVault() onlyOwner public {\n        meltAccount(AddressOfTeamTokenVault);\n    }\n    \n    /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\n    /// @param newSellPrice Price the users can sell to the contract\n    /// @param newBuyPrice Price users can buy from the contract\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n    \n    /// @notice Buy tokens from contract by sending ether\n    function buy() payable public {\n        uint amount = msg.value / buyPrice; // calculates the amount\n        _transfer(address(this), msg.sender, amount); // makes the transfers\n    }\n    \n    /// @notice Sell `amount` tokens to contract\n    /// @param amount amount of tokens to be sold\n    function sell(uint256 amount) public {\n        address myAddress = address(this);\n        require(myAddress.balance >= amount * sellPrice); // checks if the contract has enough ether to buy\n        _transfer(msg.sender, address(this), amount); // makes the transfers\n        msg.sender.transfer(amount * sellPrice); // sends ether to the seller. It's important to do this last to avoid recursion attacks\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AddressOfMarketingTokenVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AddressOfBonusTokenVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AddressOfSellTokenVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"meltAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AddressOfTeamTokenVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AddressOfAirdropTokenVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"LockTeamVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"UnlockTeamVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"teamTokenVault\",\"type\":\"address\"},{\"name\":\"marketingTokenVault\",\"type\":\"address\"},{\"name\":\"airdropTokenVault\",\"type\":\"address\"},{\"name\":\"bonusTokenVault\",\"type\":\"address\"},{\"name\":\"sellTokenVault\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]",
  "bytecode": "60806040526000600360006101000a81548160ff021916908360ff1602179055506402540be4006004553480156200003657600080fd5b50604051620024bd380380620024bd83398101806040526101008110156200005d57600080fd5b810190808051906020019092919080516401000000008111156200008057600080fd5b828101905060208101848111156200009757600080fd5b8151856001820283011164010000000082111715620000b557600080fd5b50509291906020018051640100000000811115620000d257600080fd5b82810190506020810184811115620000e957600080fd5b81518560018202830111640100000000821117156200010757600080fd5b50509291906020018051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190505050878787336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900460ff1660ff16600a0a83026004819055508160019080519060200190620001bd929190620004d2565b508060029080519060200190620001d6929190620004d2565b5050505084600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600f60646004548115156200022c57fe5b0402600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555083600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600a600454811515620002c157fe5b04600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555082600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600a6004548115156200035557fe5b04600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600a600454811515620003e957fe5b04600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550603760646004548115156200047f57fe5b0402600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050505050505062000581565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200051557805160ff191683800117855562000546565b8280016001018555821562000546579182015b828111156200054557825182559160200191906001019062000528565b5b50905062000555919062000559565b5090565b6200057e91905b808211156200057a57600081600090555060010162000560565b5090565b90565b611f2c80620005916000396000f3fe60806040526004361061017a576000357c01000000000000000000000000000000000000000000000000000000009004806305fefda71461017f578063060ac74c146101c457806306fdde031461021b578063095ea7b3146102ab57806315bf575f1461031e57806318160ddd1461037557806323b872dd146103a0578063313ce567146104335780633420428614610464578063386a74fc146104bb5780633c4a9d731461050c57806342966c681461056357806343792e5e146105b65780634b7503341461060d57806370a082311461063857806379c650681461069d57806379cc6790146106f85780638620410b1461076b5780638da5cb5b1461079657806395d89b41146107ed578063a6f2ae3a1461087d578063a9059cbb14610887578063b0623074146108fa578063b414d4b61461095f578063cae9ca51146109c8578063d1d1257a14610ad2578063dd62ed3e14610ae9578063e4849b3214610b6e578063e5c1fb9e14610ba9578063f26c159f14610bc0575b600080fd5b34801561018b57600080fd5b506101c2600480360360408110156101a257600080fd5b810190808035906020019092919080359060200190929190505050610c11565b005b3480156101d057600080fd5b506101d9610c7e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561022757600080fd5b50610230610ca4565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610270578082015181840152602081019050610255565b50505050905090810190601f16801561029d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102b757600080fd5b50610304600480360360408110156102ce57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d42565b604051808215151515815260200191505060405180910390f35b34801561032a57600080fd5b50610333610e34565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561038157600080fd5b5061038a610e5a565b6040518082815260200191505060405180910390f35b3480156103ac57600080fd5b50610419600480360360608110156103c357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e60565b604051808215151515815260200191505060405180910390f35b34801561043f57600080fd5b50610448610f8d565b604051808260ff1660ff16815260200191505060405180910390f35b34801561047057600080fd5b50610479610fa0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104c757600080fd5b5061050a600480360360208110156104de57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fc6565b005b34801561051857600080fd5b5061052161113e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561056f57600080fd5b5061059c6004803603602081101561058657600080fd5b8101908080359060200190929190505050611164565b604051808215151515815260200191505060405180910390f35b3480156105c257600080fd5b506105cb611268565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561061957600080fd5b5061062261128e565b6040518082815260200191505060405180910390f35b34801561064457600080fd5b506106876004803603602081101561065b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611294565b6040518082815260200191505060405180910390f35b3480156106a957600080fd5b506106f6600480360360408110156106c057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506112ac565b005b34801561070457600080fd5b506107516004803603604081101561071b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611433565b604051808215151515815260200191505060405180910390f35b34801561077757600080fd5b5061078061164d565b6040518082815260200191505060405180910390f35b3480156107a257600080fd5b506107ab611653565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107f957600080fd5b50610802611678565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610842578082015181840152602081019050610827565b50505050905090810190601f16801561086f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610885611716565b005b34801561089357600080fd5b506108e0600480360360408110156108aa57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611736565b604051808215151515815260200191505060405180910390f35b34801561090657600080fd5b506109496004803603602081101561091d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061174d565b6040518082815260200191505060405180910390f35b34801561096b57600080fd5b506109ae6004803603602081101561098257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611765565b604051808215151515815260200191505060405180910390f35b3480156109d457600080fd5b50610ab8600480360360608110156109eb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190640100000000811115610a3257600080fd5b820183602082011115610a4457600080fd5b80359060200191846001830284011164010000000083111715610a6657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611785565b604051808215151515815260200191505060405180910390f35b348015610ade57600080fd5b50610ae7611909565b005b348015610af557600080fd5b50610b5860048036036040811015610b0c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611991565b6040518082815260200191505060405180910390f35b348015610b7a57600080fd5b50610ba760048036036020811015610b9157600080fd5b81019080803590602001909291905050506119b6565b005b348015610bb557600080fd5b50610bbe611a3f565b005b348015610bcc57600080fd5b50610c0f60048036036020811015610be357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ac7565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c6c57600080fd5b81600781905550806008819055505050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d3a5780601f10610d0f57610100808354040283529160200191610d3a565b820191906000526020600020905b815481529060010190602001808311610d1d57829003601f168201915b505050505081565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b6000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610eed57600080fd5b81600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550610f82848484611c31565b600190509392505050565b600360009054906101000a900460ff1681565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561102157600080fd5b62eff100600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054014211151561107357600080fd5b6000600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a5816000604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a150565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156111b457600080fd5b81600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816004600082825403925050819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a260019050919050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60075481565b60056020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561130757600080fd5b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550806004600082825401925050819055503073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a38173ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561148357600080fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561150e57600080fd5b81600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816004600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a26001905092915050565b60085481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561170e5780601f106116e35761010080835404028352916020019161170e565b820191906000526020600020905b8154815290600101906020018083116116f157829003601f168201915b505050505081565b60006008543481151561172557fe5b049050611733303383611c31565b50565b6000611743338484611c31565b6001905092915050565b600f6020528060005260406000206000915090505481565b600e6020528060005260406000206000915054906101000a900460ff1681565b6000808490506117958585610d42565b15611900578073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561188f578082015181840152602081019050611874565b50505050905090810190601f1680156118bc5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156118de57600080fd5b505af11580156118f2573d6000803e3d6000fd5b505050506001915050611902565b505b9392505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561196457600080fd5b61198f600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611ac7565b565b6006602052816000526040600020602052806000526040600020600091509150505481565b600030905060075482028173ffffffffffffffffffffffffffffffffffffffff1631101515156119e557600080fd5b6119f0333084611c31565b3373ffffffffffffffffffffffffffffffffffffffff166108fc60075484029081150290604051600060405180830381858888f19350505050158015611a3a573d6000803e3d6000fd5b505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611a9a57600080fd5b611ac5600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610fc6565b565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b2257600080fd5b6001600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555042600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a5816001604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a150565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611c6d57600080fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515611cbb57600080fd5b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540110151515611d4a57600080fd5b600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515611da357600080fd5b600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515611dfc57600080fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350505056fea165627a7a72305820bf0105f608252741511c6dabf08cba201d1ffdb8a35dda78ae28d4cb6d25eb17002900000000000000000000000000000000000000000000000000000002540be40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000233d66428525d1621d131de48da68e6e85d31bb400000000000000000000000080c31ca8850960889bd1c5fd025acf13ed4c4d2c0000000000000000000000005ba40e936ee0f46e1362fd3ca456fc34a934dec3000000000000000000000000463355b456e9b0111fc7a5408523fe9b8c546f1d0000000000000000000000009c6de6ae744a25700b374a39e4864ea86dd242de00000000000000000000000000000000000000000000000000000000000000094c696f6e6761746558000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034c47580000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000002540be40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000233d66428525d1621d131de48da68e6e85d31bb400000000000000000000000080c31ca8850960889bd1c5fd025acf13ed4c4d2c0000000000000000000000005ba40e936ee0f46e1362fd3ca456fc34a934dec3000000000000000000000000463355b456e9b0111fc7a5408523fe9b8c546f1d0000000000000000000000009c6de6ae744a25700b374a39e4864ea86dd242de00000000000000000000000000000000000000000000000000000000000000094c696f6e6761746558000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034c47580000000000000000000000000000000000000000000000000000000000"
}