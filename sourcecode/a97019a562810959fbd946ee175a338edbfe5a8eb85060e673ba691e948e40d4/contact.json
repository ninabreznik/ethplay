{
  "address": "0x927A6BcC1967F5c913Bf19A6dc6D28450887dDf1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ImmutableEternalStorage",
  "compilerVersion": "v0.5.3+commit.10d17f24",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-07\n*/\n\npragma solidity 0.5.3;\n\n\n\n\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     * @notice Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\n/**\n * @title Secondary\n * @dev A Secondary contract can only be used by its primary account (the one that created it)\n */\ncontract OwnableSecondary is Ownable {\n  address private _primary;\n\n  event PrimaryTransferred(\n    address recipient\n  );\n\n  /**\n   * @dev Sets the primary account to the one that is creating the Secondary contract.\n   */\n  constructor() internal {\n    _primary = msg.sender;\n    emit PrimaryTransferred(_primary);\n  }\n\n  /**\n   * @dev Reverts if called from any account other than the primary or the owner.\n   */\n   modifier onlyPrimaryOrOwner() {\n     require(msg.sender == _primary || msg.sender == owner(), \"not the primary user nor the owner\");\n     _;\n   }\n\n   /**\n    * @dev Reverts if called from any account other than the primary.\n    */\n  modifier onlyPrimary() {\n    require(msg.sender == _primary, \"not the primary user\");\n    _;\n  }\n\n  /**\n   * @return the address of the primary.\n   */\n  function primary() public view returns (address) {\n    return _primary;\n  }\n\n  /**\n   * @dev Transfers contract to a new primary.\n   * @param recipient The address of new primary.\n   */\n  function transferPrimary(address recipient) public onlyOwner {\n    require(recipient != address(0), \"new primary address is null\");\n    _primary = recipient;\n    emit PrimaryTransferred(_primary);\n  }\n}\n\n\ncontract ImmutableEternalStorageInterface is OwnableSecondary {\n  /********************/\n  /** PUBLIC - WRITE **/\n  /********************/\n  function createUint(bytes32 key, uint value) external;\n\n  function createString(bytes32 key, string calldata value) external;\n\n  function createAddress(bytes32 key, address value) external;\n\n  function createBytes(bytes32 key, bytes calldata value) external;\n\n  function createBytes32(bytes32 key, bytes32 value) external;\n\n  function createBool(bytes32 key, bool value) external;\n\n  function createInt(bytes32 key, int value) external;\n\n  /*******************/\n  /** PUBLIC - READ **/\n  /*******************/\n  function getUint(bytes32 key) external view returns(uint);\n\n  function uintExists(bytes32 key) external view returns(bool);\n\n  function getString(bytes32 key) external view returns(string memory);\n\n  function stringExists(bytes32 key) external view returns(bool);\n\n  function getAddress(bytes32 key) external view returns(address);\n\n  function addressExists(bytes32 key) external view returns(bool);\n\n  function getBytes(bytes32 key) external view returns(bytes memory);\n\n  function bytesExists(bytes32 key) external view returns(bool);\n\n  function getBytes32(bytes32 key) external view returns(bytes32);\n\n  function bytes32Exists(bytes32 key) external view returns(bool);\n\n  function getBool(bytes32 key) external view returns(bool);\n\n  function boolExists(bytes32 key) external view returns(bool);\n\n  function getInt(bytes32 key) external view returns(int);\n\n  function intExists(bytes32 key) external view returns(bool);\n}\n\n\ncontract ImmutableEternalStorage is ImmutableEternalStorageInterface {\n    struct UintEntity {\n      uint value;\n      bool isEntity;\n    }\n    struct StringEntity {\n      string value;\n      bool isEntity;\n    }\n    struct AddressEntity {\n      address value;\n      bool isEntity;\n    }\n    struct BytesEntity {\n      bytes value;\n      bool isEntity;\n    }\n    struct Bytes32Entity {\n      bytes32 value;\n      bool isEntity;\n    }\n    struct BoolEntity {\n      bool value;\n      bool isEntity;\n    }\n    struct IntEntity {\n      int value;\n      bool isEntity;\n    }\n    mapping(bytes32 => UintEntity) private uIntStorage;\n    mapping(bytes32 => StringEntity) private stringStorage;\n    mapping(bytes32 => AddressEntity) private addressStorage;\n    mapping(bytes32 => BytesEntity) private bytesStorage;\n    mapping(bytes32 => Bytes32Entity) private bytes32Storage;\n    mapping(bytes32 => BoolEntity) private boolStorage;\n    mapping(bytes32 => IntEntity) private intStorage;\n\n    /********************/\n    /** PUBLIC - WRITE **/\n    /********************/\n    function createUint(bytes32 key, uint value) onlyPrimaryOrOwner external {\n        require(!uIntStorage[key].isEntity);\n\n        uIntStorage[key].value = value;\n        uIntStorage[key].isEntity = true;\n    }\n\n    function createString(bytes32 key, string calldata value) onlyPrimaryOrOwner external {\n        require(!stringStorage[key].isEntity);\n\n        stringStorage[key].value = value;\n        stringStorage[key].isEntity = true;\n    }\n\n    function createAddress(bytes32 key, address value) onlyPrimaryOrOwner external {\n        require(!addressStorage[key].isEntity);\n\n        addressStorage[key].value = value;\n        addressStorage[key].isEntity = true;\n    }\n\n    function createBytes(bytes32 key, bytes calldata value) onlyPrimaryOrOwner external {\n        require(!bytesStorage[key].isEntity);\n\n        bytesStorage[key].value = value;\n        bytesStorage[key].isEntity = true;\n    }\n\n    function createBytes32(bytes32 key, bytes32 value) onlyPrimaryOrOwner external {\n        require(!bytes32Storage[key].isEntity);\n\n        bytes32Storage[key].value = value;\n        bytes32Storage[key].isEntity = true;\n    }\n\n    function createBool(bytes32 key, bool value) onlyPrimaryOrOwner external {\n        require(!boolStorage[key].isEntity);\n\n        boolStorage[key].value = value;\n        boolStorage[key].isEntity = true;\n    }\n\n    function createInt(bytes32 key, int value) onlyPrimaryOrOwner external {\n        require(!intStorage[key].isEntity);\n\n        intStorage[key].value = value;\n        intStorage[key].isEntity = true;\n    }\n\n    /*******************/\n    /** PUBLIC - READ **/\n    /*******************/\n    function getUint(bytes32 key) external view returns(uint) {\n        return uIntStorage[key].value;\n    }\n\n    function uintExists(bytes32 key) external view returns(bool) {\n      return uIntStorage[key].isEntity;\n    }\n\n    function getString(bytes32 key) external view returns(string memory) {\n        return stringStorage[key].value;\n    }\n\n    function stringExists(bytes32 key) external view returns(bool) {\n      return stringStorage[key].isEntity;\n    }\n\n    function getAddress(bytes32 key) external view returns(address) {\n        return addressStorage[key].value;\n    }\n\n    function addressExists(bytes32 key) external view returns(bool) {\n      return addressStorage[key].isEntity;\n    }\n\n    function getBytes(bytes32 key) external view returns(bytes memory) {\n        return bytesStorage[key].value;\n    }\n\n    function bytesExists(bytes32 key) external view returns(bool) {\n      return bytesStorage[key].isEntity;\n    }\n\n    function getBytes32(bytes32 key) external view returns(bytes32) {\n        return bytes32Storage[key].value;\n    }\n\n    function bytes32Exists(bytes32 key) external view returns(bool) {\n      return bytes32Storage[key].isEntity;\n    }\n\n    function getBool(bytes32 key) external view returns(bool) {\n        return boolStorage[key].value;\n    }\n\n    function boolExists(bytes32 key) external view returns(bool) {\n      return boolStorage[key].isEntity;\n    }\n\n    function getInt(bytes32 key) external view returns(int) {\n        return intStorage[key].value;\n    }\n\n    function intExists(bytes32 key) external view returns(bool) {\n      return intStorage[key].isEntity;\n    }\n}",
  "bytecode": "6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a333600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f4101e71e974f68df5e9730cc223280b41654676bbb052cdcc735c3337e64d2d9600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1611d16806101956000396000f3fe608060405234801561001057600080fd5b50600436106101c6576000357c010000000000000000000000000000000000000000000000000000000090048063841ae51611610116578063c6dbdf61116100b4578063dc97d9621161008e578063dc97d962146108b8578063e4048049146108fa578063e916f45714610934578063f2fde38b146109b7576101c6565b8063c6dbdf61146107e2578063c827800d1461082c578063d8c4427314610872576101c6565b8063986e791a116100f0578063986e791a14610610578063a6ed563e146106b7578063bd02d0f5146106f9578063c031a1801461073b576101c6565b8063841ae5161461056c5780638da5cb5b146105a45780638f32d59b146105ee576101c6565b8063715018a6116101835780637ae1cfca1161015d5780637ae1cfca1461044c5780637af5d947146104925780637b2e0046146104d8578063822f0c3e14610526576101c6565b8063715018a61461038757806375a325631461039157806379ffb5c814610414576101c6565b806321f8a721146101cb5780632348238c14610239578063241208411461027d5780632cf88d13146102c3578063532b5f861461030957806362a14b2e14610341575b600080fd5b6101f7600480360360208110156101e157600080fd5b81019080803590602001909291905050506109fb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61027b6004803603602081101561024f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a3b565b005b6102a96004803603602081101561029357600080fd5b8101908080359060200190929190505050610bbc565b604051808215151515815260200191505060405180910390f35b6102ef600480360360208110156102d957600080fd5b8101908080359060200190929190505050610be9565b604051808215151515815260200191505060405180910390f35b61033f6004803603604081101561031f57600080fd5b810190808035906020019092919080359060200190929190505050610c16565b005b61036d6004803603602081101561035757600080fd5b8101908080359060200190929190505050610d79565b604051808215151515815260200191505060405180910390f35b61038f610da6565b005b610412600480360360408110156103a757600080fd5b8101908080359060200190929190803590602001906401000000008111156103ce57600080fd5b8201836020820111156103e057600080fd5b8035906020019184600183028401116401000000008311171561040257600080fd5b9091929391929390505050610e78565b005b61044a6004803603604081101561042a57600080fd5b810190808035906020019092919080359060200190929190505050610fe7565b005b6104786004803603602081101561046257600080fd5b810190808035906020019092919050505061114a565b604051808215151515815260200191505060405180910390f35b6104be600480360360208110156104a857600080fd5b8101908080359060200190929190505050611177565b604051808215151515815260200191505060405180910390f35b610524600480360360408110156104ee57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111a4565b005b6105526004803603602081101561053c57600080fd5b8101908080359060200190929190505050611341565b604051808215151515815260200191505060405180910390f35b6105a26004803603604081101561058257600080fd5b81019080803590602001909291908035906020019092919050505061136e565b005b6105ac6114d1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6105f66114fa565b604051808215151515815260200191505060405180910390f35b61063c6004803603602081101561062657600080fd5b8101908080359060200190929190505050611551565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561067c578082015181840152602081019050610661565b50505050905090810190601f1680156106a95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6106e3600480360360208110156106cd57600080fd5b8101908080359060200190929190505050611609565b6040518082815260200191505060405180910390f35b6107256004803603602081101561070f57600080fd5b8101908080359060200190929190505050611629565b6040518082815260200191505060405180910390f35b6107676004803603602081101561075157600080fd5b8101908080359060200190929190505050611649565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107a757808201518184015260208101905061078c565b50505050905090810190601f1680156107d45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6107ea611701565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6108586004803603602081101561084257600080fd5b810190808035906020019092919050505061172b565b604051808215151515815260200191505060405180910390f35b61089e6004803603602081101561088857600080fd5b8101908080359060200190929190505050611758565b604051808215151515815260200191505060405180910390f35b6108e4600480360360208110156108ce57600080fd5b8101908080359060200190929190505050611785565b6040518082815260200191505060405180910390f35b6109326004803603604081101561091057600080fd5b81019080803590602001909291908035151590602001909291905050506117a5565b005b6109b56004803603604081101561094a57600080fd5b81019080803590602001909291908035906020019064010000000081111561097157600080fd5b82018360208201111561098357600080fd5b803590602001918460018302840111640100000000831117156109a557600080fd5b909192939192939050505061191b565b005b6109f9600480360360208110156109cd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a8a565b005b60006004600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b610a436114fa565b1515610a4e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610af3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f6e6577207072696d6172792061646472657373206973206e756c6c000000000081525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f4101e71e974f68df5e9730cc223280b41654676bbb052cdcc735c3337e64d2d9600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b60006006600083815260200190815260200160002060010160009054906101000a900460ff169050919050565b60006004600083815260200190815260200160002060000160149054906101000a900460ff169050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610ca45750610c756114d1565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515610cfb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180611cc96022913960400191505060405180910390fd5b6006600083815260200190815260200160002060010160009054906101000a900460ff16151515610d2b57600080fd5b80600660008481526020019081526020016000206000018190555060016006600084815260200190815260200160002060010160006101000a81548160ff0219169083151502179055505050565b60006003600083815260200190815260200160002060010160009054906101000a900460ff169050919050565b610dae6114fa565b1515610db957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610f065750610ed76114d1565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515610f5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180611cc96022913960400191505060405180910390fd5b6005600084815260200190815260200160002060010160009054906101000a900460ff16151515610f8d57600080fd5b8181600560008681526020019081526020016000206000019190610fb2929190611ba3565b5060016005600085815260200190815260200160002060010160006101000a81548160ff021916908315150217905550505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061107557506110466114d1565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156110cc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180611cc96022913960400191505060405180910390fd5b6008600083815260200190815260200160002060010160009054906101000a900460ff161515156110fc57600080fd5b80600860008481526020019081526020016000206000018190555060016008600084815260200190815260200160002060010160006101000a81548160ff0219169083151502179055505050565b60006007600083815260200190815260200160002060000160009054906101000a900460ff169050919050565b60006007600083815260200190815260200160002060000160019054906101000a900460ff169050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061123257506112036114d1565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515611289576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180611cc96022913960400191505060405180910390fd5b6004600083815260200190815260200160002060000160149054906101000a900460ff161515156112b957600080fd5b806004600084815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016004600084815260200190815260200160002060000160146101000a81548160ff0219169083151502179055505050565b60006005600083815260200190815260200160002060010160009054906101000a900460ff169050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806113fc57506113cd6114d1565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515611453576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180611cc96022913960400191505060405180910390fd5b6002600083815260200190815260200160002060010160009054906101000a900460ff1615151561148357600080fd5b80600260008481526020019081526020016000206000018190555060016002600084815260200190815260200160002060010160006101000a81548160ff0219169083151502179055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b6060600360008381526020019081526020016000206000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115fd5780601f106115d2576101008083540402835291602001916115fd565b820191906000526020600020905b8154815290600101906020018083116115e057829003601f168201915b50505050509050919050565b600060066000838152602001908152602001600020600001549050919050565b600060026000838152602001908152602001600020600001549050919050565b6060600560008381526020019081526020016000206000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116f55780601f106116ca576101008083540402835291602001916116f5565b820191906000526020600020905b8154815290600101906020018083116116d857829003601f168201915b50505050509050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006002600083815260200190815260200160002060010160009054906101000a900460ff169050919050565b60006008600083815260200190815260200160002060010160009054906101000a900460ff169050919050565b600060086000838152602001908152602001600020600001549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061183357506118046114d1565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561188a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180611cc96022913960400191505060405180910390fd5b6007600083815260200190815260200160002060000160019054906101000a900460ff161515156118ba57600080fd5b806007600084815260200190815260200160002060000160006101000a81548160ff02191690831515021790555060016007600084815260200190815260200160002060000160016101000a81548160ff0219169083151502179055505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806119a9575061197a6114d1565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515611a00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180611cc96022913960400191505060405180910390fd5b6003600084815260200190815260200160002060010160009054906101000a900460ff16151515611a3057600080fd5b8181600360008681526020019081526020016000206000019190611a55929190611c23565b5060016003600085815260200190815260200160002060010160006101000a81548160ff021916908315150217905550505050565b611a926114fa565b1515611a9d57600080fd5b611aa681611aa9565b50565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611ae557600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611be457803560ff1916838001178555611c12565b82800160010185558215611c12579182015b82811115611c11578235825591602001919060010190611bf6565b5b509050611c1f9190611ca3565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611c6457803560ff1916838001178555611c92565b82800160010185558215611c92579182015b82811115611c91578235825591602001919060010190611c76565b5b509050611c9f9190611ca3565b5090565b611cc591905b80821115611cc1576000816000905550600101611ca9565b5090565b9056fe6e6f7420746865207072696d6172792075736572206e6f7220746865206f776e6572a165627a7a723058205b47d9e5c5860d03fde17aa298809ee98aae50d3bf1f7d4238a97c404f7cf13b0029"
}