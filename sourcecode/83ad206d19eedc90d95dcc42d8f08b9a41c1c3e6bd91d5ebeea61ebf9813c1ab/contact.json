{
  "address": "0x03a71d713cbcfcb27a4172117718e63f50f571a0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ITCMoney",
  "compilerVersion": "v0.5.6+commit.b259423e",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-25\n*/\n\npragma solidity ^0.5.6;\n \n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */ \nlibrary SafeMath{\n    function mul(uint a, uint b) internal pure returns (uint){\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n \n    function div(uint a, uint b) internal pure returns (uint){\n        uint c = a / b;\n        return c;\n    }\n \n    function sub(uint a, uint b) internal pure returns (uint){\n        assert(b <= a); \n        return a - b; \n    } \n  \n    function add(uint a, uint b) internal pure returns (uint){ \n        uint c = a + b; assert(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n \n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n \n    constructor() public{\n        owner = msg.sender;\n    }\n \n   /**\n    * @dev Throws if called by any account other than the owner.\n    */ \n   modifier onlyOwner(){\n        require(msg.sender == owner);\n        _;\n    }\n \n   /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param newOwner The address to transfer ownership to.\n    */ \n   function transferOwnership(address newOwner) onlyOwner public{\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\n/**\n * @title ITCMoney token\n * @dev ERC20 Token implementation, with mintable and its own specific\n */\ncontract ITCMoney is Ownable{\n    using SafeMath for uint;\n    \n    string public constant name = \"ITC Money\";\n    string public constant symbol = \"ITCM\";\n    uint32 public constant decimals = 18;\n    \n    address payable public companyAddr = address(0);\n    address public constant bonusAddr   = 0xaEA6949B27C44562Dd446c2C44f403cF6D13a2fD;\n    address public constant teamAddr    = 0xe0b70c54a1baa2847e210d019Bb8edc291AEA5c7;\n    address public constant sellerAddr  = 0x95E1f32981F909ce39d45bF52C9108f47e0FCc50;\n    \n    uint public totalSupply = 0;\n    uint public maxSupply = 17000000000 * 1 ether; // Maximum of tokens to be minted. 1 ether multiplier is decimal.\n    mapping(address => uint) balances;\n    mapping (address => mapping (address => uint)) internal allowed;\n    \n    bool public transferAllowed = false;\n    mapping(address => bool) internal customTransferAllowed;\n    \n    uint public tokenRate = 170 * 1 finney; // Start token rate * 10000 (0.017 CHF * 10000). 1 finney multiplier is for decimal.\n    uint private tokenRateDays = 0;\n    // growRate is the sequence of periods and percents of rate grow. First element is timestamp of period start. Second is grow percent * 10000.\n    uint[2][] private growRate = [\n        [1538784000, 100],\n        [1554422400,  19],\n        [1564617600,  17],\n        [1572566400,   0]\n    ];\n    \n    uint public rateETHCHF = 0;\n    mapping(address => uint) balancesCHF;\n    bool public amountBonusAllowed = true;\n    // amountBonus describes the token bonus that depends from CHF amount. First element is minimum accumulated CHF amount. Second one is bonus percent * 100.\n    uint[2][] private amountBonus = [\n        [uint32(2000),    500],\n        [uint32(8000),    700],\n        [uint32(17000),  1000],\n        [uint32(50000),  1500],\n        [uint32(100000), 1750],\n        [uint32(150000), 2000],\n        [uint32(500000), 2500]\n    ];\n    \n    // timeBonus describes the token bonus that depends from date. First element is the timestamp of start date. Second one is bonus percent * 100.\n    uint[2][] private timeBonus = [\n        [1535673600, 2000], // 2018-08-31\n        [1535760000, 1800], // 2018-09-01\n        [1538784000, 1500], // 2018-10-06\n        [1541462400, 1000], // 2018-11-06\n        [1544054400,  800], // 2018-12-06\n        [1546732800,  600], // 2019-01-06\n        [1549411200,  300], // 2019-02-06\n        [1551830400,  200]  // 2019-03-06\n    ];\n    uint private finalTimeBonusDate = 1554508800; // 2019-04-06. No bonus tokens after this date.\n    uint public constantBonus = 0;\n\n    event Transfer(address indexed from, address indexed to, uint value);\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event CompanyChanged(address indexed previousOwner, address indexed newOwner);\n    event TransfersAllowed();\n    event TransfersAllowedTo(address indexed to);\n    event CHFBonusStopped();\n    event AddedCHF(address indexed to, uint value);\n    event NewRateCHF(uint value);\n    event AddedGrowPeriod(uint startTime, uint rate);\n    event ConstantBonus(uint value);\n    event NewTokenRate(uint tokenRate);\n\n    /** \n     * @dev Gets the balance of the specified address.\n     * @param _owner The address to query the the balance of.\n     * @return An uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address _owner) public view returns (uint){\n        return balances[_owner];\n    }\n \n    /**\n     * @dev Transfer token for a specified address\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     */ \n    function transfer(address _to, uint _value) public returns (bool){\n        require(_to != address(0));\n        require(transferAllowed || _to == sellerAddr || customTransferAllowed[msg.sender]);\n        require(_value > 0 && _value <= balances[msg.sender]);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true; \n    } \n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */ \n    function transferFrom(address _from, address _to, uint _value) public returns (bool){\n        require(_to != address(0));\n        require(transferAllowed || _to == sellerAddr || customTransferAllowed[_from]);\n        require(_value > 0 && _value <= balances[_from] && _value <= allowed[_from][msg.sender]);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n \n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint _value) public returns (bool){\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n \n    /** \n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public view returns (uint){\n        return allowed[_owner][_spender]; \n    } \n \n    /**\n     * @dev Increase approved amount of tokents that could be spent on behalf of msg.sender.\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to be spent.\n     */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool){\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]); \n        return true; \n    }\n \n    /**\n     * @dev Decrease approved amount of tokents that could be spent on behalf of msg.sender.\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to be spent.\n     */\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool){\n        uint oldValue = allowed[msg.sender][_spender];\n        if(_subtractedValue > oldValue){\n            allowed[msg.sender][_spender] = 0;\n        }else{\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n    \n    /**\n     * @dev Function changes the company address. Ether moves to company address from contract.\n     * @param newCompany New company address.\n     */\n    function changeCompany(address payable newCompany) onlyOwner public{\n        require(newCompany != address(0));\n        emit CompanyChanged(companyAddr, newCompany);\n        companyAddr = newCompany;\n    }\n\n    /**\n     * @dev Allow ITCM token transfer for each address.\n     */\n    function allowTransfers() onlyOwner public{\n        transferAllowed = true;\n        emit TransfersAllowed();\n    }\n \n    /**\n     * @dev Allow ITCM token transfer for spcified address.\n     * @param _to Address to which token transfers become allowed.\n     */\n    function allowCustomTransfers(address _to) onlyOwner public{\n        customTransferAllowed[_to] = true;\n        emit TransfersAllowedTo(_to);\n    }\n    \n    /**\n     * @dev Stop adding token bonus that depends from accumulative CHF amount.\n     */\n    function stopCHFBonus() onlyOwner public{\n        amountBonusAllowed = false;\n        emit CHFBonusStopped();\n    }\n    \n    /**\n     * @dev Emit new tokens and transfer from 0 to client address. This function will generate tokens for bonus and team addresses.\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     */ \n    function _mint(address _to, uint _value) private returns (bool){\n        // 3% of token amount to bonus address\n        uint bonusAmount = _value.mul(3).div(87);\n        // 10% of token amount to team address\n        uint teamAmount = _value.mul(10).div(87);\n        // Restore the total token amount\n        uint total = _value.add(bonusAmount).add(teamAmount);\n        \n        require(total <= maxSupply);\n        \n        maxSupply = maxSupply.sub(total);\n        totalSupply = totalSupply.add(total);\n        \n        balances[_to] = balances[_to].add(_value);\n        balances[bonusAddr] = balances[bonusAddr].add(bonusAmount);\n        balances[teamAddr] = balances[teamAddr].add(teamAmount);\n\n        emit Transfer(address(0), _to, _value);\n        emit Transfer(address(0), bonusAddr, bonusAmount);\n        emit Transfer(address(0), teamAddr, teamAmount);\n\n        return true;\n    }\n\n    /**\n     * @dev This is wrapper for _mint.\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     */ \n    function mint(address _to, uint _value) onlyOwner public returns (bool){\n        return _mint(_to, _value);\n    }\n\n    /**\n     * @dev Similar to mint function but take array of addresses and values.\n     * @param _to The addresses to transfer to.\n     * @param _value The amounts to be transferred.\n     */ \n    function mint(address[] memory _to, uint[] memory _value) onlyOwner public returns (bool){\n        require(_to.length == _value.length);\n\n        uint len = _to.length;\n        for(uint i = 0; i < len; i++){\n            if(!_mint(_to[i], _value[i])){\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    /** \n     * @dev Gets the accumulative CHF balance of the specified address.\n     * @param _owner The address to query the the CHF balance of.\n     * @return An uint256 representing the amount owned by the passed address.\n     */\n    function balanceCHFOf(address _owner) public view returns (uint){\n        return balancesCHF[_owner];\n    }\n\n    /** \n     * @dev Increase CHF amount for address to which the tokens were minted.\n     * @param _to Target address.\n     * @param _value The amount of CHF.\n     */\n    function increaseCHF(address _to, uint _value) onlyOwner public{\n        balancesCHF[_to] = balancesCHF[_to].add(_value);\n        emit AddedCHF(_to, _value);\n    }\n\n    /** \n     * @dev Increase CHF amounts for addresses to which the tokens were minted.\n     * @param _to Target addresses.\n     * @param _value The amounts of CHF.\n     */\n    function increaseCHF(address[] memory _to, uint[] memory _value) onlyOwner public{\n        require(_to.length == _value.length);\n\n        uint len = _to.length;\n        for(uint i = 0; i < len; i++){\n            balancesCHF[_to[i]] = balancesCHF[_to[i]].add(_value[i]);\n            emit AddedCHF(_to[i], _value[i]);\n        }\n    }\n \n    /** \n     * @dev Sets the rate ETH to CHF that represents UINT (rate * 10000).\n     * @param _rate ETH CHF rate * 10000.\n     */\n    function setETHCHFRate(uint _rate) onlyOwner public{\n        rateETHCHF = _rate;\n        emit NewRateCHF(_rate);\n    }\n    \n    /** \n     * @dev Set new period and grow percent at the day.\n     * @param _startTime timestamp when the rate will start grow.\n     * @param _rate Grow percent * 10000.\n     */\n    function addNewGrowRate(uint _startTime, uint _rate) onlyOwner public{\n        growRate.push([_startTime, _rate]);\n        emit AddedGrowPeriod(_startTime, _rate);\n    }\n \n    /** \n     * @dev Set constant token bonus for each address that applies in fallback.\n     * @param _value Grow percent * 100.\n     */\n    function setConstantBonus(uint _value) onlyOwner public{\n        constantBonus = _value;\n        emit ConstantBonus(_value);\n    }\n\n    /** \n     * @dev Calculate and store current token rate.\n     *      The rate grows every day per percent that is shown in growRate starting from timestamp that was set for the rate.\n     */\n    function getTokenRate() public returns (uint){\n        uint startTokenRate = tokenRate;\n        uint totalDays = 0;\n        uint len = growRate.length;\n        // For each period from growRate\n        for(uint i = 0; i < len; i++){\n            if(now > growRate[i][0] && growRate[i][1] > 0){\n                // The final date is minimum from now and next period date\n                uint end = now;\n                if(i + 1 < len && end > growRate[i + 1][0]){\n                    end = growRate[i + 1][0];\n                }\n                uint dateDiff = (end - growRate[i][0]) / 1 days;\n                totalDays = totalDays + dateDiff;\n                // Check if the rate calculation required\n                if(dateDiff > 0 && totalDays > tokenRateDays){\n                    // Calculate and store the rate.\n                    // This is like rate * (100+percent)**days but memory safe.\n                    for(uint ii = tokenRateDays; ii < totalDays; ii++){\n                        tokenRate = tokenRate * (10000 + growRate[i][1]) / 10000;\n                    }\n                    tokenRateDays = totalDays;\n                }\n            }\n        }\n        if(startTokenRate != tokenRate){\n            emit NewTokenRate(tokenRate);\n        }\n        return tokenRate;\n    }\n    \n    /** \n     * @dev Function that receives the ether, transfers it to company address and mints tokens to address that initiates payment. Company, bonus and team addresses gets the tokens as well.\n     */\n    function () external payable {\n        // Revert if there are no basic parameters\n        require(msg.data.length == 0);\n        require(msg.value > 0);\n        require(rateETHCHF > 0);\n        \n        // Calculate token amount (amount of CHF / current rate). Remember that token rate is multiplied by 1 finney, add the same multiplier for ether amount.\n        uint amount = (msg.value * rateETHCHF * 1 finney) / getTokenRate();\n        // Calculate CHF amount analogue, then store it for customer.\n        uint amountCHF = (msg.value * rateETHCHF) / 10000 / 1 ether;\n        uint totalCHF = balancesCHF[msg.sender].add(amountCHF);\n        emit AddedCHF(msg.sender, amountCHF);\n\n        // Get the bonus percent that depends from time or its constant.\n        uint len = 0;\n        uint i = 0;\n        uint percent = 0;\n        uint bonus = 0;\n        if(constantBonus > 0){\n            bonus = amount.mul(constantBonus).div(10000);\n        }else if(now < finalTimeBonusDate){\n            len = timeBonus.length;\n            percent = 0;\n            for(i = 0; i < len; i++){\n                if(now >= timeBonus[i][0]){\n                    percent = timeBonus[i][1];\n                }else{\n                    break;\n                }\n            }\n            if(percent > 0){\n                bonus = amount.mul(percent).div(10000);\n            }\n        }\n\n        // Add the bonus that depends from accumulated CHF amount\n        if(amountBonusAllowed){\n            len = amountBonus.length;\n            percent = 0;\n            for(i = 0; i < len; i++){\n                if(totalCHF >= amountBonus[i][0]){\n                    percent = amountBonus[i][1];\n                }else{\n                    break;\n                }\n            }\n            if(percent > 0){\n                bonus = bonus.add(amount.mul(percent).div(10000));\n            }\n        }\n        \n        amount = amount.add(bonus);\n        \n        // 3% of token amount to bonus address\n        uint bonusAmount = amount.mul(3).div(87);\n        // 10% of token amount to team address\n        uint teamAmount = amount.mul(10).div(87);\n        // Restore the total token amount\n        uint total = amount.add(bonusAmount).add(teamAmount);\n        \n        require(total <= maxSupply);\n        \n        maxSupply = maxSupply.sub(total);\n        totalSupply = totalSupply.add(total);\n        \n        balances[msg.sender] = balances[msg.sender].add(amount);\n        balancesCHF[msg.sender] = totalCHF;\n        balances[bonusAddr] = balances[bonusAddr].add(bonusAmount);\n        balances[teamAddr] = balances[teamAddr].add(teamAmount);\n\n        companyAddr.transfer(msg.value);\n        \n        emit Transfer(address(0), msg.sender, amount);\n        emit Transfer(address(0), bonusAddr, bonusAmount);\n        emit Transfer(address(0), teamAddr, teamAmount);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"companyAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"allowCustomTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allowTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseCHF\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"increaseCHF\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getTokenRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceCHFOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountBonusAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCompany\",\"type\":\"address\"}],\"name\":\"changeCompany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"addNewGrowRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"constantBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setETHCHFRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setConstantBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellerAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateETHCHF\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopCHFBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"CompanyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TransfersAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TransfersAllowedTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CHFBonusStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AddedCHF\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NewRateCHF\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"AddedGrowPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ConstantBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenRate\",\"type\":\"uint256\"}],\"name\":\"NewTokenRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "600180546001600160a01b0319169055600060028190556b36ee12069cd8840b680000006003556006805460ff1916905567025bf6196bd100006008556009819055635bb7fb006101009081526064610120526080908152635ca69a8061014090815260136101605260a052635d422b8061018090815260116101a05260c052610200604052635dbb75806101c09081526101e09290925260e091909152620000ad90600a906004620002a9565b506000600b55600d805460ff1916600117905560408051610120810182526107d060e082018181526101f4610100840152825282518084018452611f4081526102bc602082810191909152808401919091528351808501855261426881526103e881830152838501528351808501855261c35081526105dc81830152606084015283518085018552620186a081526106d681830152608084015283518085018552620249f081528082019290925260a083019190915282518084019093526207a12083526109c49083015260c08101919091526200019090600e9060076200030a565b506040805161014081018252635b88850061010082019081526107d0610120830152815281518083018352635b89d68081526107086020828101919091528083019190915282518084018452635bb7fb0081526105dc818301528284015282518084018452635be0d98081526103e881830152606083015282518084018452635c086680815261032081830152608083015282518084018452635c31450081526102588183015260a083015282518084018452635c5a2380815261012c8183015260c08301528251808401909352635c7f0d80835260c89083015260e08101919091526200028390600f90600862000359565b50635ca7ec006010556000601181905580546001600160a01b0319163317905562000445565b828054828255906000526020600020906002028101928215620002f8579160200282015b82811115620002f8578251620002e79083906002620003a8565b5091602001919060020190620002cd565b5062000306929150620003ef565b5090565b828054828255906000526020600020906002028101928215620002f8579160200282015b82811115620002f8578251620003489083906002620003a8565b50916020019190600201906200032e565b828054828255906000526020600020906002028101928215620002f8579160200282015b82811115620002f8578251620003979083906002620003a8565b50916020019190600201906200037d565b8260028101928215620003e1579160200282015b82811115620003e1578251829063ffffffff16905591602001919060010190620003bc565b50620003069291506200041a565b6200041791905b80821115620003065760006200040d828262000437565b50600201620003f6565b90565b6200041791905b8082111562000306576000815560010162000421565b506000815560010160009055565b61202b80620004556000396000f3fe60806040526004361061020f5760003560e01c806358d4dc3811610118578063b1f1c97a116100a0578063d73dd6231161006f578063d73dd62314610d03578063d90e599114610d3c578063dd62ed3e14610d51578063e467f7e014610d8c578063f2fde38b14610ebc5761020f565b8063b1f1c97a14610c9a578063b3f4cc1314610cc4578063c1dcc69214610cd9578063d5abeb0114610cee5761020f565b806388f897aa116100e757806388f897aa14610bf85780638da5cb5b14610c0d57806395d89b4114610c225780639c5ad1fb14610c37578063a9059cbb14610c615761020f565b806358d4dc3814610b295780636618846314610b5c57806370a0823114610b955780638136e44714610bc85761020f565b8063304a9e831161019b5780633e2d70041161016a5780633e2d700414610a7e57806340c10f1914610a935780634a5ff74914610acc5780634c532fae14610ae157806351f3722614610b145761020f565b8063304a9e83146108f6578063313ce56714610a265780633171188414610a5457806334fec46714610a695761020f565b806314a1f372116101e257806314a1f3721461080957806318160ddd1461083e5780632185810b1461086557806323b872dd1461087a5780632d04f49a146108bd5761020f565b806302587586146106ec57806306fdde031461071d578063095ea7b3146107a757806313eaabb8146107f4575b361561021a57600080fd5b6000341161022757600080fd5b6000600b541161023657600080fd5b6000610240610eef565b600b54340266038d7ea4c68000028161025557fe5b0490506000670de0b6b3a7640000612710600b5434028161027257fe5b048161027a57fe5b336000908152600c6020526040812054929091049250906102a1908363ffffffff6110b316565b60408051848152905191925033917fb13603b88a7741013fd50cfc0bd86a46a1aa0aa5087bc24614d3e2c72f64b3d29181900360200190a260115460009081908190819015610318576103116127106103056011548a6110cb90919063ffffffff16565b9063ffffffff6110eb16565b90506103ba565b6010544210156103ba57600f549350600092508291505b8383101561039b57600f838154811061034457fe5b6000918252602082206002909102010154421061038b57600f838154811061036857fe5b906000526020600020906002020160016002811061038257fe5b01549150610390565b61039b565b60019092019161032f565b81156103ba576103b7612710610305898563ffffffff6110cb16565b90505b600d5460ff161561046d57600e549350600092508291505b8383101561043e57600e83815481106103e757fe5b6000918252602082206002909102010154851061042e57600e838154811061040b57fe5b906000526020600020906002020160016002811061042557fe5b01549150610433565b61043e565b6001909201916103d2565b811561046d5761046a61045d6127106103058a8663ffffffff6110cb16565b829063ffffffff6110b316565b90505b61047d878263ffffffff6110b316565b9650600061049760576103058a600363ffffffff6110cb16565b905060006104b160576103058b600a63ffffffff6110cb16565b905060006104d5826104c98c8663ffffffff6110b316565b9063ffffffff6110b316565b90506003548111156104e657600080fd5b6003546104f9908263ffffffff61110016565b60035560025461050f908263ffffffff6110b316565b60025533600090815260046020526040902054610532908b63ffffffff6110b316565b33600090815260046020818152604080842094909455600c81529282208b905573aea6949b27c44562dd446c2c44f403cf6d13a2fd9091529052600080516020611fa08339815191525461058c908463ffffffff6110b316565b6004602052600080516020611fa08339815191525573e0b70c54a1baa2847e210d019bb8edc291aea5c7600052600080516020611fc0833981519152546105d9908363ffffffff6110b316565b73e0b70c54a1baa2847e210d019bb8edc291aea5c760009081526004602052600080516020611fc0833981519152919091556001546040516001600160a01b0391909116913480156108fc02929091818181858888f19350505050158015610645573d6000803e3d6000fd5b50604080518b815290513391600091600080516020611fe08339815191529181900360200190a360408051848152905173aea6949b27c44562dd446c2c44f403cf6d13a2fd91600091600080516020611fe08339815191529181900360200190a360408051838152905173e0b70c54a1baa2847e210d019bb8edc291aea5c791600091600080516020611fe08339815191529181900360200190a350505050505050505050005b3480156106f857600080fd5b50610701611112565b604080516001600160a01b039092168252519081900360200190f35b34801561072957600080fd5b50610732611121565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561076c578181015183820152602001610754565b50505050905090810190601f1680156107995780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156107b357600080fd5b506107e0600480360360408110156107ca57600080fd5b506001600160a01b038135169060200135611149565b604080519115158252519081900360200190f35b34801561080057600080fd5b506107016111af565b34801561081557600080fd5b5061083c6004803603602081101561082c57600080fd5b50356001600160a01b03166111c7565b005b34801561084a57600080fd5b5061085361122a565b60408051918252519081900360200190f35b34801561087157600080fd5b5061083c611230565b34801561088657600080fd5b506107e06004803603606081101561089d57600080fd5b506001600160a01b0381358116916020810135909116906040013561127f565b3480156108c957600080fd5b5061083c600480360360408110156108e057600080fd5b506001600160a01b038135169060200135611448565b34801561090257600080fd5b5061083c6004803603604081101561091957600080fd5b810190602081018135600160201b81111561093357600080fd5b82018360208201111561094557600080fd5b803590602001918460208302840111600160201b8311171561096657600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156109b557600080fd5b8201836020820111156109c757600080fd5b803590602001918460208302840111600160201b831117156109e857600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506114de945050505050565b348015610a3257600080fd5b50610a3b61161f565b6040805163ffffffff9092168252519081900360200190f35b348015610a6057600080fd5b50610853611624565b348015610a7557600080fd5b506107e061162a565b348015610a8a57600080fd5b50610853610eef565b348015610a9f57600080fd5b506107e060048036036040811015610ab657600080fd5b506001600160a01b038135169060200135611633565b348015610ad857600080fd5b50610701611655565b348015610aed57600080fd5b5061085360048036036020811015610b0457600080fd5b50356001600160a01b031661166d565b348015610b2057600080fd5b506107e0611688565b348015610b3557600080fd5b5061083c60048036036020811015610b4c57600080fd5b50356001600160a01b0316611691565b348015610b6857600080fd5b506107e060048036036040811015610b7f57600080fd5b506001600160a01b038135169060200135611717565b348015610ba157600080fd5b5061085360048036036020811015610bb857600080fd5b50356001600160a01b0316611807565b348015610bd457600080fd5b5061083c60048036036040811015610beb57600080fd5b5080359060200135611822565b348015610c0457600080fd5b506108536118d3565b348015610c1957600080fd5b506107016118d9565b348015610c2e57600080fd5b506107326118e8565b348015610c4357600080fd5b5061083c60048036036020811015610c5a57600080fd5b503561190b565b348015610c6d57600080fd5b506107e060048036036040811015610c8457600080fd5b506001600160a01b03813516906020013561195d565b348015610ca657600080fd5b5061083c60048036036020811015610cbd57600080fd5b5035611a88565b348015610cd057600080fd5b50610701611ada565b348015610ce557600080fd5b50610853611af2565b348015610cfa57600080fd5b50610853611af8565b348015610d0f57600080fd5b506107e060048036036040811015610d2657600080fd5b506001600160a01b038135169060200135611afe565b348015610d4857600080fd5b5061083c611b97565b348015610d5d57600080fd5b5061085360048036036040811015610d7457600080fd5b506001600160a01b0381358116916020013516611be3565b348015610d9857600080fd5b506107e060048036036040811015610daf57600080fd5b810190602081018135600160201b811115610dc957600080fd5b820183602082011115610ddb57600080fd5b803590602001918460208302840111600160201b83111715610dfc57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b811115610e4b57600080fd5b820183602082011115610e5d57600080fd5b803590602001918460208302840111600160201b83111715610e7e57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611c0e945050505050565b348015610ec857600080fd5b5061083c60048036036020811015610edf57600080fd5b50356001600160a01b0316611c93565b600854600a54600091908290815b8181101561106757600a8181548110610f1257fe5b600091825260208220600290910201015442118015610f5957506000600a8281548110610f3b57fe5b9060005260206000209060020201600160028110610f5557fe5b0154115b1561105f57426001820183118015610f905750600a8260010181548110610f7c57fe5b600091825260208220600290910201015481115b15610fb957600a8260010181548110610fa557fe5b600091825260208220600290910201015490505b600062015180600a8481548110610fcc57fe5b6000918252602082206002909102010154830381610fe657fe5b049485019490508015801590610ffd575060095485115b1561105c576009545b8581101561105557612710600a858154811061101e57fe5b906000526020600020906002020160016002811061103857fe5b015461271001600854028161104957fe5b04600855600101611006565b5060098590555b50505b600101610efd565b5060085483146110a75760085460408051918252517ffa9de1ba14d189f0138660955df35b077db38ecf28d34707cff4892bae0f52659181900360200190a15b60085493505050505b90565b6000828201838110156110c257fe5b90505b92915050565b60008282028315806110e55750828482816110e257fe5b04145b6110c257fe5b6000808284816110f757fe5b04949350505050565b60008282111561110c57fe5b50900390565b6001546001600160a01b031681565b604051806040016040528060098152602001600160b81b68495443204d6f6e65790281525081565b3360008181526005602090815260408083206001600160a01b038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b73aea6949b27c44562dd446c2c44f403cf6d13a2fd81565b6000546001600160a01b031633146111de57600080fd5b6001600160a01b038116600081815260076020526040808220805460ff19166001179055517f9c84f60ee9d9850acaa79554147eda7d56d6401cdae833bb64fe09f18878eb629190a250565b60025481565b6000546001600160a01b0316331461124757600080fd5b6006805460ff191660011790556040517f2db8a095b698dea1e350f87ea8a3715a27054d8804d208742273b0cf28ba075390600090a1565b60006001600160a01b03831661129457600080fd5b60065460ff16806112c157506001600160a01b0383167395e1f32981f909ce39d45bf52c9108f47e0fcc50145b806112e457506001600160a01b03841660009081526007602052604090205460ff165b6112ed57600080fd5b60008211801561131557506001600160a01b0384166000908152600460205260409020548211155b801561134457506001600160a01b03841660009081526005602090815260408083203384529091529020548211155b61134d57600080fd5b6001600160a01b038416600090815260046020526040902054611376908363ffffffff61110016565b6001600160a01b0380861660009081526004602052604080822093909355908516815220546113ab908363ffffffff6110b316565b6001600160a01b0380851660009081526004602090815260408083209490945591871681526005825282812033825290915220546113ef908363ffffffff61110016565b6001600160a01b0380861660008181526005602090815260408083203384528252918290209490945580518681529051928716939192600080516020611fe0833981519152929181900390910190a35060019392505050565b6000546001600160a01b0316331461145f57600080fd5b6001600160a01b0382166000908152600c6020526040902054611488908263ffffffff6110b316565b6001600160a01b0383166000818152600c6020908152604091829020939093558051848152905191927fb13603b88a7741013fd50cfc0bd86a46a1aa0aa5087bc24614d3e2c72f64b3d292918290030190a25050565b6000546001600160a01b031633146114f557600080fd5b805182511461150357600080fd5b815160005b818110156116195761156e83828151811061151f57fe5b6020026020010151600c600087858151811061153757fe5b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020546110b390919063ffffffff16565b600c600086848151811061157e57fe5b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055508381815181106115b657fe5b60200260200101516001600160a01b03167fb13603b88a7741013fd50cfc0bd86a46a1aa0aa5087bc24614d3e2c72f64b3d28483815181106115f457fe5b60200260200101516040518082815260200191505060405180910390a2600101611508565b50505050565b601281565b60085481565b60065460ff1681565b600080546001600160a01b0316331461164b57600080fd5b6110c28383611d18565b73e0b70c54a1baa2847e210d019bb8edc291aea5c781565b6001600160a01b03166000908152600c602052604090205490565b600d5460ff1681565b6000546001600160a01b031633146116a857600080fd5b6001600160a01b0381166116bb57600080fd5b6001546040516001600160a01b038084169216907f3accfe9b47a9d274494578cc0a299bb7da397b976b593071d0094c90e702a26b90600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b3360009081526005602090815260408083206001600160a01b03861684529091528120548083111561176c573360009081526005602090815260408083206001600160a01b03881684529091528120556117a1565b61177c818463ffffffff61110016565b3360009081526005602090815260408083206001600160a01b03891684529091529020555b3360008181526005602090815260408083206001600160a01b0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b6001600160a01b031660009081526004602052604090205490565b6000546001600160a01b0316331461183957600080fd5b6040805180820190915282815260208101829052600a80546001810180835560009290925290916118929160029081027fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8019190611f47565b5050604080518381526020810183905281517f72578563363f6337f56d43bcedac263bba87a1e36e78da4e988c2b3787aca992929181900390910190a15050565b60115481565b6000546001600160a01b031681565b604051806040016040528060048152602001600160e01b634954434d0281525081565b6000546001600160a01b0316331461192257600080fd5b600b8190556040805182815290517feb67c3c05cb1eb5a94ba86cc9cad7e6e69e3aaf205516651dae996f4210f3bb09181900360200190a150565b60006001600160a01b03831661197257600080fd5b60065460ff168061199f57506001600160a01b0383167395e1f32981f909ce39d45bf52c9108f47e0fcc50145b806119b957503360009081526007602052604090205460ff165b6119c257600080fd5b6000821180156119e15750336000908152600460205260409020548211155b6119ea57600080fd5b33600090815260046020526040902054611a0a908363ffffffff61110016565b33600090815260046020526040808220929092556001600160a01b03851681522054611a3c908363ffffffff6110b316565b6001600160a01b038416600081815260046020908152604091829020939093558051858152905191923392600080516020611fe08339815191529281900390910190a350600192915050565b6000546001600160a01b03163314611a9f57600080fd5b60118190556040805182815290517f964d6e2fe637bdd30b6c4595fa5e3761acdbca110fe0f47d5e0dff5cb5053b5e9181900360200190a150565b7395e1f32981f909ce39d45bf52c9108f47e0fcc5081565b600b5481565b60035481565b3360009081526005602090815260408083206001600160a01b0386168452909152812054611b32908363ffffffff6110b316565b3360008181526005602090815260408083206001600160a01b0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b6000546001600160a01b03163314611bae57600080fd5b600d805460ff191690556040517f64a368572cb2d5bf0fcbd90d4829d7be331b76ee4969c1446ddc750c83b0ab9b90600090a1565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205490565b600080546001600160a01b03163314611c2657600080fd5b8151835114611c3457600080fd5b825160005b81811015611c8857611c71858281518110611c5057fe5b6020026020010151858381518110611c6457fe5b6020026020010151611d18565b611c80576000925050506110c5565b600101611c39565b506001949350505050565b6000546001600160a01b03163314611caa57600080fd5b6001600160a01b038116611cbd57600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600080611d31605761030585600363ffffffff6110cb16565b90506000611d4b605761030586600a63ffffffff6110cb16565b90506000611d63826104c9878663ffffffff6110b316565b9050600354811115611d7457600080fd5b600354611d87908263ffffffff61110016565b600355600254611d9d908263ffffffff6110b316565b6002556001600160a01b038616600090815260046020526040902054611dc9908663ffffffff6110b316565b6001600160a01b03871660009081526004602052604081209190915573aea6949b27c44562dd446c2c44f403cf6d13a2fd9052600080516020611fa083398151915254611e1c908463ffffffff6110b316565b6004602052600080516020611fa08339815191525573e0b70c54a1baa2847e210d019bb8edc291aea5c7600052600080516020611fc083398151915254611e69908363ffffffff6110b316565b73e0b70c54a1baa2847e210d019bb8edc291aea5c7600090815260046020908152600080516020611fc0833981519152929092556040805188815290516001600160a01b038a1693600080516020611fe0833981519152928290030190a360408051848152905173aea6949b27c44562dd446c2c44f403cf6d13a2fd91600091600080516020611fe08339815191529181900360200190a360408051838152905173e0b70c54a1baa2847e210d019bb8edc291aea5c791600091600080516020611fe08339815191529181900360200190a350600195945050505050565b8260028101928215611f75579160200282015b82811115611f75578251825591602001919060010190611f5a565b50611f81929150611f85565b5090565b6110b091905b80821115611f815760008155600101611f8b56febafc3a22b2a615eb30566c6e9ad1398f3ed52c3bceb68b5695d6df6204bd68372ff638136fdfcd0b8008a879fe2014e36ae221bc3b560d6961d55598777292ddddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058203f4c8f6f059dfb00e11c420964d82d55346b4a9af633ab0a4a65c8b03bf25bab0029"
}