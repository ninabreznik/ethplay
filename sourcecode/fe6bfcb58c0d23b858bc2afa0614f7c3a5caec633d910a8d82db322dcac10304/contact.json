{
  "address": "0x2c84f5e114e76b0858f9281ed0ad8e6791d6c432",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenController",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-05\n*/\n\npragma solidity ^0.5.1;\n\ncontract LockRequestable {\n\n        // MEMBERS\n        /// @notice  the count of all invocations of `generateLockId`.\n        uint256 public lockRequestCount;\n\n        constructor() public {\n                lockRequestCount = 0;\n        }\n\n        // FUNCTIONS\n        /** @notice  Returns a fresh unique identifier.\n            *\n            * @dev the generation scheme uses three components.\n            * First, the blockhash of the previous block.\n            * Second, the deployed address.\n            * Third, the next value of the counter.\n            * This ensure that identifiers are unique across all contracts\n            * following this scheme, and that future identifiers are\n            * unpredictable.\n            *\n            * @return a 32-byte unique identifier.\n            */\n        function generateLockId() internal returns (bytes32 lockId) {\n                return keccak256(\n                abi.encodePacked(blockhash(block.number - 1), address(this), ++lockRequestCount)\n                );\n        }\n}\n\ncontract CustodianUpgradeable is LockRequestable {\n\n        // TYPES\n        /// @dev  The struct type for pending custodian changes.\n        struct CustodianChangeRequest {\n                address proposedNew;\n        }\n\n        // MEMBERS\n        /// @dev  The address of the account or contract that acts as the custodian.\n        address public custodian;\n\n        /// @dev  The map of lock ids to pending custodian changes.\n        mapping (bytes32 => CustodianChangeRequest) public custodianChangeReqs;\n\n        constructor(address _custodian) public LockRequestable() {\n                custodian = _custodian;\n        }\n\n        // MODIFIERS\n        modifier onlyCustodian {\n                require(msg.sender == custodian);\n                _;\n        }\n\n        /** @notice  Requests a change of the custodian associated with this contract.\n            *\n            * @dev  Returns a unique lock id associated with the request.\n            * Anyone can call this function, but confirming the request is authorized\n            * by the custodian.\n            *\n            * @param  _proposedCustodian  The address of the new custodian.\n            * @return  lockId  A unique identifier for this request.\n            */\n        function requestCustodianChange(address _proposedCustodian) public returns (bytes32 lockId) {\n                require(_proposedCustodian != address(0));\n\n                lockId = generateLockId();\n\n                custodianChangeReqs[lockId] = CustodianChangeRequest({\n                        proposedNew: _proposedCustodian\n                });\n\n                emit CustodianChangeRequested(lockId, msg.sender, _proposedCustodian);\n        }\n\n        /** @notice  Confirms a pending change of the custodian associated with this contract.\n            *\n            * @dev  When called by the current custodian with a lock id associated with a\n            * pending custodian change, the `address custodian` member will be updated with the\n            * requested address.\n            *\n            * @param  _lockId  The identifier of a pending change request.\n            */\n        function confirmCustodianChange(bytes32 _lockId) public onlyCustodian {\n                custodian = getCustodianChangeReq(_lockId);\n\n                delete custodianChangeReqs[_lockId];\n\n                emit CustodianChangeConfirmed(_lockId, custodian);\n        }\n\n        // PRIVATE FUNCTIONS\n        function getCustodianChangeReq(bytes32 _lockId) private view returns (address _proposedNew) {\n                CustodianChangeRequest storage changeRequest = custodianChangeReqs[_lockId];\n\n                // reject ‘null’ results from the map lookup\n                // this can only be the case if an unknown `_lockId` is received\n                require(changeRequest.proposedNew != address(0));\n\n                return changeRequest.proposedNew;\n        }\n\n        /// @dev  Emitted by successful `requestCustodianChange` calls.\n        event CustodianChangeRequested(\n                bytes32 _lockId,\n                address _msgSender,\n                address _proposedCustodian\n        );\n\n        /// @dev Emitted by successful `confirmCustodianChange` calls.\n        event CustodianChangeConfirmed(bytes32 _lockId, address _newCustodian);\n}\n\ninterface ServiceRegistry {\n    function getService(string calldata _name) external view returns (address);\n}\n\ncontract ServiceDiscovery {\n    ServiceRegistry internal services;\n\n    constructor(ServiceRegistry _services) public {\n        services = ServiceRegistry(_services);\n    }\n}\n\ncontract KnowYourCustomer is CustodianUpgradeable {\n\n    enum Status {\n        none,\n        passed,\n        suspended\n    }\n\n    struct Customer {\n        Status status;\n        mapping(string => string) fields;\n    }\n    \n    event ProviderAuthorized(address indexed _provider, string _name);\n    event ProviderRemoved(address indexed _provider, string _name);\n    event CustomerApproved(address indexed _customer, address indexed _provider);\n    event CustomerSuspended(address indexed _customer, address indexed _provider);\n    event CustomerFieldSet(address indexed _customer, address indexed _field, string _name);\n\n    mapping(address => bool) private providers;\n    mapping(address => Customer) private customers;\n\n    constructor(address _custodian) public CustodianUpgradeable(_custodian) {\n        customers[_custodian].status = Status.passed;\n        customers[_custodian].fields[\"type\"] = \"custodian\";\n        emit CustomerApproved(_custodian, msg.sender);\n        emit CustomerFieldSet(_custodian, msg.sender, \"type\");\n    }\n\n    function providerAuthorize(address _provider, string calldata name) external onlyCustodian {\n        require(providers[_provider] == false, \"provider must not exist\");\n        providers[_provider] = true;\n        // cc:II. Manage Providers#2;Provider becomes authorized in contract;1;\n        emit ProviderAuthorized(_provider, name);\n    }\n\n    function providerRemove(address _provider, string calldata name) external onlyCustodian {\n        require(providers[_provider] == true, \"provider must exist\");\n        delete providers[_provider];\n        emit ProviderRemoved(_provider, name);\n    }\n\n    function hasWritePermissions(address _provider) external view returns (bool) {\n        return _provider == custodian || providers[_provider] == true;\n    }\n\n    function getCustomerStatus(address _customer) external view returns (Status) {\n        return customers[_customer].status;\n    }\n\n    function getCustomerField(address _customer, string calldata _field) external view returns (string memory) {\n        return customers[_customer].fields[_field];\n    }\n\n    function approveCustomer(address _customer) external onlyAuthorized {\n        Status status = customers[_customer].status;\n        require(status != Status.passed, \"customer must not be approved before\");\n        customers[_customer].status = Status.passed;\n        // cc:III. Manage Customers#2;Customer becomes approved in contract;1;\n        emit CustomerApproved(_customer, msg.sender);\n    }\n\n    function setCustomerField(address _customer, string calldata _field, string calldata _value) external onlyAuthorized {\n        Status status = customers[_customer].status;\n        require(status != Status.none, \"customer must have a set status\");\n        customers[_customer].fields[_field] = _value;\n        emit CustomerFieldSet(_customer, msg.sender, _field);\n    }\n\n    function suspendCustomer(address _customer) external onlyAuthorized {\n        Status status = customers[_customer].status;\n        require(status != Status.suspended, \"customer must be not suspended\");\n        customers[_customer].status = Status.suspended;\n        emit CustomerSuspended(_customer, msg.sender);\n    }\n\n    modifier onlyAuthorized() {\n        require(msg.sender == custodian || providers[msg.sender] == true);\n        _;\n    }\n}\n\ncontract TokenSettingsInterface {\n\n    // METHODS\n    function getTradeAllowed() public view returns (bool);\n    function getMintAllowed() public view returns (bool);\n    function getBurnAllowed() public view returns (bool);\n    \n    // EVENTS\n    event TradeAllowedLocked(bytes32 _lockId, bool _newValue);\n    event TradeAllowedConfirmed(bytes32 _lockId, bool _newValue);\n    event MintAllowedLocked(bytes32 _lockId, bool _newValue);\n    event MintAllowedConfirmed(bytes32 _lockId, bool _newValue);\n    event BurnAllowedLocked(bytes32 _lockId, bool _newValue);\n    event BurnAllowedConfirmed(bytes32 _lockId, bool _newValue);\n\n    // MODIFIERS\n    modifier onlyCustodian {\n        _;\n    }\n}\n\n\ncontract _BurnAllowed is TokenSettingsInterface, LockRequestable {\n    // cc:IV. BurnAllowed Setting#2;Burn Allowed Switch;1;\n    //\n    // SETTING: Burn Allowed Switch (bool)\n    // Boundary: true or false\n    //\n    // Enables or disables token minting ability globally (even for custodian).\n    //\n    bool private burnAllowed = false;\n\n    function getBurnAllowed() public view returns (bool) {\n        return burnAllowed;\n    }\n\n    // SETTING MANAGEMENT\n\n    struct PendingBurnAllowed {\n        bool burnAllowed;\n        bool set;\n    }\n\n    mapping (bytes32 => PendingBurnAllowed) public pendingBurnAllowedMap;\n\n    function requestBurnAllowedChange(bool _burnAllowed) public returns (bytes32 lockId) {\n       require(_burnAllowed != burnAllowed);\n       \n       lockId = generateLockId();\n       pendingBurnAllowedMap[lockId] = PendingBurnAllowed({\n           burnAllowed: _burnAllowed,\n           set: true\n       });\n\n       emit BurnAllowedLocked(lockId, _burnAllowed);\n    }\n\n    function confirmBurnAllowedChange(bytes32 _lockId) public onlyCustodian {\n        PendingBurnAllowed storage value = pendingBurnAllowedMap[_lockId];\n        require(value.set == true);\n        burnAllowed = value.burnAllowed;\n        emit BurnAllowedConfirmed(_lockId, value.burnAllowed);\n        delete pendingBurnAllowedMap[_lockId];\n    }\n}\n\n\ncontract _MintAllowed is TokenSettingsInterface, LockRequestable {\n    // cc:III. MintAllowed Setting#2;Mint Allowed Switch;1;\n    //\n    // SETTING: Mint Allowed Switch (bool)\n    // Boundary: true or false\n    //\n    // Enables or disables token minting ability globally (even for custodian).\n    //\n    bool private mintAllowed = false;\n\n    function getMintAllowed() public view returns (bool) {\n        return mintAllowed;\n    }\n\n    // SETTING MANAGEMENT\n\n    struct PendingMintAllowed {\n        bool mintAllowed;\n        bool set;\n    }\n\n    mapping (bytes32 => PendingMintAllowed) public pendingMintAllowedMap;\n\n    function requestMintAllowedChange(bool _mintAllowed) public returns (bytes32 lockId) {\n       require(_mintAllowed != mintAllowed);\n       \n       lockId = generateLockId();\n       pendingMintAllowedMap[lockId] = PendingMintAllowed({\n           mintAllowed: _mintAllowed,\n           set: true\n       });\n\n       emit MintAllowedLocked(lockId, _mintAllowed);\n    }\n\n    function confirmMintAllowedChange(bytes32 _lockId) public onlyCustodian {\n        PendingMintAllowed storage value = pendingMintAllowedMap[_lockId];\n        require(value.set == true);\n        mintAllowed = value.mintAllowed;\n        emit MintAllowedConfirmed(_lockId, value.mintAllowed);\n        delete pendingMintAllowedMap[_lockId];\n    }\n}\n\n\ncontract _TradeAllowed is TokenSettingsInterface, LockRequestable {\n    // cc:II. TradeAllowed Setting#2;Trade Allowed Switch;1;\n    //\n    // SETTING: Trade Allowed Switch (bool)\n    // Boundary: true or false\n    //\n    // Enables or disables all token transfers, between any recipients, except mint and burn operations.\n    //\n    bool private tradeAllowed = false;\n\n    function getTradeAllowed() public view returns (bool) {\n        return tradeAllowed;\n    }\n\n    // SETTING MANAGEMENT\n\n    struct PendingTradeAllowed {\n        bool tradeAllowed;\n        bool set;\n    }\n\n    mapping (bytes32 => PendingTradeAllowed) public pendingTradeAllowedMap;\n\n    function requestTradeAllowedChange(bool _tradeAllowed) public returns (bytes32 lockId) {\n       require(_tradeAllowed != tradeAllowed);\n       \n       lockId = generateLockId();\n       pendingTradeAllowedMap[lockId] = PendingTradeAllowed({\n           tradeAllowed: _tradeAllowed,\n           set: true\n       });\n\n       emit TradeAllowedLocked(lockId, _tradeAllowed);\n    }\n\n    function confirmTradeAllowedChange(bytes32 _lockId) public onlyCustodian {\n        PendingTradeAllowed storage value = pendingTradeAllowedMap[_lockId];\n        require(value.set == true);\n        tradeAllowed = value.tradeAllowed;\n        emit TradeAllowedConfirmed(_lockId, value.tradeAllowed);\n        delete pendingTradeAllowedMap[_lockId];\n    }\n}\n\ncontract TokenSettings is TokenSettingsInterface, CustodianUpgradeable,\n_TradeAllowed,\n_MintAllowed,\n_BurnAllowed\n    {\n    constructor(address _custodian) public CustodianUpgradeable(_custodian) {\n    }\n}\n\n\n/**\n * @title TokenController implements restriction logic for BaseSecurityToken.\n * @dev see https://eips.ethereum.org/EIPS/eip-1462\n */\ncontract TokenController is CustodianUpgradeable, ServiceDiscovery {\n    constructor(address _custodian, ServiceRegistry _services) public\n    CustodianUpgradeable(_custodian) ServiceDiscovery(_services) {\n    }\n\n    // Use status codes from:\n    // https://eips.ethereum.org/EIPS/eip-1066\n    byte private constant STATUS_ALLOWED = 0x11;\n\n    function checkTransferAllowed(address _from, address _to, uint256) public view returns (byte) {\n        require(_settings().getTradeAllowed(), \"global trade must be allowed\");\n        require(_kyc().getCustomerStatus(_from) == KnowYourCustomer.Status.passed, \"sender does not have valid KYC status\");\n        require(_kyc().getCustomerStatus(_to) == KnowYourCustomer.Status.passed, \"recipient does not have valid KYC status\");\n\n        // TODO:\n        // Check user's region\n        // Check amount for transfer limits\n\n        return STATUS_ALLOWED;\n    }\n   \n    function checkTransferFromAllowed(address _from, address _to, uint256 _amount) external view returns (byte) {\n        return checkTransferAllowed(_from, _to, _amount);\n    }\n   \n    function checkMintAllowed(address _from, uint256) external view returns (byte) {\n        require(_settings().getMintAllowed(), \"global mint must be allowed\");\n        require(_kyc().getCustomerStatus(_from) == KnowYourCustomer.Status.passed, \"recipient does not have valid KYC status\");\n        \n        return STATUS_ALLOWED;\n    }\n   \n    function checkBurnAllowed(address _from, uint256) external view returns (byte) {\n        require(_settings().getBurnAllowed(), \"global burn must be allowed\");\n        require(_kyc().getCustomerStatus(_from) == KnowYourCustomer.Status.passed, \"sender does not have valid KYC status\");\n\n        return STATUS_ALLOWED;\n    }\n\n    function _settings() private view returns (TokenSettings) {\n        return TokenSettings(services.getService(\"token/settings\"));\n    }\n\n    function _kyc() private view returns (KnowYourCustomer) {\n        return KnowYourCustomer(services.getService(\"validators/kyc\"));\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_proposedCustodian\",\"type\":\"address\"}],\"name\":\"requestCustodianChange\",\"outputs\":[{\"name\":\"lockId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"checkMintAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes1\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"custodian\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockId\",\"type\":\"bytes32\"}],\"name\":\"confirmCustodianChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"checkTransferFromAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes1\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"checkTransferAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes1\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"checkBurnAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes1\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockRequestCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"custodianChangeReqs\",\"outputs\":[{\"name\":\"proposedNew\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_custodian\",\"type\":\"address\"},{\"name\":\"_services\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_msgSender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_proposedCustodian\",\"type\":\"address\"}],\"name\":\"CustodianChangeRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_newCustodian\",\"type\":\"address\"}],\"name\":\"CustodianChangeConfirmed\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "00000000000000000000000031ebcb0d352acc558242036d136849dc8ff4748f000000000000000000000000673b6f0c00a4700b7616808adb380ac2ac91ebda"
}