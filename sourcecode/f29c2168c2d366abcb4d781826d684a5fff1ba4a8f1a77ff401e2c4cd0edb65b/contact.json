{
  "address": "0xf31b25b753dfb6a79cf36630dcf03ff53178341c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LandRegistry",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-20\n*/\n\n/**\n * Copyright (c) 2018 blockimmo AG [emailÂ protected]\n * Non-Profit Open Software License 3.0 (NPOSL-3.0)\n * https://opensource.org/licenses/NPOSL-3.0\n */\n\n\npragma solidity 0.4.25;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n\n/**\n * @title Claimable\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n * This allows the new owner to accept the transfer.\n */\ncontract Claimable is Ownable {\n  address public pendingOwner;\n\n  /**\n   * @dev Modifier throws if called by any account other than the pendingOwner.\n   */\n  modifier onlyPendingOwner() {\n    require(msg.sender == pendingOwner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to set the pendingOwner address.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    pendingOwner = newOwner;\n  }\n\n  /**\n   * @dev Allows the pendingOwner address to finalize the transfer.\n   */\n  function claimOwnership() public onlyPendingOwner {\n    emit OwnershipTransferred(owner, pendingOwner);\n    owner = pendingOwner;\n    pendingOwner = address(0);\n  }\n}\n\n\n/**\n * @title LandRegistry\n * @dev A minimal, simple database mapping properties to their on-chain representation (`TokenizedProperty`).\n *\n * The purpose of this contract is not to be official or replace the existing (off-chain) land registry.\n * Its purpose is to map entries in the official registry to their on-chain representation.\n * This mapping / bridging process is enabled by our legal framework, which works in-sync with and relies on this database.\n *\n * `this.landRegistry` is the single source of truth for on-chain properties verified legitimate by blockimmo.\n * Any property not indexed in `this.landRegistry` is NOT verified legitimate by blockimmo.\n *\n * `TokenizedProperty` references `this` to only allow tokens of verified properties to be transferred.\n * Any (unmodified) `TokenizedProperty`'s tokens will be transferable if and only if it is indexed in `this.landRegistry` (otherwise locked).\n *\n * `LandRegistryProxy` enables `this` to be easily and reliably upgraded if absolutely necessary.\n * `LandRegistryProxy` and `this` are controlled by a centralized entity.\n * This centralization provides an extra layer of control / security until our contracts are time and battle tested.\n * We intend to work towards full decentralization in small, precise, confident steps by transferring ownership\n * of these contracts when appropriate and necessary.\n */\ncontract LandRegistry is Claimable {\n  mapping(string => address) private landRegistry;\n\n  event Tokenized(string eGrid, address indexed property);\n  event Untokenized(string eGrid, address indexed property);\n\n  /**\n   * this function's abi should never change and always maintain backwards compatibility\n   */\n  function getProperty(string _eGrid) public view returns (address property) {\n    property = landRegistry[_eGrid];\n  }\n\n  function tokenizeProperty(string _eGrid, address _property) public onlyOwner {\n    require(bytes(_eGrid).length > 0, \"eGrid must be non-empty string\");\n    require(_property != address(0), \"property address must be non-null\");\n    require(landRegistry[_eGrid] == address(0), \"property must not already exist in land registry\");\n\n    landRegistry[_eGrid] = _property;\n    emit Tokenized(_eGrid, _property);\n  }\n\n  function untokenizeProperty(string _eGrid) public onlyOwner {\n    address property = getProperty(_eGrid);\n    require(property != address(0), \"property must exist in land registry\");\n\n    landRegistry[_eGrid] = address(0);\n    emit Untokenized(_eGrid, property);\n  }\n}",
  "bytecode": "608060405260008054600160a060020a031916331790556108c6806100256000396000f30060806040526004361061008d5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632041b99781146100925780634e71e0c8146100f8578063715018a61461010d5780638da5cb5b14610122578063ab331a3414610153578063e30c3978146101ac578063f2fde38b146101c1578063f931eaef146101e2575b600080fd5b34801561009e57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526100f694369492936024939284019190819084018382808284375094975050509235600160a060020a0316935061023b92505050565b005b34801561010457600080fd5b506100f6610546565b34801561011957600080fd5b506100f66105ce565b34801561012e57600080fd5b5061013761063a565b60408051600160a060020a039092168252519081900360200190f35b34801561015f57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101379436949293602493928401919081908401838280828437509497506106499650505050505050565b3480156101b857600080fd5b506101376106ba565b3480156101cd57600080fd5b506100f6600160a060020a03600435166106c9565b3480156101ee57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526100f694369492936024939284019190819084018382808284375094975061070f9650505050505050565b600054600160a060020a0316331461025257600080fd5b81516000106102ab576040805160e560020a62461bcd02815260206004820152601e60248201527f6547726964206d757374206265206e6f6e2d656d70747920737472696e670000604482015290519081900360640190fd5b600160a060020a0381161515610331576040805160e560020a62461bcd02815260206004820152602160248201527f70726f70657274792061646472657373206d757374206265206e6f6e2d6e756c60448201527f6c00000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6000600160a060020a03166002836040518082805190602001908083835b6020831061036e5780518252601f19909201916020918201910161034f565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922054600160a060020a03169290921491506104259050576040805160e560020a62461bcd02815260206004820152603060248201527f70726f7065727479206d757374206e6f7420616c72656164792065786973742060448201527f696e206c616e6420726567697374727900000000000000000000000000000000606482015290519081900360840190fd5b806002836040518082805190602001908083835b602083106104585780518252601f199092019160209182019101610439565b51815160209384036101000a6000190180199092169116179052920194855250604080519485900382018520805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039788161790558185528751858301528751958716957f330ed294d7dc5718ce498aabea0edf87db5cde4e7eb3d7bfeb6a3ee75b1a171895899550935083929183019185019080838360005b838110156105085781810151838201526020016104f0565b50505050905090810190601f1680156105355780820380516001836020036101000a031916815260200191505b509250505060405180910390a25050565b600154600160a060020a0316331461055d57600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600054600160a060020a031633146105e557600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031681565b60006002826040518082805190602001908083835b6020831061067d5780518252601f19909201916020918201910161065e565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922054600160a060020a0316949350505050565b600154600160a060020a031681565b600054600160a060020a031633146106e057600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008054600160a060020a0316331461072757600080fd5b61073082610649565b9050600160a060020a03811615156107b7576040805160e560020a62461bcd028152602060048201526024808201527f70726f7065727479206d75737420657869737420696e206c616e64207265676960448201527f7374727900000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60006002836040518082805190602001908083835b602083106107eb5780518252601f1990920191602091820191016107cc565b51815160209384036101000a6000190180199092169116179052920194855250604080519485900382018520805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039788161790558185528751858301528751958716957f57b1cc141d5ce4666c0ad98dfe6ca7da42554b374209512569fef010fd6e8f3c9589955093508392918301918501908083836000838110156105085781810151838201526020016104f05600a165627a7a72305820682487e6e000f86701d44eb604dac86092f3cf600021ba1d73123107c8f4e1d20029"
}