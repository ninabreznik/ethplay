{
  "address": "0xacf999bfa9347e8ebe6816ed30bf44b127233177",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "AXNetDEX",
  "contractName": "AXNETDEX",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-16\n*/\n\npragma solidity ^0.4.23;\n\n/******************************************************************\n * AXNET Decentralized Exchange Smart Contract * \n * ***************************************************************/\n\ncontract SafeMath {\n  function safeMul(uint a, uint b) internal pure returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function safeSub(uint a, uint b) internal pure returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint a, uint b) internal pure returns (uint) {\n    uint c = a + b;\n    assert(c>=a && c>=b);\n    return c;\n  }\n}\n\n// ----------------------------------------------------------------------------\n// Owned contract\n// ----------------------------------------------------------------------------\ncontract Owned {\n    address public owner;\n    address public newOwner;\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n    \n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\ncontract Token {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address _owner) public constant returns (uint);\n    function allowance(address _owner, address _spender) public constant returns (uint);\n    \n    function transfer(address _to, uint _value) public returns (bool success);\n    function approve(address _spender, uint _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n    \n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n\n    string public name;\n    string public symbol;\n    uint8 public decimals;  // 18 is the most common number of decimal places\n}\n\n\ncontract AXNETDEX is SafeMath, Owned {\n  address public feeAccount; //the account that will receive fees\n\n  mapping (address => mapping (address => uint)) public tokens; //mapping of token addresses to mapping of account balances (token=0 means Ether)\n\n  mapping (address => bool) public admins;  //admins who is responsible for trading\n  \n  //mapping of order hash to mapping of uints (amount of order that has been filled)\n  mapping (bytes32 => uint256) public orderFills;\n  \n  //to make sure withdraw and trade will be done only once\n  mapping (bytes32 => bool) public withdrawn;\n  mapping (bytes32 => bool) public traded;\n  \n  event Cancel(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s);\n  event Trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give);\n  event Deposit(address token, address user, uint amount, uint balance);\n  event Withdraw(address token, address user, uint amount, uint balance);\n\n constructor() public {\n    feeAccount = msg.sender;\n  }\n\n  function() public {\n    revert();\n  }\n  \n  function setAdmin(address admin, bool isAdmin) public onlyOwner {\n    admins[admin] = isAdmin;\n  }\n  \n  modifier onlyAdmin {\n    require(msg.sender == owner || admins[msg.sender]);\n    _;\n  }\n\n  function changeFeeAccount(address feeAccount_) public onlyOwner {\n    feeAccount = feeAccount_;\n  }\n\n  function deposit() payable public {\n    tokens[0][msg.sender] = safeAdd(tokens[0][msg.sender], msg.value);\n    emit Deposit(0, msg.sender, msg.value, tokens[0][msg.sender]);\n  }\n\n  function depositToken(address token, uint amount) public {\n    //remember to call Token(address).approve(this, amount) or this contract will not be able to do the transfer on your behalf.\n    require(token!=0);\n    assert(Token(token).transferFrom(msg.sender, this, amount));\n    \n    tokens[token][msg.sender] = safeAdd(tokens[token][msg.sender], amount);\n    emit Deposit(token, msg.sender, amount, tokens[token][msg.sender]);\n  }\n\n  function adminWithdraw(address token, uint amount, address user, uint nonce, uint8 v, bytes32 r, bytes32 s, uint feeWithdrawal) public onlyAdmin {\n    bytes32 hash = sha256(this, token, amount, user, nonce);\n    require(!withdrawn[hash]);\n    withdrawn[hash] = true;\n    \n    require(ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\", hash), v, r, s) == user);\n    \n    if (feeWithdrawal > 50 finney) feeWithdrawal = 50 finney;\n\n    require(tokens[token][user] >= amount);\n    tokens[token][user] = safeSub(tokens[token][user], amount);\n    tokens[token][feeAccount] = safeAdd(tokens[token][feeAccount], safeMul(feeWithdrawal, amount) / 1 ether);\n    amount = safeMul((1 ether - feeWithdrawal), amount) / 1 ether;\n\n    if (token == address(0)) {\n      assert(user.send(amount));\n    } else {\n      assert(Token(token).transfer(user, amount));\n    }\n    \n    emit Withdraw(token, user, amount, tokens[token][user]);\n  }\n\n  function balanceOf(address token, address user)  public view returns (uint) {\n    return tokens[token][user];\n  }\n  \n    /* uint values\n         0:amountGet, 1:amountGive, 2:expires, 3:nonce, 4:amount, 5:tradeNonce, 6:feeMake, 7:feeTake\n       addressses\n         0:tokenGet, 1:tokenGive, 2:maker, 3:taker\n     signature binary\n       v[0] rs[0] rs[1] : signature for order\n       v[1] rs[2] rs[3] : signature for trade\n     */\n  function trade(uint[8] tradeValues, address[4] tradeAddresses, uint8[2] v, bytes32[4] rs) public onlyAdmin {\n    bytes32 orderHash = sha256(this, tradeAddresses[0], tradeValues[0], tradeAddresses[1], tradeValues[1], tradeValues[2], tradeValues[3], tradeAddresses[2]);\n    require(ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\", orderHash), v[0], rs[0], rs[1]) == tradeAddresses[2]);\n    bytes32 tradeHash = sha256(orderHash, tradeValues[4], tradeAddresses[3], tradeValues[5]);\n    require(ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\", tradeHash), v[1], rs[2], rs[3]) == tradeAddresses[3]);\n    \n    require(!traded[tradeHash]);\n    traded[tradeHash] = true;\n    \n    require(safeAdd(orderFills[orderHash], tradeValues[4]) <= tradeValues[0]);\n    require(tokens[tradeAddresses[0]][tradeAddresses[3]] >= tradeValues[4]);\n    require(tokens[tradeAddresses[1]][tradeAddresses[2]] >= (safeMul(tradeValues[1], tradeValues[4]) / tradeValues[0]));\n    \n    tokens[tradeAddresses[0]][tradeAddresses[3]] = safeSub(tokens[tradeAddresses[0]][tradeAddresses[3]], tradeValues[4]);\n    tokens[tradeAddresses[0]][tradeAddresses[2]] = safeAdd(tokens[tradeAddresses[0]][tradeAddresses[2]], safeMul(tradeValues[4], ((1 ether) - tradeValues[6])) / (1 ether));\n    tokens[tradeAddresses[0]][feeAccount] = safeAdd(tokens[tradeAddresses[0]][feeAccount], safeMul(tradeValues[4], tradeValues[6]) / (1 ether));\n    tokens[tradeAddresses[1]][tradeAddresses[2]] = safeSub(tokens[tradeAddresses[1]][tradeAddresses[2]], safeMul(tradeValues[1], tradeValues[4]) / tradeValues[0]);\n    tokens[tradeAddresses[1]][tradeAddresses[3]] = safeAdd(tokens[tradeAddresses[1]][tradeAddresses[3]], safeMul(safeMul(((1 ether) - tradeValues[7]), tradeValues[1]), tradeValues[4]) / tradeValues[0] / (1 ether));\n    tokens[tradeAddresses[1]][feeAccount] = safeAdd(tokens[tradeAddresses[1]][feeAccount], safeMul(safeMul(tradeValues[7], tradeValues[1]), tradeValues[4]) / tradeValues[0] / (1 ether));\n    orderFills[orderHash] = safeAdd(orderFills[orderHash], tradeValues[4]);\n  }\n\n\n  function cancelOrder(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, uint8 v, bytes32 r, bytes32 s, address user) public onlyAdmin {\n    bytes32 hash = sha256(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender, user);\n    assert(ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\", hash),v,r,s) == user);\n    orderFills[hash] = amountGet;\n    emit Cancel(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, user, v, r, s);\n  }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060008054600160a060020a033316600160a060020a031991821681179092556002805490911690911790556116658061004b6000396000f3006080604052600436106100fb5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166321f9caef811461010d5780632295115b1461015d578063338b5dea1461019a5780633823d66c146101be578063429b62e5146101ea5780634b0bddd21461020b578063508493bc1461023157806365e17c9d1461026a57806371ffcb161461029b57806379ba5097146102bc5780638da5cb5b146102d1578063d0e30db0146102e6578063d4ee1d90146102ee578063d581332314610303578063ef3435881461031b578063f2fde38b146103cf578063f7213db6146103f0578063f7888aec14610408575b34801561010757600080fd5b50600080fd5b34801561011957600080fd5b5061015b600160a060020a0360043581169060243590604435811690606435906084359060a4359060ff60c435169060e435906101043590610124351661042f565b005b34801561016957600080fd5b5061015b600160a060020a03600435811690602435906044351660643560ff6084351660a43560c43560e43561065c565b3480156101a657600080fd5b5061015b600160a060020a0360043516602435610a8b565b3480156101ca57600080fd5b506101d6600435610bee565b604080519115158252519081900360200190f35b3480156101f657600080fd5b506101d6600160a060020a0360043516610c03565b34801561021757600080fd5b5061015b600160a060020a03600435166024351515610c18565b34801561023d57600080fd5b50610258600160a060020a0360043581169060243516610c5e565b60408051918252519081900360200190f35b34801561027657600080fd5b5061027f610c7b565b60408051600160a060020a039092168252519081900360200190f35b3480156102a757600080fd5b5061015b600160a060020a0360043516610c8a565b3480156102c857600080fd5b5061015b610cd4565b3480156102dd57600080fd5b5061027f610d60565b61015b610d6f565b3480156102fa57600080fd5b5061027f610e34565b34801561030f57600080fd5b506101d6600435610e43565b34801561032757600080fd5b506040805161010081810190925261015b91369160049161010491908390600890839083908082843750506040805160808181019092529497969581810195945092506004915083908390808284375050604080518082018252949796958181019594509250600291508390839080828437505060408051608081810190925294979695818101959450925060049150839083908082843750939650610e5895505050505050565b3480156103db57600080fd5b5061015b600160a060020a036004351661153b565b3480156103fc57600080fd5b50610258600435611585565b34801561041457600080fd5b50610258600160a060020a0360043581169060243516611597565b6000805433600160a060020a03908116911614806104655750600160a060020a03331660009081526004602052604090205460ff165b151561047057600080fd5b604080516c01000000000000000000000000600160a060020a0330811682028352808f1682026014840152602883018e9052808d1682026048840152605c83018c9052607c83018b9052609c83018a9052338116820260bc84015285160260d0820152905160029160e48082019260209290919082900301816000865af11580156104ff573d6000803e3d6000fd5b5050506040513d602081101561051457600080fd5b50516040805160008051602061161a8339815191528152601c8101839052815190819003603c018120600080835260208381018086529290925260ff8a168385015260608301899052608083018890529251939450600160a060020a0386169360019360a080850194601f198401939081900390910191865af115801561059f573d6000803e3d6000fd5b50505060206040510351600160a060020a03161415156105bb57fe5b6000818152600560209081526040918290208c90558151600160a060020a03808f1682529181018d9052818c1681840152606081018b9052608081018a905260a0810189905290841660c082015260ff871660e08201526101008101869052610120810185905290517f1e0b760c386003e9cb9bcf4fcf3997886042859d9b6ed6320e804597fcdb28b0918190036101400190a15050505050505050505050565b6000805433600160a060020a03908116911614806106925750600160a060020a03331660009081526004602052604090205460ff165b151561069d57600080fd5b604080516c01000000000000000000000000600160a060020a0330811682028352808d1682026014840152602883018c90528a16026048820152605c81018890529051600291607c8082019260209290919082900301816000865af115801561070a573d6000803e3d6000fd5b5050506040513d602081101561071f57600080fd5b505160008181526006602052604090205490915060ff161561074057600080fd5b6000818152600660209081526040808320805460ff19166001908117909155815160008051602061161a8339815191528152601c8101869052825190819003603c0181208582528185018085525260ff8a168184015260608101899052608081018890529151600160a060020a038c1694919360a0808501949193601f19840193928390039091019190865af11580156107de573d6000803e3d6000fd5b50505060206040510351600160a060020a03161415156107fd57600080fd5b66b1a2bc2ec500008211156108175766b1a2bc2ec5000091505b600160a060020a03808a166000908152600360209081526040808320938b168352929052205488111561084957600080fd5b600160a060020a03808a166000908152600360209081526040808320938b168352929052205461087990896115c2565b600160a060020a038a811660009081526003602090815260408083208c8516845290915280822093909355600254909116815220546108d490670de0b6b3a76400006108c5858c6115d4565b8115156108ce57fe5b046115ff565b600160a060020a03808b16600090815260036020908152604080832060025490941683529290522055670de0b6b3a76400006109128382038a6115d4565b81151561091b57fe5b049750600160a060020a038916151561096057604051600160a060020a0388169089156108fc02908a906000818181858888f19350505050151561095b57fe5b610a10565b88600160a060020a031663a9059cbb888a6040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156109dc57600080fd5b505af11580156109f0573d6000803e3d6000fd5b505050506040513d6020811015610a0657600080fd5b50511515610a1057fe5b600160a060020a03808a166000818152600360209081526040808320948c1680845294825291829020548251938452908301939093528181018b9052606082019290925290517ff341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb5679181900360800190a1505050505050505050565b600160a060020a0382161515610aa057600080fd5b604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a0333811660048301523081166024830152604482018490529151918416916323b872dd916064808201926020929091908290030181600087803b158015610b1457600080fd5b505af1158015610b28573d6000803e3d6000fd5b505050506040513d6020811015610b3e57600080fd5b50511515610b4857fe5b600160a060020a0380831660009081526003602090815260408083203390941683529290522054610b7990826115ff565b600160a060020a038381166000818152600360209081526040808320339095168084529482529182902085905581519283528201929092528082018490526060810192909252517fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d79181900360800190a15050565b60066020526000908152604090205460ff1681565b60046020526000908152604090205460ff1681565b60005433600160a060020a03908116911614610c3357600080fd5b600160a060020a03919091166000908152600460205260409020805460ff1916911515919091179055565b600360209081526000928352604080842090915290825290205481565b600254600160a060020a031681565b60005433600160a060020a03908116911614610ca557600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60015433600160a060020a03908116911614610cef57600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600054600160a060020a031681565b33600160a060020a031660009081527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff6020526040902054610db190346115ff565b33600160a060020a031660008181527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff6020908152604080832085905580519283529082019290925234818301526060810192909252517fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d79181900360800190a1565b600154600160a060020a031681565b60076020526000908152604090205460ff1681565b60008054819033600160a060020a0390811691161480610e905750600160a060020a03331660009081526004602052604090205460ff165b1515610e9b57600080fd5b84518651602080880151898201516040808c015160608d0151828d01518351600160a060020a033081166c0100000000000000000000000090810283529a81168b026014830152602882019990995295881689026048870152605c860194909452607c850191909152609c840152931690930260bc840152905160029260d080820193929182900301816000865af1158015610f3b573d6000803e3d6000fd5b5050506040513d6020811015610f5057600080fd5b5051604086810151815160008051602061161a8339815191528152601c8101849052825190819003603c018120885188516020808b01516000808752828701808a529590955260ff90931685880152606085019190915260808401919091529351949650600160a060020a039092169360019360a0808401949193601f198401939081900390910191865af1158015610fed573d6000803e3d6000fd5b50505060206040510351600160a060020a031614151561100c57600080fd5b6080860151606086015160a088015160408051868152602080820195909552600160a060020a039093166c01000000000000000000000000028382015260548301919091525160029260748084019391929182900301816000865af1158015611079573d6000803e3d6000fd5b5050506040513d602081101561108e57600080fd5b50516060868101516040805160008051602061161a8339815191528152601c8101859052815190819003603c01812060208a8101518a8501518b88015160008087528487018089529590955260ff909216858701529684019690965260808301959095529151949550600160a060020a039092169360019360a0808501949193601f19840193928390039091019190865af1158015611131573d6000803e3d6000fd5b50505060206040510351600160a060020a031614151561115057600080fd5b60008181526007602052604090205460ff161561116c57600080fd5b6000818152600760209081526040808320805460ff1916600117905588518584526005909252909120546111a8908860045b60200201516115ff565b11156111b357600080fd5b60808601518551600160a060020a03908116600090815260036020908152604080832060608b01519094168352929052205410156111f057600080fd5b85516020870151611209908860045b60200201516115d4565b81151561121257fe5b602087810151600160a060020a039081166000908152600383526040808220818c0151909316825291909252902054919004111561124f57600080fd5b8451600160a060020a03908116600090815260036020908152604080832060608a015190941683529290522054608087015161128b91906115c2565b8551600160a060020a03908116600090815260036020818152604080842060608c015186168552825280842095909555895184168352908152838220848a01519093168252919091522054608087015160c08801516112fb9291670de0b6b3a7640000916108c5919083036115d4565b8551600160a060020a039081166000908152600360208181526040808420818c015186168552825280842095909555895184168352908152838220600254909316825291909152205460808701516113649190670de0b6b3a7640000906108c5908a60066111ff565b8551600160a060020a03908116600090815260036020818152604080842060025486168552825280842095909555808a015184168352908152838220848a0151909316825291825291909120548751918801516113d792906113c8908a60046111ff565b8115156113d157fe5b046115c2565b60208681018051600160a060020a03908116600090815260038085526040808320818d01518516845286528083209690965592518216815291835283822060608a015190911682529091522054865160e08801516114679291670de0b6b3a7640000916114549061144c9084038c60016111ff565b8b60046111ff565b81151561145d57fe5b048115156108ce57fe5b60208681018051600160a060020a0390811660009081526003808552604080832060608d01518516845286528083209690965592518216815291835283822060025490911682529091522054865160e08801516114d99291670de0b6b3a7640000916114549061144c908c60016111ff565b602080870151600160a060020a03908116600090815260038352604080822060025490931682529183528181209390935584835260059091529020546115219087600461119e565b600092835260056020526040909220919091555050505050565b60005433600160a060020a0390811691161461155657600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60056020526000908152604090205481565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b6000828211156115ce57fe5b50900390565b60008282028315806115f057508284828115156115ed57fe5b04145b15156115f857fe5b9392505050565b60008282018381108015906115f05750828110156115f857fe0019457468657265756d205369676e6564204d6573736167653a0a333200000000a165627a7a7230582031c9eb67bdac10176d58a268d7dd471ef4c609ab28419ed3de38958af86086b90029"
}