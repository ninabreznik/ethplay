{
  "address": "0x0f99be6639b1ddfbedf319b4de67e558a41aa6ea",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Kernel",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-05\n*/\n\npragma solidity 0.4.24;\n\n\ncontract DSNote {\n    event LogNote(\n        bytes4   indexed  sig,\n        address  indexed  guy,\n        bytes32  indexed  foo,\n        bytes32  indexed  bar,\n        uint              wad,\n        bytes             fax\n    ) anonymous;\n\n    modifier note {\n        bytes32 foo;\n        bytes32 bar;\n\n        assembly {\n            foo := calldataload(4)\n            bar := calldataload(36)\n        }\n\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\n\n        _;\n    }\n}\n\n\ncontract ErrorUtils {\n\n    event LogError(string methodSig, string errMsg);\n    event LogErrorWithHintBytes32(bytes32 indexed bytes32Value, string methodSig, string errMsg);\n    event LogErrorWithHintAddress(address indexed addressValue, string methodSig, string errMsg);\n\n}\n\n\ncontract DSMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x);\n    }\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    // custom : not in original DSMath, putting it here for consistency, copied from SafeMath\n    function div(uint x, uint y) internal pure returns (uint z) {\n        z = x / y;\n    }\n\n    function min(uint x, uint y) internal pure returns (uint z) {\n        return x <= y ? x : y;\n    }\n    function max(uint x, uint y) internal pure returns (uint z) {\n        return x >= y ? x : y;\n    }\n    function imin(int x, int y) internal pure returns (int z) {\n        return x <= y ? x : y;\n    }\n    function imax(int x, int y) internal pure returns (int z) {\n        return x >= y ? x : y;\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    function rpow(uint x, uint n) internal pure returns (uint z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\n\ncontract DateTime {\n\n    struct _DateTime {\n        uint16 year;\n        uint8 month;\n        uint8 day;\n        uint8 hour;\n        uint8 minute;\n        uint8 second;\n        uint8 weekday;\n    }\n\n    uint constant DAY_IN_SECONDS = 86400;\n    uint constant YEAR_IN_SECONDS = 31536000;\n    uint constant LEAP_YEAR_IN_SECONDS = 31622400;\n\n    uint constant HOUR_IN_SECONDS = 3600;\n    uint constant MINUTE_IN_SECONDS = 60;\n\n    uint16 constant ORIGIN_YEAR = 1970;\n\n    function isLeapYear(uint16 year) public pure returns (bool) {\n        if (year % 4 != 0) {\n            return false;\n        }\n        if (year % 100 != 0) {\n            return true;\n        }\n        if (year % 400 != 0) {\n            return false;\n        }\n        return true;\n    }\n\n    function leapYearsBefore(uint year) public pure returns (uint) {\n        year -= 1;\n        return year / 4 - year / 100 + year / 400;\n    }\n\n    function getDaysInMonth(uint8 month, uint16 year) public pure returns (uint8) {\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            return 31;\n        }\n        else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            return 30;\n        }\n        else if (isLeapYear(year)) {\n            return 29;\n        }\n        else {\n            return 28;\n        }\n    }\n\n    function parseTimestamp(uint timestamp) internal pure returns (_DateTime dt) {\n        uint secondsAccountedFor = 0;\n        uint buf;\n        uint8 i;\n\n        // Year\n        dt.year = getYear(timestamp);\n        buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\n\n        secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\n        secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);\n\n        // Month\n        uint secondsInMonth;\n        for (i = 1; i <= 12; i++) {\n            secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dt.year);\n            if (secondsInMonth + secondsAccountedFor > timestamp) {\n                dt.month = i;\n                break;\n            }\n            secondsAccountedFor += secondsInMonth;\n        }\n\n        // Day\n        for (i = 1; i <= getDaysInMonth(dt.month, dt.year); i++) {\n            if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\n                dt.day = i;\n                break;\n            }\n            secondsAccountedFor += DAY_IN_SECONDS;\n        }\n\n        // Hour\n        dt.hour = getHour(timestamp);\n\n        // Minute\n        dt.minute = getMinute(timestamp);\n\n        // Second\n        dt.second = getSecond(timestamp);\n\n        // Day of week.\n        dt.weekday = getWeekday(timestamp);\n    }\n\n    function getYear(uint timestamp) public pure returns (uint16) {\n        uint secondsAccountedFor = 0;\n        uint16 year;\n        uint numLeapYears;\n\n        // Year\n        year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\n        numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\n\n        secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\n        secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\n\n        while (secondsAccountedFor > timestamp) {\n            if (isLeapYear(uint16(year - 1))) {\n                secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\n            }\n            else {\n                secondsAccountedFor -= YEAR_IN_SECONDS;\n            }\n            year -= 1;\n        }\n        return year;\n    }\n\n    function getMonth(uint timestamp) public pure returns (uint8) {\n        return parseTimestamp(timestamp).month;\n    }\n\n    function getDay(uint timestamp) public pure returns (uint8) {\n        return parseTimestamp(timestamp).day;\n    }\n\n    function getHour(uint timestamp) public pure returns (uint8) {\n        return uint8((timestamp / 60 / 60) % 24);\n    }\n\n    function getMinute(uint timestamp) public pure returns (uint8) {\n        return uint8((timestamp / 60) % 60);\n    }\n\n    function getSecond(uint timestamp) public pure returns (uint8) {\n        return uint8(timestamp % 60);\n    }\n\n    function getWeekday(uint timestamp) public pure returns (uint8) {\n        return uint8((timestamp / DAY_IN_SECONDS + 4) % 7);\n    }\n\n    function toTimestamp(uint16 year, uint8 month, uint8 day) public pure returns (uint timestamp) {\n        return toTimestamp(year, month, day, 0, 0, 0);\n    }\n\n    function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour) public pure returns (uint timestamp) {\n        return toTimestamp(year, month, day, hour, 0, 0);\n    }\n\n    function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) public pure returns (uint timestamp) {\n        return toTimestamp(year, month, day, hour, minute, 0);\n    }\n\n    function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) public pure returns (uint timestamp) {\n        uint16 i;\n\n        // Year\n        for (i = ORIGIN_YEAR; i < year; i++) {\n            if (isLeapYear(i)) {\n                timestamp += LEAP_YEAR_IN_SECONDS;\n            }\n            else {\n                timestamp += YEAR_IN_SECONDS;\n            }\n        }\n\n        // Month\n        uint8[12] memory monthDayCounts;\n        monthDayCounts[0] = 31;\n        if (isLeapYear(year)) {\n            monthDayCounts[1] = 29;\n        }\n        else {\n            monthDayCounts[1] = 28;\n        }\n        monthDayCounts[2] = 31;\n        monthDayCounts[3] = 30;\n        monthDayCounts[4] = 31;\n        monthDayCounts[5] = 30;\n        monthDayCounts[6] = 31;\n        monthDayCounts[7] = 31;\n        monthDayCounts[8] = 30;\n        monthDayCounts[9] = 31;\n        monthDayCounts[10] = 30;\n        monthDayCounts[11] = 31;\n\n        for (i = 1; i < month; i++) {\n            timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\n        }\n\n        // Day\n        timestamp += DAY_IN_SECONDS * (day - 1);\n\n        // Hour\n        timestamp += HOUR_IN_SECONDS * (hour);\n\n        // Minute\n        timestamp += MINUTE_IN_SECONDS * (minute);\n\n        // Second\n        timestamp += second;\n\n        return timestamp;\n    }\n}\n\n\ncontract WETH9 {\n    string public name     = \"Wrapped Ether\";\n    string public symbol   = \"WETH\";\n    uint8  public decimals = 18;\n\n    event  Approval(address indexed _owner, address indexed _spender, uint _value);\n    event  Transfer(address indexed _from, address indexed _to, uint _value);\n    event  Deposit(address indexed _owner, uint _value);\n    event  Withdrawal(address indexed _owner, uint _value);\n\n    mapping (address => uint)                       public  balanceOf;\n    mapping (address => mapping (address => uint))  public  allowance;\n\n    function() public payable {\n        deposit();\n    }\n\n    function deposit() public payable {\n        balanceOf[msg.sender] += msg.value;\n        Deposit(msg.sender, msg.value);\n    }\n\n    function withdraw(uint wad) public {\n        require(balanceOf[msg.sender] >= wad);\n        balanceOf[msg.sender] -= wad;\n        msg.sender.transfer(wad);\n        Withdrawal(msg.sender, wad);\n    }\n\n    function totalSupply() public view returns (uint) {\n        return this.balance;\n    }\n\n    function approve(address guy, uint wad) public returns (bool) {\n        allowance[msg.sender][guy] = wad;\n        Approval(msg.sender, guy, wad);\n        return true;\n    }\n\n    function transfer(address dst, uint wad) public returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(address src, address dst, uint wad)\n        public\n        returns (bool)\n    {\n        require(balanceOf[src] >= wad);\n\n        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n            require(allowance[src][msg.sender] >= wad);\n            allowance[src][msg.sender] -= wad;\n        }\n\n        balanceOf[src] -= wad;\n        balanceOf[dst] += wad;\n\n        Transfer(src, dst, wad);\n\n        return true;\n    }\n}\n\n\ncontract Utils {\n\n    modifier addressValid(address _address) {\n        require(_address != address(0), \"Utils::_ INVALID_ADDRESS\");\n        _;\n    }\n\n}\n\n\ncontract Proxy {\n\n    address masterCopy;\n\n    constructor(address _masterCopy)\n        public\n    {\n        require(_masterCopy != 0, \"Invalid master copy address provided\");\n        masterCopy = _masterCopy;\n    }\n\n    function ()\n        external\n        payable\n    {\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\n            calldatacopy(0, 0, calldatasize())\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\n            returndatacopy(0, 0, returndatasize())\n            if eq(success, 0) { revert(0, returndatasize()) }\n            return(0, returndatasize())\n        }\n    }\n\n    function implementation()\n        public\n        view\n        returns (address)\n    {\n        return masterCopy;\n    }\n\n    function proxyType()\n        public\n        pure\n        returns (uint256)\n    {\n        return 2;\n    }\n}\n\n\ncontract DSAuthority {\n    function canCall(address src, address dst, bytes4 sig) public view returns (bool);\n}\n\n\ncontract DSAuthEvents {\n    event LogSetAuthority (address indexed authority);\n    event LogSetOwner     (address indexed owner);\n}\n\n\ncontract DSAuth is DSAuthEvents {\n    DSAuthority  public  authority;\n    address      public  owner;\n\n    constructor() public {\n        owner = msg.sender;\n        emit LogSetOwner(msg.sender);\n    }\n\n    function setOwner(address owner_)\n        public\n        auth\n    {\n        owner = owner_;\n        emit LogSetOwner(owner);\n    }\n\n    function setAuthority(DSAuthority authority_)\n        public\n        auth\n    {\n        authority = authority_;\n        emit LogSetAuthority(authority);\n    }\n\n    modifier auth {\n        require(isAuthorized(msg.sender, msg.sig), \"DSAuth::_ SENDER_NOT_AUTHORIZED\");\n        _;\n    }\n\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n        if (src == address(this)) {\n            return true;\n        } else if (src == owner) {\n            return true;\n        } else if (authority == DSAuthority(0)) {\n            return false;\n        } else {\n            return authority.canCall(src, this, sig);\n        }\n    }\n}\n\n\ncontract MasterCopy {\n    address masterCopy;\n\n    function changeMasterCopy(address _masterCopy)\n        public\n    {\n        require(_masterCopy != 0, \"Invalid master copy address provided\");\n        masterCopy = _masterCopy;\n    }\n}\n\n\ninterface ERC20 {\n\n    function name() public view returns(string);\n    function symbol() public view returns(string);\n    function decimals() public view returns(uint8);\n    function totalSupply() public view returns (uint);\n\n    function balanceOf(address tokenOwner) public view returns (uint balance);\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n\ncontract Config is DSNote, DSAuth, Utils {\n\n    WETH9 public weth9;\n    mapping (address => bool) public isAccountHandler;\n    mapping (address => bool) public isAdmin;\n    address[] public admins;\n    bool public disableAdminControl = false;\n    \n    event LogAdminAdded(address indexed _admin, address _by);\n    event LogAdminRemoved(address indexed _admin, address _by);\n\n    constructor() public {\n        admins.push(msg.sender);\n        isAdmin[msg.sender] = true;\n    }\n\n    modifier onlyAdmin(){\n        require(isAdmin[msg.sender], \"Config::_ SENDER_NOT_AUTHORIZED\");\n        _;\n    }\n\n    function setWETH9\n    (\n        address _weth9\n    ) \n        public\n        auth\n        note\n        addressValid(_weth9) \n    {\n        weth9 = WETH9(_weth9);\n    }\n\n    function setAccountHandler\n    (\n        address _accountHandler,\n        bool _isAccountHandler\n    )\n        public\n        auth\n        note\n        addressValid(_accountHandler)\n    {\n        isAccountHandler[_accountHandler] = _isAccountHandler;\n    }\n\n    function toggleAdminsControl() \n        public\n        auth\n        note\n    {\n        disableAdminControl = !disableAdminControl;\n    }\n\n    function isAdminValid(address _admin)\n        public\n        view\n        returns (bool)\n    {\n        if(disableAdminControl) {\n            return true;\n        } else {\n            return isAdmin[_admin];\n        }\n    }\n\n    function getAllAdmins()\n        public\n        view\n        returns(address[])\n    {\n        return admins;\n    }\n\n    function addAdmin\n    (\n        address _admin\n    )\n        external\n        note\n        onlyAdmin\n        addressValid(_admin)\n    {   \n        require(!isAdmin[_admin], \"Config::addAdmin ADMIN_ALREADY_EXISTS\");\n\n        admins.push(_admin);\n        isAdmin[_admin] = true;\n\n        emit LogAdminAdded(_admin, msg.sender);\n    }\n\n    function removeAdmin\n    (\n        address _admin\n    ) \n        external\n        note\n        onlyAdmin\n        addressValid(_admin)\n    {   \n        require(isAdmin[_admin], \"Config::removeAdmin ADMIN_DOES_NOT_EXIST\");\n        require(msg.sender != _admin, \"Config::removeAdmin ADMIN_NOT_AUTHORIZED\");\n\n        isAdmin[_admin] = false;\n\n        for (uint i = 0; i < admins.length - 1; i++) {\n            if (admins[i] == _admin) {\n                admins[i] = admins[admins.length - 1];\n                admins.length -= 1;\n                break;\n            }\n        }\n\n        emit LogAdminRemoved(_admin, msg.sender);\n    }\n}\n\n\nlibrary ECRecovery {\n\n    function recover(bytes32 _hash, bytes _sig)\n        internal\n        pure\n    returns (address)\n    {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        if (_sig.length != 65) {\n            return (address(0));\n        }\n\n        assembly {\n            r := mload(add(_sig, 32))\n            s := mload(add(_sig, 64))\n            v := byte(0, mload(add(_sig, 96)))\n        }\n\n        if (v < 27) {\n            v += 27;\n        }\n\n        if (v != 27 && v != 28) {\n            return (address(0));\n        } else {\n            return ecrecover(_hash, v, r, s);\n        }\n    }\n\n    function toEthSignedMessageHash(bytes32 _hash)\n        internal\n        pure\n    returns (bytes32)\n    {\n        return keccak256(\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _hash)\n        );\n    }\n}\n\n\ncontract Utils2 {\n    using ECRecovery for bytes32;\n    \n    function _recoverSigner(bytes32 _hash, bytes _signature) \n        internal\n        pure\n        returns(address _signer)\n    {\n        return _hash.toEthSignedMessageHash().recover(_signature);\n    }\n\n}\n\n\ncontract DSThing is DSNote, DSAuth, DSMath {\n\n    function S(string s) internal pure returns (bytes4) {\n        return bytes4(keccak256(s));\n    }\n\n}\n\n\ninterface KyberNetworkProxy {\n\n    function maxGasPrice() public view returns(uint);\n    function getUserCapInWei(address user) public view returns(uint);\n    function getUserCapInTokenWei(address user, ERC20 token) public view returns(uint);\n    function enabled() public view returns(bool);\n    function info(bytes32 id) public view returns(uint);\n\n    function swapTokenToToken(ERC20 src, uint srcAmount, ERC20 dest, uint minConversionRate) public returns(uint);\n    function swapEtherToToken(ERC20 token, uint minConversionRate) public payable returns(uint);\n    function swapTokenToEther(ERC20 token, uint srcAmount, uint minConversionRate) public returns(uint);\n\n    function getExpectedRate\n    (\n        ERC20 src,\n        ERC20 dest, \n        uint srcQty\n    ) \n        public\n        view\n        returns \n    (\n        uint expectedRate,\n        uint slippageRate\n    );\n\n    function tradeWithHint\n    (\n        ERC20 src,\n        uint srcAmount,\n        ERC20 dest,\n        address destAddress,\n        uint maxDestAmount,\n        uint minConversionRate,\n        address walletId,\n        bytes hint\n    )\n        public \n        payable \n        returns(uint);\n        \n}\n\n\ncontract DSStop is DSNote, DSAuth {\n\n    bool public stopped = false;\n\n    modifier whenNotStopped {\n        require(!stopped, \"DSStop::_ FEATURE_STOPPED\");\n        _;\n    }\n\n    modifier whenStopped {\n        require(stopped, \"DSStop::_ FEATURE_NOT_STOPPED\");\n        _;\n    }\n\n    function stop() public auth note {\n        stopped = true;\n    }\n    function start() public auth note {\n        stopped = false;\n    }\n\n}\n\n\ncontract Account is MasterCopy, DSNote, Utils, Utils2, ErrorUtils {\n\n    address[] public users;\n    mapping (address => bool) public isUser;\n    mapping (bytes32 => bool) public actionCompleted;\n\n    WETH9 public weth9;\n    Config public config;\n    bool public isInitialized = false;\n\n    event LogTransferBySystem(address indexed token, address indexed to, uint value, address by);\n    event LogTransferByUser(address indexed token, address indexed to, uint value, address by);\n    event LogUserAdded(address indexed user, address by);\n    event LogUserRemoved(address indexed user, address by);\n\n    modifier initialized() {\n        require(isInitialized, \"Account::_ ACCOUNT_NOT_INITIALIZED\");\n        _;\n    }\n\n    modifier userExists(address _user) {\n        require(isUser[_user], \"Account::_ INVALID_USER\");\n        _;\n    }\n\n    modifier userDoesNotExist(address _user) {\n        require(!isUser[_user], \"Account::_ USER_DOES_NOT_EXISTS\");\n        _;\n    }\n\n    modifier onlyHandler(){\n        require(config.isAccountHandler(msg.sender), \"Account::_ INVALID_ACC_HANDLER\");\n        _;\n    }\n\n    function init(address _user, address _config) public {\n        users.push(_user);\n        isUser[_user] = true;\n        config = Config(_config);\n        weth9 = config.weth9();\n        isInitialized = true;\n    }\n    \n    function getAllUsers() public view returns (address[]) {\n        return users;\n    }\n\n    function balanceFor(address _token) public view returns (uint _balance){\n        _balance = ERC20(_token).balanceOf(this);\n    }\n    \n    function transferBySystem\n    (   \n        address _token,\n        address _to,\n        uint _value\n    ) \n        external \n        onlyHandler\n        note \n        initialized\n    {\n        require(ERC20(_token).balanceOf(this) >= _value, \"Account::transferBySystem INSUFFICIENT_BALANCE_IN_ACCOUNT\");\n        require(ERC20(_token).transfer(_to, _value), \"Account::transferBySystem TOKEN_TRANSFER_FAILED\");\n\n        emit LogTransferBySystem(_token, _to, _value, msg.sender);\n    }\n    \n    function transferByUser\n    (   \n        address _token,\n        address _to,\n        uint _value,\n        uint _salt,\n        bytes _signature\n    ) \n        external\n        addressValid(_to)\n        note\n        initialized\n    {\n        bytes32 actionHash = _getTransferActionHash(_token, _to, _value, _salt);\n\n        if(actionCompleted[actionHash]) {\n            emit LogError(\"Account::transferByUser\", \"ACTION_ALREADY_PERFORMED\");\n            return;\n        }\n\n        if(ERC20(_token).balanceOf(this) < _value){\n            emit LogError(\"Account::transferByUser\", \"INSUFFICIENT_BALANCE_IN_ACCOUNT\");\n            return;\n        }\n\n        address signer = _recoverSigner(actionHash, _signature);\n\n        if(!isUser[signer]) {\n            emit LogError(\"Account::transferByUser\", \"SIGNER_NOT_AUTHORIZED_WITH_ACCOUNT\");\n            return;\n        }\n\n        actionCompleted[actionHash] = true;\n        \n        if (_token == address(weth9)) {\n            weth9.withdraw(_value);\n            _to.transfer(_value);\n        } else {\n            require(ERC20(_token).transfer(_to, _value), \"Account::transferByUser TOKEN_TRANSFER_FAILED\");\n        }\n\n        emit LogTransferByUser(_token, _to, _value, signer);\n    }\n\n    function addUser\n    (\n        address _user,\n        uint _salt,\n        bytes _signature\n    )\n        external \n        note \n        addressValid(_user)\n        userDoesNotExist(_user)\n        initialized\n    {   \n        bytes32 actionHash = _getUserActionHash(_user, \"ADD_USER\", _salt);\n        if(actionCompleted[actionHash])\n        {\n            emit LogError(\"Account::addUser\", \"ACTION_ALREADY_PERFORMED\");\n            return;\n        }\n\n        address signer = _recoverSigner(actionHash, _signature);\n\n        if(!isUser[signer]) {\n            emit LogError(\"Account::addUser\", \"SIGNER_NOT_AUTHORIZED_WITH_ACCOUNT\");\n            return;\n        }\n\n        actionCompleted[actionHash] = true;\n\n        users.push(_user);\n        isUser[_user] = true;\n\n        emit LogUserAdded(_user, signer);\n    }\n\n    function removeUser\n    (\n        address _user,\n        uint _salt,\n        bytes _signature\n    ) \n        external\n        note\n        userExists(_user) \n        initialized\n    {   \n        bytes32 actionHash = _getUserActionHash(_user, \"REMOVE_USER\", _salt);\n\n        if(actionCompleted[actionHash]) {\n            emit LogError(\"Account::removeUser\", \"ACTION_ALREADY_PERFORMED\");\n            return;\n        }\n\n        address signer = _recoverSigner(actionHash, _signature);\n        \n        // discussed with ratnesh -> 9-Jan-2019\n        // require(signer != _user, \"Account::removeUser SIGNER_NOT_AUTHORIZED_WITH_ACCOUNT\");\n        if(!isUser[signer]){\n            emit LogError(\"Account::removeUser\", \"SIGNER_NOT_AUTHORIZED_WITH_ACCOUNT\");\n            return;\n        }\n        \n        actionCompleted[actionHash] = true;\n\n        // should delete value from isUser map? delete isUser[_user]?\n        isUser[_user] = false;\n        for (uint i = 0; i < users.length - 1; i++) {\n            if (users[i] == _user) {\n                users[i] = users[users.length - 1];\n                users.length -= 1;\n                break;\n            }\n        }\n\n        emit LogUserRemoved(_user, signer);\n    }\n\n    function _getTransferActionHash\n    ( \n        address _token,\n        address _to,\n        uint _value,\n        uint _salt\n    ) \n        internal\n        view\n        returns (bytes32)\n    {\n        return keccak256(\n            abi.encodePacked(\n                address(this),\n                _token,\n                _to,\n                _value,\n                _salt\n            )\n        );\n    }\n\n    function _getUserActionHash\n    ( \n        address _user,\n        string _action,\n        uint _salt\n    ) \n        internal\n        view\n        returns (bytes32)\n    {\n        return keccak256(\n            abi.encodePacked(\n                address(this),\n                _user,\n                _action,\n                _salt\n            )\n        );\n    }\n\n    // to directly send ether to contract\n    function() external payable {\n        require(msg.data.length == 0 && msg.value > 0, \"Account::fallback INVALID_ETHER_TRANSFER\");\n\n        if(msg.sender != address(weth9)){\n            weth9.deposit.value(msg.value)();\n        }\n    }\n    \n}\n\n\ncontract AccountFactory is DSStop, Utils {\n    Config public config;\n    mapping (address => bool) public isAccount;\n    mapping (address => address[]) public userToAccounts;\n    address[] public accounts;\n\n    address public accountMaster;\n\n    constructor\n    (\n        Config _config, \n        address _accountMaster\n    ) \n    public \n    {\n        config = _config;\n        accountMaster = _accountMaster;\n    }\n\n    event LogAccountCreated(address indexed user, address indexed account, address by);\n\n    modifier onlyAdmin() {\n        require(config.isAdminValid(msg.sender), \"AccountFactory::_ INVALID_ADMIN_ACCOUNT\");\n        _;\n    }\n\n    function setConfig(Config _config) external note auth addressValid(_config) {\n        config = _config;\n    }\n\n    function setAccountMaster(address _accountMaster) external note auth addressValid(_accountMaster) {\n        accountMaster = _accountMaster;\n    }\n\n    function newAccount(address _user)\n        public\n        note\n        onlyAdmin\n        addressValid(config)\n        addressValid(accountMaster)\n        whenNotStopped\n        returns \n        (\n            Account _account\n        ) \n    {\n        address proxy = new Proxy(accountMaster);\n        _account = Account(proxy);\n        _account.init(_user, config);\n\n        accounts.push(_account);\n        userToAccounts[_user].push(_account);\n        isAccount[_account] = true;\n\n        emit LogAccountCreated(_user, _account, msg.sender);\n    }\n    \n    function batchNewAccount(address[] _users) public note onlyAdmin {\n        for (uint i = 0; i < _users.length; i++) {\n            newAccount(_users[i]);\n        }\n    }\n\n    function getAllAccounts() public view returns (address[]) {\n        return accounts;\n    }\n\n    function getAccountsForUser(address _user) public view returns (address[]) {\n        return userToAccounts[_user];\n    }\n\n}\n\n\ncontract Escrow is DSNote, DSAuth {\n\n    event LogTransfer(address indexed token, address indexed to, uint value);\n    event LogTransferFromAccount(address indexed account, address indexed token, address indexed to, uint value);\n\n    function transfer\n    (\n        address _token,\n        address _to,\n        uint _value\n    )\n        public\n        note\n        auth\n    {\n        require(ERC20(_token).transfer(_to, _value), \"Escrow::transfer TOKEN_TRANSFER_FAILED\");\n        emit LogTransfer(_token, _to, _value);\n    }\n\n    function transferFromAccount\n    (\n        address _account,\n        address _token,\n        address _to,\n        uint _value\n    )\n        public\n        note\n        auth\n    {   \n        Account(_account).transferBySystem(_token, _to, _value);\n        emit LogTransferFromAccount(_account, _token, _to, _value);\n    }\n\n}\n\n\ncontract KyberConnector is DSNote, DSAuth, Utils {\n    KyberNetworkProxy public kyber;\n\n    constructor(KyberNetworkProxy _kyber) public {\n        kyber = _kyber;\n    }\n\n    function setKyber(KyberNetworkProxy _kyber) \n        public\n        auth\n        addressValid(_kyber)\n    {\n        kyber = _kyber;\n    }\n\n    event LogTrade\n    (\n        address indexed _from,\n        address indexed _srcToken,\n        address indexed _destToken,\n        uint _srcTokenValue,\n        uint _maxDestTokenValue,\n        uint _destTokenValue,\n        uint _srcTokenValueLeft\n    );\n\n    function trade\n    (   \n        Escrow _escrow,\n        ERC20 _srcToken,\n        ERC20 _destToken,\n        uint _srcTokenValue,\n        uint _maxDestTokenValue\n    )\n        external\n        note\n        auth\n        returns (uint _destTokenValue, uint _srcTokenValueLeft)\n    {   \n        require(address(_srcToken) != address(_destToken), \"KyberConnector::process TOKEN_ADDRS_SHOULD_NOT_MATCH\");\n\n        uint _slippageRate;\n        (, _slippageRate) = kyber.getExpectedRate(_srcToken, _destToken, _srcTokenValue);\n\n        uint initialSrcTokenBalance = _srcToken.balanceOf(this);\n\n        require(_srcToken.balanceOf(_escrow) >= _srcTokenValue, \"KyberConnector::process INSUFFICIENT_BALANCE_IN_ESCROW\");\n        _escrow.transfer(_srcToken, this, _srcTokenValue);\n\n        require(_srcToken.approve(kyber, 0), \"KyberConnector::process SRC_APPROVAL_FAILED\");\n        require(_srcToken.approve(kyber, _srcTokenValue), \"KyberConnector::process SRC_APPROVAL_FAILED\");\n        \n        _destTokenValue = kyber.tradeWithHint(\n            _srcToken,\n            _srcTokenValue,\n            _destToken,\n            this,\n            _maxDestTokenValue,\n            _slippageRate, //0, // no min coversation rate\n            address(0), // TODO: check if needed\n            \"\"// bytes(0) \n        );\n\n        _srcTokenValueLeft = _srcToken.balanceOf(this) - initialSrcTokenBalance;\n\n        require(_transfer(_destToken, _escrow, _destTokenValue), \"KyberConnector::process DEST_TOKEN_TRANSFER_FAILED\");\n        require(_transfer(_srcToken, _escrow, _srcTokenValueLeft), \"KyberConnector::process SRC_TOKEN_TRANSFER_FAILED\");\n\n        emit LogTrade(_escrow, _srcToken, _destToken, _srcTokenValue, _maxDestTokenValue, _destTokenValue, _srcTokenValueLeft);\n    } \n\n    function getExpectedRate(ERC20 _srcToken, ERC20 _destToken, uint _srcTokenValue) \n        public\n        view\n        returns(uint _expectedRate, uint _slippageRate)\n    {\n        (_expectedRate, _slippageRate) = kyber.getExpectedRate(_srcToken, _destToken, _srcTokenValue);\n    }\n\n    function isTradeFeasible(ERC20 _srcToken, ERC20 _destToken, uint _srcTokenValue) \n        public\n        view\n        returns(bool)\n    {\n        uint slippageRate; \n\n        (, slippageRate) = getExpectedRate(\n            ERC20(_srcToken),\n            ERC20(_destToken),\n            _srcTokenValue\n        );\n\n        return slippageRate == 0 ? false : true;\n    }\n\n    function _transfer\n    (\n        ERC20 _token,\n        address _to,\n        uint _value\n    )\n        internal\n        returns (bool)\n    {\n        return _token.transfer(_to, _value);\n    }\n}\n\n\ncontract Reserve is DSStop, DSThing, Utils, Utils2, ErrorUtils {\n\n    Escrow public escrow;\n    AccountFactory public accountFactory;\n    DateTime public dateTime;\n    Config public config;\n    uint public deployTimestamp;\n\n    string constant public VERSION = \"1.0.0\";\n\n    uint public TIME_INTERVAL = 1 days;\n    \n    constructor\n    (\n        Escrow _escrow,\n        AccountFactory _accountFactory,\n        DateTime _dateTime,\n        Config _config\n    ) \n    public \n    {\n        escrow = _escrow;\n        accountFactory = _accountFactory;\n        dateTime = _dateTime;\n        config = _config;\n        deployTimestamp = now - (4 * TIME_INTERVAL);\n    }\n\n    function setEscrow(Escrow _escrow) \n        public \n        note \n        auth\n        addressValid(_escrow)\n    {\n        escrow = _escrow;\n    }\n\n    function setAccountFactory(AccountFactory _accountFactory) \n        public \n        note \n        auth\n        addressValid(_accountFactory)\n    {\n        accountFactory = _accountFactory;\n    }\n\n    function setDateTime(DateTime _dateTime) \n        public \n        note \n        auth\n        addressValid(_dateTime)\n    {\n        dateTime = _dateTime;\n    }\n\n    function setConfig(Config _config) \n        public \n        note \n        auth\n        addressValid(_config)\n    {\n        config = _config;\n    }\n\n    struct Order {\n        address account;\n        address token;\n        address byUser;\n        uint value;\n        uint duration;\n        uint expirationTimestamp;\n        uint salt;\n        uint createdTimestamp;\n        bytes32 orderHash;\n    }\n\n    bytes32[] public orders;\n    mapping (bytes32 => Order) public hashToOrder;\n    mapping (bytes32 => bool) public isOrder;\n    mapping (address => bytes32[]) public accountToOrders;\n    mapping (bytes32 => bool) public cancelledOrders;\n\n    // per day\n    mapping (uint => mapping(address => uint)) public deposits;\n    mapping (uint => mapping(address => uint)) public withdrawals;\n    mapping (uint => mapping(address => uint)) public profits;\n    mapping (uint => mapping(address => uint)) public losses;\n\n    mapping (uint => mapping(address => uint)) public reserves;\n    mapping (address => uint) public lastReserveRuns;\n\n    mapping (address => mapping(address => uint)) surplus;\n\n    mapping (bytes32 => CumulativeRun) public orderToCumulative;\n\n    struct CumulativeRun {\n        uint timestamp;\n        uint value;\n    }\n\n    modifier onlyAdmin() {\n        require(config.isAdminValid(msg.sender), \"Reserve::_ INVALID_ADMIN_ACCOUNT\");\n        _;\n    }\n\n    event LogOrderCreated(\n        bytes32 indexed orderHash,\n        address indexed account,\n        address indexed token,\n        address byUser,\n        uint value,\n        uint expirationTimestamp\n    );\n\n    event LogOrderCancelled(\n        bytes32 indexed orderHash,\n        address indexed by\n    );\n\n    event LogReserveValuesUpdated(\n        address indexed token, \n        uint indexed updatedTill,\n        uint reserve,\n        uint profit,\n        uint loss\n    );\n\n    event LogOrderCumulativeUpdated(\n        bytes32 indexed orderHash,\n        uint updatedTill,\n        uint value\n    );\n\n    event LogRelease(\n        address indexed token,\n        address indexed to,\n        uint value,\n        address by\n    );\n\n    event LogLock(\n        address indexed token,\n        address indexed from,\n        uint value,\n        uint profit,\n        uint loss,\n        address by\n    );\n\n    event LogLockSurplus(\n        address indexed forToken, \n        address indexed token,\n        address from,\n        uint value\n    );\n\n    event LogTransferSurplus(\n        address indexed forToken,\n        address indexed token,\n        address to, \n        uint value\n    );\n    \n    function createOrder\n    (\n        address[3] _orderAddresses,\n        uint[3] _orderValues,\n        bytes _signature\n    ) \n        public\n        note\n        onlyAdmin\n        whenNotStopped\n    {\n        Order memory order = _composeOrder(_orderAddresses, _orderValues);\n        address signer = _recoverSigner(order.orderHash, _signature);\n\n        if(signer != order.byUser){\n            emit LogErrorWithHintBytes32(order.orderHash, \"Reserve::createOrder\", \"SIGNER_NOT_ORDER_CREATOR\");\n            return;\n        }\n        \n        if(isOrder[order.orderHash]){\n            emit LogErrorWithHintBytes32(order.orderHash, \"Reserve::createOrder\", \"ORDER_ALREADY_EXISTS\");\n            return;\n        }\n\n        if(!accountFactory.isAccount(order.account)){\n            emit LogErrorWithHintBytes32(order.orderHash, \"Reserve::createOrder\", \"INVALID_ORDER_ACCOUNT\");\n            return;\n        }\n\n        if(!Account(order.account).isUser(signer)){\n            emit LogErrorWithHintBytes32(order.orderHash, \"Reserve::createOrder\", \"SIGNER_NOT_AUTHORIZED_WITH_ACCOUNT\");\n            return;\n        }\n                \n        if(!_isOrderValid(order)) {\n            emit LogErrorWithHintBytes32(order.orderHash, \"Reserve::createOrder\", \"INVALID_ORDER_PARAMETERS\");\n            return;\n        }\n\n        if(ERC20(order.token).balanceOf(order.account) < order.value){\n            emit LogErrorWithHintBytes32(order.orderHash, \"Reserve::createOrder\", \"INSUFFICIENT_BALANCE_IN_ACCOUNT\");\n            return;\n        }\n\n        escrow.transferFromAccount(order.account, order.token, address(escrow), order.value);\n        \n        orders.push(order.orderHash);\n        hashToOrder[order.orderHash] = order;\n        isOrder[order.orderHash] = true;\n        accountToOrders[order.account].push(order.orderHash);\n\n        uint dateTimestamp = _getDateTimestamp(now);\n\n        deposits[dateTimestamp][order.token] = add(deposits[dateTimestamp][order.token], order.value);\n        \n        orderToCumulative[order.orderHash].timestamp = _getDateTimestamp(order.createdTimestamp);\n        orderToCumulative[order.orderHash].value = order.value;\n\n        emit LogOrderCreated(\n            order.orderHash,\n            order.account,\n            order.token,\n            order.byUser,\n            order.value,\n            order.expirationTimestamp\n        );\n    }\n\n    function cancelOrder\n    (\n        bytes32 _orderHash,\n        bytes _signature\n    )\n        external\n        note\n        onlyAdmin\n    {   \n        if(!isOrder[_orderHash]) {\n            emit LogErrorWithHintBytes32(_orderHash,\"Reserve::createOrder\", \"ORDER_DOES_NOT_EXIST\");\n            return;\n        }\n\n        if(cancelledOrders[_orderHash]){\n            emit LogErrorWithHintBytes32(_orderHash,\"Reserve::createOrder\", \"ORDER_ALREADY_CANCELLED\");\n            return;\n        }\n\n        Order memory order = hashToOrder[_orderHash];\n\n        bytes32 cancelOrderHash = _generateActionOrderHash(_orderHash, \"CANCEL_RESERVE_ORDER\");\n        address signer = _recoverSigner(cancelOrderHash, _signature);\n        \n        if(!Account(order.account).isUser(signer)){\n            emit LogErrorWithHintBytes32(_orderHash,\"Reserve::createOrder\", \"SIGNER_NOT_AUTHORIZED_WITH_ACCOUNT\");\n            return;\n        }\n        \n        doCancelOrder(order);\n    }\n    \n    function processOrder\n    (\n        bytes32 _orderHash\n    ) \n        external \n        note\n        onlyAdmin\n    {\n        if(!isOrder[_orderHash]) {\n            emit LogErrorWithHintBytes32(_orderHash,\"Reserve::processOrder\", \"ORDER_DOES_NOT_EXIST\");\n            return;\n        }\n\n        if(cancelledOrders[_orderHash]){\n            emit LogErrorWithHintBytes32(_orderHash,\"Reserve::processOrder\", \"ORDER_ALREADY_CANCELLED\");\n            return;\n        }\n\n        Order memory order = hashToOrder[_orderHash];\n\n        if(now > _getDateTimestamp(order.expirationTimestamp)) {\n            doCancelOrder(order);\n        } else {\n            emit LogErrorWithHintBytes32(order.orderHash, \"Reserve::processOrder\", \"ORDER_NOT_EXPIRED\");\n        }\n    }\n\n    function doCancelOrder(Order _order) \n        internal\n    {   \n        uint valueToTransfer = orderToCumulative[_order.orderHash].value;\n\n        if(ERC20(_order.token).balanceOf(escrow) < valueToTransfer){\n            emit LogErrorWithHintBytes32(_order.orderHash, \"Reserve::doCancel\", \"INSUFFICIENT_BALANCE_IN_ESCROW\");\n            return;\n        }\n\n        uint nowDateTimestamp = _getDateTimestamp(now);\n        cancelledOrders[_order.orderHash] = true;\n        withdrawals[nowDateTimestamp][_order.token] = add(withdrawals[nowDateTimestamp][_order.token], valueToTransfer);\n\n        escrow.transfer(_order.token, _order.account, valueToTransfer);\n        emit LogOrderCancelled(_order.orderHash, msg.sender);\n    }\n\n    function release(address _token, address _to, uint _value) \n        external\n        note\n        auth\n    {   \n        require(ERC20(_token).balanceOf(escrow) >= _value, \"Reserve::release INSUFFICIENT_BALANCE_IN_ESCROW\");\n        escrow.transfer(_token, _to, _value);\n        emit LogRelease(_token, _to, _value, msg.sender);\n    }\n\n    // _value includes profit/loss as well\n    function lock(address _token, address _from, uint _value, uint _profit, uint _loss)\n        external\n        note\n        auth\n    {   \n        require(!(_profit == 0 && _loss == 0), \"Reserve::lock INVALID_PROFIT_LOSS_VALUES\");\n        require(ERC20(_token).balanceOf(_from) >= _value, \"Reserve::lock INSUFFICIENT_BALANCE\");\n            \n        if(accountFactory.isAccount(_from)) {\n            escrow.transferFromAccount(_from, _token, address(escrow), _value);\n        } else {\n            Escrow(_from).transfer(_token, address(escrow), _value);\n        }\n        \n        uint dateTimestamp = _getDateTimestamp(now);\n\n        if (_profit > 0){\n            profits[dateTimestamp][_token] = add(profits[dateTimestamp][_token], _profit);\n        } else if (_loss > 0) {\n            losses[dateTimestamp][_token] = add(losses[dateTimestamp][_token], _loss);\n        }\n\n        emit LogLock(_token, _from, _value, _profit, _loss, msg.sender);\n    }\n\n    // to lock collateral if cannot be liquidated e.g. not enough reserves in kyber\n    function lockSurplus(address _from, address _forToken, address _token, uint _value) \n        external\n        note\n        auth\n    {\n        require(ERC20(_token).balanceOf(_from) >= _value, \"Reserve::lockSurplus INSUFFICIENT_BALANCE_IN_ESCROW\");\n\n        Escrow(_from).transfer(_token, address(escrow), _value);\n        surplus[_forToken][_token] = add(surplus[_forToken][_token], _value);\n\n        emit LogLockSurplus(_forToken, _token, _from, _value);\n    }\n\n    // to transfer surplus collateral out of the system to trade on other platforms and put back in terms of \n    // principal to reserve manually using an account or surplus escrow\n    // should work in tandem with lock method when transferring back principal\n    function transferSurplus(address _to, address _forToken, address _token, uint _value) \n        external\n        note\n        auth\n    {\n        require(ERC20(_token).balanceOf(escrow) >= _value, \"Reserve::transferSurplus INSUFFICIENT_BALANCE_IN_ESCROW\");\n        require(surplus[_forToken][_token] >= _value, \"Reserve::transferSurplus INSUFFICIENT_SURPLUS\");\n\n        surplus[_forToken][_token] = sub(surplus[_forToken][_token], _value);\n        escrow.transfer(_token, _to, _value);\n\n        emit LogTransferSurplus(_forToken, _token, _to, _value);\n    }\n\n    function updateReserveValues(address _token, uint _forDays)\n        public\n        note\n        onlyAdmin\n    {   \n        uint lastReserveRun = lastReserveRuns[_token];\n\n        if (lastReserveRun == 0) {\n            lastReserveRun = _getDateTimestamp(deployTimestamp) - TIME_INTERVAL;\n        }\n\n        uint nowDateTimestamp = _getDateTimestamp(now);\n        uint updatesLeft = ((nowDateTimestamp - TIME_INTERVAL) - lastReserveRun) / TIME_INTERVAL;\n\n        if(updatesLeft == 0) {\n            emit LogErrorWithHintAddress(_token, \"Reserve::updateReserveValues\", \"RESERVE_VALUES_UP_TO_DATE\");\n            return;\n        }\n\n        uint counter = updatesLeft;\n\n        if(updatesLeft > _forDays && _forDays > 0) {\n            counter = _forDays;\n        }\n\n        for (uint i = 0; i < counter; i++) {\n            reserves[lastReserveRun + TIME_INTERVAL][_token] = sub(\n                sub(\n                    add(\n                        add(\n                            reserves[lastReserveRun][_token],\n                            deposits[lastReserveRun + TIME_INTERVAL][_token]\n                        ),\n                        profits[lastReserveRun + TIME_INTERVAL][_token]\n                    ),\n                    losses[lastReserveRun + TIME_INTERVAL][_token]\n                ),\n                withdrawals[lastReserveRun + TIME_INTERVAL][_token]\n            );\n            lastReserveRuns[_token] = lastReserveRun + TIME_INTERVAL;\n            lastReserveRun = lastReserveRuns[_token];\n            \n            emit LogReserveValuesUpdated(\n                _token,\n                lastReserveRun,\n                reserves[lastReserveRun][_token],\n                profits[lastReserveRun][_token],\n                losses[lastReserveRun][_token]\n            );\n            \n        }\n    }\n\n    function updateOrderCumulativeValueBatch(bytes32[] _orderHashes, uint[] _forDays) \n        public\n        note\n        onlyAdmin\n    {   \n        if(_orderHashes.length != _forDays.length) {\n            emit LogError(\"Reserve::updateOrderCumulativeValueBatch\", \"ARGS_ARRAYLENGTH_MISMATCH\");\n            return;\n        }\n\n        for(uint i = 0; i < _orderHashes.length; i++) {\n            updateOrderCumulativeValue(_orderHashes[i], _forDays[i]);\n        }\n    }\n\n    function updateOrderCumulativeValue\n    (\n        bytes32 _orderHash, \n        uint _forDays\n    ) \n        public\n        note\n        onlyAdmin \n    {\n        if(!isOrder[_orderHash]) {\n            emit LogErrorWithHintBytes32(_orderHash, \"Reserve::updateOrderCumulativeValue\", \"ORDER_DOES_NOT_EXIST\");\n            return;\n        }\n\n        if(cancelledOrders[_orderHash]) {\n            emit LogErrorWithHintBytes32(_orderHash, \"Reserve::updateOrderCumulativeValue\", \"ORDER_ALREADY_CANCELLED\");\n            return;\n        }\n        \n        Order memory order = hashToOrder[_orderHash];\n        CumulativeRun storage cumulativeRun = orderToCumulative[_orderHash];\n        \n        uint profitsAccrued = 0;\n        uint lossesAccrued = 0;\n        uint cumulativeValue = 0;\n        uint counter = 0;\n\n        uint lastOrderRun = cumulativeRun.timestamp;\n        uint nowDateTimestamp = _getDateTimestamp(now);\n\n        uint updatesLeft = ((nowDateTimestamp - TIME_INTERVAL) - lastOrderRun) / TIME_INTERVAL;\n\n        if(updatesLeft == 0) {\n            emit LogErrorWithHintBytes32(_orderHash, \"Reserve::updateOrderCumulativeValue\", \"ORDER_VALUES_UP_TO_DATE\");\n            return;\n        }\n\n        counter = updatesLeft;\n\n        if(updatesLeft > _forDays && _forDays > 0) {\n            counter = _forDays;\n        }\n\n        for (uint i = 0; i < counter; i++){\n            cumulativeValue = cumulativeRun.value;\n            lastOrderRun = cumulativeRun.timestamp;\n\n            if(lastReserveRuns[order.token] < lastOrderRun) {\n                emit LogErrorWithHintBytes32(_orderHash, \"Reserve::updateOrderCumulativeValue\", \"RESERVE_VALUES_NOT_UPDATED\");\n                emit LogOrderCumulativeUpdated(_orderHash, cumulativeRun.timestamp, cumulativeRun.value);\n                return;\n            }\n\n            profitsAccrued = div(\n                mul(profits[lastOrderRun + TIME_INTERVAL][order.token], cumulativeValue),\n                reserves[lastOrderRun][order.token]\n            );\n                \n            lossesAccrued = div(\n                mul(losses[lastOrderRun + TIME_INTERVAL][order.token], cumulativeValue),\n                reserves[lastOrderRun][order.token]\n            );\n\n            cumulativeValue = sub(add(cumulativeValue, profitsAccrued), lossesAccrued);\n\n            cumulativeRun.timestamp = lastOrderRun + TIME_INTERVAL;\n            cumulativeRun.value = cumulativeValue;\n        }\n        \n        emit LogOrderCumulativeUpdated(_orderHash, cumulativeRun.timestamp, cumulativeRun.value);\n    }\n\n    function getAllOrders() \n        public\n        view \n        returns \n        (\n            bytes32[]\n        ) \n    {\n        return orders;\n    }\n\n    function getOrdersForAccount(address _account) \n        public\n        view \n        returns \n        (\n            bytes32[]\n        )\n    {\n        return accountToOrders[_account];\n    }\n\n    function getOrder(bytes32 _orderHash)\n        public \n        view \n        returns \n        (\n            address _account,\n            address _token,\n            address _byUser,\n            uint _value,\n            uint _expirationTimestamp,\n            uint _salt,\n            uint _createdTimestamp\n        )\n    {   \n        Order memory order = hashToOrder[_orderHash];\n        return (\n            order.account,\n            order.token,\n            order.byUser,\n            order.value,\n            order.expirationTimestamp,\n            order.salt,\n            order.createdTimestamp\n        );\n    }\n\n    function _isOrderValid(Order _order)\n        internal\n        view\n        returns (bool)\n    {\n        if(_order.account == address(0) || _order.byUser == address(0)\n         || _order.value <= 0\n         || _order.expirationTimestamp <= _order.createdTimestamp || _order.salt <= 0) {\n            return false;\n        }\n\n        if(isOrder[_order.orderHash]) {\n            return false;\n        }\n\n        if(cancelledOrders[_order.orderHash]) {\n            return false;\n        }\n\n        return true;\n    }\n\n    function _composeOrder(address[3] _orderAddresses, uint[3] _orderValues)\n        internal\n        view\n        returns (Order _order)\n    {\n        Order memory order = Order({\n            account: _orderAddresses[0],\n            token: _orderAddresses[1],\n            byUser: _orderAddresses[2],\n            value: _orderValues[0],\n            createdTimestamp: now,\n            duration: _orderValues[1],\n            expirationTimestamp: add(now, _orderValues[1]),\n            salt: _orderValues[2],\n            orderHash: bytes32(0)\n        });\n\n        order.orderHash = _generateCreateOrderHash(order);\n\n        return order;\n    }\n\n    function _generateCreateOrderHash(Order _order)\n        internal\n        pure //view\n        returns (bytes32 _orderHash)\n    {\n        return keccak256(\n            abi.encodePacked(\n //              address(this),\n                _order.account,\n                _order.token,\n                _order.value,\n                _order.duration,\n                _order.salt\n            )\n        );\n    }\n\n    function _generateActionOrderHash\n    (\n        bytes32 _orderHash,\n        string _action\n    )\n        internal\n        pure //view\n        returns (bytes32 _repayOrderHash)\n    {\n        return keccak256(\n            abi.encodePacked(\n//                address(this),\n                _orderHash,\n                _action\n            )\n        );\n    }\n\n    function _getDateTimestamp(uint _timestamp) \n        internal\n        view\n        returns (uint)\n    {\n        // 1 day\n        return dateTime.toTimestamp(dateTime.getYear(_timestamp), dateTime.getMonth(_timestamp), dateTime.getDay(_timestamp));\n    } \n\n}\n\n\ncontract Kernel is DSStop, DSThing, Utils, Utils2, ErrorUtils {\n\n    Escrow public escrow;\n    AccountFactory public accountFactory;\n    Reserve public reserve;\n    address public feeWallet;\n    Config public config;\n    KyberConnector public kyberConnector;\n    \n    string constant public VERSION = \"1.0.0\";\n\n    constructor\n    (\n        Escrow _escrow,\n        AccountFactory _accountFactory,\n        Reserve _reserve,\n        address _feeWallet,\n        Config _config,\n        KyberConnector _kyberConnector\n    ) \n    public \n    {\n        escrow = _escrow;\n        accountFactory = _accountFactory;\n        reserve = _reserve;\n        feeWallet = _feeWallet;\n        config = _config;\n        kyberConnector = _kyberConnector;\n    }\n\n    function setEscrow(Escrow _escrow) \n        public \n        note \n        auth\n        addressValid(_escrow)\n    {\n        escrow = _escrow;\n    }\n\n    function setAccountFactory(AccountFactory _accountFactory)\n        public \n        note \n        auth\n        addressValid(_accountFactory)\n    {\n        accountFactory = _accountFactory;\n    }\n\n    function setReserve(Reserve _reserve)\n        public \n        note \n        auth\n        addressValid(_reserve)\n    {\n        reserve = _reserve;\n    }\n\n    function setConfig(Config _config)\n        public \n        note \n        auth\n        addressValid(_config)\n    {\n        config = _config;\n    }\n\n    function setKyberConnector(KyberConnector _kyberConnector)\n        public \n        note \n        auth\n        addressValid(_kyberConnector)\n    {\n        kyberConnector = _kyberConnector;\n    }\n\n    function setFeeWallet(address _feeWallet) \n        public \n        note \n        auth\n        addressValid(_feeWallet)\n    {\n        feeWallet = _feeWallet;\n    }\n\n    event LogOrderCreated(\n        bytes32 indexed orderHash,\n        address indexed account,\n        address indexed principalToken,\n        address collateralToken,\n        address byUser,\n        uint principalAmount,\n        uint collateralAmount,\n        uint premium, // should be in wad?\n        uint expirationTimestamp,\n        uint fee\n    );\n\n    event LogOrderRepaid(\n        bytes32 indexed orderHash,\n        uint  valueRepaid\n    );\n\n    event LogOrderDefaulted(\n        bytes32 indexed orderHash,\n        string reason\n    );\n\n    struct Order {\n        address account;\n        address byUser;\n        address principalToken; \n        address collateralToken;\n        uint principalAmount;\n        uint collateralAmount;\n        uint premium;\n        uint duration;\n        uint expirationTimestamp;\n        uint salt;\n        uint fee;\n        uint createdTimestamp;\n        bytes32 orderHash;\n    }\n\n    bytes32[] public orders;\n    mapping (bytes32 => Order) public hashToOrder;\n    mapping (bytes32 => bool) public isOrder;\n    mapping (address => bytes32[]) public accountToOrders;\n    \n    mapping (bytes32 => bool) public isRepaid;\n    mapping (bytes32 => bool) public isDefaulted;\n\n    modifier onlyAdmin() {\n        require(config.isAdminValid(msg.sender), \"Kernel::_ INVALID_ADMIN_ACCOUNT\");\n        _;\n    }\n\n    // add price to check collateralisation ratio?\n    function createOrder\n    (\n        address[4] _orderAddresses,\n        uint[6] _orderValues,\n        bytes _signature\n    )    \n        external\n        note\n        onlyAdmin\n        whenNotStopped\n    {   \n        Order memory order = _composeOrder(_orderAddresses, _orderValues);\n        address signer = _recoverSigner(order.orderHash, _signature);\n\n        if(signer != order.byUser) {\n            emit LogErrorWithHintBytes32(order.orderHash, \"Kernel::createOrder\",\"SIGNER_NOT_ORDER_CREATOR\");\n            return;\n        }\n\n        if(isOrder[order.orderHash]){\n            emit LogErrorWithHintBytes32(order.orderHash, \"Kernel::createOrder\",\"ORDER_ALREADY_EXISTS\");\n            return;\n        }\n\n        if(!accountFactory.isAccount(order.account)){\n            emit LogErrorWithHintBytes32(order.orderHash, \"Kernel::createOrder\",\"INVALID_ORDER_ACCOUNT\");\n            return;\n        }\n\n        if(!Account(order.account).isUser(signer)) {\n            emit LogErrorWithHintBytes32(order.orderHash, \"Kernel::createOrder\",\"SIGNER_NOT_AUTHORIZED_WITH_ACCOUNT\");\n            return;\n        }\n\n        if(!_isOrderValid(order)){\n            emit LogErrorWithHintBytes32(order.orderHash, \"Kernel::createOrder\",\"INVALID_ORDER_PARAMETERS\");\n            return;\n        }\n\n        if(ERC20(order.collateralToken).balanceOf(order.account) < order.collateralAmount){\n            emit LogErrorWithHintBytes32(order.orderHash, \"Kernel::createOrder\",\"INSUFFICIENT_COLLATERAL_IN_ACCOUNT\");\n            return;\n        }\n\n        if(ERC20(order.principalToken).balanceOf(reserve.escrow()) < order.principalAmount){\n            emit LogErrorWithHintBytes32(order.orderHash, \"Kernel::createOrder\",\"INSUFFICIENT_FUNDS_IN_RESERVE\");\n            return;\n        }\n        \n        orders.push(order.orderHash);\n        hashToOrder[order.orderHash] = order;\n        isOrder[order.orderHash] = true;\n        accountToOrders[order.account].push(order.orderHash);\n\n        escrow.transferFromAccount(order.account, order.collateralToken, address(escrow), order.collateralAmount);\n        reserve.release(order.principalToken, order.account, order.principalAmount);\n    \n        emit LogOrderCreated(\n            order.orderHash,\n            order.account,\n            order.principalToken,\n            order.collateralToken,\n            order.byUser,\n            order.principalAmount,\n            order.collateralAmount,\n            order.premium,\n            order.expirationTimestamp,\n            order.fee\n        );\n    }\n\n    function getExpectedRepayValue(bytes32 _orderHash) \n        public\n        view\n        returns (uint)\n    {\n        Order memory order = hashToOrder[_orderHash];\n        uint profits = sub(div(mul(order.principalAmount, order.premium), WAD), order.fee);\n        uint valueToRepay = add(order.principalAmount, profits);\n\n        return valueToRepay;\n    }\n\n    function repay\n    (\n        bytes32 _orderHash,\n        uint _value,\n        bytes _signature\n    ) \n        external\n        note\n        onlyAdmin\n    {   \n        if(!isOrder[_orderHash]){\n            emit LogErrorWithHintBytes32(_orderHash, \"Kernel::repay\",\"ORDER_DOES_NOT_EXIST\");\n            return;\n        }\n\n        if(isRepaid[_orderHash]){\n            emit LogErrorWithHintBytes32(_orderHash, \"Kernel::repay\",\"ORDER_ALREADY_REPAID\");\n            return;\n        }\n\n        if(isDefaulted[_orderHash]){\n            emit LogErrorWithHintBytes32(_orderHash, \"Kernel::repay\",\"ORDER_ALREADY_DEFAULTED\");\n            return;\n        }\n        \n        bytes32 repayOrderHash = _generateRepayOrderHash(_orderHash, _value);\n        address signer = _recoverSigner(repayOrderHash, _signature);\n\n        Order memory order = hashToOrder[_orderHash];\n        \n        if(!Account(order.account).isUser(signer)){\n            emit LogErrorWithHintBytes32(_orderHash, \"Kernel::repay\",\"SIGNER_NOT_AUTHORIZED_WITH_ACCOUNT\");\n            return;\n        }\n\n        if(ERC20(order.principalToken).balanceOf(order.account) < _value){\n            emit LogErrorWithHintBytes32(_orderHash, \"Kernel::repay\",\"INSUFFICIENT_BALANCE_IN_ACCOUNT\");\n            return;\n        }\n\n        uint profits = sub(div(mul(order.principalAmount, order.premium), WAD), order.fee);\n        uint valueToRepay = add(order.principalAmount, profits);\n\n        if(valueToRepay > _value){\n            emit LogErrorWithHintBytes32(_orderHash, \"Kernel::repay\",\"INSUFFICIENT_REPAYMENT\");\n            return;\n        }\n\n        escrow.transferFromAccount(order.account, order.principalToken, feeWallet, order.fee);\n        reserve.lock(order.principalToken, order.account, valueToRepay, profits, 0);\n        escrow.transfer(order.collateralToken, order.account, order.collateralAmount);\n\n        isRepaid[order.orderHash] = true;\n\n        emit LogOrderRepaid(\n            order.orderHash,\n            _value\n        );\n    }\n\n    function process\n    (\n        bytes32 _orderHash,\n        uint _principalPerCollateral // in WAD\n    )\n        external\n        note\n        onlyAdmin\n    {   \n        if(!isOrder[_orderHash]){\n            emit LogErrorWithHintBytes32(_orderHash, \"Kernel::process\",\"ORDER_DOES_NOT_EXIST\");\n            return;\n        }\n\n        if(isRepaid[_orderHash]){\n            emit LogErrorWithHintBytes32(_orderHash, \"Kernel::process\",\"ORDER_ALREADY_REPAID\");\n            return;\n        }\n\n        if(isDefaulted[_orderHash]){\n            emit LogErrorWithHintBytes32(_orderHash, \"Kernel::process\",\"ORDER_ALREADY_DEFAULTED\");\n            return;\n        }\n\n        Order memory order = hashToOrder[_orderHash];\n\n        bool isDefault = false;\n        string memory reason = \"\";\n\n        if(now > order.expirationTimestamp) {\n            isDefault = true;\n            reason = \"DUE_DATE_PASSED\";\n        } else if (!_isCollateralizationSafe(order, _principalPerCollateral)) {\n            isDefault = true;\n            reason = \"COLLATERAL_UNSAFE\";\n        }\n\n        isDefaulted[_orderHash] = isDefault;\n\n        if(isDefault) {\n            if (!kyberConnector.isTradeFeasible(\n                    ERC20(order.collateralToken), \n                    ERC20(order.principalToken),\n                    order.collateralAmount)\n                )\n            {\n                reserve.lockSurplus(\n                    escrow,\n                    order.principalToken,\n                    order.collateralToken,\n                    order.collateralAmount\n                );\n                \n            } else {\n                _performLiquidation(order);\n            }\n            \n            emit LogOrderDefaulted(order.orderHash, reason);\n        }\n\n    }\n\n    function _performLiquidation(Order _order) \n        internal\n    {\n        uint premiumValue = div(mul(_order.principalAmount, _order.premium), WAD);\n        uint valueToRepay = add(_order.principalAmount, premiumValue);\n\n        uint principalFromCollateral;\n        uint collateralLeft;\n        \n        (principalFromCollateral, collateralLeft) = kyberConnector.trade(\n            escrow,\n            ERC20(_order.collateralToken), \n            ERC20(_order.principalToken),\n            _order.collateralAmount,\n            valueToRepay\n        );\n\n        if (principalFromCollateral >= valueToRepay) {\n            escrow.transfer(_order.principalToken, feeWallet, _order.fee);\n\n            reserve.lock(\n                _order.principalToken,\n                escrow,\n                sub(principalFromCollateral, _order.fee),\n                sub(sub(principalFromCollateral,_order.principalAmount), _order.fee),\n                0\n            );\n\n            escrow.transfer(_order.collateralToken, _order.account, collateralLeft);\n\n        } else if((principalFromCollateral < valueToRepay) && (principalFromCollateral >= _order.principalAmount)) {\n            reserve.lock(\n                _order.principalToken,\n                escrow,\n                principalFromCollateral,\n                sub(principalFromCollateral, _order.principalAmount),\n                0\n            );\n\n        } else {\n            reserve.lock(\n                _order.principalToken,\n                escrow,\n                principalFromCollateral,\n                0,\n                sub(_order.principalAmount, principalFromCollateral)\n            );\n\n        }\n    }\n\n    function _isCollateralizationSafe(Order _order, uint _principalPerCollateral)\n        internal \n        pure\n        returns (bool)\n    {\n        uint totalCollateralValueInPrincipal = div(\n            mul(_order.collateralAmount, _principalPerCollateral),\n            WAD);\n        \n        uint premiumValue = div(mul(_order.principalAmount, _order.premium), WAD);\n        uint premiumValueBuffer = div(mul(premiumValue, 3), 100); \n        uint valueToRepay = add(add(_order.principalAmount, premiumValue), premiumValueBuffer);\n\n        if (totalCollateralValueInPrincipal < valueToRepay) {\n            return false;\n        }\n\n        return true;\n    }\n\n    function _generateRepayOrderHash\n    (\n        bytes32 _orderHash,\n        uint _value\n    )\n        internal\n        pure //view\n        returns (bytes32 _repayOrderHash)\n    {\n        return keccak256(\n            abi.encodePacked(\n                //address(this),\n                _orderHash,\n                _value\n            )\n        );\n    }\n\n    function _isOrderValid(Order _order)\n        internal\n        view\n        returns (bool)\n    {\n        if(_order.account == address(0) || _order.byUser == address(0) \n         || _order.principalToken == address(0) || _order.collateralToken == address(0) \n         || (_order.collateralToken == _order.principalToken)\n         || _order.principalAmount <= 0 || _order.collateralAmount <= 0\n         || _order.premium <= 0\n         || _order.expirationTimestamp <= _order.createdTimestamp || _order.salt <= 0) {\n            return false;\n        }\n\n        return true;\n    }\n\n    function _composeOrder\n    (\n        address[4] _orderAddresses,\n        uint[6] _orderValues\n    )\n        internal\n        view\n        returns (Order _order)\n    {\n        Order memory order = Order({\n            account: _orderAddresses[0], \n            byUser: _orderAddresses[1],\n            principalToken: _orderAddresses[2],\n            collateralToken: _orderAddresses[3],\n            principalAmount: _orderValues[0],\n            collateralAmount: _orderValues[1],\n            premium: _orderValues[2],\n            duration: _orderValues[3],\n            expirationTimestamp: add(now, _orderValues[3]),\n            salt: _orderValues[4],\n            fee: _orderValues[5],\n            createdTimestamp: now,\n            orderHash: bytes32(0)\n        });\n\n        order.orderHash = _generateOrderHash(order);\n    \n        return order;\n    }\n\n    function _generateOrderHash(Order _order)\n        internal\n        pure //view\n        returns (bytes32 _orderHash)\n    {\n        return keccak256(\n            abi.encodePacked(\n                //address(this),\n                _order.account,\n                _order.principalToken,\n                _order.collateralToken,\n                _order.principalAmount,\n                _order.collateralAmount,\n                _order.premium,\n                _order.duration,\n                _order.salt,\n                _order.fee\n            )\n        );\n    }\n\n    function getAllOrders()\n        public \n        view\n        returns \n        (\n            bytes32[]\n        )\n    {\n        return orders;\n    }\n\n    function getOrder(bytes32 _orderHash)\n        public \n        view \n        returns \n        (\n            address _account,\n            address _byUser,\n            address _principalToken,\n            address _collateralToken,\n            uint _principalAmount,\n            uint _collateralAmount,\n            uint _premium,\n            uint _expirationTimestamp,\n            uint _salt,\n            uint _fee,\n            uint _createdTimestamp\n        )\n    {   \n        Order memory order = hashToOrder[_orderHash];\n        return (\n            order.account,\n            order.byUser,\n            order.principalToken,\n            order.collateralToken,\n            order.principalAmount,\n            order.collateralAmount,\n            order.premium,\n            order.expirationTimestamp,\n            order.salt,\n            order.fee,\n            order.createdTimestamp\n        );\n    }\n\n    function getOrdersForAccount(address _account) \n        public\n        view \n        returns\n        (\n            bytes32[]\n        )\n    {\n        return accountToOrders[_account];\n    }\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderHash\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"repay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_orderHash\",\"type\":\"bytes32\"}],\"name\":\"getExpectedRepayValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_config\",\"type\":\"address\"}],\"name\":\"setConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kyberConnector\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isDefaulted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getOrdersForAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_orderHash\",\"type\":\"bytes32\"}],\"name\":\"getOrder\",\"outputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_byUser\",\"type\":\"address\"},{\"name\":\"_principalToken\",\"type\":\"address\"},{\"name\":\"_collateralToken\",\"type\":\"address\"},{\"name\":\"_principalAmount\",\"type\":\"uint256\"},{\"name\":\"_collateralAmount\",\"type\":\"uint256\"},{\"name\":\"_premium\",\"type\":\"uint256\"},{\"name\":\"_expirationTimestamp\",\"type\":\"uint256\"},{\"name\":\"_salt\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_createdTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accountFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kyberConnector\",\"type\":\"address\"}],\"name\":\"setKyberConnector\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountToOrders\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllOrders\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isRepaid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeWallet\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"setReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderHash\",\"type\":\"bytes32\"},{\"name\":\"_principalPerCollateral\",\"type\":\"uint256\"}],\"name\":\"process\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_accountFactory\",\"type\":\"address\"}],\"name\":\"setAccountFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderAddresses\",\"type\":\"address[4]\"},{\"name\":\"_orderValues\",\"type\":\"uint256[6]\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"createOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_escrow\",\"type\":\"address\"}],\"name\":\"setEscrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"hashToOrder\",\"outputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"byUser\",\"type\":\"address\"},{\"name\":\"principalToken\",\"type\":\"address\"},{\"name\":\"collateralToken\",\"type\":\"address\"},{\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"name\":\"premium\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"expirationTimestamp\",\"type\":\"uint256\"},{\"name\":\"salt\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"createdTimestamp\",\"type\":\"uint256\"},{\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_escrow\",\"type\":\"address\"},{\"name\":\"_accountFactory\",\"type\":\"address\"},{\"name\":\"_reserve\",\"type\":\"address\"},{\"name\":\"_feeWallet\",\"type\":\"address\"},{\"name\":\"_config\",\"type\":\"address\"},{\"name\":\"_kyberConnector\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"principalToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"byUser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"premium\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expirationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"LogOrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"valueRepaid\",\"type\":\"uint256\"}],\"name\":\"LogOrderRepaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"LogOrderDefaulted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"methodSig\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"errMsg\",\"type\":\"string\"}],\"name\":\"LogError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"bytes32Value\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"methodSig\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"errMsg\",\"type\":\"string\"}],\"name\":\"LogErrorWithHintBytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addressValue\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"methodSig\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"errMsg\",\"type\":\"string\"}],\"name\":\"LogErrorWithHintAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"}]",
  "bytecode": "60806040526001805460a060020a60ff021916905534801561002057600080fd5b5060405160c08061408083398101604081815282516020840151918401516060850151608086015160a09096015160018054600160a060020a03191633908117909155939694959294919391929091907fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a260028054600160a060020a0319908116600160a060020a0398891617909155600380548216968816969096179095556004805486169487169490941790935560058054851692861692909217909155600680548416918516919091179055600780549092169216919091179055613f6e806101126000396000f3006080604052600436106101875763ffffffff60e060020a60003504166307da68f5811461018c5780630b7e2e97146101a357806313af4035146101cb57806320cd1649146101ec57806320e3dbd4146102165780632b612988146102375780632fcdb8dd14610268578063359abaed146102945780635778472a14610305578063687cd9c1146103855780636d8a7b9d1461039a5780636dec3260146103bb57806375f12b21146103df57806379502c55146103f45780637a9e5e4b146104095780637bea0d1c1461042a578063817671551461043f5780638723555e146104575780638da5cb5b1461046f57806390d49b9d146104845780639cecc80a146104a5578063a85c38ef146104c6578063acfd6ce6146104de578063addc1a76146104f9578063be9a65551461051a578063bf7e214f1461052f578063c086504214610544578063c10c354614610569578063c559f6861461058a578063cd3293de14610619578063e2fdcc171461062e578063f25f4b5614610643578063ffa1ad7414610658575b600080fd5b34801561019857600080fd5b506101a16106e2565b005b3480156101af57600080fd5b506101a1600480359060248035916044359182019101356107c6565b3480156101d757600080fd5b506101a1600160a060020a03600435166110f0565b3480156101f857600080fd5b5061020460043561119a565b60408051918252519081900360200190f35b34801561022257600080fd5b506101a1600160a060020a0360043516611293565b34801561024357600080fd5b5061024c6113b3565b60408051600160a060020a039092168252519081900360200190f35b34801561027457600080fd5b506102806004356113c2565b604080519115158252519081900360200190f35b3480156102a057600080fd5b506102b5600160a060020a03600435166113d7565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102f15781810151838201526020016102d9565b505050509050019250505060405180910390f35b34801561031157600080fd5b5061031d600435611445565b60408051600160a060020a039c8d1681529a8c1660208c0152988b168a8a0152969099166060890152608088019490945260a087019290925260c086015260e08501526101008401526101208301939093526101408201929092529051908190036101600190f35b34801561039157600080fd5b5061024c611607565b3480156103a657600080fd5b506101a1600160a060020a0360043516611616565b3480156103c757600080fd5b50610204600160a060020a0360043516602435611736565b3480156103eb57600080fd5b50610280611766565b34801561040057600080fd5b5061024c611787565b34801561041557600080fd5b506101a1600160a060020a0360043516611796565b34801561043657600080fd5b506102b561183c565b34801561044b57600080fd5b50610280600435611895565b34801561046357600080fd5b506102806004356118aa565b34801561047b57600080fd5b5061024c6118bf565b34801561049057600080fd5b506101a1600160a060020a03600435166118ce565b3480156104b157600080fd5b506101a1600160a060020a03600435166119ee565b3480156104d257600080fd5b50610204600435611b0e565b3480156104ea57600080fd5b506101a1600435602435611b2d565b34801561050557600080fd5b506101a1600160a060020a03600435166121dd565b34801561052657600080fd5b506101a16122fd565b34801561053b57600080fd5b5061024c6123ca565b34801561055057600080fd5b506101a1600460846101443560248101908301356123d9565b34801561057557600080fd5b506101a1600160a060020a0360043516613146565b34801561059657600080fd5b506105a2600435613266565b60408051600160a060020a039e8f1681529c8e1660208e01529a8d168c8c015298909b1660608b015260808a019690965260a089019490945260c088019290925260e08701526101008601526101208501526101408401526101608301939093526101808201929092529051908190036101a00190f35b34801561062557600080fd5b5061024c6132de565b34801561063a57600080fd5b5061024c6132ed565b34801561064f57600080fd5b5061024c6132fc565b34801561066457600080fd5b5061066d61330b565b6040805160208082528351818301528351919283929083019185019080838360005b838110156106a757818101518382015260200161068f565b50505050905090810190601f1680156106d45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6106f833600035600160e060020a031916613342565b151561073c576040805160e560020a62461bcd02815260206004820152601f6024820152600080516020613ec3833981519152604482015290519081900360640190fd5b60408051348082526020820183815236938301849052600435936024359384938693339360008035600160e060020a031916949092606082018484808284376040519201829003965090945050505050a450506001805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000179055565b6000806107d1613e12565b6040805134808252602082018381523693830184905260009384936004359360243593849386933393600160e060020a03198a35169390928a929091606082018484808284376040519201829003965090945050505050a4600654604080517f9c14ee290000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a0390921691639c14ee29916024808201926020929091908290030181600087803b15801561088f57600080fd5b505af11580156108a3573d6000803e3d6000fd5b505050506040513d60208110156108b957600080fd5b50511515610911576040805160e560020a62461bcd02815260206004820152601f60248201527f4b65726e656c3a3a5f20494e56414c49445f41444d494e5f4143434f554e5400604482015290519081900360640190fd5b60008b8152600a602052604090205460ff1615156109a15760408051818152600d81830152600080516020613ea383398151915260608201526080602082018190526014908201527f4f524445525f444f45535f4e4f545f455849535400000000000000000000000060a082015290518c91600080516020613ee3833981519152919081900360c00190a26110e3565b60008b8152600c602052604090205460ff1615610a305760408051818152600d81830152600080516020613ea383398151915260608201526080602082018190526014908201527f4f524445525f414c52454144595f52455041494400000000000000000000000060a082015290518c91600080516020613ee3833981519152919081900360c00190a26110e3565b60008b8152600d602052604090205460ff1615610abf5760408051818152600d81830152600080516020613ea383398151915260608201526080602082018190526017908201527f4f524445525f414c52454144595f44454641554c54454400000000000000000060a082015290518c91600080516020613ee3833981519152919081900360c00190a26110e3565b610ac98b8b61344b565b9650610b05878a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437506134d1945050505050565b60008c815260096020818152604080842081516101a0810183528154600160a060020a03908116808352600184015482168387015260028401548216838601526003840154821660608401526004808501546080850152600585015460a0850152600685015460c0850152600785015460e0850152600885015461010085015296840154610120840152600a840154610140840152600b840154610160840152600c9093015461018083015283517f4209fff1000000000000000000000000000000000000000000000000000000008152908816958101959095529151959b5090995093634209fff1936024808501948390030190829087803b158015610c0b57600080fd5b505af1158015610c1f573d6000803e3d6000fd5b505050506040513d6020811015610c3557600080fd5b50511515610cdb5760408051818152600d81830152600080516020613ea383398151915260608201526080602082018190526022908201527f5349474e45525f4e4f545f415554484f52495a45445f574954485f4143434f5560a08201527f4e5400000000000000000000000000000000000000000000000000000000000060c082015290518c91600080516020613ee3833981519152919081900360e00190a26110e3565b898560400151600160a060020a03166370a0823187600001516040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b158015610d3f57600080fd5b505af1158015610d53573d6000803e3d6000fd5b505050506040513d6020811015610d6957600080fd5b50511015610de95760408051818152600d81830152600080516020613ea38339815191526060820152608060208201819052601f908201527f494e53554646494349454e545f42414c414e43455f494e5f4143434f554e540060a082015290518c91600080516020613ee3833981519152919081900360c00190a26110e3565b610e1a610e0f610e0187608001518860c001516134f3565b670de0b6b3a764000061351b565b866101400151613530565b9350610e2a856080015185613540565b925089831115610eac5760408051818152600d81830152600080516020613ea383398151915260608201526080602082018190526016908201527f494e53554646494349454e545f52455041594d454e540000000000000000000060a082015290518c91600080516020613ee3833981519152919081900360c00190a26110e3565b60025485516040808801516005546101408a015183517f5e61e1c8000000000000000000000000000000000000000000000000000000008152600160a060020a03958616600482015292851660248401529084166044830152606482015290519190921691635e61e1c891608480830192600092919082900301818387803b158015610f3757600080fd5b505af1158015610f4b573d6000803e3d6000fd5b5050600480546040808a01518a5182517f106689a5000000000000000000000000000000000000000000000000000000008152600160a060020a03928316958101959095528116602485015260448401899052606484018a905260006084850181905291519216945063106689a5935060a48084019391929182900301818387803b158015610fd957600080fd5b505af1158015610fed573d6000803e3d6000fd5b50506002546060880151885160a08a0151604080517fbeabacc8000000000000000000000000000000000000000000000000000000008152600160a060020a039485166004820152928416602484015260448301919091525191909216935063beabacc89250606480830192600092919082900301818387803b15801561107357600080fd5b505af1158015611087573d6000803e3d6000fd5b50505050610180850180516000908152600c6020908152604091829020805460ff19166001179055915181518d8152915190927f2d538ae573a2661798539a62b24b14e263cf75f5597027ac2ecfc44ba8ddf9e3928290030190a25b5050505050505050505050565b61110633600035600160e060020a031916613342565b151561114a576040805160e560020a62461bcd02815260206004820152601f6024820152600080516020613ec3833981519152604482015290519081900360640190fd5b60018054600160a060020a031916600160a060020a0383811691909117918290556040519116907fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a250565b60006111a4613e12565b50600082815260096020818152604080842081516101a0810183528154600160a060020a0390811682526001830154811694820194909452600282015484169281019290925260038101549092166060820152600482015460808201819052600583015460a0830152600683015460c08301819052600784015460e0840152600884015461010084015293830154610120830152600a830154610140830152600b830154610160830152600c909201546101808201529291829161127a9161126f91610e01916134f3565b846101400151613530565b915061128a836080015183613540565b95945050505050565b60408051348082526020820183815236938301849052600435936024359384938693339360008035600160e060020a031916949092606082018484808284376040519201829003965090945050505050a46112fa33600035600160e060020a031916613342565b151561133e576040805160e560020a62461bcd02815260206004820152601f6024820152600080516020613ec3833981519152604482015290519081900360640190fd5b82600160a060020a038116151561138d576040805160e560020a62461bcd0281526020600482015260186024820152600080516020613f23833981519152604482015290519081900360640190fd5b505060068054600160a060020a031916600160a060020a03939093169290921790915550565b600754600160a060020a031681565b600d6020526000908152604090205460ff1681565b600160a060020a0381166000908152600b602090815260409182902080548351818402810184019094528084526060939283018282801561143857602002820191906000526020600020905b81548152600190910190602001808311611423575b505050505090505b919050565b600080600080600080600080600080600061145e613e12565b600960008e600019166000191681526020019081526020016000206101a060405190810160405290816000820160009054906101000a9004600160a060020a0316600160a060020a0316600160a060020a031681526020016001820160009054906101000a9004600160a060020a0316600160a060020a0316600160a060020a031681526020016002820160009054906101000a9004600160a060020a0316600160a060020a0316600160a060020a031681526020016003820160009054906101000a9004600160a060020a0316600160a060020a0316600160a060020a03168152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a8201548152602001600b8201548152602001600c8201546000191660001916815250509050806000015181602001518260400151836060015184608001518560a001518660c001518761010001518861012001518961014001518a61016001519b509b509b509b509b509b509b509b509b509b509b505091939597999b90929496989a50565b600354600160a060020a031681565b60408051348082526020820183815236938301849052600435936024359384938693339360008035600160e060020a031916949092606082018484808284376040519201829003965090945050505050a461167d33600035600160e060020a031916613342565b15156116c1576040805160e560020a62461bcd02815260206004820152601f6024820152600080516020613ec3833981519152604482015290519081900360640190fd5b82600160a060020a0381161515611710576040805160e560020a62461bcd0281526020600482015260186024820152600080516020613f23833981519152604482015290519081900360640190fd5b505060078054600160a060020a031916600160a060020a03939093169290921790915550565b600b6020528160005260406000208181548110151561175157fe5b90600052602060002001600091509150505481565b60015474010000000000000000000000000000000000000000900460ff1681565b600654600160a060020a031681565b6117ac33600035600160e060020a031916613342565b15156117f0576040805160e560020a62461bcd02815260206004820152601f6024820152600080516020613ec3833981519152604482015290519081900360640190fd5b60008054600160a060020a031916600160a060020a03838116919091178083556040519116917f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada491a250565b6060600880548060200260200160405190810160405280929190818152602001828054801561188b57602002820191906000526020600020905b81548152600190910190602001808311611876575b5050505050905090565b600c6020526000908152604090205460ff1681565b600a6020526000908152604090205460ff1681565b600154600160a060020a031681565b60408051348082526020820183815236938301849052600435936024359384938693339360008035600160e060020a031916949092606082018484808284376040519201829003965090945050505050a461193533600035600160e060020a031916613342565b1515611979576040805160e560020a62461bcd02815260206004820152601f6024820152600080516020613ec3833981519152604482015290519081900360640190fd5b82600160a060020a03811615156119c8576040805160e560020a62461bcd0281526020600482015260186024820152600080516020613f23833981519152604482015290519081900360640190fd5b505060058054600160a060020a031916600160a060020a03939093169290921790915550565b60408051348082526020820183815236938301849052600435936024359384938693339360008035600160e060020a031916949092606082018484808284376040519201829003965090945050505050a4611a5533600035600160e060020a031916613342565b1515611a99576040805160e560020a62461bcd02815260206004820152601f6024820152600080516020613ec3833981519152604482015290519081900360640190fd5b82600160a060020a0381161515611ae8576040805160e560020a62461bcd0281526020600482015260186024820152600080516020613f23833981519152604482015290519081900360640190fd5b505060048054600160a060020a031916600160a060020a03939093169290921790915550565b6008805482908110611b1c57fe5b600091825260209091200154905081565b611b35613e12565b604080513480825260208201838152369383018490526000936060936004359360243593849386933393600160e060020a03198b35169390928b929091818c018484808284376040519201829003965090945050505050a4600654604080517f9c14ee290000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a0390921691639c14ee29916024808201926020929091908290030181600087803b158015611bf357600080fd5b505af1158015611c07573d6000803e3d6000fd5b505050506040513d6020811015611c1d57600080fd5b50511515611c75576040805160e560020a62461bcd02815260206004820152601f60248201527f4b65726e656c3a3a5f20494e56414c49445f41444d494e5f4143434f554e5400604482015290519081900360640190fd5b6000878152600a602052604090205460ff161515611d175760408051818152600f818301527f4b65726e656c3a3a70726f63657373000000000000000000000000000000000060608201526080602082018190526014908201527f4f524445525f444f45535f4e4f545f455849535400000000000000000000000060a082015290518891600080516020613ee3833981519152919081900360c00190a26121d4565b6000878152600c602052604090205460ff1615611db85760408051818152600f818301527f4b65726e656c3a3a70726f63657373000000000000000000000000000000000060608201526080602082018190526014908201527f4f524445525f414c52454144595f52455041494400000000000000000000000060a082015290518891600080516020613ee3833981519152919081900360c00190a26121d4565b6000878152600d602052604090205460ff1615611e595760408051818152600f818301527f4b65726e656c3a3a70726f63657373000000000000000000000000000000000060608201526080602082018190526017908201527f4f524445525f414c52454144595f44454641554c54454400000000000000000060a082015290518891600080516020613ee3833981519152919081900360c00190a26121d4565b600087815260096020818152604080842081516101a0810183528154600160a060020a03908116825260018301548116828601526002830154811682850152600383015416606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e08201526008820154610100820190815294820154610120820152600a820154610140820152600b820154610160820152600c9091015461018082015281519283019091528382529151919750919550909350421115611f605760408051808201909152600f81527f4455455f444154455f50415353454400000000000000000000000000000000006020820152600194509250611fab565b611f6a8587613550565b1515611fab5760408051808201909152601181527f434f4c4c41544552414c5f554e5341464500000000000000000000000000000060208201526001945092505b6000878152600d60205260409020805460ff191685158015919091179091556121d457600754606086015160408088015160a089015182517f5d0b4e5c000000000000000000000000000000000000000000000000000000008152600160a060020a0394851660048201529184166024830152604482015290519190921691635d0b4e5c9160648083019260209291908290030181600087803b15801561205157600080fd5b505af1158015612065573d6000803e3d6000fd5b505050506040513d602081101561207b57600080fd5b5051151561212c576004805460025460408089015160608a015160a08b015183517f42bb43dd000000000000000000000000000000000000000000000000000000008152600160a060020a03958616978101979097529184166024870152831660448601526064850152519116916342bb43dd91608480830192600092919082900301818387803b15801561210f57600080fd5b505af1158015612123573d6000803e3d6000fd5b50505050612135565b612135856135d2565b61018085015160408051602080825286518183015286517f98e393d0760ecfe8e3907134d357e8a4fa5b37e364c3baeb0b059a98317638c4938893928392918301919085019080838360005b83811015612199578181015183820152602001612181565b50505050905090810190601f1680156121c65780820380516001836020036101000a031916815260200191505b509250505060405180910390a25b50505050505050565b60408051348082526020820183815236938301849052600435936024359384938693339360008035600160e060020a031916949092606082018484808284376040519201829003965090945050505050a461224433600035600160e060020a031916613342565b1515612288576040805160e560020a62461bcd02815260206004820152601f6024820152600080516020613ec3833981519152604482015290519081900360640190fd5b82600160a060020a03811615156122d7576040805160e560020a62461bcd0281526020600482015260186024820152600080516020613f23833981519152604482015290519081900360640190fd5b505060038054600160a060020a031916600160a060020a03939093169290921790915550565b61231333600035600160e060020a031916613342565b1515612357576040805160e560020a62461bcd02815260206004820152601f6024820152600080516020613ec3833981519152604482015290519081900360640190fd5b60408051348082526020820183815236938301849052600435936024359384938693339360008035600160e060020a031916949092606082018484808284376040519201829003965090945050505050a450506001805474ff000000000000000000000000000000000000000019169055565b600054600160a060020a031681565b6123e1613e12565b604080513480825260208201838152369383018490526000936004359360243593849386933393600160e060020a03198a351693928a929190606082018484808284376040519201829003965090945050505050a4600654604080517f9c14ee290000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a0390921691639c14ee29916024808201926020929091908290030181600087803b15801561249c57600080fd5b505af11580156124b0573d6000803e3d6000fd5b505050506040513d60208110156124c657600080fd5b5051151561251e576040805160e560020a62461bcd02815260206004820152601f60248201527f4b65726e656c3a3a5f20494e56414c49445f41444d494e5f4143434f554e5400604482015290519081900360640190fd5b60015474010000000000000000000000000000000000000000900460ff1615612591576040805160e560020a62461bcd02815260206004820152601960248201527f445353746f703a3a5f20464541545552455f53544f5050454400000000000000604482015290519081900360640190fd5b6040805160808181019092526125d8918a90600490839083908082843750506040805160c081810190925293508c925060069150839083908082843750613a269350505050565b935061261984610180015187878080601f016020809104026020016040519081016040528093929190818152602001838380828437506134d1945050505050565b92508360200151600160a060020a031683600160a060020a03161415156126b55761018084015160408051818152601381830152600080516020613f0383398151915260608201526080602082018190526018908201527f5349474e45525f4e4f545f4f524445525f43524541544f52000000000000000060a08201529051600080516020613ee38339815191529181900360c00190a261313c565b6101808401516000908152600a602052604090205460ff161561274d5761018084015160408051818152601381830152600080516020613f0383398151915260608201526080602082018190526014908201527f4f524445525f414c52454144595f45584953545300000000000000000000000060a08201529051600080516020613ee38339815191529181900360c00190a261313c565b6003548451604080517f25ca4c9c000000000000000000000000000000000000000000000000000000008152600160a060020a039283166004820152905191909216916325ca4c9c9160248083019260209291908290030181600087803b1580156127b757600080fd5b505af11580156127cb573d6000803e3d6000fd5b505050506040513d60208110156127e157600080fd5b505115156128645761018084015160408051818152601381830152600080516020613f0383398151915260608201526080602082018190526015908201527f494e56414c49445f4f524445525f4143434f554e54000000000000000000000060a08201529051600080516020613ee38339815191529181900360c00190a261313c565b8360000151600160a060020a0316634209fff1846040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b1580156128c357600080fd5b505af11580156128d7573d6000803e3d6000fd5b505050506040513d60208110156128ed57600080fd5b505115156129965761018084015160408051818152601381830152600080516020613f0383398151915260608201526080602082018190526022908201527f5349474e45525f4e4f545f415554484f52495a45445f574954485f4143434f5560a08201527f4e5400000000000000000000000000000000000000000000000000000000000060c08201529051600080516020613ee38339815191529181900360e00190a261313c565b61299f84613ae1565b1515612a205761018084015160408051818152601381830152600080516020613f0383398151915260608201526080602082018190526018908201527f494e56414c49445f4f524445525f504152414d4554455253000000000000000060a08201529051600080516020613ee38339815191529181900360c00190a261313c565b8360a001518460600151600160a060020a03166370a0823186600001516040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b158015612a8857600080fd5b505af1158015612a9c573d6000803e3d6000fd5b505050506040513d6020811015612ab257600080fd5b50511015612b5b5761018084015160408051818152601381830152600080516020613f0383398151915260608201526080602082018190526022908201527f494e53554646494349454e545f434f4c4c41544552414c5f494e5f4143434f5560a08201527f4e5400000000000000000000000000000000000000000000000000000000000060c08201529051600080516020613ee38339815191529181900360e00190a261313c565b83608001518460400151600160a060020a03166370a08231600460009054906101000a9004600160a060020a0316600160a060020a031663e2fdcc176040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015612bc657600080fd5b505af1158015612bda573d6000803e3d6000fd5b505050506040513d6020811015612bf057600080fd5b50516040805160e060020a63ffffffff8516028152600160a060020a0390921660048301525160248083019260209291908290030181600087803b158015612c3757600080fd5b505af1158015612c4b573d6000803e3d6000fd5b505050506040513d6020811015612c6157600080fd5b50511015612ce45761018084015160408051818152601381830152600080516020613f038339815191526060820152608060208201819052601d908201527f494e53554646494349454e545f46554e44535f494e5f5245534552564500000060a08201529051600080516020613ee38339815191529181900360c00190a261313c565b6008846101800151908060018154018082558091505090600182039060005260206000200160009091929091909150906000191690555083600960008661018001516000191660001916815260200190815260200160002060008201518160000160006101000a815481600160a060020a030219169083600160a060020a0316021790555060208201518160010160006101000a815481600160a060020a030219169083600160a060020a0316021790555060408201518160020160006101000a815481600160a060020a030219169083600160a060020a0316021790555060608201518160030160006101000a815481600160a060020a030219169083600160a060020a031602179055506080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080155610120820151816009015561014082015181600a015561016082015181600b015561018082015181600c01906000191690559050506001600a60008661018001516000191660001916815260200190815260200160002060006101000a81548160ff021916908315150217905550600b60008560000151600160a060020a0316600160a060020a031681526020019081526020016000208461018001519080600181540180825580915050906001820390600052602060002001600090919290919091509060001916905550600260009054906101000a9004600160a060020a0316600160a060020a0316635e61e1c885600001518660600151600260009054906101000a9004600160a060020a03168860a001516040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184600160a060020a0316600160a060020a0316815260200183600160a060020a0316600160a060020a03168152602001828152602001945050505050600060405180830381600087803b158015612fbc57600080fd5b505af1158015612fd0573d6000803e3d6000fd5b505060048054604080890151895160808b015183517f8bfb07c9000000000000000000000000000000000000000000000000000000008152600160a060020a039384169681019690965290821660248601526044850152905191169350638bfb07c99250606480830192600092919082900301818387803b15801561305457600080fd5b505af1158015613068573d6000803e3d6000fd5b505050508360400151600160a060020a03168460000151600160a060020a0316856101800151600019167f42436fe8b8c5070e5a6cb3c26e7bc2e889f99c1857c1a1323c54b13fedc655f68760600151886020015189608001518a60a001518b60c001518c61010001518d61014001516040518088600160a060020a0316600160a060020a0316815260200187600160a060020a0316600160a060020a0316815260200186815260200185815260200184815260200183815260200182815260200197505050505050505060405180910390a45b5050505050505050565b60408051348082526020820183815236938301849052600435936024359384938693339360008035600160e060020a031916949092606082018484808284376040519201829003965090945050505050a46131ad33600035600160e060020a031916613342565b15156131f1576040805160e560020a62461bcd02815260206004820152601f6024820152600080516020613ec3833981519152604482015290519081900360640190fd5b82600160a060020a0381161515613240576040805160e560020a62461bcd0281526020600482015260186024820152600080516020613f23833981519152604482015290519081900360640190fd5b505060028054600160a060020a031916600160a060020a03939093169290921790915550565b600960208190526000918252604090912080546001820154600283015460038401546004850154600586015460068701546007880154600889015499890154600a8a0154600b8b0154600c909b0154600160a060020a039a8b169c998b169b988b169a9097169895979496939592949293919290918d565b600454600160a060020a031681565b600254600160a060020a031681565b600554600160a060020a031681565b60408051808201909152600581527f312e302e30000000000000000000000000000000000000000000000000000000602082015281565b6000600160a060020a03831630141561335d57506001613445565b600154600160a060020a038481169116141561337b57506001613445565b600054600160a060020a0316151561339557506000613445565b60008054604080517fb7009613000000000000000000000000000000000000000000000000000000008152600160a060020a038781166004830152306024830152600160e060020a0319871660448301529151919092169263b700961392606480820193602093909283900390910190829087803b15801561341657600080fd5b505af115801561342a573d6000803e3d6000fd5b505050506040513d602081101561344057600080fd5b505190505b92915050565b6040805160208082018590528183018490528251808303840181526060909201928390528151600093918291908401908083835b6020831061349e5780518252601f19909201916020918201910161347f565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209695505050505050565b60006134ec826134e085613bc1565b9063ffffffff613c6b16565b9392505050565b600081158061351057505080820282828281151561350d57fe5b04145b151561344557600080fd5b6000818381151561352857fe5b049392505050565b8082038281111561344557600080fd5b8082018281101561344557600080fd5b6000806000806000613569610e018860a00151886134f3565b9350613580610e0188608001518960c001516134f3565b92506135976135908460036134f3565b606461351b565b91506135b06135aa886080015185613540565b83613540565b9050808410156135c357600094506135c8565b600194505b5050505092915050565b6000806000806135ed610e0186608001518760c001516134f3565b93506135fd856080015185613540565b60075460025460608801516040808a015160a08b015182517f67f3c251000000000000000000000000000000000000000000000000000000008152600160a060020a03958616600482015293851660248501529084166044840152606483015260848201859052805194975091909216926367f3c2519260a48082019392918290030181600087803b15801561369257600080fd5b505af11580156136a6573d6000803e3d6000fd5b505050506040513d60408110156136bc57600080fd5b50805160209091015190925090508282106138c85760025460408087015160055461014089015183517fbeabacc8000000000000000000000000000000000000000000000000000000008152600160a060020a03938416600482015291831660248301526044820152915192169163beabacc89160648082019260009290919082900301818387803b15801561375157600080fd5b505af1158015613765573d6000803e3d6000fd5b505060045460408801516002546101408a0151600160a060020a03938416955063106689a594509192169061379b908790613530565b6137b76137ac888c60800151613530565b8b6101400151613530565b6040805160e060020a63ffffffff8816028152600160a060020a03958616600482015293909416602484015260448301919091526064820152600060848201819052915160a4808301939282900301818387803b15801561381757600080fd5b505af115801561382b573d6000803e3d6000fd5b505060025460608801518851604080517fbeabacc8000000000000000000000000000000000000000000000000000000008152600160a060020a0393841660048201529183166024830152604482018790525191909216935063beabacc89250606480830192600092919082900301818387803b1580156138ab57600080fd5b505af11580156138bf573d6000803e3d6000fd5b50505050613a1f565b82821080156138db575084608001518210155b156139725760045460408601516002546080880151600160a060020a039384169363106689a5939216908690613912908290613530565b6040805160e060020a63ffffffff8816028152600160a060020a03958616600482015293909416602484015260448301919091526064820152600060848201819052915160a4808301939282900301818387803b1580156138ab57600080fd5b60045460408601516002546080880151600160a060020a039384169363106689a59392169086906000906139a69083613530565b6040805160e060020a63ffffffff8916028152600160a060020a039687166004820152949095166024850152604484019290925260648301526084820152905160a480830192600092919082900301818387803b158015613a0657600080fd5b505af1158015613a1a573d6000803e3d6000fd5b505050505b5050505050565b613a2e613e12565b613a36613e12565b604080516101a0810182528551600160a060020a03908116825260208088015182168184015287840151821683850152606080890151909216828401528651608084015286015160a08301529185015160c0820152908401805160e083015251610100820190613aa7904290613540565b8152608080860151602083015260a0860151604083015242606083015260009101529050613ad481613d40565b6101808201529392505050565b8051600090600160a060020a03161580613b0657506020820151600160a060020a0316155b80613b1c57506040820151600160a060020a0316155b80613b3257506060820151600160a060020a0316155b80613b5657508160400151600160a060020a03168260600151600160a060020a0316145b80613b6657506000826080015111155b80613b76575060008260a0015111155b80613b86575060008260c0015111155b80613b9b575081610160015182610100015111155b80613bac5750600082610120015111155b15613bb957506000611440565b506001919050565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c80830185905283518084039091018152605c909201928390528151600093918291908401908083835b60208310613c395780518252601f199092019160209182019101613c1a565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912095945050505050565b60008060008084516041141515613c855760009350613d37565b50505060208201516040830151606084015160001a601b60ff82161015613caa57601b015b8060ff16601b14158015613cc257508060ff16601c14155b15613cd05760009350613d37565b60408051600080825260208083018085528a905260ff8516838501526060830187905260808301869052925160019360a0808501949193601f19840193928390039091019190865af1158015613d2a573d6000803e3d6000fd5b5050506020604051035193505b50505092915050565b80516040808301516060840151608085015160a086015160c087015160e08801516101208901516101408a015188516c01000000000000000000000000600160a060020a039b8c168102602080840191909152998c16810260348301529a9097169099026048870152605c860194909452607c850192909252609c84015260bc83015260dc82015260fc808201949094528251808203909401845261011c01918290528251600093929182919084019080838360208310613c395780518252601f199092019160209182019101613c1a565b6101a0604051908101604052806000600160a060020a031681526020016000600160a060020a031681526020016000600160a060020a031681526020016000600160a060020a03168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008019168152509056004b65726e656c3a3a7265706179000000000000000000000000000000000000004453417574683a3a5f2053454e4445525f4e4f545f415554484f52495a454400db0b341562703a7cbd47efa0b024b1ed2e3c68e2d313e46d276db9a46d8a6f804b65726e656c3a3a6372656174654f72646572000000000000000000000000005574696c733a3a5f20494e56414c49445f414444524553530000000000000000a165627a7a72305820b2fa97401901fa6742bde9584b4d97f50be4ff2e94201bd50e6126be7138ee230029000000000000000000000000af38668f4719ecf9452dc0300be3f6c83cbf3721000000000000000000000000f5a38fbc26c720c79350b99d9c0bd42b3e9b831600000000000000000000000064d14595152b430cf6940da15c6e39545c7c5b7e0000000000000000000000003e990e787a88cd4426fb3af9b90dd1d951e2cb87000000000000000000000000431f429035a1e3059d5c6a9a83208c6d3143d925000000000000000000000000fa49d0c82d0204fca8e596dc1bb42d307ae1184b",
  "constructorArguments": "000000000000000000000000af38668f4719ecf9452dc0300be3f6c83cbf3721000000000000000000000000f5a38fbc26c720c79350b99d9c0bd42b3e9b831600000000000000000000000064d14595152b430cf6940da15c6e39545c7c5b7e0000000000000000000000003e990e787a88cd4426fb3af9b90dd1d951e2cb87000000000000000000000000431f429035a1e3059d5c6a9a83208c6d3143d925000000000000000000000000fa49d0c82d0204fca8e596dc1bb42d307ae1184b"
}