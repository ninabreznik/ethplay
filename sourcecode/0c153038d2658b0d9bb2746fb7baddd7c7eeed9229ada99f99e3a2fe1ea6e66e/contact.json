{
  "address": "0xfc79774fb9dedeea2325d0d5570554eddc4e6747",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "VotePumpCoin0x",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-10\n*/\n\npragma solidity ^0.4.22;\n\n// ==> Token Price 0.00001 ETH\n// ==> Send 0 ETH to claim free VPC0x\n// ==> If you send above 0.02 ETH you will receive VPC0x and fill in the form here https://goo.gl/NzznV9\n// ==> Vote Your Token for Pumps with VPC0x\n// ==> Website https://votepumpcoin.me\n// ==> Telegram Channel : https://t.me/VPC0x\n\n\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract VotePumpCoin0xToken {\n    function balanceOf(address _owner) constant public returns (uint256);\n    function transfer(address _to, uint256 _value) public returns (bool);\n}\n\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) public constant returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public constant returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface Token { \n    function distr(address _to, uint256 _value) external returns (bool);\n    function totalSupply() constant external returns (uint256 supply);\n    function balanceOf(address _owner) constant external returns (uint256 balance);\n}\n\ncontract VotePumpCoin0x is ERC20 {\n\n \n    \n    using SafeMath for uint256;\n    address owner = msg.sender;\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    mapping (address => bool) public blacklist;\n\n    string public constant name = \"VotePumpCoin0x\";\n    string public constant symbol = \"VPC0x\";\n    uint public constant decimals = 18;\n    \nuint256 public totalSupply = 75000000e18;\n    \nuint256 public totalDistributed = 45000000e18;\n    \nuint256 public totalRemaining = totalSupply.sub(totalDistributed);\n    \nuint256 public value = 200e18;\n\n\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    \n    event Distr(address indexed to, uint256 amount);\n    event DistrFinished();\n    \n    event Burn(address indexed burner, uint256 value);\n\nbool public distributionFinished = false;\n    \n    modifier canDistr() {\n        require(!distributionFinished);\n        _;\n    }\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    modifier onlyWhitelist() {\n        require(blacklist[msg.sender] == false);\n        _;\n    }\n    \n    function VPC0x() public {\n        owner = msg.sender;\n        balances[owner] = totalDistributed;\n    }\n    \n    function transferOwnership(address newOwner) onlyOwner public {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n    \n    function finishDistribution() onlyOwner canDistr public returns (bool) {\n        distributionFinished = true;\n        emit DistrFinished();\n        return true;\n    }\n    \n    function distr(address _to, uint256 _amount) canDistr private returns (bool) {\n        totalDistributed = totalDistributed.add(_amount);\n        totalRemaining = totalRemaining.sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Distr(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n        return true;\n        \n        if (totalDistributed >= totalSupply) {\n            distributionFinished = true;\n        }\n    }\n    \n    function () external payable {\n        getTokens();\n     }\n    \n    function getTokens() payable canDistr onlyWhitelist public {\n        if (value > totalRemaining) {\n            value = totalRemaining;\n        }\n        \n        require(value <= totalRemaining);\n        \n        address investor = msg.sender;\n        uint256 toGive = value;\n        \n        distr(investor, toGive);\n        \n        if (toGive > 0) {\n            blacklist[investor] = true;\n        }\n\n        if (totalDistributed >= totalSupply) {\n            distributionFinished = true;\n        }\n        \n        value = value.div(100000).mul(99999);\n    }\n\n    function balanceOf(address _owner) constant public returns (uint256) {\n        return balances[_owner];\n    }\n\n    modifier onlyPayloadSize(uint size) {\n        assert(msg.data.length >= size + 4);\n        _;\n    }\n    \n    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\n        require(_to != address(0));\n        require(_amount <= balances[msg.sender]);\n        \n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n    \n    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\n        require(_to != address(0));\n        require(_amount <= balances[_from]);\n        require(_amount <= allowed[_from][msg.sender]);\n        \n        balances[_from] = balances[_from].sub(_amount);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(_from, _to, _amount);\n        return true;\n    }\n    \n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    function allowance(address _owner, address _spender) constant public returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n    \n    function getTokenBalance(address tokenAddress, address who) constant public returns (uint){\n        VotePumpCoin0xToken t = VotePumpCoin0xToken(tokenAddress);\n        uint bal = t.balanceOf(who);\n        return bal;\n    }\n    \n    function withdraw() onlyOwner public {\n        uint256 etherBalance = address(this).balance;\n        owner.transfer(etherBalance);\n    }\n    \n    function burn(uint256 _value) onlyOwner public {\n        require(_value <= balances[msg.sender]);\n\naddress burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        totalDistributed = totalDistributed.sub(_value);\n        emit Burn(burner, _value);\n    }\n    \n    function withdrawVPC0xTokens(address _tokenContract) onlyOwner public returns (bool) {\n        VotePumpCoin0xToken token = VotePumpCoin0xToken(_tokenContract);\n        uint256 amount = token.balanceOf(address(this));\n        return token.transfer(owner, amount);\n    }\n}",
  "bytecode": "608060405260018054600160a060020a031916331790556a3e09de2596099e2b00000060058190556a25391ee35a05c54d000000600681905561004f9190640100000000610e7861007b82021704565b600755680ad78ebc5ac62000006008556009805460ff1916905534801561007557600080fd5b5061008d565b60008282111561008757fe5b50900390565b610ec58061009c6000396000f3006080604052600436106101275763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610131578063095ea7b3146101bb57806318160ddd146101f357806323b872dd1461021a578063313ce567146102445780633ccfd60b146102595780633ef4c16b1461026e5780633fa4f2451461028f57806342966c68146102a457806370a08231146102bc57806395d89b41146102dd5780639b1cbccc146102f2578063a9059cbb14610307578063aa6ca80814610127578063c108d5421461032b578063c489744b14610340578063d5a34dfb14610367578063d8a543601461037c578063dd62ed3e14610391578063efca2eed146103b8578063f2fde38b146103cd578063f9f92be4146103ee575b61012f61040f565b005b34801561013d57600080fd5b506101466104ef565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610180578181015183820152602001610168565b50505050905090810190601f1680156101ad5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101c757600080fd5b506101df600160a060020a0360043516602435610526565b604080519115158252519081900360200190f35b3480156101ff57600080fd5b506102086105ce565b60408051918252519081900360200190f35b34801561022657600080fd5b506101df600160a060020a03600435811690602435166044356105d4565b34801561025057600080fd5b50610208610759565b34801561026557600080fd5b5061012f61075e565b34801561027a57600080fd5b506101df600160a060020a03600435166107b8565b34801561029b57600080fd5b5061020861090c565b3480156102b057600080fd5b5061012f600435610912565b3480156102c857600080fd5b50610208600160a060020a03600435166109f1565b3480156102e957600080fd5b50610146610a0c565b3480156102fe57600080fd5b506101df610a43565b34801561031357600080fd5b506101df600160a060020a0360043516602435610aa9565b34801561033757600080fd5b506101df610b9a565b34801561034c57600080fd5b50610208600160a060020a0360043581169060243516610ba3565b34801561037357600080fd5b5061012f610c54565b34801561038857600080fd5b50610208610c95565b34801561039d57600080fd5b50610208600160a060020a0360043581169060243516610c9b565b3480156103c457600080fd5b50610208610cc6565b3480156103d957600080fd5b5061012f600160a060020a0360043516610ccc565b3480156103fa57600080fd5b506101df600160a060020a0360043516610d1e565b600954600090819060ff161561042457600080fd5b3360009081526004602052604090205460ff161561044157600080fd5b6007546008541115610454576007546008555b600754600854111561046557600080fd5b505060085433906104768282610d33565b5060008111156104a457600160a060020a0382166000908152600460205260409020805460ff191660011790555b600554600654106104bd576009805460ff191660011790555b6104e86201869f6104dc620186a0600854610e3690919063ffffffff16565b9063ffffffff610e4d16565b6008555050565b60408051808201909152600e81527f566f746550756d70436f696e3078000000000000000000000000000000000000602082015281565b600081158015906105595750336000908152600360209081526040808320600160a060020a038716845290915290205415155b15610566575060006105c8565b336000818152600360209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b60055481565b6000606060643610156105e357fe5b600160a060020a03841615156105f857600080fd5b600160a060020a03851660009081526002602052604090205483111561061d57600080fd5b600160a060020a038516600090815260036020908152604080832033845290915290205483111561064d57600080fd5b600160a060020a038516600090815260026020526040902054610676908463ffffffff610e7816565b600160a060020a03861660009081526002602090815260408083209390935560038152828220338352905220546106b3908463ffffffff610e7816565b600160a060020a0380871660009081526003602090815260408083203384528252808320949094559187168152600290915220546106f7908463ffffffff610e8a16565b600160a060020a0380861660008181526002602090815260409182902094909455805187815290519193928916927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3506001949350505050565b601281565b600154600090600160a060020a0316331461077857600080fd5b50600154604051303191600160a060020a03169082156108fc029083906000818181858888f193505050501580156107b4573d6000803e3d6000fd5b5050565b60015460009081908190600160a060020a031633146107d657600080fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051859350600160a060020a038416916370a082319160248083019260209291908290030181600087803b15801561083a57600080fd5b505af115801561084e573d6000803e3d6000fd5b505050506040513d602081101561086457600080fd5b5051600154604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810184905290519293509084169163a9059cbb916044808201926020929091908290030181600087803b1580156108d857600080fd5b505af11580156108ec573d6000803e3d6000fd5b505050506040513d602081101561090257600080fd5b5051949350505050565b60085481565b600154600090600160a060020a0316331461092c57600080fd5b3360009081526002602052604090205482111561094857600080fd5b5033600081815260026020526040902054610969908363ffffffff610e7816565b600160a060020a038216600090815260026020526040902055600554610995908363ffffffff610e7816565b6005556006546109ab908363ffffffff610e7816565b600655604080518381529051600160a060020a038316917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a25050565b600160a060020a031660009081526002602052604090205490565b60408051808201909152600581527f5650433078000000000000000000000000000000000000000000000000000000602082015281565b600154600090600160a060020a03163314610a5d57600080fd5b60095460ff1615610a6d57600080fd5b6009805460ff191660011790556040517f7f95d919e78bdebe8a285e6e33357c2fcb65ccf66e72d7573f9f8f6caad0c4cc90600090a150600190565b600060406044361015610ab857fe5b600160a060020a0384161515610acd57600080fd5b33600090815260026020526040902054831115610ae957600080fd5b33600090815260026020526040902054610b09908463ffffffff610e7816565b3360009081526002602052604080822092909255600160a060020a03861681522054610b3b908463ffffffff610e8a16565b600160a060020a0385166000818152600260209081526040918290209390935580518681529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35060019392505050565b60095460ff1681565b600080600084915081600160a060020a03166370a08231856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b158015610c1f57600080fd5b505af1158015610c33573d6000803e3d6000fd5b505050506040513d6020811015610c4957600080fd5b505195945050505050565b6001805473ffffffffffffffffffffffffffffffffffffffff1916331790819055600654600160a060020a0391909116600090815260026020526040902055565b60075481565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b60065481565b600154600160a060020a03163314610ce357600080fd5b600160a060020a03811615610d1b576001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b60046020526000908152604090205460ff1681565b60095460009060ff1615610d4657600080fd5b600654610d59908363ffffffff610e8a16565b600655600754610d6f908363ffffffff610e7816565b600755600160a060020a038316600090815260026020526040902054610d9b908363ffffffff610e8a16565b600160a060020a038416600081815260026020908152604091829020939093558051858152905191927f8940c4b8e215f8822c5c8f0056c12652c746cbc57eedbd2a440b175971d47a7792918290030190a2604080518381529051600160a060020a038516916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35060016105c8565b6000808284811515610e4457fe5b04949350505050565b6000828202831580610e695750828482811515610e6657fe5b04145b1515610e7157fe5b9392505050565b600082821115610e8457fe5b50900390565b600082820183811015610e7157fe00a165627a7a723058200e48645bd05f54a3c6628e79c11acb8ff68efda860ee4d5e664d1ab5d144aa770029"
}