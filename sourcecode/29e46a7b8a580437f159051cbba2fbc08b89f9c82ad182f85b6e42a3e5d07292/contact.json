{
  "address": "0x75aa7b0d02532f3833b66c7f0ad35376d373ddf8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Accord",
  "compilerVersion": "v0.4.19-nightly.2017.11.11+commit.284c3839",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-05\n*/\n\npragma solidity ^0.4.12;\n\n\n\n/**\n\n * @title SafeMath\n\n * @dev Math operations with safety checks that throw on error\n\n */\n\nlibrary SafeMath {\n\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n\n    uint256 c = a * b;\n\n    assert(a == 0 || c / a == b);\n\n    return c;\n\n  }\n\n\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n\n    uint256 c = a / b;\n\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n\n  }\n\n\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n\n    assert(b <= a);\n\n    return a - b;\n\n  }\n\n\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n\n    uint256 c = a + b;\n\n    assert(c >= a);\n\n    return c;\n\n  }\n\n}\n\n\n\n\n\n/**\n\n * @title Ownable\n\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n\n * functions, this simplifies the implementation of \"user permissions\".\n\n */\n\ncontract Ownable {\n\n  address public owner;\n\n\n\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n\n\n\n  /**\n\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n\n   * account.\n\n   */\n\n  function Ownable() {\n\n    owner = msg.sender;\n\n  }\n\n\n\n\n\n  /**\n\n   * @dev Throws if called by any account other than the owner.\n\n   */\n\n  modifier onlyOwner() {\n\n    require(msg.sender == owner);\n\n    _;\n\n  }\n\n\n\n\n\n  /**\n\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n\n   * @param newOwner The address to transfer ownership to.\n\n   */\n\n  function transferOwnership(address newOwner) onlyOwner public {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n\n  }\n\n}\n\n\n\n/**\n\n * @title ERC20Basic\n\n * @dev Simpler version of ERC20 interface\n\n * @dev see https://github.com/ethereum/EIPs/issues/179\n\n */\n\ncontract ERC20Basic {\n\n  uint256 public totalSupply;\n\n  function balanceOf(address who) public constant returns (uint256);\n\n  function transfer(address to, uint256 value) public returns (bool);\n\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n}\n\n\n\n\n\n/**\n\n * @title Basic token\n\n * @dev Basic version of StandardToken, with no allowances.\n\n */\n\ncontract BasicToken is ERC20Basic {\n\n  using SafeMath for uint256;\n\n\n\n  mapping(address => uint256) balances;\n\n\n\n  /**\n\n  * @dev transfer token for a specified address\n\n  * @param _to The address to transfer to.\n\n  * @param _value The amount to be transferred.\n\n  */\n\n  function transfer(address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n\n\n    // SafeMath.sub will throw if there is not enough balance.\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n\n  }\n\n\n\n  /**\n\n  * @dev Gets the balance of the specified address.\n\n  * @param _owner The address to query the the balance of.\n\n  * @return An uint256 representing the amount owned by the passed address.\n\n  */\n\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n\n    return balances[_owner];\n\n  }\n\n}\n\n\n\n/**\n\n * @title ERC20 interface\n\n * @dev see https://github.com/ethereum/EIPs/issues/20\n\n */\n\ncontract ERC20 is ERC20Basic {\n\n  function allowance(address owner, address spender) public constant returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n}\n\n\n\n\n\n/**\n\n * @title Standard ERC20 token\n\n *\n\n * @dev Implementation of the basic standard token.\n\n * @dev https://github.com/ethereum/EIPs/issues/20\n\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n\n */\n\ncontract StandardToken is ERC20, BasicToken {\n\n\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n\n\n\n  /**\n\n   * @dev Transfer tokens from one address to another\n\n   * @param _from address The address which you want to send tokens from\n\n   * @param _to address The address which you want to transfer to\n\n   * @param _value uint256 the amount of tokens to be transferred\n\n   */\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n\n\n    uint256 _allowance = allowed[_from][msg.sender];\n\n\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n\n    // require (_value <= _allowance);\n\n\n\n    balances[_from] = balances[_from].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n\n    Transfer(_from, _to, _value);\n\n    return true;\n\n  }\n\n\n\n  /**\n\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n\n   *\n\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n   * @param _spender The address which will spend the funds.\n\n   * @param _value The amount of tokens to be spent.\n\n   */\n\n  function approve(address _spender, uint256 _value) public returns (bool) {\n\n    allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n\n  }\n\n\n\n  /**\n\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n\n   * @param _owner address The address which owns the funds.\n\n   * @param _spender address The address which will spend the funds.\n\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n\n   */\n\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n\n    return allowed[_owner][_spender];\n\n  }\n\n\n\n  /**\n\n   * approve should be called when allowed[_spender] == 0. To increment\n\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n\n   * the first transaction is mined)\n\n   * From MonolithDAO Token.sol\n\n   */\n\n  function increaseApproval (address _spender, uint _addedValue)\n\n    returns (bool success) {\n\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n\n  }\n\n\n\n  function decreaseApproval (address _spender, uint _subtractedValue)\n\n    returns (bool success) {\n\n    uint oldValue = allowed[msg.sender][_spender];\n\n    if (_subtractedValue > oldValue) {\n\n      allowed[msg.sender][_spender] = 0;\n\n    } else {\n\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n    }\n\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n\n  }\n\n}\n\n\n\n\n\n/**\n\n * @title Burnable Token\n\n * @dev Token that can be irreversibly burned (destroyed).\n\n */\n\ncontract BurnableToken is StandardToken {\n\n\n\n    event Burn(address indexed burner, uint256 value);\n\n\n\n    /**\n\n     * @dev Burns a specific amount of tokens.\n\n     * @param _value The amount of token to be burned.\n\n     */\n\n    function burn(uint256 _value) public {\n\n        require(_value > 0);\n\n        require(_value <= balances[msg.sender]);\n\n        // no need to require value <= totalSupply, since that would imply the\n\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n\n\n        address burner = msg.sender;\n\n        balances[burner] = balances[burner].sub(_value);\n\n        totalSupply = totalSupply.sub(_value);\n\n        Burn(burner, _value);\n\n    }\n\n}\n\n\n\ncontract Accord is BurnableToken, Ownable {\n\n\n\n    string public constant name = \"Accord\";\n\n    string public constant symbol = \"ARD\";\n\n    uint public constant decimals = 18;\n\n    uint256 public constant initialSupply = 200000000 * (10 ** uint256(decimals));\n\n\n\n    // Constructor\n\n    function Accord() {\n\n        totalSupply = initialSupply;\n\n        balances[msg.sender] = initialSupply; // Send all tokens to owner\n\n    }\n\n\n\n    uint256 public tokenPerEther;\n\n\n\n    function setTokenPerEther(uint256 _tokenPerEther) onlyOwner {\n\n      tokenPerEther = _tokenPerEther;\n\n    }\n\n\n\n    \n\n    function sell(uint256 amount){\n\n      require(balanceOf(msg.sender)>=amount);\n\n      balances[owner] = balances[owner].add(amount);\n\n      balances[msg.sender] = balances[msg.sender].sub(amount);\n\n\n\n      uint256 _wei;\n\n\n\n      _wei = (amount/tokenPerEther).mul(10**(18-decimals));\n\n\n\n      if(!msg.sender.send(_wei)){\n\n        throw;\n\n      }else{\n\n        Transfer(msg.sender,owner,amount);\n\n      }\n\n    }\n\n\n\n    function() payable {}\n\n}",
  "bytecode": "6060604052341561000f57600080fd5b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506012600a0a630bebc200026000819055506012600a0a630bebc20002600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611848806100be6000396000f3006060604052600436106100fc576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100fe578063095ea7b31461018c57806318160ddd146101e657806323b872dd1461020f5780632cf3f1f3146102885780632f77dba4146102ab578063313ce567146102d4578063378dc3dc146102fd57806342966c6814610326578063661884631461034957806370a08231146103a35780638da5cb5b146103f057806395d89b4114610445578063a9059cbb146104d3578063d73dd6231461052d578063dd62ed3e14610587578063e4849b32146105f3578063f2fde38b14610616575b005b341561010957600080fd5b61011161064f565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610151578082015181840152602081019050610136565b50505050905090810190601f16801561017e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561019757600080fd5b6101cc600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610688565b604051808215151515815260200191505060405180910390f35b34156101f157600080fd5b6101f961077a565b6040518082815260200191505060405180910390f35b341561021a57600080fd5b61026e600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610780565b604051808215151515815260200191505060405180910390f35b341561029357600080fd5b6102a96004808035906020019091905050610a6c565b005b34156102b657600080fd5b6102be610ad2565b6040518082815260200191505060405180910390f35b34156102df57600080fd5b6102e7610ad8565b6040518082815260200191505060405180910390f35b341561030857600080fd5b610310610add565b6040518082815260200191505060405180910390f35b341561033157600080fd5b6103476004808035906020019091905050610aeb565b005b341561035457600080fd5b610389600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c4e565b604051808215151515815260200191505060405180910390f35b34156103ae57600080fd5b6103da600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610edf565b6040518082815260200191505060405180910390f35b34156103fb57600080fd5b610403610f28565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561045057600080fd5b610458610f4e565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561049857808201518184015260208101905061047d565b50505050905090810190601f1680156104c55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104de57600080fd5b610513600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610f87565b604051808215151515815260200191505060405180910390f35b341561053857600080fd5b61056d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061115d565b604051808215151515815260200191505060405180910390f35b341561059257600080fd5b6105dd600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611359565b6040518082815260200191505060405180910390f35b34156105fe57600080fd5b61061460048080359060200190919050506113e0565b005b341561062157600080fd5b61064d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061165a565b005b6040805190810160405280600681526020017f4163636f7264000000000000000000000000000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b600080600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156107bf57600080fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905061089083600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546117b290919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061092583600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546117cb90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061097b83826117b290919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ac857600080fd5b8060048190555050565b60045481565b601281565b6012600a0a630bebc2000281565b60008082111515610afb57600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610b4957600080fd5b339050610b9e82600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546117b290919063ffffffff16565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610bf6826000546117b290919063ffffffff16565b6000819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a25050565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610d5f576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610df3565b610d7283826117b290919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f415244000000000000000000000000000000000000000000000000000000000081525081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610fc457600080fd5b61101682600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546117b290919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506110ab82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546117cb90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60006111ee82600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546117cb90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000816113ec33610edf565b101515156113f957600080fd5b61146d8260016000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546117cb90919063ffffffff16565b60016000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061152482600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546117b290919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061158d60128003600a0a6004548481151561157e57fe5b046117e990919063ffffffff16565b90503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015156115cf57600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116b657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156116f257600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008282111515156117c057fe5b818303905092915050565b60008082840190508381101515156117df57fe5b8091505092915050565b6000808284029050600084148061180a575082848281151561180757fe5b04145b151561181257fe5b80915050929150505600a165627a7a72305820d13d0fd18a60cd0433ead63601ebd00ad45a1dbd729b2c90a17ce340e85114e40029"
}