{
  "address": "0x971d048e737619884f2df75e31c7eb6412392328",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Sparkster Token",
  "contractName": "SparksterToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-22\n*/\n\npragma solidity 0.4.24;\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\ncontract SparksterToken is StandardToken, Ownable{\n\tusing SafeMath for uint256;\n\tstruct Member {\n\t\tmapping(uint256 => uint256) weiBalance; // How much wei has this member contributed for this group?\n\t}\n\n\tstruct Group {\n\t\tbool distributed; // Whether or not tokens in this group have been distributed.\n\t\tbool distributing; // This flag is set when we first enter the distribute function and is there to prevent race conditions, since distribution might take a long time.\n\t\tbool unlocked; // Whether or not tokens in this group have been unlocked.\n\t\tmapping(address => bool) exists; // If exists[address] is true, this address has made a purchase on this group before.\n\t\tstring name;\n\t\tuint256 ratio; // 1 eth:ratio tokens. This amount represents the decimal amount. ratio*10**decimal = ratio sparks.\n\t\tuint256 startTime; // Epoch of crowdsale start time.\n\t\tuint256 phase1endTime; // Epoch of phase1 end time.\n\t\tuint256 phase2endTime; // Epoch of phase2 end time.\n\t\tuint256 deadline; // No contributions allowed after this epoch.\n\t\tuint256 max2; // cap of phase2\n\t\tuint256 max3; // Total ether this group can collect in phase 3.\n\t\tuint256 weiTotal; // How much ether has this group collected?\n\t\tuint256 cap; // The hard ether cap.\n\t\tuint256 nextDistributionIndex; // The next index to start distributing at.\n\t\taddress[] addresses; // List of addresses that have made a purchase on this group.\n\t}\n\n\taddress oracleAddress;\n\tbool public transferLock = true; // A Global transfer lock. Set to lock down all tokens from all groups.\n\tbool public allowedToBuyBack = false;\n\tbool public allowedToPurchase = false;\n\tstring public name;\t\t\t\t\t\t\t\t\t // name for display\n\tstring public symbol;\t\t\t\t\t\t\t\t //An identifier\n\tuint8 public decimals;\t\t\t\t\t\t\t//How many decimals to show.\n\tuint256 public penalty;\n\tuint256 public maxGasPrice; // The maximum allowed gas for the purchase function.\n\tuint256 internal nextGroupNumber;\n\tuint256 public sellPrice; // sellPrice wei:1 spark token; we won't allow to sell back parts of a token.\n\tmapping(address => Member) internal members;\n\tmapping(uint256 => Group) internal groups;\n\tuint256 public openGroupNumber;\n\tevent WantsToPurchase(address walletAddress, uint256 weiAmount, uint256 groupNumber, bool inPhase1);\n\tevent PurchasedCallbackOnAccept(uint256 groupNumber, address[] addresses);\n\tevent WantsToDistribute(uint256 groupNumber);\n\tevent NearingHardCap(uint256 groupNumber, uint256 remainder);\n\tevent ReachedHardCap(uint256 groupNumber);\n\tevent DistributeDone(uint256 groupNumber);\n\tevent DistributedBatch(uint256 groupNumber, uint256 howMany);\n\tevent AirdroppedBatch(address[] addresses);\n\tevent RefundedBatch(address[] addresses);\n\tevent AddToGroup(address walletAddress, uint256 groupNumber);\n\tevent ChangedTransferLock(bool transferLock);\n\tevent ChangedAllowedToPurchase(bool allowedToPurchase);\n\tevent ChangedAllowedToBuyBack(bool allowedToBuyBack);\n\tevent SetSellPrice(uint256 sellPrice);\n\t\n\tmodifier onlyOwnerOrOracle() {\n\t\trequire(msg.sender == owner || msg.sender == oracleAddress);\n\t\t_;\n\t}\n\t\n\t// Fix for the ERC20 short address attack http://vessenes.com/the-erc20-short-address-attack-explained/\n\tmodifier onlyPayloadSize(uint size) {\t \n\t\trequire(msg.data.length == size + 4);\n\t\t_;\n\t}\n\n\tmodifier canTransfer() {\n\t\tif (msg.sender != owner) {\n\t\t\trequire(!transferLock);\n\t\t}\n\t\t_;\n\t}\n\n\tmodifier canPurchase() {\n\t\trequire(allowedToPurchase);\n\t\t_;\n\t}\n\n\tmodifier canSell() {\n\t\trequire(allowedToBuyBack);\n\t\t_;\n\t}\n\n\tfunction() public payable {\n\t\tpurchase();\n\t}\n\n\tconstructor() public {\n\t\tname = \"Sparkster\";\t\t\t\t\t\t\t\t\t// Set the name for display purposes\n\t\tdecimals = 18;\t\t\t\t\t // Amount of decimals for display purposes\n\t\tsymbol = \"SPRK\";\t\t\t\t\t\t\t// Set the symbol for display purposes\n\t\tsetMaximumGasPrice(40);\n\t\tmintTokens(435000000);\n\t}\n\t\n\tfunction setOracleAddress(address newAddress) public onlyOwner returns(bool success) {\n\t\toracleAddress = newAddress;\n\t\treturn true;\n\t}\n\n\tfunction removeOracleAddress() public onlyOwner {\n\t\toracleAddress = address(0);\n\t}\n\n\tfunction setMaximumGasPrice(uint256 gweiPrice) public onlyOwner returns(bool success) {\n\t\tmaxGasPrice = gweiPrice.mul(10**9); // Convert the gwei value to wei.\n\t\treturn true;\n\t}\n\n\tfunction mintTokens(uint256 amount) public onlyOwner {\n\t\t// Here, we'll consider amount to be the full token amount, so we have to get its decimal value.\n\t\tuint256 decimalAmount = amount.mul(uint(10)**decimals);\n\t\ttotalSupply_ = totalSupply_.add(decimalAmount);\n\t\tbalances[msg.sender] = balances[msg.sender].add(decimalAmount);\n\t\temit Transfer(address(0), msg.sender, decimalAmount); // Per erc20 standards-compliance.\n\t}\n\n\tfunction purchase() public canPurchase payable returns(bool success) {\n\t\trequire(msg.sender != address(0)); // Don't allow the 0 address.\n\t\tMember storage memberRecord = members[msg.sender];\n\t\tGroup storage openGroup = groups[openGroupNumber];\n\t\trequire(openGroup.ratio > 0); // Group must be initialized.\n\t\tuint256 currentTimestamp = block.timestamp;\n\t\trequire(currentTimestamp >= openGroup.startTime && currentTimestamp <= openGroup.deadline);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //the timestamp must be greater than or equal to the start time and less than or equal to the deadline time\n\t\trequire(!openGroup.distributing && !openGroup.distributed); // Don't allow to purchase if we're in the middle of distributing this group; Don't let someone buy tokens on the current group if that group is already distributed.\n\t\trequire(tx.gasprice <= maxGasPrice); // Restrict maximum gas this transaction is allowed to consume.\n\t\tuint256 weiAmount = msg.value;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// The amount purchased by the current member\n\t\trequire(weiAmount >= 0.1 ether);\n\t\tuint256 weiTotal = openGroup.weiTotal.add(weiAmount); // Calculate total contribution of all members in this group.\n\t\trequire(weiTotal <= openGroup.cap);\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Check to see if accepting these funds will put us above the hard ether cap.\n\t\tuint256 userWeiTotal = memberRecord.weiBalance[openGroupNumber].add(weiAmount);\t// Calculate the total amount purchased by the current member\n\t\tif (!openGroup.exists[msg.sender]) { // Has this person not purchased on this group before?\n\t\t\topenGroup.addresses.push(msg.sender);\n\t\t\topenGroup.exists[msg.sender] = true;\n\t\t}\n\t\tif(currentTimestamp <= openGroup.phase1endTime){\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t // whether the current timestamp is in the first phase\n\t\t\temit WantsToPurchase(msg.sender, weiAmount, openGroupNumber, true);\n\t\t\treturn true;\n\t\t} else if (currentTimestamp <= openGroup.phase2endTime) { // Are we in phase 2?\n\t\t\trequire(userWeiTotal <= openGroup.max2); // Allow to contribute no more than max2 in phase 2.\n\t\t\temit WantsToPurchase(msg.sender, weiAmount, openGroupNumber, false);\n\t\t\treturn true;\n\t\t} else { // We've passed both phases 1 and 2.\n\t\t\trequire(userWeiTotal <= openGroup.max3); // Don't allow to contribute more than max3 in phase 3.\n\t\t\temit WantsToPurchase(msg.sender, weiAmount, openGroupNumber, false);\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\tfunction purchaseCallbackOnAccept(uint256 groupNumber, address[] addresses, uint256[] weiAmounts) public onlyOwnerOrOracle returns(bool success) {\n\t\tuint256 n = addresses.length;\n\t\trequire(n == weiAmounts.length, \"Array lengths mismatch\");\n\t\tGroup storage theGroup = groups[groupNumber];\n\t\tuint256 weiTotal = theGroup.weiTotal;\n\t\tfor (uint256 i = 0; i < n; i++) {\n\t\t\tMember storage memberRecord = members[addresses[i]];\n\t\t\tuint256 weiAmount = weiAmounts[i];\n\t\t\tweiTotal = weiTotal.add(weiAmount);\t\t\t\t\t\t\t\t // Calculate the total amount purchased by all members in this group.\n\t\t\tmemberRecord.weiBalance[groupNumber] = memberRecord.weiBalance[groupNumber].add(weiAmount);\t\t\t\t\t\t\t\t\t\t\t\t\t\t // Record the total amount purchased by the current member\n\t\t}\n\t\ttheGroup.weiTotal = weiTotal;\n\t\tif (getHowMuchUntilHardCap_(groupNumber) <= 100 ether) {\n\t\t\temit NearingHardCap(groupNumber, getHowMuchUntilHardCap_(groupNumber));\n\t\t\tif (weiTotal >= theGroup.cap) {\n\t\t\t\temit ReachedHardCap(groupNumber);\n\t\t\t}\n\t\t}\n\t\temit PurchasedCallbackOnAccept(groupNumber, addresses);\n\t\treturn true;\n\t}\n\n\tfunction insertAndApprove(uint256 groupNumber, address[] addresses, uint256[] weiAmounts) public onlyOwnerOrOracle returns(bool success) {\n\t\tuint256 n = addresses.length;\n\t\trequire(n == weiAmounts.length, \"Array lengtsh mismatch\");\n\t\tGroup storage theGroup = groups[groupNumber];\n\t\tfor (uint256 i = 0; i < n; i++) {\n\t\t\taddress theAddress = addresses[i];\n\t\t\tif (!theGroup.exists[theAddress]) {\n\t\t\t\ttheGroup.addresses.push(theAddress);\n\t\t\t\ttheGroup.exists[theAddress] = true;\n\t\t\t}\n\t\t}\n\t\treturn purchaseCallbackOnAccept(groupNumber, addresses, weiAmounts);\n\t}\n\n\tfunction callbackInsertApproveAndDistribute(uint256 groupNumber, address[] addresses, uint256[] weiAmounts) public onlyOwnerOrOracle returns(bool success) {\n\t\tuint256 n = addresses.length;\n\t\trequire(n == weiAmounts.length, \"Array lengths mismatch\");\n\t\tGroup storage theGroup = groups[groupNumber];\n\t\tif (!theGroup.distributing) {\n\t\t\ttheGroup.distributing = true;\n\t\t}\n\t\tuint256 newOwnerSupply = balances[owner];\n\t\tfor (uint256 i = 0; i < n; i++) {\n\t\t\taddress theAddress = addresses[i];\n\t\t\tMember storage memberRecord = members[theAddress];\n\t\t\tuint256 weiAmount = weiAmounts[i];\n\t\t\tmemberRecord.weiBalance[groupNumber] = memberRecord.weiBalance[groupNumber].add(weiAmount);\t\t\t\t\t\t\t\t\t\t\t\t\t\t // Record the total amount purchased by the current member\n\t\t\tuint256 additionalBalance = weiAmount.mul(theGroup.ratio); // Don't give cumulative tokens; one address can be distributed multiple times.\n\t\t\tif (additionalBalance > 0) { // No need to waste ticks if they have no tokens to distribute\n\t\t\t\tbalances[theAddress] = balances[theAddress].add(additionalBalance);\n\t\t\t\tnewOwnerSupply = newOwnerSupply.sub(additionalBalance); // Update the available number of tokens.\n\t\t\t\temit Transfer(owner, theAddress, additionalBalance); // Notify exchanges of the distribution.\n\t\t\t}\n\t\t}\n\t\tbalances[owner] = newOwnerSupply;\n\t\temit PurchasedCallbackOnAccept(groupNumber, addresses);\n\t\treturn true;\n\t}\n\n\tfunction refund(address[] addresses, uint256[] weiAmounts) public onlyOwnerOrOracle returns(bool success) {\n\t\tuint256 n = addresses.length;\n\t\trequire (n == weiAmounts.length, \"Array lengths mismatch\");\n\t\tuint256 thePenalty = penalty;\n\t\tfor(uint256 i = 0; i < n; i++) {\n\t\t\tuint256 weiAmount = weiAmounts[i];\n\t\t\taddress theAddress = addresses[i];\n\t\t\tif (thePenalty <= weiAmount) {\n\t\t\t\tweiAmount = weiAmount.sub(thePenalty);\n\t\t\t\trequire(address(this).balance >= weiAmount);\n\t\t\t\ttheAddress.transfer(weiAmount);\n\t\t\t}\n\t\t}\n\t\temit RefundedBatch(addresses);\n\t\treturn true;\n\t}\n\n\tfunction signalDoneDistributing(uint256 groupNumber) public onlyOwnerOrOracle {\n\t\tGroup storage theGroup = groups[groupNumber];\n\t\ttheGroup.distributed = true;\n\t\ttheGroup.distributing = false;\n\t\temit DistributeDone(groupNumber);\n\t}\n\t\n\tfunction drain() public onlyOwner {\n\t\towner.transfer(address(this).balance);\n\t}\n\t\n\tfunction setPenalty(uint256 newPenalty) public onlyOwner returns(bool success) {\n\t\tpenalty = newPenalty;\n\t\treturn true;\n\t}\n\t\n\tfunction buyback(uint256 amount) public canSell { // Can't sell unless owner has allowed it.\n\t\tuint256 decimalAmount = amount.mul(uint(10)**decimals); // convert the full token value to the smallest unit possible.\n\t\trequire(balances[msg.sender].sub(decimalAmount) >= getLockedTokens_(msg.sender)); // Don't allow to sell locked tokens.\n\t\tbalances[msg.sender] = balances[msg.sender].sub(decimalAmount); // Do this before transferring to avoid re-entrance attacks; will throw if result < 0.\n\t\t// Amount is considered to be how many full tokens the user wants to sell.\n\t\tuint256 totalCost = amount.mul(sellPrice); // sellPrice is the per-full-token value.\n\t\trequire(address(this).balance >= totalCost); // The contract must have enough funds to cover the selling.\n\t\tbalances[owner] = balances[owner].add(decimalAmount); // Put these tokens back into the available pile.\n\t\tmsg.sender.transfer(totalCost); // Pay the seller for their tokens.\n\t\temit Transfer(msg.sender, owner, decimalAmount); // Notify exchanges of the sell.\n\t}\n\n\tfunction fundContract() public onlyOwnerOrOracle payable { // For the owner to put funds into the contract.\n\t}\n\n\tfunction setSellPrice(uint256 thePrice) public onlyOwner {\n\t\tsellPrice = thePrice;\n\t}\n\t\n\tfunction setAllowedToBuyBack(bool value) public onlyOwner {\n\t\tallowedToBuyBack = value;\n\t\temit ChangedAllowedToBuyBack(value);\n\t}\n\n\tfunction setAllowedToPurchase(bool value) public onlyOwner {\n\t\tallowedToPurchase = value;\n\t\temit ChangedAllowedToPurchase(value);\n\t}\n\t\n\tfunction createGroup(string groupName, uint256 startEpoch, uint256 phase1endEpoch, uint256 phase2endEpoch, uint256 deadlineEpoch, uint256 phase2weiCap, uint256 phase3weiCap, uint256 hardWeiCap, uint256 ratio) public onlyOwner returns (bool success, uint256 createdGroupNumber) {\n\t\tcreatedGroupNumber = nextGroupNumber;\n\t\tGroup storage theGroup = groups[createdGroupNumber];\n\t\ttheGroup.name = groupName;\n\t\ttheGroup.startTime = startEpoch;\n\t\ttheGroup.phase1endTime = phase1endEpoch;\n\t\ttheGroup.phase2endTime = phase2endEpoch;\n\t\ttheGroup.deadline = deadlineEpoch;\n\t\ttheGroup.max2 = phase2weiCap;\n\t\ttheGroup.max3 = phase3weiCap;\n\t\ttheGroup.cap = hardWeiCap;\n\t\ttheGroup.ratio = ratio;\n\t\tnextGroupNumber++;\n\t\tsuccess = true;\n\t}\n\n\tfunction getGroup(uint256 groupNumber) public view returns(string groupName, bool distributed, bool unlocked, uint256 phase2cap, uint256 phase3cap, uint256 cap, uint256 ratio, uint256 startTime, uint256 phase1endTime, uint256 phase2endTime, uint256 deadline, uint256 weiTotal) {\n\t\trequire(groupNumber < nextGroupNumber);\n\t\tGroup storage theGroup = groups[groupNumber];\n\t\tgroupName = theGroup.name;\n\t\tdistributed = theGroup.distributed;\n\t\tunlocked = theGroup.unlocked;\n\t\tphase2cap = theGroup.max2;\n\t\tphase3cap = theGroup.max3;\n\t\tcap = theGroup.cap;\n\t\tratio = theGroup.ratio;\n\t\tstartTime = theGroup.startTime;\n\t\tphase1endTime = theGroup.phase1endTime;\n\t\tphase2endTime = theGroup.phase2endTime;\n\t\tdeadline = theGroup.deadline;\n\t\tweiTotal = theGroup.weiTotal;\n\t}\n\t\n\tfunction getHowMuchUntilHardCap_(uint256 groupNumber) internal view returns(uint256 remainder) {\n\t\tGroup storage theGroup = groups[groupNumber];\n\t\tif (theGroup.weiTotal > theGroup.cap) { // calling .sub in this situation will throw.\n\t\t\treturn 0;\n\t\t}\n\t\treturn theGroup.cap.sub(theGroup.weiTotal);\n\t}\n\t\n\tfunction getHowMuchUntilHardCap() public view returns(uint256 remainder) {\n\t\treturn getHowMuchUntilHardCap_(openGroupNumber);\n\t}\n\n\tfunction addMemberToGroup(address walletAddress, uint256 groupNumber) public onlyOwner returns(bool success) {\n\t\temit AddToGroup(walletAddress, groupNumber);\n\t\treturn true;\n\t}\n\t\n\tfunction instructOracleToDistribute(uint256 groupNumber) public onlyOwner {\n\t\tGroup storage theGroup = groups[groupNumber];\n\t\trequire(groupNumber < nextGroupNumber && !theGroup.distributed); // can't have already distributed\n\t\temit WantsToDistribute(groupNumber);\n\t}\n\t\n\tfunction distributeCallback(uint256 groupNumber, uint256 howMany) public onlyOwnerOrOracle returns (bool success) {\n\t\tGroup storage theGroup = groups[groupNumber];\n\t\trequire(!theGroup.distributed);\n\t\tif (!theGroup.distributing) {\n\t\t\ttheGroup.distributing = true;\n\t\t}\n\t\tuint256 n = theGroup.addresses.length;\n\t\tuint256 nextDistributionIndex = theGroup.nextDistributionIndex;\n\t\tuint256 exclusiveEndIndex = nextDistributionIndex + howMany;\n\t\tif (exclusiveEndIndex > n) {\n\t\t\texclusiveEndIndex = n;\n\t\t}\n\t\tuint256 newOwnerSupply = balances[owner];\n\t\tfor (uint256 i = nextDistributionIndex; i < exclusiveEndIndex; i++) {\n\t\t\taddress theAddress = theGroup.addresses[i];\n\t\t\tuint256 balance = getUndistributedBalanceOf_(theAddress, groupNumber);\n\t\t\tif (balance > 0) { // No need to waste ticks if they have no tokens to distribute\n\t\t\t\tbalances[theAddress] = balances[theAddress].add(balance);\n\t\t\t\tnewOwnerSupply = newOwnerSupply.sub(balance); // Update the available number of tokens.\n\t\t\t\temit Transfer(owner, theAddress, balance); // Notify exchanges of the distribution.\n\t\t\t}\n\t\t}\n\t\tbalances[owner] = newOwnerSupply;\n\t\tif (exclusiveEndIndex < n) {\n\t\t\temit DistributedBatch(groupNumber, howMany);\n\t\t} else { // We've finished distributing people\n\t\t\tsignalDoneDistributing(groupNumber);\n\t\t}\n\t\ttheGroup.nextDistributionIndex = exclusiveEndIndex; // Usually not necessary if we've finished distribution, but if we don't update this, getHowManyLeftToDistribute will never show 0.\n\t\treturn true;\n\t}\n\n\tfunction getHowManyLeftToDistribute(uint256 groupNumber) public view returns(uint256 remainder) {\n\t\tGroup storage theGroup = groups[groupNumber];\n\t\treturn theGroup.addresses.length - theGroup.nextDistributionIndex;\n\t}\n\n\tfunction changeGroupInfo(uint256 groupNumber, uint256 startEpoch, uint256 phase1endEpoch, uint256 phase2endEpoch, uint256 deadlineEpoch, uint256 phase2weiCap, uint256 phase3weiCap, uint256 hardWeiCap, uint256 ratio) public onlyOwner returns (bool success) {\n\t\tGroup storage theGroup = groups[groupNumber];\n\t\tif (startEpoch > 0) {\n\t\t\ttheGroup.startTime = startEpoch;\n\t\t}\n\t\tif (phase1endEpoch > 0) {\n\t\t\ttheGroup.phase1endTime = phase1endEpoch;\n\t\t}\n\t\tif (phase2endEpoch > 0) {\n\t\t\ttheGroup.phase2endTime = phase2endEpoch;\n\t\t}\n\t\tif (deadlineEpoch > 0) {\n\t\t\ttheGroup.deadline = deadlineEpoch;\n\t\t}\n\t\tif (phase2weiCap > 0) {\n\t\t\ttheGroup.max2 = phase2weiCap;\n\t\t}\n\t\tif (phase3weiCap > 0) {\n\t\t\ttheGroup.max3 = phase3weiCap;\n\t\t}\n\t\tif (hardWeiCap > 0) {\n\t\t\ttheGroup.cap = hardWeiCap;\n\t\t}\n\t\tif (ratio > 0) {\n\t\t\ttheGroup.ratio = ratio;\n\t\t}\n\t\treturn true;\n\t}\n\n\tfunction relockGroup(uint256 groupNumber) public onlyOwner returns(bool success) {\n\t\tgroups[groupNumber].unlocked = true;\n\t\treturn true;\n\t}\n\n\tfunction resetGroupInfo(uint256 groupNumber) public onlyOwner returns (bool success) {\n\t\tGroup storage theGroup = groups[groupNumber];\n\t\ttheGroup.startTime = 0;\n\t\ttheGroup.phase1endTime = 0;\n\t\ttheGroup.phase2endTime = 0;\n\t\ttheGroup.deadline = 0;\n\t\ttheGroup.max2 = 0;\n\t\ttheGroup.max3 = 0;\n\t\ttheGroup.cap = 0;\n\t\ttheGroup.ratio = 0;\n\t\treturn true;\n\t}\n\n\tfunction unlock(uint256 groupNumber) public onlyOwner returns (bool success) {\n\t\tGroup storage theGroup = groups[groupNumber];\n\t\trequire(theGroup.distributed); // Distribution must have occurred first.\n\t\ttheGroup.unlocked = true;\n\t\treturn true;\n\t}\n\t\n\tfunction setGlobalLock(bool value) public onlyOwner {\n\t\ttransferLock = value;\n\t\temit ChangedTransferLock(transferLock);\n\t}\n\t\n\tfunction burn(uint256 amount) public onlyOwner {\n\t\t// Burns tokens from the owner's supply and doesn't touch allocated tokens.\n\t\t// Decrease totalSupply and leftOver by the amount to burn so we can decrease the circulation.\n\t\tbalances[msg.sender] = balances[msg.sender].sub(amount); // Will throw if result < 0\n\t\ttotalSupply_ = totalSupply_.sub(amount); // Will throw if result < 0\n\t\temit Transfer(msg.sender, address(0), amount);\n\t}\n\t\n\tfunction splitTokensBeforeDistribution(uint256 splitFactor) public onlyOwner returns (bool success) {\n\t\t// SplitFactor is the multiplier per decimal of spark. splitFactor * 10**decimals = splitFactor sparks\n\t\tuint256 ownerBalance = balances[msg.sender];\n\t\tuint256 multiplier = ownerBalance.mul(splitFactor);\n\t\tuint256 increaseSupplyBy = multiplier.sub(ownerBalance); // We need to mint owner*splitFactor - owner additional tokens.\n\t\tbalances[msg.sender] = multiplier;\n\t\ttotalSupply_ = totalSupply_.mul(splitFactor);\n\t\temit Transfer(address(0), msg.sender, increaseSupplyBy); // Notify exchange that we've minted tokens.\n\t\t// Next, increase group ratios by splitFactor, so users will receive ratio * splitFactor tokens per ether.\n\t\tuint256 n = nextGroupNumber;\n\t\trequire(n > 0); // Must have at least one group.\n\t\tfor (uint256 i = 0; i < n; i++) {\n\t\t\tGroup storage currentGroup = groups[i];\n\t\t\tcurrentGroup.ratio = currentGroup.ratio.mul(splitFactor);\n\t\t}\n\t\treturn true;\n\t}\n\n\tfunction reverseSplitTokensBeforeDistribution(uint256 splitFactor) public onlyOwner returns (bool success) {\n\t\t// SplitFactor is the multiplier per decimal of spark. splitFactor * 10**decimals = splitFactor sparks\n\t\tuint256 ownerBalance = balances[msg.sender];\n\t\tuint256 divier = ownerBalance.div(splitFactor);\n\t\tuint256 decreaseSupplyBy = ownerBalance.sub(divier);\n\t\t// We don't use burnTokens here since the amount to subtract might be more than what the owner currently holds in their unallocated supply which will cause the function to throw.\n\t\ttotalSupply_ = totalSupply_.div(splitFactor);\n\t\tbalances[msg.sender] = divier;\n\t\t// Notify the exchanges of how many tokens were burned.\n\t\temit Transfer(msg.sender, address(0), decreaseSupplyBy);\n\t\t// Next, decrease group ratios by splitFactor, so users will receive ratio / splitFactor tokens per ether.\n\t\tuint256 n = nextGroupNumber;\n\t\trequire(n > 0); // Must have at least one group. Groups are 0-indexed.\n\t\tfor (uint256 i = 0; i < n; i++) {\n\t\t\tGroup storage currentGroup = groups[i];\n\t\t\tcurrentGroup.ratio = currentGroup.ratio.div(splitFactor);\n\t\t}\n\t\treturn true;\n\t}\n\n\tfunction airdrop( address[] addresses, uint256[] tokenDecimalAmounts) public onlyOwnerOrOracle returns (bool success) {\n\t\tuint256 n = addresses.length;\n\t\trequire(n == tokenDecimalAmounts.length, \"Array lengths mismatch\");\n\t\tuint256 newOwnerBalance = balances[owner];\n\t\tfor (uint256 i = 0; i < n; i++) {\n\t\t\taddress theAddress = addresses[i];\n\t\t\tuint256 airdropAmount = tokenDecimalAmounts[i];\n\t\t\tif (airdropAmount > 0) {\n\t\t\t\tuint256 currentBalance = balances[theAddress];\n\t\t\t\tbalances[theAddress] = currentBalance.add(airdropAmount);\n\t\t\t\tnewOwnerBalance = newOwnerBalance.sub(airdropAmount);\n\t\t\t\temit Transfer(owner, theAddress, airdropAmount);\n\t\t\t}\n\t\t}\n\t\tbalances[owner] = newOwnerBalance;\n\t\temit AirdroppedBatch(addresses);\n\t\treturn true;\n\t}\n\n\tfunction transfer(address _to, uint256 _value) public onlyPayloadSize(2 * 32) canTransfer returns (bool success) {\t\t\n\t\t// If the transferrer has purchased tokens, they must be unlocked before they can be used.\n\t\tif (msg.sender != owner) { // Owner can transfer anything to anyone.\n\t\t\trequire(balances[msg.sender].sub(_value) >= getLockedTokens_(msg.sender));\n\t\t}\n\t\treturn super.transfer(_to, _value);\n\t}\n\n\tfunction transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3 * 32) canTransfer returns (bool success) {\n\t\t// If the transferrer has purchased tokens, they must be unlocked before they can be used.\n\t\tif (msg.sender != owner) { // Owner not affected by locked tokens\n\t\t\trequire(balances[_from].sub(_value) >= getLockedTokens_(_from));\n\t\t}\n\t\treturn super.transferFrom(_from, _to, _value);\n\t}\n\n\tfunction setOpenGroup(uint256 groupNumber) public onlyOwner returns (bool success) {\n\t\trequire(groupNumber < nextGroupNumber);\n\t\topenGroupNumber = groupNumber;\n\t\treturn true;\n\t}\n\n\tfunction getLockedTokensInGroup_(address walletAddress, uint256 groupNumber) internal view returns (uint256 balance) {\n\t\tMember storage theMember = members[walletAddress];\n\t\tif (groups[groupNumber].unlocked) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn theMember.weiBalance[groupNumber].mul(groups[groupNumber].ratio);\n\t}\n\n\tfunction getLockedTokens_(address walletAddress) internal view returns(uint256 balance) {\n\t\tuint256 n = nextGroupNumber;\n\t\tfor (uint256 i = 0; i < n; i++) {\n\t\t\tbalance = balance.add(getLockedTokensInGroup_(walletAddress, i));\n\t\t}\n\t\treturn balance;\n\t}\n\n\tfunction getLockedTokens(address walletAddress) public view returns(uint256 balance) {\n\t\treturn getLockedTokens_(walletAddress);\n\t}\n\n\tfunction getUndistributedBalanceOf_(address walletAddress, uint256 groupNumber) internal view returns (uint256 balance) {\n\t\tMember storage theMember = members[walletAddress];\n\t\tGroup storage theGroup = groups[groupNumber];\n\t\tif (theGroup.distributed) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn theMember.weiBalance[groupNumber].mul(theGroup.ratio);\n\t}\n\n\tfunction getUndistributedBalanceOf(address walletAddress, uint256 groupNumber) public view returns (uint256 balance) {\n\t\treturn getUndistributedBalanceOf_(walletAddress, groupNumber);\n\t}\n\n\tfunction checkMyUndistributedBalance(uint256 groupNumber) public view returns (uint256 balance) {\n\t\treturn getUndistributedBalanceOf_(msg.sender, groupNumber);\n\t}\n\n\tfunction transferRecovery(address _from, address _to, uint256 _value) public onlyOwner returns (bool success) {\n\t\t// Will be used if someone sends tokens to an incorrect address by accident. This way, we have the ability to recover the tokens. For example, sometimes there's a problem of lost tokens if someone sends tokens to a contract address that can't utilize the tokens.\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].add(_value); // Authorize the owner to spend on someone's behalf.\n\t\treturn transferFrom(_from, _to, _value);\n\t}\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferRecovery\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"groupNumber\",\"type\":\"uint256\"}],\"name\":\"signalDoneDistributing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"penalty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"groupNumber\",\"type\":\"uint256\"},{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"weiAmounts\",\"type\":\"uint256[]\"}],\"name\":\"purchaseCallbackOnAccept\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"groupNumber\",\"type\":\"uint256\"}],\"name\":\"checkMyUndistributedBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"groupNumber\",\"type\":\"uint256\"}],\"name\":\"setOpenGroup\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"groupNumber\",\"type\":\"uint256\"}],\"name\":\"resetGroupInfo\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setGlobalLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxGasPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"groupNumber\",\"type\":\"uint256\"}],\"name\":\"instructOracleToDistribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowedToPurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPenalty\",\"type\":\"uint256\"}],\"name\":\"setPenalty\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setOracleAddress\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"walletAddress\",\"type\":\"address\"},{\"name\":\"groupNumber\",\"type\":\"uint256\"}],\"name\":\"getUndistributedBalanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"splitFactor\",\"type\":\"uint256\"}],\"name\":\"reverseSplitTokensBeforeDistribution\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"walletAddress\",\"type\":\"address\"},{\"name\":\"groupNumber\",\"type\":\"uint256\"}],\"name\":\"addMemberToGroup\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"groupNumber\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHowMuchUntilHardCap\",\"outputs\":[{\"name\":\"remainder\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purchase\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"tokenDecimalAmounts\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"getLockedTokens\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openGroupNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gweiPrice\",\"type\":\"uint256\"}],\"name\":\"setMaximumGasPrice\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"groupName\",\"type\":\"string\"},{\"name\":\"startEpoch\",\"type\":\"uint256\"},{\"name\":\"phase1endEpoch\",\"type\":\"uint256\"},{\"name\":\"phase2endEpoch\",\"type\":\"uint256\"},{\"name\":\"deadlineEpoch\",\"type\":\"uint256\"},{\"name\":\"phase2weiCap\",\"type\":\"uint256\"},{\"name\":\"phase3weiCap\",\"type\":\"uint256\"},{\"name\":\"hardWeiCap\",\"type\":\"uint256\"},{\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"createGroup\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"},{\"name\":\"createdGroupNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"groupNumber\",\"type\":\"uint256\"},{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"weiAmounts\",\"type\":\"uint256[]\"}],\"name\":\"insertAndApprove\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowedToBuyBack\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAllowedToBuyBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"groupNumber\",\"type\":\"uint256\"}],\"name\":\"getHowManyLeftToDistribute\",\"outputs\":[{\"name\":\"remainder\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fundContract\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"weiAmounts\",\"type\":\"uint256[]\"}],\"name\":\"refund\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"groupNumber\",\"type\":\"uint256\"}],\"name\":\"getGroup\",\"outputs\":[{\"name\":\"groupName\",\"type\":\"string\"},{\"name\":\"distributed\",\"type\":\"bool\"},{\"name\":\"unlocked\",\"type\":\"bool\"},{\"name\":\"phase2cap\",\"type\":\"uint256\"},{\"name\":\"phase3cap\",\"type\":\"uint256\"},{\"name\":\"cap\",\"type\":\"uint256\"},{\"name\":\"ratio\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"phase1endTime\",\"type\":\"uint256\"},{\"name\":\"phase2endTime\",\"type\":\"uint256\"},{\"name\":\"deadline\",\"type\":\"uint256\"},{\"name\":\"weiTotal\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeOracleAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"groupNumber\",\"type\":\"uint256\"},{\"name\":\"howMany\",\"type\":\"uint256\"}],\"name\":\"distributeCallback\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"groupNumber\",\"type\":\"uint256\"},{\"name\":\"startEpoch\",\"type\":\"uint256\"},{\"name\":\"phase1endEpoch\",\"type\":\"uint256\"},{\"name\":\"phase2endEpoch\",\"type\":\"uint256\"},{\"name\":\"deadlineEpoch\",\"type\":\"uint256\"},{\"name\":\"phase2weiCap\",\"type\":\"uint256\"},{\"name\":\"phase3weiCap\",\"type\":\"uint256\"},{\"name\":\"hardWeiCap\",\"type\":\"uint256\"},{\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"changeGroupInfo\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAllowedToPurchase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"groupNumber\",\"type\":\"uint256\"}],\"name\":\"relockGroup\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"splitFactor\",\"type\":\"uint256\"}],\"name\":\"splitTokensBeforeDistribution\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"thePrice\",\"type\":\"uint256\"}],\"name\":\"setSellPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"groupNumber\",\"type\":\"uint256\"},{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"weiAmounts\",\"type\":\"uint256[]\"}],\"name\":\"callbackInsertApproveAndDistribute\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"groupNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"inPhase1\",\"type\":\"bool\"}],\"name\":\"WantsToPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"groupNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"PurchasedCallbackOnAccept\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"groupNumber\",\"type\":\"uint256\"}],\"name\":\"WantsToDistribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"groupNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"remainder\",\"type\":\"uint256\"}],\"name\":\"NearingHardCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"groupNumber\",\"type\":\"uint256\"}],\"name\":\"ReachedHardCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"groupNumber\",\"type\":\"uint256\"}],\"name\":\"DistributeDone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"groupNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"howMany\",\"type\":\"uint256\"}],\"name\":\"DistributedBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"AirdroppedBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"RefundedBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"groupNumber\",\"type\":\"uint256\"}],\"name\":\"AddToGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"transferLock\",\"type\":\"bool\"}],\"name\":\"ChangedTransferLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"allowedToPurchase\",\"type\":\"bool\"}],\"name\":\"ChangedAllowedToPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"allowedToBuyBack\",\"type\":\"bool\"}],\"name\":\"ChangedAllowedToBuyBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sellPrice\",\"type\":\"uint256\"}],\"name\":\"SetSellPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60806040526004805460a860020a61ffff021960a060020a60ff021990911674010000000000000000000000000000000000000000171690553480156200004557600080fd5b5060038054600160a060020a031916331790556040805180820190915260098082527f537061726b73746572000000000000000000000000000000000000000000000060209092019182526200009e9160059162000285565b506007805460ff191660121790556040805180820190915260048082527f5350524b000000000000000000000000000000000000000000000000000000006020909201918252620000f29160069162000285565b5062000108602864010000000062000127810204565b50620001216319ed92c06401000000006200016b810204565b6200032a565b600354600090600160a060020a031633146200014257600080fd5b6200016082633b9aca00640100000000620032cb6200024482021704565b600955506001919050565b600354600090600160a060020a031633146200018657600080fd5b600754620001aa90839060ff16600a0a640100000000620032cb6200024482021704565b600154909150620001ca9082640100000000620030516200027782021704565b60015533600090815260208190526040902054620001f79082640100000000620030516200027782021704565b336000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000821515620002575750600062000271565b508181028183828115156200026857fe5b04146200027157fe5b92915050565b818101828110156200027157fe5b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002c857805160ff1916838001178555620002f8565b82800160010185558215620002f8579182015b82811115620002f8578251825591602001919060010190620002db565b50620003069291506200030a565b5090565b6200032791905b8082111562000306576000815560010162000311565b90565b6135ae806200033a6000396000f3006080604052600436106102be5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166303cd3e4781146102c957806306fdde0314610307578063095ea7b3146103915780630d4891ad146103b55780630edd2ffc146103cf57806318160ddd146103f6578063215b54111461040b57806323b872dd1461049e5780632caeb8fc146104c8578063304a87b7146104e0578063313ce567146104f8578063315ad5ce14610523578063319a93951461053b5780633de39c11146105555780633ebb2d6b1461056a57806342966c681461058257806348e4e2971461059a5780634a4b674a146105af5780634b750334146105c75780634c69c00f146105dc5780634fc28f68146105fd578063506a0aaa14610621578063530e3543146106395780636198e3391461065d57806361c2c9c01461067557806364edfbf01461068a578063661884631461069257806367243482146106b65780636b2d95d4146107445780636d991cce1461076557806370a082311461077a578063715018a61461079b57806373124ced146107b057806379a9fa1c146107c557806379c8fe30146107dd5780637fd169d6146107f557806381edc308146108925780638a4db4fa146109255780638c2a59381461093a5780638da5cb5b1461095457806395d89b411461098557806397304ced1461099a5780639890220b146109b2578063a9059cbb146109c7578063b499a26f146109eb578063bd097e2114610a03578063c091c43514610a0b578063ceb6065414610a99578063d73dd62314610b7e578063d98b43f714610ba2578063dbd2ac6014610bb7578063dd62ed3e14610bd2578063e4bf619514610bf9578063ed9ca4ff14610c2a578063f2fde38b14610c44578063f9dfea5414610c65578063fab8cbe414610c7d578063fc6634b914610c95578063fed8a53b14610cad575b6102c6610d40565b50005b3480156102d557600080fd5b506102f3600160a060020a0360043581169060243516604435610fb8565b604080519115158252519081900360200190f35b34801561031357600080fd5b5061031c61103d565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561035657818101518382015260200161033e565b50505050905090810190601f1680156103835780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561039d57600080fd5b506102f3600160a060020a03600435166024356110cb565b3480156103c157600080fd5b506103cd600435611132565b005b3480156103db57600080fd5b506103e46111be565b60408051918252519081900360200190f35b34801561040257600080fd5b506103e46111c4565b34801561041757600080fd5b506040805160206004602480358281013584810280870186019097528086526102f396843596369660449591949091019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506111cb9650505050505050565b3480156104aa57600080fd5b506102f3600160a060020a0360043581169060243516604435611448565b3480156104d457600080fd5b506103e46004356114f6565b3480156104ec57600080fd5b506102f3600435611502565b34801561050457600080fd5b5061050d611533565b6040805160ff9092168252519081900360200190f35b34801561052f57600080fd5b506102f360043561153c565b34801561054757600080fd5b506103cd60043515156115ab565b34801561056157600080fd5b506103e4611642565b34801561057657600080fd5b506103cd600435611648565b34801561058e57600080fd5b506103cd6004356116c6565b3480156105a657600080fd5b506102f361174c565b3480156105bb57600080fd5b506102f360043561176f565b3480156105d357600080fd5b506103e4611792565b3480156105e857600080fd5b506102f3600160a060020a0360043516611798565b34801561060957600080fd5b506103e4600160a060020a03600435166024356117e4565b34801561062d57600080fd5b506102f36004356117f7565b34801561064557600080fd5b506102f3600160a060020a0360043516602435611901565b34801561066957600080fd5b506102f3600435611968565b34801561068157600080fd5b506103e46119bc565b6102f3610d40565b34801561069e57600080fd5b506102f3600160a060020a03600435166024356119ce565b3480156106c257600080fd5b50604080516020600480358082013583810280860185019096528085526102f395369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750611ac09650505050505050565b34801561075057600080fd5b506103e4600160a060020a0360043516611ce1565b34801561077157600080fd5b506103e4611cec565b34801561078657600080fd5b506103e4600160a060020a0360043516611cf2565b3480156107a757600080fd5b506103cd611d0d565b3480156107bc57600080fd5b506102f3611d7b565b3480156107d157600080fd5b506103cd600435611d9c565b3480156107e957600080fd5b506102f3600435611f1c565b34801561080157600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261087794369492936024939284019190819084018382808284375094975050843595505050602083013592604081013592506060810135915060808101359060a08101359060c08101359060e00135611f55565b60408051921515835260208301919091528051918290030190f35b34801561089e57600080fd5b506040805160206004602480358281013584810280870186019097528086526102f396843596369660449591949091019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750611fed9650505050505050565b34801561093157600080fd5b506102f361215d565b34801561094657600080fd5b506103cd600435151561217f565b34801561096057600080fd5b5061096961220d565b60408051600160a060020a039092168252519081900360200190f35b34801561099157600080fd5b5061031c61221c565b3480156109a657600080fd5b506103cd600435612277565b3480156109be57600080fd5b506103cd61231f565b3480156109d357600080fd5b506102f3600160a060020a0360043516602435612373565b3480156109f757600080fd5b506103e460043561240e565b6103cd61242b565b348015610a1757600080fd5b50604080516020600480358082013583810280860185019096528085526102f395369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975061245b9650505050505050565b348015610aa557600080fd5b50610ab1600435612614565b60405180806020018d1515151581526020018c1515151581526020018b81526020018a815260200189815260200188815260200187815260200186815260200185815260200184815260200183815260200182810382528e818151815260200191508051906020019080838360005b83811015610b38578181015183820152602001610b20565b50505050905090810190601f168015610b655780820380516001836020036101000a031916815260200191505b509d505050505050505050505050505060405180910390f35b348015610b8a57600080fd5b506102f3600160a060020a036004351660243561274e565b348015610bae57600080fd5b506103cd6127e7565b348015610bc357600080fd5b506102f360043560243561281d565b348015610bde57600080fd5b506103e4600160a060020a0360043581169060243516612a53565b348015610c0557600080fd5b506102f360043560243560443560643560843560a43560c43560e43561010435612a7e565b348015610c3657600080fd5b506103cd6004351515612b41565b348015610c5057600080fd5b506103cd600160a060020a0360043516612bd1565b348015610c7157600080fd5b506102f3600435612bf1565b348015610c8957600080fd5b506102f3600435612c30565b348015610ca157600080fd5b506103cd600435612d2e565b348015610cb957600080fd5b506040805160206004602480358281013584810280870186019097528086526102f396843596369660449591949091019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750612d4a9650505050505050565b6000806000806000806000600460169054906101000a900460ff161515610d6657600080fd5b331515610d7257600080fd5b336000908152600c60209081526040808320600e548452600d90925282206003810154919850965011610da457600080fd5b42935084600401548410158015610dbf575084600701548411155b1515610dca57600080fd5b8454610100900460ff16158015610de35750845460ff16155b1515610dee57600080fd5b6009543a1115610dfd57600080fd5b34925067016345785d8a0000831015610e1557600080fd5b600a850154610e2a908463ffffffff61305116565b600b860154909250821115610e3e57600080fd5b600e54600090815260208790526040902054610e60908463ffffffff61305116565b33600090815260018701602052604090205490915060ff161515610ed157600d850180546001818101835560009283526020808420909201805473ffffffffffffffffffffffffffffffffffffffff19163390811790915583528088019091526040909120805460ff191690911790555b60058501548411610f2f57600e5460408051338152602081018690528082019290925260016060830152517fdd26f741705a89a641bf9670936db6583982b27ad123d2e52c16f52501e643149181900360800190a160019650610faf565b60068501548411610f9e576008850154811115610f4b57600080fd5b600e5460408051338152602081018690528082019290925260006060830152517fdd26f741705a89a641bf9670936db6583982b27ad123d2e52c16f52501e643149181900360800190a160019650610faf565b6009850154811115610f4b57600080fd5b50505050505090565b600354600090600160a060020a03163314610fd257600080fd5b600160a060020a0384166000908152600260209081526040808320338452909152902054611006908363ffffffff61305116565b600160a060020a0385166000908152600260209081526040808320338452909152902055611035848484611448565b949350505050565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156110c35780601f10611098576101008083540402835291602001916110c3565b820191906000526020600020905b8154815290600101906020018083116110a657829003601f168201915b505050505081565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a35060015b92915050565b600354600090600160a060020a03163314806111585750600454600160a060020a031633145b151561116357600080fd5b506000818152600d6020908152604091829020805461ff001960ff199091166001171681558251848152925190927f29c357a5c8d0a88d3bec7f98eadbf69c499098b797af76665f424431f4dbf0e192908290030190a15050565b60085481565b6001545b90565b600354600090819081908190819081908190600160a060020a03163314806111fd5750600454600160a060020a031633145b151561120857600080fd5b885188519096508614611253576040805160e560020a62461bcd0281526020600482015260166024820152600080516020613543833981519152604482015290519081900360640190fd5b60008a8152600d60205260408120600a810154909650945092505b8583101561131a57600c60008a8581518110151561128857fe5b90602001906020020151600160a060020a0316600160a060020a03168152602001908152602001600020915087838151811015156112c257fe5b6020908102909101015190506112de848263ffffffff61305116565b60008b815260208490526040902054909450611300908263ffffffff61305116565b60008b81526020849052604090205560019092019161126e565b600a850184905568056bc75e2d631000006113348b61305e565b116113bb577f37230adc97de8473c3f7d8283beb37b23ba4f1237f08f8190a62b04e45218b708a6113648c61305e565b6040805192835260208301919091528051918290030190a1600b85015484106113bb57604080518b815290517f2097ed8c6ffdfed9e01ab18c5682eca607d3f4e1657d4abf32a51ea341782c699181900360200190a15b7f534eb4590ac348de6e66b31074d03cf96af9a0fab73aa98716c575e44f0b93db8a8a6040518083815260200180602001828103825283818151815260200191508051906020019060200280838360005b8381101561142457818101518382015260200161140c565b50505050905001935050505060405180910390a15060019998505050505050505050565b600060603660641461145957600080fd5b600354600160a060020a031633146114935760045474010000000000000000000000000000000000000000900460ff161561149357600080fd5b600354600160a060020a031633146114e2576114ae8561309e565b600160a060020a0386166000908152602081905260409020546114d7908563ffffffff6130d916565b10156114e257600080fd5b6114ed8585856130eb565b95945050505050565b600061112c3383613250565b600354600090600160a060020a0316331461151c57600080fd5b600a54821061152a57600080fd5b50600e55600190565b60075460ff1681565b6003546000908190600160a060020a0316331461155857600080fd5b50506000818152600d60205260408120600481018290556005810182905560068101829055600781018290556008810182905560098101829055600b810182905560038101919091556001905b50919050565b600354600160a060020a031633146115c257600080fd5b600480548215157401000000000000000000000000000000000000000090810274ff0000000000000000000000000000000000000000199092169190911791829055604080519190920460ff161515815290517f7772b54b7aa3898aee10d476009b352b8b0542eaa2563ebd6a12d50d0edfacde9181900360200190a150565b60095481565b600354600090600160a060020a0316331461166257600080fd5b506000818152600d60205260409020600a54821080156116845750805460ff16155b151561168f57600080fd5b6040805183815290517f802eff881699fa025d411df3fd011f381e2a10e9e6ef38c35b8c76e146966fbe9181900360200190a15050565b600354600160a060020a031633146116dd57600080fd5b336000908152602081905260409020546116fd908263ffffffff6130d916565b33600090815260208190526040902055600154611720908263ffffffff6130d916565b60015560408051828152905160009133916000805160206135638339815191529181900360200190a350565b600454760100000000000000000000000000000000000000000000900460ff1681565b600354600090600160a060020a0316331461178957600080fd5b50600855600190565b600b5481565b600354600090600160a060020a031633146117b257600080fd5b5060048054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff199091161790556001919050565b60006117f08383613250565b9392505050565b600354600090819081908190819081908190600160a060020a0316331461181d57600080fd5b33600090815260208190526040902054955061183f868963ffffffff6132b616565b9450611851868663ffffffff6130d916565b600154909450611867908963ffffffff6132b616565b6001553360008181526020818152604080832089905580518881529051929392600080516020613563833981519152929181900390910190a3600a549250600083116118b257600080fd5b600091505b828210156118f357506000818152600d6020526040902060038101546118e3908963ffffffff6132b616565b60038201556001909101906118b7565b506001979650505050505050565b600354600090600160a060020a0316331461191b57600080fd5b60408051600160a060020a03851681526020810184905281517ff9951fbb46b09e4116221a0fdbd49ff3f8ec4ee8e893e45327e063235ad07183929181900390910190a150600192915050565b6003546000908190600160a060020a0316331461198457600080fd5b506000828152600d60205260409020805460ff1615156119a357600080fd5b805462ff00001916620100001781556001915050919050565b60006119c9600e5461305e565b905090565b336000908152600260209081526040808320600160a060020a038616845290915281205480831115611a2357336000908152600260209081526040808320600160a060020a0388168452909152812055611a58565b611a33818463ffffffff6130d916565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a3600191505b5092915050565b600354600090819081908190819081908190600160a060020a0316331480611af25750600454600160a060020a031633145b1515611afd57600080fd5b885188519096508614611b48576040805160e560020a62461bcd0281526020600482015260166024820152600080516020613543833981519152604482015290519081900360640190fd5b600354600160a060020a0316600090815260208190526040812054955093505b85841015611c42578884815181101515611b7e57fe5b9060200190602002015192508784815181101515611b9857fe5b9060200190602002015191506000821115611c375750600160a060020a038216600090815260208190526040902054611bd7818363ffffffff61305116565b600160a060020a038416600090815260208190526040902055611c00858363ffffffff6130d916565b600354604080518581529051929750600160a060020a03808716939216916000805160206135638339815191529181900360200190a35b600190930192611b68565b600354600160a060020a031660009081526020818152604080832088905580518281528c51818401528c517f6bd09b018bf088558f7ca2a5f8ec81d0fa727ecf41a5eff5ca5420915509d374948e949293849390840192868201929102908190849084905b83811015611cbf578181015183820152602001611ca7565b505050509050019250505060405180910390a150600198975050505050505050565b600061112c8261309e565b600e5481565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a03163314611d2457600080fd5b600354604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26003805473ffffffffffffffffffffffffffffffffffffffff19169055565b60045474010000000000000000000000000000000000000000900460ff1681565b60045460009081907501000000000000000000000000000000000000000000900460ff161515611dcb57600080fd5b600754611de590849060ff16600a0a63ffffffff6132cb16565b9150611df03361309e565b33600090815260208190526040902054611e10908463ffffffff6130d916565b1015611e1b57600080fd5b33600090815260208190526040902054611e3b908363ffffffff6130d916565b33600090815260208190526040902055600b54611e5f90849063ffffffff6132cb16565b90503031811115611e6f57600080fd5b600354600160a060020a0316600090815260208190526040902054611e9a908363ffffffff61305116565b600354600160a060020a0316600090815260208190526040808220929092559051339183156108fc02918491818181858888f19350505050158015611ee3573d6000803e3d6000fd5b50600354604080518481529051600160a060020a03909216913391600080516020613563833981519152919081900360200190a3505050565b600354600090600160a060020a03163314611f3657600080fd5b611f4a82633b9aca0063ffffffff6132cb16565b600955506001919050565b60035460009081908190600160a060020a03163314611f7357600080fd5b5050600a546000818152600d602090815260409091208c519091611f9e9160028401918f01906134aa565b50600481019a909a5560058a0198909855506006880195909555600787019390935560088601919091556009850155600b840155600390920191909155600a8054600190810190915592909150565b6003546000908190819081908190600160a060020a031633148061201b5750600454600160a060020a031633145b151561202657600080fd5b865186519094508414612083576040805160e560020a62461bcd02815260206004820152601660248201527f4172726179206c656e67747368206d69736d6174636800000000000000000000604482015290519081900360640190fd5b6000888152600d60205260408120935091505b838210156121465786828151811015156120ac57fe5b6020908102909101810151600160a060020a03811660009081526001860190925260409091205490915060ff16151561213b57600d830180546001808201835560009283526020808420909201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03861690811790915583528086019091526040909120805460ff191690911790555b600190910190612096565b6121518888886111cb565b98975050505050505050565b6004547501000000000000000000000000000000000000000000900460ff1681565b600354600160a060020a0316331461219657600080fd5b600480548215157501000000000000000000000000000000000000000000810275ff000000000000000000000000000000000000000000199092169190911790915560408051918252517f7005e1991959ce579ccf48eb6da4e420123f4f7bdfdb6c0796738d6c3f432f0b9181900360200190a150565b600354600160a060020a031681565b6006805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156110c35780601f10611098576101008083540402835291602001916110c3565b600354600090600160a060020a0316331461229157600080fd5b6007546122ab90839060ff16600a0a63ffffffff6132cb16565b6001549091506122c1908263ffffffff61305116565b600155336000908152602081905260409020546122e4908263ffffffff61305116565b336000818152602081815260408083209490945583518581529351929391926000805160206135638339815191529281900390910190a35050565b600354600160a060020a0316331461233657600080fd5b600354604051600160a060020a0390911690303180156108fc02916000818181858888f19350505050158015612370573d6000803e3d6000fd5b50565b600060403660441461238457600080fd5b600354600160a060020a031633146123be5760045474010000000000000000000000000000000000000000900460ff16156123be57600080fd5b600354600160a060020a03163314612404576123d93361309e565b336000908152602081905260409020546123f9908563ffffffff6130d916565b101561240457600080fd5b61103584846132f4565b6000908152600d60208190526040909120600c8101549101540390565b600354600160a060020a031633148061244e5750600454600160a060020a031633145b151561245957600080fd5b565b60035460009081908190819081908190600160a060020a031633148061248b5750600454600160a060020a031633145b151561249657600080fd5b8751875190955085146124e1576040805160e560020a62461bcd0281526020600482015260166024820152600080516020613543833981519152604482015290519081900360640190fd5b6008549350600092505b8483101561259157868381518110151561250157fe5b906020019060200201519150878381518110151561251b57fe5b6020908102909101015190508184116125865761253e828563ffffffff6130d916565b9150303182111561254e57600080fd5b604051600160a060020a0382169083156108fc029084906000818181858888f19350505050158015612584573d6000803e3d6000fd5b505b6001909201916124eb565b7f3953e3f71784c01be5e0ad95d36e2fa536d6d0cc98205ed234665f2efcf0812e886040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156125f35781810151838201526020016125db565b505050509050019250505060405180910390a1506001979650505050505050565b6060600080600080600080600080600080600080600a548e10151561263857600080fd5b5060008d8152600d60209081526040918290206002808201805485516001821615610100026000190190911692909204601f8101859004850283018501909552848252919390928301828280156126d05780601f106126a5576101008083540402835291602001916126d0565b820191906000526020600020905b8154815290600101906020018083116126b357829003601f168201915b50505050509c508060000160009054906101000a900460ff169b508060000160029054906101000a900460ff169a50806008015499508060090154985080600b01549750806003015496508060040154955080600501549450806006015493508060070154925080600a015491505091939597999b5091939597999b565b336000908152600260209081526040808320600160a060020a0386168452909152812054612782908363ffffffff61305116565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600354600160a060020a031633146127fe57600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000806000806000806000806000600360009054906101000a9004600160a060020a0316600160a060020a031633600160a060020a0316148061286a5750600454600160a060020a031633145b151561287557600080fd5b60008b8152600d60205260409020805490985060ff161561289557600080fd5b8754610100900460ff1615156128b357875461ff0019166101001788555b600d880154600c89015490975095508986019450868511156128d3578694505b600354600160a060020a031660009081526020819052604090205493508592505b848310156129cc57600d880180548490811061290c57fe5b600091825260209091200154600160a060020a0316915061292d828c613250565b905060008111156129c157600160a060020a038216600090815260208190526040902054612961908263ffffffff61305116565b600160a060020a03831660009081526020819052604090205561298a848263ffffffff6130d916565b600354604080518481529051929650600160a060020a03808616939216916000805160206135638339815191529181900360200190a35b6001909201916128f4565b600354600160a060020a0316600090815260208190526040902084905586851015612a3157604080518c8152602081018c905281517f49cfca8b5cce4cc1899d604dbced372d90766b107abaea147572edc4bfe22e4b929181900390910190a1612a3a565b612a3a8b611132565b600c880185905560019850505050505050505092915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b6003546000908190600160a060020a03163314612a9a57600080fd5b5060008a8152600d60205260408120908a1115612ab957600481018a90555b6000891115612aca57600581018990555b6000881115612adb57600681018890555b6000871115612aec57600781018790555b6000861115612afd57600881018690555b6000851115612b0e57600981018590555b6000841115612b1f57600b81018490555b6000831115612b3057600381018390555b5060019a9950505050505050505050565b600354600160a060020a03163314612b5857600080fd5b60048054821515760100000000000000000000000000000000000000000000810276ff00000000000000000000000000000000000000000000199092169190911790915560408051918252517faacaf402900fc42a1b9c12f73a8e872a8126b1559c6cc680d43e9c5e4053c3669181900360200190a150565b600354600160a060020a03163314612be857600080fd5b612370816133c3565b600354600090600160a060020a03163314612c0b57600080fd5b506000818152600d60205260409020805462ff00001916620100001790556001919050565b600354600090819081908190819081908190600160a060020a03163314612c5657600080fd5b336000908152602081905260409020549550612c78868963ffffffff6132cb16565b9450612c8a858763ffffffff6130d916565b336000908152602081905260409020869055600154909450612cb2908963ffffffff6132cb16565b60015560408051858152905133916000916000805160206135638339815191529181900360200190a3600a54925060008311612ced57600080fd5b600091505b828210156118f357506000818152600d602052604090206003810154612d1e908963ffffffff6132cb16565b6003820155600190910190612cf2565b600354600160a060020a03163314612d4557600080fd5b600b55565b6000806000806000806000806000600360009054906101000a9004600160a060020a0316600160a060020a031633600160a060020a03161480612d975750600454600160a060020a031633145b1515612da257600080fd5b8a518a519098508814612ded576040805160e560020a62461bcd0281526020600482015260166024820152600080516020613543833981519152604482015290519081900360640190fd5b60008c8152600d602052604090208054909750610100900460ff161515612e1c57865461ff0019166101001787555b600354600160a060020a0316600090815260208190526040812054965094505b87851015612f84578a85815181101515612e5257fe5b906020019060200201519350600c600085600160a060020a0316600160a060020a0316815260200190815260200160002092508985815181101515612e9357fe5b602090810290910181015160008e815291859052604090912054909250612ec0908363ffffffff61305116565b60008d8152602085905260409020556003870154612ee590839063ffffffff6132cb16565b90506000811115612f7957600160a060020a038416600090815260208190526040902054612f19908263ffffffff61305116565b600160a060020a038516600090815260208190526040902055612f42868263ffffffff6130d916565b600354604080518481529051929850600160a060020a03808816939216916000805160206135638339815191529181900360200190a35b600190940193612e3c565b85600080600360009054906101000a9004600160a060020a0316600160a060020a0316600160a060020a03168152602001908152602001600020819055507f534eb4590ac348de6e66b31074d03cf96af9a0fab73aa98716c575e44f0b93db8c8c6040518083815260200180602001828103825283818151815260200191508051906020019060200280838360005b8381101561302b578181015183820152602001613013565b50505050905001935050505060405180910390a15060019b9a5050505050505050505050565b8181018281101561112c57fe5b6000818152600d60205260408120600b810154600a820154111561308557600091506115a5565b600a810154600b8201546117f09163ffffffff6130d916565b600a54600090815b818110156130d2576130c86130bb8583613441565b849063ffffffff61305116565b92506001016130a6565b5050919050565b6000828211156130e557fe5b50900390565b6000600160a060020a038316151561310257600080fd5b600160a060020a03841660009081526020819052604090205482111561312757600080fd5b600160a060020a038416600090815260026020908152604080832033845290915290205482111561315757600080fd5b600160a060020a038416600090815260208190526040902054613180908363ffffffff6130d916565b600160a060020a0380861660009081526020819052604080822093909355908516815220546131b5908363ffffffff61305116565b600160a060020a038085166000908152602081815260408083209490945591871681526002825282812033825290915220546131f7908363ffffffff6130d916565b600160a060020a0380861660008181526002602090815260408083203384528252918290209490945580518681529051928716939192600080516020613563833981519152929181900390910190a35060019392505050565b600160a060020a0382166000908152600c60209081526040808320848452600d9092528220805460ff161561328857600092506132ae565b60038101546000858152602084905260409020546132ab9163ffffffff6132cb16565b92505b505092915050565b600081838115156132c357fe5b049392505050565b60008215156132dc5750600061112c565b508181028183828115156132ec57fe5b041461112c57fe5b6000600160a060020a038316151561330b57600080fd5b3360009081526020819052604090205482111561332757600080fd5b33600090815260208190526040902054613347908363ffffffff6130d916565b3360009081526020819052604080822092909255600160a060020a03851681522054613379908363ffffffff61305116565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233926000805160206135638339815191529281900390910190a350600192915050565b600160a060020a03811615156133d857600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a0382166000908152600c60209081526040808320848452600d90925282205462010000900460ff161561347e5760009150611ab9565b6000838152600d602090815260408083206003015491849052909120546110359163ffffffff6132cb16565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106134eb57805160ff1916838001178555613518565b82800160010185558215613518579182015b828111156135185782518255916020019190600101906134fd565b50613524929150613528565b5090565b6111c891905b80821115613524576000815560010161352e56004172726179206c656e67746873206d69736d6174636800000000000000000000ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820f5cf28df18ab1352f9c0c8aafb98cd6bfb20c77f2dfa86515ed36aeab6c93d3c0029"
}