{
  "address": "0x58a6618b3049c113460ab4ec62f2c68996e9ed7c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DNSSECImpl",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-29\n*/\n\npragma solidity ^0.4.23;\n\n// File: contracts/BytesUtils.sol\n\nlibrary BytesUtils {\n    /*\n    * @dev Returns the keccak-256 hash of a byte range.\n    * @param self The byte string to hash.\n    * @param offset The position to start hashing at.\n    * @param len The number of bytes to hash.\n    * @return The hash of the byte range.\n    */\n    function keccak(bytes memory self, uint offset, uint len) internal pure returns (bytes32 ret) {\n        require(offset + len <= self.length);\n        assembly {\n            ret := sha3(add(add(self, 32), offset), len)\n        }\n    }\n\n\n    /*\n    * @dev Returns a positive number if `other` comes lexicographically after\n    *      `self`, a negative number if it comes before, or zero if the\n    *      contents of the two bytes are equal.\n    * @param self The first bytes to compare.\n    * @param other The second bytes to compare.\n    * @return The result of the comparison.\n    */\n    function compare(bytes memory self, bytes memory other) internal pure returns (int) {\n        return compare(self, 0, self.length, other, 0, other.length);\n    }\n\n    /*\n    * @dev Returns a positive number if `other` comes lexicographically after\n    *      `self`, a negative number if it comes before, or zero if the\n    *      contents of the two bytes are equal. Comparison is done per-rune,\n    *      on unicode codepoints.\n    * @param self The first bytes to compare.\n    * @param offset The offset of self.\n    * @param len    The length of self.\n    * @param other The second bytes to compare.\n    * @param otheroffset The offset of the other string.\n    * @param otherlen    The length of the other string.\n    * @return The result of the comparison.\n    */\n    function compare(bytes memory self, uint offset, uint len, bytes memory other, uint otheroffset, uint otherlen) internal pure returns (int) {\n        uint shortest = len;\n        if (otherlen < len)\n        shortest = otherlen;\n\n        uint selfptr;\n        uint otherptr;\n\n        assembly {\n            selfptr := add(self, add(offset, 32))\n            otherptr := add(other, add(otheroffset, 32))\n        }\n        for (uint idx = 0; idx < shortest; idx += 32) {\n            uint a;\n            uint b;\n            assembly {\n                a := mload(selfptr)\n                b := mload(otherptr)\n            }\n            if (a != b) {\n                // Mask out irrelevant bytes and check again\n                uint mask;\n                if (shortest > 32) {\n                    mask = uint256(- 1); // aka 0xffffff....\n                } else {\n                    mask = ~(2 ** (8 * (32 - shortest + idx)) - 1);\n                }\n                uint diff = (a & mask) - (b & mask);\n                if (diff != 0)\n                return int(diff);\n            }\n            selfptr += 32;\n            otherptr += 32;\n        }\n\n        return int(len) - int(otherlen);\n    }\n\n    /*\n    * @dev Returns true if the two byte ranges are equal.\n    * @param self The first byte range to compare.\n    * @param offset The offset into the first byte range.\n    * @param other The second byte range to compare.\n    * @param otherOffset The offset into the second byte range.\n    * @param len The number of bytes to compare\n    * @return True if the byte ranges are equal, false otherwise.\n    */\n    function equals(bytes memory self, uint offset, bytes memory other, uint otherOffset, uint len) internal pure returns (bool) {\n        return keccak(self, offset, len) == keccak(other, otherOffset, len);\n    }\n\n    /*\n    * @dev Returns true if the two byte ranges are equal with offsets.\n    * @param self The first byte range to compare.\n    * @param offset The offset into the first byte range.\n    * @param other The second byte range to compare.\n    * @param otherOffset The offset into the second byte range.\n    * @return True if the byte ranges are equal, false otherwise.\n    */\n    function equals(bytes memory self, uint offset, bytes memory other, uint otherOffset) internal pure returns (bool) {\n        return keccak(self, offset, self.length - offset) == keccak(other, otherOffset, other.length - otherOffset);\n    }\n\n    /*\n    * @dev Compares a range of 'self' to all of 'other' and returns True iff\n    *      they are equal.\n    * @param self The first byte range to compare.\n    * @param offset The offset into the first byte range.\n    * @param other The second byte range to compare.\n    * @return True if the byte ranges are equal, false otherwise.\n    */\n    function equals(bytes memory self, uint offset, bytes memory other) internal pure returns (bool) {\n        return self.length >= offset + other.length && equals(self, offset, other, 0, other.length);\n    }\n\n    /*\n    * @dev Returns true if the two byte ranges are equal.\n    * @param self The first byte range to compare.\n    * @param other The second byte range to compare.\n    * @return True if the byte ranges are equal, false otherwise.\n    */\n    function equals(bytes memory self, bytes memory other) internal pure returns(bool) {\n        return self.length == other.length && equals(self, 0, other, 0, self.length);\n    }\n\n    /*\n    * @dev Returns the 8-bit number at the specified index of self.\n    * @param self The byte string.\n    * @param idx The index into the bytes\n    * @return The specified 8 bits of the string, interpreted as an integer.\n    */\n    function readUint8(bytes memory self, uint idx) internal pure returns (uint8 ret) {\n        require(idx + 1 <= self.length);\n        assembly {\n            ret := and(mload(add(add(self, 1), idx)), 0xFF)\n        }\n    }\n\n    /*\n    * @dev Returns the 16-bit number at the specified index of self.\n    * @param self The byte string.\n    * @param idx The index into the bytes\n    * @return The specified 16 bits of the string, interpreted as an integer.\n    */\n    function readUint16(bytes memory self, uint idx) internal pure returns (uint16 ret) {\n        require(idx + 2 <= self.length);\n        assembly {\n            ret := and(mload(add(add(self, 2), idx)), 0xFFFF)\n        }\n    }\n\n    /*\n    * @dev Returns the 32-bit number at the specified index of self.\n    * @param self The byte string.\n    * @param idx The index into the bytes\n    * @return The specified 32 bits of the string, interpreted as an integer.\n    */\n    function readUint32(bytes memory self, uint idx) internal pure returns (uint32 ret) {\n        require(idx + 4 <= self.length);\n        assembly {\n            ret := and(mload(add(add(self, 4), idx)), 0xFFFFFFFF)\n        }\n    }\n\n    /*\n    * @dev Returns the 32 byte value at the specified index of self.\n    * @param self The byte string.\n    * @param idx The index into the bytes\n    * @return The specified 32 bytes of the string.\n    */\n    function readBytes32(bytes memory self, uint idx) internal pure returns (bytes32 ret) {\n        require(idx + 32 <= self.length);\n        assembly {\n            ret := mload(add(add(self, 32), idx))\n        }\n    }\n\n    /*\n    * @dev Returns the 32 byte value at the specified index of self.\n    * @param self The byte string.\n    * @param idx The index into the bytes\n    * @return The specified 32 bytes of the string.\n    */\n    function readBytes20(bytes memory self, uint idx) internal pure returns (bytes20 ret) {\n        require(idx + 20 <= self.length);\n        assembly {\n            ret := and(mload(add(add(self, 32), idx)), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000)\n        }\n    }\n\n    /*\n    * @dev Returns the n byte value at the specified index of self.\n    * @param self The byte string.\n    * @param idx The index into the bytes.\n    * @param len The number of bytes.\n    * @return The specified 32 bytes of the string.\n    */\n    function readBytesN(bytes memory self, uint idx, uint len) internal pure returns (bytes20 ret) {\n        require(idx + len <= self.length);\n        assembly {\n            let mask := not(sub(exp(256, sub(32, len)), 1))\n            ret := and(mload(add(add(self, 32), idx)),  mask)\n        }\n    }\n\n    function memcpy(uint dest, uint src, uint len) private pure {\n        // Copy word-length chunks while possible\n        for (; len >= 32; len -= 32) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n            dest += 32;\n            src += 32;\n        }\n\n        // Copy remaining bytes\n        uint mask = 256 ** (32 - len) - 1;\n        assembly {\n            let srcpart := and(mload(src), not(mask))\n            let destpart := and(mload(dest), mask)\n            mstore(dest, or(destpart, srcpart))\n        }\n    }\n\n    /*\n    * @dev Copies a substring into a new byte string.\n    * @param self The byte string to copy from.\n    * @param offset The offset to start copying at.\n    * @param len The number of bytes to copy.\n    */\n    function substring(bytes memory self, uint offset, uint len) internal pure returns(bytes) {\n        require(offset + len <= self.length);\n\n        bytes memory ret = new bytes(len);\n        uint dest;\n        uint src;\n\n        assembly {\n            dest := add(ret, 32)\n            src := add(add(self, 32), offset)\n        }\n        memcpy(dest, src, len);\n\n        return ret;\n    }\n\n    // Maps characters from 0x30 to 0x7A to their base32 values.\n    // 0xFF represents invalid characters in that range.\n    bytes constant base32HexTable = hex'00010203040506070809FFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1FFFFFFFFFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F';\n\n    /**\n     * @dev Decodes unpadded base32 data of up to one word in length.\n     * @param self The data to decode.\n     * @param off Offset into the string to start at.\n     * @param len Number of characters to decode.\n     * @return The decoded data, left aligned.\n     */\n    function base32HexDecodeWord(bytes memory self, uint off, uint len) internal pure returns(bytes32) {\n        require(len <= 52);\n\n        uint ret = 0;\n        for(uint i = 0; i < len; i++) {\n            byte char = self[off + i];\n            require(char >= 0x30 && char <= 0x7A);\n            uint8 decoded = uint8(base32HexTable[uint(char) - 0x30]);\n            require(decoded <= 0x20);\n            if(i == len - 1) {\n                break;\n            }\n            ret = (ret << 5) | decoded;\n        }\n\n        uint bitlen = len * 5;\n        if(len % 8 == 0) {\n            // Multiple of 8 characters, no padding\n            ret = (ret << 5) | decoded;\n        } else if(len % 8 == 2) {\n            // Two extra characters - 1 byte\n            ret = (ret << 3) | (decoded >> 2);\n            bitlen -= 2;\n        } else if(len % 8 == 4) {\n            // Four extra characters - 2 bytes\n            ret = (ret << 1) | (decoded >> 4);\n            bitlen -= 4;\n        } else if(len % 8 == 5) {\n            // Five extra characters - 3 bytes\n            ret = (ret << 4) | (decoded >> 1);\n            bitlen -= 1;\n        } else if(len % 8 == 7) {\n            // Seven extra characters - 4 bytes\n            ret = (ret << 2) | (decoded >> 3);\n            bitlen -= 3;\n        } else {\n            revert();\n        }\n\n        return bytes32(ret << (256 - bitlen));\n    }\n}\n\n// File: contracts/DNSSEC.sol\n\ninterface DNSSEC {\n\n    event AlgorithmUpdated(uint8 id, address addr);\n    event DigestUpdated(uint8 id, address addr);\n    event NSEC3DigestUpdated(uint8 id, address addr);\n    event RRSetUpdated(bytes name, bytes rrset);\n\n    function submitRRSets(bytes memory data, bytes memory proof) public returns (bytes);\n    function submitRRSet(bytes memory input, bytes memory sig, bytes memory proof) public returns(bytes memory rrs);\n    function deleteRRSet(uint16 deleteType, bytes deleteName, bytes memory nsec, bytes memory sig, bytes memory proof) public;\n    function rrdata(uint16 dnstype, bytes memory name) public view returns (uint32, uint64, bytes20);\n\n}\n\n// File: contracts/Owned.sol\n\n/**\n* @dev Contract mixin for 'owned' contracts.\n*/\ncontract Owned {\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier owner_only() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function setOwner(address newOwner) public owner_only {\n        owner = newOwner;\n    }\n}\n\n// File: @ensdomains/buffer/contracts/Buffer.sol\n\n/**\n* @dev A library for working with mutable byte buffers in Solidity.\n*\n* Byte buffers are mutable and expandable, and provide a variety of primitives\n* for writing to them. At any time you can fetch a bytes object containing the\n* current contents of the buffer. The bytes object should not be stored between\n* operations, as it may change due to resizing of the buffer.\n*/\nlibrary Buffer {\n    /**\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\n    *      a capacity. The capacity may be longer than the current value, in\n    *      which case it can be extended without the need to allocate more memory.\n    */\n    struct buffer {\n        bytes buf;\n        uint capacity;\n    }\n\n    /**\n    * @dev Initializes a buffer with an initial capacity.\n    * @param buf The buffer to initialize.\n    * @param capacity The number of bytes of space to allocate the buffer.\n    * @return The buffer, for chaining.\n    */\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\n        if (capacity % 32 != 0) {\n            capacity += 32 - (capacity % 32);\n        }\n        // Allocate space for the buffer data\n        buf.capacity = capacity;\n        assembly {\n            let ptr := mload(0x40)\n            mstore(buf, ptr)\n            mstore(ptr, 0)\n            mstore(0x40, add(ptr, capacity))\n        }\n        return buf;\n    }\n\n    /**\n    * @dev Initializes a new buffer from an existing bytes object.\n    *      Changes to the buffer may mutate the original value.\n    * @param b The bytes object to initialize the buffer with.\n    * @return A new buffer.\n    */\n    function fromBytes(bytes b) internal pure returns(buffer memory) {\n        buffer memory buf;\n        buf.buf = b;\n        buf.capacity = b.length;\n        return buf;\n    }\n\n    function resize(buffer memory buf, uint capacity) private pure {\n        bytes memory oldbuf = buf.buf;\n        init(buf, capacity);\n        append(buf, oldbuf);\n    }\n\n    function max(uint a, uint b) private pure returns(uint) {\n        if (a > b) {\n            return a;\n        }\n        return b;\n    }\n\n    /**\n    * @dev Sets buffer length to 0.\n    * @param buf The buffer to truncate.\n    * @return The original buffer, for chaining..\n    */\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\n        assembly {\n            let bufptr := mload(buf)\n            mstore(bufptr, 0)\n        }\n        return buf;\n    }\n\n    /**\n    * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\n    *      the capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param off The start offset to write to.\n    * @param data The data to append.\n    * @param len The number of bytes to copy.\n    * @return The original buffer, for chaining.\n    */\n    function write(buffer memory buf, uint off, bytes data, uint len) internal pure returns(buffer memory) {\n        require(len <= data.length);\n\n        if (off + len + buf.buf.length > buf.capacity) {\n            resize(buf, max(buf.capacity, len + off) * 2);\n        }\n\n        uint dest;\n        uint src;\n        assembly {\n            // Memory address of the buffer data\n            let bufptr := mload(buf)\n            // Length of existing buffer data\n            let buflen := mload(bufptr)\n            // Start address = buffer address + offset + sizeof(buffer length)\n            dest := add(add(bufptr, 32), off)\n            // Update buffer length if we're extending it\n            if gt(add(len, off), buflen) {\n                mstore(bufptr, add(len, off))\n            }\n            src := add(data, 32)\n        }\n\n        // Copy word-length chunks while possible\n        for (; len >= 32; len -= 32) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n            dest += 32;\n            src += 32;\n        }\n\n        // Copy remaining bytes\n        uint mask = 256 ** (32 - len) - 1;\n        assembly {\n            let srcpart := and(mload(src), not(mask))\n            let destpart := and(mload(dest), mask)\n            mstore(dest, or(destpart, srcpart))\n        }\n\n        return buf;\n    }\n\n    /**\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\n    *      the capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param data The data to append.\n    * @param len The number of bytes to copy.\n    * @return The original buffer, for chaining.\n    */\n    function append(buffer memory buf, bytes data, uint len) internal pure returns (buffer memory) {\n        return write(buf, buf.buf.length, data, len);\n    }\n\n    /**\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\n    *      the capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param data The data to append.\n    * @return The original buffer, for chaining.\n    */\n    function append(buffer memory buf, bytes data) internal pure returns (buffer memory) {\n        return write(buf, buf.buf.length, data, data.length);\n    }\n\n    /**\n    * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\n    *      capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param off The offset to write the byte at.\n    * @param data The data to append.\n    * @return The original buffer, for chaining.\n    */\n    function writeUint8(buffer memory buf, uint off, uint8 data) internal pure returns(buffer memory) {\n        if (off > buf.capacity) {\n            resize(buf, buf.capacity * 2);\n        }\n\n        assembly {\n            // Memory address of the buffer data\n            let bufptr := mload(buf)\n            // Length of existing buffer data\n            let buflen := mload(bufptr)\n            // Address = buffer address + sizeof(buffer length) + off\n            let dest := add(add(bufptr, off), 32)\n            mstore8(dest, data)\n            // Update buffer length if we extended it\n            if eq(off, buflen) {\n                mstore(bufptr, add(buflen, 1))\n            }\n        }\n        return buf;\n    }\n\n    /**\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\n    *      capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param data The data to append.\n    * @return The original buffer, for chaining.\n    */\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\n        return writeUint8(buf, buf.buf.length, data);\n    }\n\n    /**\n    * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\n    *      exceed the capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param off The offset to write at.\n    * @param data The data to append.\n    * @param len The number of bytes to write (left-aligned).\n    * @return The original buffer, for chaining.\n    */\n    function write(buffer memory buf, uint off, bytes32 data, uint len) private pure returns(buffer memory) {\n        if (len + off > buf.capacity) {\n            resize(buf, max(buf.capacity, len) * 2);\n        }\n\n        uint mask = 256 ** len - 1;\n        // Right-align data\n        data = data >> (8 * (32 - len));\n        assembly {\n            // Memory address of the buffer data\n            let bufptr := mload(buf)\n            // Address = buffer address + sizeof(buffer length) + off + len\n            let dest := add(add(bufptr, off), len)\n            mstore(dest, or(and(mload(dest), not(mask)), data))\n            // Update buffer length if we extended it\n            if gt(add(off, len), mload(bufptr)) {\n                mstore(bufptr, add(off, len))\n            }\n        }\n        return buf;\n    }\n\n    /**\n    * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\n    *      capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param off The offset to write at.\n    * @param data The data to append.\n    * @return The original buffer, for chaining.\n    */\n    function writeBytes20(buffer memory buf, uint off, bytes20 data) internal pure returns (buffer memory) {\n        return write(buf, off, bytes32(data), 20);\n    }\n\n    /**\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\n    *      the capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param data The data to append.\n    * @return The original buffer, for chhaining.\n    */\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\n        return write(buf, buf.buf.length, bytes32(data), 20);\n    }\n\n    /**\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\n    *      the capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param data The data to append.\n    * @return The original buffer, for chaining.\n    */\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\n        return write(buf, buf.buf.length, data, 32);\n    }\n\n    /**\n    * @dev Writes an integer to the buffer. Resizes if doing so would exceed\n    *      the capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param off The offset to write at.\n    * @param data The data to append.\n    * @param len The number of bytes to write (right-aligned).\n    * @return The original buffer, for chaining.\n    */\n    function writeInt(buffer memory buf, uint off, uint data, uint len) private pure returns(buffer memory) {\n        if (len + off > buf.capacity) {\n            resize(buf, max(buf.capacity, len + off) * 2);\n        }\n\n        uint mask = 256 ** len - 1;\n        assembly {\n            // Memory address of the buffer data\n            let bufptr := mload(buf)\n            // Address = buffer address + off + sizeof(buffer length) + len\n            let dest := add(add(bufptr, off), len)\n            mstore(dest, or(and(mload(dest), not(mask)), data))\n            // Update buffer length if we extended it\n            if gt(add(off, len), mload(bufptr)) {\n                mstore(bufptr, add(off, len))\n            }\n        }\n        return buf;\n    }\n}\n\n// File: contracts/RRUtils.sol\n\n/**\n* @dev RRUtils is a library that provides utilities for parsing DNS resource records.\n*/\nlibrary RRUtils {\n    using BytesUtils for *;\n    using Buffer for *;\n\n    /**\n    * @dev Returns the number of bytes in the DNS name at 'offset' in 'self'.\n    * @param self The byte array to read a name from.\n    * @param offset The offset to start reading at.\n    * @return The length of the DNS name at 'offset', in bytes.\n    */\n    function nameLength(bytes memory self, uint offset) internal pure returns(uint) {\n        uint idx = offset;\n        while (true) {\n            assert(idx < self.length);\n            uint labelLen = self.readUint8(idx);\n            idx += labelLen + 1;\n            if (labelLen == 0) {\n                break;\n            }\n        }\n        return idx - offset;\n    }\n\n    /**\n    * @dev Returns a DNS format name at the specified offset of self.\n    * @param self The byte array to read a name from.\n    * @param offset The offset to start reading at.\n    * @return The name.\n    */\n    function readName(bytes memory self, uint offset) internal pure returns(bytes memory ret) {\n        uint len = nameLength(self, offset);\n        return self.substring(offset, len);\n    }\n\n    /**\n    * @dev Returns the number of labels in the DNS name at 'offset' in 'self'.\n    * @param self The byte array to read a name from.\n    * @param offset The offset to start reading at.\n    * @return The number of labels in the DNS name at 'offset', in bytes.\n    */\n    function labelCount(bytes memory self, uint offset) internal pure returns(uint) {\n        uint count = 0;\n        while (true) {\n            assert(offset < self.length);\n            uint labelLen = self.readUint8(offset);\n            offset += labelLen + 1;\n            if (labelLen == 0) {\n                break;\n            }\n            count += 1;\n        }\n        return count;\n    }\n\n    /**\n    * @dev An iterator over resource records.\n    */\n    struct RRIterator {\n        bytes data;\n        uint offset;\n        uint16 dnstype;\n        uint16 class;\n        uint32 ttl;\n        uint rdataOffset;\n        uint nextOffset;\n    }\n\n    /**\n    * @dev Begins iterating over resource records.\n    * @param self The byte string to read from.\n    * @param offset The offset to start reading at.\n    * @return An iterator object.\n    */\n    function iterateRRs(bytes memory self, uint offset) internal pure returns (RRIterator memory ret) {\n        ret.data = self;\n        ret.nextOffset = offset;\n        next(ret);\n    }\n\n    /**\n    * @dev Returns true iff there are more RRs to iterate.\n    * @param iter The iterator to check.\n    * @return True iff the iterator has finished.\n    */\n    function done(RRIterator memory iter) internal pure returns(bool) {\n        return iter.offset >= iter.data.length;\n    }\n\n    /**\n    * @dev Moves the iterator to the next resource record.\n    * @param iter The iterator to advance.\n    */\n    function next(RRIterator memory iter) internal pure {\n        iter.offset = iter.nextOffset;\n        if (iter.offset >= iter.data.length) {\n            return;\n        }\n\n        // Skip the name\n        uint off = iter.offset + nameLength(iter.data, iter.offset);\n\n        // Read type, class, and ttl\n        iter.dnstype = iter.data.readUint16(off);\n        off += 2;\n        iter.class = iter.data.readUint16(off);\n        off += 2;\n        iter.ttl = iter.data.readUint32(off);\n        off += 4;\n\n        // Read the rdata\n        uint rdataLength = iter.data.readUint16(off);\n        off += 2;\n        iter.rdataOffset = off;\n        iter.nextOffset = off + rdataLength;\n    }\n\n    /**\n    * @dev Returns the name of the current record.\n    * @param iter The iterator.\n    * @return A new bytes object containing the owner name from the RR.\n    */\n    function name(RRIterator memory iter) internal pure returns(bytes memory) {\n        return iter.data.substring(iter.offset, nameLength(iter.data, iter.offset));\n    }\n\n    /**\n    * @dev Returns the rdata portion of the current record.\n    * @param iter The iterator.\n    * @return A new bytes object containing the RR's RDATA.\n    */\n    function rdata(RRIterator memory iter) internal pure returns(bytes memory) {\n        return iter.data.substring(iter.rdataOffset, iter.nextOffset - iter.rdataOffset);\n    }\n\n    /**\n    * @dev Checks if a given RR type exists in a type bitmap.\n    * @param self The byte string to read the type bitmap from.\n    * @param offset The offset to start reading at.\n    * @param rrtype The RR type to check for.\n    * @return True if the type is found in the bitmap, false otherwise.\n    */\n    function checkTypeBitmap(bytes memory self, uint offset, uint16 rrtype) internal pure returns (bool) {\n        uint8 typeWindow = uint8(rrtype >> 8);\n        uint8 windowByte = uint8((rrtype & 0xff) / 8);\n        uint8 windowBitmask = uint8(uint8(1) << (uint8(7) - uint8(rrtype & 0x7)));\n        for (uint off = offset; off < self.length;) {\n            uint8 window = self.readUint8(off);\n            uint8 len = self.readUint8(off + 1);\n            if (typeWindow < window) {\n                // We've gone past our window; it's not here.\n                return false;\n            } else if (typeWindow == window) {\n                // Check this type bitmap\n                if (len * 8 <= windowByte) {\n                    // Our type is past the end of the bitmap\n                    return false;\n                }\n                return (self.readUint8(off + windowByte + 2) & windowBitmask) != 0;\n            } else {\n                // Skip this type bitmap\n                off += len + 2;\n            }\n        }\n\n        return false;\n    }\n\n    function compareNames(bytes memory self, bytes memory other) internal pure returns (int) {\n        if (self.equals(other)) {\n            return 0;\n        }\n\n        uint off;\n        uint otheroff;\n        uint prevoff;\n        uint otherprevoff;\n        uint counts = labelCount(self, 0);\n        uint othercounts = labelCount(other, 0);\n\n        // Keep removing labels from the front of the name until both names are equal length\n        while (counts > othercounts) {\n            prevoff = off;\n            off = progress(self, off);\n            counts--;\n        }\n\n        while (othercounts > counts) {\n            otherprevoff = otheroff;\n            otheroff = progress(other, otheroff);\n            othercounts--;\n        }\n\n        // Compare the last nonequal labels to each other\n        while (counts > 0 && !self.equals(off, other, otheroff)) {\n            prevoff = off;\n            off = progress(self, off);\n            otherprevoff = otheroff;\n            otheroff = progress(other, otheroff);\n            counts -= 1;\n        }\n\n        if (off == 0) {\n            return -1;\n        }\n        if(otheroff == 0) {\n            return 1;\n        }\n\n        return self.compare(prevoff + 1, self.readUint8(prevoff), other, otherprevoff + 1, other.readUint8(otherprevoff));\n    }\n\n    function progress(bytes memory body, uint off) internal pure returns(uint) {\n        return off + 1 + body.readUint8(off);\n    }\n}\n\n// File: contracts/algorithms/Algorithm.sol\n\n/**\n* @dev An interface for contracts implementing a DNSSEC (signing) algorithm.\n*/\ninterface Algorithm {\n    /**\n    * @dev Verifies a signature.\n    * @param key The public key to verify with.\n    * @param data The signed data to verify.\n    * @param signature The signature to verify.\n    * @return True iff the signature is valid.\n    */\n    function verify(bytes key, bytes data, bytes signature) external view returns (bool);\n}\n\n// File: contracts/digests/Digest.sol\n\n/**\n* @dev An interface for contracts implementing a DNSSEC digest.\n*/\ninterface Digest {\n    /**\n    * @dev Verifies a cryptographic hash.\n    * @param data The data to hash.\n    * @param hash The hash to compare to.\n    * @return True iff the hashed data matches the provided hash value.\n    */\n    function verify(bytes data, bytes hash) external pure returns (bool);\n}\n\n// File: contracts/nsec3digests/NSEC3Digest.sol\n\n/**\n * @dev Interface for contracts that implement NSEC3 digest algorithms.\n */\ninterface NSEC3Digest {\n    /**\n     * @dev Performs an NSEC3 iterated hash.\n     * @param salt The salt value to use on each iteration.\n     * @param data The data to hash.\n     * @param iterations The number of iterations to perform.\n     * @return The result of the iterated hash operation.\n     */\n     function hash(bytes salt, bytes data, uint iterations) external pure returns (bytes32);\n}\n\n// File: contracts/DNSSECImpl.sol\n\n/*\n * @dev An oracle contract that verifies and stores DNSSEC-validated DNS records.\n *\n * TODO: Support for NSEC3 records\n * TODO: Use 'serial number math' for inception/expiration\n */\ncontract DNSSECImpl is DNSSEC, Owned {\n    using Buffer for Buffer.buffer;\n    using BytesUtils for bytes;\n    using RRUtils for *;\n\n    uint16 constant DNSCLASS_IN = 1;\n\n    uint16 constant DNSTYPE_DS = 43;\n    uint16 constant DNSTYPE_RRSIG = 46;\n    uint16 constant DNSTYPE_NSEC = 47;\n    uint16 constant DNSTYPE_DNSKEY = 48;\n    uint16 constant DNSTYPE_NSEC3 = 50;\n\n    uint constant DS_KEY_TAG = 0;\n    uint constant DS_ALGORITHM = 2;\n    uint constant DS_DIGEST_TYPE = 3;\n    uint constant DS_DIGEST = 4;\n\n    uint constant RRSIG_TYPE = 0;\n    uint constant RRSIG_ALGORITHM = 2;\n    uint constant RRSIG_LABELS = 3;\n    uint constant RRSIG_TTL = 4;\n    uint constant RRSIG_EXPIRATION = 8;\n    uint constant RRSIG_INCEPTION = 12;\n    uint constant RRSIG_KEY_TAG = 16;\n    uint constant RRSIG_SIGNER_NAME = 18;\n\n    uint constant DNSKEY_FLAGS = 0;\n    uint constant DNSKEY_PROTOCOL = 2;\n    uint constant DNSKEY_ALGORITHM = 3;\n    uint constant DNSKEY_PUBKEY = 4;\n\n    uint constant DNSKEY_FLAG_ZONEKEY = 0x100;\n\n    uint constant NSEC3_HASH_ALGORITHM = 0;\n    uint constant NSEC3_FLAGS = 1;\n    uint constant NSEC3_ITERATIONS = 2;\n    uint constant NSEC3_SALT_LENGTH = 4;\n    uint constant NSEC3_SALT = 5;\n\n    uint8 constant ALGORITHM_RSASHA256 = 8;\n\n    uint8 constant DIGEST_ALGORITHM_SHA256 = 2;\n\n    struct RRSet {\n        uint32 inception;\n        uint64 inserted;\n        bytes20 hash;\n    }\n\n    // (name, type) => RRSet\n    mapping (bytes32 => mapping(uint16 => RRSet)) rrsets;\n\n    bytes public anchors;\n\n    mapping (uint8 => Algorithm) public algorithms;\n    mapping (uint8 => Digest) public digests;\n    mapping (uint8 => NSEC3Digest) public nsec3Digests;\n\n    /**\n     * @dev Constructor.\n     * @param _anchors The binary format RR entries for the root DS records.\n     */\n    constructor(bytes _anchors) public {\n        // Insert the 'trust anchors' - the key hashes that start the chain\n        // of trust for all other records.\n        anchors = _anchors;\n        rrsets[keccak256(hex\"00\")][DNSTYPE_DS] = RRSet({\n            inception: uint32(0),\n            inserted: uint64(now),\n            hash: bytes20(keccak256(anchors))\n        });\n        emit RRSetUpdated(hex\"00\", anchors);\n    }\n\n    /**\n     * @dev Sets the contract address for a signature verification algorithm.\n     *      Callable only by the owner.\n     * @param id The algorithm ID\n     * @param algo The address of the algorithm contract.\n     */\n    function setAlgorithm(uint8 id, Algorithm algo) public owner_only {\n        algorithms[id] = algo;\n        emit AlgorithmUpdated(id, algo);\n    }\n\n    /**\n     * @dev Sets the contract address for a digest verification algorithm.\n     *      Callable only by the owner.\n     * @param id The digest ID\n     * @param digest The address of the digest contract.\n     */\n    function setDigest(uint8 id, Digest digest) public owner_only {\n        digests[id] = digest;\n        emit DigestUpdated(id, digest);\n    }\n\n    /**\n     * @dev Sets the contract address for an NSEC3 digest algorithm.\n     *      Callable only by the owner.\n     * @param id The digest ID\n     * @param digest The address of the digest contract.\n     */\n    function setNSEC3Digest(uint8 id, NSEC3Digest digest) public owner_only {\n        nsec3Digests[id] = digest;\n        emit NSEC3DigestUpdated(id, digest);\n    }\n\n    /**\n     * @dev Submits multiple RRSets\n     * @param data The data to submit, as a series of chunks. Each chunk is\n     *        in the format <uint16 length><bytes input><uint16 length><bytes sig>\n     * @param proof The DNSKEY or DS to validate the first signature against.\n     * @return The last RRSET submitted.\n     */\n    function submitRRSets(bytes memory data, bytes memory proof) public returns (bytes) {\n        uint offset = 0;\n        while(offset < data.length) {\n            bytes memory input = data.substring(offset + 2, data.readUint16(offset));\n            offset += input.length + 2;\n            bytes memory sig = data.substring(offset + 2, data.readUint16(offset));\n            offset += sig.length + 2;\n            proof = submitRRSet(input, sig, proof);\n        }\n        return proof;\n    }\n\n    /**\n     * @dev Submits a signed set of RRs to the oracle.\n     *\n     * RRSETs are only accepted if they are signed with a key that is already\n     * trusted, or if they are self-signed, and the signing key is identified by\n     * a DS record that is already trusted.\n     *\n     * @param input The signed RR set. This is in the format described in section\n     *        5.3.2 of RFC4035: The RRDATA section from the RRSIG without the signature\n     *        data, followed by a series of canonicalised RR records that the signature\n     *        applies to.\n     * @param sig The signature data from the RRSIG record.\n     * @param proof The DNSKEY or DS to validate the signature against. Must Already\n     *        have been submitted and proved previously.\n     */\n    function submitRRSet(bytes memory input, bytes memory sig, bytes memory proof)\n        public returns(bytes memory rrs)\n    {\n        bytes memory name;\n        (name, rrs) = validateSignedSet(input, sig, proof);\n\n        uint32 inception = input.readUint32(RRSIG_INCEPTION);\n        uint16 typecovered = input.readUint16(RRSIG_TYPE);\n\n        RRSet storage set = rrsets[keccak256(name)][typecovered];\n        if (set.inserted > 0) {\n            // To replace an existing rrset, the signature must be at least as new\n            require(inception >= set.inception);\n        }\n        if (set.hash == keccak256(rrs)) {\n            // Already inserted!\n            return;\n        }\n\n        rrsets[keccak256(name)][typecovered] = RRSet({\n            inception: inception,\n            inserted: uint64(now),\n            hash: bytes20(keccak256(rrs))\n        });\n        emit RRSetUpdated(name, rrs);\n    }\n\n    /**\n     * @dev Deletes an RR from the oracle.\n     *\n     * @param deleteType The DNS record type to delete.\n     * @param deleteName which you want to delete\n     * @param nsec The signed NSEC RRset. This is in the format described in section\n     *        5.3.2 of RFC4035: The RRDATA section from the RRSIG without the signature\n     *        data, followed by a series of canonicalised RR records that the signature\n     *        applies to.\n     */\n    function deleteRRSet(uint16 deleteType, bytes deleteName, bytes memory nsec, bytes memory sig, bytes memory proof) public {\n        bytes memory nsecName;\n        bytes memory rrs;\n        (nsecName, rrs) = validateSignedSet(nsec, sig, proof);\n\n        // Don't let someone use an old proof to delete a new name\n        require(rrsets[keccak256(deleteName)][deleteType].inception <= nsec.readUint32(RRSIG_INCEPTION));\n\n        for (RRUtils.RRIterator memory iter = rrs.iterateRRs(0); !iter.done(); iter.next()) {\n            // We're dealing with three names here:\n            //   - deleteName is the name the user wants us to delete\n            //   - nsecName is the owner name of the NSEC record\n            //   - nextName is the next name specified in the NSEC record\n            //\n            // And three cases:\n            //   - deleteName equals nsecName, in which case we can delete the\n            //     record if it's not in the type bitmap.\n            //   - nextName comes after nsecName, in which case we can delete\n            //     the record if deleteName comes between nextName and nsecName.\n            //   - nextName comes before nsecName, in which case nextName is the\n            //     zone apez, and deleteName must come after nsecName.\n\n            if(iter.dnstype == DNSTYPE_NSEC) {\n                checkNsecName(iter, nsecName, deleteName, deleteType);\n            } else if(iter.dnstype == DNSTYPE_NSEC3) {\n                checkNsec3Name(iter, nsecName, deleteName, deleteType);\n            } else {\n                revert(\"Unrecognised record type\");\n            }\n\n            delete rrsets[keccak256(deleteName)][deleteType];\n            return;\n        }\n        // This should never reach.\n        revert();\n    }\n\n    function checkNsecName(RRUtils.RRIterator memory iter, bytes memory nsecName, bytes memory deleteName, uint16 deleteType) private pure {\n        uint rdataOffset = iter.rdataOffset;\n        uint nextNameLength = iter.data.nameLength(rdataOffset);\n        uint rDataLength = iter.nextOffset - iter.rdataOffset;\n\n        // We assume that there is always typed bitmap after the next domain name\n        require(rDataLength > nextNameLength);\n\n        int compareResult = deleteName.compareNames(nsecName);\n        if(compareResult == 0) {\n            // Name to delete is on the same label as the NSEC record\n            require(!iter.data.checkTypeBitmap(rdataOffset + nextNameLength, deleteType));\n        } else {\n            // First check if the NSEC next name comes after the NSEC name.\n            bytes memory nextName = iter.data.substring(rdataOffset,nextNameLength);\n            // deleteName must come after nsecName\n            require(compareResult > 0);\n            if(nsecName.compareNames(nextName) < 0) {\n                // deleteName must also come before nextName\n                require(deleteName.compareNames(nextName) < 0);\n            }\n        }\n    }\n\n    function checkNsec3Name(RRUtils.RRIterator memory iter, bytes memory nsecName, bytes memory deleteName, uint16 deleteType) private view {\n        uint16 iterations = iter.data.readUint16(iter.rdataOffset + NSEC3_ITERATIONS);\n        uint8 saltLength = iter.data.readUint8(iter.rdataOffset + NSEC3_SALT_LENGTH);\n        bytes memory salt = iter.data.substring(iter.rdataOffset + NSEC3_SALT, saltLength);\n        bytes32 deleteNameHash = nsec3Digests[iter.data.readUint8(iter.rdataOffset)].hash(salt, deleteName, iterations);\n\n        uint8 nextLength = iter.data.readUint8(iter.rdataOffset + NSEC3_SALT + saltLength);\n        require(nextLength <= 32);\n        bytes32 nextNameHash = iter.data.readBytesN(iter.rdataOffset + NSEC3_SALT + saltLength + 1, nextLength);\n\n        bytes32 nsecNameHash = nsecName.base32HexDecodeWord(1, uint(nsecName.readUint8(0)));\n\n        if(deleteNameHash == nsecNameHash) {\n            // Name to delete is on the same label as the NSEC record\n            require(!iter.data.checkTypeBitmap(iter.rdataOffset + NSEC3_SALT + saltLength + 1 + nextLength, deleteType));\n        } else {\n            // deleteName must come after nsecName\n            require(deleteNameHash > nsecNameHash);\n            // Check if the NSEC next name comes after the NSEC name.\n            if(nextNameHash > nsecNameHash) {\n                // deleteName must come also come before nextName\n                require(deleteNameHash < nextNameHash);\n            }\n        }\n    }\n\n    /**\n     * @dev Returns data about the RRs (if any) known to this oracle with the provided type and name.\n     * @param dnstype The DNS record type to query.\n     * @param name The name to query, in DNS label-sequence format.\n     * @return inception The unix timestamp at which the signature for this RRSET was created.\n     * @return inserted The unix timestamp at which this RRSET was inserted into the oracle.\n     * @return hash The hash of the RRset that was inserted.\n     */\n    function rrdata(uint16 dnstype, bytes memory name) public view returns (uint32, uint64, bytes20) {\n        RRSet storage result = rrsets[keccak256(name)][dnstype];\n        return (result.inception, result.inserted, result.hash);\n    }\n\n    /**\n     * @dev Submits a signed set of RRs to the oracle.\n     *\n     * RRSETs are only accepted if they are signed with a key that is already\n     * trusted, or if they are self-signed, and the signing key is identified by\n     * a DS record that is already trusted.\n     *\n     * @param input The signed RR set. This is in the format described in section\n     *        5.3.2 of RFC4035: The RRDATA section from the RRSIG without the signature\n     *        data, followed by a series of canonicalised RR records that the signature\n     *        applies to.\n     * @param sig The signature data from the RRSIG record.\n     * @param proof The DNSKEY or DS to validate the signature against. Must Already\n     *        have been submitted and proved previously.\n     */\n    function validateSignedSet(bytes memory input, bytes memory sig, bytes memory proof) internal view returns(bytes memory name, bytes memory rrs) {\n        require(validProof(input.readName(RRSIG_SIGNER_NAME), proof));\n\n        uint32 inception = input.readUint32(RRSIG_INCEPTION);\n        uint32 expiration = input.readUint32(RRSIG_EXPIRATION);\n        uint16 typecovered = input.readUint16(RRSIG_TYPE);\n        uint8 labels = input.readUint8(RRSIG_LABELS);\n\n        // Extract the RR data\n        uint rrdataOffset = input.nameLength(RRSIG_SIGNER_NAME) + 18;\n        rrs = input.substring(rrdataOffset, input.length - rrdataOffset);\n\n        // Do some basic checks on the RRs and extract the name\n        name = validateRRs(rrs, typecovered);\n        require(name.labelCount(0) == labels);\n\n        // TODO: Check inception and expiration using mod2^32 math\n\n        // o  The validator's notion of the current time MUST be less than or\n        //    equal to the time listed in the RRSIG RR's Expiration field.\n        require(expiration > now);\n\n        // o  The validator's notion of the current time MUST be greater than or\n        //    equal to the time listed in the RRSIG RR's Inception field.\n        require(inception < now);\n\n        // Validate the signature\n        verifySignature(name, input, sig, proof);\n\n        return (name, rrs);\n    }\n\n    function validProof(bytes name, bytes memory proof) internal view returns(bool) {\n        uint16 dnstype = proof.readUint16(proof.nameLength(0));\n        return rrsets[keccak256(name)][dnstype].hash == bytes20(keccak256(proof));\n    }\n\n    /**\n     * @dev Validates a set of RRs.\n     * @param data The RR data.\n     * @param typecovered The type covered by the RRSIG record.\n     */\n    function validateRRs(bytes memory data, uint16 typecovered) internal pure returns (bytes memory name) {\n        // Iterate over all the RRs\n        for (RRUtils.RRIterator memory iter = data.iterateRRs(0); !iter.done(); iter.next()) {\n            // We only support class IN (Internet)\n            require(iter.class == DNSCLASS_IN);\n\n            if(name.length == 0) {\n                name = iter.name();\n            } else {\n                // Name must be the same on all RRs\n                require(name.length == data.nameLength(iter.offset));\n                require(name.equals(0, data, iter.offset, name.length));\n            }\n\n            // o  The RRSIG RR's Type Covered field MUST equal the RRset's type.\n            require(iter.dnstype == typecovered);\n        }\n    }\n\n    /**\n     * @dev Performs signature verification.\n     *\n     * Throws or reverts if unable to verify the record.\n     *\n     * @param name The name of the RRSIG record, in DNS label-sequence format.\n     * @param data The original data to verify.\n     * @param sig The signature data.\n     */\n    function verifySignature(bytes name, bytes memory data, bytes memory sig, bytes memory proof) internal view {\n        uint signerNameLength = data.nameLength(RRSIG_SIGNER_NAME);\n\n        // o  The RRSIG RR's Signer's Name field MUST be the name of the zone\n        //    that contains the RRset.\n        require(signerNameLength <= name.length);\n        require(data.equals(RRSIG_SIGNER_NAME, name, name.length - signerNameLength, signerNameLength));\n\n        // Set the return offset to point at the first RR\n        uint offset = 18 + signerNameLength;\n\n        // Check the proof\n        uint16 dnstype = proof.readUint16(proof.nameLength(0));\n        if (dnstype == DNSTYPE_DS) {\n            require(verifyWithDS(data, sig, offset, proof));\n        } else if (dnstype == DNSTYPE_DNSKEY) {\n            require(verifyWithKnownKey(data, sig, proof));\n        } else {\n            revert(\"Unsupported proof record type\");\n        }\n    }\n\n    /**\n     * @dev Attempts to verify a signed RRSET against an already known public key.\n     * @param data The original data to verify.\n     * @param sig The signature data.\n     * @return True if the RRSET could be verified, false otherwise.\n     */\n    function verifyWithKnownKey(bytes memory data, bytes memory sig, bytes memory proof) internal view returns(bool) {\n        uint signerNameLength = data.nameLength(RRSIG_SIGNER_NAME);\n\n        // Extract algorithm and keytag\n        uint8 algorithm = data.readUint8(RRSIG_ALGORITHM);\n        uint16 keytag = data.readUint16(RRSIG_KEY_TAG);\n\n        for (RRUtils.RRIterator memory iter = proof.iterateRRs(0); !iter.done(); iter.next()) {\n            // Check the DNSKEY's owner name matches the signer name on the RRSIG\n            require(proof.nameLength(0) == signerNameLength);\n            require(proof.equals(0, data, RRSIG_SIGNER_NAME, signerNameLength));\n            if (verifySignatureWithKey(iter.rdata(), algorithm, keytag, data, sig)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * @dev Attempts to verify a signed RRSET against an already known public key.\n     * @param data The original data to verify.\n     * @param sig The signature data.\n     * @param offset The offset from the start of the data to the first RR.\n     * @return True if the RRSET could be verified, false otherwise.\n     */\n    function verifyWithDS(bytes memory data, bytes memory sig, uint offset, bytes memory proof) internal view returns(bool) {\n        // Extract algorithm and keytag\n        uint8 algorithm = data.readUint8(RRSIG_ALGORITHM);\n        uint16 keytag = data.readUint16(RRSIG_KEY_TAG);\n\n        // Perhaps it's self-signed and verified by a DS record?\n        for (RRUtils.RRIterator memory iter = data.iterateRRs(offset); !iter.done(); iter.next()) {\n            if (iter.dnstype != DNSTYPE_DNSKEY) {\n                return false;\n            }\n\n            bytes memory keyrdata = iter.rdata();\n            if (verifySignatureWithKey(keyrdata, algorithm, keytag, data, sig)) {\n                // It's self-signed - look for a DS record to verify it.\n                return verifyKeyWithDS(iter.name(), keyrdata, keytag, algorithm, proof);\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * @dev Attempts to verify some data using a provided key and a signature.\n     * @param keyrdata The RDATA section of the key to use.\n     * @param algorithm The algorithm ID of the key and signature.\n     * @param keytag The keytag from the signature.\n     * @param data The data to verify.\n     * @param sig The signature to use.\n     * @return True iff the key verifies the signature.\n     */\n    function verifySignatureWithKey(bytes memory keyrdata, uint8 algorithm, uint16 keytag, bytes data, bytes sig) internal view returns (bool) {\n        if (algorithms[algorithm] == address(0)) {\n            return false;\n        }\n        // TODO: Check key isn't expired, unless updating key itself\n\n        // o The RRSIG RR's Signer's Name, Algorithm, and Key Tag fields MUST\n        //   match the owner name, algorithm, and key tag for some DNSKEY RR in\n        //   the zone's apex DNSKEY RRset.\n        if (keyrdata.readUint8(DNSKEY_PROTOCOL) != 3) {\n            return false;\n        }\n        if (keyrdata.readUint8(DNSKEY_ALGORITHM) != algorithm) {\n            return false;\n        }\n        uint16 computedkeytag = computeKeytag(keyrdata);\n        if (computedkeytag != keytag) {\n            return false;\n        }\n\n        // o The matching DNSKEY RR MUST be present in the zone's apex DNSKEY\n        //   RRset, and MUST have the Zone Flag bit (DNSKEY RDATA Flag bit 7)\n        //   set.\n        if (keyrdata.readUint16(DNSKEY_FLAGS) & DNSKEY_FLAG_ZONEKEY == 0) {\n            return false;\n        }\n\n        return algorithms[algorithm].verify(keyrdata, data, sig);\n    }\n\n    /**\n     * @dev Attempts to verify a key using DS records.\n     * @param keyname The DNS name of the key, in DNS label-sequence format.\n     * @param keyrdata The RDATA section of the key.\n     * @param keytag The keytag of the key.\n     * @param algorithm The algorithm ID of the key.\n     * @return True if a DS record verifies this key.\n     */\n    function verifyKeyWithDS(bytes memory keyname, bytes memory keyrdata, uint16 keytag, uint8 algorithm, bytes memory data)\n        internal view returns (bool)\n    {\n        for (RRUtils.RRIterator memory iter = data.iterateRRs(0); !iter.done(); iter.next()) {\n            if (data.readUint16(iter.rdataOffset + DS_KEY_TAG) != keytag) {\n                continue;\n            }\n            if (data.readUint8(iter.rdataOffset + DS_ALGORITHM) != algorithm) {\n                continue;\n            }\n\n            uint8 digesttype = data.readUint8(iter.rdataOffset + DS_DIGEST_TYPE);\n            Buffer.buffer memory buf;\n            buf.init(keyname.length + keyrdata.length);\n            buf.append(keyname);\n            buf.append(keyrdata);\n            if (verifyDSHash(digesttype, buf.buf, data.substring(iter.rdataOffset, iter.nextOffset - iter.rdataOffset))) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @dev Attempts to verify a DS record's hash value against some data.\n     * @param digesttype The digest ID from the DS record.\n     * @param data The data to digest.\n     * @param digest The digest data to check against.\n     * @return True iff the digest matches.\n     */\n    function verifyDSHash(uint8 digesttype, bytes data, bytes digest) internal view returns (bool) {\n        if (digests[digesttype] == address(0)) {\n            return false;\n        }\n        return digests[digesttype].verify(data, digest.substring(4, digest.length - 4));\n    }\n\n    /**\n     * @dev Computes the keytag for a chunk of data.\n     * @param data The data to compute a keytag for.\n     * @return The computed key tag.\n     */\n    function computeKeytag(bytes memory data) internal pure returns (uint16) {\n        uint ac;\n        for (uint i = 0; i < data.length; i += 2) {\n            ac += data.readUint16(i);\n        }\n        ac += (ac >> 16) & 0xFFFF;\n        return uint16(ac & 0xFFFF);\n    }\n}",
  "bytecode": "60806040523480156200001157600080fd5b5060405162003be438038062003be483398101806040528101908080518201929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600290805190602001906200008e929190620002fc565b50606060405190810160405280600063ffffffff1681526020014267ffffffffffffffff16815260200160026040518082805460018160011615610100020316600290048015620001195780601f10620000f657610100808354040283529182019162000119565b820191906000526020600020905b81548152906001019060200180831162000104575b505091505060405180910390206bffffffffffffffffffffffff1916815250600160006040518080600081525060010190506040518091039020600019166000191681526020019081526020016000206000602b61ffff1661ffff16815260200190815260200160002060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550604082015181600001600c6101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690836c01000000000000000000000000900402179055509050507f55ced933cdd5a34dd03eb5d4bef19ec6ebb251dcd7a988eee0c1b9a13baaa88b6002604051808060200180602001838103835260018152602001806000815250602001838103825284818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015620002e65780601f10620002ba57610100808354040283529160200191620002e6565b820191906000526020600020905b815481529060010190602001808311620002c857829003601f168201915b5050935050505060405180910390a150620003ab565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200033f57805160ff191683800117855562000370565b8280016001018555821562000370579182015b828111156200036f57825182559160200191906001019062000352565b5b5090506200037f919062000383565b5090565b620003a891905b80821115620003a45760008160009055506001016200038a565b5090565b90565b61382980620003bb6000396000f3006080604052600436106100c5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063020ed8d3146100ca578063087991bc1461011a57806313af4035146101f157806328e7677d146102345780634d46d5811461028457806373cc48a6146103f257806376a14d1d146104625780638438dc041461058a5780638da5cb5b146105da57806398d35f2014610631578063bd7ed31a146106c1578063c327deef14610731578063e60b202f146107a1575b600080fd5b3480156100d657600080fd5b50610118600480360381019080803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108ea565b005b34801561012657600080fd5b5061018f600480360381019080803561ffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610a12565b604051808463ffffffff1663ffffffff1681526020018367ffffffffffffffff1667ffffffffffffffff168152602001826bffffffffffffffffffffffff19166bffffffffffffffffffffffff19168152602001935050505060405180910390f35b3480156101fd57600080fd5b50610232600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b0a565b005b34801561024057600080fd5b50610282600480360381019080803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ba8565b005b34801561029057600080fd5b50610377600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610cd0565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103b757808201518184015260208101905061039c565b50505050905090810190601f1680156103e45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103fe57600080fd5b50610420600480360381019080803560ff16906020019092919050505061118b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561046e57600080fd5b5061050f600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506111be565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561054f578082015181840152602081019050610534565b50505050905090810190601f16801561057c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561059657600080fd5b506105d8600480360381019080803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611263565b005b3480156105e657600080fd5b506105ef61138b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561063d57600080fd5b506106466113b0565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561068657808201518184015260208101905061066b565b50505050905090810190601f1680156106b35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156106cd57600080fd5b506106ef600480360381019080803560ff16906020019092919050505061144e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561073d57600080fd5b5061075f600480360381019080803560ff169060200190929190505050611481565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107ad57600080fd5b506108e8600480360381019080803561ffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506114b4565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561094557600080fd5b80600360008460ff1660ff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507ff73c3c226af96b7f1ba666a21b3ceaf2be3ee6a365e3178fd9cd1eaae0075aa88282604051808360ff1660ff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a15050565b60008060008060016000866040518082805190602001908083835b602083101515610a525780518252602082019150602081019050602083039250610a2d565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660001916815260200190815260200160002060008761ffff1661ffff16815260200190815260200160002090508060000160009054906101000a900463ffffffff168160000160049054906101000a900467ffffffffffffffff1682600001600c9054906101000a90046c0100000000000000000000000002935093509350509250925092565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b6557600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c0357600080fd5b80600460008460ff1660ff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f2fcc274c3b72dd483ab201bfa87295e3817e8b9b10693219873b722ca1af00c78282604051808360ff1660ff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a15050565b6060806000806000610ce388888861178f565b8096508195505050610cff600c896118c490919063ffffffff16565b9250610d156000896118ee90919063ffffffff16565b915060016000856040518082805190602001908083835b602083101515610d515780518252602082019150602081019050602083039250610d2c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660001916815260200190815260200160002060008361ffff1661ffff168152602001908152602001600020905060008160000160049054906101000a900467ffffffffffffffff1667ffffffffffffffff161115610e0a578060000160009054906101000a900463ffffffff1663ffffffff168363ffffffff1610151515610e0957600080fd5b5b846040518082805190602001908083835b602083101515610e405780518252602082019150602081019050602083039250610e1b565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191681600001600c9054906101000a90046c01000000000000000000000000026bffffffffffffffffffffffff19161415610ea957611180565b6060604051908101604052808463ffffffff1681526020014267ffffffffffffffff168152602001866040518082805190602001908083835b602083101515610f075780518252602082019150602081019050602083039250610ee2565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206bffffffffffffffffffffffff191681525060016000866040518082805190602001908083835b602083101515610f805780518252602082019150602081019050602083039250610f5b565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660001916815260200190815260200160002060008461ffff1661ffff16815260200190815260200160002060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550604082015181600001600c6101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690836c01000000000000000000000000900402179055509050507f55ced933cdd5a34dd03eb5d4bef19ec6ebb251dcd7a988eee0c1b9a13baaa88b8486604051808060200180602001838103835285818151815260200191508051906020019080838360005b838110156110dd5780820151818401526020810190506110c2565b50505050905090810190601f16801561110a5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015611143578082015181840152602081019050611128565b50505050905090810190601f1680156111705780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a15b505050509392505050565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606000606080600092505b855183101561125757611201600284016111ed85896118ee90919063ffffffff16565b61ffff16886119169092919063ffffffff16565b915060028251018301925061123a6002840161122685896118ee90919063ffffffff16565b61ffff16886119169092919063ffffffff16565b9050600281510183019250611250828287610cd0565b94506111ca565b84935050505092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112be57600080fd5b80600560008460ff1660ff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fc7eec866a7a1386188cc3ca20ffea75b71bd3e90a60b6791b1d3f0971145118d8282604051808360ff1660ff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a15050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114465780601f1061141b57610100808354040283529160200191611446565b820191906000526020600020905b81548152906001019060200180831161142957829003601f168201915b505050505081565b60056020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060806114bf613797565b6114ca86868661178f565b80935081945050506114e6600c876118c490919063ffffffff16565b63ffffffff1660016000896040518082805190602001908083835b6020831015156115265780518252602082019150602081019050602083039250611501565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660001916815260200190815260200160002060008a61ffff1661ffff16815260200190815260200160002060000160009054906101000a900463ffffffff1663ffffffff16111515156115a957600080fd5b6115bd60008361198a90919063ffffffff16565b90506115c8816119b4565b151561178057602f61ffff16816040015161ffff1614156115f4576115ef8184898b6119ca565b611689565b603261ffff16816040015161ffff16141561161a576116158184898b611aca565b611688565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f556e7265636f676e69736564207265636f72642074797065000000000000000081525060200191505060405180910390fd5b5b60016000886040518082805190602001908083835b6020831015156116c3578051825260208201915060208101905060208303925061169e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660001916815260200190815260200160002060008961ffff1661ffff168152602001908152602001600020600080820160006101000a81549063ffffffff02191690556000820160046101000a81549067ffffffffffffffff021916905560008201600c6101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555050611785565b600080fd5b5050505050505050565b60608060008060008060006117b76117b160128c611f6790919063ffffffff16565b89611f95565b15156117c257600080fd5b6117d6600c8b6118c490919063ffffffff16565b94506117ec60088b6118c490919063ffffffff16565b935061180260008b6118ee90919063ffffffff16565b925061181860038b6120fe90919063ffffffff16565b9150601261183060128c61212590919063ffffffff16565b01905061184b81828c51038c6119169092919063ffffffff16565b95506118578684612181565b96508160ff1661187160008961226590919063ffffffff16565b14151561187d57600080fd5b428463ffffffff1611151561189157600080fd5b428563ffffffff161015156118a557600080fd5b6118b1878b8b8b6122c5565b8686965096505050505050935093915050565b6000825160048301111515156118d957600080fd5b63ffffffff8260048501015116905092915050565b60008251600283011115151561190357600080fd5b61ffff8260028501015116905092915050565b60608060008086518587011115151561192e57600080fd5b846040519080825280601f01601f1916602001820160405280156119615781602001602082028038833980820191505090505b509250602083019150856020880101905061197d828287612417565b8293505050509392505050565b611992613797565b828160000181905250818160c00181815250506119ae81611e52565b92915050565b6000816000015151826020015110159050919050565b60008060008060608860a0015194506119f0858a6000015161212590919063ffffffff16565b93508860a001518960c001510392508383111515611a0d57600080fd5b611a20888861246290919063ffffffff16565b91506000821415611a5757611a46848601878b600001516125e49092919063ffffffff16565b151515611a5257600080fd5b611abf565b611a7085858b600001516119169092919063ffffffff16565b9050600082131515611a8157600080fd5b6000611a96828a61246290919063ffffffff16565b1215611abe576000611ab1828961246290919063ffffffff16565b121515611abd57600080fd5b5b5b505050505050505050565b6000806060600080600080611af360028c60a00151018c600001516118ee90919063ffffffff16565b9650611b1360048c60a00151018c600001516120fe90919063ffffffff16565b9550611b3860058c60a00151018760ff168d600001516119169092919063ffffffff16565b945060056000611b598d60a001518e600001516120fe90919063ffffffff16565b60ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166368f9dab2868b8a6040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018461ffff168152602001838103835286818151815260200191508051906020019080838360005b83811015611c25578082015181840152602081019050611c0a565b50505050905090810190601f168015611c525780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b83811015611c8b578082015181840152602081019050611c70565b50505050905090810190601f168015611cb85780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015611cda57600080fd5b505af1158015611cee573d6000803e3d6000fd5b505050506040513d6020811015611d0457600080fd5b81019080805190602001909291905050509350611d3a8660ff1660058d60a0015101018c600001516120fe90919063ffffffff16565b925060208360ff1611151515611d4f57600080fd5b611d7a60018760ff1660058e60a001510101018460ff168d600001516126f19092919063ffffffff16565b6bffffffffffffffffffffffff19169150611db76001611da460008d6120fe90919063ffffffff16565b60ff168c6127249092919063ffffffff16565b9050806000191684600019161415611e0757611df68360ff1660018860ff1660058f60a0015101010101898d600001516125e49092919063ffffffff16565b151515611e0257600080fd5b611e45565b80600019168460001916111515611e1d57600080fd5b806000191682600019161115611e445781600019168460001916101515611e4357600080fd5b5b5b5050505050505050505050565b6000808260c001518360200181815250508260000151518360200151101515611e7a57611f62565b611e8c83600001518460200151612125565b8360200151019150611eab8284600001516118ee90919063ffffffff16565b836040019061ffff16908161ffff1681525050600282019150611edb8284600001516118ee90919063ffffffff16565b836060019061ffff16908161ffff1681525050600282019150611f0b8284600001516118c490919063ffffffff16565b836080019063ffffffff16908163ffffffff1681525050600482019150611f3f8284600001516118ee90919063ffffffff16565b61ffff169050600282019150818360a00181815250508082018360c00181815250505b505050565b60606000611f758484612125565b9050611f8c8382866119169092919063ffffffff16565b91505092915050565b600080611fbe611faf60008561212590919063ffffffff16565b846118ee90919063ffffffff16565b9050826040518082805190602001908083835b602083101515611ff65780518252602082019150602081019050602083039250611fd1565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206bffffffffffffffffffffffff191660016000866040518082805190602001908083835b60208310151561206c5780518252602082019150602081019050602083039250612047565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660001916815260200190815260200160002060008361ffff1661ffff168152602001908152602001600020600001600c9054906101000a90046c01000000000000000000000000026bffffffffffffffffffffffff19161491505092915050565b60008251600183011115151561211357600080fd5b60ff8260018501015116905092915050565b60008060008391505b6001156121745784518210151561214157fe5b61215482866120fe90919063ffffffff16565b60ff1690506001810182019150600081141561216f57612174565b61212e565b8382039250505092915050565b606061218b613797565b61219f60008561198a90919063ffffffff16565b90505b6121ab816119b4565b151561225e57600161ffff16816060015161ffff161415156121cc57600080fd5b6000825114156121e6576121df81612af0565b9150612236565b6121fd81602001518561212590919063ffffffff16565b825114151561220b57600080fd5b61222a6000858360200151855186612b2790949392919063ffffffff16565b151561223557600080fd5b5b8261ffff16816040015161ffff1614151561225057600080fd5b61225981611e52565b6121a2565b5092915050565b60008060008091505b6001156122ba5784518410151561228157fe5b61229484866120fe90919063ffffffff16565b60ff169050600181018401935060008114156122af576122ba565b60018201915061226e565b819250505092915050565b60008060006122de60128761212590919063ffffffff16565b9250865183111515156122f057600080fd5b61230d601288858a5103868a612b2790949392919063ffffffff16565b151561231857600080fd5b82601201915061234461233560008661212590919063ffffffff16565b856118ee90919063ffffffff16565b9050602b61ffff168161ffff1614156123735761236386868487612b53565b151561236e57600080fd5b61240e565b603061ffff168161ffff16141561239f5761238f868686612c2a565b151561239a57600080fd5b61240d565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f556e737570706f727465642070726f6f66207265636f7264207479706500000081525060200191505060405180910390fd5b5b50505050505050565b60005b60208210151561243f578251845260208401935060208301925060208203915061241a565b6001826020036101000a0390508019835116818551168181178652505050505050565b6000806000806000806000612480888a612d2890919063ffffffff16565b1561248e57600096506125d8565b612499896000612265565b91506124a6886000612265565b90505b808211156124ce578593506124be8987612d4f565b95508180600190039250506124a9565b5b818111156124f4578492506124e48886612d4f565b94508080600190039150506124cf565b5b60008211801561251957506125178689878c612d74909392919063ffffffff16565b155b156125475785935061252b8987612d4f565b955084925061253a8886612d4f565b94506001820391506124f5565b6000861415612578577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96506125d8565b600085141561258a57600196506125d8565b6125d5600185016125a4868c6120fe90919063ffffffff16565b60ff168a600187016125bf888e6120fe90919063ffffffff16565b60ff168e612da59095949392919063ffffffff16565b96505b50505050505092915050565b600080600080600080600060088861ffff169060020a90049550600860ff891661ffff1681151561261157fe5b0494506007881660070360ff16600160ff169060020a0293508892505b89518310156126df5761264a838b6120fe90919063ffffffff16565b9150612662600184018b6120fe90919063ffffffff16565b90508160ff168660ff16101561267b57600096506126e4565b8160ff168660ff1614156126cf578460ff166008820260ff161115156126a457600096506126e4565b6000846126c260028860ff168701018d6120fe90919063ffffffff16565b1660ff16141596506126e4565b6002810160ff168301925061262e565b600096505b5050505050509392505050565b600083518284011115151561270557600080fd5b6001826020036101000a03198084602087010151169150509392505050565b6000806000806000806034871115151561273d57600080fd5b60009450600093505b868410156129b4578884890181518110151561275e57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002925060307f010000000000000000000000000000000000000000000000000000000000000002837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916101580156128455750607a7f010000000000000000000000000000000000000000000000000000000000000002837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191611155b151561285057600080fd5b608060405190810160405280604781526020017e010203040506070809ffffffffffffff0a0b0c0d0e0f10111213141516171881526020017f191a1b1c1d1e1fffffffffffffffffffff0a0b0c0d0e0f10111213141516171881526020017f191a1b1c1d1e1f000000000000000000000000000000000000000000000000008152506030847f010000000000000000000000000000000000000000000000000000000000000090040381518110151561290557fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004915060208260ff161115151561298857600080fd5b60018703841415612998576129b4565b8160ff166005869060020a021794508380600101945050612746565b60058702905060006008888115156129c857fe5b0614156129e3578160ff166005869060020a02179450612ad4565b60026008888115156129f157fe5b061415612a1d5760028260ff169060020a900460ff166003869060020a02179450600281039050612ad3565b6004600888811515612a2b57fe5b061415612a575760048260ff169060020a900460ff166001869060020a02179450600481039050612ad2565b6005600888811515612a6557fe5b061415612a915760018260ff169060020a900460ff166004869060020a02179450600181039050612ad1565b6007600888811515612a9f57fe5b061415612acb5760038260ff169060020a900460ff166002869060020a02179450600381039050612ad0565b600080fd5b5b5b5b5b8061010003859060020a02600102955050505050509392505050565b6060612b208260200151612b0c84600001518560200151612125565b84600001516119169092919063ffffffff16565b9050919050565b6000612b34848484612e7f565b60001916612b43878785612e7f565b6000191614905095945050505050565b6000806000612b60613797565b6060612b7660028a6120fe90919063ffffffff16565b9350612b8c60108a6118ee90919063ffffffff16565b9250612ba1878a61198a90919063ffffffff16565b91505b612bad826119b4565b1515612c1957603061ffff16826040015161ffff16141515612bd25760009450612c1e565b612bdb82612ea4565b9050612bea8185858c8c612ed4565b15612c0b57612c04612bfb83612af0565b8285878a613223565b9450612c1e565b612c1482611e52565b612ba4565b600094505b50505050949350505050565b600080600080612c38613797565b612c4c60128961212590919063ffffffff16565b9350612c626002896120fe90919063ffffffff16565b9250612c786010896118ee90919063ffffffff16565b9150612c8e60008761198a90919063ffffffff16565b90505b612c9a816119b4565b1515612d185783612cb560008861212590919063ffffffff16565b141515612cc157600080fd5b612cdc6000896012878a612b2790949392919063ffffffff16565b1515612ce757600080fd5b612cfc612cf382612ea4565b84848b8b612ed4565b15612d0a5760019450612d1d565b612d1381611e52565b612c91565b600094505b505050509392505050565b600081518351148015612d475750612d468360008460008751612b27565b5b905092915050565b6000612d6482846120fe90919063ffffffff16565b60ff166001830101905092915050565b6000612d84838384865103612e7f565b60001916612d96868687895103612e7f565b60001916149050949350505050565b60008060008060008060008060008c97508c8a1015612dc2578997505b60208e018f01965060208b018c019550600094505b87851015612e675786519350855192508284141515612e50576020881115612e21577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9150612e34565b600185896020030160080260020a031991505b818316828516039050600081141515612e4f57809850612e6d565b5b602087019650602086019550602085019450612dd7565b898d0398505b50505050505050509695505050505050565b6000835182840111151515612e9357600080fd5b818360208601012090509392505050565b6060612ecd8260a001518360a001518460c001510384600001516119169092919063ffffffff16565b9050919050565b600080600073ffffffffffffffffffffffffffffffffffffffff16600360008860ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612f4e5760009150613219565b6003612f646002896120fe90919063ffffffff16565b60ff16141515612f775760009150613219565b8560ff16612f8f6003896120fe90919063ffffffff16565b60ff16141515612fa25760009150613219565b612fab87613374565b90508461ffff168161ffff16141515612fc75760009150613219565b6000610100612fe060008a6118ee90919063ffffffff16565b61ffff16161415612ff45760009150613219565b600360008760ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663de8f50a18886866040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018060200180602001848103845287818151815260200191508051906020019080838360005b838110156130bf5780820151818401526020810190506130a4565b50505050905090810190601f1680156130ec5780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b8381101561312557808201518184015260208101905061310a565b50505050905090810190601f1680156131525780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b8381101561318b578082015181840152602081019050613170565b50505050905090810190601f1680156131b85780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b1580156131db57600080fd5b505af11580156131ef573d6000803e3d6000fd5b505050506040513d602081101561320557600080fd5b810190808051906020019092919050505091505b5095945050505050565b600061322d613797565b60006132376137e3565b61324b60008661198a90919063ffffffff16565b92505b613257836119b4565b1515613363578661ffff1661327c60008560a0015101876118ee90919063ffffffff16565b61ffff1614151561328c57613355565b8560ff166132aa60028560a0015101876120fe90919063ffffffff16565b60ff161415156132b957613355565b6132d360038460a0015101866120fe90919063ffffffff16565b91506132ec88518a5101826133cb90919063ffffffff16565b50613300898261342290919063ffffffff16565b50613314888261342290919063ffffffff16565b506133468282600001516133418660a001518760a001518860c00151038a6119169092919063ffffffff16565b613444565b156133545760019350613368565b5b61335e83611e52565b61324e565b600093505b50505095945050505050565b60008060008090505b83518110156133ac5761339981856118ee90919063ffffffff16565b61ffff168201915060028101905061337d565b61ffff6010839060020a9004168201915061ffff821692505050919050565b6133d36137e3565b60006020838115156133e157fe5b061415156133fe576020828115156133f557fe5b06602003820191505b81836020018181525050604051808452600081528281016040525082905092915050565b61342a6137e3565b61343c83846000015151848551613693565b905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff16600460008660ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156134bc576000905061368c565b600460008560ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f7e83aee8461352b600480875103876119169092919063ffffffff16565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561359a57808201518184015260208101905061357f565b50505050905090810190601f1680156135c75780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156136005780820151818401526020810190506135e5565b50505050905090810190601f16801561362d5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561364e57600080fd5b505af1158015613662573d6000803e3d6000fd5b505050506040513d602081101561367857600080fd5b810190808051906020019092919050505090505b9392505050565b61369b6137e3565b6000806000855185111515156136b057600080fd5b87602001518860000151518689010111156136e2576136e18860026136db8b602001518b8a01613757565b02613773565b5b8751805188602083010194508089880111156136fe5788870182525b60208801935050505b60208510151561372c5781518352602083019250602082019150602085039450613707565b6001856020036101000a03905080198251168184511681811785525050879350505050949350505050565b6000818311156137695782905061376d565b8190505b92915050565b60608260000151905061378683836133cb565b506137918382613422565b50505050565b60e0604051908101604052806060815260200160008152602001600061ffff168152602001600061ffff168152602001600063ffffffff16815260200160008152602001600081525090565b6040805190810160405280606081526020016000815250905600a165627a7a72305820ba7e576d602ff4cdd0aaa74544348974d997e15b730a0479c9167d2a08a3abf300290000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000005e00002b000100000e1000244a5c080249aac11d7b6f6446702e54a1607371607a1a41855200fd2ce1cdde32f24e8fb500002b000100000e1000244f660802e06d44b80b8f1d39a95c0b0d7c65d08458e880409bbc683457104237c7f8ec8d0000",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000005e00002b000100000e1000244a5c080249aac11d7b6f6446702e54a1607371607a1a41855200fd2ce1cdde32f24e8fb500002b000100000e1000244f660802e06d44b80b8f1d39a95c0b0d7c65d08458e880409bbc683457104237c7f8ec8d0000"
}