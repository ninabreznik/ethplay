{
  "address": "0x6d6f337ef9da52cd32334c4b26766ecf81353551",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Distribution",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-22\n*/\n\npragma solidity ^0.4.13;\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract CanReclaimToken is Ownable {\n  using SafeERC20 for ERC20Basic;\n\n  /**\n   * @dev Reclaim all ERC20Basic compatible tokens\n   * @param token ERC20Basic The address of the token contract\n   */\n  function reclaimToken(ERC20Basic token) external onlyOwner {\n    uint256 balance = token.balanceOf(this);\n    token.safeTransfer(owner, balance);\n  }\n\n}\n\ncontract Claimable is Ownable {\n  address public pendingOwner;\n\n  /**\n   * @dev Modifier throws if called by any account other than the pendingOwner.\n   */\n  modifier onlyPendingOwner() {\n    require(msg.sender == pendingOwner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to set the pendingOwner address.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    pendingOwner = newOwner;\n  }\n\n  /**\n   * @dev Allows the pendingOwner address to finalize the transfer.\n   */\n  function claimOwnership() onlyPendingOwner public {\n    emit OwnershipTransferred(owner, pendingOwner);\n    owner = pendingOwner;\n    pendingOwner = address(0);\n  }\n}\n\ncontract Whitelist is Ownable {\n  mapping(address => bool) public whitelist;\n\n  event WhitelistedAddressAdded(address addr);\n  event WhitelistedAddressRemoved(address addr);\n\n  /**\n   * @dev Throws if called by any account that's not whitelisted.\n   */\n  modifier onlyWhitelisted() {\n    require(whitelist[msg.sender]);\n    _;\n  }\n\n  /**\n   * @dev add an address to the whitelist\n   * @param addr address\n   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n   */\n  function addAddressToWhitelist(address addr) onlyOwner public returns(bool success) {\n    if (!whitelist[addr]) {\n      whitelist[addr] = true;\n      emit WhitelistedAddressAdded(addr);\n      success = true;\n    }\n  }\n\n  /**\n   * @dev add addresses to the whitelist\n   * @param addrs addresses\n   * @return true if at least one address was added to the whitelist,\n   * false if all addresses were already in the whitelist\n   */\n  function addAddressesToWhitelist(address[] addrs) onlyOwner public returns(bool success) {\n    for (uint256 i = 0; i < addrs.length; i++) {\n      if (addAddressToWhitelist(addrs[i])) {\n        success = true;\n      }\n    }\n  }\n\n  /**\n   * @dev remove an address from the whitelist\n   * @param addr address\n   * @return true if the address was removed from the whitelist,\n   * false if the address wasn't in the whitelist in the first place\n   */\n  function removeAddressFromWhitelist(address addr) onlyOwner public returns(bool success) {\n    if (whitelist[addr]) {\n      whitelist[addr] = false;\n      emit WhitelistedAddressRemoved(addr);\n      success = true;\n    }\n  }\n\n  /**\n   * @dev remove addresses from the whitelist\n   * @param addrs addresses\n   * @return true if at least one address was removed from the whitelist,\n   * false if all addresses weren't in the whitelist in the first place\n   */\n  function removeAddressesFromWhitelist(address[] addrs) onlyOwner public returns(bool success) {\n    for (uint256 i = 0; i < addrs.length; i++) {\n      if (removeAddressFromWhitelist(addrs[i])) {\n        success = true;\n      }\n    }\n  }\n\n}\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeERC20 {\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    assert(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(\n    ERC20 token,\n    address from,\n    address to,\n    uint256 value\n  )\n    internal\n  {\n    assert(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    assert(token.approve(spender, value));\n  }\n}\n\ncontract Distribution is CanReclaimToken, Claimable, Whitelist {\n\n    using SafeERC20 for ERC20Basic;\n    using SafeMath for uint256;\n\n    event Distributed(uint numberOfTransfer, uint256 amountInQKC);\n\n    ERC20Basic public token;\n\n    constructor(ERC20Basic _token) public {\n        token = _token;\n    }\n\n    function batchDistribute(\n        address[] batchReceivers,\n        uint256[] amountsInQKC\n    ) external onlyWhitelisted\n    {\n        require(batchReceivers.length > 0, \"should have non-zero receivers\");\n        require(amountsInQKC.length == batchReceivers.length, \"shoud match receiver and amount\");\n        uint256 totalInQKC = 0;\n        for (uint256 i = 0; i < batchReceivers.length; ++i) {\n            address beneficiary = batchReceivers[i];\n            totalInQKC = totalInQKC.add(amountsInQKC[i]);\n            uint256 amountInWei = amountsInQKC[i].mul(1 ether);\n            token.safeTransfer(beneficiary, amountInWei);\n        }\n        emit Distributed(batchReceivers.length, totalInQKC);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b506040516020806109f6833981016040525160008054600160a060020a0319908116331790915560038054600160a060020a03909316929091169190911790556109978061005f6000396000f3006080604052600436106100b95763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166317ffc32081146100be57806324953eaa146100e1578063286dd3f51461014a5780634e71e0c81461016b5780637b9417c8146101805780638da5cb5b146101a15780639b19251a146101d2578063ad8bc26b146101f3578063e2ec6ec31461021f578063e30c397814610274578063f2fde38b14610289578063fc0c546a146102aa575b600080fd5b3480156100ca57600080fd5b506100df600160a060020a03600435166102bf565b005b3480156100ed57600080fd5b50604080516020600480358082013583810280860185019096528085526101369536959394602494938501929182918501908490808284375094975061038b9650505050505050565b604080519115158252519081900360200190f35b34801561015657600080fd5b50610136600160a060020a03600435166103ea565b34801561017757600080fd5b506100df610481565b34801561018c57600080fd5b50610136600160a060020a0360043516610509565b3480156101ad57600080fd5b506101b66105a3565b60408051600160a060020a039092168252519081900360200190f35b3480156101de57600080fd5b50610136600160a060020a03600435166105b2565b3480156101ff57600080fd5b506100df60246004803582810192908201359181359182019101356105c7565b34801561022b57600080fd5b5060408051602060048035808201358381028086018501909652808552610136953695939460249493850192918291850190849080828437509497506107bd9650505050505050565b34801561028057600080fd5b506101b6610816565b34801561029557600080fd5b506100df600160a060020a0360043516610825565b3480156102b657600080fd5b506101b661086b565b60008054600160a060020a031633146102d757600080fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a038416916370a082319160248083019260209291908290030181600087803b15801561033857600080fd5b505af115801561034c573d6000803e3d6000fd5b505050506040513d602081101561036257600080fd5b505160005490915061038790600160a060020a0384811691168363ffffffff61087a16565b5050565b600080548190600160a060020a031633146103a557600080fd5b5060005b82518110156103e4576103d283828151811015156103c357fe5b906020019060200201516103ea565b156103dc57600191505b6001016103a9565b50919050565b60008054600160a060020a0316331461040257600080fd5b600160a060020a03821660009081526002602052604090205460ff161561047c57600160a060020a038216600081815260026020908152604091829020805460ff19169055815192835290517ff1abf01a1043b7c244d128e8595cf0c1d10743b022b03a02dffd8ca3bf729f5a9281900390910190a15060015b919050565b600154600160a060020a0316331461049857600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b60008054600160a060020a0316331461052157600080fd5b600160a060020a03821660009081526002602052604090205460ff16151561047c57600160a060020a038216600081815260026020908152604091829020805460ff19166001179055815192835290517fd1bba68c128cc3f427e5831b3c6f99f480b6efa6b9e80c757768f6124158cc3f9281900390910190a1506001919050565b600054600160a060020a031681565b60026020526000908152604090205460ff1681565b3360009081526002602052604081205481908190819060ff1615156105eb57600080fd5b6000871161065a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f73686f756c642068617665206e6f6e2d7a65726f207265636569766572730000604482015290519081900360640190fd5b8487146106c857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f73686f7564206d6174636820726563656976657220616e6420616d6f756e7400604482015290519081900360640190fd5b60009350600092505b86831015610778578787848181106106e557fe5b90506020020135600160a060020a0316915061071e868685818110151561070857fe5b905060200201358561092f90919063ffffffff16565b935061074d670de0b6b3a764000087878681811061073857fe5b9050602002013561094290919063ffffffff16565b60035490915061076d90600160a060020a0316838363ffffffff61087a16565b8260010192506106d1565b604080518881526020810186905281517f97791d3ac1343e05805a2f905fa80b249c2ca58cf9fef455d4fa7ec13ce58321929181900390910190a15050505050505050565b600080548190600160a060020a031633146107d757600080fd5b5060005b82518110156103e45761080483828151811015156107f557fe5b90602001906020020151610509565b1561080e57600191505b6001016107db565b600154600160a060020a031681565b600054600160a060020a0316331461083c57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600160a060020a031681565b82600160a060020a031663a9059cbb83836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156108f657600080fd5b505af115801561090a573d6000803e3d6000fd5b505050506040513d602081101561092057600080fd5b5051151561092a57fe5b505050565b8181018281101561093c57fe5b92915050565b60008215156109535750600061093c565b5081810281838281151561096357fe5b041461093c57fe00a165627a7a72305820ecf6e30bd47c696a8b793e8d26df30caf08d2102f05fc5bf3a05392c6d8f80080029000000000000000000000000ea26c4ac16d4a5a106820bc8aee85fd0b7b2b664",
  "constructorArguments": "000000000000000000000000ea26c4ac16d4a5a106820bc8aee85fd0b7b2b664"
}