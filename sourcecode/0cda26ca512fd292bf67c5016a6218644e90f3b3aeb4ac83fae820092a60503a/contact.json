{
  "address": "0xff0677aa319585fecd5b06a0bae4d918422ce0e5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "EtherDelta Token",
  "contractName": "EDT2",
  "compilerVersion": "v0.4.9+commit.364da425",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-05\n*/\n\npragma solidity ^0.4.9;\n \ncontract Token {\n \n    /// @return total amount of tokens\n    function totalSupply() constant returns (uint256 supply) {}\n \n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\n \n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) returns (bool success) {}\n \n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n \n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address _spender, uint256 _value) returns (bool success) {}\n \n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n \n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n   \n}\n \n \n \ncontract StandardToken is Token {\n \n    function transfer(address _to, uint256 _value) returns (bool success) {\n        //Default assumes totalSupply can't be over max (2^256 - 1).\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n        //Replace the if with this one instead.\n        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n        if (balances[msg.sender] >= _value && _value > 0) {\n            balances[msg.sender] -= _value;\n            balances[_to] += _value;\n            Transfer(msg.sender, _to, _value);\n            return true;\n        } else { return false; }\n    }\n \n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n            balances[_to] += _value;\n            balances[_from] -= _value;\n            allowed[_from][msg.sender] -= _value;\n            Transfer(_from, _to, _value);\n            return true;\n        } else { return false; }\n    }\n \n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n \n    function approve(address _spender, uint256 _value) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n \n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n    }\n \n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    uint256 public totalSupply;\n}\n \n \n//name this contract whatever you'd like\ncontract EDT2 is StandardToken {\n \n    function () {\n        //if ether is sent to this address, send it back.\n        throw;\n    }\n \n    /* Public variables of the token */\n \n    /*\n    NOTE:\n    The following variables are OPTIONAL vanities. One does not have to include them.\n    They allow one to customise the token contract & in no way influences the core functionality.\n    Some wallets/interfaces might not even bother to look at this information.\n    */\n    string public name;                   //fancy name: eg Simon Bucks\n    uint8 public decimals;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\n    string public symbol;                 //An identifier: eg SBX\n    string public version = 'H1.2';       //human 0.1 standard. Just an arbitrary versioning scheme.\n \n//\n// CHANGE THESE VALUES FOR YOUR TOKEN\n//\n \n//make sure this function name matches the contract name above. So if you're token is called TutorialToken, make sure the //contract name above is also TutorialToken instead of ERC20Token\n \n    function EDT2(\n        ) {\n        balances[msg.sender] = 50000000000000000;               // Give the creator all initial tokens (100000 for example)\n        totalSupply = 50000000000000000;                        // Update total supply (100000 for example)\n        name = \"EDT2\";                                   // Set the name for display purposes\n        decimals = 8;                            // Amount of decimals for display purposes\n        symbol = \"EDT2\";                               // Set the symbol for display purposes\n    }\n \n    /* Approves and then calls the receiving contract */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n \n        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n        if(!_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)) { throw; }\n        return true;\n    }\n}",
  "bytecode": "60a0604052600460608190527f48312e3200000000000000000000000000000000000000000000000000000000608090815261003e916006919061010a565b50341561004757fe5b5b600160a060020a0333166000908152602081815260409182902066b1a2bc2ec5000090819055600255815180830190925260048083527f4544543200000000000000000000000000000000000000000000000000000000929091019182526100b29160039161010a565b506004805460ff19166008178155604080518082019091528181527f45445432000000000000000000000000000000000000000000000000000000006020909101908152610103916005919061010a565b505b6101aa565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061014b57805160ff1916838001178555610178565b82800160010185558215610178579182015b8281111561017857825182559160200191906001019061015d565b5b50610185929150610189565b5090565b6101a791905b80821115610185576000815560010161018f565b5090565b90565b610a03806101b96000396000f300606060405236156100935763ffffffff60e060020a60003504166306fdde0381146100a8578063095ea7b31461013857806318160ddd1461016b57806323b872dd1461018d578063313ce567146101c657806354fd4d50146101ec57806370a082311461027c57806395d89b41146102aa578063a9059cbb1461033a578063cae9ca511461036d578063dd62ed3e146103e4575b341561009b57fe5b6100a65b610000565b565b005b34156100b057fe5b6100b8610418565b6040805160208082528351818301528351919283929083019185019080838382156100fe575b8051825260208311156100fe57601f1990920191602091820191016100de565b505050905090810190601f16801561012a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561014057fe5b610157600160a060020a03600435166024356104a6565b604080519115158252519081900360200190f35b341561017357fe5b61017b610511565b60408051918252519081900360200190f35b341561019557fe5b610157600160a060020a0360043581169060243516604435610517565b604080519115158252519081900360200190f35b34156101ce57fe5b6101d661060b565b6040805160ff9092168252519081900360200190f35b34156101f457fe5b6100b8610614565b6040805160208082528351818301528351919283929083019185019080838382156100fe575b8051825260208311156100fe57601f1990920191602091820191016100de565b505050905090810190601f16801561012a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561028457fe5b61017b600160a060020a03600435166106a2565b60408051918252519081900360200190f35b34156102b257fe5b6100b86106c1565b6040805160208082528351818301528351919283929083019185019080838382156100fe575b8051825260208311156100fe57601f1990920191602091820191016100de565b505050905090810190601f16801561012a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561034257fe5b610157600160a060020a036004351660243561074f565b604080519115158252519081900360200190f35b341561037557fe5b604080516020600460443581810135601f8101849004840285018401909552848452610157948235600160a060020a03169460248035956064949293919092019181908401838280828437509496506107f995505050505050565b604080519115158252519081900360200190f35b34156103ec57fe5b61017b600160a060020a03600435811690602435166109aa565b60408051918252519081900360200190f35b6003805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561049e5780601f106104735761010080835404028352916020019161049e565b820191906000526020600020905b81548152906001019060200180831161048157829003601f168201915b505050505081565b600160a060020a03338116600081815260016020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b60025481565b600160a060020a0383166000908152602081905260408120548290108015906105675750600160a060020a0380851660009081526001602090815260408083203390941683529290522054829010155b80156105735750600082115b156105ff57600160a060020a0380841660008181526020818152604080832080548801905588851680845281842080548990039055600183528184203390961684529482529182902080548790039055815186815291519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3506001610603565b5060005b5b9392505050565b60045460ff1681565b6006805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561049e5780601f106104735761010080835404028352916020019161049e565b820191906000526020600020905b81548152906001019060200180831161048157829003601f168201915b505050505081565b600160a060020a0381166000908152602081905260409020545b919050565b6005805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561049e5780601f106104735761010080835404028352916020019161049e565b820191906000526020600020905b81548152906001019060200180831161048157829003601f168201915b505050505081565b600160a060020a0333166000908152602081905260408120548290108015906107785750600082115b156107ea57600160a060020a0333811660008181526020818152604080832080548890039055938716808352918490208054870190558351868152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a350600161050b565b50600061050b565b5b92915050565b600160a060020a03338116600081815260016020908152604080832094881680845294825280832087905580518781529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a383600160a060020a031660405180807f72656365697665417070726f76616c28616464726573732c75696e743235362c81526020017f616464726573732c627974657329000000000000000000000000000000000000815250602e019050604051809103902060e060020a9004338530866040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200182805190602001908083836000831461094b575b80518252602083111561094b57601f19909201916020918201910161092b565b505050905090810190601f1680156109775780820380516001836020036101000a031916815260200191505b509450505050506000604051808303816000876161da5a03f192505050151561099f57610000565b5060015b9392505050565b600160a060020a038083166000908152600160209081526040808320938516835292905220545b929150505600a165627a7a723058208952bc2c00568730c7fa82ed74701bfb84644b9d535ff422cf8537f945de851e0029"
}