{
  "address": "0xfa10e13fe555760a5297dc14eb6562a1a53e4e37",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SetToken",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-21\n*/\n\npragma solidity 0.4.23;\n\n//////////////////////////////\n///// ERC20Basic\n//////////////////////////////\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n\n//////////////////////////////\n///// ERC20 Interface\n//////////////////////////////\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n//////////////////////////////\n///// ERC20 Basic\n//////////////////////////////\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n\n\n//////////////////////////////\n///// DetailedERC20\n//////////////////////////////\n\ncontract DetailedERC20 is ERC20 {\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  function DetailedERC20(string _name, string _symbol, uint8 _decimals) public {\n    name = _name;\n    symbol = _symbol;\n    decimals = _decimals;\n  }\n}\n\n//////////////////////////////\n///// Standard Token\n//////////////////////////////\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n\n//////////////////////////////\n///// SafeMath\n//////////////////////////////\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n//////////////////////////////\n///// AddressArrayUtil\n//////////////////////////////\n\n/**\n * @title AddressArrayUtil\n */\nlibrary AddressArrayUtils {\n  function hasValue(address[] addresses, address value) internal returns (bool) {\n    for (uint i = 0; i < addresses.length; i++) {\n      if (addresses[i] == value) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function removeByIndex(address[] storage a, uint256 index) internal returns (uint256) {\n    a[index] = a[a.length - 1];\n    a.length -= 1;\n  }\n}\n\n\n//////////////////////////////\n///// Set Interface\n//////////////////////////////\n\n/**\n * @title Set interface\n */\ncontract SetInterface {\n\n  /**\n   * @dev Function to convert component into {Set} Tokens\n   *\n   * Please note that the user's ERC20 component must be approved by\n   * their ERC20 contract to transfer their components to this contract.\n   *\n   * @param _quantity uint The quantity of Sets desired to issue in Wei as a multiple of naturalUnit\n   */\n  function issue(uint _quantity) public returns (bool success);\n  \n  /**\n   * @dev Function to convert {Set} Tokens into underlying components\n   *\n   * The ERC20 components do not need to be approved to call this function\n   *\n   * @param _quantity uint The quantity of Sets desired to redeem in Wei as a multiple of naturalUnit\n   */\n  function redeem(uint _quantity) public returns (bool success);\n\n  event LogIssuance(\n    address indexed _sender,\n    uint _quantity\n  );\n\n  event LogRedemption(\n    address indexed _sender,\n    uint _quantity\n  );\n}\n\n\n\n/**\n * @title {Set}\n * @author Felix Feng\n * @dev Implementation of the basic {Set} token.\n */\ncontract SetToken is StandardToken, DetailedERC20(\"EthereumX May 2018 Set\", \"ETHX-5-18\", 18), SetInterface {\n  using SafeMath for uint256;\n  using AddressArrayUtils for address[];\n\n  ///////////////////////////////////////////////////////////\n  /// Data Structures\n  ///////////////////////////////////////////////////////////\n  struct Component {\n    address address_;\n    uint unit_;\n  }\n\n  ///////////////////////////////////////////////////////////\n  /// States\n  ///////////////////////////////////////////////////////////\n  uint public naturalUnit;\n  Component[] public components;\n\n  // Mapping of componentHash to isComponent\n  mapping(bytes32 => bool) internal isComponent;\n  // Mapping of index of component -> user address -> balance\n  mapping(uint => mapping(address => uint)) internal unredeemedBalances;\n\n\n  ///////////////////////////////////////////////////////////\n  /// Events\n  ///////////////////////////////////////////////////////////\n  event LogPartialRedemption(\n    address indexed _sender,\n    uint _quantity,\n    bytes32 _excludedComponents\n  );\n\n  event LogRedeemExcluded(\n    address indexed _sender,\n    bytes32 _components\n  );\n\n  ///////////////////////////////////////////////////////////\n  /// Modifiers\n  ///////////////////////////////////////////////////////////\n  modifier hasSufficientBalance(uint quantity) {\n    // Check that the sender has sufficient components\n    // Since the component length is defined ahead of time, this is not\n    // an unbounded loop\n    require(balances[msg.sender] >= quantity, \"User does not have sufficient balance\");\n    _;\n  }\n\n  modifier validDestination(address _to) {\n    require(_to != address(0));\n    require(_to != address(this));\n    _;\n  }\n\n  modifier isMultipleOfNaturalUnit(uint _quantity) {\n    require((_quantity % naturalUnit) == 0);\n    _;\n  }\n\n  modifier isNonZero(uint _quantity) {\n    require(_quantity > 0);\n    _;\n  }\n\n  /**\n   * @dev Constructor Function for the issuance of an {Set} token\n   * @param _components address[] A list of component address which you want to include\n   * @param _units uint[] A list of quantities in gWei of each component (corresponds to the {Set} of _components)\n   */\n  constructor(address[] _components, uint[] _units, uint _naturalUnit)\n    isNonZero(_naturalUnit)\n    public {\n    // There must be component present\n    require(_components.length > 0, \"Component length needs to be great than 0\");\n\n    // There must be an array of units\n    require(_units.length > 0, \"Units must be greater than 0\");\n\n    // The number of components must equal the number of units\n    require(_components.length == _units.length, \"Component and unit lengths must be the same\");\n\n    naturalUnit = _naturalUnit;\n\n    // As looping operations are expensive, checking for duplicates will be\n    // on the onus of the application developer\n\n    // NOTE: It will be the onus of developers to check whether the addressExists\n    // are in fact ERC20 addresses\n    for (uint16 i = 0; i < _units.length; i++) {\n      // Check that all units are non-zero. Negative numbers will underflow\n      uint currentUnits = _units[i];\n      require(currentUnits > 0, \"Unit declarations must be non-zero\");\n\n      // Check that all addresses are non-zero\n      address currentComponent = _components[i];\n      require(currentComponent != address(0), \"Components must have non-zero address\");\n\n      // Check the component has not already been added\n      require(!tokenIsComponent(currentComponent));\n\n      // add component to isComponent mapping\n      isComponent[keccak256(currentComponent)] = true;\n\n      components.push(Component({\n        address_: currentComponent,\n        unit_: currentUnits\n      }));\n    }\n  }\n\n  ///////////////////////////////////////////////////////////\n  /// Set Functions\n  ///////////////////////////////////////////////////////////\n\n  /**\n   * @dev Function to convert component into {Set} Tokens\n   *\n   * Please note that the user's ERC20 component must be approved by\n   * their ERC20 contract to transfer their components to this contract.\n   *\n   * @param _quantity uint The quantity of Sets desired to issue in Wei as a multiple of naturalUnit\n   */\n  function issue(uint _quantity)\n    isMultipleOfNaturalUnit(_quantity)\n    isNonZero(_quantity)\n    public returns (bool success) {\n    // Transfers the sender's components to the contract\n    // Since the component length is defined ahead of time, this is not\n    // an unbounded loop\n    for (uint16 i = 0; i < components.length; i++) {\n      address currentComponent = components[i].address_;\n      uint currentUnits = components[i].unit_;\n\n      uint preTransferBalance = ERC20(currentComponent).balanceOf(this);\n\n      uint transferValue = calculateTransferValue(currentUnits, _quantity);\n      require(ERC20(currentComponent).transferFrom(msg.sender, this, transferValue));\n\n      // Check that preTransferBalance + transfer value is the same as postTransferBalance\n      uint postTransferBalance = ERC20(currentComponent).balanceOf(this);\n      assert(preTransferBalance.add(transferValue) == postTransferBalance);\n    }\n\n    mint(_quantity);\n\n    emit LogIssuance(msg.sender, _quantity);\n\n    return true;\n  }\n\n  /**\n   * @dev Function to convert {Set} Tokens into underlying components\n   *\n   * The ERC20 components do not need to be approved to call this function\n   *\n   * @param _quantity uint The quantity of Sets desired to redeem in Wei as a multiple of naturalUnit\n   */\n  function redeem(uint _quantity)\n    public\n    isMultipleOfNaturalUnit(_quantity)\n    hasSufficientBalance(_quantity)\n    isNonZero(_quantity)\n    returns (bool success)\n  {\n    burn(_quantity);\n\n    for (uint16 i = 0; i < components.length; i++) {\n      address currentComponent = components[i].address_;\n      uint currentUnits = components[i].unit_;\n\n      uint preTransferBalance = ERC20(currentComponent).balanceOf(this);\n\n      uint transferValue = calculateTransferValue(currentUnits, _quantity);\n      require(ERC20(currentComponent).transfer(msg.sender, transferValue));\n\n      // Check that preTransferBalance + transfer value is the same as postTransferBalance\n      uint postTransferBalance = ERC20(currentComponent).balanceOf(this);\n      assert(preTransferBalance.sub(transferValue) == postTransferBalance);\n    }\n\n    emit LogRedemption(msg.sender, _quantity);\n\n    return true;\n  }\n\n  /**\n   * @dev Function to withdraw a portion of the component tokens of a Set\n   *\n   * This function should be used in the event that a component token has been\n   * paused for transfer temporarily or permanently. This allows users a\n   * method to withdraw tokens in the event that one token has been frozen.\n   *\n   * The mask can be computed by summing the powers of 2 of indexes of components to exclude.\n   * For example, to exclude the 0th, 1st, and 3rd components, we pass in the hex of\n   * 1 + 2 + 8 = 11, padded to length 32 i.e. 0x000000000000000000000000000000000000000000000000000000000000000b\n   *\n   * @param _quantity uint The quantity of Sets desired to redeem in Wei\n   * @param _componentsToExclude bytes32 Hex of bitmask of components to exclude\n   */\n  function partialRedeem(uint _quantity, bytes32 _componentsToExclude)\n    public\n    isMultipleOfNaturalUnit(_quantity)\n    isNonZero(_quantity)\n    hasSufficientBalance(_quantity)\n    returns (bool success)\n  {\n    // Excluded tokens should be less than the number of components\n    // Otherwise, use the normal redeem function\n    require(_componentsToExclude > 0, \"Excluded components must be non-zero\");\n\n    burn(_quantity);\n\n    for (uint16 i = 0; i < components.length; i++) {\n      uint transferValue = calculateTransferValue(components[i].unit_, _quantity);\n\n      // Exclude tokens if 2 raised to the power of their indexes in the components\n      // array results in a non zero value following a bitwise AND\n      if (_componentsToExclude & bytes32(2 ** i) > 0) {\n        unredeemedBalances[i][msg.sender] += transferValue;\n      } else {\n        uint preTransferBalance = ERC20(components[i].address_).balanceOf(this);\n\n        require(ERC20(components[i].address_).transfer(msg.sender, transferValue));\n\n        // Check that preTransferBalance + transfer value is the same as postTransferBalance\n        uint postTransferBalance = ERC20(components[i].address_).balanceOf(this);\n        assert(preTransferBalance.sub(transferValue) == postTransferBalance);\n      }\n    }\n\n    emit LogPartialRedemption(msg.sender, _quantity, _componentsToExclude);\n\n    return true;\n  }\n\n  /**\n   * @dev Function to withdraw tokens that have previously been excluded when calling\n   * the partialRedeem method\n\n   * The mask can be computed by summing the powers of 2 of indexes of components to redeem.\n   * For example, to redeem the 0th, 1st, and 3rd components, we pass in the hex of\n   * 1 + 2 + 8 = 11, padded to length 32 i.e. 0x000000000000000000000000000000000000000000000000000000000000000b\n   *\n   * @param _componentsToRedeem bytes32 Hex of bitmask of components to redeem\n   */\n  function redeemExcluded(bytes32 _componentsToRedeem)\n    public\n    returns (bool success)\n  {\n    require(_componentsToRedeem > 0, \"Components to redeem must be non-zero\");\n\n    for (uint16 i = 0; i < components.length; i++) {\n      if (_componentsToRedeem & bytes32(2 ** i) > 0) {\n        address currentComponent = components[i].address_;\n        uint remainingBalance = unredeemedBalances[i][msg.sender];\n\n        // To prevent re-entrancy attacks, decrement the user's Set balance\n        unredeemedBalances[i][msg.sender] = 0;\n\n        require(ERC20(currentComponent).transfer(msg.sender, remainingBalance));\n      }\n    }\n\n    emit LogRedeemExcluded(msg.sender, _componentsToRedeem);\n\n    return true;\n  }\n\n  ///////////////////////////////////////////////////////////\n  /// Getters\n  ///////////////////////////////////////////////////////////\n  function getComponents() public view returns(address[]) {\n    address[] memory componentAddresses = new address[](components.length);\n    for (uint16 i = 0; i < components.length; i++) {\n        componentAddresses[i] = components[i].address_;\n    }\n    return componentAddresses;\n  }\n\n  function getUnits() public view returns(uint[]) {\n    uint[] memory units = new uint[](components.length);\n    for (uint16 i = 0; i < components.length; i++) {\n        units[i] = components[i].unit_;\n    }\n    return units;\n  }\n\n  function getUnredeemedBalance(address _componentAddress, address _userAddress) public view returns (uint256) {\n    require(tokenIsComponent(_componentAddress));\n\n    uint componentIndex;\n\n    for (uint i = 0; i < components.length; i++) {\n      if (components[i].address_ == _componentAddress) {\n        componentIndex = i;\n      }\n    }\n\n    return unredeemedBalances[componentIndex][_userAddress];\n  }\n\n  ///////////////////////////////////////////////////////////\n  /// Transfer Updates\n  ///////////////////////////////////////////////////////////\n  function transfer(address _to, uint256 _value) validDestination(_to) public returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) validDestination(_to) public returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  ///////////////////////////////////////////////////////////\n  /// Private Function\n  ///////////////////////////////////////////////////////////\n\n  function tokenIsComponent(address _tokenAddress) view internal returns (bool) {\n    return isComponent[keccak256(_tokenAddress)];\n  }\n\n  function calculateTransferValue(uint componentUnits, uint quantity) view internal returns(uint) {\n    return quantity.div(naturalUnit).mul(componentUnits);\n  }\n\n  function mint(uint quantity) internal {\n    balances[msg.sender] = balances[msg.sender].add(quantity);\n    totalSupply_ = totalSupply_.add(quantity);\n    emit Transfer(address(0), msg.sender, quantity);\n  }\n\n  function burn(uint quantity) internal {\n    balances[msg.sender] = balances[msg.sender].sub(quantity);\n    totalSupply_ = totalSupply_.sub(quantity);\n    emit Transfer(msg.sender, address(0), quantity);\n  }\n}",
  "bytecode": "60806040523480156200001157600080fd5b50604051620037cd380380620037cd83398101806040528101908080518201929190602001805182019291906020018051906020019092919050505060008060006040805190810160405280601681526020017f457468657265756d58204d6179203230313820536574000000000000000000008152506040805190810160405280600981526020017f455448582d352d3138000000000000000000000000000000000000000000000081525060128260039080519060200190620000d892919062000692565b508160049080519060200190620000f192919062000692565b5080600560006101000a81548160ff021916908360ff160217905550505050836000811115156200012157600080fd5b60008751111515620001c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001807f436f6d706f6e656e74206c656e677468206e6565647320746f2062652067726581526020017f6174207468616e2030000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600086511115156200023b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f556e697473206d7573742062652067726561746572207468616e20300000000081525060200191505060405180910390fd5b85518751141515620002db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001807f436f6d706f6e656e7420616e6420756e6974206c656e67746873206d7573742081526020017f6265207468652073616d6500000000000000000000000000000000000000000081525060400191505060405180910390fd5b84600681905550600093505b85518461ffff1610156200060357858461ffff168151811015156200030857fe5b906020019060200201519250600083111515620003b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f556e6974206465636c61726174696f6e73206d757374206265206e6f6e2d7a6581526020017f726f00000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b868461ffff16815181101515620003c657fe5b906020019060200201519150600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156200049e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001807f436f6d706f6e656e7473206d7573742068617665206e6f6e2d7a65726f20616481526020017f647265737300000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b620004b88262000610640100000000026401000000009004565b151515620004c557600080fd5b60016008600084604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140191505060405180910390206000191660001916815260200190815260200160002060006101000a81548160ff021916908315150217905550600760408051908101604052808473ffffffffffffffffffffffffffffffffffffffff168152602001858152509080600181540180825580915050906001820390600052602060002090600202016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101555050508380600101945050620002e7565b5050505050505062000741565b60006008600083604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140191505060405180910390206000191660001916815260200190815260200160002060009054906101000a900460ff169050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620006d557805160ff191683800117855562000706565b8280016001018555821562000706579182015b8281111562000705578251825591602001919060010190620006e8565b5b50905062000715919062000719565b5090565b6200073e91905b808211156200073a57600081600090555060010162000720565b5090565b90565b61307c80620007516000396000f300608060405260043610610112576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063027aa9f51461011757806306fdde0314610183578063095ea7b314610213578063156988121461027857806318160ddd146102c157806323b872dd146102ec578063313ce5671461037157806338c7db75146103a257806342a7cfd514610419578063661884631461044457806370a08231146104a957806395d89b411461050057806399d50d5d14610590578063a9059cbb146105fc578063b5d65f6114610661578063c5d574fe146106b4578063cc872b6614610728578063d73dd6231461076d578063db006a75146107d2578063dd62ed3e14610817575b600080fd5b34801561012357600080fd5b5061012c61088e565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561016f578082015181840152602081019050610154565b505050509050019250505060405180910390f35b34801561018f57600080fd5b5061019861093a565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101d85780820151818401526020810190506101bd565b50505050905090810190601f1680156102055780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561021f57600080fd5b5061025e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506109d8565b604051808215151515815260200191505060405180910390f35b34801561028457600080fd5b506102a76004803603810190808035600019169060200190929190505050610aca565b604051808215151515815260200191505060405180910390f35b3480156102cd57600080fd5b506102d6610df8565b6040518082815260200191505060405180910390f35b3480156102f857600080fd5b50610357600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e02565b604051808215151515815260200191505060405180910390f35b34801561037d57600080fd5b50610386610e91565b604051808260ff1660ff16815260200191505060405180910390f35b3480156103ae57600080fd5b50610403600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ea4565b6040518082815260200191505060405180910390f35b34801561042557600080fd5b5061042e610faf565b6040518082815260200191505060405180910390f35b34801561045057600080fd5b5061048f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610fb5565b604051808215151515815260200191505060405180910390f35b3480156104b557600080fd5b506104ea600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611246565b6040518082815260200191505060405180910390f35b34801561050c57600080fd5b5061051561128e565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561055557808201518184015260208101905061053a565b50505050905090810190601f1680156105825780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561059c57600080fd5b506105a561132c565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156105e85780820151818401526020810190506105cd565b505050509050019250505060405180910390f35b34801561060857600080fd5b50610647600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611426565b604051808215151515815260200191505060405180910390f35b34801561066d57600080fd5b5061069a6004803603810190808035906020019092919080356000191690602001909291905050506114b3565b604051808215151515815260200191505060405180910390f35b3480156106c057600080fd5b506106df60048036038101908080359060200190929190505050611b3b565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b34801561073457600080fd5b5061075360048036038101908080359060200190929190505050611b8e565b604051808215151515815260200191505060405180910390f35b34801561077957600080fd5b506107b8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611fb5565b604051808215151515815260200191505060405180910390f35b3480156107de57600080fd5b506107fd600480360381019080803590602001909291905050506121b1565b604051808215151515815260200191505060405180910390f35b34801561082357600080fd5b50610878600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612682565b6040518082815260200191505060405180910390f35b60608060006007805490506040519080825280602002602001820160405280156108c75781602001602082028038833980820191505090505b509150600090505b6007805490508161ffff1610156109325760078161ffff168154811015156108f357fe5b906000526020600020906002020160010154828261ffff1681518110151561091757fe5b906020019060200201818152505080806001019150506108cf565b819250505090565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109d05780601f106109a5576101008083540402835291602001916109d0565b820191906000526020600020905b8154815290600101906020018083116109b357829003601f168201915b505050505081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008060008060006001028560001916111515610b75576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001807f436f6d706f6e656e747320746f2072656465656d206d757374206265206e6f6e81526020017f2d7a65726f00000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600092505b6007805490508361ffff161015610d965760006001028360020a61ffff166001028616600019161115610d895760078361ffff16815481101515610bba57fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150600960008461ffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600960008561ffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610d4257600080fd5b505af1158015610d56573d6000803e3d6000fd5b505050506040513d6020811015610d6c57600080fd5b81019080805190602001909291905050501515610d8857600080fd5b5b8280600101935050610b7a565b3373ffffffffffffffffffffffffffffffffffffffff167f49e084e0b5b0bd93a9af05d1992881e35dee865cfbddbee0f1adea644fcaae138660405180826000191660001916815260200191505060405180910390a260019350505050919050565b6000600154905090565b600082600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610e4157600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610e7c57600080fd5b610e87858585612709565b9150509392505050565b600560009054906101000a900460ff1681565b6000806000610eb285612ac3565b1515610ebd57600080fd5b600090505b600780549050811015610f54578473ffffffffffffffffffffffffffffffffffffffff16600782815481101515610ef557fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610f47578091505b8080600101915050610ec2565b6009600083815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549250505092915050565b60065481565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808311156110c6576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061115a565b6110d98382612b4590919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113245780601f106112f957610100808354040283529160200191611324565b820191906000526020600020905b81548152906001019060200180831161130757829003601f168201915b505050505081565b60608060006007805490506040519080825280602002602001820160405280156113655781602001602082028038833980820191505090505b509150600090505b6007805490508161ffff16101561141e5760078161ffff1681548110151561139157fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828261ffff168151811015156113d557fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050808060010191505061136d565b819250505090565b600082600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561146557600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156114a057600080fd5b6114aa8484612b5e565b91505092915050565b6000806000806000866000600654828115156114cb57fe5b061415156114d857600080fd5b876000811115156114e857600080fd5b88806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156115c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001807f5573657220646f6573206e6f7420686176652073756666696369656e7420626181526020017f6c616e636500000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6000600102896000191611151561166a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f4578636c7564656420636f6d706f6e656e7473206d757374206265206e6f6e2d81526020017f7a65726f0000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6116738a612d7d565b600096505b6007805490508761ffff161015611acc576116b760078861ffff1681548110151561169f57fe5b9060005260206000209060020201600101548b612e94565b955060006001028760020a61ffff166001028a1660001916111561173c5785600960008961ffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550611abf565b60078761ffff1681548110151561174f57fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561181b57600080fd5b505af115801561182f573d6000803e3d6000fd5b505050506040513d602081101561184557600080fd5b8101908080519060200190929190505050945060078761ffff1681548110151561186b57fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561193f57600080fd5b505af1158015611953573d6000803e3d6000fd5b505050506040513d602081101561196957600080fd5b8101908080519060200190929190505050151561198557600080fd5b60078761ffff1681548110151561199857fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611a6457600080fd5b505af1158015611a78573d6000803e3d6000fd5b505050506040513d6020811015611a8e57600080fd5b8101908080519060200190929190505050935083611ab58787612b4590919063ffffffff16565b141515611abe57fe5b5b8680600101975050611678565b3373ffffffffffffffffffffffffffffffffffffffff167f3d769c4a894e0b550ed0fa6c7342fa3c9261c59842db6606168cf3f3288eccfa8b8b6040518083815260200182600019166000191681526020019250505060405180910390a2600197505050505050505092915050565b600781815481101515611b4a57fe5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b600080600080600080600087600060065482811515611ba957fe5b06141515611bb657600080fd5b88600081111515611bc657600080fd5b600097505b6007805490508861ffff161015611f4d5760078861ffff16815481101515611bef57fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16965060078861ffff16815481101515611c3657fe5b90600052602060002090600202016001015495508673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611ce557600080fd5b505af1158015611cf9573d6000803e3d6000fd5b505050506040513d6020811015611d0f57600080fd5b81019080805190602001909291905050509450611d2c868b612e94565b93508673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015611e0557600080fd5b505af1158015611e19573d6000803e3d6000fd5b505050506040513d6020811015611e2f57600080fd5b81019080805190602001909291905050501515611e4b57600080fd5b8673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611ee657600080fd5b505af1158015611efa573d6000803e3d6000fd5b505050506040513d6020811015611f1057600080fd5b8101908080519060200190929190505050925082611f378587612ec590919063ffffffff16565b141515611f4057fe5b8780600101985050611bcb565b611f568a612ee3565b3373ffffffffffffffffffffffffffffffffffffffff167ffbd21f8762dc0c4fc0dbc03a2f816a0a617102a0f9d1908bbc09d377a0b9c6ab8b6040518082815260200191505060405180910390a2600198505050505050505050919050565b600061204682600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612ec590919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000806000806000806000876000600654828115156121cc57fe5b061415156121d957600080fd5b88806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156122b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001807f5573657220646f6573206e6f7420686176652073756666696369656e7420626181526020017f6c616e636500000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b896000811115156122c657600080fd5b6122cf8b612d7d565b600098505b6007805490508961ffff1610156126225760078961ffff168154811015156122f857fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16975060078961ffff1681548110151561233f57fe5b90600052602060002090600202016001015496508773ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156123ee57600080fd5b505af1158015612402573d6000803e3d6000fd5b505050506040513d602081101561241857600080fd5b81019080805190602001909291905050509550612435878c612e94565b94508773ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156124da57600080fd5b505af11580156124ee573d6000803e3d6000fd5b505050506040513d602081101561250457600080fd5b8101908080519060200190929190505050151561252057600080fd5b8773ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156125bb57600080fd5b505af11580156125cf573d6000803e3d6000fd5b505050506040513d60208110156125e557600080fd5b810190808051906020019092919050505093508361260c8688612b4590919063ffffffff16565b14151561261557fe5b88806001019950506122d4565b3373ffffffffffffffffffffffffffffffffffffffff167f2de3ebe1bb56079998f2617612ba527a2690a100757600dfc0d7253c808b74298c6040518082815260200191505060405180910390a260019950505050505050505050919050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561274657600080fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561279357600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561281e57600080fd5b61286f826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612b4590919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612902826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612ec590919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506129d382600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612b4590919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60006008600083604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140191505060405180910390206000191660001916815260200190815260200160002060009054906101000a900460ff169050919050565b6000828211151515612b5357fe5b818303905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515612b9b57600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515612be857600080fd5b612c39826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612b4590919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612ccc826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612ec590919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b612dce816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612b4590919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612e2581600154612b4590919063ffffffff16565b600181905550600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350565b6000612ebd83612eaf60065485612ffa90919063ffffffff16565b61301590919063ffffffff16565b905092915050565b6000808284019050838110151515612ed957fe5b8091505092915050565b612f34816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612ec590919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612f8b81600154612ec590919063ffffffff16565b6001819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350565b600080828481151561300857fe5b0490508091505092915050565b600080600084141561302a5760009150613049565b828402905082848281151561303b57fe5b0414151561304557fe5b8091505b50929150505600a165627a7a72305820b5a06e953a922b4d26329e0b17d2bc31e0201b164a308d77d0f1a579c1ce1b760029000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000174876e800000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000d850942ef8811f2a866692a623011bde52a462c1000000000000000000000000b5a5f22694352c15b00323844ad545abb2b11028000000000000000000000000b8c77482e45f1f44de1745f52c74426c631bdd52000000000000000000000000d26114cd6ee289accf82350c8d8487fedb8a0c0700000000000000000000000005f4a42e251f2d52b8ed15e9fedaacfcef1fad270000000000000000000000005ca9a71b1d01849c0a95490cc00559717fcf0d1d000000000000000000000000e41d2489571d322189246dafa5ebde1f4699f498000000000000000000000000cb97e65f07da24d46bcdd078ebebd7c6e6e3d750000000000000000000000000d4fa1460f537bb9085d22c7bccb5dd450ef28e3a000000000000000000000000168296bb09e24a88805cb9c33356536b980d3fc5000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000006e7ee9e4b800000000000000000000000000000000000000000000000000000051569a109d00000000000000000000000000000000000000000000000000000017f4586ba3000000000000000000000000000000000000000000000000000000156f230c790000000000000000000000000000000000000000000000000000000000644fc200000000000000000000000000000000000000000000000000000030f23757000000000000000000000000000000000000000000000000000000006f1a315380000000000000000000000000000000000000000000000000000000000000005900000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000020",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000174876e800000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000d850942ef8811f2a866692a623011bde52a462c1000000000000000000000000b5a5f22694352c15b00323844ad545abb2b11028000000000000000000000000b8c77482e45f1f44de1745f52c74426c631bdd52000000000000000000000000d26114cd6ee289accf82350c8d8487fedb8a0c0700000000000000000000000005f4a42e251f2d52b8ed15e9fedaacfcef1fad270000000000000000000000005ca9a71b1d01849c0a95490cc00559717fcf0d1d000000000000000000000000e41d2489571d322189246dafa5ebde1f4699f498000000000000000000000000cb97e65f07da24d46bcdd078ebebd7c6e6e3d750000000000000000000000000d4fa1460f537bb9085d22c7bccb5dd450ef28e3a000000000000000000000000168296bb09e24a88805cb9c33356536b980d3fc5000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000006e7ee9e4b800000000000000000000000000000000000000000000000000000051569a109d00000000000000000000000000000000000000000000000000000017f4586ba3000000000000000000000000000000000000000000000000000000156f230c790000000000000000000000000000000000000000000000000000000000644fc200000000000000000000000000000000000000000000000000000030f23757000000000000000000000000000000000000000000000000000000006f1a315380000000000000000000000000000000000000000000000000000000000000005900000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000020"
}