{
  "address": "0x6ec8a24cabdc339a06a172f8223ea557055adaa5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Genaro Network Token",
  "contractName": "GNX",
  "compilerVersion": "v0.4.13+commit.fb4cb1a",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-09-29\n*/\n\npragma solidity ^0.4.13;\n\ncontract SafeMath {\n  function safeMul(uint a, uint b) internal returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function safeDiv(uint a, uint b) internal returns (uint) {\n    assert(b > 0);\n    uint c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n\n  function safeSub(uint a, uint b) internal returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint a, uint b) internal returns (uint) {\n    uint c = a + b;\n    assert(c>=a && c>=b);\n    return c;\n  }\n\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a < b ? a : b;\n  }\n\n  function assert(bool assertion) internal {\n    require(assertion);\n  }\n}\n\n\n/*\n    Copyright 2017, Jordi Baylina (Giveth)\n\n    Based on MiniMeToken.sol from https://github.com/Giveth/minime\n */\n\ncontract Controlled {\n    /// @notice The address of the controller is the only address that can call\n    ///  a function with this modifier\n    modifier onlyController{ require(msg.sender==controller); _; }\n\n\n    address public controller;\n\n    function Controlled() { controller = msg.sender;}\n\n    /// @notice Changes the controller of the contract\n    /// @param _newController The new controller of the contract\n    function changeController(address _newController) onlyController {\n        controller = _newController;\n    }\n}\n\n/*\n    Copyright 2017, Jordi Baylina (Giveth)\n\n    Based on MiniMeToken.sol from https://github.com/Giveth/minime\n */\n\n/// @dev The token controller contract must implement these functions\ncontract Controller {\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n    /// @param _owner The address that sent the ether to create tokens\n    /// @return True if the ether is accepted, false if it throws\n    function proxyPayment(address _owner) payable returns(bool);\n\n    /// @notice Notifies the controller about a token transfer allowing the\n    ///  controller to react if desired\n    /// @param _from The origin of the transfer\n    /// @param _to The destination of the transfer\n    /// @param _amount The amount of the transfer\n    /// @return False if the controller does not authorize the transfer\n    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n\n    /// @notice Notifies the controller about an approval allowing the\n    ///  controller to react if desired\n    /// @param _owner The address that calls `approve()`\n    /// @param _spender The spender in the `approve()` call\n    /// @param _amount The amount in the `approve()` call\n    /// @return False if the controller does not authorize the approval\n    function onApprove(address _owner, address _spender, uint _amount)\n        returns(bool);\n}\n\ncontract ApproveAndCallReceiver {\n    function receiveApproval(address _from, uint256 _amount, address _token, bytes _data);\n}\n\n\n/*\n * ERC20 interface\n * see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n  function totalSupply() constant returns (uint);\n  function balanceOf(address who) constant returns (uint);\n  function allowance(address owner, address spender) constant returns (uint);\n\n  function transfer(address to, uint value) returns (bool ok);\n  function transferFrom(address from, address to, uint value) returns (bool ok);\n  function approve(address spender, uint value) returns (bool ok);\n  event Transfer(address indexed from, address indexed to, uint value);\n  event Approval(address indexed owner, address indexed spender, uint value);\n}\n\ncontract MiniMeToken is ERC20, Controlled {\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\n    uint8 public decimals;             //Number of decimals of the smallest unit\n    string public symbol;              //An identifier: e.g. REP\n    string public version = 'MMT_0.1'; //An arbitrary versioning scheme\n\n\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\n    ///  given value, the block number attached is the one that last changed the\n    ///  value\n    struct  Checkpoint {\n\n        // `fromBlock` is the block number that the value was generated from\n        uint128 fromBlock;\n\n        // `value` is the amount of tokens at a specific block number\n        uint128 value;\n    }\n\n    // `parentToken` is the Token address that was cloned to produce this token;\n    //  it will be 0x0 for a token that was not cloned\n    MiniMeToken public parentToken;\n\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\n    //  used to determine the initial distribution of the Clone Token\n    uint public parentSnapShotBlock;\n\n    // `creationBlock` is the block number that the Clone Token was created\n    uint public creationBlock;\n\n    // `balances` is the map that tracks the balance of each address, in this\n    //  contract when the balance changes the block number that the change\n    //  occurred is also included in the map\n    mapping (address => Checkpoint[]) balances;\n\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n    mapping (address => mapping (address => uint256)) allowed;\n\n    // Tracks the history of the `totalSupply` of the token\n    Checkpoint[] totalSupplyHistory;\n\n    // Flag that determines if the token is transferable or not.\n    bool public transfersEnabled;\n\n    // The factory used to create new clone tokens\n    MiniMeTokenFactory public tokenFactory;\n\n////////////////\n// Constructor\n////////////////\n\n    /// @notice Constructor to create a MiniMeToken\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\n    ///  will create the Clone token contracts, the token factory needs to be\n    ///  deployed first\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\n    ///  new token\n    /// @param _parentSnapShotBlock Block of the parent token that will\n    ///  determine the initial distribution of the clone token, set to 0 if it\n    ///  is a new token\n    /// @param _tokenName Name of the new token\n    /// @param _decimalUnits Number of decimals of the new token\n    /// @param _tokenSymbol Token Symbol for the new token\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\n    function MiniMeToken(\n        address _tokenFactory,\n        address _parentToken,\n        uint _parentSnapShotBlock,\n        string _tokenName,\n        uint8 _decimalUnits,\n        string _tokenSymbol,\n        bool _transfersEnabled\n    ) {\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n        name = _tokenName;                                 // Set the name\n        decimals = _decimalUnits;                          // Set the decimals\n        symbol = _tokenSymbol;                             // Set the symbol\n        parentToken = MiniMeToken(_parentToken);\n        parentSnapShotBlock = _parentSnapShotBlock;\n        transfersEnabled = _transfersEnabled;\n        creationBlock = block.number;\n    }\n\n\n///////////////////\n// ERC20 Methods\n///////////////////\n\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _amount) returns (bool success) {\n        require (transfersEnabled);\n    ////if (!transfersEnabled) throw;\n        return doTransfer(msg.sender, _to, _amount);\n    }\n\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n    ///  is approved by `_from`\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return True if the transfer was successful\n    function transferFrom(address _from, address _to, uint256 _amount\n    ) returns (bool success) {\n\n        // The controller of this contract can move tokens around at will,\n        //  this is important to recognize! Confirm that you trust the\n        //  controller of this contract, which in most situations should be\n        //  another open source smart contract or 0x0\n        if (msg.sender != controller) {\n            require (transfersEnabled);\n\n            ////if (!transfersEnabled) throw;\n\n            // The standard ERC 20 transferFrom functionality\n            assert (allowed[_from][msg.sender]>=_amount);\n\n            ////if (allowed[_from][msg.sender] < _amount) throw;\n            allowed[_from][msg.sender] -= _amount;\n        }\n        return doTransfer(_from, _to, _amount);\n    }\n\n    /// @dev This is the actual transfer function in the token contract, it can\n    ///  only be called by other functions in this contract.\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return True if the transfer was successful\n    function doTransfer(address _from, address _to, uint _amount\n    ) internal returns(bool) {\n           if (_amount == 0) {\n               return true;\n           }\n\n           // Do not allow transfer to 0x0 or the token contract itself\n           require((_to!=0)&&(_to!=address(this)));\n\n           //// if ((_to == 0) || (_to == address(this))) throw;\n\n           // If the amount being transfered is more than the balance of the\n           //  account the transfer returns false\n\n           var previousBalanceFrom = balanceOfAt(_from, block.number);\n           assert(previousBalanceFrom >= _amount);\n\n           // Alerts the token controller of the transfer\n           if (isContract(controller)) {\n               assert(Controller(controller).onTransfer(_from,_to,_amount));\n\n           }\n\n           // First update the balance array with the new value for the address\n           //  sending the tokens\n           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n\n           // Then update the balance array with the new value for the address\n           //  receiving the tokens\n           \n           var previousBalanceTo = balanceOfAt(_to, block.number);\n           assert(previousBalanceTo+_amount>=previousBalanceTo); \n           \n           //// if (previousBalanceTo + _amount < previousBalanceTo) throw; // Check for overflow\n           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\n\n           // An event to make the transfer easy to find on the blockchain\n           Transfer(_from, _to, _amount);\n\n           return true;\n    }\n\n    /// @param _owner The address that's balance is being requested\n    /// @return The balance of `_owner` at the current block\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balanceOfAt(_owner, block.number);\n    }\n\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n    ///  its behalf. This is a modified version of the ERC20 approve function\n    ///  to be a little bit safer\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return True if the approval was successful\n    function approve(address _spender, uint256 _amount) returns (bool success) {\n        require(transfersEnabled);\n\n        // To change the approve amount you first have to reduce the addresses´\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n        require((_amount==0)||(allowed[msg.sender][_spender]==0));\n\n        // Alerts the token controller of the approve function call\n        if (isContract(controller)) {\n            assert(Controller(controller).onApprove(msg.sender,_spender,_amount));\n\n            //  if (!Controller(controller).onApprove(msg.sender, _spender, _amount))\n            //        throw;\n        }\n\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    /// @dev This function makes it easy to read the `allowed[]` map\n    /// @param _owner The address of the account that owns the token\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\n    ///  to spend\n    function allowance(address _owner, address _spender\n    ) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n    ///  its behalf, and then a function is triggered in the contract that is\n    ///  being approved, `_spender`. This allows users to use their tokens to\n    ///  interact with contracts in one function call instead of two\n    /// @param _spender The address of the contract able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return True if the function call was successful\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n    ) returns (bool success) {\n        approve(_spender, _amount);\n\n        // This portion is copied from ConsenSys's Standard Token Contract. It\n        //  calls the receiveApproval function that is part of the contract that\n        //  is being approved (`_spender`). The function should look like:\n        //  `receiveApproval(address _from, uint256 _amount, address\n        //  _tokenContract, bytes _extraData)` It is assumed that the call\n        //  *should* succeed, otherwise the plain vanilla approve would be used\n        ApproveAndCallReceiver(_spender).receiveApproval(\n           msg.sender,\n           _amount,\n           this,\n           _extraData\n        );\n        return true;\n    }\n\n    /// @dev This function makes it easy to get the total number of tokens\n    /// @return The total number of tokens\n    function totalSupply() constant returns (uint) {\n        return totalSupplyAt(block.number);\n    }\n\n\n////////////////\n// Query balance and totalSupply in History\n////////////////\n\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n    /// @param _owner The address from which the balance will be retrieved\n    /// @param _blockNumber The block number when the balance is queried\n    /// @return The balance at `_blockNumber`\n    function balanceOfAt(address _owner, uint _blockNumber) constant\n        returns (uint) {\n\n        // These next few lines are used when the balance of the token is\n        //  requested before a check point was ever created for this token, it\n        //  requires that the `parentToken.balanceOfAt` be queried at the\n        //  genesis block for that token as this contains initial balance of\n        //  this token\n        if ((balances[_owner].length == 0)\n            || (balances[_owner][0].fromBlock > _blockNumber)) {\n            if (address(parentToken) != 0) {\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\n            } else {\n                // Has no parent\n                return 0;\n            }\n\n        // This will return the expected balance during normal situations\n        } else {\n            return getValueAt(balances[_owner], _blockNumber);\n        }\n    }\n\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\n    /// @param _blockNumber The block number when the totalSupply is queried\n    /// @return The total amount of tokens at `_blockNumber`\n    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n\n        // These next few lines are used when the totalSupply of the token is\n        //  requested before a check point was ever created for this token, it\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\n        //  genesis block for this token as that contains totalSupply of this\n        //  token at this block number.\n        if ((totalSupplyHistory.length == 0)\n            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n            if (address(parentToken) != 0) {\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\n            } else {\n                return 0;\n            }\n\n        // This will return the expected totalSupply during normal situations\n        } else {\n            return getValueAt(totalSupplyHistory, _blockNumber);\n        }\n    }\n\n    function min(uint a, uint b) internal returns (uint) {\n      return a < b ? a : b;\n    }\n\n////////////////\n// Clone Token Method\n////////////////\n\n    /// @notice Creates a new clone token with the initial distribution being\n    ///  this token at `_snapshotBlock`\n    /// @param _cloneTokenName Name of the clone token\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\n    /// @param _cloneTokenSymbol Symbol of the clone token\n    /// @param _snapshotBlock Block when the distribution of the parent token is\n    ///  copied to set the initial distribution of the new clone token;\n    ///  if the block is higher than the actual block, the current block is used\n    /// @param _transfersEnabled True if transfers are allowed in the clone\n    /// @return The address of the new MiniMeToken Contract\n    function createCloneToken(\n        string _cloneTokenName,\n        uint8 _cloneDecimalUnits,\n        string _cloneTokenSymbol,\n        uint _snapshotBlock,\n        bool _transfersEnabled\n        ) returns(address) {\n        if (_snapshotBlock > block.number) _snapshotBlock = block.number;\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n            this,\n            _snapshotBlock,\n            _cloneTokenName,\n            _cloneDecimalUnits,\n            _cloneTokenSymbol,\n            _transfersEnabled\n            );\n\n        cloneToken.changeController(msg.sender);\n\n        // An event to make the token easy to find on the blockchain\n        NewCloneToken(address(cloneToken), _snapshotBlock);\n        return address(cloneToken);\n    }\n\n////////////////\n// Generate and destroy tokens\n////////////////\n\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\n    /// @param _owner The address that will be assigned the new tokens\n    /// @param _amount The quantity of tokens generated\n    /// @return True if the tokens are generated correctly\n    function generateTokens(address _owner, uint _amount\n    ) onlyController returns (bool) {\n        uint curTotalSupply = totalSupply();\n        //uint curTotalSupply = getValueAt(totalSupplyHistory, block.number);\n\n        assert(curTotalSupply+_amount>=curTotalSupply);\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n        var previousBalanceTo = balanceOf(_owner);\n        assert(previousBalanceTo+_amount>=previousBalanceTo);\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n        Transfer(0, _owner, _amount);\n        return true;\n    }\n\n\n    /// @notice Burns `_amount` tokens from `_owner`\n    /// @param _owner The address that will lose the tokens\n    /// @param _amount The quantity of tokens to burn\n    /// @return True if the tokens are burned correctly\n    function destroyTokens(address _owner, uint _amount\n    ) onlyController returns (bool) {\n        uint curTotalSupply = totalSupply();\n\n        //uint curTotalSupply = getValueAt(totalSupplyHistory, block.number);\n        \n        assert(curTotalSupply >= _amount);\n        \n        //// if (curTotalSupply < _amount) throw;\n\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n        var previousBalanceFrom = balanceOf(_owner);\n        assert(previousBalanceFrom >=_amount);\n\n        //// if (previousBalanceFrom < _amount) throw;\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n        Transfer(_owner, 0, _amount);\n        return true;\n    }\n\n////////////////\n// Enable tokens transfers\n////////////////\n\n\n    /// @notice Enables token holders to transfer their tokens freely if true\n    /// @param _transfersEnabled True if transfers are allowed in the clone\n    function enableTransfers(bool _transfersEnabled) onlyController {\n        transfersEnabled = _transfersEnabled;\n    }\n\n////////////////\n// Internal helper functions to query and set a value in a snapshot array\n////////////////\n\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\n    /// @param checkpoints The history of values being queried\n    /// @param _block The block number to retrieve the value at\n    /// @return The number of tokens being queried\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n    ) constant internal returns (uint) {\n        if (checkpoints.length == 0) return 0;\n\n        // Shortcut for the actual value\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n            return checkpoints[checkpoints.length-1].value;\n        if (_block < checkpoints[0].fromBlock) return 0;\n\n        // Binary search of the value in the array\n        uint min = 0;\n        uint max = checkpoints.length-1;\n        while (max > min) {\n            uint mid = (max + min + 1)/ 2;\n            if (checkpoints[mid].fromBlock<=_block) {\n                min = mid;\n            } else {\n                max = mid-1;\n            }\n        }\n        return checkpoints[min].value;\n    }\n\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\n    ///  `totalSupplyHistory`\n    /// @param checkpoints The history of data being updated\n    /// @param _value The new number of tokens\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n    ) internal  {\n        if ((checkpoints.length == 0)\n        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\n               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n               newCheckPoint.fromBlock =  uint128(block.number);\n               newCheckPoint.value = uint128(_value);\n           } else {\n               Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\n               oldCheckPoint.value = uint128(_value);\n           }\n    }\n\n    /// @dev Internal function to determine if an address is a contract\n    /// @param _addr The address being queried\n    /// @return True if `_addr` is a contract\n    function isContract(address _addr) constant internal returns(bool) {\n        uint size;\n        if (_addr == 0) return false;\n        assembly {\n            size := extcodesize(_addr)\n        }\n        return size>0;\n    }\n\n    /// @notice The fallback function: If the contract's controller has not been\n    ///  set to 0, then the `proxyPayment` method is called which relays the\n    ///  ether and creates tokens as described in the token controller contract\n    function ()  payable {\n        require(isContract(controller));\n        assert(Controller(controller).proxyPayment.value(msg.value)(msg.sender));\n    }\n\n\n////////////////\n// Events\n////////////////\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\n}\n\n\n////////////////\n// MiniMeTokenFactory\n////////////////\n\n/// @dev This contract is used to generate clone contracts from a contract.\n///  In solidity this is the way to create a contract from a contract of the\n///  same class\ncontract MiniMeTokenFactory {\n\n    /// @notice Update the DApp by creating a new token with new functionalities\n    ///  the msg.sender becomes the controller of this clone token\n    /// @param _parentToken Address of the token being cloned\n    /// @param _snapshotBlock Block of the parent token that will\n    ///  determine the initial distribution of the clone token\n    /// @param _tokenName Name of the new token\n    /// @param _decimalUnits Number of decimals of the new token\n    /// @param _tokenSymbol Token Symbol for the new token\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\n    /// @return The address of the new token contract\n    function createCloneToken(\n        address _parentToken,\n        uint _snapshotBlock,\n        string _tokenName,\n        uint8 _decimalUnits,\n        string _tokenSymbol,\n        bool _transfersEnabled\n    ) returns (MiniMeToken) {\n        MiniMeToken newToken = new MiniMeToken(\n            this,\n            _parentToken,\n            _snapshotBlock,\n            _tokenName,\n            _decimalUnits,\n            _tokenSymbol,\n            _transfersEnabled\n            );\n\n        newToken.changeController(msg.sender);\n        return newToken;\n    }\n}\n\n// inspired by Zeppelin's Vested Token deriving MiniMeToken\n\n// @dev MiniMeIrrevocableVestedToken is a derived version of MiniMeToken adding the\n// ability to createTokenGrants which are basically a transfer that limits the\n// receiver of the tokens.\n\n\ncontract MiniMeIrrevocableVestedToken is MiniMeToken, SafeMath {\n\n  uint256 MAX_GRANTS_PER_ADDRESS = 20;\n\n  // Keep the struct at 3 sstores ( total value  20+32+24 =76 bytes)\n  struct TokenGrant {\n    address granter;  // 20 bytes\n    uint256 value;    // 32 bytes\n    uint64 cliff;\n    uint64 vesting;\n    uint64 start;     // 3*8 =24 bytes\n  }\n\n  event NewTokenGrant(address indexed from, address indexed to, uint256 value, uint64 start, uint64 cliff, uint64 vesting);\n\n  mapping (address => TokenGrant[]) public grants;\n\n  mapping (address => bool) canCreateGrants;\n  address vestingWhitelister;\n\n  modifier canTransfer(address _sender, uint _value) {\n    require(_value<=spendableBalanceOf(_sender));\n    _;\n  }\n\n  modifier onlyVestingWhitelister {\n    require(msg.sender==vestingWhitelister);\n    _;\n  }\n\n  function MiniMeIrrevocableVestedToken (\n      address _tokenFactory,\n      address _parentToken,\n      uint _parentSnapShotBlock,\n      string _tokenName,\n      uint8 _decimalUnits,\n      string _tokenSymbol,\n      bool _transfersEnabled\n  ) MiniMeToken(_tokenFactory, _parentToken, _parentSnapShotBlock, _tokenName, _decimalUnits, _tokenSymbol, _transfersEnabled) {\n    vestingWhitelister = msg.sender;\n    doSetCanCreateGrants(vestingWhitelister, true);\n  }\n\n  // @dev Checks modifier and allows transfer if tokens are not locked.\n  function transfer(address _to, uint _value)\n           canTransfer(msg.sender, _value)\n           public\n           returns (bool success) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint _value)\n           canTransfer(_from, _value)\n           public\n           returns (bool success) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function spendableBalanceOf(address _holder) constant public returns (uint) {\n    return transferableTokens(_holder, uint64(now));\n  }\n\n  // main func for token grant\n\n  function grantVestedTokens(\n    address _to,\n    uint256 _value,\n    uint64 _start,\n    uint64 _cliff,\n    uint64 _vesting) public {\n\n    // Check start, cliff and vesting are properly order to ensure correct functionality of the formula.\n\n    require(_cliff >= _start && _vesting >= _cliff);\n    \n    require(tokenGrantsCount(_to)<=MAX_GRANTS_PER_ADDRESS); //// To prevent a user being spammed and have his balance locked (out of gas attack when calculating vesting).\n\n    assert(canCreateGrants[msg.sender]);\n\n\n    TokenGrant memory grant = TokenGrant(msg.sender, _value, _cliff, _vesting, _start);\n    grants[_to].push(grant);\n\n    assert(transfer(_to,_value));\n\n    NewTokenGrant(msg.sender, _to, _value, _cliff, _vesting, _start);\n  }\n\n  function setCanCreateGrants(address _addr, bool _allowed)\n           onlyVestingWhitelister public {\n    doSetCanCreateGrants(_addr, _allowed);\n  }\n\n  function doSetCanCreateGrants(address _addr, bool _allowed)\n           internal {\n    canCreateGrants[_addr] = _allowed;\n  }\n\n  function changeVestingWhitelister(address _newWhitelister) onlyVestingWhitelister public {\n    doSetCanCreateGrants(vestingWhitelister, false);\n    vestingWhitelister = _newWhitelister;\n    doSetCanCreateGrants(vestingWhitelister, true);\n  }\n\n  function tokenGrantsCount(address _holder) constant public returns (uint index) {\n    return grants[_holder].length;\n  }\n\n  function tokenGrant(address _holder, uint _grantId) constant public returns (address granter, uint256 value, uint256 vested, uint64 start, uint64 cliff, uint64 vesting) {\n    TokenGrant storage grant = grants[_holder][_grantId];\n\n    granter = grant.granter;\n    value = grant.value;\n    start = grant.start;\n    cliff = grant.cliff;\n    vesting = grant.vesting;\n\n    vested = vestedTokens(grant, uint64(now));\n  }\n\n  function vestedTokens(TokenGrant grant, uint64 time) internal constant returns (uint256) {\n    return calculateVestedTokens(\n      grant.value,\n      uint256(time),\n      uint256(grant.start),\n      uint256(grant.cliff),\n      uint256(grant.vesting)\n    );\n  }\n\n  //  transferableTokens\n  //   |                         _/--------   NonVestedTokens\n  //   |                       _/\n  //   |                     _/\n  //   |                   _/\n  //   |                 _/\n  //   |                /\n  //   |              .|\n  //   |            .  |\n  //   |          .    |\n  //   |        .      |\n  //   |      .        |\n  //   |    .          |\n  //   +===+===========+---------+----------> time\n  //      Start       Cliff    Vesting\n\n  function calculateVestedTokens(\n    uint256 tokens,\n    uint256 time,\n    uint256 start,\n    uint256 cliff,\n    uint256 vesting) internal constant returns (uint256)\n    {\n\n    // Shortcuts for before cliff and after vesting cases.\n    if (time < cliff) return 0;\n    if (time >= vesting) return tokens;\n\n    // Interpolate all vested tokens.\n    // As before cliff the shortcut returns 0, we can use just this function to\n    // calculate it.\n\n    // vestedTokens = tokens * (time - start) / (vesting - start)\n    uint256 vestedTokens = safeDiv(\n                                  safeMul(\n                                    tokens,\n                                    safeSub(time, start)\n                                    ),\n                                  safeSub(vesting, start)\n                                  );\n\n    return vestedTokens;\n  }\n\n  function nonVestedTokens(TokenGrant grant, uint64 time) internal constant returns (uint256) {\n    return safeSub(grant.value, vestedTokens(grant, time));\n  }\n\n  // @dev The date in which all tokens are transferable for the holder\n  // Useful for displaying purposes (not used in any logic calculations)\n  function lastTokenIsTransferableDate(address holder) constant public returns (uint64 date) {\n    date = uint64(now);\n    uint256 grantIndex = tokenGrantsCount(holder);\n    for (uint256 i = 0; i < grantIndex; i++) {\n      date = max64(grants[holder][i].vesting, date);\n    }\n    return date;\n  }\n\n  // @dev How many tokens can a holder transfer at a point in time\n  function transferableTokens(address holder, uint64 time) constant public returns (uint256) {\n    uint256 grantIndex = tokenGrantsCount(holder);\n\n    if (grantIndex == 0) return balanceOf(holder); // shortcut for holder without grants\n\n    // Iterate through all the grants the holder has, and add all non-vested tokens\n    uint256 nonVested = 0;\n    for (uint256 i = 0; i < grantIndex; i++) {\n      nonVested = safeAdd(nonVested, nonVestedTokens(grants[holder][i], time));\n    }\n\n    // Balance - totalNonVested is the amount of tokens a holder can transfer at any given time\n    return safeSub(balanceOf(holder), nonVested);\n  }\n}\n\ncontract GNX is MiniMeIrrevocableVestedToken {\n\n  uint constant D160 = 0x0010000000000000000000000000000000000000000;\n\n  // @dev GNX constructor just parametrizes the MiniMeIrrevocableVestedToken constructor\n  function GNX(\n    address _tokenFactory\n  ) MiniMeIrrevocableVestedToken(\n    _tokenFactory,\n    0xBB13E608888E5D30C09b13F89d27631056161B9F,\t\t//genaro network token mainnet\n    4313000,  \t\t\t\t\t\t\t\t\t\t//snapshot for mainnet\t\n    \"Genaro X\", \t\t  \t\t\t\t\t\t\t\t// Token name\n    9,\t\t\t\t\t\t\t\t\t\t\t\t// Decimals\n    \"GNX\",\t\t\t\t\t\t\t\t\t\t\t// Symbol\n    true\t\t\t\t\t\t\t\t\t\t\t\t// Enable Transfers\t\n    ) {}\n\n    // data is an array of uints. Each uint represents a transfer.\n    // The 160 LSB is the destination of the addess that wants to be sent\n    // The 96 MSB is the amount of tokens that wants to be sent.\n    function multiMint(uint[] data) onlyController {\n        for (uint i = 0; i < data.length; i++ ) {\n            address addr = address( data[i] & (D160-1) );\n            uint amount = data[i] / D160;\n            assert(generateTokens(addr,amount));\n        }\n    }\n\n    // Due to the supervision of certain country, it may uses some time.\n    // data is an array of uints. Each uint represents a sterilization.\n    // The 160 LSB is the destination of the addess that needs to be sterilized\n    // The 96 MSB is the amount of tokens that needs to be sterilized.\n    function sterilize(uint[] data) onlyController {\n        for (uint i = 0; i < data.length; i++ ) {\n            address addr = address( data[i] & (D160-1) );\n            uint amount = data[i] / D160;\n            assert(destroyTokens(addr,amount));\n        }\n    }    \n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_start\",\"type\":\"uint64\"},{\"name\":\"_cliff\",\"type\":\"uint64\"},{\"name\":\"_vesting\",\"type\":\"uint64\"}],\"name\":\"grantVestedTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"tokenGrantsCount\",\"outputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"spendableBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setCanCreateGrants\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"grants\",\"outputs\":[{\"name\":\"granter\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"cliff\",\"type\":\"uint64\"},{\"name\":\"vesting\",\"type\":\"uint64\"},{\"name\":\"start\",\"type\":\"uint64\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"changeController\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_grantId\",\"type\":\"uint256\"}],\"name\":\"tokenGrant\",\"outputs\":[{\"name\":\"granter\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"vested\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint64\"},{\"name\":\"cliff\",\"type\":\"uint64\"},{\"name\":\"vesting\",\"type\":\"uint64\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cloneTokenName\",\"type\":\"string\"},{\"name\":\"_cloneDecimalUnits\",\"type\":\"uint8\"},{\"name\":\"_cloneTokenSymbol\",\"type\":\"string\"},{\"name\":\"_snapshotBlock\",\"type\":\"uint256\"},{\"name\":\"_transfersEnabled\",\"type\":\"bool\"}],\"name\":\"createCloneToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"lastTokenIsTransferableDate\",\"outputs\":[{\"name\":\"date\",\"type\":\"uint64\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parentToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"generateTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"data\",\"type\":\"uint256[]\"}],\"name\":\"multiMint\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transfersEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parentSnapShotBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"time\",\"type\":\"uint64\"}],\"name\":\"transferableTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"destroyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"data\",\"type\":\"uint256[]\"}],\"name\":\"sterilize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transfersEnabled\",\"type\":\"bool\"}],\"name\":\"enableTransfers\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWhitelister\",\"type\":\"address\"}],\"name\":\"changeVestingWhitelister\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenFactory\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"start\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"cliff\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"vesting\",\"type\":\"uint64\"}],\"name\":\"NewTokenGrant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cloneToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_snapshotBlock\",\"type\":\"uint256\"}],\"name\":\"NewCloneToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "606060405260408051908101604052600781527f4d4d545f302e3100000000000000000000000000000000000000000000000000602082015260049080516200004d92916020019062000234565b506014600c5534156200005f57600080fd5b604051602080620029bf833981016040528080519150505b8073bb13e608888e5d30c09b13f89d27631056161b9f6241cfa86040805190810160405280600881526020017f47656e61726f2058000000000000000000000000000000000000000000000000815250600960408051908101604052600381527f474e580000000000000000000000000000000000000000000000000000000000602082015260015b868686868686865b5b60008054600160a060020a03191633600160a060020a03161790555b600b805461010060a860020a031916610100600160a060020a038a160217905560018480516200015a92916020019062000234565b506002805460ff191660ff851617905560038280516200017f92916020019062000234565b5060058054600160a060020a031916600160a060020a0388161790556006859055600b805460ff1916821515179055436007555b5050600f8054600160a060020a03191633600160a060020a039081169190911791829055620001fb965016935060019250506401000000006200020b810262001ee017049050565b5b505050505050505b50620002de565b600160a060020a0382166000908152600e60205260409020805460ff19168215151790555b5050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200027757805160ff1916838001178555620002a7565b82800160010185558215620002a7579182015b82811115620002a75782518255916020019190600101906200028a565b5b50620002b6929150620002ba565b5090565b620002db91905b80821115620002b65760008155600101620002c1565b5090565b90565b6126d180620002ee6000396000f3006060604052361561019a5763ffffffff60e060020a600035041662e1986d811461024357806302a72a4c1461028057806306fdde03146102b1578063095ea7b31461033c5780630f8f8b831461037257806317634514146103a357806318160ddd146103c85780631f9a391c146103ed57806323b872dd146104135780632c71e60a1461044f578063313ce567146104ba5780633cebb823146104e35780634ee2cd7e1461050457806354fd4d5014610538578063600e85b7146105c35780636638c087146106345780636c182e99146106f857806370a082311461073457806380a5400114610765578063827f32c01461079457806395d89b41146107ca578063981b24d0146108555780639a0e4ebb1461087d578063a9059cbb146108ce578063bef97c8714610904578063c5bcc4f11461092b578063cae9ca5114610950578063d347c205146109c9578063d3ce77fe14610a07578063dd62ed3e14610a3d578063e007b33014610a74578063e77772fe14610ac5578063f41e60c514610af4578063f77c479114610b0e578063fb13a70714610b3d575b6102415b6000546101b390600160a060020a0316610b5e565b15156101be57600080fd5b60008054600160a060020a03169063f48c305490349033906040516020015260405160e060020a63ffffffff8516028152600160a060020a0390911660048201526024016020604051808303818588803b151561021a57600080fd5b6125ee5a03f1151561022b57600080fd5b5050505060405180519050151561023e57fe5b5b565b005b341561024e57600080fd5b610241600160a060020a036004351660243567ffffffffffffffff60443581169060643581169060843516610b8b565b005b341561028b57600080fd5b61029f600160a060020a0360043516610dd1565b60405190815260200160405180910390f35b34156102bc57600080fd5b6102c4610df0565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156103015780820151818401525b6020016102e8565b50505050905090810190601f16801561032e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561034757600080fd5b61035e600160a060020a0360043516602435610e8e565b604051901515815260200160405180910390f35b341561037d57600080fd5b61029f600160a060020a0360043516610ff5565b60405190815260200160405180910390f35b34156103ae57600080fd5b61029f611009565b60405190815260200160405180910390f35b34156103d357600080fd5b61029f61100f565b60405190815260200160405180910390f35b34156103f857600080fd5b610241600160a060020a03600435166024351515611020565b005b341561041e57600080fd5b61035e600160a060020a036004358116906024351660443561104b565b604051901515815260200160405180910390f35b341561045a57600080fd5b610471600160a060020a036004351660243561107c565b604051600160a060020a039095168552602085019390935267ffffffffffffffff91821660408086019190915290821660608501529116608083015260a0909101905180910390f35b34156104c557600080fd5b6104cd6110ee565b60405160ff909116815260200160405180910390f35b34156104ee57600080fd5b610241600160a060020a03600435166110f7565b005b341561050f57600080fd5b61029f600160a060020a036004351660243561113f565b60405190815260200160405180910390f35b341561054357600080fd5b6102c4611285565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156103015780820151818401525b6020016102e8565b50505050905090810190601f16801561032e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105ce57600080fd5b6105e5600160a060020a0360043516602435611323565b604051600160a060020a039096168652602086019490945260408086019390935267ffffffffffffffff9182166060860152811660808501529190911660a083015260c0909101905180910390f35b341561063f57600080fd5b6106dc60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803560ff1690602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284375094965050843594602001351515935061142292505050565b604051600160a060020a03909116815260200160405180910390f35b341561070357600080fd5b610717600160a060020a0360043516611653565b60405167ffffffffffffffff909116815260200160405180910390f35b341561073f57600080fd5b61029f600160a060020a03600435166116dd565b60405190815260200160405180910390f35b341561077057600080fd5b6106dc6116f1565b604051600160a060020a03909116815260200160405180910390f35b341561079f57600080fd5b61035e600160a060020a0360043516602435611700565b604051901515815260200160405180910390f35b34156107d557600080fd5b6102c46117cd565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156103015780820151818401525b6020016102e8565b50505050905090810190601f16801561032e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561086057600080fd5b61029f60043561186b565b60405190815260200160405180910390f35b341561088857600080fd5b610241600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284375094965061196395505050505050565b005b34156108d957600080fd5b61035e600160a060020a0360043516602435611a10565b604051901515815260200160405180910390f35b341561090f57600080fd5b61035e611a3f565b604051901515815260200160405180910390f35b341561093657600080fd5b61029f611a48565b60405190815260200160405180910390f35b341561095b57600080fd5b61035e60048035600160a060020a03169060248035919060649060443590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650611a4e95505050505050565b604051901515815260200160405180910390f35b34156109d457600080fd5b61029f600160a060020a036004351667ffffffffffffffff60243516611b62565b60405190815260200160405180910390f35b3415610a1257600080fd5b61035e600160a060020a0360043516602435611c6d565b604051901515815260200160405180910390f35b3415610a4857600080fd5b61029f600160a060020a0360043581169060243516611d34565b60405190815260200160405180910390f35b3415610a7f57600080fd5b6102416004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650611d6195505050505050565b005b3415610ad057600080fd5b6106dc611e0e565b604051600160a060020a03909116815260200160405180910390f35b3415610aff57600080fd5b6102416004351515611e22565b005b3415610b1957600080fd5b6106dc611e50565b604051600160a060020a03909116815260200160405180910390f35b3415610b4857600080fd5b610241600160a060020a0360043516611e5f565b005b600080600160a060020a0383161515610b7a5760009150610b85565b823b90506000811191505b50919050565b610b93612598565b8367ffffffffffffffff168367ffffffffffffffff1610158015610bcb57508267ffffffffffffffff168267ffffffffffffffff1610155b1515610bd657600080fd5b600c54610be287610dd1565b1115610bed57600080fd5b600160a060020a0333166000908152600e6020526040902054610c129060ff16611ed0565b60a06040519081016040908152600160a060020a033381168352602080840189905267ffffffffffffffff808816848601528681166060860152881660808501529089166000908152600d9091522080549192509060018101610c7583826125c6565b916000526020600020906003020160005b5082908151815473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039190911617815560208201518160010155604082015160028201805467ffffffffffffffff191667ffffffffffffffff9290921691909117905560608201518160020160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060808201518160020160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550505050610d59610d548787611a10565b611ed0565b85600160a060020a031633600160a060020a03167f9e12d725ade130ef3f3727e13815b3fcf01a631419ce8142bafb0752a61121e88786868960405193845267ffffffffffffffff9283166020850152908216604080850191909152911660608301526080909101905180910390a35b505050505050565b600160a060020a0381166000908152600d60205260409020545b919050565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e865780601f10610e5b57610100808354040283529160200191610e86565b820191906000526020600020905b815481529060010190602001808311610e6957829003601f168201915b505050505081565b600b5460009060ff161515610ea257600080fd5b811580610ed25750600160a060020a03338116600090815260096020908152604080832093871683529290522054155b1515610edd57600080fd5b600054610ef290600160a060020a0316610b5e565b15610f8a5760008054600160a060020a03169063da682aeb903390869086906040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b1515610f6757600080fd5b6102c65a03f11515610f7857600080fd5b505050604051805190501515610f8a57fe5b5b600160a060020a03338116600081815260096020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60006110018242611b62565b90505b919050565b60075481565b600061101a4361186b565b90505b90565b600f5433600160a060020a0390811691161461103b57600080fd5b6110458282611ee0565b5b5b5050565b6000838261105882610ff5565b81111561106457600080fd5b61106f868686611f09565b92505b5b50509392505050565b600d6020528160005260406000208181548110151561109757fe5b906000526020600020906003020160005b5080546001820154600290920154600160a060020a03909116935090915067ffffffffffffffff80821691680100000000000000008104821691608060020a9091041685565b60025460ff1681565b60005433600160a060020a0390811691161461111257600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b600160a060020a038216600090815260086020526040812054158061119f5750600160a060020a03831660009081526008602052604081208054849290811061118457fe5b906000526020600020900160005b50546001608060020a0316115b1561125557600554600160a060020a03161561124857600554600654600160a060020a0390911690634ee2cd7e9085906111da908690611fa5565b60006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561122657600080fd5b6102c65a03f1151561123757600080fd5b505050604051805190509050610fef565b506000610fef565b610fef565b600160a060020a03831660009081526008602052604090206112779083611fbf565b9050610fef565b5b92915050565b60048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e865780601f10610e5b57610100808354040283529160200191610e86565b820191906000526020600020905b815481529060010190602001808311610e6957829003601f168201915b505050505081565b600160a060020a0382166000908152600d6020526040812080548291829182918291829182918990811061135357fe5b906000526020600020906003020160005b50805460018201546002830154600160a060020a039092169950975067ffffffffffffffff608060020a82048116965080821695506801000000000000000090910416925090506114148160a060405190810160409081528254600160a060020a031682526001830154602083015260029092015467ffffffffffffffff8082169383019390935268010000000000000000810483166060830152608060020a9004909116608082015242612119565b94505b509295509295509295565b60008043841115611431574393505b600b546101009004600160a060020a0316635b7b72c130868a8a8a8960006040516020015260405160e060020a63ffffffff8916028152600160a060020a038716600482019081526024820187905260ff8516606483015282151560a483015260c0604483019081529091608481019060c40187818151815260200191508051906020019080838360005b838110156114d55780820151818401525b6020016114bc565b50505050905090810190601f1680156115025780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b838110156115395780820151818401525b602001611520565b50505050905090810190601f1680156115665780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b151561158a57600080fd5b6102c65a03f1151561159b57600080fd5b5050506040518051915050600160a060020a038116633cebb8233360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b15156115f457600080fd5b6102c65a03f1151561160557600080fd5b50505080600160a060020a03167f086c875b377f900b07ce03575813022f05dd10ed7640b5282cf6d3c3fc352ade8560405190815260200160405180910390a28091505b5095945050505050565b4260008061166084610dd1565b9150600090505b818110156116d557600160a060020a0384166000908152600d6020526040902080546116ca91908390811061169857fe5b906000526020600020906003020160005b506002015468010000000000000000900467ffffffffffffffff1684612169565b92505b600101611667565b5b5050919050565b6000611001824361113f565b90505b919050565b600554600160a060020a031681565b600080548190819033600160a060020a0390811691161461172057600080fd5b61172861100f565b91508382018290101561173757fe5b611744600a858401612198565b61174d856116dd565b90508381018190101561175c57fe5b600160a060020a038516600090815260086020526040902061178090828601612198565b84600160a060020a031660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8660405190815260200160405180910390a3600192505b5b505092915050565b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e865780601f10610e5b57610100808354040283529160200191610e86565b820191906000526020600020905b815481529060010190602001808311610e6957829003601f168201915b505050505081565b600a5460009015806118a4575081600a600081548110151561188957fe5b906000526020600020900160005b50546001608060020a0316115b1561194b57600554600160a060020a03161561193e57600554600654600160a060020a039091169063981b24d0906118dd908590611fa5565b60006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561191c57600080fd5b6102c65a03f1151561192d57600080fd5b505050604051805190509050610deb565b506000610deb565b610deb565b611956600a83611fbf565b9050610deb565b5b919050565b600080548190819033600160a060020a0390811691161461198357600080fd5b600092505b8351831015611a0857600160a060020a038484815181106119a557fe5b90602001906020020151169150740100000000000000000000000000000000000000008484815181106119d457fe5b906020019060200201518115156119e757fe5b0490506119fc610d548383611700565b611ed0565b5b600190920191611988565b5b5b50505050565b60003382611a1d82610ff5565b811115611a2957600080fd5b611a338585612281565b92505b5b505092915050565b600b5460ff1681565b60065481565b6000611a5a8484610e8e565b5083600160a060020a0316638f4ffcb1338530866040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611af45780820151818401525b602001611adb565b50505050905090810190601f168015611b215780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1515611b4257600080fd5b6102c65a03f11515611b5357600080fd5b505050600190505b9392505050565b600080600080611b7186610dd1565b9250821515611b8a57611b83866116dd565b9350611c64565b5060009050805b82811015611c4f57600160a060020a0386166000908152600d602052604090208054611c44918491611c3f919085908110611bc857fe5b906000526020600020906003020160005b5060a060405190810160409081528254600160a060020a031682526001830154602083015260029092015467ffffffffffffffff8082169383019390935268010000000000000000810483166060830152608060020a90049091166080820152886122a9565b6122cb565b91505b600101611b91565b611c61611c5b876116dd565b836122f3565b93505b50505092915050565b600080548190819033600160a060020a03908116911614611c8d57600080fd5b611c9561100f565b915083821015611ca157fe5b611cae600a858403612198565b611cb7856116dd565b905083811015611cc357fe5b600160a060020a0385166000908152600860205260409020611ce790858303612198565b600085600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8660405190815260200160405180910390a3600192505b5b505092915050565b600160a060020a038083166000908152600960209081526040808320938516835292905220545b92915050565b600080548190819033600160a060020a03908116911614611d8157600080fd5b600092505b8351831015611a0857600160a060020a03848481518110611da357fe5b9060200190602002015116915074010000000000000000000000000000000000000000848481518110611dd257fe5b90602001906020020151811515611de557fe5b049050611dfa610d548383611c6d565b611ed0565b5b600190920191611d86565b5b5b50505050565b600b546101009004600160a060020a031681565b60005433600160a060020a03908116911614611e3d57600080fd5b600b805460ff19168215151790555b5b50565b600054600160a060020a031681565b600f5433600160a060020a03908116911614611e7a57600080fd5b600f54611e9190600160a060020a03166000611ee0565b600f805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03838116919091179182905561113b91166001611ee0565b5b5b50565b80151561113b57600080fd5b5b50565b600160a060020a0382166000908152600e60205260409020805460ff19168215151790555b5050565b6000805433600160a060020a03908116911614611f9057600b5460ff161515611f3157600080fd5b600160a060020a038085166000908152600960209081526040808320339094168352929052205482901015611f6257fe5b600160a060020a03808516600090815260096020908152604080832033909416835292905220805483900390555b611f9b84848461230c565b90505b9392505050565b6000818310611fb45781611fb6565b825b90505b92915050565b600080600080858054905060001415611fdb5760009350611c64565b855486906000198101908110611fed57fe5b906000526020600020900160005b50546001608060020a031685106120455785548690600019810190811061201e57fe5b906000526020600020900160005b5054608060020a90046001608060020a03169350611c64565b85600081548110151561205457fe5b906000526020600020900160005b50546001608060020a031685101561207d5760009350611c64565b8554600093506000190191505b828211156120df5760026001838501015b0490508486828154811015156120ad57fe5b906000526020600020900160005b50546001608060020a0316116120d3578092506120da565b6001810391505b61208a565b85838154811015156120ed57fe5b906000526020600020900160005b5054608060020a90046001608060020a031693505b50505092915050565b6000611fb683602001518367ffffffffffffffff16856080015167ffffffffffffffff16866040015167ffffffffffffffff16876060015167ffffffffffffffff166124cf565b90505b92915050565b60008167ffffffffffffffff168367ffffffffffffffff161015611fb45781611fb6565b825b90505b92915050565b8154600090819015806121d5575083544390859060001981019081106121ba57fe5b906000526020600020900160005b50546001608060020a0316105b1561223e57835484906121eb82600183016125f8565b815481106121f557fe5b906000526020600020900160005b5080546001608060020a03858116608060020a024382166fffffffffffffffffffffffffffffffff1990931692909217161781559150611a08565b83548490600019810190811061225057fe5b906000526020600020900160005b5080546001608060020a03808616608060020a02911617815590505b5b50505050565b600b5460009060ff16151561229557600080fd5b611fb633848461230c565b90505b92915050565b6000611fb683602001516122bd8585612119565b6122f3565b90505b92915050565b60008282016122e8848210801590610d545750838210155b611ed0565b8091505b5092915050565b600061230183831115611ed0565b508082035b92915050565b600080808315156123205760019250611072565b600160a060020a0385161580159061234a575030600160a060020a031685600160a060020a031614155b151561235557600080fd5b61235f864361113f565b91508382101561236b57fe5b60005461238090600160a060020a0316610b5e565b156124185760008054600160a060020a031690634a393149908890889088906040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b15156123f557600080fd5b6102c65a03f1151561240657600080fd5b50505060405180519050151561241857fe5b5b600160a060020a038616600090815260086020526040902061243d90858403612198565b612447854361113f565b90508381018190101561245657fe5b600160a060020a038516600090815260086020526040902061247a90828601612198565b84600160a060020a031686600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8660405190815260200160405180910390a3600192505b50509392505050565b600080838610156124e35760009150611649565b8286106124f257869150611649565b6125176125088861250389896122f3565b612527565b61251285886122f3565b612556565b90508091505b5095945050505050565b60008282026122e8841580610d54575083858381151561254357fe5b04145b611ed0565b8091505b5092915050565b60008061256560008411611ed0565b828481151561257057fe5b0490506122e8838581151561258157fe5b06828502018514611ed0565b8091505b5092915050565b60a0604051908101604090815260008083526020830181905290820181905260608201819052608082015290565b8154818355818115116125f2576003028160030283600052602060002091820191016125f29190612622565b5b505050565b8154818355818115116125f2576000838152602090206125f2918101908301612684565b5b505050565b61101d91905b8082111561267d57805473ffffffffffffffffffffffffffffffffffffffff191681556000600182015560028101805477ffffffffffffffffffffffffffffffffffffffffffffffff19169055600301612628565b5090565b90565b61101d91905b8082111561267d576000815560010161268a565b5090565b905600a165627a7a723058201e177e95fc066f168c7417151be7f8f195969d5d07701dade53781d95565a3fb0029000000000000000000000000af5b37a3f0947c5eee60909ef0b60d1caf54b971",
  "constructorArguments": "000000000000000000000000af5b37a3f0947c5eee60909ef0b60d1caf54b971"
}