{
  "address": "0x221535cbced4c264e53373d81b73c29d010832a5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MooToken",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-29\n*/\n\npragma solidity ^0.4.17;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n    function transferOwnership(address newOwner) public onlyOwner returns (bool) {\n        require(newOwner != address(0));\n        require(newOwner != address(this));\n        require(newOwner != owner);  \n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        return true;\n    }\n\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) public constant returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public constant returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n      */\n    function transfer(address _to, uint256 _value) public returns (bool){\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n}\n\n// ************************ new Standard  ERC20 token with increase and decraese approval ***********************\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n    } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}\n//  *************************************************************************************************************\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n\n    bool public mintingFinished = false;\n\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n\n  /**\n  * @dev Function to mint tokens\n  * @param _to The address that will recieve the minted tokens.\n    * @param _amount The amount of tokens to mint.\n    * @return A boolean that indicates if the operation was successful.\n   */\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n        totalSupply = totalSupply.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Transfer(0X0, _to, _amount);\n        return true;\n    }\n\n  /**\n  * @dev Function to stop minting new tokens.\n  * @return True if the operation was successful.\n   */\n    function finishMinting() onlyOwner public returns (bool) {\n        mintingFinished = true;\n        MintFinished();\n        return true;\n    }\n}\n\ncontract MooToken is MintableToken {\n  // Coin Properties\n    string public name = \"MOO token\";\n    string public symbol = \"XMOO\";\n    uint256 public decimals = 18;\n\n    event EmergencyERC20DrainWasCalled(address tokenaddress, uint256 _amount);\n\n  // Special propeties\n    bool public tradingStarted = false;\n\n  /**\n  * @dev modifier that throws if trading has not started yet\n   */\n    modifier hasStartedTrading() {\n        require(tradingStarted);\n        _;\n    }\n\n  /**\n  * @dev Allows the owner to enable the trading. This can not be undone\n  */\n    function startTrading() public onlyOwner returns(bool) {\n        require(!tradingStarted);\n        tradingStarted = true;\n        return true;\n    }\n\n  /**\n  * @dev Allows anyone to transfer the MOO tokens once trading has started\n  * @param _to the recipient address of the tokens.\n  * @param _value number of tokens to be transfered.\n   */\n    function transfer(address _to, uint _value) hasStartedTrading public returns (bool) {\n        return super.transfer(_to, _value);\n    }\n\n  /**\n  * @dev Allows anyone to transfer the MOO tokens once trading has started\n  * @param _from address The address which you want to send tokens from\n  * @param _to address The address which you want to transfer to\n  * @param _value uint the amout of tokens to be transfered\n   */\n    function transferFrom(address _from, address _to, uint _value) hasStartedTrading public returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function emergencyERC20Drain( ERC20 oddToken, uint amount ) public onlyOwner returns(bool){\n        oddToken.transfer(owner, amount);\n        EmergencyERC20DrainWasCalled(oddToken, amount);\n        return true;\n    }\n\n    function isOwner(address _owner) public view returns(bool){\n        if (owner == _owner) {\n            return true;    \n    } else {\n            return false;    \n    } \n    }\n}\n\n\ncontract MooTokenSale is Ownable {\n    using SafeMath for uint256;\n\n  // The token being sold\n    MooToken public token;\n    uint256 public decimals;\n    uint256 public oneCoin;\n\n  // start and end block where investments are allowed \n    uint256 public PRESALE_STARTTIMESTAMP;\n    uint256 public PRESALE_ENDTIMESTAMP;\n\n  // start and end block where investments are allowed \n    uint256 public PUBLICSALE_STARTTIMESTAMP;\n    uint256 public PUBLICSALE_ENDTIMESTAMP;\n\n  // address where funds are collected\n    address public multiSig;\n\n    function setWallet(address _newWallet) public onlyOwner returns (bool) {\n        multiSig = _newWallet;\n        WalletUpdated(_newWallet);\n        return true;\n    } \n\n    uint256 rate; // how many token units a buyer gets per wei\n    uint256 public minContribution = 0.0001 ether;  // minimum contributio to participate in tokensale\n    uint256 public maxContribution = 1000 ether;\n    uint256 public tokensOfTeamAndAdvisors;\n\n  // amount of raised money in wei\n    uint256 public weiRaised;\n\n  // amount of raised tokens\n    uint256 public tokenRaised;\n\n  // maximum amount of tokens being created\n    uint256 public maxTokens;\n\n  // maximum amount of tokens for sale\n    uint256 public tokensForSale;  \n  // maximum amount of tokens for presale\n  // uint256 public tokensForPreSale; \n\n  // number of participants in presale\n    uint256 public numberOfContributors = 0;\n\n  //  for whitelist\n    address public cs;\n  //  for whitelist AND placement\n    address public Admin;\n\n  //  for rate\n    uint public basicRate;\n\n  // for maximum token what one contributor can buy\n    uint public maxTokenCap;\n  // for suspension\n    bool public suspended;\n \n\n    mapping (address => bool) public authorised; // just to annoy the heck out of americans\n    mapping (address => uint) adminCallMintToTeamCount; // count to admin only once can call MintToTeamAndAdvisors\n\n    event TokenPurchase(address indexed purchaser, uint256 amount, uint256 _tokens);\n    event TokenPlaced(address indexed beneficiary, uint256 _tokens);\n    event SaleClosed();\n    event TradingStarted();\n    event Closed();\n    event AdminUpdated(address newAdminAddress);\n    event CsUpdated(address newCSAddress);\n    event EmergencyERC20DrainWasCalled(address tokenaddress, uint256 _amount);\n    event AuthoriseStatusUpdated(address accounts, bool status);\n    event SaleResumed();\n    event SaleSuspended();\n    event WalletUpdated(address newwallet);\n   \n\n    function MooTokenSale() public {\n        PRESALE_STARTTIMESTAMP = 1516896000;\n        // 1516896000 converts to Friday January 26, 2018 00:00:00 (am) in time zone Asia/Singapore (+08)\n        PRESALE_ENDTIMESTAMP = 1522209600;\n        //1522209600 converts to Wednesday March 28, 2018 12:00:00 (pm) in time zone Asia/Singapore (+08)\n        PUBLICSALE_STARTTIMESTAMP = 1522382400;\n        //  1522382400 converts to Friday March 30, 2018 12:00:00 (pm) in time zone Asia/Singapore (+08)\n        PUBLICSALE_ENDTIMESTAMP = 1525060800; \n        // 1525060800 converts to Monday April 30, 2018 12:00:00 (pm) in time zone Asia/Singapore (+08)\n      \n        multiSig = 0x90420B8aef42F856a0AFB4FFBfaA57405FB190f3;\n   \n        token = new MooToken();\n        decimals = token.decimals();\n        oneCoin = 10 ** decimals;\n        maxTokens = 500 * (10**6) * oneCoin;\n        tokensForSale = 200260050 * oneCoin; // 200 260 050\n        basicRate = 1800;\n        rate = basicRate;\n        tokensOfTeamAndAdvisors = 99739950 * oneCoin;  // it was missing the onecoin , 99 739 950\n        maxTokenCap = basicRate * maxContribution * 11/10;\n        suspended = false;\n    }\n\n\n    function currentTime() public constant returns (uint256) {\n        return now;\n    }\n\n    /**\n    * @dev Calculates the rate with bonus in the publis sale\n    */\n    function getCurrentRate() public view returns (uint256) {\n    \n        if (currentTime() <= PRESALE_ENDTIMESTAMP) {\n            return basicRate * 5/4;\n        }\n\n        if (tokenRaised <= 10000000 * oneCoin) {\n            return basicRate * 11/10;\n    } else if (tokenRaised <= 20000000 * oneCoin) {\n        return basicRate * 1075/1000;\n    } else if (tokenRaised <= 30000000 * oneCoin) {\n        return basicRate * 105/100;\n    } else {\n        return basicRate ;\n    }\n    }\n\n\n  // @return true if crowdsale event has ended\n    function hasEnded() public constant returns (bool) {\n        if (currentTime() > PUBLICSALE_ENDTIMESTAMP)\n            return true; // if  the time is over\n        if (tokenRaised >= tokensForSale)\n            return true; // if we reach the tokensForSale \n        return false;\n    }\n\n// Allows admin to suspend the sale.\n    function suspend() external onlyAdmin returns(bool) {\n        if (suspended == true) {\n            return false;\n        }\n        suspended = true;\n        SaleSuspended();\n        return true;\n    }\n\n\n// Allows admin to resume the sale.\n    function resume() external onlyAdmin returns(bool) {\n        if (suspended == false) {\n            return false;\n        }\n        suspended = false;\n        SaleResumed();\n        return true;\n    }\n\n  \n  // @dev throws if person sending is not contract Admin or cs role\n    modifier onlyCSorAdmin() {\n        require((msg.sender == Admin) || (msg.sender==cs));\n        _;\n    }\n    modifier onlyAdmin() {\n        require(msg.sender == Admin);\n        _;\n    }\n\n  /**\n  * @dev throws if person sending is not authorised or sends nothing or we are out of time\n  */\n    modifier onlyAuthorised() {\n        require (authorised[msg.sender]);\n        require ((currentTime() >= PRESALE_STARTTIMESTAMP && currentTime() <= PRESALE_ENDTIMESTAMP ) || (currentTime() >= PUBLICSALE_STARTTIMESTAMP && currentTime() <= PUBLICSALE_ENDTIMESTAMP ));\n        require (!(hasEnded()));\n        require (multiSig != 0x0);\n        require (msg.value > 1 finney);\n        require(!suspended);\n        require(tokensForSale > tokenRaised); // check we are not over the number of tokensForSale\n        _;\n    }\n\n  /**\n  * @dev authorise an account to participate\n  */\n    function authoriseAccount(address whom) onlyCSorAdmin public returns(bool) {\n        require(whom != address(0));\n        require(whom != address(this));\n        authorised[whom] = true;\n        AuthoriseStatusUpdated(whom, true);\n        return true;\n    }\n\n  /**\n  * @dev authorise a lot of accounts in one go\n  */\n    function authoriseManyAccounts(address[] many) onlyCSorAdmin public returns(bool) {\n        require(many.length > 0);  \n        for (uint256 i = 0; i < many.length; i++) {\n            require(many[i] != address(0));\n            require(many[i] != address(this));  \n            authorised[many[i]] = true;\n            AuthoriseStatusUpdated(many[i], true);\n        }\n        return true;            \n    }\n\n  /**\n  * @dev ban an account from participation (default)\n  */\n    function blockAccount(address whom) onlyCSorAdmin public returns(bool){\n        require(whom != address(0));\n        require(whom != address(this));\n        authorised[whom] = false;\n        AuthoriseStatusUpdated(whom, false);\n        return true;\n    }\n\n  /**\n  * @dev set a new CS representative\n  */\n    function setCS(address newCS) onlyOwner public returns (bool){\n        require(newCS != address(0));\n        require(newCS != address(this));\n        require(newCS != owner);  \n        cs = newCS;\n        CsUpdated(newCS);\n        return true;\n    }\n\n  /**\n  * @dev set a new Admin representative\n  */\n    function setAdmin(address newAdmin) onlyOwner public returns (bool) {\n        require(newAdmin != address(0));\n        require(newAdmin != address(this));\n        require(newAdmin != owner);  \n        Admin = newAdmin;\n        AdminUpdated(newAdmin);\n        return true;\n    }\n\n  /**\n  * @dev set a new Rate BE CAREFULL: when we calculate the bonus better if we have'nt remainder \n  */\n    function setBasicRate(uint newRate) onlyAdmin public returns (bool){\n        require(0 < newRate && newRate < 5000);\n        basicRate = newRate;\n        return true;\n    }\n\n    function setMaxTokenCap(uint _newMaxTokenCap) onlyAdmin public returns (bool){\n        require(0 < _newMaxTokenCap && _newMaxTokenCap < tokensForSale);\n        maxTokenCap = _newMaxTokenCap;\n        return true;\n    }\n  \n    function isOwner(address _owner) public view returns(bool){\n        if (owner == _owner) {\n            return true;    \n    } else {\n            return false;    \n    } \n    }\n  \n    function isAdmin(address _admin) public view returns(bool){\n        if (Admin == _admin) {\n            return true;    \n    } else {\n            return false;    \n    } \n    }\n\n    function isCS(address _cs) public view returns(bool){\n        if (cs == _cs) {\n            return true;    \n    } else {\n            return false;    \n    } \n    }\n\n/**\n  * @dev  only Admin can send tokens manually\n  */\n    function placeTokens(address beneficiary, uint256 _tokens) onlyAdmin public returns(bool){\n\n    // *************************************************************************************************************  \n        require(tokenRaised.add(_tokens) <= tokensForSale); // we dont want to overmint ********************************\n    // *************************************************************************************************************\n\n        require(_tokens != 0);\n        require(!hasEnded());\n        if (token.balanceOf(beneficiary) == 0) {\n            numberOfContributors++;\n        }\n        tokenRaised = tokenRaised.add(_tokens); // so we can go slightly over\n        token.mint(beneficiary, _tokens);\n        TokenPlaced(beneficiary, _tokens);\n        return true;\n    }\n\n  // low level token purchase function\n    function buyTokens(address beneficiary, uint256 amount) onlyAuthorised internal returns (bool){\n      \n        rate = getCurrentRate();\n      // check we are in pre sale , bonus 25%\n        if (currentTime() <= PRESALE_ENDTIMESTAMP) {\n            minContribution = 50 ether;\n            maxContribution = 1000 ether;\n    // we are in publicsale bonus depends on the sold out tokens. we set the rate in the setTier\n    } else {\n            minContribution = 0.2 ether;\n            maxContribution = 20 ether;\n        }\n\n    //check minimum and maximum amount\n        require(msg.value >= minContribution);\n        require(msg.value <= maxContribution);\n    \n    // Calculate token amount to be purchased    \n        uint256 tokens = amount.mul(rate);\n   \n   \n    // *************************************************************************************************************\n        require(tokenRaised.add(tokens) <= tokensForSale); //if dont want to overmint ******************************\n    // *************************************************************************************************************\n        require(token.balanceOf(beneficiary) + tokens <= maxTokenCap); // limit of tokens what a buyer can buy *****\n    //  ************************************************************************************************************\n\n\n    // update state\n        weiRaised = weiRaised.add(amount);\n        if (token.balanceOf(beneficiary) == 0) {\n            numberOfContributors++;\n        }\n        tokenRaised = tokenRaised.add(tokens); // so we can go slightly over\n        token.mint(beneficiary, tokens);\n        TokenPurchase(beneficiary, amount, tokens);\n        multiSig.transfer(this.balance); // better in case any other ether ends up here\n        return true;\n    }\n\n  // transfer ownership of the token to the owner of the presale contract\n    function finishSale() public onlyOwner {\n        require(hasEnded());\n    // assign the rest of the 300 M tokens to the reserve\n        uint unassigned;    \n        if(tokensForSale > tokenRaised) {\n            unassigned = tokensForSale.sub(tokenRaised);\n            tokenRaised = tokenRaised.add(unassigned);\n            token.mint(multiSig,unassigned);\n            TokenPlaced(multiSig,unassigned);\n    }\n        SaleClosed();\n        token.startTrading(); \n        TradingStarted();\n    // from now everyone can trade the tokens  and the owner of the tokencontract stay the salecontract\n    }\n \n/**\n*****************************************************************************************\n*****************************************************************************************\n*    SPECIAL PART START\n*****************************************************************************************\n*****************************************************************************************\n  * @dev only Admin can mint once the given amount in the given time\n  * tokensOfTeamAndAdvisors was given by consumer\n  * multiSig was given by consumer\n*****************************************************************************************\n*****************************************************************************************\n */\n    function mintToTeamAndAdvisors() public onlyAdmin {\n        require(hasEnded());\n        require(adminCallMintToTeamCount[msg.sender] == 0); // count to admin only once can call MintToTeamAndAdvisors\n        require(1535644800 <= currentTime() && currentTime() <= 1535731200);  // Admin have 24h to call this function\n      //1535644800 converts to Friday August 31, 2018 00:00:00 (am) in time zone Asia/Singapore (+08)\n      //1535731200 converts to Saturday September 01, 2018 00:00:00 (am) in time zone Asia/Singapore (+08)\n        adminCallMintToTeamCount[msg.sender]++; \n        tokenRaised = tokenRaised.add(tokensOfTeamAndAdvisors);\n        token.mint(multiSig,tokensOfTeamAndAdvisors);\n        TokenPlaced(multiSig, tokensOfTeamAndAdvisors);\n    }\n /**\n*****************************************************************************************\n*****************************************************************************************\n  * @dev only Admin can mint from \"SaleClosed\" to \"Closed\" \n  * _tokens given by client (limit if we reach the maxTokens)\n  * multiSig was given by client\n*****************************************************************************************\n*****************************************************************************************\n */ \n    function afterSaleMinting(uint _tokens) public onlyAdmin {\n        require(hasEnded());\n        uint limit = maxTokens.sub(tokensOfTeamAndAdvisors); \n     // we dont want to mint the reserved tokens for Team and Advisors\n        require(tokenRaised.add(_tokens) <= limit);  \n        tokenRaised = tokenRaised.add(_tokens);\n        token.mint(multiSig,_tokens);\n        TokenPlaced(multiSig, _tokens);\n    }  \n/**\n*****************************************************************************************\n*****************************************************************************************\n  * @dev only Owner can call after the sale\n  * unassigned , all missing tokens will be minted\n  * multiSig was given by client\n  * finish minting and transfer ownership of token\n*****************************************************************************************\n*****************************************************************************************\n */\n    function close() public onlyOwner {\n        require(1535731200 <= currentTime());  // only after the Aug31\n        uint unassigned;\n        if( maxTokens > tokenRaised) {\n            unassigned = maxTokens.sub(tokenRaised);\n            tokenRaised = tokenRaised.add(unassigned);\n            token.mint(multiSig,unassigned);\n            TokenPlaced(multiSig,unassigned);\n            multiSig.transfer(this.balance); // just in case if we have ether in the contarct\n        }\n        token.finishMinting();\n        token.transferOwnership(owner);\n        Closed();\n    }\n/**\n*****************************************************************************************\n*****************************************************************************************\n  * END OF THE SPECIAL PART\n*****************************************************************************************\n*****************************************************************************************\n */\n\n\n  // fallback function can be used to buy tokens\n    function () public payable {\n        buyTokens(msg.sender, msg.value);\n    }\n\n  // emergency if the contarct get ERC20 tokens\n    function emergencyERC20Drain( ERC20 oddToken, uint amount ) public onlyCSorAdmin returns(bool){\n        oddToken.transfer(owner, amount);\n        EmergencyERC20DrainWasCalled(oddToken, amount);\n        return true;\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradingStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oddToken\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyERC20Drain\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenaddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyERC20DrainWasCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60606040526000600360146101000a81548160ff0219169083151502179055506040805190810160405280600981526020017f4d4f4f20746f6b656e0000000000000000000000000000000000000000000000815250600490805190602001906200006c92919062000122565b506040805190810160405280600481526020017f584d4f4f0000000000000000000000000000000000000000000000000000000081525060059080519060200190620000ba92919062000122565b5060126006556000600760006101000a81548160ff02191690831515021790555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001d1565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200016557805160ff191683800117855562000196565b8280016001018555821562000196579182015b828111156200019557825182559160200191906001019062000178565b5b509050620001a59190620001a9565b5090565b620001ce91905b80821115620001ca576000816000905550600101620001b0565b5090565b90565b611c5b80620001e16000396000f300606060405260043610610112576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305d2035b1461011757806306fdde0314610144578063095ea7b3146101d257806318160ddd1461022c57806323b872dd14610255578063293230b8146102ce5780632f54bf6e146102fb578063313ce5671461034c57806340c10f19146103755780635b4f472a146103cf57806366188463146103fc57806370a08231146104565780637d64bcb4146104a35780638da5cb5b146104d057806395d89b4114610525578063a9059cbb146105b3578063d73dd6231461060d578063db0e16f114610667578063dd62ed3e146106c1578063f2fde38b1461072d575b600080fd5b341561012257600080fd5b61012a61077e565b604051808215151515815260200191505060405180910390f35b341561014f57600080fd5b610157610791565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561019757808201518184015260208101905061017c565b50505050905090810190601f1680156101c45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101dd57600080fd5b610212600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061082f565b604051808215151515815260200191505060405180910390f35b341561023757600080fd5b61023f610921565b6040518082815260200191505060405180910390f35b341561026057600080fd5b6102b4600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610927565b604051808215151515815260200191505060405180910390f35b34156102d957600080fd5b6102e1610958565b604051808215151515815260200191505060405180910390f35b341561030657600080fd5b610332600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506109f4565b604051808215151515815260200191505060405180910390f35b341561035757600080fd5b61035f610a5f565b6040518082815260200191505060405180910390f35b341561038057600080fd5b6103b5600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a65565b604051808215151515815260200191505060405180910390f35b34156103da57600080fd5b6103e2610be9565b604051808215151515815260200191505060405180910390f35b341561040757600080fd5b61043c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610bfc565b604051808215151515815260200191505060405180910390f35b341561046157600080fd5b61048d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e8d565b6040518082815260200191505060405180910390f35b34156104ae57600080fd5b6104b6610ed6565b604051808215151515815260200191505060405180910390f35b34156104db57600080fd5b6104e3610f82565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561053057600080fd5b610538610fa8565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561057857808201518184015260208101905061055d565b50505050905090810190601f1680156105a55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105be57600080fd5b6105f3600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611046565b604051808215151515815260200191505060405180910390f35b341561061857600080fd5b61064d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611075565b604051808215151515815260200191505060405180910390f35b341561067257600080fd5b6106a7600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611271565b604051808215151515815260200191505060405180910390f35b34156106cc57600080fd5b610717600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061141f565b6040518082815260200191505060405180910390f35b341561073857600080fd5b610764600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506114a6565b604051808215151515815260200191505060405180910390f35b600360149054906101000a900460ff1681565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108275780601f106107fc57610100808354040283529160200191610827565b820191906000526020600020905b81548152906001019060200180831161080a57829003601f168201915b505050505081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b6000600760009054906101000a900460ff16151561094457600080fd5b61094f84848461169e565b90509392505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109b657600080fd5b600760009054906101000a900460ff161515156109d257600080fd5b6001600760006101000a81548160ff0219169083151502179055506001905090565b60008173ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610a555760019050610a5a565b600090505b919050565b60065481565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ac357600080fd5b600360149054906101000a900460ff16151515610adf57600080fd5b610af482600054611a5d90919063ffffffff16565b600081905550610b4c82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a5d90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600760009054906101000a900460ff1681565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610d0d576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610da1565b610d208382611a7b90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f3457600080fd5b6001600360146101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60058054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561103e5780601f106110135761010080835404028352916020019161103e565b820191906000526020600020905b81548152906001019060200180831161102157829003601f168201915b505050505081565b6000600760009054906101000a900460ff16151561106357600080fd5b61106d8383611a94565b905092915050565b600061110682600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a5d90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112cf57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561139357600080fd5b5af115156113a057600080fd5b50505060405180519050507ed79dd1508b6551d10dbaad93f71f714a8657e83f7424b30de42c62f4efa6c78383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a16001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561150457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561154057600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561157b57600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156115d857600080fd5b8173ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a381600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156116db57600080fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561172957600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156117b457600080fd5b61180682600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a7b90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061189b82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a5d90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061196d82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a7b90919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b6000808284019050838110151515611a7157fe5b8091505092915050565b6000828211151515611a8957fe5b818303905092915050565b6000611ae882600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a7b90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611b7d82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a5d90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050929150505600a165627a7a7230582036507f874bdd6fd9a5e2ef9c7330993480058a7194f1b7a38ab6b2ae5e16c33c0029"
}