{
  "address": "0x3c55ed8d060469a9cc6e7299c54767c0f39c2d70",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "OnePerfectCoin",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-05\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping(address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account)\n    internal\n    view\n    returns (bool)\n    {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n        // Solidity only automatically asserts when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ncontract MinterRole {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private minters;\n\n    constructor() public {\n        minters.add(msg.sender);\n    }\n\n    modifier onlyMinter() {\n        require(isMinter(msg.sender));\n        _;\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return minters.has(account);\n    }\n\n    function addMinter(address account) public onlyMinter {\n        minters.add(account);\n        emit MinterAdded(account);\n    }\n\n    function renounceMinter() public {\n        minters.remove(msg.sender);\n    }\n\n    function _removeMinter(address account) internal {\n        minters.remove(account);\n        emit MinterRemoved(account);\n    }\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender)\n    external view returns (uint256);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value)\n    external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(\n        address owner,\n        address spender\n    )\n    public\n    view\n    returns (uint256)\n    {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n        require(value <= _balances[msg.sender]);\n        require(to != address(0));\n\n        _balances[msg.sender] = _balances[msg.sender].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n    public\n    returns (bool)\n    {\n        require(value <= _balances[from]);\n        require(value <= _allowed[from][msg.sender]);\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        emit Transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(\n        address spender,\n        uint256 addedValue\n    )\n    public\n    returns (bool)\n    {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = (\n        _allowed[msg.sender][spender].add(addedValue));\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(\n        address spender,\n        uint256 subtractedValue\n    )\n    public\n    returns (bool)\n    {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = (\n        _allowed[msg.sender][spender].sub(subtractedValue));\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param amount The amount that will be created.\n     */\n    function _mint(address account, uint256 amount) internal {\n        require(account != 0);\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param amount The amount that will be burnt.\n     */\n    function _burn(address account, uint256 amount) internal {\n        require(account != 0);\n        require(amount <= _balances[account]);\n\n        _totalSupply = _totalSupply.sub(amount);\n        _balances[account] = _balances[account].sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * @param account The account whose tokens will be burnt.\n     * @param amount The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 amount) internal {\n        require(amount <= _allowed[account][msg.sender]);\n\n        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n        // this function needs to emit an event with the updated approval.\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n            amount);\n        _burn(account, amount);\n    }\n}\n/**\n * @title ERC20Mintable\n * @dev ERC20 minting logic\n */\ncontract ERC20Mintable is ERC20, MinterRole {\n    event MintingFinished();\n\n    bool private _mintingFinished = false;\n\n    modifier onlyBeforeMintingFinished() {\n        require(!_mintingFinished);\n        _;\n    }\n\n    /**\n     * @return true if the minting is finished.\n     */\n    function mintingFinished() public view returns (bool) {\n        return _mintingFinished;\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param to The address that will receive the minted tokens.\n     * @param amount The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(\n        address to,\n        uint256 amount\n    )\n    public\n    onlyMinter\n    onlyBeforeMintingFinished\n    returns (bool)\n    {\n        _mint(to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Function to stop minting new tokens.\n     * @return True if the operation was successful.\n     */\n    function finishMinting()\n    public\n    onlyMinter\n    onlyBeforeMintingFinished\n    returns (bool)\n    {\n        _mintingFinished = true;\n        emit MintingFinished();\n        return true;\n    }\n}\n\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract ERC20Burnable is ERC20 {\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param value The amount of token to be burned.\n     */\n    function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n     * @param from address The address which you want to send tokens from\n     * @param value uint256 The amount of token to be burned\n     */\n    function burnFrom(address from, uint256 value) public {\n        _burnFrom(from, value);\n    }\n\n    /**\n     * @dev Overrides ERC20._burn in order for burn and burnFrom to emit\n     * an additional Burn event.\n     */\n    function _burn(address who, uint256 value) internal {\n        super._burn(who, value);\n    }\n}\n\n\n/**\n * @title SimpleToken\n * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\n * Note they can later distribute these tokens as they wish using `transfer` and other\n * `ERC20` functions.\n */\ncontract OnePerfectCoin is ERC20Mintable, ERC20Burnable {\n\n    string public constant name = \"One Perfect Coin\";\n    string public constant symbol = \"OPC\";\n    uint8 public constant decimals = 18;\n\n    uint256 public constant INITIAL_SUPPLY = 20000000000 * (10 ** uint256(decimals));\n\n    /**\n     * @dev Constructor that gives msg.sender all of existing tokens.\n     */\n    constructor() public {\n        _mint(msg.sender, INITIAL_SUPPLY);\n    }\n\n}",
  "bytecode": "60806040526004805460ff1916905534801561001a57600080fd5b50610033600333640100000000610b3861005782021704565b610052336b409f9cbc7c4a04c220000000640100000000610091810204565b610162565b600160a060020a038116151561006c57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b600160a060020a03821615156100a657600080fd5b6002546100c090826401000000006109eb61014982021704565b600255600160a060020a0382166000908152602081905260409020546100f390826401000000006109eb61014982021704565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008282018381101561015b57600080fd5b9392505050565b610ce8806101716000396000f3006080604052600436106101115763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461011657806306fdde031461013f578063095ea7b3146101c957806318160ddd146101ed57806323b872dd146102145780632ff2e9dc1461023e578063313ce56714610253578063395093511461027e57806340c10f19146102a257806342966c68146102c657806370a08231146102e057806379cc6790146103015780637d64bcb41461032557806395d89b411461033a578063983b2d561461034f5780639865027514610370578063a457c2d714610385578063a9059cbb146103a9578063aa271e1a146103cd578063dd62ed3e146103ee575b600080fd5b34801561012257600080fd5b5061012b610415565b604080519115158252519081900360200190f35b34801561014b57600080fd5b5061015461041e565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561018e578181015183820152602001610176565b50505050905090810190601f1680156101bb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101d557600080fd5b5061012b600160a060020a0360043516602435610455565b3480156101f957600080fd5b506102026104d3565b60408051918252519081900360200190f35b34801561022057600080fd5b5061012b600160a060020a03600435811690602435166044356104d9565b34801561024a57600080fd5b5061020261063c565b34801561025f57600080fd5b5061026861064c565b6040805160ff9092168252519081900360200190f35b34801561028a57600080fd5b5061012b600160a060020a0360043516602435610651565b3480156102ae57600080fd5b5061012b600160a060020a0360043516602435610701565b3480156102d257600080fd5b506102de60043561073a565b005b3480156102ec57600080fd5b50610202600160a060020a0360043516610747565b34801561030d57600080fd5b506102de600160a060020a0360043516602435610762565b34801561033157600080fd5b5061012b610770565b34801561034657600080fd5b506101546107d2565b34801561035b57600080fd5b506102de600160a060020a0360043516610809565b34801561037c57600080fd5b506102de610865565b34801561039157600080fd5b5061012b600160a060020a0360043516602435610878565b3480156103b557600080fd5b5061012b600160a060020a03600435166024356108c3565b3480156103d957600080fd5b5061012b600160a060020a0360043516610990565b3480156103fa57600080fd5b50610202600160a060020a03600435811690602435166109a9565b60045460ff1690565b60408051808201909152601081527f4f6e65205065726665637420436f696e00000000000000000000000000000000602082015281565b6000600160a060020a038316151561046c57600080fd5b336000818152600160209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60025490565b600160a060020a0383166000908152602081905260408120548211156104fe57600080fd5b600160a060020a038416600090815260016020908152604080832033845290915290205482111561052e57600080fd5b600160a060020a038316151561054357600080fd5b600160a060020a03841660009081526020819052604090205461056c908363ffffffff6109d416565b600160a060020a0380861660009081526020819052604080822093909355908516815220546105a1908363ffffffff6109eb16565b600160a060020a038085166000908152602081815260408083209490945591871681526001825282812033825290915220546105e3908363ffffffff6109d416565b600160a060020a0380861660008181526001602090815260408083203384528252918290209490945580518681529051928716939192600080516020610c9d833981519152929181900390910190a35060019392505050565b6b409f9cbc7c4a04c22000000081565b601281565b6000600160a060020a038316151561066857600080fd5b336000908152600160209081526040808320600160a060020a038716845290915290205461069c908363ffffffff6109eb16565b336000818152600160209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600061070c33610990565b151561071757600080fd5b60045460ff161561072757600080fd5b6107318383610a04565b50600192915050565b6107443382610a9c565b50565b600160a060020a031660009081526020819052604090205490565b61076c8282610aa6565b5050565b600061077b33610990565b151561078657600080fd5b60045460ff161561079657600080fd5b6004805460ff191660011790556040517fb828d9b5c78095deeeeff2eca2e5d4fe046ce3feb4c99702624a3fd384ad2dbc90600090a150600190565b60408051808201909152600381527f4f50430000000000000000000000000000000000000000000000000000000000602082015281565b61081233610990565b151561081d57600080fd5b61082e60038263ffffffff610b3816565b604051600160a060020a038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b61087660033363ffffffff610b7216565b565b6000600160a060020a038316151561088f57600080fd5b336000908152600160209081526040808320600160a060020a038716845290915290205461069c908363ffffffff6109d416565b336000908152602081905260408120548211156108df57600080fd5b600160a060020a03831615156108f457600080fd5b33600090815260208190526040902054610914908363ffffffff6109d416565b3360009081526020819052604080822092909255600160a060020a03851681522054610946908363ffffffff6109eb16565b600160a060020a03841660008181526020818152604091829020939093558051858152905191923392600080516020610c9d8339815191529281900390910190a350600192915050565b60006109a360038363ffffffff610ba916565b92915050565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b600080838311156109e457600080fd5b5050900390565b6000828201838110156109fd57600080fd5b9392505050565b600160a060020a0382161515610a1957600080fd5b600254610a2c908263ffffffff6109eb16565b600255600160a060020a038216600090815260208190526040902054610a58908263ffffffff6109eb16565b600160a060020a038316600081815260208181526040808320949094558351858152935192939192600080516020610c9d8339815191529281900390910190a35050565b61076c8282610be0565b600160a060020a0382166000908152600160209081526040808320338452909152902054811115610ad657600080fd5b600160a060020a0382166000908152600160209081526040808320338452909152902054610b0a908263ffffffff6109d416565b600160a060020a038316600090815260016020908152604080832033845290915290205561076c8282610a9c565b600160a060020a0381161515610b4d57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b600160a060020a0381161515610b8757600080fd5b600160a060020a0316600090815260209190915260409020805460ff19169055565b6000600160a060020a0382161515610bc057600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b600160a060020a0382161515610bf557600080fd5b600160a060020a038216600090815260208190526040902054811115610c1a57600080fd5b600254610c2d908263ffffffff6109d416565b600255600160a060020a038216600090815260208190526040902054610c59908263ffffffff6109d416565b600160a060020a03831660008181526020818152604080832094909455835185815293519193600080516020610c9d833981519152929081900390910190a350505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a7230582075471f5ae8fcd36f5d7cd26c3654f9edfd9750c06191251c7cccda04beb2dbd90029"
}