{
  "address": "0x6bec54e4fea5d541fb14de96993b8e11d81159b2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ProdToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-14\n*/\n\n// our mirrors:\n// ftec.io\n// ftec.ai \n// our official Telegram group:\n// t.me/FTECofficial\n\npragma solidity ^0.4.18;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract MultiOwnable {\n\n    mapping (address => bool) public isOwner;\n    address[] public ownerHistory;\n\n    event OwnerAddedEvent(address indexed _newOwner);\n    event OwnerRemovedEvent(address indexed _oldOwner);\n\n    function MultiOwnable() public {\n        // Add default owner\n        address owner = msg.sender;\n        ownerHistory.push(owner);\n        isOwner[owner] = true;\n    }\n\n    modifier onlyOwner() {\n        require(isOwner[msg.sender]);\n        _;\n    }\n    \n    function ownerHistoryCount() public view returns (uint) {\n        return ownerHistory.length;\n    }\n\n    /** Add extra owner. */\n    function addOwner(address owner) onlyOwner public {\n        require(owner != address(0));\n        require(!isOwner[owner]);\n        ownerHistory.push(owner);\n        isOwner[owner] = true;\n        OwnerAddedEvent(owner);\n    }\n\n    /** Remove extra owner. */\n    function removeOwner(address owner) onlyOwner public {\n        require(isOwner[owner]);\n        isOwner[owner] = false;\n        OwnerRemovedEvent(owner);\n    }\n}\n\ncontract ERC20 {\n\n    uint256 public totalSupply;\n\n    function balanceOf(address _owner) public view returns (uint256 balance);\n\n    function transfer(address _to, uint256 _value) public returns (bool success);\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n    function approve(address _spender, uint256 _value) public returns (bool success);\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    \n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract StandardToken is ERC20 {\n    \n    using SafeMath for uint;\n\n    mapping(address => uint256) balances;\n    \n    mapping(address => mapping(address => uint256)) allowed;\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        \n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\n    /// @param _from Address from where tokens are withdrawn.\n    /// @param _to Address to where tokens are sent.\n    /// @param _value Number of tokens to transfer.\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        \n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /// @dev Sets approved amount of tokens for spender. Returns success.\n    /// @param _spender Address of allowed account.\n    /// @param _value Number of approved tokens.\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /// @dev Returns number of allowed tokens for given address.\n    /// @param _owner Address of token owner.\n    /// @param _spender Address of token spender.\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n}\n\ncontract CommonToken is StandardToken, MultiOwnable {\n    \n    string public constant name   = 'FTEC';\n    string public constant symbol = 'FTEC';\n    uint8 public constant decimals = 18;\n    \n    uint256 public saleLimit;   // 85% of tokens for sale.\n    uint256 public teamTokens;  // 7% of tokens goes to the team and will be locked for 1 year.\n    // 8% of the rest tokens will be used for bounty, advisors, and airdrops.\n    \n    // 7% of team tokens will be locked at this address for 1 year.\n    address public teamWallet; // Team address.\n    \n    uint public unlockTeamTokensTime = now + 1 years;\n\n    // The main account that holds all tokens at the beginning and during tokensale.\n    address public seller; // Seller address (main holder of tokens)\n\n    uint256 public tokensSold; // (e18) Number of tokens sold through all tiers or tokensales.\n    uint256 public totalSales; // Total number of sales (including external sales) made through all tiers or tokensales.\n\n    // Lock the transfer functions during tokensales to prevent price speculations.\n    bool public locked = true;\n    \n    event SellEvent(address indexed _seller, address indexed _buyer, uint256 _value);\n    event ChangeSellerEvent(address indexed _oldSeller, address indexed _newSeller);\n    event Burn(address indexed _burner, uint256 _value);\n    event Unlock();\n\n    function CommonToken(\n        address _seller,\n        address _teamWallet\n    ) MultiOwnable() public {\n        \n        totalSupply = 998400000 ether;\n        saleLimit   = 848640000 ether;\n        teamTokens  =  69888000 ether;\n\n        seller = _seller;\n        teamWallet = _teamWallet;\n\n        uint sellerTokens = totalSupply - teamTokens;\n        balances[seller] = sellerTokens;\n        Transfer(0x0, seller, sellerTokens);\n        \n        balances[teamWallet] = teamTokens;\n        Transfer(0x0, teamWallet, teamTokens);\n    }\n    \n    modifier ifUnlocked(address _from) {\n        require(!locked);\n        \n        // If requested a transfer from the team wallet:\n        if (_from == teamWallet) {\n            require(now >= unlockTeamTokensTime);\n        }\n        \n        _;\n    }\n    \n    /** Can be called once by super owner. */\n    function unlock() onlyOwner public {\n        require(locked);\n        locked = false;\n        Unlock();\n    }\n\n    /**\n     * An address can become a new seller only in case it has no tokens.\n     * This is required to prevent stealing of tokens  from newSeller via \n     * 2 calls of this function.\n     */\n    function changeSeller(address newSeller) onlyOwner public returns (bool) {\n        require(newSeller != address(0));\n        require(seller != newSeller);\n        \n        // To prevent stealing of tokens from newSeller via 2 calls of changeSeller:\n        require(balances[newSeller] == 0);\n\n        address oldSeller = seller;\n        uint256 unsoldTokens = balances[oldSeller];\n        balances[oldSeller] = 0;\n        balances[newSeller] = unsoldTokens;\n        Transfer(oldSeller, newSeller, unsoldTokens);\n\n        seller = newSeller;\n        ChangeSellerEvent(oldSeller, newSeller);\n        return true;\n    }\n\n    /**\n     * User-friendly alternative to sell() function.\n     */\n    function sellNoDecimals(address _to, uint256 _value) public returns (bool) {\n        return sell(_to, _value * 1e18);\n    }\n\n    function sell(address _to, uint256 _value) onlyOwner public returns (bool) {\n\n        // Check that we are not out of limit and still can sell tokens:\n        require(tokensSold.add(_value) <= saleLimit);\n\n        require(_to != address(0));\n        require(_value > 0);\n        require(_value <= balances[seller]);\n\n        balances[seller] = balances[seller].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(seller, _to, _value);\n\n        totalSales++;\n        tokensSold = tokensSold.add(_value);\n        SellEvent(seller, _to, _value);\n        return true;\n    }\n    \n    /**\n     * Until all tokens are sold, tokens can be transfered to/from owner's accounts.\n     */\n    function transfer(address _to, uint256 _value) ifUnlocked(msg.sender) public returns (bool) {\n        return super.transfer(_to, _value);\n    }\n\n    /**\n     * Until all tokens are sold, tokens can be transfered to/from owner's accounts.\n     */\n    function transferFrom(address _from, address _to, uint256 _value) ifUnlocked(_from) public returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function burn(uint256 _value) public returns (bool) {\n        require(_value > 0);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Transfer(msg.sender, 0x0, _value);\n        Burn(msg.sender, _value);\n        return true;\n    }\n}\n\ncontract ProdToken is CommonToken {\n    function ProdToken() CommonToken(\n        0x292FDFdD7E2967fc0251e35A2eF6CBA3F312dAd7, \n        0x5f448809De9e2bBe3120005D94e4D7C0D84d3710  \n    ) public {}\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerHistoryCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerHistory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSales\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sellNoDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlockTeamTokensTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSeller\",\"type\":\"address\"}],\"name\":\"changeSeller\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"SellEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_oldSeller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newSeller\",\"type\":\"address\"}],\"name\":\"ChangeSellerEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerAddedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_oldOwner\",\"type\":\"address\"}],\"name\":\"OwnerRemovedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60606040526301e1338042016008556001600c60006101000a81548160ff02191690831515021790555034156200003557600080fd5b73292fdfdd7e2967fc0251e35a2ef6cba3f312dad7735f448809de9e2bbe3120005d94e4d7c0d84d3710600080339050600480548060010182816200007b9190620003a3565b9160005260206000209001600083909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550506b0339db6c73526b8d800000006000819055506b02bdfa82953941d1e00000006005819055506a39cf5c12500268a000000060068190555082600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506006546000540390508060016000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a360065460016000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6006546040518082815260200191505060405180910390a3505050620003fa565b815481835581811511620003cd57818360005260206000209182019101620003cc9190620003d2565b5b505050565b620003f791905b80821115620003f3576000816000905550600101620003d9565b5090565b90565b611f7d806200040a6000396000f30060606040526004361061015f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461016457806308551a53146101f2578063095ea7b314610247578063173825d9146102a157806318160ddd146102da57806323b872dd146103035780632f54bf6e1461037c578063313ce567146103cd57806337034853146103fc57806342966c6814610425578063461fc09014610460578063518ab2a8146104c357806359927044146104ec5780636605ff66146105415780636c197ff51461056a5780637065cb48146105c457806370a08231146105fd5780637c9473f61461064a5780637e26639f146106a457806395d89b41146106cd578063a69df4b51461075b578063a9059cbb14610770578063ba6c6490146107ca578063c3e3c7bc146107f3578063cd3a376a1461081c578063cf3090121461086d578063dd62ed3e1461089a575b600080fd5b341561016f57600080fd5b610177610906565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101b757808201518184015260208101905061019c565b50505050905090810190601f1680156101e45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101fd57600080fd5b61020561093f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561025257600080fd5b610287600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610965565b604051808215151515815260200191505060405180910390f35b34156102ac57600080fd5b6102d8600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610a57565b005b34156102e557600080fd5b6102ed610ba5565b6040518082815260200191505060405180910390f35b341561030e57600080fd5b610362600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610bab565b604051808215151515815260200191505060405180910390f35b341561038757600080fd5b6103b3600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c47565b604051808215151515815260200191505060405180910390f35b34156103d857600080fd5b6103e0610c67565b604051808260ff1660ff16815260200191505060405180910390f35b341561040757600080fd5b61040f610c6c565b6040518082815260200191505060405180910390f35b341561043057600080fd5b6104466004808035906020019091905050610c79565b604051808215151515815260200191505060405180910390f35b341561046b57600080fd5b6104816004808035906020019091905050610de0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156104ce57600080fd5b6104d6610e1f565b6040518082815260200191505060405180910390f35b34156104f757600080fd5b6104ff610e25565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561054c57600080fd5b610554610e4b565b6040518082815260200191505060405180910390f35b341561057557600080fd5b6105aa600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610e51565b604051808215151515815260200191505060405180910390f35b34156105cf57600080fd5b6105fb600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061123e565b005b341561060857600080fd5b610634600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061142c565b6040518082815260200191505060405180910390f35b341561065557600080fd5b61068a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611475565b604051808215151515815260200191505060405180910390f35b34156106af57600080fd5b6106b7611493565b6040518082815260200191505060405180910390f35b34156106d857600080fd5b6106e0611499565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610720578082015181840152602081019050610705565b50505050905090810190601f16801561074d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561076657600080fd5b61076e6114d2565b005b341561077b57600080fd5b6107b0600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061158e565b604051808215151515815260200191505060405180910390f35b34156107d557600080fd5b6107dd611628565b6040518082815260200191505060405180910390f35b34156107fe57600080fd5b61080661162e565b6040518082815260200191505060405180910390f35b341561082757600080fd5b610853600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611634565b604051808215151515815260200191505060405180910390f35b341561087857600080fd5b610880611973565b604051808215151515815260200191505060405180910390f35b34156108a557600080fd5b6108f0600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611986565b6040518082815260200191505060405180910390f35b6040805190810160405280600481526020017f465445430000000000000000000000000000000000000000000000000000000081525081565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610aaf57600080fd5b600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610b0757600080fd5b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167f6740775dd30bf47d42458b7044f4a4b0a275934f8a4f9269c8af6ab00b3a1e4560405160405180910390a250565b60005481565b600083600c60009054906101000a900460ff16151515610bca57600080fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c32576008544210151515610c3157600080fd5b5b610c3d858585611a0d565b9150509392505050565b60036020528060005260406000206000915054906101000a900460ff1681565b601281565b6000600480549050905090565b60008082111515610c8957600080fd5b610cdb82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611cf390919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d3382600054611cf390919063ffffffff16565b60008190555060003373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a33373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a260019050919050565b600481815481101515610def57fe5b90600052602060002090016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a5481565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b5481565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610eab57600080fd5b600554610ec383600a54611d0c90919063ffffffff16565b11151515610ed057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610f0c57600080fd5b600082111515610f1b57600080fd5b60016000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610f8b57600080fd5b610fff8260016000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611cf390919063ffffffff16565b60016000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506110b682600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d0c90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff16600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600b600081548092919060010191905055506111a782600a54611d0c90919063ffffffff16565b600a819055508273ffffffffffffffffffffffffffffffffffffffff16600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f0b3929429b6ca2aa942889a74e3f9ef00786badc6df639433c7e6b8452f794f4846040518082815260200191505060405180910390a36001905092915050565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561129657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156112d257600080fd5b600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561132b57600080fd5b6004805480600101828161133f9190611f00565b9160005260206000209001600083909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167f0775e4f247a7723929d271ccf476b51fb4284053cb3fd6cf3400228a9c02dbb860405160405180910390a250565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600061148b83670de0b6b3a76400008402610e51565b905092915050565b60055481565b6040805190810160405280600481526020017f465445430000000000000000000000000000000000000000000000000000000081525081565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561152a57600080fd5b600c60009054906101000a900460ff16151561154557600080fd5b6000600c60006101000a81548160ff0219169083151502179055507f70e3fffea7bbb557facdee48ed7f7af5179030adef9ad0c876df039a718f359e60405160405180910390a1565b600033600c60009054906101000a900460ff161515156115ad57600080fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561161557600854421015151561161457600080fd5b5b61161f8484611d2a565b91505092915050565b60085481565b60065481565b6000806000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561169157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156116cd57600080fd5b8373ffffffffffffffffffffffffffffffffffffffff16600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561172a57600080fd5b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414151561177857600080fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a383600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fad973c8ce253a4b476e472c552af0ea70aa2fb722d93b5871dfa8a77306a695b60405160405180910390a3600192505050919050565b600c60009054906101000a900460ff1681565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611a4a57600080fd5b611a9c82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611cf390919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611b3182600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d0c90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611c0382600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611cf390919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b6000828211151515611d0157fe5b818303905092915050565b6000808284019050838110151515611d2057fe5b8091505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611d6757600080fd5b611db982600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611cf390919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611e4e82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d0c90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b815481835581811511611f2757818360005260206000209182019101611f269190611f2c565b5b505050565b611f4e91905b80821115611f4a576000816000905550600101611f32565b5090565b905600a165627a7a723058205b174e92fc5e0411646c4226ab52af9c5091f6943e65ed9b870e641735782c6d0029"
}