{
  "address": "0xc84a9ae241c2a214fe0e6b236bf50a638f614bcc",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ThisToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-01\n*/\n\npragma solidity ^0.4.13;\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract ParticipantToken is StandardToken, Pausable {\n  uint16 public totalParticipants = 0;\n  mapping(address => bool) internal participants;\n\n  modifier onlyParticipant() {\n    require(isParticipant(msg.sender));\n    _;\n  }\n\n  constructor() public {\n    addParticipant(owner);\n  }\n  \n  function transfer(address _to, uint256 _value) public onlyParticipant whenNotPaused returns (bool) {\n    require(isParticipant(_to));\n    \n    super.transfer(_to, _value);\n  }\n  \n  function transferFrom(address _from, address _to, uint256 _value) public onlyParticipant whenNotPaused returns (bool) {\n    require(isParticipant(_from));\n    require(isParticipant(_to));\n    \n    super.transferFrom(_from, _to, _value);\n  }\n  \n  function isParticipant(address _address) public view returns (bool) {\n    return participants[_address] == true;\n  }\n  \n  function addParticipant(address _address) public onlyOwner whenNotPaused {\n    require(isParticipant(_address) == false);\n    \n    participants[_address] = true;\n    totalParticipants++;\n  }\n  \n  function removeParticipant(address _address) public onlyOwner whenNotPaused {\n    require(isParticipant(_address));\n    require(balances[_address] == 0);\n    \n    participants[_address] = false;\n    totalParticipants--;\n  }\n}\n\ncontract DistributionToken is ParticipantToken {\n  uint256 public tokenDistributionDuration = 30 days;\n  uint256 public currentDistributionAmount;\n  uint256 public tokenDistributionStartTime;\n  uint256 public tokenDistributionEndTime;\n  address public tokenDistributionPool;\n  \n  mapping(address => uint256) private unclaimedTokens;\n  mapping(address => uint256) private lastUnclaimedTokenUpdates;\n  \n  event TokenDistribution(address participant, uint256 value);\n  \n  constructor() public {\n    tokenDistributionPool = owner;\n  }\n  \n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require((_to != tokenDistributionPool && msg.sender != tokenDistributionPool) || now >= tokenDistributionEndTime);\n    \n    super.transfer(_to, _value);\n  }\n  \n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require((_to != tokenDistributionPool && _from != tokenDistributionPool) || now >= tokenDistributionEndTime);\n    \n    super.transferFrom(_from, _to, _value);\n  }\n  \n  function claimTokens() public onlyParticipant whenNotPaused returns (bool) {\n    require(tokenDistributionEndTime > 0 && now < tokenDistributionEndTime);\n    require(msg.sender != tokenDistributionPool);\n    require(lastUnclaimedTokenUpdates[msg.sender] < tokenDistributionStartTime);\n    \n    unclaimedTokens[msg.sender] = calcClaimableTokens();\n    lastUnclaimedTokenUpdates[msg.sender] = now;\n    \n    uint256 value = unclaimedTokens[msg.sender];\n    unclaimedTokens[msg.sender] = 0;\n    \n    balances[tokenDistributionPool] = balances[tokenDistributionPool].sub(value);\n    balances[msg.sender] = balances[msg.sender].add(value);\n    emit TokenDistribution(msg.sender, value);\n    return true;\n  }\n  \n  function claimableTokens() public view onlyParticipant returns (uint256) {\n    if (lastUnclaimedTokenUpdates[msg.sender] >= tokenDistributionStartTime) {\n      return unclaimedTokens[msg.sender];\n    }\n    \n    return calcClaimableTokens();\n  }\n  \n  function setTokenDistributionPool(address _tokenDistributionPool) public onlyOwner whenNotPaused returns (bool) {\n    require(tokenDistributionEndTime < now);\n    require(isParticipant(_tokenDistributionPool));\n    \n    tokenDistributionPool = _tokenDistributionPool;\n    return true;\n  }\n  \n  function startTokenDistribution() public onlyOwner whenNotPaused returns(bool) {\n    require(tokenDistributionEndTime < now);\n    require(balanceOf(tokenDistributionPool) > 0);\n    \n    currentDistributionAmount = balanceOf(tokenDistributionPool);\n    tokenDistributionEndTime = now.add(tokenDistributionDuration);\n    tokenDistributionStartTime = now;\n    return true;\n  }\n\n  function calcClaimableTokens() private view onlyParticipant returns(uint256) {\n    return (currentDistributionAmount.mul(balanceOf(msg.sender))).div(totalSupply_);\n  }\n}\n\ncontract DividendToken is DistributionToken {\n  uint256 public dividendDistributionDuration = 30 days;\n  uint256 public currentDividendAmount;\n  uint256 public dividendDistributionStartTime;\n  uint256 public dividendDistributionEndTime;\n  address public dividendDistributionPool;\n  \n  mapping(address => uint256) private unclaimedDividends;\n  mapping(address => uint256) private lastUnclaimedDividendUpdates;\n  mapping(address => uint256) private unclaimedOCDividends;\n  mapping(address => uint256) private lastUnclaimedOCDividendUpdates;\n  \n  event DividendDistribution(address participant, uint256 value);\n  event OCDividendClaim(address participant, uint256 value);\n  event OCDividendDistribution(address participant, uint256 value);\n  \n  constructor() public {\n    dividendDistributionPool = owner;\n  }\n  \n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require((_to != dividendDistributionPool && msg.sender != dividendDistributionPool) || now >= dividendDistributionEndTime);\n    \n    super.transfer(_to, _value);\n  }\n  \n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require((_to != dividendDistributionPool && _from != dividendDistributionPool) || now >= dividendDistributionEndTime);\n    \n    super.transferFrom(_from, _to, _value);\n  }\n  \n  function claimDividend() public onlyParticipant whenNotPaused returns (bool) {\n    require(dividendDistributionEndTime > 0 && now < dividendDistributionEndTime);\n    require(msg.sender != dividendDistributionPool);\n    \n    updateUnclaimedDividend();\n    \n    uint256 value = unclaimedDividends[msg.sender];\n    unclaimedDividends[msg.sender] = 0;\n    \n    balances[dividendDistributionPool] = balances[dividendDistributionPool].sub(value);\n    balances[msg.sender] = balances[msg.sender].add(value);\n    emit DividendDistribution(msg.sender, value);\n    return true;\n  }\n  \n  function claimableDividend() public view onlyParticipant returns (uint256) {\n    if (lastUnclaimedDividendUpdates[msg.sender] >= dividendDistributionStartTime) {\n      return unclaimedDividends[msg.sender];\n    }\n    \n    return calcDividend();\n  }\n  \n  function claimOCDividend() public onlyParticipant whenNotPaused returns (bool) {\n    require(dividendDistributionEndTime > 0 && now < dividendDistributionEndTime);\n    require(msg.sender != dividendDistributionPool);\n    \n    updateUnclaimedDividend();\n    \n    uint256 value = unclaimedDividends[msg.sender];\n    unclaimedDividends[msg.sender] = 0;\n    \n    unclaimedOCDividends[msg.sender] = value;\n    lastUnclaimedOCDividendUpdates[msg.sender] = now;\n    \n    balances[dividendDistributionPool] = balances[dividendDistributionPool].sub(value);\n    balances[owner] = balances[owner].add(value);\n    emit OCDividendClaim(msg.sender, value);\n    return true;\n  }\n  \n  function claimableOCDividend(address _address) public view onlyOwner returns (uint256) {\n    if (isParticipant(_address) == false) {\n      return 0;\n    }\n    \n    if (dividendDistributionEndTime <= 0 || now >= dividendDistributionEndTime) {\n      return 0;\n    }\n    \n    if (lastUnclaimedOCDividendUpdates[_address] < dividendDistributionStartTime) {\n      return 0;\n    }\n    \n    return unclaimedOCDividends[_address];\n  }\n  \n  function payoutOCDividend(address _address) public onlyOwner whenNotPaused returns (bool) {\n    require(isParticipant(_address));\n    require(dividendDistributionEndTime > 0 && now < dividendDistributionEndTime);\n    require(unclaimedOCDividends[_address] > 0);\n    \n    uint256 value = unclaimedOCDividends[_address];\n    unclaimedOCDividends[_address] = 0;\n    emit OCDividendDistribution(_address, value);\n    return true;\n  }\n  \n  function setDividendDistributionPool(address _dividendDistributionPool) public onlyOwner whenNotPaused returns (bool) {\n    require(dividendDistributionEndTime < now);\n    require(isParticipant(_dividendDistributionPool));\n    \n    dividendDistributionPool = _dividendDistributionPool;\n    return true;\n  }\n  \n  function startDividendDistribution() public onlyOwner whenNotPaused returns(bool) {\n    require(dividendDistributionEndTime < now);\n    require(balanceOf(dividendDistributionPool) > 0);\n    \n    currentDividendAmount = balanceOf(dividendDistributionPool);\n    dividendDistributionEndTime = now.add(dividendDistributionDuration);\n    dividendDistributionStartTime = now;\n    return true;\n  }\n\n  function calcDividend() private view onlyParticipant returns(uint256) {\n    return (currentDividendAmount.mul(balanceOf(msg.sender))).div(totalSupply_);\n  }\n  \n  function updateUnclaimedDividend() private whenNotPaused {\n    require(lastUnclaimedDividendUpdates[msg.sender] < dividendDistributionStartTime);\n    \n    unclaimedDividends[msg.sender] = calcDividend();\n    lastUnclaimedDividendUpdates[msg.sender] = now;\n  }\n}\n\ncontract ThisToken is DividendToken {\n  string public name = \"ThisToken\";\n  string public symbol = \"THIS\";\n  uint8 public decimals = 18;\n\n  function setTotalSupply(uint256 _totalSupply) public onlyOwner whenNotPaused {\n    require(_totalSupply != totalSupply_);\n\n    uint256 diff;\n\n    if (_totalSupply < totalSupply_) {\n      diff = totalSupply_.sub(_totalSupply);\n      balances[owner] = balances[owner].sub(diff);\n    } else {\n      diff = _totalSupply.sub(totalSupply_);\n      balances[owner] = balances[owner].add(diff);\n    }\n\n    totalSupply_ = _totalSupply;\n  }\n}",
  "bytecode": "6003805460a060020a62ffffff021916905562278d006005819055600c5560c0604052600960808190527f54686973546f6b656e000000000000000000000000000000000000000000000060a09081526200005e9160159190620001fe565b506040805180820190915260048082527f54484953000000000000000000000000000000000000000000000000000000006020909201918252620000a591601691620001fe565b506017805460ff1916601217905560038054600160a060020a031916331790819055620000e490600160a060020a031664010000000062000117810204565b60035460098054600160a060020a03909216600160a060020a0319928316811790915560108054909216179055620002a3565b600354600160a060020a031633146200012f57600080fd5b60035474010000000000000000000000000000000000000000900460ff16156200015857600080fd5b6200016c81640100000000620001db810204565b156200017757600080fd5b600160a060020a03166000908152600460205260409020805460ff191660019081179091556003805461ffff750100000000000000000000000000000000000000000080830482169094011690920260a860020a61ffff0219909216919091179055565b600160a060020a031660009081526004602052604090205460ff16151560011490565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200024157805160ff191683800117855562000271565b8280016001018555821562000271579182015b828111156200027157825182559160200191906001019062000254565b506200027f92915062000283565b5090565b620002a091905b808211156200027f57600081556001016200028a565b90565b611d2d80620002b36000396000f3006080604052600436106102035763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461020857806307cd401c14610292578063095ea7b3146102c357806310340069146102fb57806318160ddd1461031057806321f2ed2e1461033757806323b872dd1461034c578063313ce567146103765780633f4ba83a146103a157806348c54b9d146103b85780634c51b141146103cd57806354ad7e1c146103ee5780635c0a81771461040f5780635c975abb146104245780635e871f0c14610439578063661884631461044e578063668a2001146104725780636e39891c1461049357806370a08231146104a8578063724edf00146104c95780637f38b980146104de5780637faddcfb146104ff5780638456cb59146105145780638d0a73e3146105295780638da5cb5b1461053e578063929066f51461055357806395d89b411461057457806397267ae914610589578063a26dbf261461059e578063a9059cbb146105ca578063bab8fe40146105ee578063c6220fbd14610603578063d270b8e814610618578063d2ff4b151461062d578063d73dd6231461064e578063dd62ed3e14610672578063dfafe10f14610699578063f0fc6bca146106ba578063f2530d1d146106cf578063f2fde38b146106e4578063f7ea7a3d14610705578063f91f87f21461071d575b600080fd5b34801561021457600080fd5b5061021d610732565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561025757818101518382015260200161023f565b50505050905090810190601f1680156102845780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561029e57600080fd5b506102a76107c0565b60408051600160a060020a039092168252519081900360200190f35b3480156102cf57600080fd5b506102e7600160a060020a03600435166024356107cf565b604080519115158252519081900360200190f35b34801561030757600080fd5b506102a7610836565b34801561031c57600080fd5b50610325610845565b60408051918252519081900360200190f35b34801561034357600080fd5b5061032561084c565b34801561035857600080fd5b506102e7600160a060020a0360043581169060243516604435610852565b34801561038257600080fd5b5061038b6108ac565b6040805160ff9092168252519081900360200190f35b3480156103ad57600080fd5b506103b66108b5565b005b3480156103c457600080fd5b506102e761092d565b3480156103d957600080fd5b50610325600160a060020a0360043516610a8c565b3480156103fa57600080fd5b506102e7600160a060020a0360043516610b28565b34801561041b57600080fd5b506102e7610bad565b34801561043057600080fd5b506102e7610d06565b34801561044557600080fd5b50610325610d16565b34801561045a57600080fd5b506102e7600160a060020a0360043516602435610d1c565b34801561047e57600080fd5b506103b6600160a060020a0360043516610e0e565b34801561049f57600080fd5b50610325610edf565b3480156104b457600080fd5b50610325600160a060020a0360043516610ee5565b3480156104d557600080fd5b506102e7610f00565b3480156104ea57600080fd5b506102e7600160a060020a0360043516610f9a565b34801561050b57600080fd5b5061032561101f565b34801561052057600080fd5b506103b6611025565b34801561053557600080fd5b506103256110a2565b34801561054a57600080fd5b506102a76110a8565b34801561055f57600080fd5b506102e7600160a060020a03600435166110b7565b34801561058057600080fd5b5061021d6110da565b34801561059557600080fd5b506102e7611135565b3480156105aa57600080fd5b506105b36111cf565b6040805161ffff9092168252519081900360200190f35b3480156105d657600080fd5b506102e7600160a060020a03600435166024356111f2565b3480156105fa57600080fd5b50610325611240565b34801561060f57600080fd5b50610325611291565b34801561062457600080fd5b50610325611297565b34801561063957600080fd5b506102e7600160a060020a036004351661129d565b34801561065a57600080fd5b506102e7600160a060020a0360043516602435611389565b34801561067e57600080fd5b50610325600160a060020a0360043581169060243516611422565b3480156106a557600080fd5b506103b6600160a060020a036004351661144d565b3480156106c657600080fd5b506102e7611501565b3480156106db57600080fd5b50610325611635565b3480156106f057600080fd5b506103b6600160a060020a0360043516611681565b34801561071157600080fd5b506103b6600435611716565b34801561072957600080fd5b50610325611825565b6015805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107b85780601f1061078d576101008083540402835291602001916107b8565b820191906000526020600020905b81548152906001019060200180831161079b57829003601f168201915b505050505081565b601054600160a060020a031681565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a35060015b92915050565b600954600160a060020a031681565b6001545b90565b600f5481565b601054600090600160a060020a038481169116148015906108815750601054600160a060020a03858116911614155b8061088e5750600f544210155b151561089957600080fd5b6108a484848461182b565b509392505050565b60175460ff1681565b600354600160a060020a031633146108cc57600080fd5b60035460a060020a900460ff1615156108e457600080fd5b6003805474ff0000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b600080610939336110b7565b151561094457600080fd5b60035460a060020a900460ff161561095b57600080fd5b600060085411801561096e575060085442105b151561097957600080fd5b600954600160a060020a031633141561099157600080fd5b600754336000908152600b6020526040902054106109ae57600080fd5b6109b661187d565b336000908152600a60209081526040808320938455600b8252808320429055835493839055600954600160a060020a0316835290829052902054909150610a03908263ffffffff6118c016565b600954600160a060020a0316600090815260208190526040808220929092553381522054610a37908263ffffffff6118d216565b336000818152602081815260409182902093909355805191825291810183905281517f55415116040ebe4bc0f2a8c28b2e7e3e8c494a5f4316854c949b548434d35f65929181900390910190a1600191505090565b600354600090600160a060020a03163314610aa657600080fd5b610aaf826110b7565b1515610abd57506000610b23565b6000600f54111580610ad15750600f544210155b15610ade57506000610b23565b600e54600160a060020a0383166000908152601460205260409020541015610b0857506000610b23565b50600160a060020a0381166000908152601360205260409020545b919050565b600354600090600160a060020a03163314610b4257600080fd5b60035460a060020a900460ff1615610b5957600080fd5b600f544211610b6757600080fd5b610b70826110b7565b1515610b7b57600080fd5b5060108054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff199091161790556001919050565b600080610bb9336110b7565b1515610bc457600080fd5b60035460a060020a900460ff1615610bdb57600080fd5b6000600f54118015610bee5750600f5442105b1515610bf957600080fd5b601054600160a060020a0316331415610c1157600080fd5b610c196118df565b503360009081526011602090815260408083208054908490556013835281842081905560148352818420429055601054600160a060020a031684529183905290912054610c6c908263ffffffff6118c016565b601054600160a060020a039081166000908152602081905260408082209390935560035490911681522054610ca7908263ffffffff6118d216565b600354600160a060020a03166000908152602081815260409182902092909255805133815291820183905280517f017fd445dca61381f87fbec45a46b693512528571f3c9956851da5adabb15d3b9281900390910190a1600191505090565b60035460a060020a900460ff1681565b600c5481565b336000908152600260209081526040808320600160a060020a038616845290915281205480831115610d7157336000908152600260209081526040808320600160a060020a0388168452909152812055610da6565b610d81818463ffffffff6118c016565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a3600191505b5092915050565b600354600160a060020a03163314610e2557600080fd5b60035460a060020a900460ff1615610e3c57600080fd5b610e45816110b7565b1515610e5057600080fd5b600160a060020a03811660009081526020819052604090205415610e7357600080fd5b600160a060020a03166000908152600460205260409020805460ff191690556003805460001961ffff7501000000000000000000000000000000000000000000808404821692909201160276ffff00000000000000000000000000000000000000000019909116179055565b600d5481565b600160a060020a031660009081526020819052604090205490565b600354600090600160a060020a03163314610f1a57600080fd5b60035460a060020a900460ff1615610f3157600080fd5b6008544211610f3f57600080fd5b600954600090610f5790600160a060020a0316610ee5565b11610f6157600080fd5b600954610f7690600160a060020a0316610ee5565b600655600554610f8d90429063ffffffff6118d216565b6008555042600755600190565b600354600090600160a060020a03163314610fb457600080fd5b60035460a060020a900460ff1615610fcb57600080fd5b6008544211610fd957600080fd5b610fe2826110b7565b1515610fed57600080fd5b5060098054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff199091161790556001919050565b60065481565b600354600160a060020a0316331461103c57600080fd5b60035460a060020a900460ff161561105357600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b60075481565b600354600160a060020a031681565b600160a060020a031660009081526004602052604090205460ff16151560011490565b6016805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107b85780601f1061078d576101008083540402835291602001916107b8565b600354600090600160a060020a0316331461114f57600080fd5b60035460a060020a900460ff161561116657600080fd5b600f54421161117457600080fd5b60105460009061118c90600160a060020a0316610ee5565b1161119657600080fd5b6010546111ab90600160a060020a0316610ee5565b600d55600c546111c290429063ffffffff6118d216565b600f555042600e55600190565b6003547501000000000000000000000000000000000000000000900461ffff1681565b601054600090600160a060020a0384811691161480159061121e5750601054600160a060020a03163314155b8061122b5750600f544210155b151561123657600080fd5b610e07838361193b565b600061124b336110b7565b151561125657600080fd5b600754336000908152600b6020526040902054106112845750336000908152600a6020526040902054610849565b61128c61187d565b905090565b600e5481565b60085481565b6003546000908190600160a060020a031633146112b957600080fd5b60035460a060020a900460ff16156112d057600080fd5b6112d9836110b7565b15156112e457600080fd5b6000600f541180156112f75750600f5442105b151561130257600080fd5b600160a060020a0383166000908152601360205260408120541161132557600080fd5b50600160a060020a038216600081815260136020908152604080832080549390558051938452908301829052805191927fd3b7b7c0ce48c9ca755f2c5156156cd7449b8b71b9fee13f86561365a231556d929081900390910190a150600192915050565b336000908152600260209081526040808320600160a060020a03861684529091528120546113bd908363ffffffff6118d216565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600160a060020a0316331461146457600080fd5b60035460a060020a900460ff161561147b57600080fd5b611484816110b7565b1561148e57600080fd5b600160a060020a03166000908152600460205260409020805460ff191660019081179091556003805461ffff750100000000000000000000000000000000000000000080830482169094011690920276ffff00000000000000000000000000000000000000000019909216919091179055565b60008061150d336110b7565b151561151857600080fd5b60035460a060020a900460ff161561152f57600080fd5b6000600f541180156115425750600f5442105b151561154d57600080fd5b601054600160a060020a031633141561156557600080fd5b61156d6118df565b50336000908152601160209081526040808320805490849055601054600160a060020a0316845291839052909120546115ac908263ffffffff6118c016565b601054600160a060020a03166000908152602081905260408082209290925533815220546115e0908263ffffffff6118d216565b336000818152602081815260409182902093909355805191825291810183905281517feb13f9564ff35ad1e856a1cd91e991a3af0f210a10b92e7d274790fbdb4a763d929181900390910190a1600191505090565b6000611640336110b7565b151561164b57600080fd5b600e543360009081526012602052604090205410611679575033600090815260116020526040902054610849565b61128c611989565b600354600160a060020a0316331461169857600080fd5b600160a060020a03811615156116ad57600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600090600160a060020a0316331461173057600080fd5b60035460a060020a900460ff161561174757600080fd5b60015482141561175657600080fd5b6001548210156117c157600154611773908363ffffffff6118c016565b600354600160a060020a03166000908152602081905260409020549091506117a1908263ffffffff6118c016565b600354600160a060020a031660009081526020819052604090205561181f565b6001546117d590839063ffffffff6118c016565b600354600160a060020a0316600090815260208190526040902054909150611803908263ffffffff6118d216565b600354600160a060020a03166000908152602081905260409020555b50600155565b60055481565b600954600090600160a060020a0384811691161480159061185a5750600954600160a060020a03858116911614155b8061186757506008544210155b151561187257600080fd5b6108a48484846119c0565b6000611888336110b7565b151561189357600080fd5b61128c6001546118b46118a533610ee5565b6006549063ffffffff611a2016565b9063ffffffff611a4916565b6000828211156118cc57fe5b50900390565b8181018281101561083057fe5b60035460a060020a900460ff16156118f657600080fd5b600e54336000908152601260205260409020541061191357600080fd5b61191b611989565b336000908152601160209081526040808320939093556012905220429055565b600954600090600160a060020a038481169116148015906119675750600954600160a060020a03163314155b8061197457506008544210155b151561197f57600080fd5b610e078383611a5e565b6000611994336110b7565b151561199f57600080fd5b61128c6001546118b46119b133610ee5565b600d549063ffffffff611a2016565b60006119cb336110b7565b15156119d657600080fd5b60035460a060020a900460ff16156119ed57600080fd5b6119f6846110b7565b1515611a0157600080fd5b611a0a836110b7565b1515611a1557600080fd5b6108a4848484611aa9565b6000821515611a3157506000610830565b50818102818382811515611a4157fe5b041461083057fe5b60008183811515611a5657fe5b049392505050565b6000611a69336110b7565b1515611a7457600080fd5b60035460a060020a900460ff1615611a8b57600080fd5b611a94836110b7565b1515611a9f57600080fd5b610e078383611c20565b6000600160a060020a0383161515611ac057600080fd5b600160a060020a038416600090815260208190526040902054821115611ae557600080fd5b600160a060020a0384166000908152600260209081526040808320338452909152902054821115611b1557600080fd5b600160a060020a038416600090815260208190526040902054611b3e908363ffffffff6118c016565b600160a060020a038086166000908152602081905260408082209390935590851681522054611b73908363ffffffff6118d216565b600160a060020a03808516600090815260208181526040808320949094559187168152600282528281203382529091522054611bb5908363ffffffff6118c016565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b6000600160a060020a0383161515611c3757600080fd5b33600090815260208190526040902054821115611c5357600080fd5b33600090815260208190526040902054611c73908363ffffffff6118c016565b3360009081526020819052604080822092909255600160a060020a03851681522054611ca5908363ffffffff6118d216565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3506001929150505600a165627a7a72305820e3b6bf26661187e5af7356672b81030d74fcb9320a03a0d5c4f7713065a956230029"
}