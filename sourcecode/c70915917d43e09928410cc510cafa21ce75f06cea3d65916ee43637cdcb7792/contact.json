{
  "address": "0xd69834f67b2f5a760617cc9a9bf5ae3a3bb256c2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Xenium Token",
  "contractName": "Xenium",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-05\n*/\n\npragma solidity ^0.4.17;\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    \n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n  \n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken. \n */\ncontract BasicToken is ERC20Basic {\n    \n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    \n  address public owner;\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));      \n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n */\n\ncontract MintableToken is StandardToken, Ownable {\n    \n  event Mint(address indexed to, uint256 amount);\n  \n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will recieve the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n  \n}\n\ncontract Xenium is MintableToken {\n    \n    string public constant name = \"Xenium\";\n    \n    string public constant symbol = \"XENM\";\n    \n    uint32 public constant decimals = 18;\n    \n}",
  "bytecode": "606060405260038054600160a860020a03191633600160a060020a03161790556107568061002e6000396000f3006060604052600436106100c45763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b81146100c957806306fdde03146100f0578063095ea7b31461017a57806318160ddd1461019c578063313ce567146101c157806340c10f19146101ed57806370a082311461020f5780637d64bcb41461022e5780638da5cb5b1461024157806395d89b4114610270578063a9059cbb14610283578063dd62ed3e146102a5578063f2fde38b146102ca575b600080fd5b34156100d457600080fd5b6100dc6102eb565b604051901515815260200160405180910390f35b34156100fb57600080fd5b61010361030c565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561013f578082015183820152602001610127565b50505050905090810190601f16801561016c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561018557600080fd5b6100dc600160a060020a0360043516602435610343565b34156101a757600080fd5b6101af6103e9565b60405190815260200160405180910390f35b34156101cc57600080fd5b6101d46103ef565b60405163ffffffff909116815260200160405180910390f35b34156101f857600080fd5b6100dc600160a060020a03600435166024356103f4565b341561021a57600080fd5b6101af600160a060020a03600435166104d3565b341561023957600080fd5b6100dc6104ee565b341561024c57600080fd5b610254610573565b604051600160a060020a03909116815260200160405180910390f35b341561027b57600080fd5b610103610582565b341561028e57600080fd5b6100dc600160a060020a03600435166024356105b9565b34156102b057600080fd5b6101af600160a060020a0360043581169060243516610678565b34156102d557600080fd5b6102e9600160a060020a03600435166106a3565b005b60035474010000000000000000000000000000000000000000900460ff1681565b60408051908101604052600681527f58656e69756d0000000000000000000000000000000000000000000000000000602082015281565b60008115806103755750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b151561038057600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005481565b601281565b60035460009033600160a060020a0390811691161461041257600080fd5b60035474010000000000000000000000000000000000000000900460ff161561043a57600080fd5b60005461044d908363ffffffff61070216565b6000908155600160a060020a038416815260016020526040902054610478908363ffffffff61070216565b600160a060020a0384166000818152600160205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a250600192915050565b600160a060020a031660009081526001602052604090205490565b60035460009033600160a060020a0390811691161461050c57600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a150600190565b600354600160a060020a031681565b60408051908101604052600481527f58454e4d00000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a0333166000908152600160205260408120546105e2908363ffffffff61071816565b600160a060020a033381166000908152600160205260408082209390935590851681522054610617908363ffffffff61070216565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a039081169116146106be57600080fd5b600160a060020a03811615156106d357600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008282018381101561071157fe5b9392505050565b60008282111561072457fe5b509003905600a165627a7a7230582049265f1c4ae1e87b76448fcf65801bd4824c89768cd3ed3eed19667d831a4bbf0029"
}