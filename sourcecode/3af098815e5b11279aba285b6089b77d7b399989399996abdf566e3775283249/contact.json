{
  "address": "0x0235fe624e044a05eed7a43e16e3083bc8a4287a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "OriginalToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-03\n*/\n\npragma solidity ^0.4.17;\n\ncontract Cofounded {\n  mapping (address => uint) public cofounderIndices;\n  address[] public cofounders;\n\n\n  /// @dev restrict execution to one of original cofounder addresses\n  modifier restricted () {\n    uint cofounderIndex = cofounderIndices[msg.sender];\n    require(msg.sender == cofounders[cofounderIndex]);\n    _;\n  }\n\n  /// @notice creates the Cofounded contract instance\n  /// @dev adds up to cofounders.\n  ///      also adds  the deployment address as a cofounder\n  function Cofounded (address[] contractCofounders) public {\n    cofounders.push(msg.sender);\n    \n    for (uint8 x = 0; x < contractCofounders.length; x++) {\n      address cofounder = contractCofounders[x];\n\n      bool isValidUniqueCofounder =\n        cofounder != address(0) &&\n        cofounder != msg.sender &&\n        cofounderIndices[cofounder] == 0;\n\n            \n      // NOTE: solidity as of 0.4.20 does not have an\n      // undefined or null-like value\n      // thusly mappings return the default value of the value type\n      // for an unregistered key value\n      // an address which doesn't exist will return 0\n      // which is actually the index of the address of the first\n      // cofounder\n      if (isValidUniqueCofounder) {\n        uint256 cofounderIndex = cofounders.push(cofounder) - 1;\n        cofounderIndices[cofounder] = cofounderIndex;\n      }\n    }\n  }\n\n  /// @dev get count of cofounders\n  function getCofounderCount () public constant returns (uint256) {\n    return cofounders.length;\n  }\n\n  /// @dev get list of cofounders\n  function getCofounders () public constant returns (address[]) {\n    return cofounders;\n  }\n}\n\ninterface ERC20 {\n\n  // Required methods\n  function transfer (address to, uint256 value) public returns (bool success);\n  function transferFrom (address from, address to, uint256 value) public returns (bool success);\n  function approve (address spender, uint256 value) public returns (bool success);\n  function allowance (address owner, address spender) public constant returns (uint256 remaining);\n  function balanceOf (address owner) public constant returns (uint256 balance);\n  // Events\n  event Transfer (address indexed from, address indexed to, uint256 value);\n  event Approval (address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/// @title Interface for contracts conforming to ERC-165: Pseudo-Introspection, or standard interface detection\n/// @author Mish Ochu\ninterface ERC165 {\n  /// @dev true iff the interface is supported\n  function supportsInterface(bytes4 interfaceID) external constant returns (bool);\n}\ncontract InterfaceSignatureConstants {\n  bytes4 constant InterfaceSignature_ERC165 =\n    bytes4(keccak256('supportsInterface(bytes4)'));\n\n  bytes4 constant InterfaceSignature_ERC20 =\n    bytes4(keccak256('totalSupply()')) ^\n    bytes4(keccak256('balanceOf(address)')) ^\n    bytes4(keccak256('transfer(address,uint256)')) ^\n    bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n    bytes4(keccak256('approve(address,uint256)')) ^\n    bytes4(keccak256('allowance(address,address)'));\n\n  bytes4 constant InterfaceSignature_ERC20_PlusOptions = \n    bytes4(keccak256('name()')) ^\n    bytes4(keccak256('symbol()')) ^\n    bytes4(keccak256('decimals()')) ^\n    bytes4(keccak256('totalSupply()')) ^\n    bytes4(keccak256('balanceOf(address)')) ^\n    bytes4(keccak256('transfer(address,uint256)')) ^\n    bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n    bytes4(keccak256('approve(address,uint256)')) ^\n    bytes4(keccak256('allowance(address,address)'));\n}\n\n/// @title an original cofounder based ERC-20 compliant token\n/// @author Mish Ochu\n/// @dev Ref: https://github.com/ethereum/EIPs/issues/721\n//http://solidity.readthedocs.io/en/develop/contracts.html#arguments-for-base-constructors\ncontract OriginalToken is Cofounded, ERC20, ERC165, InterfaceSignatureConstants {\n    bool private hasExecutedCofounderDistribution;\n    struct Allowance {\n      uint256 amount;\n      bool    hasBeenPartiallyWithdrawn;\n    }\n\n    //***** Apparently Optional *****/\n    /// @dev returns the name of the token\n    string public constant name = 'Original Crypto Coin';\n    /// @dev returns the symbol of the token (e.g. 'OCC')\n    string public constant symbol = 'OCC';\n    /// @dev returns the number of decimals the tokens use\n    uint8 public constant decimals = 18;\n    //**********/\n\n    /// @dev  returns the total token supply\n    /// @note implemented as a state variable with an automatic (compiler provided) getter\n    ///       instead of a constant (view/readonly) function.\n    uint256 public totalSupply = 100000000000000000000000000000;\n\n    mapping (address => uint256) public balances;\n    // TODO: determine if the gas cost for handling the race condition\n    //       (outlined here: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729)\n    //       is cheaper this way (or this way: https://github.com/Giveth/minime/blob/master/contracts/MiniMeToken.sol#L221-L225)\n    mapping (address => mapping (address => Allowance)) public allowances;\n\n  /// @dev creates the token\n  /// NOTE  passes tokenCofounders to base contract\n  /// see   Cofounded\n  function OriginalToken (address[] tokenCofounders,\n                          uint256 cofounderDistribution) Cofounded(tokenCofounders) public { \n\n    if (hasExecutedCofounderDistribution ||\n        cofounderDistribution == 0 || \n        totalSupply < cofounderDistribution) revert();\n\n    hasExecutedCofounderDistribution = true;\n    uint256 initialSupply = totalSupply;\n\n    // divvy up initial token supply accross cofounders\n    // TODO: ensure each cofounder gets an equal base distribution\n\n    for (uint8 x = 0; x < cofounders.length; x++) {\n      address cofounder = cofounders[x];\n\n      initialSupply -= cofounderDistribution;\n      // there should be some left over for the airdrop campaign\n      // otherwise don't create this contract\n      if (initialSupply < cofounderDistribution) revert();\n      balances[cofounder] = cofounderDistribution;\n    }\n\n    balances[msg.sender] += initialSupply;\n  }\n\n  function transfer (address to, uint256 value) public returns (bool) {\n    return transferBalance (msg.sender, to, value);\n  }\n\n  function transferFrom (address from, address to, uint256 value) public returns (bool success) {\n    Allowance storage allowance = allowances[from][msg.sender];\n    if (allowance.amount < value) revert();\n\n    allowance.hasBeenPartiallyWithdrawn = true;\n    allowance.amount -= value;\n\n    if (allowance.amount == 0) {\n      delete allowances[from][msg.sender];\n    }\n\n    return transferBalance(from, to, value);\n  }\n\n  event ApprovalDenied (address indexed owner, address indexed spender);\n\n  // TODO: test with an unintialized Allowance struct\n  function approve (address spender, uint256 value) public returns (bool success) {\n    Allowance storage allowance = allowances[msg.sender][spender];\n\n    if (value == 0) {\n      delete allowances[msg.sender][spender];\n      Approval(msg.sender, spender, value);\n      return true;\n    }\n\n    if (allowance.hasBeenPartiallyWithdrawn) {\n      delete allowances[msg.sender][spender];\n      ApprovalDenied(msg.sender, spender);\n      return false;\n    } else {\n      allowance.amount = value;\n      Approval(msg.sender, spender, value);\n    }\n\n    return true;\n  }\n\n  // TODO: compare gas cost estimations between this and https://github.com/ConsenSys/Tokens/blob/master/contracts/eip20/EIP20.sol#L39-L45\n  function transferBalance (address from, address to, uint256 value) private returns (bool) {\n    // don't burn these tokens\n    if (to == address(0) || from == to) revert();\n    // match spec and emit events on 0 value\n    if (value == 0) {\n      Transfer(msg.sender, to, value);\n      return true;\n    }\n\n    uint256 senderBalance = balances[from];\n    uint256 receiverBalance = balances[to];\n    if (senderBalance < value) revert();\n    senderBalance -= value;\n    receiverBalance += value;\n    // overflow check (altough one could use https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol)\n    if (receiverBalance < value) revert();\n\n    balances[from] = senderBalance;\n    balances[to] = receiverBalance;\n\n    Transfer(from, to, value);\n    return true;\n  }\n\n \n  // TODO: test with an unintialized Allowance struct\n  function allowance (address owner, address spender) public constant returns (uint256 remaining) {\n    return allowances[owner][spender].amount;\n  }\n\n  function balanceOf (address owner) public constant returns (uint256 balance) {\n    return balances[owner];\n  }\n\n  function supportsInterface (bytes4 interfaceID) external constant returns (bool) {\n    return ((interfaceID == InterfaceSignature_ERC165) ||\n            (interfaceID == InterfaceSignature_ERC20)  ||\n            (interfaceID == InterfaceSignature_ERC20_PlusOptions));\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cofounders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"cofounderIndices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCofounderCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowances\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"hasBeenPartiallyWithdrawn\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCofounders\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenCofounders\",\"type\":\"address[]\"},{\"name\":\"cofounderDistribution\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ApprovalDenied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000011c57e4d6efac237d0a510000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000a4e3ae7f92106af0c16173d85c89e1f6488b14a50000000000000000000000002378113e6c0a1dd0436c56f7e25fdcb6fd38b7bc000000000000000000000000f5dd9a84dcb05b7b201371cd7f75e9090e5068450000000000000000000000001fb72b88fd9a3205fd603d6899ced5bf582915ea0000000000000000000000000f74a326f321e2a87650b95bcf697a8c1cf8a33c000000000000000000000000beab88087012d26019de54467096525fa63128ae0000000000000000000000004f5adf9b6516b58db57330bbac75e78ea72cf817000000000000000000000000b5651dc6e84373c3f96d228e6b95aa9b081e7c8b"
}