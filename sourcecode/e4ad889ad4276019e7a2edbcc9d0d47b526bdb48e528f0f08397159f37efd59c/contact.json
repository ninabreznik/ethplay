{
  "address": "0xb037784b990a56d68585657e8c18d6de2e23b018",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MultiSigRegulator",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-18\n*/\n\npragma solidity >=0.5.0 <0.6.0;\n\n/**\n * Author: Sik Jean Soon\n */\n\n/**\n * @title SafeMath for uint256\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMathUint256 {\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        require(c / a == b, \"Multiplier exception\");\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b; // Solidity automatically throws when dividing by 0\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"Subtraction exception\");\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        require(c >= a, \"Addition exception\");\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"Modulo exception\");\n        return a % b;\n    }\n\n}\n\n/**\n * @title SafeMath for uint8\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMathUint8 {\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint8 a, uint8 b) internal pure returns (uint8 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        require(c / a == b, \"Multiplier exception\");\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint8 a, uint8 b) internal pure returns (uint8) {\n        return a / b; // Solidity automatically throws when dividing by 0\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint8 a, uint8 b) internal pure returns (uint8) {\n        require(b <= a, \"Subtraction exception\");\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint8 a, uint8 b) internal pure returns (uint8 c) {\n        c = a + b;\n        require(c >= a, \"Addition exception\");\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint8 a, uint8 b) internal pure returns (uint8) {\n        require(b != 0, \"Modulo exception\");\n        return a % b;\n    }\n\n}\n\ncontract Common {\n    bytes32 internal LABEL_CODE_STAKER;\n    bytes32 internal LABEL_CODE_STAKER_CONTROLLER;\n    bytes32 internal LABEL_CODE_SIGNER_CONTROLLER;\n    bytes32 internal LABEL_CODE_SIGNER;\n    bytes32 internal LABEL_CODE_BACKSYS;\n    bytes32 internal LABEL_CODE_OPS;\n\n    uint8 constant internal MAX_WALLET = 64;\n    uint256 constant internal WALLET_FLAG_ALL = (2 ** (uint256(MAX_WALLET))) - 1;\n\n    constructor() public\n    {\n        LABEL_CODE_STAKER = encodePacked(\"STAKER\");\n        LABEL_CODE_STAKER_CONTROLLER = encodePacked(\"STAKER_CONTROLLER\");\n        LABEL_CODE_SIGNER_CONTROLLER = encodePacked(\"SIGNER_CONTROLLER\");\n        LABEL_CODE_SIGNER = encodePacked(\"SIGNER\");\n        LABEL_CODE_BACKSYS = encodePacked(\"BACKSYS\");\n        LABEL_CODE_OPS = encodePacked(\"OPS\");\n    }\n\n    function encodePacked(string memory s) internal pure\n        returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(s));\n    }\n\n    function convertBytesToBytes4(bytes memory _in) internal pure\n        returns (bytes4 out)\n    {\n        if (0 == _in.length)\n            return 0x0;\n\n        assembly {\n            out := mload(add(_in, 32))\n        }\n    }\n\n    function isContract(address _address) internal view\n        returns (bool)\n    {\n        uint32 size;\n        assembly {\n            size := extcodesize(_address)\n        }\n        return (0 < size);\n    }\n\n}\n\ncontract Label is Common {\n    string public class;\n    string public label;\n    string public description;\n\n    bytes32 public classCode;\n    bytes32 public labelCode;\n\n    constructor(string memory _class, string memory _label, string memory _description) public\n    {\n        class = _class;        \n        label = _label;\n        description = _description;\n\n        classCode = encodePacked(_class);\n        labelCode = encodePacked(_label);\n    }\n\n}\n\n\ncontract MultiSigNode is Label {\n    using SafeMathUint8 for uint8;\n\n    address payable public root;\n    address public parent;\n\n    // wallet index => wallet address\n    mapping(uint8 => address) public wallets;\n    // wallet address => wallet bit position\n    mapping(address => uint8) public walletsIndex;\n\n    // Normal wallet\n    uint8 public walletCount;\n    // Total wallet = normal wallet + contract wallet\n    uint8 public totalWallet;\n\n    modifier onlyRoot() {\n        require(msg.sender == root, \"Node.onlyRoot: Access denied\");\n        _;\n    }\n\n    constructor(address payable _root, address[] memory _wallets, string memory _label, string memory _description) public\n        Label(\"NODE\", _label, _description)\n    {\n        require(address(0) != _root, \"Node: Root address is empty\");\n        require(MAX_WALLET >= _wallets.length, \"Node: Wallet list exceeded limit\");\n\n        root = _root;\n\n        for (uint8 i = 1; _wallets.length >= i; i = i.add(1)) {\n            address wallet = _wallets[i.sub(1)];\n\n            require(address(0) != wallet, \"Node: Wallet address is empty\");\n            require(0 == walletsIndex[wallet], \"Node: Duplicated wallet address\");\n\n            wallets[i] = wallet;\n            walletsIndex[wallet] = i;\n\n            if (!isContract(wallet))\n                walletCount = walletCount.add(1);\n        }\n\n        totalWallet = uint8(_wallets.length);\n    }\n\n    function init(address _parent) external\n        onlyRoot\n    {\n        parent = _parent;\n\n        if (0 < totalWallet) {\n            uint8 count = 0;\n\n            for (uint8 i = 1; i <= MAX_WALLET && count <= totalWallet; i = i.add(1)) {\n                address wallet = wallets[i];\n\n                if (address(0) != wallet) {\n                    count = count.add(1);\n\n                    // Notify root this attached wallet, root will set parent address (if this is node)\n                    MultiSigRoot(root).attachWalletOrNode(wallet);\n                }\n            }\n        }\n    }\n\n    function term() external\n        onlyRoot\n    {\n        if (0 < totalWallet) {\n            uint8 count = 0;\n\n            for (uint8 i = 1; i <= MAX_WALLET && count <= totalWallet; i = i.add(1)) {\n                address wallet = wallets[i];\n\n                if (address(0) != wallet) {\n                    count = count.add(1);\n\n                    // Notify root to remove this wallet from list\n                    MultiSigRoot(root).detachWalletOrNode(wallet);\n                }\n            }\n        }\n    }\n\n    function attach(uint8 _index, address _wallet) external\n        onlyRoot\n        returns (bool)\n    {\n        require(0 < _index && MAX_WALLET >= _index, \"Node.attach: Index out of range\");\n        require(address(0) != _wallet, \"Node.attach: Wallet address is empty\");\n        require(0 == walletsIndex[_wallet], \"Node.attach: Duplicated wallet address\");\n\n        if (address(0) != wallets[_index])\n            detach(wallets[_index]);\n\n        walletsIndex[_wallet] = _index;\n        wallets[_index] = _wallet;\n\n        if (!isContract(_wallet))\n            walletCount = walletCount.add(1);\n\n        totalWallet = totalWallet.add(1);\n\n        // Notify root this attached wallet, root will trigger attach operation (if this wallet is a contract)\n        MultiSigRoot(root).attachWalletOrNode(_wallet);\n\n        return true;\n    }\n\n    function detach(address _wallet) public\n        onlyRoot\n        returns (bool)\n    {\n        require(address(0) != _wallet, \"Node.detach: Wallet address is empty\");\n\n        uint8 index = walletsIndex[_wallet];\n        require(0 < index && MAX_WALLET >= index, \"Node.detach: Wallet address is not registered\");\n\n        if (!isContract(_wallet))\n            walletCount = walletCount.sub(1);\n\n        totalWallet = totalWallet.sub(1);\n\n        delete wallets[index];\n        delete walletsIndex[_wallet];\n\n        // Notify root to remove this wallet from list\n        MultiSigRoot(root).detachWalletOrNode(_wallet);\n\n        return true;\n    }\n\n    function getRootNode() external view\n        returns (address)\n    {\n        if (address(0) == parent)\n            return address(this);\n\n        return MultiSigNode(parent).getRootNode();\n    }\n\n}\n\n\n/**\n * NOTE: Regulator is meant for changable rules for multi-sig\n */\ncontract MultiSigRegulator is Label {\n    using SafeMathUint8 for uint8;\n    using SafeMathUint256 for uint256;\n\n    event TransactionLimitChanged(string requirementType, uint256 limit);\n\n    address payable public root;\n\n    address private creator;\n\n    // Cached parameters\n    address private argTo;\n    uint256 private argValue;\n\n    bool public isSealed;\n\n    // Daily transaction limit (mapped: requirement type => TransactionLimit)\n    mapping(bytes32 => TransactionLimit) public transactionLimits;\n\n    struct TransactionLimit {\n        uint256 datetime;\n        uint256 volume;\n        uint256 upperLimit;\n    }\n\n    modifier onlySealed() {\n        require(isSealed, \"Regulator.onlySealed: Not sealed\");\n        _;\n    }\n\n    modifier onlyMe() {\n        require(msg.sender == address(this), \"Regulator.onlyMe: Access denied\");\n        _;\n    }\n\n    modifier onlyRoot() {\n        require(msg.sender == root, \"Regulator.onlyRoot: Access denied\");\n        _;\n    }\n\n    modifier onlyCreator() {\n        require(msg.sender == creator, \"Regulator.onlyCreator: Access denied\");\n        _;\n    }\n\n    /**\n     * Supported non-payable default function\n     */\n    function () external\n        onlyMe\n        onlySealed\n    {\n        revert(\"Regulator: Not supported\");\n    }\n\n    constructor(address payable _root, string memory _label, string memory _description) public\n        Label(\"REGULATOR\", _label, _description)\n    {\n        require(address(0) != _root, \"Regulator: Root address is empty\");\n        root = _root;\n        creator = msg.sender;\n    }\n\n    /**\n     * Supported non-payable function: ERC_ER_SHI.increaseSupply\n     * Only can be called by this contract itself to resolve calldata\n     */\n    function increaseSupply(uint256 _value, address /* _to */) external\n        onlyMe\n        onlySealed\n    {\n        defaultRequirement(\"increaseSupply\", _value);\n    }\n\n    /**\n     * Supported non-payable function: ERC_ER_SHI.decreaseSupply\n     * Only can be called by this contract itself to resolve calldata\n     */\n    function decreaseSupply(uint256 _value, address /* _from */) external\n        onlyMe\n        onlySealed\n    {\n        defaultRequirement(\"decreaseSupply\", _value);\n    }\n\n    /**\n     * Supported non-payable function: ERC_ER_SHI.freeze\n     * Only can be called by this contract itself to resolve calldata\n     */\n    function freeze(address /* _from */, uint256 /* _value */) external\n        onlyMe\n        onlySealed\n    {\n        requirement1Backsys();\n    }\n\n    /**\n     * Supported non-payable function: ERC_ER_SHI.unfreeze\n     * Only can be called by this contract itself to resolve calldata\n     */\n    function unfreeze(address /* _from */, uint256 /* _value */) external\n        onlyMe\n        onlySealed\n    {\n        requirement1Backsys();\n    }\n\n    /**\n     * Supported non-payable function: ERC_ER_SHI.freezeAddress\n     * Only can be called by this contract itself to resolve calldata\n     */\n    function freezeAddress(address /* _addressOf */) external\n        onlyMe\n        onlySealed\n    {\n        requirement1Backsys();\n    }\n\n    /**\n     * Supported non-payable function: ERC_ER_SHI.unfreezeAddress\n     * Only can be called by this contract itself to resolve calldata\n     */\n    function unfreezeAddress(address /* _addressOf */) external\n        onlyMe\n        onlySealed\n    {\n        requirement1Backsys();\n    }\n\n    /**\n     * Supported non-payable function: Ownership.acceptOwnership\n     * Only can be called by this contract itself to resolve calldata\n     */\n    function acceptOwnership () external\n        onlyMe\n        onlySealed\n    {\n        requirement(LABEL_CODE_OPS, 2, 1); // INDEX 2: ONE SIGNABLE\n        requirement(LABEL_CODE_SIGNER_CONTROLLER, 1, 1); // INDEX 1: ONE SIGNABLE\n    }\n\n    /**\n     * Supported non-payable function: Ownership.transferOwnership\n     * Only can be called by this contract itself to resolve calldata\n     */\n    function transferOwnership (address payable /* _newOwner */) external\n        onlyMe\n        onlySealed\n    {\n        requirement(LABEL_CODE_STAKER, WALLET_FLAG_ALL, 1); // ANY ONE SIGNABLE\n        requirement(LABEL_CODE_STAKER_CONTROLLER, WALLET_FLAG_ALL, uint8(-1)); // ALL SIGNABLE\n        requirement(LABEL_CODE_SIGNER_CONTROLLER, WALLET_FLAG_ALL, 1); // ANY ONE SIGNABLE\n    }\n\n    /**\n     * Supported non-payable function: Controllable.pause\n     * Only can be called by this contract itself to resolve calldata\n     */\n    function pause () external\n        onlyMe\n        onlySealed\n    {\n        requirement(LABEL_CODE_STAKER_CONTROLLER, WALLET_FLAG_ALL, 1); // ANY ONE SIGNABLE\n    }\n\n    /**\n     * Supported non-payable function: Controllable.resume\n     * Only can be called by this contract itself to resolve calldata\n     */\n    function resume () external\n        onlyMe\n        onlySealed\n    {\n        requirement(LABEL_CODE_STAKER_CONTROLLER, WALLET_FLAG_ALL, 2); // ANY TWO SIGNABLE\n    }\n\n    /**\n     * Supported non-payable function: MultiSigRegulator.setTransactionLimit\n     */\n    function setTransactionLimit(string calldata _requirementType, uint256 _limit) external\n    {\n        if (msg.sender == root || !isSealed) {\n            // Set transaction limit\n            transactionLimits[encodePacked(_requirementType)].upperLimit = _limit;\n            emit TransactionLimitChanged(_requirementType, _limit);\n        }\n        else {\n            require(msg.sender == address(this), \"Regulator.setTransactionLimit: Access denied\");\n\n            // Create requirements for this transaction\n            requirement(LABEL_CODE_STAKER_CONTROLLER, WALLET_FLAG_ALL, 2); // ANY TWO SIGNABLE\n        }\n    }\n\n    function seal() external\n        onlyCreator\n    {\n        require(!isSealed, \"Regulator.seal: Access denied\");\n        isSealed = true;\n    }\n\n    function createRequirement(uint256 /* _transactionCode */, address /* _from */, address _to, uint256 _value, bytes calldata _data) external\n        onlyRoot\n    {\n        // Cache parameters\n        argTo = _to;\n        argValue = _value;\n\n        // Perform self call to determine function details for requirement setup\n        (bool success, bytes memory returnData) = address(this).call.value(_value)(_data);\n\n        if (!success) {\n            // Check the error string is available or not\n            if (0 == returnData.length || bytes4(0x08c379a0) != convertBytesToBytes4(returnData))\n                revert(\"Regulator.createRequirement: Function call failed\");\n            else {\n                bytes memory bytesArray = new bytes(returnData.length);\n                for (uint256 i = 0; i < returnData.length.sub(4); i = i.add(1)) {\n                    bytesArray[i] = returnData[i.add(4)];\n                }\n\n                (string memory reason) = abi.decode(bytesArray, (string));\n                revert(reason);\n            }\n        }\n    }\n\n    function requirement(bytes32 _labelCode, uint256 _flag, uint8 _required) private\n    {\n        MultiSigRoot(root).createRequirement(_labelCode, _flag, _required);\n    }\n\n    function defaultRequirement(string memory _requirementType, uint256 _value) private\n    {\n        bytes32 t = encodePacked(_requirementType);\n\n        // Check transaction volume limit\n        TransactionLimit storage limit = transactionLimits[t];\n\n        // Check transaction volume limit\n        if (0 < limit.upperLimit) {\n            // Truncate timestamp (YYYYMMDD) to daily (UTC time)\n            uint256 dt = now - (now % 86400);\n\n            if (dt == limit.datetime)\n                limit.volume = limit.volume.add(_value);\n            else {\n                // Reset volume on new day\n                limit.datetime = dt;\n                limit.volume = _value;\n            }\n\n            require(limit.upperLimit >= limit.volume, \"Regulator.defaultRequirement: Exceeded limit\");\n        }\n\n        // Create requirement for this transaction\n        requirement(LABEL_CODE_OPS, WALLET_FLAG_ALL, 4); // ANY FOUR SIGNABLE\n    }\n\n    function requirement1Backsys() private\n    {\n        requirement(LABEL_CODE_BACKSYS, WALLET_FLAG_ALL, 1); // ANY ONE SIGNABLE\n    }\n\n}\n\n\ncontract MultiSigRoot is Label {\n    using SafeMathUint8 for uint8;\n    using SafeMathUint256 for uint256;\n\n    uint8 constant private WALLET_TYPE_WALLET = 1;\n    uint8 constant private WALLET_TYPE_NODE = 2;\n\n    uint8 constant private TRANSACTION_STATUS_EMPTY = 0;\n    uint8 constant private TRANSACTION_STATUS_PENDING = 1;\n    uint8 constant private TRANSACTION_STATUS_EXECUTED = 2;\n    uint8 constant private TRANSACTION_STATUS_FAILURE = 3;\n    uint8 constant private TRANSACTION_STATUS_REVOKED = 4;\n\n    event Confirmation(address indexed sender, uint256 indexed transactionCode);\n    event Revocation(address indexed sender, uint256 indexed transactionCode);\n    event Submission(uint256 indexed transactionCode);\n    event Requirement(uint256 indexed transactionCode, bytes32 labelCode, uint256 flag, uint8 required);\n    event Execution(uint256 indexed transactionCode);\n    event ExecutionFailure(uint256 indexed transactionCode);\n    event Deposit(address indexed sender, uint256 value);\n\n    event StakersChanged(address indexed stakers);\n    event SignersChanged(address indexed signers);\n    event RegulatorChanged(address indexed regulator);\n    event StakersControllerChanged(address indexed stakersController);\n    event SignersControllerChanged(address indexed signersController);\n    \n    event WalletOrNodeAttached(address indexed wallet);\n    event WalletOrNodeDetached(address indexed wallet);\n    \n    address public stakers;\n    address public signers;\n\n    address public stakersController;\n    address public signersController;\n\n    address public regulator;\n\n    // Transaction (mapped: transactionCode => Transaction)\n    mapping(uint256 => Transaction) public transactions;\n    uint256 public transactionCode;\n\n    // Requirement (mapped: transactionCode + label code => requirement)\n    mapping(uint256 => mapping(bytes32 => TransactionRequirement)) public requirements;\n    // Prevent duplicated confirmation (mapped: transactionCode + wallet address => bool)\n    mapping(uint256 => mapping(address => bool)) public confirmations;\n\n    // Registered wallets or nodes (mapped: address => type)\n    mapping(address => uint8) public registered;\n\n    // Search node address by wallet address (mapped: wallet address => node address)\n    mapping(address => address) public walletToNodes;\n\n    // Search wallet index by wallet address (mapped: wallet address => wallet index)\n    mapping(address => uint8) private walletToIndexes;\n\n    // Search label code by wallet address (mapped: wallet address => label code)\n    mapping(address => bytes32) private walletToLabelCodes;\n\n    // Search node address by label code (mapped: label code => node address)\n    mapping(bytes32 => address) private labelCodeToNodes;\n\n    struct Transaction {\n        uint8 status;\n        uint8 totalRequired;\n\n        address to;\n        uint256 value;\n        bytes data;\n        string reason;\n    }\n\n    struct TransactionRequirement {\n        uint8 required;\n        uint256 flag;\n    }\n\n    modifier onlyEligible(uint256 _transactionCode) {\n        require(isEligible(_transactionCode, msg.sender), \"Root.onlyEligible: Not eligible\");\n        _;\n    }\n\n    modifier onlySignable(uint256 _transactionCode) {\n        require(isSignable(_transactionCode, msg.sender), \"Root.onlySignable: Not signable\");\n        _;\n    }\n\n    modifier onlyNode() {\n        require(WALLET_TYPE_NODE == registered[msg.sender], \"Root.onlyNode: Access denied\");\n        _;\n    }\n\n    modifier onlyWallet() {\n        require(WALLET_TYPE_WALLET == registered[msg.sender], \"Root.onlyWallet: Access denied\");\n        require(!isContract(msg.sender), \"Root.onlyWallet: Is not node\");\n        _;\n    }\n\n    modifier onlyRegulator() {\n        require(msg.sender == regulator, \"Root.onlyRegulator: Access denied\");\n        _;\n    }\n\n    constructor(string memory _label, string memory _description) public\n        Label(\"ROOT\", _label, _description)\n    {\n    }\n\n    function () external payable\n    {\n        if (0 < msg.value)\n            emit Deposit(msg.sender, msg.value);\n    }\n\n    function isEligible(uint256 _transactionCode, address _sender) public view\n        returns (bool)\n    {\n        uint256 flag = requirements[_transactionCode][walletToLabelCodes[_sender]].flag;\n\n        if (0 != flag) {\n            uint8 index = walletToIndexes[_sender];\n\n            if (0 != index) {\n                index = index.sub(1);\n\n                // Check the bit is on for wallet index\n                return (0 != ((flag >> index) & 1));\n            }\n        }\n        return false;\n    }\n\n    function isSignable(uint256 _transactionCode, address _sender) public view\n        returns (bool)\n    {\n        if (TRANSACTION_STATUS_PENDING == transactions[_transactionCode].status) {\n            if (!confirmations[_transactionCode][_sender]) {\n                if (0 != requirements[_transactionCode][walletToLabelCodes[_sender]].required)\n                    return true;\n            }\n        }\n        return false;\n    }\n\n    function createRequirement(bytes32 _labelCode, uint256 _flag, uint8 _required) external\n        onlyRegulator\n    {\n        setRequirement(_labelCode, _flag, _required);\n    }\n\n    function setRequirement(bytes32 _labelCode, uint256 _flag, uint8 _required) private\n    {\n        require(0 < _flag, \"Root.setRequirement: Confirmation flag is empty\");\n\n        uint8 totalRequired;\n\n        // Required all wallet in the node\n        if (uint8(-1) == _required) {\n            address node = labelCodeToNodes[_labelCode];\n            require(address(0) != node, \"Root.setRequirement: Node is not found\");\n\n            totalRequired = MultiSigNode(node).walletCount();\n\n            if (node != signers) {\n                // Stakers and controllers must have at least 1 wallet attached\n                require(0 < totalRequired, \"Root.setRequirement: No wallet\");\n            }\n            else {\n                // Signer node allowed to be empty\n                if (0 == totalRequired)\n                    return;\n            }\n\n            require(0 < totalRequired, \"Root.setRequirement: Confirmation required is empty\");\n        }\n        else {\n            // allowed 0 requirement, in order to support eligible user but not signable (view transaction only)\n            totalRequired = _required;\n        }\n\n        require(0 == requirements[transactionCode][_labelCode].flag, \"Root.setRequirement: Duplicated requirement\");\n\n        requirements[transactionCode][_labelCode] = TransactionRequirement({\n            required: totalRequired,\n            flag: _flag\n        });\n\n        // Increase total required in transaction\n        transactions[transactionCode].totalRequired = transactions[transactionCode].totalRequired.add(totalRequired);\n\n        emit Requirement(transactionCode, _labelCode, _flag, totalRequired);\n    }\n\n    function submit(address _to, uint256 _value, bytes calldata _data) external\n        onlyWallet\n        returns (uint256 /* transactionCode */) \n    {\n        require(address(0) != _to, \"Root.submit: Target address is empty\");\n\n        // Generate transaction id\n        transactionCode = transactionCode.add(1);\n\n        bytes4 functionId = convertBytesToBytes4(_data);\n\n        // Create requirement that based on destination address\n        if (address(this) != _to) {\n            // Check this is node address or not\n            if (WALLET_TYPE_NODE == registered[_to]) {\n                // Calling node function\n                // - 0x80882800: node.attach\n                // - 0xceb6c343: node.detach\n                if (bytes4(0x80882800) == functionId || bytes4(0xceb6c343) == functionId) { // node.attach or node.detach\n                    address rootNode = MultiSigNode(_to).getRootNode();\n\n                    if (rootNode == signers) {\n                        // Change SIGNER need ALL SIGNER_CONTROLLER\n                        setRequirement(LABEL_CODE_SIGNER_CONTROLLER, WALLET_FLAG_ALL, uint8(-1)); // ALL signable\n                    }\n                    else if (rootNode == signersController || rootNode == stakersController) {\n                        // Change SIGNERS_CONTROLLER or STAKER_CONTROLLER need ALL STAKER\n                        setRequirement(LABEL_CODE_STAKER, WALLET_FLAG_ALL, uint8(-1)); // ALL signable\n                    }\n                    else if (rootNode == stakers) {\n                        // Change STAKER need ALL STAKER_CONTROLLER\n                        setRequirement(LABEL_CODE_STAKER_CONTROLLER, WALLET_FLAG_ALL, uint8(-1)); // ALL signable\n                    }\n                    else {\n                        revert(\"Root.submit: Unknown node\");\n                    }\n                }\n                else\n                    revert(\"Root.submit: Not supported\");\n            }\n            else {\n                // Regulator create requirement\n                MultiSigRegulator(regulator).createRequirement(transactionCode, msg.sender, _to, _value, _data);\n            }\n        }\n        else {\n            // Calling self functions\n            // - 0xcde0a4f8: root.setRegulator\n            // - 0xb47876ea: root.setSigners\n            // - 0xc27dbe63: root.setStakers\n            // - 0x26bc178c: root.setStakersController\n            // - 0x51d996bf: root.setSignersController\n            if (bytes4(0xcde0a4f8) == functionId || bytes4(0xc27dbe63) == functionId) // setRegulator or setStakers\n                setRequirement(LABEL_CODE_STAKER_CONTROLLER, WALLET_FLAG_ALL, uint8(-1)); // ALL signable\n            else if (bytes4(0x26bc178c) == functionId || bytes4(0x51d996bf) == functionId) // setStakersController or setSignersController\n                setRequirement(LABEL_CODE_STAKER, WALLET_FLAG_ALL, uint8(-1)); // ALL signable\n            else if (bytes4(0xb47876ea) == functionId) // setSigners\n                setRequirement(LABEL_CODE_SIGNER_CONTROLLER, WALLET_FLAG_ALL, uint8(-1)); // ALL signable\n            else\n                revert(\"Root.submit: Not supported\");\n        }\n\n        require(0 < transactions[transactionCode].totalRequired, \"Root.submit: Requirement is empty\");\n\n        // Create transaction structure\n        transactions[transactionCode] = Transaction({\n            status: TRANSACTION_STATUS_PENDING,\n            totalRequired: transactions[transactionCode].totalRequired,\n            to: _to,\n            value: _value,\n            data: _data,\n            reason: \"\"\n        });\n\n        emit Submission(transactionCode);\n\n        // Confirm transaction if eligible and signable\n        if (isEligible(transactionCode, msg.sender) && isSignable(transactionCode, msg.sender))\n            confirmTransaction(transactionCode, transactions[transactionCode]);\n\n        return transactionCode;\n    }\n\n    function confirm(uint256 _transactionCode) external\n        onlyWallet\n        onlyEligible(_transactionCode)\n        onlySignable(_transactionCode)\n        returns (bool)\n    {\n        Transaction storage transaction = transactions[_transactionCode];\n\n        return confirmTransaction(_transactionCode, transaction);\n    }\n\n    function revoke(uint256 _transactionCode) external\n        onlyWallet\n        onlyEligible(_transactionCode)\n        returns (bool)\n    {\n        require(TRANSACTION_STATUS_PENDING == transactions[_transactionCode].status, \"Root.revoke: Transaction has been completed\");\n        transactions[_transactionCode].status = TRANSACTION_STATUS_REVOKED;\n\n        emit Revocation(msg.sender, _transactionCode);\n        return true;\n    }\n\n    function confirmTransaction(uint256 _transactionCode, Transaction storage _transaction) private\n        returns (bool)\n    {\n        TransactionRequirement storage requirement = requirements[_transactionCode][walletToLabelCodes[msg.sender]];\n        require(0 != requirement.flag && 0 != requirement.required, \"Root.confirmTransaction: Requirement is empty\");\n\n        // Prevent duplicated confirmation\n        require(!confirmations[_transactionCode][msg.sender], \"root.confirmTransaction: Duplicated confirmation\");\n        confirmations[_transactionCode][msg.sender] = true;\n\n        requirement.required = requirement.required.sub(1);\n        _transaction.totalRequired = _transaction.totalRequired.sub(1);\n\n        emit Confirmation(msg.sender, _transactionCode);\n\n        return executeTransaction(_transactionCode, _transaction);\n    }\n\n    function executeTransaction(uint256 _transactionCode, Transaction storage _transaction) private\n        returns (bool)\n    {\n        require(TRANSACTION_STATUS_PENDING == _transaction.status, \"Root.executeTransaction: Status not active\");\n\n        if (0 == _transaction.totalRequired) {\n            _transaction.status = TRANSACTION_STATUS_EXECUTED;\n\n            // Perform remote call\n            (bool success, bytes memory returnData) = _transaction.to.call.value(_transaction.value)(_transaction.data);\n\n            if (success)\n                emit Execution(_transactionCode);\n            else {\n                // Check the error string is available or not\n                if (0 == returnData.length || bytes4(0x08c379a0) != convertBytesToBytes4(returnData))\n                    _transaction.reason = \"Root.executeTransaction: Function call failed\";\n                else {\n                    bytes memory bytesArray = new bytes(returnData.length);\n                    for (uint256 i = 0; i < returnData.length.sub(4); i = i.add(1)) {\n                        bytesArray[i] = returnData[i.add(4)];\n                    }\n\n                    (string memory reason) = abi.decode(bytesArray, (string));\n                    _transaction.reason = reason;\n                }\n\n                _transaction.status = TRANSACTION_STATUS_FAILURE;\n                emit ExecutionFailure(_transactionCode);\n            }\n\n            return success;\n        }\n\n        return true;\n    }\n\n    function setRegulator(address _addressOf) external\n    {\n        if (address(0) != regulator)\n            require(msg.sender == address(this), \"Root.setRegulator: Access denied\");\n        \n        require(MultiSigRegulator(_addressOf).isSealed(), \"Root.setRegulator: Regulator is not sealed\");\n\n        regulator = setNode(regulator, _addressOf, false);\n        emit RegulatorChanged(regulator);\n    }\n\n    function setStakers(address _addressOf) external\n    {\n        if (address(0) != stakers)\n            require(msg.sender == address(this), \"Root.setStakers: Access denied\");\n\n        if (isContract(_addressOf))\n            require(0 < MultiSigNode(_addressOf).walletCount(), \"Root.setStakers: No wallet\");\n\n        stakers = setNode(stakers, _addressOf, true);\n        emit StakersChanged(stakers);\n    }\n\n    function setSigners(address _addressOf) external\n        returns (bool)\n    {\n        if (address(0) != signers)\n            require(msg.sender == address(this), \"Root.setSigners: Access denied\");\n\n        // Signer node allowed to be empty\n\n        signers = setNode(signers, _addressOf, true);\n        emit SignersChanged(signers);\n        return true;\n    }\n\n    function setStakersController(address _addressOf) external\n    {\n        if (address(0) != stakersController)\n            require(msg.sender == address(this), \"Root.setStakersController: Access denied\");\n\n        if (isContract(_addressOf))\n            require(0 < MultiSigNode(_addressOf).walletCount(), \"Root.setStakersController: No wallet\");\n\n        stakersController = setNode(stakersController, _addressOf, true);\n        emit StakersControllerChanged(stakersController);\n    }\n\n    function setSignersController(address _addressOf) external\n    {\n        if (address(0) != signersController)\n            require(msg.sender == address(this), \"Root.setSignersController: Access denied\");\n\n        if (isContract(_addressOf))\n            require(0 < MultiSigNode(_addressOf).walletCount(), \"Root.setSignersController: No wallet\");\n\n        signersController = setNode(signersController, _addressOf, true);\n        emit SignersControllerChanged(signersController);\n    }\n\n    function setNode(address _from, address _to, bool needAttachment) private\n        returns (address)\n    {\n        require(address(0) != _to, \"Root.setNode: Address is empty\");\n\n        if (needAttachment) {\n            require(0 == registered[_to], \"Root.setNode: Duplicated node\");\n\n            // Remove node from list\n            if (address(0) != _from) {\n                if (isContract(_from)) {\n                    // detach node\n                    MultiSigNode(_from).term();\n                }\n\n                delete registered[_from];\n            }\n\n            if (isContract(_to)) {\n                // Mark address as registered node\n                registered[_to] = WALLET_TYPE_NODE;\n\n                if (needAttachment) {\n                    // Attach node (parrent address = 0x0)\n                    MultiSigNode(_to).init(address(0));\n                }\n            }\n            else {\n                // Mark address as registered wallet\n                registered[_to] = WALLET_TYPE_WALLET;\n            }\n        }\n\n        return _to;\n    }\n\n    function attachWalletOrNode(address _wallet) external\n        onlyNode\n        returns (bool)\n    {\n        require(address(0) != _wallet, \"Root.attachWalletOrNode: Wallet address is empty\");\n        require(0 == registered[_wallet], \"Root.attachWalletOrNode: Duplicated wallet address\");\n\n        bytes32 labelCode = MultiSigNode(msg.sender).labelCode();\n\n        walletToNodes[_wallet] = msg.sender;\n        walletToIndexes[_wallet] = MultiSigNode(msg.sender).walletsIndex(_wallet);\n        walletToLabelCodes[_wallet] = labelCode;\n\n        labelCodeToNodes[labelCode] = msg.sender;\n\n        if (isContract(_wallet)) {\n            // Mark address as registered node\n            registered[_wallet] = WALLET_TYPE_NODE;\n\n            // Attach node with their parent address\n            MultiSigNode(_wallet).init(msg.sender);\n        }\n        else {\n            // Mark address as registered wallet\n            registered[_wallet] = WALLET_TYPE_WALLET;\n        }\n\n        emit WalletOrNodeAttached(_wallet);\n\n        return true;\n    }\n\n    function detachWalletOrNode(address _wallet) external\n        onlyNode\n        returns (bool)\n    {\n        require(address(0) != _wallet, \"Root.detachWalletOrNode: Wallet address is empty\");\n        require(0 != registered[_wallet], \"Root.detachWalletOrNode: Wallet address is not registered\");\n\n        if (isContract(_wallet)) {\n            // Detach node with their parent\n            MultiSigNode(_wallet).term();\n\n            bytes32 labelCode = MultiSigNode(msg.sender).labelCode();\n\n            delete labelCodeToNodes[labelCode];\n        }\n\n        delete registered[_wallet];\n        delete walletToNodes[_wallet];\n        delete walletToIndexes[_wallet];\n        delete walletToLabelCodes[_wallet];\n\n        emit WalletOrNodeDetached(_wallet);\n\n        return true;\n    }\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"increaseSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"transactionLimits\",\"outputs\":[{\"name\":\"datetime\",\"type\":\"uint256\"},{\"name\":\"volume\",\"type\":\"uint256\"},{\"name\":\"upperLimit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"seal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSealed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"createRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unfreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"decreaseSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"unfreezeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"class\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"labelCode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"label\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requirementType\",\"type\":\"string\"},{\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setTransactionLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"classCode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_root\",\"type\":\"address\"},{\"name\":\"_label\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requirementType\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"TransactionLimitChanged\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b5060405162002c0538038062002c05833981018060405260608110156200003757600080fd5b810190808051906020019092919080516401000000008111156200005a57600080fd5b828101905060208101848111156200007157600080fd5b81518560018202830111640100000000821117156200008f57600080fd5b50509291906020018051640100000000811115620000ac57600080fd5b82810190506020810184811115620000c357600080fd5b8151856001820283011164010000000082111715620000e157600080fd5b50509291905050506040805190810160405280600981526020017f524547554c41544f5200000000000000000000000000000000000000000000008152508282620001706040805190810160405280600681526020017f5354414b45520000000000000000000000000000000000000000000000000000815250620004de640100000000026401000000009004565b600081905550620001c56040805190810160405280601181526020017f5354414b45525f434f4e54524f4c4c4552000000000000000000000000000000815250620004de640100000000026401000000009004565b6001819055506200021a6040805190810160405280601181526020017f5349474e45525f434f4e54524f4c4c4552000000000000000000000000000000815250620004de640100000000026401000000009004565b6002819055506200026f6040805190810160405280600681526020017f5349474e45520000000000000000000000000000000000000000000000000000815250620004de640100000000026401000000009004565b600381905550620002c46040805190810160405280600781526020017f4241434b53595300000000000000000000000000000000000000000000000000815250620004de640100000000026401000000009004565b600481905550620003196040805190810160405280600381526020017f4f50530000000000000000000000000000000000000000000000000000000000815250620004de640100000000026401000000009004565b6005819055508260069080519060200190620003379291906200055d565b508160079080519060200190620003509291906200055d565b508060089080519060200190620003699291906200055d565b506200038483620004de640100000000026401000000009004565b600981905550620003a482620004de640100000000026401000000009004565b600a819055505050508273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff161415151562000453576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f526567756c61746f723a20526f6f74206164647265737320697320656d70747981525060200191505060405180910390fd5b82600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050506200060c565b6000816040516020018082805190602001908083835b6020831015156200051b5780518252602082019150602081019050602083039250620004f4565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001209050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620005a057805160ff1916838001178555620005d1565b82800160010185558215620005d1579182015b82811115620005d0578251825591602001919060010190620005b3565b5b509050620005e09190620005e4565b5090565b6200060991905b8082111562000605576000816000905550600101620005eb565b5090565b90565b6125e9806200061c6000396000f3fe60806040526004361061011d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063046f7da2146102bf578063124fc7e0146102d65780631405ee171461033157806324bce60c1461038e5780633fb27b85146103e957806351e946d514610400578063631f98521461045157806369e92c66146104805780637284e4161461055a57806379ba5097146105ea5780637b46b80b146106015780638456cb591461065c578063869e0e6014610673578063bfb80547146106ce578063bff852fa1461071f578063c47d1a7a146107af578063cb4774c4146107da578063df4240801461086a578063e24ff744146108fa578063ebf0c71714610925578063f2fde38b1461097c575b34801561012957600080fd5b503073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156101cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526567756c61746f722e6f6e6c794d653a204163636573732064656e6965640081525060200191505060405180910390fd5b600f60009054906101000a900460ff161515610251576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f526567756c61746f722e6f6e6c795365616c65643a204e6f74207365616c656481525060200191505060405180910390fd5b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f526567756c61746f723a204e6f7420737570706f72746564000000000000000081525060200191505060405180910390fd5b3480156102cb57600080fd5b506102d46109cd565b005b3480156102e257600080fd5b5061032f600480360360408110156102f957600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b0e565b005b34801561033d57600080fd5b5061036a6004803603602081101561035457600080fd5b8101908080359060200190929190505050610c78565b60405180848152602001838152602001828152602001935050505060405180910390f35b34801561039a57600080fd5b506103e7600480360360408110156103b157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ca2565b005b3480156103f557600080fd5b506103fe610dd5565b005b34801561040c57600080fd5b5061044f6004803603602081101561042357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f62565b005b34801561045d57600080fd5b50610466611094565b604051808215151515815260200191505060405180910390f35b34801561048c57600080fd5b50610558600480360360a08110156104a357600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561051457600080fd5b82018360208201111561052657600080fd5b8035906020019184600183028401116401000000008311171561054857600080fd5b90919293919293905050506110a7565b005b34801561056657600080fd5b5061056f6115a6565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105af578082015181840152602081019050610594565b50505050905090810190601f1680156105dc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156105f657600080fd5b506105ff611644565b005b34801561060d57600080fd5b5061065a6004803603604081101561062457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061178a565b005b34801561066857600080fd5b506106716118bd565b005b34801561067f57600080fd5b506106cc6004803603604081101561069657600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506119fe565b005b3480156106da57600080fd5b5061071d600480360360208110156106f157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b68565b005b34801561072b57600080fd5b50610734611c9a565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610774578082015181840152602081019050610759565b50505050905090810190601f1680156107a15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156107bb57600080fd5b506107c4611d38565b6040518082815260200191505060405180910390f35b3480156107e657600080fd5b506107ef611d3e565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561082f578082015181840152602081019050610814565b50505050905090810190601f16801561085c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561087657600080fd5b506108f86004803603604081101561088d57600080fd5b81019080803590602001906401000000008111156108aa57600080fd5b8201836020820111156108bc57600080fd5b803590602001918460018302840111640100000000831117156108de57600080fd5b909192939192939080359060200190929190505050611ddc565b005b34801561090657600080fd5b5061090f612008565b6040518082815260200191505060405180910390f35b34801561093157600080fd5b5061093a61200e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561098857600080fd5b506109cb6004803603602081101561099f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612034565b005b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a70576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526567756c61746f722e6f6e6c794d653a204163636573732064656e6965640081525060200191505060405180910390fd5b600f60009054906101000a900460ff161515610af4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f526567756c61746f722e6f6e6c795365616c65643a204e6f74207365616c656481525060200191505060405180910390fd5b610b0c6001546001604060ff1660020a0360026121c5565b565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bb1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526567756c61746f722e6f6e6c794d653a204163636573732064656e6965640081525060200191505060405180910390fd5b600f60009054906101000a900460ff161515610c35576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f526567756c61746f722e6f6e6c795365616c65643a204e6f74207365616c656481525060200191505060405180910390fd5b610c746040805190810160405280600e81526020017f696e637265617365537570706c7900000000000000000000000000000000000081525083612289565b5050565b60106020528060005260406000206000915090508060000154908060010154908060020154905083565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d45576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526567756c61746f722e6f6e6c794d653a204163636573732064656e6965640081525060200191505060405180910390fd5b600f60009054906101000a900460ff161515610dc9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f526567756c61746f722e6f6e6c795365616c65643a204e6f74207365616c656481525060200191505060405180910390fd5b610dd16123d8565b5050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ec0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f526567756c61746f722e6f6e6c7943726561746f723a2041636365737320646581526020017f6e6965640000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600f60009054906101000a900460ff16151515610f45576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f526567756c61746f722e7365616c3a204163636573732064656e69656400000081525060200191505060405180910390fd5b6001600f60006101000a81548160ff021916908315150217905550565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611005576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526567756c61746f722e6f6e6c794d653a204163636573732064656e6965640081525060200191505060405180910390fd5b600f60009054906101000a900460ff161515611089576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f526567756c61746f722e6f6e6c795365616c65643a204e6f74207365616c656481525060200191505060405180910390fd5b6110916123d8565b50565b600f60009054906101000a900460ff1681565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611192576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f526567756c61746f722e6f6e6c79526f6f743a204163636573732064656e696581526020017f640000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b83600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600e81905550600060603073ffffffffffffffffffffffffffffffffffffffff1685858560405180838380828437808301925050509250505060006040518083038185875af1925050503d806000811461124a576040519150601f19603f3d011682016040523d82523d6000602084013e61124f565b606091505b509150915081151561159c578051600014806112d4575061126f816123f2565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166308c379a07c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b1561136d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001807f526567756c61746f722e637265617465526571756972656d656e743a2046756e81526020017f6374696f6e2063616c6c206661696c656400000000000000000000000000000081525060400191505060405180910390fd5b606081516040519080825280601f01601f1916602001820160405280156113a35781602001600182028038833980820191505090505b50905060008090505b6113c16004845161243390919063ffffffff16565b81101561148d57826113dd6004836124b890919063ffffffff16565b8151811015156113e957fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002828281518110151561144257fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506114866001826124b890919063ffffffff16565b90506113ac565b5060608180602001905160208110156114a557600080fd5b8101908080516401000000008111156114bd57600080fd5b828101905060208101848111156114d357600080fd5b81518560018202830111640100000000821117156114f057600080fd5b50509291905050509050806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611561578082015181840152602081019050611546565b50505050905090810190601f16801561158e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050505050505050565b60088054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561163c5780601f106116115761010080835404028352916020019161163c565b820191906000526020600020905b81548152906001019060200180831161161f57829003601f168201915b505050505081565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526567756c61746f722e6f6e6c794d653a204163636573732064656e6965640081525060200191505060405180910390fd5b600f60009054906101000a900460ff16151561176b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f526567756c61746f722e6f6e6c795365616c65643a204e6f74207365616c656481525060200191505060405180910390fd5b61177a600554600260016121c5565b6117886002546001806121c5565b565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561182d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526567756c61746f722e6f6e6c794d653a204163636573732064656e6965640081525060200191505060405180910390fd5b600f60009054906101000a900460ff1615156118b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f526567756c61746f722e6f6e6c795365616c65643a204e6f74207365616c656481525060200191505060405180910390fd5b6118b96123d8565b5050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611960576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526567756c61746f722e6f6e6c794d653a204163636573732064656e6965640081525060200191505060405180910390fd5b600f60009054906101000a900460ff1615156119e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f526567756c61746f722e6f6e6c795365616c65643a204e6f74207365616c656481525060200191505060405180910390fd5b6119fc6001546001604060ff1660020a0360016121c5565b565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611aa1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526567756c61746f722e6f6e6c794d653a204163636573732064656e6965640081525060200191505060405180910390fd5b600f60009054906101000a900460ff161515611b25576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f526567756c61746f722e6f6e6c795365616c65643a204e6f74207365616c656481525060200191505060405180910390fd5b611b646040805190810160405280600e81526020017f6465637265617365537570706c7900000000000000000000000000000000000081525083612289565b5050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c0b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526567756c61746f722e6f6e6c794d653a204163636573732064656e6965640081525060200191505060405180910390fd5b600f60009054906101000a900460ff161515611c8f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f526567756c61746f722e6f6e6c795365616c65643a204e6f74207365616c656481525060200191505060405180910390fd5b611c976123d8565b50565b60068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611d305780601f10611d0557610100808354040283529160200191611d30565b820191906000526020600020905b815481529060010190602001808311611d1357829003601f168201915b505050505081565b600a5481565b60078054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611dd45780601f10611da957610100808354040283529160200191611dd4565b820191906000526020600020905b815481529060010190602001808311611db757829003601f168201915b505050505081565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611e455750600f60009054906101000a900460ff16155b15611f21578060106000611e9c86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612540565b8152602001908152602001600020600201819055507f5e1fa646bb2833fce256756fad29412fbf9326d66b8c36bbdbe84816b19bdeed83838360405180806020018381526020018281038252858582818152602001925080828437600081840152601f19601f82011690508083019250505094505050505060405180910390a1612003565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611fea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001807f526567756c61746f722e7365745472616e73616374696f6e4c696d69743a204181526020017f63636573732064656e696564000000000000000000000000000000000000000081525060400191505060405180910390fd5b6120026001546001604060ff1660020a0360026121c5565b5b505050565b60095481565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156120d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526567756c61746f722e6f6e6c794d653a204163636573732064656e6965640081525060200191505060405180910390fd5b600f60009054906101000a900460ff16151561215b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f526567756c61746f722e6f6e6c795365616c65643a204e6f74207365616c656481525060200191505060405180910390fd5b6121736000546001604060ff1660020a0360016121c5565b6121aa6001546001604060ff1660020a037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6121c5565b6121c26002546001604060ff1660020a0360016121c5565b50565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166381309cdd8484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018381526020018260ff1660ff1681526020019350505050600060405180830381600087803b15801561226c57600080fd5b505af1158015612280573d6000803e3d6000fd5b50505050505050565b600061229483612540565b905060006010600083815260200190815260200160002090508060020154600010156123ba57600062015180428115156122ca57fe5b064203905081600001548114156122ff576122f28483600101546124b890919063ffffffff16565b8260010181905550612312565b8082600001819055508382600101819055505b81600101548260020154101515156123b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001807f526567756c61746f722e64656661756c74526571756972656d656e743a20457881526020017f636565646564206c696d6974000000000000000000000000000000000000000081525060400191505060405180910390fd5b505b6123d26005546001604060ff1660020a0360046121c5565b50505050565b6123f06004546001604060ff1660020a0360016121c5565b565b60008151600014156124265760007c010000000000000000000000000000000000000000000000000000000002905061242e565b602082015190505b919050565b60008282111515156124ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f5375627472616374696f6e20657863657074696f6e000000000000000000000081525060200191505060405180910390fd5b818303905092915050565b60008183019050828110151515612537576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4164646974696f6e20657863657074696f6e000000000000000000000000000081525060200191505060405180910390fd5b80905092915050565b6000816040516020018082805190602001908083835b60208310151561257b5780518252602082019150602081019050602083039250612556565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120905091905056fea165627a7a72305820c699b0ae085c9ecc390088de69ab368f46df85582b322af9b1125edf13f3ce1d002900000000000000000000000078a81946f5b221b9487ac56a96871977c1a1a357000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000009524547554c41544f5200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009526567756c61746f720000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000078a81946f5b221b9487ac56a96871977c1a1a357000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000009524547554c41544f5200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009526567756c61746f720000000000000000000000000000000000000000000000"
}