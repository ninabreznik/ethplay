{
  "address": "0xd10cbb3ca3ac21da64009dd394b3f3125243b67d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TabToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-22\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\n/**\n * @title Lockable\n * @dev Base contract which allows children to lock and unlock the ability for addresses to make transfers\n */\ncontract Lockable is Ownable {\n\n  mapping (address => bool) public lockStates;   // map between addresses and their lock state.\n\n  event Lock(address indexed accountAddress);\n  event Unlock(address indexed accountAddress);\n\n\n  /**\n   * @dev Modifier to make a function callable only when the account is in unlocked state\n   */\n  modifier whenNotLocked(address _address) {\n    require(!lockStates[_address]);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the acount is in locked state\n   */\n  modifier whenLocked(address _address) {\n    require(lockStates[_address]);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to lock the ability for an address to make transfers\n   */\n  function lock(address _address) onlyOwner public {\n      lockWorker(_address);\n  }\n\n  function lockMultiple(address[] _addresses) onlyOwner public {\n      for (uint i=0; i < _addresses.length; i++) {\n          lock(_addresses[i]);\n      }\n  }\n\n  function lockWorker(address _address) internal {\n      require(_address != owner);\n      require(this != _address);\n\n      lockStates[_address] = true;\n      Lock(_address);\n  }\n\n  /**\n   * @dev called by the owner to unlock an address in order for it to be able to make transfers\n   */\n  function unlock(address _address) onlyOwner public {\n      unlockWorker(_address);\n  }\n\n  function unlockMultiple(address[] _addresses) onlyOwner public {\n      for (uint i=0; i < _addresses.length; i++) {\n          unlock(_addresses[i]);\n      }\n  }\n\n  function unlockWorker(address _address) internal {\n      lockStates[_address] = false;\n      Unlock(_address);\n  }\n}\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic, Ownable {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    require(_value <= balances[msg.sender]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    address burner = msg.sender;\n    balances[burner] = balances[burner].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    Burn(burner, _value);\n  }\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value)  public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns  (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n/**\n * @title Pausable token\n * @dev StandardToken modified with pausable transfers.\n **/\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\n/*\n  ERC20 TAB Token smart contract implementation\n*/\ncontract TabToken is PausableToken, Lockable {\n\n  event Burn(address indexed burner, uint256 value);\n  event EtherReceived(address indexed sender, uint256 weiAmount);\n  event EtherSent(address indexed receiver, uint256 weiAmount);\n  event EtherAddressChanged(address indexed previousAddress, address newAddress);\n\n  \n  string public constant name = \"Accounting Blockchain Token\";\n  string public constant symbol = \"TAB\";\n  uint8 public constant decimals = 18;\n\n\n  address internal _etherAddress = 0x90CD914C827a12703D485E9E5fA69977E3ea866B;\n\n  //This is already exposed from BasicToken.sol as part of the standard\n  uint256 internal constant INITIAL_SUPPLY = 22000000000000000000000000000;\n\n  /**\n   * @dev Constructor that gives msg.sender all of existing tokens.\n   */\n  function TabToken() public {\n    totalSupply_ = INITIAL_SUPPLY;\n\n    //Give all initial supply to the contract.\n    balances[this] = INITIAL_SUPPLY;\n    Transfer(0x0, this, INITIAL_SUPPLY);\n\n    //From now onwards, we MUST always use transfer functions\n  }\n\n  //Fallback function - just revert any payments\n  function () payable public {\n    revert();\n  }\n\n  //Function which allows us to fund the contract with ether\n  function fund() payable public onlyOwner {\n    require(msg.sender != 0x0);\n    require(msg.value > 0);\n\n    EtherReceived(msg.sender, msg.value);\n  }\n\n  //Function which allows sending ether from contract to the hard wallet address\n  function sendEther() payable public onlyOwner {\n    require(msg.value > 0);\n    assert(_etherAddress != address(0));     //This should never happen\n\n    EtherSent(_etherAddress, msg.value);\n    _etherAddress.transfer(msg.value);\n  }\n\n  //Get the total wei in contract\n  function totalBalance() view public returns (uint256) {\n    return this.balance;\n  }\n  \n  function transferFromContract(address[] _addresses, uint256[] _values) public onlyOwner returns (bool) {\n    require(_addresses.length == _values.length);\n    \n    for (uint i=0; i < _addresses.length; i++) {\n      require(_addresses[i] != address(0));\n      require(_values[i] <= balances[this]);\n\n      // SafeMath.sub will throw if there is not enough balance.\n      balances[this] = balances[this].sub(_values[i]);\n      balances[_addresses[i]] = balances[_addresses[i]].add(_values[i]);\n      Transfer(msg.sender, _addresses[i], _values[i]);\n\n    }\n    \n    return true;\n  }\n\n  function remainingSupply() public view returns(uint256) {\n    return balances[this];\n  }\n\n  /**\n   * @dev Burns a specific amount of tokens from the contract\n   * @param amount The amount of token to be burned.\n   */\n  function burnFromContract(uint256 amount) public onlyOwner {\n    require(amount <= balances[this]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    address burner = this;\n    balances[burner] = balances[burner].sub(amount);\n    totalSupply_ = totalSupply_.sub(amount);\n    Burn(burner, amount);\n  } \n\n  function etherAddress() public view onlyOwner returns(address) {\n    return _etherAddress;\n  }\n\n  //Function which enables owner to change address which is storing the ether\n  function setEtherAddress(address newAddress) public onlyOwner {\n    require(newAddress != address(0));\n    EtherAddressChanged(_etherAddress, newAddress);\n    _etherAddress = newAddress;\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockStates\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"transferFromContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setEtherAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"lockMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"unlockMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFromContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"EtherReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"EtherSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"EtherAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"accountAddress\",\"type\":\"address\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"accountAddress\",\"type\":\"address\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60806040526004805460ff1916905560068054600160a060020a0319167390cd914c827a12703d485e9e5fa69977e3ea866b17905534801561004057600080fd5b5060008054600160a060020a031916331781556b4715f935bbeb053bf00000006002819055308083526001602090815260408085208490558051938452519193927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a3611412806100bb6000396000f3006080604052600436106101745763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146101795780630786f72b14610203578063095ea7b3146102345780630e29df221461026c57806318160ddd1461027657806323b872dd1461029d5780632f6c493c146102c7578063313ce567146102e857806337580f90146103135780633f4ba83a1461033457806351cfc7311461034957806358a50ce8146103d75780635c975abb146103f8578063661884631461040d5780636f3b47591461043157806370a08231146104865780638456cb59146104a75780638da5cb5b146104bc57806395d89b41146104d1578063a9059cbb146104e6578063ad7a672f1461050a578063b60d42881461051f578063c45a6f9814610527578063d73dd6231461057c578063da0239a6146105a0578063dd62ed3e146105b5578063f2fde38b146105dc578063f435f5a7146105fd578063fc8186841461061e575b600080fd5b34801561018557600080fd5b5061018e610636565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101c85781810151838201526020016101b0565b50505050905090810190601f1680156101f55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020f57600080fd5b5061021861066d565b60408051600160a060020a039092168252519081900360200190f35b34801561024057600080fd5b50610258600160a060020a0360043516602435610695565b604080519115158252519081900360200190f35b6102746106b9565b005b34801561028257600080fd5b5061028b61076f565b60408051918252519081900360200190f35b3480156102a957600080fd5b50610258600160a060020a0360043581169060243516604435610775565b3480156102d357600080fd5b50610274600160a060020a036004351661079b565b3480156102f457600080fd5b506102fd6107bb565b6040805160ff9092168252519081900360200190f35b34801561031f57600080fd5b50610258600160a060020a03600435166107c0565b34801561034057600080fd5b506102746107d5565b34801561035557600080fd5b506040805160206004803580820135838102808601850190965280855261025895369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506108329650505050505050565b3480156103e357600080fd5b50610274600160a060020a0360043516610a2f565b34801561040457600080fd5b50610258610ad0565b34801561041957600080fd5b50610258600160a060020a0360043516602435610ad9565b34801561043d57600080fd5b506040805160206004803580820135838102808601850190965280855261027495369593946024949385019291829185019084908082843750949750610af69650505050505050565b34801561049257600080fd5b5061028b600160a060020a0360043516610b47565b3480156104b357600080fd5b50610274610b62565b3480156104c857600080fd5b50610218610bc1565b3480156104dd57600080fd5b5061018e610bd0565b3480156104f257600080fd5b50610258600160a060020a0360043516602435610c07565b34801561051657600080fd5b5061028b610c24565b610274610c29565b34801561053357600080fd5b506040805160206004803580820135838102808601850190965280855261027495369593946024949385019291829185019084908082843750949750610c919650505050505050565b34801561058857600080fd5b50610258600160a060020a0360043516602435610cde565b3480156105ac57600080fd5b5061028b610cfb565b3480156105c157600080fd5b5061028b600160a060020a0360043581169060243516610d0e565b3480156105e857600080fd5b50610274600160a060020a0360043516610d39565b34801561060957600080fd5b50610274600160a060020a0360043516610dcd565b34801561062a57600080fd5b50610274600435610ded565b60408051808201909152601b81527f4163636f756e74696e6720426c6f636b636861696e20546f6b656e0000000000602082015281565b60008054600160a060020a0316331461068557600080fd5b50600654600160a060020a031690565b60045460009060ff16156106a857600080fd5b6106b28383610eb4565b9392505050565b600054600160a060020a031633146106d057600080fd5b600034116106dd57600080fd5b600654600160a060020a031615156106f157fe5b600654604080513481529051600160a060020a03909216917f6109e2559dfa766aaec7118351d48a523f0a4157f49c8d68749c8ac41318ad129181900360200190a2600654604051600160a060020a03909116903480156108fc02916000818181858888f1935050505015801561076c573d6000803e3d6000fd5b50565b60025490565b60045460009060ff161561078857600080fd5b610793848484610f1a565b949350505050565b600054600160a060020a031633146107b257600080fd5b61076c81611093565b601281565b60056020526000908152604090205460ff1681565b600054600160a060020a031633146107ec57600080fd5b60045460ff1615156107fd57600080fd5b6004805460ff191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b600080548190600160a060020a0316331461084c57600080fd5b825184511461085a57600080fd5b5060005b8351811015610a2557835160009085908390811061087857fe5b60209081029091010151600160a060020a0316141561089657600080fd5b3060009081526001602052604090205483518490839081106108b457fe5b6020908102909101015111156108c957600080fd5b61090283828151811015156108da57fe5b602090810290910181015130600090815260019092526040909120549063ffffffff6110dc16565b30600090815260016020526040902055825161096f9084908390811061092457fe5b9060200190602002015160016000878581518110151561094057fe5b6020908102909101810151600160a060020a03168252810191909152604001600020549063ffffffff6110ee16565b60016000868481518110151561098157fe5b6020908102909101810151600160a060020a031682528101919091526040016000205583518490829081106109b257fe5b90602001906020020151600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef85848151811015156109fe57fe5b906020019060200201516040518082815260200191505060405180910390a360010161085e565b5060019392505050565b600054600160a060020a03163314610a4657600080fd5b600160a060020a0381161515610a5b57600080fd5b60065460408051600160a060020a038481168252915191909216917fa1f51841c285f8849e9ae4528840d70adb7fa44065b78cef0f31992e9d478c41919081900360200190a26006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60045460ff1681565b60045460009060ff1615610aec57600080fd5b6106b283836110fd565b60008054600160a060020a03163314610b0e57600080fd5b5060005b8151811015610b4357610b3b8282815181101515610b2c57fe5b90602001906020020151610dcd565b600101610b12565b5050565b600160a060020a031660009081526001602052604090205490565b600054600160a060020a03163314610b7957600080fd5b60045460ff1615610b8957600080fd5b6004805460ff191660011790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600054600160a060020a031681565b60408051808201909152600381527f5441420000000000000000000000000000000000000000000000000000000000602082015281565b60045460009060ff1615610c1a57600080fd5b6106b283836111ed565b303190565b600054600160a060020a03163314610c4057600080fd5b331515610c4c57600080fd5b60003411610c5957600080fd5b60408051348152905133917f1e57e3bb474320be3d2c77138f75b7c3941292d647f5f9634e33a8e94e0e069b919081900360200190a2565b60008054600160a060020a03163314610ca957600080fd5b5060005b8151811015610b4357610cd68282815181101515610cc757fe5b9060200190602002015161079b565b600101610cad565b60045460009060ff1615610cf157600080fd5b6106b283836112d0565b3060009081526001602052604090205490565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b600054600160a060020a03163314610d5057600080fd5b600160a060020a0381161515610d6557600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a03163314610de457600080fd5b61076c81611369565b60008054600160a060020a03163314610e0557600080fd5b30600090815260016020526040902054821115610e2157600080fd5b5030600081815260016020526040902054610e42908363ffffffff6110dc16565b600160a060020a038216600090815260016020526040902055600254610e6e908363ffffffff6110dc16565b600255604080518381529051600160a060020a038316917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a25050565b336000818152600360209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b6000600160a060020a0383161515610f3157600080fd5b600160a060020a038416600090815260016020526040902054821115610f5657600080fd5b600160a060020a0384166000908152600360209081526040808320338452909152902054821115610f8657600080fd5b600160a060020a038416600090815260016020526040902054610faf908363ffffffff6110dc16565b600160a060020a038086166000908152600160205260408082209390935590851681522054610fe4908363ffffffff6110ee16565b600160a060020a038085166000908152600160209081526040808320949094559187168152600382528281203382529091522054611028908363ffffffff6110dc16565b600160a060020a03808616600081815260036020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b600160a060020a038116600081815260056020526040808220805460ff19169055517f0be774851955c26a1d6a32b13b020663a069006b4a3b643ff0b809d3182605729190a250565b6000828211156110e857fe5b50900390565b6000828201838110156106b257fe5b336000908152600360209081526040808320600160a060020a03861684529091528120548083111561115257336000908152600360209081526040808320600160a060020a0388168452909152812055611187565b611162818463ffffffff6110dc16565b336000908152600360209081526040808320600160a060020a03891684529091529020555b336000818152600360209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b6000600160a060020a038316151561120457600080fd5b3360009081526001602052604090205482111561122057600080fd5b33600090815260016020526040902054611240908363ffffffff6110dc16565b3360009081526001602052604080822092909255600160a060020a03851681522054611272908363ffffffff6110ee16565b600160a060020a0384166000818152600160209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b336000908152600360209081526040808320600160a060020a0386168452909152812054611304908363ffffffff6110ee16565b336000818152600360209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600054600160a060020a038281169116141561138457600080fd5b30600160a060020a038216141561139a57600080fd5b600160a060020a038116600081815260056020526040808220805460ff19166001179055517fc1b5f12cea7c200ad495a43bf2d4c7ba1a753343c06c339093937849de84d9139190a2505600a165627a7a72305820a959b5ce250f09283a2ee34b5fb37df6ea746e69378bb2cfd4c80a9f7d349ef70029"
}