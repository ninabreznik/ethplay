{
  "address": "0x87d9ef8951de64b7246fdb7c7d5a52760677f361",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenFaucet",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-26\n*/\n\npragma solidity ^0.4.25;\n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract ERC20 is IERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n\n  mapping (address => mapping (address => uint256)) private _allowed;\n\n  uint256 private _totalSupply;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param owner The address to query the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function transfer(address to, uint256 value) public returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    require(value <= _allowed[from][msg.sender]);\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    _transfer(from, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n  * @dev Transfer token for a specified addresses\n  * @param from The address to transfer from.\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function _transfer(address from, address to, uint256 value) internal {\n    require(value <= _balances[from]);\n    require(to != address(0));\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n\n  /**\n   * @dev Internal function that mints an amount of the token and assigns it to\n   * an account. This encapsulates the modification of balances such that the\n   * proper events are emitted.\n   * @param account The account that will receive the created tokens.\n   * @param value The amount that will be created.\n   */\n  function _mint(address account, uint256 value) internal {\n    require(account != 0);\n    _totalSupply = _totalSupply.add(value);\n    _balances[account] = _balances[account].add(value);\n    emit Transfer(address(0), account, value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burn(address account, uint256 value) internal {\n    require(account != 0);\n    require(value <= _balances[account]);\n\n    _totalSupply = _totalSupply.sub(value);\n    _balances[account] = _balances[account].sub(value);\n    emit Transfer(account, address(0), value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account, deducting from the sender's allowance for said account. Uses the\n   * internal burn function.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burnFrom(address account, uint256 value) internal {\n    require(value <= _allowed[account][msg.sender]);\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n      value);\n    _burn(account, value);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() internal {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\n// File: eth-token-recover/contracts/TokenRecover.sol\n\n/**\n * @title TokenRecover\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Allow to recover any ERC20 sent into the contract for error\n */\ncontract TokenRecover is Ownable {\n\n  /**\n   * @dev Remember that only owner can call so be careful when use on contracts generated from other contracts.\n   * @param tokenAddress The token contract address\n   * @param tokenAmount Number of tokens to be sent\n   */\n  function recoverERC20(\n    address tokenAddress,\n    uint256 tokenAmount\n  )\n    public\n    onlyOwner\n  {\n    IERC20(tokenAddress).transfer(owner(), tokenAmount);\n  }\n}\n\n// File: contracts/faucet/TokenFaucet.sol\n\n/**\n * @title TokenFaucet\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Implementation of a TokenFaucet\n */\ncontract TokenFaucet is TokenRecover {\n  using SafeMath for uint256;\n\n  // struct representing the faucet status for an account\n  struct RecipientDetail {\n    bool exists;\n    uint256 tokens;\n    uint256 lastUpdate;\n    address referral;\n  }\n\n  // struct representing the referral status\n  struct ReferralDetail {\n    uint256 tokens;\n    address[] recipients;\n  }\n\n  // the time between two tokens claim\n  uint256 private _pauseTime = 1 days;\n\n  // the token to distribute\n  ERC20 private _token;\n\n  // the daily rate of tokens distributed\n  uint256 private _dailyRate;\n\n  // the value earned by referral per mille\n  uint256 private _referralPerMille;\n\n  // the sum of distributed tokens\n  uint256 private _totalDistributedTokens;\n\n  // map of address and received token amount\n  mapping (address => RecipientDetail) private _recipientList;\n\n  // list of addresses who received tokens\n  address[] private _recipients;\n\n  // map of address and referred addresses\n  mapping (address => ReferralDetail) private _referralList;\n\n  /**\n   * @param token Address of the token being distributed\n   * @param dailyRate Daily rate of tokens distributed\n   * @param referralPerMille The value earned by referral per mille\n   */\n  constructor(\n    address token,\n    uint256 dailyRate,\n    uint256 referralPerMille\n  )\n    public\n  {\n    require(token != address(0));\n    require(dailyRate > 0);\n    require(referralPerMille > 0);\n\n    _token = ERC20(token);\n    _dailyRate = dailyRate;\n    _referralPerMille = referralPerMille;\n  }\n\n  /**\n   * @dev fallback\n   */\n  function () external payable {\n    require(msg.value == 0);\n\n    getTokens();\n  }\n\n  /**\n   * @dev function to be called to receive tokens\n   */\n  function getTokens() public {\n    // distribute tokens\n    _distributeTokens(msg.sender, address(0));\n  }\n\n  /**\n   * @dev function to be called to receive tokens\n   * @param referral Address to an account that is referring\n   */\n  function getTokensWithReferral(address referral) public {\n    require(referral != msg.sender);\n\n    // distribute tokens\n    _distributeTokens(msg.sender, referral);\n  }\n\n  /**\n   * @return the token to distribute\n   */\n  function token() public view returns (ERC20) {\n    return _token;\n  }\n\n  /**\n   * @return the daily rate of tokens distributed\n   */\n  function dailyRate() public view returns (uint256) {\n    return _dailyRate;\n  }\n\n  /**\n   * @return the value earned by referral for each recipient\n   */\n  function referralTokens() public view returns (uint256) {\n    return _dailyRate.mul(_referralPerMille).div(1000);\n  }\n\n  /**\n   * @return the sum of distributed tokens\n   */\n  function totalDistributedTokens() public view returns (uint256) {\n    return _totalDistributedTokens;\n  }\n\n  /**\n   * @param account The address to check\n   * @return received token amount for the given address\n   */\n  function receivedTokens(address account) public view returns (uint256) {\n    return _recipientList[account].tokens;\n  }\n\n  /**\n   * @param account The address to check\n   * @return last tokens received timestamp\n   */\n  function lastUpdate(address account) public view returns (uint256) {\n    return _recipientList[account].lastUpdate;\n  }\n\n  /**\n   * @param account The address to check\n   * @return time of next available claim or zero\n   */\n  function nextClaimTime(address account) public view returns (uint256) {\n    return !_recipientList[account].exists ? 0 : _recipientList[account].lastUpdate + _pauseTime;\n  }\n\n  /**\n   * @param account The address to check\n   * @return referral for given address\n   */\n  function getReferral(address account) public view returns (address) {\n    return _recipientList[account].referral;\n  }\n\n  /**\n   * @param account The address to check\n   * @return earned tokens by referrals\n   */\n  function earnedByReferral(address account) public view returns (uint256) {\n    return _referralList[account].tokens;\n  }\n\n  /**\n   * @param account The address to check\n   * @return referred addresses for given address\n   */\n  function getReferredAddresses(address account) public view returns (address[]) {\n    return _referralList[account].recipients;\n  }\n\n  /**\n   * @param account The address to check\n   * @return referred addresses for given address\n   */\n  function getReferredAddressesLength(address account) public view returns (uint) {\n    return _referralList[account].recipients.length;\n  }\n\n  /**\n   * @dev return the number of remaining tokens to distribute\n   * @return uint256\n   */\n  function remainingTokens() public view returns (uint256) {\n    return _token.balanceOf(this);\n  }\n\n  /**\n   * @return address of a recipient by list index\n   */\n  function getRecipientAddress(uint256 index) public view returns (address) {\n    return _recipients[index];\n  }\n\n  /**\n   * @dev return the recipients length\n   * @return uint\n   */\n  function getRecipientsLength() public view returns (uint) {\n    return _recipients.length;\n  }\n\n  /**\n   * @dev change daily rate and referral per mille\n   * @param newDailyRate Daily rate of tokens distributed\n   * @param newReferralPerMille The value earned by referral per mille\n   */\n  function setRates(uint256 newDailyRate, uint256 newReferralPerMille) public onlyOwner {\n    require(newDailyRate > 0);\n    require(newReferralPerMille > 0);\n\n    _dailyRate = newDailyRate;\n    _referralPerMille = newReferralPerMille;\n  }\n\n  /**\n   * @dev distribute tokens\n   * @param account Address being distributing\n   * @param referral Address to an account that is referring\n   */\n  function _distributeTokens(address account, address referral) internal {\n    require(nextClaimTime(account) <= block.timestamp); // solium-disable-line security/no-block-members\n\n    // check if recipient exists\n    if (!_recipientList[account].exists) {\n      _recipients.push(account);\n      _recipientList[account].exists = true;\n\n      // check if valid referral\n      if (referral != address(0)) {\n        _recipientList[account].referral = referral;\n        _referralList[referral].recipients.push(account);\n      }\n    }\n\n    // update recipient status\n    _recipientList[account].lastUpdate = block.timestamp; // solium-disable-line security/no-block-members\n    _recipientList[account].tokens = _recipientList[account].tokens.add(_dailyRate);\n\n    // update faucet status\n    _totalDistributedTokens = _totalDistributedTokens.add(_dailyRate);\n\n    // transfer tokens to recipient\n    _token.transfer(account, _dailyRate);\n\n    // check referral\n    if (_recipientList[account].referral != address(0)) {\n      // referral is only the first one referring\n      address firstReferral = _recipientList[account].referral;\n\n      uint256 referralEarnedTokens = referralTokens();\n\n      // update referral status\n      _referralList[firstReferral].tokens = _referralList[firstReferral].tokens.add(referralEarnedTokens);\n\n      // update faucet status\n      _totalDistributedTokens = _totalDistributedTokens.add(referralEarnedTokens);\n\n      // transfer tokens to referral\n      _token.transfer(firstReferral, referralEarnedTokens);\n    }\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRecipientAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getReferral\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getReferredAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getReferredAddressesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"nextClaimTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dailyRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDailyRate\",\"type\":\"uint256\"},{\"name\":\"newReferralPerMille\",\"type\":\"uint256\"}],\"name\":\"setRates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lastUpdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"getTokensWithReferral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecipientsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"receivedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earnedByReferral\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"dailyRate\",\"type\":\"uint256\"},{\"name\":\"referralPerMille\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "60806040526201518060015534801561001757600080fd5b50604051606080610dc483398101604081815282516020840151919093015160008054600160a060020a031916331780825592939192600160a060020a0316917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3600160a060020a038316151561009157600080fd5b6000821161009e57600080fd5b600081116100ab57600080fd5b60028054600160a060020a031916600160a060020a039490941693909317909255600355600455610ce3806100e16000396000f3006080604052600436106101275763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166318337012811461013c5780633b0f0f2f14610170578063661f905b146101915780636f1bfbb61461020257806370f23da714610235578063715018a61461025657806374df19c31461026b5780638980f11f146102805780638da5cb5b146102a45780638f32d59b146102b95780639303b0b8146102e2578063aa6ca808146102f7578063ac6af2801461030c578063bf58390314610327578063cb03fb1e1461033c578063d19c08ef1461035d578063db5084ab1461037e578063dbc3e35b14610393578063e2fdc845146103a8578063f2fde38b146103c9578063fc0c546a146103ea578063fea5ed16146103ff575b341561013257600080fd5b61013a610420565b005b34801561014857600080fd5b5061015460043561042d565b60408051600160a060020a039092168252519081900360200190f35b34801561017c57600080fd5b50610154600160a060020a0360043516610459565b34801561019d57600080fd5b506101b2600160a060020a036004351661047a565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156101ee5781810151838201526020016101d6565b505050509050019250505060405180910390f35b34801561020e57600080fd5b50610223600160a060020a03600435166104f3565b60408051918252519081900360200190f35b34801561024157600080fd5b50610223600160a060020a0360043516610511565b34801561026257600080fd5b5061013a610560565b34801561027757600080fd5b506102236105ca565b34801561028c57600080fd5b5061013a600160a060020a03600435166024356105d0565b3480156102b057600080fd5b50610154610696565b3480156102c557600080fd5b506102ce6106a5565b604080519115158252519081900360200190f35b3480156102ee57600080fd5b506102236106b6565b34801561030357600080fd5b5061013a610420565b34801561031857600080fd5b5061013a6004356024356106e6565b34801561033357600080fd5b5061022361071e565b34801561034857600080fd5b50610223600160a060020a03600435166107b4565b34801561036957600080fd5b5061013a600160a060020a03600435166107d2565b34801561038a57600080fd5b506102236107f5565b34801561039f57600080fd5b506102236107fb565b3480156103b457600080fd5b50610223600160a060020a0360043516610801565b3480156103d557600080fd5b5061013a600160a060020a036004351661081f565b3480156103f657600080fd5b5061015461083b565b34801561040b57600080fd5b50610223600160a060020a036004351661084a565b61042b336000610865565b565b600060078281548110151561043e57fe5b600091825260209091200154600160a060020a031692915050565b600160a060020a039081166000908152600660205260409020600301541690565b600160a060020a0381166000908152600860209081526040918290206001018054835181840281018401909452808452606093928301828280156104e757602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116104c9575b50505050509050919050565b600160a060020a031660009081526008602052604090206001015490565b600160a060020a03811660009081526006602052604081205460ff161561055757600154600160a060020a0383166000908152600660205260409020600201540161055a565b60005b92915050565b6105686106a5565b151561057357600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b60035490565b6105d86106a5565b15156105e357600080fd5b81600160a060020a031663a9059cbb6105fa610696565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561066657600080fd5b505af115801561067a573d6000803e3d6000fd5b505050506040513d602081101561069057600080fd5b50505050565b600054600160a060020a031690565b600054600160a060020a0316331490565b60006106e16103e86106d5600454600354610bcc90919063ffffffff16565b9063ffffffff610c0516565b905090565b6106ee6106a5565b15156106f957600080fd5b6000821161070657600080fd5b6000811161071357600080fd5b600391909155600455565b600254604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600092600160a060020a0316916370a0823191602480830192602092919082900301818787803b15801561078357600080fd5b505af1158015610797573d6000803e3d6000fd5b505050506040513d60208110156107ad57600080fd5b5051905090565b600160a060020a031660009081526006602052604090206002015490565b600160a060020a0381163314156107e857600080fd5b6107f23382610865565b50565b60055490565b60075490565b600160a060020a031660009081526006602052604090206001015490565b6108276106a5565b151561083257600080fd5b6107f281610c28565b600254600160a060020a031690565b600160a060020a031660009081526008602052604090205490565b6000804261087285610511565b111561087d57600080fd5b600160a060020a03841660009081526006602052604090205460ff16151561097c576007805460018082019092557fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038781169182179092556000908152600660205260409020805460ff191690921790915583161561097c57600160a060020a038085166000818152600660209081526040808320600301805495891673ffffffffffffffffffffffffffffffffffffffff1996871681179091558352600882528220600190810180549182018155835291200180549092161790555b600160a060020a03841660009081526006602052604090204260028201556003546001909101546109b29163ffffffff610ca516565b600160a060020a0385166000908152600660205260409020600101556003546005546109e39163ffffffff610ca516565b600555600254600354604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a03888116600483015260248201939093529051919092169163a9059cbb9160448083019260209291908290030181600087803b158015610a5957600080fd5b505af1158015610a6d573d6000803e3d6000fd5b505050506040513d6020811015610a8357600080fd5b5050600160a060020a03848116600090815260066020526040902060030154161561069057600160a060020a03808516600090815260066020526040902060030154169150610ad06106b6565b600160a060020a038316600090815260086020526040902054909150610afc908263ffffffff610ca516565b600160a060020a038316600090815260086020526040902055600554610b28908263ffffffff610ca516565b600555600254604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b158015610b9a57600080fd5b505af1158015610bae573d6000803e3d6000fd5b505050506040513d6020811015610bc457600080fd5b505050505050565b600080831515610bdf5760009150610bfe565b50828202828482811515610bef57fe5b0414610bfa57600080fd5b8091505b5092915050565b600080808311610c1457600080fd5b8284811515610c1f57fe5b04949350505050565b600160a060020a0381161515610c3d57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082820183811015610bfa57600080fd00a165627a7a723058202098e72278c4dff3ef9274de7eae036b9f29d50c999ebd224accc4f466deed88002900000000000000000000000093a7174dafd31d13400cd9fa01f4e5b5baa00d390000000000000000000000000000000000000000000000004563918244f400000000000000000000000000000000000000000000000000000000000000000064",
  "constructorArguments": "00000000000000000000000093a7174dafd31d13400cd9fa01f4e5b5baa00d390000000000000000000000000000000000000000000000004563918244f400000000000000000000000000000000000000000000000000000000000000000064"
}