{
  "address": "0xbea72b7da261bb0a488a5d07f01b16516ba2edef",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Project424",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-15\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * Website: www.project424.us\n *\n * Telegram: https://t.me/joinchat/HtqvCxCb_B0jVIJyq3Tdgg\n *\n * RECOMMENDED GAS LIMIT: 200000\n * RECOMMENDED GAS PRICE: https://ethgasstation.info/\n */\n\nlibrary SafeMath {\n\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        if (_a == 0) {\n            return 0;\n        }\n\n        uint256 c = _a * _b;\n        require(c / _a == _b);\n\n        return c;\n    }\n\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b > 0);\n        uint256 c = _a / _b;\n\n        return c;\n    }\n\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b <= _a);\n        uint256 c = _a - _b;\n\n        return c;\n    }\n\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        uint256 c = _a + _b;\n        require(c >= _a);\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ncontract InvestorsStorage {\n    address private owner;\n\n    mapping (address => Investor) private investors;\n\n    struct Investor {\n        uint deposit;\n        uint checkpoint;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function updateInfo(address _address, uint _value) external onlyOwner {\n        investors[_address].deposit += _value;\n        investors[_address].checkpoint = block.timestamp;\n    }\n\n    function updateCheckpoint(address _address) external onlyOwner {\n        investors[_address].checkpoint = block.timestamp;\n    }\n\n    function d(address _address) external view onlyOwner returns(uint) {\n        return investors[_address].deposit;\n    }\n\n    function c(address _address) external view onlyOwner returns(uint) {\n        return investors[_address].checkpoint;\n    }\n\n    function getInterest(address _address) external view onlyOwner returns(uint) {\n        if (investors[_address].deposit < 4240000000000000000) {\n            return 424;\n        } else {\n            return 600;\n        }\n    }\n}\n\ncontract Project424 {\n    using SafeMath for uint;\n\n    address public owner;\n    address admin;\n    address marketing;\n\n    uint waveStartUp;\n    uint nextPayDay;\n\n    event LogInvestment(address indexed _addr, uint _value);\n    event LogPayment(address indexed _addr, uint _value);\n    event LogReferralInvestment(address indexed _referral, address indexed _referrer, uint _value);\n    event LogNewWave(uint _waveStartUp);\n\n    InvestorsStorage private x;\n\n    modifier notOnPause() {\n        require(waveStartUp <= block.timestamp);\n        _;\n    }\n\n    function renounceOwnership() external {\n        require(msg.sender == owner);\n        owner = 0x0;\n    }\n\n    function bytesToAddress(bytes _source) internal pure returns(address parsedReferrer) {\n        assembly {\n            parsedReferrer := mload(add(_source,0x14))\n        }\n        return parsedReferrer;\n    }\n\n    function toReferrer(uint _value) internal {\n        address _referrer = bytesToAddress(bytes(msg.data));\n        if (_referrer != msg.sender) {\n            _referrer.transfer(_value / 20);\n            emit LogReferralInvestment(msg.sender, _referrer, _value);\n        }\n    }\n\n    constructor(address _admin, address _marketing) public {\n        owner = msg.sender;\n        admin = _admin;\n        marketing = _marketing;\n        x = new InvestorsStorage();\n    }\n\n    function getInfo(address _address) external view returns(uint deposit, uint amountToWithdraw) {\n        deposit = x.d(_address);\n        amountToWithdraw = block.timestamp.sub(x.c(_address)).div(1 days).mul(x.d(_address).mul(x.getInterest(_address)).div(10000));\n    }\n\n    function() external payable {\n        if (msg.value == 0) {\n            withdraw();\n        } else {\n            invest();\n        }\n    }\n\n    function invest() notOnPause public payable {\n\n        admin.transfer(msg.value * 5 / 100);\n        marketing.transfer(msg.value / 10);\n\n        if (x.d(msg.sender) > 0) {\n            withdraw();\n        }\n\n        x.updateInfo(msg.sender, msg.value);\n\n        if (msg.data.length == 20) {\n            toReferrer(msg.value);\n        }\n\n        emit LogInvestment(msg.sender, msg.value);\n    }\n\n    function withdraw() notOnPause public {\n\n        if (address(this).balance < 100000000000000000) {\n            nextWave();\n            return;\n        }\n\n        uint _payout = block.timestamp.sub(x.c(msg.sender)).div(1 days).mul(x.d(msg.sender).mul(x.getInterest(msg.sender)).div(10000));\n        x.updateCheckpoint(msg.sender);\n\n        if (_payout > 0) {\n            msg.sender.transfer(_payout);\n            emit LogPayment(msg.sender, _payout);\n        }\n    }\n\n    function nextWave() private {\n        x = new InvestorsStorage();\n        waveStartUp = block.timestamp + 7 days;\n        emit LogNewWave(waveStartUp);\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getInfo\",\"outputs\":[{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"amountToWithdraw\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_marketing\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LogInvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LogPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LogReferralInvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_waveStartUp\",\"type\":\"uint256\"}],\"name\":\"LogNewWave\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b506040516040806110b18339810160405280516020909101516000805433600160a060020a031991821617909155600180548216600160a060020a03808616919091179091556002805490921690831617905561006b6100b0565b604051809103906000f080158015610087573d6000803e3d6000fd5b5060058054600160a060020a031916600160a060020a0392909216919091179055506100c09050565b6040516102c480610ded83390190565b610d1e806100cf6000396000f30060806040526004361061006c5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633ccfd60b811461008a578063715018a61461009f5780638da5cb5b146100b4578063e8b5e51f14610080578063ffdd5cf1146100e5575b3415156100805761007b61011f565b610088565b61008861042c565b005b34801561009657600080fd5b5061008861011f565b3480156100ab57600080fd5b5061008861060f565b3480156100c057600080fd5b506100c9610645565b60408051600160a060020a039092168252519081900360200190f35b3480156100f157600080fd5b50610106600160a060020a0360043516610654565b6040805192835260208301919091528051918290030190f35b6000426003541115151561013257600080fd5b67016345785d8a0000303110156101505761014b610846565b610429565b600554604080517f7aaa3470000000000000000000000000000000000000000000000000000000008152336004820152905161033b92610283926127109261027792600160a060020a031691637aaa34709160248083019260209291908290030181600087803b1580156101c357600080fd5b505af11580156101d7573d6000803e3d6000fd5b505050506040513d60208110156101ed57600080fd5b50516005546040805160e060020a63d573a0030281523360048201529051600160a060020a039092169163d573a003916024808201926020929091908290030181600087803b15801561023f57600080fd5b505af1158015610253573d6000803e3d6000fd5b505050506040513d602081101561026957600080fd5b50519063ffffffff6108d816565b9063ffffffff61091116565b600554604080517f04ee65c0000000000000000000000000000000000000000000000000000000008152336004820152905161032f92620151809261027792600160a060020a03909216916304ee65c0916024808201926020929091908290030181600087803b1580156102f657600080fd5b505af115801561030a573d6000803e3d6000fd5b505050506040513d602081101561032057600080fd5b5051429063ffffffff61093416565b9063ffffffff6108d816565b600554604080517f702f5e190000000000000000000000000000000000000000000000000000000081523360048201529051929350600160a060020a039091169163702f5e199160248082019260009290919082900301818387803b1580156103a357600080fd5b505af11580156103b7573d6000803e3d6000fd5b50505050600081111561042957604051339082156108fc029083906000818181858888f193505050501580156103f1573d6000803e3d6000fd5b5060408051828152905133917f27a391d95d67e3626574fb5fbe3532bb7366e9254957b1f0e840953c248b2aa8919081900360200190a25b50565b60035442101561043b57600080fd5b600154604051600160a060020a03909116906064346005020480156108fc02916000818181858888f1935050505015801561047a573d6000803e3d6000fd5b50600254604051600160a060020a0390911690600a340480156108fc02916000818181858888f193505050501580156104b7573d6000803e3d6000fd5b506005546040805160e060020a63d573a0030281523360048201529051600092600160a060020a03169163d573a00391602480830192602092919082900301818787803b15801561050757600080fd5b505af115801561051b573d6000803e3d6000fd5b505050506040513d602081101561053157600080fd5b505111156105415761054161011f565b600554604080517face979220000000000000000000000000000000000000000000000000000000081523360048201523460248201529051600160a060020a039092169163ace979229160448082019260009290919082900301818387803b1580156105ac57600080fd5b505af11580156105c0573d6000803e3d6000fd5b505050601436141590506105d7576105d73461094b565b60408051348152905133917fc74590e3281392e897f5c0f45530951cfe0db0e86c76d65af861e80b925871a4919081900360200190a2565b600054600160a060020a0316331461062657600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031681565b6005546040805160e060020a63d573a003028152600160a060020a03848116600483015291516000938493169163d573a00391602480830192602092919082900301818787803b1580156106a757600080fd5b505af11580156106bb573d6000803e3d6000fd5b505050506040513d60208110156106d157600080fd5b5051600554604080517f7aaa3470000000000000000000000000000000000000000000000000000000008152600160a060020a038781166004830152915193955061083f936107cb936127109361027793911691637aaa3470916024808201926020929091908290030181600087803b15801561074d57600080fd5b505af1158015610761573d6000803e3d6000fd5b505050506040513d602081101561077757600080fd5b50516005546040805160e060020a63d573a003028152600160a060020a038b811660048301529151919092169163d573a0039160248083019260209291908290030181600087803b15801561023f57600080fd5b600554604080517f04ee65c0000000000000000000000000000000000000000000000000000000008152600160a060020a038881166004830152915161032f936201518093610277939116916304ee65c0916024808201926020929091908290030181600087803b1580156102f657600080fd5b9050915091565b61084e610a1e565b604051809103906000f08015801561086a573d6000803e3d6000fd5b506005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790554262093a8001600381905560408051918252517f5988b0a8d3b8ed2d9961af381f4cf0619bd49b20e1e5c8db63322f6d0b789360916020908290030190a1565b6000808315156108eb576000915061090a565b508282028284828115156108fb57fe5b041461090657600080fd5b8091505b5092915050565b60008080831161092057600080fd5b828481151561092b57fe5b04949350505050565b6000808383111561094457600080fd5b5050900390565b60006109876000368080601f01602080910402602001604051908101604052809392919081815260200183838082843750610a17945050505050565b9050600160a060020a0381163314610a1357604051600160a060020a038216906014840480156108fc02916000818181858888f193505050501580156109d1573d6000803e3d6000fd5b50604080518381529051600160a060020a0383169133917fa249146257bee059355926b54611f49f096a7b1ed415e8011b89838f96e5fc519181900360200190a35b5050565b6014015190565b6040516102c480610a2f833901905600608060405234801561001057600080fd5b5060008054600160a060020a03191633179055610292806100326000396000f30060806040526004361061006c5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166304ee65c08114610071578063702f5e19146100a45780637aaa3470146100c7578063ace97922146100e8578063d573a0031461010c575b600080fd5b34801561007d57600080fd5b50610092600160a060020a036004351661012d565b60408051918252519081900360200190f35b3480156100b057600080fd5b506100c5600160a060020a0360043516610169565b005b3480156100d357600080fd5b50610092600160a060020a03600435166101a0565b3480156100f457600080fd5b506100c5600160a060020a03600435166024356101f2565b34801561011857600080fd5b50610092600160a060020a0360043516610232565b60008054600160a060020a0316331461014557600080fd5b50600160a060020a038116600090815260016020819052604090912001545b919050565b600054600160a060020a0316331461018057600080fd5b600160a060020a0316600090815260016020819052604090912042910155565b60008054600160a060020a031633146101b857600080fd5b600160a060020a038216600090815260016020526040902054673ad7818917a8000011156101e957506101a8610164565b50610258610164565b600054600160a060020a0316331461020957600080fd5b600160a060020a0390911660009081526001602081905260409091208054909201825542910155565b60008054600160a060020a0316331461024a57600080fd5b50600160a060020a0316600090815260016020526040902054905600a165627a7a72305820d1507392a8e41bfb2520c7d7e9683f50440c453b4bff250a42435a9dc00580f90029a165627a7a7230582093bac6eae1175d1a58efde6c49099e455c03d2e09dba46eddf5054d7f03f512e0029608060405234801561001057600080fd5b5060008054600160a060020a03191633179055610292806100326000396000f30060806040526004361061006c5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166304ee65c08114610071578063702f5e19146100a45780637aaa3470146100c7578063ace97922146100e8578063d573a0031461010c575b600080fd5b34801561007d57600080fd5b50610092600160a060020a036004351661012d565b60408051918252519081900360200190f35b3480156100b057600080fd5b506100c5600160a060020a0360043516610169565b005b3480156100d357600080fd5b50610092600160a060020a03600435166101a0565b3480156100f457600080fd5b506100c5600160a060020a03600435166024356101f2565b34801561011857600080fd5b50610092600160a060020a0360043516610232565b60008054600160a060020a0316331461014557600080fd5b50600160a060020a038116600090815260016020819052604090912001545b919050565b600054600160a060020a0316331461018057600080fd5b600160a060020a0316600090815260016020819052604090912042910155565b60008054600160a060020a031633146101b857600080fd5b600160a060020a038216600090815260016020526040902054673ad7818917a8000011156101e957506101a8610164565b50610258610164565b600054600160a060020a0316331461020957600080fd5b600160a060020a0390911660009081526001602081905260409091208054909201825542910155565b60008054600160a060020a0316331461024a57600080fd5b50600160a060020a0316600090815260016020526040902054905600a165627a7a72305820d1507392a8e41bfb2520c7d7e9683f50440c453b4bff250a42435a9dc00580f90029000000000000000000000000282c7c701feebfb0fe3129ae0fecfed31f47a38000000000000000000000000047335c3d3de956c01e2ea7d354e48cd03c006b78",
  "constructorArguments": "000000000000000000000000282c7c701feebfb0fe3129ae0fecfed31f47a38000000000000000000000000047335c3d3de956c01e2ea7d354e48cd03c006b78"
}