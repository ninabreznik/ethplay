{
  "address": "0x2bec82472a1f3ad941a94fb9d5512c9e51ec979d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenizedProperty",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-20\n*/\n\npragma solidity 0.4.25;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  uint256 internal totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n/**\n * @title DividendDistributingToken\n * @dev An ERC20-compliant token that distributes any Ether it receives to its token holders proportionate to their share.\n *\n * Implementation exactly based on: https://blog.pennyether.com/posts/realtime-dividend-token.html#the-token\n *\n * The user is responsible for when they transact tokens (transacting before a dividend payout is probably not ideal).\n *\n * `TokenizedProperty` inherits from `this` and is the front-facing contract representing the rights / ownership to a property.\n */\ncontract DividendDistributingToken is StandardToken {\n  using SafeMath for uint256;\n\n  uint256 public constant POINTS_PER_WEI = uint256(10) ** 32;\n\n  uint256 public pointsPerToken = 0;\n  mapping(address => uint256) public credits;\n  mapping(address => uint256) public lastPointsPerToken;\n\n  event DividendsDeposited(address indexed payer, uint256 amount);\n  event DividendsCollected(address indexed collector, uint256 amount);\n\n  function collectOwedDividends() public {\n    creditAccount(msg.sender);\n\n    uint256 _wei = credits[msg.sender] / POINTS_PER_WEI;\n\n    credits[msg.sender] = 0;\n\n    msg.sender.transfer(_wei);\n    emit DividendsCollected(msg.sender, _wei);\n  }\n\n  function creditAccount(address _account) internal {\n    uint256 amount = balanceOf(_account).mul(pointsPerToken.sub(lastPointsPerToken[_account]));\n    credits[_account] = credits[_account].add(amount);\n    lastPointsPerToken[_account] = pointsPerToken;\n  }\n\n  function deposit(uint256 _value) internal {\n    pointsPerToken = pointsPerToken.add(_value.mul(POINTS_PER_WEI) / totalSupply_);\n    emit DividendsDeposited(msg.sender, _value);\n  }\n}\n\n\n\ncontract LandRegistryInterface {\n  function getProperty(string _eGrid) public view returns (address property);\n}\n\n\ncontract LandRegistryProxyInterface {\n  function owner() public view returns (address);\n  function landRegistry() public view returns (LandRegistryInterface);\n}\n\n\ncontract WhitelistInterface {\n  function checkRole(address _operator, string _permission) public view;\n}\n\n\ncontract WhitelistProxyInterface {\n  function whitelist() public view returns (WhitelistInterface);\n}\n\n\n/**\n * @title TokenizedProperty\n * @dev An asset-backed security token (a property as identified by its E-GRID (a UUID) in the (Swiss) land registry).\n *\n * Ownership of `this` must be transferred to `ShareholderDAO` before blockimmo will verify `this` as legitimate in `LandRegistry`.\n * Until verified legitimate, transferring tokens is not possible (locked).\n *\n * Tokens can be freely listed on exchanges (especially decentralized / 0x).\n *\n * `this.owner` can make two suggestions that blockimmo will always (try) to take: `setManagementCompany` and `untokenize`.\n * `this.owner` can also transfer or rescind ownership.\n * See `ShareholderDAO` documentation for more information...\n *\n * Our legal framework requires a `TokenizedProperty` must be possible to `untokenize`.\n * Un-tokenizing is also the first step to upgrading or an outright sale of `this`.\n *\n * For both:\n *   1. `owner` emits an `UntokenizeRequest`\n *   2. blockimmo removes `this` from the `LandRegistry`\n *\n * Upgrading:\n *   3. blockimmo migrates `this` to the new `TokenizedProperty` (ie perfectly preserving `this.balances`)\n *   4. blockimmo attaches `owner` to the property (1)\n *   5. blockimmo adds the property to `LandRegistry`\n *\n * Outright sale:\n *   3. blockimmo deploys a new `TokenizedProperty` and adds it to the `LandRegistry`\n *   4. blockimmo configures and deploys a `TokenSale` for the property with `TokenSale.wallet == address(this)`\n *      (raised Ether distributed to current token holders as a dividend payout)\n *        - if the sale is unsuccessful, the new property is removed from the `LandRegistry`, and `this` is added back\n */\ncontract TokenizedProperty is Ownable, DividendDistributingToken {\n  address public constant LAND_REGISTRY_PROXY_ADDRESS = 0xe72AD2A335AE18e6C7cdb6dAEB64b0330883CD56;  // 0xec8be1a5630364292e56d01129e8ee8a9578d7d8\n  address public constant WHITELIST_PROXY_ADDRESS = 0x7223b032180CDb06Be7a3D634B1E10032111F367;  // 0xc4c7497fbe1a886841a195a5d622cd60053c1376;\n\n  LandRegistryProxyInterface public registryProxy = LandRegistryProxyInterface(LAND_REGISTRY_PROXY_ADDRESS);\n  WhitelistProxyInterface public whitelistProxy = WhitelistProxyInterface(WHITELIST_PROXY_ADDRESS);\n\n  uint8 public constant decimals = 18;\n  uint256 public constant NUM_TOKENS = 1000000;\n  string public symbol;\n\n  string public managementCompany;\n  string public name;\n\n  mapping(address => uint256) public lastTransferBlock;\n  mapping(address => uint256) public minTransferAccepted;\n\n  event MinTransferSet(address indexed account, uint256 minTransfer);\n  event ManagementCompanySet(string managementCompany);\n  event UntokenizeRequest();\n  event Generic(string generic);\n\n  modifier isValid() {\n    LandRegistryInterface registry = LandRegistryInterface(registryProxy.landRegistry());\n    require(registry.getProperty(name) == address(this), \"invalid TokenizedProperty\");\n    _;\n  }\n\n  constructor(string _eGrid, string _grundstuckNumber) public {\n    require(bytes(_eGrid).length > 0, \"eGrid must be non-empty string\");\n    require(bytes(_grundstuckNumber).length > 0, \"grundstuck must be non-empty string\");\n    name = _eGrid;\n    symbol = _grundstuckNumber;\n\n    totalSupply_ = NUM_TOKENS * (uint256(10) ** decimals);\n    balances[msg.sender] = totalSupply_;\n    emit Transfer(address(0), msg.sender, totalSupply_);\n  }\n\n  function () public payable {  // dividends\n    uint256 value = msg.value;\n    require(value > 0, \"must send wei in fallback\");\n\n    address blockimmo = registryProxy.owner();\n    if (blockimmo != address(0)) {  // 1% blockimmo fee\n      uint256 fee = value / 100;\n      blockimmo.transfer(fee);\n      value = value.sub(fee);\n    }\n\n    deposit(value);\n  }\n\n  function setManagementCompany(string _managementCompany) public onlyOwner isValid {\n    managementCompany = _managementCompany;\n    emit ManagementCompanySet(managementCompany);\n  }\n\n  function untokenize() public onlyOwner isValid {\n    emit UntokenizeRequest();\n  }\n\n  function emitGenericProposal(string _generic) public onlyOwner isValid {\n    emit Generic(_generic);\n  }\n\n  function transfer(address _to, uint256 _value) public isValid returns (bool) {\n    require(_value >= minTransferAccepted[_to], \"tokens transferred less than _to's minimum accepted transfer\");\n    transferBookKeeping(msg.sender, _to);\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public isValid returns (bool) {\n    require(_value >= minTransferAccepted[_to], \"tokens transferred less than _to's minimum accepted transfer\");\n    transferBookKeeping(_from, _to);\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function setMinTransfer(uint256 _amount) public {\n    minTransferAccepted[msg.sender] = _amount;\n    emit MinTransferSet(msg.sender, _amount);\n  }\n\n  function transferBookKeeping(address _from, address _to) internal {\n    whitelistProxy.whitelist().checkRole(_to, \"authorized\");\n\n    creditAccount(_from);  // required for dividends...\n    creditAccount(_to);\n\n    lastTransferBlock[_from] = block.number;  //required for voting\n    lastTransferBlock[_to] = block.number;\n  }\n}",
  "bytecode": "6080604052600060045560078054600160a060020a031990811673e72ad2a335ae18e6c7cdb6daeb64b0330883cd561790915560088054909116737223b032180cdb06be7a3d634b1e10032111f3671790553480156200005e57600080fd5b506040516200227838038062002278833981016040528051602082015160008054600160a060020a03191633178155918301805190939190910191106200010657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f6547726964206d757374206265206e6f6e2d656d70747920737472696e670000604482015290519081900360640190fd5b80516000106200019d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f6772756e64737475636b206d757374206265206e6f6e2d656d7074792073747260448201527f696e670000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b8151620001b290600b9060208501906200022a565b508051620001c89060099060208401906200022a565b5069d3c21bcecceda10000006002819055336000818152600160209081526040808320859055805194855251929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050620002cf565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200026d57805160ff19168380011785556200029d565b828001600101855582156200029d579182015b828111156200029d57825182559160200191906001019062000280565b50620002ab929150620002af565b5090565b620002cc91905b80821115620002ab5760008155600101620002b6565b90565b611f9980620002df6000396000f3006080604052600436106101715763ffffffff60e060020a60003504166306fdde0381146102ba5780630952ad2414610344578063095ea7b3146103755780630e0ad6cd146103ad57806318160ddd146103c2578063218d984b146103e957806323b872dd146103fe57806327cdf22e146104285780632d6d16461461043d578063313ce567146104545780634149db481461047f5780634d2efe4e146104945780634fcb6f3a146104a957806366188463146104be57806370a08231146104e2578063715018a6146105035780638712523e146105185780638da5cb5b1461053957806395d89b411461054e57806397d159e714610563578063a9059cbb1461057b578063ae9b120b1461059f578063b53dfd4d146105b4578063bb3d995d146105d5578063c3e2087c146105ea578063c5f4197914610643578063d73dd62314610664578063dd62ed3e14610688578063e5e5e5d6146106af578063f2fde38b14610708578063fe5ff46814610729575b346000808083116101cc576040805160e560020a62461bcd02815260206004820152601960248201527f6d7573742073656e642077656920696e2066616c6c6261636b00000000000000604482015290519081900360640190fd5b600760009054906101000a9004600160a060020a0316600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561021f57600080fd5b505af1158015610233573d6000803e3d6000fd5b505050506040513d602081101561024957600080fd5b50519150600160a060020a038216156102ac57506040516064830490600160a060020a0383169082156108fc029083906000818181858888f19350505050158015610298573d6000803e3d6000fd5b506102a9838263ffffffff61074a16565b92505b6102b583610761565b505050005b3480156102c657600080fd5b506102cf6107dc565b6040805160208082528351818301528351919283929083019185019080838360005b838110156103095781810151838201526020016102f1565b50505050905090810190601f1680156103365780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561035057600080fd5b5061035961086a565b60408051600160a060020a039092168252519081900360200190f35b34801561038157600080fd5b50610399600160a060020a0360043516602435610882565b604080519115158252519081900360200190f35b3480156103b957600080fd5b506102cf6108e8565b3480156103ce57600080fd5b506103d7610943565b60408051918252519081900360200190f35b3480156103f557600080fd5b5061035961094a565b34801561040a57600080fd5b50610399600160a060020a0360043581169060243516604435610959565b34801561043457600080fd5b50610359610bca565b34801561044957600080fd5b50610452610bd9565b005b34801561046057600080fd5b50610469610de2565b6040805160ff9092168252519081900360200190f35b34801561048b57600080fd5b506103d7610de7565b3480156104a057600080fd5b50610452610dee565b3480156104b557600080fd5b506103d7610e86565b3480156104ca57600080fd5b50610399600160a060020a0360043516602435610e8c565b3480156104ee57600080fd5b506103d7600160a060020a0360043516610f7b565b34801561050f57600080fd5b50610452610f96565b34801561052457600080fd5b506103d7600160a060020a0360043516611002565b34801561054557600080fd5b50610359611014565b34801561055a57600080fd5b506102cf611023565b34801561056f57600080fd5b5061045260043561107e565b34801561058757600080fd5b50610399600160a060020a03600435166024356110c8565b3480156105ab57600080fd5b506103d7611337565b3480156105c057600080fd5b506103d7600160a060020a0360043516611349565b3480156105e157600080fd5b5061035961135b565b3480156105f657600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526104529436949293602493928401919081908401838280828437509497506113739650505050505050565b34801561064f57600080fd5b506103d7600160a060020a0360043516611615565b34801561067057600080fd5b50610399600160a060020a0360043516602435611627565b34801561069457600080fd5b506103d7600160a060020a03600435811690602435166116c0565b3480156106bb57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526104529436949293602493928401919081908401838280828437509497506116eb9650505050505050565b34801561071457600080fd5b50610452600160a060020a0360043516611965565b34801561073557600080fd5b506103d7600160a060020a0360043516611988565b60008282111561075657fe5b508082035b92915050565b6002546107a090610786836d04ee2d6d415b85acef810000000063ffffffff61199a16565b81151561078f57fe5b60045491900463ffffffff6119c316565b60045560408051828152905133917f630819c75b5dd0ad6507f10e821c0d57f89fa4d9005de30999ec5380475c190e919081900360200190a250565b600b805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156108625780601f1061083757610100808354040283529160200191610862565b820191906000526020600020905b81548152906001019060200180831161084557829003601f168201915b505050505081565b737223b032180cdb06be7a3d634b1e10032111f36781565b336000818152600360209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b600a805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156108625780601f1061083757610100808354040283529160200191610862565b6002545b90565b600754600160a060020a031681565b600080600760009054906101000a9004600160a060020a0316600160a060020a031663bd4dc0246040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156109af57600080fd5b505af11580156109c3573d6000803e3d6000fd5b505050506040513d60208110156109d957600080fd5b505160405160e260020a632accc68d028152602060048201908152600b805460026000196101006001841615020190911604602484018190529394503093600160a060020a0386169363ab331a34939182916044019084908015610a7e5780601f10610a5357610100808354040283529160200191610a7e565b820191906000526020600020905b815481529060010190602001808311610a6157829003601f168201915b505092505050602060405180830381600087803b158015610a9e57600080fd5b505af1158015610ab2573d6000803e3d6000fd5b505050506040513d6020811015610ac857600080fd5b5051600160a060020a031614610b16576040805160e560020a62461bcd0281526020600482015260196024820152600080516020611f4e833981519152604482015290519081900360640190fd5b600160a060020a0384166000908152600d6020526040902054831015610bac576040805160e560020a62461bcd02815260206004820152603c60248201527f746f6b656e73207472616e73666572726564206c657373207468616e205f746f60448201527f2773206d696e696d756d206163636570746564207472616e7366657200000000606482015290519081900360840190fd5b610bb685856119d0565b610bc1858585611b3d565b95945050505050565b600854600160a060020a031681565b600054600160a060020a03163314610bf057600080fd5b600754604080517fbd4dc0240000000000000000000000000000000000000000000000000000000081529051600092600160a060020a03169163bd4dc02491600480830192602092919082900301818787803b158015610c4f57600080fd5b505af1158015610c63573d6000803e3d6000fd5b505050506040513d6020811015610c7957600080fd5b505160405160e260020a632accc68d028152602060048201908152600b805460026000196101006001841615020190911604602484018190529394503093600160a060020a0386169363ab331a34939182916044019084908015610d1e5780601f10610cf357610100808354040283529160200191610d1e565b820191906000526020600020905b815481529060010190602001808311610d0157829003601f168201915b505092505050602060405180830381600087803b158015610d3e57600080fd5b505af1158015610d52573d6000803e3d6000fd5b505050506040513d6020811015610d6857600080fd5b5051600160a060020a031614610db6576040805160e560020a62461bcd0281526020600482015260196024820152600080516020611f4e833981519152604482015290519081900360640190fd5b6040517f90e0d0c4d2e69c415a2ab6549106d0109508782ce24b7ee2a4c915d16d6f442290600090a150565b601281565b620f424081565b6000610df933611cb4565b503360008181526005602052604080822080549083905590516d04ee2d6d415b85acef810000000090910492916108fc841502918491818181858888f19350505050158015610e4c573d6000803e3d6000fd5b5060408051828152905133917f97e6e78d2df94abb37cadd04b8120a3ff229c90b3495b36dadc97ce7b49542c4919081900360200190a250565b60045481565b336000908152600360209081526040808320600160a060020a0386168452909152812054808310610ee057336000908152600360209081526040808320600160a060020a0388168452909152812055610f15565b610ef0818463ffffffff61074a16565b336000908152600360209081526040808320600160a060020a03891684529091529020555b336000818152600360209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526001602052604090205490565b600054600160a060020a03163314610fad57600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600c6020526000908152604090205481565b600054600160a060020a031681565b6009805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156108625780601f1061083757610100808354040283529160200191610862565b336000818152600d6020908152604091829020849055815184815291517f78740ad3fc624a380e4fe5a911bf18a8c8906c414f66ebd39a7332e007f6bd179281900390910190a250565b600080600760009054906101000a9004600160a060020a0316600160a060020a031663bd4dc0246040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561111e57600080fd5b505af1158015611132573d6000803e3d6000fd5b505050506040513d602081101561114857600080fd5b505160405160e260020a632accc68d028152602060048201908152600b805460026000196101006001841615020190911604602484018190529394503093600160a060020a0386169363ab331a349391829160440190849080156111ed5780601f106111c2576101008083540402835291602001916111ed565b820191906000526020600020905b8154815290600101906020018083116111d057829003601f168201915b505092505050602060405180830381600087803b15801561120d57600080fd5b505af1158015611221573d6000803e3d6000fd5b505050506040513d602081101561123757600080fd5b5051600160a060020a031614611285576040805160e560020a62461bcd0281526020600482015260196024820152600080516020611f4e833981519152604482015290519081900360640190fd5b600160a060020a0384166000908152600d602052604090205483101561131b576040805160e560020a62461bcd02815260206004820152603c60248201527f746f6b656e73207472616e73666572726564206c657373207468616e205f746f60448201527f2773206d696e696d756d206163636570746564207472616e7366657200000000606482015290519081900360840190fd5b61132533856119d0565b61132f8484611d57565b949350505050565b6d04ee2d6d415b85acef810000000081565b60066020526000908152604090205481565b73e72ad2a335ae18e6c7cdb6daeb64b0330883cd5681565b600054600160a060020a0316331461138a57600080fd5b600754604080517fbd4dc0240000000000000000000000000000000000000000000000000000000081529051600092600160a060020a03169163bd4dc02491600480830192602092919082900301818787803b1580156113e957600080fd5b505af11580156113fd573d6000803e3d6000fd5b505050506040513d602081101561141357600080fd5b505160405160e260020a632accc68d028152602060048201908152600b805460026000196101006001841615020190911604602484018190529394503093600160a060020a0386169363ab331a349391829160440190849080156114b85780601f1061148d576101008083540402835291602001916114b8565b820191906000526020600020905b81548152906001019060200180831161149b57829003601f168201915b505092505050602060405180830381600087803b1580156114d857600080fd5b505af11580156114ec573d6000803e3d6000fd5b505050506040513d602081101561150257600080fd5b5051600160a060020a031614611550576040805160e560020a62461bcd0281526020600482015260196024820152600080516020611f4e833981519152604482015290519081900360640190fd5b815161156390600a906020850190611eb5565b50604080516020808252600a8054600260001961010060018416150201909116049183018290527fad196774a690990acc23d32559dba72fc1b9c73f59d8422bd17967ddc2f954db939092918291820190849080156116035780601f106115d857610100808354040283529160200191611603565b820191906000526020600020905b8154815290600101906020018083116115e657829003601f168201915b50509250505060405180910390a15050565b600d6020526000908152604090205481565b336000908152600360209081526040808320600160a060020a038616845290915281205461165b908363ffffffff6119c316565b336000818152600360209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b600054600160a060020a0316331461170257600080fd5b600754604080517fbd4dc0240000000000000000000000000000000000000000000000000000000081529051600092600160a060020a03169163bd4dc02491600480830192602092919082900301818787803b15801561176157600080fd5b505af1158015611775573d6000803e3d6000fd5b505050506040513d602081101561178b57600080fd5b505160405160e260020a632accc68d028152602060048201908152600b805460026000196101006001841615020190911604602484018190529394503093600160a060020a0386169363ab331a349391829160440190849080156118305780601f1061180557610100808354040283529160200191611830565b820191906000526020600020905b81548152906001019060200180831161181357829003601f168201915b505092505050602060405180830381600087803b15801561185057600080fd5b505af1158015611864573d6000803e3d6000fd5b505050506040513d602081101561187a57600080fd5b5051600160a060020a0316146118c8576040805160e560020a62461bcd0281526020600482015260196024820152600080516020611f4e833981519152604482015290519081900360640190fd5b7f3fc9d3aeefe19f2feac0add8378d900a8ff50068294ec91d46814fcc8ff5c164826040518080602001828103825283818151815260200191508051906020019080838360005b8381101561192757818101518382015260200161190f565b50505050905090810190601f1680156119545780820380516001836020036101000a031916815260200191505b509250505060405180910390a15050565b600054600160a060020a0316331461197c57600080fd5b61198581611e38565b50565b60056020526000908152604090205481565b60008215156119ab5750600061075b565b508181028183828115156119bb57fe5b041461075b57fe5b8181018281101561075b57fe5b600860009054906101000a9004600160a060020a0316600160a060020a03166393e59dc16040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611a2357600080fd5b505af1158015611a37573d6000803e3d6000fd5b505050506040513d6020811015611a4d57600080fd5b5051604080517f0988ca8c000000000000000000000000000000000000000000000000000000008152600160a060020a03848116600483015260248201839052600a60448301527f617574686f72697a656400000000000000000000000000000000000000000000606483015291519190921691630988ca8c91608480830192600092919082900301818387803b158015611ae757600080fd5b505af1158015611afb573d6000803e3d6000fd5b50505050611b0882611cb4565b611b1181611cb4565b600160a060020a039182166000908152600c602052604080822043908190559290931681529190912055565b600160a060020a038316600090815260016020526040812054821115611b6257600080fd5b600160a060020a0384166000908152600360209081526040808320338452909152902054821115611b9257600080fd5b600160a060020a0383161515611ba757600080fd5b600160a060020a038416600090815260016020526040902054611bd0908363ffffffff61074a16565b600160a060020a038086166000908152600160205260408082209390935590851681522054611c05908363ffffffff6119c316565b600160a060020a038085166000908152600160209081526040808320949094559187168152600382528281203382529091522054611c49908363ffffffff61074a16565b600160a060020a03808616600081815260036020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b600160a060020a038116600090815260066020526040812054600454611cf991611ce4919063ffffffff61074a16565b611ced84610f7b565b9063ffffffff61199a16565b600160a060020a038316600090815260056020526040902054909150611d25908263ffffffff6119c316565b600160a060020a0390921660009081526005602090815260408083209490945560045460069091529290209190915550565b33600090815260016020526040812054821115611d7357600080fd5b600160a060020a0383161515611d8857600080fd5b33600090815260016020526040902054611da8908363ffffffff61074a16565b3360009081526001602052604080822092909255600160a060020a03851681522054611dda908363ffffffff6119c316565b600160a060020a0384166000818152600160209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600160a060020a0381161515611e4d57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611ef657805160ff1916838001178555611f23565b82800160010185558215611f23579182015b82811115611f23578251825591602001919060010190611f08565b50611f2f929150611f33565b5090565b61094791905b80821115611f2f5760008155600101611f395600696e76616c696420546f6b656e697a656450726f706572747900000000000000a165627a7a72305820109a5cf615a7cd90c719fbcce4f8a4e10f272f224b9baba29fef2a216a486fa50029000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000009626c6f636b696d6d6f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004494d4d4f00000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000009626c6f636b696d6d6f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004494d4d4f00000000000000000000000000000000000000000000000000000000"
}