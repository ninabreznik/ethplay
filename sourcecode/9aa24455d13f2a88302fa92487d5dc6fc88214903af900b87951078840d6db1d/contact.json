{
  "address": "0x5f8c10e936d1558ddde49df5e5555a9b81556b07",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DeMarco",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-20\n*/\n\npragma solidity ^0.4.24;\n\n\n// --------------------------------------------------------------------------------\n// SafeMath library\n// --------------------------------------------------------------------------------\n\nlibrary SafeMath {\n  int256 constant private INT256_MIN = -2**255;\n\n  /**\n  * @dev Multiplies two unsigned integers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Multiplies two signed integers, reverts on overflow.\n  */\n  function mul(int256 a, int256 b) internal pure returns (int256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    require(!(a == -1 && b == INT256_MIN)); // This is the only case of overflow not detected by the check below\n\n    int256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Solidity only automatically asserts when dividing by 0\n    require(b > 0);\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\n  */\n  function div(int256 a, int256 b) internal pure returns (int256) {\n    require(b != 0); // Solidity only automatically asserts when dividing by 0\n    require(!(b == -1 && a == INT256_MIN)); // This is the only case of overflow\n    \n    int256 c = a / b;\n    \n    return c;\n  }\n\n  /**\n  * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n    \n    return c;\n  }\n\n  /**\n  * @dev Subtracts two signed integers, reverts on overflow.\n  */\n  function sub(int256 a, int256 b) internal pure returns (int256) {\n    int256 c = a - b;\n    require((b >= 0 && c <= a) || (b < 0 && c > a));\n    \n    return c;\n  }\n\n  /**\n  * @dev Adds two unsigned integers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n    \n    return c;\n  }\n\n  /**\n  * @dev Adds two signed integers, reverts on overflow.\n  */\n  function add(int256 a, int256 b) internal pure returns (int256) {\n    int256 c = a + b;\n    require((b >= 0 && c >= a) || (b < 0 && c < a));\n    \n    return c;\n  }\n\n  /**\n  * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n\n    return a % b;\n  }\n}\n\n// --------------------------------------------------------------------------------\n// Ownable contract\n// --------------------------------------------------------------------------------\n\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor () internal {\n    _owner = 0xC50c4A28edb6F64Ba76Edb4f83FBa194458DA877; // *** Psssssssst. Who is it??? ***\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns (address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns (bool) {\n    return msg.sender == _owner;\n  }\n}\n\n// --------------------------------------------------------------------------------\n// ERC20 Interface\n// --------------------------------------------------------------------------------\n\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n  function balanceOf(address who) external view returns (uint256);\n  function allowance(address owner, address spender) external view returns (uint256);\n  function transfer(address to, uint256 value) external returns (bool);\n  function approve(address spender, uint256 value) external returns (bool);\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// --------------------------------------------------------------------------------\n// DeMarco\n// --------------------------------------------------------------------------------\n\ncontract DeMarco is IERC20, Ownable {\n  using SafeMath for uint256;\n\n  string public constant name = \"DeMarco\";\n  string public constant symbol = \"DMARCO\";\n  uint8 public constant decimals = 0;\n\n  mapping (address => uint256) private _balances;\n  mapping (address => mapping (address => uint256)) private _allowed;\n  \n  uint256 private _totalSupply;\n\n  constructor(uint256 totalSupply) public {\n    _totalSupply = totalSupply;\n  }\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param owner The address to query the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address owner, address spender) public view returns (uint256) {\n    return _allowed[owner][spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function transfer(address to, uint256 value) public returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another.\n   * Note that while this function emits an Approval event, this is not required as per the specification,\n   * and other compliant implementations may not emit the event.\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    _transfer(from, to, value);\n    emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n    return true;\n  }\n  \n  /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n  function _transfer(address from, address to, uint256 value) internal {\n    require(to != address(0));\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n\n  // --------------------------------------------------------------------------------\n  // *** hint ***\n  // --------------------------------------------------------------------------------\n\n  bool public funded = false;\n\n  function() external payable {\n    require(funded == false, \"Already funded\");\n    funded = true;\n  }\n\n  // Just a plain little boolean flag\n  bool public claimed = false;\n\n  // Hmmm ... interesting.\n  function tellMeASecret(string _data) external onlyOwner {\n    bytes32 input = keccak256(abi.encodePacked(keccak256(abi.encodePacked(_data))));\n    bytes32 secret = keccak256(abi.encodePacked(0x59a1fa9f9ea2f92d3ebf4aa606d774f5b686ebbb12da71e6036df86323995769));\n\n    require(input == secret, \"Invalid secret!\");\n\n    require(claimed == false, \"Already claimed!\");\n    _balances[msg.sender] = totalSupply();\n    claimed = true;\n\n    emit Transfer(address(0), msg.sender, totalSupply());\n  }\n\n  // What's that?\n  function aaandItBurnsBurnsBurns(address _account, uint256 _value) external onlyOwner {\n    require(_balances[_account] > 42, \"No more tokens can be burned!\");\n    require(_value == 1, \"That did not work. You still need to find the meaning of life!\");\n\n    // Watch out! Don't get burned :P\n    _burn(_account, _value);\n\n    // Niceee #ttfm\n    _account.transfer(address(this).balance);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burn(address account, uint256 value) internal {\n    require(account != address(0), \"Invalid address!\");\n\n    _totalSupply = _totalSupply.sub(value);\n    _balances[account] = _balances[account].sub(value);\n\n    emit Transfer(account, address(0), value);\n  }\n\n  // --------------------------------------------------------------------------------\n  // *** hint ***\n  // --------------------------------------------------------------------------------\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000002b"
}