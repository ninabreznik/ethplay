{
  "address": "0xd2bae9a30a40376d25353773010ffe52dba0d688",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Heroes",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-06\n*/\n\npragma solidity ^0.4.24;\n\n// File: node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() internal {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol\n\n/**\n * @title IERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface IERC165 {\n\n  /**\n   * @notice Query if a contract implements an interface\n   * @param interfaceId The interface identifier, as specified in ERC-165\n   * @dev Interface identification is specified in ERC-165. This function\n   * uses less than 30,000 gas.\n   */\n  function supportsInterface(bytes4 interfaceId)\n    external\n    view\n    returns (bool);\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721 is IERC165 {\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 indexed tokenId\n  );\n  event Approval(\n    address indexed owner,\n    address indexed approved,\n    uint256 indexed tokenId\n  );\n  event ApprovalForAll(\n    address indexed owner,\n    address indexed operator,\n    bool approved\n  );\n\n  function balanceOf(address owner) public view returns (uint256 balance);\n  function ownerOf(uint256 tokenId) public view returns (address owner);\n\n  function approve(address to, uint256 tokenId) public;\n  function getApproved(uint256 tokenId)\n    public view returns (address operator);\n\n  function setApprovalForAll(address operator, bool _approved) public;\n  function isApprovedForAll(address owner, address operator)\n    public view returns (bool);\n\n  function transferFrom(address from, address to, uint256 tokenId) public;\n  function safeTransferFrom(address from, address to, uint256 tokenId)\n    public;\n\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes data\n  )\n    public;\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ncontract IERC721Receiver {\n  /**\n   * @notice Handle the receipt of an NFT\n   * @dev The ERC721 smart contract calls this function on the recipient\n   * after a `safeTransfer`. This function MUST return the function selector,\n   * otherwise the caller will revert the transaction. The selector to be\n   * returned can be obtained as `this.onERC721Received.selector`. This\n   * function MAY throw to revert and reject the transfer.\n   * Note: the ERC721 contract address is always the message sender.\n   * @param operator The address which called `safeTransferFrom` function\n   * @param from The address which previously owned the token\n   * @param tokenId The NFT identifier which is being transferred\n   * @param data Additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n   */\n  function onERC721Received(\n    address operator,\n    address from,\n    uint256 tokenId,\n    bytes data\n  )\n    public\n    returns(bytes4);\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/utils/Address.sol\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   * as the code is not actually created until after the constructor finishes.\n   * @param account address of the account to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address account) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(account) }\n    return size > 0;\n  }\n\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol\n\n/**\n * @title ERC165\n * @author Matt Condon (@shrugs)\n * @dev Implements ERC165 using a lookup table.\n */\ncontract ERC165 is IERC165 {\n\n  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n  /**\n   * 0x01ffc9a7 ===\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\n   */\n\n  /**\n   * @dev a mapping of interface id to whether or not it's supported\n   */\n  mapping(bytes4 => bool) private _supportedInterfaces;\n\n  /**\n   * @dev A contract implementing SupportsInterfaceWithLookup\n   * implement ERC165 itself\n   */\n  constructor()\n    internal\n  {\n    _registerInterface(_InterfaceId_ERC165);\n  }\n\n  /**\n   * @dev implement supportsInterface(bytes4) using a lookup table\n   */\n  function supportsInterface(bytes4 interfaceId)\n    external\n    view\n    returns (bool)\n  {\n    return _supportedInterfaces[interfaceId];\n  }\n\n  /**\n   * @dev internal method for registering an interface\n   */\n  function _registerInterface(bytes4 interfaceId)\n    internal\n  {\n    require(interfaceId != 0xffffffff);\n    _supportedInterfaces[interfaceId] = true;\n  }\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721 is ERC165, IERC721 {\n\n  using SafeMath for uint256;\n  using Address for address;\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n  // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n  // Mapping from token ID to owner\n  mapping (uint256 => address) private _tokenOwner;\n\n  // Mapping from token ID to approved address\n  mapping (uint256 => address) private _tokenApprovals;\n\n  // Mapping from owner to number of owned token\n  mapping (address => uint256) private _ownedTokensCount;\n\n  // Mapping from owner to operator approvals\n  mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n  /*\n   * 0x80ac58cd ===\n   *   bytes4(keccak256('balanceOf(address)')) ^\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\n   *   bytes4(keccak256('approve(address,uint256)')) ^\n   *   bytes4(keccak256('getApproved(uint256)')) ^\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n   */\n\n  constructor()\n    public\n  {\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(_InterfaceId_ERC721);\n  }\n\n  /**\n   * @dev Gets the balance of the specified address\n   * @param owner address to query the balance of\n   * @return uint256 representing the amount owned by the passed address\n   */\n  function balanceOf(address owner) public view returns (uint256) {\n    require(owner != address(0));\n    return _ownedTokensCount[owner];\n  }\n\n  /**\n   * @dev Gets the owner of the specified token ID\n   * @param tokenId uint256 ID of the token to query the owner of\n   * @return owner address currently marked as the owner of the given token ID\n   */\n  function ownerOf(uint256 tokenId) public view returns (address) {\n    address owner = _tokenOwner[tokenId];\n    require(owner != address(0));\n    return owner;\n  }\n\n  /**\n   * @dev Approves another address to transfer the given token ID\n   * The zero address indicates there is no approved address.\n   * There can only be one approved address per token at a given time.\n   * Can only be called by the token owner or an approved operator.\n   * @param to address to be approved for the given token ID\n   * @param tokenId uint256 ID of the token to be approved\n   */\n  function approve(address to, uint256 tokenId) public {\n    address owner = ownerOf(tokenId);\n    require(to != owner);\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n    _tokenApprovals[tokenId] = to;\n    emit Approval(owner, to, tokenId);\n  }\n\n  /**\n   * @dev Gets the approved address for a token ID, or zero if no address set\n   * Reverts if the token ID does not exist.\n   * @param tokenId uint256 ID of the token to query the approval of\n   * @return address currently approved for the given token ID\n   */\n  function getApproved(uint256 tokenId) public view returns (address) {\n    require(_exists(tokenId));\n    return _tokenApprovals[tokenId];\n  }\n\n  /**\n   * @dev Sets or unsets the approval of a given operator\n   * An operator is allowed to transfer all tokens of the sender on their behalf\n   * @param to operator address to set the approval\n   * @param approved representing the status of the approval to be set\n   */\n  function setApprovalForAll(address to, bool approved) public {\n    require(to != msg.sender);\n    _operatorApprovals[msg.sender][to] = approved;\n    emit ApprovalForAll(msg.sender, to, approved);\n  }\n\n  /**\n   * @dev Tells whether an operator is approved by a given owner\n   * @param owner owner address which you want to query the approval of\n   * @param operator operator address which you want to query the approval of\n   * @return bool whether the given operator is approved by the given owner\n   */\n  function isApprovedForAll(\n    address owner,\n    address operator\n  )\n    public\n    view\n    returns (bool)\n  {\n    return _operatorApprovals[owner][operator];\n  }\n\n  /**\n   * @dev Transfers the ownership of a given token ID to another address\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param from current owner of the token\n   * @param to address to receive the ownership of the given token ID\n   * @param tokenId uint256 ID of the token to be transferred\n  */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  )\n    public\n  {\n    require(_isApprovedOrOwner(msg.sender, tokenId));\n    require(to != address(0));\n\n    _clearApproval(from, tokenId);\n    _removeTokenFrom(from, tokenId);\n    _addTokenTo(to, tokenId);\n\n    emit Transfer(from, to, tokenId);\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   *\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param from current owner of the token\n   * @param to address to receive the ownership of the given token ID\n   * @param tokenId uint256 ID of the token to be transferred\n  */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  )\n    public\n  {\n    // solium-disable-next-line arg-overflow\n    safeTransferFrom(from, to, tokenId, \"\");\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param from current owner of the token\n   * @param to address to receive the ownership of the given token ID\n   * @param tokenId uint256 ID of the token to be transferred\n   * @param _data bytes data to send along with a safe transfer check\n   */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes _data\n  )\n    public\n  {\n    transferFrom(from, to, tokenId);\n    // solium-disable-next-line arg-overflow\n    require(_checkOnERC721Received(from, to, tokenId, _data));\n  }\n\n  /**\n   * @dev Returns whether the specified token exists\n   * @param tokenId uint256 ID of the token to query the existence of\n   * @return whether the token exists\n   */\n  function _exists(uint256 tokenId) internal view returns (bool) {\n    address owner = _tokenOwner[tokenId];\n    return owner != address(0);\n  }\n\n  /**\n   * @dev Returns whether the given spender can transfer a given token ID\n   * @param spender address of the spender to query\n   * @param tokenId uint256 ID of the token to be transferred\n   * @return bool whether the msg.sender is approved for the given token ID,\n   *  is an operator of the owner, or is the owner of the token\n   */\n  function _isApprovedOrOwner(\n    address spender,\n    uint256 tokenId\n  )\n    internal\n    view\n    returns (bool)\n  {\n    address owner = ownerOf(tokenId);\n    // Disable solium check because of\n    // https://github.com/duaraghav8/Solium/issues/175\n    // solium-disable-next-line operator-whitespace\n    return (\n      spender == owner ||\n      getApproved(tokenId) == spender ||\n      isApprovedForAll(owner, spender)\n    );\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param to The address that will own the minted token\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address to, uint256 tokenId) internal {\n    require(to != address(0));\n    _addTokenTo(to, tokenId);\n    emit Transfer(address(0), to, tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address owner, uint256 tokenId) internal {\n    _clearApproval(owner, tokenId);\n    _removeTokenFrom(owner, tokenId);\n    emit Transfer(owner, address(0), tokenId);\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event.\n   * @param to address representing the new owner of the given token ID\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function _addTokenTo(address to, uint256 tokenId) internal {\n    require(_tokenOwner[tokenId] == address(0));\n    _tokenOwner[tokenId] = to;\n    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event,\n   * and doesn't clear approvals.\n   * @param from address representing the previous owner of the given token ID\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\n    require(ownerOf(tokenId) == from);\n    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n    _tokenOwner[tokenId] = address(0);\n  }\n\n  /**\n   * @dev Internal function to invoke `onERC721Received` on a target address\n   * The call is not executed if the target address is not a contract\n   * @param from address representing the previous owner of the given token ID\n   * @param to target address that will receive the tokens\n   * @param tokenId uint256 ID of the token to be transferred\n   * @param _data bytes optional data to send along with the call\n   * @return whether the call correctly returned the expected magic value\n   */\n  function _checkOnERC721Received(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes _data\n  )\n    internal\n    returns (bool)\n  {\n    if (!to.isContract()) {\n      return true;\n    }\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\n      msg.sender, from, tokenId, _data);\n    return (retval == _ERC721_RECEIVED);\n  }\n\n  /**\n   * @dev Private function to clear current approval of a given token ID\n   * Reverts if the given address is not indeed the owner of the token\n   * @param owner owner of the token\n   * @param tokenId uint256 ID of the token to be transferred\n   */\n  function _clearApproval(address owner, uint256 tokenId) private {\n    require(ownerOf(tokenId) == owner);\n    if (_tokenApprovals[tokenId] != address(0)) {\n      _tokenApprovals[tokenId] = address(0);\n    }\n  }\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721Enumerable is IERC721 {\n  function totalSupply() public view returns (uint256);\n  function tokenOfOwnerByIndex(\n    address owner,\n    uint256 index\n  )\n    public\n    view\n    returns (uint256 tokenId);\n\n  function tokenByIndex(uint256 index) public view returns (uint256);\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Enumerable.sol\n\ncontract ERC721Enumerable is ERC165, ERC721, IERC721Enumerable {\n  // Mapping from owner to list of owned token IDs\n  mapping(address => uint256[]) private _ownedTokens;\n\n  // Mapping from token ID to index of the owner tokens list\n  mapping(uint256 => uint256) private _ownedTokensIndex;\n\n  // Array with all token ids, used for enumeration\n  uint256[] private _allTokens;\n\n  // Mapping from token id to position in the allTokens array\n  mapping(uint256 => uint256) private _allTokensIndex;\n\n  bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\n  /**\n   * 0x780e9d63 ===\n   *   bytes4(keccak256('totalSupply()')) ^\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\n   */\n\n  /**\n   * @dev Constructor function\n   */\n  constructor() public {\n    // register the supported interface to conform to ERC721 via ERC165\n    _registerInterface(_InterfaceId_ERC721Enumerable);\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n   * @param owner address owning the tokens list to be accessed\n   * @param index uint256 representing the index to be accessed of the requested tokens list\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n   */\n  function tokenOfOwnerByIndex(\n    address owner,\n    uint256 index\n  )\n    public\n    view\n    returns (uint256)\n  {\n    require(index < balanceOf(owner));\n    return _ownedTokens[owner][index];\n  }\n\n  /**\n   * @dev Gets the total amount of tokens stored by the contract\n   * @return uint256 representing the total amount of tokens\n   */\n  function totalSupply() public view returns (uint256) {\n    return _allTokens.length;\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of all the tokens in this contract\n   * Reverts if the index is greater or equal to the total number of tokens\n   * @param index uint256 representing the index to be accessed of the tokens list\n   * @return uint256 token ID at the given index of the tokens list\n   */\n  function tokenByIndex(uint256 index) public view returns (uint256) {\n    require(index < totalSupply());\n    return _allTokens[index];\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * This function is internal due to language limitations, see the note in ERC721.sol.\n   * It is not intended to be called by custom derived contracts: in particular, it emits no Transfer event.\n   * @param to address representing the new owner of the given token ID\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function _addTokenTo(address to, uint256 tokenId) internal {\n    super._addTokenTo(to, tokenId);\n    uint256 length = _ownedTokens[to].length;\n    _ownedTokens[to].push(tokenId);\n    _ownedTokensIndex[tokenId] = length;\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * This function is internal due to language limitations, see the note in ERC721.sol.\n   * It is not intended to be called by custom derived contracts: in particular, it emits no Transfer event,\n   * and doesn't clear approvals.\n   * @param from address representing the previous owner of the given token ID\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\n    super._removeTokenFrom(from, tokenId);\n\n    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\n    // then delete the last slot.\n    uint256 tokenIndex = _ownedTokensIndex[tokenId];\n    uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\n    uint256 lastToken = _ownedTokens[from][lastTokenIndex];\n\n    _ownedTokens[from][tokenIndex] = lastToken;\n    // This also deletes the contents at the last position of the array\n    _ownedTokens[from].length--;\n\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n    // be zero. Then we can make sure that we will remove tokenId from the ownedTokens list since we are first swapping\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n    _ownedTokensIndex[tokenId] = 0;\n    _ownedTokensIndex[lastToken] = tokenIndex;\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param to address the beneficiary that will own the minted token\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address to, uint256 tokenId) internal {\n    super._mint(to, tokenId);\n\n    _allTokensIndex[tokenId] = _allTokens.length;\n    _allTokens.push(tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param owner owner of the token to burn\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address owner, uint256 tokenId) internal {\n    super._burn(owner, tokenId);\n\n    // Reorg all tokens array\n    uint256 tokenIndex = _allTokensIndex[tokenId];\n    uint256 lastTokenIndex = _allTokens.length.sub(1);\n    uint256 lastToken = _allTokens[lastTokenIndex];\n\n    _allTokens[tokenIndex] = lastToken;\n    _allTokens[lastTokenIndex] = 0;\n\n    _allTokens.length--;\n    _allTokensIndex[tokenId] = 0;\n    _allTokensIndex[lastToken] = tokenIndex;\n  }\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Metadata.sol\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721Metadata is IERC721 {\n  function name() external view returns (string);\n  function symbol() external view returns (string);\n  function tokenURI(uint256 tokenId) external view returns (string);\n}\n\n// File: contracts/ERC721Metadata.sol\n\n//import \"../node_modules/openzeppelin-solidity/contracts/math/Safemath.sol\";\n\ncontract ERC721Metadata is ERC165, ERC721, IERC721Metadata {\n  using SafeMath for uint256;\n\n  event LockUpdate(uint256 indexed tokenId, uint256 fromLockedTo, uint256 fromLockId, uint256 toLockedTo, uint256 toLockId, uint256 callId);\n  event StatsUpdate(uint256 indexed tokenId, uint256 fromLevel, uint256 fromWins, uint256 fromLosses, uint256 toLevel, uint256 toWins, uint256 toLosses);\n\n  // Token name\n  string private _name;\n\n  // Token symbol\n  string private _symbol;\n\n  // Optional mapping for token URIs\n  string private _baseURI;\n\n  string private _description;\n\n  string private _url;\n\n  struct Character {\n    uint256 mintedAt;\n    uint256 genes;\n    uint256 lockedTo;\n    uint256 lockId;\n    uint256 level;\n    uint256 wins;\n    uint256 losses;\n  }\n\n  mapping(uint256 => Character) characters; // tokenId => Character\n\n\n  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n  /**\n   * 0x5b5e139f ===\n   *   bytes4(keccak256('name()')) ^\n   *   bytes4(keccak256('symbol()')) ^\n   *   bytes4(keccak256('tokenURI(uint256)'))\n   */\n\n  /**\n   * @dev Constructor function\n   */\n  constructor(string name, string symbol, string baseURI, string description, string url) public {\n    _name = name;\n    _symbol = symbol;\n    _baseURI = baseURI;\n    _description = description;\n    _url = url;\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(InterfaceId_ERC721Metadata);\n  }\n\n  /**\n   * @dev Gets the token name\n   * @return string representing the token name\n   */\n  function name() external view returns (string) {\n    return _name;\n  }\n\n  /**\n   * @dev Gets the token symbol\n   * @return string representing the token symbol\n   */\n  function symbol() external view returns (string) {\n    return _symbol;\n  }\n\n  /**\n   * @dev Gets the contract description\n   * @return string representing the contract description\n   */\n  function description() external view returns (string) {\n    return _description;\n  }\n\n  /**\n * @dev Gets the project url\n * @return string representing the project url\n */\n  function url() external view returns (string) {\n    return _url;\n  }\n\n  /**\n  * @dev Function to set the token base URI\n  * @param newBaseUri string URI to assign\n  */\n  function _setBaseURI(string newBaseUri) internal {\n    _baseURI = newBaseUri;\n  }\n\n  /**\n  * @dev Function to set the contract description\n  * @param newDescription string contract description to assign\n  */\n  function _setDescription(string newDescription) internal {\n    _description = newDescription;\n  }\n\n  /**\n   * @dev Function to set the project url\n   * @param newUrl string project url to assign\n   */\n  function _setURL(string newUrl) internal {\n    _url = newUrl;\n  }\n\n\n  /**\n   * @dev Returns an URI for a given token ID\n   * Throws if the token ID does not exist. May return an empty string.\n   * @param tokenId uint256 ID of the token to query\n   */\n  function tokenURI(uint256 tokenId) external view returns (string) {\n    require(_exists(tokenId));\n    return string(abi.encodePacked(_baseURI, uint2str(tokenId)));\n  }\n\n  function _setMetadata(uint256 tokenId, uint256 genes, uint256 level) internal {\n    require(_exists(tokenId));\n    //    Character storage character = characters[_tokenId];\n    characters[tokenId] = Character({\n      mintedAt : now,\n      genes : genes,\n      lockedTo : 0,\n      lockId : 0,\n      level : level,\n      wins : 0,\n      losses : 0\n      });\n    emit StatsUpdate(tokenId, 0, 0, 0, level, 0, 0);\n\n  }\n\n\n  function _clearMetadata(uint256 tokenId) internal {\n    require(_exists(tokenId));\n    delete characters[tokenId];\n  }\n\n  /* LOCKS */\n\n  function isFree(uint tokenId) public view returns (bool) {\n    require(_exists(tokenId));\n    return now > characters[tokenId].lockedTo;\n  }\n\n\n  function getLock(uint256 tokenId) external view returns (uint256 lockedTo, uint256 lockId) {\n    require(_exists(tokenId));\n    Character memory c = characters[tokenId];\n    return (c.lockedTo, c.lockId);\n  }\n\n  function getLevel(uint256 tokenId) external view returns (uint256) {\n    require(_exists(tokenId));\n    return characters[tokenId].level;\n  }\n\n  function getGenes(uint256 tokenId) external view returns (uint256) {\n    require(_exists(tokenId));\n    return characters[tokenId].genes;\n  }\n\n  function getRace(uint256 tokenId) external view returns (uint256) {\n    require(_exists(tokenId));\n    return characters[tokenId].genes & 0xFFFF;\n  }\n\n  function getCharacter(uint256 tokenId) external view returns (\n    uint256 mintedAt,\n    uint256 genes,\n    uint256 race,\n    uint256 lockedTo,\n    uint256 lockId,\n    uint256 level,\n    uint256 wins,\n    uint256 losses\n  ) {\n    require(_exists(tokenId));\n    Character memory c = characters[tokenId];\n    return (c.mintedAt, c.genes, c.genes & 0xFFFF, c.lockedTo, c.lockId, c.level, c.wins, c.losses);\n  }\n\n  function _setLock(uint256 tokenId, uint256 lockedTo, uint256 lockId, uint256 callId) internal returns (bool) {\n    require(isFree(tokenId));\n    Character storage c = characters[tokenId];\n    emit LockUpdate(tokenId, c.lockedTo, c.lockId, lockedTo, lockId, callId);\n    c.lockedTo = lockedTo;\n    c.lockId = lockId;\n    return true;\n  }\n\n  /* CHARACTER LOGIC */\n\n  function _addWin(uint256 tokenId, uint256 _winsCount, uint256 _levelUp) internal returns (bool) {\n    require(_exists(tokenId));\n    Character storage c = characters[tokenId];\n    uint prevWins = c.wins;\n    uint prevLevel = c.level;\n    c.wins = c.wins.add(_winsCount);\n    c.level = c.level.add(_levelUp);\n    emit StatsUpdate(tokenId, prevLevel, prevWins, c.losses, c.level, c.wins, c.losses);\n    return true;\n  }\n\n  function _addLoss(uint256 tokenId, uint256 _lossesCount, uint256 _levelDown) internal returns (bool) {\n    require(_exists(tokenId));\n    Character storage c = characters[tokenId];\n    uint prevLosses = c.losses;\n    uint prevLevel = c.level;\n    c.losses = c.losses.add(_lossesCount);\n    c.level = c.level > _levelDown ? c.level.sub(_levelDown) : 1;\n    emit StatsUpdate(tokenId, prevLevel, c.wins, prevLosses, c.level, c.wins, c.losses);\n    return true;\n  }\n\n  /**\n  * @dev Convert uint to string\n  * @param i The uint to convert\n  * @return A string representation of uint.\n  */\n  function uint2str(uint i) internal pure returns (string) {\n    if (i == 0) return \"0\";\n    uint j = i;\n    uint len;\n    while (j != 0) {\n      len++;\n      j /= 10;\n    }\n    bytes memory bstr = new bytes(len);\n    uint k = len - 1;\n    while (i != 0) {\n      bstr[k--] = byte(48 + i % 10);\n      i /= 10;\n    }\n    return string(bstr);\n  }\n\n\n}\n\n// File: lib/HasAgents.sol\n\n/**\n * @title agents\n * @dev Library for managing addresses assigned to a agent.\n */\nlibrary Agents {\n  using Address for address;\n\n  struct Data {\n    uint id;\n    bool exists;\n    bool allowance;\n  }\n\n  struct Agent {\n    mapping(address => Data) data;\n    mapping(uint => address) list;\n  }\n\n  /**\n   * @dev give an account access to this agent\n   */\n  function add(Agent storage agent, address account, uint id, bool allowance) internal {\n    require(!exists(agent, account));\n\n    agent.data[account] = Data({\n      id : id,\n      exists : true,\n      allowance : allowance\n      });\n    agent.list[id] = account;\n  }\n\n  /**\n   * @dev remove an account's access to this agent\n   */\n  function remove(Agent storage agent, address account) internal {\n    require(exists(agent, account));\n\n    //if it not updated agent - clean list record\n    if (agent.list[agent.data[account].id] == account) {\n      delete agent.list[agent.data[account].id];\n    }\n    delete agent.data[account];\n  }\n\n  /**\n   * @dev check if an account has this agent\n   * @return bool\n   */\n  function exists(Agent storage agent, address account) internal view returns (bool) {\n    require(account != address(0));\n    //auto prevent existing of agents with updated address and same id\n    return agent.data[account].exists && agent.list[agent.data[account].id] == account;\n  }\n\n  /**\n  * @dev get agent id of the account\n  * @return uint\n  */\n  function id(Agent storage agent, address account) internal view returns (uint) {\n    require(exists(agent, account));\n    return agent.data[account].id;\n  }\n\n  function byId(Agent storage agent, uint agentId) internal view returns (address) {\n    address account = agent.list[agentId];\n    require(account != address(0));\n    require(agent.data[account].exists && agent.data[account].id == agentId);\n    return account;\n  }\n\n  function allowance(Agent storage agent, address account) internal view returns (bool) {\n    require(exists(agent, account));\n    return account.isContract() && agent.data[account].allowance;\n  }\n\n\n}\n\ncontract HasAgents is Ownable {\n  using Agents for Agents.Agent;\n\n  event AgentAdded(address indexed account);\n  event AgentRemoved(address indexed account);\n\n  Agents.Agent private agents;\n\n  constructor() internal {\n    _addAgent(msg.sender, 0, false);\n  }\n\n  modifier onlyAgent() {\n    require(isAgent(msg.sender));\n    _;\n  }\n\n  function isAgent(address account) public view returns (bool) {\n    return agents.exists(account);\n  }\n\n  function addAgent(address account, uint id, bool allowance) public onlyOwner {\n    _addAgent(account, id, allowance);\n  }\n\n  function removeAgent(address account) public onlyOwner {\n    _removeAgent(account);\n  }\n\n  function renounceAgent() public {\n    _removeAgent(msg.sender);\n  }\n\n  function _addAgent(address account, uint id, bool allowance) internal {\n    agents.add(account, id, allowance);\n    emit AgentAdded(account);\n  }\n\n  function _removeAgent(address account) internal {\n    agents.remove(account);\n    emit AgentRemoved(account);\n  }\n\n  function getAgentId(address account) public view returns (uint) {\n    return agents.id(account);\n  }\n\n//  function getCallerAgentId() public view returns (uint) {\n//    return agents.id(msg.sender);\n//  }\n\n  function getAgentById(uint id) public view returns (address) {\n    return agents.byId(id);\n  }\n\n  function isAgentHasAllowance(address account) public view returns (bool) {\n    return agents.allowance(account);\n  }\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\n\n/**\n * @title Helps contracts guard against reentrancy attacks.\n * @author Remco Bloemen <[email protected]π.com>, Eenae <[email protected]>\n * @dev If you mark a function `nonReentrant`, you should also\n * mark it `external`.\n */\ncontract ReentrancyGuard {\n\n  /// @dev counter to allow mutex lock with only one SSTORE operation\n  uint256 private _guardCounter;\n\n  constructor() internal {\n    // The counter starts at one to prevent changing it from zero to a non-zero\n    // value, which is a more expensive operation.\n    _guardCounter = 1;\n  }\n\n  /**\n   * @dev Prevents a contract from calling itself, directly or indirectly.\n   * Calling a `nonReentrant` function from another `nonReentrant`\n   * function is not supported. It is possible to prevent this from happening\n   * by making the `nonReentrant` function external, and make it call a\n   * `private` function that does the actual work.\n   */\n  modifier nonReentrant() {\n    _guardCounter += 1;\n    uint256 localCounter = _guardCounter;\n    _;\n    require(localCounter == _guardCounter);\n  }\n\n}\n\n// File: lib/HasDepositary.sol\n\n/**\n * @title Contracts that should be able to recover tokens\n * @author SylTi\n * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n * This will prevent any accidental loss of tokens.\n */\ncontract HasDepositary is Ownable, ReentrancyGuard  {\n\n  event Depositary(address depositary);\n\n  address private _depositary;\n\n//  constructor() internal {\n//    _depositary = msg.sender;\n//  }\n\n  /// @notice The fallback function payable\n  function() external payable {\n    require(msg.value > 0);\n//    _depositary.transfer(msg.value);\n  }\n\n  function depositary() external view returns (address) {\n    return _depositary;\n  }\n\n  function setDepositary(address newDepositary) external onlyOwner {\n    require(newDepositary != address(0));\n    require(_depositary == address(0));\n    _depositary = newDepositary;\n    emit Depositary(newDepositary);\n  }\n\n  function withdraw() external onlyOwner nonReentrant {\n    uint256 balance = address(this).balance;\n    require(balance > 0);\n    if (_depositary == address(0)) {\n      owner().transfer(balance);\n    } else {\n      _depositary.transfer(balance);\n    }\n  }\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: lib/CanReclaimToken.sol\n\n/**\n * @title Contracts that should be able to recover tokens\n * @author SylTi\n * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n * This will prevent any accidental loss of tokens.\n */\ncontract CanReclaimToken is Ownable {\n\n  /**\n   * @dev Reclaim all ERC20 compatible tokens\n   * @param token ERC20 The address of the token contract\n   */\n  function reclaimToken(IERC20 token) external onlyOwner {\n    if (address(token) == address(0)) {\n      owner().transfer(address(this).balance);\n      return;\n    }\n    uint256 balance = token.balanceOf(this);\n    token.transfer(owner(), balance);\n  }\n\n}\n\n// File: contracts/Heroes.sol\n\ninterface AgentContract {\n  function isAllowed(uint _tokenId) external returns (bool);\n}\n\ncontract Heroes is Ownable, ERC721, ERC721Enumerable, ERC721Metadata, HasAgents, HasDepositary {\n\n  uint256 private lastId = 1000;\n\n  event Mint(address indexed to, uint256 indexed tokenId);\n  event Burn(address indexed from, uint256 indexed tokenId);\n\n\n  constructor() HasAgents() ERC721Metadata(\n      \"CRYPTO HEROES\", //name\n      \"CH ⚔️\", //symbol\n      \"https://api.cryptoheroes.app/hero/\", //baseURI\n      \"The first blockchain game in the world with famous characters and fights built on real cryptocurrency exchange quotations.\", //description\n      \"https://cryptoheroes.app\" //url\n  ) public {}\n\n  /**\n   * @dev Function to set the token base URI\n   * @param uri string URI to assign\n   */\n  function setBaseURI(string uri) external onlyOwner {\n    _setBaseURI(uri);\n  }\n  function setDescription(string description) external onlyOwner {\n    _setDescription(description);\n  }\n  function setURL(string url) external onlyOwner {\n    _setURL(url);\n  }\n\n  /**\n   * @dev override\n   */\n  function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n    return (\n    super._isApprovedOrOwner(spender, tokenId) ||\n    //approve tx from agents on behalf user\n    //agent's functions must have onlyOwnerOf modifier to prevent phishing from 3-d party contracts\n    (isAgent(spender) && super._isApprovedOrOwner(tx.origin, tokenId)) ||\n    //just for exceptional cases, no reason to abuse\n    owner() == spender\n    );\n  }\n\n\n  /**\n    * @dev Mints a token to an address\n    * @param to The address that will receive the minted tokens.\n    * @param genes token genes\n    * @param level token level\n    * @return A new token id.\n    */\n  function mint(address to, uint256 genes, uint256 level) public onlyAgent returns (uint) {\n    lastId = lastId.add(1);\n    return mint(lastId, to, genes, level);\n//    _mint(to, lastId);\n//    _setMetadata(lastId, genes, level);\n//    emit Mint(to, lastId);\n//    return lastId;\n  }\n\n  /**\n  * @dev Mints a token with specific id to an address\n  * @param to The address that will receive the minted tokens.\n  * @param genes token genes\n  * @param level token level\n  * @return A new token id.\n  */\n  function mint(uint256 tokenId, address to, uint256 genes, uint256 level) public onlyAgent returns (uint) {\n    _mint(to, tokenId);\n    _setMetadata(tokenId, genes, level);\n    emit Mint(to, tokenId);\n    return tokenId;\n  }\n\n\n  /**\n * @dev Function to burn tokens from sender address\n * @param tokenId The token id to burn.\n * @return A burned token id.\n */\n  function burn(uint256 tokenId) public returns (uint) {\n    require(_isApprovedOrOwner(msg.sender, tokenId));\n    address owner = ownerOf(tokenId);\n    _clearMetadata(tokenId);\n    _burn(owner, tokenId);\n    emit Burn(owner, tokenId);\n    return tokenId;\n  }\n\n\n  /* CHARACTER LOGIC */\n\n  function addWin(uint256 _tokenId, uint _winsCount, uint _levelUp) external onlyAgent returns (bool){\n    require(_addWin(_tokenId, _winsCount, _levelUp));\n    return true;\n  }\n\n  function addLoss(uint256 _tokenId, uint _lossesCount, uint _levelDown) external onlyAgent returns (bool){\n    require(_addLoss(_tokenId, _lossesCount, _levelDown));\n    return true;\n  }\n\n  /* LOCKS */\n\n  /*\n   * Принудительно пере-блокируем свободного персонажа c текущего агента на указанный\n   */\n  function lock(uint256 _tokenId, uint256 _lockedTo, bool _onlyFreeze) external onlyAgent returns(bool) {\n    require(_exists(_tokenId));\n    uint agentId = getAgentId(msg.sender);\n    Character storage c = characters[_tokenId];\n    if (c.lockId != 0 && agentId != c.lockId) {\n      //если текущий агент другой, то вызываем его функция \"проверки  персонажа\"\n      address a = getAgentById(c.lockId);\n      if (isAgentHasAllowance(a)) {\n        AgentContract ac = AgentContract(a);\n        require(ac.isAllowed(_tokenId));\n      }\n    }\n    require(_setLock(_tokenId, _lockedTo, _onlyFreeze ? c.lockId : agentId, agentId));\n    return true;\n  }\n\n  function unlock(uint256 _tokenId) external onlyAgent returns (bool){\n    require(_exists(_tokenId));\n    uint agentId = getAgentId(msg.sender);\n    //only current owned agent allowed\n    require(agentId == characters[_tokenId].lockId);\n    require(_setLock(_tokenId, 0, 0, agentId));\n    return true;\n  }\n\n  function isCallerAgentOf(uint _tokenId) public view returns (bool) {\n    require(_exists(_tokenId));\n    return isAgent(msg.sender) && getAgentId(msg.sender) == characters[_tokenId].lockId;\n  }\n\n  /**\n  * @dev Transfers the ownership of a given token ID from the owner to another address\n  * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n  * Requires the msg sender to be the owner, approved, or operator\n  * @param to address to receive the ownership of the given token ID\n  * @param tokenId uint256 ID of the token to be transferred\n */\n  function transfer(address to, uint256 tokenId) public {\n    transferFrom(msg.sender, to, tokenId);\n  }\n}",
  "bytecode": "60806040526103e86014553480156200001757600080fd5b506040805190810160405280600d81526020017f43525950544f204845524f4553000000000000000000000000000000000000008152506040805190810160405280600981526020017f434820e29a94efb88f0000000000000000000000000000000000000000000000815250606060405190810160405280602281526020017f68747470733a2f2f6170692e63727970746f6865726f65732e6170702f68657281526020017f6f2f00000000000000000000000000000000000000000000000000000000000081525060a060405190810160405280607a81526020017f54686520666972737420626c6f636b636861696e2067616d6520696e2074686581526020017f20776f726c6420776974682066616d6f7573206368617261637465727320616e81526020017f6420666967687473206275696c74206f6e207265616c2063727970746f63757281526020017f72656e63792065786368616e67652071756f746174696f6e732e0000000000008152506040805190810160405280601881526020017f68747470733a2f2f63727970746f6865726f65732e6170700000000000000000815250620001fd6301ffc9a77c01000000000000000000000000000000000000000000000000000000000262000380640100000000026401000000009004565b60018054600160a060020a031916331790819055604051600160a060020a0391909116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36200027d7f80ac58cd0000000000000000000000000000000000000000000000000000000064010000000062000380810204565b620002b17f780e9d630000000000000000000000000000000000000000000000000000000064010000000062000380810204565b8451620002c690600a9060208801906200055a565b508351620002dc90600b9060208701906200055a565b508251620002f290600c9060208601906200055a565b5081516200030890600d9060208501906200055a565b5080516200031e90600e9060208401906200055a565b50620003537f5b5e139f0000000000000000000000000000000000000000000000000000000064010000000062000380810204565b50505050506200037533600080620003ed640100000000026401000000009004565b6001601255620005ff565b7fffffffff000000000000000000000000000000000000000000000000000000008082161415620003b057600080fd5b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152602081905260409020805460ff19166001179055565b6200040a60108484846401000000006200276a6200044382021704565b604051600160a060020a038416907ff68e73cec97f2d70aa641fb26e87a4383686e2efacb648f2165aeb02ac562ec590600090a2505050565b620004588484640100000000620004e8810204565b156200046357600080fd5b6040805160608101825283815260016020808301828152941515838501908152600160a060020a0390971660008181528983528581209451855595519383018054985115156101000261ff001995151560ff19909a16999099179490941697909717909255938352949092019093529091208054600160a060020a0319169091179055565b6000600160a060020a03821615156200050057600080fd5b600160a060020a03821660009081526020849052604090206001015460ff168015620005535750600160a060020a0380831660008181526020868152604080832054835260018801909152902054909116145b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200059d57805160ff1916838001178555620005cd565b82800160010185558215620005cd579182015b82811115620005cd578251825591602001919060010190620005b0565b50620005db929150620005df565b5090565b620005fc91905b80821115620005db5760008155600101620005e6565b90565b612984806200060f6000396000f30060806040526004361061025b5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a7811461026a578063042324b6146102b557806306fdde03146102e8578063081812fc14610372578063095ea7b3146103a65780630d71aba5146103ca5780630e060378146103e2578063156e29f6146103f757806318160ddd1461041e5780631ffbb0641461043357806321cd84e8146104545780632231ffaf1461047257806323b872dd146104935780632f745c59146104bd5780633ccfd60b146104e157806342842e0e146104f657806342966c68146105205780634f6ccce71461053857806355f804b3146105505780635600f04f146105705780636198e339146105855780636352211e1461059d57806369780c8e146105b557806370a08231146105d6578063715018a6146105f75780637284e4161461060c578063773434081461062157806386481d40146106415780638da5cb5b146106595780638f32d59b1461066e57806390c3f38f1461068357806395d89b41146106a357806397a6278e146106b85780639c642043146106d9578063a16473b114610702578063a22cb4651461071a578063a2e4b12e14610740578063a69b97d514610758578063a9059cbb14610776578063b88d4fde1461079a578063bf2c8a9414610809578063c692f4cf14610833578063c87b56dd14610848578063ce4400da14610860578063d68f4dd114610878578063da12ffc5146108a9578063dabb0531146108c9578063e985e9c514610922578063f2fde38b14610949578063f44c253a1461096a575b6000341161026857600080fd5b005b34801561027657600080fd5b506102a17bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1960043516610982565b604080519115158252519081900360200190f35b3480156102c157600080fd5b506102d6600160a060020a03600435166109b6565b60408051918252519081900360200190f35b3480156102f457600080fd5b506102fd6109cf565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561033757818101518382015260200161031f565b50505050905090810190601f1680156103645780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561037e57600080fd5b5061038a600435610a66565b60408051600160a060020a039092168252519081900360200190f35b3480156103b257600080fd5b50610268600160a060020a0360043516602435610a98565b3480156103d657600080fd5b506102d6600435610b41565b3480156103ee57600080fd5b5061038a610b71565b34801561040357600080fd5b506102d6600160a060020a0360043516602435604435610b80565b34801561042a57600080fd5b506102d6610bc3565b34801561043f57600080fd5b506102a1600160a060020a0360043516610bc9565b34801561046057600080fd5b506102a1600435602435604435610bdc565b34801561047e57600080fd5b50610268600160a060020a0360043516610c12565b34801561049f57600080fd5b50610268600160a060020a0360043581169060243516604435610ca4565b3480156104c957600080fd5b506102d6600160a060020a0360043516602435610d32565b3480156104ed57600080fd5b50610268610d7f565b34801561050257600080fd5b50610268600160a060020a0360043581169060243516604435610e56565b34801561052c57600080fd5b506102d6600435610e77565b34801561054457600080fd5b506102d6600435610eea565b34801561055c57600080fd5b506102686004803560248101910135610f1f565b34801561057c57600080fd5b506102fd610f6b565b34801561059157600080fd5b506102a1600435610fcc565b3480156105a957600080fd5b5061038a600435611041565b3480156105c157600080fd5b506102a1600160a060020a0360043516611065565b3480156105e257600080fd5b506102d6600160a060020a0360043516611078565b34801561060357600080fd5b506102686110ab565b34801561061857600080fd5b506102fd611108565b34801561062d57600080fd5b506102686004803560248101910135611169565b34801561064d57600080fd5b506102d66004356111b5565b34801561066557600080fd5b5061038a6111e1565b34801561067a57600080fd5b506102a16111f0565b34801561068f57600080fd5b506102686004803560248101910135611201565b3480156106af57600080fd5b506102fd61124d565b3480156106c457600080fd5b50610268600160a060020a03600435166112ae565b3480156106e557600080fd5b50610268600160a060020a036004351660243560443515156112cd565b34801561070e57600080fd5b506102a16004356112eb565b34801561072657600080fd5b50610268600160a060020a03600435166024351515611333565b34801561074c57600080fd5b506102d66004356113b7565b34801561076457600080fd5b506102a16004356024356044356113e3565b34801561078257600080fd5b50610268600160a060020a0360043516602435611404565b3480156107a657600080fd5b50604080516020601f60643560048181013592830184900484028501840190955281845261026894600160a060020a03813581169560248035909216956044359536956084940191819084018382808284375094975061140f9650505050505050565b34801561081557600080fd5b506102d6600435600160a060020a0360243516604435606435611437565b34801561083f57600080fd5b506102686114a1565b34801561085457600080fd5b506102fd6004356114ac565b34801561086c57600080fd5b506102a1600435611593565b34801561088457600080fd5b506108906004356115c1565b6040805192835260208301919091528051918290030190f35b3480156108b557600080fd5b506102a1600435602435604435151561164a565b3480156108d557600080fd5b506108e16004356117a0565b604080519889526020890197909752878701959095526060870193909352608086019190915260a085015260c084015260e083015251908190036101000190f35b34801561092e57600080fd5b506102a1600160a060020a0360043581169060243516611849565b34801561095557600080fd5b50610268600160a060020a0360043516611877565b34801561097657600080fd5b5061038a600435611893565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660009081526020819052604090205460ff1690565b60006109c960108363ffffffff6118a616565b92915050565b600a8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610a5b5780601f10610a3057610100808354040283529160200191610a5b565b820191906000526020600020905b815481529060010190602001808311610a3e57829003601f168201915b505050505090505b90565b6000610a71826118da565b1515610a7c57600080fd5b50600090815260036020526040902054600160a060020a031690565b6000610aa382611041565b9050600160a060020a038381169082161415610abe57600080fd5b33600160a060020a0382161480610ada5750610ada8133611849565b1515610ae557600080fd5b6000828152600360205260408082208054600160a060020a031916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000610b4c826118da565b1515610b5757600080fd5b506000908152600f602052604090206001015461ffff1690565b601354600160a060020a031690565b6000610b8b33610bc9565b1515610b9657600080fd5b601454610baa90600163ffffffff6118f716565b6014819055610bbb90858585611437565b949350505050565b60085490565b60006109c960108363ffffffff61191016565b6000610be733610bc9565b1515610bf257600080fd5b610bfd84848461197c565b1515610c0857600080fd5b5060019392505050565b610c1a6111f0565b1515610c2557600080fd5b600160a060020a0381161515610c3a57600080fd5b601354600160a060020a031615610c5057600080fd5b60138054600160a060020a038316600160a060020a0319909116811790915560408051918252517f6d4b566baee391b13a311c8772a2ff7bb24a2921cd335786b7da9fa124bc200e9181900360200190a150565b610cae3382611a62565b1515610cb957600080fd5b600160a060020a0382161515610cce57600080fd5b610cd88382611ab7565b610ce28382611b19565b610cec8282611c20565b8082600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000610d3d83611078565b8210610d4857600080fd5b600160a060020a0383166000908152600660205260409020805483908110610d6c57fe5b9060005260206000200154905092915050565b6000610d896111f0565b1515610d9457600080fd5b50601280546001019081905530319060008211610db057600080fd5b601354600160a060020a03161515610e0857610dca6111e1565b600160a060020a03166108fc839081150290604051600060405180830381858888f19350505050158015610e02573d6000803e3d6000fd5b50610e44565b601354604051600160a060020a039091169083156108fc029084906000818181858888f19350505050158015610e42573d6000803e3d6000fd5b505b6012548114610e5257600080fd5b5050565b610e72838383602060405190810160405280600081525061140f565b505050565b600080610e843384611a62565b1515610e8f57600080fd5b610e9883611041565b9050610ea383611c69565b610ead8184611cb7565b6040518390600160a060020a038316907fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca590600090a35090919050565b6000610ef4610bc3565b8210610eff57600080fd5b6008805483908110610f0d57fe5b90600052602060002001549050919050565b610f276111f0565b1515610f3257600080fd5b610e5282828080601f01602080910402602001604051908101604052809392919081815260200183838082843750611d73945050505050565b600e8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610a5b5780601f10610a3057610100808354040283529160200191610a5b565b600080610fd833610bc9565b1515610fe357600080fd5b610fec836118da565b1515610ff757600080fd5b611000336109b6565b6000848152600f6020526040902060030154909150811461102057600080fd5b61102d8360008084611d86565b151561103857600080fd5b50600192915050565b600081815260026020526040812054600160a060020a03168015156109c957600080fd5b60006109c960108363ffffffff611e2516565b6000600160a060020a038216151561108f57600080fd5b50600160a060020a031660009081526004602052604090205490565b6110b36111f0565b15156110be57600080fd5b600154604051600091600160a060020a0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360018054600160a060020a0319169055565b600d8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610a5b5780601f10610a3057610100808354040283529160200191610a5b565b6111716111f0565b151561117c57600080fd5b610e5282828080601f01602080910402602001604051908101604052809392919081815260200183838082843750611e7d945050505050565b60006111c0826118da565b15156111cb57600080fd5b506000908152600f602052604090206004015490565b600154600160a060020a031690565b600154600160a060020a0316331490565b6112096111f0565b151561121457600080fd5b610e5282828080601f01602080910402602001604051908101604052809392919081815260200183838082843750611e90945050505050565b600b8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610a5b5780601f10610a3057610100808354040283529160200191610a5b565b6112b66111f0565b15156112c157600080fd5b6112ca81611ea3565b50565b6112d56111f0565b15156112e057600080fd5b610e72838383611eeb565b60006112f6826118da565b151561130157600080fd5b61130a33610bc9565b80156109c957506000828152600f602052604090206003015461132c336109b6565b1492915050565b600160a060020a03821633141561134957600080fd5b336000818152600560209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b60006113c2826118da565b15156113cd57600080fd5b506000908152600f602052604090206001015490565b60006113ee33610bc9565b15156113f957600080fd5b610bfd848484611f37565b610e52338383610ca4565b61141a848484610ca4565b6114268484848461200e565b151561143157600080fd5b50505050565b600061144233610bc9565b151561144d57600080fd5b611457848661218b565b6114628584846121da565b6040518590600160a060020a038616907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688590600090a350929392505050565b6114aa33611ea3565b565b60606114b7826118da565b15156114c257600080fd5b600c6114cd836122ea565b604051602001808380546001816001161561010002031660029004801561152b5780601f1061150957610100808354040283529182019161152b565b820191906000526020600020905b815481529060010190602001808311611517575b5050825160208401908083835b602083106115575780518252601f199092019160209182019101611538565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040529050919050565b600061159e826118da565b15156115a957600080fd5b506000908152600f6020526040902060020154421190565b6000806115cc61285e565b6115d5846118da565b15156115e057600080fd5b5050506000818152600f6020908152604091829020825160e08101845281548152600182015492810192909252600281015492820183905260038101546060830181905260048201546080840152600582015460a084015260069091015460c08301529050915091565b600080600080600061165b33610bc9565b151561166657600080fd5b61166f886118da565b151561167a57600080fd5b611683336109b6565b6000898152600f6020526040902060038101549195509350158015906116ad575082600301548414155b1561176b576116bf8360030154611893565b91506116ca82611065565b1561176b5781905080600160a060020a0316635c5f6ede896040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561173457600080fd5b505af1158015611748573d6000803e3d6000fd5b505050506040513d602081101561175e57600080fd5b5051151561176b57600080fd5b61178788888861177b5786611781565b85600301545b87611d86565b151561179257600080fd5b506001979650505050505050565b6000806000806000806000806117b461285e565b6117bd8a6118da565b15156117c857600080fd5b50505060009687525050600f6020908152604095869020865160e081018852815480825260018301549382018490526002830154988201899052600383015460608301819052600484015460808401819052600585015460a0850181905260069095015460c0909401849052919a949961ffff8b1699509750955093509091565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61187f6111f0565b151561188a57600080fd5b6112ca81612411565b60006109c960108363ffffffff61248216565b60006118b28383611910565b15156118bd57600080fd5b50600160a060020a03166000908152602091909152604090205490565b600090815260026020526040902054600160a060020a0316151590565b60008282018381101561190957600080fd5b9392505050565b6000600160a060020a038216151561192757600080fd5b600160a060020a03821660009081526020849052604090206001015460ff168015611909575050600160a060020a03908116600081815260208481526040808320548352600190950190529290922054161490565b60008060008061198b876118da565b151561199657600080fd5b5050506000848152600f60205260409020600681015460048201546119c1828763ffffffff6118f716565b6006840155600483015485106119d85760016119ed565b60048301546119ed908663ffffffff6124f516565b600484018190556005840154600685015460408051858152602081018490528082018790526060810194909452608084019290925260a08301525188917f3a25ba0e1fe2895763fb7b55c2c185e96ca51ece653ce1632d2f4fca6a30abdd919081900360c00190a25060019695505050505050565b6000611a6e838361250c565b80611a8e5750611a7d83610bc9565b8015611a8e5750611a8e328361250c565b80611909575082600160a060020a0316611aa66111e1565b600160a060020a0316149392505050565b81600160a060020a0316611aca82611041565b600160a060020a031614611add57600080fd5b600081815260036020526040902054600160a060020a031615610e525760009081526003602052604090208054600160a060020a031916905550565b6000806000611b288585612563565b600084815260076020908152604080832054600160a060020a0389168452600690925290912054909350611b6390600163ffffffff6124f516565b600160a060020a038616600090815260066020526040902080549193509083908110611b8b57fe5b90600052602060002001549050806006600087600160a060020a0316600160a060020a0316815260200190815260200160002084815481101515611bcb57fe5b6000918252602080832090910192909255600160a060020a0387168152600690915260409020805490611c0290600019830161289c565b50600093845260076020526040808520859055908452909220555050565b6000611c2c83836125ec565b50600160a060020a039091166000908152600660209081526040808320805460018101825590845282842081018590559383526007909152902055565b611c72816118da565b1515611c7d57600080fd5b6000908152600f60205260408120818155600181018290556002810182905560038101829055600481018290556005810182905560060155565b6000806000611cc68585612670565b600084815260096020526040902054600854909350611cec90600163ffffffff6124f516565b9150600882815481101515611cfd57fe5b9060005260206000200154905080600884815481101515611d1a57fe5b60009182526020822001919091556008805484908110611d3657fe5b6000918252602090912001556008805490611d5590600019830161289c565b50600093845260096020526040808520859055908452909220555050565b8051610e5290600c9060208401906128c0565b600080611d9286611593565b1515611d9d57600080fd5b506000858152600f6020908152604091829020600281015460038201548451918252928101929092528183018790526060820186905260808201859052915187917fc41ff4963f0d83bc46dccb4f0f42c3f18ad73869e2ad12ab3a5511838752b6f4919081900360a00190a26002810185905560038101849055600191505b50949350505050565b6000611e318383611910565b1515611e3c57600080fd5b611e4e82600160a060020a03166126c0565b8015611909575050600160a060020a031660009081526020919091526040902060010154610100900460ff1690565b8051610e5290600e9060208401906128c0565b8051610e5290600d9060208401906128c0565b611eb460108263ffffffff6126c816565b604051600160a060020a038216907fed9c8ad8d5a0a66898ea49d2956929c93ae2e8bd50281b2ed897c5d1a6737e0b90600090a250565b611efe601084848463ffffffff61276a16565b604051600160a060020a038416907ff68e73cec97f2d70aa641fb26e87a4383686e2efacb648f2165aeb02ac562ec590600090a2505050565b600080600080611f46876118da565b1515611f5157600080fd5b5050506000848152600f6020526040902060058101546004820154611f7c828763ffffffff6118f716565b60058401556004830154611f96908663ffffffff6118f716565b600484018190556006840154600585015460408051858152602081018790528082018490526060810194909452608084019190915260a08301919091525188917f3a25ba0e1fe2895763fb7b55c2c185e96ca51ece653ce1632d2f4fca6a30abdd919081900360c00190a25060019695505050505050565b60008061202385600160a060020a03166126c0565b15156120325760019150611e1c565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03898116602485015260448401889052608060648501908152875160848601528751918a169463150b7a0294938c938b938b93909160a490910190602085019080838360005b838110156120c55781810151838201526020016120ad565b50505050905090810190601f1680156120f25780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561211457600080fd5b505af1158015612128573d6000803e3d6000fd5b505050506040513d602081101561213e57600080fd5b50517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f150b7a0200000000000000000000000000000000000000000000000000000000149695505050505050565b6121958282612803565b600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3015550565b6121e3836118da565b15156121ee57600080fd5b60e0604051908101604052804281526020018381526020016000815260200160008152602001828152602001600081526020016000815250600f6000858152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c08201518160060155905050827f3a25ba0e1fe2895763fb7b55c2c185e96ca51ece653ce1632d2f4fca6a30abdd60008060008560008060405180878152602001868152602001858152602001848152602001838152602001828152602001965050505050505060405180910390a2505050565b606060008082818515156123335760408051808201909152600181527f300000000000000000000000000000000000000000000000000000000000000060208201529450612408565b8593505b831561234e57600190920191600a84049350612337565b826040519080825280601f01601f19166020018201604052801561237c578160200160208202803883390190505b5091505060001982015b85156124045781516000198201917f01000000000000000000000000000000000000000000000000000000000000006030600a8a0601029184919081106123c957fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a86049550612386565b8194505b50505050919050565b600160a060020a038116151561242657600080fd5b600154604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360018054600160a060020a031916600160a060020a0392909216919091179055565b6000818152600183016020526040812054600160a060020a03168015156124a857600080fd5b600160a060020a03811660009081526020859052604090206001015460ff1680156124ea5750600160a060020a03811660009081526020859052604090205483145b151561190957600080fd5b6000808383111561250557600080fd5b5050900390565b60008061251883611041565b905080600160a060020a031684600160a060020a03161480612553575083600160a060020a031661254884610a66565b600160a060020a0316145b80610bbb5750610bbb8185611849565b81600160a060020a031661257682611041565b600160a060020a03161461258957600080fd5b600160a060020a0382166000908152600460205260409020546125b390600163ffffffff6124f516565b600160a060020a039092166000908152600460209081526040808320949094559181526002909152208054600160a060020a0319169055565b600081815260026020526040902054600160a060020a03161561260e57600080fd5b60008181526002602090815260408083208054600160a060020a031916600160a060020a038716908117909155835260049091529020546126509060016118f7565b600160a060020a0390921660009081526004602052604090209190915550565b61267a8282611ab7565b6126848282611b19565b6040518190600090600160a060020a038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6000903b1190565b6126d28282611910565b15156126dd57600080fd5b600160a060020a0380821660008181526020858152604080832054835260018701909152902054909116141561274157600160a060020a0381166000908152602083815260408083205483526001850190915290208054600160a060020a03191690555b600160a060020a0316600090815260209190915260408120908155600101805461ffff19169055565b6127748484611910565b1561277e57600080fd5b6040805160608101825283815260016020808301828152941515838501908152600160a060020a0390971660008181528983528581209451855595519383018054985115156101000261ff001995151560ff19909a16999099179490941697909717909255938352949092019093529091208054600160a060020a0319169091179055565b600160a060020a038216151561281857600080fd5b6128228282611c20565b6040518190600160a060020a038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60e060405190810160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b815481835581811115610e7257600083815260209020610e7291810190830161293e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061290157805160ff191683800117855561292e565b8280016001018555821561292e579182015b8281111561292e578251825591602001919060010190612913565b5061293a92915061293e565b5090565b610a6391905b8082111561293a57600081556001016129445600a165627a7a723058202b88beb8b91b9de498cb4f276bee76c7fa152616f296ead65e97056256ede7dc0029"
}