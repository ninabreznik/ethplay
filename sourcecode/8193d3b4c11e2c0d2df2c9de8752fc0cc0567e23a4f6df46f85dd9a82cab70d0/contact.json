{
  "address": "0x2d8232aa33f3321d54c9339734de7749452bc124",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Logger",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-02\n*/\n\npragma solidity ^0.4.24;\n\n// File: contracts/interfaces/IOwned.sol\n\n/*\n    Owned Contract Interface\n*/\ncontract IOwned {\n    function transferOwnership(address _newOwner) public;\n    function acceptOwnership() public;\n    function transferOwnershipNow(address newContractOwner) public;\n}\n\n// File: contracts/utility/Owned.sol\n\n/*\n    This is the \"owned\" utility contract used by bancor with one additional function - transferOwnershipNow()\n    \n    The original unmodified version can be found here:\n    https://github.com/bancorprotocol/contracts/commit/63480ca28534830f184d3c4bf799c1f90d113846\n    \n    Provides support and utilities for contract ownership\n*/\ncontract Owned is IOwned {\n    address public owner;\n    address public newOwner;\n\n    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\n\n    /**\n        @dev constructor\n    */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    // allows execution by the owner only\n    modifier ownerOnly {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n        @dev allows transferring the contract ownership\n        the new owner still needs to accept the transfer\n        can only be called by the contract owner\n        @param _newOwner    new contract owner\n    */\n    function transferOwnership(address _newOwner) public ownerOnly {\n        require(_newOwner != owner);\n        newOwner = _newOwner;\n    }\n\n    /**\n        @dev used by a new owner to accept an ownership transfer\n    */\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnerUpdate(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n\n    /**\n        @dev transfers the contract ownership without needing the new owner to accept ownership\n        @param newContractOwner    new contract owner\n    */\n    function transferOwnershipNow(address newContractOwner) ownerOnly public {\n        require(newContractOwner != owner);\n        emit OwnerUpdate(owner, newContractOwner);\n        owner = newContractOwner;\n    }\n\n}\n\n// File: contracts/interfaces/ILogger.sol\n\n/*\n    Logger Contract Interface\n*/\n\ncontract ILogger {\n    function addNewLoggerPermission(address addressToPermission) public;\n    function emitTaskCreated(uint uuid, uint amount) public;\n    function emitProjectCreated(uint uuid, uint amount, address rewardAddress) public;\n    function emitNewSmartToken(address token) public;\n    function emitIssuance(uint256 amount) public;\n    function emitDestruction(uint256 amount) public;\n    function emitTransfer(address from, address to, uint256 value) public;\n    function emitApproval(address owner, address spender, uint256 value) public;\n    function emitGenericLog(string messageType, string message) public;\n}\n\n// File: contracts/Logger.sol\n\n/*\n\nCentralized logger allows backend to easily watch all events on all communities without needing to watch each community individually\n\n*/\ncontract Logger is Owned, ILogger  {\n\n    // Community\n    event TaskCreated(address msgSender, uint _uuid, uint _amount);\n    event ProjectCreated(address msgSender, uint _uuid, uint _amount, address _address);\n\n    // SmartToken\n    // triggered when a smart token is deployed - the _token address is defined for forward compatibility\n    //  in case we want to trigger the event from a factory\n    event NewSmartToken(address msgSender, address _token);\n    // triggered when the total supply is increased\n    event Issuance(address msgSender, uint256 _amount);\n    // triggered when the total supply is decreased\n    event Destruction(address msgSender, uint256 _amount);\n    // erc20\n    event Transfer(address msgSender, address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address msgSender, address indexed _owner, address indexed _spender, uint256 _value);\n\n    // Logger\n    event NewCommunityAddress(address msgSender, address _newAddress);\n\n    event GenericLog(address msgSender, string messageType, string message);\n    mapping (address => bool) public permissionedAddresses;\n\n    modifier hasLoggerPermissions(address _address) {\n        require(permissionedAddresses[_address] == true);\n        _;\n    }\n\n    function addNewLoggerPermission(address addressToPermission) ownerOnly public {\n        permissionedAddresses[addressToPermission] = true;\n    }\n\n    function emitTaskCreated(uint uuid, uint amount) public hasLoggerPermissions(msg.sender) {\n        emit TaskCreated(msg.sender, uuid, amount);\n    }\n\n    function emitProjectCreated(uint uuid, uint amount, address rewardAddress) public hasLoggerPermissions(msg.sender) {\n        emit ProjectCreated(msg.sender, uuid, amount, rewardAddress);\n    }\n\n    function emitNewSmartToken(address token) public hasLoggerPermissions(msg.sender) {\n        emit NewSmartToken(msg.sender, token);\n    }\n\n    function emitIssuance(uint256 amount) public hasLoggerPermissions(msg.sender) {\n        emit Issuance(msg.sender, amount);\n    }\n\n    function emitDestruction(uint256 amount) public hasLoggerPermissions(msg.sender) {\n        emit Destruction(msg.sender, amount);\n    }\n\n    function emitTransfer(address from, address to, uint256 value) public hasLoggerPermissions(msg.sender) {\n        emit Transfer(msg.sender, from, to, value);\n    }\n\n    function emitApproval(address owner, address spender, uint256 value) public hasLoggerPermissions(msg.sender) {\n        emit Approval(msg.sender, owner, spender, value);\n    }\n\n    function emitGenericLog(string messageType, string message) public hasLoggerPermissions(msg.sender) {\n        emit GenericLog(msg.sender, messageType, message);\n    }\n}",
  "bytecode": "6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506112f7806100536000396000f3006080604052600436106100db576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806311376314146100e057806323de66511461013b57806331b7a196146101a85780635687f2b81461025757806379ba5097146102c45780637f45ec91146102db5780638692ac86146103085780638da5cb5b1461034b5780639eb121b5146103a2578063a1e51a79146103e5578063a967f3e714610412578063c9cb0e9b14610469578063d4ee1d90146104ac578063e7a17d8314610503578063f2fde38b1461053a575b600080fd5b3480156100ec57600080fd5b50610121600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061057d565b604051808215151515815260200191505060405180910390f35b34801561014757600080fd5b506101a6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061059d565b005b3480156101b457600080fd5b50610255600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061069c565b005b34801561026357600080fd5b506102c2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061083e565b005b3480156102d057600080fd5b506102d961093d565b005b3480156102e757600080fd5b5061030660048036038101908080359060200190929190505050610adc565b005b34801561031457600080fd5b50610349600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bab565b005b34801561035757600080fd5b50610360610d20565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103ae57600080fd5b506103e3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d45565b005b3480156103f157600080fd5b5061041060048036038101908080359060200190929190505050610dfb565b005b34801561041e57600080fd5b506104676004803603810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610eca565b005b34801561047557600080fd5b506104aa600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fd7565b005b3480156104b857600080fd5b506104c16110d2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561050f57600080fd5b5061053860048036038101908080359060200190929190803590602001909291905050506110f8565b005b34801561054657600080fd5b5061057b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111d0565b005b60026020528060005260406000206000915054906101000a900460ff1681565b3360011515600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156105fd57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fd1398bee19313d6bf672ccb116e51f4a1a947e91c757907f51fbb5b5e56c698f3385604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a350505050565b3360011515600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156106fc57600080fd5b7f862cfccdbcf8ad82910f0c6212dff88a20db6ff7f89c51fd8050ad51db8743b3338484604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200180602001838103835285818151815260200191508051906020019080838360005b8381101561079657808201518184015260208101905061077b565b50505050905090810190601f1680156107c35780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156107fc5780820151818401526020810190506107e1565b50505050905090810190601f1680156108295780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a1505050565b3360011515600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561089e57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fa0175360a15bca328baf7ea85c7b784d58b222a50d0ce760b10dba336d226a613385604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a350505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561099957600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a60405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b3360011515600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515610b3c57600080fd5b7f9cb9c14f7bc76e3a89b796b091850526236115352a198b1e472f00e91376bbcb3383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c0657600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610c6257600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a60405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610da057600080fd5b6001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b3360011515600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515610e5b57600080fd5b7fda3c843ccf08daa06f253595cb1399a1d7f9b6e56e43697f453e49d6df8cf7093383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050565b3360011515600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515610f2a57600080fd5b7fe0c78af137bdc92338aa38865feb63d01891d06ad67f88c4ab4fe4a80586ef4233858585604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200194505050505060405180910390a150505050565b3360011515600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561103757600080fd5b7f05a9bf251e636dc249c4c158eeb5c254768e3c283087ca1e0745d1a9cc17ef5c3383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a15050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3360011515600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561115857600080fd5b7f68dac2ef7ff122a4dd4f78b2ef3cf6512e8079afe1bf2190c1c0ba71496825fa338484604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a1505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561122b57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561128757600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a72305820473b7445ace7dab9e3866ff70878b0cbf78185c3dfc0f5186d8b8fef83fad7370029"
}