{
  "address": "0xb34d2ea7809d1def743989d078dcd52af2f1c6c8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenMerge",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-06\n*/\n\npragma solidity 0.5.2;\n\ncontract ERC20 {\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n}\n\n\ncontract Ownable {\n  event OwnershipTransferred(address indexed oldone, address indexed newone);\n  event ERC20TragetChanged(address indexed oldToken, address indexed newToken);\n\n  address public owner;\n  address public tokenAddr;\n\n  constructor () public {\n    owner = msg.sender;\n    tokenAddr = address(0);\n  }\n\n  modifier onlyOwner () {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function transferOwnership (address newOwner) public returns (bool);\n  function setERC20 (address newTokenAddr) public returns (bool);\n}\n\n\n\ncontract TokenMerge is Ownable {\n\n  function takeStock(address[] memory tokenFrom, uint256[] memory amounts, address[] memory tokenTo) public onlyOwner {\n    ERC20 token = ERC20(tokenAddr);\n    require(tokenFrom.length == amounts.length);\n\n    if (tokenTo.length == 1){\n      for(uint i = 0; i < tokenFrom.length; i++) {\n        require(token.transferFrom(tokenFrom[i], tokenTo[0], amounts[i]));\n      }\n    }\n    else {\n      require(tokenFrom.length == tokenTo.length);\n      for(uint i = 0; i < tokenFrom.length; i++) {\n        require(token.transferFrom(tokenFrom[i], tokenTo[i], amounts[i]));\n      }\n    }\n  }\n\n\n  function flushStock(address[] memory tokenFrom, address tokenTo) public onlyOwner {\n    ERC20 token = ERC20(tokenAddr);\n    require(tokenFrom.length > 0 );\n\n    for(uint i = 0; i < tokenFrom.length; i++) {\n      require(token.transferFrom(tokenFrom[i], tokenTo, token.balanceOf(tokenFrom[i])));\n    }\n  } \n\n\n  function multiSendEth(address payable[] memory addresses) public payable{\n    uint addressesLength = addresses.length;\n    require(addressesLength > 0);\n      for(uint i = 0; i < addressesLength; i++) {\n        addresses[i].transfer(msg.value / addressesLength);\n      }\n    msg.sender.transfer(address(this).balance);\n  }\n\n\n  function transferOwnership (address newOwner) public onlyOwner returns (bool) {\n    require(newOwner != address(0));\n    require(newOwner != owner);\n\n    address oldOwner = owner;\n    owner = newOwner;\n    emit OwnershipTransferred(oldOwner, newOwner);\n    \n    return true;\n  }\n\n\n  function setERC20 (address newTokenAddr) public onlyOwner returns (bool) {\n    require(newTokenAddr != tokenAddr);\n\n    address oldTokenAddr = tokenAddr;\n    tokenAddr = newTokenAddr;\n    emit ERC20TragetChanged(oldTokenAddr, newTokenAddr);\n    \n    return true;\n  }\n}",
  "bytecode": "608060405260008054600160a060020a03199081163317909155600180549091169055610a65806100316000396000f3fe6080604052600436106100745760003560e060020a90048063aafafbf311610052578063aafafbf314610279578063ad8d80bb1461031c578063c29a6fda146103d7578063f2fde38b1461041e57610074565b806315f8bc81146100795780635fbe4d1d146102335780638da5cb5b14610264575b600080fd5b34801561008557600080fd5b506102316004803603606081101561009c57600080fd5b8101906020810181356401000000008111156100b757600080fd5b8201836020820111156100c957600080fd5b803590602001918460208302840111640100000000831117156100eb57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561013b57600080fd5b82018360208201111561014d57600080fd5b8035906020019184602083028401116401000000008311171561016f57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156101bf57600080fd5b8201836020820111156101d157600080fd5b803590602001918460208302840111640100000000831117156101f357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610451945050505050565b005b34801561023f57600080fd5b50610248610692565b60408051600160a060020a039092168252519081900360200190f35b34801561027057600080fd5b506102486106a1565b6102316004803603602081101561028f57600080fd5b8101906020810181356401000000008111156102aa57600080fd5b8201836020820111156102bc57600080fd5b803590602001918460208302840111640100000000831117156102de57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506106b0945050505050565b34801561032857600080fd5b506102316004803603604081101561033f57600080fd5b81019060208101813564010000000081111561035a57600080fd5b82018360208201111561036c57600080fd5b8035906020019184602083028401116401000000008311171561038e57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955050509035600160a060020a031691506107619050565b3480156103e357600080fd5b5061040a600480360360208110156103fa57600080fd5b5035600160a060020a03166108f8565b604080519115158252519081900360200190f35b34801561042a57600080fd5b5061040a6004803603602081101561044157600080fd5b5035600160a060020a031661098f565b600054600160a060020a0316331461046857600080fd5b60015482518451600160a060020a03909216911461048557600080fd5b8151600114156105895760005b84518110156105835781600160a060020a03166323b872dd86838151811015156104b857fe5b906020019060200201518560008151811015156104d157fe5b9060200190602002015187858151811015156104e957fe5b60209081029091018101516040805160e060020a63ffffffff8816028152600160a060020a03958616600482015293909416602484015260448301529151606480830193928290030181600087803b15801561054457600080fd5b505af1158015610558573d6000803e3d6000fd5b505050506040513d602081101561056e57600080fd5b5051151561057b57600080fd5b600101610492565b5061068c565b815184511461059757600080fd5b60005b845181101561068a5781600160a060020a03166323b872dd86838151811015156105c057fe5b9060200190602002015185848151811015156105d857fe5b9060200190602002015187858151811015156105f057fe5b60209081029091018101516040805160e060020a63ffffffff8816028152600160a060020a03958616600482015293909416602484015260448301529151606480830193928290030181600087803b15801561064b57600080fd5b505af115801561065f573d6000803e3d6000fd5b505050506040513d602081101561067557600080fd5b5051151561068257600080fd5b60010161059a565b505b50505050565b600154600160a060020a031681565b600054600160a060020a031681565b8051600081116106bf57600080fd5b60005b8181101561072e5782818151811015156106d857fe5b90602001906020020151600160a060020a03166108fc83348115156106f957fe5b049081150290604051600060405180830381858888f19350505050158015610725573d6000803e3d6000fd5b506001016106c2565b506040513390303180156108fc02916000818181858888f1935050505015801561075c573d6000803e3d6000fd5b505050565b600054600160a060020a0316331461077857600080fd5b6001548251600160a060020a039091169060001061079557600080fd5b60005b835181101561068c5781600160a060020a03166323b872dd85838151811015156107be57fe5b906020019060200201518585600160a060020a03166370a0823189878151811015156107e657fe5b906020019060200201516040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b15801561083957600080fd5b505afa15801561084d573d6000803e3d6000fd5b505050506040513d602081101561086357600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a0394851660048201529290931660248301526044820152905160648083019260209291908290030181600087803b1580156108b957600080fd5b505af11580156108cd573d6000803e3d6000fd5b505050506040513d60208110156108e357600080fd5b505115156108f057600080fd5b600101610798565b60008054600160a060020a0316331461091057600080fd5b600154600160a060020a038381169116141561092b57600080fd5b60018054600160a060020a0384811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907fb79a397b14cd555f03d5c774e5de8b17e3e8e10c38e5b83140ef761da637d82890600090a350600192915050565b60008054600160a060020a031633146109a757600080fd5b600160a060020a03821615156109bc57600080fd5b600054600160a060020a03838116911614156109d757600080fd5b60008054600160a060020a0384811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35060019291505056fea165627a7a72305820ba51e8d7e3a21a94ff1a401de062819a4d747b5946acf80501ad06f806b667d50029"
}