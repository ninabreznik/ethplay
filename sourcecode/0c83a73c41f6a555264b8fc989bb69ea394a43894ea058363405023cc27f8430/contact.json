{
  "address": "0xd65c863764d1127504de5dbd680c4f64fe16f80d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SecurityToken",
  "compilerVersion": "v0.5.3+commit.10d17f24",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-01\n*/\n\npragma solidity ^0.5.3;\n\n// File: c:/st/contracts/IERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n    function approve(address spender, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address who) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: c:/st/contracts/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: c:/st/contracts/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: c:/st/contracts/Lockable.sol\n\ncontract Lockable is Ownable {\n\n\tbool public locked = false;\n\n\tmodifier unLocked() {\n\t\trequire(!locked || isOwner());\n\t\t_;\n\t}\n\n\tfunction lock() public onlyOwner {\n\t\tlocked = true;\n\t}\n\n\tfunction unlock() public onlyOwner {\n\t\tlocked = false;\n\t}\n\n}\n\n// File: c:/st/contracts/Whitelist.sol\n\ncontract Whitelist is Ownable {\n\n\tbool public whiteAll = false;\n\taddress[] whitelist;\n\n\tmodifier isWhitelisted(address addr){\n\t\trequire(isWhitelist(addr) || whiteAll);\n\t\t_;\n\t}\n\n\tfunction addWhitelist(address addr) public onlyOwner{\n\t\trequire(address(0) != addr && !isWhitelist(addr));\n\t\twhitelist.push(addr);\n\t}\n\n\tfunction removeWhitelist(address addr) public onlyOwner{\n\t\trequire(address(0) != addr);\n\t\tfor(uint i=0;i<whitelist.length;i++){\n\t\t\tif(whitelist[i] == addr){\n\t\t\t\twhitelist[i] = whitelist[whitelist.length-1];\n\t\t\t\tdelete(whitelist[whitelist.length-1]);\n\t\t\t\twhitelist.length--;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction isWhitelist(address addr) internal view returns(bool){\n\t\trequire(address(0) != addr);\n\t\tfor(uint i=0;i<whitelist.length;i++){\n\t\t\tif(whitelist[i] == addr){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tfunction whitelistAll() public onlyOwner{\n\t\twhiteAll = true;\n\t}\n\tfunction reverseWhitelistAll() public onlyOwner{\n\t\twhiteAll = false;\n\t}\n\n\tfunction isWhite(address addr) public view returns(bool){\n\t\tif(isWhitelist(addr) || whiteAll){\n\t\t\treturn true;\n\t\t}else{\n\t\t\treturn false;\n\t\t}\n\t}\n\n}\n\n// File: C:/st/contracts/ERC20.sol\n\ncontract ERC20 is IERC20, Lockable, Whitelist {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    address[] private holders;\n\n    uint256 private _totalSupply;\n\n    event KillSwitchUsed(uint timeStamp);\n\n    function mintTokens(address addr, uint amount) public onlyOwner {\n        _mint(addr, amount);\n    }\n    function burnTokens(address addr, uint amount) public onlyOwner {\n        _burn(addr, amount);\n    }\n    function burnAndMint(address from, address to, uint amount) public onlyOwner {\n        _burn(from, amount);\n        _mint(to, amount);\n    }\n    function killSwitch() public onlyOwner {\n        _totalSupply = 0;\n        for(uint i=0;i<holders.length;i++){\n            _balances[holders[i]] = 0;\n        }\n        delete holders;\n        emit KillSwitchUsed(block.timestamp);\n    }\n\n    function addHolder(address addr) internal{\n        require(address(0) != addr);\n        if(!isHolder(addr)){\n            holders.push(addr);\n        }\n    }\n    function removeHolder(address addr) internal{\n        require(address(0) != addr);\n        for(uint i=0;i<holders.length;i++){\n            if(holders[i] == addr){\n                holders[i] = holders[holders.length-1];\n                delete(holders[holders.length-1]);\n                holders.length--;\n                break;\n            }\n        }\n    }\n    function isHolder(address addr) internal view returns(bool){\n        require(address(0) != addr);\n        for(uint i=0;i<holders.length;i++){\n            if(holders[i] == addr){\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function holderCount() public view returns(uint){\n    \treturn holders.length;\n    }\n\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    function transfer(address to, uint256 value) public unLocked isWhitelisted(msg.sender) returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function approve(address spender, uint256 value) public unLocked isWhitelisted(msg.sender) returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public unLocked isWhitelisted(from) returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public unLocked isWhitelisted(msg.sender) returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public unLocked isWhitelisted(msg.sender) returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        if(from != address(0)){\n            if(_balances[from] == 0){\n                removeHolder(from);\n            }\n        }\n        addHolder(to);\n        emit Transfer(from, to, value);\n    }\n\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        addHolder(account);\n        emit Transfer(address(0), account, value);\n    }\n\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        if(_balances[account] == 0){\n            removeHolder(account);\n        }\n        emit Transfer(account, address(0), value);\n    }\n\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    function _burnFrom(address account, uint256 value) internal {\n        _burn(account, value);\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n    }\n}\n\n// File: securitytoken.sol\n\ncontract SecurityToken is ERC20 {\n\tstring public name;\n\tstring public symbol;\n\tuint8 public decimals = 0;\n\tconstructor(string memory _name, string memory _symbol, uint initialSupply) public {\n\t\tname = _name;\n\t\tsymbol = _symbol;\n\t\taddWhitelist(msg.sender);\n\t\t_mint(msg.sender, initialSupply);\n\t}\n}",
  "bytecode": "60806040526000805460a060020a61ffff02191690556008805460ff191690553480156200002c57600080fd5b50604051620019dc380380620019dc833981018060405260608110156200005257600080fd5b8101908080516401000000008111156200006b57600080fd5b820160208101848111156200007f57600080fd5b81516401000000008111828201871017156200009a57600080fd5b50509291906020018051640100000000811115620000b757600080fd5b82016020810184811115620000cb57600080fd5b8151640100000000811182820187101715620000e657600080fd5b505060209091015160008054600160a060020a0319163317808255604051939550919350600160a060020a0391909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3825162000151906006906020860190620004b2565b50815162000167906007906020850190620004b2565b506200017c336401000000006200019a810204565b62000191338264010000000062000240810204565b50505062000554565b620001ad6401000000006200031b810204565b1515620001b957600080fd5b600160a060020a03811615801590620001e35750620001e1816401000000006200032d810204565b155b1515620001ef57600080fd5b6001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6018054600160a060020a031916600160a060020a0392909216919091179055565b600160a060020a03821615156200025657600080fd5b600554620002739082640100000000620010d1620003a882021704565b600555600160a060020a038216600090815260026020526040902054620002a99082640100000000620010d1620003a882021704565b600160a060020a038316600090815260026020526040902055620002d682640100000000620003c2810204565b604080518281529051600160a060020a038416916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b600054600160a060020a031633145b90565b6000600160a060020a03821615156200034557600080fd5b60005b6001548110156200039d5782600160a060020a03166001828154811015156200036d57fe5b600091825260209091200154600160a060020a0316141562000394576001915050620003a3565b60010162000348565b50600090505b919050565b600082820183811015620003bb57600080fd5b9392505050565b600160a060020a0381161515620003d857600080fd5b620003ec8164010000000062000442810204565b15156200043f57600480546001810182556000919091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b018054600160a060020a031916600160a060020a0383161790555b50565b6000600160a060020a03821615156200045a57600080fd5b60005b6004548110156200039d5782600160a060020a03166004828154811015156200048257fe5b600091825260209091200154600160a060020a03161415620004a9576001915050620003a3565b6001016200045d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620004f557805160ff191683800117855562000525565b8280016001018555821562000525579182015b828111156200052557825182559160200191906001019062000508565b506200053392915062000537565b5090565b6200032a91905b808211156200053357600081556001016200053e565b61147880620005646000396000f3fe608060405234801561001057600080fd5b50600436106101ec576000357c0100000000000000000000000000000000000000000000000000000000900480638da5cb5b11610121578063a9059cbb116100bf578063f0dda65c1161008e578063f0dda65c14610518578063f2fde38b14610544578063f80f5dd51461056a578063f83d08ba14610590576101ec565b8063a9059cbb146104ae578063ada14698146104da578063cf309012146104e2578063dd62ed3e146104ea576101ec565b806395d89b41116100fb57806395d89b411461044c578063a348c28914610454578063a457c2d71461047a578063a69df4b5146104a6576101ec565b80638da5cb5b146104185780638f32d59b1461043c57806392617f3614610444576101ec565b8063395093511161018e578063715018a611610168578063715018a6146103ac578063781b09d1146103b457806378c8cda7146103bc5780637b58b0e8146103e2576101ec565b806339509351146103525780635d54e6121461037e57806370a0823114610386576101ec565b806318160ddd116101ca57806318160ddd146102dc5780631aab9a9f146102f657806323b872dd146102fe578063313ce56714610334576101ec565b806306fdde03146101f1578063095ea7b31461026e5780630d1118ce146102ae575b600080fd5b6101f9610598565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561023357818101518382015260200161021b565b50505050905090810190601f1680156102605780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61029a6004803603604081101561028457600080fd5b50600160a060020a038135169060200135610626565b604080519115158252519081900360200190f35b6102da600480360360408110156102c457600080fd5b50600160a060020a03813516906020013561068c565b005b6102e46106ad565b60408051918252519081900360200190f35b6102e46106b4565b61029a6004803603606081101561031457600080fd5b50600160a060020a038135811691602081013590911690604001356106ba565b61033c610761565b6040805160ff9092168252519081900360200190f35b61029a6004803603604081101561036857600080fd5b50600160a060020a03813516906020013561076a565b6102da6107f6565b6102e46004803603602081101561039c57600080fd5b5035600160a060020a0316610830565b6102da61084f565b61029a6108ac565b6102da600480360360208110156103d257600080fd5b5035600160a060020a03166108bc565b6102da600480360360608110156103f857600080fd5b50600160a060020a038135811691602081013590911690604001356109d2565b6104206109fe565b60408051600160a060020a039092168252519081900360200190f35b61029a610a0d565b6102da610a1e565b6101f9610a52565b61029a6004803603602081101561046a57600080fd5b5035600160a060020a0316610aad565b61029a6004803603604081101561049057600080fd5b50600160a060020a038135169060200135610ae1565b6102da610b6d565b61029a600480360360408110156104c457600080fd5b50600160a060020a038135169060200135610ba0565b6102da610bfc565b61029a610ca5565b6102e46004803603604081101561050057600080fd5b50600160a060020a0381358116916020013516610cb5565b6102da6004803603604081101561052e57600080fd5b50600160a060020a038135169060200135610ce0565b6102da6004803603602081101561055a57600080fd5b5035600160a060020a0316610cfd565b6102da6004803603602081101561058057600080fd5b5035600160a060020a0316610d1c565b6102da610da9565b6006805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561061e5780601f106105f35761010080835404028352916020019161061e565b820191906000526020600020905b81548152906001019060200180831161060157829003601f168201915b505050505081565b6000805460a060020a900460ff1615806106435750610643610a0d565b151561064e57600080fd5b3361065881610de2565b8061066c575060005460a860020a900460ff165b151561067757600080fd5b610682338585610e55565b5060019392505050565b610694610a0d565b151561069f57600080fd5b6106a98282610ee1565b5050565b6005545b90565b60045490565b6000805460a060020a900460ff1615806106d757506106d7610a0d565b15156106e257600080fd5b836106ec81610de2565b80610700575060005460a860020a900460ff165b151561070b57600080fd5b610716858585610fa4565b600160a060020a038516600090815260036020908152604080832033808552925290912054610756918791610751908763ffffffff6110bc16565b610e55565b506001949350505050565b60085460ff1681565b6000805460a060020a900460ff1615806107875750610787610a0d565b151561079257600080fd5b3361079c81610de2565b806107b0575060005460a860020a900460ff165b15156107bb57600080fd5b336000818152600360209081526040808320600160a060020a038916845290915290205461068291908690610751908763ffffffff6110d116565b6107fe610a0d565b151561080957600080fd5b6000805475ff000000000000000000000000000000000000000000191660a860020a179055565b600160a060020a0381166000908152600260205260409020545b919050565b610857610a0d565b151561086257600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360008054600160a060020a0319169055565b60005460a860020a900460ff1681565b6108c4610a0d565b15156108cf57600080fd5b600160a060020a03811615156108e457600080fd5b60005b6001548110156106a95781600160a060020a031660018281548110151561090a57fe5b600091825260209091200154600160a060020a031614156109ca5760018054600019810190811061093757fe5b60009182526020909120015460018054600160a060020a03909216918390811061095d57fe5b60009182526020909120018054600160a060020a031916600160a060020a039290921691909117905560018054600019810190811061099857fe5b60009182526020909120018054600160a060020a031916905560018054906109c49060001983016113f0565b506106a9565b6001016108e7565b6109da610a0d565b15156109e557600080fd5b6109ef8382610ee1565b6109f982826110ea565b505050565b600054600160a060020a031690565b600054600160a060020a0316331490565b610a26610a0d565b1515610a3157600080fd5b6000805475ff00000000000000000000000000000000000000000019169055565b6007805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561061e5780601f106105f35761010080835404028352916020019161061e565b6000610ab882610de2565b80610acc575060005460a860020a900460ff165b15610ad95750600161084a565b50600061084a565b6000805460a060020a900460ff161580610afe5750610afe610a0d565b1515610b0957600080fd5b33610b1381610de2565b80610b27575060005460a860020a900460ff165b1515610b3257600080fd5b336000818152600360209081526040808320600160a060020a038916845290915290205461068291908690610751908763ffffffff6110bc16565b610b75610a0d565b1515610b8057600080fd5b6000805474ff000000000000000000000000000000000000000019169055565b6000805460a060020a900460ff161580610bbd5750610bbd610a0d565b1515610bc857600080fd5b33610bd281610de2565b80610be6575060005460a860020a900460ff165b1515610bf157600080fd5b610682338585610fa4565b610c04610a0d565b1515610c0f57600080fd5b600060058190555b600454811015610c6357600060026000600484815481101515610c3657fe5b6000918252602080832090910154600160a060020a03168352820192909252604001902055600101610c17565b50610c7060046000611414565b6040805142815290517f2dbd7f7dbcf6b17b19e09c37f9f1be6f3cfbf99d33d2bc0cf92c7e00060c162d9181900360200190a1565b60005460a060020a900460ff1681565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b610ce8610a0d565b1515610cf357600080fd5b6106a982826110ea565b610d05610a0d565b1515610d1057600080fd5b610d19816111a5565b50565b610d24610a0d565b1515610d2f57600080fd5b600160a060020a03811615801590610d4d5750610d4b81610de2565b155b1515610d5857600080fd5b6001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6018054600160a060020a031916600160a060020a0392909216919091179055565b610db1610a0d565b1515610dbc57600080fd5b6000805474ff0000000000000000000000000000000000000000191660a060020a179055565b6000600160a060020a0382161515610df957600080fd5b60005b600154811015610e4c5782600160a060020a0316600182815481101515610e1f57fe5b600091825260209091200154600160a060020a03161415610e4457600191505061084a565b600101610dfc565b50600092915050565b600160a060020a0382161515610e6a57600080fd5b600160a060020a0383161515610e7f57600080fd5b600160a060020a03808416600081815260036020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b600160a060020a0382161515610ef657600080fd5b600554610f09908263ffffffff6110bc16565b600555600160a060020a038216600090815260026020526040902054610f35908263ffffffff6110bc16565b600160a060020a03831660009081526002602052604090208190551515610f5f57610f5f82611215565b604080518281529051600091600160a060020a038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b600160a060020a0382161515610fb957600080fd5b600160a060020a038316600090815260026020526040902054610fe2908263ffffffff6110bc16565b600160a060020a038085166000908152600260205260408082209390935590841681522054611017908263ffffffff6110d116565b600160a060020a0380841660009081526002602052604090209190915583161561106357600160a060020a03831660009081526002602052604090205415156110635761106383611215565b61106c82611312565b81600160a060020a031683600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000828211156110cb57600080fd5b50900390565b6000828201838110156110e357600080fd5b9392505050565b600160a060020a03821615156110ff57600080fd5b600554611112908263ffffffff6110d116565b600555600160a060020a03821660009081526002602052604090205461113e908263ffffffff6110d116565b600160a060020a03831660009081526002602052604090205561116082611312565b604080518281529051600160a060020a038416916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b600160a060020a03811615156111ba57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360008054600160a060020a031916600160a060020a0392909216919091179055565b600160a060020a038116151561122a57600080fd5b60005b6004548110156106a95781600160a060020a031660048281548110151561125057fe5b600091825260209091200154600160a060020a0316141561130a5760048054600019810190811061127d57fe5b60009182526020909120015460048054600160a060020a0390921691839081106112a357fe5b60009182526020909120018054600160a060020a031916600160a060020a03929092169190911790556004805460001981019081106112de57fe5b60009182526020909120018054600160a060020a031916905560048054906109c49060001983016113f0565b60010161122d565b600160a060020a038116151561132757600080fd5b61133081611386565b1515610d1957600480546001810182556000919091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b018054600160a060020a038316600160a060020a031990911617905550565b6000600160a060020a038216151561139d57600080fd5b60005b600454811015610e4c5782600160a060020a03166004828154811015156113c357fe5b600091825260209091200154600160a060020a031614156113e857600191505061084a565b6001016113a0565b8154818355818111156109f9576000838152602090206109f991810190830161142e565b5080546000825590600052602060002090810190610d1991905b6106b191905b808211156114485760008155600101611434565b509056fea165627a7a7230582043bd8034adcac4579bb07c351d335e5a2e85c9327d5a3166ba4c27d34c0b9f3c0029000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000000000000000000000000000000000000000000770696e6f74746f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003504e540000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000000000000000000000000000000000000000000770696e6f74746f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003504e540000000000000000000000000000000000000000000000000000000000"
}